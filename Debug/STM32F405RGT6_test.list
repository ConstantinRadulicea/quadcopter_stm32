
STM32F405RGT6_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e080  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000289c  0801e210  0801e210  0001f210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020aac  08020aac  0002231c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020aac  08020aac  00021aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020ab4  08020ab4  0002231c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020ab4  08020ab4  00021ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020ab8  08020ab8  00021ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08020abc  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002231c  2**0
                  CONTENTS
 10 .bss          0000a394  2000031c  2000031c  0002231c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000a6b0  2000a6b0  0002231c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002231c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00036abb  00000000  00000000  0002234c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007f1f  00000000  00000000  00058e07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002cf8  00000000  00000000  00060d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000022a1  00000000  00000000  00063a20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000299a9  00000000  00000000  00065cc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037675  00000000  00000000  0008f66a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc05a  00000000  00000000  000c6cdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a2d39  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d910  00000000  00000000  001a2d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001b068c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000031c 	.word	0x2000031c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e1f8 	.word	0x0801e1f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000320 	.word	0x20000320
 80001cc:	0801e1f8 	.word	0x0801e1f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <attitude_controller_init>:
void attitude_controller_init(
    attitude_controller_t* fc,
    float rate_gain,
    float max_angle,
    float max_rate
) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	ed87 0a02 	vstr	s0, [r7, #8]
 800102c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001030:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00e      	beq.n	8001058 <attitude_controller_init+0x38>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(attitude_controller_t));
 800103a:	2234      	movs	r2, #52	@ 0x34
 800103c:	2100      	movs	r1, #0
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f019 fa60 	bl	801a504 <memset>

	fc->rate_gain = rate_gain;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	611a      	str	r2, [r3, #16]
	fc->max_angle = max_angle;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	615a      	str	r2, [r3, #20]
	fc->max_rate = max_rate;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	619a      	str	r2, [r3, #24]
 8001056:	e000      	b.n	800105a <attitude_controller_init+0x3a>
        return;
 8001058:	bf00      	nop

}
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <quat_remove_yaw>:


/* Remove yaw (rotation about world Z) from q */
static quaternion quat_remove_yaw(quaternion q)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09c      	sub	sp, #112	@ 0x70
 8001064:	af00      	add	r7, sp, #0
 8001066:	eeb0 6a40 	vmov.f32	s12, s0
 800106a:	eef0 6a60 	vmov.f32	s13, s1
 800106e:	eeb0 7a41 	vmov.f32	s14, s2
 8001072:	eef0 7a61 	vmov.f32	s15, s3
 8001076:	ed87 6a04 	vstr	s12, [r7, #16]
 800107a:	edc7 6a05 	vstr	s13, [r7, #20]
 800107e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001082:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure q is unit (good practice)
    q = quatnormalize(&q);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f8b0 	bl	80021f0 <quatnormalize>
 8001090:	eeb0 6a40 	vmov.f32	s12, s0
 8001094:	eef0 6a60 	vmov.f32	s13, s1
 8001098:	eeb0 7a41 	vmov.f32	s14, s2
 800109c:	eef0 7a61 	vmov.f32	s15, s3
 80010a0:	ed87 6a04 	vstr	s12, [r7, #16]
 80010a4:	edc7 6a05 	vstr	s13, [r7, #20]
 80010a8:	ed87 7a06 	vstr	s14, [r7, #24]
 80010ac:	edc7 7a07 	vstr	s15, [r7, #28]

    // Twist around world Z: keep only w and z, renormalize
    quaternion q_twist = { q.w, 0.0f, 0.0f, q.z };
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	65fb      	str	r3, [r7, #92]	@ 0x5c

    quaternion q_twist_normalized = quatnormalize(&q_twist);
 80010c4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 f891 	bl	80021f0 <quatnormalize>
 80010ce:	eeb0 6a40 	vmov.f32	s12, s0
 80010d2:	eef0 6a60 	vmov.f32	s13, s1
 80010d6:	eeb0 7a41 	vmov.f32	s14, s2
 80010da:	eef0 7a61 	vmov.f32	s15, s3
 80010de:	ed87 6a10 	vstr	s12, [r7, #64]	@ 0x40
 80010e2:	edc7 6a11 	vstr	s13, [r7, #68]	@ 0x44
 80010e6:	ed87 7a12 	vstr	s14, [r7, #72]	@ 0x48
 80010ea:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    quaternion twist_conj = quatconj(&q_twist_normalized);
 80010ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 f841 	bl	800217a <quatconj>
 80010f8:	eeb0 6a40 	vmov.f32	s12, s0
 80010fc:	eef0 6a60 	vmov.f32	s13, s1
 8001100:	eeb0 7a41 	vmov.f32	s14, s2
 8001104:	eef0 7a61 	vmov.f32	s15, s3
 8001108:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 800110c:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8001110:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8001114:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // swing = q * conj(twist)  -> orientation with yaw removed
    quaternion q_no_yaw = quatmultiply(&q, &twist_conj);
 8001118:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f91f 	bl	8002366 <quatmultiply>
 8001128:	eeb0 6a40 	vmov.f32	s12, s0
 800112c:	eef0 6a60 	vmov.f32	s13, s1
 8001130:	eeb0 7a41 	vmov.f32	s14, s2
 8001134:	eef0 7a61 	vmov.f32	s15, s3
 8001138:	ed87 6a08 	vstr	s12, [r7, #32]
 800113c:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8001140:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8001144:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Optional: normalize to clean tiny numeric errors
    return quatnormalize(&q_no_yaw);
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f84f 	bl	80021f0 <quatnormalize>
 8001152:	eeb0 6a40 	vmov.f32	s12, s0
 8001156:	eef0 6a60 	vmov.f32	s13, s1
 800115a:	eeb0 7a41 	vmov.f32	s14, s2
 800115e:	eef0 7a61 	vmov.f32	s15, s3
 8001162:	ed87 6a18 	vstr	s12, [r7, #96]	@ 0x60
 8001166:	edc7 6a19 	vstr	s13, [r7, #100]	@ 0x64
 800116a:	ed87 7a1a 	vstr	s14, [r7, #104]	@ 0x68
 800116e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 8001172:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001174:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001176:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800117a:	ee06 0a10 	vmov	s12, r0
 800117e:	ee06 1a90 	vmov	s13, r1
 8001182:	ee07 2a10 	vmov	s14, r2
 8001186:	ee07 3a90 	vmov	s15, r3
}
 800118a:	eeb0 0a46 	vmov.f32	s0, s12
 800118e:	eef0 0a66 	vmov.f32	s1, s13
 8001192:	eeb0 1a47 	vmov.f32	s2, s14
 8001196:	eef0 1a67 	vmov.f32	s3, s15
 800119a:	3770      	adds	r7, #112	@ 0x70
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <attitude_controller_angle_mode_update>:
    attitude_controller_t* fc,
    quaternion estimated_q,
    float target_roll,
    float target_pitch,
    float target_yaw_rate
) {
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b0a7      	sub	sp, #156	@ 0x9c
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	61f8      	str	r0, [r7, #28]
 80011a8:	eeb0 6a40 	vmov.f32	s12, s0
 80011ac:	eef0 6a60 	vmov.f32	s13, s1
 80011b0:	eeb0 7a41 	vmov.f32	s14, s2
 80011b4:	eef0 7a61 	vmov.f32	s15, s3
 80011b8:	ed87 2a02 	vstr	s4, [r7, #8]
 80011bc:	edc7 2a01 	vstr	s5, [r7, #4]
 80011c0:	ed87 3a00 	vstr	s6, [r7]
 80011c4:	ed87 6a03 	vstr	s12, [r7, #12]
 80011c8:	edc7 6a04 	vstr	s13, [r7, #16]
 80011cc:	ed87 7a05 	vstr	s14, [r7, #20]
 80011d0:	edc7 7a06 	vstr	s15, [r7, #24]
    if (!fc) {
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 81b0 	beq.w	800153c <attitude_controller_angle_mode_update+0x39c>
        return;
    }

    target_roll = CLAMP(target_roll, -fc->max_angle, fc->max_angle);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e2:	eef1 7a67 	vneg.f32	s15, s15
 80011e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	d505      	bpl.n	8001200 <attitude_controller_angle_mode_update+0x60>
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80011fa:	eef1 7a67 	vneg.f32	s15, s15
 80011fe:	e00f      	b.n	8001220 <attitude_controller_angle_mode_update+0x80>
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	edd3 7a05 	vldr	s15, [r3, #20]
 8001206:	ed97 7a02 	vldr	s14, [r7, #8]
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	dd03      	ble.n	800121c <attitude_controller_angle_mode_update+0x7c>
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	edd3 7a05 	vldr	s15, [r3, #20]
 800121a:	e001      	b.n	8001220 <attitude_controller_angle_mode_update+0x80>
 800121c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001220:	edc7 7a02 	vstr	s15, [r7, #8]
    target_pitch = CLAMP(target_pitch, -fc->max_angle, fc->max_angle);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	edd3 7a05 	vldr	s15, [r3, #20]
 800122a:	eef1 7a67 	vneg.f32	s15, s15
 800122e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	d505      	bpl.n	8001248 <attitude_controller_angle_mode_update+0xa8>
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001242:	eef1 7a67 	vneg.f32	s15, s15
 8001246:	e00f      	b.n	8001268 <attitude_controller_angle_mode_update+0xc8>
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	edd3 7a05 	vldr	s15, [r3, #20]
 800124e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	dd03      	ble.n	8001264 <attitude_controller_angle_mode_update+0xc4>
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001262:	e001      	b.n	8001268 <attitude_controller_angle_mode_update+0xc8>
 8001264:	edd7 7a01 	vldr	s15, [r7, #4]
 8001268:	edc7 7a01 	vstr	s15, [r7, #4]
    target_yaw_rate = CLAMP(target_yaw_rate, -fc->max_rate, fc->max_rate);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eef1 7a67 	vneg.f32	s15, s15
 8001276:	ed97 7a00 	vldr	s14, [r7]
 800127a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	d505      	bpl.n	8001290 <attitude_controller_angle_mode_update+0xf0>
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	edd3 7a06 	vldr	s15, [r3, #24]
 800128a:	eef1 7a67 	vneg.f32	s15, s15
 800128e:	e00f      	b.n	80012b0 <attitude_controller_angle_mode_update+0x110>
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	edd3 7a06 	vldr	s15, [r3, #24]
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	dd03      	ble.n	80012ac <attitude_controller_angle_mode_update+0x10c>
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012aa:	e001      	b.n	80012b0 <attitude_controller_angle_mode_update+0x110>
 80012ac:	edd7 7a00 	vldr	s15, [r7]
 80012b0:	edc7 7a00 	vstr	s15, [r7]

    // --- Store current sensor inputs and setpoints ---
    fc->estimated_q = estimated_q;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	461c      	mov	r4, r3
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    fc->target_roll = target_roll;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	61da      	str	r2, [r3, #28]
    fc->target_pitch = target_pitch;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	621a      	str	r2, [r3, #32]
    fc->target_yaw = target_yaw_rate;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Step 1: Build target quaternion from commanded roll/pitch ---
    angles3D target_rp = { target_roll, target_pitch, 0.0f }; // yaw handled separately
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    quaternion target_delta_q = angle2quat(&target_rp);
 80012e8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 fab3 	bl	8002858 <angle2quat>
 80012f2:	eeb0 6a40 	vmov.f32	s12, s0
 80012f6:	eef0 6a60 	vmov.f32	s13, s1
 80012fa:	eeb0 7a41 	vmov.f32	s14, s2
 80012fe:	eef0 7a61 	vmov.f32	s15, s3
 8001302:	ed87 6a1f 	vstr	s12, [r7, #124]	@ 0x7c
 8001306:	edc7 6a20 	vstr	s13, [r7, #128]	@ 0x80
 800130a:	ed87 7a21 	vstr	s14, [r7, #132]	@ 0x84
 800130e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // --- Step 2: Compose target quaternion relative to level reference ---
	quaternion temp_default_leveld_position_q = FC_DEFAULT_LEVELD_POSITION_Q;
 8001312:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001316:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	673b      	str	r3, [r7, #112]	@ 0x70
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	677b      	str	r3, [r7, #116]	@ 0x74
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	67bb      	str	r3, [r7, #120]	@ 0x78
    quaternion target_q = quatmultiply(&temp_default_leveld_position_q, &target_delta_q);
 800132a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800132e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f001 f816 	bl	8002366 <quatmultiply>
 800133a:	eeb0 6a40 	vmov.f32	s12, s0
 800133e:	eef0 6a60 	vmov.f32	s13, s1
 8001342:	eeb0 7a41 	vmov.f32	s14, s2
 8001346:	eef0 7a61 	vmov.f32	s15, s3
 800134a:	ed87 6a13 	vstr	s12, [r7, #76]	@ 0x4c
 800134e:	edc7 6a14 	vstr	s13, [r7, #80]	@ 0x50
 8001352:	ed87 7a15 	vstr	s14, [r7, #84]	@ 0x54
 8001356:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

    // --- Step 3: Orientation error quaternion ---
    quaternion error_q = quat_error(&fc->estimated_q, &target_q);
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fbe0 	bl	8002b28 <quat_error>
 8001368:	eeb0 6a40 	vmov.f32	s12, s0
 800136c:	eef0 6a60 	vmov.f32	s13, s1
 8001370:	eeb0 7a41 	vmov.f32	s14, s2
 8001374:	eef0 7a61 	vmov.f32	s15, s3
 8001378:	ed87 6a0f 	vstr	s12, [r7, #60]	@ 0x3c
 800137c:	edc7 6a10 	vstr	s13, [r7, #64]	@ 0x40
 8001380:	ed87 7a11 	vstr	s14, [r7, #68]	@ 0x44
 8001384:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    quaternion estimated_q_witouth_yaw = quat_remove_yaw(error_q);
 8001388:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 800138c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001390:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001394:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001398:	eeb0 0a46 	vmov.f32	s0, s12
 800139c:	eef0 0a66 	vmov.f32	s1, s13
 80013a0:	eeb0 1a47 	vmov.f32	s2, s14
 80013a4:	eef0 1a67 	vmov.f32	s3, s15
 80013a8:	f7ff fe5a 	bl	8001060 <quat_remove_yaw>
 80013ac:	eeb0 6a40 	vmov.f32	s12, s0
 80013b0:	eef0 6a60 	vmov.f32	s13, s1
 80013b4:	eeb0 7a41 	vmov.f32	s14, s2
 80013b8:	eef0 7a61 	vmov.f32	s15, s3
 80013bc:	ed87 6a0b 	vstr	s12, [r7, #44]	@ 0x2c
 80013c0:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 80013c4:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 80013c8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // --- Step 4: Convert error quaternion → rotation vector (rad) ---
    angles3D rotvec_err = quat2rotvec(estimated_q_witouth_yaw);
 80013cc:	ed97 6a0b 	vldr	s12, [r7, #44]	@ 0x2c
 80013d0:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80013d4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80013d8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013dc:	eeb0 0a46 	vmov.f32	s0, s12
 80013e0:	eef0 0a66 	vmov.f32	s1, s13
 80013e4:	eeb0 1a47 	vmov.f32	s2, s14
 80013e8:	eef0 1a67 	vmov.f32	s3, s15
 80013ec:	f001 f97e 	bl	80026ec <quat2rotvec>
 80013f0:	eef0 6a40 	vmov.f32	s13, s0
 80013f4:	eeb0 7a60 	vmov.f32	s14, s1
 80013f8:	eef0 7a41 	vmov.f32	s15, s2
 80013fc:	edc7 6a08 	vstr	s13, [r7, #32]
 8001400:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 8001404:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles3D rotvec_err = quat2rotvec(error_q);

    rotvec_err.z = 0.0f;
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28

    fc->calculated_roll_rate = rotvec_err.x * fc->rate_gain;
 800140e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	edd3 7a04 	vldr	s15, [r3, #16]
 8001418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = rotvec_err.y * fc->rate_gain;
 8001422:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	edd3 7a04 	vldr	s15, [r3, #16]
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = target_yaw_rate * fc->rate_gain;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	ed93 7a04 	vldr	s14, [r3, #16]
 800143c:	edd7 7a00 	vldr	s15, [r7]
 8001440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// --- Step 5: Apply limits ---
	fc->calculated_roll_rate = CLAMP(fc->calculated_roll_rate, -fc->max_rate, fc->max_rate);
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	edd3 7a06 	vldr	s15, [r3, #24]
 8001456:	eef1 7a67 	vneg.f32	s15, s15
 800145a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	d505      	bpl.n	8001470 <attitude_controller_angle_mode_update+0x2d0>
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	edd3 7a06 	vldr	s15, [r3, #24]
 800146a:	eef1 7a67 	vneg.f32	s15, s15
 800146e:	e011      	b.n	8001494 <attitude_controller_angle_mode_update+0x2f4>
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	edd3 7a06 	vldr	s15, [r3, #24]
 800147c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	dd03      	ble.n	800148e <attitude_controller_angle_mode_update+0x2ee>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	edd3 7a06 	vldr	s15, [r3, #24]
 800148c:	e002      	b.n	8001494 <attitude_controller_angle_mode_update+0x2f4>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = CLAMP(fc->calculated_pitch_rate, -fc->max_rate, fc->max_rate);
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a6:	eef1 7a67 	vneg.f32	s15, s15
 80014aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	d505      	bpl.n	80014c0 <attitude_controller_angle_mode_update+0x320>
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ba:	eef1 7a67 	vneg.f32	s15, s15
 80014be:	e011      	b.n	80014e4 <attitude_controller_angle_mode_update+0x344>
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	dd03      	ble.n	80014de <attitude_controller_angle_mode_update+0x33e>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014dc:	e002      	b.n	80014e4 <attitude_controller_angle_mode_update+0x344>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = CLAMP(fc->calculated_yaw_rate, -fc->max_rate, fc->max_rate);
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014f6:	eef1 7a67 	vneg.f32	s15, s15
 80014fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	d505      	bpl.n	8001510 <attitude_controller_angle_mode_update+0x370>
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	edd3 7a06 	vldr	s15, [r3, #24]
 800150a:	eef1 7a67 	vneg.f32	s15, s15
 800150e:	e011      	b.n	8001534 <attitude_controller_angle_mode_update+0x394>
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	edd3 7a06 	vldr	s15, [r3, #24]
 800151c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	dd03      	ble.n	800152e <attitude_controller_angle_mode_update+0x38e>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	edd3 7a06 	vldr	s15, [r3, #24]
 800152c:	e002      	b.n	8001534 <attitude_controller_angle_mode_update+0x394>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800153a:	e000      	b.n	800153e <attitude_controller_angle_mode_update+0x39e>
        return;
 800153c:	bf00      	nop

}
 800153e:	379c      	adds	r7, #156	@ 0x9c
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}

08001544 <attitude_controller_get_calculated_rate>:
void attitude_controller_get_calculated_rate(
    attitude_controller_t* fc,
    float* out_roll_rate,
    float* out_pitch_rate,
    float* out_yaw_rate
) {
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d015      	beq.n	8001584 <attitude_controller_get_calculated_rate+0x40>
        return; // Avoid null pointer access
    }
	if (out_roll_rate) {
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <attitude_controller_get_calculated_rate+0x22>
		*out_roll_rate = fc->calculated_roll_rate;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	601a      	str	r2, [r3, #0]
	}
	if (out_pitch_rate) {
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <attitude_controller_get_calculated_rate+0x30>
		*out_pitch_rate = fc->calculated_pitch_rate;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	601a      	str	r2, [r3, #0]
	}
	if (out_yaw_rate) {
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <attitude_controller_get_calculated_rate+0x42>
		*out_yaw_rate = fc->calculated_yaw_rate;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e000      	b.n	8001586 <attitude_controller_get_calculated_rate+0x42>
        return; // Avoid null pointer access
 8001584:	bf00      	nop
	}
}
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <crc16_ccitt_init>:
#include "crc.h"


uint16_t crc16_ccitt_init(void) {
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	return (uint16_t)0xFFFF; // Initial value for CRC-16-CCITT
 8001594:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <crc16_ccitt_add>:

uint16_t crc16_ccitt_add(uint16_t crc, uint8_t a)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	460a      	mov	r2, r1
 80015ac:	80fb      	strh	r3, [r7, #6]
 80015ae:	4613      	mov	r3, r2
 80015b0:	717b      	strb	r3, [r7, #5]
    crc ^= (uint16_t)a << (uint8_t)8;
 80015b2:	797b      	ldrb	r3, [r7, #5]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	4053      	eors	r3, r2
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e014      	b.n	80015f4 <crc16_ccitt_add+0x52>
        if (crc & (uint16_t)0x8000) {
 80015ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da0a      	bge.n	80015e8 <crc16_ccitt_add+0x46>
            crc = (crc << (uint8_t)1) ^ (uint16_t)0x1021;
 80015d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	b21b      	sxth	r3, r3
 80015da:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80015de:	f083 0301 	eor.w	r3, r3, #1
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	80fb      	strh	r3, [r7, #6]
 80015e6:	e002      	b.n	80015ee <crc16_ccitt_add+0x4c>
        }
        else{
        	crc = (crc << (uint8_t)1);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	2b07      	cmp	r3, #7
 80015f8:	d9e7      	bls.n	80015ca <crc16_ccitt_add+0x28>
        }
    }
    return crc;
 80015fa:	88fb      	ldrh	r3, [r7, #6]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <crc16_ccitt_add_arr>:

uint16_t crc16_ccitt_add_arr(uint16_t crc, uint8_t* data, size_t len) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e00d      	b.n	8001638 <crc16_ccitt_add_arr+0x30>
        crc = crc16_ccitt_add(crc, data[i]);
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	4413      	add	r3, r2
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	89fb      	ldrh	r3, [r7, #14]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ffba 	bl	80015a2 <crc16_ccitt_add>
 800162e:	4603      	mov	r3, r0
 8001630:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3ed      	bcc.n	800161c <crc16_ccitt_add_arr+0x14>
    }
    return crc;
 8001640:	89fb      	ldrh	r3, [r7, #14]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	0000      	movs	r0, r0
 800164c:	0000      	movs	r0, r0
	...

08001650 <pt1_filter_init_lowpass>:
#include "filters.h"
#define _USE_MATH_DEFINES
#include <math.h>
#include <float.h>

void pt1_filter_init_lowpass(pt1_filter_t* filter, float cutoff_freq, float sample_rate) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	ed87 0a02 	vstr	s0, [r7, #8]
 800165c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(cutoff_freq <= FLT_EPSILON || sample_rate <= FLT_EPSILON){
 8001660:	edd7 7a02 	vldr	s15, [r7, #8]
 8001664:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001710 <pt1_filter_init_lowpass+0xc0>
 8001668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	d908      	bls.n	8001684 <pt1_filter_init_lowpass+0x34>
 8001672:	edd7 7a01 	vldr	s15, [r7, #4]
 8001676:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001710 <pt1_filter_init_lowpass+0xc0>
 800167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	d804      	bhi.n	800168e <pt1_filter_init_lowpass+0x3e>
		filter->alpha = 0.0f;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	e02b      	b.n	80016e6 <pt1_filter_init_lowpass+0x96>
	}
	else{
	    float dt = 1.0f / sample_rate;
 800168e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001692:	ed97 7a01 	vldr	s14, [r7, #4]
 8001696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169a:	edc7 7a05 	vstr	s15, [r7, #20]
	    float rc = 1.0f / (2.0f * M_PI * cutoff_freq);
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	f7fe ff52 	bl	8000548 <__aeabi_f2d>
 80016a4:	a318      	add	r3, pc, #96	@ (adr r3, 8001708 <pt1_filter_init_lowpass+0xb8>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe ffa5 	bl	80005f8 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	f04f 0000 	mov.w	r0, #0
 80016b6:	4917      	ldr	r1, [pc, #92]	@ (8001714 <pt1_filter_init_lowpass+0xc4>)
 80016b8:	f7ff f8c8 	bl	800084c <__aeabi_ddiv>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa90 	bl	8000be8 <__aeabi_d2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]
	    filter->alpha = dt / (dt + rc);
 80016cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80016d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80016dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	filter->sample_freq = sample_rate;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	601a      	str	r2, [r3, #0]
    filter->cutoff_freq = cutoff_freq;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	605a      	str	r2, [r3, #4]
    filter->state = 0.0f;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
 8001708:	54442d18 	.word	0x54442d18
 800170c:	401921fb 	.word	0x401921fb
 8001710:	34000000 	.word	0x34000000
 8001714:	3ff00000 	.word	0x3ff00000

08001718 <pt1_filter_apply_lowpass>:

float pt1_filter_apply_lowpass(pt1_filter_t* filter, float input) {
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	ed87 0a00 	vstr	s0, [r7]
    filter->state += (filter->alpha * (input - filter->state));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	ed93 7a03 	vldr	s14, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edd3 7a03 	vldr	s15, [r3, #12]
 8001736:	ed97 6a00 	vldr	s12, [r7]
 800173a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800173e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	edc3 7a03 	vstr	s15, [r3, #12]
    return filter->state;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	ee07 3a90 	vmov	s15, r3
}
 8001754:	eeb0 0a67 	vmov.f32	s0, s15
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <pt1_filter_reset>:

void pt1_filter_reset(pt1_filter_t* filter) {
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
    filter->state = 0.0f;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <pt2_filter_init_lowpass>:
    f->a2 = a2 / a0;
    biquad_filter_reset(f);
}


void pt2_filter_init_lowpass(pt2_filter_t *f, float cutoff_freq, float sample_freq) {
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	ed87 0a02 	vstr	s0, [r7, #8]
 800178a:	edc7 0a01 	vstr	s1, [r7, #4]
    pt1_filter_init_lowpass(&f->s1, cutoff_freq, sample_freq);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	edd7 0a01 	vldr	s1, [r7, #4]
 8001794:	ed97 0a02 	vldr	s0, [r7, #8]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff59 	bl	8001650 <pt1_filter_init_lowpass>
    pt1_filter_init_lowpass(&f->s2, cutoff_freq, sample_freq);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3310      	adds	r3, #16
 80017a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80017a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff50 	bl	8001650 <pt1_filter_init_lowpass>
	f->sample_freq = sample_freq;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	621a      	str	r2, [r3, #32]
    f->cutoff_freq = cutoff_freq;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <pt2_filter_apply_lowpass>:

float pt2_filter_apply_lowpass(pt2_filter_t *f, float x) {
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	ed87 0a00 	vstr	s0, [r7]
    return pt1_filter_apply_lowpass(&f->s2, pt1_filter_apply_lowpass(&f->s1, x));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f103 0410 	add.w	r4, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	ed97 0a00 	vldr	s0, [r7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff9b 	bl	8001718 <pt1_filter_apply_lowpass>
 80017e2:	eef0 7a40 	vmov.f32	s15, s0
 80017e6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff ff94 	bl	8001718 <pt1_filter_apply_lowpass>
 80017f0:	eef0 7a40 	vmov.f32	s15, s0
}
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}

080017fe <pt2_filter_reset>:

void pt2_filter_reset(pt2_filter_t *f) {
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
    pt1_filter_reset(&f->s1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ffaa 	bl	8001762 <pt1_filter_reset>
    pt1_filter_reset(&f->s2);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3310      	adds	r3, #16
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffa5 	bl	8001762 <pt1_filter_reset>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <flight_control_loop_arm_esc>:


static quaternion ground_default_position_q = { .w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f };


void flight_control_loop_arm_esc(flight_control_loop_t* fcl) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800182e:	f04f 31ff 	mov.w	r1, #4294967295
 8001832:	4618      	mov	r0, r3
 8001834:	f012 fee8 	bl	8014608 <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 1;
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800184c:	2300      	movs	r3, #0
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	f012 fc57 	bl	8014104 <xQueueGenericSend>
	#endif
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <flight_control_loop_disarm_esc>:

void flight_control_loop_disarm_esc(flight_control_loop_t* fcl) {
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	4618      	mov	r0, r3
 8001872:	f012 fec9 	bl	8014608 <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 0;
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800188a:	2300      	movs	r3, #0
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	f012 fc38 	bl	8014104 <xQueueGenericSend>
	#endif
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <flight_control_loop_are_esc_armed>:

int flight_control_loop_are_esc_armed(flight_control_loop_t* fcl) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	int flag;
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80018aa:	f04f 31ff 	mov.w	r1, #4294967295
 80018ae:	4618      	mov	r0, r3
 80018b0:	f012 feaa 	bl	8014608 <xQueueSemaphoreTake>
	#endif
	flag = fcl->are_esc_armed;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 33c0 	ldrb.w	r3, [r3, #960]	@ 0x3c0
 80018ba:	f343 0300 	sbfx	r3, r3, #0, #1
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	60fb      	str	r3, [r7, #12]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80018c8:	2300      	movs	r3, #0
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	f012 fc19 	bl	8014104 <xQueueGenericSend>
	#endif
	return flag;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <flight_control_loop_init>:
	fcl->write_throttle = hook;
	fcl->write_throttle_hook_context = context;
}


void flight_control_loop_init(flight_control_loop_t* fcl) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	memset(fcl, 0, sizeof(flight_control_loop_t));
 80018e4:	f240 4204 	movw	r2, #1028	@ 0x404
 80018e8:	2100      	movs	r1, #0
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f018 fe0a 	bl	801a504 <memset>

	// Initialize IMU and attitude controller here (not shown)
	imu_init(
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	ed9f 2a87 	vldr	s4, [pc, #540]	@ 8001b10 <flight_control_loop_init+0x234>
 80018f6:	eddf 1a86 	vldr	s3, [pc, #536]	@ 8001b10 <flight_control_loop_init+0x234>
 80018fa:	ed9f 1a85 	vldr	s2, [pc, #532]	@ 8001b10 <flight_control_loop_init+0x234>
 80018fe:	eddf 0a85 	vldr	s1, [pc, #532]	@ 8001b14 <flight_control_loop_init+0x238>
 8001902:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8001906:	4618      	mov	r0, r3
 8001908:	f001 f954 	bl	8002bb4 <imu_init>
		ACCELEROMETER_SAMPLE_RATE_HZ,
		GYRO_SAMPLE_RATE_HZ,
		FLIGHT_CONTROLLER_PID_FREQ_HZ
	);

	imu_set_accel_bias(&fcl->imu, (coord3D) { accelerometer_bias[0], accelerometer_bias[1], accelerometer_bias[2] }, accelerometer_A_1);
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4b82      	ldr	r3, [pc, #520]	@ (8001b18 <flight_control_loop_init+0x23c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	4b80      	ldr	r3, [pc, #512]	@ (8001b18 <flight_control_loop_init+0x23c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b18 <flight_control_loop_init+0x23c>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	edd7 6a05 	vldr	s13, [r7, #20]
 8001924:	ed97 7a06 	vldr	s14, [r7, #24]
 8001928:	edd7 7a07 	vldr	s15, [r7, #28]
 800192c:	497b      	ldr	r1, [pc, #492]	@ (8001b1c <flight_control_loop_init+0x240>)
 800192e:	eeb0 0a66 	vmov.f32	s0, s13
 8001932:	eef0 0a47 	vmov.f32	s1, s14
 8001936:	eeb0 1a67 	vmov.f32	s2, s15
 800193a:	4610      	mov	r0, r2
 800193c:	f001 fbe6 	bl	800310c <imu_set_accel_bias>
	imu_set_gyro_bias(&fcl->imu, (coord3D) { gyro_bias[0], gyro_bias[1], gyro_bias[2] });
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4b77      	ldr	r3, [pc, #476]	@ (8001b20 <flight_control_loop_init+0x244>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b75      	ldr	r3, [pc, #468]	@ (8001b20 <flight_control_loop_init+0x244>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b74      	ldr	r3, [pc, #464]	@ (8001b20 <flight_control_loop_init+0x244>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	edd7 6a02 	vldr	s13, [r7, #8]
 8001958:	ed97 7a03 	vldr	s14, [r7, #12]
 800195c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001960:	eeb0 0a66 	vmov.f32	s0, s13
 8001964:	eef0 0a47 	vmov.f32	s1, s14
 8001968:	eeb0 1a67 	vmov.f32	s2, s15
 800196c:	4610      	mov	r0, r2
 800196e:	f001 fbab 	bl	80030c8 <imu_set_gyro_bias>
	imu_set_leveled_attitude(&fcl->imu, ground_default_position_q);
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4b6b      	ldr	r3, [pc, #428]	@ (8001b24 <flight_control_loop_init+0x248>)
 8001976:	ed93 6a00 	vldr	s12, [r3]
 800197a:	edd3 6a01 	vldr	s13, [r3, #4]
 800197e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001982:	edd3 7a03 	vldr	s15, [r3, #12]
 8001986:	eeb0 0a46 	vmov.f32	s0, s12
 800198a:	eef0 0a66 	vmov.f32	s1, s13
 800198e:	eeb0 1a47 	vmov.f32	s2, s14
 8001992:	eef0 1a67 	vmov.f32	s3, s15
 8001996:	4610      	mov	r0, r2
 8001998:	f001 f99c 	bl	8002cd4 <imu_set_leveled_attitude>

	attitude_controller_init(
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80019a2:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8001b28 <flight_control_loop_init+0x24c>
 80019a6:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8001b2c <flight_control_loop_init+0x250>
 80019aa:	ed9f 0a61 	vldr	s0, [pc, #388]	@ 8001b30 <flight_control_loop_init+0x254>
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fb36 	bl	8001020 <attitude_controller_init>
		RATE_GAIN,
		MAX_ANGLE,
		MAX_RATE
	);

	rate_controller_init(
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019ba:	ed9f 1a5e 	vldr	s2, [pc, #376]	@ 8001b34 <flight_control_loop_init+0x258>
 80019be:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80019c2:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001b10 <flight_control_loop_init+0x234>
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 f986 	bl	8003cd8 <rate_controller_init>
		FLIGHT_CONTROLLER_PID_FREQ_HZ,
		D_TERM_PID_FILTER_CUTOFF_FREQ_HZ,
		FF_TERM_PID_FILTER_CUTOFF_FREQ_HZ
	);

	rate_controller_init_roll_pid(
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019d2:	ed9f 2a59 	vldr	s4, [pc, #356]	@ 8001b38 <flight_control_loop_init+0x25c>
 80019d6:	eddf 1a59 	vldr	s3, [pc, #356]	@ 8001b3c <flight_control_loop_init+0x260>
 80019da:	ed9f 1a57 	vldr	s2, [pc, #348]	@ 8001b38 <flight_control_loop_init+0x25c>
 80019de:	eddf 0a56 	vldr	s1, [pc, #344]	@ 8001b38 <flight_control_loop_init+0x25c>
 80019e2:	ed9f 0a57 	vldr	s0, [pc, #348]	@ 8001b40 <flight_control_loop_init+0x264>
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fa04 	bl	8003df4 <rate_controller_init_roll_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_pitch_pid(
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019f2:	ed9f 2a51 	vldr	s4, [pc, #324]	@ 8001b38 <flight_control_loop_init+0x25c>
 80019f6:	eddf 1a51 	vldr	s3, [pc, #324]	@ 8001b3c <flight_control_loop_init+0x260>
 80019fa:	ed9f 1a4f 	vldr	s2, [pc, #316]	@ 8001b38 <flight_control_loop_init+0x25c>
 80019fe:	eddf 0a4e 	vldr	s1, [pc, #312]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a02:	ed9f 0a4f 	vldr	s0, [pc, #316]	@ 8001b40 <flight_control_loop_init+0x264>
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fa26 	bl	8003e58 <rate_controller_init_pitch_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_yaw_pid(
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001a12:	ed9f 2a49 	vldr	s4, [pc, #292]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a16:	eddf 1a49 	vldr	s3, [pc, #292]	@ 8001b3c <flight_control_loop_init+0x260>
 8001a1a:	ed9f 1a47 	vldr	s2, [pc, #284]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a1e:	eddf 0a46 	vldr	s1, [pc, #280]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a22:	ed9f 0a47 	vldr	s0, [pc, #284]	@ 8001b40 <flight_control_loop_init+0x264>
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fa48 	bl	8003ebc <rate_controller_init_yaw_pid>
		CONTROLLER_YAW_PID_KD,
		CONTROLLER_YAW_MAX_INTEGRAL_LIMIT,
		CONTROLLER_YAW_PID_KFF
	);

	rc_attitude_control_init_roll(
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a32:	ed9f 2a44 	vldr	s4, [pc, #272]	@ 8001b44 <flight_control_loop_init+0x268>
 8001a36:	eddf 1a40 	vldr	s3, [pc, #256]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a3a:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8001b2c <flight_control_loop_init+0x250>
 8001a3e:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8001b48 <flight_control_loop_init+0x26c>
 8001a42:	ed9f 0a3c 	vldr	s0, [pc, #240]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a46:	2101      	movs	r1, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 fd4d 	bl	80044e8 <rc_attitude_control_init_roll>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_pitch(
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a54:	ed9f 2a3b 	vldr	s4, [pc, #236]	@ 8001b44 <flight_control_loop_init+0x268>
 8001a58:	eddf 1a37 	vldr	s3, [pc, #220]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a5c:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8001b2c <flight_control_loop_init+0x250>
 8001a60:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8001b48 <flight_control_loop_init+0x26c>
 8001a64:	ed9f 0a33 	vldr	s0, [pc, #204]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fd99 	bl	80045a2 <rc_attitude_control_init_pitch>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_yaw(
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a76:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 8001b44 <flight_control_loop_init+0x268>
 8001a7a:	eddf 1a2f 	vldr	s3, [pc, #188]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a7e:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8001b2c <flight_control_loop_init+0x250>
 8001a82:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001b48 <flight_control_loop_init+0x26c>
 8001a86:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fde7 	bl	8004660 <rc_attitude_control_init_yaw>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_throttle(
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a98:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 8001b44 <flight_control_loop_init+0x268>
 8001a9c:	eddf 1a26 	vldr	s3, [pc, #152]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001aa0:	eeb6 1a00 	vmov.f32	s2, #96	@ 0x3f000000  0.5
 8001aa4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001b48 <flight_control_loop_init+0x26c>
 8001aa8:	ed9f 0a22 	vldr	s0, [pc, #136]	@ 8001b34 <flight_control_loop_init+0x258>
 8001aac:	2101      	movs	r1, #1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fe36 	bl	8004720 <rc_attitude_control_init_throttle>
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

#if MUTEX_ESP_ENABLE != 0
	fcl->imu_mutex = xSemaphoreCreateMutex();
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f012 fb0c 	bl	80140d2 <xQueueCreateMutex>
 8001aba:	4602      	mov	r2, r0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
	fcl->rate_controller_mutex = xSemaphoreCreateMutex();
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f012 fb05 	bl	80140d2 <xQueueCreateMutex>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
	fcl->attitude_controller_mutex = xSemaphoreCreateMutex();
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f012 fafe 	bl	80140d2 <xQueueCreateMutex>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8c3 23f4 	str.w	r2, [r3, #1012]	@ 0x3f4
	fcl->rc_attitude_control_mutex = xSemaphoreCreateMutex();
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f012 faf7 	bl	80140d2 <xQueueCreateMutex>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
	fcl->motor_throttle_mutex = xSemaphoreCreateMutex();
 8001aec:	2001      	movs	r0, #1
 8001aee:	f012 faf0 	bl	80140d2 <xQueueCreateMutex>
 8001af2:	4602      	mov	r2, r0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
	fcl->flags_mutex = xSemaphoreCreateMutex();
 8001afa:	2001      	movs	r0, #1
 8001afc:	f012 fae9 	bl	80140d2 <xQueueCreateMutex>
 8001b00:	4602      	mov	r2, r0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
#endif
}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	447a0000 	.word	0x447a0000
 8001b14:	42a00000 	.word	0x42a00000
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	2000000c 	.word	0x2000000c
 8001b20:	20000030 	.word	0x20000030
 8001b24:	2000003c 	.word	0x2000003c
 8001b28:	40a78d36 	.word	0x40a78d36
 8001b2c:	3f1c61aa 	.word	0x3f1c61aa
 8001b30:	3f5f66f3 	.word	0x3f5f66f3
 8001b34:	42200000 	.word	0x42200000
 8001b38:	00000000 	.word	0x00000000
 8001b3c:	40278d37 	.word	0x40278d37
 8001b40:	405f66f3 	.word	0x405f66f3
 8001b44:	42c80000 	.word	0x42c80000
 8001b48:	3d75c28f 	.word	0x3d75c28f

08001b4c <flight_control_loop_tick>:


void flight_control_loop_tick(flight_control_loop_t* fcl) {
 8001b4c:	b590      	push	{r4, r7, lr}
 8001b4e:	b09b      	sub	sp, #108	@ 0x6c
 8001b50:	af02      	add	r7, sp, #8
 8001b52:	6078      	str	r0, [r7, #4]
	// RC input
	coord3D target_attitude = { 0 };
 8001b54:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	605a      	str	r2, [r3, #4]
 8001b5e:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 8001b60:	f04f 0300 	mov.w	r3, #0
 8001b64:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	4618      	mov	r0, r3
 8001b72:	f012 fd49 	bl	8014608 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8001b7c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b80:	f103 0408 	add.w	r4, r3, #8
 8001b84:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b88:	1d1a      	adds	r2, r3, #4
 8001b8a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001b8e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b92:	9300      	str	r3, [sp, #0]
 8001b94:	4623      	mov	r3, r4
 8001b96:	f002 fe43 	bl	8004820 <rc_attitude_control_get_processed>
		&(target_attitude.z),
		&target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	f012 faad 	bl	8014104 <xQueueGenericSend>
	// Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
	quaternion body_frame_estimated_q;

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f012 fd27 	bl	8014608 <xQueueSemaphoreTake>
#endif
	imu_get_estimated_data(&fcl->imu, &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bc0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001bc4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001bc8:	f001 faee 	bl	80031a8 <imu_get_estimated_data>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	f012 fa94 	bl	8014104 <xQueueGenericSend>
#endif


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->attitude_controller_mutex, portMAX_DELAY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8001be2:	f04f 31ff 	mov.w	r1, #4294967295
 8001be6:	4618      	mov	r0, r3
 8001be8:	f012 fd0e 	bl	8014608 <xQueueSemaphoreTake>
#endif
	// Update attitude controller
	attitude_controller_angle_mode_update(
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8001bf2:	edd7 5a14 	vldr	s11, [r7, #80]	@ 0x50
 8001bf6:	ed97 5a15 	vldr	s10, [r7, #84]	@ 0x54
 8001bfa:	edd7 4a16 	vldr	s9, [r7, #88]	@ 0x58
 8001bfe:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001c02:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001c06:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c0a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c0e:	eeb0 3a64 	vmov.f32	s6, s9
 8001c12:	eef0 2a45 	vmov.f32	s5, s10
 8001c16:	eeb0 2a65 	vmov.f32	s4, s11
 8001c1a:	eeb0 0a46 	vmov.f32	s0, s12
 8001c1e:	eef0 0a66 	vmov.f32	s1, s13
 8001c22:	eeb0 1a47 	vmov.f32	s2, s14
 8001c26:	eef0 1a67 	vmov.f32	s3, s15
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff fab8 	bl	80011a0 <attitude_controller_angle_mode_update>
		target_attitude.x, // target roll
		target_attitude.y,  // target pitch
		target_attitude.z   // target yaw rate
	);

	float target_roll_rate = 0.0f;
 8001c30:	f04f 0300 	mov.w	r3, #0
 8001c34:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 8001c36:	f04f 0300 	mov.w	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 8001c3c:	f04f 0300 	mov.w	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001c48:	f107 0318 	add.w	r3, r7, #24
 8001c4c:	f107 021c 	add.w	r2, r7, #28
 8001c50:	f107 0120 	add.w	r1, r7, #32
 8001c54:	f7ff fc76 	bl	8001544 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->attitude_controller_mutex);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2200      	movs	r2, #0
 8001c62:	2100      	movs	r1, #0
 8001c64:	f012 fa4e 	bl	8014104 <xQueueGenericSend>
#endif

	float pid_roll_output = 0.0f;
 8001c68:	f04f 0300 	mov.w	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 8001c6e:	f04f 0300 	mov.w	r3, #0
 8001c72:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 8001c74:	f04f 0300 	mov.w	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rate_controller_mutex, portMAX_DELAY);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	4618      	mov	r0, r3
 8001c86:	f012 fcbf 	bl	8014608 <xQueueSemaphoreTake>
#endif
	if (target_throttle > THROTTLE_IDLE)
 8001c8a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c8e:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001db4 <flight_control_loop_tick+0x268>
 8001c92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9a:	dd1e      	ble.n	8001cda <flight_control_loop_tick+0x18e>
	{
		rate_controller_update(
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001ca2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001ca6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001caa:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001cae:	ed97 6a08 	vldr	s12, [r7, #32]
 8001cb2:	edd7 5a07 	vldr	s11, [r7, #28]
 8001cb6:	ed97 5a06 	vldr	s10, [r7, #24]
 8001cba:	eef0 2a45 	vmov.f32	s5, s10
 8001cbe:	eeb0 2a65 	vmov.f32	s4, s11
 8001cc2:	eef0 1a46 	vmov.f32	s3, s12
 8001cc6:	eeb0 1a66 	vmov.f32	s2, s13
 8001cca:	eef0 0a47 	vmov.f32	s1, s14
 8001cce:	eeb0 0a67 	vmov.f32	s0, s15
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f002 f924 	bl	8003f20 <rate_controller_update>
 8001cd8:	e005      	b.n	8001ce6 <flight_control_loop_tick+0x19a>
			target_pitch_rate,
			target_yaw_rate
		);
	}
	else {
		rate_controller_reset(&fcl->rate_controller);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 faab 	bl	800423c <rate_controller_reset>
	}

	// Get PID outputs
	rate_controller_get_pid_outputs(
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 8001cec:	f107 030c 	add.w	r3, r7, #12
 8001cf0:	f107 0210 	add.w	r2, r7, #16
 8001cf4:	f107 0114 	add.w	r1, r7, #20
 8001cf8:	f002 faf4 	bl	80042e4 <rate_controller_get_pid_outputs>
		&pid_pitch_output,
		&pid_yaw_output
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rate_controller_mutex);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8001d02:	2300      	movs	r3, #0
 8001d04:	2200      	movs	r2, #0
 8001d06:	2100      	movs	r1, #0
 8001d08:	f012 f9fc 	bl	8014104 <xQueueGenericSend>
#endif

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001d12:	f04f 31ff 	mov.w	r1, #4294967295
 8001d16:	4618      	mov	r0, r3
 8001d18:	f012 fc76 	bl	8014608 <xQueueSemaphoreTake>
#endif
	// Mix PID outputs to motor commands
	if (flight_control_loop_are_esc_armed(fcl) != 0)
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff fdbd 	bl	800189c <flight_control_loop_are_esc_armed>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d018      	beq.n	8001d5a <flight_control_loop_tick+0x20e>
	{
		motor_mixer_quad_x(
 8001d28:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d2c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d30:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d34:	ed97 6a03 	vldr	s12, [r7, #12]
			target_throttle,
			pid_roll_output,
			pid_pitch_output,
			pid_yaw_output,
			THROTTLE_IDLE,
			fcl->motor_throttle
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
		motor_mixer_quad_x(
 8001d3e:	4618      	mov	r0, r3
 8001d40:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8001db4 <flight_control_loop_tick+0x268>
 8001d44:	eef0 1a46 	vmov.f32	s3, s12
 8001d48:	eeb0 1a66 	vmov.f32	s2, s13
 8001d4c:	eef0 0a47 	vmov.f32	s1, s14
 8001d50:	eeb0 0a67 	vmov.f32	s0, s15
 8001d54:	f001 fcc6 	bl	80036e4 <motor_mixer_quad_x>
 8001d58:	e010      	b.n	8001d7c <flight_control_loop_tick+0x230>
		);
	}
	else {
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d5e:	e00a      	b.n	8001d76 <flight_control_loop_tick+0x22a>
			fcl->motor_throttle[i] = 0.0f;
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d64:	33ec      	adds	r3, #236	@ 0xec
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	4413      	add	r3, r2
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d70:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d72:	3301      	adds	r3, #1
 8001d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	ddf1      	ble.n	8001d60 <flight_control_loop_tick+0x214>
		}
	}
	if (fcl->write_throttle) {
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00a      	beq.n	8001d9c <flight_control_loop_tick+0x250>
		fcl->write_throttle(fcl, fcl->motor_throttle, fcl->write_throttle_hook_context);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	f502 716c 	add.w	r1, r2, #944	@ 0x3b0
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	f8d2 23e8 	ldr.w	r2, [r2, #1000]	@ 0x3e8
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	4798      	blx	r3
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001da2:	2300      	movs	r3, #0
 8001da4:	2200      	movs	r2, #0
 8001da6:	2100      	movs	r1, #0
 8001da8:	f012 f9ac 	bl	8014104 <xQueueGenericSend>
#endif

}
 8001dac:	bf00      	nop
 8001dae:	3764      	adds	r7, #100	@ 0x64
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd90      	pop	{r4, r7, pc}
 8001db4:	3d6147ae 	.word	0x3d6147ae

08001db8 <flight_control_loop_update_rc_control>:

void flight_control_loop_update_rc_control(flight_control_loop_t* fcl, coord3D target_attitude, float target_throttle) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6178      	str	r0, [r7, #20]
 8001dc0:	eef0 6a40 	vmov.f32	s13, s0
 8001dc4:	eeb0 7a60 	vmov.f32	s14, s1
 8001dc8:	eef0 7a41 	vmov.f32	s15, s2
 8001dcc:	edc7 1a01 	vstr	s3, [r7, #4]
 8001dd0:	edc7 6a02 	vstr	s13, [r7, #8]
 8001dd4:	ed87 7a03 	vstr	s14, [r7, #12]
 8001dd8:	edc7 7a04 	vstr	s15, [r7, #16]

	target_attitude.x = CLAMP(target_attitude.x, -1.0f, 1.0f);
 8001ddc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001de4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dec:	d501      	bpl.n	8001df2 <flight_control_loop_update_rc_control+0x3a>
 8001dee:	4b41      	ldr	r3, [pc, #260]	@ (8001ef4 <flight_control_loop_update_rc_control+0x13c>)
 8001df0:	e00c      	b.n	8001e0c <flight_control_loop_update_rc_control+0x54>
 8001df2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001df6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001dfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e02:	dd02      	ble.n	8001e0a <flight_control_loop_update_rc_control+0x52>
 8001e04:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e08:	e000      	b.n	8001e0c <flight_control_loop_update_rc_control+0x54>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	60bb      	str	r3, [r7, #8]
	target_attitude.y = CLAMP(target_attitude.y, -1.0f, 1.0f);
 8001e0e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e12:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e1e:	d501      	bpl.n	8001e24 <flight_control_loop_update_rc_control+0x6c>
 8001e20:	4b34      	ldr	r3, [pc, #208]	@ (8001ef4 <flight_control_loop_update_rc_control+0x13c>)
 8001e22:	e00c      	b.n	8001e3e <flight_control_loop_update_rc_control+0x86>
 8001e24:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e34:	dd02      	ble.n	8001e3c <flight_control_loop_update_rc_control+0x84>
 8001e36:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e3a:	e000      	b.n	8001e3e <flight_control_loop_update_rc_control+0x86>
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	60fb      	str	r3, [r7, #12]
	target_attitude.z = CLAMP(target_attitude.z, -1.0f, 1.0f);
 8001e40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e44:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e50:	d501      	bpl.n	8001e56 <flight_control_loop_update_rc_control+0x9e>
 8001e52:	4b28      	ldr	r3, [pc, #160]	@ (8001ef4 <flight_control_loop_update_rc_control+0x13c>)
 8001e54:	e00c      	b.n	8001e70 <flight_control_loop_update_rc_control+0xb8>
 8001e56:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e66:	dd02      	ble.n	8001e6e <flight_control_loop_update_rc_control+0xb6>
 8001e68:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e6c:	e000      	b.n	8001e70 <flight_control_loop_update_rc_control+0xb8>
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	613b      	str	r3, [r7, #16]
	target_throttle = CLAMP(target_throttle, 0.0f, 1.0f);
 8001e72:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e7e:	d502      	bpl.n	8001e86 <flight_control_loop_update_rc_control+0xce>
 8001e80:	f04f 0300 	mov.w	r3, #0
 8001e84:	e00c      	b.n	8001ea0 <flight_control_loop_update_rc_control+0xe8>
 8001e86:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e8a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e96:	dd02      	ble.n	8001e9e <flight_control_loop_update_rc_control+0xe6>
 8001e98:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e9c:	e000      	b.n	8001ea0 <flight_control_loop_update_rc_control+0xe8>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	607b      	str	r3, [r7, #4]

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eac:	4618      	mov	r0, r3
 8001eae:	f012 fbab 	bl	8014608 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_update(
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001eb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ebc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ec0:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ec4:	edd7 1a01 	vldr	s3, [r7, #4]
 8001ec8:	eeb0 1a66 	vmov.f32	s2, s13
 8001ecc:	eef0 0a47 	vmov.f32	s1, s14
 8001ed0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 fc7f 	bl	80047d8 <rc_attitude_control_update>
		target_attitude.z,
		target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	f012 f90d 	bl	8014104 <xQueueGenericSend>
#endif
}
 8001eea:	bf00      	nop
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	bf800000 	.word	0xbf800000

08001ef8 <flight_control_loop_update_imu>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
#endif
}

void flight_control_loop_update_imu(flight_control_loop_t* fcl, coord3D gyro_data, coord3D accel_data) {
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b088      	sub	sp, #32
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	61f8      	str	r0, [r7, #28]
 8001f00:	eeb0 5a40 	vmov.f32	s10, s0
 8001f04:	eef0 5a60 	vmov.f32	s11, s1
 8001f08:	eeb0 6a41 	vmov.f32	s12, s2
 8001f0c:	eef0 6a61 	vmov.f32	s13, s3
 8001f10:	eeb0 7a42 	vmov.f32	s14, s4
 8001f14:	eef0 7a62 	vmov.f32	s15, s5
 8001f18:	ed87 5a04 	vstr	s10, [r7, #16]
 8001f1c:	edc7 5a05 	vstr	s11, [r7, #20]
 8001f20:	ed87 6a06 	vstr	s12, [r7, #24]
 8001f24:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f28:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f2c:	edc7 7a03 	vstr	s15, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001f36:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f012 fb64 	bl	8014608 <xQueueSemaphoreTake>
#endif
	imu_update(&fcl->imu, accel_data, gyro_data);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	ed97 5a04 	vldr	s10, [r7, #16]
 8001f46:	edd7 5a05 	vldr	s11, [r7, #20]
 8001f4a:	ed97 6a06 	vldr	s12, [r7, #24]
 8001f4e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f52:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f56:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f5a:	eef0 1a45 	vmov.f32	s3, s10
 8001f5e:	eeb0 2a65 	vmov.f32	s4, s11
 8001f62:	eef0 2a46 	vmov.f32	s5, s12
 8001f66:	eeb0 0a66 	vmov.f32	s0, s13
 8001f6a:	eef0 0a47 	vmov.f32	s1, s14
 8001f6e:	eeb0 1a67 	vmov.f32	s2, s15
 8001f72:	4618      	mov	r0, r3
 8001f74:	f001 f867 	bl	8003046 <imu_update>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001f7e:	2300      	movs	r3, #0
 8001f80:	2200      	movs	r2, #0
 8001f82:	2100      	movs	r1, #0
 8001f84:	f012 f8be 	bl	8014104 <xQueueGenericSend>
#endif
}
 8001f88:	bf00      	nop
 8001f8a:	3720      	adds	r7, #32
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <flight_control_loop_get_motors_throttle>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
#endif
}

void flight_control_loop_get_motors_throttle(flight_control_loop_t* fcl, float motors_throttle[NUM_MOTORS]) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001fa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f012 fb2f 	bl	8014608 <xQueueSemaphoreTake>
#endif
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
 8001fae:	e00d      	b.n	8001fcc <flight_control_loop_get_motors_throttle+0x3c>
	{
		motors_throttle[i] = fcl->motor_throttle[i];
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	32ec      	adds	r2, #236	@ 0xec
 8001fbe:	0092      	lsls	r2, r2, #2
 8001fc0:	440a      	add	r2, r1
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	2b03      	cmp	r3, #3
 8001fd0:	d9ee      	bls.n	8001fb0 <flight_control_loop_get_motors_throttle+0x20>
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001fd8:	2300      	movs	r3, #0
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2100      	movs	r1, #0
 8001fde:	f012 f891 	bl	8014104 <xQueueGenericSend>
#endif
}
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <MagCal>:

#ifdef __cplusplus
extern "C" {
#endif

void MagCal(float* _x, float* _y, float* _z, float _bias[3], float A_1[3][3]) {
 8001fea:	b480      	push	{r7}
 8001fec:	b089      	sub	sp, #36	@ 0x24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	60f8      	str	r0, [r7, #12]
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	603b      	str	r3, [r7, #0]
	//h_cal = (xyz - _bias) * A^-1
	float x_temp, y_temp, z_temp;

	x_temp = *_x;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	61fb      	str	r3, [r7, #28]
	y_temp = *_y;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	61bb      	str	r3, [r7, #24]
	z_temp = *_z;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	617b      	str	r3, [r7, #20]

	x_temp -= _bias[0];
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	ed97 7a07 	vldr	s14, [r7, #28]
 8002014:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002018:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp -= _bias[1];
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	3304      	adds	r3, #4
 8002020:	edd3 7a00 	vldr	s15, [r3]
 8002024:	ed97 7a06 	vldr	s14, [r7, #24]
 8002028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800202c:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp -= _bias[2];
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	3308      	adds	r3, #8
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ed97 7a05 	vldr	s14, [r7, #20]
 800203c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002040:	edc7 7a05 	vstr	s15, [r7, #20]


	x_temp = x_temp * A_1[0][0] + y_temp * A_1[1][0] + z_temp * A_1[2][0];
 8002044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002046:	ed93 7a00 	vldr	s14, [r3]
 800204a:	edd7 7a07 	vldr	s15, [r7, #28]
 800204e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002054:	330c      	adds	r3, #12
 8002056:	edd3 6a00 	vldr	s13, [r3]
 800205a:	edd7 7a06 	vldr	s15, [r7, #24]
 800205e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002062:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002068:	3318      	adds	r3, #24
 800206a:	edd3 6a00 	vldr	s13, [r3]
 800206e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207a:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp = x_temp * A_1[0][1] + y_temp * A_1[1][1] + z_temp * A_1[2][1];
 800207e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002080:	ed93 7a01 	vldr	s14, [r3, #4]
 8002084:	edd7 7a07 	vldr	s15, [r7, #28]
 8002088:	ee27 7a27 	vmul.f32	s14, s14, s15
 800208c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800208e:	330c      	adds	r3, #12
 8002090:	edd3 6a01 	vldr	s13, [r3, #4]
 8002094:	edd7 7a06 	vldr	s15, [r7, #24]
 8002098:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020a2:	3318      	adds	r3, #24
 80020a4:	edd3 6a01 	vldr	s13, [r3, #4]
 80020a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80020ac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b4:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp = x_temp * A_1[0][2] + y_temp * A_1[1][2] + z_temp * A_1[2][2];
 80020b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80020be:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c8:	330c      	adds	r3, #12
 80020ca:	edd3 6a02 	vldr	s13, [r3, #8]
 80020ce:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020dc:	3318      	adds	r3, #24
 80020de:	edd3 6a02 	vldr	s13, [r3, #8]
 80020e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ee:	edc7 7a05 	vstr	s15, [r7, #20]

	*_x = x_temp;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	69fa      	ldr	r2, [r7, #28]
 80020f6:	601a      	str	r2, [r3, #0]
	*_y = y_temp;
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	601a      	str	r2, [r3, #0]
	*_z = z_temp;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	697a      	ldr	r2, [r7, #20]
 8002102:	601a      	str	r2, [r3, #0]
}
 8002104:	bf00      	nop
 8002106:	3724      	adds	r7, #36	@ 0x24
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <quatnorm>:
// ================================================================
// ===						QUATERNIONS			                ===
// ================================================================
// https://www.mathworks.com/help/aerotbx/referencelist.html?type=function&category=flight-parameters-1&s_tid=CRUX_topnav

float quatnorm(quaternion* q) {
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
	return sqrtf((q->w * q->w) + (q->x * q->x) + (q->y * q->y) + (q->z * q->z));
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	ed93 7a00 	vldr	s14, [r3]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	edd3 6a01 	vldr	s13, [r3, #4]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	edd3 7a01 	vldr	s15, [r3, #4]
 8002134:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002138:	ee37 7a27 	vadd.f32	s14, s14, s15
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	edd3 7a02 	vldr	s15, [r3, #8]
 8002148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800214c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	edd3 6a03 	vldr	s13, [r3, #12]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	edd3 7a03 	vldr	s15, [r3, #12]
 800215c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002160:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002164:	eeb0 0a67 	vmov.f32	s0, s15
 8002168:	f015 fbac 	bl	80178c4 <sqrtf>
 800216c:	eef0 7a40 	vmov.f32	s15, s0
}
 8002170:	eeb0 0a67 	vmov.f32	s0, s15
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}

0800217a <quatconj>:

quaternion quatconj(quaternion* q) {
 800217a:	b490      	push	{r4, r7}
 800217c:	b08e      	sub	sp, #56	@ 0x38
 800217e:	af00      	add	r7, sp, #0
 8002180:	6178      	str	r0, [r7, #20]
    quaternion result;
    result.w =  q->w;
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	61bb      	str	r3, [r7, #24]
    result.x = -q->x;
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	edd3 7a01 	vldr	s15, [r3, #4]
 800218e:	eef1 7a67 	vneg.f32	s15, s15
 8002192:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = -q->y;
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	edd3 7a02 	vldr	s15, [r3, #8]
 800219c:	eef1 7a67 	vneg.f32	s15, s15
 80021a0:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = -q->z;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	edd3 7a03 	vldr	s15, [r3, #12]
 80021aa:	eef1 7a67 	vneg.f32	s15, s15
 80021ae:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 80021b2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80021b6:	f107 0318 	add.w	r3, r7, #24
 80021ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80021c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80021c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80021c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80021c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c8:	ee06 0a10 	vmov	s12, r0
 80021cc:	ee06 1a90 	vmov	s13, r1
 80021d0:	ee07 2a10 	vmov	s14, r2
 80021d4:	ee07 3a90 	vmov	s15, r3
}
 80021d8:	eeb0 0a46 	vmov.f32	s0, s12
 80021dc:	eef0 0a66 	vmov.f32	s1, s13
 80021e0:	eeb0 1a47 	vmov.f32	s2, s14
 80021e4:	eef0 1a67 	vmov.f32	s3, s15
 80021e8:	3738      	adds	r7, #56	@ 0x38
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bc90      	pop	{r4, r7}
 80021ee:	4770      	bx	lr

080021f0 <quatnormalize>:

quaternion quatnormalize(quaternion* q) {
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b091      	sub	sp, #68	@ 0x44
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6178      	str	r0, [r7, #20]
    float im;
    quaternion result;
	float q_norm = quatnorm(q);
 80021f8:	6978      	ldr	r0, [r7, #20]
 80021fa:	f7ff ff89 	bl	8002110 <quatnorm>
 80021fe:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

	if (q_norm <= FLT_EPSILON){
 8002202:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002206:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80022d0 <quatnormalize+0xe0>
 800220a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002212:	d813      	bhi.n	800223c <quatnormalize+0x4c>
	    result.w = 1.0f;
 8002214:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002218:	61bb      	str	r3, [r7, #24]
	    result.x = 0.0f;
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	61fb      	str	r3, [r7, #28]
	    result.y = 0.0f;
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	623b      	str	r3, [r7, #32]
	    result.z = 0.0f;
 8002226:	f04f 0300 	mov.w	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	@ 0x24
		return result;
 800222c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002230:	f107 0318 	add.w	r3, r7, #24
 8002234:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002236:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800223a:	e032      	b.n	80022a2 <quatnormalize+0xb2>
	}

	im = 1.0f / q_norm;
 800223c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002240:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002248:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    result.w = q->w * im;
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	ed93 7a00 	vldr	s14, [r3]
 8002252:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800225a:	edc7 7a06 	vstr	s15, [r7, #24]
    result.x = q->x * im;
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	ed93 7a01 	vldr	s14, [r3, #4]
 8002264:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800226c:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = q->y * im;
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	ed93 7a02 	vldr	s14, [r3, #8]
 8002276:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800227a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227e:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = q->z * im;
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	ed93 7a03 	vldr	s14, [r3, #12]
 8002288:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800228c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002290:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 8002294:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002298:	f107 0318 	add.w	r3, r7, #24
 800229c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800229e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80022a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80022a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022aa:	ee06 0a10 	vmov	s12, r0
 80022ae:	ee06 1a90 	vmov	s13, r1
 80022b2:	ee07 2a10 	vmov	s14, r2
 80022b6:	ee07 3a90 	vmov	s15, r3
 80022ba:	eeb0 0a46 	vmov.f32	s0, s12
 80022be:	eef0 0a66 	vmov.f32	s1, s13
 80022c2:	eeb0 1a47 	vmov.f32	s2, s14
 80022c6:	eef0 1a67 	vmov.f32	s3, s15
 80022ca:	3744      	adds	r7, #68	@ 0x44
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd90      	pop	{r4, r7, pc}
 80022d0:	34000000 	.word	0x34000000

080022d4 <quatmultiply_scalar>:
    result.z = qinv.z / norm_sq;
    return result;
}

// Multiply a reference of a quaternion by a scalar, q = s*q
quaternion quatmultiply_scalar(quaternion *q, float scalar){
 80022d4:	b490      	push	{r4, r7}
 80022d6:	b08e      	sub	sp, #56	@ 0x38
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6178      	str	r0, [r7, #20]
 80022dc:	ed87 0a04 	vstr	s0, [r7, #16]
	quaternion res;
    res.w = q->w * scalar;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ee:	edc7 7a06 	vstr	s15, [r7, #24]
    res.x = q->x * scalar;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	ed93 7a01 	vldr	s14, [r3, #4]
 80022f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80022fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002300:	edc7 7a07 	vstr	s15, [r7, #28]
    res.y = q->y * scalar;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	ed93 7a02 	vldr	s14, [r3, #8]
 800230a:	edd7 7a04 	vldr	s15, [r7, #16]
 800230e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002312:	edc7 7a08 	vstr	s15, [r7, #32]
    res.z = q->z * scalar;
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	ed93 7a03 	vldr	s14, [r3, #12]
 800231c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002324:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002328:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800232c:	f107 0318 	add.w	r3, r7, #24
 8002330:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002332:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002336:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002338:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800233a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800233c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800233e:	ee06 0a10 	vmov	s12, r0
 8002342:	ee06 1a90 	vmov	s13, r1
 8002346:	ee07 2a10 	vmov	s14, r2
 800234a:	ee07 3a90 	vmov	s15, r3
}
 800234e:	eeb0 0a46 	vmov.f32	s0, s12
 8002352:	eef0 0a66 	vmov.f32	s1, s13
 8002356:	eeb0 1a47 	vmov.f32	s2, s14
 800235a:	eef0 1a67 	vmov.f32	s3, s15
 800235e:	3738      	adds	r7, #56	@ 0x38
 8002360:	46bd      	mov	sp, r7
 8002362:	bc90      	pop	{r4, r7}
 8002364:	4770      	bx	lr

08002366 <quatmultiply>:

quaternion quatmultiply(quaternion* _quat1, quaternion* _quat2) {
 8002366:	b490      	push	{r4, r7}
 8002368:	b096      	sub	sp, #88	@ 0x58
 800236a:	af00      	add	r7, sp, #0
 800236c:	6178      	str	r0, [r7, #20]
 800236e:	6139      	str	r1, [r7, #16]
	quaternion res;
	float w1, x1, y1, z1;
	float w2, x2, y2, z2;

	w1 = _quat1->w;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	657b      	str	r3, [r7, #84]	@ 0x54
	x1 = _quat1->x;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	653b      	str	r3, [r7, #80]	@ 0x50
	y1 = _quat1->y;
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	64fb      	str	r3, [r7, #76]	@ 0x4c
	z1 = _quat1->z;
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	64bb      	str	r3, [r7, #72]	@ 0x48

	w2 = _quat2->w;
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	647b      	str	r3, [r7, #68]	@ 0x44
	x2 = _quat2->x;
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	643b      	str	r3, [r7, #64]	@ 0x40
	y2 = _quat2->y;
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	63fb      	str	r3, [r7, #60]	@ 0x3c
	z2 = _quat2->z;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	63bb      	str	r3, [r7, #56]	@ 0x38

	res.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;  // new w
 80023a0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80023a4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80023a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ac:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80023b0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80023b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023bc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80023c0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80023c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023cc:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80023d0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80023d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023dc:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;  // new x
 80023e0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80023e4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80023e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ec:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80023f0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80023f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002400:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002404:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002408:	ee37 7a27 	vadd.f32	s14, s14, s15
 800240c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002410:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002414:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800241c:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;  // new y
 8002420:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002424:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002430:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002438:	ee37 7a67 	vsub.f32	s14, s14, s15
 800243c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002440:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002448:	ee37 7a27 	vadd.f32	s14, s14, s15
 800244c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002450:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a27 	vadd.f32	s15, s14, s15
 800245c:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;	// new z
 8002460:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002464:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800246c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002470:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002480:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002488:	ee37 7a67 	vsub.f32	s14, s14, s15
 800248c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002490:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return res;
 80024a0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80024a4:	f107 0318 	add.w	r3, r7, #24
 80024a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80024ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80024b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80024b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80024b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024b6:	ee06 0a10 	vmov	s12, r0
 80024ba:	ee06 1a90 	vmov	s13, r1
 80024be:	ee07 2a10 	vmov	s14, r2
 80024c2:	ee07 3a90 	vmov	s15, r3
}
 80024c6:	eeb0 0a46 	vmov.f32	s0, s12
 80024ca:	eef0 0a66 	vmov.f32	s1, s13
 80024ce:	eeb0 1a47 	vmov.f32	s2, s14
 80024d2:	eef0 1a67 	vmov.f32	s3, s15
 80024d6:	3758      	adds	r7, #88	@ 0x58
 80024d8:	46bd      	mov	sp, r7
 80024da:	bc90      	pop	{r4, r7}
 80024dc:	4770      	bx	lr

080024de <quatrotate>:
quaternion quatdivide(quaternion* _quat1, quaternion* _quat2) {
	quaternion qtemp = quatinv(_quat2);
	return quatmultiply(&qtemp, _quat1);
}

vector3D quatrotate(quaternion* q, vector3D* vect) {
 80024de:	b580      	push	{r7, lr}
 80024e0:	b094      	sub	sp, #80	@ 0x50
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	6178      	str	r0, [r7, #20]
 80024e6:	6139      	str	r1, [r7, #16]
	// - P_out is the output vector
	// - q is the orientation quaternion
	// - P_in is the input vector (a*aReal)
	// - conj(q) is the conjugate of the orientation quaternion (q=[w,x,y,z], q*=[w,-x,-y,-z])

	quaternion p = { 0.0f, vect->x, vect->y, vect->z }, qtemp;
 80024e8:	f04f 0300 	mov.w	r3, #0
 80024ec:	637b      	str	r3, [r7, #52]	@ 0x34
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	643b      	str	r3, [r7, #64]	@ 0x40

	// quaternion multiplication: q * p, stored back in p
	p = quatmultiply(q, &p);
 8002500:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002504:	4619      	mov	r1, r3
 8002506:	6978      	ldr	r0, [r7, #20]
 8002508:	f7ff ff2d 	bl	8002366 <quatmultiply>
 800250c:	eeb0 6a40 	vmov.f32	s12, s0
 8002510:	eef0 6a60 	vmov.f32	s13, s1
 8002514:	eeb0 7a41 	vmov.f32	s14, s2
 8002518:	eef0 7a61 	vmov.f32	s15, s3
 800251c:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 8002520:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8002524:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8002528:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// quaternion multiplication: p * conj(q), stored back in p
	qtemp = quatconj(q);
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f7ff fe24 	bl	800217a <quatconj>
 8002532:	eeb0 6a40 	vmov.f32	s12, s0
 8002536:	eef0 6a60 	vmov.f32	s13, s1
 800253a:	eeb0 7a41 	vmov.f32	s14, s2
 800253e:	eef0 7a61 	vmov.f32	s15, s3
 8002542:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8002546:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 800254a:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 800254e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	p = quatmultiply(&p, &qtemp);
 8002552:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002556:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800255a:	4611      	mov	r1, r2
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff02 	bl	8002366 <quatmultiply>
 8002562:	eeb0 6a40 	vmov.f32	s12, s0
 8002566:	eef0 6a60 	vmov.f32	s13, s1
 800256a:	eeb0 7a41 	vmov.f32	s14, s2
 800256e:	eef0 7a61 	vmov.f32	s15, s3
 8002572:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 8002576:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 800257a:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 800257e:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// p quaternion is now [0, x', y', z']
	vector3D result;
	result.x = p.x;
 8002582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002584:	61bb      	str	r3, [r7, #24]
	result.y = p.y;
 8002586:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002588:	61fb      	str	r3, [r7, #28]
	result.z = p.z;
 800258a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800258c:	623b      	str	r3, [r7, #32]
	return result;
 800258e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002592:	f107 0218 	add.w	r2, r7, #24
 8002596:	ca07      	ldmia	r2, {r0, r1, r2}
 8002598:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800259c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800259e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80025a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80025a2:	ee06 1a90 	vmov	s13, r1
 80025a6:	ee07 2a10 	vmov	s14, r2
 80025aa:	ee07 3a90 	vmov	s15, r3
}
 80025ae:	eeb0 0a66 	vmov.f32	s0, s13
 80025b2:	eef0 0a47 	vmov.f32	s1, s14
 80025b6:	eeb0 1a67 	vmov.f32	s2, s15
 80025ba:	3750      	adds	r7, #80	@ 0x50
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <quat2angle>:

// Quaternion to rotating angles (Euler angles)
// rotation order: yaw (Z), pitch (Y), roll (X)
angles3D quat2angle(quaternion* q) {
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b090      	sub	sp, #64	@ 0x40
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6178      	str	r0, [r7, #20]
	angles3D angles;
	//float sinr_cosp, cosr_cosp, sinp, siny_cosp, cosy_cosp;
	float w, x, y, z;

	w = q->w;
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x = q->x;
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	63bb      	str	r3, [r7, #56]	@ 0x38
	y = q->y;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	637b      	str	r3, [r7, #52]	@ 0x34
	z = q->z;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	68db      	ldr	r3, [r3, #12]
 80025de:	633b      	str	r3, [r7, #48]	@ 0x30

//	angles.x = atan2(2 * x * y - 2 * w * z, 2 * w * w + 2 * x * x - 1);   // psi
//	angles.y = -asin(2 * x * z + 2 * w * y);                              // theta
//	angles.z = atan2(2 * y * z - 2 * w * x, 2 * w * w + 2 * z * z - 1);   // phi

	angles.x = atan2f(2.0f * (w * x + y * z), 1.0f - 2.0f * (x * x + y * y)); // roll (X)
 80025e0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80025e4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025ec:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 80025f0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80025f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002600:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002604:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002608:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800260c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002614:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002618:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800261c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002620:	eef0 0a67 	vmov.f32	s1, s15
 8002624:	eeb0 0a66 	vmov.f32	s0, s13
 8002628:	f015 f8f2 	bl	8017810 <atan2f>
 800262c:	eef0 7a40 	vmov.f32	s15, s0
 8002630:	edc7 7a06 	vstr	s15, [r7, #24]
	angles.y = asinf(2.0f * (w * y - z * x));                           // pitch (Y)
 8002634:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002638:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800263c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002640:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 8002644:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002648:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800264c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002650:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002654:	eeb0 0a67 	vmov.f32	s0, s15
 8002658:	f015 f8ae 	bl	80177b8 <asinf>
 800265c:	eef0 7a40 	vmov.f32	s15, s0
 8002660:	edc7 7a07 	vstr	s15, [r7, #28]
	angles.z = atan2f(2.0f * (w * z + x * y), 1.0f - 2.0f * (y * y + z * z)); // yaw (Z)
 8002664:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002668:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800266c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002670:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002674:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002678:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800267c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002680:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002684:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002688:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800268c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002690:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002698:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800269c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80026a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a4:	eef0 0a67 	vmov.f32	s1, s15
 80026a8:	eeb0 0a66 	vmov.f32	s0, s13
 80026ac:	f015 f8b0 	bl	8017810 <atan2f>
 80026b0:	eef0 7a40 	vmov.f32	s15, s0
 80026b4:	edc7 7a08 	vstr	s15, [r7, #32]

	return angles;
 80026b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026bc:	f107 0218 	add.w	r2, r7, #24
 80026c0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026c2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80026c6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80026c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80026ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026cc:	ee06 1a90 	vmov	s13, r1
 80026d0:	ee07 2a10 	vmov	s14, r2
 80026d4:	ee07 3a90 	vmov	s15, r3
}
 80026d8:	eeb0 0a66 	vmov.f32	s0, s13
 80026dc:	eef0 0a47 	vmov.f32	s1, s14
 80026e0:	eeb0 1a67 	vmov.f32	s2, s15
 80026e4:	3740      	adds	r7, #64	@ 0x40
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <quat2rotvec>:

vector3D quat2rotvec(quaternion q) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b090      	sub	sp, #64	@ 0x40
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	eeb0 6a40 	vmov.f32	s12, s0
 80026f6:	eef0 6a60 	vmov.f32	s13, s1
 80026fa:	eeb0 7a41 	vmov.f32	s14, s2
 80026fe:	eef0 7a61 	vmov.f32	s15, s3
 8002702:	ed87 6a04 	vstr	s12, [r7, #16]
 8002706:	edc7 6a05 	vstr	s13, [r7, #20]
 800270a:	ed87 7a06 	vstr	s14, [r7, #24]
 800270e:	edc7 7a07 	vstr	s15, [r7, #28]
	q = quatnormalize(&q);
 8002712:	f107 0310 	add.w	r3, r7, #16
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff fd6a 	bl	80021f0 <quatnormalize>
 800271c:	eeb0 6a40 	vmov.f32	s12, s0
 8002720:	eef0 6a60 	vmov.f32	s13, s1
 8002724:	eeb0 7a41 	vmov.f32	s14, s2
 8002728:	eef0 7a61 	vmov.f32	s15, s3
 800272c:	ed87 6a04 	vstr	s12, [r7, #16]
 8002730:	edc7 6a05 	vstr	s13, [r7, #20]
 8002734:	ed87 7a06 	vstr	s14, [r7, #24]
 8002738:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure shortest rotation
    if (q.w < 0) {
 800273c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002740:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002748:	d517      	bpl.n	800277a <quat2rotvec+0x8e>
        q.w = -q.w;
 800274a:	edd7 7a04 	vldr	s15, [r7, #16]
 800274e:	eef1 7a67 	vneg.f32	s15, s15
 8002752:	edc7 7a04 	vstr	s15, [r7, #16]
        q.x = -q.x;
 8002756:	edd7 7a05 	vldr	s15, [r7, #20]
 800275a:	eef1 7a67 	vneg.f32	s15, s15
 800275e:	edc7 7a05 	vstr	s15, [r7, #20]
        q.y = -q.y;
 8002762:	edd7 7a06 	vldr	s15, [r7, #24]
 8002766:	eef1 7a67 	vneg.f32	s15, s15
 800276a:	edc7 7a06 	vstr	s15, [r7, #24]
        q.z = -q.z;
 800276e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002772:	eef1 7a67 	vneg.f32	s15, s15
 8002776:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    vector3D rotvec;
    float angle = 2.0f * acosf(q.w);
 800277a:	edd7 7a04 	vldr	s15, [r7, #16]
 800277e:	eeb0 0a67 	vmov.f32	s0, s15
 8002782:	f014 ffed 	bl	8017760 <acosf>
 8002786:	eef0 7a40 	vmov.f32	s15, s0
 800278a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800278e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float s = sqrtf(1.0f - q.w * q.w);  // sin(angle/2)
 8002792:	ed97 7a04 	vldr	s14, [r7, #16]
 8002796:	edd7 7a04 	vldr	s15, [r7, #16]
 800279a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80027a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a6:	eeb0 0a67 	vmov.f32	s0, s15
 80027aa:	f015 f88b 	bl	80178c4 <sqrtf>
 80027ae:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

    if (s <= FLT_EPSILON) {
 80027b2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80027b6:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002854 <quat2rotvec+0x168>
 80027ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80027be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c2:	d809      	bhi.n	80027d8 <quat2rotvec+0xec>
        // If angle is too small, return zero vector
        rotvec.x = 0.0f;
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	623b      	str	r3, [r7, #32]
        rotvec.y = 0.0f;
 80027ca:	f04f 0300 	mov.w	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
        rotvec.z = 0.0f;
 80027d0:	f04f 0300 	mov.w	r3, #0
 80027d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80027d6:	e023      	b.n	8002820 <quat2rotvec+0x134>
    } else {
        // Normalize axis and scale by angle
        rotvec.x = angle * (q.x / s);
 80027d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80027dc:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80027e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027e4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ec:	edc7 7a08 	vstr	s15, [r7, #32]
        rotvec.y = angle * (q.y / s);
 80027f0:	edd7 6a06 	vldr	s13, [r7, #24]
 80027f4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80027f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027fc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002800:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002804:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        rotvec.z = angle * (q.z / s);
 8002808:	edd7 6a07 	vldr	s13, [r7, #28]
 800280c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002810:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002814:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002818:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }

    return rotvec;
 8002820:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002824:	f107 0220 	add.w	r2, r7, #32
 8002828:	ca07      	ldmia	r2, {r0, r1, r2}
 800282a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800282e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002832:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002834:	ee06 1a90 	vmov	s13, r1
 8002838:	ee07 2a10 	vmov	s14, r2
 800283c:	ee07 3a90 	vmov	s15, r3
}
 8002840:	eeb0 0a66 	vmov.f32	s0, s13
 8002844:	eef0 0a47 	vmov.f32	s1, s14
 8002848:	eeb0 1a67 	vmov.f32	s2, s15
 800284c:	3740      	adds	r7, #64	@ 0x40
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	34000000 	.word	0x34000000

08002858 <angle2quat>:

// rotation order: yaw (Z), pitch (Y), roll (X) in radians
quaternion angle2quat(angles3D* angles) {
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b095      	sub	sp, #84	@ 0x54
 800285c:	af00      	add	r7, sp, #0
 800285e:	6178      	str	r0, [r7, #20]
	// Abbreviations for the various angular functions
	float cy = cosf(angles->z * 0.5f);
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	edd3 7a02 	vldr	s15, [r3, #8]
 8002866:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800286a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800286e:	eeb0 0a67 	vmov.f32	s0, s15
 8002872:	f015 f919 	bl	8017aa8 <cosf>
 8002876:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
	float sy = sinf(angles->z * 0.5f);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002880:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002888:	eeb0 0a67 	vmov.f32	s0, s15
 800288c:	f015 f958 	bl	8017b40 <sinf>
 8002890:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
	float cp = cosf(angles->y * 0.5f);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	edd3 7a01 	vldr	s15, [r3, #4]
 800289a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800289e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	f015 f8ff 	bl	8017aa8 <cosf>
 80028aa:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	float sp = sinf(angles->y * 0.5f);
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80028b4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028bc:	eeb0 0a67 	vmov.f32	s0, s15
 80028c0:	f015 f93e 	bl	8017b40 <sinf>
 80028c4:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
	float cr = cosf(angles->x * 0.5f);
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d6:	eeb0 0a67 	vmov.f32	s0, s15
 80028da:	f015 f8e5 	bl	8017aa8 <cosf>
 80028de:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	float sr = sinf(angles->x * 0.5f);
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	edd3 7a00 	vldr	s15, [r3]
 80028e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028f0:	eeb0 0a67 	vmov.f32	s0, s15
 80028f4:	f015 f924 	bl	8017b40 <sinf>
 80028f8:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

	quaternion q;
	q.w = cr * cp * cy + sr * sp * sy;
 80028fc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002900:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002904:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002908:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800290c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002910:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002914:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002918:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800291c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002920:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002928:	edc7 7a06 	vstr	s15, [r7, #24]
	q.x = sr * cp * cy - cr * sp * sy;
 800292c:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002930:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002934:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002938:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800293c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002940:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002944:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002948:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800294c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002954:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002958:	edc7 7a07 	vstr	s15, [r7, #28]
	q.y = cr * sp * cy + sr * cp * sy;
 800295c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002960:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002964:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002968:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800296c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002970:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002974:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002978:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800297c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002980:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002988:	edc7 7a08 	vstr	s15, [r7, #32]
	q.z = cr * cp * sy - sr * sp * cy;
 800298c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002990:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002994:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002998:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 800299c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029a0:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80029a4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80029a8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029ac:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80029b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029b8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return q;
 80029bc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80029c0:	f107 0318 	add.w	r3, r7, #24
 80029c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80029c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80029ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80029cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029d2:	ee06 0a10 	vmov	s12, r0
 80029d6:	ee06 1a90 	vmov	s13, r1
 80029da:	ee07 2a10 	vmov	s14, r2
 80029de:	ee07 3a90 	vmov	s15, r3
}
 80029e2:	eeb0 0a46 	vmov.f32	s0, s12
 80029e6:	eef0 0a66 	vmov.f32	s1, s13
 80029ea:	eeb0 1a47 	vmov.f32	s2, s14
 80029ee:	eef0 1a67 	vmov.f32	s3, s15
 80029f2:	3754      	adds	r7, #84	@ 0x54
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd90      	pop	{r4, r7, pc}

080029f8 <quatadd>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
quaternion quatadd(quaternion *L, quaternion *R){
 80029f8:	b490      	push	{r4, r7}
 80029fa:	b08e      	sub	sp, #56	@ 0x38
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6178      	str	r0, [r7, #20]
 8002a00:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w + R->w;
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	ed93 7a00 	vldr	s14, [r3]
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	edd3 7a00 	vldr	s15, [r3]
 8002a0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a12:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x + R->x;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a26:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y + R->y;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a3a:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z + R->z;
 8002a3e:	697b      	ldr	r3, [r7, #20]
 8002a40:	ed93 7a03 	vldr	s14, [r3, #12]
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a4e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002a52:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002a56:	f107 0318 	add.w	r3, r7, #24
 8002a5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a5c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a68:	ee06 0a10 	vmov	s12, r0
 8002a6c:	ee06 1a90 	vmov	s13, r1
 8002a70:	ee07 2a10 	vmov	s14, r2
 8002a74:	ee07 3a90 	vmov	s15, r3
}
 8002a78:	eeb0 0a46 	vmov.f32	s0, s12
 8002a7c:	eef0 0a66 	vmov.f32	s1, s13
 8002a80:	eeb0 1a47 	vmov.f32	s2, s14
 8002a84:	eef0 1a67 	vmov.f32	s3, s15
 8002a88:	3738      	adds	r7, #56	@ 0x38
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc90      	pop	{r4, r7}
 8002a8e:	4770      	bx	lr

08002a90 <quatsub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
quaternion quatsub(quaternion *L, quaternion *R){
 8002a90:	b490      	push	{r4, r7}
 8002a92:	b08e      	sub	sp, #56	@ 0x38
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6178      	str	r0, [r7, #20]
 8002a98:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w - R->w;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	ed93 7a00 	vldr	s14, [r3]
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x - R->x;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002abe:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y - R->y;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ace:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ad2:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z - R->z;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	ed93 7a03 	vldr	s14, [r3, #12]
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	edd3 7a03 	vldr	s15, [r3, #12]
 8002ae2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ae6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002aea:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002aee:	f107 0318 	add.w	r3, r7, #24
 8002af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002af4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002af8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002afa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002afe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b00:	ee06 0a10 	vmov	s12, r0
 8002b04:	ee06 1a90 	vmov	s13, r1
 8002b08:	ee07 2a10 	vmov	s14, r2
 8002b0c:	ee07 3a90 	vmov	s15, r3
}
 8002b10:	eeb0 0a46 	vmov.f32	s0, s12
 8002b14:	eef0 0a66 	vmov.f32	s1, s13
 8002b18:	eeb0 1a47 	vmov.f32	s2, s14
 8002b1c:	eef0 1a67 	vmov.f32	s3, s15
 8002b20:	3738      	adds	r7, #56	@ 0x38
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bc90      	pop	{r4, r7}
 8002b26:	4770      	bx	lr

08002b28 <quat_error>:

// Compute error quaternion: q_err = conj(current) * desired
quaternion quat_error(quaternion *q_current, quaternion *q_desired) {
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08e      	sub	sp, #56	@ 0x38
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6178      	str	r0, [r7, #20]
 8002b30:	6139      	str	r1, [r7, #16]
    quaternion q_conj = quatconj(q_current);
 8002b32:	6978      	ldr	r0, [r7, #20]
 8002b34:	f7ff fb21 	bl	800217a <quatconj>
 8002b38:	eeb0 6a40 	vmov.f32	s12, s0
 8002b3c:	eef0 6a60 	vmov.f32	s13, s1
 8002b40:	eeb0 7a41 	vmov.f32	s14, s2
 8002b44:	eef0 7a61 	vmov.f32	s15, s3
 8002b48:	ed87 6a06 	vstr	s12, [r7, #24]
 8002b4c:	edc7 6a07 	vstr	s13, [r7, #28]
 8002b50:	ed87 7a08 	vstr	s14, [r7, #32]
 8002b54:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return quatmultiply(q_desired, &q_conj);
 8002b58:	f107 0318 	add.w	r3, r7, #24
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	6938      	ldr	r0, [r7, #16]
 8002b60:	f7ff fc01 	bl	8002366 <quatmultiply>
 8002b64:	eeb0 6a40 	vmov.f32	s12, s0
 8002b68:	eef0 6a60 	vmov.f32	s13, s1
 8002b6c:	eeb0 7a41 	vmov.f32	s14, s2
 8002b70:	eef0 7a61 	vmov.f32	s15, s3
 8002b74:	ed87 6a0a 	vstr	s12, [r7, #40]	@ 0x28
 8002b78:	edc7 6a0b 	vstr	s13, [r7, #44]	@ 0x2c
 8002b7c:	ed87 7a0c 	vstr	s14, [r7, #48]	@ 0x30
 8002b80:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8002b84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8c:	ee06 0a10 	vmov	s12, r0
 8002b90:	ee06 1a90 	vmov	s13, r1
 8002b94:	ee07 2a10 	vmov	s14, r2
 8002b98:	ee07 3a90 	vmov	s15, r3
}
 8002b9c:	eeb0 0a46 	vmov.f32	s0, s12
 8002ba0:	eef0 0a66 	vmov.f32	s1, s13
 8002ba4:	eeb0 1a47 	vmov.f32	s2, s14
 8002ba8:	eef0 1a67 	vmov.f32	s3, s15
 8002bac:	3738      	adds	r7, #56	@ 0x38
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
	...

08002bb4 <imu_init>:
	float accel_filter_cutoff_freq_hz,
	float gyro_filter_cutoff_freq_hz,
	float accel_sample_rate_hz,
	float gyro_sample_rate_hz,
	float madgwick_sample_rate_hz
) {
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b08b      	sub	sp, #44	@ 0x2c
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6178      	str	r0, [r7, #20]
 8002bbc:	ed87 0a04 	vstr	s0, [r7, #16]
 8002bc0:	edc7 0a03 	vstr	s1, [r7, #12]
 8002bc4:	ed87 1a02 	vstr	s2, [r7, #8]
 8002bc8:	edc7 1a01 	vstr	s3, [r7, #4]
 8002bcc:	ed87 2a00 	vstr	s4, [r7]
	memset(im, 0, sizeof(imu_t));
 8002bd0:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	6978      	ldr	r0, [r7, #20]
 8002bd8:	f017 fc94 	bl	801a504 <memset>

	imu_set_leveled_attitude(im, IMU_DEFAULT_LEVELD_ATTITUDE_Q); // set default leveld position to identity quaternion
 8002bdc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	f04f 0300 	mov.w	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	623b      	str	r3, [r7, #32]
 8002bee:	f04f 0300 	mov.w	r3, #0
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf4:	ed97 6a06 	vldr	s12, [r7, #24]
 8002bf8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bfc:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c00:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c04:	eeb0 0a46 	vmov.f32	s0, s12
 8002c08:	eef0 0a66 	vmov.f32	s1, s13
 8002c0c:	eeb0 1a47 	vmov.f32	s2, s14
 8002c10:	eef0 1a67 	vmov.f32	s3, s15
 8002c14:	6978      	ldr	r0, [r7, #20]
 8002c16:	f000 f85d 	bl	8002cd4 <imu_set_leveled_attitude>
	im->estimated_q = im->leveld_attitude_q; // identity quaternion
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 8002c22:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002c26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	im->accel_misalignment_A_inv[0][0] = 1.0f; // default: no misalignment
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c32:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	im->accel_misalignment_A_inv[1][1] = 1.0f; // default: no misalignment
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c3c:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	im->accel_misalignment_A_inv[2][2] = 1.0f; // default: no misalignment
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002c46:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

	pt1_filter_init_lowpass(&(im->accel_pt1_filter_x), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	3388      	adds	r3, #136	@ 0x88
 8002c4e:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c52:	ed97 0a04 	vldr	s0, [r7, #16]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe fcfa 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_y), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	3398      	adds	r3, #152	@ 0x98
 8002c60:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c64:	ed97 0a04 	vldr	s0, [r7, #16]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fe fcf1 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_z), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	33a8      	adds	r3, #168	@ 0xa8
 8002c72:	edd7 0a02 	vldr	s1, [r7, #8]
 8002c76:	ed97 0a04 	vldr	s0, [r7, #16]
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe fce8 	bl	8001650 <pt1_filter_init_lowpass>

	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_x), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	33b8      	adds	r3, #184	@ 0xb8
 8002c84:	edd7 0a01 	vldr	s1, [r7, #4]
 8002c88:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7fe fcdf 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_y), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	33c8      	adds	r3, #200	@ 0xc8
 8002c96:	edd7 0a01 	vldr	s1, [r7, #4]
 8002c9a:	ed97 0a03 	vldr	s0, [r7, #12]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7fe fcd6 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_z), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	33d8      	adds	r3, #216	@ 0xd8
 8002ca8:	edd7 0a01 	vldr	s1, [r7, #4]
 8002cac:	ed97 0a03 	vldr	s0, [r7, #12]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7fe fccd 	bl	8001650 <pt1_filter_init_lowpass>

	madgwick_filter_init(&(im->madgwick_filter), madgwick_sample_rate_hz, (float)IMU_GYRO_MEAN_ERROR_RAD);
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	3370      	adds	r3, #112	@ 0x70
 8002cba:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8002cd0 <imu_init+0x11c>
 8002cbe:	ed97 0a00 	vldr	s0, [r7]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 fac4 	bl	8003250 <madgwick_filter_init>
}
 8002cc8:	bf00      	nop
 8002cca:	372c      	adds	r7, #44	@ 0x2c
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd90      	pop	{r4, r7, pc}
 8002cd0:	3db2b8c2 	.word	0x3db2b8c2

08002cd4 <imu_set_leveled_attitude>:

void imu_set_leveled_attitude(imu_t* im, quaternion leveld_attitude_q) {
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b097      	sub	sp, #92	@ 0x5c
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6178      	str	r0, [r7, #20]
 8002cdc:	eeb0 6a40 	vmov.f32	s12, s0
 8002ce0:	eef0 6a60 	vmov.f32	s13, s1
 8002ce4:	eeb0 7a41 	vmov.f32	s14, s2
 8002ce8:	eef0 7a61 	vmov.f32	s15, s3
 8002cec:	ed87 6a01 	vstr	s12, [r7, #4]
 8002cf0:	edc7 6a02 	vstr	s13, [r7, #8]
 8002cf4:	ed87 7a03 	vstr	s14, [r7, #12]
 8002cf8:	edc7 7a04 	vstr	s15, [r7, #16]

	// recalculate the offset from leveld position to estimated position
	quaternion q_level = leveld_attitude_q;
 8002cfc:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8002d00:	1d3b      	adds	r3, r7, #4
 8002d02:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d04:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	q_level = quatnormalize(&q_level);          // safety
 8002d08:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7ff fa6f 	bl	80021f0 <quatnormalize>
 8002d12:	eeb0 6a40 	vmov.f32	s12, s0
 8002d16:	eef0 6a60 	vmov.f32	s13, s1
 8002d1a:	eeb0 7a41 	vmov.f32	s14, s2
 8002d1e:	eef0 7a61 	vmov.f32	s15, s3
 8002d22:	ed87 6a12 	vstr	s12, [r7, #72]	@ 0x48
 8002d26:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 8002d2a:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 8002d2e:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	quaternion q_ref = (quaternion){ 1.0f,0.0f,0.0f,0.0f };      // "leveled = identity"
 8002d32:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d36:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002d38:	f04f 0300 	mov.w	r3, #0
 8002d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	647b      	str	r3, [r7, #68]	@ 0x44
	q_level = quatconj(&q_level);
 8002d4a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fa13 	bl	800217a <quatconj>
 8002d54:	eeb0 6a40 	vmov.f32	s12, s0
 8002d58:	eef0 6a60 	vmov.f32	s13, s1
 8002d5c:	eeb0 7a41 	vmov.f32	s14, s2
 8002d60:	eef0 7a61 	vmov.f32	s15, s3
 8002d64:	ed87 6a12 	vstr	s12, [r7, #72]	@ 0x48
 8002d68:	edc7 6a13 	vstr	s13, [r7, #76]	@ 0x4c
 8002d6c:	ed87 7a14 	vstr	s14, [r7, #80]	@ 0x50
 8002d70:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
	quaternion q_off = quatmultiply(&q_ref, &q_level); // q_off = q_ref * q_level^-1
 8002d74:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002d78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff faf1 	bl	8002366 <quatmultiply>
 8002d84:	eeb0 6a40 	vmov.f32	s12, s0
 8002d88:	eef0 6a60 	vmov.f32	s13, s1
 8002d8c:	eeb0 7a41 	vmov.f32	s14, s2
 8002d90:	eef0 7a61 	vmov.f32	s15, s3
 8002d94:	ed87 6a06 	vstr	s12, [r7, #24]
 8002d98:	edc7 6a07 	vstr	s13, [r7, #28]
 8002d9c:	ed87 7a08 	vstr	s14, [r7, #32]
 8002da0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	q_off = quatnormalize(&q_off);
 8002da4:	f107 0318 	add.w	r3, r7, #24
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7ff fa21 	bl	80021f0 <quatnormalize>
 8002dae:	eeb0 6a40 	vmov.f32	s12, s0
 8002db2:	eef0 6a60 	vmov.f32	s13, s1
 8002db6:	eeb0 7a41 	vmov.f32	s14, s2
 8002dba:	eef0 7a61 	vmov.f32	s15, s3
 8002dbe:	ed87 6a06 	vstr	s12, [r7, #24]
 8002dc2:	edc7 6a07 	vstr	s13, [r7, #28]
 8002dc6:	ed87 7a08 	vstr	s14, [r7, #32]
 8002dca:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	im->leveld_attitude_q = leveld_attitude_q;
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	f503 7492 	add.w	r4, r3, #292	@ 0x124
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002dd8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	im->q_offset = q_off; // store the offset from leveld position to estimated position
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f503 749a 	add.w	r4, r3, #308	@ 0x134
 8002de2:	f107 0318 	add.w	r3, r7, #24
 8002de6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002de8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002dec:	bf00      	nop
 8002dee:	375c      	adds	r7, #92	@ 0x5c
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd90      	pop	{r4, r7, pc}

08002df4 <imu_update_gyro>:

void imu_update_gyro(imu_t* im, coord3D imu_raw_gyro_rad) {
 8002df4:	b590      	push	{r4, r7, lr}
 8002df6:	b085      	sub	sp, #20
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	eef0 6a40 	vmov.f32	s13, s0
 8002e00:	eeb0 7a60 	vmov.f32	s14, s1
 8002e04:	eef0 7a41 	vmov.f32	s15, s2
 8002e08:	edc7 6a00 	vstr	s13, [r7]
 8002e0c:	ed87 7a01 	vstr	s14, [r7, #4]
 8002e10:	edc7 7a02 	vstr	s15, [r7, #8]

	im->raw_gyro = imu_raw_gyro_rad; // store raw gyro data
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	330c      	adds	r3, #12
 8002e18:	463a      	mov	r2, r7
 8002e1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e1c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->calibrated_gyro.x = imu_raw_gyro_rad.x - im->gyro_bias[0];
 8002e20:	ed97 7a00 	vldr	s14, [r7]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 8002e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	im->calibrated_gyro.y = imu_raw_gyro_rad.y - im->gyro_bias[1];
 8002e34:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 8002e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	im->calibrated_gyro.z = imu_raw_gyro_rad.z - im->gyro_bias[2];
 8002e48:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8002e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	im->filtered_gyro.x = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_x), im->calibrated_gyro.x);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002e68:	eeb0 0a67 	vmov.f32	s0, s15
 8002e6c:	4610      	mov	r0, r2
 8002e6e:	f7fe fc53 	bl	8001718 <pt1_filter_apply_lowpass>
 8002e72:	eef0 7a40 	vmov.f32	s15, s0
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	im->filtered_gyro.y = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_y), im->calibrated_gyro.y);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002e88:	eeb0 0a67 	vmov.f32	s0, s15
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	f7fe fc43 	bl	8001718 <pt1_filter_apply_lowpass>
 8002e92:	eef0 7a40 	vmov.f32	s15, s0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	im->filtered_gyro.z = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_z), im->calibrated_gyro.z);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8002eac:	4610      	mov	r0, r2
 8002eae:	f7fe fc33 	bl	8001718 <pt1_filter_apply_lowpass>
 8002eb2:	eef0 7a40 	vmov.f32	s15, s0
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	im->body_frame_gyro = quatrotate(&(im->q_offset), &(im->filtered_gyro));
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	333c      	adds	r3, #60	@ 0x3c
 8002ec6:	68fc      	ldr	r4, [r7, #12]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7ff fb07 	bl	80024de <quatrotate>
 8002ed0:	eef0 6a40 	vmov.f32	s13, s0
 8002ed4:	eeb0 7a60 	vmov.f32	s14, s1
 8002ed8:	eef0 7a41 	vmov.f32	s15, s2
 8002edc:	edc4 6a15 	vstr	s13, [r4, #84]	@ 0x54
 8002ee0:	ed84 7a16 	vstr	s14, [r4, #88]	@ 0x58
 8002ee4:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd90      	pop	{r4, r7, pc}

08002ef0 <imu_update_accel>:

void imu_update_accel(imu_t* im, coord3D imu_raw_accel_m_s2) {
 8002ef0:	b5b0      	push	{r4, r5, r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	eef0 6a40 	vmov.f32	s13, s0
 8002efc:	eeb0 7a60 	vmov.f32	s14, s1
 8002f00:	eef0 7a41 	vmov.f32	s15, s2
 8002f04:	edc7 6a00 	vstr	s13, [r7]
 8002f08:	ed87 7a01 	vstr	s14, [r7, #4]
 8002f0c:	edc7 7a02 	vstr	s15, [r7, #8]
	im->raw_accel = imu_raw_accel_m_s2;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	461c      	mov	r4, r3
 8002f14:	463b      	mov	r3, r7
 8002f16:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002f1a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	MagCal(&(imu_raw_accel_m_s2.x), &(imu_raw_accel_m_s2.y), &(imu_raw_accel_m_s2.z), im->accel_bias, im->accel_misalignment_A_inv);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f103 05e8 	add.w	r5, r3, #232	@ 0xe8
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	33f4      	adds	r3, #244	@ 0xf4
 8002f28:	463a      	mov	r2, r7
 8002f2a:	f102 0408 	add.w	r4, r2, #8
 8002f2e:	463a      	mov	r2, r7
 8002f30:	1d11      	adds	r1, r2, #4
 8002f32:	4638      	mov	r0, r7
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	462b      	mov	r3, r5
 8002f38:	4622      	mov	r2, r4
 8002f3a:	f7ff f856 	bl	8001fea <MagCal>

	im->calibrated_accel = imu_raw_accel_m_s2;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3318      	adds	r3, #24
 8002f42:	463a      	mov	r2, r7
 8002f44:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f46:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->filtered_accel.x = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_x), imu_raw_accel_m_s2.x);
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	3388      	adds	r3, #136	@ 0x88
 8002f4e:	edd7 7a00 	vldr	s15, [r7]
 8002f52:	eeb0 0a67 	vmov.f32	s0, s15
 8002f56:	4618      	mov	r0, r3
 8002f58:	f7fe fbde 	bl	8001718 <pt1_filter_apply_lowpass>
 8002f5c:	eef0 7a40 	vmov.f32	s15, s0
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	im->filtered_accel.y = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_y), imu_raw_accel_m_s2.y);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	3398      	adds	r3, #152	@ 0x98
 8002f6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fbd0 	bl	8001718 <pt1_filter_apply_lowpass>
 8002f78:	eef0 7a40 	vmov.f32	s15, s0
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	im->filtered_accel.z = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_z), imu_raw_accel_m_s2.z);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	33a8      	adds	r3, #168	@ 0xa8
 8002f86:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fbc2 	bl	8001718 <pt1_filter_apply_lowpass>
 8002f94:	eef0 7a40 	vmov.f32	s15, s0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	im->body_frame_accel = quatrotate(&(im->q_offset), &(im->filtered_accel));
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	3330      	adds	r3, #48	@ 0x30
 8002fa8:	68fc      	ldr	r4, [r7, #12]
 8002faa:	4619      	mov	r1, r3
 8002fac:	4610      	mov	r0, r2
 8002fae:	f7ff fa96 	bl	80024de <quatrotate>
 8002fb2:	eef0 6a40 	vmov.f32	s13, s0
 8002fb6:	eeb0 7a60 	vmov.f32	s14, s1
 8002fba:	eef0 7a41 	vmov.f32	s15, s2
 8002fbe:	edc4 6a12 	vstr	s13, [r4, #72]	@ 0x48
 8002fc2:	ed84 7a13 	vstr	s14, [r4, #76]	@ 0x4c
 8002fc6:	edc4 7a14 	vstr	s15, [r4, #80]	@ 0x50
}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bdb0      	pop	{r4, r5, r7, pc}

08002fd2 <imu_update_madgwick>:

void imu_update_madgwick(imu_t* im) {
 8002fd2:	b590      	push	{r4, r7, lr}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
	madgwick_filter_apply(
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f103 0270 	add.w	r2, r3, #112	@ 0x70
		&(im->madgwick_filter),
		-im->body_frame_accel.x,
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	madgwick_filter_apply(
 8002fe6:	eeb1 7a67 	vneg.f32	s14, s15
		-im->body_frame_accel.y,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
	madgwick_filter_apply(
 8002ff0:	eef1 6a67 	vneg.f32	s13, s15
		-im->body_frame_accel.z,
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
	madgwick_filter_apply(
 8002ffa:	eef1 7a67 	vneg.f32	s15, s15
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	edd3 5a16 	vldr	s11, [r3, #88]	@ 0x58
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	ed93 5a17 	vldr	s10, [r3, #92]	@ 0x5c
 8003010:	eef0 2a45 	vmov.f32	s5, s10
 8003014:	eeb0 2a65 	vmov.f32	s4, s11
 8003018:	eef0 1a46 	vmov.f32	s3, s12
 800301c:	eeb0 1a67 	vmov.f32	s2, s15
 8003020:	eef0 0a66 	vmov.f32	s1, s13
 8003024:	eeb0 0a47 	vmov.f32	s0, s14
 8003028:	4610      	mov	r0, r2
 800302a:	f000 f935 	bl	8003298 <madgwick_filter_apply>
//		-im->body_frame_gyro.z
//	);

	//im->estimated_q = quatmultiply(&(im->q_offset), &(im->madgwick_filter.q_est));
	//im->estimated_q = quatnormalize(&(im->madgwick_filter.q_est));
	im->estimated_q = im->madgwick_filter.q_est;
 800302e:	687a      	ldr	r2, [r7, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 8003036:	3370      	adds	r3, #112	@ 0x70
 8003038:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800303a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	bd90      	pop	{r4, r7, pc}

08003046 <imu_update>:

void imu_update(imu_t* im, coord3D imu_raw_accel_m_s2, coord3D imu_raw_gyro_rad) {
 8003046:	b580      	push	{r7, lr}
 8003048:	b088      	sub	sp, #32
 800304a:	af00      	add	r7, sp, #0
 800304c:	61f8      	str	r0, [r7, #28]
 800304e:	eeb0 5a40 	vmov.f32	s10, s0
 8003052:	eef0 5a60 	vmov.f32	s11, s1
 8003056:	eeb0 6a41 	vmov.f32	s12, s2
 800305a:	eef0 6a61 	vmov.f32	s13, s3
 800305e:	eeb0 7a42 	vmov.f32	s14, s4
 8003062:	eef0 7a62 	vmov.f32	s15, s5
 8003066:	ed87 5a04 	vstr	s10, [r7, #16]
 800306a:	edc7 5a05 	vstr	s11, [r7, #20]
 800306e:	ed87 6a06 	vstr	s12, [r7, #24]
 8003072:	edc7 6a01 	vstr	s13, [r7, #4]
 8003076:	ed87 7a02 	vstr	s14, [r7, #8]
 800307a:	edc7 7a03 	vstr	s15, [r7, #12]
	imu_update_accel(im, imu_raw_accel_m_s2);
 800307e:	edd7 6a04 	vldr	s13, [r7, #16]
 8003082:	ed97 7a05 	vldr	s14, [r7, #20]
 8003086:	edd7 7a06 	vldr	s15, [r7, #24]
 800308a:	eeb0 0a66 	vmov.f32	s0, s13
 800308e:	eef0 0a47 	vmov.f32	s1, s14
 8003092:	eeb0 1a67 	vmov.f32	s2, s15
 8003096:	69f8      	ldr	r0, [r7, #28]
 8003098:	f7ff ff2a 	bl	8002ef0 <imu_update_accel>
	imu_update_gyro(im, imu_raw_gyro_rad);
 800309c:	edd7 6a01 	vldr	s13, [r7, #4]
 80030a0:	ed97 7a02 	vldr	s14, [r7, #8]
 80030a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80030a8:	eeb0 0a66 	vmov.f32	s0, s13
 80030ac:	eef0 0a47 	vmov.f32	s1, s14
 80030b0:	eeb0 1a67 	vmov.f32	s2, s15
 80030b4:	69f8      	ldr	r0, [r7, #28]
 80030b6:	f7ff fe9d 	bl	8002df4 <imu_update_gyro>
	imu_update_madgwick(im);
 80030ba:	69f8      	ldr	r0, [r7, #28]
 80030bc:	f7ff ff89 	bl	8002fd2 <imu_update_madgwick>
}
 80030c0:	bf00      	nop
 80030c2:	3720      	adds	r7, #32
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <imu_set_gyro_bias>:

void imu_set_gyro_bias(imu_t* im, coord3D gyro_bias) {
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	eef0 6a40 	vmov.f32	s13, s0
 80030d4:	eeb0 7a60 	vmov.f32	s14, s1
 80030d8:	eef0 7a41 	vmov.f32	s15, s2
 80030dc:	edc7 6a00 	vstr	s13, [r7]
 80030e0:	ed87 7a01 	vstr	s14, [r7, #4]
 80030e4:	edc7 7a02 	vstr	s15, [r7, #8]
	im->gyro_bias[0] = gyro_bias.x;
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	im->gyro_bias[1] = gyro_bias.y;
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	im->gyro_bias[2] = gyro_bias.z;
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8003100:	bf00      	nop
 8003102:	3714      	adds	r7, #20
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <imu_set_accel_bias>:

void imu_set_accel_bias(imu_t* im, coord3D accel_bias, float accel_misalignment_A_1[3][3]) {
 800310c:	b480      	push	{r7}
 800310e:	b089      	sub	sp, #36	@ 0x24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6178      	str	r0, [r7, #20]
 8003114:	eef0 6a40 	vmov.f32	s13, s0
 8003118:	eeb0 7a60 	vmov.f32	s14, s1
 800311c:	eef0 7a41 	vmov.f32	s15, s2
 8003120:	6079      	str	r1, [r7, #4]
 8003122:	edc7 6a02 	vstr	s13, [r7, #8]
 8003126:	ed87 7a03 	vstr	s14, [r7, #12]
 800312a:	edc7 7a04 	vstr	s15, [r7, #16]
	im->accel_bias[0] = accel_bias.x;
 800312e:	68ba      	ldr	r2, [r7, #8]
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	im->accel_bias[1] = accel_bias.y;
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	im->accel_bias[2] = accel_bias.z;
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

	for (size_t i = 0; i < 3; i++)
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e023      	b.n	8003194 <imu_set_accel_bias+0x88>
	{
		for (size_t j = 0; j < 3; j++) {
 800314c:	2300      	movs	r3, #0
 800314e:	61bb      	str	r3, [r7, #24]
 8003150:	e01a      	b.n	8003188 <imu_set_accel_bias+0x7c>
			im->accel_misalignment_A_inv[i][j] = accel_misalignment_A_1[i][j];
 8003152:	69fa      	ldr	r2, [r7, #28]
 8003154:	4613      	mov	r3, r2
 8003156:	005b      	lsls	r3, r3, #1
 8003158:	4413      	add	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	441a      	add	r2, r3
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	4413      	add	r3, r2
 8003168:	6819      	ldr	r1, [r3, #0]
 800316a:	6978      	ldr	r0, [r7, #20]
 800316c:	69fa      	ldr	r2, [r7, #28]
 800316e:	4613      	mov	r3, r2
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	4413      	add	r3, r2
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4413      	add	r3, r2
 8003178:	333c      	adds	r3, #60	@ 0x3c
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4403      	add	r3, r0
 800317e:	3304      	adds	r3, #4
 8003180:	6019      	str	r1, [r3, #0]
		for (size_t j = 0; j < 3; j++) {
 8003182:	69bb      	ldr	r3, [r7, #24]
 8003184:	3301      	adds	r3, #1
 8003186:	61bb      	str	r3, [r7, #24]
 8003188:	69bb      	ldr	r3, [r7, #24]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d9e1      	bls.n	8003152 <imu_set_accel_bias+0x46>
	for (size_t i = 0; i < 3; i++)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3301      	adds	r3, #1
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	2b02      	cmp	r3, #2
 8003198:	d9d8      	bls.n	800314c <imu_set_accel_bias+0x40>
		}
	}
}
 800319a:	bf00      	nop
 800319c:	bf00      	nop
 800319e:	3724      	adds	r7, #36	@ 0x24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <imu_get_estimated_data>:


void imu_get_estimated_data(imu_t* im, quaternion* estimated_q, coord3D* estimated_acc, coord3D* estimated_gyro) {
 80031a8:	b490      	push	{r4, r7}
 80031aa:	b084      	sub	sp, #16
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
 80031b4:	603b      	str	r3, [r7, #0]
	if (estimated_q) {
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d006      	beq.n	80031ca <imu_get_estimated_data+0x22>
		*estimated_q = im->estimated_q;
 80031bc:	68ba      	ldr	r2, [r7, #8]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	4614      	mov	r4, r2
 80031c2:	3360      	adds	r3, #96	@ 0x60
 80031c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	if (estimated_acc) {
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d007      	beq.n	80031e0 <imu_get_estimated_data+0x38>
		*estimated_acc = im->body_frame_accel;
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	4614      	mov	r4, r2
 80031d6:	3348      	adds	r3, #72	@ 0x48
 80031d8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	if (estimated_gyro) {
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d007      	beq.n	80031f6 <imu_get_estimated_data+0x4e>
		*estimated_gyro = im->body_frame_gyro;
 80031e6:	683a      	ldr	r2, [r7, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	4614      	mov	r4, r2
 80031ec:	3354      	adds	r3, #84	@ 0x54
 80031ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 80031f6:	bf00      	nop
 80031f8:	3710      	adds	r7, #16
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc90      	pop	{r4, r7}
 80031fe:	4770      	bx	lr

08003200 <imu_get_raw_accel_data>:

void imu_get_raw_accel_data(imu_t* im, coord3D* raw_acc){
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
	if (raw_acc) {
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d004      	beq.n	800321a <imu_get_raw_accel_data+0x1a>
		*raw_acc = im->raw_accel;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	ca07      	ldmia	r2, {r0, r1, r2}
 8003216:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
}
 800321a:	bf00      	nop
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <imu_get_raw_gyro_data>:

void imu_get_raw_gyro_data(imu_t* im, coord3D* raw_gyro){
 8003226:	b490      	push	{r4, r7}
 8003228:	b082      	sub	sp, #8
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
 800322e:	6039      	str	r1, [r7, #0]
		if (raw_gyro) {
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d007      	beq.n	8003246 <imu_get_raw_gyro_data+0x20>
		*raw_gyro = im->raw_gyro;
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	4614      	mov	r4, r2
 800323c:	330c      	adds	r3, #12
 800323e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003242:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 8003246:	bf00      	nop
 8003248:	3708      	adds	r7, #8
 800324a:	46bd      	mov	sp, r7
 800324c:	bc90      	pop	{r4, r7}
 800324e:	4770      	bx	lr

08003250 <madgwick_filter_init>:
    //#define BETA(gyro_mean_error) (sqrt(3.0f/4.0f) * gyro_mean_error)    //*from paper*
	#define BETA(gyro_mean_error) (0.866025403784439f * gyro_mean_error)    //*from paper*
#endif


void madgwick_filter_init(madgwick_filter_t* filter, float sampling_freq, float gyro_mean_error) {
 8003250:	b480      	push	{r7}
 8003252:	b085      	sub	sp, #20
 8003254:	af00      	add	r7, sp, #0
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	ed87 0a02 	vstr	s0, [r7, #8]
 800325c:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->q_est.w = 1.0f;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8003266:	601a      	str	r2, [r3, #0]
	filter->q_est.x = 0.0f;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	605a      	str	r2, [r3, #4]
	filter->q_est.y = 0.0f;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	609a      	str	r2, [r3, #8]
	filter->q_est.z = 0.0f;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f04f 0200 	mov.w	r2, #0
 800327e:	60da      	str	r2, [r3, #12]

	filter->sampling_freq = sampling_freq;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	611a      	str	r2, [r3, #16]
	filter->gyro_mean_error = gyro_mean_error;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	615a      	str	r2, [r3, #20]
}
 800328c:	bf00      	nop
 800328e:	3714      	adds	r7, #20
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <madgwick_filter_apply>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void madgwick_filter_apply(madgwick_filter_t *filter, float ax, float ay, float az, float gx, float gy, float gz){
 8003298:	b590      	push	{r4, r7, lr}
 800329a:	b0b1      	sub	sp, #196	@ 0xc4
 800329c:	af00      	add	r7, sp, #0
 800329e:	61f8      	str	r0, [r7, #28]
 80032a0:	ed87 0a06 	vstr	s0, [r7, #24]
 80032a4:	edc7 0a05 	vstr	s1, [r7, #20]
 80032a8:	ed87 1a04 	vstr	s2, [r7, #16]
 80032ac:	edc7 1a03 	vstr	s3, [r7, #12]
 80032b0:	ed87 2a02 	vstr	s4, [r7, #8]
 80032b4:	edc7 2a01 	vstr	s5, [r7, #4]

    //Variables and constants
	quaternion q_est = filter->q_est;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 80032be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_prev = q_est;
 80032c4:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 80032c8:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80032cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032ce:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_dot = {0.0f};            // used as a place holder in equations 42 and 43
 80032d2:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0.0f, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 80032fa:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	605a      	str	r2, [r3, #4]
 8003304:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                   // jacobian matrix for gravity
 8003306:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800330a:	2230      	movs	r2, #48	@ 0x30
 800330c:	2100      	movs	r1, #0
 800330e:	4618      	mov	r0, r3
 8003310:	f017 f8f8 	bl	801a504 <memset>

    struct quaternion gradient = {0.0f};
 8003314:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003318:	2200      	movs	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	605a      	str	r2, [r3, #4]
 800331e:	609a      	str	r2, [r3, #8]
 8003320:	60da      	str	r2, [r3, #12]

    /* Integrate angluar velocity to obtain position in angles. */
    struct quaternion q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.w = 0.0f;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	627b      	str	r3, [r7, #36]	@ 0x24
    q_w.x = gx;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	62bb      	str	r3, [r7, #40]	@ 0x28
    q_w.y = gy;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    q_w.z = gz;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	633b      	str	r3, [r7, #48]	@ 0x30

    q_w = quatmultiply_scalar(&q_w, 0.5f);                  // equation (12) dq/dt = (1/2)q*w
 8003334:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003338:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800333c:	4618      	mov	r0, r3
 800333e:	f7fe ffc9 	bl	80022d4 <quatmultiply_scalar>
 8003342:	eeb0 6a40 	vmov.f32	s12, s0
 8003346:	eef0 6a60 	vmov.f32	s13, s1
 800334a:	eeb0 7a41 	vmov.f32	s14, s2
 800334e:	eef0 7a61 	vmov.f32	s15, s3
 8003352:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8003356:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 800335a:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 800335e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q_w = quatmultiply(&q_est_prev, &q_w);        // equation (12)
 8003362:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8003366:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800336a:	4611      	mov	r1, r2
 800336c:	4618      	mov	r0, r3
 800336e:	f7fe fffa 	bl	8002366 <quatmultiply>
 8003372:	eeb0 6a40 	vmov.f32	s12, s0
 8003376:	eef0 6a60 	vmov.f32	s13, s1
 800337a:	eeb0 7a41 	vmov.f32	s14, s2
 800337e:	eef0 7a61 	vmov.f32	s15, s3
 8003382:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 8003386:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 800338a:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 800338e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
     The matrix multiplcation can also be done hard coded to reduce code.

     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */

    q_a = quatnormalize(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 8003392:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8003396:	4618      	mov	r0, r3
 8003398:	f7fe ff2a 	bl	80021f0 <quatnormalize>
 800339c:	eeb0 6a40 	vmov.f32	s12, s0
 80033a0:	eef0 6a60 	vmov.f32	s13, s1
 80033a4:	eeb0 7a41 	vmov.f32	s14, s2
 80033a8:	eef0 7a61 	vmov.f32	s15, s3
 80033ac:	ed87 6a20 	vstr	s12, [r7, #128]	@ 0x80
 80033b0:	edc7 6a21 	vstr	s13, [r7, #132]	@ 0x84
 80033b4:	ed87 7a22 	vstr	s14, [r7, #136]	@ 0x88
 80033b8:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.x * q_est_prev.z - q_est_prev.w * q_est_prev.y) - q_a.x;
 80033bc:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80033c0:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80033c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033c8:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 80033cc:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80033d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033d8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80033dc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80033e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e4:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    F_g[1] = 2*(q_est_prev.w * q_est_prev.x + q_est_prev.y* q_est_prev.z) - q_a.y;
 80033e8:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 80033ec:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80033f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033f4:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 80033f8:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80033fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003400:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003404:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003408:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800340c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003410:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    F_g[2] = 2*(0.5f - q_est_prev.x * q_est_prev.x - q_est_prev.y * q_est_prev.y) - q_a.z;
 8003414:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003418:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800341c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003420:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003424:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003428:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 800342c:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003430:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003438:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800343c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003444:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2.0f * q_est_prev.y;
 8003448:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800344c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003450:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003454:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    J_g[0][1] =  2.0f * q_est_prev.z;
 8003458:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800345c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003460:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    J_g[0][2] = -2.0f * q_est_prev.w;
 8003464:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003468:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 800346c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003470:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    J_g[0][3] =  2.0f * q_est_prev.x;
 8003474:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003478:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800347c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    J_g[1][0] = 2.0f * q_est_prev.x;
 8003480:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003484:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003488:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    J_g[1][1] = 2.0f * q_est_prev.w;
 800348c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003490:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003494:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    J_g[1][2] = 2.0f * q_est_prev.z;
 8003498:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800349c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034a0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    J_g[1][3] = 2.0f * q_est_prev.y;
 80034a4:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80034a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80034ac:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    J_g[2][0] = 0.0f;
 80034b0:	f04f 0300 	mov.w	r3, #0
 80034b4:	667b      	str	r3, [r7, #100]	@ 0x64
    J_g[2][1] = -4.0f * q_est_prev.x;
 80034b6:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80034ba:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80034be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c2:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    J_g[2][2] = -4.0f * q_est_prev.y;
 80034c6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80034ca:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80034ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034d2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    J_g[2][3] = 0.0f;
 80034d6:	f04f 0300 	mov.w	r3, #0
 80034da:	673b      	str	r3, [r7, #112]	@ 0x70

    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.w = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 80034dc:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80034e0:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80034e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034e8:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80034ec:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80034f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034f8:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 80034fc:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003500:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003504:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003508:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    gradient.x = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 800350c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8003510:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003514:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003518:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 800351c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003520:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003528:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 800352c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003530:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003538:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    gradient.y = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 800353c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003540:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003544:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003548:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 800354c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003550:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003558:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 800355c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003564:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003568:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    gradient.z = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 800356c:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003570:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003574:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003578:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 800357c:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003580:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003584:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003588:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 800358c:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003590:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003594:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003598:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Normalize the gradient, equation (44)
    gradient = quatnormalize(&gradient);
 800359c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fe fe25 	bl	80021f0 <quatnormalize>
 80035a6:	eeb0 6a40 	vmov.f32	s12, s0
 80035aa:	eef0 6a60 	vmov.f32	s13, s1
 80035ae:	eeb0 7a41 	vmov.f32	s14, s2
 80035b2:	eef0 7a61 	vmov.f32	s15, s3
 80035b6:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80035ba:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80035be:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80035c2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    gradient = quatmultiply_scalar(&gradient, BETA(filter->gyro_mean_error));             // multiply normalized gradient by beta
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80035cc:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80036e0 <madgwick_filter_apply+0x448>
 80035d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035d4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035d8:	eeb0 0a67 	vmov.f32	s0, s15
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fe fe79 	bl	80022d4 <quatmultiply_scalar>
 80035e2:	eeb0 6a40 	vmov.f32	s12, s0
 80035e6:	eef0 6a60 	vmov.f32	s13, s1
 80035ea:	eeb0 7a41 	vmov.f32	s14, s2
 80035ee:	eef0 7a61 	vmov.f32	s15, s3
 80035f2:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80035f6:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80035fa:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80035fe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    q_est_dot = quatsub(&q_w, &gradient);        // subtract above from q_w, the integrated gyro quaternion
 8003602:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8003606:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff fa3f 	bl	8002a90 <quatsub>
 8003612:	eeb0 6a40 	vmov.f32	s12, s0
 8003616:	eef0 6a60 	vmov.f32	s13, s1
 800361a:	eeb0 7a41 	vmov.f32	s14, s2
 800361e:	eef0 7a61 	vmov.f32	s15, s3
 8003622:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 8003626:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 800362a:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 800362e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est_dot = quatmultiply_scalar(&q_est_dot, (1.0f / filter->sampling_freq));
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	edd3 7a04 	vldr	s15, [r3, #16]
 8003638:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800363c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003640:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 8003644:	eeb0 0a47 	vmov.f32	s0, s14
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe fe43 	bl	80022d4 <quatmultiply_scalar>
 800364e:	eeb0 6a40 	vmov.f32	s12, s0
 8003652:	eef0 6a60 	vmov.f32	s13, s1
 8003656:	eeb0 7a41 	vmov.f32	s14, s2
 800365a:	eef0 7a61 	vmov.f32	s15, s3
 800365e:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 8003662:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 8003666:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 800366a:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est = quatadd(&q_est_prev, &q_est_dot);     // Integrate orientation rate to find position
 800366e:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8003672:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003676:	4611      	mov	r1, r2
 8003678:	4618      	mov	r0, r3
 800367a:	f7ff f9bd 	bl	80029f8 <quatadd>
 800367e:	eeb0 6a40 	vmov.f32	s12, s0
 8003682:	eef0 6a60 	vmov.f32	s13, s1
 8003686:	eeb0 7a41 	vmov.f32	s14, s2
 800368a:	eef0 7a61 	vmov.f32	s15, s3
 800368e:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 8003692:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 8003696:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 800369a:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
    q_est = quatnormalize(&q_est);                 // normalize the orientation of the estimate
 800369e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fda4 	bl	80021f0 <quatnormalize>
 80036a8:	eeb0 6a40 	vmov.f32	s12, s0
 80036ac:	eef0 6a60 	vmov.f32	s13, s1
 80036b0:	eeb0 7a41 	vmov.f32	s14, s2
 80036b4:	eef0 7a61 	vmov.f32	s15, s3
 80036b8:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 80036bc:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 80036c0:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 80036c4:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
                                                //(shown in diagram, plus always use unit quaternions for orientation)
    filter->q_est = q_est;
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	461c      	mov	r4, r3
 80036cc:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80036d0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80036d6:	bf00      	nop
 80036d8:	37c4      	adds	r7, #196	@ 0xc4
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd90      	pop	{r4, r7, pc}
 80036de:	bf00      	nop
 80036e0:	3f5db3d7 	.word	0x3f5db3d7

080036e4 <motor_mixer_quad_x>:
void motor_mixer_quad_x(
    float throttle_norm,       // 0..1 throttle
    float roll_out, float pitch_out, float yaw_out,  // ±PID_LIMIT
	float throttle_idle,  // e.g., 0..1 idle throttle
    float motor_dshot[NUM_MOTORS]     // output throttle per motor
) {
 80036e4:	b480      	push	{r7}
 80036e6:	b097      	sub	sp, #92	@ 0x5c
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	ed87 0a05 	vstr	s0, [r7, #20]
 80036ee:	edc7 0a04 	vstr	s1, [r7, #16]
 80036f2:	ed87 1a03 	vstr	s2, [r7, #12]
 80036f6:	edc7 1a02 	vstr	s3, [r7, #8]
 80036fa:	ed87 2a01 	vstr	s4, [r7, #4]
 80036fe:	6038      	str	r0, [r7, #0]
	// Clamp inputs
	throttle_norm = CLAMP(throttle_norm, 0.0f, MAX_THROTTLE_MIX);
 8003700:	edd7 7a05 	vldr	s15, [r7, #20]
 8003704:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800370c:	d502      	bpl.n	8003714 <motor_mixer_quad_x+0x30>
 800370e:	f04f 0300 	mov.w	r3, #0
 8003712:	e00c      	b.n	800372e <motor_mixer_quad_x+0x4a>
 8003714:	edd7 7a05 	vldr	s15, [r7, #20]
 8003718:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800371c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003724:	dd02      	ble.n	800372c <motor_mixer_quad_x+0x48>
 8003726:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800372a:	e000      	b.n	800372e <motor_mixer_quad_x+0x4a>
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	617b      	str	r3, [r7, #20]
	throttle_idle = CLAMP(throttle_idle, 0.0f, MAX_THROTTLE_MIX);
 8003730:	edd7 7a01 	vldr	s15, [r7, #4]
 8003734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800373c:	d502      	bpl.n	8003744 <motor_mixer_quad_x+0x60>
 800373e:	f04f 0300 	mov.w	r3, #0
 8003742:	e00c      	b.n	800375e <motor_mixer_quad_x+0x7a>
 8003744:	edd7 7a01 	vldr	s15, [r7, #4]
 8003748:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800374c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003754:	dd02      	ble.n	800375c <motor_mixer_quad_x+0x78>
 8003756:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 800375a:	e000      	b.n	800375e <motor_mixer_quad_x+0x7a>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	607b      	str	r3, [r7, #4]

    // Scale PID outputs into motor fraction
    float r = roll_out * AXIS_TO_MOTOR_GAIN;
 8003760:	edd7 7a04 	vldr	s15, [r7, #16]
 8003764:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80039bc <motor_mixer_quad_x+0x2d8>
 8003768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800376c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float p = pitch_out * AXIS_TO_MOTOR_GAIN;
 8003770:	edd7 7a03 	vldr	s15, [r7, #12]
 8003774:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 80039bc <motor_mixer_quad_x+0x2d8>
 8003778:	ee67 7a87 	vmul.f32	s15, s15, s14
 800377c:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float y = yaw_out * AXIS_TO_MOTOR_GAIN;
 8003780:	edd7 7a02 	vldr	s15, [r7, #8]
 8003784:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 80039bc <motor_mixer_quad_x+0x2d8>
 8003788:	ee67 7a87 	vmul.f32	s15, s15, s14
 800378c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    // Step 1: Compute raw motor mix
    float m[NUM_MOTORS];


	// Add throttle + roll + pitch + yaw for each motor
    for (int i = 0; i < NUM_MOTORS; i++) {
 8003790:	2300      	movs	r3, #0
 8003792:	657b      	str	r3, [r7, #84]	@ 0x54
 8003794:	e03a      	b.n	800380c <motor_mixer_quad_x+0x128>
        m[i] = throttle_norm + MIX[i][0] * r + MIX[i][1] * p + MIX[i][2] * y;
 8003796:	498a      	ldr	r1, [pc, #552]	@ (80039c0 <motor_mixer_quad_x+0x2dc>)
 8003798:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	440b      	add	r3, r1
 80037a4:	ed93 7a00 	vldr	s14, [r3]
 80037a8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80037ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037b0:	edd7 7a05 	vldr	s15, [r7, #20]
 80037b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b8:	4981      	ldr	r1, [pc, #516]	@ (80039c0 <motor_mixer_quad_x+0x2dc>)
 80037ba:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80037bc:	4613      	mov	r3, r2
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	3304      	adds	r3, #4
 80037c8:	edd3 6a00 	vldr	s13, [r3]
 80037cc:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80037d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037d8:	4979      	ldr	r1, [pc, #484]	@ (80039c0 <motor_mixer_quad_x+0x2dc>)
 80037da:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80037dc:	4613      	mov	r3, r2
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3308      	adds	r3, #8
 80037e8:	edd3 6a00 	vldr	s13, [r3]
 80037ec:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80037f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	3358      	adds	r3, #88	@ 0x58
 80037fe:	443b      	add	r3, r7
 8003800:	3b40      	subs	r3, #64	@ 0x40
 8003802:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < NUM_MOTORS; i++) {
 8003806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003808:	3301      	adds	r3, #1
 800380a:	657b      	str	r3, [r7, #84]	@ 0x54
 800380c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800380e:	2b03      	cmp	r3, #3
 8003810:	ddc1      	ble.n	8003796 <motor_mixer_quad_x+0xb2>
    }

    // Step 2: Desaturate so all motors stay in [0..1]
    float mmin = m[0], mmax = m[0];
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	653b      	str	r3, [r7, #80]	@ 0x50
 8003816:	69bb      	ldr	r3, [r7, #24]
 8003818:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 800381a:	2301      	movs	r3, #1
 800381c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800381e:	e02c      	b.n	800387a <motor_mixer_quad_x+0x196>
        if (m[i] < mmin) mmin = m[i];
 8003820:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	3358      	adds	r3, #88	@ 0x58
 8003826:	443b      	add	r3, r7
 8003828:	3b40      	subs	r3, #64	@ 0x40
 800382a:	edd3 7a00 	vldr	s15, [r3]
 800382e:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003832:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383a:	dd06      	ble.n	800384a <motor_mixer_quad_x+0x166>
 800383c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	3358      	adds	r3, #88	@ 0x58
 8003842:	443b      	add	r3, r7
 8003844:	3b40      	subs	r3, #64	@ 0x40
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	653b      	str	r3, [r7, #80]	@ 0x50
        if (m[i] > mmax) mmax = m[i];
 800384a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	3358      	adds	r3, #88	@ 0x58
 8003850:	443b      	add	r3, r7
 8003852:	3b40      	subs	r3, #64	@ 0x40
 8003854:	edd3 7a00 	vldr	s15, [r3]
 8003858:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800385c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003864:	d506      	bpl.n	8003874 <motor_mixer_quad_x+0x190>
 8003866:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	3358      	adds	r3, #88	@ 0x58
 800386c:	443b      	add	r3, r7
 800386e:	3b40      	subs	r3, #64	@ 0x40
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 8003874:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003876:	3301      	adds	r3, #1
 8003878:	64bb      	str	r3, [r7, #72]	@ 0x48
 800387a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800387c:	2b03      	cmp	r3, #3
 800387e:	ddcf      	ble.n	8003820 <motor_mixer_quad_x+0x13c>
    }

	// If any motor is above 1.0, lower all motors by the excess
    if (mmax > MAX_THROTTLE_MIX) {
 8003880:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003884:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003888:	eef4 7ac7 	vcmpe.f32	s15, s14
 800388c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003890:	dd22      	ble.n	80038d8 <motor_mixer_quad_x+0x1f4>
        float shift = mmax - MAX_THROTTLE_MIX;
 8003892:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003896:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800389a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800389e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        for (int i = 0; i < NUM_MOTORS; i++) m[i] -= shift;
 80038a2:	2300      	movs	r3, #0
 80038a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80038a6:	e014      	b.n	80038d2 <motor_mixer_quad_x+0x1ee>
 80038a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	3358      	adds	r3, #88	@ 0x58
 80038ae:	443b      	add	r3, r7
 80038b0:	3b40      	subs	r3, #64	@ 0x40
 80038b2:	ed93 7a00 	vldr	s14, [r3]
 80038b6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80038ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	3358      	adds	r3, #88	@ 0x58
 80038c4:	443b      	add	r3, r7
 80038c6:	3b40      	subs	r3, #64	@ 0x40
 80038c8:	edc3 7a00 	vstr	s15, [r3]
 80038cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ce:	3301      	adds	r3, #1
 80038d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038d4:	2b03      	cmp	r3, #3
 80038d6:	dde7      	ble.n	80038a8 <motor_mixer_quad_x+0x1c4>
    }

	// If any motor is below 0.0, raise all motors by the deficit
    if (mmin < 0.0f) {
 80038d8:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80038dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e4:	d522      	bpl.n	800392c <motor_mixer_quad_x+0x248>
        float shift = 0.0f - mmin;
 80038e6:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80039c4 <motor_mixer_quad_x+0x2e0>
 80038ea:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80038ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038f2:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        for (int i = 0; i < NUM_MOTORS; i++) m[i] += shift;
 80038f6:	2300      	movs	r3, #0
 80038f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038fa:	e014      	b.n	8003926 <motor_mixer_quad_x+0x242>
 80038fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	3358      	adds	r3, #88	@ 0x58
 8003902:	443b      	add	r3, r7
 8003904:	3b40      	subs	r3, #64	@ 0x40
 8003906:	ed93 7a00 	vldr	s14, [r3]
 800390a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800390e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003912:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	3358      	adds	r3, #88	@ 0x58
 8003918:	443b      	add	r3, r7
 800391a:	3b40      	subs	r3, #64	@ 0x40
 800391c:	edc3 7a00 	vstr	s15, [r3]
 8003920:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003922:	3301      	adds	r3, #1
 8003924:	643b      	str	r3, [r7, #64]	@ 0x40
 8003926:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003928:	2b03      	cmp	r3, #3
 800392a:	dde7      	ble.n	80038fc <motor_mixer_quad_x+0x218>
    }

	// Step 3: Clamp to [throttle_idle..1.0] and write output
    for (int i = 0; i < NUM_MOTORS; i++) {
 800392c:	2300      	movs	r3, #0
 800392e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003930:	e03a      	b.n	80039a8 <motor_mixer_quad_x+0x2c4>
        m[i] = CLAMP(m[i], throttle_idle, MAX_THROTTLE_MIX);
 8003932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	3358      	adds	r3, #88	@ 0x58
 8003938:	443b      	add	r3, r7
 800393a:	3b40      	subs	r3, #64	@ 0x40
 800393c:	edd3 7a00 	vldr	s15, [r3]
 8003940:	ed97 7a01 	vldr	s14, [r7, #4]
 8003944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800394c:	dd01      	ble.n	8003952 <motor_mixer_quad_x+0x26e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	e016      	b.n	8003980 <motor_mixer_quad_x+0x29c>
 8003952:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	3358      	adds	r3, #88	@ 0x58
 8003958:	443b      	add	r3, r7
 800395a:	3b40      	subs	r3, #64	@ 0x40
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8003964:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003968:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800396c:	dd02      	ble.n	8003974 <motor_mixer_quad_x+0x290>
 800396e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8003972:	e005      	b.n	8003980 <motor_mixer_quad_x+0x29c>
 8003974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	3358      	adds	r3, #88	@ 0x58
 800397a:	443b      	add	r3, r7
 800397c:	3b40      	subs	r3, #64	@ 0x40
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003982:	0092      	lsls	r2, r2, #2
 8003984:	3258      	adds	r2, #88	@ 0x58
 8003986:	443a      	add	r2, r7
 8003988:	3a40      	subs	r2, #64	@ 0x40
 800398a:	6013      	str	r3, [r2, #0]
        motor_dshot[i] = m[i];
 800398c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	4413      	add	r3, r2
 8003994:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003996:	0092      	lsls	r2, r2, #2
 8003998:	3258      	adds	r2, #88	@ 0x58
 800399a:	443a      	add	r2, r7
 800399c:	3a40      	subs	r2, #64	@ 0x40
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80039a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039a4:	3301      	adds	r3, #1
 80039a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	ddc1      	ble.n	8003932 <motor_mixer_quad_x+0x24e>
    }
}
 80039ae:	bf00      	nop
 80039b0:	bf00      	nop
 80039b2:	375c      	adds	r7, #92	@ 0x5c
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	3ceaaefa 	.word	0x3ceaaefa
 80039c0:	080201b0 	.word	0x080201b0
 80039c4:	00000000 	.word	0x00000000

080039c8 <pid_init>:
#include <math.h>

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

void pid_init(volatile pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output) {
 80039c8:	b480      	push	{r7}
 80039ca:	b087      	sub	sp, #28
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6178      	str	r0, [r7, #20]
 80039d0:	ed87 0a04 	vstr	s0, [r7, #16]
 80039d4:	edc7 0a03 	vstr	s1, [r7, #12]
 80039d8:	ed87 1a02 	vstr	s2, [r7, #8]
 80039dc:	edc7 1a01 	vstr	s3, [r7, #4]
 80039e0:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	609a      	str	r2, [r3, #8]
    pid->Ki = Ki;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	60da      	str	r2, [r3, #12]
    pid->Kd = Kd;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	68ba      	ldr	r2, [r7, #8]
 80039f4:	611a      	str	r2, [r3, #16]
    pid->min_output = min_output;
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	605a      	str	r2, [r3, #4]
    pid->max_output = max_output;
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	601a      	str	r2, [r3, #0]
    pid->error = 0.0f;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	615a      	str	r2, [r3, #20]
    pid->pre_error = 0.0f;
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f04f 0200 	mov.w	r2, #0
 8003a10:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	621a      	str	r2, [r3, #32]
    pid->integral_max_error = -1.0;
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	4a07      	ldr	r2, [pc, #28]	@ (8003a3c <pid_init+0x74>)
 8003a1e:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->delta_time = 0.0f;
 8003a20:	697b      	ldr	r3, [r7, #20]
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->derivative_error = 0.0f;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	61da      	str	r2, [r3, #28]
}
 8003a30:	bf00      	nop
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	bf800000 	.word	0xbf800000

08003a40 <pid_init_with_integral_limit>:

void pid_init_with_integral_limit(volatile pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output, float integral_max_error) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b088      	sub	sp, #32
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	61f8      	str	r0, [r7, #28]
 8003a48:	ed87 0a06 	vstr	s0, [r7, #24]
 8003a4c:	edc7 0a05 	vstr	s1, [r7, #20]
 8003a50:	ed87 1a04 	vstr	s2, [r7, #16]
 8003a54:	edc7 1a03 	vstr	s3, [r7, #12]
 8003a58:	ed87 2a02 	vstr	s4, [r7, #8]
 8003a5c:	edc7 2a01 	vstr	s5, [r7, #4]
    pid_init(pid, Kp, Ki, Kd, min_output, max_output);
 8003a60:	ed97 2a02 	vldr	s4, [r7, #8]
 8003a64:	edd7 1a03 	vldr	s3, [r7, #12]
 8003a68:	ed97 1a04 	vldr	s2, [r7, #16]
 8003a6c:	edd7 0a05 	vldr	s1, [r7, #20]
 8003a70:	ed97 0a06 	vldr	s0, [r7, #24]
 8003a74:	69f8      	ldr	r0, [r7, #28]
 8003a76:	f7ff ffa7 	bl	80039c8 <pid_init>
    pid_set_integral_limit(pid, integral_max_error);
 8003a7a:	ed97 0a01 	vldr	s0, [r7, #4]
 8003a7e:	69f8      	ldr	r0, [r7, #28]
 8003a80:	f000 f8d4 	bl	8003c2c <pid_set_integral_limit>
}
 8003a84:	bf00      	nop
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <pid_calculate>:

float pid_calculate(volatile pid_t *pid, float setpoint, float process_value, float dt) {
 8003a8c:	b480      	push	{r7}
 8003a8e:	b08b      	sub	sp, #44	@ 0x2c
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a98:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a9c:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - process_value;
 8003aa0:	ed97 7a02 	vldr	s14, [r7, #8]
 8003aa4:	edd7 7a01 	vldr	s15, [r7, #4]
 8003aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003aac:	edc7 7a05 	vstr	s15, [r7, #20]
    float Pout = pid->Kp * error;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	edd3 7a02 	vldr	s15, [r3, #8]
 8003ab6:	ed97 7a05 	vldr	s14, [r7, #20]
 8003aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abe:	edc7 7a04 	vstr	s15, [r7, #16]
    float Iout = 0.0f;
 8003ac2:	f04f 0300 	mov.w	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	@ 0x24
    float Dout = 0.0f;
 8003ac8:	f04f 0300 	mov.w	r3, #0
 8003acc:	623b      	str	r3, [r7, #32]
    float derivative = 0.0f;
 8003ace:	f04f 0300 	mov.w	r3, #0
 8003ad2:	61fb      	str	r3, [r7, #28]
    dt = fabsf(dt);
 8003ad4:	edd7 7a00 	vldr	s15, [r7]
 8003ad8:	eef0 7ae7 	vabs.f32	s15, s15
 8003adc:	edc7 7a00 	vstr	s15, [r7]
    pid->delta_time = dt;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->error = error;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	615a      	str	r2, [r3, #20]

    if (dt > FLT_EPSILON) {
 8003aec:	edd7 7a00 	vldr	s15, [r7]
 8003af0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003c28 <pid_calculate+0x19c>
 8003af4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003afc:	dd5c      	ble.n	8003bb8 <pid_calculate+0x12c>
        pid->integral += error * dt;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b04:	edd7 6a05 	vldr	s13, [r7, #20]
 8003b08:	edd7 7a00 	vldr	s15, [r7]
 8003b0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	edc3 7a08 	vstr	s15, [r3, #32]

        if (pid->integral_max_error > FLT_EPSILON) {
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b20:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8003c28 <pid_calculate+0x19c>
 8003b24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b2c:	dd24      	ble.n	8003b78 <pid_calculate+0xec>
            if (pid->integral > pid->integral_max_error)
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b42:	dd04      	ble.n	8003b4e <pid_calculate+0xc2>
                pid->integral = pid->integral_max_error;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	621a      	str	r2, [r3, #32]
 8003b4c:	e014      	b.n	8003b78 <pid_calculate+0xec>
            else if (pid->integral < -pid->integral_max_error)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b5a:	eef1 7a67 	vneg.f32	s15, s15
 8003b5e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b66:	d507      	bpl.n	8003b78 <pid_calculate+0xec>
                pid->integral = -pid->integral_max_error;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b6e:	eef1 7a67 	vneg.f32	s15, s15
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	edc3 7a08 	vstr	s15, [r3, #32]
        }

        Iout = pid->Ki * pid->integral;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b88:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        derivative = (error - pid->pre_error) / dt;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b92:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b96:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b9a:	ed97 7a00 	vldr	s14, [r7]
 8003b9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ba2:	edc7 7a07 	vstr	s15, [r7, #28]
        Dout = pid->Kd * derivative;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003bac:	ed97 7a07 	vldr	s14, [r7, #28]
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    float output = Pout + Iout + Dout;
 8003bb8:	ed97 7a04 	vldr	s14, [r7, #16]
 8003bbc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003bc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc4:	ed97 7a08 	vldr	s14, [r7, #32]
 8003bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bcc:	edc7 7a06 	vstr	s15, [r7, #24]

    if (output > pid->max_output) output = pid->max_output;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	edd3 7a00 	vldr	s15, [r3]
 8003bd6:	ed97 7a06 	vldr	s14, [r7, #24]
 8003bda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be2:	dd03      	ble.n	8003bec <pid_calculate+0x160>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	61bb      	str	r3, [r7, #24]
 8003bea:	e00c      	b.n	8003c06 <pid_calculate+0x17a>
    else if (output < pid->min_output) output = pid->min_output;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bf2:	ed97 7a06 	vldr	s14, [r7, #24]
 8003bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfe:	d502      	bpl.n	8003c06 <pid_calculate+0x17a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	61bb      	str	r3, [r7, #24]
    pid->derivative_error = derivative;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	69fa      	ldr	r2, [r7, #28]
 8003c0a:	61da      	str	r2, [r3, #28]
    pid->pre_error = error;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	619a      	str	r2, [r3, #24]
    return output;
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	ee07 3a90 	vmov	s15, r3
}
 8003c18:	eeb0 0a67 	vmov.f32	s0, s15
 8003c1c:	372c      	adds	r7, #44	@ 0x2c
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	34000000 	.word	0x34000000

08003c2c <pid_set_integral_limit>:
void pid_set_min_output(volatile pid_t *pid, float val) { pid->min_output = val; }
void pid_set_Kp(volatile pid_t *pid, float val) { pid->Kp = val; }
void pid_set_Ki(volatile pid_t *pid, float val) { pid->Ki = val; }
void pid_set_Kd(volatile pid_t *pid, float val) { pid->Kd = val; }

void pid_set_integral_limit(volatile pid_t *pid, float val) {
 8003c2c:	b480      	push	{r7}
 8003c2e:	b083      	sub	sp, #12
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
 8003c34:	ed87 0a00 	vstr	s0, [r7]
    val = fabsf(val);
 8003c38:	edd7 7a00 	vldr	s15, [r7]
 8003c3c:	eef0 7ae7 	vabs.f32	s15, s15
 8003c40:	edc7 7a00 	vstr	s15, [r7]
    pid->integral_max_error = val;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	683a      	ldr	r2, [r7, #0]
 8003c48:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pid->integral > val) pid->integral = val;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c50:	ed97 7a00 	vldr	s14, [r7]
 8003c54:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c5c:	d503      	bpl.n	8003c66 <pid_set_integral_limit+0x3a>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	621a      	str	r2, [r3, #32]
    else if (pid->integral < -val) pid->integral = -val;
}
 8003c64:	e013      	b.n	8003c8e <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	ed93 7a08 	vldr	s14, [r3, #32]
 8003c6c:	edd7 7a00 	vldr	s15, [r7]
 8003c70:	eef1 7a67 	vneg.f32	s15, s15
 8003c74:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7c:	d400      	bmi.n	8003c80 <pid_set_integral_limit+0x54>
}
 8003c7e:	e006      	b.n	8003c8e <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8003c80:	edd7 7a00 	vldr	s15, [r7]
 8003c84:	eef1 7a67 	vneg.f32	s15, s15
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <pid_reset>:
float pid_get_Kp(volatile pid_t *pid) { return pid->Kp; }
float pid_get_Ki(volatile pid_t *pid) { return pid->Ki; }
float pid_get_Kd(volatile pid_t *pid) { return pid->Kd; }
float pid_get_integral_error(volatile pid_t *pid) { return pid->integral; }

void pid_reset(volatile pid_t *pid) {
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
    pid->pre_error = 0.0f;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f04f 0200 	mov.w	r2, #0
 8003ca8:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	621a      	str	r2, [r3, #32]
    pid->error = 0.0f;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	615a      	str	r2, [r3, #20]
    pid->derivative_error = 0.0f;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f04f 0200 	mov.w	r2, #0
 8003cc0:	61da      	str	r2, [r3, #28]
    pid->delta_time = 0.0f;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f04f 0200 	mov.w	r2, #0
 8003cc8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003cca:	bf00      	nop
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <rate_controller_init>:
void rate_controller_init(
    rate_controller_t* fc,
    float sample_rate_hz,
    float d_term_pid_filter_cutoff_freq_hz,
    float ff_term_pid_filter_cutoff_freq_hz
) {
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b084      	sub	sp, #16
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	ed87 0a02 	vstr	s0, [r7, #8]
 8003ce4:	edc7 0a01 	vstr	s1, [r7, #4]
 8003ce8:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d076      	beq.n	8003de0 <rate_controller_init+0x108>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(rate_controller_t));
 8003cf2:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f016 fc03 	bl	801a504 <memset>

    // Store sample rate and D-term gain (applied manually in update loop)
    fc->sample_rate_hz = sample_rate_hz;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Initialize D-term filters (low-pass for noise reduction) ---
    pt2_filter_init_lowpass(&(fc->d_term_pid_roll_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	33c4      	adds	r3, #196	@ 0xc4
 8003d08:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d0c:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd fd34 	bl	800177e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_pitch_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	33ec      	adds	r3, #236	@ 0xec
 8003d1a:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d1e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd fd2b 	bl	800177e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_yaw_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8003d2e:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d32:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd fd21 	bl	800177e <pt2_filter_init_lowpass>

	// --- Initialize FF-term filters (PT1 for smoothing) ---
	pt1_filter_init_lowpass(&(fc->ff_term_pid_roll_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003d42:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d46:	ed97 0a00 	vldr	s0, [r7]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd fc80 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_pitch_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003d56:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d5a:	ed97 0a00 	vldr	s0, [r7]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f7fd fc76 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_yaw_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8003d6a:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d6e:	ed97 0a00 	vldr	s0, [r7]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fd fc6c 	bl	8001650 <pt1_filter_init_lowpass>

    // --- Initialize PID controllers (no D gain here; applied separately) ---
    pid_init_with_integral_limit(&(fc->pid_roll), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3328      	adds	r3, #40	@ 0x28
 8003d7c:	eddf 2a1a 	vldr	s5, [pc, #104]	@ 8003de8 <rate_controller_init+0x110>
 8003d80:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 8003dec <rate_controller_init+0x114>
 8003d84:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8003df0 <rate_controller_init+0x118>
 8003d88:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8003de8 <rate_controller_init+0x110>
 8003d8c:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8003de8 <rate_controller_init+0x110>
 8003d90:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8003de8 <rate_controller_init+0x110>
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff fe53 	bl	8003a40 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_pitch), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3354      	adds	r3, #84	@ 0x54
 8003d9e:	eddf 2a12 	vldr	s5, [pc, #72]	@ 8003de8 <rate_controller_init+0x110>
 8003da2:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8003dec <rate_controller_init+0x114>
 8003da6:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8003df0 <rate_controller_init+0x118>
 8003daa:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8003de8 <rate_controller_init+0x110>
 8003dae:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8003de8 <rate_controller_init+0x110>
 8003db2:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8003de8 <rate_controller_init+0x110>
 8003db6:	4618      	mov	r0, r3
 8003db8:	f7ff fe42 	bl	8003a40 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_yaw), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	3380      	adds	r3, #128	@ 0x80
 8003dc0:	eddf 2a09 	vldr	s5, [pc, #36]	@ 8003de8 <rate_controller_init+0x110>
 8003dc4:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 8003dec <rate_controller_init+0x114>
 8003dc8:	eddf 1a09 	vldr	s3, [pc, #36]	@ 8003df0 <rate_controller_init+0x118>
 8003dcc:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8003de8 <rate_controller_init+0x110>
 8003dd0:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8003de8 <rate_controller_init+0x110>
 8003dd4:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8003de8 <rate_controller_init+0x110>
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f7ff fe31 	bl	8003a40 <pid_init_with_integral_limit>
 8003dde:	e000      	b.n	8003de2 <rate_controller_init+0x10a>
        return;
 8003de0:	bf00      	nop
}
 8003de2:	3710      	adds	r7, #16
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	00000000 	.word	0x00000000
 8003dec:	410ba058 	.word	0x410ba058
 8003df0:	c10ba058 	.word	0xc10ba058

08003df4 <rate_controller_init_roll_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6178      	str	r0, [r7, #20]
 8003dfc:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e00:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e04:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e08:	edc7 1a01 	vstr	s3, [r7, #4]
 8003e0c:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_roll), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	3328      	adds	r3, #40	@ 0x28
 8003e14:	edd7 2a01 	vldr	s5, [r7, #4]
 8003e18:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003e4c <rate_controller_init_roll_pid+0x58>
 8003e1c:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003e50 <rate_controller_init_roll_pid+0x5c>
 8003e20:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003e54 <rate_controller_init_roll_pid+0x60>
 8003e24:	edd7 0a03 	vldr	s1, [r7, #12]
 8003e28:	ed97 0a04 	vldr	s0, [r7, #16]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7ff fe07 	bl	8003a40 <pid_init_with_integral_limit>
    fc->pid_roll_k_d = pid_k_d;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	fc->pid_roll_k_ff = pid_k_ff;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8003e42:	bf00      	nop
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	410ba058 	.word	0x410ba058
 8003e50:	c10ba058 	.word	0xc10ba058
 8003e54:	00000000 	.word	0x00000000

08003e58 <rate_controller_init_pitch_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b086      	sub	sp, #24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6178      	str	r0, [r7, #20]
 8003e60:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e64:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e68:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e6c:	edc7 1a01 	vstr	s3, [r7, #4]
 8003e70:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_pitch), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	3354      	adds	r3, #84	@ 0x54
 8003e78:	edd7 2a01 	vldr	s5, [r7, #4]
 8003e7c:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003eb0 <rate_controller_init_pitch_pid+0x58>
 8003e80:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003eb4 <rate_controller_init_pitch_pid+0x5c>
 8003e84:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003eb8 <rate_controller_init_pitch_pid+0x60>
 8003e88:	edd7 0a03 	vldr	s1, [r7, #12]
 8003e8c:	ed97 0a04 	vldr	s0, [r7, #16]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f7ff fdd5 	bl	8003a40 <pid_init_with_integral_limit>
    fc->pid_pitch_k_d = pid_k_d;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    fc->pid_pitch_k_ff = pid_k_ff;
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8003ea6:	bf00      	nop
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	410ba058 	.word	0x410ba058
 8003eb4:	c10ba058 	.word	0xc10ba058
 8003eb8:	00000000 	.word	0x00000000

08003ebc <rate_controller_init_yaw_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6178      	str	r0, [r7, #20]
 8003ec4:	ed87 0a04 	vstr	s0, [r7, #16]
 8003ec8:	edc7 0a03 	vstr	s1, [r7, #12]
 8003ecc:	ed87 1a02 	vstr	s2, [r7, #8]
 8003ed0:	edc7 1a01 	vstr	s3, [r7, #4]
 8003ed4:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_yaw), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	3380      	adds	r3, #128	@ 0x80
 8003edc:	edd7 2a01 	vldr	s5, [r7, #4]
 8003ee0:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003f14 <rate_controller_init_yaw_pid+0x58>
 8003ee4:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003f18 <rate_controller_init_yaw_pid+0x5c>
 8003ee8:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003f1c <rate_controller_init_yaw_pid+0x60>
 8003eec:	edd7 0a03 	vldr	s1, [r7, #12]
 8003ef0:	ed97 0a04 	vldr	s0, [r7, #16]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff fda3 	bl	8003a40 <pid_init_with_integral_limit>
    fc->pid_yaw_k_d = pid_k_d;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    fc->pid_yaw_k_ff = pid_k_ff;
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	683a      	ldr	r2, [r7, #0]
 8003f06:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003f0a:	bf00      	nop
 8003f0c:	3718      	adds	r7, #24
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	410ba058 	.word	0x410ba058
 8003f18:	c10ba058 	.word	0xc10ba058
 8003f1c:	00000000 	.word	0x00000000

08003f20 <rate_controller_update>:
	float sensor_pitch_rate,
	float sensor_yaw_rate,
    float target_roll_rate,
    float target_pitch_rate,
    float target_yaw_rate
) {
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b092      	sub	sp, #72	@ 0x48
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	61f8      	str	r0, [r7, #28]
 8003f28:	ed87 0a06 	vstr	s0, [r7, #24]
 8003f2c:	edc7 0a05 	vstr	s1, [r7, #20]
 8003f30:	ed87 1a04 	vstr	s2, [r7, #16]
 8003f34:	edc7 1a03 	vstr	s3, [r7, #12]
 8003f38:	ed87 2a02 	vstr	s4, [r7, #8]
 8003f3c:	edc7 2a01 	vstr	s5, [r7, #4]
    if (!fc) {
 8003f40:	69fb      	ldr	r3, [r7, #28]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f000 816c 	beq.w	8004220 <rate_controller_update+0x300>
    float roll_out;
    float pitch_out;
    float yaw_out;

    // --- Store current sensor inputs and setpoints ---
    fc->prev_target_roll_rate = fc->target_roll_rate;
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	68da      	ldr	r2, [r3, #12]
 8003f4c:	69fb      	ldr	r3, [r7, #28]
 8003f4e:	619a      	str	r2, [r3, #24]
	fc->prev_target_pitch_rate = fc->target_pitch_rate;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	691a      	ldr	r2, [r3, #16]
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	61da      	str	r2, [r3, #28]
	fc->prev_target_yaw_rate = fc->target_yaw_rate;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	621a      	str	r2, [r3, #32]

    fc->target_roll_rate = target_roll_rate;
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	60da      	str	r2, [r3, #12]
    fc->target_pitch_rate = target_pitch_rate;
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	68ba      	ldr	r2, [r7, #8]
 8003f6a:	611a      	str	r2, [r3, #16]
    fc->target_yaw_rate = target_yaw_rate;
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	615a      	str	r2, [r3, #20]

    fc->body_frame_roll_rate = sensor_roll_rate;
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	601a      	str	r2, [r3, #0]
	fc->body_frame_pitch_rate = sensor_pitch_rate;
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	605a      	str	r2, [r3, #4]
    fc->body_frame_yaw_rate = sensor_yaw_rate;
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	609a      	str	r2, [r3, #8]

    float dt = HzToSec(fc->sample_rate_hz);
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003f8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f92:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    if(fabsf(dt) > FLT_EPSILON){
 8003f96:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003f9a:	eef0 7ae7 	vabs.f32	s15, s15
 8003f9e:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8004228 <rate_controller_update+0x308>
 8003fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003faa:	f340 80e4 	ble.w	8004176 <rate_controller_update+0x256>

    // --- Step 5: PID control ---
    roll_out = pid_calculate(&fc->pid_roll, target_roll_rate, sensor_roll_rate, dt);
 8003fae:	69fb      	ldr	r3, [r7, #28]
 8003fb0:	3328      	adds	r3, #40	@ 0x28
 8003fb2:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003fb6:	edd7 0a06 	vldr	s1, [r7, #24]
 8003fba:	ed97 0a03 	vldr	s0, [r7, #12]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7ff fd64 	bl	8003a8c <pid_calculate>
 8003fc4:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    pitch_out = pid_calculate(&fc->pid_pitch, target_pitch_rate, sensor_pitch_rate, dt);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	3354      	adds	r3, #84	@ 0x54
 8003fcc:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003fd0:	edd7 0a05 	vldr	s1, [r7, #20]
 8003fd4:	ed97 0a02 	vldr	s0, [r7, #8]
 8003fd8:	4618      	mov	r0, r3
 8003fda:	f7ff fd57 	bl	8003a8c <pid_calculate>
 8003fde:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
    yaw_out = pid_calculate(&fc->pid_yaw, target_yaw_rate, sensor_yaw_rate, dt);
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	3380      	adds	r3, #128	@ 0x80
 8003fe6:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003fea:	edd7 0a04 	vldr	s1, [r7, #16]
 8003fee:	ed97 0a01 	vldr	s0, [r7, #4]
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	f7ff fd4a 	bl	8003a8c <pid_calculate>
 8003ff8:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

    float roll_k_ff = fc->pid_roll_k_ff * ((fc->target_roll_rate - fc->prev_target_roll_rate) / dt);
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	edd3 6a03 	vldr	s13, [r3, #12]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	edd3 7a06 	vldr	s15, [r3, #24]
 800400e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004012:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004016:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800401a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401e:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float pitch_k_ff = fc->pid_pitch_k_ff * ((fc->target_pitch_rate - fc->prev_target_pitch_rate) / dt);
 8004022:	69fb      	ldr	r3, [r7, #28]
 8004024:	ed93 7a2f 	vldr	s14, [r3, #188]	@ 0xbc
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	edd3 6a04 	vldr	s13, [r3, #16]
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	edd3 7a07 	vldr	s15, [r3, #28]
 8004034:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004038:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800403c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004044:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float yaw_k_ff = fc->pid_yaw_k_ff * ((fc->target_yaw_rate - fc->prev_target_yaw_rate) / dt);
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	edd3 6a05 	vldr	s13, [r3, #20]
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	edd3 7a08 	vldr	s15, [r3, #32]
 800405a:	ee36 6ae7 	vsub.f32	s12, s13, s15
 800405e:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004062:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800406a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	roll_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_roll_pt1_filter, roll_k_ff);
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004074:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8004078:	4618      	mov	r0, r3
 800407a:	f7fd fb4d 	bl	8001718 <pt1_filter_apply_lowpass>
 800407e:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	pitch_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_pitch_pt1_filter, pitch_k_ff);
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004088:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 800408c:	4618      	mov	r0, r3
 800408e:	f7fd fb43 	bl	8001718 <pt1_filter_apply_lowpass>
 8004092:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	yaw_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_yaw_pt1_filter, yaw_k_ff);
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800409c:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80040a0:	4618      	mov	r0, r3
 80040a2:	f7fd fb39 	bl	8001718 <pt1_filter_apply_lowpass>
 80040a6:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

    // --- Step 6: D-term filtering ---
    float roll_d = pt2_filter_apply_lowpass(&fc->d_term_pid_roll_filter, fc->pid_roll.derivative_error * fc->pid_roll_k_d);
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 80040b6:	69fb      	ldr	r3, [r7, #28]
 80040b8:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 80040bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040c0:	eeb0 0a67 	vmov.f32	s0, s15
 80040c4:	4610      	mov	r0, r2
 80040c6:	f7fd fb7d 	bl	80017c4 <pt2_filter_apply_lowpass>
 80040ca:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    float pitch_d = pt2_filter_apply_lowpass(&fc->d_term_pid_pitch_filter, fc->pid_pitch.derivative_error * fc->pid_pitch_k_d);
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 80040d4:	69fb      	ldr	r3, [r7, #28]
 80040d6:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 80040da:	69fb      	ldr	r3, [r7, #28]
 80040dc:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80040e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e4:	eeb0 0a67 	vmov.f32	s0, s15
 80040e8:	4610      	mov	r0, r2
 80040ea:	f7fd fb6b 	bl	80017c4 <pt2_filter_apply_lowpass>
 80040ee:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float yaw_d = pt2_filter_apply_lowpass(&fc->d_term_pid_yaw_filter, fc->pid_yaw.derivative_error * fc->pid_yaw_k_d);
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f503 728a 	add.w	r2, r3, #276	@ 0x114
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 8004104:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004108:	eeb0 0a67 	vmov.f32	s0, s15
 800410c:	4610      	mov	r0, r2
 800410e:	f7fd fb59 	bl	80017c4 <pt2_filter_apply_lowpass>
 8004112:	ed87 0a08 	vstr	s0, [r7, #32]

    // Add D-term back to PID outputs
    roll_out += roll_d;
 8004116:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800411a:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800411e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004122:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_d;
 8004126:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800412a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800412e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004132:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_d;
 8004136:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800413a:	edd7 7a08 	vldr	s15, [r7, #32]
 800413e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004142:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Add FF term back to PID outputs
    roll_out += roll_k_ff;
 8004146:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 800414a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800414e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004152:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_k_ff;
 8004156:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800415a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800415e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004162:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_k_ff;
 8004166:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800416a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800416e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004172:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Clamp to allowed range
    roll_out = CLAMP(roll_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 8004176:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800417a:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 800422c <rate_controller_update+0x30c>
 800417e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004186:	d501      	bpl.n	800418c <rate_controller_update+0x26c>
 8004188:	4b29      	ldr	r3, [pc, #164]	@ (8004230 <rate_controller_update+0x310>)
 800418a:	e00b      	b.n	80041a4 <rate_controller_update+0x284>
 800418c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004190:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8004234 <rate_controller_update+0x314>
 8004194:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419c:	dd01      	ble.n	80041a2 <rate_controller_update+0x282>
 800419e:	4b26      	ldr	r3, [pc, #152]	@ (8004238 <rate_controller_update+0x318>)
 80041a0:	e000      	b.n	80041a4 <rate_controller_update+0x284>
 80041a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041a4:	647b      	str	r3, [r7, #68]	@ 0x44
    pitch_out = CLAMP(pitch_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 80041a6:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80041aa:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 800422c <rate_controller_update+0x30c>
 80041ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b6:	d501      	bpl.n	80041bc <rate_controller_update+0x29c>
 80041b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004230 <rate_controller_update+0x310>)
 80041ba:	e00b      	b.n	80041d4 <rate_controller_update+0x2b4>
 80041bc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80041c0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8004234 <rate_controller_update+0x314>
 80041c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041cc:	dd01      	ble.n	80041d2 <rate_controller_update+0x2b2>
 80041ce:	4b1a      	ldr	r3, [pc, #104]	@ (8004238 <rate_controller_update+0x318>)
 80041d0:	e000      	b.n	80041d4 <rate_controller_update+0x2b4>
 80041d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041d4:	643b      	str	r3, [r7, #64]	@ 0x40
    yaw_out = CLAMP(yaw_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 80041d6:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80041da:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800422c <rate_controller_update+0x30c>
 80041de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e6:	d501      	bpl.n	80041ec <rate_controller_update+0x2cc>
 80041e8:	4b11      	ldr	r3, [pc, #68]	@ (8004230 <rate_controller_update+0x310>)
 80041ea:	e00b      	b.n	8004204 <rate_controller_update+0x2e4>
 80041ec:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80041f0:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8004234 <rate_controller_update+0x314>
 80041f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fc:	dd01      	ble.n	8004202 <rate_controller_update+0x2e2>
 80041fe:	4b0e      	ldr	r3, [pc, #56]	@ (8004238 <rate_controller_update+0x318>)
 8004200:	e000      	b.n	8004204 <rate_controller_update+0x2e4>
 8004202:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004204:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Store final PID outputs
    fc->out_pid_roll = roll_out;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800420a:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = pitch_out;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004212:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = yaw_out;
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800421a:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 800421e:	e000      	b.n	8004222 <rate_controller_update+0x302>
        return;
 8004220:	bf00      	nop
}
 8004222:	3748      	adds	r7, #72	@ 0x48
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	34000000 	.word	0x34000000
 800422c:	c10ba058 	.word	0xc10ba058
 8004230:	c10ba058 	.word	0xc10ba058
 8004234:	410ba058 	.word	0x410ba058
 8004238:	410ba058 	.word	0x410ba058

0800423c <rate_controller_reset>:

void rate_controller_reset(rate_controller_t* fc) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b082      	sub	sp, #8
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
	pt2_filter_reset(&(fc->d_term_pid_roll_filter));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	33c4      	adds	r3, #196	@ 0xc4
 8004248:	4618      	mov	r0, r3
 800424a:	f7fd fad8 	bl	80017fe <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_pitch_filter));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	33ec      	adds	r3, #236	@ 0xec
 8004252:	4618      	mov	r0, r3
 8004254:	f7fd fad3 	bl	80017fe <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_yaw_filter));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 800425e:	4618      	mov	r0, r3
 8004260:	f7fd facd 	bl	80017fe <pt2_filter_reset>

    pt1_filter_reset(&(fc->ff_term_pid_roll_pt1_filter));
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800426a:	4618      	mov	r0, r3
 800426c:	f7fd fa79 	bl	8001762 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_pitch_pt1_filter));
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004276:	4618      	mov	r0, r3
 8004278:	f7fd fa73 	bl	8001762 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_yaw_pt1_filter));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004282:	4618      	mov	r0, r3
 8004284:	f7fd fa6d 	bl	8001762 <pt1_filter_reset>

    pid_reset(&(fc->pid_roll));
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3328      	adds	r3, #40	@ 0x28
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fd04 	bl	8003c9a <pid_reset>
    pid_reset(&(fc->pid_pitch));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	3354      	adds	r3, #84	@ 0x54
 8004296:	4618      	mov	r0, r3
 8004298:	f7ff fcff 	bl	8003c9a <pid_reset>
    pid_reset(&(fc->pid_yaw));
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	3380      	adds	r3, #128	@ 0x80
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7ff fcfa 	bl	8003c9a <pid_reset>

    fc->prev_target_roll_rate = 0.0f;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f04f 0200 	mov.w	r2, #0
 80042ac:	619a      	str	r2, [r3, #24]
    fc->prev_target_pitch_rate = 0.0f;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	61da      	str	r2, [r3, #28]
    fc->prev_target_yaw_rate = 0.0f;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	621a      	str	r2, [r3, #32]

    fc->out_pid_roll = 0.0f;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f04f 0200 	mov.w	r2, #0
 80042c4:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = 0.0f;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f04f 0200 	mov.w	r2, #0
 80042ce:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = 0.0f;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
}
 80042dc:	bf00      	nop
 80042de:	3708      	adds	r7, #8
 80042e0:	46bd      	mov	sp, r7
 80042e2:	bd80      	pop	{r7, pc}

080042e4 <rate_controller_get_pid_outputs>:
void rate_controller_get_pid_outputs(
    rate_controller_t* fc,
    float* out_pid_roll,
    float* out_pid_pitch,
    float* out_pid_yaw
) {
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
 80042f0:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d018      	beq.n	800432a <rate_controller_get_pid_outputs+0x46>
        return; // Avoid null pointer access
    }
    if (out_pid_roll) {
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d004      	beq.n	8004308 <rate_controller_get_pid_outputs+0x24>
        *out_pid_roll = fc->out_pid_roll;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_pitch) {
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d004      	beq.n	8004318 <rate_controller_get_pid_outputs+0x34>
        *out_pid_pitch = fc->out_pid_pitch;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_yaw) {
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d006      	beq.n	800432c <rate_controller_get_pid_outputs+0x48>
        *out_pid_yaw = fc->out_pid_yaw;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	e000      	b.n	800432c <rate_controller_get_pid_outputs+0x48>
        return; // Avoid null pointer access
 800432a:	bf00      	nop
    }
}
 800432c:	3714      	adds	r7, #20
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr

08004336 <rc_channel_filter_init>:
#include "rc_control.h"
#include <math.h>
#include <string.h>
#include "geometry2D.h"

void rc_channel_filter_init(rc_channel_filter_t* channel, int enable_lpf, float lpf_cutoff_freq_hz, float deadband,float multiplier,  float expo, float sample_rate_hz) {
 8004336:	b580      	push	{r7, lr}
 8004338:	b088      	sub	sp, #32
 800433a:	af00      	add	r7, sp, #0
 800433c:	61f8      	str	r0, [r7, #28]
 800433e:	61b9      	str	r1, [r7, #24]
 8004340:	ed87 0a05 	vstr	s0, [r7, #20]
 8004344:	edc7 0a04 	vstr	s1, [r7, #16]
 8004348:	ed87 1a03 	vstr	s2, [r7, #12]
 800434c:	edc7 1a02 	vstr	s3, [r7, #8]
 8004350:	ed87 2a01 	vstr	s4, [r7, #4]
	memset(channel, 0, sizeof(rc_channel_filter_t));
 8004354:	2230      	movs	r2, #48	@ 0x30
 8004356:	2100      	movs	r1, #0
 8004358:	69f8      	ldr	r0, [r7, #28]
 800435a:	f016 f8d3 	bl	801a504 <memset>

	channel->enable_lpf = enable_lpf;
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	69ba      	ldr	r2, [r7, #24]
 8004362:	601a      	str	r2, [r3, #0]
	if (enable_lpf) {
 8004364:	69bb      	ldr	r3, [r7, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d008      	beq.n	800437c <rc_channel_filter_init+0x46>
		pt1_filter_init_lowpass(&channel->lpf, lpf_cutoff_freq_hz, sample_rate_hz);
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	3304      	adds	r3, #4
 800436e:	edd7 0a01 	vldr	s1, [r7, #4]
 8004372:	ed97 0a05 	vldr	s0, [r7, #20]
 8004376:	4618      	mov	r0, r3
 8004378:	f7fd f96a 	bl	8001650 <pt1_filter_init_lowpass>
	}
	channel->smoothed = 0.0f;
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	615a      	str	r2, [r3, #20]
	channel->raw = 0.0f;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	f04f 0200 	mov.w	r2, #0
 800438a:	619a      	str	r2, [r3, #24]
	channel->prev_raw = 0.0f;
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	61da      	str	r2, [r3, #28]
	channel->deadband = deadband;
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	621a      	str	r2, [r3, #32]
	channel->multiplier = multiplier;
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	629a      	str	r2, [r3, #40]	@ 0x28
	channel->expo = expo;
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	68ba      	ldr	r2, [r7, #8]
 80043a4:	625a      	str	r2, [r3, #36]	@ 0x24
	channel->sample_rate = sample_rate_hz;
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80043ac:	bf00      	nop
 80043ae:	3720      	adds	r7, #32
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <rc_channel_filter_update>:

void rc_channel_filter_update(rc_channel_filter_t* channel, float raw_input) {
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	ed87 0a00 	vstr	s0, [r7]
	channel->prev_raw = channel->raw;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	699a      	ldr	r2, [r3, #24]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	61da      	str	r2, [r3, #28]
	channel->raw = raw_input;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	619a      	str	r2, [r3, #24]

	float processed_input = raw_input;
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	60fb      	str	r3, [r7, #12]

	// Apply deadband
	if (fabsf(processed_input) < channel->deadband) {
 80043d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80043d6:	eeb0 7ae7 	vabs.f32	s14, s15
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80043e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	d503      	bpl.n	80043f2 <rc_channel_filter_update+0x3e>
		processed_input = 0.0f;
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	60fb      	str	r3, [r7, #12]
 80043f0:	e02b      	b.n	800444a <rc_channel_filter_update+0x96>
	}
	else {
		// Scale to compensate for deadband
		if (processed_input > 0.0f) {
 80043f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80043f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043fe:	dd12      	ble.n	8004426 <rc_channel_filter_update+0x72>
			processed_input = (processed_input - channel->deadband) / (1.0f - channel->deadband);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	edd3 7a08 	vldr	s15, [r3, #32]
 8004406:	ed97 7a03 	vldr	s14, [r7, #12]
 800440a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	edd3 7a08 	vldr	s15, [r3, #32]
 8004414:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004418:	ee37 7a67 	vsub.f32	s14, s14, s15
 800441c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004420:	edc7 7a03 	vstr	s15, [r7, #12]
 8004424:	e011      	b.n	800444a <rc_channel_filter_update+0x96>
		}
		else {
			processed_input = (processed_input + channel->deadband) / (1.0f - channel->deadband);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	ed93 7a08 	vldr	s14, [r3, #32]
 800442c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004430:	ee77 6a27 	vadd.f32	s13, s14, s15
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	edd3 7a08 	vldr	s15, [r3, #32]
 800443a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800443e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004442:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004446:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	}

	// Apply exponential curve
	if (channel->expo != 0.0f) {
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004450:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004454:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004458:	d01a      	beq.n	8004490 <rc_channel_filter_update+0xdc>
		processed_input = copysignf(powf(fabsf(processed_input), 1.0f + channel->expo), processed_input);
 800445a:	edd7 7a03 	vldr	s15, [r7, #12]
 800445e:	eeb0 7ae7 	vabs.f32	s14, s15
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004468:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800446c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004470:	eef0 0a67 	vmov.f32	s1, s15
 8004474:	eeb0 0a47 	vmov.f32	s0, s14
 8004478:	f013 f9cc 	bl	8017814 <powf>
 800447c:	eef0 7a40 	vmov.f32	s15, s0
 8004480:	edd7 0a03 	vldr	s1, [r7, #12]
 8004484:	eeb0 0a67 	vmov.f32	s0, s15
 8004488:	f013 fbaa 	bl	8017be0 <copysignf>
 800448c:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	processed_input = processed_input * channel->multiplier;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004496:	ed97 7a03 	vldr	s14, [r7, #12]
 800449a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800449e:	edc7 7a03 	vstr	s15, [r7, #12]

	if (channel->enable_lpf) {
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d008      	beq.n	80044bc <rc_channel_filter_update+0x108>
		processed_input = pt1_filter_apply_lowpass(&channel->lpf, processed_input);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	3304      	adds	r3, #4
 80044ae:	ed97 0a03 	vldr	s0, [r7, #12]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fd f930 	bl	8001718 <pt1_filter_apply_lowpass>
 80044b8:	ed87 0a03 	vstr	s0, [r7, #12]
	}
	channel->smoothed = processed_input;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	615a      	str	r2, [r3, #20]
}
 80044c2:	bf00      	nop
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <rc_channel_filter_get_processed>:

float rc_channel_filter_get_processed(rc_channel_filter_t* channel) {
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
	return channel->smoothed;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	ee07 3a90 	vmov	s15, r3
}
 80044da:	eeb0 0a67 	vmov.f32	s0, s15
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <rc_attitude_control_init_roll>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b088      	sub	sp, #32
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	61f8      	str	r0, [r7, #28]
 80044f0:	61b9      	str	r1, [r7, #24]
 80044f2:	ed87 0a05 	vstr	s0, [r7, #20]
 80044f6:	edc7 0a04 	vstr	s1, [r7, #16]
 80044fa:	ed87 1a03 	vstr	s2, [r7, #12]
 80044fe:	edc7 1a02 	vstr	s3, [r7, #8]
 8004502:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->roll_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	ed97 2a01 	vldr	s4, [r7, #4]
 800450c:	edd7 1a02 	vldr	s3, [r7, #8]
 8004510:	ed97 1a03 	vldr	s2, [r7, #12]
 8004514:	edd7 0a04 	vldr	s1, [r7, #16]
 8004518:	ed97 0a05 	vldr	s0, [r7, #20]
 800451c:	69b9      	ldr	r1, [r7, #24]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff ff09 	bl	8004336 <rc_channel_filter_init>
}
 8004524:	bf00      	nop
 8004526:	3720      	adds	r7, #32
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <rc_attitude_control_update_roll>:

void rc_attitude_control_update_roll(
	rc_attitude_control_t* rc,
	float raw_input
) {
 800452c:	b580      	push	{r7, lr}
 800452e:	b082      	sub	sp, #8
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 8004538:	edd7 7a00 	vldr	s15, [r7]
 800453c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004540:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004544:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004548:	d501      	bpl.n	800454e <rc_attitude_control_update_roll+0x22>
 800454a:	4b0d      	ldr	r3, [pc, #52]	@ (8004580 <rc_attitude_control_update_roll+0x54>)
 800454c:	e00c      	b.n	8004568 <rc_attitude_control_update_roll+0x3c>
 800454e:	edd7 7a00 	vldr	s15, [r7]
 8004552:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004556:	eef4 7ac7 	vcmpe.f32	s15, s14
 800455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800455e:	dd02      	ble.n	8004566 <rc_attitude_control_update_roll+0x3a>
 8004560:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004564:	e000      	b.n	8004568 <rc_attitude_control_update_roll+0x3c>
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->roll_filter, raw_input);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	ed97 0a00 	vldr	s0, [r7]
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff ff1f 	bl	80043b4 <rc_channel_filter_update>
}
 8004576:	bf00      	nop
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	bf800000 	.word	0xbf800000

08004584 <rc_attitude_control_get_processed_roll>:

float rc_attitude_control_get_processed_roll(
	rc_attitude_control_t* rc
) {
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->roll_filter);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff ff9b 	bl	80044ca <rc_channel_filter_get_processed>
 8004594:	eef0 7a40 	vmov.f32	s15, s0
}
 8004598:	eeb0 0a67 	vmov.f32	s0, s15
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <rc_attitude_control_init_pitch>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b088      	sub	sp, #32
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	61f8      	str	r0, [r7, #28]
 80045aa:	61b9      	str	r1, [r7, #24]
 80045ac:	ed87 0a05 	vstr	s0, [r7, #20]
 80045b0:	edc7 0a04 	vstr	s1, [r7, #16]
 80045b4:	ed87 1a03 	vstr	s2, [r7, #12]
 80045b8:	edc7 1a02 	vstr	s3, [r7, #8]
 80045bc:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->pitch_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	3330      	adds	r3, #48	@ 0x30
 80045c4:	ed97 2a01 	vldr	s4, [r7, #4]
 80045c8:	edd7 1a02 	vldr	s3, [r7, #8]
 80045cc:	ed97 1a03 	vldr	s2, [r7, #12]
 80045d0:	edd7 0a04 	vldr	s1, [r7, #16]
 80045d4:	ed97 0a05 	vldr	s0, [r7, #20]
 80045d8:	69b9      	ldr	r1, [r7, #24]
 80045da:	4618      	mov	r0, r3
 80045dc:	f7ff feab 	bl	8004336 <rc_channel_filter_init>
}
 80045e0:	bf00      	nop
 80045e2:	3720      	adds	r7, #32
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <rc_attitude_control_update_pitch>:

void rc_attitude_control_update_pitch(
	rc_attitude_control_t* rc,
	float raw_input
) {
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 80045f4:	edd7 7a00 	vldr	s15, [r7]
 80045f8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80045fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004600:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004604:	d501      	bpl.n	800460a <rc_attitude_control_update_pitch+0x22>
 8004606:	4b0d      	ldr	r3, [pc, #52]	@ (800463c <rc_attitude_control_update_pitch+0x54>)
 8004608:	e00c      	b.n	8004624 <rc_attitude_control_update_pitch+0x3c>
 800460a:	edd7 7a00 	vldr	s15, [r7]
 800460e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004612:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461a:	dd02      	ble.n	8004622 <rc_attitude_control_update_pitch+0x3a>
 800461c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004620:	e000      	b.n	8004624 <rc_attitude_control_update_pitch+0x3c>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->pitch_filter, raw_input);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	3330      	adds	r3, #48	@ 0x30
 800462a:	ed97 0a00 	vldr	s0, [r7]
 800462e:	4618      	mov	r0, r3
 8004630:	f7ff fec0 	bl	80043b4 <rc_channel_filter_update>
}
 8004634:	bf00      	nop
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	bf800000 	.word	0xbf800000

08004640 <rc_attitude_control_get_processed_pitch>:

float rc_attitude_control_get_processed_pitch(
	rc_attitude_control_t* rc
) {
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->pitch_filter);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	3330      	adds	r3, #48	@ 0x30
 800464c:	4618      	mov	r0, r3
 800464e:	f7ff ff3c 	bl	80044ca <rc_channel_filter_get_processed>
 8004652:	eef0 7a40 	vmov.f32	s15, s0
}
 8004656:	eeb0 0a67 	vmov.f32	s0, s15
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <rc_attitude_control_init_yaw>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	61f8      	str	r0, [r7, #28]
 8004668:	61b9      	str	r1, [r7, #24]
 800466a:	ed87 0a05 	vstr	s0, [r7, #20]
 800466e:	edc7 0a04 	vstr	s1, [r7, #16]
 8004672:	ed87 1a03 	vstr	s2, [r7, #12]
 8004676:	edc7 1a02 	vstr	s3, [r7, #8]
 800467a:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->yaw_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 800467e:	69fb      	ldr	r3, [r7, #28]
 8004680:	3360      	adds	r3, #96	@ 0x60
 8004682:	ed97 2a01 	vldr	s4, [r7, #4]
 8004686:	edd7 1a02 	vldr	s3, [r7, #8]
 800468a:	ed97 1a03 	vldr	s2, [r7, #12]
 800468e:	edd7 0a04 	vldr	s1, [r7, #16]
 8004692:	ed97 0a05 	vldr	s0, [r7, #20]
 8004696:	69b9      	ldr	r1, [r7, #24]
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff fe4c 	bl	8004336 <rc_channel_filter_init>
}
 800469e:	bf00      	nop
 80046a0:	3720      	adds	r7, #32
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <rc_attitude_control_update_yaw>:

void rc_attitude_control_update_yaw(
	rc_attitude_control_t* rc,
	float raw_input
) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 80046b4:	edd7 7a00 	vldr	s15, [r7]
 80046b8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80046bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046c4:	d501      	bpl.n	80046ca <rc_attitude_control_update_yaw+0x22>
 80046c6:	4b0d      	ldr	r3, [pc, #52]	@ (80046fc <rc_attitude_control_update_yaw+0x54>)
 80046c8:	e00c      	b.n	80046e4 <rc_attitude_control_update_yaw+0x3c>
 80046ca:	edd7 7a00 	vldr	s15, [r7]
 80046ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046da:	dd02      	ble.n	80046e2 <rc_attitude_control_update_yaw+0x3a>
 80046dc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80046e0:	e000      	b.n	80046e4 <rc_attitude_control_update_yaw+0x3c>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->yaw_filter, raw_input);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3360      	adds	r3, #96	@ 0x60
 80046ea:	ed97 0a00 	vldr	s0, [r7]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7ff fe60 	bl	80043b4 <rc_channel_filter_update>
}
 80046f4:	bf00      	nop
 80046f6:	3708      	adds	r7, #8
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	bf800000 	.word	0xbf800000

08004700 <rc_attitude_control_get_processed_yaw>:

float rc_attitude_control_get_processed_yaw(
	rc_attitude_control_t* rc
) {
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->yaw_filter);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	3360      	adds	r3, #96	@ 0x60
 800470c:	4618      	mov	r0, r3
 800470e:	f7ff fedc 	bl	80044ca <rc_channel_filter_get_processed>
 8004712:	eef0 7a40 	vmov.f32	s15, s0
}
 8004716:	eeb0 0a67 	vmov.f32	s0, s15
 800471a:	3708      	adds	r7, #8
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}

08004720 <rc_attitude_control_init_throttle>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8004720:	b580      	push	{r7, lr}
 8004722:	b088      	sub	sp, #32
 8004724:	af00      	add	r7, sp, #0
 8004726:	61f8      	str	r0, [r7, #28]
 8004728:	61b9      	str	r1, [r7, #24]
 800472a:	ed87 0a05 	vstr	s0, [r7, #20]
 800472e:	edc7 0a04 	vstr	s1, [r7, #16]
 8004732:	ed87 1a03 	vstr	s2, [r7, #12]
 8004736:	edc7 1a02 	vstr	s3, [r7, #8]
 800473a:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->throttle_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	3390      	adds	r3, #144	@ 0x90
 8004742:	ed97 2a01 	vldr	s4, [r7, #4]
 8004746:	edd7 1a02 	vldr	s3, [r7, #8]
 800474a:	ed97 1a03 	vldr	s2, [r7, #12]
 800474e:	edd7 0a04 	vldr	s1, [r7, #16]
 8004752:	ed97 0a05 	vldr	s0, [r7, #20]
 8004756:	69b9      	ldr	r1, [r7, #24]
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff fdec 	bl	8004336 <rc_channel_filter_init>
}
 800475e:	bf00      	nop
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <rc_attitude_control_update_throttle>:

void rc_attitude_control_update_throttle(
	rc_attitude_control_t* rc,
	float raw_input
) {
 8004766:	b580      	push	{r7, lr}
 8004768:	b082      	sub	sp, #8
 800476a:	af00      	add	r7, sp, #0
 800476c:	6078      	str	r0, [r7, #4]
 800476e:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, 0.0f, 1.0f);
 8004772:	edd7 7a00 	vldr	s15, [r7]
 8004776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477e:	d502      	bpl.n	8004786 <rc_attitude_control_update_throttle+0x20>
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	e00c      	b.n	80047a0 <rc_attitude_control_update_throttle+0x3a>
 8004786:	edd7 7a00 	vldr	s15, [r7]
 800478a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800478e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004796:	dd02      	ble.n	800479e <rc_attitude_control_update_throttle+0x38>
 8004798:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800479c:	e000      	b.n	80047a0 <rc_attitude_control_update_throttle+0x3a>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->throttle_filter, raw_input);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	3390      	adds	r3, #144	@ 0x90
 80047a6:	ed97 0a00 	vldr	s0, [r7]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fe02 	bl	80043b4 <rc_channel_filter_update>
}
 80047b0:	bf00      	nop
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <rc_attitude_control_get_processed_throttle>:

float rc_attitude_control_get_processed_throttle(
	rc_attitude_control_t* rc
) {
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b082      	sub	sp, #8
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->throttle_filter);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	3390      	adds	r3, #144	@ 0x90
 80047c4:	4618      	mov	r0, r3
 80047c6:	f7ff fe80 	bl	80044ca <rc_channel_filter_get_processed>
 80047ca:	eef0 7a40 	vmov.f32	s15, s0
}
 80047ce:	eeb0 0a67 	vmov.f32	s0, s15
 80047d2:	3708      	adds	r7, #8
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <rc_attitude_control_update>:
	rc_attitude_control_t* rc,
	float raw_roll,
	float raw_pitch,
	float raw_yaw,
	float raw_throttle
) {
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6178      	str	r0, [r7, #20]
 80047e0:	ed87 0a04 	vstr	s0, [r7, #16]
 80047e4:	edc7 0a03 	vstr	s1, [r7, #12]
 80047e8:	ed87 1a02 	vstr	s2, [r7, #8]
 80047ec:	edc7 1a01 	vstr	s3, [r7, #4]
	rc_attitude_control_update_roll(rc, raw_roll);
 80047f0:	ed97 0a04 	vldr	s0, [r7, #16]
 80047f4:	6978      	ldr	r0, [r7, #20]
 80047f6:	f7ff fe99 	bl	800452c <rc_attitude_control_update_roll>
	rc_attitude_control_update_pitch(rc, raw_pitch);
 80047fa:	ed97 0a03 	vldr	s0, [r7, #12]
 80047fe:	6978      	ldr	r0, [r7, #20]
 8004800:	f7ff fef2 	bl	80045e8 <rc_attitude_control_update_pitch>
	rc_attitude_control_update_yaw(rc, raw_yaw);
 8004804:	ed97 0a02 	vldr	s0, [r7, #8]
 8004808:	6978      	ldr	r0, [r7, #20]
 800480a:	f7ff ff4d 	bl	80046a8 <rc_attitude_control_update_yaw>
	rc_attitude_control_update_throttle(rc, raw_throttle);
 800480e:	ed97 0a01 	vldr	s0, [r7, #4]
 8004812:	6978      	ldr	r0, [r7, #20]
 8004814:	f7ff ffa7 	bl	8004766 <rc_attitude_control_update_throttle>

}
 8004818:	bf00      	nop
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <rc_attitude_control_get_processed>:
	rc_attitude_control_t* rc,
	float* roll,
	float* pitch,
	float* yaw,
	float* throttle
) {
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
 800482c:	603b      	str	r3, [r7, #0]
	if (roll) {
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d007      	beq.n	8004844 <rc_attitude_control_get_processed+0x24>
		*roll = rc_attitude_control_get_processed_roll(rc);
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f7ff fea5 	bl	8004584 <rc_attitude_control_get_processed_roll>
 800483a:	eef0 7a40 	vmov.f32	s15, s0
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	edc3 7a00 	vstr	s15, [r3]
	}
	if (pitch) {
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <rc_attitude_control_get_processed+0x3a>
		*pitch = rc_attitude_control_get_processed_pitch(rc);
 800484a:	68f8      	ldr	r0, [r7, #12]
 800484c:	f7ff fef8 	bl	8004640 <rc_attitude_control_get_processed_pitch>
 8004850:	eef0 7a40 	vmov.f32	s15, s0
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	edc3 7a00 	vstr	s15, [r3]
	}

	if (yaw) {
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <rc_attitude_control_get_processed+0x50>
		*yaw = rc_attitude_control_get_processed_yaw(rc);
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f7ff ff4d 	bl	8004700 <rc_attitude_control_get_processed_yaw>
 8004866:	eef0 7a40 	vmov.f32	s15, s0
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	edc3 7a00 	vstr	s15, [r3]
	}

	if (throttle) {
 8004870:	69bb      	ldr	r3, [r7, #24]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d007      	beq.n	8004886 <rc_attitude_control_get_processed+0x66>
		*throttle = rc_attitude_control_get_processed_throttle(rc);
 8004876:	68f8      	ldr	r0, [r7, #12]
 8004878:	f7ff ff9e 	bl	80047b8 <rc_attitude_control_get_processed_throttle>
 800487c:	eef0 7a40 	vmov.f32	s15, s0
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	edc3 7a00 	vstr	s15, [r3]
	}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
	...

08004890 <mpu6500_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      spi can't read magnetometer data
 */
uint8_t mpu6500_basic_init(mpu6500_interface_t interface, mpu6500_address_t addr_pin)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b084      	sub	sp, #16
 8004894:	af00      	add	r7, sp, #0
 8004896:	4603      	mov	r3, r0
 8004898:	460a      	mov	r2, r1
 800489a:	71fb      	strb	r3, [r7, #7]
 800489c:	4613      	mov	r3, r2
 800489e:	71bb      	strb	r3, [r7, #6]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU6500_LINK_INIT(&gs_handle_mpu6500, mpu6500_handle_t);
 80048a0:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 80048a4:	2100      	movs	r1, #0
 80048a6:	48a4      	ldr	r0, [pc, #656]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048a8:	f015 fe2c 	bl	801a504 <memset>
    DRIVER_MPU6500_LINK_IIC_INIT(&gs_handle_mpu6500, mpu6500_interface_iic_init);
 80048ac:	4ba2      	ldr	r3, [pc, #648]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048ae:	4aa3      	ldr	r2, [pc, #652]	@ (8004b3c <mpu6500_basic_init+0x2ac>)
 80048b0:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6500_LINK_IIC_DEINIT(&gs_handle_mpu6500, mpu6500_interface_iic_deinit);
 80048b2:	4ba1      	ldr	r3, [pc, #644]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048b4:	4aa2      	ldr	r2, [pc, #648]	@ (8004b40 <mpu6500_basic_init+0x2b0>)
 80048b6:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6500_LINK_IIC_READ(&gs_handle_mpu6500, mpu6500_interface_iic_read);
 80048b8:	4b9f      	ldr	r3, [pc, #636]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048ba:	4aa2      	ldr	r2, [pc, #648]	@ (8004b44 <mpu6500_basic_init+0x2b4>)
 80048bc:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6500_LINK_IIC_WRITE(&gs_handle_mpu6500, mpu6500_interface_iic_write);
 80048be:	4b9e      	ldr	r3, [pc, #632]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048c0:	4aa1      	ldr	r2, [pc, #644]	@ (8004b48 <mpu6500_basic_init+0x2b8>)
 80048c2:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6500_LINK_SPI_INIT(&gs_handle_mpu6500, mpu6500_interface_spi_init);
 80048c4:	4b9c      	ldr	r3, [pc, #624]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048c6:	4aa1      	ldr	r2, [pc, #644]	@ (8004b4c <mpu6500_basic_init+0x2bc>)
 80048c8:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6500_LINK_SPI_DEINIT(&gs_handle_mpu6500, mpu6500_interface_spi_deinit);
 80048ca:	4b9b      	ldr	r3, [pc, #620]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048cc:	4aa0      	ldr	r2, [pc, #640]	@ (8004b50 <mpu6500_basic_init+0x2c0>)
 80048ce:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6500_LINK_SPI_READ(&gs_handle_mpu6500, mpu6500_interface_spi_read);
 80048d0:	4b99      	ldr	r3, [pc, #612]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048d2:	4aa0      	ldr	r2, [pc, #640]	@ (8004b54 <mpu6500_basic_init+0x2c4>)
 80048d4:	61da      	str	r2, [r3, #28]
    DRIVER_MPU6500_LINK_SPI_WRITE(&gs_handle_mpu6500, mpu6500_interface_spi_write);
 80048d6:	4b98      	ldr	r3, [pc, #608]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048d8:	4a9f      	ldr	r2, [pc, #636]	@ (8004b58 <mpu6500_basic_init+0x2c8>)
 80048da:	621a      	str	r2, [r3, #32]
    DRIVER_MPU6500_LINK_DELAY_MS(&gs_handle_mpu6500, mpu6500_interface_delay_ms);
 80048dc:	4b96      	ldr	r3, [pc, #600]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048de:	4a9f      	ldr	r2, [pc, #636]	@ (8004b5c <mpu6500_basic_init+0x2cc>)
 80048e0:	625a      	str	r2, [r3, #36]	@ 0x24
    DRIVER_MPU6500_LINK_DEBUG_PRINT(&gs_handle_mpu6500, mpu6500_interface_debug_print);
 80048e2:	4b95      	ldr	r3, [pc, #596]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048e4:	4a9e      	ldr	r2, [pc, #632]	@ (8004b60 <mpu6500_basic_init+0x2d0>)
 80048e6:	629a      	str	r2, [r3, #40]	@ 0x28
    DRIVER_MPU6500_LINK_RECEIVE_CALLBACK(&gs_handle_mpu6500, mpu6500_interface_receive_callback);
 80048e8:	4b93      	ldr	r3, [pc, #588]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048ea:	4a9e      	ldr	r2, [pc, #632]	@ (8004b64 <mpu6500_basic_init+0x2d4>)
 80048ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* set the interface */
    res = mpu6500_set_interface(&gs_handle_mpu6500, interface);
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	4619      	mov	r1, r3
 80048f2:	4891      	ldr	r0, [pc, #580]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80048f4:	f000 fd86 	bl	8005404 <mpu6500_set_interface>
 80048f8:	4603      	mov	r3, r0
 80048fa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d004      	beq.n	800490c <mpu6500_basic_init+0x7c>
    {
        mpu6500_interface_debug_print("mpu6500: set interface failed.\n");
 8004902:	4899      	ldr	r0, [pc, #612]	@ (8004b68 <mpu6500_basic_init+0x2d8>)
 8004904:	f000 fca2 	bl	800524c <mpu6500_interface_debug_print>
       
        return 1;
 8004908:	2301      	movs	r3, #1
 800490a:	e3ce      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the addr pin */
    res = mpu6500_set_addr_pin(&gs_handle_mpu6500, addr_pin);
 800490c:	79bb      	ldrb	r3, [r7, #6]
 800490e:	4619      	mov	r1, r3
 8004910:	4889      	ldr	r0, [pc, #548]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004912:	f000 fd8d 	bl	8005430 <mpu6500_set_addr_pin>
 8004916:	4603      	mov	r3, r0
 8004918:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800491a:	7bfb      	ldrb	r3, [r7, #15]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d004      	beq.n	800492a <mpu6500_basic_init+0x9a>
    {
        mpu6500_interface_debug_print("mpu6500: set addr pin failed.\n");
 8004920:	4892      	ldr	r0, [pc, #584]	@ (8004b6c <mpu6500_basic_init+0x2dc>)
 8004922:	f000 fc93 	bl	800524c <mpu6500_interface_debug_print>
       
        return 1;
 8004926:	2301      	movs	r3, #1
 8004928:	e3bf      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* init */
    res = mpu6500_init(&gs_handle_mpu6500);
 800492a:	4883      	ldr	r0, [pc, #524]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 800492c:	f000 fd96 	bl	800545c <mpu6500_init>
 8004930:	4603      	mov	r3, r0
 8004932:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d004      	beq.n	8004944 <mpu6500_basic_init+0xb4>
    {
        mpu6500_interface_debug_print("mpu6500: init failed.\n");
 800493a:	488d      	ldr	r0, [pc, #564]	@ (8004b70 <mpu6500_basic_init+0x2e0>)
 800493c:	f000 fc86 	bl	800524c <mpu6500_interface_debug_print>
       
        return 1;
 8004940:	2301      	movs	r3, #1
 8004942:	e3b2      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* delay 100 ms */
    mpu6500_interface_delay_ms(100);
 8004944:	2064      	movs	r0, #100	@ 0x64
 8004946:	f000 fc6b 	bl	8005220 <mpu6500_interface_delay_ms>
    
    /* disable sleep */
    res = mpu6500_set_sleep(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 800494a:	2100      	movs	r1, #0
 800494c:	487a      	ldr	r0, [pc, #488]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 800494e:	f001 ff61 	bl	8006814 <mpu6500_set_sleep>
 8004952:	4603      	mov	r3, r0
 8004954:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d007      	beq.n	800496c <mpu6500_basic_init+0xdc>
    {
        mpu6500_interface_debug_print("mpu6500: set sleep failed.\n");
 800495c:	4885      	ldr	r0, [pc, #532]	@ (8004b74 <mpu6500_basic_init+0x2e4>)
 800495e:	f000 fc75 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004962:	4875      	ldr	r0, [pc, #468]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004964:	f000 fea6 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004968:	2301      	movs	r3, #1
 800496a:	e39e      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* if spi interface, disable iic interface */
    if (interface == MPU6500_INTERFACE_SPI)
 800496c:	79fb      	ldrb	r3, [r7, #7]
 800496e:	2b01      	cmp	r3, #1
 8004970:	d110      	bne.n	8004994 <mpu6500_basic_init+0x104>
    {
        /* disable iic */
        res = mpu6500_set_disable_iic_slave(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 8004972:	2101      	movs	r1, #1
 8004974:	4870      	ldr	r0, [pc, #448]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004976:	f001 fe17 	bl	80065a8 <mpu6500_set_disable_iic_slave>
 800497a:	4603      	mov	r3, r0
 800497c:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 800497e:	7bfb      	ldrb	r3, [r7, #15]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <mpu6500_basic_init+0x104>
        {
            mpu6500_interface_debug_print("mpu6500: set disable iic slave failed.\n");
 8004984:	487c      	ldr	r0, [pc, #496]	@ (8004b78 <mpu6500_basic_init+0x2e8>)
 8004986:	f000 fc61 	bl	800524c <mpu6500_interface_debug_print>
            (void)mpu6500_deinit(&gs_handle_mpu6500);
 800498a:	486b      	ldr	r0, [pc, #428]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 800498c:	f000 fe92 	bl	80056b4 <mpu6500_deinit>
           
            return 1;
 8004990:	2301      	movs	r3, #1
 8004992:	e38a      	b.n	80050aa <mpu6500_basic_init+0x81a>
        }
    }
    
    /* set fifo 1024kb */
    res = mpu6500_set_fifo_1024kb(&gs_handle_mpu6500);
 8004994:	4868      	ldr	r0, [pc, #416]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004996:	f002 fae7 	bl	8006f68 <mpu6500_set_fifo_1024kb>
 800499a:	4603      	mov	r3, r0
 800499c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d007      	beq.n	80049b4 <mpu6500_basic_init+0x124>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo 1024kb failed.\n");
 80049a4:	4875      	ldr	r0, [pc, #468]	@ (8004b7c <mpu6500_basic_init+0x2ec>)
 80049a6:	f000 fc51 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80049aa:	4863      	ldr	r0, [pc, #396]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80049ac:	f000 fe82 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e37a      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default clock source */
    res = mpu6500_set_clock_source(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CLOCK_SOURCE);
 80049b4:	2101      	movs	r1, #1
 80049b6:	4860      	ldr	r0, [pc, #384]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80049b8:	f001 fe44 	bl	8006644 <mpu6500_set_clock_source>
 80049bc:	4603      	mov	r3, r0
 80049be:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d007      	beq.n	80049d6 <mpu6500_basic_init+0x146>
    {
        mpu6500_interface_debug_print("mpu6500: set clock source failed.\n");
 80049c6:	486e      	ldr	r0, [pc, #440]	@ (8004b80 <mpu6500_basic_init+0x2f0>)
 80049c8:	f000 fc40 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80049cc:	485a      	ldr	r0, [pc, #360]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80049ce:	f000 fe71 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e369      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default rate */
    res = mpu6500_set_sample_rate_divider(&gs_handle_mpu6500, (1000 / MPU6500_BASIC_DEFAULT_RATE) - 1);
 80049d6:	2100      	movs	r1, #0
 80049d8:	4857      	ldr	r0, [pc, #348]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80049da:	f002 f811 	bl	8006a00 <mpu6500_set_sample_rate_divider>
 80049de:	4603      	mov	r3, r0
 80049e0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80049e2:	7bfb      	ldrb	r3, [r7, #15]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d007      	beq.n	80049f8 <mpu6500_basic_init+0x168>
    {
        mpu6500_interface_debug_print("mpu6500: set sample rate divider failed.\n");
 80049e8:	4866      	ldr	r0, [pc, #408]	@ (8004b84 <mpu6500_basic_init+0x2f4>)
 80049ea:	f000 fc2f 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80049ee:	4852      	ldr	r0, [pc, #328]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80049f0:	f000 fe60 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e358      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* enable temperature sensor */
    res = mpu6500_set_ptat(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 80049f8:	2101      	movs	r1, #1
 80049fa:	484f      	ldr	r0, [pc, #316]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 80049fc:	f001 fe6c 	bl	80066d8 <mpu6500_set_ptat>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d007      	beq.n	8004a1a <mpu6500_basic_init+0x18a>
    {
        mpu6500_interface_debug_print("mpu6500: set ptat failed.\n");
 8004a0a:	485f      	ldr	r0, [pc, #380]	@ (8004b88 <mpu6500_basic_init+0x2f8>)
 8004a0c:	f000 fc1e 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a10:	4849      	ldr	r0, [pc, #292]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004a12:	f000 fe4f 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e347      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default cycle wake up */
    res = mpu6500_set_cycle_wake_up(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CYCLE_WAKE_UP);
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4846      	ldr	r0, [pc, #280]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004a1e:	f001 feab 	bl	8006778 <mpu6500_set_cycle_wake_up>
 8004a22:	4603      	mov	r3, r0
 8004a24:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a26:	7bfb      	ldrb	r3, [r7, #15]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d007      	beq.n	8004a3c <mpu6500_basic_init+0x1ac>
    {
        mpu6500_interface_debug_print("mpu6500: set cycle wake up failed.\n");
 8004a2c:	4857      	ldr	r0, [pc, #348]	@ (8004b8c <mpu6500_basic_init+0x2fc>)
 8004a2e:	f000 fc0d 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a32:	4841      	ldr	r0, [pc, #260]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004a34:	f000 fe3e 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	e336      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_X, MPU6500_BOOL_FALSE);
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	2105      	movs	r1, #5
 8004a40:	483d      	ldr	r0, [pc, #244]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004a42:	f001 ff83 	bl	800694c <mpu6500_set_standby_mode>
 8004a46:	4603      	mov	r3, r0
 8004a48:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a4a:	7bfb      	ldrb	r3, [r7, #15]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <mpu6500_basic_init+0x1d0>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004a50:	484f      	ldr	r0, [pc, #316]	@ (8004b90 <mpu6500_basic_init+0x300>)
 8004a52:	f000 fbfb 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a56:	4838      	ldr	r0, [pc, #224]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004a58:	f000 fe2c 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e324      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Y, MPU6500_BOOL_FALSE);
 8004a60:	2200      	movs	r2, #0
 8004a62:	2104      	movs	r1, #4
 8004a64:	4834      	ldr	r0, [pc, #208]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004a66:	f001 ff71 	bl	800694c <mpu6500_set_standby_mode>
 8004a6a:	4603      	mov	r3, r0
 8004a6c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <mpu6500_basic_init+0x1f4>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004a74:	4846      	ldr	r0, [pc, #280]	@ (8004b90 <mpu6500_basic_init+0x300>)
 8004a76:	f000 fbe9 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a7a:	482f      	ldr	r0, [pc, #188]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004a7c:	f000 fe1a 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e312      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Z, MPU6500_BOOL_FALSE);
 8004a84:	2200      	movs	r2, #0
 8004a86:	2103      	movs	r1, #3
 8004a88:	482b      	ldr	r0, [pc, #172]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004a8a:	f001 ff5f 	bl	800694c <mpu6500_set_standby_mode>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a92:	7bfb      	ldrb	r3, [r7, #15]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d007      	beq.n	8004aa8 <mpu6500_basic_init+0x218>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004a98:	483d      	ldr	r0, [pc, #244]	@ (8004b90 <mpu6500_basic_init+0x300>)
 8004a9a:	f000 fbd7 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a9e:	4826      	ldr	r0, [pc, #152]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004aa0:	f000 fe08 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e300      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_X, MPU6500_BOOL_FALSE);
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	2102      	movs	r1, #2
 8004aac:	4822      	ldr	r0, [pc, #136]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004aae:	f001 ff4d 	bl	800694c <mpu6500_set_standby_mode>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ab6:	7bfb      	ldrb	r3, [r7, #15]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d007      	beq.n	8004acc <mpu6500_basic_init+0x23c>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004abc:	4834      	ldr	r0, [pc, #208]	@ (8004b90 <mpu6500_basic_init+0x300>)
 8004abe:	f000 fbc5 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ac2:	481d      	ldr	r0, [pc, #116]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004ac4:	f000 fdf6 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	e2ee      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Y, MPU6500_BOOL_FALSE);
 8004acc:	2200      	movs	r2, #0
 8004ace:	2101      	movs	r1, #1
 8004ad0:	4819      	ldr	r0, [pc, #100]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004ad2:	f001 ff3b 	bl	800694c <mpu6500_set_standby_mode>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <mpu6500_basic_init+0x260>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004ae0:	482b      	ldr	r0, [pc, #172]	@ (8004b90 <mpu6500_basic_init+0x300>)
 8004ae2:	f000 fbb3 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ae6:	4814      	ldr	r0, [pc, #80]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004ae8:	f000 fde4 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e2dc      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Z, MPU6500_BOOL_FALSE);
 8004af0:	2200      	movs	r2, #0
 8004af2:	2100      	movs	r1, #0
 8004af4:	4810      	ldr	r0, [pc, #64]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004af6:	f001 ff29 	bl	800694c <mpu6500_set_standby_mode>
 8004afa:	4603      	mov	r3, r0
 8004afc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <mpu6500_basic_init+0x284>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004b04:	4822      	ldr	r0, [pc, #136]	@ (8004b90 <mpu6500_basic_init+0x300>)
 8004b06:	f000 fba1 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b0a:	480b      	ldr	r0, [pc, #44]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004b0c:	f000 fdd2 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e2ca      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope x test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8004b14:	2200      	movs	r2, #0
 8004b16:	2107      	movs	r1, #7
 8004b18:	4807      	ldr	r0, [pc, #28]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004b1a:	f002 f881 	bl	8006c20 <mpu6500_set_gyroscope_test>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d037      	beq.n	8004b98 <mpu6500_basic_init+0x308>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004b28:	481a      	ldr	r0, [pc, #104]	@ (8004b94 <mpu6500_basic_init+0x304>)
 8004b2a:	f000 fb8f 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b2e:	4802      	ldr	r0, [pc, #8]	@ (8004b38 <mpu6500_basic_init+0x2a8>)
 8004b30:	f000 fdc0 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e2b8      	b.n	80050aa <mpu6500_basic_init+0x81a>
 8004b38:	20000338 	.word	0x20000338
 8004b3c:	080050f9 	.word	0x080050f9
 8004b40:	08005109 	.word	0x08005109
 8004b44:	08005119 	.word	0x08005119
 8004b48:	0800513d 	.word	0x0800513d
 8004b4c:	08005161 	.word	0x08005161
 8004b50:	08005171 	.word	0x08005171
 8004b54:	08005181 	.word	0x08005181
 8004b58:	080051d1 	.word	0x080051d1
 8004b5c:	08005221 	.word	0x08005221
 8004b60:	0800524d 	.word	0x0800524d
 8004b64:	0800527d 	.word	0x0800527d
 8004b68:	0801e210 	.word	0x0801e210
 8004b6c:	0801e230 	.word	0x0801e230
 8004b70:	0801e250 	.word	0x0801e250
 8004b74:	0801e268 	.word	0x0801e268
 8004b78:	0801e284 	.word	0x0801e284
 8004b7c:	0801e2ac 	.word	0x0801e2ac
 8004b80:	0801e2d0 	.word	0x0801e2d0
 8004b84:	0801e2f4 	.word	0x0801e2f4
 8004b88:	0801e320 	.word	0x0801e320
 8004b8c:	0801e33c 	.word	0x0801e33c
 8004b90:	0801e360 	.word	0x0801e360
 8004b94:	0801e384 	.word	0x0801e384
    }
    
    /* disable gyroscope y test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8004b98:	2200      	movs	r2, #0
 8004b9a:	2106      	movs	r1, #6
 8004b9c:	48b0      	ldr	r0, [pc, #704]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004b9e:	f002 f83f 	bl	8006c20 <mpu6500_set_gyroscope_test>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ba6:	7bfb      	ldrb	r3, [r7, #15]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d007      	beq.n	8004bbc <mpu6500_basic_init+0x32c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004bac:	48ad      	ldr	r0, [pc, #692]	@ (8004e64 <mpu6500_basic_init+0x5d4>)
 8004bae:	f000 fb4d 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004bb2:	48ab      	ldr	r0, [pc, #684]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004bb4:	f000 fd7e 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004bb8:	2301      	movs	r3, #1
 8004bba:	e276      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope z test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2105      	movs	r1, #5
 8004bc0:	48a7      	ldr	r0, [pc, #668]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004bc2:	f002 f82d 	bl	8006c20 <mpu6500_set_gyroscope_test>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d007      	beq.n	8004be0 <mpu6500_basic_init+0x350>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004bd0:	48a4      	ldr	r0, [pc, #656]	@ (8004e64 <mpu6500_basic_init+0x5d4>)
 8004bd2:	f000 fb3b 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004bd6:	48a2      	ldr	r0, [pc, #648]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004bd8:	f000 fd6c 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e264      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer x test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8004be0:	2200      	movs	r2, #0
 8004be2:	2107      	movs	r1, #7
 8004be4:	489e      	ldr	r0, [pc, #632]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004be6:	f002 f917 	bl	8006e18 <mpu6500_set_accelerometer_test>
 8004bea:	4603      	mov	r3, r0
 8004bec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d007      	beq.n	8004c04 <mpu6500_basic_init+0x374>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004bf4:	489c      	ldr	r0, [pc, #624]	@ (8004e68 <mpu6500_basic_init+0x5d8>)
 8004bf6:	f000 fb29 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004bfa:	4899      	ldr	r0, [pc, #612]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004bfc:	f000 fd5a 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e252      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer y test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8004c04:	2200      	movs	r2, #0
 8004c06:	2106      	movs	r1, #6
 8004c08:	4895      	ldr	r0, [pc, #596]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004c0a:	f002 f905 	bl	8006e18 <mpu6500_set_accelerometer_test>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <mpu6500_basic_init+0x398>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004c18:	4893      	ldr	r0, [pc, #588]	@ (8004e68 <mpu6500_basic_init+0x5d8>)
 8004c1a:	f000 fb17 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c1e:	4890      	ldr	r0, [pc, #576]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004c20:	f000 fd48 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004c24:	2301      	movs	r3, #1
 8004c26:	e240      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer z test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8004c28:	2200      	movs	r2, #0
 8004c2a:	2105      	movs	r1, #5
 8004c2c:	488c      	ldr	r0, [pc, #560]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004c2e:	f002 f8f3 	bl	8006e18 <mpu6500_set_accelerometer_test>
 8004c32:	4603      	mov	r3, r0
 8004c34:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c36:	7bfb      	ldrb	r3, [r7, #15]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d007      	beq.n	8004c4c <mpu6500_basic_init+0x3bc>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004c3c:	488a      	ldr	r0, [pc, #552]	@ (8004e68 <mpu6500_basic_init+0x5d8>)
 8004c3e:	f000 fb05 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c42:	4887      	ldr	r0, [pc, #540]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004c44:	f000 fd36 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e22e      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* disable fifo */
    res = mpu6500_set_fifo(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	4884      	ldr	r0, [pc, #528]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004c50:	f001 fc0e 	bl	8006470 <mpu6500_set_fifo>
 8004c54:	4603      	mov	r3, r0
 8004c56:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c58:	7bfb      	ldrb	r3, [r7, #15]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d007      	beq.n	8004c6e <mpu6500_basic_init+0x3de>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo failed.\n");
 8004c5e:	4883      	ldr	r0, [pc, #524]	@ (8004e6c <mpu6500_basic_init+0x5dc>)
 8004c60:	f000 faf4 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c64:	487e      	ldr	r0, [pc, #504]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004c66:	f000 fd25 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e21d      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* disable temp fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_TEMP, MPU6500_BOOL_FALSE);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2107      	movs	r1, #7
 8004c72:	487b      	ldr	r0, [pc, #492]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004c74:	f002 fb4a 	bl	800730c <mpu6500_set_fifo_enable>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c7c:	7bfb      	ldrb	r3, [r7, #15]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d007      	beq.n	8004c92 <mpu6500_basic_init+0x402>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004c82:	487b      	ldr	r0, [pc, #492]	@ (8004e70 <mpu6500_basic_init+0x5e0>)
 8004c84:	f000 fae2 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c88:	4875      	ldr	r0, [pc, #468]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004c8a:	f000 fd13 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e20b      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* disable xg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_XG, MPU6500_BOOL_FALSE);
 8004c92:	2200      	movs	r2, #0
 8004c94:	2106      	movs	r1, #6
 8004c96:	4872      	ldr	r0, [pc, #456]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004c98:	f002 fb38 	bl	800730c <mpu6500_set_fifo_enable>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d007      	beq.n	8004cb6 <mpu6500_basic_init+0x426>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004ca6:	4872      	ldr	r0, [pc, #456]	@ (8004e70 <mpu6500_basic_init+0x5e0>)
 8004ca8:	f000 fad0 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004cac:	486c      	ldr	r0, [pc, #432]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004cae:	f000 fd01 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e1f9      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* disable yg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_YG, MPU6500_BOOL_FALSE);
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	2105      	movs	r1, #5
 8004cba:	4869      	ldr	r0, [pc, #420]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004cbc:	f002 fb26 	bl	800730c <mpu6500_set_fifo_enable>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004cc4:	7bfb      	ldrb	r3, [r7, #15]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d007      	beq.n	8004cda <mpu6500_basic_init+0x44a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004cca:	4869      	ldr	r0, [pc, #420]	@ (8004e70 <mpu6500_basic_init+0x5e0>)
 8004ccc:	f000 fabe 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004cd0:	4863      	ldr	r0, [pc, #396]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004cd2:	f000 fcef 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e1e7      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* disable zg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ZG, MPU6500_BOOL_FALSE);
 8004cda:	2200      	movs	r2, #0
 8004cdc:	2104      	movs	r1, #4
 8004cde:	4860      	ldr	r0, [pc, #384]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004ce0:	f002 fb14 	bl	800730c <mpu6500_set_fifo_enable>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d007      	beq.n	8004cfe <mpu6500_basic_init+0x46e>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004cee:	4860      	ldr	r0, [pc, #384]	@ (8004e70 <mpu6500_basic_init+0x5e0>)
 8004cf0:	f000 faac 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004cf4:	485a      	ldr	r0, [pc, #360]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004cf6:	f000 fcdd 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e1d5      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* disable accel fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ACCEL, MPU6500_BOOL_FALSE);
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2103      	movs	r1, #3
 8004d02:	4857      	ldr	r0, [pc, #348]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004d04:	f002 fb02 	bl	800730c <mpu6500_set_fifo_enable>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <mpu6500_basic_init+0x492>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004d12:	4857      	ldr	r0, [pc, #348]	@ (8004e70 <mpu6500_basic_init+0x5e0>)
 8004d14:	f000 fa9a 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d18:	4851      	ldr	r0, [pc, #324]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004d1a:	f000 fccb 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e1c3      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt level */
    res = mpu6500_set_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 8004d22:	2101      	movs	r1, #1
 8004d24:	484e      	ldr	r0, [pc, #312]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004d26:	f002 fb4b 	bl	80073c0 <mpu6500_set_interrupt_level>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d2e:	7bfb      	ldrb	r3, [r7, #15]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d007      	beq.n	8004d44 <mpu6500_basic_init+0x4b4>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt level failed.\n");
 8004d34:	484f      	ldr	r0, [pc, #316]	@ (8004e74 <mpu6500_basic_init+0x5e4>)
 8004d36:	f000 fa89 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d3a:	4849      	ldr	r0, [pc, #292]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004d3c:	f000 fcba 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004d40:	2301      	movs	r3, #1
 8004d42:	e1b2      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default pin type */
    res = mpu6500_set_interrupt_pin_type(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 8004d44:	2100      	movs	r1, #0
 8004d46:	4846      	ldr	r0, [pc, #280]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004d48:	f002 fb88 	bl	800745c <mpu6500_set_interrupt_pin_type>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d50:	7bfb      	ldrb	r3, [r7, #15]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d007      	beq.n	8004d66 <mpu6500_basic_init+0x4d6>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt pin type failed.\n");
 8004d56:	4848      	ldr	r0, [pc, #288]	@ (8004e78 <mpu6500_basic_init+0x5e8>)
 8004d58:	f000 fa78 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d5c:	4840      	ldr	r0, [pc, #256]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004d5e:	f000 fca9 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e1a1      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default motion interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_MOTION, MPU6500_BASIC_DEFAULT_INTERRUPT_MOTION);
 8004d66:	2200      	movs	r2, #0
 8004d68:	2106      	movs	r1, #6
 8004d6a:	483d      	ldr	r0, [pc, #244]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004d6c:	f002 fd4c 	bl	8007808 <mpu6500_set_interrupt>
 8004d70:	4603      	mov	r3, r0
 8004d72:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d74:	7bfb      	ldrb	r3, [r7, #15]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d007      	beq.n	8004d8a <mpu6500_basic_init+0x4fa>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004d7a:	4840      	ldr	r0, [pc, #256]	@ (8004e7c <mpu6500_basic_init+0x5ec>)
 8004d7c:	f000 fa66 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d80:	4837      	ldr	r0, [pc, #220]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004d82:	f000 fc97 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e18f      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FIFO_OVERFLOW, MPU6500_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	2104      	movs	r1, #4
 8004d8e:	4834      	ldr	r0, [pc, #208]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004d90:	f002 fd3a 	bl	8007808 <mpu6500_set_interrupt>
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d007      	beq.n	8004dae <mpu6500_basic_init+0x51e>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004d9e:	4837      	ldr	r0, [pc, #220]	@ (8004e7c <mpu6500_basic_init+0x5ec>)
 8004da0:	f000 fa54 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004da4:	482e      	ldr	r0, [pc, #184]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004da6:	f000 fc85 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e17d      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default dmp interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DMP, MPU6500_BASIC_DEFAULT_INTERRUPT_DMP);
 8004dae:	2200      	movs	r2, #0
 8004db0:	2101      	movs	r1, #1
 8004db2:	482b      	ldr	r0, [pc, #172]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004db4:	f002 fd28 	bl	8007808 <mpu6500_set_interrupt>
 8004db8:	4603      	mov	r3, r0
 8004dba:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004dbc:	7bfb      	ldrb	r3, [r7, #15]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d007      	beq.n	8004dd2 <mpu6500_basic_init+0x542>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004dc2:	482e      	ldr	r0, [pc, #184]	@ (8004e7c <mpu6500_basic_init+0x5ec>)
 8004dc4:	f000 fa42 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004dc8:	4825      	ldr	r0, [pc, #148]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004dca:	f000 fc73 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e16b      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync int interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FSYNC_INT, MPU6500_BASIC_DEFAULT_INTERRUPT_FSYNC_INT);
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	2103      	movs	r1, #3
 8004dd6:	4822      	ldr	r0, [pc, #136]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004dd8:	f002 fd16 	bl	8007808 <mpu6500_set_interrupt>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d007      	beq.n	8004df6 <mpu6500_basic_init+0x566>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004de6:	4825      	ldr	r0, [pc, #148]	@ (8004e7c <mpu6500_basic_init+0x5ec>)
 8004de8:	f000 fa30 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004dec:	481c      	ldr	r0, [pc, #112]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004dee:	f000 fc61 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e159      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default data ready interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DATA_READY, MPU6500_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 8004df6:	2200      	movs	r2, #0
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4819      	ldr	r0, [pc, #100]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004dfc:	f002 fd04 	bl	8007808 <mpu6500_set_interrupt>
 8004e00:	4603      	mov	r3, r0
 8004e02:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <mpu6500_basic_init+0x58a>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004e0a:	481c      	ldr	r0, [pc, #112]	@ (8004e7c <mpu6500_basic_init+0x5ec>)
 8004e0c:	f000 fa1e 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e10:	4813      	ldr	r0, [pc, #76]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004e12:	f000 fc4f 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e147      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt latch */
    res = mpu6500_set_interrupt_latch(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_LATCH);
 8004e1a:	2101      	movs	r1, #1
 8004e1c:	4810      	ldr	r0, [pc, #64]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004e1e:	f002 fb6b 	bl	80074f8 <mpu6500_set_interrupt_latch>
 8004e22:	4603      	mov	r3, r0
 8004e24:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e26:	7bfb      	ldrb	r3, [r7, #15]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <mpu6500_basic_init+0x5ac>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt latch failed.\n");
 8004e2c:	4814      	ldr	r0, [pc, #80]	@ (8004e80 <mpu6500_basic_init+0x5f0>)
 8004e2e:	f000 fa0d 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e32:	480b      	ldr	r0, [pc, #44]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004e34:	f000 fc3e 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e136      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt read clear */
    res = mpu6500_set_interrupt_read_clear(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	4808      	ldr	r0, [pc, #32]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004e40:	f002 fbaa 	bl	8007598 <mpu6500_set_interrupt_read_clear>
 8004e44:	4603      	mov	r3, r0
 8004e46:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d01c      	beq.n	8004e88 <mpu6500_basic_init+0x5f8>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt read clear failed.\n");
 8004e4e:	480d      	ldr	r0, [pc, #52]	@ (8004e84 <mpu6500_basic_init+0x5f4>)
 8004e50:	f000 f9fc 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e54:	4802      	ldr	r0, [pc, #8]	@ (8004e60 <mpu6500_basic_init+0x5d0>)
 8004e56:	f000 fc2d 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e125      	b.n	80050aa <mpu6500_basic_init+0x81a>
 8004e5e:	bf00      	nop
 8004e60:	20000338 	.word	0x20000338
 8004e64:	0801e384 	.word	0x0801e384
 8004e68:	0801e3ac 	.word	0x0801e3ac
 8004e6c:	0801e3d8 	.word	0x0801e3d8
 8004e70:	0801e3f4 	.word	0x0801e3f4
 8004e74:	0801e418 	.word	0x0801e418
 8004e78:	0801e440 	.word	0x0801e440
 8004e7c:	0801e46c 	.word	0x0801e46c
 8004e80:	0801e48c 	.word	0x0801e48c
 8004e84:	0801e4b4 	.word	0x0801e4b4
    }
    
    /* set the extern sync */
    res = mpu6500_set_extern_sync(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_EXTERN_SYNC);
 8004e88:	2100      	movs	r1, #0
 8004e8a:	488a      	ldr	r0, [pc, #552]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004e8c:	f001 fde2 	bl	8006a54 <mpu6500_set_extern_sync>
 8004e90:	4603      	mov	r3, r0
 8004e92:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <mpu6500_basic_init+0x61a>
    {
        mpu6500_interface_debug_print("mpu6500: set extern sync failed.\n");
 8004e9a:	4887      	ldr	r0, [pc, #540]	@ (80050b8 <mpu6500_basic_init+0x828>)
 8004e9c:	f000 f9d6 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ea0:	4884      	ldr	r0, [pc, #528]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004ea2:	f000 fc07 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e0ff      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt */
    res = mpu6500_set_fsync_interrupt(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT);
 8004eaa:	2100      	movs	r1, #0
 8004eac:	4881      	ldr	r0, [pc, #516]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004eae:	f002 fc0f 	bl	80076d0 <mpu6500_set_fsync_interrupt>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <mpu6500_basic_init+0x63c>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt failed.\n");
 8004ebc:	487f      	ldr	r0, [pc, #508]	@ (80050bc <mpu6500_basic_init+0x82c>)
 8004ebe:	f000 f9c5 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ec2:	487c      	ldr	r0, [pc, #496]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004ec4:	f000 fbf6 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e0ee      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt level */
    res = mpu6500_set_fsync_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 8004ecc:	2101      	movs	r1, #1
 8004ece:	4879      	ldr	r0, [pc, #484]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004ed0:	f002 fbb0 	bl	8007634 <mpu6500_set_fsync_interrupt_level>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ed8:	7bfb      	ldrb	r3, [r7, #15]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d007      	beq.n	8004eee <mpu6500_basic_init+0x65e>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt level failed.\n");
 8004ede:	4878      	ldr	r0, [pc, #480]	@ (80050c0 <mpu6500_basic_init+0x830>)
 8004ee0:	f000 f9b4 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ee4:	4873      	ldr	r0, [pc, #460]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004ee6:	f000 fbe5 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e0dd      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic master */
    res = mpu6500_set_iic_master(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_MASTER);
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4870      	ldr	r0, [pc, #448]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004ef2:	f001 fb0b 	bl	800650c <mpu6500_set_iic_master>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d007      	beq.n	8004f10 <mpu6500_basic_init+0x680>
    {
        mpu6500_interface_debug_print("mpu6500: set iic master failed.\n");
 8004f00:	4870      	ldr	r0, [pc, #448]	@ (80050c4 <mpu6500_basic_init+0x834>)
 8004f02:	f000 f9a3 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f06:	486b      	ldr	r0, [pc, #428]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004f08:	f000 fbd4 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e0cc      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic bypass */
    res = mpu6500_set_iic_bypass(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_BYPASS);
 8004f10:	2100      	movs	r1, #0
 8004f12:	4868      	ldr	r0, [pc, #416]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004f14:	f002 fc2a 	bl	800776c <mpu6500_set_iic_bypass>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f1c:	7bfb      	ldrb	r3, [r7, #15]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <mpu6500_basic_init+0x6a2>
    {
        mpu6500_interface_debug_print("mpu6500: set iic bypass failed.\n");
 8004f22:	4869      	ldr	r0, [pc, #420]	@ (80050c8 <mpu6500_basic_init+0x838>)
 8004f24:	f000 f992 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f28:	4862      	ldr	r0, [pc, #392]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004f2a:	f000 fbc3 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e0bb      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer range */
    res = mpu6500_set_accelerometer_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 8004f32:	2103      	movs	r1, #3
 8004f34:	485f      	ldr	r0, [pc, #380]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004f36:	f001 ffc9 	bl	8006ecc <mpu6500_set_accelerometer_range>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d007      	beq.n	8004f54 <mpu6500_basic_init+0x6c4>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer range failed.\n");
 8004f44:	4861      	ldr	r0, [pc, #388]	@ (80050cc <mpu6500_basic_init+0x83c>)
 8004f46:	f000 f981 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f4a:	485a      	ldr	r0, [pc, #360]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004f4c:	f000 fbb2 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e0aa      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope range */
    res = mpu6500_set_gyroscope_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_RANGE);
 8004f54:	2103      	movs	r1, #3
 8004f56:	4857      	ldr	r0, [pc, #348]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004f58:	f001 febc 	bl	8006cd4 <mpu6500_set_gyroscope_range>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f60:	7bfb      	ldrb	r3, [r7, #15]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d007      	beq.n	8004f76 <mpu6500_basic_init+0x6e6>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope range failed.\n");
 8004f66:	485a      	ldr	r0, [pc, #360]	@ (80050d0 <mpu6500_basic_init+0x840>)
 8004f68:	f000 f970 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f6c:	4851      	ldr	r0, [pc, #324]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004f6e:	f000 fba1 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004f72:	2301      	movs	r3, #1
 8004f74:	e099      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyro standby */
    res = mpu6500_set_gyro_standby(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_STANDBY);
 8004f76:	2100      	movs	r1, #0
 8004f78:	484e      	ldr	r0, [pc, #312]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004f7a:	f001 fc99 	bl	80068b0 <mpu6500_set_gyro_standby>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <mpu6500_basic_init+0x708>
    {
        mpu6500_interface_debug_print("mpu6500: set gyro standby failed.\n");
 8004f88:	4852      	ldr	r0, [pc, #328]	@ (80050d4 <mpu6500_basic_init+0x844>)
 8004f8a:	f000 f95f 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f8e:	4849      	ldr	r0, [pc, #292]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004f90:	f000 fb90 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e088      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo mode */
    res = mpu6500_set_fifo_mode(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FIFO_MODE);
 8004f98:	2101      	movs	r1, #1
 8004f9a:	4846      	ldr	r0, [pc, #280]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004f9c:	f001 fdf2 	bl	8006b84 <mpu6500_set_fifo_mode>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d007      	beq.n	8004fba <mpu6500_basic_init+0x72a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo mode failed.\n");
 8004faa:	484b      	ldr	r0, [pc, #300]	@ (80050d8 <mpu6500_basic_init+0x848>)
 8004fac:	f000 f94e 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004fb0:	4840      	ldr	r0, [pc, #256]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004fb2:	f000 fb7f 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e077      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope choice */
    res = mpu6500_set_gyroscope_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_CHOICE);
 8004fba:	2100      	movs	r1, #0
 8004fbc:	483d      	ldr	r0, [pc, #244]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004fbe:	f001 fed7 	bl	8006d70 <mpu6500_set_gyroscope_choice>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004fc6:	7bfb      	ldrb	r3, [r7, #15]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d007      	beq.n	8004fdc <mpu6500_basic_init+0x74c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope choice failed.\n");
 8004fcc:	4843      	ldr	r0, [pc, #268]	@ (80050dc <mpu6500_basic_init+0x84c>)
 8004fce:	f000 f93d 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004fd2:	4838      	ldr	r0, [pc, #224]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004fd4:	f000 fb6e 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e066      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low pass filter */
    res = mpu6500_set_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_PASS_FILTER);
 8004fdc:	2100      	movs	r1, #0
 8004fde:	4835      	ldr	r0, [pc, #212]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004fe0:	f001 fd86 	bl	8006af0 <mpu6500_set_low_pass_filter>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004fe8:	7bfb      	ldrb	r3, [r7, #15]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d007      	beq.n	8004ffe <mpu6500_basic_init+0x76e>
    {
        mpu6500_interface_debug_print("mpu6500: set low pass filter failed.\n");
 8004fee:	483c      	ldr	r0, [pc, #240]	@ (80050e0 <mpu6500_basic_init+0x850>)
 8004ff0:	f000 f92c 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ff4:	482f      	ldr	r0, [pc, #188]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8004ff6:	f000 fb5d 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e055      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer choice */
    res = mpu6500_set_accelerometer_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_CHOICE);
 8004ffe:	2100      	movs	r1, #0
 8005000:	482c      	ldr	r0, [pc, #176]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8005002:	f001 fff9 	bl	8006ff8 <mpu6500_set_accelerometer_choice>
 8005006:	4603      	mov	r3, r0
 8005008:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <mpu6500_basic_init+0x790>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer choice failed.\n");
 8005010:	4834      	ldr	r0, [pc, #208]	@ (80050e4 <mpu6500_basic_init+0x854>)
 8005012:	f000 f91b 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005016:	4827      	ldr	r0, [pc, #156]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8005018:	f000 fb4c 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 800501c:	2301      	movs	r3, #1
 800501e:	e044      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer low pass filter */
    res = mpu6500_set_accelerometer_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_LOW_PASS_FILTER);
 8005020:	2100      	movs	r1, #0
 8005022:	4824      	ldr	r0, [pc, #144]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8005024:	f002 f842 	bl	80070ac <mpu6500_set_accelerometer_low_pass_filter>
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <mpu6500_basic_init+0x7b2>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer low pass filter failed.\n");
 8005032:	482d      	ldr	r0, [pc, #180]	@ (80050e8 <mpu6500_basic_init+0x858>)
 8005034:	f000 f90a 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005038:	481e      	ldr	r0, [pc, #120]	@ (80050b4 <mpu6500_basic_init+0x824>)
 800503a:	f000 fb3b 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 800503e:	2301      	movs	r3, #1
 8005040:	e033      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low power accel output rate */
    res = mpu6500_set_low_power_accel_output_rate(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_POWER_ACCEL_OUTPUT_RATE);
 8005042:	2108      	movs	r1, #8
 8005044:	481b      	ldr	r0, [pc, #108]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8005046:	f002 f87b 	bl	8007140 <mpu6500_set_low_power_accel_output_rate>
 800504a:	4603      	mov	r3, r0
 800504c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800504e:	7bfb      	ldrb	r3, [r7, #15]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d007      	beq.n	8005064 <mpu6500_basic_init+0x7d4>
    {
        mpu6500_interface_debug_print("mpu6500: set low power accel output rate failed.\n");
 8005054:	4825      	ldr	r0, [pc, #148]	@ (80050ec <mpu6500_basic_init+0x85c>)
 8005056:	f000 f8f9 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800505a:	4816      	ldr	r0, [pc, #88]	@ (80050b4 <mpu6500_basic_init+0x824>)
 800505c:	f000 fb2a 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8005060:	2301      	movs	r3, #1
 8005062:	e022      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default wake on motion */
    res = mpu6500_set_wake_on_motion(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_WAKE_ON_MOTION);
 8005064:	2100      	movs	r1, #0
 8005066:	4813      	ldr	r0, [pc, #76]	@ (80050b4 <mpu6500_basic_init+0x824>)
 8005068:	f002 f8b4 	bl	80071d4 <mpu6500_set_wake_on_motion>
 800506c:	4603      	mov	r3, r0
 800506e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005070:	7bfb      	ldrb	r3, [r7, #15]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d007      	beq.n	8005086 <mpu6500_basic_init+0x7f6>
    {
        mpu6500_interface_debug_print("mpu6500: set wake on motion failed.\n");
 8005076:	481e      	ldr	r0, [pc, #120]	@ (80050f0 <mpu6500_basic_init+0x860>)
 8005078:	f000 f8e8 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800507c:	480d      	ldr	r0, [pc, #52]	@ (80050b4 <mpu6500_basic_init+0x824>)
 800507e:	f000 fb19 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 8005082:	2301      	movs	r3, #1
 8005084:	e011      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accel compare with previous sample */
    res = mpu6500_set_accel_compare_with_previous_sample(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_COMPARE);
 8005086:	2101      	movs	r1, #1
 8005088:	480a      	ldr	r0, [pc, #40]	@ (80050b4 <mpu6500_basic_init+0x824>)
 800508a:	f002 f8f1 	bl	8007270 <mpu6500_set_accel_compare_with_previous_sample>
 800508e:	4603      	mov	r3, r0
 8005090:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d007      	beq.n	80050a8 <mpu6500_basic_init+0x818>
    {
        mpu6500_interface_debug_print("mpu6500: set accel compare with previous sample failed.\n");
 8005098:	4816      	ldr	r0, [pc, #88]	@ (80050f4 <mpu6500_basic_init+0x864>)
 800509a:	f000 f8d7 	bl	800524c <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800509e:	4805      	ldr	r0, [pc, #20]	@ (80050b4 <mpu6500_basic_init+0x824>)
 80050a0:	f000 fb08 	bl	80056b4 <mpu6500_deinit>
       
        return 1;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e000      	b.n	80050aa <mpu6500_basic_init+0x81a>
    }
    
    return 0;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000338 	.word	0x20000338
 80050b8:	0801e4e0 	.word	0x0801e4e0
 80050bc:	0801e504 	.word	0x0801e504
 80050c0:	0801e52c 	.word	0x0801e52c
 80050c4:	0801e558 	.word	0x0801e558
 80050c8:	0801e57c 	.word	0x0801e57c
 80050cc:	0801e5a0 	.word	0x0801e5a0
 80050d0:	0801e5cc 	.word	0x0801e5cc
 80050d4:	0801e5f4 	.word	0x0801e5f4
 80050d8:	0801e618 	.word	0x0801e618
 80050dc:	0801e638 	.word	0x0801e638
 80050e0:	0801e660 	.word	0x0801e660
 80050e4:	0801e688 	.word	0x0801e688
 80050e8:	0801e6b4 	.word	0x0801e6b4
 80050ec:	0801e6e8 	.word	0x0801e6e8
 80050f0:	0801e71c 	.word	0x0801e71c
 80050f4:	0801e744 	.word	0x0801e744

080050f8 <mpu6500_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_init(void)
{
 80050f8:	b480      	push	{r7}
 80050fa:	af00      	add	r7, sp, #0
    return 0;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <mpu6500_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_deinit(void)
{
 8005108:	b480      	push	{r7}
 800510a:	af00      	add	r7, sp, #0
    return 0;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <mpu6500_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	603a      	str	r2, [r7, #0]
 8005120:	461a      	mov	r2, r3
 8005122:	4603      	mov	r3, r0
 8005124:	71fb      	strb	r3, [r7, #7]
 8005126:	460b      	mov	r3, r1
 8005128:	71bb      	strb	r3, [r7, #6]
 800512a:	4613      	mov	r3, r2
 800512c:	80bb      	strh	r3, [r7, #4]
    return 0;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr

0800513c <mpu6500_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 800513c:	b480      	push	{r7}
 800513e:	b083      	sub	sp, #12
 8005140:	af00      	add	r7, sp, #0
 8005142:	603a      	str	r2, [r7, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	4603      	mov	r3, r0
 8005148:	71fb      	strb	r3, [r7, #7]
 800514a:	460b      	mov	r3, r1
 800514c:	71bb      	strb	r3, [r7, #6]
 800514e:	4613      	mov	r3, r2
 8005150:	80bb      	strh	r3, [r7, #4]
    return 0;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <mpu6500_interface_spi_init>:
 *         - 0 success
 *         - 1 spi init failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_init(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
    return 0;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	46bd      	mov	sp, r7
 800516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516e:	4770      	bx	lr

08005170 <mpu6500_interface_spi_deinit>:
 *         - 0 success
 *         - 1 spi deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_deinit(void)
{   
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
    return 0;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <mpu6500_interface_spi_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_spi_read(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	4603      	mov	r3, r0
 8005188:	6039      	str	r1, [r7, #0]
 800518a:	71fb      	strb	r3, [r7, #7]
 800518c:	4613      	mov	r3, r2
 800518e:	80bb      	strh	r3, [r7, #4]
	//uint8_t temp_data = 0x80|reg;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8005190:	2200      	movs	r2, #0
 8005192:	2110      	movs	r1, #16
 8005194:	480c      	ldr	r0, [pc, #48]	@ (80051c8 <mpu6500_interface_spi_read+0x48>)
 8005196:	f006 f949 	bl	800b42c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg , 1, 100);
 800519a:	1df9      	adds	r1, r7, #7
 800519c:	2364      	movs	r3, #100	@ 0x64
 800519e:	2201      	movs	r2, #1
 80051a0:	480a      	ldr	r0, [pc, #40]	@ (80051cc <mpu6500_interface_spi_read+0x4c>)
 80051a2:	f008 f902 	bl	800d3aa <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buf, len, 100);
 80051a6:	88ba      	ldrh	r2, [r7, #4]
 80051a8:	2364      	movs	r3, #100	@ 0x64
 80051aa:	6839      	ldr	r1, [r7, #0]
 80051ac:	4807      	ldr	r0, [pc, #28]	@ (80051cc <mpu6500_interface_spi_read+0x4c>)
 80051ae:	f008 fa40 	bl	800d632 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80051b2:	2201      	movs	r2, #1
 80051b4:	2110      	movs	r1, #16
 80051b6:	4804      	ldr	r0, [pc, #16]	@ (80051c8 <mpu6500_interface_spi_read+0x48>)
 80051b8:	f006 f938 	bl	800b42c <HAL_GPIO_WritePin>
    return 0;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3708      	adds	r7, #8
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}
 80051c6:	bf00      	nop
 80051c8:	40020000 	.word	0x40020000
 80051cc:	20002cb0 	.word	0x20002cb0

080051d0 <mpu6500_interface_spi_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_spi_write(uint8_t reg, uint8_t *buf, uint16_t len)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	6039      	str	r1, [r7, #0]
 80051da:	71fb      	strb	r3, [r7, #7]
 80051dc:	4613      	mov	r3, r2
 80051de:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80051e0:	2200      	movs	r2, #0
 80051e2:	2110      	movs	r1, #16
 80051e4:	480c      	ldr	r0, [pc, #48]	@ (8005218 <mpu6500_interface_spi_write+0x48>)
 80051e6:	f006 f921 	bl	800b42c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 80051ea:	1df9      	adds	r1, r7, #7
 80051ec:	2364      	movs	r3, #100	@ 0x64
 80051ee:	2201      	movs	r2, #1
 80051f0:	480a      	ldr	r0, [pc, #40]	@ (800521c <mpu6500_interface_spi_write+0x4c>)
 80051f2:	f008 f8da 	bl	800d3aa <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 80051f6:	2364      	movs	r3, #100	@ 0x64
 80051f8:	2201      	movs	r2, #1
 80051fa:	6839      	ldr	r1, [r7, #0]
 80051fc:	4807      	ldr	r0, [pc, #28]	@ (800521c <mpu6500_interface_spi_write+0x4c>)
 80051fe:	f008 f8d4 	bl	800d3aa <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8005202:	2201      	movs	r2, #1
 8005204:	2110      	movs	r1, #16
 8005206:	4804      	ldr	r0, [pc, #16]	@ (8005218 <mpu6500_interface_spi_write+0x48>)
 8005208:	f006 f910 	bl	800b42c <HAL_GPIO_WritePin>
    return 0;
 800520c:	2300      	movs	r3, #0
}
 800520e:	4618      	mov	r0, r3
 8005210:	3708      	adds	r7, #8
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	40020000 	.word	0x40020000
 800521c:	20002cb0 	.word	0x20002cb0

08005220 <mpu6500_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms time
 * @note      none
 */
void mpu6500_interface_delay_ms(uint32_t ms)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
	vTaskDelay(pdMS_TO_TICKS(ms));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800522e:	fb02 f303 	mul.w	r3, r2, r3
 8005232:	4a05      	ldr	r2, [pc, #20]	@ (8005248 <mpu6500_interface_delay_ms+0x28>)
 8005234:	fba2 2303 	umull	r2, r3, r2, r3
 8005238:	099b      	lsrs	r3, r3, #6
 800523a:	4618      	mov	r0, r3
 800523c:	f00f fe38 	bl	8014eb0 <vTaskDelay>
}
 8005240:	bf00      	nop
 8005242:	3708      	adds	r7, #8
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	10624dd3 	.word	0x10624dd3

0800524c <mpu6500_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt format data
 * @note      none
 */
void mpu6500_interface_debug_print(const char *const fmt, ...)
{
 800524c:	b40f      	push	{r0, r1, r2, r3}
 800524e:	b580      	push	{r7, lr}
 8005250:	b082      	sub	sp, #8
 8005252:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8005254:	f107 0314 	add.w	r3, r7, #20
 8005258:	607b      	str	r3, [r7, #4]
    vfprintf(stderr, fmt, args);  // <-- Pass to stderr
 800525a:	4b07      	ldr	r3, [pc, #28]	@ (8005278 <mpu6500_interface_debug_print+0x2c>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	687a      	ldr	r2, [r7, #4]
 8005262:	6939      	ldr	r1, [r7, #16]
 8005264:	4618      	mov	r0, r3
 8005266:	f014 fb2d 	bl	80198c4 <vfiprintf>
    va_end(args);
}
 800526a:	bf00      	nop
 800526c:	3708      	adds	r7, #8
 800526e:	46bd      	mov	sp, r7
 8005270:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005274:	b004      	add	sp, #16
 8005276:	4770      	bx	lr
 8005278:	20000160 	.word	0x20000160

0800527c <mpu6500_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type irq type
 * @note      none
 */
void mpu6500_interface_receive_callback(uint8_t type)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	4603      	mov	r3, r0
 8005284:	71fb      	strb	r3, [r7, #7]
    switch (type)
 8005286:	79fb      	ldrb	r3, [r7, #7]
 8005288:	2b06      	cmp	r3, #6
 800528a:	d825      	bhi.n	80052d8 <mpu6500_interface_receive_callback+0x5c>
 800528c:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <mpu6500_interface_receive_callback+0x18>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052d1 	.word	0x080052d1
 8005298:	080052c9 	.word	0x080052c9
 800529c:	080052d9 	.word	0x080052d9
 80052a0:	080052c1 	.word	0x080052c1
 80052a4:	080052b9 	.word	0x080052b9
 80052a8:	080052d9 	.word	0x080052d9
 80052ac:	080052b1 	.word	0x080052b1
    {
        case MPU6500_INTERRUPT_MOTION :
        {
            mpu6500_interface_debug_print("mpu6500: irq motion.\n");
 80052b0:	480d      	ldr	r0, [pc, #52]	@ (80052e8 <mpu6500_interface_receive_callback+0x6c>)
 80052b2:	f7ff ffcb 	bl	800524c <mpu6500_interface_debug_print>
            
            break;
 80052b6:	e013      	b.n	80052e0 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6500_interface_debug_print("mpu6500: irq fifo overflow.\n");
 80052b8:	480c      	ldr	r0, [pc, #48]	@ (80052ec <mpu6500_interface_receive_callback+0x70>)
 80052ba:	f7ff ffc7 	bl	800524c <mpu6500_interface_debug_print>
            
            break;
 80052be:	e00f      	b.n	80052e0 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FSYNC_INT :
        {
            mpu6500_interface_debug_print("mpu6500: irq fsync int.\n");
 80052c0:	480b      	ldr	r0, [pc, #44]	@ (80052f0 <mpu6500_interface_receive_callback+0x74>)
 80052c2:	f7ff ffc3 	bl	800524c <mpu6500_interface_debug_print>
            
            break;
 80052c6:	e00b      	b.n	80052e0 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DMP :
        {
            mpu6500_interface_debug_print("mpu6500: irq dmp\n");
 80052c8:	480a      	ldr	r0, [pc, #40]	@ (80052f4 <mpu6500_interface_receive_callback+0x78>)
 80052ca:	f7ff ffbf 	bl	800524c <mpu6500_interface_debug_print>
            
            break;
 80052ce:	e007      	b.n	80052e0 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DATA_READY :
        {
            mpu6500_interface_debug_print("mpu6500: irq data ready\n");
 80052d0:	4809      	ldr	r0, [pc, #36]	@ (80052f8 <mpu6500_interface_receive_callback+0x7c>)
 80052d2:	f7ff ffbb 	bl	800524c <mpu6500_interface_debug_print>
            
            break;
 80052d6:	e003      	b.n	80052e0 <mpu6500_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6500_interface_debug_print("mpu6500: irq unknown code.\n");
 80052d8:	4808      	ldr	r0, [pc, #32]	@ (80052fc <mpu6500_interface_receive_callback+0x80>)
 80052da:	f7ff ffb7 	bl	800524c <mpu6500_interface_debug_print>
            
            break;
 80052de:	bf00      	nop
        }
    }
}
 80052e0:	bf00      	nop
 80052e2:	3708      	adds	r7, #8
 80052e4:	46bd      	mov	sp, r7
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	0801e780 	.word	0x0801e780
 80052ec:	0801e798 	.word	0x0801e798
 80052f0:	0801e7b8 	.word	0x0801e7b8
 80052f4:	0801e7d4 	.word	0x0801e7d4
 80052f8:	0801e7e8 	.word	0x0801e7e8
 80052fc:	0801e804 	.word	0x0801e804

08005300 <a_mpu6500_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6500_read(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005300:	b590      	push	{r4, r7, lr}
 8005302:	b085      	sub	sp, #20
 8005304:	af00      	add	r7, sp, #0
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	607a      	str	r2, [r7, #4]
 800530a:	461a      	mov	r2, r3
 800530c:	460b      	mov	r3, r1
 800530e:	72fb      	strb	r3, [r7, #11]
 8005310:	4613      	mov	r3, r2
 8005312:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                     /* if iic interface */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10e      	bne.n	800533c <a_mpu6500_read+0x3c>
    {
        if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	68dc      	ldr	r4, [r3, #12]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	7818      	ldrb	r0, [r3, #0]
 8005326:	893b      	ldrh	r3, [r7, #8]
 8005328:	7af9      	ldrb	r1, [r7, #11]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	47a0      	blx	r4
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d001      	beq.n	8005338 <a_mpu6500_read+0x38>
        {
            return 1;                                                                 /* return error */
 8005334:	2301      	movs	r3, #1
 8005336:	e010      	b.n	800535a <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8005338:	2300      	movs	r3, #0
 800533a:	e00e      	b.n	800535a <a_mpu6500_read+0x5a>
        }
    }
    else                                                                              /* spi interface */
    {
        if (handle->spi_read(reg | 0x80, (uint8_t *)buf, len) != 0)                   /* read data */
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	7afa      	ldrb	r2, [r7, #11]
 8005342:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005346:	b2d0      	uxtb	r0, r2
 8005348:	893a      	ldrh	r2, [r7, #8]
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4798      	blx	r3
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <a_mpu6500_read+0x58>
        {
            return 1;                                                                 /* return error */
 8005354:	2301      	movs	r3, #1
 8005356:	e000      	b.n	800535a <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8005358:	2300      	movs	r3, #0
        }
    }
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	bd90      	pop	{r4, r7, pc}

08005362 <a_mpu6500_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6500_write(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005362:	b590      	push	{r4, r7, lr}
 8005364:	b085      	sub	sp, #20
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	461a      	mov	r2, r3
 800536e:	460b      	mov	r3, r1
 8005370:	72fb      	strb	r3, [r7, #11]
 8005372:	4613      	mov	r3, r2
 8005374:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                      /* if iic interface */
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10e      	bne.n	800539e <a_mpu6500_write+0x3c>
    {
        if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	691c      	ldr	r4, [r3, #16]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	7818      	ldrb	r0, [r3, #0]
 8005388:	893b      	ldrh	r3, [r7, #8]
 800538a:	7af9      	ldrb	r1, [r7, #11]
 800538c:	687a      	ldr	r2, [r7, #4]
 800538e:	47a0      	blx	r4
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <a_mpu6500_write+0x38>
        {
            return 1;                                                                  /* return error */
 8005396:	2301      	movs	r3, #1
 8005398:	e010      	b.n	80053bc <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 800539a:	2300      	movs	r3, #0
 800539c:	e00e      	b.n	80053bc <a_mpu6500_write+0x5a>
        }
    }
    else                                                                               /* spi interface */
    {
        if (handle->spi_write(reg & (~0x80), (uint8_t *)buf, len) != 0)                /* write data */
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	7afa      	ldrb	r2, [r7, #11]
 80053a4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80053a8:	b2d0      	uxtb	r0, r2
 80053aa:	893a      	ldrh	r2, [r7, #8]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4798      	blx	r3
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <a_mpu6500_write+0x58>
        {
            return 1;                                                                  /* return error */
 80053b6:	2301      	movs	r3, #1
 80053b8:	e000      	b.n	80053bc <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 80053ba:	2300      	movs	r3, #0
        }
    }
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3714      	adds	r7, #20
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd90      	pop	{r4, r7, pc}

080053c4 <a_mpu6500_deinit>:
 *            - 0 success
 *            - 1 deinit failed
 * @note      none
 */
static uint8_t a_mpu6500_deinit(mpu6500_handle_t *handle)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)        /* if iic interface */
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d109      	bne.n	80053ea <a_mpu6500_deinit+0x26>
    {
        if (handle->iic_deinit() != 0)                   /* iic deinit */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	4798      	blx	r3
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <a_mpu6500_deinit+0x22>
        {
            return 1;                                    /* return error */
 80053e2:	2301      	movs	r3, #1
 80053e4:	e00a      	b.n	80053fc <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 80053e6:	2300      	movs	r3, #0
 80053e8:	e008      	b.n	80053fc <a_mpu6500_deinit+0x38>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                   /* if spi interface */
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	4798      	blx	r3
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d001      	beq.n	80053fa <a_mpu6500_deinit+0x36>
        {
            return 1;                                    /* return error */
 80053f6:	2301      	movs	r3, #1
 80053f8:	e000      	b.n	80053fc <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 80053fa:	2300      	movs	r3, #0
        }
    }
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <mpu6500_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_interface(mpu6500_handle_t *handle, mpu6500_interface_t interface)
{
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
 800540c:	460b      	mov	r3, r1
 800540e:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d101      	bne.n	800541a <mpu6500_set_interface+0x16>
    {
        return 2;                                /* return error */
 8005416:	2302      	movs	r3, #2
 8005418:	e004      	b.n	8005424 <mpu6500_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;        /* set interface */
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	78fa      	ldrb	r2, [r7, #3]
 800541e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
    return 0;                                    /* success return 0 */
 8005422:	2300      	movs	r3, #0
}
 8005424:	4618      	mov	r0, r3
 8005426:	370c      	adds	r7, #12
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <mpu6500_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_addr_pin(mpu6500_handle_t *handle, mpu6500_address_t addr_pin)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	460b      	mov	r3, r1
 800543a:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <mpu6500_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 8005442:	2302      	movs	r3, #2
 8005444:	e003      	b.n	800544e <mpu6500_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	78fa      	ldrb	r2, [r7, #3]
 800544a:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 800544c:	2300      	movs	r3, #0
}
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <mpu6500_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6500_init(mpu6500_handle_t *handle)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;
  
    if (handle == NULL)                                                             /* check handle */
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <mpu6500_init+0x12>
    {
        return 2;                                                                   /* return error */
 800546a:	2302      	movs	r3, #2
 800546c:	e0fb      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005472:	2b00      	cmp	r3, #0
 8005474:	d101      	bne.n	800547a <mpu6500_init+0x1e>
    {
        return 3;                                                                   /* return error */
 8005476:	2303      	movs	r3, #3
 8005478:	e0f5      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d105      	bne.n	800548e <mpu6500_init+0x32>
    {
        handle->debug_print("mpu6500: iic_init is null.\n");                        /* iic_init is null */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005486:	487a      	ldr	r0, [pc, #488]	@ (8005670 <mpu6500_init+0x214>)
 8005488:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800548a:	2303      	movs	r3, #3
 800548c:	e0eb      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d105      	bne.n	80054a2 <mpu6500_init+0x46>
    {
        handle->debug_print("mpu6500: iic_deinit is null.\n");                      /* iic_deinit is null */
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800549a:	4876      	ldr	r0, [pc, #472]	@ (8005674 <mpu6500_init+0x218>)
 800549c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800549e:	2303      	movs	r3, #3
 80054a0:	e0e1      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d105      	bne.n	80054b6 <mpu6500_init+0x5a>
    {
        handle->debug_print("mpu6500: iic_read is null.\n");                        /* iic_read is null */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ae:	4872      	ldr	r0, [pc, #456]	@ (8005678 <mpu6500_init+0x21c>)
 80054b0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80054b2:	2303      	movs	r3, #3
 80054b4:	e0d7      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d105      	bne.n	80054ca <mpu6500_init+0x6e>
    {
        handle->debug_print("mpu6500: iic_write is null.\n");                       /* iic_write is null */
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c2:	486e      	ldr	r0, [pc, #440]	@ (800567c <mpu6500_init+0x220>)
 80054c4:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80054c6:	2303      	movs	r3, #3
 80054c8:	e0cd      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (handle->spi_init == NULL)                                                   /* check spi_init */
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	695b      	ldr	r3, [r3, #20]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d105      	bne.n	80054de <mpu6500_init+0x82>
    {
        handle->debug_print("mpu6500: spi_init is null.\n");                        /* spi_init is null */
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d6:	486a      	ldr	r0, [pc, #424]	@ (8005680 <mpu6500_init+0x224>)
 80054d8:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80054da:	2303      	movs	r3, #3
 80054dc:	e0c3      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (handle->spi_deinit == NULL)                                                 /* check spi_deinit */
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	699b      	ldr	r3, [r3, #24]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d105      	bne.n	80054f2 <mpu6500_init+0x96>
    {
        handle->debug_print("mpu6500: spi_deinit is null.\n");                      /* spi_deinit is null */
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	4866      	ldr	r0, [pc, #408]	@ (8005684 <mpu6500_init+0x228>)
 80054ec:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80054ee:	2303      	movs	r3, #3
 80054f0:	e0b9      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (handle->spi_read == NULL)                                                   /* check spi_read */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d105      	bne.n	8005506 <mpu6500_init+0xaa>
    {
        handle->debug_print("mpu6500: spi_read is null.\n");                        /* spi_read is null */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fe:	4862      	ldr	r0, [pc, #392]	@ (8005688 <mpu6500_init+0x22c>)
 8005500:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005502:	2303      	movs	r3, #3
 8005504:	e0af      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (handle->spi_write == NULL)                                                  /* check spi_write */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d105      	bne.n	800551a <mpu6500_init+0xbe>
    {
        handle->debug_print("mpu6500: spi_write is null.\n");                       /* spi_write is null */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005512:	485e      	ldr	r0, [pc, #376]	@ (800568c <mpu6500_init+0x230>)
 8005514:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005516:	2303      	movs	r3, #3
 8005518:	e0a5      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800551e:	2b00      	cmp	r3, #0
 8005520:	d105      	bne.n	800552e <mpu6500_init+0xd2>
    {
        handle->debug_print("mpu6500: delay_ms is null.\n");                        /* delay_ms is null */
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005526:	485a      	ldr	r0, [pc, #360]	@ (8005690 <mpu6500_init+0x234>)
 8005528:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800552a:	2303      	movs	r3, #3
 800552c:	e09b      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005532:	2b00      	cmp	r3, #0
 8005534:	d105      	bne.n	8005542 <mpu6500_init+0xe6>
    {
        handle->debug_print("mpu6500: receive_callback is null.\n");                /* receive_callback is null */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553a:	4856      	ldr	r0, [pc, #344]	@ (8005694 <mpu6500_init+0x238>)
 800553c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800553e:	2303      	movs	r3, #3
 8005540:	e091      	b.n	8005666 <mpu6500_init+0x20a>
    }
    
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                   /* if iic interface */
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005548:	2b00      	cmp	r3, #0
 800554a:	d10d      	bne.n	8005568 <mpu6500_init+0x10c>
    {
        res = handle->iic_init();                                                   /* iic init */
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	685b      	ldr	r3, [r3, #4]
 8005550:	4798      	blx	r3
 8005552:	4603      	mov	r3, r0
 8005554:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8005556:	7afb      	ldrb	r3, [r7, #11]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d013      	beq.n	8005584 <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: iic init failed.\n");                     /* iic init failed */
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005560:	484d      	ldr	r0, [pc, #308]	@ (8005698 <mpu6500_init+0x23c>)
 8005562:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 8005564:	2301      	movs	r3, #1
 8005566:	e07e      	b.n	8005666 <mpu6500_init+0x20a>
        }
    }
    else                                                                            /* if spi interface */
    {
        res = handle->spi_init();                                                   /* spi init */
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	695b      	ldr	r3, [r3, #20]
 800556c:	4798      	blx	r3
 800556e:	4603      	mov	r3, r0
 8005570:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8005572:	7afb      	ldrb	r3, [r7, #11]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: spi init failed.\n");                     /* spi init failed */
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557c:	4847      	ldr	r0, [pc, #284]	@ (800569c <mpu6500_init+0x240>)
 800557e:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 8005580:	2301      	movs	r3, #1
 8005582:	e070      	b.n	8005666 <mpu6500_init+0x20a>
        }
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_WHO_AM_I, &prev, 1);                   /* read who am I */
 8005584:	f107 020a 	add.w	r2, r7, #10
 8005588:	2301      	movs	r3, #1
 800558a:	2175      	movs	r1, #117	@ 0x75
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f7ff feb7 	bl	8005300 <a_mpu6500_read>
 8005592:	4603      	mov	r3, r0
 8005594:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8005596:	7afb      	ldrb	r3, [r7, #11]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d008      	beq.n	80055ae <mpu6500_init+0x152>
    {
        handle->debug_print("mpu6500: read who am i failed.\n");                    /* read who am I failed */
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055a0:	483f      	ldr	r0, [pc, #252]	@ (80056a0 <mpu6500_init+0x244>)
 80055a2:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff ff0d 	bl	80053c4 <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 80055aa:	2305      	movs	r3, #5
 80055ac:	e05b      	b.n	8005666 <mpu6500_init+0x20a>
    }
    if (prev != 0x70)                                                               /* check the id */
 80055ae:	7abb      	ldrb	r3, [r7, #10]
 80055b0:	2b70      	cmp	r3, #112	@ 0x70
 80055b2:	d008      	beq.n	80055c6 <mpu6500_init+0x16a>
    {
        handle->debug_print("mpu6500: id is invalid.\n");                           /* id is invalid */
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b8:	483a      	ldr	r0, [pc, #232]	@ (80056a4 <mpu6500_init+0x248>)
 80055ba:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff ff01 	bl	80053c4 <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 80055c2:	2305      	movs	r3, #5
 80055c4:	e04f      	b.n	8005666 <mpu6500_init+0x20a>
    }
    
    prev = 1 << 7;                                                                  /* reset the device */
 80055c6:	2380      	movs	r3, #128	@ 0x80
 80055c8:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);                /* write pwr mgmt 1 */
 80055ca:	f107 020a 	add.w	r2, r7, #10
 80055ce:	2301      	movs	r3, #1
 80055d0:	216b      	movs	r1, #107	@ 0x6b
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f7ff fec5 	bl	8005362 <a_mpu6500_write>
 80055d8:	4603      	mov	r3, r0
 80055da:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 80055dc:	7afb      	ldrb	r3, [r7, #11]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d008      	beq.n	80055f4 <mpu6500_init+0x198>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e6:	4830      	ldr	r0, [pc, #192]	@ (80056a8 <mpu6500_init+0x24c>)
 80055e8:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7ff feea 	bl	80053c4 <a_mpu6500_deinit>
        
        return 4;                                                                   /* return error */
 80055f0:	2304      	movs	r3, #4
 80055f2:	e038      	b.n	8005666 <mpu6500_init+0x20a>
    }
    handle->delay_ms(10);                                                           /* delay 10 ms */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055f8:	200a      	movs	r0, #10
 80055fa:	4798      	blx	r3
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 80055fc:	2364      	movs	r3, #100	@ 0x64
 80055fe:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8005600:	e029      	b.n	8005656 <mpu6500_init+0x1fa>
    {
        res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);             /* read pwr mgmt 1 */
 8005602:	f107 020a 	add.w	r2, r7, #10
 8005606:	2301      	movs	r3, #1
 8005608:	216b      	movs	r1, #107	@ 0x6b
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff fe78 	bl	8005300 <a_mpu6500_read>
 8005610:	4603      	mov	r3, r0
 8005612:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8005614:	7afb      	ldrb	r3, [r7, #11]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d008      	beq.n	800562c <mpu6500_init+0x1d0>
        {
            handle->debug_print("mpu6500: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561e:	4823      	ldr	r0, [pc, #140]	@ (80056ac <mpu6500_init+0x250>)
 8005620:	4798      	blx	r3
            (void)a_mpu6500_deinit(handle);                                         /* iic or spi deinit */
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f7ff fece 	bl	80053c4 <a_mpu6500_deinit>
            
            return 4;                                                               /* return error */
 8005628:	2304      	movs	r3, #4
 800562a:	e01c      	b.n	8005666 <mpu6500_init+0x20a>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 800562c:	7abb      	ldrb	r3, [r7, #10]
 800562e:	b25b      	sxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	db09      	blt.n	8005648 <mpu6500_init+0x1ec>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            handle->dmp_inited = 0;                                                 /* flag closed */
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            
            return 0;                                                               /* success return 0 */
 8005644:	2300      	movs	r3, #0
 8005646:	e00e      	b.n	8005666 <mpu6500_init+0x20a>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800564c:	200a      	movs	r0, #10
 800564e:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3b01      	subs	r3, #1
 8005654:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d1d2      	bne.n	8005602 <mpu6500_init+0x1a6>
    }
    
    handle->debug_print("mpu6500: reset failed.\n");                                /* reset failed */
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005660:	4813      	ldr	r0, [pc, #76]	@ (80056b0 <mpu6500_init+0x254>)
 8005662:	4798      	blx	r3
   
    return 4;                                                                       /* return error */
 8005664:	2304      	movs	r3, #4
}
 8005666:	4618      	mov	r0, r3
 8005668:	3710      	adds	r7, #16
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	0801eddc 	.word	0x0801eddc
 8005674:	0801edf8 	.word	0x0801edf8
 8005678:	0801ee18 	.word	0x0801ee18
 800567c:	0801ee34 	.word	0x0801ee34
 8005680:	0801ee54 	.word	0x0801ee54
 8005684:	0801ee70 	.word	0x0801ee70
 8005688:	0801ee90 	.word	0x0801ee90
 800568c:	0801eeac 	.word	0x0801eeac
 8005690:	0801eecc 	.word	0x0801eecc
 8005694:	0801eee8 	.word	0x0801eee8
 8005698:	0801ef0c 	.word	0x0801ef0c
 800569c:	0801ef28 	.word	0x0801ef28
 80056a0:	0801ef44 	.word	0x0801ef44
 80056a4:	0801ef64 	.word	0x0801ef64
 80056a8:	0801ef80 	.word	0x0801ef80
 80056ac:	0801efa4 	.word	0x0801efa4
 80056b0:	0801efc8 	.word	0x0801efc8

080056b4 <mpu6500_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6500_deinit(mpu6500_handle_t *handle)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                         /* check handle */
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d101      	bne.n	80056c6 <mpu6500_deinit+0x12>
    {
        return 2;                                                               /* return error */
 80056c2:	2302      	movs	r3, #2
 80056c4:	e031      	b.n	800572a <mpu6500_deinit+0x76>
    }
    if (handle->inited != 1)                                                    /* check handle initialization */
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d001      	beq.n	80056d4 <mpu6500_deinit+0x20>
    {
        return 3;                                                               /* return error */
 80056d0:	2303      	movs	r3, #3
 80056d2:	e02a      	b.n	800572a <mpu6500_deinit+0x76>
    }
    
    prev = (1 << 6) | (1 << 3) | (7 << 0);                                      /* enter sleep mode */
 80056d4:	234f      	movs	r3, #79	@ 0x4f
 80056d6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 80056d8:	f107 020e 	add.w	r2, r7, #14
 80056dc:	2301      	movs	r3, #1
 80056de:	216b      	movs	r1, #107	@ 0x6b
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fe3e 	bl	8005362 <a_mpu6500_write>
 80056e6:	4603      	mov	r3, r0
 80056e8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 80056ea:	7bfb      	ldrb	r3, [r7, #15]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d005      	beq.n	80056fc <mpu6500_deinit+0x48>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");             /* write pwr mgmt 1 failed */
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056f4:	480f      	ldr	r0, [pc, #60]	@ (8005734 <mpu6500_deinit+0x80>)
 80056f6:	4798      	blx	r3
       
        return 4;                                                               /* return error */
 80056f8:	2304      	movs	r3, #4
 80056fa:	e016      	b.n	800572a <mpu6500_deinit+0x76>
    }
    res = a_mpu6500_deinit(handle);                                             /* deinit */
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f7ff fe61 	bl	80053c4 <a_mpu6500_deinit>
 8005702:	4603      	mov	r3, r0
 8005704:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 8005706:	7bfb      	ldrb	r3, [r7, #15]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d005      	beq.n	8005718 <mpu6500_deinit+0x64>
    {
        handle->debug_print("mpu6500: deinit failed.\n");                       /* deinit failed */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005710:	4809      	ldr	r0, [pc, #36]	@ (8005738 <mpu6500_deinit+0x84>)
 8005712:	4798      	blx	r3
       
        return 1;                                                               /* return error */
 8005714:	2301      	movs	r3, #1
 8005716:	e008      	b.n	800572a <mpu6500_deinit+0x76>
    }
    handle->inited = 0;                                                         /* flag closed */
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    handle->dmp_inited = 0;                                                     /* flag closed */
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    
    return 0;                                                                   /* success return 0 */
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3710      	adds	r7, #16
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	0801ef80 	.word	0x0801ef80
 8005738:	0801efe0 	.word	0x0801efe0

0800573c <mpu6500_read>:
uint8_t mpu6500_read(mpu6500_handle_t *handle,
                     int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                     uint16_t *len
                    )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af00      	add	r7, sp, #0
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	60b9      	str	r1, [r7, #8]
 8005746:	607a      	str	r2, [r7, #4]
 8005748:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;
    
    if (handle == NULL)                                                                            /* check handle */
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d102      	bne.n	8005756 <mpu6500_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 8005750:	2302      	movs	r3, #2
 8005752:	f000 be88 	b.w	8006466 <mpu6500_read+0xd2a>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800575c:	2b01      	cmp	r3, #1
 800575e:	d002      	beq.n	8005766 <mpu6500_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 8005760:	2303      	movs	r3, #3
 8005762:	f000 be80 	b.w	8006466 <mpu6500_read+0xd2a>
    }
    if ((*len) == 0)                                                                               /* check length */
 8005766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005768:	881b      	ldrh	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d106      	bne.n	800577c <mpu6500_read+0x40>
    {
        handle->debug_print("mpu6500: length is zero.\n");                                         /* length is zero */
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005772:	486a      	ldr	r0, [pc, #424]	@ (800591c <mpu6500_read+0x1e0>)
 8005774:	4798      	blx	r3
                                                                                                  
        return 4;                                                                                  /* return error */
 8005776:	2304      	movs	r3, #4
 8005778:	f000 be75 	b.w	8006466 <mpu6500_read+0xd2a>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005782:	2b00      	cmp	r3, #0
 8005784:	d006      	beq.n	8005794 <mpu6500_read+0x58>
    {
        handle->debug_print("mpu6500: dmp is running.\n");                                         /* dmp is running */
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800578a:	4865      	ldr	r0, [pc, #404]	@ (8005920 <mpu6500_read+0x1e4>)
 800578c:	4798      	blx	r3
        
        return 5;                                                                                  /* return error */
 800578e:	2305      	movs	r3, #5
 8005790:	f000 be69 	b.w	8006466 <mpu6500_read+0xd2a>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);                      /* read config */
 8005794:	f107 0219 	add.w	r2, r7, #25
 8005798:	2301      	movs	r3, #1
 800579a:	216a      	movs	r1, #106	@ 0x6a
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f7ff fdaf 	bl	8005300 <a_mpu6500_read>
 80057a2:	4603      	mov	r3, r0
 80057a4:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 80057a6:	7f7b      	ldrb	r3, [r7, #29]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d006      	beq.n	80057ba <mpu6500_read+0x7e>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                                  /* read user ctrl failed */
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b0:	485c      	ldr	r0, [pc, #368]	@ (8005924 <mpu6500_read+0x1e8>)
 80057b2:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 80057b4:	2301      	movs	r3, #1
 80057b6:	f000 be56 	b.w	8006466 <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);             /* read accel config */
 80057ba:	f107 0218 	add.w	r2, r7, #24
 80057be:	2301      	movs	r3, #1
 80057c0:	211c      	movs	r1, #28
 80057c2:	68f8      	ldr	r0, [r7, #12]
 80057c4:	f7ff fd9c 	bl	8005300 <a_mpu6500_read>
 80057c8:	4603      	mov	r3, r0
 80057ca:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 80057cc:	7f7b      	ldrb	r3, [r7, #29]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d006      	beq.n	80057e0 <mpu6500_read+0xa4>
    {
        handle->debug_print("mpu6500: read accel config failed.\n");                               /* read accel config failed */
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057d6:	4854      	ldr	r0, [pc, #336]	@ (8005928 <mpu6500_read+0x1ec>)
 80057d8:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 80057da:	2301      	movs	r3, #1
 80057dc:	f000 be43 	b.w	8006466 <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);               /* read gyro config */
 80057e0:	f107 0217 	add.w	r2, r7, #23
 80057e4:	2301      	movs	r3, #1
 80057e6:	211b      	movs	r1, #27
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f7ff fd89 	bl	8005300 <a_mpu6500_read>
 80057ee:	4603      	mov	r3, r0
 80057f0:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 80057f2:	7f7b      	ldrb	r3, [r7, #29]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d006      	beq.n	8005806 <mpu6500_read+0xca>
    {
        handle->debug_print("mpu6500: read gyro config failed.\n");                                /* read gyro config failed */
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fc:	484b      	ldr	r0, [pc, #300]	@ (800592c <mpu6500_read+0x1f0>)
 80057fe:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8005800:	2301      	movs	r3, #1
 8005802:	f000 be30 	b.w	8006466 <mpu6500_read+0xd2a>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 8005806:	7e3b      	ldrb	r3, [r7, #24]
 8005808:	08db      	lsrs	r3, r3, #3
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	b2db      	uxtb	r3, r3
 8005812:	763b      	strb	r3, [r7, #24]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 8005814:	7dfb      	ldrb	r3, [r7, #23]
 8005816:	08db      	lsrs	r3, r3, #3
 8005818:	b2db      	uxtb	r3, r3
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	b2db      	uxtb	r3, r3
 8005820:	75fb      	strb	r3, [r7, #23]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 8005822:	7e7b      	ldrb	r3, [r7, #25]
 8005824:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8436 	beq.w	800609a <mpu6500_read+0x95e>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&conf, 1);                    /* read fifo enable */
 800582e:	f107 0216 	add.w	r2, r7, #22
 8005832:	2301      	movs	r3, #1
 8005834:	2123      	movs	r1, #35	@ 0x23
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f7ff fd62 	bl	8005300 <a_mpu6500_read>
 800583c:	4603      	mov	r3, r0
 800583e:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8005840:	7f7b      	ldrb	r3, [r7, #29]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d006      	beq.n	8005854 <mpu6500_read+0x118>
        {
            handle->debug_print("mpu6500: read fifo enable failed.\n");                            /* read fifo enable failed */
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800584a:	4839      	ldr	r0, [pc, #228]	@ (8005930 <mpu6500_read+0x1f4>)
 800584c:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 800584e:	2301      	movs	r3, #1
 8005850:	f000 be09 	b.w	8006466 <mpu6500_read+0xd2a>
        }
        if (conf != 0x78)                                                                          /* check the conf */
 8005854:	7dbb      	ldrb	r3, [r7, #22]
 8005856:	2b78      	cmp	r3, #120	@ 0x78
 8005858:	d006      	beq.n	8005868 <mpu6500_read+0x12c>
        {
            handle->debug_print("mpu6500: fifo conf is error.\n");                                 /* fifo conf is error */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800585e:	4835      	ldr	r0, [pc, #212]	@ (8005934 <mpu6500_read+0x1f8>)
 8005860:	4798      	blx	r3
                                                                                                      
            return 6;                                                                              /* return error */
 8005862:	2306      	movs	r3, #6
 8005864:	f000 bdff 	b.w	8006466 <mpu6500_read+0xd2a>
        }
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_COUNTH, (uint8_t *)buf, 2);                  /* read fifo count */
 8005868:	f107 0214 	add.w	r2, r7, #20
 800586c:	2302      	movs	r3, #2
 800586e:	2172      	movs	r1, #114	@ 0x72
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f7ff fd45 	bl	8005300 <a_mpu6500_read>
 8005876:	4603      	mov	r3, r0
 8005878:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 800587a:	7f7b      	ldrb	r3, [r7, #29]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d006      	beq.n	800588e <mpu6500_read+0x152>
        {
            handle->debug_print("mpu6500: read fifo count failed.\n");                             /* read fifo count failed */
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005884:	482c      	ldr	r0, [pc, #176]	@ (8005938 <mpu6500_read+0x1fc>)
 8005886:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8005888:	2301      	movs	r3, #1
 800588a:	f000 bdec 	b.w	8006466 <mpu6500_read+0xd2a>
        }
        
        count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                      /* set count */
 800588e:	7d3b      	ldrb	r3, [r7, #20]
 8005890:	b21b      	sxth	r3, r3
 8005892:	021b      	lsls	r3, r3, #8
 8005894:	b21a      	sxth	r2, r3
 8005896:	7d7b      	ldrb	r3, [r7, #21]
 8005898:	b21b      	sxth	r3, r3
 800589a:	4313      	orrs	r3, r2
 800589c:	b21b      	sxth	r3, r3
 800589e:	837b      	strh	r3, [r7, #26]
        count = (count < 1024) ? count : 1024;                                                     /* just the counter */
 80058a0:	8b7b      	ldrh	r3, [r7, #26]
 80058a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058a6:	bf28      	it	cs
 80058a8:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 80058ac:	837b      	strh	r3, [r7, #26]
        count = (count < ((*len) * 12)) ? count : ((*len) * 12);                                   /* just outer buffer size */
 80058ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b0:	881b      	ldrh	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	4613      	mov	r3, r2
 80058b6:	005b      	lsls	r3, r3, #1
 80058b8:	4413      	add	r3, r2
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	461a      	mov	r2, r3
 80058be:	8b7b      	ldrh	r3, [r7, #26]
 80058c0:	4293      	cmp	r3, r2
 80058c2:	bfa8      	it	ge
 80058c4:	4613      	movge	r3, r2
 80058c6:	837b      	strh	r3, [r7, #26]
        count = (count / 12) * 12;                                                                 /* 12 times */
 80058c8:	8b7b      	ldrh	r3, [r7, #26]
 80058ca:	4a1c      	ldr	r2, [pc, #112]	@ (800593c <mpu6500_read+0x200>)
 80058cc:	fba2 2303 	umull	r2, r3, r2, r3
 80058d0:	08db      	lsrs	r3, r3, #3
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	461a      	mov	r2, r3
 80058d6:	0052      	lsls	r2, r2, #1
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	837b      	strh	r3, [r7, #26]
        *len = count / 12;                                                                         /* set the output length */
 80058de:	8b7b      	ldrh	r3, [r7, #26]
 80058e0:	4a16      	ldr	r2, [pc, #88]	@ (800593c <mpu6500_read+0x200>)
 80058e2:	fba2 2303 	umull	r2, r3, r2, r3
 80058e6:	08db      	lsrs	r3, r3, #3
 80058e8:	b29a      	uxth	r2, r3
 80058ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ec:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_R_W, handle->buf, count);                         /* read data */
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80058f4:	8b7b      	ldrh	r3, [r7, #26]
 80058f6:	2174      	movs	r1, #116	@ 0x74
 80058f8:	68f8      	ldr	r0, [r7, #12]
 80058fa:	f7ff fd01 	bl	8005300 <a_mpu6500_read>
 80058fe:	4603      	mov	r3, r0
 8005900:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8005902:	7f7b      	ldrb	r3, [r7, #29]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d006      	beq.n	8005916 <mpu6500_read+0x1da>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800590c:	480c      	ldr	r0, [pc, #48]	@ (8005940 <mpu6500_read+0x204>)
 800590e:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8005910:	2301      	movs	r3, #1
 8005912:	f000 bda8 	b.w	8006466 <mpu6500_read+0xd2a>
        }
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 8005916:	2300      	movs	r3, #0
 8005918:	83fb      	strh	r3, [r7, #30]
 800591a:	e3b6      	b.n	800608a <mpu6500_read+0x94e>
 800591c:	0801effc 	.word	0x0801effc
 8005920:	0801eacc 	.word	0x0801eacc
 8005924:	0801ed94 	.word	0x0801ed94
 8005928:	0801ed4c 	.word	0x0801ed4c
 800592c:	0801ed70 	.word	0x0801ed70
 8005930:	0801f018 	.word	0x0801f018
 8005934:	0801f03c 	.word	0x0801f03c
 8005938:	0801ecd0 	.word	0x0801ecd0
 800593c:	aaaaaaab 	.word	0xaaaaaaab
 8005940:	0801ecf4 	.word	0x0801ecf4
 8005944:	46800000 	.word	0x46800000
 8005948:	46000000 	.word	0x46000000
        {
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 800594c:	8bfa      	ldrh	r2, [r7, #30]
 800594e:	4613      	mov	r3, r2
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	4413      	add	r3, r2
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	461a      	mov	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	4413      	add	r3, r2
 800595c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005960:	b21b      	sxth	r3, r3
 8005962:	021b      	lsls	r3, r3, #8
 8005964:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 1];                                  /* set raw accel x */
 8005966:	8bfa      	ldrh	r2, [r7, #30]
 8005968:	4613      	mov	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	3301      	adds	r3, #1
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800597a:	b219      	sxth	r1, r3
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 800597c:	8bfa      	ldrh	r2, [r7, #30]
 800597e:	4613      	mov	r3, r2
 8005980:	005b      	lsls	r3, r3, #1
 8005982:	4413      	add	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	461a      	mov	r2, r3
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	4413      	add	r3, r2
 800598c:	ea40 0201 	orr.w	r2, r0, r1
 8005990:	b212      	sxth	r2, r2
 8005992:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8005994:	8bfa      	ldrh	r2, [r7, #30]
 8005996:	4613      	mov	r3, r2
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	4413      	add	r3, r2
 800599c:	009b      	lsls	r3, r3, #2
 800599e:	3302      	adds	r3, #2
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	4413      	add	r3, r2
 80059a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059a8:	b21b      	sxth	r3, r3
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 3];                                  /* set raw accel y */
 80059ae:	8bfa      	ldrh	r2, [r7, #30]
 80059b0:	4613      	mov	r3, r2
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	4413      	add	r3, r2
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	3303      	adds	r3, #3
 80059ba:	68fa      	ldr	r2, [r7, #12]
 80059bc:	4413      	add	r3, r2
 80059be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059c2:	b219      	sxth	r1, r3
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 80059c4:	8bfa      	ldrh	r2, [r7, #30]
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	461a      	mov	r2, r3
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4413      	add	r3, r2
 80059d4:	ea40 0201 	orr.w	r2, r0, r1
 80059d8:	b212      	sxth	r2, r2
 80059da:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 80059dc:	8bfa      	ldrh	r2, [r7, #30]
 80059de:	4613      	mov	r3, r2
 80059e0:	005b      	lsls	r3, r3, #1
 80059e2:	4413      	add	r3, r2
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	3304      	adds	r3, #4
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	021b      	lsls	r3, r3, #8
 80059f4:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 5];                                  /* set raw accel z */
 80059f6:	8bfa      	ldrh	r2, [r7, #30]
 80059f8:	4613      	mov	r3, r2
 80059fa:	005b      	lsls	r3, r3, #1
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	3305      	adds	r3, #5
 8005a02:	68fa      	ldr	r2, [r7, #12]
 8005a04:	4413      	add	r3, r2
 8005a06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a0a:	b219      	sxth	r1, r3
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8005a0c:	8bfa      	ldrh	r2, [r7, #30]
 8005a0e:	4613      	mov	r3, r2
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	4413      	add	r3, r2
 8005a14:	005b      	lsls	r3, r3, #1
 8005a16:	461a      	mov	r2, r3
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	ea40 0201 	orr.w	r2, r0, r1
 8005a20:	b212      	sxth	r2, r2
 8005a22:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8005a24:	8bfa      	ldrh	r2, [r7, #30]
 8005a26:	4613      	mov	r3, r2
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	4413      	add	r3, r2
 8005a2c:	009b      	lsls	r3, r3, #2
 8005a2e:	3306      	adds	r3, #6
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	4413      	add	r3, r2
 8005a34:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a38:	b21b      	sxth	r3, r3
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 7];                                   /* set raw gyro x */
 8005a3e:	8bfa      	ldrh	r2, [r7, #30]
 8005a40:	4613      	mov	r3, r2
 8005a42:	005b      	lsls	r3, r3, #1
 8005a44:	4413      	add	r3, r2
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	3307      	adds	r3, #7
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a52:	b219      	sxth	r1, r3
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8005a54:	8bfa      	ldrh	r2, [r7, #30]
 8005a56:	4613      	mov	r3, r2
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	461a      	mov	r2, r3
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	4413      	add	r3, r2
 8005a64:	ea40 0201 	orr.w	r2, r0, r1
 8005a68:	b212      	sxth	r2, r2
 8005a6a:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8005a6c:	8bfa      	ldrh	r2, [r7, #30]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	005b      	lsls	r3, r3, #1
 8005a72:	4413      	add	r3, r2
 8005a74:	009b      	lsls	r3, r3, #2
 8005a76:	3308      	adds	r3, #8
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4413      	add	r3, r2
 8005a7c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a80:	b21b      	sxth	r3, r3
 8005a82:	021b      	lsls	r3, r3, #8
 8005a84:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 9];                                   /* set raw gyro y */
 8005a86:	8bfa      	ldrh	r2, [r7, #30]
 8005a88:	4613      	mov	r3, r2
 8005a8a:	005b      	lsls	r3, r3, #1
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	3309      	adds	r3, #9
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	4413      	add	r3, r2
 8005a96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a9a:	b219      	sxth	r1, r3
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8005a9c:	8bfa      	ldrh	r2, [r7, #30]
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	005b      	lsls	r3, r3, #1
 8005aa2:	4413      	add	r3, r2
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	4413      	add	r3, r2
 8005aac:	ea40 0201 	orr.w	r2, r0, r1
 8005ab0:	b212      	sxth	r2, r2
 8005ab2:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8005ab4:	8bfa      	ldrh	r2, [r7, #30]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	005b      	lsls	r3, r3, #1
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	330a      	adds	r3, #10
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ac8:	b21b      	sxth	r3, r3
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 11];                                  /* set raw gyro z */
 8005ace:	8bfa      	ldrh	r2, [r7, #30]
 8005ad0:	4613      	mov	r3, r2
 8005ad2:	005b      	lsls	r3, r3, #1
 8005ad4:	4413      	add	r3, r2
 8005ad6:	009b      	lsls	r3, r3, #2
 8005ad8:	330b      	adds	r3, #11
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	4413      	add	r3, r2
 8005ade:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005ae2:	b219      	sxth	r1, r3
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8005ae4:	8bfa      	ldrh	r2, [r7, #30]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	005b      	lsls	r3, r3, #1
 8005aea:	4413      	add	r3, r2
 8005aec:	005b      	lsls	r3, r3, #1
 8005aee:	461a      	mov	r2, r3
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	4413      	add	r3, r2
 8005af4:	ea40 0201 	orr.w	r2, r0, r1
 8005af8:	b212      	sxth	r2, r2
 8005afa:	809a      	strh	r2, [r3, #4]
            
            if (accel_conf == 0)                                                                   /* ±2g */
 8005afc:	7e3b      	ldrb	r3, [r7, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d154      	bne.n	8005bac <mpu6500_read+0x470>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                               /* set accel x */
 8005b02:	8bfa      	ldrh	r2, [r7, #30]
 8005b04:	4613      	mov	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	4413      	add	r3, r2
 8005b12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005b16:	ee07 3a90 	vmov	s15, r3
 8005b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b1e:	8bfa      	ldrh	r2, [r7, #30]
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	461a      	mov	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	ed5f 6a7b 	vldr	s13, [pc, #-492]	@ 8005944 <mpu6500_read+0x208>
 8005b32:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b36:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                               /* set accel y */
 8005b3a:	8bfa      	ldrh	r2, [r7, #30]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	4413      	add	r3, r2
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	461a      	mov	r2, r3
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005b4e:	ee07 3a90 	vmov	s15, r3
 8005b52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b56:	8bfa      	ldrh	r2, [r7, #30]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	005b      	lsls	r3, r3, #1
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	461a      	mov	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	4413      	add	r3, r2
 8005b66:	ed5f 6a89 	vldr	s13, [pc, #-548]	@ 8005944 <mpu6500_read+0x208>
 8005b6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b6e:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                               /* set accel z */
 8005b72:	8bfa      	ldrh	r2, [r7, #30]
 8005b74:	4613      	mov	r3, r2
 8005b76:	005b      	lsls	r3, r3, #1
 8005b78:	4413      	add	r3, r2
 8005b7a:	005b      	lsls	r3, r3, #1
 8005b7c:	461a      	mov	r2, r3
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	4413      	add	r3, r2
 8005b82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005b86:	ee07 3a90 	vmov	s15, r3
 8005b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b8e:	8bfa      	ldrh	r2, [r7, #30]
 8005b90:	4613      	mov	r3, r2
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	461a      	mov	r2, r3
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4413      	add	r3, r2
 8005b9e:	ed5f 6a97 	vldr	s13, [pc, #-604]	@ 8005944 <mpu6500_read+0x208>
 8005ba2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ba6:	edc3 7a02 	vstr	s15, [r3, #8]
 8005baa:	e103      	b.n	8005db4 <mpu6500_read+0x678>
            }
            else if (accel_conf == 1)                                                              /* ±4g */
 8005bac:	7e3b      	ldrb	r3, [r7, #24]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d154      	bne.n	8005c5c <mpu6500_read+0x520>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                                /* set accel x */
 8005bb2:	8bfa      	ldrh	r2, [r7, #30]
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	4413      	add	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	4413      	add	r3, r2
 8005bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bc6:	ee07 3a90 	vmov	s15, r3
 8005bca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bce:	8bfa      	ldrh	r2, [r7, #30]
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	005b      	lsls	r3, r3, #1
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4413      	add	r3, r2
 8005bde:	ed5f 6aa6 	vldr	s13, [pc, #-664]	@ 8005948 <mpu6500_read+0x20c>
 8005be2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005be6:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                                /* set accel y */
 8005bea:	8bfa      	ldrh	r2, [r7, #30]
 8005bec:	4613      	mov	r3, r2
 8005bee:	005b      	lsls	r3, r3, #1
 8005bf0:	4413      	add	r3, r2
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005bfe:	ee07 3a90 	vmov	s15, r3
 8005c02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c06:	8bfa      	ldrh	r2, [r7, #30]
 8005c08:	4613      	mov	r3, r2
 8005c0a:	005b      	lsls	r3, r3, #1
 8005c0c:	4413      	add	r3, r2
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	461a      	mov	r2, r3
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	ed5f 6ab4 	vldr	s13, [pc, #-720]	@ 8005948 <mpu6500_read+0x20c>
 8005c1a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c1e:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                                /* set accel z */
 8005c22:	8bfa      	ldrh	r2, [r7, #30]
 8005c24:	4613      	mov	r3, r2
 8005c26:	005b      	lsls	r3, r3, #1
 8005c28:	4413      	add	r3, r2
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	4413      	add	r3, r2
 8005c32:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005c36:	ee07 3a90 	vmov	s15, r3
 8005c3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c3e:	8bfa      	ldrh	r2, [r7, #30]
 8005c40:	4613      	mov	r3, r2
 8005c42:	005b      	lsls	r3, r3, #1
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	461a      	mov	r2, r3
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	ed5f 6ac2 	vldr	s13, [pc, #-776]	@ 8005948 <mpu6500_read+0x20c>
 8005c52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c56:	edc3 7a02 	vstr	s15, [r3, #8]
 8005c5a:	e0ab      	b.n	8005db4 <mpu6500_read+0x678>
            }
            else if (accel_conf == 2)                                                              /* ±8g */
 8005c5c:	7e3b      	ldrb	r3, [r7, #24]
 8005c5e:	2b02      	cmp	r3, #2
 8005c60:	d154      	bne.n	8005d0c <mpu6500_read+0x5d0>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                                /* set accel x */
 8005c62:	8bfa      	ldrh	r2, [r7, #30]
 8005c64:	4613      	mov	r3, r2
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	4413      	add	r3, r2
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	4413      	add	r3, r2
 8005c72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c76:	ee07 3a90 	vmov	s15, r3
 8005c7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c7e:	8bfa      	ldrh	r2, [r7, #30]
 8005c80:	4613      	mov	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	4413      	add	r3, r2
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	461a      	mov	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8005fc4 <mpu6500_read+0x888>
 8005c92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c96:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                                /* set accel y */
 8005c9a:	8bfa      	ldrh	r2, [r7, #30]
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	4413      	add	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	4413      	add	r3, r2
 8005caa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005cae:	ee07 3a90 	vmov	s15, r3
 8005cb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cb6:	8bfa      	ldrh	r2, [r7, #30]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	005b      	lsls	r3, r3, #1
 8005cbc:	4413      	add	r3, r2
 8005cbe:	009b      	lsls	r3, r3, #2
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8005fc4 <mpu6500_read+0x888>
 8005cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cce:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                                /* set accel z */
 8005cd2:	8bfa      	ldrh	r2, [r7, #30]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	4413      	add	r3, r2
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	461a      	mov	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ce6:	ee07 3a90 	vmov	s15, r3
 8005cea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cee:	8bfa      	ldrh	r2, [r7, #30]
 8005cf0:	4613      	mov	r3, r2
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	4413      	add	r3, r2
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8005fc4 <mpu6500_read+0x888>
 8005d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d06:	edc3 7a02 	vstr	s15, [r3, #8]
 8005d0a:	e053      	b.n	8005db4 <mpu6500_read+0x678>
            }
            else                                                                                   /* ±16g */
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                                /* set accel x */
 8005d0c:	8bfa      	ldrh	r2, [r7, #30]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	005b      	lsls	r3, r3, #1
 8005d12:	4413      	add	r3, r2
 8005d14:	005b      	lsls	r3, r3, #1
 8005d16:	461a      	mov	r2, r3
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d20:	ee07 3a90 	vmov	s15, r3
 8005d24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d28:	8bfa      	ldrh	r2, [r7, #30]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	005b      	lsls	r3, r3, #1
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	461a      	mov	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	4413      	add	r3, r2
 8005d38:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8005fc8 <mpu6500_read+0x88c>
 8005d3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d40:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                                /* set accel y */
 8005d44:	8bfa      	ldrh	r2, [r7, #30]
 8005d46:	4613      	mov	r3, r2
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	4413      	add	r3, r2
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	461a      	mov	r2, r3
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4413      	add	r3, r2
 8005d54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d60:	8bfa      	ldrh	r2, [r7, #30]
 8005d62:	4613      	mov	r3, r2
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	4413      	add	r3, r2
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	4413      	add	r3, r2
 8005d70:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8005fc8 <mpu6500_read+0x88c>
 8005d74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d78:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                                /* set accel z */
 8005d7c:	8bfa      	ldrh	r2, [r7, #30]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	005b      	lsls	r3, r3, #1
 8005d82:	4413      	add	r3, r2
 8005d84:	005b      	lsls	r3, r3, #1
 8005d86:	461a      	mov	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005d90:	ee07 3a90 	vmov	s15, r3
 8005d94:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d98:	8bfa      	ldrh	r2, [r7, #30]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	005b      	lsls	r3, r3, #1
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	461a      	mov	r2, r3
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	4413      	add	r3, r2
 8005da8:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8005fc8 <mpu6500_read+0x88c>
 8005dac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005db0:	edc3 7a02 	vstr	s15, [r3, #8]
            }
            
            if (gyro_conf == 0)                                                                    /* ±250dps */
 8005db4:	7dfb      	ldrb	r3, [r7, #23]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d154      	bne.n	8005e64 <mpu6500_read+0x728>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                                 /* set gyro x */
 8005dba:	8bfa      	ldrh	r2, [r7, #30]
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	4413      	add	r3, r2
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	4413      	add	r3, r2
 8005dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dce:	ee07 3a90 	vmov	s15, r3
 8005dd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005dd6:	8bfa      	ldrh	r2, [r7, #30]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	005b      	lsls	r3, r3, #1
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	461a      	mov	r2, r3
 8005de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de4:	4413      	add	r3, r2
 8005de6:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8005fcc <mpu6500_read+0x890>
 8005dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dee:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                                 /* set gyro y */
 8005df2:	8bfa      	ldrh	r2, [r7, #30]
 8005df4:	4613      	mov	r3, r2
 8005df6:	005b      	lsls	r3, r3, #1
 8005df8:	4413      	add	r3, r2
 8005dfa:	005b      	lsls	r3, r3, #1
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	4413      	add	r3, r2
 8005e02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e06:	ee07 3a90 	vmov	s15, r3
 8005e0a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e0e:	8bfa      	ldrh	r2, [r7, #30]
 8005e10:	4613      	mov	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	461a      	mov	r2, r3
 8005e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1c:	4413      	add	r3, r2
 8005e1e:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8005fcc <mpu6500_read+0x890>
 8005e22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e26:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                                 /* set gyro z */
 8005e2a:	8bfa      	ldrh	r2, [r7, #30]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	005b      	lsls	r3, r3, #1
 8005e30:	4413      	add	r3, r2
 8005e32:	005b      	lsls	r3, r3, #1
 8005e34:	461a      	mov	r2, r3
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	4413      	add	r3, r2
 8005e3a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005e3e:	ee07 3a90 	vmov	s15, r3
 8005e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e46:	8bfa      	ldrh	r2, [r7, #30]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	4413      	add	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	461a      	mov	r2, r3
 8005e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e54:	4413      	add	r3, r2
 8005e56:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8005fcc <mpu6500_read+0x890>
 8005e5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e5e:	edc3 7a02 	vstr	s15, [r3, #8]
 8005e62:	e10f      	b.n	8006084 <mpu6500_read+0x948>
            }
            else if (gyro_conf == 1)                                                               /* ±500dps */
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d154      	bne.n	8005f14 <mpu6500_read+0x7d8>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                                  /* set gyro x */
 8005e6a:	8bfa      	ldrh	r2, [r7, #30]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	005b      	lsls	r3, r3, #1
 8005e70:	4413      	add	r3, r2
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	461a      	mov	r2, r3
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	4413      	add	r3, r2
 8005e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e86:	8bfa      	ldrh	r2, [r7, #30]
 8005e88:	4613      	mov	r3, r2
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	461a      	mov	r2, r3
 8005e92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e94:	4413      	add	r3, r2
 8005e96:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8005fd0 <mpu6500_read+0x894>
 8005e9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e9e:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                                  /* set gyro y */
 8005ea2:	8bfa      	ldrh	r2, [r7, #30]
 8005ea4:	4613      	mov	r3, r2
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	4413      	add	r3, r2
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	461a      	mov	r2, r3
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ebe:	8bfa      	ldrh	r2, [r7, #30]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	005b      	lsls	r3, r3, #1
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	461a      	mov	r2, r3
 8005eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ecc:	4413      	add	r3, r2
 8005ece:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8005fd0 <mpu6500_read+0x894>
 8005ed2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ed6:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                                  /* set gyro z */
 8005eda:	8bfa      	ldrh	r2, [r7, #30]
 8005edc:	4613      	mov	r3, r2
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	4413      	add	r3, r2
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	4413      	add	r3, r2
 8005eea:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005eee:	ee07 3a90 	vmov	s15, r3
 8005ef2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ef6:	8bfa      	ldrh	r2, [r7, #30]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	461a      	mov	r2, r3
 8005f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f04:	4413      	add	r3, r2
 8005f06:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8005fd0 <mpu6500_read+0x894>
 8005f0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f0e:	edc3 7a02 	vstr	s15, [r3, #8]
 8005f12:	e0b7      	b.n	8006084 <mpu6500_read+0x948>
            }
            else if (gyro_conf == 2)                                                               /* ±1000dps */
 8005f14:	7dfb      	ldrb	r3, [r7, #23]
 8005f16:	2b02      	cmp	r3, #2
 8005f18:	d160      	bne.n	8005fdc <mpu6500_read+0x8a0>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                                  /* set gyro x */
 8005f1a:	8bfa      	ldrh	r2, [r7, #30]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	4413      	add	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	461a      	mov	r2, r3
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f2e:	ee07 3a90 	vmov	s15, r3
 8005f32:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f36:	8bfa      	ldrh	r2, [r7, #30]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	005b      	lsls	r3, r3, #1
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	461a      	mov	r2, r3
 8005f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f44:	4413      	add	r3, r2
 8005f46:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8005fd4 <mpu6500_read+0x898>
 8005f4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f4e:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                                  /* set gyro y */
 8005f52:	8bfa      	ldrh	r2, [r7, #30]
 8005f54:	4613      	mov	r3, r2
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	4413      	add	r3, r2
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	4413      	add	r3, r2
 8005f62:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f66:	ee07 3a90 	vmov	s15, r3
 8005f6a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f6e:	8bfa      	ldrh	r2, [r7, #30]
 8005f70:	4613      	mov	r3, r2
 8005f72:	005b      	lsls	r3, r3, #1
 8005f74:	4413      	add	r3, r2
 8005f76:	009b      	lsls	r3, r3, #2
 8005f78:	461a      	mov	r2, r3
 8005f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7c:	4413      	add	r3, r2
 8005f7e:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8005fd4 <mpu6500_read+0x898>
 8005f82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f86:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                                  /* set gyro z */
 8005f8a:	8bfa      	ldrh	r2, [r7, #30]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	4413      	add	r3, r2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	461a      	mov	r2, r3
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005f9e:	ee07 3a90 	vmov	s15, r3
 8005fa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fa6:	8bfa      	ldrh	r2, [r7, #30]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	005b      	lsls	r3, r3, #1
 8005fac:	4413      	add	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb4:	4413      	add	r3, r2
 8005fb6:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8005fd4 <mpu6500_read+0x898>
 8005fba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fbe:	edc3 7a02 	vstr	s15, [r3, #8]
 8005fc2:	e05f      	b.n	8006084 <mpu6500_read+0x948>
 8005fc4:	45800000 	.word	0x45800000
 8005fc8:	45000000 	.word	0x45000000
 8005fcc:	43030000 	.word	0x43030000
 8005fd0:	42830000 	.word	0x42830000
 8005fd4:	42033333 	.word	0x42033333
 8005fd8:	41833333 	.word	0x41833333
            }
            else                                                                                   /* ±2000dps */
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                                  /* set gyro x */
 8005fdc:	8bfa      	ldrh	r2, [r7, #30]
 8005fde:	4613      	mov	r3, r2
 8005fe0:	005b      	lsls	r3, r3, #1
 8005fe2:	4413      	add	r3, r2
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	4413      	add	r3, r2
 8005fec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005ff0:	ee07 3a90 	vmov	s15, r3
 8005ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ff8:	8bfa      	ldrh	r2, [r7, #30]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	005b      	lsls	r3, r3, #1
 8005ffe:	4413      	add	r3, r2
 8006000:	009b      	lsls	r3, r3, #2
 8006002:	461a      	mov	r2, r3
 8006004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006006:	4413      	add	r3, r2
 8006008:	ed5f 6a0d 	vldr	s13, [pc, #-52]	@ 8005fd8 <mpu6500_read+0x89c>
 800600c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006010:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                                  /* set gyro y */
 8006014:	8bfa      	ldrh	r2, [r7, #30]
 8006016:	4613      	mov	r3, r2
 8006018:	005b      	lsls	r3, r3, #1
 800601a:	4413      	add	r3, r2
 800601c:	005b      	lsls	r3, r3, #1
 800601e:	461a      	mov	r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	4413      	add	r3, r2
 8006024:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006028:	ee07 3a90 	vmov	s15, r3
 800602c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006030:	8bfa      	ldrh	r2, [r7, #30]
 8006032:	4613      	mov	r3, r2
 8006034:	005b      	lsls	r3, r3, #1
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	461a      	mov	r2, r3
 800603c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603e:	4413      	add	r3, r2
 8006040:	ed5f 6a1b 	vldr	s13, [pc, #-108]	@ 8005fd8 <mpu6500_read+0x89c>
 8006044:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006048:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                                  /* set gyro z */
 800604c:	8bfa      	ldrh	r2, [r7, #30]
 800604e:	4613      	mov	r3, r2
 8006050:	005b      	lsls	r3, r3, #1
 8006052:	4413      	add	r3, r2
 8006054:	005b      	lsls	r3, r3, #1
 8006056:	461a      	mov	r2, r3
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	4413      	add	r3, r2
 800605c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006068:	8bfa      	ldrh	r2, [r7, #30]
 800606a:	4613      	mov	r3, r2
 800606c:	005b      	lsls	r3, r3, #1
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	461a      	mov	r2, r3
 8006074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006076:	4413      	add	r3, r2
 8006078:	ed5f 6a29 	vldr	s13, [pc, #-164]	@ 8005fd8 <mpu6500_read+0x89c>
 800607c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006080:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 8006084:	8bfb      	ldrh	r3, [r7, #30]
 8006086:	3301      	adds	r3, #1
 8006088:	83fb      	strh	r3, [r7, #30]
 800608a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800608c:	881b      	ldrh	r3, [r3, #0]
 800608e:	8bfa      	ldrh	r2, [r7, #30]
 8006090:	429a      	cmp	r2, r3
 8006092:	f4ff ac5b 	bcc.w	800594c <mpu6500_read+0x210>
            }
        }
        
        return 0;                                                                                  /* success return 0 */
 8006096:	2300      	movs	r3, #0
 8006098:	e1e5      	b.n	8006466 <mpu6500_read+0xd2a>
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 800609a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800609c:	2201      	movs	r2, #1
 800609e:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_XOUT_H, handle->buf, 14);                   /* read data */
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80060a6:	230e      	movs	r3, #14
 80060a8:	213b      	movs	r1, #59	@ 0x3b
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f7ff f928 	bl	8005300 <a_mpu6500_read>
 80060b0:	4603      	mov	r3, r0
 80060b2:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80060b4:	7f7b      	ldrb	r3, [r7, #29]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d005      	beq.n	80060c6 <mpu6500_read+0x98a>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060be:	48b4      	ldr	r0, [pc, #720]	@ (8006390 <mpu6500_read+0xc54>)
 80060c0:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 80060c2:	2301      	movs	r3, #1
 80060c4:	e1cf      	b.n	8006466 <mpu6500_read+0xd2a>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060cc:	b21b      	sxth	r3, r3
 80060ce:	021b      	lsls	r3, r3, #8
 80060d0:	b21a      	sxth	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060d8:	b21b      	sxth	r3, r3
 80060da:	4313      	orrs	r3, r2
 80060dc:	b21a      	sxth	r2, r3
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80060e8:	b21b      	sxth	r3, r3
 80060ea:	021b      	lsls	r3, r3, #8
 80060ec:	b21a      	sxth	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80060f4:	b21b      	sxth	r3, r3
 80060f6:	4313      	orrs	r3, r2
 80060f8:	b21a      	sxth	r2, r3
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006104:	b21b      	sxth	r3, r3
 8006106:	021b      	lsls	r3, r3, #8
 8006108:	b21a      	sxth	r2, r3
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006110:	b21b      	sxth	r3, r3
 8006112:	4313      	orrs	r3, r2
 8006114:	b21a      	sxth	r2, r3
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8006120:	b21b      	sxth	r3, r3
 8006122:	021b      	lsls	r3, r3, #8
 8006124:	b21a      	sxth	r2, r3
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 800612c:	b21b      	sxth	r3, r3
 800612e:	4313      	orrs	r3, r2
 8006130:	b21a      	sxth	r2, r3
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 800613c:	b21b      	sxth	r3, r3
 800613e:	021b      	lsls	r3, r3, #8
 8006140:	b21a      	sxth	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8006148:	b21b      	sxth	r3, r3
 800614a:	4313      	orrs	r3, r2
 800614c:	b21a      	sxth	r2, r3
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006158:	b21b      	sxth	r3, r3
 800615a:	021b      	lsls	r3, r3, #8
 800615c:	b21a      	sxth	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006164:	b21b      	sxth	r3, r3
 8006166:	4313      	orrs	r3, r2
 8006168:	b21a      	sxth	r2, r3
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	809a      	strh	r2, [r3, #4]
        
        if (accel_conf == 0)                                                                       /* ±2g */
 800616e:	7e3b      	ldrb	r3, [r7, #24]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d12a      	bne.n	80061ca <mpu6500_read+0xa8e>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800617a:	ee07 3a90 	vmov	s15, r3
 800617e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006182:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8006394 <mpu6500_read+0xc58>
 8006186:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 8006190:	68bb      	ldr	r3, [r7, #8]
 8006192:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006196:	ee07 3a90 	vmov	s15, r3
 800619a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800619e:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8006394 <mpu6500_read+0xc58>
 80061a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80061b2:	ee07 3a90 	vmov	s15, r3
 80061b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061ba:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8006394 <mpu6500_read+0xc58>
 80061be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	edc3 7a02 	vstr	s15, [r3, #8]
 80061c8:	e085      	b.n	80062d6 <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 80061ca:	7e3b      	ldrb	r3, [r7, #24]
 80061cc:	2b01      	cmp	r3, #1
 80061ce:	d12a      	bne.n	8006226 <mpu6500_read+0xaea>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80061d6:	ee07 3a90 	vmov	s15, r3
 80061da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061de:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006398 <mpu6500_read+0xc5c>
 80061e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80061f2:	ee07 3a90 	vmov	s15, r3
 80061f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80061fa:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8006398 <mpu6500_read+0xc5c>
 80061fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006216:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8006398 <mpu6500_read+0xc5c>
 800621a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	edc3 7a02 	vstr	s15, [r3, #8]
 8006224:	e057      	b.n	80062d6 <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 8006226:	7e3b      	ldrb	r3, [r7, #24]
 8006228:	2b02      	cmp	r3, #2
 800622a:	d12a      	bne.n	8006282 <mpu6500_read+0xb46>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006232:	ee07 3a90 	vmov	s15, r3
 8006236:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800623a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800639c <mpu6500_read+0xc60>
 800623e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800624e:	ee07 3a90 	vmov	s15, r3
 8006252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006256:	eddf 6a51 	vldr	s13, [pc, #324]	@ 800639c <mpu6500_read+0xc60>
 800625a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800626a:	ee07 3a90 	vmov	s15, r3
 800626e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006272:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 800639c <mpu6500_read+0xc60>
 8006276:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	edc3 7a02 	vstr	s15, [r3, #8]
 8006280:	e029      	b.n	80062d6 <mpu6500_read+0xb9a>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006288:	ee07 3a90 	vmov	s15, r3
 800628c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006290:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80063a0 <mpu6500_read+0xc64>
 8006294:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80062a4:	ee07 3a90 	vmov	s15, r3
 80062a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ac:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 80063a0 <mpu6500_read+0xc64>
 80062b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062c0:	ee07 3a90 	vmov	s15, r3
 80062c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062c8:	eddf 6a35 	vldr	s13, [pc, #212]	@ 80063a0 <mpu6500_read+0xc64>
 80062cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        if (gyro_conf == 0)                                                                        /* ±250dps */
 80062d6:	7dfb      	ldrb	r3, [r7, #23]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d12a      	bne.n	8006332 <mpu6500_read+0xbf6>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 80062dc:	683b      	ldr	r3, [r7, #0]
 80062de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ea:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 80063a4 <mpu6500_read+0xc68>
 80062ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006306:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80063a4 <mpu6500_read+0xc68>
 800630a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006310:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800631a:	ee07 3a90 	vmov	s15, r3
 800631e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006322:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80063a4 <mpu6500_read+0xc68>
 8006326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800632a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800632c:	edc3 7a02 	vstr	s15, [r3, #8]
 8006330:	e098      	b.n	8006464 <mpu6500_read+0xd28>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 8006332:	7dfb      	ldrb	r3, [r7, #23]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d13d      	bne.n	80063b4 <mpu6500_read+0xc78>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006346:	eddf 6a18 	vldr	s13, [pc, #96]	@ 80063a8 <mpu6500_read+0xc6c>
 800634a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800634e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006350:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006362:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80063a8 <mpu6500_read+0xc6c>
 8006366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800636a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636c:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006376:	ee07 3a90 	vmov	s15, r3
 800637a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800637e:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80063a8 <mpu6500_read+0xc6c>
 8006382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006388:	edc3 7a02 	vstr	s15, [r3, #8]
 800638c:	e06a      	b.n	8006464 <mpu6500_read+0xd28>
 800638e:	bf00      	nop
 8006390:	0801ecf4 	.word	0x0801ecf4
 8006394:	46800000 	.word	0x46800000
 8006398:	46000000 	.word	0x46000000
 800639c:	45800000 	.word	0x45800000
 80063a0:	45000000 	.word	0x45000000
 80063a4:	43030000 	.word	0x43030000
 80063a8:	42830000 	.word	0x42830000
 80063ac:	42033333 	.word	0x42033333
 80063b0:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d12a      	bne.n	8006410 <mpu6500_read+0xcd4>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063c0:	ee07 3a90 	vmov	s15, r3
 80063c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063c8:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 80063ac <mpu6500_read+0xc70>
 80063cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d2:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80063dc:	ee07 3a90 	vmov	s15, r3
 80063e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063e4:	ed5f 6a0f 	vldr	s13, [pc, #-60]	@ 80063ac <mpu6500_read+0xc70>
 80063e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ee:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80063f8:	ee07 3a90 	vmov	s15, r3
 80063fc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006400:	ed5f 6a16 	vldr	s13, [pc, #-88]	@ 80063ac <mpu6500_read+0xc70>
 8006404:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800640a:	edc3 7a02 	vstr	s15, [r3, #8]
 800640e:	e029      	b.n	8006464 <mpu6500_read+0xd28>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006416:	ee07 3a90 	vmov	s15, r3
 800641a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800641e:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 80063b0 <mpu6500_read+0xc74>
 8006422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006432:	ee07 3a90 	vmov	s15, r3
 8006436:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800643a:	ed5f 6a23 	vldr	s13, [pc, #-140]	@ 80063b0 <mpu6500_read+0xc74>
 800643e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006444:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006456:	ed5f 6a2a 	vldr	s13, [pc, #-168]	@ 80063b0 <mpu6500_read+0xc74>
 800645a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800645e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006460:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        return 0;                                                                                  /* success return 0 */
 8006464:	2300      	movs	r3, #0
    }
}
 8006466:	4618      	mov	r0, r3
 8006468:	3720      	adds	r7, #32
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop

08006470 <mpu6500_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                               /* check handle */
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <mpu6500_set_fifo+0x16>
    {
        return 2;                                                                     /* return error */
 8006482:	2302      	movs	r3, #2
 8006484:	e03a      	b.n	80064fc <mpu6500_set_fifo+0x8c>
    }
    if (handle->inited != 1)                                                          /* check handle initialization */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800648c:	2b01      	cmp	r3, #1
 800648e:	d001      	beq.n	8006494 <mpu6500_set_fifo+0x24>
    {
        return 3;                                                                     /* return error */
 8006490:	2303      	movs	r3, #3
 8006492:	e033      	b.n	80064fc <mpu6500_set_fifo+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8006494:	f107 020e 	add.w	r2, r7, #14
 8006498:	2301      	movs	r3, #1
 800649a:	216a      	movs	r1, #106	@ 0x6a
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7fe ff2f 	bl	8005300 <a_mpu6500_read>
 80064a2:	4603      	mov	r3, r0
 80064a4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 80064a6:	7bfb      	ldrb	r3, [r7, #15]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <mpu6500_set_fifo+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                     /* read user ctrl failed */
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b0:	4814      	ldr	r0, [pc, #80]	@ (8006504 <mpu6500_set_fifo+0x94>)
 80064b2:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 80064b4:	2301      	movs	r3, #1
 80064b6:	e021      	b.n	80064fc <mpu6500_set_fifo+0x8c>
    }
    prev &= ~(1 << 6);                                                                /* clear config */
 80064b8:	7bbb      	ldrb	r3, [r7, #14]
 80064ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                              /* set config */
 80064c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80064c6:	019b      	lsls	r3, r3, #6
 80064c8:	b25a      	sxtb	r2, r3
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	b25b      	sxtb	r3, r3
 80064ce:	4313      	orrs	r3, r2
 80064d0:	b25b      	sxtb	r3, r3
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80064d6:	f107 020e 	add.w	r2, r7, #14
 80064da:	2301      	movs	r3, #1
 80064dc:	216a      	movs	r1, #106	@ 0x6a
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fe ff3f 	bl	8005362 <a_mpu6500_write>
 80064e4:	4603      	mov	r3, r0
 80064e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 80064e8:	7bfb      	ldrb	r3, [r7, #15]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d005      	beq.n	80064fa <mpu6500_set_fifo+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                    /* write user ctrl failed */
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f2:	4805      	ldr	r0, [pc, #20]	@ (8006508 <mpu6500_set_fifo+0x98>)
 80064f4:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 80064f6:	2301      	movs	r3, #1
 80064f8:	e000      	b.n	80064fc <mpu6500_set_fifo+0x8c>
    }
    
    return 0;                                                                         /* success return 0 */
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3710      	adds	r7, #16
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	0801ed94 	.word	0x0801ed94
 8006508:	0801edb8 	.word	0x0801edb8

0800650c <mpu6500_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_master(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <mpu6500_set_iic_master+0x16>
    {
        return 2;                                                                    /* return error */
 800651e:	2302      	movs	r3, #2
 8006520:	e03a      	b.n	8006598 <mpu6500_set_iic_master+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006528:	2b01      	cmp	r3, #1
 800652a:	d001      	beq.n	8006530 <mpu6500_set_iic_master+0x24>
    {
        return 3;                                                                    /* return error */
 800652c:	2303      	movs	r3, #3
 800652e:	e033      	b.n	8006598 <mpu6500_set_iic_master+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8006530:	f107 020e 	add.w	r2, r7, #14
 8006534:	2301      	movs	r3, #1
 8006536:	216a      	movs	r1, #106	@ 0x6a
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7fe fee1 	bl	8005300 <a_mpu6500_read>
 800653e:	4603      	mov	r3, r0
 8006540:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006542:	7bfb      	ldrb	r3, [r7, #15]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <mpu6500_set_iic_master+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800654c:	4814      	ldr	r0, [pc, #80]	@ (80065a0 <mpu6500_set_iic_master+0x94>)
 800654e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006550:	2301      	movs	r3, #1
 8006552:	e021      	b.n	8006598 <mpu6500_set_iic_master+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8006554:	7bbb      	ldrb	r3, [r7, #14]
 8006556:	f023 0320 	bic.w	r3, r3, #32
 800655a:	b2db      	uxtb	r3, r3
 800655c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 800655e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006562:	015b      	lsls	r3, r3, #5
 8006564:	b25a      	sxtb	r2, r3
 8006566:	7bbb      	ldrb	r3, [r7, #14]
 8006568:	b25b      	sxtb	r3, r3
 800656a:	4313      	orrs	r3, r2
 800656c:	b25b      	sxtb	r3, r3
 800656e:	b2db      	uxtb	r3, r3
 8006570:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8006572:	f107 020e 	add.w	r2, r7, #14
 8006576:	2301      	movs	r3, #1
 8006578:	216a      	movs	r1, #106	@ 0x6a
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f7fe fef1 	bl	8005362 <a_mpu6500_write>
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d005      	beq.n	8006596 <mpu6500_set_iic_master+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800658e:	4805      	ldr	r0, [pc, #20]	@ (80065a4 <mpu6500_set_iic_master+0x98>)
 8006590:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006592:	2301      	movs	r3, #1
 8006594:	e000      	b.n	8006598 <mpu6500_set_iic_master+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	0801ed94 	.word	0x0801ed94
 80065a4:	0801edb8 	.word	0x0801edb8

080065a8 <mpu6500_set_disable_iic_slave>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_disable_iic_slave(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d101      	bne.n	80065be <mpu6500_set_disable_iic_slave+0x16>
    {
        return 2;                                                                    /* return error */
 80065ba:	2302      	movs	r3, #2
 80065bc:	e03a      	b.n	8006634 <mpu6500_set_disable_iic_slave+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d001      	beq.n	80065cc <mpu6500_set_disable_iic_slave+0x24>
    {
        return 3;                                                                    /* return error */
 80065c8:	2303      	movs	r3, #3
 80065ca:	e033      	b.n	8006634 <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 80065cc:	f107 020e 	add.w	r2, r7, #14
 80065d0:	2301      	movs	r3, #1
 80065d2:	216a      	movs	r1, #106	@ 0x6a
 80065d4:	6878      	ldr	r0, [r7, #4]
 80065d6:	f7fe fe93 	bl	8005300 <a_mpu6500_read>
 80065da:	4603      	mov	r3, r0
 80065dc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80065de:	7bfb      	ldrb	r3, [r7, #15]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <mpu6500_set_disable_iic_slave+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065e8:	4814      	ldr	r0, [pc, #80]	@ (800663c <mpu6500_set_disable_iic_slave+0x94>)
 80065ea:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80065ec:	2301      	movs	r3, #1
 80065ee:	e021      	b.n	8006634 <mpu6500_set_disable_iic_slave+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
 80065f2:	f023 0310 	bic.w	r3, r3, #16
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 80065fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	b25a      	sxtb	r2, r3
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	b25b      	sxtb	r3, r3
 8006606:	4313      	orrs	r3, r2
 8006608:	b25b      	sxtb	r3, r3
 800660a:	b2db      	uxtb	r3, r3
 800660c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 800660e:	f107 020e 	add.w	r2, r7, #14
 8006612:	2301      	movs	r3, #1
 8006614:	216a      	movs	r1, #106	@ 0x6a
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fe fea3 	bl	8005362 <a_mpu6500_write>
 800661c:	4603      	mov	r3, r0
 800661e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006620:	7bfb      	ldrb	r3, [r7, #15]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d005      	beq.n	8006632 <mpu6500_set_disable_iic_slave+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662a:	4805      	ldr	r0, [pc, #20]	@ (8006640 <mpu6500_set_disable_iic_slave+0x98>)
 800662c:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800662e:	2301      	movs	r3, #1
 8006630:	e000      	b.n	8006634 <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8006632:	2300      	movs	r3, #0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	0801ed94 	.word	0x0801ed94
 8006640:	0801edb8 	.word	0x0801edb8

08006644 <mpu6500_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_clock_source(mpu6500_handle_t *handle, mpu6500_clock_source_t clock_source)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	460b      	mov	r3, r1
 800664e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <mpu6500_set_clock_source+0x16>
    {
        return 2;                                                                    /* return error */
 8006656:	2302      	movs	r3, #2
 8006658:	e035      	b.n	80066c6 <mpu6500_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006660:	2b01      	cmp	r3, #1
 8006662:	d001      	beq.n	8006668 <mpu6500_set_clock_source+0x24>
    {
        return 3;                                                                    /* return error */
 8006664:	2303      	movs	r3, #3
 8006666:	e02e      	b.n	80066c6 <mpu6500_set_clock_source+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006668:	f107 020e 	add.w	r2, r7, #14
 800666c:	2301      	movs	r3, #1
 800666e:	216b      	movs	r1, #107	@ 0x6b
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7fe fe45 	bl	8005300 <a_mpu6500_read>
 8006676:	4603      	mov	r3, r0
 8006678:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d005      	beq.n	800668c <mpu6500_set_clock_source+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006684:	4812      	ldr	r0, [pc, #72]	@ (80066d0 <mpu6500_set_clock_source+0x8c>)
 8006686:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006688:	2301      	movs	r3, #1
 800668a:	e01c      	b.n	80066c6 <mpu6500_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                             /* clear config */
 800668c:	7bbb      	ldrb	r3, [r7, #14]
 800668e:	f023 0307 	bic.w	r3, r3, #7
 8006692:	b2db      	uxtb	r3, r3
 8006694:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                       /* set config */
 8006696:	7bba      	ldrb	r2, [r7, #14]
 8006698:	78fb      	ldrb	r3, [r7, #3]
 800669a:	4313      	orrs	r3, r2
 800669c:	b2db      	uxtb	r3, r3
 800669e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80066a0:	f107 020e 	add.w	r2, r7, #14
 80066a4:	2301      	movs	r3, #1
 80066a6:	216b      	movs	r1, #107	@ 0x6b
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f7fe fe5a 	bl	8005362 <a_mpu6500_write>
 80066ae:	4603      	mov	r3, r0
 80066b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80066b2:	7bfb      	ldrb	r3, [r7, #15]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d005      	beq.n	80066c4 <mpu6500_set_clock_source+0x80>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066bc:	4805      	ldr	r0, [pc, #20]	@ (80066d4 <mpu6500_set_clock_source+0x90>)
 80066be:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80066c0:	2301      	movs	r3, #1
 80066c2:	e000      	b.n	80066c6 <mpu6500_set_clock_source+0x82>
    }
    
    return 0;                                                                        /* success return 0 */
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	0801f080 	.word	0x0801f080
 80066d4:	0801f0ac 	.word	0x0801f0ac

080066d8 <mpu6500_set_ptat>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_ptat(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
 80066e0:	460b      	mov	r3, r1
 80066e2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d101      	bne.n	80066ee <mpu6500_set_ptat+0x16>
    {
        return 2;                                                                    /* return error */
 80066ea:	2302      	movs	r3, #2
 80066ec:	e03c      	b.n	8006768 <mpu6500_set_ptat+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d001      	beq.n	80066fc <mpu6500_set_ptat+0x24>
    {
        return 3;                                                                    /* return error */
 80066f8:	2303      	movs	r3, #3
 80066fa:	e035      	b.n	8006768 <mpu6500_set_ptat+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80066fc:	f107 020e 	add.w	r2, r7, #14
 8006700:	2301      	movs	r3, #1
 8006702:	216b      	movs	r1, #107	@ 0x6b
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7fe fdfb 	bl	8005300 <a_mpu6500_read>
 800670a:	4603      	mov	r3, r0
 800670c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800670e:	7bfb      	ldrb	r3, [r7, #15]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d005      	beq.n	8006720 <mpu6500_set_ptat+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006718:	4815      	ldr	r0, [pc, #84]	@ (8006770 <mpu6500_set_ptat+0x98>)
 800671a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800671c:	2301      	movs	r3, #1
 800671e:	e023      	b.n	8006768 <mpu6500_set_ptat+0x90>
    }
    prev &= ~(1 << 3);                                                               /* clear config */
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	f023 0308 	bic.w	r3, r3, #8
 8006726:	b2db      	uxtb	r3, r3
 8006728:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                          /* set config */
 800672a:	78fb      	ldrb	r3, [r7, #3]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <mpu6500_set_ptat+0x5c>
 8006730:	2208      	movs	r2, #8
 8006732:	e000      	b.n	8006736 <mpu6500_set_ptat+0x5e>
 8006734:	2200      	movs	r2, #0
 8006736:	7bbb      	ldrb	r3, [r7, #14]
 8006738:	b25b      	sxtb	r3, r3
 800673a:	4313      	orrs	r3, r2
 800673c:	b25b      	sxtb	r3, r3
 800673e:	b2db      	uxtb	r3, r3
 8006740:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006742:	f107 020e 	add.w	r2, r7, #14
 8006746:	2301      	movs	r3, #1
 8006748:	216b      	movs	r1, #107	@ 0x6b
 800674a:	6878      	ldr	r0, [r7, #4]
 800674c:	f7fe fe09 	bl	8005362 <a_mpu6500_write>
 8006750:	4603      	mov	r3, r0
 8006752:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006754:	7bfb      	ldrb	r3, [r7, #15]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d005      	beq.n	8006766 <mpu6500_set_ptat+0x8e>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800675e:	4805      	ldr	r0, [pc, #20]	@ (8006774 <mpu6500_set_ptat+0x9c>)
 8006760:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006762:	2301      	movs	r3, #1
 8006764:	e000      	b.n	8006768 <mpu6500_set_ptat+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 8006766:	2300      	movs	r3, #0
}
 8006768:	4618      	mov	r0, r3
 800676a:	3710      	adds	r7, #16
 800676c:	46bd      	mov	sp, r7
 800676e:	bd80      	pop	{r7, pc}
 8006770:	0801f080 	.word	0x0801f080
 8006774:	0801f0ac 	.word	0x0801f0ac

08006778 <mpu6500_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_cycle_wake_up(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	460b      	mov	r3, r1
 8006782:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d101      	bne.n	800678e <mpu6500_set_cycle_wake_up+0x16>
    {
        return 2;                                                                    /* return error */
 800678a:	2302      	movs	r3, #2
 800678c:	e03a      	b.n	8006804 <mpu6500_set_cycle_wake_up+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006794:	2b01      	cmp	r3, #1
 8006796:	d001      	beq.n	800679c <mpu6500_set_cycle_wake_up+0x24>
    {
        return 3;                                                                    /* return error */
 8006798:	2303      	movs	r3, #3
 800679a:	e033      	b.n	8006804 <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 800679c:	f107 020e 	add.w	r2, r7, #14
 80067a0:	2301      	movs	r3, #1
 80067a2:	216b      	movs	r1, #107	@ 0x6b
 80067a4:	6878      	ldr	r0, [r7, #4]
 80067a6:	f7fe fdab 	bl	8005300 <a_mpu6500_read>
 80067aa:	4603      	mov	r3, r0
 80067ac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80067ae:	7bfb      	ldrb	r3, [r7, #15]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d005      	beq.n	80067c0 <mpu6500_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067b8:	4814      	ldr	r0, [pc, #80]	@ (800680c <mpu6500_set_cycle_wake_up+0x94>)
 80067ba:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80067bc:	2301      	movs	r3, #1
 80067be:	e021      	b.n	8006804 <mpu6500_set_cycle_wake_up+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 80067c0:	7bbb      	ldrb	r3, [r7, #14]
 80067c2:	f023 0320 	bic.w	r3, r3, #32
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 80067ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80067ce:	015b      	lsls	r3, r3, #5
 80067d0:	b25a      	sxtb	r2, r3
 80067d2:	7bbb      	ldrb	r3, [r7, #14]
 80067d4:	b25b      	sxtb	r3, r3
 80067d6:	4313      	orrs	r3, r2
 80067d8:	b25b      	sxtb	r3, r3
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80067de:	f107 020e 	add.w	r2, r7, #14
 80067e2:	2301      	movs	r3, #1
 80067e4:	216b      	movs	r1, #107	@ 0x6b
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fe fdbb 	bl	8005362 <a_mpu6500_write>
 80067ec:	4603      	mov	r3, r0
 80067ee:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80067f0:	7bfb      	ldrb	r3, [r7, #15]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d005      	beq.n	8006802 <mpu6500_set_cycle_wake_up+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067fa:	4805      	ldr	r0, [pc, #20]	@ (8006810 <mpu6500_set_cycle_wake_up+0x98>)
 80067fc:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	0801f080 	.word	0x0801f080
 8006810:	0801f0ac 	.word	0x0801f0ac

08006814 <mpu6500_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sleep(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <mpu6500_set_sleep+0x16>
    {
        return 2;                                                                    /* return error */
 8006826:	2302      	movs	r3, #2
 8006828:	e03a      	b.n	80068a0 <mpu6500_set_sleep+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006830:	2b01      	cmp	r3, #1
 8006832:	d001      	beq.n	8006838 <mpu6500_set_sleep+0x24>
    {
        return 3;                                                                    /* return error */
 8006834:	2303      	movs	r3, #3
 8006836:	e033      	b.n	80068a0 <mpu6500_set_sleep+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006838:	f107 020e 	add.w	r2, r7, #14
 800683c:	2301      	movs	r3, #1
 800683e:	216b      	movs	r1, #107	@ 0x6b
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f7fe fd5d 	bl	8005300 <a_mpu6500_read>
 8006846:	4603      	mov	r3, r0
 8006848:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800684a:	7bfb      	ldrb	r3, [r7, #15]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d005      	beq.n	800685c <mpu6500_set_sleep+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006854:	4814      	ldr	r0, [pc, #80]	@ (80068a8 <mpu6500_set_sleep+0x94>)
 8006856:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006858:	2301      	movs	r3, #1
 800685a:	e021      	b.n	80068a0 <mpu6500_set_sleep+0x8c>
    }
    prev &= ~(1 << 6);                                                               /* clear config */
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006862:	b2db      	uxtb	r3, r3
 8006864:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                             /* set config */
 8006866:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800686a:	019b      	lsls	r3, r3, #6
 800686c:	b25a      	sxtb	r2, r3
 800686e:	7bbb      	ldrb	r3, [r7, #14]
 8006870:	b25b      	sxtb	r3, r3
 8006872:	4313      	orrs	r3, r2
 8006874:	b25b      	sxtb	r3, r3
 8006876:	b2db      	uxtb	r3, r3
 8006878:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 800687a:	f107 020e 	add.w	r2, r7, #14
 800687e:	2301      	movs	r3, #1
 8006880:	216b      	movs	r1, #107	@ 0x6b
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f7fe fd6d 	bl	8005362 <a_mpu6500_write>
 8006888:	4603      	mov	r3, r0
 800688a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800688c:	7bfb      	ldrb	r3, [r7, #15]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <mpu6500_set_sleep+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006896:	4805      	ldr	r0, [pc, #20]	@ (80068ac <mpu6500_set_sleep+0x98>)
 8006898:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800689a:	2301      	movs	r3, #1
 800689c:	e000      	b.n	80068a0 <mpu6500_set_sleep+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	0801f080 	.word	0x0801f080
 80068ac:	0801f0ac 	.word	0x0801f0ac

080068b0 <mpu6500_set_gyro_standby>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_standby(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	460b      	mov	r3, r1
 80068ba:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <mpu6500_set_gyro_standby+0x16>
    {
        return 2;                                                                    /* return error */
 80068c2:	2302      	movs	r3, #2
 80068c4:	e03a      	b.n	800693c <mpu6500_set_gyro_standby+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068cc:	2b01      	cmp	r3, #1
 80068ce:	d001      	beq.n	80068d4 <mpu6500_set_gyro_standby+0x24>
    {
        return 3;                                                                    /* return error */
 80068d0:	2303      	movs	r3, #3
 80068d2:	e033      	b.n	800693c <mpu6500_set_gyro_standby+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80068d4:	f107 020e 	add.w	r2, r7, #14
 80068d8:	2301      	movs	r3, #1
 80068da:	216b      	movs	r1, #107	@ 0x6b
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7fe fd0f 	bl	8005300 <a_mpu6500_read>
 80068e2:	4603      	mov	r3, r0
 80068e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d005      	beq.n	80068f8 <mpu6500_set_gyro_standby+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068f0:	4814      	ldr	r0, [pc, #80]	@ (8006944 <mpu6500_set_gyro_standby+0x94>)
 80068f2:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80068f4:	2301      	movs	r3, #1
 80068f6:	e021      	b.n	800693c <mpu6500_set_gyro_standby+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 80068f8:	7bbb      	ldrb	r3, [r7, #14]
 80068fa:	f023 0310 	bic.w	r3, r3, #16
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 8006902:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	b25a      	sxtb	r2, r3
 800690a:	7bbb      	ldrb	r3, [r7, #14]
 800690c:	b25b      	sxtb	r3, r3
 800690e:	4313      	orrs	r3, r2
 8006910:	b25b      	sxtb	r3, r3
 8006912:	b2db      	uxtb	r3, r3
 8006914:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006916:	f107 020e 	add.w	r2, r7, #14
 800691a:	2301      	movs	r3, #1
 800691c:	216b      	movs	r1, #107	@ 0x6b
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f7fe fd1f 	bl	8005362 <a_mpu6500_write>
 8006924:	4603      	mov	r3, r0
 8006926:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006928:	7bfb      	ldrb	r3, [r7, #15]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <mpu6500_set_gyro_standby+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006932:	4805      	ldr	r0, [pc, #20]	@ (8006948 <mpu6500_set_gyro_standby+0x98>)
 8006934:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006936:	2301      	movs	r3, #1
 8006938:	e000      	b.n	800693c <mpu6500_set_gyro_standby+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}
 8006944:	0801f080 	.word	0x0801f080
 8006948:	0801f0ac 	.word	0x0801f0ac

0800694c <mpu6500_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_standby_mode(mpu6500_handle_t *handle, mpu6500_source_t source, mpu6500_bool_t enable)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
 8006958:	4613      	mov	r3, r2
 800695a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <mpu6500_set_standby_mode+0x1a>
    {
        return 2;                                                                    /* return error */
 8006962:	2302      	movs	r3, #2
 8006964:	e043      	b.n	80069ee <mpu6500_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800696c:	2b01      	cmp	r3, #1
 800696e:	d001      	beq.n	8006974 <mpu6500_set_standby_mode+0x28>
    {
        return 3;                                                                    /* return error */
 8006970:	2303      	movs	r3, #3
 8006972:	e03c      	b.n	80069ee <mpu6500_set_standby_mode+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 8006974:	f107 020e 	add.w	r2, r7, #14
 8006978:	2301      	movs	r3, #1
 800697a:	216c      	movs	r1, #108	@ 0x6c
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f7fe fcbf 	bl	8005300 <a_mpu6500_read>
 8006982:	4603      	mov	r3, r0
 8006984:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006986:	7bfb      	ldrb	r3, [r7, #15]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <mpu6500_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6500: read power management 2 failed.\n");           /* read power management 2 failed */
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006990:	4819      	ldr	r0, [pc, #100]	@ (80069f8 <mpu6500_set_standby_mode+0xac>)
 8006992:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006994:	2301      	movs	r3, #1
 8006996:	e02a      	b.n	80069ee <mpu6500_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                          /* clear config */
 8006998:	78fb      	ldrb	r3, [r7, #3]
 800699a:	2201      	movs	r2, #1
 800699c:	fa02 f303 	lsl.w	r3, r2, r3
 80069a0:	b25b      	sxtb	r3, r3
 80069a2:	43db      	mvns	r3, r3
 80069a4:	b25a      	sxtb	r2, r3
 80069a6:	7bbb      	ldrb	r3, [r7, #14]
 80069a8:	b25b      	sxtb	r3, r3
 80069aa:	4013      	ands	r3, r2
 80069ac:	b25b      	sxtb	r3, r3
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                        /* set config */
 80069b2:	78ba      	ldrb	r2, [r7, #2]
 80069b4:	78fb      	ldrb	r3, [r7, #3]
 80069b6:	fa02 f303 	lsl.w	r3, r2, r3
 80069ba:	b25a      	sxtb	r2, r3
 80069bc:	7bbb      	ldrb	r3, [r7, #14]
 80069be:	b25b      	sxtb	r3, r3
 80069c0:	4313      	orrs	r3, r2
 80069c2:	b25b      	sxtb	r3, r3
 80069c4:	b2db      	uxtb	r3, r3
 80069c6:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 80069c8:	f107 020e 	add.w	r2, r7, #14
 80069cc:	2301      	movs	r3, #1
 80069ce:	216c      	movs	r1, #108	@ 0x6c
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7fe fcc6 	bl	8005362 <a_mpu6500_write>
 80069d6:	4603      	mov	r3, r0
 80069d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <mpu6500_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6500: write power management 2 failed.\n");          /* write power management 2 failed */
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e4:	4805      	ldr	r0, [pc, #20]	@ (80069fc <mpu6500_set_standby_mode+0xb0>)
 80069e6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80069e8:	2301      	movs	r3, #1
 80069ea:	e000      	b.n	80069ee <mpu6500_set_standby_mode+0xa2>
    }
    
    return 0;                                                                        /* success return 0 */
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
 80069f6:	bf00      	nop
 80069f8:	0801f0d8 	.word	0x0801f0d8
 80069fc:	0801f104 	.word	0x0801f104

08006a00 <mpu6500_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sample_rate_divider(mpu6500_handle_t *handle, uint8_t d)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                              /* check handle */
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d101      	bne.n	8006a16 <mpu6500_set_sample_rate_divider+0x16>
    {
        return 2;                                                                    /* return error */
 8006a12:	2302      	movs	r3, #2
 8006a14:	e018      	b.n	8006a48 <mpu6500_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d001      	beq.n	8006a24 <mpu6500_set_sample_rate_divider+0x24>
    {
        return 3;                                                                    /* return error */
 8006a20:	2303      	movs	r3, #3
 8006a22:	e011      	b.n	8006a48 <mpu6500_set_sample_rate_divider+0x48>
    }
    
    res = a_mpu6500_write(handle, MPU6500_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 8006a24:	1cfa      	adds	r2, r7, #3
 8006a26:	2301      	movs	r3, #1
 8006a28:	2119      	movs	r1, #25
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f7fe fc99 	bl	8005362 <a_mpu6500_write>
 8006a30:	4603      	mov	r3, r0
 8006a32:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006a34:	7bfb      	ldrb	r3, [r7, #15]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d005      	beq.n	8006a46 <mpu6500_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6500: write smprt div failed.\n");                   /* write smprt div failed */
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a3e:	4804      	ldr	r0, [pc, #16]	@ (8006a50 <mpu6500_set_sample_rate_divider+0x50>)
 8006a40:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006a42:	2301      	movs	r3, #1
 8006a44:	e000      	b.n	8006a48 <mpu6500_set_sample_rate_divider+0x48>
    }
    
    return 0;                                                                        /* success return 0 */
 8006a46:	2300      	movs	r3, #0
}
 8006a48:	4618      	mov	r0, r3
 8006a4a:	3710      	adds	r7, #16
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	0801f1c4 	.word	0x0801f1c4

08006a54 <mpu6500_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_extern_sync(mpu6500_handle_t *handle, mpu6500_extern_sync_t sync)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	460b      	mov	r3, r1
 8006a5e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d101      	bne.n	8006a6a <mpu6500_set_extern_sync+0x16>
    {
        return 2;                                                                  /* return error */
 8006a66:	2302      	movs	r3, #2
 8006a68:	e03a      	b.n	8006ae0 <mpu6500_set_extern_sync+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d001      	beq.n	8006a78 <mpu6500_set_extern_sync+0x24>
    {
        return 3;                                                                  /* return error */
 8006a74:	2303      	movs	r3, #3
 8006a76:	e033      	b.n	8006ae0 <mpu6500_set_extern_sync+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8006a78:	f107 020e 	add.w	r2, r7, #14
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	211a      	movs	r1, #26
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f7fe fc3d 	bl	8005300 <a_mpu6500_read>
 8006a86:	4603      	mov	r3, r0
 8006a88:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006a8a:	7bfb      	ldrb	r3, [r7, #15]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d005      	beq.n	8006a9c <mpu6500_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a94:	4814      	ldr	r0, [pc, #80]	@ (8006ae8 <mpu6500_set_extern_sync+0x94>)
 8006a96:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e021      	b.n	8006ae0 <mpu6500_set_extern_sync+0x8c>
    }
    prev &= ~(0x7 << 3);                                                           /* clear config */
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                             /* set config */
 8006aa6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006aaa:	00db      	lsls	r3, r3, #3
 8006aac:	b25a      	sxtb	r2, r3
 8006aae:	7bbb      	ldrb	r3, [r7, #14]
 8006ab0:	b25b      	sxtb	r3, r3
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	b25b      	sxtb	r3, r3
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006aba:	f107 020e 	add.w	r2, r7, #14
 8006abe:	2301      	movs	r3, #1
 8006ac0:	211a      	movs	r1, #26
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7fe fc4d 	bl	8005362 <a_mpu6500_write>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d005      	beq.n	8006ade <mpu6500_set_extern_sync+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ad6:	4805      	ldr	r0, [pc, #20]	@ (8006aec <mpu6500_set_extern_sync+0x98>)
 8006ad8:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006ada:	2301      	movs	r3, #1
 8006adc:	e000      	b.n	8006ae0 <mpu6500_set_extern_sync+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	0801f20c 	.word	0x0801f20c
 8006aec:	0801f22c 	.word	0x0801f22c

08006af0 <mpu6500_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_pass_filter(mpu6500_handle_t *handle, mpu6500_low_pass_filter_t filter)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	460b      	mov	r3, r1
 8006afa:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <mpu6500_set_low_pass_filter+0x16>
    {
        return 2;                                                                  /* return error */
 8006b02:	2302      	movs	r3, #2
 8006b04:	e035      	b.n	8006b72 <mpu6500_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d001      	beq.n	8006b14 <mpu6500_set_low_pass_filter+0x24>
    {
        return 3;                                                                  /* return error */
 8006b10:	2303      	movs	r3, #3
 8006b12:	e02e      	b.n	8006b72 <mpu6500_set_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8006b14:	f107 020e 	add.w	r2, r7, #14
 8006b18:	2301      	movs	r3, #1
 8006b1a:	211a      	movs	r1, #26
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f7fe fbef 	bl	8005300 <a_mpu6500_read>
 8006b22:	4603      	mov	r3, r0
 8006b24:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d005      	beq.n	8006b38 <mpu6500_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b30:	4812      	ldr	r0, [pc, #72]	@ (8006b7c <mpu6500_set_low_pass_filter+0x8c>)
 8006b32:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006b34:	2301      	movs	r3, #1
 8006b36:	e01c      	b.n	8006b72 <mpu6500_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                           /* clear config */
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	f023 0307 	bic.w	r3, r3, #7
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                           /* set config */
 8006b42:	7bba      	ldrb	r2, [r7, #14]
 8006b44:	78fb      	ldrb	r3, [r7, #3]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	b2db      	uxtb	r3, r3
 8006b4a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006b4c:	f107 020e 	add.w	r2, r7, #14
 8006b50:	2301      	movs	r3, #1
 8006b52:	211a      	movs	r1, #26
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f7fe fc04 	bl	8005362 <a_mpu6500_write>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006b5e:	7bfb      	ldrb	r3, [r7, #15]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d005      	beq.n	8006b70 <mpu6500_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b68:	4805      	ldr	r0, [pc, #20]	@ (8006b80 <mpu6500_set_low_pass_filter+0x90>)
 8006b6a:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e000      	b.n	8006b72 <mpu6500_set_low_pass_filter+0x82>
    }
    
    return 0;                                                                      /* success return 0 */
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3710      	adds	r7, #16
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	0801f20c 	.word	0x0801f20c
 8006b80:	0801f22c 	.word	0x0801f22c

08006b84 <mpu6500_set_fifo_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_mode(mpu6500_handle_t *handle, mpu6500_fifo_mode mode)
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b084      	sub	sp, #16
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d101      	bne.n	8006b9a <mpu6500_set_fifo_mode+0x16>
    {
        return 2;                                                                  /* return error */
 8006b96:	2302      	movs	r3, #2
 8006b98:	e03a      	b.n	8006c10 <mpu6500_set_fifo_mode+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ba0:	2b01      	cmp	r3, #1
 8006ba2:	d001      	beq.n	8006ba8 <mpu6500_set_fifo_mode+0x24>
    {
        return 3;                                                                  /* return error */
 8006ba4:	2303      	movs	r3, #3
 8006ba6:	e033      	b.n	8006c10 <mpu6500_set_fifo_mode+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8006ba8:	f107 020e 	add.w	r2, r7, #14
 8006bac:	2301      	movs	r3, #1
 8006bae:	211a      	movs	r1, #26
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7fe fba5 	bl	8005300 <a_mpu6500_read>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d005      	beq.n	8006bcc <mpu6500_set_fifo_mode+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bc4:	4814      	ldr	r0, [pc, #80]	@ (8006c18 <mpu6500_set_fifo_mode+0x94>)
 8006bc6:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e021      	b.n	8006c10 <mpu6500_set_fifo_mode+0x8c>
    }
    prev &= ~(1 << 6);                                                             /* clear config */
 8006bcc:	7bbb      	ldrb	r3, [r7, #14]
 8006bce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 6;                                                             /* set config */
 8006bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bda:	019b      	lsls	r3, r3, #6
 8006bdc:	b25a      	sxtb	r2, r3
 8006bde:	7bbb      	ldrb	r3, [r7, #14]
 8006be0:	b25b      	sxtb	r3, r3
 8006be2:	4313      	orrs	r3, r2
 8006be4:	b25b      	sxtb	r3, r3
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006bea:	f107 020e 	add.w	r2, r7, #14
 8006bee:	2301      	movs	r3, #1
 8006bf0:	211a      	movs	r1, #26
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fe fbb5 	bl	8005362 <a_mpu6500_write>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d005      	beq.n	8006c0e <mpu6500_set_fifo_mode+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c06:	4805      	ldr	r0, [pc, #20]	@ (8006c1c <mpu6500_set_fifo_mode+0x98>)
 8006c08:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	e000      	b.n	8006c10 <mpu6500_set_fifo_mode+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8006c0e:	2300      	movs	r3, #0
}
 8006c10:	4618      	mov	r0, r3
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	0801f20c 	.word	0x0801f20c
 8006c1c:	0801f22c 	.word	0x0801f22c

08006c20 <mpu6500_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70fb      	strb	r3, [r7, #3]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <mpu6500_set_gyroscope_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8006c36:	2302      	movs	r3, #2
 8006c38:	e043      	b.n	8006cc2 <mpu6500_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d001      	beq.n	8006c48 <mpu6500_set_gyroscope_test+0x28>
    {
        return 3;                                                                       /* return error */
 8006c44:	2303      	movs	r3, #3
 8006c46:	e03c      	b.n	8006cc2 <mpu6500_set_gyroscope_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006c48:	f107 020e 	add.w	r2, r7, #14
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	211b      	movs	r1, #27
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7fe fb55 	bl	8005300 <a_mpu6500_read>
 8006c56:	4603      	mov	r3, r0
 8006c58:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d005      	beq.n	8006c6c <mpu6500_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c64:	4819      	ldr	r0, [pc, #100]	@ (8006ccc <mpu6500_set_gyroscope_test+0xac>)
 8006c66:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006c68:	2301      	movs	r3, #1
 8006c6a:	e02a      	b.n	8006cc2 <mpu6500_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	2201      	movs	r2, #1
 8006c70:	fa02 f303 	lsl.w	r3, r2, r3
 8006c74:	b25b      	sxtb	r3, r3
 8006c76:	43db      	mvns	r3, r3
 8006c78:	b25a      	sxtb	r2, r3
 8006c7a:	7bbb      	ldrb	r3, [r7, #14]
 8006c7c:	b25b      	sxtb	r3, r3
 8006c7e:	4013      	ands	r3, r2
 8006c80:	b25b      	sxtb	r3, r3
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8006c86:	78ba      	ldrb	r2, [r7, #2]
 8006c88:	78fb      	ldrb	r3, [r7, #3]
 8006c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8e:	b25a      	sxtb	r2, r3
 8006c90:	7bbb      	ldrb	r3, [r7, #14]
 8006c92:	b25b      	sxtb	r3, r3
 8006c94:	4313      	orrs	r3, r2
 8006c96:	b25b      	sxtb	r3, r3
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006c9c:	f107 020e 	add.w	r2, r7, #14
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	211b      	movs	r1, #27
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f7fe fb5c 	bl	8005362 <a_mpu6500_write>
 8006caa:	4603      	mov	r3, r0
 8006cac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006cae:	7bfb      	ldrb	r3, [r7, #15]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <mpu6500_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cb8:	4805      	ldr	r0, [pc, #20]	@ (8006cd0 <mpu6500_set_gyroscope_test+0xb0>)
 8006cba:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e000      	b.n	8006cc2 <mpu6500_set_gyroscope_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	0801f24c 	.word	0x0801f24c
 8006cd0:	0801f274 	.word	0x0801f274

08006cd4 <mpu6500_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_range(mpu6500_handle_t *handle, mpu6500_gyroscope_range_t range)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <mpu6500_set_gyroscope_range+0x16>
    {
        return 2;                                                                       /* return error */
 8006ce6:	2302      	movs	r3, #2
 8006ce8:	e03a      	b.n	8006d60 <mpu6500_set_gyroscope_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d001      	beq.n	8006cf8 <mpu6500_set_gyroscope_range+0x24>
    {
        return 3;                                                                       /* return error */
 8006cf4:	2303      	movs	r3, #3
 8006cf6:	e033      	b.n	8006d60 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006cf8:	f107 020e 	add.w	r2, r7, #14
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	211b      	movs	r1, #27
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f7fe fafd 	bl	8005300 <a_mpu6500_read>
 8006d06:	4603      	mov	r3, r0
 8006d08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006d0a:	7bfb      	ldrb	r3, [r7, #15]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <mpu6500_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d14:	4814      	ldr	r0, [pc, #80]	@ (8006d68 <mpu6500_set_gyroscope_range+0x94>)
 8006d16:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e021      	b.n	8006d60 <mpu6500_set_gyroscope_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8006d1c:	7bbb      	ldrb	r3, [r7, #14]
 8006d1e:	f023 0318 	bic.w	r3, r3, #24
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8006d26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	b25a      	sxtb	r2, r3
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	4313      	orrs	r3, r2
 8006d34:	b25b      	sxtb	r3, r3
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006d3a:	f107 020e 	add.w	r2, r7, #14
 8006d3e:	2301      	movs	r3, #1
 8006d40:	211b      	movs	r1, #27
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fe fb0d 	bl	8005362 <a_mpu6500_write>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006d4c:	7bfb      	ldrb	r3, [r7, #15]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d005      	beq.n	8006d5e <mpu6500_set_gyroscope_range+0x8a>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d56:	4805      	ldr	r0, [pc, #20]	@ (8006d6c <mpu6500_set_gyroscope_range+0x98>)
 8006d58:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3710      	adds	r7, #16
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	0801f24c 	.word	0x0801f24c
 8006d6c:	0801f274 	.word	0x0801f274

08006d70 <mpu6500_set_gyroscope_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 3
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
 8006d78:	460b      	mov	r3, r1
 8006d7a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <mpu6500_set_gyroscope_choice+0x16>
    {
        return 2;                                                                       /* return error */
 8006d82:	2302      	movs	r3, #2
 8006d84:	e03e      	b.n	8006e04 <mpu6500_set_gyroscope_choice+0x94>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d001      	beq.n	8006d94 <mpu6500_set_gyroscope_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8006d90:	2303      	movs	r3, #3
 8006d92:	e037      	b.n	8006e04 <mpu6500_set_gyroscope_choice+0x94>
    }
    if (choice > 3)                                                                     /* check the choice */
 8006d94:	78fb      	ldrb	r3, [r7, #3]
 8006d96:	2b03      	cmp	r3, #3
 8006d98:	d905      	bls.n	8006da6 <mpu6500_set_gyroscope_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 3.\n");                                  /* choice > 3 */
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9e:	481b      	ldr	r0, [pc, #108]	@ (8006e0c <mpu6500_set_gyroscope_choice+0x9c>)
 8006da0:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 8006da2:	2304      	movs	r3, #4
 8006da4:	e02e      	b.n	8006e04 <mpu6500_set_gyroscope_choice+0x94>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006da6:	f107 020e 	add.w	r2, r7, #14
 8006daa:	2301      	movs	r3, #1
 8006dac:	211b      	movs	r1, #27
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fe faa6 	bl	8005300 <a_mpu6500_read>
 8006db4:	4603      	mov	r3, r0
 8006db6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006db8:	7bfb      	ldrb	r3, [r7, #15]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d005      	beq.n	8006dca <mpu6500_set_gyroscope_choice+0x5a>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc2:	4813      	ldr	r0, [pc, #76]	@ (8006e10 <mpu6500_set_gyroscope_choice+0xa0>)
 8006dc4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e01c      	b.n	8006e04 <mpu6500_set_gyroscope_choice+0x94>
    }
    prev &= ~(3 << 0);                                                                  /* clear config */
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	f023 0303 	bic.w	r3, r3, #3
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 0;                                                                /* set config */
 8006dd4:	7bba      	ldrb	r2, [r7, #14]
 8006dd6:	78fb      	ldrb	r3, [r7, #3]
 8006dd8:	4313      	orrs	r3, r2
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006dde:	f107 020e 	add.w	r2, r7, #14
 8006de2:	2301      	movs	r3, #1
 8006de4:	211b      	movs	r1, #27
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f7fe fabb 	bl	8005362 <a_mpu6500_write>
 8006dec:	4603      	mov	r3, r0
 8006dee:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d005      	beq.n	8006e02 <mpu6500_set_gyroscope_choice+0x92>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfa:	4806      	ldr	r0, [pc, #24]	@ (8006e14 <mpu6500_set_gyroscope_choice+0xa4>)
 8006dfc:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e000      	b.n	8006e04 <mpu6500_set_gyroscope_choice+0x94>
    }
    
    return 0;                                                                           /* success return 0 */
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	0801f2a0 	.word	0x0801f2a0
 8006e10:	0801f24c 	.word	0x0801f24c
 8006e14:	0801f274 	.word	0x0801f274

08006e18 <mpu6500_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	460b      	mov	r3, r1
 8006e22:	70fb      	strb	r3, [r7, #3]
 8006e24:	4613      	mov	r3, r2
 8006e26:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d101      	bne.n	8006e32 <mpu6500_set_accelerometer_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8006e2e:	2302      	movs	r3, #2
 8006e30:	e043      	b.n	8006eba <mpu6500_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d001      	beq.n	8006e40 <mpu6500_set_accelerometer_test+0x28>
    {
        return 3;                                                                       /* return error */
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e03c      	b.n	8006eba <mpu6500_set_accelerometer_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8006e40:	f107 020e 	add.w	r2, r7, #14
 8006e44:	2301      	movs	r3, #1
 8006e46:	211c      	movs	r1, #28
 8006e48:	6878      	ldr	r0, [r7, #4]
 8006e4a:	f7fe fa59 	bl	8005300 <a_mpu6500_read>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d005      	beq.n	8006e64 <mpu6500_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5c:	4819      	ldr	r0, [pc, #100]	@ (8006ec4 <mpu6500_set_accelerometer_test+0xac>)
 8006e5e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006e60:	2301      	movs	r3, #1
 8006e62:	e02a      	b.n	8006eba <mpu6500_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	2201      	movs	r2, #1
 8006e68:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6c:	b25b      	sxtb	r3, r3
 8006e6e:	43db      	mvns	r3, r3
 8006e70:	b25a      	sxtb	r2, r3
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	b25b      	sxtb	r3, r3
 8006e76:	4013      	ands	r3, r2
 8006e78:	b25b      	sxtb	r3, r3
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8006e7e:	78ba      	ldrb	r2, [r7, #2]
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	fa02 f303 	lsl.w	r3, r2, r3
 8006e86:	b25a      	sxtb	r2, r3
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	b25b      	sxtb	r3, r3
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b25b      	sxtb	r3, r3
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8006e94:	f107 020e 	add.w	r2, r7, #14
 8006e98:	2301      	movs	r3, #1
 8006e9a:	211c      	movs	r1, #28
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7fe fa60 	bl	8005362 <a_mpu6500_write>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d005      	beq.n	8006eb8 <mpu6500_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb0:	4805      	ldr	r0, [pc, #20]	@ (8006ec8 <mpu6500_set_accelerometer_test+0xb0>)
 8006eb2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e000      	b.n	8006eba <mpu6500_set_accelerometer_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8006eb8:	2300      	movs	r3, #0
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
 8006ec2:	bf00      	nop
 8006ec4:	0801ebfc 	.word	0x0801ebfc
 8006ec8:	0801f2b8 	.word	0x0801f2b8

08006ecc <mpu6500_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_range(mpu6500_handle_t *handle, mpu6500_accelerometer_range_t range)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d101      	bne.n	8006ee2 <mpu6500_set_accelerometer_range+0x16>
    {
        return 2;                                                                       /* return error */
 8006ede:	2302      	movs	r3, #2
 8006ee0:	e03a      	b.n	8006f58 <mpu6500_set_accelerometer_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d001      	beq.n	8006ef0 <mpu6500_set_accelerometer_range+0x24>
    {
        return 3;                                                                       /* return error */
 8006eec:	2303      	movs	r3, #3
 8006eee:	e033      	b.n	8006f58 <mpu6500_set_accelerometer_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8006ef0:	f107 020e 	add.w	r2, r7, #14
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	211c      	movs	r1, #28
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7fe fa01 	bl	8005300 <a_mpu6500_read>
 8006efe:	4603      	mov	r3, r0
 8006f00:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006f02:	7bfb      	ldrb	r3, [r7, #15]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d005      	beq.n	8006f14 <mpu6500_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f0c:	4814      	ldr	r0, [pc, #80]	@ (8006f60 <mpu6500_set_accelerometer_range+0x94>)
 8006f0e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006f10:	2301      	movs	r3, #1
 8006f12:	e021      	b.n	8006f58 <mpu6500_set_accelerometer_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8006f14:	7bbb      	ldrb	r3, [r7, #14]
 8006f16:	f023 0318 	bic.w	r3, r3, #24
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8006f1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f22:	00db      	lsls	r3, r3, #3
 8006f24:	b25a      	sxtb	r2, r3
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	b25b      	sxtb	r3, r3
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	b25b      	sxtb	r3, r3
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8006f32:	f107 020e 	add.w	r2, r7, #14
 8006f36:	2301      	movs	r3, #1
 8006f38:	211c      	movs	r1, #28
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fe fa11 	bl	8005362 <a_mpu6500_write>
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d005      	beq.n	8006f56 <mpu6500_set_accelerometer_range+0x8a>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f4e:	4805      	ldr	r0, [pc, #20]	@ (8006f64 <mpu6500_set_accelerometer_range+0x98>)
 8006f50:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006f52:	2301      	movs	r3, #1
 8006f54:	e000      	b.n	8006f58 <mpu6500_set_accelerometer_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8006f56:	2300      	movs	r3, #0
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3710      	adds	r7, #16
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	0801ebfc 	.word	0x0801ebfc
 8006f64:	0801f2b8 	.word	0x0801f2b8

08006f68 <mpu6500_set_fifo_1024kb>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_1024kb(mpu6500_handle_t *handle)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b084      	sub	sp, #16
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d101      	bne.n	8006f7a <mpu6500_set_fifo_1024kb+0x12>
    {
        return 2;                                                                         /* return error */
 8006f76:	2302      	movs	r3, #2
 8006f78:	e035      	b.n	8006fe6 <mpu6500_set_fifo_1024kb+0x7e>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d001      	beq.n	8006f88 <mpu6500_set_fifo_1024kb+0x20>
    {
        return 3;                                                                         /* return error */
 8006f84:	2303      	movs	r3, #3
 8006f86:	e02e      	b.n	8006fe6 <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8006f88:	f107 020e 	add.w	r2, r7, #14
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	211d      	movs	r1, #29
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f7fe f9b5 	bl	8005300 <a_mpu6500_read>
 8006f96:	4603      	mov	r3, r0
 8006f98:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8006f9a:	7bfb      	ldrb	r3, [r7, #15]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <mpu6500_set_fifo_1024kb+0x44>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fa4:	4812      	ldr	r0, [pc, #72]	@ (8006ff0 <mpu6500_set_fifo_1024kb+0x88>)
 8006fa6:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e01c      	b.n	8006fe6 <mpu6500_set_fifo_1024kb+0x7e>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 8006fac:	7bbb      	ldrb	r3, [r7, #14]
 8006fae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 6;                                                                       /* set config */
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8006fc0:	f107 020e 	add.w	r2, r7, #14
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	211d      	movs	r1, #29
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f7fe f9ca 	bl	8005362 <a_mpu6500_write>
 8006fce:	4603      	mov	r3, r0
 8006fd0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d005      	beq.n	8006fe4 <mpu6500_set_fifo_1024kb+0x7c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fdc:	4805      	ldr	r0, [pc, #20]	@ (8006ff4 <mpu6500_set_fifo_1024kb+0x8c>)
 8006fde:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e000      	b.n	8006fe6 <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    return 0;                                                                             /* success return 0 */
 8006fe4:	2300      	movs	r3, #0
}
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	3710      	adds	r7, #16
 8006fea:	46bd      	mov	sp, r7
 8006fec:	bd80      	pop	{r7, pc}
 8006fee:	bf00      	nop
 8006ff0:	0801f2e8 	.word	0x0801f2e8
 8006ff4:	0801f318 	.word	0x0801f318

08006ff8 <mpu6500_set_accelerometer_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 1
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b084      	sub	sp, #16
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d101      	bne.n	800700e <mpu6500_set_accelerometer_choice+0x16>
    {
        return 2;                                                                       /* return error */
 800700a:	2302      	movs	r3, #2
 800700c:	e043      	b.n	8007096 <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007014:	2b01      	cmp	r3, #1
 8007016:	d001      	beq.n	800701c <mpu6500_set_accelerometer_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8007018:	2303      	movs	r3, #3
 800701a:	e03c      	b.n	8007096 <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (choice > 1)                                                                     /* check the choice */
 800701c:	78fb      	ldrb	r3, [r7, #3]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d905      	bls.n	800702e <mpu6500_set_accelerometer_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 1.\n");                                  /* choice > 1 */
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007026:	481e      	ldr	r0, [pc, #120]	@ (80070a0 <mpu6500_set_accelerometer_choice+0xa8>)
 8007028:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 800702a:	2304      	movs	r3, #4
 800702c:	e033      	b.n	8007096 <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);       /* read accelerometer config */
 800702e:	f107 020e 	add.w	r2, r7, #14
 8007032:	2301      	movs	r3, #1
 8007034:	211d      	movs	r1, #29
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f7fe f962 	bl	8005300 <a_mpu6500_read>
 800703c:	4603      	mov	r3, r0
 800703e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007040:	7bfb      	ldrb	r3, [r7, #15]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d005      	beq.n	8007052 <mpu6500_set_accelerometer_choice+0x5a>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");          /* read accelerometer 2 config failed */
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800704a:	4816      	ldr	r0, [pc, #88]	@ (80070a4 <mpu6500_set_accelerometer_choice+0xac>)
 800704c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800704e:	2301      	movs	r3, #1
 8007050:	e021      	b.n	8007096 <mpu6500_set_accelerometer_choice+0x9e>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8007052:	7bbb      	ldrb	r3, [r7, #14]
 8007054:	f023 0308 	bic.w	r3, r3, #8
 8007058:	b2db      	uxtb	r3, r3
 800705a:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 3;                                                                /* set config */
 800705c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007060:	00db      	lsls	r3, r3, #3
 8007062:	b25a      	sxtb	r2, r3
 8007064:	7bbb      	ldrb	r3, [r7, #14]
 8007066:	b25b      	sxtb	r3, r3
 8007068:	4313      	orrs	r3, r2
 800706a:	b25b      	sxtb	r3, r3
 800706c:	b2db      	uxtb	r3, r3
 800706e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);      /* write accelerometer config */
 8007070:	f107 020e 	add.w	r2, r7, #14
 8007074:	2301      	movs	r3, #1
 8007076:	211d      	movs	r1, #29
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f7fe f972 	bl	8005362 <a_mpu6500_write>
 800707e:	4603      	mov	r3, r0
 8007080:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007082:	7bfb      	ldrb	r3, [r7, #15]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d005      	beq.n	8007094 <mpu6500_set_accelerometer_choice+0x9c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");         /* write accelerometer 2 config failed */
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708c:	4806      	ldr	r0, [pc, #24]	@ (80070a8 <mpu6500_set_accelerometer_choice+0xb0>)
 800708e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007090:	2301      	movs	r3, #1
 8007092:	e000      	b.n	8007096 <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    return 0;                                                                           /* success return 0 */
 8007094:	2300      	movs	r3, #0
}
 8007096:	4618      	mov	r0, r3
 8007098:	3710      	adds	r7, #16
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}
 800709e:	bf00      	nop
 80070a0:	0801f348 	.word	0x0801f348
 80070a4:	0801f2e8 	.word	0x0801f2e8
 80070a8:	0801f318 	.word	0x0801f318

080070ac <mpu6500_set_accelerometer_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_low_pass_filter(mpu6500_handle_t *handle, mpu6500_accelerometer_low_pass_filter_t filter)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <mpu6500_set_accelerometer_low_pass_filter+0x16>
    {
        return 2;                                                                         /* return error */
 80070be:	2302      	movs	r3, #2
 80070c0:	e035      	b.n	800712e <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d001      	beq.n	80070d0 <mpu6500_set_accelerometer_low_pass_filter+0x24>
    {
        return 3;                                                                         /* return error */
 80070cc:	2303      	movs	r3, #3
 80070ce:	e02e      	b.n	800712e <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 80070d0:	f107 020e 	add.w	r2, r7, #14
 80070d4:	2301      	movs	r3, #1
 80070d6:	211d      	movs	r1, #29
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7fe f911 	bl	8005300 <a_mpu6500_read>
 80070de:	4603      	mov	r3, r0
 80070e0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80070e2:	7bfb      	ldrb	r3, [r7, #15]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d005      	beq.n	80070f4 <mpu6500_set_accelerometer_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070ec:	4812      	ldr	r0, [pc, #72]	@ (8007138 <mpu6500_set_accelerometer_low_pass_filter+0x8c>)
 80070ee:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80070f0:	2301      	movs	r3, #1
 80070f2:	e01c      	b.n	800712e <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                                  /* clear config */
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	f023 0307 	bic.w	r3, r3, #7
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                                  /* set config */
 80070fe:	7bba      	ldrb	r2, [r7, #14]
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	4313      	orrs	r3, r2
 8007104:	b2db      	uxtb	r3, r3
 8007106:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8007108:	f107 020e 	add.w	r2, r7, #14
 800710c:	2301      	movs	r3, #1
 800710e:	211d      	movs	r1, #29
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7fe f926 	bl	8005362 <a_mpu6500_write>
 8007116:	4603      	mov	r3, r0
 8007118:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800711a:	7bfb      	ldrb	r3, [r7, #15]
 800711c:	2b00      	cmp	r3, #0
 800711e:	d005      	beq.n	800712c <mpu6500_set_accelerometer_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007124:	4805      	ldr	r0, [pc, #20]	@ (800713c <mpu6500_set_accelerometer_low_pass_filter+0x90>)
 8007126:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8007128:	2301      	movs	r3, #1
 800712a:	e000      	b.n	800712e <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    return 0;                                                                             /* success return 0 */
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	0801f2e8 	.word	0x0801f2e8
 800713c:	0801f318 	.word	0x0801f318

08007140 <mpu6500_set_low_power_accel_output_rate>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_power_accel_output_rate(mpu6500_handle_t *handle, mpu6500_low_power_accel_output_rate_t rate)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	460b      	mov	r3, r1
 800714a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                  /* check handle */
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d101      	bne.n	8007156 <mpu6500_set_low_power_accel_output_rate+0x16>
    {
        return 2;                                                                        /* return error */
 8007152:	2302      	movs	r3, #2
 8007154:	e035      	b.n	80071c2 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800715c:	2b01      	cmp	r3, #1
 800715e:	d001      	beq.n	8007164 <mpu6500_set_low_power_accel_output_rate+0x24>
    {
        return 3;                                                                        /* return error */
 8007160:	2303      	movs	r3, #3
 8007162:	e02e      	b.n	80071c2 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);         /* read config */
 8007164:	f107 020e 	add.w	r2, r7, #14
 8007168:	2301      	movs	r3, #1
 800716a:	211e      	movs	r1, #30
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f7fe f8c7 	bl	8005300 <a_mpu6500_read>
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <mpu6500_set_low_power_accel_output_rate+0x48>
    {
        handle->debug_print("mpu6500: read lp accelerometer odr failed.\n");             /* read lp accelerometer odr failed */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007180:	4812      	ldr	r0, [pc, #72]	@ (80071cc <mpu6500_set_low_power_accel_output_rate+0x8c>)
 8007182:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8007184:	2301      	movs	r3, #1
 8007186:	e01c      	b.n	80071c2 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    prev &= ~(0xF << 0);                                                                 /* clear config */
 8007188:	7bbb      	ldrb	r3, [r7, #14]
 800718a:	f023 030f 	bic.w	r3, r3, #15
 800718e:	b2db      	uxtb	r3, r3
 8007190:	73bb      	strb	r3, [r7, #14]
    prev |= rate << 0;                                                                   /* set config */
 8007192:	7bba      	ldrb	r2, [r7, #14]
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	4313      	orrs	r3, r2
 8007198:	b2db      	uxtb	r3, r3
 800719a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);        /* write config */
 800719c:	f107 020e 	add.w	r2, r7, #14
 80071a0:	2301      	movs	r3, #1
 80071a2:	211e      	movs	r1, #30
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f7fe f8dc 	bl	8005362 <a_mpu6500_write>
 80071aa:	4603      	mov	r3, r0
 80071ac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <mpu6500_set_low_power_accel_output_rate+0x80>
    {
        handle->debug_print("mpu6500: write lp accelerometer odr failed.\n");            /* write lp accelerometer odr failed */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071b8:	4805      	ldr	r0, [pc, #20]	@ (80071d0 <mpu6500_set_low_power_accel_output_rate+0x90>)
 80071ba:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 80071bc:	2301      	movs	r3, #1
 80071be:	e000      	b.n	80071c2 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    return 0;                                                                            /* success return 0 */
 80071c0:	2300      	movs	r3, #0
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop
 80071cc:	0801f360 	.word	0x0801f360
 80071d0:	0801f38c 	.word	0x0801f38c

080071d4 <mpu6500_set_wake_on_motion>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_wake_on_motion(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d101      	bne.n	80071ea <mpu6500_set_wake_on_motion+0x16>
    {
        return 2;                                                                           /* return error */
 80071e6:	2302      	movs	r3, #2
 80071e8:	e03a      	b.n	8007260 <mpu6500_set_wake_on_motion+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d001      	beq.n	80071f8 <mpu6500_set_wake_on_motion+0x24>
    {
        return 3;                                                                           /* return error */
 80071f4:	2303      	movs	r3, #3
 80071f6:	e033      	b.n	8007260 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 80071f8:	f107 020e 	add.w	r2, r7, #14
 80071fc:	2301      	movs	r3, #1
 80071fe:	2169      	movs	r1, #105	@ 0x69
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	f7fe f87d 	bl	8005300 <a_mpu6500_read>
 8007206:	4603      	mov	r3, r0
 8007208:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d005      	beq.n	800721c <mpu6500_set_wake_on_motion+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007214:	4814      	ldr	r0, [pc, #80]	@ (8007268 <mpu6500_set_wake_on_motion+0x94>)
 8007216:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8007218:	2301      	movs	r3, #1
 800721a:	e021      	b.n	8007260 <mpu6500_set_wake_on_motion+0x8c>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 800721c:	7bbb      	ldrb	r3, [r7, #14]
 800721e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007222:	b2db      	uxtb	r3, r3
 8007224:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 7;                                                                    /* set config */
 8007226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800722a:	01db      	lsls	r3, r3, #7
 800722c:	b25a      	sxtb	r2, r3
 800722e:	7bbb      	ldrb	r3, [r7, #14]
 8007230:	b25b      	sxtb	r3, r3
 8007232:	4313      	orrs	r3, r2
 8007234:	b25b      	sxtb	r3, r3
 8007236:	b2db      	uxtb	r3, r3
 8007238:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800723a:	f107 020e 	add.w	r2, r7, #14
 800723e:	2301      	movs	r3, #1
 8007240:	2169      	movs	r1, #105	@ 0x69
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f7fe f88d 	bl	8005362 <a_mpu6500_write>
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800724c:	7bfb      	ldrb	r3, [r7, #15]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d005      	beq.n	800725e <mpu6500_set_wake_on_motion+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007256:	4805      	ldr	r0, [pc, #20]	@ (800726c <mpu6500_set_wake_on_motion+0x98>)
 8007258:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800725a:	2301      	movs	r3, #1
 800725c:	e000      	b.n	8007260 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 800725e:	2300      	movs	r3, #0
}
 8007260:	4618      	mov	r0, r3
 8007262:	3710      	adds	r7, #16
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	0801f3bc 	.word	0x0801f3bc
 800726c:	0801f3e8 	.word	0x0801f3e8

08007270 <mpu6500_set_accel_compare_with_previous_sample>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accel_compare_with_previous_sample(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	460b      	mov	r3, r1
 800727a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d101      	bne.n	8007286 <mpu6500_set_accel_compare_with_previous_sample+0x16>
    {
        return 2;                                                                           /* return error */
 8007282:	2302      	movs	r3, #2
 8007284:	e03a      	b.n	80072fc <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800728c:	2b01      	cmp	r3, #1
 800728e:	d001      	beq.n	8007294 <mpu6500_set_accel_compare_with_previous_sample+0x24>
    {
        return 3;                                                                           /* return error */
 8007290:	2303      	movs	r3, #3
 8007292:	e033      	b.n	80072fc <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8007294:	f107 020e 	add.w	r2, r7, #14
 8007298:	2301      	movs	r3, #1
 800729a:	2169      	movs	r1, #105	@ 0x69
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f7fe f82f 	bl	8005300 <a_mpu6500_read>
 80072a2:	4603      	mov	r3, r0
 80072a4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <mpu6500_set_accel_compare_with_previous_sample+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b0:	4814      	ldr	r0, [pc, #80]	@ (8007304 <mpu6500_set_accel_compare_with_previous_sample+0x94>)
 80072b2:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80072b4:	2301      	movs	r3, #1
 80072b6:	e021      	b.n	80072fc <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 80072b8:	7bbb      	ldrb	r3, [r7, #14]
 80072ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                    /* set config */
 80072c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072c6:	019b      	lsls	r3, r3, #6
 80072c8:	b25a      	sxtb	r2, r3
 80072ca:	7bbb      	ldrb	r3, [r7, #14]
 80072cc:	b25b      	sxtb	r3, r3
 80072ce:	4313      	orrs	r3, r2
 80072d0:	b25b      	sxtb	r3, r3
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80072d6:	f107 020e 	add.w	r2, r7, #14
 80072da:	2301      	movs	r3, #1
 80072dc:	2169      	movs	r1, #105	@ 0x69
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fe f83f 	bl	8005362 <a_mpu6500_write>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <mpu6500_set_accel_compare_with_previous_sample+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072f2:	4805      	ldr	r0, [pc, #20]	@ (8007308 <mpu6500_set_accel_compare_with_previous_sample+0x98>)
 80072f4:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80072f6:	2301      	movs	r3, #1
 80072f8:	e000      	b.n	80072fc <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3710      	adds	r7, #16
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}
 8007304:	0801f3bc 	.word	0x0801f3bc
 8007308:	0801f3e8 	.word	0x0801f3e8

0800730c <mpu6500_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_enable(mpu6500_handle_t *handle, mpu6500_fifo_t fifo, mpu6500_bool_t enable)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b084      	sub	sp, #16
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	460b      	mov	r3, r1
 8007316:	70fb      	strb	r3, [r7, #3]
 8007318:	4613      	mov	r3, r2
 800731a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d101      	bne.n	8007326 <mpu6500_set_fifo_enable+0x1a>
    {
        return 2;                                                                   /* return error */
 8007322:	2302      	movs	r3, #2
 8007324:	e043      	b.n	80073ae <mpu6500_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800732c:	2b01      	cmp	r3, #1
 800732e:	d001      	beq.n	8007334 <mpu6500_set_fifo_enable+0x28>
    {
        return 3;                                                                   /* return error */
 8007330:	2303      	movs	r3, #3
 8007332:	e03c      	b.n	80073ae <mpu6500_set_fifo_enable+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 8007334:	f107 020e 	add.w	r2, r7, #14
 8007338:	2301      	movs	r3, #1
 800733a:	2123      	movs	r1, #35	@ 0x23
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f7fd ffdf 	bl	8005300 <a_mpu6500_read>
 8007342:	4603      	mov	r3, r0
 8007344:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d005      	beq.n	8007358 <mpu6500_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6500: read fifo enable config failed.\n");          /* read fifo enable config failed */
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007350:	4819      	ldr	r0, [pc, #100]	@ (80073b8 <mpu6500_set_fifo_enable+0xac>)
 8007352:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8007354:	2301      	movs	r3, #1
 8007356:	e02a      	b.n	80073ae <mpu6500_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                           /* clear config */
 8007358:	78fb      	ldrb	r3, [r7, #3]
 800735a:	2201      	movs	r2, #1
 800735c:	fa02 f303 	lsl.w	r3, r2, r3
 8007360:	b25b      	sxtb	r3, r3
 8007362:	43db      	mvns	r3, r3
 8007364:	b25a      	sxtb	r2, r3
 8007366:	7bbb      	ldrb	r3, [r7, #14]
 8007368:	b25b      	sxtb	r3, r3
 800736a:	4013      	ands	r3, r2
 800736c:	b25b      	sxtb	r3, r3
 800736e:	b2db      	uxtb	r3, r3
 8007370:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                         /* set config */
 8007372:	78ba      	ldrb	r2, [r7, #2]
 8007374:	78fb      	ldrb	r3, [r7, #3]
 8007376:	fa02 f303 	lsl.w	r3, r2, r3
 800737a:	b25a      	sxtb	r2, r3
 800737c:	7bbb      	ldrb	r3, [r7, #14]
 800737e:	b25b      	sxtb	r3, r3
 8007380:	4313      	orrs	r3, r2
 8007382:	b25b      	sxtb	r3, r3
 8007384:	b2db      	uxtb	r3, r3
 8007386:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 8007388:	f107 020e 	add.w	r2, r7, #14
 800738c:	2301      	movs	r3, #1
 800738e:	2123      	movs	r1, #35	@ 0x23
 8007390:	6878      	ldr	r0, [r7, #4]
 8007392:	f7fd ffe6 	bl	8005362 <a_mpu6500_write>
 8007396:	4603      	mov	r3, r0
 8007398:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800739a:	7bfb      	ldrb	r3, [r7, #15]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d005      	beq.n	80073ac <mpu6500_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6500: write fifo enable config failed.\n");         /* write fifo enable config failed */
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	4805      	ldr	r0, [pc, #20]	@ (80073bc <mpu6500_set_fifo_enable+0xb0>)
 80073a6:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 80073a8:	2301      	movs	r3, #1
 80073aa:	e000      	b.n	80073ae <mpu6500_set_fifo_enable+0xa2>
    }
    
    return 0;                                                                       /* success return 0 */
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3710      	adds	r7, #16
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}
 80073b6:	bf00      	nop
 80073b8:	0801f414 	.word	0x0801f414
 80073bc:	0801f440 	.word	0x0801f440

080073c0 <mpu6500_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d101      	bne.n	80073d6 <mpu6500_set_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 80073d2:	2302      	movs	r3, #2
 80073d4:	e03a      	b.n	800744c <mpu6500_set_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80073dc:	2b01      	cmp	r3, #1
 80073de:	d001      	beq.n	80073e4 <mpu6500_set_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 80073e0:	2303      	movs	r3, #3
 80073e2:	e033      	b.n	800744c <mpu6500_set_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80073e4:	f107 020e 	add.w	r2, r7, #14
 80073e8:	2301      	movs	r3, #1
 80073ea:	2137      	movs	r1, #55	@ 0x37
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7fd ff87 	bl	8005300 <a_mpu6500_read>
 80073f2:	4603      	mov	r3, r0
 80073f4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80073f6:	7bfb      	ldrb	r3, [r7, #15]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d005      	beq.n	8007408 <mpu6500_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007400:	4814      	ldr	r0, [pc, #80]	@ (8007454 <mpu6500_set_interrupt_level+0x94>)
 8007402:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007404:	2301      	movs	r3, #1
 8007406:	e021      	b.n	800744c <mpu6500_set_interrupt_level+0x8c>
    }
    prev &= ~(1 << 7);                                                                  /* clear config */
 8007408:	7bbb      	ldrb	r3, [r7, #14]
 800740a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800740e:	b2db      	uxtb	r3, r3
 8007410:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                 /* set config */
 8007412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007416:	01db      	lsls	r3, r3, #7
 8007418:	b25a      	sxtb	r2, r3
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	b25b      	sxtb	r3, r3
 800741e:	4313      	orrs	r3, r2
 8007420:	b25b      	sxtb	r3, r3
 8007422:	b2db      	uxtb	r3, r3
 8007424:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007426:	f107 020e 	add.w	r2, r7, #14
 800742a:	2301      	movs	r3, #1
 800742c:	2137      	movs	r1, #55	@ 0x37
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fd ff97 	bl	8005362 <a_mpu6500_write>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d005      	beq.n	800744a <mpu6500_set_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007442:	4805      	ldr	r0, [pc, #20]	@ (8007458 <mpu6500_set_interrupt_level+0x98>)
 8007444:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007446:	2301      	movs	r3, #1
 8007448:	e000      	b.n	800744c <mpu6500_set_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800744a:	2300      	movs	r3, #0
}
 800744c:	4618      	mov	r0, r3
 800744e:	3710      	adds	r7, #16
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	0801f46c 	.word	0x0801f46c
 8007458:	0801f494 	.word	0x0801f494

0800745c <mpu6500_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_pin_type(mpu6500_handle_t *handle, mpu6500_pin_type_t type)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b084      	sub	sp, #16
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	460b      	mov	r3, r1
 8007466:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <mpu6500_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                       /* return error */
 800746e:	2302      	movs	r3, #2
 8007470:	e03a      	b.n	80074e8 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007478:	2b01      	cmp	r3, #1
 800747a:	d001      	beq.n	8007480 <mpu6500_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                       /* return error */
 800747c:	2303      	movs	r3, #3
 800747e:	e033      	b.n	80074e8 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007480:	f107 020e 	add.w	r2, r7, #14
 8007484:	2301      	movs	r3, #1
 8007486:	2137      	movs	r1, #55	@ 0x37
 8007488:	6878      	ldr	r0, [r7, #4]
 800748a:	f7fd ff39 	bl	8005300 <a_mpu6500_read>
 800748e:	4603      	mov	r3, r0
 8007490:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007492:	7bfb      	ldrb	r3, [r7, #15]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d005      	beq.n	80074a4 <mpu6500_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800749c:	4814      	ldr	r0, [pc, #80]	@ (80074f0 <mpu6500_set_interrupt_pin_type+0x94>)
 800749e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80074a0:	2301      	movs	r3, #1
 80074a2:	e021      	b.n	80074e8 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    prev &= ~(1 << 6);                                                                  /* clear config */
 80074a4:	7bbb      	ldrb	r3, [r7, #14]
 80074a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80074aa:	b2db      	uxtb	r3, r3
 80074ac:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                  /* set config */
 80074ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074b2:	019b      	lsls	r3, r3, #6
 80074b4:	b25a      	sxtb	r2, r3
 80074b6:	7bbb      	ldrb	r3, [r7, #14]
 80074b8:	b25b      	sxtb	r3, r3
 80074ba:	4313      	orrs	r3, r2
 80074bc:	b25b      	sxtb	r3, r3
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80074c2:	f107 020e 	add.w	r2, r7, #14
 80074c6:	2301      	movs	r3, #1
 80074c8:	2137      	movs	r1, #55	@ 0x37
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f7fd ff49 	bl	8005362 <a_mpu6500_write>
 80074d0:	4603      	mov	r3, r0
 80074d2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80074d4:	7bfb      	ldrb	r3, [r7, #15]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d005      	beq.n	80074e6 <mpu6500_set_interrupt_pin_type+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074de:	4805      	ldr	r0, [pc, #20]	@ (80074f4 <mpu6500_set_interrupt_pin_type+0x98>)
 80074e0:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80074e2:	2301      	movs	r3, #1
 80074e4:	e000      	b.n	80074e8 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3710      	adds	r7, #16
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	0801f46c 	.word	0x0801f46c
 80074f4:	0801f494 	.word	0x0801f494

080074f8 <mpu6500_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_latch(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b084      	sub	sp, #16
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	460b      	mov	r3, r1
 8007502:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d101      	bne.n	800750e <mpu6500_set_interrupt_latch+0x16>
    {
        return 2;                                                                       /* return error */
 800750a:	2302      	movs	r3, #2
 800750c:	e03c      	b.n	8007588 <mpu6500_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007514:	2b01      	cmp	r3, #1
 8007516:	d001      	beq.n	800751c <mpu6500_set_interrupt_latch+0x24>
    {
        return 3;                                                                       /* return error */
 8007518:	2303      	movs	r3, #3
 800751a:	e035      	b.n	8007588 <mpu6500_set_interrupt_latch+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 800751c:	f107 020e 	add.w	r2, r7, #14
 8007520:	2301      	movs	r3, #1
 8007522:	2137      	movs	r1, #55	@ 0x37
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f7fd feeb 	bl	8005300 <a_mpu6500_read>
 800752a:	4603      	mov	r3, r0
 800752c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d005      	beq.n	8007540 <mpu6500_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007538:	4815      	ldr	r0, [pc, #84]	@ (8007590 <mpu6500_set_interrupt_latch+0x98>)
 800753a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800753c:	2301      	movs	r3, #1
 800753e:	e023      	b.n	8007588 <mpu6500_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                  /* clear config */
 8007540:	7bbb      	ldrb	r3, [r7, #14]
 8007542:	f023 0320 	bic.w	r3, r3, #32
 8007546:	b2db      	uxtb	r3, r3
 8007548:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                             /* set config */
 800754a:	78fb      	ldrb	r3, [r7, #3]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d101      	bne.n	8007554 <mpu6500_set_interrupt_latch+0x5c>
 8007550:	2220      	movs	r2, #32
 8007552:	e000      	b.n	8007556 <mpu6500_set_interrupt_latch+0x5e>
 8007554:	2200      	movs	r2, #0
 8007556:	7bbb      	ldrb	r3, [r7, #14]
 8007558:	b25b      	sxtb	r3, r3
 800755a:	4313      	orrs	r3, r2
 800755c:	b25b      	sxtb	r3, r3
 800755e:	b2db      	uxtb	r3, r3
 8007560:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007562:	f107 020e 	add.w	r2, r7, #14
 8007566:	2301      	movs	r3, #1
 8007568:	2137      	movs	r1, #55	@ 0x37
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f7fd fef9 	bl	8005362 <a_mpu6500_write>
 8007570:	4603      	mov	r3, r0
 8007572:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d005      	beq.n	8007586 <mpu6500_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800757e:	4805      	ldr	r0, [pc, #20]	@ (8007594 <mpu6500_set_interrupt_latch+0x9c>)
 8007580:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007582:	2301      	movs	r3, #1
 8007584:	e000      	b.n	8007588 <mpu6500_set_interrupt_latch+0x90>
    }
    
    return 0;                                                                           /* success return 0 */
 8007586:	2300      	movs	r3, #0
}
 8007588:	4618      	mov	r0, r3
 800758a:	3710      	adds	r7, #16
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	0801f46c 	.word	0x0801f46c
 8007594:	0801f494 	.word	0x0801f494

08007598 <mpu6500_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_read_clear(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d101      	bne.n	80075ae <mpu6500_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                       /* return error */
 80075aa:	2302      	movs	r3, #2
 80075ac:	e03a      	b.n	8007624 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d001      	beq.n	80075bc <mpu6500_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                       /* return error */
 80075b8:	2303      	movs	r3, #3
 80075ba:	e033      	b.n	8007624 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80075bc:	f107 020e 	add.w	r2, r7, #14
 80075c0:	2301      	movs	r3, #1
 80075c2:	2137      	movs	r1, #55	@ 0x37
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f7fd fe9b 	bl	8005300 <a_mpu6500_read>
 80075ca:	4603      	mov	r3, r0
 80075cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d005      	beq.n	80075e0 <mpu6500_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d8:	4814      	ldr	r0, [pc, #80]	@ (800762c <mpu6500_set_interrupt_read_clear+0x94>)
 80075da:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80075dc:	2301      	movs	r3, #1
 80075de:	e021      	b.n	8007624 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    prev &= ~(1 << 4);                                                                  /* clear config */
 80075e0:	7bbb      	ldrb	r3, [r7, #14]
 80075e2:	f023 0310 	bic.w	r3, r3, #16
 80075e6:	b2db      	uxtb	r3, r3
 80075e8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                /* set config */
 80075ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	b25a      	sxtb	r2, r3
 80075f2:	7bbb      	ldrb	r3, [r7, #14]
 80075f4:	b25b      	sxtb	r3, r3
 80075f6:	4313      	orrs	r3, r2
 80075f8:	b25b      	sxtb	r3, r3
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80075fe:	f107 020e 	add.w	r2, r7, #14
 8007602:	2301      	movs	r3, #1
 8007604:	2137      	movs	r1, #55	@ 0x37
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f7fd feab 	bl	8005362 <a_mpu6500_write>
 800760c:	4603      	mov	r3, r0
 800760e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <mpu6500_set_interrupt_read_clear+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800761a:	4805      	ldr	r0, [pc, #20]	@ (8007630 <mpu6500_set_interrupt_read_clear+0x98>)
 800761c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800761e:	2301      	movs	r3, #1
 8007620:	e000      	b.n	8007624 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	3710      	adds	r7, #16
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}
 800762c:	0801f46c 	.word	0x0801f46c
 8007630:	0801f494 	.word	0x0801f494

08007634 <mpu6500_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	460b      	mov	r3, r1
 800763e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d101      	bne.n	800764a <mpu6500_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 8007646:	2302      	movs	r3, #2
 8007648:	e03a      	b.n	80076c0 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007650:	2b01      	cmp	r3, #1
 8007652:	d001      	beq.n	8007658 <mpu6500_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8007654:	2303      	movs	r3, #3
 8007656:	e033      	b.n	80076c0 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007658:	f107 020e 	add.w	r2, r7, #14
 800765c:	2301      	movs	r3, #1
 800765e:	2137      	movs	r1, #55	@ 0x37
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f7fd fe4d 	bl	8005300 <a_mpu6500_read>
 8007666:	4603      	mov	r3, r0
 8007668:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <mpu6500_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007674:	4814      	ldr	r0, [pc, #80]	@ (80076c8 <mpu6500_set_fsync_interrupt_level+0x94>)
 8007676:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007678:	2301      	movs	r3, #1
 800767a:	e021      	b.n	80076c0 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 800767c:	7bbb      	ldrb	r3, [r7, #14]
 800767e:	f023 0308 	bic.w	r3, r3, #8
 8007682:	b2db      	uxtb	r3, r3
 8007684:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                 /* set config */
 8007686:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	b25a      	sxtb	r2, r3
 800768e:	7bbb      	ldrb	r3, [r7, #14]
 8007690:	b25b      	sxtb	r3, r3
 8007692:	4313      	orrs	r3, r2
 8007694:	b25b      	sxtb	r3, r3
 8007696:	b2db      	uxtb	r3, r3
 8007698:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800769a:	f107 020e 	add.w	r2, r7, #14
 800769e:	2301      	movs	r3, #1
 80076a0:	2137      	movs	r1, #55	@ 0x37
 80076a2:	6878      	ldr	r0, [r7, #4]
 80076a4:	f7fd fe5d 	bl	8005362 <a_mpu6500_write>
 80076a8:	4603      	mov	r3, r0
 80076aa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <mpu6500_set_fsync_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076b6:	4805      	ldr	r0, [pc, #20]	@ (80076cc <mpu6500_set_fsync_interrupt_level+0x98>)
 80076b8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80076ba:	2301      	movs	r3, #1
 80076bc:	e000      	b.n	80076c0 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	3710      	adds	r7, #16
 80076c4:	46bd      	mov	sp, r7
 80076c6:	bd80      	pop	{r7, pc}
 80076c8:	0801f46c 	.word	0x0801f46c
 80076cc:	0801f494 	.word	0x0801f494

080076d0 <mpu6500_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	460b      	mov	r3, r1
 80076da:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d101      	bne.n	80076e6 <mpu6500_set_fsync_interrupt+0x16>
    {
        return 2;                                                                       /* return error */
 80076e2:	2302      	movs	r3, #2
 80076e4:	e03a      	b.n	800775c <mpu6500_set_fsync_interrupt+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d001      	beq.n	80076f4 <mpu6500_set_fsync_interrupt+0x24>
    {
        return 3;                                                                       /* return error */
 80076f0:	2303      	movs	r3, #3
 80076f2:	e033      	b.n	800775c <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80076f4:	f107 020e 	add.w	r2, r7, #14
 80076f8:	2301      	movs	r3, #1
 80076fa:	2137      	movs	r1, #55	@ 0x37
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7fd fdff 	bl	8005300 <a_mpu6500_read>
 8007702:	4603      	mov	r3, r0
 8007704:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007706:	7bfb      	ldrb	r3, [r7, #15]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d005      	beq.n	8007718 <mpu6500_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007710:	4814      	ldr	r0, [pc, #80]	@ (8007764 <mpu6500_set_fsync_interrupt+0x94>)
 8007712:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007714:	2301      	movs	r3, #1
 8007716:	e021      	b.n	800775c <mpu6500_set_fsync_interrupt+0x8c>
    }
    prev &= ~(1 << 2);                                                                  /* clear config */
 8007718:	7bbb      	ldrb	r3, [r7, #14]
 800771a:	f023 0304 	bic.w	r3, r3, #4
 800771e:	b2db      	uxtb	r3, r3
 8007720:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                /* set config */
 8007722:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007726:	009b      	lsls	r3, r3, #2
 8007728:	b25a      	sxtb	r2, r3
 800772a:	7bbb      	ldrb	r3, [r7, #14]
 800772c:	b25b      	sxtb	r3, r3
 800772e:	4313      	orrs	r3, r2
 8007730:	b25b      	sxtb	r3, r3
 8007732:	b2db      	uxtb	r3, r3
 8007734:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007736:	f107 020e 	add.w	r2, r7, #14
 800773a:	2301      	movs	r3, #1
 800773c:	2137      	movs	r1, #55	@ 0x37
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fd fe0f 	bl	8005362 <a_mpu6500_write>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d005      	beq.n	800775a <mpu6500_set_fsync_interrupt+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007752:	4805      	ldr	r0, [pc, #20]	@ (8007768 <mpu6500_set_fsync_interrupt+0x98>)
 8007754:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007756:	2301      	movs	r3, #1
 8007758:	e000      	b.n	800775c <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800775a:	2300      	movs	r3, #0
}
 800775c:	4618      	mov	r0, r3
 800775e:	3710      	adds	r7, #16
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}
 8007764:	0801f46c 	.word	0x0801f46c
 8007768:	0801f494 	.word	0x0801f494

0800776c <mpu6500_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_bypass(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b084      	sub	sp, #16
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	460b      	mov	r3, r1
 8007776:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d101      	bne.n	8007782 <mpu6500_set_iic_bypass+0x16>
    {
        return 2;                                                                       /* return error */
 800777e:	2302      	movs	r3, #2
 8007780:	e03a      	b.n	80077f8 <mpu6500_set_iic_bypass+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007788:	2b01      	cmp	r3, #1
 800778a:	d001      	beq.n	8007790 <mpu6500_set_iic_bypass+0x24>
    {
        return 3;                                                                       /* return error */
 800778c:	2303      	movs	r3, #3
 800778e:	e033      	b.n	80077f8 <mpu6500_set_iic_bypass+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 8007790:	f107 020e 	add.w	r2, r7, #14
 8007794:	2301      	movs	r3, #1
 8007796:	2137      	movs	r1, #55	@ 0x37
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7fd fdb1 	bl	8005300 <a_mpu6500_read>
 800779e:	4603      	mov	r3, r0
 80077a0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d005      	beq.n	80077b4 <mpu6500_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ac:	4814      	ldr	r0, [pc, #80]	@ (8007800 <mpu6500_set_iic_bypass+0x94>)
 80077ae:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80077b0:	2301      	movs	r3, #1
 80077b2:	e021      	b.n	80077f8 <mpu6500_set_iic_bypass+0x8c>
    }
    prev &= ~(1 << 1);                                                                  /* clear config */
 80077b4:	7bbb      	ldrb	r3, [r7, #14]
 80077b6:	f023 0302 	bic.w	r3, r3, #2
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                /* set config */
 80077be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077c2:	005b      	lsls	r3, r3, #1
 80077c4:	b25a      	sxtb	r2, r3
 80077c6:	7bbb      	ldrb	r3, [r7, #14]
 80077c8:	b25b      	sxtb	r3, r3
 80077ca:	4313      	orrs	r3, r2
 80077cc:	b25b      	sxtb	r3, r3
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80077d2:	f107 020e 	add.w	r2, r7, #14
 80077d6:	2301      	movs	r3, #1
 80077d8:	2137      	movs	r1, #55	@ 0x37
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7fd fdc1 	bl	8005362 <a_mpu6500_write>
 80077e0:	4603      	mov	r3, r0
 80077e2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80077e4:	7bfb      	ldrb	r3, [r7, #15]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d005      	beq.n	80077f6 <mpu6500_set_iic_bypass+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077ee:	4805      	ldr	r0, [pc, #20]	@ (8007804 <mpu6500_set_iic_bypass+0x98>)
 80077f0:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80077f2:	2301      	movs	r3, #1
 80077f4:	e000      	b.n	80077f8 <mpu6500_set_iic_bypass+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3710      	adds	r7, #16
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	0801f46c 	.word	0x0801f46c
 8007804:	0801f494 	.word	0x0801f494

08007808 <mpu6500_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt(mpu6500_handle_t *handle, mpu6500_interrupt_t type, mpu6500_bool_t enable)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
 8007814:	4613      	mov	r3, r2
 8007816:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <mpu6500_set_interrupt+0x1a>
    {
        return 2;                                                                       /* return error */
 800781e:	2302      	movs	r3, #2
 8007820:	e043      	b.n	80078aa <mpu6500_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007828:	2b01      	cmp	r3, #1
 800782a:	d001      	beq.n	8007830 <mpu6500_set_interrupt+0x28>
    {
        return 3;                                                                       /* return error */
 800782c:	2303      	movs	r3, #3
 800782e:	e03c      	b.n	80078aa <mpu6500_set_interrupt+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 8007830:	f107 020e 	add.w	r2, r7, #14
 8007834:	2301      	movs	r3, #1
 8007836:	2138      	movs	r1, #56	@ 0x38
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7fd fd61 	bl	8005300 <a_mpu6500_read>
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <mpu6500_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6500: read interrupt enable failed.\n");                /* read interrupt enable failed */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784c:	4819      	ldr	r0, [pc, #100]	@ (80078b4 <mpu6500_set_interrupt+0xac>)
 800784e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007850:	2301      	movs	r3, #1
 8007852:	e02a      	b.n	80078aa <mpu6500_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                               /* clear config */
 8007854:	78fb      	ldrb	r3, [r7, #3]
 8007856:	2201      	movs	r2, #1
 8007858:	fa02 f303 	lsl.w	r3, r2, r3
 800785c:	b25b      	sxtb	r3, r3
 800785e:	43db      	mvns	r3, r3
 8007860:	b25a      	sxtb	r2, r3
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	b25b      	sxtb	r3, r3
 8007866:	4013      	ands	r3, r2
 8007868:	b25b      	sxtb	r3, r3
 800786a:	b2db      	uxtb	r3, r3
 800786c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                             /* set config */
 800786e:	78ba      	ldrb	r2, [r7, #2]
 8007870:	78fb      	ldrb	r3, [r7, #3]
 8007872:	fa02 f303 	lsl.w	r3, r2, r3
 8007876:	b25a      	sxtb	r2, r3
 8007878:	7bbb      	ldrb	r3, [r7, #14]
 800787a:	b25b      	sxtb	r3, r3
 800787c:	4313      	orrs	r3, r2
 800787e:	b25b      	sxtb	r3, r3
 8007880:	b2db      	uxtb	r3, r3
 8007882:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 8007884:	f107 020e 	add.w	r2, r7, #14
 8007888:	2301      	movs	r3, #1
 800788a:	2138      	movs	r1, #56	@ 0x38
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f7fd fd68 	bl	8005362 <a_mpu6500_write>
 8007892:	4603      	mov	r3, r0
 8007894:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007896:	7bfb      	ldrb	r3, [r7, #15]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d005      	beq.n	80078a8 <mpu6500_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6500: write interrupt enable failed.\n");               /* write interrupt enable failed */
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a0:	4805      	ldr	r0, [pc, #20]	@ (80078b8 <mpu6500_set_interrupt+0xb0>)
 80078a2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80078a4:	2301      	movs	r3, #1
 80078a6:	e000      	b.n	80078aa <mpu6500_set_interrupt+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 80078a8:	2300      	movs	r3, #0
}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3710      	adds	r7, #16
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	0801f4bc 	.word	0x0801f4bc
 80078b8:	0801f4e4 	.word	0x0801f4e4

080078bc <mpu6500_set_accelerometer_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d101      	bne.n	80078d2 <mpu6500_set_accelerometer_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 80078ce:	2302      	movs	r3, #2
 80078d0:	e022      	b.n	8007918 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d001      	beq.n	80078e0 <mpu6500_set_accelerometer_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 80078dc:	2303      	movs	r3, #3
 80078de:	e01b      	b.n	8007918 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 80078e0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078e4:	121b      	asrs	r3, r3, #8
 80078e6:	b21b      	sxth	r3, r3
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 80078ec:	887b      	ldrh	r3, [r7, #2]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XA_OFFSET_H, buf, 2);        /* write xa offset */
 80078f2:	f107 020c 	add.w	r2, r7, #12
 80078f6:	2302      	movs	r3, #2
 80078f8:	2177      	movs	r1, #119	@ 0x77
 80078fa:	6878      	ldr	r0, [r7, #4]
 80078fc:	f7fd fd31 	bl	8005362 <a_mpu6500_write>
 8007900:	4603      	mov	r3, r0
 8007902:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007904:	7bfb      	ldrb	r3, [r7, #15]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d005      	beq.n	8007916 <mpu6500_set_accelerometer_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xa offset failed.\n");         /* write xa offset failed*/
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790e:	4804      	ldr	r0, [pc, #16]	@ (8007920 <mpu6500_set_accelerometer_x_offset+0x64>)
 8007910:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007912:	2301      	movs	r3, #1
 8007914:	e000      	b.n	8007918 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007916:	2300      	movs	r3, #0
}
 8007918:	4618      	mov	r0, r3
 800791a:	3710      	adds	r7, #16
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	0801f610 	.word	0x0801f610

08007924 <mpu6500_set_accelerometer_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
 800792c:	460b      	mov	r3, r1
 800792e:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <mpu6500_set_accelerometer_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007936:	2302      	movs	r3, #2
 8007938:	e022      	b.n	8007980 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007940:	2b01      	cmp	r3, #1
 8007942:	d001      	beq.n	8007948 <mpu6500_set_accelerometer_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007944:	2303      	movs	r3, #3
 8007946:	e01b      	b.n	8007980 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007948:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800794c:	121b      	asrs	r3, r3, #8
 800794e:	b21b      	sxth	r3, r3
 8007950:	b2db      	uxtb	r3, r3
 8007952:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007954:	887b      	ldrh	r3, [r7, #2]
 8007956:	b2db      	uxtb	r3, r3
 8007958:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YA_OFFSET_H, buf, 2);        /* write ya offset */
 800795a:	f107 020c 	add.w	r2, r7, #12
 800795e:	2302      	movs	r3, #2
 8007960:	217a      	movs	r1, #122	@ 0x7a
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fd fcfd 	bl	8005362 <a_mpu6500_write>
 8007968:	4603      	mov	r3, r0
 800796a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 800796c:	7bfb      	ldrb	r3, [r7, #15]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d005      	beq.n	800797e <mpu6500_set_accelerometer_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write ya offset failed.\n");         /* write ya offset failed*/
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007976:	4804      	ldr	r0, [pc, #16]	@ (8007988 <mpu6500_set_accelerometer_y_offset+0x64>)
 8007978:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 800797a:	2301      	movs	r3, #1
 800797c:	e000      	b.n	8007980 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 800797e:	2300      	movs	r3, #0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3710      	adds	r7, #16
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}
 8007988:	0801f658 	.word	0x0801f658

0800798c <mpu6500_set_accelerometer_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b084      	sub	sp, #16
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	460b      	mov	r3, r1
 8007996:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <mpu6500_set_accelerometer_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 800799e:	2302      	movs	r3, #2
 80079a0:	e022      	b.n	80079e8 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d001      	beq.n	80079b0 <mpu6500_set_accelerometer_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 80079ac:	2303      	movs	r3, #3
 80079ae:	e01b      	b.n	80079e8 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 80079b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80079b4:	121b      	asrs	r3, r3, #8
 80079b6:	b21b      	sxth	r3, r3
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 80079bc:	887b      	ldrh	r3, [r7, #2]
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZA_OFFSET_H, buf, 2);        /* write za offset */
 80079c2:	f107 020c 	add.w	r2, r7, #12
 80079c6:	2302      	movs	r3, #2
 80079c8:	217d      	movs	r1, #125	@ 0x7d
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f7fd fcc9 	bl	8005362 <a_mpu6500_write>
 80079d0:	4603      	mov	r3, r0
 80079d2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 80079d4:	7bfb      	ldrb	r3, [r7, #15]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d005      	beq.n	80079e6 <mpu6500_set_accelerometer_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write za offset failed.\n");         /* write za offset failed*/
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079de:	4804      	ldr	r0, [pc, #16]	@ (80079f0 <mpu6500_set_accelerometer_z_offset+0x64>)
 80079e0:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}
 80079f0:	0801f6a0 	.word	0x0801f6a0

080079f4 <mpu6500_accelerometer_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_accelerometer_offset_convert_to_register(mpu6500_handle_t *handle, float mg, int16_t *reg)
{
 80079f4:	b480      	push	{r7}
 80079f6:	b085      	sub	sp, #20
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8007a00:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                 /* check handle */
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d101      	bne.n	8007a0c <mpu6500_accelerometer_offset_convert_to_register+0x18>
    {
        return 2;                       /* return error */
 8007a08:	2302      	movs	r3, #2
 8007a0a:	e014      	b.n	8007a36 <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)            /* check handle initialization */
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a12:	2b01      	cmp	r3, #1
 8007a14:	d001      	beq.n	8007a1a <mpu6500_accelerometer_offset_convert_to_register+0x26>
    {
        return 3;                       /* return error */
 8007a16:	2303      	movs	r3, #3
 8007a18:	e00d      	b.n	8007a36 <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(mg / 0.98f);       /* convert real data to register data */
 8007a1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8007a1e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007a44 <mpu6500_accelerometer_offset_convert_to_register+0x50>
 8007a22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a26:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007a2a:	ee17 3a90 	vmov	r3, s15
 8007a2e:	b21a      	sxth	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	801a      	strh	r2, [r3, #0]
    
    return 0;                           /* success return 0 */
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr
 8007a42:	bf00      	nop
 8007a44:	3f7ae148 	.word	0x3f7ae148

08007a48 <mpu6500_set_gyro_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	460b      	mov	r3, r1
 8007a52:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <mpu6500_set_gyro_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007a5a:	2302      	movs	r3, #2
 8007a5c:	e022      	b.n	8007aa4 <mpu6500_set_gyro_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d001      	beq.n	8007a6c <mpu6500_set_gyro_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007a68:	2303      	movs	r3, #3
 8007a6a:	e01b      	b.n	8007aa4 <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007a6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a70:	121b      	asrs	r3, r3, #8
 8007a72:	b21b      	sxth	r3, r3
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007a78:	887b      	ldrh	r3, [r7, #2]
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XG_OFFSET_H, buf, 2);        /* write xg offset */
 8007a7e:	f107 020c 	add.w	r2, r7, #12
 8007a82:	2302      	movs	r3, #2
 8007a84:	2113      	movs	r1, #19
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f7fd fc6b 	bl	8005362 <a_mpu6500_write>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d005      	beq.n	8007aa2 <mpu6500_set_gyro_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xg offset failed.\n");         /* write xg offset failed*/
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a9a:	4804      	ldr	r0, [pc, #16]	@ (8007aac <mpu6500_set_gyro_x_offset+0x64>)
 8007a9c:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e000      	b.n	8007aa4 <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007aa2:	2300      	movs	r3, #0
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3710      	adds	r7, #16
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}
 8007aac:	0801f6e8 	.word	0x0801f6e8

08007ab0 <mpu6500_set_gyro_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b084      	sub	sp, #16
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d101      	bne.n	8007ac6 <mpu6500_set_gyro_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007ac2:	2302      	movs	r3, #2
 8007ac4:	e022      	b.n	8007b0c <mpu6500_set_gyro_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d001      	beq.n	8007ad4 <mpu6500_set_gyro_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007ad0:	2303      	movs	r3, #3
 8007ad2:	e01b      	b.n	8007b0c <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007ad4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007ad8:	121b      	asrs	r3, r3, #8
 8007ada:	b21b      	sxth	r3, r3
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007ae0:	887b      	ldrh	r3, [r7, #2]
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YG_OFFSET_H, buf, 2);        /* write yg offset */
 8007ae6:	f107 020c 	add.w	r2, r7, #12
 8007aea:	2302      	movs	r3, #2
 8007aec:	2115      	movs	r1, #21
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7fd fc37 	bl	8005362 <a_mpu6500_write>
 8007af4:	4603      	mov	r3, r0
 8007af6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007af8:	7bfb      	ldrb	r3, [r7, #15]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d005      	beq.n	8007b0a <mpu6500_set_gyro_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write yg offset failed.\n");         /* write yg offset failed*/
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b02:	4804      	ldr	r0, [pc, #16]	@ (8007b14 <mpu6500_set_gyro_y_offset+0x64>)
 8007b04:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007b06:	2301      	movs	r3, #1
 8007b08:	e000      	b.n	8007b0c <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}
 8007b14:	0801f730 	.word	0x0801f730

08007b18 <mpu6500_set_gyro_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <mpu6500_set_gyro_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e022      	b.n	8007b74 <mpu6500_set_gyro_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d001      	beq.n	8007b3c <mpu6500_set_gyro_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e01b      	b.n	8007b74 <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007b3c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b40:	121b      	asrs	r3, r3, #8
 8007b42:	b21b      	sxth	r3, r3
 8007b44:	b2db      	uxtb	r3, r3
 8007b46:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007b48:	887b      	ldrh	r3, [r7, #2]
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZG_OFFSET_H, buf, 2);        /* write zg offset */
 8007b4e:	f107 020c 	add.w	r2, r7, #12
 8007b52:	2302      	movs	r3, #2
 8007b54:	2117      	movs	r1, #23
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7fd fc03 	bl	8005362 <a_mpu6500_write>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d005      	beq.n	8007b72 <mpu6500_set_gyro_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write zg offset failed.\n");         /* write zg offset failed*/
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b6a:	4804      	ldr	r0, [pc, #16]	@ (8007b7c <mpu6500_set_gyro_z_offset+0x64>)
 8007b6c:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e000      	b.n	8007b74 <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3710      	adds	r7, #16
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	0801f778 	.word	0x0801f778

08007b80 <mpu6500_gyro_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_gyro_offset_convert_to_register(mpu6500_handle_t *handle, float dps, int16_t *reg)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	ed87 0a02 	vstr	s0, [r7, #8]
 8007b8c:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                     /* check handle */
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <mpu6500_gyro_offset_convert_to_register+0x18>
    {
        return 2;                           /* return error */
 8007b94:	2302      	movs	r3, #2
 8007b96:	e014      	b.n	8007bc2 <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)                /* check handle initialization */
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d001      	beq.n	8007ba6 <mpu6500_gyro_offset_convert_to_register+0x26>
    {
        return 3;                           /* return error */
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e00d      	b.n	8007bc2 <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(dps / 0.0305f);        /* convert real data to register data */
 8007ba6:	ed97 7a02 	vldr	s14, [r7, #8]
 8007baa:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007bd0 <mpu6500_gyro_offset_convert_to_register+0x50>
 8007bae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007bb2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007bb6:	ee17 3a90 	vmov	r3, s15
 8007bba:	b21a      	sxth	r2, r3
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	801a      	strh	r2, [r3, #0]
    
    return 0;                               /* success return 0 */
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3714      	adds	r7, #20
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	3cf9db23 	.word	0x3cf9db23

08007bd4 <ring_buffer_init>:

#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define MAX(X, Y) (((X) > (Y)) ? (X) : (Y))


uint8_t ring_buffer_init(ring_buffer_t* rb, uint8_t* buffer, size_t size) {
 8007bd4:	b480      	push	{r7}
 8007bd6:	b085      	sub	sp, #20
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
	if (rb == NULL || buffer == NULL || size < (size_t)2) {
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d005      	beq.n	8007bf2 <ring_buffer_init+0x1e>
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d002      	beq.n	8007bf2 <ring_buffer_init+0x1e>
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d801      	bhi.n	8007bf6 <ring_buffer_init+0x22>
		// Must have valid pointers and buffer size ≥ 2
		return RING_BUFFER_ERROR_INVALID_PARAMETERS;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e00c      	b.n	8007c10 <ring_buffer_init+0x3c>
	}

	rb->buffer = buffer;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	601a      	str	r2, [r3, #0]
	rb->size = size;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	605a      	str	r2, [r3, #4]
	rb->head = (size_t)0;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2200      	movs	r2, #0
 8007c06:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	60da      	str	r2, [r3, #12]

	return RING_BUFFER_SUCCESS;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <ring_buffer_free_space>:
//		return rb->tail - rb->head - (size_t)1; // Free space when tail is ahead of head
//	}
//}


size_t ring_buffer_free_space(ring_buffer_t* rb) {
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->tail + rb->size - rb->head - (size_t)1) % rb->size;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	68da      	ldr	r2, [r3, #12]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	685b      	ldr	r3, [r3, #4]
 8007c2c:	441a      	add	r2, r3
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	3b01      	subs	r3, #1
 8007c36:	687a      	ldr	r2, [r7, #4]
 8007c38:	6852      	ldr	r2, [r2, #4]
 8007c3a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c3e:	fb01 f202 	mul.w	r2, r1, r2
 8007c42:	1a9b      	subs	r3, r3, r2
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <ring_buffer_used_space>:
uint8_t ring_buffer_is_full(ring_buffer_t* rb) {
	//if (rb == NULL) return (size_t)0;
	return (uint8_t) (((rb->head + (size_t)1) % rb->size) == rb->tail);
}

size_t ring_buffer_used_space(ring_buffer_t* rb) {
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->head + rb->size - rb->tail) % rb->size;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	685b      	ldr	r3, [r3, #4]
 8007c60:	441a      	add	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	1ad3      	subs	r3, r2, r3
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6852      	ldr	r2, [r2, #4]
 8007c6c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c70:	fb01 f202 	mul.w	r2, r1, r2
 8007c74:	1a9b      	subs	r3, r3, r2
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <ring_buffer_linear_free_space>:

 buffer size = 8, tail = 7, head = 2
 [ _ _ H _ _ _ _ T ]
 returns: 7 - 2 - 1 = 4 bytes available before reaching tail
*/
size_t ring_buffer_linear_free_space(ring_buffer_t* rb) {
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689a      	ldr	r2, [r3, #8]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d310      	bcc.n	8007cb8 <ring_buffer_linear_free_space+0x36>
		if (rb->tail == (size_t)0) {
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <ring_buffer_linear_free_space+0x2a>
			// Only leave one byte free to distinguish full/empty
			return rb->size - rb->head - (size_t)1;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	3b01      	subs	r3, #1
 8007caa:	e00b      	b.n	8007cc4 <ring_buffer_linear_free_space+0x42>
		}
		else {
			return rb->size - rb->head;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685a      	ldr	r2, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	e005      	b.n	8007cc4 <ring_buffer_linear_free_space+0x42>
		}
	}
	else {
		// Tail is before head, space is up to tail - 1
		return rb->tail - rb->head - (size_t)1;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	68da      	ldr	r2, [r3, #12]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	3b01      	subs	r3, #1
	}
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	370c      	adds	r7, #12
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <ring_buffer_linear_used_space>:



size_t ring_buffer_linear_used_space(ring_buffer_t* rb) {
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	689a      	ldr	r2, [r3, #8]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	68db      	ldr	r3, [r3, #12]
 8007ce0:	429a      	cmp	r2, r3
 8007ce2:	d305      	bcc.n	8007cf0 <ring_buffer_linear_used_space+0x20>
		// All used data is linear
		return rb->head - rb->tail;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	689a      	ldr	r2, [r3, #8]
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	e004      	b.n	8007cfa <ring_buffer_linear_used_space+0x2a>
	}
	else {
		// Used data wraps around, so linear part is from tail to end
		return rb->size - rb->tail;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	685a      	ldr	r2, [r3, #4]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	1ad3      	subs	r3, r2, r3
	}
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <ring_buffer_write_ptr>:



uint8_t* ring_buffer_write_ptr(ring_buffer_t* rb) {
 8007d06:	b480      	push	{r7}
 8007d08:	b083      	sub	sp, #12
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->head];
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681a      	ldr	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	689b      	ldr	r3, [r3, #8]
 8007d16:	4413      	add	r3, r2
}
 8007d18:	4618      	mov	r0, r3
 8007d1a:	370c      	adds	r7, #12
 8007d1c:	46bd      	mov	sp, r7
 8007d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d22:	4770      	bx	lr

08007d24 <ring_buffer_read_ptr>:


uint8_t* ring_buffer_read_ptr(ring_buffer_t* rb) {
 8007d24:	b480      	push	{r7}
 8007d26:	b083      	sub	sp, #12
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->tail];
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681a      	ldr	r2, [r3, #0]
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	4413      	add	r3, r2
}
 8007d36:	4618      	mov	r0, r3
 8007d38:	370c      	adds	r7, #12
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d40:	4770      	bx	lr

08007d42 <ring_buffer_enqueue_arr>:

size_t ring_buffer_enqueue_arr(ring_buffer_t* rb, uint8_t* byte_array, size_t len) {
 8007d42:	b580      	push	{r7, lr}
 8007d44:	b088      	sub	sp, #32
 8007d46:	af00      	add	r7, sp, #0
 8007d48:	60f8      	str	r0, [r7, #12]
 8007d4a:	60b9      	str	r1, [r7, #8]
 8007d4c:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || byte_array == NULL || rb->size == (size_t)0) {
//		return (size_t)0;
//	}

	size_t free_space = ring_buffer_free_space(rb);
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f7ff ff64 	bl	8007c1c <ring_buffer_free_space>
 8007d54:	61f8      	str	r0, [r7, #28]
	size_t to_write = MIN(len, free_space);
 8007d56:	69fa      	ldr	r2, [r7, #28]
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	bf28      	it	cs
 8007d5e:	4613      	movcs	r3, r2
 8007d60:	61bb      	str	r3, [r7, #24]

	size_t linear_part = MIN(ring_buffer_linear_free_space(rb), to_write);
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	f7ff ff8d 	bl	8007c82 <ring_buffer_linear_free_space>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	69bb      	ldr	r3, [r7, #24]
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d904      	bls.n	8007d7a <ring_buffer_enqueue_arr+0x38>
 8007d70:	68f8      	ldr	r0, [r7, #12]
 8007d72:	f7ff ff86 	bl	8007c82 <ring_buffer_linear_free_space>
 8007d76:	4603      	mov	r3, r0
 8007d78:	e000      	b.n	8007d7c <ring_buffer_enqueue_arr+0x3a>
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	617b      	str	r3, [r7, #20]
	memcpy(&rb->buffer[rb->head], byte_array, linear_part);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681a      	ldr	r2, [r3, #0]
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	4413      	add	r3, r2
 8007d88:	697a      	ldr	r2, [r7, #20]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f012 fc96 	bl	801a6be <memcpy>
	rb->head = (rb->head + linear_part) % rb->size;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	689a      	ldr	r2, [r3, #8]
 8007d96:	697b      	ldr	r3, [r7, #20]
 8007d98:	4413      	add	r3, r2
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	6852      	ldr	r2, [r2, #4]
 8007d9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007da2:	fb01 f202 	mul.w	r2, r1, r2
 8007da6:	1a9a      	subs	r2, r3, r2
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	609a      	str	r2, [r3, #8]

	size_t wrapped_part = to_write - linear_part;
 8007dac:	69ba      	ldr	r2, [r7, #24]
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	613b      	str	r3, [r7, #16]
	if (wrapped_part > (size_t)0) {
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d018      	beq.n	8007dec <ring_buffer_enqueue_arr+0xaa>
		memcpy(&rb->buffer[rb->head], &byte_array[linear_part], wrapped_part);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681a      	ldr	r2, [r3, #0]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	18d0      	adds	r0, r2, r3
 8007dc4:	68ba      	ldr	r2, [r7, #8]
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	4413      	add	r3, r2
 8007dca:	693a      	ldr	r2, [r7, #16]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f012 fc76 	bl	801a6be <memcpy>
		rb->head = (rb->head + wrapped_part) % rb->size;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	689a      	ldr	r2, [r3, #8]
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	4413      	add	r3, r2
 8007dda:	68fa      	ldr	r2, [r7, #12]
 8007ddc:	6852      	ldr	r2, [r2, #4]
 8007dde:	fbb3 f1f2 	udiv	r1, r3, r2
 8007de2:	fb01 f202 	mul.w	r2, r1, r2
 8007de6:	1a9a      	subs	r2, r3, r2
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	609a      	str	r2, [r3, #8]
	}

	return to_write;
 8007dec:	69bb      	ldr	r3, [r7, #24]
}
 8007dee:	4618      	mov	r0, r3
 8007df0:	3720      	adds	r7, #32
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <ring_buffer_dequeue_arr>:


size_t ring_buffer_dequeue_arr(ring_buffer_t* rb, uint8_t* out_array, size_t len) {
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b08a      	sub	sp, #40	@ 0x28
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0 || out_array == NULL) {
//		return (size_t)0;
//	}

	size_t used = ring_buffer_used_space(rb);
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7ff ff24 	bl	8007c50 <ring_buffer_used_space>
 8007e08:	6278      	str	r0, [r7, #36]	@ 0x24
	if (used == (size_t)0) {
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <ring_buffer_dequeue_arr+0x1e>
		return (size_t)0; // Nothing to read
 8007e10:	2300      	movs	r3, #0
 8007e12:	e048      	b.n	8007ea6 <ring_buffer_dequeue_arr+0xb0>
	}

	size_t to_read = MIN(len, used);
 8007e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	bf28      	it	cs
 8007e1c:	4613      	movcs	r3, r2
 8007e1e:	623b      	str	r3, [r7, #32]

	// How many bytes we can read linearly (without wrapping)
	size_t linear_data = ring_buffer_linear_used_space(rb);
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f7ff ff55 	bl	8007cd0 <ring_buffer_linear_used_space>
 8007e26:	61f8      	str	r0, [r7, #28]

	
	size_t first_chunk = MIN(to_read, linear_data);
 8007e28:	69fa      	ldr	r2, [r7, #28]
 8007e2a:	6a3b      	ldr	r3, [r7, #32]
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	bf28      	it	cs
 8007e30:	4613      	movcs	r3, r2
 8007e32:	61bb      	str	r3, [r7, #24]

	memcpy(out_array, &rb->buffer[rb->tail], first_chunk);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681a      	ldr	r2, [r3, #0]
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	68db      	ldr	r3, [r3, #12]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	69ba      	ldr	r2, [r7, #24]
 8007e40:	4619      	mov	r1, r3
 8007e42:	68b8      	ldr	r0, [r7, #8]
 8007e44:	f012 fc3b 	bl	801a6be <memcpy>
	rb->tail = (rb->tail + first_chunk) % rb->size;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	68da      	ldr	r2, [r3, #12]
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	4413      	add	r3, r2
 8007e50:	68fa      	ldr	r2, [r7, #12]
 8007e52:	6852      	ldr	r2, [r2, #4]
 8007e54:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e58:	fb01 f202 	mul.w	r2, r1, r2
 8007e5c:	1a9a      	subs	r2, r3, r2
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	60da      	str	r2, [r3, #12]

	if (to_read > first_chunk) {
 8007e62:	6a3a      	ldr	r2, [r7, #32]
 8007e64:	69bb      	ldr	r3, [r7, #24]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d91c      	bls.n	8007ea4 <ring_buffer_dequeue_arr+0xae>
		size_t second_chunk = to_read - first_chunk;
 8007e6a:	6a3a      	ldr	r2, [r7, #32]
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	1ad3      	subs	r3, r2, r3
 8007e70:	617b      	str	r3, [r7, #20]
		memcpy(&out_array[first_chunk], &rb->buffer[rb->tail], second_chunk);
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	18d0      	adds	r0, r2, r3
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	4413      	add	r3, r2
 8007e82:	697a      	ldr	r2, [r7, #20]
 8007e84:	4619      	mov	r1, r3
 8007e86:	f012 fc1a 	bl	801a6be <memcpy>
		rb->tail = (rb->tail + second_chunk) % rb->size;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	4413      	add	r3, r2
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	6852      	ldr	r2, [r2, #4]
 8007e96:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e9a:	fb01 f202 	mul.w	r2, r1, r2
 8007e9e:	1a9a      	subs	r2, r3, r2
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	60da      	str	r2, [r3, #12]
	}

	return (size_t)to_read;
 8007ea4:	6a3b      	ldr	r3, [r7, #32]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3728      	adds	r7, #40	@ 0x28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}

08007eae <ring_buffer_advance_tail>:
	}

	return to_peek - offset;
}

void ring_buffer_advance_tail(ring_buffer_t* rb, size_t len) {
 8007eae:	b580      	push	{r7, lr}
 8007eb0:	b084      	sub	sp, #16
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
 8007eb6:	6039      	str	r1, [r7, #0]
//	if (rb == NULL) {
//		return;
//	}
	size_t used = ring_buffer_used_space(rb);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f7ff fec9 	bl	8007c50 <ring_buffer_used_space>
 8007ebe:	60f8      	str	r0, [r7, #12]
	size_t advance_len = MIN(len, used);
 8007ec0:	68fa      	ldr	r2, [r7, #12]
 8007ec2:	683b      	ldr	r3, [r7, #0]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	bf28      	it	cs
 8007ec8:	4613      	movcs	r3, r2
 8007eca:	60bb      	str	r3, [r7, #8]
	rb->tail = (rb->tail + advance_len) % rb->size;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	68da      	ldr	r2, [r3, #12]
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4413      	add	r3, r2
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	6852      	ldr	r2, [r2, #4]
 8007ed8:	fbb3 f1f2 	udiv	r1, r3, r2
 8007edc:	fb01 f202 	mul.w	r2, r1, r2
 8007ee0:	1a9a      	subs	r2, r3, r2
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60da      	str	r2, [r3, #12]
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <ring_buffer_clear>:
	size_t free_space = ring_buffer_free_space(rb);
	size_t advance_len = MIN(len, free_space);
	rb->head = (rb->head + advance_len) % rb->size;
}

void ring_buffer_clear(ring_buffer_t* rb) {
 8007eee:	b480      	push	{r7}
 8007ef0:	b083      	sub	sp, #12
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
//	if (rb == NULL) {
//		return;
//	}
	rb->head = (size_t)0;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	60da      	str	r2, [r3, #12]
}
 8007f02:	bf00      	nop
 8007f04:	370c      	adds	r7, #12
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
	...

08007f10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b082      	sub	sp, #8
 8007f14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007f16:	2300      	movs	r3, #0
 8007f18:	607b      	str	r3, [r7, #4]
 8007f1a:	4b10      	ldr	r3, [pc, #64]	@ (8007f5c <MX_DMA_Init+0x4c>)
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f1e:	4a0f      	ldr	r2, [pc, #60]	@ (8007f5c <MX_DMA_Init+0x4c>)
 8007f20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8007f26:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <MX_DMA_Init+0x4c>)
 8007f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007f2e:	607b      	str	r3, [r7, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8007f32:	2200      	movs	r2, #0
 8007f34:	2105      	movs	r1, #5
 8007f36:	203a      	movs	r0, #58	@ 0x3a
 8007f38:	f002 fb48 	bl	800a5cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007f3c:	203a      	movs	r0, #58	@ 0x3a
 8007f3e:	f002 fb61 	bl	800a604 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8007f42:	2200      	movs	r2, #0
 8007f44:	2105      	movs	r1, #5
 8007f46:	2046      	movs	r0, #70	@ 0x46
 8007f48:	f002 fb40 	bl	800a5cc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8007f4c:	2046      	movs	r0, #70	@ 0x46
 8007f4e:	f002 fb59 	bl	800a604 <HAL_NVIC_EnableIRQ>

}
 8007f52:	bf00      	nop
 8007f54:	3708      	adds	r7, #8
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	40023800 	.word	0x40023800

08007f60 <arr_from_freqf>:
// esc_pwm_dc.c
#include "esc_pwm.h"

static inline uint32_t arr_from_freqf(uint32_t base_hz, float pwm_hz_f) {
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
 8007f68:	ed87 0a00 	vstr	s0, [r7]
    if (pwm_hz_f < 1e-3f) pwm_hz_f = 1e-3f;           // protecție
 8007f6c:	edd7 7a00 	vldr	s15, [r7]
 8007f70:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8007fd8 <arr_from_freqf+0x78>
 8007f74:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f7c:	d501      	bpl.n	8007f82 <arr_from_freqf+0x22>
 8007f7e:	4b17      	ldr	r3, [pc, #92]	@ (8007fdc <arr_from_freqf+0x7c>)
 8007f80:	603b      	str	r3, [r7, #0]
    double ticks = (float)base_hz / (float)pwm_hz_f; // folosește double pt. precizie
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	ee07 3a90 	vmov	s15, r3
 8007f88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f8c:	edd7 7a00 	vldr	s15, [r7]
 8007f90:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007f94:	ee16 0a90 	vmov	r0, s13
 8007f98:	f7f8 fad6 	bl	8000548 <__aeabi_f2d>
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint32_t period_ticks = (uint32_t)(ticks + 0.5);   // rotunjire la cel mai apropiat
 8007fa4:	f04f 0200 	mov.w	r2, #0
 8007fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8007fe0 <arr_from_freqf+0x80>)
 8007faa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007fae:	f7f8 f96d 	bl	800028c <__adddf3>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	4619      	mov	r1, r3
 8007fba:	f7f8 fdf5 	bl	8000ba8 <__aeabi_d2uiz>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	617b      	str	r3, [r7, #20]
    if (period_ticks < 1u) period_ticks = 1u;
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <arr_from_freqf+0x6c>
 8007fc8:	2301      	movs	r3, #1
 8007fca:	617b      	str	r3, [r7, #20]
    return period_ticks - 1u;                          // ARR = top - 1
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	3b01      	subs	r3, #1
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3718      	adds	r7, #24
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}
 8007fd8:	3a83126f 	.word	0x3a83126f
 8007fdc:	3a83126f 	.word	0x3a83126f
 8007fe0:	3fe00000 	.word	0x3fe00000

08007fe4 <ccr_from_duty>:

static inline uint32_t ccr_from_duty(uint32_t arr, float duty) {
 8007fe4:	b480      	push	{r7}
 8007fe6:	b085      	sub	sp, #20
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	ed87 0a00 	vstr	s0, [r7]
    if (duty < 0.0f) duty = 0.0f;
 8007ff0:	edd7 7a00 	vldr	s15, [r7]
 8007ff4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ffc:	d502      	bpl.n	8008004 <ccr_from_duty+0x20>
 8007ffe:	f04f 0300 	mov.w	r3, #0
 8008002:	603b      	str	r3, [r7, #0]
    if (duty > 1.0f) duty = 1.0f;
 8008004:	edd7 7a00 	vldr	s15, [r7]
 8008008:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800800c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008010:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008014:	dd02      	ble.n	800801c <ccr_from_duty+0x38>
 8008016:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800801a:	603b      	str	r3, [r7, #0]
    uint32_t top = arr + 1u;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	3301      	adds	r3, #1
 8008020:	60bb      	str	r3, [r7, #8]
    uint32_t ccr = (uint32_t)((float)top * (float)duty + 0.5f);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	ee07 3a90 	vmov	s15, r3
 8008028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800802c:	edd7 7a00 	vldr	s15, [r7]
 8008030:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008034:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008038:	ee77 7a87 	vadd.f32	s15, s15, s14
 800803c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008040:	ee17 3a90 	vmov	r3, s15
 8008044:	60fb      	str	r3, [r7, #12]
    if (ccr > arr) ccr = arr;
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	429a      	cmp	r2, r3
 800804c:	d901      	bls.n	8008052 <ccr_from_duty+0x6e>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	60fb      	str	r3, [r7, #12]
    return ccr;
 8008052:	68fb      	ldr	r3, [r7, #12]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3714      	adds	r7, #20
 8008058:	46bd      	mov	sp, r7
 800805a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805e:	4770      	bx	lr

08008060 <pwm_init>:
// 1) make this non-static and let caller provide storage, or
// 2) keep an array of TIM_HandleTypeDef.
HAL_StatusTypeDef pwm_init(pwm_t *esc,
    TIM_HandleTypeDef *htim, uint32_t channel,
    uint32_t timer_clock_hz, float pwm_hz, float duty)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b09c      	sub	sp, #112	@ 0x70
 8008064:	af00      	add	r7, sp, #0
 8008066:	6178      	str	r0, [r7, #20]
 8008068:	6139      	str	r1, [r7, #16]
 800806a:	60fa      	str	r2, [r7, #12]
 800806c:	60bb      	str	r3, [r7, #8]
 800806e:	ed87 0a01 	vstr	s0, [r7, #4]
 8008072:	edc7 0a00 	vstr	s1, [r7]
    if (!esc || !htim) return HAL_ERROR;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d002      	beq.n	8008082 <pwm_init+0x22>
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <pwm_init+0x26>
 8008082:	2301      	movs	r3, #1
 8008084:	e0de      	b.n	8008244 <pwm_init+0x1e4>
    if (timer_clock_hz < 1000000u) return HAL_ERROR;
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	4a70      	ldr	r2, [pc, #448]	@ (800824c <pwm_init+0x1ec>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d801      	bhi.n	8008092 <pwm_init+0x32>
 800808e:	2301      	movs	r3, #1
 8008090:	e0d8      	b.n	8008244 <pwm_init+0x1e4>

    HAL_StatusTypeDef st;
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008092:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008096:	2200      	movs	r2, #0
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800809c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]
 80080a4:	605a      	str	r2, [r3, #4]
 80080a6:	609a      	str	r2, [r3, #8]
 80080a8:	60da      	str	r2, [r3, #12]
 80080aa:	611a      	str	r2, [r3, #16]
 80080ac:	615a      	str	r2, [r3, #20]
 80080ae:	619a      	str	r2, [r3, #24]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80080b0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80080b4:	2200      	movs	r2, #0
 80080b6:	601a      	str	r2, [r3, #0]
 80080b8:	605a      	str	r2, [r3, #4]
 80080ba:	609a      	str	r2, [r3, #8]
 80080bc:	60da      	str	r2, [r3, #12]

    esc->htim       = htim;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	693a      	ldr	r2, [r7, #16]
 80080c2:	601a      	str	r2, [r3, #0]
    esc->channel    = channel;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	68fa      	ldr	r2, [r7, #12]
 80080c8:	605a      	str	r2, [r3, #4]
    esc->tim_clk_hz = timer_clock_hz;
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	ee07 3a90 	vmov	s15, r3
 80080d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d4:	697b      	ldr	r3, [r7, #20]
 80080d6:	edc3 7a02 	vstr	s15, [r3, #8]
    esc->pwm_hz     = (pwm_hz <= 0.0f) ? 50.0f : pwm_hz;
 80080da:	edd7 7a01 	vldr	s15, [r7, #4]
 80080de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80080e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e6:	d801      	bhi.n	80080ec <pwm_init+0x8c>
 80080e8:	4b59      	ldr	r3, [pc, #356]	@ (8008250 <pwm_init+0x1f0>)
 80080ea:	e000      	b.n	80080ee <pwm_init+0x8e>
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	697a      	ldr	r2, [r7, #20]
 80080f0:	60d3      	str	r3, [r2, #12]
    esc->duty       = (duty < 0.0f) ? 0.0f : (duty > 1.0f ? 1.0f : duty);
 80080f2:	edd7 7a00 	vldr	s15, [r7]
 80080f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80080fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080fe:	d502      	bpl.n	8008106 <pwm_init+0xa6>
 8008100:	f04f 0300 	mov.w	r3, #0
 8008104:	e00c      	b.n	8008120 <pwm_init+0xc0>
 8008106:	edd7 7a00 	vldr	s15, [r7]
 800810a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800810e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008116:	dd02      	ble.n	800811e <pwm_init+0xbe>
 8008118:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800811c:	e000      	b.n	8008120 <pwm_init+0xc0>
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	6113      	str	r3, [r2, #16]

    uint32_t psc = (timer_clock_hz / 1000000u) - 1u;  // 1 MHz base
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4a4b      	ldr	r2, [pc, #300]	@ (8008254 <pwm_init+0x1f4>)
 8008128:	fba2 2303 	umull	r2, r3, r2, r3
 800812c:	0c9b      	lsrs	r3, r3, #18
 800812e:	3b01      	subs	r3, #1
 8008130:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (psc > 0xFFFFu) return HAL_ERROR;
 8008132:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008138:	d301      	bcc.n	800813e <pwm_init+0xde>
 800813a:	2301      	movs	r3, #1
 800813c:	e082      	b.n	8008244 <pwm_init+0x1e4>

    //HAL_TIM_Base_DeInit(htim);
    HAL_TIM_PWM_DeInit(htim);
 800813e:	6938      	ldr	r0, [r7, #16]
 8008140:	f005 fff3 	bl	800e12a <HAL_TIM_PWM_DeInit>

    htim->Init.Prescaler         = psc;
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008148:	605a      	str	r2, [r3, #4]
    htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 800814a:	693b      	ldr	r3, [r7, #16]
 800814c:	2200      	movs	r2, #0
 800814e:	609a      	str	r2, [r3, #8]
    htim->Init.Period            = arr_from_freqf(1000000u, esc->pwm_hz);
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	edd3 7a03 	vldr	s15, [r3, #12]
 8008156:	eeb0 0a67 	vmov.f32	s0, s15
 800815a:	483f      	ldr	r0, [pc, #252]	@ (8008258 <pwm_init+0x1f8>)
 800815c:	f7ff ff00 	bl	8007f60 <arr_from_freqf>
 8008160:	4602      	mov	r2, r0
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	60da      	str	r2, [r3, #12]
    htim->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	2200      	movs	r2, #0
 800816a:	611a      	str	r2, [r3, #16]
    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	2280      	movs	r2, #128	@ 0x80
 8008170:	619a      	str	r2, [r3, #24]

    st = HAL_TIM_Base_Init(htim);
 8008172:	6938      	ldr	r0, [r7, #16]
 8008174:	f005 fe62 	bl	800de3c <HAL_TIM_Base_Init>
 8008178:	4603      	mov	r3, r0
 800817a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 800817e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008182:	2b00      	cmp	r3, #0
 8008184:	d002      	beq.n	800818c <pwm_init+0x12c>
 8008186:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800818a:	e05b      	b.n	8008244 <pwm_init+0x1e4>


    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800818c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008190:	637b      	str	r3, [r7, #52]	@ 0x34
    st = HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 8008192:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008196:	4619      	mov	r1, r3
 8008198:	6938      	ldr	r0, [r7, #16]
 800819a:	f006 faa9 	bl	800e6f0 <HAL_TIM_ConfigClockSource>
 800819e:	4603      	mov	r3, r0
 80081a0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

    st = HAL_TIM_PWM_Init(htim);
 80081a4:	6938      	ldr	r0, [r7, #16]
 80081a6:	f005 ff71 	bl	800e08c <HAL_TIM_PWM_Init>
 80081aa:	4603      	mov	r3, r0
 80081ac:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 80081b0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d002      	beq.n	80081be <pwm_init+0x15e>
 80081b8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80081bc:	e042      	b.n	8008244 <pwm_init+0x1e4>


    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80081be:	2300      	movs	r3, #0
 80081c0:	663b      	str	r3, [r7, #96]	@ 0x60
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80081c2:	2300      	movs	r3, #0
 80081c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 80081c6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80081ca:	4619      	mov	r1, r3
 80081cc:	6938      	ldr	r0, [r7, #16]
 80081ce:	f006 fe9b 	bl	800ef08 <HAL_TIMEx_MasterConfigSynchronization>
    if (st != HAL_OK) return st;
 80081d2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d002      	beq.n	80081e0 <pwm_init+0x180>
 80081da:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80081de:	e031      	b.n	8008244 <pwm_init+0x1e4>


    TIM_OC_InitTypeDef oc = {0};
 80081e0:	f107 0318 	add.w	r3, r7, #24
 80081e4:	2200      	movs	r2, #0
 80081e6:	601a      	str	r2, [r3, #0]
 80081e8:	605a      	str	r2, [r3, #4]
 80081ea:	609a      	str	r2, [r3, #8]
 80081ec:	60da      	str	r2, [r3, #12]
 80081ee:	611a      	str	r2, [r3, #16]
 80081f0:	615a      	str	r2, [r3, #20]
 80081f2:	619a      	str	r2, [r3, #24]
    oc.OCMode     = TIM_OCMODE_PWM1;
 80081f4:	2360      	movs	r3, #96	@ 0x60
 80081f6:	61bb      	str	r3, [r7, #24]
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 80081f8:	2300      	movs	r3, #0
 80081fa:	623b      	str	r3, [r7, #32]
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 80081fc:	2300      	movs	r3, #0
 80081fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    oc.Pulse      = ccr_from_duty(htim->Init.Period, esc->duty);
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	68da      	ldr	r2, [r3, #12]
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	edd3 7a04 	vldr	s15, [r3, #16]
 800820a:	eeb0 0a67 	vmov.f32	s0, s15
 800820e:	4610      	mov	r0, r2
 8008210:	f7ff fee8 	bl	8007fe4 <ccr_from_duty>
 8008214:	4603      	mov	r3, r0
 8008216:	61fb      	str	r3, [r7, #28]

    st = HAL_TIM_PWM_ConfigChannel(htim, &oc, channel);
 8008218:	f107 0318 	add.w	r3, r7, #24
 800821c:	68fa      	ldr	r2, [r7, #12]
 800821e:	4619      	mov	r1, r3
 8008220:	6938      	ldr	r0, [r7, #16]
 8008222:	f006 f9a3 	bl	800e56c <HAL_TIM_PWM_ConfigChannel>
 8008226:	4603      	mov	r3, r0
 8008228:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 800822c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <pwm_init+0x1da>
 8008234:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008238:	e004      	b.n	8008244 <pwm_init+0x1e4>

    return HAL_TIM_PWM_Start(htim, channel);
 800823a:	68f9      	ldr	r1, [r7, #12]
 800823c:	6938      	ldr	r0, [r7, #16]
 800823e:	f005 ffdd 	bl	800e1fc <HAL_TIM_PWM_Start>
 8008242:	4603      	mov	r3, r0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3770      	adds	r7, #112	@ 0x70
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}
 800824c:	000f423f 	.word	0x000f423f
 8008250:	42480000 	.word	0x42480000
 8008254:	431bde83 	.word	0x431bde83
 8008258:	000f4240 	.word	0x000f4240

0800825c <pwm_set_duty>:



void pwm_set_duty(pwm_t *esc, float duty_0_1) {
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
 8008264:	ed87 0a00 	vstr	s0, [r7]
    if (!esc) return;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d04a      	beq.n	8008304 <pwm_set_duty+0xa8>
    esc->duty = (duty_0_1 < 0.0f) ? 0.0f : (duty_0_1 > 1.0f ? 1.0f : duty_0_1);
 800826e:	edd7 7a00 	vldr	s15, [r7]
 8008272:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800827a:	d502      	bpl.n	8008282 <pwm_set_duty+0x26>
 800827c:	f04f 0300 	mov.w	r3, #0
 8008280:	e00c      	b.n	800829c <pwm_set_duty+0x40>
 8008282:	edd7 7a00 	vldr	s15, [r7]
 8008286:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800828a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800828e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008292:	dd02      	ble.n	800829a <pwm_set_duty+0x3e>
 8008294:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008298:	e000      	b.n	800829c <pwm_set_duty+0x40>
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	687a      	ldr	r2, [r7, #4]
 800829e:	6113      	str	r3, [r2, #16]
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(esc->htim);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082a8:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = ccr_from_duty(arr, esc->duty);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80082b0:	eeb0 0a67 	vmov.f32	s0, s15
 80082b4:	68f8      	ldr	r0, [r7, #12]
 80082b6:	f7ff fe95 	bl	8007fe4 <ccr_from_duty>
 80082ba:	60b8      	str	r0, [r7, #8]
    __HAL_TIM_SET_COMPARE(esc->htim, esc->channel, ccr);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	685b      	ldr	r3, [r3, #4]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d105      	bne.n	80082d0 <pwm_set_duty+0x74>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68ba      	ldr	r2, [r7, #8]
 80082cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80082ce:	e01a      	b.n	8008306 <pwm_set_duty+0xaa>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	2b04      	cmp	r3, #4
 80082d6:	d105      	bne.n	80082e4 <pwm_set_duty+0x88>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	681a      	ldr	r2, [r3, #0]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	6393      	str	r3, [r2, #56]	@ 0x38
 80082e2:	e010      	b.n	8008306 <pwm_set_duty+0xaa>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	2b08      	cmp	r3, #8
 80082ea:	d105      	bne.n	80082f8 <pwm_set_duty+0x9c>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	681a      	ldr	r2, [r3, #0]
 80082f2:	68bb      	ldr	r3, [r7, #8]
 80082f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80082f6:	e006      	b.n	8008306 <pwm_set_duty+0xaa>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	681a      	ldr	r2, [r3, #0]
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	6413      	str	r3, [r2, #64]	@ 0x40
 8008302:	e000      	b.n	8008306 <pwm_set_duty+0xaa>
    if (!esc) return;
 8008304:	bf00      	nop
}
 8008306:	3710      	adds	r7, #16
 8008308:	46bd      	mov	sp, r7
 800830a:	bd80      	pop	{r7, pc}

0800830c <esc_pwm_throttle_to_duty_cycle>:
    HAL_TIM_GenerateEvent(esc->htim, TIM_EVENTSOURCE_UPDATE);
    __HAL_TIM_ENABLE(esc->htim);
}

float esc_pwm_throttle_to_duty_cycle(float pwm_hz, float min_us, float max_us, float throttle)
{
 800830c:	b480      	push	{r7}
 800830e:	b089      	sub	sp, #36	@ 0x24
 8008310:	af00      	add	r7, sp, #0
 8008312:	ed87 0a03 	vstr	s0, [r7, #12]
 8008316:	edc7 0a02 	vstr	s1, [r7, #8]
 800831a:	ed87 1a01 	vstr	s2, [r7, #4]
 800831e:	edc7 1a00 	vstr	s3, [r7]
    if (throttle < 0.0f) throttle = 0.0f;
 8008322:	edd7 7a00 	vldr	s15, [r7]
 8008326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800832a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832e:	d502      	bpl.n	8008336 <esc_pwm_throttle_to_duty_cycle+0x2a>
 8008330:	f04f 0300 	mov.w	r3, #0
 8008334:	603b      	str	r3, [r7, #0]
    if (throttle > 1.0f) throttle = 1.0f;
 8008336:	edd7 7a00 	vldr	s15, [r7]
 800833a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800833e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008346:	dd02      	ble.n	800834e <esc_pwm_throttle_to_duty_cycle+0x42>
 8008348:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800834c:	603b      	str	r3, [r7, #0]

    // Period of the PWM in microseconds
    float period_us = 1000000.0f / pwm_hz;
 800834e:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80083d0 <esc_pwm_throttle_to_duty_cycle+0xc4>
 8008352:	ed97 7a03 	vldr	s14, [r7, #12]
 8008356:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800835a:	edc7 7a06 	vstr	s15, [r7, #24]

    // Map throttle to pulse width in microseconds
    float pulse_us = min_us + throttle * (max_us - min_us);
 800835e:	ed97 7a01 	vldr	s14, [r7, #4]
 8008362:	edd7 7a02 	vldr	s15, [r7, #8]
 8008366:	ee37 7a67 	vsub.f32	s14, s14, s15
 800836a:	edd7 7a00 	vldr	s15, [r7]
 800836e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008372:	ed97 7a02 	vldr	s14, [r7, #8]
 8008376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800837a:	edc7 7a05 	vstr	s15, [r7, #20]

    // Duty cycle = pulse / period
    float duty = pulse_us / period_us;
 800837e:	edd7 6a05 	vldr	s13, [r7, #20]
 8008382:	ed97 7a06 	vldr	s14, [r7, #24]
 8008386:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800838a:	edc7 7a07 	vstr	s15, [r7, #28]

    // Clamp to [0..1]
    if (duty < 0.0f) duty = 0.0f;
 800838e:	edd7 7a07 	vldr	s15, [r7, #28]
 8008392:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008396:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800839a:	d502      	bpl.n	80083a2 <esc_pwm_throttle_to_duty_cycle+0x96>
 800839c:	f04f 0300 	mov.w	r3, #0
 80083a0:	61fb      	str	r3, [r7, #28]
    if (duty > 1.0f) duty = 1.0f;
 80083a2:	edd7 7a07 	vldr	s15, [r7, #28]
 80083a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083b2:	dd02      	ble.n	80083ba <esc_pwm_throttle_to_duty_cycle+0xae>
 80083b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80083b8:	61fb      	str	r3, [r7, #28]

    return duty;
 80083ba:	69fb      	ldr	r3, [r7, #28]
 80083bc:	ee07 3a90 	vmov	s15, r3
}
 80083c0:	eeb0 0a67 	vmov.f32	s0, s15
 80083c4:	3724      	adds	r7, #36	@ 0x24
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr
 80083ce:	bf00      	nop
 80083d0:	49742400 	.word	0x49742400

080083d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80083d8:	4a08      	ldr	r2, [pc, #32]	@ (80083fc <MX_FREERTOS_Init+0x28>)
 80083da:	2100      	movs	r1, #0
 80083dc:	4808      	ldr	r0, [pc, #32]	@ (8008400 <MX_FREERTOS_Init+0x2c>)
 80083de:	f00b fb83 	bl	8013ae8 <osThreadNew>
 80083e2:	4603      	mov	r3, r0
 80083e4:	4a07      	ldr	r2, [pc, #28]	@ (8008404 <MX_FREERTOS_Init+0x30>)
 80083e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  flignt_controller_taskHandle = osThreadNew(app_main, NULL, &flignt_controller_task_attributes);
 80083e8:	4a07      	ldr	r2, [pc, #28]	@ (8008408 <MX_FREERTOS_Init+0x34>)
 80083ea:	2100      	movs	r1, #0
 80083ec:	4807      	ldr	r0, [pc, #28]	@ (800840c <MX_FREERTOS_Init+0x38>)
 80083ee:	f00b fb7b 	bl	8013ae8 <osThreadNew>
 80083f2:	4603      	mov	r3, r0
 80083f4:	4a06      	ldr	r2, [pc, #24]	@ (8008410 <MX_FREERTOS_Init+0x3c>)
 80083f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80083f8:	bf00      	nop
 80083fa:	bd80      	pop	{r7, pc}
 80083fc:	08020204 	.word	0x08020204
 8008400:	08008415 	.word	0x08008415
 8008404:	20002824 	.word	0x20002824
 8008408:	080201e0 	.word	0x080201e0
 800840c:	080091b1 	.word	0x080091b1
 8008410:	20000778 	.word	0x20000778

08008414 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 800841c:	f00e fcac 	bl	8016d78 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1000);
 8008420:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008424:	f00b fbf2 	bl	8013c0c <osDelay>
 8008428:	e7fa      	b.n	8008420 <StartDefaultTask+0xc>
	...

0800842c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800842c:	b580      	push	{r7, lr}
 800842e:	b08a      	sub	sp, #40	@ 0x28
 8008430:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008432:	f107 0314 	add.w	r3, r7, #20
 8008436:	2200      	movs	r2, #0
 8008438:	601a      	str	r2, [r3, #0]
 800843a:	605a      	str	r2, [r3, #4]
 800843c:	609a      	str	r2, [r3, #8]
 800843e:	60da      	str	r2, [r3, #12]
 8008440:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008442:	2300      	movs	r3, #0
 8008444:	613b      	str	r3, [r7, #16]
 8008446:	4b26      	ldr	r3, [pc, #152]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 8008448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800844a:	4a25      	ldr	r2, [pc, #148]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 800844c:	f043 0304 	orr.w	r3, r3, #4
 8008450:	6313      	str	r3, [r2, #48]	@ 0x30
 8008452:	4b23      	ldr	r3, [pc, #140]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 8008454:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008456:	f003 0304 	and.w	r3, r3, #4
 800845a:	613b      	str	r3, [r7, #16]
 800845c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800845e:	2300      	movs	r3, #0
 8008460:	60fb      	str	r3, [r7, #12]
 8008462:	4b1f      	ldr	r3, [pc, #124]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 8008464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008466:	4a1e      	ldr	r2, [pc, #120]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 8008468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800846c:	6313      	str	r3, [r2, #48]	@ 0x30
 800846e:	4b1c      	ldr	r3, [pc, #112]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 8008470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008476:	60fb      	str	r3, [r7, #12]
 8008478:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800847a:	2300      	movs	r3, #0
 800847c:	60bb      	str	r3, [r7, #8]
 800847e:	4b18      	ldr	r3, [pc, #96]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 8008480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008482:	4a17      	ldr	r2, [pc, #92]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 8008484:	f043 0301 	orr.w	r3, r3, #1
 8008488:	6313      	str	r3, [r2, #48]	@ 0x30
 800848a:	4b15      	ldr	r3, [pc, #84]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 800848c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800848e:	f003 0301 	and.w	r3, r3, #1
 8008492:	60bb      	str	r3, [r7, #8]
 8008494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008496:	2300      	movs	r3, #0
 8008498:	607b      	str	r3, [r7, #4]
 800849a:	4b11      	ldr	r3, [pc, #68]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 800849c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800849e:	4a10      	ldr	r2, [pc, #64]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 80084a0:	f043 0302 	orr.w	r3, r3, #2
 80084a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80084a6:	4b0e      	ldr	r3, [pc, #56]	@ (80084e0 <MX_GPIO_Init+0xb4>)
 80084a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	607b      	str	r3, [r7, #4]
 80084b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 80084b2:	2200      	movs	r2, #0
 80084b4:	2110      	movs	r1, #16
 80084b6:	480b      	ldr	r0, [pc, #44]	@ (80084e4 <MX_GPIO_Init+0xb8>)
 80084b8:	f002 ffb8 	bl	800b42c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 80084bc:	2310      	movs	r3, #16
 80084be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80084c0:	2301      	movs	r3, #1
 80084c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084c8:	2300      	movs	r3, #0
 80084ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80084cc:	f107 0314 	add.w	r3, r7, #20
 80084d0:	4619      	mov	r1, r3
 80084d2:	4804      	ldr	r0, [pc, #16]	@ (80084e4 <MX_GPIO_Init+0xb8>)
 80084d4:	f002 fd12 	bl	800aefc <HAL_GPIO_Init>

}
 80084d8:	bf00      	nop
 80084da:	3728      	adds	r7, #40	@ 0x28
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}
 80084e0:	40023800 	.word	0x40023800
 80084e4:	40020000 	.word	0x40020000

080084e8 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len) {
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b086      	sub	sp, #24
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
    static char err_header[] = "ERROR->";
int sent_size = len;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	617b      	str	r3, [r7, #20]
    if (file == 2) { // stderror to usb
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d103      	bne.n	8008506 <_write+0x1e>
        //CDC_Transmit_FS((uint8_t*)err_header, sizeof(err_header) - 1);
        usart1_send_data(err_header, sizeof(err_header) - 1);
 80084fe:	2107      	movs	r1, #7
 8008500:	4807      	ldr	r0, [pc, #28]	@ (8008520 <_write+0x38>)
 8008502:	f001 fe09 	bl	800a118 <usart1_send_data>
    }
    //CDC_Transmit_FS((uint8_t*)data, len);
    sent_size = usart1_send_data(data, len);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4619      	mov	r1, r3
 800850a:	68b8      	ldr	r0, [r7, #8]
 800850c:	f001 fe04 	bl	800a118 <usart1_send_data>
 8008510:	4603      	mov	r3, r0
 8008512:	617b      	str	r3, [r7, #20]
    return sent_size;
 8008514:	697b      	ldr	r3, [r7, #20]
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	2000004c 	.word	0x2000004c

08008524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008528:	f001 ff0e 	bl	800a348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800852c:	f000 f818 	bl	8008560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008530:	f7ff ff7c 	bl	800842c <MX_GPIO_Init>
  MX_DMA_Init();
 8008534:	f7ff fcec 	bl	8007f10 <MX_DMA_Init>
  MX_SPI1_Init();
 8008538:	f000 fec6 	bl	80092c8 <MX_SPI1_Init>
  MX_TIM4_Init();
 800853c:	f001 f9a4 	bl	8009888 <MX_TIM4_Init>
  MX_TIM2_Init();
 8008540:	f001 f90c 	bl	800975c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8008544:	f001 fa88 	bl	8009a58 <MX_USART1_UART_Init>
  //HAL_UART_Receive_DMA(&huart1, uart_rx_buffer, UART_RX_BUFFER_SIZE);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8008548:	f00b fa84 	bl	8013a54 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800854c:	f7ff ff42 	bl	80083d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8008550:	f00b faa4 	bl	8013a9c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //dshot_test_sweep();
	  HAL_Delay(1000); // Only runs if scheduler fails
 8008554:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008558:	f001 ff38 	bl	800a3cc <HAL_Delay>
 800855c:	e7fa      	b.n	8008554 <main+0x30>
	...

08008560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b094      	sub	sp, #80	@ 0x50
 8008564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008566:	f107 0320 	add.w	r3, r7, #32
 800856a:	2230      	movs	r2, #48	@ 0x30
 800856c:	2100      	movs	r1, #0
 800856e:	4618      	mov	r0, r3
 8008570:	f011 ffc8 	bl	801a504 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008574:	f107 030c 	add.w	r3, r7, #12
 8008578:	2200      	movs	r2, #0
 800857a:	601a      	str	r2, [r3, #0]
 800857c:	605a      	str	r2, [r3, #4]
 800857e:	609a      	str	r2, [r3, #8]
 8008580:	60da      	str	r2, [r3, #12]
 8008582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008584:	2300      	movs	r3, #0
 8008586:	60bb      	str	r3, [r7, #8]
 8008588:	4b28      	ldr	r3, [pc, #160]	@ (800862c <SystemClock_Config+0xcc>)
 800858a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800858c:	4a27      	ldr	r2, [pc, #156]	@ (800862c <SystemClock_Config+0xcc>)
 800858e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008592:	6413      	str	r3, [r2, #64]	@ 0x40
 8008594:	4b25      	ldr	r3, [pc, #148]	@ (800862c <SystemClock_Config+0xcc>)
 8008596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008598:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800859c:	60bb      	str	r3, [r7, #8]
 800859e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80085a0:	2300      	movs	r3, #0
 80085a2:	607b      	str	r3, [r7, #4]
 80085a4:	4b22      	ldr	r3, [pc, #136]	@ (8008630 <SystemClock_Config+0xd0>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	4a21      	ldr	r2, [pc, #132]	@ (8008630 <SystemClock_Config+0xd0>)
 80085aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80085ae:	6013      	str	r3, [r2, #0]
 80085b0:	4b1f      	ldr	r3, [pc, #124]	@ (8008630 <SystemClock_Config+0xd0>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80085b8:	607b      	str	r3, [r7, #4]
 80085ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085bc:	2301      	movs	r3, #1
 80085be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80085c0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80085c4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80085c6:	2302      	movs	r3, #2
 80085c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80085ca:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80085ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80085d0:	2304      	movs	r3, #4
 80085d2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80085d4:	23a8      	movs	r3, #168	@ 0xa8
 80085d6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80085d8:	2302      	movs	r3, #2
 80085da:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80085dc:	2307      	movs	r3, #7
 80085de:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80085e0:	f107 0320 	add.w	r3, r7, #32
 80085e4:	4618      	mov	r0, r3
 80085e6:	f004 f98d 	bl	800c904 <HAL_RCC_OscConfig>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80085f0:	f000 f832 	bl	8008658 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80085f4:	230f      	movs	r3, #15
 80085f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80085f8:	2302      	movs	r3, #2
 80085fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80085fc:	2300      	movs	r3, #0
 80085fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008600:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8008604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008606:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800860a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800860c:	f107 030c 	add.w	r3, r7, #12
 8008610:	2105      	movs	r1, #5
 8008612:	4618      	mov	r0, r3
 8008614:	f004 fbee 	bl	800cdf4 <HAL_RCC_ClockConfig>
 8008618:	4603      	mov	r3, r0
 800861a:	2b00      	cmp	r3, #0
 800861c:	d001      	beq.n	8008622 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800861e:	f000 f81b 	bl	8008658 <Error_Handler>
  }
}
 8008622:	bf00      	nop
 8008624:	3750      	adds	r7, #80	@ 0x50
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	40023800 	.word	0x40023800
 8008630:	40007000 	.word	0x40007000

08008634 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b082      	sub	sp, #8
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a04      	ldr	r2, [pc, #16]	@ (8008654 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d101      	bne.n	800864a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8008646:	f001 fea1 	bl	800a38c <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if(htim == &htim4){
		//flight_controller_loop();
	}
  /* USER CODE END Callback 1 */
}
 800864a:	bf00      	nop
 800864c:	3708      	adds	r7, #8
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	40010000 	.word	0x40010000

08008658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008658:	b480      	push	{r7}
 800865a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800865c:	b672      	cpsid	i
}
 800865e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008660:	bf00      	nop
 8008662:	e7fd      	b.n	8008660 <Error_Handler+0x8>

08008664 <ctrl_timer_cb>:

static TaskHandle_t ctrl_task_h;
static TaskHandle_t write_motor_main_h;

static void ctrl_timer_cb(TimerHandle_t arg)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b084      	sub	sp, #16
 8008668:	af00      	add	r7, sp, #0
 800866a:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 800866c:	2300      	movs	r3, #0
 800866e:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(ctrl_task_h, &hpw);
 8008670:	4b0c      	ldr	r3, [pc, #48]	@ (80086a4 <ctrl_timer_cb+0x40>)
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f107 020c 	add.w	r2, r7, #12
 8008678:	4611      	mov	r1, r2
 800867a:	4618      	mov	r0, r3
 800867c:	f00d fa9c 	bl	8015bb8 <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d00a      	beq.n	800869c <ctrl_timer_cb+0x38>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2b00      	cmp	r3, #0
 800868a:	d007      	beq.n	800869c <ctrl_timer_cb+0x38>
 800868c:	4b06      	ldr	r3, [pc, #24]	@ (80086a8 <ctrl_timer_cb+0x44>)
 800868e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(ctrl_task_h);   // task-context safe
}
 800869c:	bf00      	nop
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}
 80086a4:	20002c90 	.word	0x20002c90
 80086a8:	e000ed04 	.word	0xe000ed04

080086ac <write_motor_timer_cb>:

static void write_motor_timer_cb(TimerHandle_t arg)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b084      	sub	sp, #16
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(write_motor_main_h, &hpw);
 80086b8:	4b0c      	ldr	r3, [pc, #48]	@ (80086ec <write_motor_timer_cb+0x40>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f107 020c 	add.w	r2, r7, #12
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f00d fa78 	bl	8015bb8 <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d00a      	beq.n	80086e4 <write_motor_timer_cb+0x38>
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d007      	beq.n	80086e4 <write_motor_timer_cb+0x38>
 80086d4:	4b06      	ldr	r3, [pc, #24]	@ (80086f0 <write_motor_timer_cb+0x44>)
 80086d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	f3bf 8f4f 	dsb	sy
 80086e0:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(write_motor_main_h);   // task-context safe
}
 80086e4:	bf00      	nop
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	20002c94 	.word	0x20002c94
 80086f0:	e000ed04 	.word	0xe000ed04

080086f4 <init_imu>:

static void init_imu(){
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b082      	sub	sp, #8
 80086f8:	af00      	add	r7, sp, #0
    int16_t temp_int16_t;
    uint8_t mpu_res;
	mpu_res = mpu6500_basic_init(MPU6500_INTERFACE_SPI, MPU6500_ADDRESS_0x68);
 80086fa:	2168      	movs	r1, #104	@ 0x68
 80086fc:	2001      	movs	r0, #1
 80086fe:	f7fc f8c7 	bl	8004890 <mpu6500_basic_init>
 8008702:	4603      	mov	r3, r0
 8008704:	71fb      	strb	r3, [r7, #7]
	if(mpu_res == 0){
 8008706:	79fb      	ldrb	r3, [r7, #7]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d14e      	bne.n	80087aa <init_imu+0xb6>
		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800870c:	1d3b      	adds	r3, r7, #4
 800870e:	4619      	mov	r1, r3
 8008710:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 80087b8 <init_imu+0xc4>
 8008714:	4829      	ldr	r0, [pc, #164]	@ (80087bc <init_imu+0xc8>)
 8008716:	f7ff fa33 	bl	8007b80 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_x_offset(&gs_handle_mpu6500, temp_int16_t);
 800871a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800871e:	4619      	mov	r1, r3
 8008720:	4826      	ldr	r0, [pc, #152]	@ (80087bc <init_imu+0xc8>)
 8008722:	f7ff f991 	bl	8007a48 <mpu6500_set_gyro_x_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008726:	1d3b      	adds	r3, r7, #4
 8008728:	4619      	mov	r1, r3
 800872a:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 80087b8 <init_imu+0xc4>
 800872e:	4823      	ldr	r0, [pc, #140]	@ (80087bc <init_imu+0xc8>)
 8008730:	f7ff fa26 	bl	8007b80 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_y_offset(&gs_handle_mpu6500, temp_int16_t);
 8008734:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008738:	4619      	mov	r1, r3
 800873a:	4820      	ldr	r0, [pc, #128]	@ (80087bc <init_imu+0xc8>)
 800873c:	f7ff f9b8 	bl	8007ab0 <mpu6500_set_gyro_y_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008740:	1d3b      	adds	r3, r7, #4
 8008742:	4619      	mov	r1, r3
 8008744:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80087b8 <init_imu+0xc4>
 8008748:	481c      	ldr	r0, [pc, #112]	@ (80087bc <init_imu+0xc8>)
 800874a:	f7ff fa19 	bl	8007b80 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_z_offset(&gs_handle_mpu6500, temp_int16_t);
 800874e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008752:	4619      	mov	r1, r3
 8008754:	4819      	ldr	r0, [pc, #100]	@ (80087bc <init_imu+0xc8>)
 8008756:	f7ff f9df 	bl	8007b18 <mpu6500_set_gyro_z_offset>


		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800875a:	1d3b      	adds	r3, r7, #4
 800875c:	4619      	mov	r1, r3
 800875e:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 80087b8 <init_imu+0xc4>
 8008762:	4816      	ldr	r0, [pc, #88]	@ (80087bc <init_imu+0xc8>)
 8008764:	f7ff f946 	bl	80079f4 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_x_offset(&gs_handle_mpu6500, temp_int16_t);
 8008768:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800876c:	4619      	mov	r1, r3
 800876e:	4813      	ldr	r0, [pc, #76]	@ (80087bc <init_imu+0xc8>)
 8008770:	f7ff f8a4 	bl	80078bc <mpu6500_set_accelerometer_x_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008774:	1d3b      	adds	r3, r7, #4
 8008776:	4619      	mov	r1, r3
 8008778:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80087b8 <init_imu+0xc4>
 800877c:	480f      	ldr	r0, [pc, #60]	@ (80087bc <init_imu+0xc8>)
 800877e:	f7ff f939 	bl	80079f4 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_y_offset(&gs_handle_mpu6500, temp_int16_t);
 8008782:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008786:	4619      	mov	r1, r3
 8008788:	480c      	ldr	r0, [pc, #48]	@ (80087bc <init_imu+0xc8>)
 800878a:	f7ff f8cb 	bl	8007924 <mpu6500_set_accelerometer_y_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800878e:	1d3b      	adds	r3, r7, #4
 8008790:	4619      	mov	r1, r3
 8008792:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 80087b8 <init_imu+0xc4>
 8008796:	4809      	ldr	r0, [pc, #36]	@ (80087bc <init_imu+0xc8>)
 8008798:	f7ff f92c 	bl	80079f4 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_z_offset(&gs_handle_mpu6500, temp_int16_t);
 800879c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80087a0:	4619      	mov	r1, r3
 80087a2:	4806      	ldr	r0, [pc, #24]	@ (80087bc <init_imu+0xc8>)
 80087a4:	f7ff f8f2 	bl	800798c <mpu6500_set_accelerometer_z_offset>
	  }
	  else{
		  printf("MPU6500 failed to initialize");
	  }
}
 80087a8:	e002      	b.n	80087b0 <init_imu+0xbc>
		  printf("MPU6500 failed to initialize");
 80087aa:	4805      	ldr	r0, [pc, #20]	@ (80087c0 <init_imu+0xcc>)
 80087ac:	f011 fcf0 	bl	801a190 <iprintf>
}
 80087b0:	bf00      	nop
 80087b2:	3708      	adds	r7, #8
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	00000000 	.word	0x00000000
 80087bc:	20000338 	.word	0x20000338
 80087c0:	08020070 	.word	0x08020070

080087c4 <flight_controller_main>:


static void flight_controller_main(void *arg)
{
 80087c4:	b590      	push	{r4, r7, lr}
 80087c6:	b095      	sub	sp, #84	@ 0x54
 80087c8:	af02      	add	r7, sp, #8
 80087ca:	6078      	str	r0, [r7, #4]
    float accel[3];
    float gyro[3];
    coord3D gyro_data;
    coord3D accel_data;

    ctrl_task_h = xTaskGetCurrentTaskHandle();
 80087cc:	f00d f80a 	bl	80157e4 <xTaskGetCurrentTaskHandle>
 80087d0:	4603      	mov	r3, r0
 80087d2:	4a4d      	ldr	r2, [pc, #308]	@ (8008908 <flight_controller_main+0x144>)
 80087d4:	6013      	str	r3, [r2, #0]

        static TimerHandle_t tmr = NULL;
        if (tmr == NULL) {
 80087d6:	4b4d      	ldr	r3, [pc, #308]	@ (800890c <flight_controller_main+0x148>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d10a      	bne.n	80087f4 <flight_controller_main+0x30>
        	tmr = xTimerCreate(
 80087de:	4b4c      	ldr	r3, [pc, #304]	@ (8008910 <flight_controller_main+0x14c>)
 80087e0:	9300      	str	r3, [sp, #0]
 80087e2:	2300      	movs	r3, #0
 80087e4:	2201      	movs	r2, #1
 80087e6:	2101      	movs	r1, #1
 80087e8:	484a      	ldr	r0, [pc, #296]	@ (8008914 <flight_controller_main+0x150>)
 80087ea:	f00d fb19 	bl	8015e20 <xTimerCreate>
 80087ee:	4603      	mov	r3, r0
 80087f0:	4a46      	ldr	r2, [pc, #280]	@ (800890c <flight_controller_main+0x148>)
 80087f2:	6013      	str	r3, [r2, #0]
                NULL,                             // timer ID used to carry arg
				ctrl_timer_cb                // callback
            );
        }

        if (tmr != NULL) {
 80087f4:	4b45      	ldr	r3, [pc, #276]	@ (800890c <flight_controller_main+0x148>)
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d00b      	beq.n	8008814 <flight_controller_main+0x50>
            xTimerStart(tmr, 0);
 80087fc:	4b43      	ldr	r3, [pc, #268]	@ (800890c <flight_controller_main+0x148>)
 80087fe:	681c      	ldr	r4, [r3, #0]
 8008800:	f00c fca8 	bl	8015154 <xTaskGetTickCount>
 8008804:	4602      	mov	r2, r0
 8008806:	2300      	movs	r3, #0
 8008808:	9300      	str	r3, [sp, #0]
 800880a:	2300      	movs	r3, #0
 800880c:	2101      	movs	r1, #1
 800880e:	4620      	mov	r0, r4
 8008810:	f00d fb64 	bl	8015edc <xTimerGenericCommand>
        }

    /* set 1 */
      for (;;)
      {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008814:	f04f 31ff 	mov.w	r1, #4294967295
 8008818:	2001      	movs	r0, #1
 800881a:	f00d f981 	bl	8015b20 <ulTaskNotifyTake>

        len = 1;
 800881e:	2301      	movs	r3, #1
 8008820:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (mpu6500_read(&gs_handle_mpu6500,
 8008824:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008828:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800882c:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008830:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8008834:	9301      	str	r3, [sp, #4]
 8008836:	f107 0320 	add.w	r3, r7, #32
 800883a:	9300      	str	r3, [sp, #0]
 800883c:	4603      	mov	r3, r0
 800883e:	4836      	ldr	r0, [pc, #216]	@ (8008918 <flight_controller_main+0x154>)
 8008840:	f7fc ff7c 	bl	800573c <mpu6500_read>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d006      	beq.n	8008858 <flight_controller_main+0x94>
                    (int16_t (*)[3])&accel_raw, (float (*)[3])&accel,
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                     &len) != 0
                    )
        {
            printf("MPU6500 read error\n");
 800884a:	4834      	ldr	r0, [pc, #208]	@ (800891c <flight_controller_main+0x158>)
 800884c:	f011 fd10 	bl	801a270 <puts>
            flight_control_loop_disarm_esc(&fcl);
 8008850:	4833      	ldr	r0, [pc, #204]	@ (8008920 <flight_controller_main+0x15c>)
 8008852:	f7f9 f804 	bl	800185e <flight_control_loop_disarm_esc>
 8008856:	e052      	b.n	80088fe <flight_controller_main+0x13a>
            //return; // implement some form of recovery if the mpu read fails
        }
        else{
            accel_data.x = G2MS2(accel[0]);
 8008858:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800885c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008924 <flight_controller_main+0x160>
 8008860:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008864:	edc7 7a02 	vstr	s15, [r7, #8]
            accel_data.y = -G2MS2(accel[1]);
 8008868:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800886c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8008924 <flight_controller_main+0x160>
 8008870:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008874:	eef1 7a67 	vneg.f32	s15, s15
 8008878:	edc7 7a03 	vstr	s15, [r7, #12]
            accel_data.z = -G2MS2(accel[2]);
 800887c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8008880:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8008924 <flight_controller_main+0x160>
 8008884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008888:	eef1 7a67 	vneg.f32	s15, s15
 800888c:	edc7 7a04 	vstr	s15, [r7, #16]
            gyro_data.x = radians(gyro[0]);
 8008890:	edd7 7a08 	vldr	s15, [r7, #32]
 8008894:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8008928 <flight_controller_main+0x164>
 8008898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800889c:	edc7 7a05 	vstr	s15, [r7, #20]
            gyro_data.y = -radians(gyro[1]);
 80088a0:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80088a4:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8008928 <flight_controller_main+0x164>
 80088a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088ac:	eef1 7a67 	vneg.f32	s15, s15
 80088b0:	edc7 7a06 	vstr	s15, [r7, #24]
            gyro_data.z = -radians(gyro[2]);
 80088b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80088b8:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8008928 <flight_controller_main+0x164>
 80088bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80088c0:	eef1 7a67 	vneg.f32	s15, s15
 80088c4:	edc7 7a07 	vstr	s15, [r7, #28]
            flight_control_loop_update_imu(&fcl, gyro_data, accel_data);
 80088c8:	ed97 5a02 	vldr	s10, [r7, #8]
 80088cc:	edd7 5a03 	vldr	s11, [r7, #12]
 80088d0:	ed97 6a04 	vldr	s12, [r7, #16]
 80088d4:	edd7 6a05 	vldr	s13, [r7, #20]
 80088d8:	ed97 7a06 	vldr	s14, [r7, #24]
 80088dc:	edd7 7a07 	vldr	s15, [r7, #28]
 80088e0:	eef0 1a45 	vmov.f32	s3, s10
 80088e4:	eeb0 2a65 	vmov.f32	s4, s11
 80088e8:	eef0 2a46 	vmov.f32	s5, s12
 80088ec:	eeb0 0a66 	vmov.f32	s0, s13
 80088f0:	eef0 0a47 	vmov.f32	s1, s14
 80088f4:	eeb0 1a67 	vmov.f32	s2, s15
 80088f8:	4809      	ldr	r0, [pc, #36]	@ (8008920 <flight_controller_main+0x15c>)
 80088fa:	f7f9 fafd 	bl	8001ef8 <flight_control_loop_update_imu>
        }
        flight_control_loop_tick(&fcl);
 80088fe:	4808      	ldr	r0, [pc, #32]	@ (8008920 <flight_controller_main+0x15c>)
 8008900:	f7f9 f924 	bl	8001b4c <flight_control_loop_tick>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008904:	e786      	b.n	8008814 <flight_controller_main+0x50>
 8008906:	bf00      	nop
 8008908:	20002c90 	.word	0x20002c90
 800890c:	20002ca8 	.word	0x20002ca8
 8008910:	08008665 	.word	0x08008665
 8008914:	08020090 	.word	0x08020090
 8008918:	20000338 	.word	0x20000338
 800891c:	080200a4 	.word	0x080200a4
 8008920:	20002828 	.word	0x20002828
 8008924:	411ce80a 	.word	0x411ce80a
 8008928:	3c8efa35 	.word	0x3c8efa35

0800892c <write_motor_main>:
      }
}


static void write_motor_main(void *arg){
 800892c:	b590      	push	{r4, r7, lr}
 800892e:	b091      	sub	sp, #68	@ 0x44
 8008930:	af02      	add	r7, sp, #8
 8008932:	6078      	str	r0, [r7, #4]
    write_motor_main_h = xTaskGetCurrentTaskHandle();
 8008934:	f00c ff56 	bl	80157e4 <xTaskGetCurrentTaskHandle>
 8008938:	4603      	mov	r3, r0
 800893a:	4a54      	ldr	r2, [pc, #336]	@ (8008a8c <write_motor_main+0x160>)
 800893c:	6013      	str	r3, [r2, #0]

    float duty_cycle;
    static TimerHandle_t s_writeMotorTimer = NULL;
    if (s_writeMotorTimer == NULL) {
 800893e:	4b54      	ldr	r3, [pc, #336]	@ (8008a90 <write_motor_main+0x164>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10a      	bne.n	800895c <write_motor_main+0x30>
        s_writeMotorTimer = xTimerCreate(
 8008946:	4b53      	ldr	r3, [pc, #332]	@ (8008a94 <write_motor_main+0x168>)
 8008948:	9300      	str	r3, [sp, #0]
 800894a:	2300      	movs	r3, #0
 800894c:	2201      	movs	r2, #1
 800894e:	2102      	movs	r1, #2
 8008950:	4851      	ldr	r0, [pc, #324]	@ (8008a98 <write_motor_main+0x16c>)
 8008952:	f00d fa65 	bl	8015e20 <xTimerCreate>
 8008956:	4603      	mov	r3, r0
 8008958:	4a4d      	ldr	r2, [pc, #308]	@ (8008a90 <write_motor_main+0x164>)
 800895a:	6013      	str	r3, [r2, #0]
            NULL,                             // timer ID used to carry arg
			write_motor_timer_cb                // callback
        );
    }

    if (s_writeMotorTimer != NULL) {
 800895c:	4b4c      	ldr	r3, [pc, #304]	@ (8008a90 <write_motor_main+0x164>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d00b      	beq.n	800897c <write_motor_main+0x50>
        xTimerStart(s_writeMotorTimer, 0);
 8008964:	4b4a      	ldr	r3, [pc, #296]	@ (8008a90 <write_motor_main+0x164>)
 8008966:	681c      	ldr	r4, [r3, #0]
 8008968:	f00c fbf4 	bl	8015154 <xTaskGetTickCount>
 800896c:	4602      	mov	r2, r0
 800896e:	2300      	movs	r3, #0
 8008970:	9300      	str	r3, [sp, #0]
 8008972:	2300      	movs	r3, #0
 8008974:	2101      	movs	r1, #1
 8008976:	4620      	mov	r0, r4
 8008978:	f00d fab0 	bl	8015edc <xTimerGenericCommand>
    }


    g_motors_throttle_mutex = xSemaphoreCreateMutex();
 800897c:	2001      	movs	r0, #1
 800897e:	f00b fba8 	bl	80140d2 <xQueueCreateMutex>
 8008982:	4603      	mov	r3, r0
 8008984:	4a45      	ldr	r2, [pc, #276]	@ (8008a9c <write_motor_main+0x170>)
 8008986:	6013      	str	r3, [r2, #0]
    //servos_init();
    memset(g_motors_throttle, 0, sizeof(g_motors_throttle));
 8008988:	2210      	movs	r2, #16
 800898a:	2100      	movs	r1, #0
 800898c:	4844      	ldr	r0, [pc, #272]	@ (8008aa0 <write_motor_main+0x174>)
 800898e:	f011 fdb9 	bl	801a504 <memset>
    xSemaphoreGive(g_motors_throttle_mutex);
 8008992:	4b42      	ldr	r3, [pc, #264]	@ (8008a9c <write_motor_main+0x170>)
 8008994:	6818      	ldr	r0, [r3, #0]
 8008996:	2300      	movs	r3, #0
 8008998:	2200      	movs	r2, #0
 800899a:	2100      	movs	r1, #0
 800899c:	f00b fbb2 	bl	8014104 <xQueueGenericSend>

    for (;;)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80089a0:	f04f 31ff 	mov.w	r1, #4294967295
 80089a4:	2001      	movs	r0, #1
 80089a6:	f00d f8bb 	bl	8015b20 <ulTaskNotifyTake>

        xSemaphoreTake(g_motors_throttle_mutex, portMAX_DELAY);
 80089aa:	4b3c      	ldr	r3, [pc, #240]	@ (8008a9c <write_motor_main+0x170>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f04f 31ff 	mov.w	r1, #4294967295
 80089b2:	4618      	mov	r0, r3
 80089b4:	f00b fe28 	bl	8014608 <xQueueSemaphoreTake>
        flight_control_loop_get_motors_throttle(&fcl, g_motors_throttle);
 80089b8:	4939      	ldr	r1, [pc, #228]	@ (8008aa0 <write_motor_main+0x174>)
 80089ba:	483a      	ldr	r0, [pc, #232]	@ (8008aa4 <write_motor_main+0x178>)
 80089bc:	f7f9 fae8 	bl	8001f90 <flight_control_loop_get_motors_throttle>

        for (size_t i = 0; i < 4; i++) {
 80089c0:	2300      	movs	r3, #0
 80089c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80089c4:	e057      	b.n	8008a76 <write_motor_main+0x14a>
        	duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, g_motors_throttle[i]);
 80089c6:	4a36      	ldr	r2, [pc, #216]	@ (8008aa0 <write_motor_main+0x174>)
 80089c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	edd3 7a00 	vldr	s15, [r3]
 80089d2:	eef0 1a67 	vmov.f32	s3, s15
 80089d6:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8008aa8 <write_motor_main+0x17c>
 80089da:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8008aac <write_motor_main+0x180>
 80089de:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8008ab0 <write_motor_main+0x184>
 80089e2:	f7ff fc93 	bl	800830c <esc_pwm_throttle_to_duty_cycle>
 80089e6:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 80089ea:	2300      	movs	r3, #0
 80089ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80089ee:	f3ef 8310 	mrs	r3, PRIMASK
 80089f2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80089f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
#define COMPILER_BARRIER() __asm volatile ("" ::: "memory")


__attribute__((always_inline)) static inline crit_state_t enter_critical(void)
{
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 80089f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80089f8:	b672      	cpsid	i
}
 80089fa:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80089fc:	f3bf 8f4f 	dsb	sy
}
 8008a00:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008a02:	f3bf 8f6f 	isb	sy
}
 8008a06:	bf00      	nop
    __disable_irq();                     // CPSID i (atomic)
    __DSB();
    __ISB();
    COMPILER_BARRIER();
    return old;
 8008a08:	6a3b      	ldr	r3, [r7, #32]
}

/* Helpers: */
__attribute__((always_inline)) static inline crit_state_t __iBegin_custom(crit_state_t type)
{
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8008a0a:	61fb      	str	r3, [r7, #28]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8008a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0e:	2b01      	cmp	r3, #1
 8008a10:	d001      	beq.n	8008a16 <write_motor_main+0xea>
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	e000      	b.n	8008a18 <write_motor_main+0xec>
 8008a16:	2300      	movs	r3, #0
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8008a18:	60fb      	str	r3, [r7, #12]
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a1e:	e00d      	b.n	8008a3c <write_motor_main+0x110>
        	{
        		pwm_set_duty(&esc_motors[i], duty_cycle);
 8008a20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a22:	4613      	mov	r3, r2
 8008a24:	009b      	lsls	r3, r3, #2
 8008a26:	4413      	add	r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	4a22      	ldr	r2, [pc, #136]	@ (8008ab4 <write_motor_main+0x188>)
 8008a2c:	4413      	add	r3, r2
 8008a2e:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7ff fc12 	bl	800825c <pwm_set_duty>
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1ee      	bne.n	8008a20 <write_motor_main+0xf4>
 8008a42:	f107 030c 	add.w	r3, r7, #12
 8008a46:	61bb      	str	r3, [r7, #24]
}

__attribute__((always_inline)) static inline void __iRestore_custom(crit_state_t *sreg)
{
	exit_critical(*sreg);		// restore saved I-bit
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dmb 0xF":::"memory");
 8008a4e:	f3bf 8f5f 	dmb	sy
}
 8008a52:	bf00      	nop
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	f383 8810 	msr	PRIMASK, r3
}
 8008a5e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8008a60:	f3bf 8f4f 	dsb	sy
}
 8008a64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008a66:	f3bf 8f6f 	isb	sy
}
 8008a6a:	bf00      	nop
}
 8008a6c:	bf00      	nop
}
 8008a6e:	bf00      	nop
        for (size_t i = 0; i < 4; i++) {
 8008a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a72:	3301      	adds	r3, #1
 8008a74:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d9a4      	bls.n	80089c6 <write_motor_main+0x9a>
        	}
        }
        xSemaphoreGive(g_motors_throttle_mutex);
 8008a7c:	4b07      	ldr	r3, [pc, #28]	@ (8008a9c <write_motor_main+0x170>)
 8008a7e:	6818      	ldr	r0, [r3, #0]
 8008a80:	2300      	movs	r3, #0
 8008a82:	2200      	movs	r2, #0
 8008a84:	2100      	movs	r1, #0
 8008a86:	f00b fb3d 	bl	8014104 <xQueueGenericSend>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008a8a:	e789      	b.n	80089a0 <write_motor_main+0x74>
 8008a8c:	20002c94 	.word	0x20002c94
 8008a90:	20002cac 	.word	0x20002cac
 8008a94:	080086ad 	.word	0x080086ad
 8008a98:	080200b8 	.word	0x080200b8
 8008a9c:	20002c2c 	.word	0x20002c2c
 8008aa0:	20002c30 	.word	0x20002c30
 8008aa4:	20002828 	.word	0x20002828
 8008aa8:	44fa0000 	.word	0x44fa0000
 8008aac:	447a0000 	.word	0x447a0000
 8008ab0:	43c80000 	.word	0x43c80000
 8008ab4:	20002c40 	.word	0x20002c40

08008ab8 <line_buffer_add_char>:
    }
}

static int line_buffer_add_char(char c, char *buf, size_t buf_size, size_t *len)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	b085      	sub	sp, #20
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	60b9      	str	r1, [r7, #8]
 8008ac0:	607a      	str	r2, [r7, #4]
 8008ac2:	603b      	str	r3, [r7, #0]
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73fb      	strb	r3, [r7, #15]
    // buf: destination buffer
    // buf_size: total buffer capacity
    // len: pointer to current length (persistent between calls)
    // Returns 1 when a full line (ending with \n\r) is complete, 0 otherwise

    if (*len + 1 >= buf_size) {
 8008ac8:	683b      	ldr	r3, [r7, #0]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3301      	adds	r3, #1
 8008ace:	687a      	ldr	r2, [r7, #4]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	d804      	bhi.n	8008ade <line_buffer_add_char+0x26>
        // buffer overflow: reset
        *len = 0;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	601a      	str	r2, [r3, #0]
        return 0;
 8008ada:	2300      	movs	r3, #0
 8008adc:	e029      	b.n	8008b32 <line_buffer_add_char+0x7a>
    }

    buf[(*len)++] = c;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	1c59      	adds	r1, r3, #1
 8008ae4:	683a      	ldr	r2, [r7, #0]
 8008ae6:	6011      	str	r1, [r2, #0]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	4413      	add	r3, r2
 8008aec:	7bfa      	ldrb	r2, [r7, #15]
 8008aee:	701a      	strb	r2, [r3, #0]

    // Check for \n\r at the end
    if (*len >= 2) {
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d91b      	bls.n	8008b30 <line_buffer_add_char+0x78>
    	if(buf[*len - 2] == '\r' && buf[*len - 1] == '\n'){
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3b02      	subs	r3, #2
 8008afe:	68ba      	ldr	r2, [r7, #8]
 8008b00:	4413      	add	r3, r2
 8008b02:	781b      	ldrb	r3, [r3, #0]
 8008b04:	2b0d      	cmp	r3, #13
 8008b06:	d113      	bne.n	8008b30 <line_buffer_add_char+0x78>
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	68ba      	ldr	r2, [r7, #8]
 8008b10:	4413      	add	r3, r2
 8008b12:	781b      	ldrb	r3, [r3, #0]
 8008b14:	2b0a      	cmp	r3, #10
 8008b16:	d10b      	bne.n	8008b30 <line_buffer_add_char+0x78>
            buf[*len - 2] = '\0'; // terminate string before \n\r
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3b02      	subs	r3, #2
 8008b1e:	68ba      	ldr	r2, [r7, #8]
 8008b20:	4413      	add	r3, r2
 8008b22:	2200      	movs	r2, #0
 8008b24:	701a      	strb	r2, [r3, #0]
            *len = 0;             // reset for next line
 8008b26:	683b      	ldr	r3, [r7, #0]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]
            return 1;             // line complete
 8008b2c:	2301      	movs	r3, #1
 8008b2e:	e000      	b.n	8008b32 <line_buffer_add_char+0x7a>
    	}
    }

    return 0; // line not complete yet
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3714      	adds	r7, #20
 8008b36:	46bd      	mov	sp, r7
 8008b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3c:	4770      	bx	lr
	...

08008b40 <rc_control_main>:

static void rc_control_main(void *arg)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b0ec      	sub	sp, #432	@ 0x1b0
 8008b44:	af06      	add	r7, sp, #24
 8008b46:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008b4a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8008b4e:	6018      	str	r0, [r3, #0]
    uint8_t uart_recv_buffer[64];
    int recv_data;
    char linebuf[256];
    size_t line_len = 0;
 8008b50:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008b54:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8008b58:	2200      	movs	r2, #0
 8008b5a:	601a      	str	r2, [r3, #0]

    float target_throttle = 0;
 8008b5c:	f04f 0300 	mov.w	r3, #0
 8008b60:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    float temp_target_throttle = 0;
 8008b64:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008b68:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8008b6c:	f04f 0200 	mov.w	r2, #0
 8008b70:	601a      	str	r2, [r3, #0]

    coord3D target_attitude = {0};
 8008b72:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008b76:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008b7a:	461a      	mov	r2, r3
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	6053      	str	r3, [r2, #4]
 8008b82:	6093      	str	r3, [r2, #8]
    coord3D temp_target_attitude = {0};
 8008b84:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008b88:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8008b8c:	461a      	mov	r2, r3
 8008b8e:	2300      	movs	r3, #0
 8008b90:	6013      	str	r3, [r2, #0]
 8008b92:	6053      	str	r3, [r2, #4]
 8008b94:	6093      	str	r3, [r2, #8]

    float arm_flag = 0;
 8008b96:	f04f 0300 	mov.w	r3, #0
 8008b9a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
    float temp_arm_flag = 0;
 8008b9e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008ba2:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008ba6:	f04f 0200 	mov.w	r2, #0
 8008baa:	601a      	str	r2, [r3, #0]

    float disarm_flag = 0;
 8008bac:	f04f 0300 	mov.w	r3, #0
 8008bb0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    float temp_disarm_flag = 0;
 8008bb4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008bb8:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008bbc:	f04f 0200 	mov.w	r2, #0
 8008bc0:	601a      	str	r2, [r3, #0]

    int errors = 0;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
    int current_message_corrupted = 0;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
    uint16_t crc_calculated;
    unsigned int crc_received = 0;
 8008bce:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008bd2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	601a      	str	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  current_message_corrupted = 1;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
      while (usart1_data_available_for_read() > 0)
 8008be0:	e078      	b.n	8008cd4 <rc_control_main+0x194>
      {
          recv_data = usart1_recv_data((char*)uart_recv_buffer, sizeof(uart_recv_buffer));
 8008be2:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 8008be6:	2140      	movs	r1, #64	@ 0x40
 8008be8:	4618      	mov	r0, r3
 8008bea:	f001 fae9 	bl	800a1c0 <usart1_recv_data>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
          for(int i=0; i<recv_data; i++){
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8008bfa:	e065      	b.n	8008cc8 <rc_control_main+0x188>


			  if (line_buffer_add_char(uart_recv_buffer[i], linebuf, sizeof(linebuf), &line_len)) {
 8008bfc:	f507 729a 	add.w	r2, r7, #308	@ 0x134
 8008c00:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8008c04:	4413      	add	r3, r2
 8008c06:	7818      	ldrb	r0, [r3, #0]
 8008c08:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008c0c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8008c10:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008c14:	f7ff ff50 	bl	8008ab8 <line_buffer_add_char>
 8008c18:	4603      	mov	r3, r0
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d04f      	beq.n	8008cbe <rc_control_main+0x17e>

				  int temp_str_len = strlen(linebuf);
 8008c1e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7f7 fb24 	bl	8000270 <strlen>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
				  temp_str_len -= 6;
 8008c2e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8008c32:	3b06      	subs	r3, #6
 8008c34:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
				  crc_calculated = crc16_ccitt_init();
 8008c38:	f7f8 fcaa 	bl	8001590 <crc16_ccitt_init>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176
				  crc_calculated = crc16_ccitt_add_arr(crc_calculated, (uint8_t*)linebuf, temp_str_len);
 8008c42:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8008c46:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8008c4a:	f8b7 3176 	ldrh.w	r3, [r7, #374]	@ 0x176
 8008c4e:	4618      	mov	r0, r3
 8008c50:	f7f8 fcda 	bl	8001608 <crc16_ccitt_add_arr>
 8008c54:	4603      	mov	r3, r0
 8008c56:	f8a7 3176 	strh.w	r3, [r7, #374]	@ 0x176

				  if (sscanf(linebuf, "%f;%f;%f;%f;%f;%f;%x",
 8008c5a:	f107 0114 	add.w	r1, r7, #20
 8008c5e:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8008c62:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8008c66:	f107 0308 	add.w	r3, r7, #8
 8008c6a:	9304      	str	r3, [sp, #16]
 8008c6c:	f107 030c 	add.w	r3, r7, #12
 8008c70:	9303      	str	r3, [sp, #12]
 8008c72:	f107 0310 	add.w	r3, r7, #16
 8008c76:	9302      	str	r3, [sp, #8]
 8008c78:	f107 0314 	add.w	r3, r7, #20
 8008c7c:	3308      	adds	r3, #8
 8008c7e:	9301      	str	r3, [sp, #4]
 8008c80:	f107 0314 	add.w	r3, r7, #20
 8008c84:	3304      	adds	r3, #4
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	460b      	mov	r3, r1
 8008c8a:	495c      	ldr	r1, [pc, #368]	@ (8008dfc <rc_control_main+0x2bc>)
 8008c8c:	f011 fb1a 	bl	801a2c4 <siscanf>
 8008c90:	4603      	mov	r3, r0
 8008c92:	2b07      	cmp	r3, #7
 8008c94:	d103      	bne.n	8008c9e <rc_control_main+0x15e>
						  &temp_target_attitude.z,
						  &temp_arm_flag,
						  &temp_disarm_flag,
						  &crc_received
						  ) == 7) {
					  current_message_corrupted = 0;
 8008c96:	2300      	movs	r3, #0
 8008c98:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8008c9c:	e002      	b.n	8008ca4 <rc_control_main+0x164>
					  //printf("%s\n", linebuf);

				  } else {
					  current_message_corrupted = 1;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
//					  printf("%s\n", linebuf);
				  }
				  if(crc_received != (unsigned int)crc_calculated){
 8008ca4:	f8b7 2176 	ldrh.w	r2, [r7, #374]	@ 0x176
 8008ca8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008cac:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	429a      	cmp	r2, r3
 8008cb4:	d003      	beq.n	8008cbe <rc_control_main+0x17e>
					  current_message_corrupted = 1;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
					  continue;
 8008cbc:	bf00      	nop
          for(int i=0; i<recv_data; i++){
 8008cbe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8008cc2:	3301      	adds	r3, #1
 8008cc4:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8008cc8:	f8d7 2180 	ldr.w	r2, [r7, #384]	@ 0x180
 8008ccc:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8008cd0:	429a      	cmp	r2, r3
 8008cd2:	db93      	blt.n	8008bfc <rc_control_main+0xbc>
      while (usart1_data_available_for_read() > 0)
 8008cd4:	f001 fac8 	bl	800a268 <usart1_data_available_for_read>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d181      	bne.n	8008be2 <rc_control_main+0xa2>
			  }
          }
      }


      if(current_message_corrupted == 0){
 8008cde:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d123      	bne.n	8008d2e <rc_control_main+0x1ee>
    	  errors = 0;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

          target_attitude = temp_target_attitude;
 8008cec:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008cf0:	f5a3 71bc 	sub.w	r1, r3, #376	@ 0x178
 8008cf4:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008cf8:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 8008cfc:	460b      	mov	r3, r1
 8008cfe:	ca07      	ldmia	r2, {r0, r1, r2}
 8008d00:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          arm_flag = (temp_arm_flag);
 8008d04:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008d08:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
          disarm_flag = (temp_disarm_flag);
 8008d12:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008d16:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
          target_throttle = temp_target_throttle;
 8008d20:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008d24:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
      }

      errors += current_message_corrupted;
 8008d2e:	f8d7 2188 	ldr.w	r2, [r7, #392]	@ 0x188
 8008d32:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8008d36:	4413      	add	r3, r2
 8008d38:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

      if (errors >= (RC_CONTROLLER_HZ / 2.0f)){
 8008d3c:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8008d40:	ee07 3a90 	vmov	s15, r3
 8008d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008d48:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8008e00 <rc_control_main+0x2c0>
 8008d4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d54:	db20      	blt.n	8008d98 <rc_control_main+0x258>
    	  target_attitude.x = 0.0f;
 8008d56:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008d5a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008d5e:	f04f 0200 	mov.w	r2, #0
 8008d62:	601a      	str	r2, [r3, #0]
    	  target_attitude.y = 0.0f;
 8008d64:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008d68:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008d6c:	f04f 0200 	mov.w	r2, #0
 8008d70:	605a      	str	r2, [r3, #4]
    	  target_attitude.z = 0.0f;
 8008d72:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008d76:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008d7a:	f04f 0200 	mov.w	r2, #0
 8008d7e:	609a      	str	r2, [r3, #8]
    	  target_throttle = 0.0f;
 8008d80:	f04f 0300 	mov.w	r3, #0
 8008d84:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
    	  disarm_flag = 1.0f;
 8008d88:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008d8c:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
    	  arm_flag = 0.0f;
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
      }


      if (arm_flag > 0.5f){
 8008d98:	edd7 7a64 	vldr	s15, [r7, #400]	@ 0x190
 8008d9c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008da0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008da8:	dd02      	ble.n	8008db0 <rc_control_main+0x270>
    	  flight_control_loop_arm_esc(&fcl);
 8008daa:	4816      	ldr	r0, [pc, #88]	@ (8008e04 <rc_control_main+0x2c4>)
 8008dac:	f7f8 fd38 	bl	8001820 <flight_control_loop_arm_esc>
      }

      if (disarm_flag > 0.5f){
 8008db0:	edd7 7a63 	vldr	s15, [r7, #396]	@ 0x18c
 8008db4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008db8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008dbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dc0:	dd02      	ble.n	8008dc8 <rc_control_main+0x288>
    	  flight_control_loop_disarm_esc(&fcl);
 8008dc2:	4810      	ldr	r0, [pc, #64]	@ (8008e04 <rc_control_main+0x2c4>)
 8008dc4:	f7f8 fd4b 	bl	800185e <flight_control_loop_disarm_esc>
      }

      flight_control_loop_update_rc_control(&fcl, target_attitude, target_throttle);
 8008dc8:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8008dcc:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008dd0:	edd3 6a00 	vldr	s13, [r3]
 8008dd4:	ed93 7a01 	vldr	s14, [r3, #4]
 8008dd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8008ddc:	edd7 1a65 	vldr	s3, [r7, #404]	@ 0x194
 8008de0:	eeb0 0a66 	vmov.f32	s0, s13
 8008de4:	eef0 0a47 	vmov.f32	s1, s14
 8008de8:	eeb0 1a67 	vmov.f32	s2, s15
 8008dec:	4805      	ldr	r0, [pc, #20]	@ (8008e04 <rc_control_main+0x2c4>)
 8008dee:	f7f8 ffe3 	bl	8001db8 <flight_control_loop_update_rc_control>

      vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(RC_CONTROLLER_HZ)));
 8008df2:	200a      	movs	r0, #10
 8008df4:	f00c f85c 	bl	8014eb0 <vTaskDelay>
	  current_message_corrupted = 1;
 8008df8:	e6ef      	b.n	8008bda <rc_control_main+0x9a>
 8008dfa:	bf00      	nop
 8008dfc:	080200c8 	.word	0x080200c8
 8008e00:	42480000 	.word	0x42480000
 8008e04:	20002828 	.word	0x20002828

08008e08 <print_telemetry_data>:
  }

}


static void print_telemetry_data(void *arg){
 8008e08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e0c:	b0a8      	sub	sp, #160	@ 0xa0
 8008e0e:	af04      	add	r7, sp, #16
 8008e10:	6078      	str	r0, [r7, #4]
    // Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
    coord3D raw_accel, raw_gyro;
	quaternion body_frame_estimated_q;
    float local_motors_throttle[4];
	coord3D target_attitude = { 0 };
 8008e12:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008e16:	2200      	movs	r2, #0
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	605a      	str	r2, [r3, #4]
 8008e1c:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 8008e1e:	f04f 0300 	mov.w	r3, #0
 8008e22:	633b      	str	r3, [r7, #48]	@ 0x30

    for (;;)
    {
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreTake(fcl.imu_mutex, portMAX_DELAY);
 8008e24:	4b94      	ldr	r3, [pc, #592]	@ (8009078 <print_telemetry_data+0x270>)
 8008e26:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8008e2a:	f04f 31ff 	mov.w	r1, #4294967295
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f00b fbea 	bl	8014608 <xQueueSemaphoreTake>
    #endif
        imu_get_raw_accel_data(&(fcl.imu), &raw_accel);
 8008e34:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8008e38:	4619      	mov	r1, r3
 8008e3a:	488f      	ldr	r0, [pc, #572]	@ (8009078 <print_telemetry_data+0x270>)
 8008e3c:	f7fa f9e0 	bl	8003200 <imu_get_raw_accel_data>
        imu_get_raw_gyro_data(&(fcl.imu), &raw_gyro);
 8008e40:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008e44:	4619      	mov	r1, r3
 8008e46:	488c      	ldr	r0, [pc, #560]	@ (8009078 <print_telemetry_data+0x270>)
 8008e48:	f7fa f9ed 	bl	8003226 <imu_get_raw_gyro_data>
        imu_get_estimated_data(&(fcl.imu), &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 8008e4c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8008e50:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8008e54:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8008e58:	4887      	ldr	r0, [pc, #540]	@ (8009078 <print_telemetry_data+0x270>)
 8008e5a:	f7fa f9a5 	bl	80031a8 <imu_get_estimated_data>
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreGive(fcl.imu_mutex);
 8008e5e:	4b86      	ldr	r3, [pc, #536]	@ (8009078 <print_telemetry_data+0x270>)
 8008e60:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8008e64:	2300      	movs	r3, #0
 8008e66:	2200      	movs	r2, #0
 8008e68:	2100      	movs	r1, #0
 8008e6a:	f00b f94b 	bl	8014104 <xQueueGenericSend>
    #endif

        flight_control_loop_get_motors_throttle(&fcl, local_motors_throttle);
 8008e6e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8008e72:	4619      	mov	r1, r3
 8008e74:	4880      	ldr	r0, [pc, #512]	@ (8009078 <print_telemetry_data+0x270>)
 8008e76:	f7f9 f88b 	bl	8001f90 <flight_control_loop_get_motors_throttle>
        angles3D angles = quat2angle(&(body_frame_estimated_q));
 8008e7a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8008e7e:	4618      	mov	r0, r3
 8008e80:	f7f9 fb9e 	bl	80025c0 <quat2angle>
 8008e84:	eef0 6a40 	vmov.f32	s13, s0
 8008e88:	eeb0 7a60 	vmov.f32	s14, s1
 8008e8c:	eef0 7a41 	vmov.f32	s15, s2
 8008e90:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8008e94:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8008e98:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        printf("%.3f;%.3f;%.3f;", degrees(angles.x), degrees(angles.y), degrees(angles.z));
 8008e9c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008ea0:	ed9f 7a76 	vldr	s14, [pc, #472]	@ 800907c <print_telemetry_data+0x274>
 8008ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ea8:	ee17 0a90 	vmov	r0, s15
 8008eac:	f7f7 fb4c 	bl	8000548 <__aeabi_f2d>
 8008eb0:	4680      	mov	r8, r0
 8008eb2:	4689      	mov	r9, r1
 8008eb4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8008eb8:	ed9f 7a70 	vldr	s14, [pc, #448]	@ 800907c <print_telemetry_data+0x274>
 8008ebc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ec0:	ee17 0a90 	vmov	r0, s15
 8008ec4:	f7f7 fb40 	bl	8000548 <__aeabi_f2d>
 8008ec8:	4604      	mov	r4, r0
 8008eca:	460d      	mov	r5, r1
 8008ecc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8008ed0:	ed9f 7a6a 	vldr	s14, [pc, #424]	@ 800907c <print_telemetry_data+0x274>
 8008ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008ed8:	ee17 0a90 	vmov	r0, s15
 8008edc:	f7f7 fb34 	bl	8000548 <__aeabi_f2d>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	460b      	mov	r3, r1
 8008ee4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ee8:	e9cd 4500 	strd	r4, r5, [sp]
 8008eec:	4642      	mov	r2, r8
 8008eee:	464b      	mov	r3, r9
 8008ef0:	4863      	ldr	r0, [pc, #396]	@ (8009080 <print_telemetry_data+0x278>)
 8008ef2:	f011 f94d 	bl	801a190 <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_accel.x, body_frame_accel.y, body_frame_accel.z);
 8008ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008efa:	4618      	mov	r0, r3
 8008efc:	f7f7 fb24 	bl	8000548 <__aeabi_f2d>
 8008f00:	4680      	mov	r8, r0
 8008f02:	4689      	mov	r9, r1
 8008f04:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f7f7 fb1d 	bl	8000548 <__aeabi_f2d>
 8008f0e:	4604      	mov	r4, r0
 8008f10:	460d      	mov	r5, r1
 8008f12:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7f7 fb16 	bl	8000548 <__aeabi_f2d>
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	460b      	mov	r3, r1
 8008f20:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f24:	e9cd 4500 	strd	r4, r5, [sp]
 8008f28:	4642      	mov	r2, r8
 8008f2a:	464b      	mov	r3, r9
 8008f2c:	4854      	ldr	r0, [pc, #336]	@ (8009080 <print_telemetry_data+0x278>)
 8008f2e:	f011 f92f 	bl	801a190 <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_gyro.x, body_frame_gyro.y, body_frame_gyro.z);
 8008f32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7f7 fb07 	bl	8000548 <__aeabi_f2d>
 8008f3a:	4680      	mov	r8, r0
 8008f3c:	4689      	mov	r9, r1
 8008f3e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7f7 fb01 	bl	8000548 <__aeabi_f2d>
 8008f46:	4604      	mov	r4, r0
 8008f48:	460d      	mov	r5, r1
 8008f4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f7f7 fafa 	bl	8000548 <__aeabi_f2d>
 8008f54:	4602      	mov	r2, r0
 8008f56:	460b      	mov	r3, r1
 8008f58:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f5c:	e9cd 4500 	strd	r4, r5, [sp]
 8008f60:	4642      	mov	r2, r8
 8008f62:	464b      	mov	r3, r9
 8008f64:	4846      	ldr	r0, [pc, #280]	@ (8009080 <print_telemetry_data+0x278>)
 8008f66:	f011 f913 	bl	801a190 <iprintf>
//        printf("%.3f;%.3f;%.3f;", raw_accel.x, raw_accel.y, raw_accel.z);
//        printf("%.3f;%.3f;%.3f;", raw_gyro.x, raw_gyro.y, raw_gyro.z);
//        printf("%.3f;%.3f;%.3f;%.3f;", local_motors_throttle[0], local_motors_throttle[1], local_motors_throttle[2], local_motors_throttle[3]);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rc_attitude_control_mutex, portMAX_DELAY);
 8008f6a:	4b43      	ldr	r3, [pc, #268]	@ (8009078 <print_telemetry_data+0x270>)
 8008f6c:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8008f70:	f04f 31ff 	mov.w	r1, #4294967295
 8008f74:	4618      	mov	r0, r3
 8008f76:	f00b fb47 	bl	8014608 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 8008f7a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008f7e:	f103 0008 	add.w	r0, r3, #8
 8008f82:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008f86:	1d1a      	adds	r2, r3, #4
 8008f88:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8008f8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	4603      	mov	r3, r0
 8008f94:	483b      	ldr	r0, [pc, #236]	@ (8009084 <print_telemetry_data+0x27c>)
 8008f96:	f7fb fc43 	bl	8004820 <rc_attitude_control_get_processed>
		&(target_attitude.y),
		&(target_attitude.z),
		&target_throttle
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rc_attitude_control_mutex);
 8008f9a:	4b37      	ldr	r3, [pc, #220]	@ (8009078 <print_telemetry_data+0x270>)
 8008f9c:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	2100      	movs	r1, #0
 8008fa6:	f00b f8ad 	bl	8014104 <xQueueGenericSend>
#endif
//	printf("%.3f;%.3f;%.3f;%.3f;", target_attitude.x, target_attitude.y, target_attitude.z, target_throttle);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 8008faa:	4b33      	ldr	r3, [pc, #204]	@ (8009078 <print_telemetry_data+0x270>)
 8008fac:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8008fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f00b fb27 	bl	8014608 <xQueueSemaphoreTake>
#endif
	float target_roll_rate = 0.0f;
 8008fba:	f04f 0300 	mov.w	r3, #0
 8008fbe:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 8008fc0:	f04f 0300 	mov.w	r3, #0
 8008fc4:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 8008fc6:	f04f 0300 	mov.w	r3, #0
 8008fca:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 8008fcc:	f107 0318 	add.w	r3, r7, #24
 8008fd0:	f107 021c 	add.w	r2, r7, #28
 8008fd4:	f107 0120 	add.w	r1, r7, #32
 8008fd8:	482b      	ldr	r0, [pc, #172]	@ (8009088 <print_telemetry_data+0x280>)
 8008fda:	f7f8 fab3 	bl	8001544 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 8008fde:	4b26      	ldr	r3, [pc, #152]	@ (8009078 <print_telemetry_data+0x270>)
 8008fe0:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	2200      	movs	r2, #0
 8008fe8:	2100      	movs	r1, #0
 8008fea:	f00b f88b 	bl	8014104 <xQueueGenericSend>
#endif
//	printf("%.3f;%.3f;%.3f;", target_roll_rate, target_pitch_rate, target_yaw_rate);


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8008fee:	4b22      	ldr	r3, [pc, #136]	@ (8009078 <print_telemetry_data+0x270>)
 8008ff0:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8008ff4:	f04f 31ff 	mov.w	r1, #4294967295
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f00b fb05 	bl	8014608 <xQueueSemaphoreTake>
#endif
	float pid_roll_output = 0.0f;
 8008ffe:	f04f 0300 	mov.w	r3, #0
 8009002:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 8009004:	f04f 0300 	mov.w	r3, #0
 8009008:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 800900a:	f04f 0300 	mov.w	r3, #0
 800900e:	60fb      	str	r3, [r7, #12]
	// Get PID outputs
	rate_controller_get_pid_outputs(
 8009010:	f107 030c 	add.w	r3, r7, #12
 8009014:	f107 0210 	add.w	r2, r7, #16
 8009018:	f107 0114 	add.w	r1, r7, #20
 800901c:	481b      	ldr	r0, [pc, #108]	@ (800908c <print_telemetry_data+0x284>)
 800901e:	f7fb f961 	bl	80042e4 <rate_controller_get_pid_outputs>
		&pid_roll_output,
		&pid_pitch_output,
		&pid_yaw_output
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 8009022:	4b15      	ldr	r3, [pc, #84]	@ (8009078 <print_telemetry_data+0x270>)
 8009024:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8009028:	2300      	movs	r3, #0
 800902a:	2200      	movs	r2, #0
 800902c:	2100      	movs	r1, #0
 800902e:	f00b f869 	bl	8014104 <xQueueGenericSend>
#endif
	printf("%.3f;%.3f;%.3f;", pid_roll_output, pid_pitch_output, pid_yaw_output);
 8009032:	697b      	ldr	r3, [r7, #20]
 8009034:	4618      	mov	r0, r3
 8009036:	f7f7 fa87 	bl	8000548 <__aeabi_f2d>
 800903a:	4680      	mov	r8, r0
 800903c:	4689      	mov	r9, r1
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	4618      	mov	r0, r3
 8009042:	f7f7 fa81 	bl	8000548 <__aeabi_f2d>
 8009046:	4604      	mov	r4, r0
 8009048:	460d      	mov	r5, r1
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	4618      	mov	r0, r3
 800904e:	f7f7 fa7b 	bl	8000548 <__aeabi_f2d>
 8009052:	4602      	mov	r2, r0
 8009054:	460b      	mov	r3, r1
 8009056:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800905a:	e9cd 4500 	strd	r4, r5, [sp]
 800905e:	4642      	mov	r2, r8
 8009060:	464b      	mov	r3, r9
 8009062:	4807      	ldr	r0, [pc, #28]	@ (8009080 <print_telemetry_data+0x278>)
 8009064:	f011 f894 	bl	801a190 <iprintf>


    printf("\n");
 8009068:	200a      	movs	r0, #10
 800906a:	f011 f8a3 	bl	801a1b4 <putchar>
    vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(TELEMETRY_TASK_HZ)));
 800906e:	2032      	movs	r0, #50	@ 0x32
 8009070:	f00b ff1e 	bl	8014eb0 <vTaskDelay>
    {
 8009074:	bf00      	nop
 8009076:	e6d5      	b.n	8008e24 <print_telemetry_data+0x1c>
 8009078:	20002828 	.word	0x20002828
 800907c:	42652ee1 	.word	0x42652ee1
 8009080:	080200e0 	.word	0x080200e0
 8009084:	20002b18 	.word	0x20002b18
 8009088:	20002ae4 	.word	0x20002ae4
 800908c:	2000296c 	.word	0x2000296c

08009090 <app_init>:
    }
}


void app_init(){
 8009090:	b580      	push	{r7, lr}
 8009092:	b08a      	sub	sp, #40	@ 0x28
 8009094:	af00      	add	r7, sp, #0
    init_imu();
 8009096:	f7ff fb2d 	bl	80086f4 <init_imu>
    flight_control_loop_init(&fcl);
 800909a:	483a      	ldr	r0, [pc, #232]	@ (8009184 <app_init+0xf4>)
 800909c:	f7f8 fc1e 	bl	80018dc <flight_control_loop_init>
    flight_control_loop_disarm_esc(&fcl);
 80090a0:	4838      	ldr	r0, [pc, #224]	@ (8009184 <app_init+0xf4>)
 80090a2:	f7f8 fbdc 	bl	800185e <flight_control_loop_disarm_esc>

    float duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, 0.0f);
 80090a6:	eddf 1a38 	vldr	s3, [pc, #224]	@ 8009188 <app_init+0xf8>
 80090aa:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 800918c <app_init+0xfc>
 80090ae:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8009190 <app_init+0x100>
 80090b2:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8009194 <app_init+0x104>
 80090b6:	f7ff f929 	bl	800830c <esc_pwm_throttle_to_duty_cycle>
 80090ba:	ed87 0a08 	vstr	s0, [r7, #32]
 80090be:	2300      	movs	r3, #0
 80090c0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80090c2:	f3ef 8310 	mrs	r3, PRIMASK
 80090c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80090c8:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 80090ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80090cc:	b672      	cpsid	i
}
 80090ce:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80090d0:	f3bf 8f4f 	dsb	sy
}
 80090d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80090d6:	f3bf 8f6f 	isb	sy
}
 80090da:	bf00      	nop
    return old;
 80090dc:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 80090de:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d001      	beq.n	80090ea <app_init+0x5a>
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	e000      	b.n	80090ec <app_init+0x5c>
 80090ea:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80090ec:	603b      	str	r3, [r7, #0]
 80090ee:	2301      	movs	r3, #1
 80090f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80090f2:	e029      	b.n	8009148 <app_init+0xb8>
	{
		pwm_init(&esc_motors[0], MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 80090f4:	edd7 0a08 	vldr	s1, [r7, #32]
 80090f8:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8009194 <app_init+0x104>
 80090fc:	4b26      	ldr	r3, [pc, #152]	@ (8009198 <app_init+0x108>)
 80090fe:	2200      	movs	r2, #0
 8009100:	4926      	ldr	r1, [pc, #152]	@ (800919c <app_init+0x10c>)
 8009102:	4827      	ldr	r0, [pc, #156]	@ (80091a0 <app_init+0x110>)
 8009104:	f7fe ffac 	bl	8008060 <pwm_init>
		pwm_init(&esc_motors[1], MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 8009108:	edd7 0a08 	vldr	s1, [r7, #32]
 800910c:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8009194 <app_init+0x104>
 8009110:	4b21      	ldr	r3, [pc, #132]	@ (8009198 <app_init+0x108>)
 8009112:	2204      	movs	r2, #4
 8009114:	4921      	ldr	r1, [pc, #132]	@ (800919c <app_init+0x10c>)
 8009116:	4823      	ldr	r0, [pc, #140]	@ (80091a4 <app_init+0x114>)
 8009118:	f7fe ffa2 	bl	8008060 <pwm_init>
		pwm_init(&esc_motors[2], MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 800911c:	edd7 0a08 	vldr	s1, [r7, #32]
 8009120:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8009194 <app_init+0x104>
 8009124:	4b1c      	ldr	r3, [pc, #112]	@ (8009198 <app_init+0x108>)
 8009126:	2208      	movs	r2, #8
 8009128:	491c      	ldr	r1, [pc, #112]	@ (800919c <app_init+0x10c>)
 800912a:	481f      	ldr	r0, [pc, #124]	@ (80091a8 <app_init+0x118>)
 800912c:	f7fe ff98 	bl	8008060 <pwm_init>
		pwm_init(&esc_motors[3], MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 8009130:	edd7 0a08 	vldr	s1, [r7, #32]
 8009134:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8009194 <app_init+0x104>
 8009138:	4b17      	ldr	r3, [pc, #92]	@ (8009198 <app_init+0x108>)
 800913a:	220c      	movs	r2, #12
 800913c:	4917      	ldr	r1, [pc, #92]	@ (800919c <app_init+0x10c>)
 800913e:	481b      	ldr	r0, [pc, #108]	@ (80091ac <app_init+0x11c>)
 8009140:	f7fe ff8e 	bl	8008060 <pwm_init>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009144:	2300      	movs	r3, #0
 8009146:	627b      	str	r3, [r7, #36]	@ 0x24
 8009148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800914a:	2b00      	cmp	r3, #0
 800914c:	d1d2      	bne.n	80090f4 <app_init+0x64>
 800914e:	463b      	mov	r3, r7
 8009150:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8009158:	f3bf 8f5f 	dmb	sy
}
 800915c:	bf00      	nop
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f383 8810 	msr	PRIMASK, r3
}
 8009168:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800916a:	f3bf 8f4f 	dsb	sy
}
 800916e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009170:	f3bf 8f6f 	isb	sy
}
 8009174:	bf00      	nop
}
 8009176:	bf00      	nop
}
 8009178:	bf00      	nop
	}
}
 800917a:	bf00      	nop
 800917c:	3728      	adds	r7, #40	@ 0x28
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	20002828 	.word	0x20002828
 8009188:	00000000 	.word	0x00000000
 800918c:	44fa0000 	.word	0x44fa0000
 8009190:	447a0000 	.word	0x447a0000
 8009194:	43c80000 	.word	0x43c80000
 8009198:	0501bd00 	.word	0x0501bd00
 800919c:	20002d54 	.word	0x20002d54
 80091a0:	20002c40 	.word	0x20002c40
 80091a4:	20002c54 	.word	0x20002c54
 80091a8:	20002c68 	.word	0x20002c68
 80091ac:	20002c7c 	.word	0x20002c7c

080091b0 <app_main>:

static TaskHandle_t flight_h, write_h, telem_h, read_rc_controller_h;
#define STACK_WORDS(bytes) ((bytes)/sizeof(StackType_t))

void app_main(void *argument)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b088      	sub	sp, #32
 80091b4:	af02      	add	r7, sp, #8
 80091b6:	6078      	str	r0, [r7, #4]
	app_init();
 80091b8:	f7ff ff6a 	bl	8009090 <app_init>
    configASSERT(pdPASS == xTaskCreate(flight_controller_main, "flight_controller_main", STACK_WORDS(2048), NULL, 15, &flight_h));
 80091bc:	4b36      	ldr	r3, [pc, #216]	@ (8009298 <app_main+0xe8>)
 80091be:	9301      	str	r3, [sp, #4]
 80091c0:	230f      	movs	r3, #15
 80091c2:	9300      	str	r3, [sp, #0]
 80091c4:	2300      	movs	r3, #0
 80091c6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091ca:	4934      	ldr	r1, [pc, #208]	@ (800929c <app_main+0xec>)
 80091cc:	4834      	ldr	r0, [pc, #208]	@ (80092a0 <app_main+0xf0>)
 80091ce:	f00b fd11 	bl	8014bf4 <xTaskCreate>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d00b      	beq.n	80091f0 <app_main+0x40>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80091ea:	bf00      	nop
 80091ec:	bf00      	nop
 80091ee:	e7fd      	b.n	80091ec <app_main+0x3c>
    configASSERT(pdPASS == xTaskCreate(write_motor_main, "write_motor_main", STACK_WORDS(2048), NULL, 14, &write_h));
 80091f0:	4b2c      	ldr	r3, [pc, #176]	@ (80092a4 <app_main+0xf4>)
 80091f2:	9301      	str	r3, [sp, #4]
 80091f4:	230e      	movs	r3, #14
 80091f6:	9300      	str	r3, [sp, #0]
 80091f8:	2300      	movs	r3, #0
 80091fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80091fe:	492a      	ldr	r1, [pc, #168]	@ (80092a8 <app_main+0xf8>)
 8009200:	482a      	ldr	r0, [pc, #168]	@ (80092ac <app_main+0xfc>)
 8009202:	f00b fcf7 	bl	8014bf4 <xTaskCreate>
 8009206:	4603      	mov	r3, r0
 8009208:	2b01      	cmp	r3, #1
 800920a:	d00b      	beq.n	8009224 <app_main+0x74>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	613b      	str	r3, [r7, #16]
}
 800921e:	bf00      	nop
 8009220:	bf00      	nop
 8009222:	e7fd      	b.n	8009220 <app_main+0x70>
    configASSERT(pdPASS == xTaskCreate(rc_control_main, "rc_control_main",  STACK_WORDS(2048), NULL, 13, &read_rc_controller_h));
 8009224:	4b22      	ldr	r3, [pc, #136]	@ (80092b0 <app_main+0x100>)
 8009226:	9301      	str	r3, [sp, #4]
 8009228:	230d      	movs	r3, #13
 800922a:	9300      	str	r3, [sp, #0]
 800922c:	2300      	movs	r3, #0
 800922e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009232:	4920      	ldr	r1, [pc, #128]	@ (80092b4 <app_main+0x104>)
 8009234:	4820      	ldr	r0, [pc, #128]	@ (80092b8 <app_main+0x108>)
 8009236:	f00b fcdd 	bl	8014bf4 <xTaskCreate>
 800923a:	4603      	mov	r3, r0
 800923c:	2b01      	cmp	r3, #1
 800923e:	d00b      	beq.n	8009258 <app_main+0xa8>
	__asm volatile
 8009240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009244:	f383 8811 	msr	BASEPRI, r3
 8009248:	f3bf 8f6f 	isb	sy
 800924c:	f3bf 8f4f 	dsb	sy
 8009250:	60fb      	str	r3, [r7, #12]
}
 8009252:	bf00      	nop
 8009254:	bf00      	nop
 8009256:	e7fd      	b.n	8009254 <app_main+0xa4>
    configASSERT(pdPASS == xTaskCreate(print_telemetry_data, "print_telemetry_data", STACK_WORDS(2048), NULL, 5, &telem_h));
 8009258:	4b18      	ldr	r3, [pc, #96]	@ (80092bc <app_main+0x10c>)
 800925a:	9301      	str	r3, [sp, #4]
 800925c:	2305      	movs	r3, #5
 800925e:	9300      	str	r3, [sp, #0]
 8009260:	2300      	movs	r3, #0
 8009262:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009266:	4916      	ldr	r1, [pc, #88]	@ (80092c0 <app_main+0x110>)
 8009268:	4816      	ldr	r0, [pc, #88]	@ (80092c4 <app_main+0x114>)
 800926a:	f00b fcc3 	bl	8014bf4 <xTaskCreate>
 800926e:	4603      	mov	r3, r0
 8009270:	2b01      	cmp	r3, #1
 8009272:	d00b      	beq.n	800928c <app_main+0xdc>
	__asm volatile
 8009274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009278:	f383 8811 	msr	BASEPRI, r3
 800927c:	f3bf 8f6f 	isb	sy
 8009280:	f3bf 8f4f 	dsb	sy
 8009284:	60bb      	str	r3, [r7, #8]
}
 8009286:	bf00      	nop
 8009288:	bf00      	nop
 800928a:	e7fd      	b.n	8009288 <app_main+0xd8>

    for (;;) {
        vTaskDelay(pdMS_TO_TICKS(1000));
 800928c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009290:	f00b fe0e 	bl	8014eb0 <vTaskDelay>
 8009294:	e7fa      	b.n	800928c <app_main+0xdc>
 8009296:	bf00      	nop
 8009298:	20002c98 	.word	0x20002c98
 800929c:	080200f0 	.word	0x080200f0
 80092a0:	080087c5 	.word	0x080087c5
 80092a4:	20002c9c 	.word	0x20002c9c
 80092a8:	08020108 	.word	0x08020108
 80092ac:	0800892d 	.word	0x0800892d
 80092b0:	20002ca4 	.word	0x20002ca4
 80092b4:	0802011c 	.word	0x0802011c
 80092b8:	08008b41 	.word	0x08008b41
 80092bc:	20002ca0 	.word	0x20002ca0
 80092c0:	0802012c 	.word	0x0802012c
 80092c4:	08008e09 	.word	0x08008e09

080092c8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80092cc:	4b17      	ldr	r3, [pc, #92]	@ (800932c <MX_SPI1_Init+0x64>)
 80092ce:	4a18      	ldr	r2, [pc, #96]	@ (8009330 <MX_SPI1_Init+0x68>)
 80092d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80092d2:	4b16      	ldr	r3, [pc, #88]	@ (800932c <MX_SPI1_Init+0x64>)
 80092d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80092d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80092da:	4b14      	ldr	r3, [pc, #80]	@ (800932c <MX_SPI1_Init+0x64>)
 80092dc:	2200      	movs	r2, #0
 80092de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80092e0:	4b12      	ldr	r3, [pc, #72]	@ (800932c <MX_SPI1_Init+0x64>)
 80092e2:	2200      	movs	r2, #0
 80092e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80092e6:	4b11      	ldr	r3, [pc, #68]	@ (800932c <MX_SPI1_Init+0x64>)
 80092e8:	2202      	movs	r2, #2
 80092ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80092ec:	4b0f      	ldr	r3, [pc, #60]	@ (800932c <MX_SPI1_Init+0x64>)
 80092ee:	2201      	movs	r2, #1
 80092f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80092f2:	4b0e      	ldr	r3, [pc, #56]	@ (800932c <MX_SPI1_Init+0x64>)
 80092f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80092f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80092fa:	4b0c      	ldr	r3, [pc, #48]	@ (800932c <MX_SPI1_Init+0x64>)
 80092fc:	2220      	movs	r2, #32
 80092fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009300:	4b0a      	ldr	r3, [pc, #40]	@ (800932c <MX_SPI1_Init+0x64>)
 8009302:	2200      	movs	r2, #0
 8009304:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009306:	4b09      	ldr	r3, [pc, #36]	@ (800932c <MX_SPI1_Init+0x64>)
 8009308:	2200      	movs	r2, #0
 800930a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800930c:	4b07      	ldr	r3, [pc, #28]	@ (800932c <MX_SPI1_Init+0x64>)
 800930e:	2200      	movs	r2, #0
 8009310:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009312:	4b06      	ldr	r3, [pc, #24]	@ (800932c <MX_SPI1_Init+0x64>)
 8009314:	220a      	movs	r2, #10
 8009316:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009318:	4804      	ldr	r0, [pc, #16]	@ (800932c <MX_SPI1_Init+0x64>)
 800931a:	f003 ffbd 	bl	800d298 <HAL_SPI_Init>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009324:	f7ff f998 	bl	8008658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009328:	bf00      	nop
 800932a:	bd80      	pop	{r7, pc}
 800932c:	20002cb0 	.word	0x20002cb0
 8009330:	40013000 	.word	0x40013000

08009334 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b08a      	sub	sp, #40	@ 0x28
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800933c:	f107 0314 	add.w	r3, r7, #20
 8009340:	2200      	movs	r2, #0
 8009342:	601a      	str	r2, [r3, #0]
 8009344:	605a      	str	r2, [r3, #4]
 8009346:	609a      	str	r2, [r3, #8]
 8009348:	60da      	str	r2, [r3, #12]
 800934a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a19      	ldr	r2, [pc, #100]	@ (80093b8 <HAL_SPI_MspInit+0x84>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d12b      	bne.n	80093ae <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009356:	2300      	movs	r3, #0
 8009358:	613b      	str	r3, [r7, #16]
 800935a:	4b18      	ldr	r3, [pc, #96]	@ (80093bc <HAL_SPI_MspInit+0x88>)
 800935c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800935e:	4a17      	ldr	r2, [pc, #92]	@ (80093bc <HAL_SPI_MspInit+0x88>)
 8009360:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009364:	6453      	str	r3, [r2, #68]	@ 0x44
 8009366:	4b15      	ldr	r3, [pc, #84]	@ (80093bc <HAL_SPI_MspInit+0x88>)
 8009368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800936a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800936e:	613b      	str	r3, [r7, #16]
 8009370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009372:	2300      	movs	r3, #0
 8009374:	60fb      	str	r3, [r7, #12]
 8009376:	4b11      	ldr	r3, [pc, #68]	@ (80093bc <HAL_SPI_MspInit+0x88>)
 8009378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800937a:	4a10      	ldr	r2, [pc, #64]	@ (80093bc <HAL_SPI_MspInit+0x88>)
 800937c:	f043 0301 	orr.w	r3, r3, #1
 8009380:	6313      	str	r3, [r2, #48]	@ 0x30
 8009382:	4b0e      	ldr	r3, [pc, #56]	@ (80093bc <HAL_SPI_MspInit+0x88>)
 8009384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009386:	f003 0301 	and.w	r3, r3, #1
 800938a:	60fb      	str	r3, [r7, #12]
 800938c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800938e:	23e0      	movs	r3, #224	@ 0xe0
 8009390:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009392:	2302      	movs	r3, #2
 8009394:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009396:	2300      	movs	r3, #0
 8009398:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800939a:	2303      	movs	r3, #3
 800939c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800939e:	2305      	movs	r3, #5
 80093a0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80093a2:	f107 0314 	add.w	r3, r7, #20
 80093a6:	4619      	mov	r1, r3
 80093a8:	4805      	ldr	r0, [pc, #20]	@ (80093c0 <HAL_SPI_MspInit+0x8c>)
 80093aa:	f001 fda7 	bl	800aefc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80093ae:	bf00      	nop
 80093b0:	3728      	adds	r7, #40	@ 0x28
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	40013000 	.word	0x40013000
 80093bc:	40023800 	.word	0x40023800
 80093c0:	40020000 	.word	0x40020000

080093c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093ca:	2300      	movs	r3, #0
 80093cc:	607b      	str	r3, [r7, #4]
 80093ce:	4b12      	ldr	r3, [pc, #72]	@ (8009418 <HAL_MspInit+0x54>)
 80093d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093d2:	4a11      	ldr	r2, [pc, #68]	@ (8009418 <HAL_MspInit+0x54>)
 80093d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80093d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80093da:	4b0f      	ldr	r3, [pc, #60]	@ (8009418 <HAL_MspInit+0x54>)
 80093dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80093e2:	607b      	str	r3, [r7, #4]
 80093e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80093e6:	2300      	movs	r3, #0
 80093e8:	603b      	str	r3, [r7, #0]
 80093ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009418 <HAL_MspInit+0x54>)
 80093ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009418 <HAL_MspInit+0x54>)
 80093f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80093f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80093f6:	4b08      	ldr	r3, [pc, #32]	@ (8009418 <HAL_MspInit+0x54>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80093fe:	603b      	str	r3, [r7, #0]
 8009400:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009402:	2200      	movs	r2, #0
 8009404:	210f      	movs	r1, #15
 8009406:	f06f 0001 	mvn.w	r0, #1
 800940a:	f001 f8df 	bl	800a5cc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800940e:	bf00      	nop
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	40023800 	.word	0x40023800

0800941c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b08c      	sub	sp, #48	@ 0x30
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8009424:	2300      	movs	r3, #0
 8009426:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8009428:	2300      	movs	r3, #0
 800942a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800942c:	2300      	movs	r3, #0
 800942e:	60bb      	str	r3, [r7, #8]
 8009430:	4b2f      	ldr	r3, [pc, #188]	@ (80094f0 <HAL_InitTick+0xd4>)
 8009432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009434:	4a2e      	ldr	r2, [pc, #184]	@ (80094f0 <HAL_InitTick+0xd4>)
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	6453      	str	r3, [r2, #68]	@ 0x44
 800943c:	4b2c      	ldr	r3, [pc, #176]	@ (80094f0 <HAL_InitTick+0xd4>)
 800943e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009440:	f003 0301 	and.w	r3, r3, #1
 8009444:	60bb      	str	r3, [r7, #8]
 8009446:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009448:	f107 020c 	add.w	r2, r7, #12
 800944c:	f107 0310 	add.w	r3, r7, #16
 8009450:	4611      	mov	r1, r2
 8009452:	4618      	mov	r0, r3
 8009454:	f003 feee 	bl	800d234 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8009458:	f003 fed8 	bl	800d20c <HAL_RCC_GetPCLK2Freq>
 800945c:	4603      	mov	r3, r0
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8009462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009464:	4a23      	ldr	r2, [pc, #140]	@ (80094f4 <HAL_InitTick+0xd8>)
 8009466:	fba2 2303 	umull	r2, r3, r2, r3
 800946a:	0c9b      	lsrs	r3, r3, #18
 800946c:	3b01      	subs	r3, #1
 800946e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8009470:	4b21      	ldr	r3, [pc, #132]	@ (80094f8 <HAL_InitTick+0xdc>)
 8009472:	4a22      	ldr	r2, [pc, #136]	@ (80094fc <HAL_InitTick+0xe0>)
 8009474:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8009476:	4b20      	ldr	r3, [pc, #128]	@ (80094f8 <HAL_InitTick+0xdc>)
 8009478:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800947c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800947e:	4a1e      	ldr	r2, [pc, #120]	@ (80094f8 <HAL_InitTick+0xdc>)
 8009480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009482:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8009484:	4b1c      	ldr	r3, [pc, #112]	@ (80094f8 <HAL_InitTick+0xdc>)
 8009486:	2200      	movs	r2, #0
 8009488:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800948a:	4b1b      	ldr	r3, [pc, #108]	@ (80094f8 <HAL_InitTick+0xdc>)
 800948c:	2200      	movs	r2, #0
 800948e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009490:	4b19      	ldr	r3, [pc, #100]	@ (80094f8 <HAL_InitTick+0xdc>)
 8009492:	2200      	movs	r2, #0
 8009494:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8009496:	4818      	ldr	r0, [pc, #96]	@ (80094f8 <HAL_InitTick+0xdc>)
 8009498:	f004 fcd0 	bl	800de3c <HAL_TIM_Base_Init>
 800949c:	4603      	mov	r3, r0
 800949e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80094a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d11b      	bne.n	80094e2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80094aa:	4813      	ldr	r0, [pc, #76]	@ (80094f8 <HAL_InitTick+0xdc>)
 80094ac:	f004 fd7e 	bl	800dfac <HAL_TIM_Base_Start_IT>
 80094b0:	4603      	mov	r3, r0
 80094b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80094b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d111      	bne.n	80094e2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80094be:	2019      	movs	r0, #25
 80094c0:	f001 f8a0 	bl	800a604 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2b0f      	cmp	r3, #15
 80094c8:	d808      	bhi.n	80094dc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80094ca:	2200      	movs	r2, #0
 80094cc:	6879      	ldr	r1, [r7, #4]
 80094ce:	2019      	movs	r0, #25
 80094d0:	f001 f87c 	bl	800a5cc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80094d4:	4a0a      	ldr	r2, [pc, #40]	@ (8009500 <HAL_InitTick+0xe4>)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6013      	str	r3, [r2, #0]
 80094da:	e002      	b.n	80094e2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80094e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	3730      	adds	r7, #48	@ 0x30
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	40023800 	.word	0x40023800
 80094f4:	431bde83 	.word	0x431bde83
 80094f8:	20002d08 	.word	0x20002d08
 80094fc:	40010000 	.word	0x40010000
 8009500:	20000058 	.word	0x20000058

08009504 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009504:	b480      	push	{r7}
 8009506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009508:	bf00      	nop
 800950a:	e7fd      	b.n	8009508 <NMI_Handler+0x4>

0800950c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800950c:	b480      	push	{r7}
 800950e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009510:	bf00      	nop
 8009512:	e7fd      	b.n	8009510 <HardFault_Handler+0x4>

08009514 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009518:	bf00      	nop
 800951a:	e7fd      	b.n	8009518 <MemManage_Handler+0x4>

0800951c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800951c:	b480      	push	{r7}
 800951e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009520:	bf00      	nop
 8009522:	e7fd      	b.n	8009520 <BusFault_Handler+0x4>

08009524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009524:	b480      	push	{r7}
 8009526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009528:	bf00      	nop
 800952a:	e7fd      	b.n	8009528 <UsageFault_Handler+0x4>

0800952c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800952c:	b480      	push	{r7}
 800952e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009530:	bf00      	nop
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
	...

0800953c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8009540:	4802      	ldr	r0, [pc, #8]	@ (800954c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8009542:	f004 ff23 	bl	800e38c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009546:	bf00      	nop
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20002d08 	.word	0x20002d08

08009550 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009554:	4802      	ldr	r0, [pc, #8]	@ (8009560 <TIM4_IRQHandler+0x10>)
 8009556:	f004 ff19 	bl	800e38c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800955a:	bf00      	nop
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20002d9c 	.word	0x20002d9c

08009564 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800956a:	480e      	ldr	r0, [pc, #56]	@ (80095a4 <USART1_IRQHandler+0x40>)
 800956c:	f005 fe74 	bl	800f258 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 8009570:	4b0c      	ldr	r3, [pc, #48]	@ (80095a4 <USART1_IRQHandler+0x40>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f003 0310 	and.w	r3, r3, #16
 800957a:	2b10      	cmp	r3, #16
 800957c:	d10d      	bne.n	800959a <USART1_IRQHandler+0x36>
  {
      __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800957e:	2300      	movs	r3, #0
 8009580:	607b      	str	r3, [r7, #4]
 8009582:	4b08      	ldr	r3, [pc, #32]	@ (80095a4 <USART1_IRQHandler+0x40>)
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	607b      	str	r3, [r7, #4]
 800958a:	4b06      	ldr	r3, [pc, #24]	@ (80095a4 <USART1_IRQHandler+0x40>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	607b      	str	r3, [r7, #4]
 8009592:	687b      	ldr	r3, [r7, #4]
      HAL_UART_IDLECallback(&huart1);
 8009594:	4803      	ldr	r0, [pc, #12]	@ (80095a4 <USART1_IRQHandler+0x40>)
 8009596:	f000 fc0d 	bl	8009db4 <HAL_UART_IDLECallback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 800959a:	bf00      	nop
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	20003e8c 	.word	0x20003e8c

080095a8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80095ac:	4802      	ldr	r0, [pc, #8]	@ (80095b8 <DMA2_Stream2_IRQHandler+0x10>)
 80095ae:	f001 fa3b 	bl	800aa28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80095b2:	bf00      	nop
 80095b4:	bd80      	pop	{r7, pc}
 80095b6:	bf00      	nop
 80095b8:	20003ed4 	.word	0x20003ed4

080095bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80095c0:	4802      	ldr	r0, [pc, #8]	@ (80095cc <OTG_FS_IRQHandler+0x10>)
 80095c2:	f002 f890 	bl	800b6e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80095c6:	bf00      	nop
 80095c8:	bd80      	pop	{r7, pc}
 80095ca:	bf00      	nop
 80095cc:	20009e60 	.word	0x20009e60

080095d0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80095d0:	b580      	push	{r7, lr}
 80095d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80095d4:	4802      	ldr	r0, [pc, #8]	@ (80095e0 <DMA2_Stream7_IRQHandler+0x10>)
 80095d6:	f001 fa27 	bl	800aa28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80095da:	bf00      	nop
 80095dc:	bd80      	pop	{r7, pc}
 80095de:	bf00      	nop
 80095e0:	20003f34 	.word	0x20003f34

080095e4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80095e4:	b480      	push	{r7}
 80095e6:	af00      	add	r7, sp, #0
  return 1;
 80095e8:	2301      	movs	r3, #1
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <_kill>:

int _kill(int pid, int sig)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b082      	sub	sp, #8
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
 80095fc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80095fe:	f011 f831 	bl	801a664 <__errno>
 8009602:	4603      	mov	r3, r0
 8009604:	2216      	movs	r2, #22
 8009606:	601a      	str	r2, [r3, #0]
  return -1;
 8009608:	f04f 33ff 	mov.w	r3, #4294967295
}
 800960c:	4618      	mov	r0, r3
 800960e:	3708      	adds	r7, #8
 8009610:	46bd      	mov	sp, r7
 8009612:	bd80      	pop	{r7, pc}

08009614 <_exit>:

void _exit (int status)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b082      	sub	sp, #8
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800961c:	f04f 31ff 	mov.w	r1, #4294967295
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f7ff ffe7 	bl	80095f4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009626:	bf00      	nop
 8009628:	e7fd      	b.n	8009626 <_exit+0x12>

0800962a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b086      	sub	sp, #24
 800962e:	af00      	add	r7, sp, #0
 8009630:	60f8      	str	r0, [r7, #12]
 8009632:	60b9      	str	r1, [r7, #8]
 8009634:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009636:	2300      	movs	r3, #0
 8009638:	617b      	str	r3, [r7, #20]
 800963a:	e00a      	b.n	8009652 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800963c:	f3af 8000 	nop.w
 8009640:	4601      	mov	r1, r0
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	1c5a      	adds	r2, r3, #1
 8009646:	60ba      	str	r2, [r7, #8]
 8009648:	b2ca      	uxtb	r2, r1
 800964a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	3301      	adds	r3, #1
 8009650:	617b      	str	r3, [r7, #20]
 8009652:	697a      	ldr	r2, [r7, #20]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	429a      	cmp	r2, r3
 8009658:	dbf0      	blt.n	800963c <_read+0x12>
  }

  return len;
 800965a:	687b      	ldr	r3, [r7, #4]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <_close>:
  }
  return len;
}

int _close(int file)
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800966c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009670:	4618      	mov	r0, r3
 8009672:	370c      	adds	r7, #12
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr

0800967c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800967c:	b480      	push	{r7}
 800967e:	b083      	sub	sp, #12
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800968c:	605a      	str	r2, [r3, #4]
  return 0;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	370c      	adds	r7, #12
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <_isatty>:

int _isatty(int file)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80096a4:	2301      	movs	r3, #1
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	370c      	adds	r7, #12
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr

080096b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80096b2:	b480      	push	{r7}
 80096b4:	b085      	sub	sp, #20
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	60f8      	str	r0, [r7, #12]
 80096ba:	60b9      	str	r1, [r7, #8]
 80096bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3714      	adds	r7, #20
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b086      	sub	sp, #24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80096d4:	4a14      	ldr	r2, [pc, #80]	@ (8009728 <_sbrk+0x5c>)
 80096d6:	4b15      	ldr	r3, [pc, #84]	@ (800972c <_sbrk+0x60>)
 80096d8:	1ad3      	subs	r3, r2, r3
 80096da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80096e0:	4b13      	ldr	r3, [pc, #76]	@ (8009730 <_sbrk+0x64>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d102      	bne.n	80096ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80096e8:	4b11      	ldr	r3, [pc, #68]	@ (8009730 <_sbrk+0x64>)
 80096ea:	4a12      	ldr	r2, [pc, #72]	@ (8009734 <_sbrk+0x68>)
 80096ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80096ee:	4b10      	ldr	r3, [pc, #64]	@ (8009730 <_sbrk+0x64>)
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	4413      	add	r3, r2
 80096f6:	693a      	ldr	r2, [r7, #16]
 80096f8:	429a      	cmp	r2, r3
 80096fa:	d207      	bcs.n	800970c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80096fc:	f010 ffb2 	bl	801a664 <__errno>
 8009700:	4603      	mov	r3, r0
 8009702:	220c      	movs	r2, #12
 8009704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009706:	f04f 33ff 	mov.w	r3, #4294967295
 800970a:	e009      	b.n	8009720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800970c:	4b08      	ldr	r3, [pc, #32]	@ (8009730 <_sbrk+0x64>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009712:	4b07      	ldr	r3, [pc, #28]	@ (8009730 <_sbrk+0x64>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4413      	add	r3, r2
 800971a:	4a05      	ldr	r2, [pc, #20]	@ (8009730 <_sbrk+0x64>)
 800971c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800971e:	68fb      	ldr	r3, [r7, #12]
}
 8009720:	4618      	mov	r0, r3
 8009722:	3718      	adds	r7, #24
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}
 8009728:	20020000 	.word	0x20020000
 800972c:	00000400 	.word	0x00000400
 8009730:	20002d50 	.word	0x20002d50
 8009734:	2000a6b0 	.word	0x2000a6b0

08009738 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009738:	b480      	push	{r7}
 800973a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800973c:	4b06      	ldr	r3, [pc, #24]	@ (8009758 <SystemInit+0x20>)
 800973e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009742:	4a05      	ldr	r2, [pc, #20]	@ (8009758 <SystemInit+0x20>)
 8009744:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009748:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800974c:	bf00      	nop
 800974e:	46bd      	mov	sp, r7
 8009750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009754:	4770      	bx	lr
 8009756:	bf00      	nop
 8009758:	e000ed00 	.word	0xe000ed00

0800975c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b08e      	sub	sp, #56	@ 0x38
 8009760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009762:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009766:	2200      	movs	r2, #0
 8009768:	601a      	str	r2, [r3, #0]
 800976a:	605a      	str	r2, [r3, #4]
 800976c:	609a      	str	r2, [r3, #8]
 800976e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009770:	f107 0320 	add.w	r3, r7, #32
 8009774:	2200      	movs	r2, #0
 8009776:	601a      	str	r2, [r3, #0]
 8009778:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800977a:	1d3b      	adds	r3, r7, #4
 800977c:	2200      	movs	r2, #0
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	605a      	str	r2, [r3, #4]
 8009782:	609a      	str	r2, [r3, #8]
 8009784:	60da      	str	r2, [r3, #12]
 8009786:	611a      	str	r2, [r3, #16]
 8009788:	615a      	str	r2, [r3, #20]
 800978a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800978c:	4b3d      	ldr	r3, [pc, #244]	@ (8009884 <MX_TIM2_Init+0x128>)
 800978e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009792:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009794:	4b3b      	ldr	r3, [pc, #236]	@ (8009884 <MX_TIM2_Init+0x128>)
 8009796:	2200      	movs	r2, #0
 8009798:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800979a:	4b3a      	ldr	r3, [pc, #232]	@ (8009884 <MX_TIM2_Init+0x128>)
 800979c:	2200      	movs	r2, #0
 800979e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80097a0:	4b38      	ldr	r3, [pc, #224]	@ (8009884 <MX_TIM2_Init+0x128>)
 80097a2:	2200      	movs	r2, #0
 80097a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80097a6:	4b37      	ldr	r3, [pc, #220]	@ (8009884 <MX_TIM2_Init+0x128>)
 80097a8:	2200      	movs	r2, #0
 80097aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80097ac:	4b35      	ldr	r3, [pc, #212]	@ (8009884 <MX_TIM2_Init+0x128>)
 80097ae:	2280      	movs	r2, #128	@ 0x80
 80097b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80097b2:	4834      	ldr	r0, [pc, #208]	@ (8009884 <MX_TIM2_Init+0x128>)
 80097b4:	f004 fb42 	bl	800de3c <HAL_TIM_Base_Init>
 80097b8:	4603      	mov	r3, r0
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d001      	beq.n	80097c2 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80097be:	f7fe ff4b 	bl	8008658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80097c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80097c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80097c8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80097cc:	4619      	mov	r1, r3
 80097ce:	482d      	ldr	r0, [pc, #180]	@ (8009884 <MX_TIM2_Init+0x128>)
 80097d0:	f004 ff8e 	bl	800e6f0 <HAL_TIM_ConfigClockSource>
 80097d4:	4603      	mov	r3, r0
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d001      	beq.n	80097de <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80097da:	f7fe ff3d 	bl	8008658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80097de:	4829      	ldr	r0, [pc, #164]	@ (8009884 <MX_TIM2_Init+0x128>)
 80097e0:	f004 fc54 	bl	800e08c <HAL_TIM_PWM_Init>
 80097e4:	4603      	mov	r3, r0
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d001      	beq.n	80097ee <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80097ea:	f7fe ff35 	bl	8008658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80097ee:	2300      	movs	r3, #0
 80097f0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80097f2:	2300      	movs	r3, #0
 80097f4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80097f6:	f107 0320 	add.w	r3, r7, #32
 80097fa:	4619      	mov	r1, r3
 80097fc:	4821      	ldr	r0, [pc, #132]	@ (8009884 <MX_TIM2_Init+0x128>)
 80097fe:	f005 fb83 	bl	800ef08 <HAL_TIMEx_MasterConfigSynchronization>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d001      	beq.n	800980c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8009808:	f7fe ff26 	bl	8008658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800980c:	2360      	movs	r3, #96	@ 0x60
 800980e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009810:	2300      	movs	r3, #0
 8009812:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009814:	2300      	movs	r3, #0
 8009816:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009818:	2300      	movs	r3, #0
 800981a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800981c:	1d3b      	adds	r3, r7, #4
 800981e:	2200      	movs	r2, #0
 8009820:	4619      	mov	r1, r3
 8009822:	4818      	ldr	r0, [pc, #96]	@ (8009884 <MX_TIM2_Init+0x128>)
 8009824:	f004 fea2 	bl	800e56c <HAL_TIM_PWM_ConfigChannel>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800982e:	f7fe ff13 	bl	8008658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009832:	1d3b      	adds	r3, r7, #4
 8009834:	2204      	movs	r2, #4
 8009836:	4619      	mov	r1, r3
 8009838:	4812      	ldr	r0, [pc, #72]	@ (8009884 <MX_TIM2_Init+0x128>)
 800983a:	f004 fe97 	bl	800e56c <HAL_TIM_PWM_ConfigChannel>
 800983e:	4603      	mov	r3, r0
 8009840:	2b00      	cmp	r3, #0
 8009842:	d001      	beq.n	8009848 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8009844:	f7fe ff08 	bl	8008658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009848:	1d3b      	adds	r3, r7, #4
 800984a:	2208      	movs	r2, #8
 800984c:	4619      	mov	r1, r3
 800984e:	480d      	ldr	r0, [pc, #52]	@ (8009884 <MX_TIM2_Init+0x128>)
 8009850:	f004 fe8c 	bl	800e56c <HAL_TIM_PWM_ConfigChannel>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800985a:	f7fe fefd 	bl	8008658 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800985e:	1d3b      	adds	r3, r7, #4
 8009860:	220c      	movs	r2, #12
 8009862:	4619      	mov	r1, r3
 8009864:	4807      	ldr	r0, [pc, #28]	@ (8009884 <MX_TIM2_Init+0x128>)
 8009866:	f004 fe81 	bl	800e56c <HAL_TIM_PWM_ConfigChannel>
 800986a:	4603      	mov	r3, r0
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8009870:	f7fe fef2 	bl	8008658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009874:	4803      	ldr	r0, [pc, #12]	@ (8009884 <MX_TIM2_Init+0x128>)
 8009876:	f000 f897 	bl	80099a8 <HAL_TIM_MspPostInit>

}
 800987a:	bf00      	nop
 800987c:	3738      	adds	r7, #56	@ 0x38
 800987e:	46bd      	mov	sp, r7
 8009880:	bd80      	pop	{r7, pc}
 8009882:	bf00      	nop
 8009884:	20002d54 	.word	0x20002d54

08009888 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009888:	b580      	push	{r7, lr}
 800988a:	b086      	sub	sp, #24
 800988c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800988e:	f107 0308 	add.w	r3, r7, #8
 8009892:	2200      	movs	r2, #0
 8009894:	601a      	str	r2, [r3, #0]
 8009896:	605a      	str	r2, [r3, #4]
 8009898:	609a      	str	r2, [r3, #8]
 800989a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800989c:	463b      	mov	r3, r7
 800989e:	2200      	movs	r2, #0
 80098a0:	601a      	str	r2, [r3, #0]
 80098a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80098a4:	4b20      	ldr	r3, [pc, #128]	@ (8009928 <MX_TIM4_Init+0xa0>)
 80098a6:	4a21      	ldr	r2, [pc, #132]	@ (800992c <MX_TIM4_Init+0xa4>)
 80098a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80098aa:	4b1f      	ldr	r3, [pc, #124]	@ (8009928 <MX_TIM4_Init+0xa0>)
 80098ac:	2253      	movs	r2, #83	@ 0x53
 80098ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80098b0:	4b1d      	ldr	r3, [pc, #116]	@ (8009928 <MX_TIM4_Init+0xa0>)
 80098b2:	2200      	movs	r2, #0
 80098b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80098b6:	4b1c      	ldr	r3, [pc, #112]	@ (8009928 <MX_TIM4_Init+0xa0>)
 80098b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80098bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80098be:	4b1a      	ldr	r3, [pc, #104]	@ (8009928 <MX_TIM4_Init+0xa0>)
 80098c0:	2200      	movs	r2, #0
 80098c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80098c4:	4b18      	ldr	r3, [pc, #96]	@ (8009928 <MX_TIM4_Init+0xa0>)
 80098c6:	2200      	movs	r2, #0
 80098c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80098ca:	4817      	ldr	r0, [pc, #92]	@ (8009928 <MX_TIM4_Init+0xa0>)
 80098cc:	f004 fab6 	bl	800de3c <HAL_TIM_Base_Init>
 80098d0:	4603      	mov	r3, r0
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d001      	beq.n	80098da <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80098d6:	f7fe febf 	bl	8008658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80098da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80098e0:	f107 0308 	add.w	r3, r7, #8
 80098e4:	4619      	mov	r1, r3
 80098e6:	4810      	ldr	r0, [pc, #64]	@ (8009928 <MX_TIM4_Init+0xa0>)
 80098e8:	f004 ff02 	bl	800e6f0 <HAL_TIM_ConfigClockSource>
 80098ec:	4603      	mov	r3, r0
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80098f2:	f7fe feb1 	bl	8008658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80098f6:	2300      	movs	r3, #0
 80098f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80098fa:	2300      	movs	r3, #0
 80098fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80098fe:	463b      	mov	r3, r7
 8009900:	4619      	mov	r1, r3
 8009902:	4809      	ldr	r0, [pc, #36]	@ (8009928 <MX_TIM4_Init+0xa0>)
 8009904:	f005 fb00 	bl	800ef08 <HAL_TIMEx_MasterConfigSynchronization>
 8009908:	4603      	mov	r3, r0
 800990a:	2b00      	cmp	r3, #0
 800990c:	d001      	beq.n	8009912 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800990e:	f7fe fea3 	bl	8008658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8009912:	4805      	ldr	r0, [pc, #20]	@ (8009928 <MX_TIM4_Init+0xa0>)
 8009914:	f004 fb4a 	bl	800dfac <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 8009918:	4803      	ldr	r0, [pc, #12]	@ (8009928 <MX_TIM4_Init+0xa0>)
 800991a:	f004 fadf 	bl	800dedc <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 800991e:	bf00      	nop
 8009920:	3718      	adds	r7, #24
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	20002d9c 	.word	0x20002d9c
 800992c:	40000800 	.word	0x40000800

08009930 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009940:	d10e      	bne.n	8009960 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009942:	2300      	movs	r3, #0
 8009944:	60fb      	str	r3, [r7, #12]
 8009946:	4b16      	ldr	r3, [pc, #88]	@ (80099a0 <HAL_TIM_Base_MspInit+0x70>)
 8009948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800994a:	4a15      	ldr	r2, [pc, #84]	@ (80099a0 <HAL_TIM_Base_MspInit+0x70>)
 800994c:	f043 0301 	orr.w	r3, r3, #1
 8009950:	6413      	str	r3, [r2, #64]	@ 0x40
 8009952:	4b13      	ldr	r3, [pc, #76]	@ (80099a0 <HAL_TIM_Base_MspInit+0x70>)
 8009954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009956:	f003 0301 	and.w	r3, r3, #1
 800995a:	60fb      	str	r3, [r7, #12]
 800995c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800995e:	e01a      	b.n	8009996 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a0f      	ldr	r2, [pc, #60]	@ (80099a4 <HAL_TIM_Base_MspInit+0x74>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d115      	bne.n	8009996 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800996a:	2300      	movs	r3, #0
 800996c:	60bb      	str	r3, [r7, #8]
 800996e:	4b0c      	ldr	r3, [pc, #48]	@ (80099a0 <HAL_TIM_Base_MspInit+0x70>)
 8009970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009972:	4a0b      	ldr	r2, [pc, #44]	@ (80099a0 <HAL_TIM_Base_MspInit+0x70>)
 8009974:	f043 0304 	orr.w	r3, r3, #4
 8009978:	6413      	str	r3, [r2, #64]	@ 0x40
 800997a:	4b09      	ldr	r3, [pc, #36]	@ (80099a0 <HAL_TIM_Base_MspInit+0x70>)
 800997c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800997e:	f003 0304 	and.w	r3, r3, #4
 8009982:	60bb      	str	r3, [r7, #8]
 8009984:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8009986:	2200      	movs	r2, #0
 8009988:	2105      	movs	r1, #5
 800998a:	201e      	movs	r0, #30
 800998c:	f000 fe1e 	bl	800a5cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009990:	201e      	movs	r0, #30
 8009992:	f000 fe37 	bl	800a604 <HAL_NVIC_EnableIRQ>
}
 8009996:	bf00      	nop
 8009998:	3710      	adds	r7, #16
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}
 800999e:	bf00      	nop
 80099a0:	40023800 	.word	0x40023800
 80099a4:	40000800 	.word	0x40000800

080099a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b08a      	sub	sp, #40	@ 0x28
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80099b0:	f107 0314 	add.w	r3, r7, #20
 80099b4:	2200      	movs	r2, #0
 80099b6:	601a      	str	r2, [r3, #0]
 80099b8:	605a      	str	r2, [r3, #4]
 80099ba:	609a      	str	r2, [r3, #8]
 80099bc:	60da      	str	r2, [r3, #12]
 80099be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80099c8:	d13c      	bne.n	8009a44 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80099ca:	2300      	movs	r3, #0
 80099cc:	613b      	str	r3, [r7, #16]
 80099ce:	4b1f      	ldr	r3, [pc, #124]	@ (8009a4c <HAL_TIM_MspPostInit+0xa4>)
 80099d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099d2:	4a1e      	ldr	r2, [pc, #120]	@ (8009a4c <HAL_TIM_MspPostInit+0xa4>)
 80099d4:	f043 0301 	orr.w	r3, r3, #1
 80099d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80099da:	4b1c      	ldr	r3, [pc, #112]	@ (8009a4c <HAL_TIM_MspPostInit+0xa4>)
 80099dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	613b      	str	r3, [r7, #16]
 80099e4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80099e6:	2300      	movs	r3, #0
 80099e8:	60fb      	str	r3, [r7, #12]
 80099ea:	4b18      	ldr	r3, [pc, #96]	@ (8009a4c <HAL_TIM_MspPostInit+0xa4>)
 80099ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099ee:	4a17      	ldr	r2, [pc, #92]	@ (8009a4c <HAL_TIM_MspPostInit+0xa4>)
 80099f0:	f043 0302 	orr.w	r3, r3, #2
 80099f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80099f6:	4b15      	ldr	r3, [pc, #84]	@ (8009a4c <HAL_TIM_MspPostInit+0xa4>)
 80099f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80099fa:	f003 0302 	and.w	r3, r3, #2
 80099fe:	60fb      	str	r3, [r7, #12]
 8009a00:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8009a02:	f248 030c 	movw	r3, #32780	@ 0x800c
 8009a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a08:	2302      	movs	r3, #2
 8009a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009a10:	2301      	movs	r3, #1
 8009a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009a14:	2301      	movs	r3, #1
 8009a16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009a18:	f107 0314 	add.w	r3, r7, #20
 8009a1c:	4619      	mov	r1, r3
 8009a1e:	480c      	ldr	r0, [pc, #48]	@ (8009a50 <HAL_TIM_MspPostInit+0xa8>)
 8009a20:	f001 fa6c 	bl	800aefc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009a24:	2308      	movs	r3, #8
 8009a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009a28:	2302      	movs	r3, #2
 8009a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009a30:	2301      	movs	r3, #1
 8009a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009a34:	2301      	movs	r3, #1
 8009a36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009a38:	f107 0314 	add.w	r3, r7, #20
 8009a3c:	4619      	mov	r1, r3
 8009a3e:	4805      	ldr	r0, [pc, #20]	@ (8009a54 <HAL_TIM_MspPostInit+0xac>)
 8009a40:	f001 fa5c 	bl	800aefc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8009a44:	bf00      	nop
 8009a46:	3728      	adds	r7, #40	@ 0x28
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}
 8009a4c:	40023800 	.word	0x40023800
 8009a50:	40020000 	.word	0x40020000
 8009a54:	40020400 	.word	0x40020400

08009a58 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
	ring_buffer_init(&usart1_tx_ring_buffer, usart1_tx_buffer, USART1_TX_BUFFER_SIZE);
 8009a5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a62:	4929      	ldr	r1, [pc, #164]	@ (8009b08 <MX_USART1_UART_Init+0xb0>)
 8009a64:	4829      	ldr	r0, [pc, #164]	@ (8009b0c <MX_USART1_UART_Init+0xb4>)
 8009a66:	f7fe f8b5 	bl	8007bd4 <ring_buffer_init>
	ring_buffer_init(&usart1_rx_ring_buffer, usart1_rx_buffer, USART1_RX_BUFFER_SIZE);
 8009a6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009a6e:	4928      	ldr	r1, [pc, #160]	@ (8009b10 <MX_USART1_UART_Init+0xb8>)
 8009a70:	4828      	ldr	r0, [pc, #160]	@ (8009b14 <MX_USART1_UART_Init+0xbc>)
 8009a72:	f7fe f8af 	bl	8007bd4 <ring_buffer_init>
	usart1_last_tx_size = 0;
 8009a76:	4b28      	ldr	r3, [pc, #160]	@ (8009b18 <MX_USART1_UART_Init+0xc0>)
 8009a78:	2200      	movs	r2, #0
 8009a7a:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 8009a7c:	4b27      	ldr	r3, [pc, #156]	@ (8009b1c <MX_USART1_UART_Init+0xc4>)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009a82:	4b27      	ldr	r3, [pc, #156]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009a84:	4a27      	ldr	r2, [pc, #156]	@ (8009b24 <MX_USART1_UART_Init+0xcc>)
 8009a86:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009a88:	4b25      	ldr	r3, [pc, #148]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009a8a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009a8e:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009a90:	4b23      	ldr	r3, [pc, #140]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009a92:	2200      	movs	r2, #0
 8009a94:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009a96:	4b22      	ldr	r3, [pc, #136]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009a98:	2200      	movs	r2, #0
 8009a9a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009a9c:	4b20      	ldr	r3, [pc, #128]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009aa2:	4b1f      	ldr	r3, [pc, #124]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009aa4:	220c      	movs	r2, #12
 8009aa6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009aaa:	2200      	movs	r2, #0
 8009aac:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8009aae:	4b1c      	ldr	r3, [pc, #112]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009ab0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009ab4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009ab6:	481a      	ldr	r0, [pc, #104]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009ab8:	f005 fab6 	bl	800f028 <HAL_UART_Init>
 8009abc:	4603      	mov	r3, r0
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d001      	beq.n	8009ac6 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8009ac2:	f7fe fdc9 	bl	8008658 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  uint16_t rx_buffer_remaining_free = (uint16_t)ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 8009ac6:	4813      	ldr	r0, [pc, #76]	@ (8009b14 <MX_USART1_UART_Init+0xbc>)
 8009ac8:	f7fe f8db 	bl	8007c82 <ring_buffer_linear_free_space>
 8009acc:	4603      	mov	r3, r0
 8009ace:	80fb      	strh	r3, [r7, #6]
  uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 8009ad0:	4810      	ldr	r0, [pc, #64]	@ (8009b14 <MX_USART1_UART_Init+0xbc>)
 8009ad2:	f7fe f918 	bl	8007d06 <ring_buffer_write_ptr>
 8009ad6:	6038      	str	r0, [r7, #0]
//   usart1_last_rx_len = rx_buffer_remaining_free;
//   HAL_UART_Receive_DMA(&huart1, write_ptr, rx_buffer_remaining_free);

  HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 8009ad8:	2280      	movs	r2, #128	@ 0x80
 8009ada:	4913      	ldr	r1, [pc, #76]	@ (8009b28 <MX_USART1_UART_Init+0xd0>)
 8009adc:	4810      	ldr	r0, [pc, #64]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009ade:	f005 fb95 	bl	800f20c <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 8009ae2:	4b0e      	ldr	r3, [pc, #56]	@ (8009b1c <MX_USART1_UART_Init+0xc4>)
 8009ae4:	2280      	movs	r2, #128	@ 0x80
 8009ae6:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 8009ae8:	4b10      	ldr	r3, [pc, #64]	@ (8009b2c <MX_USART1_UART_Init+0xd4>)
 8009aea:	2200      	movs	r2, #0
 8009aec:	801a      	strh	r2, [r3, #0]

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8009aee:	4b0c      	ldr	r3, [pc, #48]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68da      	ldr	r2, [r3, #12]
 8009af4:	4b0a      	ldr	r3, [pc, #40]	@ (8009b20 <MX_USART1_UART_Init+0xc8>)
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	f042 0210 	orr.w	r2, r2, #16
 8009afc:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8009afe:	bf00      	nop
 8009b00:	3708      	adds	r7, #8
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	200035e4 	.word	0x200035e4
 8009b0c:	20003de4 	.word	0x20003de4
 8009b10:	20002de4 	.word	0x20002de4
 8009b14:	20003df4 	.word	0x20003df4
 8009b18:	20003e04 	.word	0x20003e04
 8009b1c:	20003e06 	.word	0x20003e06
 8009b20:	20003e8c 	.word	0x20003e8c
 8009b24:	40011000 	.word	0x40011000
 8009b28:	20003e08 	.word	0x20003e08
 8009b2c:	20003e88 	.word	0x20003e88

08009b30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b08a      	sub	sp, #40	@ 0x28
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b38:	f107 0314 	add.w	r3, r7, #20
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	601a      	str	r2, [r3, #0]
 8009b40:	605a      	str	r2, [r3, #4]
 8009b42:	609a      	str	r2, [r3, #8]
 8009b44:	60da      	str	r2, [r3, #12]
 8009b46:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a4c      	ldr	r2, [pc, #304]	@ (8009c80 <HAL_UART_MspInit+0x150>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	f040 8092 	bne.w	8009c78 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009b54:	2300      	movs	r3, #0
 8009b56:	613b      	str	r3, [r7, #16]
 8009b58:	4b4a      	ldr	r3, [pc, #296]	@ (8009c84 <HAL_UART_MspInit+0x154>)
 8009b5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b5c:	4a49      	ldr	r2, [pc, #292]	@ (8009c84 <HAL_UART_MspInit+0x154>)
 8009b5e:	f043 0310 	orr.w	r3, r3, #16
 8009b62:	6453      	str	r3, [r2, #68]	@ 0x44
 8009b64:	4b47      	ldr	r3, [pc, #284]	@ (8009c84 <HAL_UART_MspInit+0x154>)
 8009b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b68:	f003 0310 	and.w	r3, r3, #16
 8009b6c:	613b      	str	r3, [r7, #16]
 8009b6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009b70:	2300      	movs	r3, #0
 8009b72:	60fb      	str	r3, [r7, #12]
 8009b74:	4b43      	ldr	r3, [pc, #268]	@ (8009c84 <HAL_UART_MspInit+0x154>)
 8009b76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b78:	4a42      	ldr	r2, [pc, #264]	@ (8009c84 <HAL_UART_MspInit+0x154>)
 8009b7a:	f043 0301 	orr.w	r3, r3, #1
 8009b7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8009b80:	4b40      	ldr	r3, [pc, #256]	@ (8009c84 <HAL_UART_MspInit+0x154>)
 8009b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b84:	f003 0301 	and.w	r3, r3, #1
 8009b88:	60fb      	str	r3, [r7, #12]
 8009b8a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009b8c:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b92:	2302      	movs	r3, #2
 8009b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b96:	2300      	movs	r3, #0
 8009b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b9a:	2303      	movs	r3, #3
 8009b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009b9e:	2307      	movs	r3, #7
 8009ba0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ba2:	f107 0314 	add.w	r3, r7, #20
 8009ba6:	4619      	mov	r1, r3
 8009ba8:	4837      	ldr	r0, [pc, #220]	@ (8009c88 <HAL_UART_MspInit+0x158>)
 8009baa:	f001 f9a7 	bl	800aefc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009bae:	4b37      	ldr	r3, [pc, #220]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009bb0:	4a37      	ldr	r2, [pc, #220]	@ (8009c90 <HAL_UART_MspInit+0x160>)
 8009bb2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009bb4:	4b35      	ldr	r3, [pc, #212]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009bb6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009bba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009bbc:	4b33      	ldr	r3, [pc, #204]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009bc2:	4b32      	ldr	r3, [pc, #200]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009bc8:	4b30      	ldr	r3, [pc, #192]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009bca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009bce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009bd0:	4b2e      	ldr	r3, [pc, #184]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8009bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009bde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009be2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009be4:	4b29      	ldr	r3, [pc, #164]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009be6:	2200      	movs	r2, #0
 8009be8:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009bea:	4b28      	ldr	r3, [pc, #160]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009bf0:	4826      	ldr	r0, [pc, #152]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009bf2:	f000 fd23 	bl	800a63c <HAL_DMA_Init>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d001      	beq.n	8009c00 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 8009bfc:	f7fe fd2c 	bl	8008658 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	4a22      	ldr	r2, [pc, #136]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009c04:	63da      	str	r2, [r3, #60]	@ 0x3c
 8009c06:	4a21      	ldr	r2, [pc, #132]	@ (8009c8c <HAL_UART_MspInit+0x15c>)
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8009c0c:	4b21      	ldr	r3, [pc, #132]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c0e:	4a22      	ldr	r2, [pc, #136]	@ (8009c98 <HAL_UART_MspInit+0x168>)
 8009c10:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8009c12:	4b20      	ldr	r3, [pc, #128]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009c18:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8009c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c1c:	2240      	movs	r2, #64	@ 0x40
 8009c1e:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009c20:	4b1c      	ldr	r3, [pc, #112]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8009c26:	4b1b      	ldr	r3, [pc, #108]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009c2c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009c2e:	4b19      	ldr	r3, [pc, #100]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c30:	2200      	movs	r2, #0
 8009c32:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009c34:	4b17      	ldr	r3, [pc, #92]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8009c3a:	4b16      	ldr	r3, [pc, #88]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8009c40:	4b14      	ldr	r3, [pc, #80]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c42:	2200      	movs	r2, #0
 8009c44:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009c46:	4b13      	ldr	r3, [pc, #76]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8009c4c:	4811      	ldr	r0, [pc, #68]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c4e:	f000 fcf5 	bl	800a63c <HAL_DMA_Init>
 8009c52:	4603      	mov	r3, r0
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d001      	beq.n	8009c5c <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 8009c58:	f7fe fcfe 	bl	8008658 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c60:	639a      	str	r2, [r3, #56]	@ 0x38
 8009c62:	4a0c      	ldr	r2, [pc, #48]	@ (8009c94 <HAL_UART_MspInit+0x164>)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2105      	movs	r1, #5
 8009c6c:	2025      	movs	r0, #37	@ 0x25
 8009c6e:	f000 fcad 	bl	800a5cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009c72:	2025      	movs	r0, #37	@ 0x25
 8009c74:	f000 fcc6 	bl	800a604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8009c78:	bf00      	nop
 8009c7a:	3728      	adds	r7, #40	@ 0x28
 8009c7c:	46bd      	mov	sp, r7
 8009c7e:	bd80      	pop	{r7, pc}
 8009c80:	40011000 	.word	0x40011000
 8009c84:	40023800 	.word	0x40023800
 8009c88:	40020000 	.word	0x40020000
 8009c8c:	20003ed4 	.word	0x20003ed4
 8009c90:	40026440 	.word	0x40026440
 8009c94:	20003f34 	.word	0x20003f34
 8009c98:	400264b8 	.word	0x400264b8

08009c9c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b082      	sub	sp, #8
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	4a15      	ldr	r2, [pc, #84]	@ (8009d00 <HAL_UART_MspDeInit+0x64>)
 8009caa:	4293      	cmp	r3, r2
 8009cac:	d123      	bne.n	8009cf6 <HAL_UART_MspDeInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8009cae:	4b15      	ldr	r3, [pc, #84]	@ (8009d04 <HAL_UART_MspDeInit+0x68>)
 8009cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cb2:	4a14      	ldr	r2, [pc, #80]	@ (8009d04 <HAL_UART_MspDeInit+0x68>)
 8009cb4:	f023 0310 	bic.w	r3, r3, #16
 8009cb8:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8009cba:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8009cbe:	4812      	ldr	r0, [pc, #72]	@ (8009d08 <HAL_UART_MspDeInit+0x6c>)
 8009cc0:	f001 fab8 	bl	800b234 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 fd65 	bl	800a798 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f000 fd60 	bl	800a798 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8009cd8:	2025      	movs	r0, #37	@ 0x25
 8009cda:	f000 fca1 	bl	800a620 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */
	usart1_last_tx_size = 0;
 8009cde:	4b0b      	ldr	r3, [pc, #44]	@ (8009d0c <HAL_UART_MspDeInit+0x70>)
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 8009ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8009d10 <HAL_UART_MspDeInit+0x74>)
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	801a      	strh	r2, [r3, #0]
	ring_buffer_clear(&usart1_tx_ring_buffer);
 8009cea:	480a      	ldr	r0, [pc, #40]	@ (8009d14 <HAL_UART_MspDeInit+0x78>)
 8009cec:	f7fe f8ff 	bl	8007eee <ring_buffer_clear>
	ring_buffer_clear(&usart1_rx_ring_buffer);
 8009cf0:	4809      	ldr	r0, [pc, #36]	@ (8009d18 <HAL_UART_MspDeInit+0x7c>)
 8009cf2:	f7fe f8fc 	bl	8007eee <ring_buffer_clear>
  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 8009cf6:	bf00      	nop
 8009cf8:	3708      	adds	r7, #8
 8009cfa:	46bd      	mov	sp, r7
 8009cfc:	bd80      	pop	{r7, pc}
 8009cfe:	bf00      	nop
 8009d00:	40011000 	.word	0x40011000
 8009d04:	40023800 	.word	0x40023800
 8009d08:	40020000 	.word	0x40020000
 8009d0c:	20003e04 	.word	0x20003e04
 8009d10:	20003e06 	.word	0x20003e06
 8009d14:	20003de4 	.word	0x20003de4
 8009d18:	20003df4 	.word	0x20003df4

08009d1c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009d1c:	b580      	push	{r7, lr}
 8009d1e:	b086      	sub	sp, #24
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	4a19      	ldr	r2, [pc, #100]	@ (8009d90 <HAL_UART_TxCpltCallback+0x74>)
 8009d2a:	4293      	cmp	r3, r2
 8009d2c:	d12b      	bne.n	8009d86 <HAL_UART_TxCpltCallback+0x6a>
    {

    	if(huart1.gState == HAL_UART_STATE_READY)
 8009d2e:	4b19      	ldr	r3, [pc, #100]	@ (8009d94 <HAL_UART_TxCpltCallback+0x78>)
 8009d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	2b20      	cmp	r3, #32
 8009d38:	d125      	bne.n	8009d86 <HAL_UART_TxCpltCallback+0x6a>
    	{
			// Advance tail for previously sent chunk
			ring_buffer_advance_tail(&usart1_tx_ring_buffer, usart1_last_tx_size);
 8009d3a:	4b17      	ldr	r3, [pc, #92]	@ (8009d98 <HAL_UART_TxCpltCallback+0x7c>)
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	4619      	mov	r1, r3
 8009d42:	4816      	ldr	r0, [pc, #88]	@ (8009d9c <HAL_UART_TxCpltCallback+0x80>)
 8009d44:	f7fe f8b3 	bl	8007eae <ring_buffer_advance_tail>

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 8009d48:	4814      	ldr	r0, [pc, #80]	@ (8009d9c <HAL_UART_TxCpltCallback+0x80>)
 8009d4a:	f7fd ffc1 	bl	8007cd0 <ring_buffer_linear_used_space>
 8009d4e:	6178      	str	r0, [r7, #20]
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 8009d50:	697b      	ldr	r3, [r7, #20]
 8009d52:	2b80      	cmp	r3, #128	@ 0x80
 8009d54:	bf28      	it	cs
 8009d56:	2380      	movcs	r3, #128	@ 0x80
 8009d58:	827b      	strh	r3, [r7, #18]
			uint8_t *next_chunk = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 8009d5a:	4810      	ldr	r0, [pc, #64]	@ (8009d9c <HAL_UART_TxCpltCallback+0x80>)
 8009d5c:	f7fd ffe2 	bl	8007d24 <ring_buffer_read_ptr>
 8009d60:	60f8      	str	r0, [r7, #12]
			usart1_last_tx_size = frame_size;
 8009d62:	4a0d      	ldr	r2, [pc, #52]	@ (8009d98 <HAL_UART_TxCpltCallback+0x7c>)
 8009d64:	8a7b      	ldrh	r3, [r7, #18]
 8009d66:	8013      	strh	r3, [r2, #0]

			if (frame_size > 0)
 8009d68:	8a7b      	ldrh	r3, [r7, #18]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d00b      	beq.n	8009d86 <HAL_UART_TxCpltCallback+0x6a>
			{
		        if (HAL_UART_Transmit_DMA(huart, next_chunk, frame_size) != HAL_OK) {
 8009d6e:	8a7b      	ldrh	r3, [r7, #18]
 8009d70:	461a      	mov	r2, r3
 8009d72:	68f9      	ldr	r1, [r7, #12]
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f005 f9d9 	bl	800f12c <HAL_UART_Transmit_DMA>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <HAL_UART_TxCpltCallback+0x6a>
		            usart1_last_tx_size = 0;
 8009d80:	4b05      	ldr	r3, [pc, #20]	@ (8009d98 <HAL_UART_TxCpltCallback+0x7c>)
 8009d82:	2200      	movs	r2, #0
 8009d84:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit_IT(huart, next_chunk, frame_size);
				// Do NOT advance tail here. Advance it next time, after TX completes.
			}
    	}
    }
}
 8009d86:	bf00      	nop
 8009d88:	3718      	adds	r7, #24
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	40011000 	.word	0x40011000
 8009d94:	20003e8c 	.word	0x20003e8c
 8009d98:	20003e04 	.word	0x20003e04
 8009d9c:	20003de4 	.word	0x20003de4

08009da0 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
    }
}
 8009da8:	bf00      	nop
 8009daa:	370c      	adds	r7, #12
 8009dac:	46bd      	mov	sp, r7
 8009dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db2:	4770      	bx	lr

08009db4 <HAL_UART_IDLECallback>:




void HAL_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b086      	sub	sp, #24
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1){
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a26      	ldr	r2, [pc, #152]	@ (8009e5c <HAL_UART_IDLECallback+0xa8>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d147      	bne.n	8009e56 <HAL_UART_IDLECallback+0xa2>

    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx));
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009dd2:	617b      	str	r3, [r7, #20]

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 8009dd4:	4b22      	ldr	r3, [pc, #136]	@ (8009e60 <HAL_UART_IDLECallback+0xac>)
 8009dd6:	881b      	ldrh	r3, [r3, #0]
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	461a      	mov	r2, r3
 8009ddc:	697b      	ldr	r3, [r7, #20]
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d038      	beq.n	8009e54 <HAL_UART_IDLECallback+0xa0>

    if (dma_pos > usart1_dma_last_pos) {
 8009de2:	4b1f      	ldr	r3, [pc, #124]	@ (8009e60 <HAL_UART_IDLECallback+0xac>)
 8009de4:	881b      	ldrh	r3, [r3, #0]
 8009de6:	b29b      	uxth	r3, r3
 8009de8:	461a      	mov	r2, r3
 8009dea:	697b      	ldr	r3, [r7, #20]
 8009dec:	4293      	cmp	r3, r2
 8009dee:	dd12      	ble.n	8009e16 <HAL_UART_IDLECallback+0x62>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 8009df0:	4b1b      	ldr	r3, [pc, #108]	@ (8009e60 <HAL_UART_IDLECallback+0xac>)
 8009df2:	881b      	ldrh	r3, [r3, #0]
 8009df4:	b29b      	uxth	r3, r3
 8009df6:	461a      	mov	r2, r3
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	1a9b      	subs	r3, r3, r2
 8009dfc:	60fb      	str	r3, [r7, #12]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 8009dfe:	4b18      	ldr	r3, [pc, #96]	@ (8009e60 <HAL_UART_IDLECallback+0xac>)
 8009e00:	881b      	ldrh	r3, [r3, #0]
 8009e02:	b29b      	uxth	r3, r3
 8009e04:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009e06:	4b17      	ldr	r3, [pc, #92]	@ (8009e64 <HAL_UART_IDLECallback+0xb0>)
 8009e08:	4413      	add	r3, r2
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	4816      	ldr	r0, [pc, #88]	@ (8009e68 <HAL_UART_IDLECallback+0xb4>)
 8009e10:	f7fd ff97 	bl	8007d42 <ring_buffer_enqueue_arr>
 8009e14:	e019      	b.n	8009e4a <HAL_UART_IDLECallback+0x96>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 8009e16:	4b12      	ldr	r3, [pc, #72]	@ (8009e60 <HAL_UART_IDLECallback+0xac>)
 8009e18:	881b      	ldrh	r3, [r3, #0]
 8009e1a:	b29b      	uxth	r3, r3
 8009e1c:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009e20:	613b      	str	r3, [r7, #16]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 8009e22:	4b0f      	ldr	r3, [pc, #60]	@ (8009e60 <HAL_UART_IDLECallback+0xac>)
 8009e24:	881b      	ldrh	r3, [r3, #0]
 8009e26:	b29b      	uxth	r3, r3
 8009e28:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009e2a:	4b0e      	ldr	r3, [pc, #56]	@ (8009e64 <HAL_UART_IDLECallback+0xb0>)
 8009e2c:	4413      	add	r3, r2
 8009e2e:	693a      	ldr	r2, [r7, #16]
 8009e30:	4619      	mov	r1, r3
 8009e32:	480d      	ldr	r0, [pc, #52]	@ (8009e68 <HAL_UART_IDLECallback+0xb4>)
 8009e34:	f7fd ff85 	bl	8007d42 <ring_buffer_enqueue_arr>
        if (dma_pos) {
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d005      	beq.n	8009e4a <HAL_UART_IDLECallback+0x96>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009e3e:	697b      	ldr	r3, [r7, #20]
 8009e40:	461a      	mov	r2, r3
 8009e42:	4908      	ldr	r1, [pc, #32]	@ (8009e64 <HAL_UART_IDLECallback+0xb0>)
 8009e44:	4808      	ldr	r0, [pc, #32]	@ (8009e68 <HAL_UART_IDLECallback+0xb4>)
 8009e46:	f7fd ff7c 	bl	8007d42 <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	4b04      	ldr	r3, [pc, #16]	@ (8009e60 <HAL_UART_IDLECallback+0xac>)
 8009e50:	801a      	strh	r2, [r3, #0]
 8009e52:	e000      	b.n	8009e56 <HAL_UART_IDLECallback+0xa2>
    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 8009e54:	bf00      	nop
    }
}
 8009e56:	3718      	adds	r7, #24
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	40011000 	.word	0x40011000
 8009e60:	20003e88 	.word	0x20003e88
 8009e64:	20003e08 	.word	0x20003e08
 8009e68:	20003df4 	.word	0x20003df4

08009e6c <usart1_read_dma_buffer>:


void usart1_read_dma_buffer()
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b08c      	sub	sp, #48	@ 0x30
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	2300      	movs	r3, #0
 8009e74:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009e76:	f3ef 8310 	mrs	r3, PRIMASK
 8009e7a:	61bb      	str	r3, [r7, #24]
  return(result);
 8009e7c:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009e7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009e80:	b672      	cpsid	i
}
 8009e82:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009e84:	f3bf 8f4f 	dsb	sy
}
 8009e88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009e8a:	f3bf 8f6f 	isb	sy
}
 8009e8e:	bf00      	nop
    return old;
 8009e90:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009e92:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8009e94:	69fb      	ldr	r3, [r7, #28]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d001      	beq.n	8009e9e <usart1_read_dma_buffer+0x32>
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	e000      	b.n	8009ea0 <usart1_read_dma_buffer+0x34>
 8009e9e:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009ea0:	603b      	str	r3, [r7, #0]
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009ea6:	e049      	b.n	8009f3c <usart1_read_dma_buffer+0xd0>
	{
    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx));
 8009ea8:	4b33      	ldr	r3, [pc, #204]	@ (8009f78 <usart1_read_dma_buffer+0x10c>)
 8009eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009eb4:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 8009eb6:	4b31      	ldr	r3, [pc, #196]	@ (8009f7c <usart1_read_dma_buffer+0x110>)
 8009eb8:	881b      	ldrh	r3, [r3, #0]
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	461a      	mov	r2, r3
 8009ebe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d101      	bne.n	8009ec8 <usart1_read_dma_buffer+0x5c>
 8009ec4:	2300      	movs	r3, #0
 8009ec6:	e03d      	b.n	8009f44 <usart1_read_dma_buffer+0xd8>

    if (dma_pos > usart1_dma_last_pos) {
 8009ec8:	4b2c      	ldr	r3, [pc, #176]	@ (8009f7c <usart1_read_dma_buffer+0x110>)
 8009eca:	881b      	ldrh	r3, [r3, #0]
 8009ecc:	b29b      	uxth	r3, r3
 8009ece:	461a      	mov	r2, r3
 8009ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	dd12      	ble.n	8009efc <usart1_read_dma_buffer+0x90>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 8009ed6:	4b29      	ldr	r3, [pc, #164]	@ (8009f7c <usart1_read_dma_buffer+0x110>)
 8009ed8:	881b      	ldrh	r3, [r3, #0]
 8009eda:	b29b      	uxth	r3, r3
 8009edc:	461a      	mov	r2, r3
 8009ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee0:	1a9b      	subs	r3, r3, r2
 8009ee2:	623b      	str	r3, [r7, #32]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 8009ee4:	4b25      	ldr	r3, [pc, #148]	@ (8009f7c <usart1_read_dma_buffer+0x110>)
 8009ee6:	881b      	ldrh	r3, [r3, #0]
 8009ee8:	b29b      	uxth	r3, r3
 8009eea:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009eec:	4b24      	ldr	r3, [pc, #144]	@ (8009f80 <usart1_read_dma_buffer+0x114>)
 8009eee:	4413      	add	r3, r2
 8009ef0:	6a3a      	ldr	r2, [r7, #32]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	4823      	ldr	r0, [pc, #140]	@ (8009f84 <usart1_read_dma_buffer+0x118>)
 8009ef6:	f7fd ff24 	bl	8007d42 <ring_buffer_enqueue_arr>
 8009efa:	e019      	b.n	8009f30 <usart1_read_dma_buffer+0xc4>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 8009efc:	4b1f      	ldr	r3, [pc, #124]	@ (8009f7c <usart1_read_dma_buffer+0x110>)
 8009efe:	881b      	ldrh	r3, [r3, #0]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8009f06:	627b      	str	r3, [r7, #36]	@ 0x24
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 8009f08:	4b1c      	ldr	r3, [pc, #112]	@ (8009f7c <usart1_read_dma_buffer+0x110>)
 8009f0a:	881b      	ldrh	r3, [r3, #0]
 8009f0c:	b29b      	uxth	r3, r3
 8009f0e:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009f10:	4b1b      	ldr	r3, [pc, #108]	@ (8009f80 <usart1_read_dma_buffer+0x114>)
 8009f12:	4413      	add	r3, r2
 8009f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f16:	4619      	mov	r1, r3
 8009f18:	481a      	ldr	r0, [pc, #104]	@ (8009f84 <usart1_read_dma_buffer+0x118>)
 8009f1a:	f7fd ff12 	bl	8007d42 <ring_buffer_enqueue_arr>
        if (dma_pos) {
 8009f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d005      	beq.n	8009f30 <usart1_read_dma_buffer+0xc4>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 8009f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f26:	461a      	mov	r2, r3
 8009f28:	4915      	ldr	r1, [pc, #84]	@ (8009f80 <usart1_read_dma_buffer+0x114>)
 8009f2a:	4816      	ldr	r0, [pc, #88]	@ (8009f84 <usart1_read_dma_buffer+0x118>)
 8009f2c:	f7fd ff09 	bl	8007d42 <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 8009f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f32:	b29a      	uxth	r2, r3
 8009f34:	4b11      	ldr	r3, [pc, #68]	@ (8009f7c <usart1_read_dma_buffer+0x110>)
 8009f36:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009f38:	2300      	movs	r3, #0
 8009f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1b2      	bne.n	8009ea8 <usart1_read_dma_buffer+0x3c>
 8009f42:	2301      	movs	r3, #1
 8009f44:	463a      	mov	r2, r7
 8009f46:	60fa      	str	r2, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	6812      	ldr	r2, [r2, #0]
 8009f4c:	60ba      	str	r2, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8009f4e:	f3bf 8f5f 	dmb	sy
}
 8009f52:	bf00      	nop
 8009f54:	68ba      	ldr	r2, [r7, #8]
 8009f56:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009f58:	687a      	ldr	r2, [r7, #4]
 8009f5a:	f382 8810 	msr	PRIMASK, r2
}
 8009f5e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009f60:	f3bf 8f4f 	dsb	sy
}
 8009f64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009f66:	f3bf 8f6f 	isb	sy
}
 8009f6a:	bf00      	nop
}
 8009f6c:	bf00      	nop
}
 8009f6e:	bf00      	nop
 8009f70:	2b01      	cmp	r3, #1
	}
}
 8009f72:	3730      	adds	r7, #48	@ 0x30
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}
 8009f78:	20003e8c 	.word	0x20003e8c
 8009f7c:	20003e88 	.word	0x20003e88
 8009f80:	20003e08 	.word	0x20003e08
 8009f84:	20003df4 	.word	0x20003df4

08009f88 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a04      	ldr	r2, [pc, #16]	@ (8009fa8 <HAL_UART_ErrorCallback+0x20>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d101      	bne.n	8009f9e <HAL_UART_ErrorCallback+0x16>
    {
        // Handle TX/RX recovery here
        //usart1_recover();
        usart1_restart();
 8009f9a:	f000 f877 	bl	800a08c <usart1_restart>
    }
}
 8009f9e:	bf00      	nop
 8009fa0:	3708      	adds	r7, #8
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}
 8009fa6:	bf00      	nop
 8009fa8:	40011000 	.word	0x40011000

08009fac <usart1_start_tx_if_idle>:


void usart1_start_tx_if_idle(int force_state)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b08e      	sub	sp, #56	@ 0x38
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8009fbc:	623b      	str	r3, [r7, #32]
  return(result);
 8009fbe:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009fc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8009fc2:	b672      	cpsid	i
}
 8009fc4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009fc6:	f3bf 8f4f 	dsb	sy
}
 8009fca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009fcc:	f3bf 8f6f 	isb	sy
}
 8009fd0:	bf00      	nop
    return old;
 8009fd2:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009fd4:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8009fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d001      	beq.n	8009fe0 <usart1_start_tx_if_idle+0x34>
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	e000      	b.n	8009fe2 <usart1_start_tx_if_idle+0x36>
 8009fe0:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009fe2:	60bb      	str	r3, [r7, #8]
 8009fe4:	2301      	movs	r3, #1
 8009fe6:	637b      	str	r3, [r7, #52]	@ 0x34
 8009fe8:	e02c      	b.n	800a044 <usart1_start_tx_if_idle+0x98>
	{
		if (((huart1.gState == HAL_UART_STATE_READY) || force_state != 0) && ring_buffer_used_space(&usart1_tx_ring_buffer) > 0)
 8009fea:	4b25      	ldr	r3, [pc, #148]	@ (800a080 <usart1_start_tx_if_idle+0xd4>)
 8009fec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009ff0:	b2db      	uxtb	r3, r3
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	d002      	beq.n	8009ffc <usart1_start_tx_if_idle+0x50>
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d021      	beq.n	800a040 <usart1_start_tx_if_idle+0x94>
 8009ffc:	4821      	ldr	r0, [pc, #132]	@ (800a084 <usart1_start_tx_if_idle+0xd8>)
 8009ffe:	f7fd fe27 	bl	8007c50 <ring_buffer_used_space>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d01b      	beq.n	800a040 <usart1_start_tx_if_idle+0x94>
		{

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 800a008:	481e      	ldr	r0, [pc, #120]	@ (800a084 <usart1_start_tx_if_idle+0xd8>)
 800a00a:	f7fd fe61 	bl	8007cd0 <ring_buffer_linear_used_space>
 800a00e:	6338      	str	r0, [r7, #48]	@ 0x30
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	2b80      	cmp	r3, #128	@ 0x80
 800a014:	bf28      	it	cs
 800a016:	2380      	movcs	r3, #128	@ 0x80
 800a018:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			uint8_t *data = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 800a01a:	481a      	ldr	r0, [pc, #104]	@ (800a084 <usart1_start_tx_if_idle+0xd8>)
 800a01c:	f7fd fe82 	bl	8007d24 <ring_buffer_read_ptr>
 800a020:	62b8      	str	r0, [r7, #40]	@ 0x28

			usart1_last_tx_size = frame_size;
 800a022:	4a19      	ldr	r2, [pc, #100]	@ (800a088 <usart1_start_tx_if_idle+0xdc>)
 800a024:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a026:	8013      	strh	r3, [r2, #0]

			//EXIT_CRITICAL();
			if (HAL_UART_Transmit_DMA(&huart1, data, frame_size) != HAL_OK) {
 800a028:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a02a:	461a      	mov	r2, r3
 800a02c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a02e:	4814      	ldr	r0, [pc, #80]	@ (800a080 <usart1_start_tx_if_idle+0xd4>)
 800a030:	f005 f87c 	bl	800f12c <HAL_UART_Transmit_DMA>
 800a034:	4603      	mov	r3, r0
 800a036:	2b00      	cmp	r3, #0
 800a038:	d002      	beq.n	800a040 <usart1_start_tx_if_idle+0x94>
				//ENTER_CRITICAL();
				usart1_last_tx_size = 0;
 800a03a:	4b13      	ldr	r3, [pc, #76]	@ (800a088 <usart1_start_tx_if_idle+0xdc>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a040:	2300      	movs	r3, #0
 800a042:	637b      	str	r3, [r7, #52]	@ 0x34
 800a044:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a046:	2b00      	cmp	r3, #0
 800a048:	d1cf      	bne.n	8009fea <usart1_start_tx_if_idle+0x3e>
 800a04a:	f107 0308 	add.w	r3, r7, #8
 800a04e:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a056:	f3bf 8f5f 	dmb	sy
}
 800a05a:	bf00      	nop
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	f383 8810 	msr	PRIMASK, r3
}
 800a066:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a068:	f3bf 8f4f 	dsb	sy
}
 800a06c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a06e:	f3bf 8f6f 	isb	sy
}
 800a072:	bf00      	nop
}
 800a074:	bf00      	nop
}
 800a076:	bf00      	nop
		else
		{
			//EXIT_CRITICAL();
		}
	}
}
 800a078:	bf00      	nop
 800a07a:	3738      	adds	r7, #56	@ 0x38
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}
 800a080:	20003e8c 	.word	0x20003e8c
 800a084:	20003de4 	.word	0x20003de4
 800a088:	20003e04 	.word	0x20003e04

0800a08c <usart1_restart>:
  usart1_dma_last_pos = 0;
}


void usart1_restart(void)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b082      	sub	sp, #8
 800a090:	af00      	add	r7, sp, #0
    // 1. Deinit UART (also unlinks DMA internally)
    HAL_UART_DeInit(&huart1);
 800a092:	481b      	ldr	r0, [pc, #108]	@ (800a100 <usart1_restart+0x74>)
 800a094:	f005 f818 	bl	800f0c8 <HAL_UART_DeInit>

    // 2. Deinit DMA streams manually
    HAL_DMA_DeInit(huart1.hdmarx);
 800a098:	4b19      	ldr	r3, [pc, #100]	@ (800a100 <usart1_restart+0x74>)
 800a09a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a09c:	4618      	mov	r0, r3
 800a09e:	f000 fb7b 	bl	800a798 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart1.hdmatx);
 800a0a2:	4b17      	ldr	r3, [pc, #92]	@ (800a100 <usart1_restart+0x74>)
 800a0a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	f000 fb76 	bl	800a798 <HAL_DMA_DeInit>

    // 3. Reset USART1 peripheral
    __HAL_RCC_USART1_FORCE_RESET();
 800a0ac:	4b15      	ldr	r3, [pc, #84]	@ (800a104 <usart1_restart+0x78>)
 800a0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0b0:	4a14      	ldr	r2, [pc, #80]	@ (800a104 <usart1_restart+0x78>)
 800a0b2:	f043 0310 	orr.w	r3, r3, #16
 800a0b6:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_USART1_RELEASE_RESET();
 800a0b8:	4b12      	ldr	r3, [pc, #72]	@ (800a104 <usart1_restart+0x78>)
 800a0ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0bc:	4a11      	ldr	r2, [pc, #68]	@ (800a104 <usart1_restart+0x78>)
 800a0be:	f023 0310 	bic.w	r3, r3, #16
 800a0c2:	6253      	str	r3, [r2, #36]	@ 0x24

    // 4. Reinit USART1 and DMA
    MX_USART1_UART_Init();  // Reinitializes UART and links DMA
 800a0c4:	f7ff fcc8 	bl	8009a58 <MX_USART1_UART_Init>
    //MX_DMA_Init();          // Only needed if you have a custom DMA init function

    // 5. Restart RX DMA if needed
    uint16_t space = ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 800a0c8:	480f      	ldr	r0, [pc, #60]	@ (800a108 <usart1_restart+0x7c>)
 800a0ca:	f7fd fdda 	bl	8007c82 <ring_buffer_linear_free_space>
 800a0ce:	4603      	mov	r3, r0
 800a0d0:	80fb      	strh	r3, [r7, #6]
    uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 800a0d2:	480d      	ldr	r0, [pc, #52]	@ (800a108 <usart1_restart+0x7c>)
 800a0d4:	f7fd fe17 	bl	8007d06 <ring_buffer_write_ptr>
 800a0d8:	6038      	str	r0, [r7, #0]
    // usart1_last_rx_len = space;
    // HAL_UART_Receive_DMA(&huart1, write_ptr, space);

      HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 800a0da:	2280      	movs	r2, #128	@ 0x80
 800a0dc:	490b      	ldr	r1, [pc, #44]	@ (800a10c <usart1_restart+0x80>)
 800a0de:	4808      	ldr	r0, [pc, #32]	@ (800a100 <usart1_restart+0x74>)
 800a0e0:	f005 f894 	bl	800f20c <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	@ (800a110 <usart1_restart+0x84>)
 800a0e6:	2280      	movs	r2, #128	@ 0x80
 800a0e8:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 800a0ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a114 <usart1_restart+0x88>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	801a      	strh	r2, [r3, #0]

    usart1_start_tx_if_idle(1);
 800a0f0:	2001      	movs	r0, #1
 800a0f2:	f7ff ff5b 	bl	8009fac <usart1_start_tx_if_idle>
}
 800a0f6:	bf00      	nop
 800a0f8:	3708      	adds	r7, #8
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop
 800a100:	20003e8c 	.word	0x20003e8c
 800a104:	40023800 	.word	0x40023800
 800a108:	20003df4 	.word	0x20003df4
 800a10c:	20003e08 	.word	0x20003e08
 800a110:	20003e06 	.word	0x20003e06
 800a114:	20003e88 	.word	0x20003e88

0800a118 <usart1_send_data>:




size_t usart1_send_data(char* data, size_t len)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b08c      	sub	sp, #48	@ 0x30
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
    if (data == NULL || len == 0) {
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <usart1_send_data+0x16>
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d101      	bne.n	800a132 <usart1_send_data+0x1a>
        return 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	e040      	b.n	800a1b4 <usart1_send_data+0x9c>
 800a132:	2300      	movs	r3, #0
 800a134:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a136:	f3ef 8310 	mrs	r3, PRIMASK
 800a13a:	623b      	str	r3, [r7, #32]
  return(result);
 800a13c:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a13e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a140:	b672      	cpsid	i
}
 800a142:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a144:	f3bf 8f4f 	dsb	sy
}
 800a148:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a14a:	f3bf 8f6f 	isb	sy
}
 800a14e:	bf00      	nop
    return old;
 800a150:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a152:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a156:	2b01      	cmp	r3, #1
 800a158:	d001      	beq.n	800a15e <usart1_send_data+0x46>
 800a15a:	69bb      	ldr	r3, [r7, #24]
 800a15c:	e000      	b.n	800a160 <usart1_send_data+0x48>
 800a15e:	2300      	movs	r3, #0
    }
    size_t bytes_written;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a160:	60bb      	str	r3, [r7, #8]
 800a162:	2301      	movs	r3, #1
 800a164:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a166:	e007      	b.n	800a178 <usart1_send_data+0x60>
    {
        // Try to enqueue data
    	bytes_written = ring_buffer_enqueue_arr(&usart1_tx_ring_buffer, (uint8_t*)data, len);
 800a168:	683a      	ldr	r2, [r7, #0]
 800a16a:	6879      	ldr	r1, [r7, #4]
 800a16c:	4813      	ldr	r0, [pc, #76]	@ (800a1bc <usart1_send_data+0xa4>)
 800a16e:	f7fd fde8 	bl	8007d42 <ring_buffer_enqueue_arr>
 800a172:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a174:	2300      	movs	r3, #0
 800a176:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d1f4      	bne.n	800a168 <usart1_send_data+0x50>
 800a17e:	f107 0308 	add.w	r3, r7, #8
 800a182:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a18a:	f3bf 8f5f 	dmb	sy
}
 800a18e:	bf00      	nop
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f383 8810 	msr	PRIMASK, r3
}
 800a19a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a19c:	f3bf 8f4f 	dsb	sy
}
 800a1a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a1a2:	f3bf 8f6f 	isb	sy
}
 800a1a6:	bf00      	nop
}
 800a1a8:	bf00      	nop
}
 800a1aa:	bf00      	nop
    }

    usart1_start_tx_if_idle(0);
 800a1ac:	2000      	movs	r0, #0
 800a1ae:	f7ff fefd 	bl	8009fac <usart1_start_tx_if_idle>

    return bytes_written;
 800a1b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3730      	adds	r7, #48	@ 0x30
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	20003de4 	.word	0x20003de4

0800a1c0 <usart1_recv_data>:

size_t usart1_recv_data(char* out_buf, size_t max_len)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b08c      	sub	sp, #48	@ 0x30
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
    if (out_buf == NULL || max_len == 0) {
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <usart1_recv_data+0x16>
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d101      	bne.n	800a1da <usart1_recv_data+0x1a>
        return 0;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	e03f      	b.n	800a25a <usart1_recv_data+0x9a>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a1de:	f3ef 8310 	mrs	r3, PRIMASK
 800a1e2:	623b      	str	r3, [r7, #32]
  return(result);
 800a1e4:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a1e6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a1e8:	b672      	cpsid	i
}
 800a1ea:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a1ec:	f3bf 8f4f 	dsb	sy
}
 800a1f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a1f2:	f3bf 8f6f 	isb	sy
}
 800a1f6:	bf00      	nop
    return old;
 800a1f8:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a1fa:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d001      	beq.n	800a206 <usart1_recv_data+0x46>
 800a202:	69bb      	ldr	r3, [r7, #24]
 800a204:	e000      	b.n	800a208 <usart1_recv_data+0x48>
 800a206:	2300      	movs	r3, #0
    }
    size_t bytes_read;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a208:	60bb      	str	r3, [r7, #8]
 800a20a:	2301      	movs	r3, #1
 800a20c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a20e:	e009      	b.n	800a224 <usart1_recv_data+0x64>
    {
        usart1_read_dma_buffer();
 800a210:	f7ff fe2c 	bl	8009e6c <usart1_read_dma_buffer>
    	bytes_read = ring_buffer_dequeue_arr(&usart1_rx_ring_buffer, (uint8_t*)out_buf, max_len);
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	6879      	ldr	r1, [r7, #4]
 800a218:	4812      	ldr	r0, [pc, #72]	@ (800a264 <usart1_recv_data+0xa4>)
 800a21a:	f7fd fdec 	bl	8007df6 <ring_buffer_dequeue_arr>
 800a21e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a220:	2300      	movs	r3, #0
 800a222:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a226:	2b00      	cmp	r3, #0
 800a228:	d1f2      	bne.n	800a210 <usart1_recv_data+0x50>
 800a22a:	f107 0308 	add.w	r3, r7, #8
 800a22e:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a230:	697b      	ldr	r3, [r7, #20]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a236:	f3bf 8f5f 	dmb	sy
}
 800a23a:	bf00      	nop
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f383 8810 	msr	PRIMASK, r3
}
 800a246:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a248:	f3bf 8f4f 	dsb	sy
}
 800a24c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a24e:	f3bf 8f6f 	isb	sy
}
 800a252:	bf00      	nop
}
 800a254:	bf00      	nop
}
 800a256:	bf00      	nop
    }

    return bytes_read;
 800a258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3730      	adds	r7, #48	@ 0x30
 800a25e:	46bd      	mov	sp, r7
 800a260:	bd80      	pop	{r7, pc}
 800a262:	bf00      	nop
 800a264:	20003df4 	.word	0x20003df4

0800a268 <usart1_data_available_for_read>:

size_t usart1_data_available_for_read()
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08a      	sub	sp, #40	@ 0x28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	2300      	movs	r3, #0
 800a270:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a272:	f3ef 8310 	mrs	r3, PRIMASK
 800a276:	61bb      	str	r3, [r7, #24]
  return(result);
 800a278:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a27a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a27c:	b672      	cpsid	i
}
 800a27e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a280:	f3bf 8f4f 	dsb	sy
}
 800a284:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a286:	f3bf 8f6f 	isb	sy
}
 800a28a:	bf00      	nop
    return old;
 800a28c:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a28e:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	2b01      	cmp	r3, #1
 800a294:	d001      	beq.n	800a29a <usart1_data_available_for_read+0x32>
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	e000      	b.n	800a29c <usart1_data_available_for_read+0x34>
 800a29a:	2300      	movs	r3, #0
	size_t used;

    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a29c:	603b      	str	r3, [r7, #0]
 800a29e:	2301      	movs	r3, #1
 800a2a0:	623b      	str	r3, [r7, #32]
 800a2a2:	e007      	b.n	800a2b4 <usart1_data_available_for_read+0x4c>
    {
        usart1_read_dma_buffer();
 800a2a4:	f7ff fde2 	bl	8009e6c <usart1_read_dma_buffer>
    	used = ring_buffer_used_space(&usart1_rx_ring_buffer);
 800a2a8:	4811      	ldr	r0, [pc, #68]	@ (800a2f0 <usart1_data_available_for_read+0x88>)
 800a2aa:	f7fd fcd1 	bl	8007c50 <ring_buffer_used_space>
 800a2ae:	6278      	str	r0, [r7, #36]	@ 0x24
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	623b      	str	r3, [r7, #32]
 800a2b4:	6a3b      	ldr	r3, [r7, #32]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1f4      	bne.n	800a2a4 <usart1_data_available_for_read+0x3c>
 800a2ba:	463b      	mov	r3, r7
 800a2bc:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800a2c4:	f3bf 8f5f 	dmb	sy
}
 800a2c8:	bf00      	nop
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f383 8810 	msr	PRIMASK, r3
}
 800a2d4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a2d6:	f3bf 8f4f 	dsb	sy
}
 800a2da:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a2dc:	f3bf 8f6f 	isb	sy
}
 800a2e0:	bf00      	nop
}
 800a2e2:	bf00      	nop
}
 800a2e4:	bf00      	nop
    }

    return used;
 800a2e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	3728      	adds	r7, #40	@ 0x28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	20003df4 	.word	0x20003df4

0800a2f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a2f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a32c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a2f8:	f7ff fa1e 	bl	8009738 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a2fc:	480c      	ldr	r0, [pc, #48]	@ (800a330 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a2fe:	490d      	ldr	r1, [pc, #52]	@ (800a334 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a300:	4a0d      	ldr	r2, [pc, #52]	@ (800a338 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a304:	e002      	b.n	800a30c <LoopCopyDataInit>

0800a306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a30a:	3304      	adds	r3, #4

0800a30c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a30c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a30e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a310:	d3f9      	bcc.n	800a306 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a312:	4a0a      	ldr	r2, [pc, #40]	@ (800a33c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a314:	4c0a      	ldr	r4, [pc, #40]	@ (800a340 <LoopFillZerobss+0x22>)
  movs r3, #0
 800a316:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a318:	e001      	b.n	800a31e <LoopFillZerobss>

0800a31a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a31a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a31c:	3204      	adds	r2, #4

0800a31e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a31e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a320:	d3fb      	bcc.n	800a31a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800a322:	f010 f9a5 	bl	801a670 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a326:	f7fe f8fd 	bl	8008524 <main>
  bx  lr    
 800a32a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a32c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a334:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 800a338:	08020abc 	.word	0x08020abc
  ldr r2, =_sbss
 800a33c:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 800a340:	2000a6b0 	.word	0x2000a6b0

0800a344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a344:	e7fe      	b.n	800a344 <ADC_IRQHandler>
	...

0800a348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a34c:	4b0e      	ldr	r3, [pc, #56]	@ (800a388 <HAL_Init+0x40>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a0d      	ldr	r2, [pc, #52]	@ (800a388 <HAL_Init+0x40>)
 800a352:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a358:	4b0b      	ldr	r3, [pc, #44]	@ (800a388 <HAL_Init+0x40>)
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a0a      	ldr	r2, [pc, #40]	@ (800a388 <HAL_Init+0x40>)
 800a35e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a364:	4b08      	ldr	r3, [pc, #32]	@ (800a388 <HAL_Init+0x40>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	4a07      	ldr	r2, [pc, #28]	@ (800a388 <HAL_Init+0x40>)
 800a36a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a36e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a370:	2003      	movs	r0, #3
 800a372:	f000 f920 	bl	800a5b6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a376:	200f      	movs	r0, #15
 800a378:	f7ff f850 	bl	800941c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a37c:	f7ff f822 	bl	80093c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	40023c00 	.word	0x40023c00

0800a38c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a390:	4b06      	ldr	r3, [pc, #24]	@ (800a3ac <HAL_IncTick+0x20>)
 800a392:	781b      	ldrb	r3, [r3, #0]
 800a394:	461a      	mov	r2, r3
 800a396:	4b06      	ldr	r3, [pc, #24]	@ (800a3b0 <HAL_IncTick+0x24>)
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	4413      	add	r3, r2
 800a39c:	4a04      	ldr	r2, [pc, #16]	@ (800a3b0 <HAL_IncTick+0x24>)
 800a39e:	6013      	str	r3, [r2, #0]
}
 800a3a0:	bf00      	nop
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr
 800a3aa:	bf00      	nop
 800a3ac:	2000005c 	.word	0x2000005c
 800a3b0:	20003f94 	.word	0x20003f94

0800a3b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a3b4:	b480      	push	{r7}
 800a3b6:	af00      	add	r7, sp, #0
  return uwTick;
 800a3b8:	4b03      	ldr	r3, [pc, #12]	@ (800a3c8 <HAL_GetTick+0x14>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	20003f94 	.word	0x20003f94

0800a3cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	b084      	sub	sp, #16
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a3d4:	f7ff ffee 	bl	800a3b4 <HAL_GetTick>
 800a3d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e4:	d005      	beq.n	800a3f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a3e6:	4b0a      	ldr	r3, [pc, #40]	@ (800a410 <HAL_Delay+0x44>)
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a3f2:	bf00      	nop
 800a3f4:	f7ff ffde 	bl	800a3b4 <HAL_GetTick>
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	429a      	cmp	r2, r3
 800a402:	d8f7      	bhi.n	800a3f4 <HAL_Delay+0x28>
  {
  }
}
 800a404:	bf00      	nop
 800a406:	bf00      	nop
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	2000005c 	.word	0x2000005c

0800a414 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	f003 0307 	and.w	r3, r3, #7
 800a422:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a424:	4b0c      	ldr	r3, [pc, #48]	@ (800a458 <__NVIC_SetPriorityGrouping+0x44>)
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a42a:	68ba      	ldr	r2, [r7, #8]
 800a42c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a430:	4013      	ands	r3, r2
 800a432:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a43c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a440:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a444:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a446:	4a04      	ldr	r2, [pc, #16]	@ (800a458 <__NVIC_SetPriorityGrouping+0x44>)
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	60d3      	str	r3, [r2, #12]
}
 800a44c:	bf00      	nop
 800a44e:	3714      	adds	r7, #20
 800a450:	46bd      	mov	sp, r7
 800a452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a456:	4770      	bx	lr
 800a458:	e000ed00 	.word	0xe000ed00

0800a45c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a45c:	b480      	push	{r7}
 800a45e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a460:	4b04      	ldr	r3, [pc, #16]	@ (800a474 <__NVIC_GetPriorityGrouping+0x18>)
 800a462:	68db      	ldr	r3, [r3, #12]
 800a464:	0a1b      	lsrs	r3, r3, #8
 800a466:	f003 0307 	and.w	r3, r3, #7
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr
 800a474:	e000ed00 	.word	0xe000ed00

0800a478 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	4603      	mov	r3, r0
 800a480:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a486:	2b00      	cmp	r3, #0
 800a488:	db0b      	blt.n	800a4a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	f003 021f 	and.w	r2, r3, #31
 800a490:	4907      	ldr	r1, [pc, #28]	@ (800a4b0 <__NVIC_EnableIRQ+0x38>)
 800a492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a496:	095b      	lsrs	r3, r3, #5
 800a498:	2001      	movs	r0, #1
 800a49a:	fa00 f202 	lsl.w	r2, r0, r2
 800a49e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a4a2:	bf00      	nop
 800a4a4:	370c      	adds	r7, #12
 800a4a6:	46bd      	mov	sp, r7
 800a4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ac:	4770      	bx	lr
 800a4ae:	bf00      	nop
 800a4b0:	e000e100 	.word	0xe000e100

0800a4b4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	b083      	sub	sp, #12
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a4be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	db12      	blt.n	800a4ec <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a4c6:	79fb      	ldrb	r3, [r7, #7]
 800a4c8:	f003 021f 	and.w	r2, r3, #31
 800a4cc:	490a      	ldr	r1, [pc, #40]	@ (800a4f8 <__NVIC_DisableIRQ+0x44>)
 800a4ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a4d2:	095b      	lsrs	r3, r3, #5
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	fa00 f202 	lsl.w	r2, r0, r2
 800a4da:	3320      	adds	r3, #32
 800a4dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a4e0:	f3bf 8f4f 	dsb	sy
}
 800a4e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a4e6:	f3bf 8f6f 	isb	sy
}
 800a4ea:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800a4ec:	bf00      	nop
 800a4ee:	370c      	adds	r7, #12
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f6:	4770      	bx	lr
 800a4f8:	e000e100 	.word	0xe000e100

0800a4fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	4603      	mov	r3, r0
 800a504:	6039      	str	r1, [r7, #0]
 800a506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	db0a      	blt.n	800a526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	b2da      	uxtb	r2, r3
 800a514:	490c      	ldr	r1, [pc, #48]	@ (800a548 <__NVIC_SetPriority+0x4c>)
 800a516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a51a:	0112      	lsls	r2, r2, #4
 800a51c:	b2d2      	uxtb	r2, r2
 800a51e:	440b      	add	r3, r1
 800a520:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a524:	e00a      	b.n	800a53c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a526:	683b      	ldr	r3, [r7, #0]
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	4908      	ldr	r1, [pc, #32]	@ (800a54c <__NVIC_SetPriority+0x50>)
 800a52c:	79fb      	ldrb	r3, [r7, #7]
 800a52e:	f003 030f 	and.w	r3, r3, #15
 800a532:	3b04      	subs	r3, #4
 800a534:	0112      	lsls	r2, r2, #4
 800a536:	b2d2      	uxtb	r2, r2
 800a538:	440b      	add	r3, r1
 800a53a:	761a      	strb	r2, [r3, #24]
}
 800a53c:	bf00      	nop
 800a53e:	370c      	adds	r7, #12
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr
 800a548:	e000e100 	.word	0xe000e100
 800a54c:	e000ed00 	.word	0xe000ed00

0800a550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a550:	b480      	push	{r7}
 800a552:	b089      	sub	sp, #36	@ 0x24
 800a554:	af00      	add	r7, sp, #0
 800a556:	60f8      	str	r0, [r7, #12]
 800a558:	60b9      	str	r1, [r7, #8]
 800a55a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f003 0307 	and.w	r3, r3, #7
 800a562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a564:	69fb      	ldr	r3, [r7, #28]
 800a566:	f1c3 0307 	rsb	r3, r3, #7
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	bf28      	it	cs
 800a56e:	2304      	movcs	r3, #4
 800a570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	3304      	adds	r3, #4
 800a576:	2b06      	cmp	r3, #6
 800a578:	d902      	bls.n	800a580 <NVIC_EncodePriority+0x30>
 800a57a:	69fb      	ldr	r3, [r7, #28]
 800a57c:	3b03      	subs	r3, #3
 800a57e:	e000      	b.n	800a582 <NVIC_EncodePriority+0x32>
 800a580:	2300      	movs	r3, #0
 800a582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a584:	f04f 32ff 	mov.w	r2, #4294967295
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	fa02 f303 	lsl.w	r3, r2, r3
 800a58e:	43da      	mvns	r2, r3
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	401a      	ands	r2, r3
 800a594:	697b      	ldr	r3, [r7, #20]
 800a596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a598:	f04f 31ff 	mov.w	r1, #4294967295
 800a59c:	697b      	ldr	r3, [r7, #20]
 800a59e:	fa01 f303 	lsl.w	r3, r1, r3
 800a5a2:	43d9      	mvns	r1, r3
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a5a8:	4313      	orrs	r3, r2
         );
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3724      	adds	r7, #36	@ 0x24
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr

0800a5b6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a5b6:	b580      	push	{r7, lr}
 800a5b8:	b082      	sub	sp, #8
 800a5ba:	af00      	add	r7, sp, #0
 800a5bc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a5be:	6878      	ldr	r0, [r7, #4]
 800a5c0:	f7ff ff28 	bl	800a414 <__NVIC_SetPriorityGrouping>
}
 800a5c4:	bf00      	nop
 800a5c6:	3708      	adds	r7, #8
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	60b9      	str	r1, [r7, #8]
 800a5d6:	607a      	str	r2, [r7, #4]
 800a5d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a5de:	f7ff ff3d 	bl	800a45c <__NVIC_GetPriorityGrouping>
 800a5e2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a5e4:	687a      	ldr	r2, [r7, #4]
 800a5e6:	68b9      	ldr	r1, [r7, #8]
 800a5e8:	6978      	ldr	r0, [r7, #20]
 800a5ea:	f7ff ffb1 	bl	800a550 <NVIC_EncodePriority>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f7ff ff80 	bl	800a4fc <__NVIC_SetPriority>
}
 800a5fc:	bf00      	nop
 800a5fe:	3718      	adds	r7, #24
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}

0800a604 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b082      	sub	sp, #8
 800a608:	af00      	add	r7, sp, #0
 800a60a:	4603      	mov	r3, r0
 800a60c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a60e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff ff30 	bl	800a478 <__NVIC_EnableIRQ>
}
 800a618:	bf00      	nop
 800a61a:	3708      	adds	r7, #8
 800a61c:	46bd      	mov	sp, r7
 800a61e:	bd80      	pop	{r7, pc}

0800a620 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b082      	sub	sp, #8
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800a62a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a62e:	4618      	mov	r0, r3
 800a630:	f7ff ff40 	bl	800a4b4 <__NVIC_DisableIRQ>
}
 800a634:	bf00      	nop
 800a636:	3708      	adds	r7, #8
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800a644:	2300      	movs	r3, #0
 800a646:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800a648:	f7ff feb4 	bl	800a3b4 <HAL_GetTick>
 800a64c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d101      	bne.n	800a658 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800a654:	2301      	movs	r3, #1
 800a656:	e099      	b.n	800a78c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2202      	movs	r2, #2
 800a65c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f022 0201 	bic.w	r2, r2, #1
 800a676:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a678:	e00f      	b.n	800a69a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a67a:	f7ff fe9b 	bl	800a3b4 <HAL_GetTick>
 800a67e:	4602      	mov	r2, r0
 800a680:	693b      	ldr	r3, [r7, #16]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	2b05      	cmp	r3, #5
 800a686:	d908      	bls.n	800a69a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2220      	movs	r2, #32
 800a68c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2203      	movs	r2, #3
 800a692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800a696:	2303      	movs	r3, #3
 800a698:	e078      	b.n	800a78c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f003 0301 	and.w	r3, r3, #1
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d1e8      	bne.n	800a67a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800a6b0:	697a      	ldr	r2, [r7, #20]
 800a6b2:	4b38      	ldr	r3, [pc, #224]	@ (800a794 <HAL_DMA_Init+0x158>)
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	685a      	ldr	r2, [r3, #4]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	689b      	ldr	r3, [r3, #8]
 800a6c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	691b      	ldr	r3, [r3, #16]
 800a6cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a6d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	699b      	ldr	r3, [r3, #24]
 800a6d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a6de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a1b      	ldr	r3, [r3, #32]
 800a6e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800a6e6:	697a      	ldr	r2, [r7, #20]
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f0:	2b04      	cmp	r3, #4
 800a6f2:	d107      	bne.n	800a704 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	697a      	ldr	r2, [r7, #20]
 800a700:	4313      	orrs	r3, r2
 800a702:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	697a      	ldr	r2, [r7, #20]
 800a70a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	f023 0307 	bic.w	r3, r3, #7
 800a71a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a720:	697a      	ldr	r2, [r7, #20]
 800a722:	4313      	orrs	r3, r2
 800a724:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a72a:	2b04      	cmp	r3, #4
 800a72c:	d117      	bne.n	800a75e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a732:	697a      	ldr	r2, [r7, #20]
 800a734:	4313      	orrs	r3, r2
 800a736:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d00e      	beq.n	800a75e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f000 fb5f 	bl	800ae04 <DMA_CheckFifoParam>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d008      	beq.n	800a75e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2240      	movs	r2, #64	@ 0x40
 800a750:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2201      	movs	r2, #1
 800a756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800a75a:	2301      	movs	r3, #1
 800a75c:	e016      	b.n	800a78c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	697a      	ldr	r2, [r7, #20]
 800a764:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a766:	6878      	ldr	r0, [r7, #4]
 800a768:	f000 fb16 	bl	800ad98 <DMA_CalcBaseAndBitshift>
 800a76c:	4603      	mov	r3, r0
 800a76e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a774:	223f      	movs	r2, #63	@ 0x3f
 800a776:	409a      	lsls	r2, r3
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	2201      	movs	r2, #1
 800a786:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800a78a:	2300      	movs	r3, #0
}
 800a78c:	4618      	mov	r0, r3
 800a78e:	3718      	adds	r7, #24
 800a790:	46bd      	mov	sp, r7
 800a792:	bd80      	pop	{r7, pc}
 800a794:	f010803f 	.word	0xf010803f

0800a798 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b084      	sub	sp, #16
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d101      	bne.n	800a7aa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	e050      	b.n	800a84c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a7b0:	b2db      	uxtb	r3, r3
 800a7b2:	2b02      	cmp	r3, #2
 800a7b4:	d101      	bne.n	800a7ba <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	e048      	b.n	800a84c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	681a      	ldr	r2, [r3, #0]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f022 0201 	bic.w	r2, r2, #1
 800a7c8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2221      	movs	r2, #33	@ 0x21
 800a7f8:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 facc 	bl	800ad98 <DMA_CalcBaseAndBitshift>
 800a800:	4603      	mov	r3, r0
 800a802:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2200      	movs	r2, #0
 800a808:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	2200      	movs	r2, #0
 800a80e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	2200      	movs	r2, #0
 800a81a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2200      	movs	r2, #0
 800a820:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	2200      	movs	r2, #0
 800a826:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a82c:	223f      	movs	r2, #63	@ 0x3f
 800a82e:	409a      	lsls	r2, r3
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2200      	movs	r2, #0
 800a838:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a84a:	2300      	movs	r3, #0
}
 800a84c:	4618      	mov	r0, r3
 800a84e:	3710      	adds	r7, #16
 800a850:	46bd      	mov	sp, r7
 800a852:	bd80      	pop	{r7, pc}

0800a854 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b086      	sub	sp, #24
 800a858:	af00      	add	r7, sp, #0
 800a85a:	60f8      	str	r0, [r7, #12]
 800a85c:	60b9      	str	r1, [r7, #8]
 800a85e:	607a      	str	r2, [r7, #4]
 800a860:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a862:	2300      	movs	r3, #0
 800a864:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a86a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a872:	2b01      	cmp	r3, #1
 800a874:	d101      	bne.n	800a87a <HAL_DMA_Start_IT+0x26>
 800a876:	2302      	movs	r3, #2
 800a878:	e040      	b.n	800a8fc <HAL_DMA_Start_IT+0xa8>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a888:	b2db      	uxtb	r3, r3
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d12f      	bne.n	800a8ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2202      	movs	r2, #2
 800a892:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a89c:	683b      	ldr	r3, [r7, #0]
 800a89e:	687a      	ldr	r2, [r7, #4]
 800a8a0:	68b9      	ldr	r1, [r7, #8]
 800a8a2:	68f8      	ldr	r0, [r7, #12]
 800a8a4:	f000 fa4a 	bl	800ad3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a8ac:	223f      	movs	r2, #63	@ 0x3f
 800a8ae:	409a      	lsls	r2, r3
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f042 0216 	orr.w	r2, r2, #22
 800a8c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d007      	beq.n	800a8dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f042 0208 	orr.w	r2, r2, #8
 800a8da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	681a      	ldr	r2, [r3, #0]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f042 0201 	orr.w	r2, r2, #1
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	e005      	b.n	800a8fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800a8f6:	2302      	movs	r3, #2
 800a8f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800a8fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a904:	b580      	push	{r7, lr}
 800a906:	b084      	sub	sp, #16
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a910:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800a912:	f7ff fd4f 	bl	800a3b4 <HAL_GetTick>
 800a916:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a91e:	b2db      	uxtb	r3, r3
 800a920:	2b02      	cmp	r3, #2
 800a922:	d008      	beq.n	800a936 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2280      	movs	r2, #128	@ 0x80
 800a928:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	e052      	b.n	800a9dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	681a      	ldr	r2, [r3, #0]
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f022 0216 	bic.w	r2, r2, #22
 800a944:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	695a      	ldr	r2, [r3, #20]
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a954:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d103      	bne.n	800a966 <HAL_DMA_Abort+0x62>
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a962:	2b00      	cmp	r3, #0
 800a964:	d007      	beq.n	800a976 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681a      	ldr	r2, [r3, #0]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f022 0208 	bic.w	r2, r2, #8
 800a974:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	681a      	ldr	r2, [r3, #0]
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f022 0201 	bic.w	r2, r2, #1
 800a984:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a986:	e013      	b.n	800a9b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a988:	f7ff fd14 	bl	800a3b4 <HAL_GetTick>
 800a98c:	4602      	mov	r2, r0
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	1ad3      	subs	r3, r2, r3
 800a992:	2b05      	cmp	r3, #5
 800a994:	d90c      	bls.n	800a9b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2220      	movs	r2, #32
 800a99a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2203      	movs	r2, #3
 800a9a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800a9ac:	2303      	movs	r3, #3
 800a9ae:	e015      	b.n	800a9dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	f003 0301 	and.w	r3, r3, #1
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1e4      	bne.n	800a988 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9c2:	223f      	movs	r2, #63	@ 0x3f
 800a9c4:	409a      	lsls	r2, r3
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	2201      	movs	r2, #1
 800a9ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800a9da:	2300      	movs	r3, #0
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b083      	sub	sp, #12
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a9f2:	b2db      	uxtb	r3, r3
 800a9f4:	2b02      	cmp	r3, #2
 800a9f6:	d004      	beq.n	800aa02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2280      	movs	r2, #128	@ 0x80
 800a9fc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e00c      	b.n	800aa1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2205      	movs	r2, #5
 800aa06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f022 0201 	bic.w	r2, r2, #1
 800aa18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aa1a:	2300      	movs	r3, #0
}
 800aa1c:	4618      	mov	r0, r3
 800aa1e:	370c      	adds	r7, #12
 800aa20:	46bd      	mov	sp, r7
 800aa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa26:	4770      	bx	lr

0800aa28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b086      	sub	sp, #24
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800aa30:	2300      	movs	r3, #0
 800aa32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800aa34:	4b8e      	ldr	r3, [pc, #568]	@ (800ac70 <HAL_DMA_IRQHandler+0x248>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	4a8e      	ldr	r2, [pc, #568]	@ (800ac74 <HAL_DMA_IRQHandler+0x24c>)
 800aa3a:	fba2 2303 	umull	r2, r3, r2, r3
 800aa3e:	0a9b      	lsrs	r3, r3, #10
 800aa40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800aa48:	693b      	ldr	r3, [r7, #16]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa52:	2208      	movs	r2, #8
 800aa54:	409a      	lsls	r2, r3
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	4013      	ands	r3, r2
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d01a      	beq.n	800aa94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d013      	beq.n	800aa94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	681a      	ldr	r2, [r3, #0]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	f022 0204 	bic.w	r2, r2, #4
 800aa7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa80:	2208      	movs	r2, #8
 800aa82:	409a      	lsls	r2, r3
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aa8c:	f043 0201 	orr.w	r2, r3, #1
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa98:	2201      	movs	r2, #1
 800aa9a:	409a      	lsls	r2, r3
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	4013      	ands	r3, r2
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d012      	beq.n	800aaca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	695b      	ldr	r3, [r3, #20]
 800aaaa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d00b      	beq.n	800aaca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aab6:	2201      	movs	r2, #1
 800aab8:	409a      	lsls	r2, r3
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aac2:	f043 0202 	orr.w	r2, r3, #2
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aace:	2204      	movs	r2, #4
 800aad0:	409a      	lsls	r2, r3
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	4013      	ands	r3, r2
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d012      	beq.n	800ab00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f003 0302 	and.w	r3, r3, #2
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00b      	beq.n	800ab00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aaec:	2204      	movs	r2, #4
 800aaee:	409a      	lsls	r2, r3
 800aaf0:	693b      	ldr	r3, [r7, #16]
 800aaf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aaf8:	f043 0204 	orr.w	r2, r3, #4
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab04:	2210      	movs	r2, #16
 800ab06:	409a      	lsls	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	4013      	ands	r3, r2
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d043      	beq.n	800ab98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 0308 	and.w	r3, r3, #8
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d03c      	beq.n	800ab98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab22:	2210      	movs	r2, #16
 800ab24:	409a      	lsls	r2, r3
 800ab26:	693b      	ldr	r3, [r7, #16]
 800ab28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d018      	beq.n	800ab6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d108      	bne.n	800ab58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d024      	beq.n	800ab98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	4798      	blx	r3
 800ab56:	e01f      	b.n	800ab98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d01b      	beq.n	800ab98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab64:	6878      	ldr	r0, [r7, #4]
 800ab66:	4798      	blx	r3
 800ab68:	e016      	b.n	800ab98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d107      	bne.n	800ab88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	681a      	ldr	r2, [r3, #0]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f022 0208 	bic.w	r2, r2, #8
 800ab86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d003      	beq.n	800ab98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab9c:	2220      	movs	r2, #32
 800ab9e:	409a      	lsls	r2, r3
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4013      	ands	r3, r2
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f000 808f 	beq.w	800acc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	f003 0310 	and.w	r3, r3, #16
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	f000 8087 	beq.w	800acc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800abbe:	2220      	movs	r2, #32
 800abc0:	409a      	lsls	r2, r3
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800abcc:	b2db      	uxtb	r3, r3
 800abce:	2b05      	cmp	r3, #5
 800abd0:	d136      	bne.n	800ac40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	681a      	ldr	r2, [r3, #0]
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f022 0216 	bic.w	r2, r2, #22
 800abe0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	695a      	ldr	r2, [r3, #20]
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800abf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d103      	bne.n	800ac02 <HAL_DMA_IRQHandler+0x1da>
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d007      	beq.n	800ac12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f022 0208 	bic.w	r2, r2, #8
 800ac10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac16:	223f      	movs	r2, #63	@ 0x3f
 800ac18:	409a      	lsls	r2, r3
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2201      	movs	r2, #1
 800ac22:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d07e      	beq.n	800ad34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	4798      	blx	r3
        }
        return;
 800ac3e:	e079      	b.n	800ad34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d01d      	beq.n	800ac8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d10d      	bne.n	800ac78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d031      	beq.n	800acc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac68:	6878      	ldr	r0, [r7, #4]
 800ac6a:	4798      	blx	r3
 800ac6c:	e02c      	b.n	800acc8 <HAL_DMA_IRQHandler+0x2a0>
 800ac6e:	bf00      	nop
 800ac70:	20000054 	.word	0x20000054
 800ac74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d023      	beq.n	800acc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac84:	6878      	ldr	r0, [r7, #4]
 800ac86:	4798      	blx	r3
 800ac88:	e01e      	b.n	800acc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d10f      	bne.n	800acb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f022 0210 	bic.w	r2, r2, #16
 800aca6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2201      	movs	r2, #1
 800acac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	2200      	movs	r2, #0
 800acb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	d003      	beq.n	800acc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800accc:	2b00      	cmp	r3, #0
 800acce:	d032      	beq.n	800ad36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800acd4:	f003 0301 	and.w	r3, r3, #1
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d022      	beq.n	800ad22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2205      	movs	r2, #5
 800ace0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	681a      	ldr	r2, [r3, #0]
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	f022 0201 	bic.w	r2, r2, #1
 800acf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	3301      	adds	r3, #1
 800acf8:	60bb      	str	r3, [r7, #8]
 800acfa:	697a      	ldr	r2, [r7, #20]
 800acfc:	429a      	cmp	r2, r3
 800acfe:	d307      	bcc.n	800ad10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 0301 	and.w	r3, r3, #1
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d1f2      	bne.n	800acf4 <HAL_DMA_IRQHandler+0x2cc>
 800ad0e:	e000      	b.n	800ad12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800ad10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2201      	movs	r2, #1
 800ad16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d005      	beq.n	800ad36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ad2e:	6878      	ldr	r0, [r7, #4]
 800ad30:	4798      	blx	r3
 800ad32:	e000      	b.n	800ad36 <HAL_DMA_IRQHandler+0x30e>
        return;
 800ad34:	bf00      	nop
    }
  }
}
 800ad36:	3718      	adds	r7, #24
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
 800ad48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	681a      	ldr	r2, [r3, #0]
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800ad58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	683a      	ldr	r2, [r7, #0]
 800ad60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	689b      	ldr	r3, [r3, #8]
 800ad66:	2b40      	cmp	r3, #64	@ 0x40
 800ad68:	d108      	bne.n	800ad7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	68ba      	ldr	r2, [r7, #8]
 800ad78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800ad7a:	e007      	b.n	800ad8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68ba      	ldr	r2, [r7, #8]
 800ad82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	687a      	ldr	r2, [r7, #4]
 800ad8a:	60da      	str	r2, [r3, #12]
}
 800ad8c:	bf00      	nop
 800ad8e:	3714      	adds	r7, #20
 800ad90:	46bd      	mov	sp, r7
 800ad92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad96:	4770      	bx	lr

0800ad98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b085      	sub	sp, #20
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	b2db      	uxtb	r3, r3
 800ada6:	3b10      	subs	r3, #16
 800ada8:	4a14      	ldr	r2, [pc, #80]	@ (800adfc <DMA_CalcBaseAndBitshift+0x64>)
 800adaa:	fba2 2303 	umull	r2, r3, r2, r3
 800adae:	091b      	lsrs	r3, r3, #4
 800adb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800adb2:	4a13      	ldr	r2, [pc, #76]	@ (800ae00 <DMA_CalcBaseAndBitshift+0x68>)
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	4413      	add	r3, r2
 800adb8:	781b      	ldrb	r3, [r3, #0]
 800adba:	461a      	mov	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d909      	bls.n	800adda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800adce:	f023 0303 	bic.w	r3, r3, #3
 800add2:	1d1a      	adds	r2, r3, #4
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	659a      	str	r2, [r3, #88]	@ 0x58
 800add8:	e007      	b.n	800adea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800ade2:	f023 0303 	bic.w	r3, r3, #3
 800ade6:	687a      	ldr	r2, [r7, #4]
 800ade8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800adee:	4618      	mov	r0, r3
 800adf0:	3714      	adds	r7, #20
 800adf2:	46bd      	mov	sp, r7
 800adf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf8:	4770      	bx	lr
 800adfa:	bf00      	nop
 800adfc:	aaaaaaab 	.word	0xaaaaaaab
 800ae00:	08020240 	.word	0x08020240

0800ae04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	699b      	ldr	r3, [r3, #24]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d11f      	bne.n	800ae5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	2b03      	cmp	r3, #3
 800ae22:	d856      	bhi.n	800aed2 <DMA_CheckFifoParam+0xce>
 800ae24:	a201      	add	r2, pc, #4	@ (adr r2, 800ae2c <DMA_CheckFifoParam+0x28>)
 800ae26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2a:	bf00      	nop
 800ae2c:	0800ae3d 	.word	0x0800ae3d
 800ae30:	0800ae4f 	.word	0x0800ae4f
 800ae34:	0800ae3d 	.word	0x0800ae3d
 800ae38:	0800aed3 	.word	0x0800aed3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d046      	beq.n	800aed6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ae48:	2301      	movs	r3, #1
 800ae4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae4c:	e043      	b.n	800aed6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae52:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800ae56:	d140      	bne.n	800aeda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae5c:	e03d      	b.n	800aeda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	699b      	ldr	r3, [r3, #24]
 800ae62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ae66:	d121      	bne.n	800aeac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d837      	bhi.n	800aede <DMA_CheckFifoParam+0xda>
 800ae6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ae74 <DMA_CheckFifoParam+0x70>)
 800ae70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae74:	0800ae85 	.word	0x0800ae85
 800ae78:	0800ae8b 	.word	0x0800ae8b
 800ae7c:	0800ae85 	.word	0x0800ae85
 800ae80:	0800ae9d 	.word	0x0800ae9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ae84:	2301      	movs	r3, #1
 800ae86:	73fb      	strb	r3, [r7, #15]
      break;
 800ae88:	e030      	b.n	800aeec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae8e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d025      	beq.n	800aee2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ae9a:	e022      	b.n	800aee2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aea0:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800aea4:	d11f      	bne.n	800aee6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800aea6:	2301      	movs	r3, #1
 800aea8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800aeaa:	e01c      	b.n	800aee6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	2b02      	cmp	r3, #2
 800aeb0:	d903      	bls.n	800aeba <DMA_CheckFifoParam+0xb6>
 800aeb2:	68bb      	ldr	r3, [r7, #8]
 800aeb4:	2b03      	cmp	r3, #3
 800aeb6:	d003      	beq.n	800aec0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800aeb8:	e018      	b.n	800aeec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800aeba:	2301      	movs	r3, #1
 800aebc:	73fb      	strb	r3, [r7, #15]
      break;
 800aebe:	e015      	b.n	800aeec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d00e      	beq.n	800aeea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800aecc:	2301      	movs	r3, #1
 800aece:	73fb      	strb	r3, [r7, #15]
      break;
 800aed0:	e00b      	b.n	800aeea <DMA_CheckFifoParam+0xe6>
      break;
 800aed2:	bf00      	nop
 800aed4:	e00a      	b.n	800aeec <DMA_CheckFifoParam+0xe8>
      break;
 800aed6:	bf00      	nop
 800aed8:	e008      	b.n	800aeec <DMA_CheckFifoParam+0xe8>
      break;
 800aeda:	bf00      	nop
 800aedc:	e006      	b.n	800aeec <DMA_CheckFifoParam+0xe8>
      break;
 800aede:	bf00      	nop
 800aee0:	e004      	b.n	800aeec <DMA_CheckFifoParam+0xe8>
      break;
 800aee2:	bf00      	nop
 800aee4:	e002      	b.n	800aeec <DMA_CheckFifoParam+0xe8>
      break;   
 800aee6:	bf00      	nop
 800aee8:	e000      	b.n	800aeec <DMA_CheckFifoParam+0xe8>
      break;
 800aeea:	bf00      	nop
    }
  } 
  
  return status; 
 800aeec:	7bfb      	ldrb	r3, [r7, #15]
}
 800aeee:	4618      	mov	r0, r3
 800aef0:	3714      	adds	r7, #20
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop

0800aefc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b089      	sub	sp, #36	@ 0x24
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
 800af04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800af06:	2300      	movs	r3, #0
 800af08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800af0a:	2300      	movs	r3, #0
 800af0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800af0e:	2300      	movs	r3, #0
 800af10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800af12:	2300      	movs	r3, #0
 800af14:	61fb      	str	r3, [r7, #28]
 800af16:	e16b      	b.n	800b1f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800af18:	2201      	movs	r2, #1
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	fa02 f303 	lsl.w	r3, r2, r3
 800af20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	4013      	ands	r3, r2
 800af2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	697b      	ldr	r3, [r7, #20]
 800af30:	429a      	cmp	r2, r3
 800af32:	f040 815a 	bne.w	800b1ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f003 0303 	and.w	r3, r3, #3
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d005      	beq.n	800af4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	685b      	ldr	r3, [r3, #4]
 800af46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d130      	bne.n	800afb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	005b      	lsls	r3, r3, #1
 800af58:	2203      	movs	r2, #3
 800af5a:	fa02 f303 	lsl.w	r3, r2, r3
 800af5e:	43db      	mvns	r3, r3
 800af60:	69ba      	ldr	r2, [r7, #24]
 800af62:	4013      	ands	r3, r2
 800af64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	68da      	ldr	r2, [r3, #12]
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	005b      	lsls	r3, r3, #1
 800af6e:	fa02 f303 	lsl.w	r3, r2, r3
 800af72:	69ba      	ldr	r2, [r7, #24]
 800af74:	4313      	orrs	r3, r2
 800af76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	69ba      	ldr	r2, [r7, #24]
 800af7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	685b      	ldr	r3, [r3, #4]
 800af82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800af84:	2201      	movs	r2, #1
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	fa02 f303 	lsl.w	r3, r2, r3
 800af8c:	43db      	mvns	r3, r3
 800af8e:	69ba      	ldr	r2, [r7, #24]
 800af90:	4013      	ands	r3, r2
 800af92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	685b      	ldr	r3, [r3, #4]
 800af98:	091b      	lsrs	r3, r3, #4
 800af9a:	f003 0201 	and.w	r2, r3, #1
 800af9e:	69fb      	ldr	r3, [r7, #28]
 800afa0:	fa02 f303 	lsl.w	r3, r2, r3
 800afa4:	69ba      	ldr	r2, [r7, #24]
 800afa6:	4313      	orrs	r3, r2
 800afa8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	69ba      	ldr	r2, [r7, #24]
 800afae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800afb0:	683b      	ldr	r3, [r7, #0]
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	f003 0303 	and.w	r3, r3, #3
 800afb8:	2b03      	cmp	r3, #3
 800afba:	d017      	beq.n	800afec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	005b      	lsls	r3, r3, #1
 800afc6:	2203      	movs	r2, #3
 800afc8:	fa02 f303 	lsl.w	r3, r2, r3
 800afcc:	43db      	mvns	r3, r3
 800afce:	69ba      	ldr	r2, [r7, #24]
 800afd0:	4013      	ands	r3, r2
 800afd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800afd4:	683b      	ldr	r3, [r7, #0]
 800afd6:	689a      	ldr	r2, [r3, #8]
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	005b      	lsls	r3, r3, #1
 800afdc:	fa02 f303 	lsl.w	r3, r2, r3
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	4313      	orrs	r3, r2
 800afe4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	685b      	ldr	r3, [r3, #4]
 800aff0:	f003 0303 	and.w	r3, r3, #3
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d123      	bne.n	800b040 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aff8:	69fb      	ldr	r3, [r7, #28]
 800affa:	08da      	lsrs	r2, r3, #3
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	3208      	adds	r2, #8
 800b000:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b004:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b006:	69fb      	ldr	r3, [r7, #28]
 800b008:	f003 0307 	and.w	r3, r3, #7
 800b00c:	009b      	lsls	r3, r3, #2
 800b00e:	220f      	movs	r2, #15
 800b010:	fa02 f303 	lsl.w	r3, r2, r3
 800b014:	43db      	mvns	r3, r3
 800b016:	69ba      	ldr	r2, [r7, #24]
 800b018:	4013      	ands	r3, r2
 800b01a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b01c:	683b      	ldr	r3, [r7, #0]
 800b01e:	691a      	ldr	r2, [r3, #16]
 800b020:	69fb      	ldr	r3, [r7, #28]
 800b022:	f003 0307 	and.w	r3, r3, #7
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	fa02 f303 	lsl.w	r3, r2, r3
 800b02c:	69ba      	ldr	r2, [r7, #24]
 800b02e:	4313      	orrs	r3, r2
 800b030:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	08da      	lsrs	r2, r3, #3
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	3208      	adds	r2, #8
 800b03a:	69b9      	ldr	r1, [r7, #24]
 800b03c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	005b      	lsls	r3, r3, #1
 800b04a:	2203      	movs	r2, #3
 800b04c:	fa02 f303 	lsl.w	r3, r2, r3
 800b050:	43db      	mvns	r3, r3
 800b052:	69ba      	ldr	r2, [r7, #24]
 800b054:	4013      	ands	r3, r2
 800b056:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	f003 0203 	and.w	r2, r3, #3
 800b060:	69fb      	ldr	r3, [r7, #28]
 800b062:	005b      	lsls	r3, r3, #1
 800b064:	fa02 f303 	lsl.w	r3, r2, r3
 800b068:	69ba      	ldr	r2, [r7, #24]
 800b06a:	4313      	orrs	r3, r2
 800b06c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	69ba      	ldr	r2, [r7, #24]
 800b072:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	685b      	ldr	r3, [r3, #4]
 800b078:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	f000 80b4 	beq.w	800b1ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b082:	2300      	movs	r3, #0
 800b084:	60fb      	str	r3, [r7, #12]
 800b086:	4b60      	ldr	r3, [pc, #384]	@ (800b208 <HAL_GPIO_Init+0x30c>)
 800b088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b08a:	4a5f      	ldr	r2, [pc, #380]	@ (800b208 <HAL_GPIO_Init+0x30c>)
 800b08c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b090:	6453      	str	r3, [r2, #68]	@ 0x44
 800b092:	4b5d      	ldr	r3, [pc, #372]	@ (800b208 <HAL_GPIO_Init+0x30c>)
 800b094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b096:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b09a:	60fb      	str	r3, [r7, #12]
 800b09c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b09e:	4a5b      	ldr	r2, [pc, #364]	@ (800b20c <HAL_GPIO_Init+0x310>)
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	089b      	lsrs	r3, r3, #2
 800b0a4:	3302      	adds	r3, #2
 800b0a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b0aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	f003 0303 	and.w	r3, r3, #3
 800b0b2:	009b      	lsls	r3, r3, #2
 800b0b4:	220f      	movs	r2, #15
 800b0b6:	fa02 f303 	lsl.w	r3, r2, r3
 800b0ba:	43db      	mvns	r3, r3
 800b0bc:	69ba      	ldr	r2, [r7, #24]
 800b0be:	4013      	ands	r3, r2
 800b0c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	4a52      	ldr	r2, [pc, #328]	@ (800b210 <HAL_GPIO_Init+0x314>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d02b      	beq.n	800b122 <HAL_GPIO_Init+0x226>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4a51      	ldr	r2, [pc, #324]	@ (800b214 <HAL_GPIO_Init+0x318>)
 800b0ce:	4293      	cmp	r3, r2
 800b0d0:	d025      	beq.n	800b11e <HAL_GPIO_Init+0x222>
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	4a50      	ldr	r2, [pc, #320]	@ (800b218 <HAL_GPIO_Init+0x31c>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d01f      	beq.n	800b11a <HAL_GPIO_Init+0x21e>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	4a4f      	ldr	r2, [pc, #316]	@ (800b21c <HAL_GPIO_Init+0x320>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d019      	beq.n	800b116 <HAL_GPIO_Init+0x21a>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	4a4e      	ldr	r2, [pc, #312]	@ (800b220 <HAL_GPIO_Init+0x324>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d013      	beq.n	800b112 <HAL_GPIO_Init+0x216>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4a4d      	ldr	r2, [pc, #308]	@ (800b224 <HAL_GPIO_Init+0x328>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d00d      	beq.n	800b10e <HAL_GPIO_Init+0x212>
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	4a4c      	ldr	r2, [pc, #304]	@ (800b228 <HAL_GPIO_Init+0x32c>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d007      	beq.n	800b10a <HAL_GPIO_Init+0x20e>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	4a4b      	ldr	r2, [pc, #300]	@ (800b22c <HAL_GPIO_Init+0x330>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d101      	bne.n	800b106 <HAL_GPIO_Init+0x20a>
 800b102:	2307      	movs	r3, #7
 800b104:	e00e      	b.n	800b124 <HAL_GPIO_Init+0x228>
 800b106:	2308      	movs	r3, #8
 800b108:	e00c      	b.n	800b124 <HAL_GPIO_Init+0x228>
 800b10a:	2306      	movs	r3, #6
 800b10c:	e00a      	b.n	800b124 <HAL_GPIO_Init+0x228>
 800b10e:	2305      	movs	r3, #5
 800b110:	e008      	b.n	800b124 <HAL_GPIO_Init+0x228>
 800b112:	2304      	movs	r3, #4
 800b114:	e006      	b.n	800b124 <HAL_GPIO_Init+0x228>
 800b116:	2303      	movs	r3, #3
 800b118:	e004      	b.n	800b124 <HAL_GPIO_Init+0x228>
 800b11a:	2302      	movs	r3, #2
 800b11c:	e002      	b.n	800b124 <HAL_GPIO_Init+0x228>
 800b11e:	2301      	movs	r3, #1
 800b120:	e000      	b.n	800b124 <HAL_GPIO_Init+0x228>
 800b122:	2300      	movs	r3, #0
 800b124:	69fa      	ldr	r2, [r7, #28]
 800b126:	f002 0203 	and.w	r2, r2, #3
 800b12a:	0092      	lsls	r2, r2, #2
 800b12c:	4093      	lsls	r3, r2
 800b12e:	69ba      	ldr	r2, [r7, #24]
 800b130:	4313      	orrs	r3, r2
 800b132:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b134:	4935      	ldr	r1, [pc, #212]	@ (800b20c <HAL_GPIO_Init+0x310>)
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	089b      	lsrs	r3, r3, #2
 800b13a:	3302      	adds	r3, #2
 800b13c:	69ba      	ldr	r2, [r7, #24]
 800b13e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b142:	4b3b      	ldr	r3, [pc, #236]	@ (800b230 <HAL_GPIO_Init+0x334>)
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	43db      	mvns	r3, r3
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	4013      	ands	r3, r2
 800b150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d003      	beq.n	800b166 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	4313      	orrs	r3, r2
 800b164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b166:	4a32      	ldr	r2, [pc, #200]	@ (800b230 <HAL_GPIO_Init+0x334>)
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b16c:	4b30      	ldr	r3, [pc, #192]	@ (800b230 <HAL_GPIO_Init+0x334>)
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b172:	693b      	ldr	r3, [r7, #16]
 800b174:	43db      	mvns	r3, r3
 800b176:	69ba      	ldr	r2, [r7, #24]
 800b178:	4013      	ands	r3, r2
 800b17a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	685b      	ldr	r3, [r3, #4]
 800b180:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b184:	2b00      	cmp	r3, #0
 800b186:	d003      	beq.n	800b190 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	693b      	ldr	r3, [r7, #16]
 800b18c:	4313      	orrs	r3, r2
 800b18e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b190:	4a27      	ldr	r2, [pc, #156]	@ (800b230 <HAL_GPIO_Init+0x334>)
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b196:	4b26      	ldr	r3, [pc, #152]	@ (800b230 <HAL_GPIO_Init+0x334>)
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b19c:	693b      	ldr	r3, [r7, #16]
 800b19e:	43db      	mvns	r3, r3
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	685b      	ldr	r3, [r3, #4]
 800b1aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d003      	beq.n	800b1ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b1b2:	69ba      	ldr	r2, [r7, #24]
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	4313      	orrs	r3, r2
 800b1b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b1ba:	4a1d      	ldr	r2, [pc, #116]	@ (800b230 <HAL_GPIO_Init+0x334>)
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b1c0:	4b1b      	ldr	r3, [pc, #108]	@ (800b230 <HAL_GPIO_Init+0x334>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	43db      	mvns	r3, r3
 800b1ca:	69ba      	ldr	r2, [r7, #24]
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	685b      	ldr	r3, [r3, #4]
 800b1d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d003      	beq.n	800b1e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b1dc:	69ba      	ldr	r2, [r7, #24]
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	4313      	orrs	r3, r2
 800b1e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b1e4:	4a12      	ldr	r2, [pc, #72]	@ (800b230 <HAL_GPIO_Init+0x334>)
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b1ea:	69fb      	ldr	r3, [r7, #28]
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	61fb      	str	r3, [r7, #28]
 800b1f0:	69fb      	ldr	r3, [r7, #28]
 800b1f2:	2b0f      	cmp	r3, #15
 800b1f4:	f67f ae90 	bls.w	800af18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b1f8:	bf00      	nop
 800b1fa:	bf00      	nop
 800b1fc:	3724      	adds	r7, #36	@ 0x24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	40023800 	.word	0x40023800
 800b20c:	40013800 	.word	0x40013800
 800b210:	40020000 	.word	0x40020000
 800b214:	40020400 	.word	0x40020400
 800b218:	40020800 	.word	0x40020800
 800b21c:	40020c00 	.word	0x40020c00
 800b220:	40021000 	.word	0x40021000
 800b224:	40021400 	.word	0x40021400
 800b228:	40021800 	.word	0x40021800
 800b22c:	40021c00 	.word	0x40021c00
 800b230:	40013c00 	.word	0x40013c00

0800b234 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b234:	b480      	push	{r7}
 800b236:	b087      	sub	sp, #28
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
 800b23c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b23e:	2300      	movs	r3, #0
 800b240:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800b242:	2300      	movs	r3, #0
 800b244:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800b246:	2300      	movs	r3, #0
 800b248:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b24a:	2300      	movs	r3, #0
 800b24c:	617b      	str	r3, [r7, #20]
 800b24e:	e0cd      	b.n	800b3ec <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b250:	2201      	movs	r2, #1
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	fa02 f303 	lsl.w	r3, r2, r3
 800b258:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800b25a:	683a      	ldr	r2, [r7, #0]
 800b25c:	693b      	ldr	r3, [r7, #16]
 800b25e:	4013      	ands	r3, r2
 800b260:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	429a      	cmp	r2, r3
 800b268:	f040 80bd 	bne.w	800b3e6 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b26c:	4a65      	ldr	r2, [pc, #404]	@ (800b404 <HAL_GPIO_DeInit+0x1d0>)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	089b      	lsrs	r3, r3, #2
 800b272:	3302      	adds	r3, #2
 800b274:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b278:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800b27a:	697b      	ldr	r3, [r7, #20]
 800b27c:	f003 0303 	and.w	r3, r3, #3
 800b280:	009b      	lsls	r3, r3, #2
 800b282:	220f      	movs	r2, #15
 800b284:	fa02 f303 	lsl.w	r3, r2, r3
 800b288:	68ba      	ldr	r2, [r7, #8]
 800b28a:	4013      	ands	r3, r2
 800b28c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	4a5d      	ldr	r2, [pc, #372]	@ (800b408 <HAL_GPIO_DeInit+0x1d4>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d02b      	beq.n	800b2ee <HAL_GPIO_DeInit+0xba>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	4a5c      	ldr	r2, [pc, #368]	@ (800b40c <HAL_GPIO_DeInit+0x1d8>)
 800b29a:	4293      	cmp	r3, r2
 800b29c:	d025      	beq.n	800b2ea <HAL_GPIO_DeInit+0xb6>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a5b      	ldr	r2, [pc, #364]	@ (800b410 <HAL_GPIO_DeInit+0x1dc>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d01f      	beq.n	800b2e6 <HAL_GPIO_DeInit+0xb2>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a5a      	ldr	r2, [pc, #360]	@ (800b414 <HAL_GPIO_DeInit+0x1e0>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d019      	beq.n	800b2e2 <HAL_GPIO_DeInit+0xae>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a59      	ldr	r2, [pc, #356]	@ (800b418 <HAL_GPIO_DeInit+0x1e4>)
 800b2b2:	4293      	cmp	r3, r2
 800b2b4:	d013      	beq.n	800b2de <HAL_GPIO_DeInit+0xaa>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	4a58      	ldr	r2, [pc, #352]	@ (800b41c <HAL_GPIO_DeInit+0x1e8>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d00d      	beq.n	800b2da <HAL_GPIO_DeInit+0xa6>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a57      	ldr	r2, [pc, #348]	@ (800b420 <HAL_GPIO_DeInit+0x1ec>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d007      	beq.n	800b2d6 <HAL_GPIO_DeInit+0xa2>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a56      	ldr	r2, [pc, #344]	@ (800b424 <HAL_GPIO_DeInit+0x1f0>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d101      	bne.n	800b2d2 <HAL_GPIO_DeInit+0x9e>
 800b2ce:	2307      	movs	r3, #7
 800b2d0:	e00e      	b.n	800b2f0 <HAL_GPIO_DeInit+0xbc>
 800b2d2:	2308      	movs	r3, #8
 800b2d4:	e00c      	b.n	800b2f0 <HAL_GPIO_DeInit+0xbc>
 800b2d6:	2306      	movs	r3, #6
 800b2d8:	e00a      	b.n	800b2f0 <HAL_GPIO_DeInit+0xbc>
 800b2da:	2305      	movs	r3, #5
 800b2dc:	e008      	b.n	800b2f0 <HAL_GPIO_DeInit+0xbc>
 800b2de:	2304      	movs	r3, #4
 800b2e0:	e006      	b.n	800b2f0 <HAL_GPIO_DeInit+0xbc>
 800b2e2:	2303      	movs	r3, #3
 800b2e4:	e004      	b.n	800b2f0 <HAL_GPIO_DeInit+0xbc>
 800b2e6:	2302      	movs	r3, #2
 800b2e8:	e002      	b.n	800b2f0 <HAL_GPIO_DeInit+0xbc>
 800b2ea:	2301      	movs	r3, #1
 800b2ec:	e000      	b.n	800b2f0 <HAL_GPIO_DeInit+0xbc>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	697a      	ldr	r2, [r7, #20]
 800b2f2:	f002 0203 	and.w	r2, r2, #3
 800b2f6:	0092      	lsls	r2, r2, #2
 800b2f8:	4093      	lsls	r3, r2
 800b2fa:	68ba      	ldr	r2, [r7, #8]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d132      	bne.n	800b366 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b300:	4b49      	ldr	r3, [pc, #292]	@ (800b428 <HAL_GPIO_DeInit+0x1f4>)
 800b302:	681a      	ldr	r2, [r3, #0]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	43db      	mvns	r3, r3
 800b308:	4947      	ldr	r1, [pc, #284]	@ (800b428 <HAL_GPIO_DeInit+0x1f4>)
 800b30a:	4013      	ands	r3, r2
 800b30c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b30e:	4b46      	ldr	r3, [pc, #280]	@ (800b428 <HAL_GPIO_DeInit+0x1f4>)
 800b310:	685a      	ldr	r2, [r3, #4]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	43db      	mvns	r3, r3
 800b316:	4944      	ldr	r1, [pc, #272]	@ (800b428 <HAL_GPIO_DeInit+0x1f4>)
 800b318:	4013      	ands	r3, r2
 800b31a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b31c:	4b42      	ldr	r3, [pc, #264]	@ (800b428 <HAL_GPIO_DeInit+0x1f4>)
 800b31e:	68da      	ldr	r2, [r3, #12]
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	43db      	mvns	r3, r3
 800b324:	4940      	ldr	r1, [pc, #256]	@ (800b428 <HAL_GPIO_DeInit+0x1f4>)
 800b326:	4013      	ands	r3, r2
 800b328:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b32a:	4b3f      	ldr	r3, [pc, #252]	@ (800b428 <HAL_GPIO_DeInit+0x1f4>)
 800b32c:	689a      	ldr	r2, [r3, #8]
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	43db      	mvns	r3, r3
 800b332:	493d      	ldr	r1, [pc, #244]	@ (800b428 <HAL_GPIO_DeInit+0x1f4>)
 800b334:	4013      	ands	r3, r2
 800b336:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f003 0303 	and.w	r3, r3, #3
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	220f      	movs	r2, #15
 800b342:	fa02 f303 	lsl.w	r3, r2, r3
 800b346:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b348:	4a2e      	ldr	r2, [pc, #184]	@ (800b404 <HAL_GPIO_DeInit+0x1d0>)
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	089b      	lsrs	r3, r3, #2
 800b34e:	3302      	adds	r3, #2
 800b350:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	43da      	mvns	r2, r3
 800b358:	482a      	ldr	r0, [pc, #168]	@ (800b404 <HAL_GPIO_DeInit+0x1d0>)
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	089b      	lsrs	r3, r3, #2
 800b35e:	400a      	ands	r2, r1
 800b360:	3302      	adds	r3, #2
 800b362:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	005b      	lsls	r3, r3, #1
 800b36e:	2103      	movs	r1, #3
 800b370:	fa01 f303 	lsl.w	r3, r1, r3
 800b374:	43db      	mvns	r3, r3
 800b376:	401a      	ands	r2, r3
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	08da      	lsrs	r2, r3, #3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	3208      	adds	r2, #8
 800b384:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	f003 0307 	and.w	r3, r3, #7
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	220f      	movs	r2, #15
 800b392:	fa02 f303 	lsl.w	r3, r2, r3
 800b396:	43db      	mvns	r3, r3
 800b398:	697a      	ldr	r2, [r7, #20]
 800b39a:	08d2      	lsrs	r2, r2, #3
 800b39c:	4019      	ands	r1, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	3208      	adds	r2, #8
 800b3a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	68da      	ldr	r2, [r3, #12]
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	005b      	lsls	r3, r3, #1
 800b3ae:	2103      	movs	r1, #3
 800b3b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b3b4:	43db      	mvns	r3, r3
 800b3b6:	401a      	ands	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	685a      	ldr	r2, [r3, #4]
 800b3c0:	2101      	movs	r1, #1
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c8:	43db      	mvns	r3, r3
 800b3ca:	401a      	ands	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	689a      	ldr	r2, [r3, #8]
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	005b      	lsls	r3, r3, #1
 800b3d8:	2103      	movs	r1, #3
 800b3da:	fa01 f303 	lsl.w	r3, r1, r3
 800b3de:	43db      	mvns	r3, r3
 800b3e0:	401a      	ands	r2, r3
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b3e6:	697b      	ldr	r3, [r7, #20]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	617b      	str	r3, [r7, #20]
 800b3ec:	697b      	ldr	r3, [r7, #20]
 800b3ee:	2b0f      	cmp	r3, #15
 800b3f0:	f67f af2e 	bls.w	800b250 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	bf00      	nop
 800b3f8:	371c      	adds	r7, #28
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr
 800b402:	bf00      	nop
 800b404:	40013800 	.word	0x40013800
 800b408:	40020000 	.word	0x40020000
 800b40c:	40020400 	.word	0x40020400
 800b410:	40020800 	.word	0x40020800
 800b414:	40020c00 	.word	0x40020c00
 800b418:	40021000 	.word	0x40021000
 800b41c:	40021400 	.word	0x40021400
 800b420:	40021800 	.word	0x40021800
 800b424:	40021c00 	.word	0x40021c00
 800b428:	40013c00 	.word	0x40013c00

0800b42c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b42c:	b480      	push	{r7}
 800b42e:	b083      	sub	sp, #12
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
 800b434:	460b      	mov	r3, r1
 800b436:	807b      	strh	r3, [r7, #2]
 800b438:	4613      	mov	r3, r2
 800b43a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b43c:	787b      	ldrb	r3, [r7, #1]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d003      	beq.n	800b44a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b442:	887a      	ldrh	r2, [r7, #2]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b448:	e003      	b.n	800b452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b44a:	887b      	ldrh	r3, [r7, #2]
 800b44c:	041a      	lsls	r2, r3, #16
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	619a      	str	r2, [r3, #24]
}
 800b452:	bf00      	nop
 800b454:	370c      	adds	r7, #12
 800b456:	46bd      	mov	sp, r7
 800b458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45c:	4770      	bx	lr

0800b45e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b086      	sub	sp, #24
 800b462:	af02      	add	r7, sp, #8
 800b464:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d101      	bne.n	800b470 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b46c:	2301      	movs	r3, #1
 800b46e:	e101      	b.n	800b674 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d106      	bne.n	800b490 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	2200      	movs	r2, #0
 800b486:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f00b fe54 	bl	8017138 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2203      	movs	r2, #3
 800b494:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b49e:	d102      	bne.n	800b4a6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	f005 f8cb 	bl	8010646 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6818      	ldr	r0, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	7c1a      	ldrb	r2, [r3, #16]
 800b4b8:	f88d 2000 	strb.w	r2, [sp]
 800b4bc:	3304      	adds	r3, #4
 800b4be:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b4c0:	f004 ffaa 	bl	8010418 <USB_CoreInit>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d005      	beq.n	800b4d6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	2202      	movs	r2, #2
 800b4ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	e0ce      	b.n	800b674 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2100      	movs	r1, #0
 800b4dc:	4618      	mov	r0, r3
 800b4de:	f005 f8c3 	bl	8010668 <USB_SetCurrentMode>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d005      	beq.n	800b4f4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2202      	movs	r2, #2
 800b4ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e0bf      	b.n	800b674 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	73fb      	strb	r3, [r7, #15]
 800b4f8:	e04a      	b.n	800b590 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b4fa:	7bfa      	ldrb	r2, [r7, #15]
 800b4fc:	6879      	ldr	r1, [r7, #4]
 800b4fe:	4613      	mov	r3, r2
 800b500:	00db      	lsls	r3, r3, #3
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	440b      	add	r3, r1
 800b508:	3315      	adds	r3, #21
 800b50a:	2201      	movs	r2, #1
 800b50c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b50e:	7bfa      	ldrb	r2, [r7, #15]
 800b510:	6879      	ldr	r1, [r7, #4]
 800b512:	4613      	mov	r3, r2
 800b514:	00db      	lsls	r3, r3, #3
 800b516:	4413      	add	r3, r2
 800b518:	009b      	lsls	r3, r3, #2
 800b51a:	440b      	add	r3, r1
 800b51c:	3314      	adds	r3, #20
 800b51e:	7bfa      	ldrb	r2, [r7, #15]
 800b520:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b522:	7bfa      	ldrb	r2, [r7, #15]
 800b524:	7bfb      	ldrb	r3, [r7, #15]
 800b526:	b298      	uxth	r0, r3
 800b528:	6879      	ldr	r1, [r7, #4]
 800b52a:	4613      	mov	r3, r2
 800b52c:	00db      	lsls	r3, r3, #3
 800b52e:	4413      	add	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	440b      	add	r3, r1
 800b534:	332e      	adds	r3, #46	@ 0x2e
 800b536:	4602      	mov	r2, r0
 800b538:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b53a:	7bfa      	ldrb	r2, [r7, #15]
 800b53c:	6879      	ldr	r1, [r7, #4]
 800b53e:	4613      	mov	r3, r2
 800b540:	00db      	lsls	r3, r3, #3
 800b542:	4413      	add	r3, r2
 800b544:	009b      	lsls	r3, r3, #2
 800b546:	440b      	add	r3, r1
 800b548:	3318      	adds	r3, #24
 800b54a:	2200      	movs	r2, #0
 800b54c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b54e:	7bfa      	ldrb	r2, [r7, #15]
 800b550:	6879      	ldr	r1, [r7, #4]
 800b552:	4613      	mov	r3, r2
 800b554:	00db      	lsls	r3, r3, #3
 800b556:	4413      	add	r3, r2
 800b558:	009b      	lsls	r3, r3, #2
 800b55a:	440b      	add	r3, r1
 800b55c:	331c      	adds	r3, #28
 800b55e:	2200      	movs	r2, #0
 800b560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b562:	7bfa      	ldrb	r2, [r7, #15]
 800b564:	6879      	ldr	r1, [r7, #4]
 800b566:	4613      	mov	r3, r2
 800b568:	00db      	lsls	r3, r3, #3
 800b56a:	4413      	add	r3, r2
 800b56c:	009b      	lsls	r3, r3, #2
 800b56e:	440b      	add	r3, r1
 800b570:	3320      	adds	r3, #32
 800b572:	2200      	movs	r2, #0
 800b574:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b576:	7bfa      	ldrb	r2, [r7, #15]
 800b578:	6879      	ldr	r1, [r7, #4]
 800b57a:	4613      	mov	r3, r2
 800b57c:	00db      	lsls	r3, r3, #3
 800b57e:	4413      	add	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	440b      	add	r3, r1
 800b584:	3324      	adds	r3, #36	@ 0x24
 800b586:	2200      	movs	r2, #0
 800b588:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b58a:	7bfb      	ldrb	r3, [r7, #15]
 800b58c:	3301      	adds	r3, #1
 800b58e:	73fb      	strb	r3, [r7, #15]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	791b      	ldrb	r3, [r3, #4]
 800b594:	7bfa      	ldrb	r2, [r7, #15]
 800b596:	429a      	cmp	r2, r3
 800b598:	d3af      	bcc.n	800b4fa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b59a:	2300      	movs	r3, #0
 800b59c:	73fb      	strb	r3, [r7, #15]
 800b59e:	e044      	b.n	800b62a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b5a0:	7bfa      	ldrb	r2, [r7, #15]
 800b5a2:	6879      	ldr	r1, [r7, #4]
 800b5a4:	4613      	mov	r3, r2
 800b5a6:	00db      	lsls	r3, r3, #3
 800b5a8:	4413      	add	r3, r2
 800b5aa:	009b      	lsls	r3, r3, #2
 800b5ac:	440b      	add	r3, r1
 800b5ae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b5b6:	7bfa      	ldrb	r2, [r7, #15]
 800b5b8:	6879      	ldr	r1, [r7, #4]
 800b5ba:	4613      	mov	r3, r2
 800b5bc:	00db      	lsls	r3, r3, #3
 800b5be:	4413      	add	r3, r2
 800b5c0:	009b      	lsls	r3, r3, #2
 800b5c2:	440b      	add	r3, r1
 800b5c4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b5c8:	7bfa      	ldrb	r2, [r7, #15]
 800b5ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b5cc:	7bfa      	ldrb	r2, [r7, #15]
 800b5ce:	6879      	ldr	r1, [r7, #4]
 800b5d0:	4613      	mov	r3, r2
 800b5d2:	00db      	lsls	r3, r3, #3
 800b5d4:	4413      	add	r3, r2
 800b5d6:	009b      	lsls	r3, r3, #2
 800b5d8:	440b      	add	r3, r1
 800b5da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b5de:	2200      	movs	r2, #0
 800b5e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b5e2:	7bfa      	ldrb	r2, [r7, #15]
 800b5e4:	6879      	ldr	r1, [r7, #4]
 800b5e6:	4613      	mov	r3, r2
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	4413      	add	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	440b      	add	r3, r1
 800b5f0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b5f8:	7bfa      	ldrb	r2, [r7, #15]
 800b5fa:	6879      	ldr	r1, [r7, #4]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	00db      	lsls	r3, r3, #3
 800b600:	4413      	add	r3, r2
 800b602:	009b      	lsls	r3, r3, #2
 800b604:	440b      	add	r3, r1
 800b606:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b60a:	2200      	movs	r2, #0
 800b60c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b60e:	7bfa      	ldrb	r2, [r7, #15]
 800b610:	6879      	ldr	r1, [r7, #4]
 800b612:	4613      	mov	r3, r2
 800b614:	00db      	lsls	r3, r3, #3
 800b616:	4413      	add	r3, r2
 800b618:	009b      	lsls	r3, r3, #2
 800b61a:	440b      	add	r3, r1
 800b61c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800b620:	2200      	movs	r2, #0
 800b622:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b624:	7bfb      	ldrb	r3, [r7, #15]
 800b626:	3301      	adds	r3, #1
 800b628:	73fb      	strb	r3, [r7, #15]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	791b      	ldrb	r3, [r3, #4]
 800b62e:	7bfa      	ldrb	r2, [r7, #15]
 800b630:	429a      	cmp	r2, r3
 800b632:	d3b5      	bcc.n	800b5a0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	6818      	ldr	r0, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	7c1a      	ldrb	r2, [r3, #16]
 800b63c:	f88d 2000 	strb.w	r2, [sp]
 800b640:	3304      	adds	r3, #4
 800b642:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b644:	f005 f85c 	bl	8010700 <USB_DevInit>
 800b648:	4603      	mov	r3, r0
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d005      	beq.n	800b65a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	2202      	movs	r2, #2
 800b652:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b656:	2301      	movs	r3, #1
 800b658:	e00c      	b.n	800b674 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	2200      	movs	r2, #0
 800b65e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f006 f8a6 	bl	80117be <USB_DevDisconnect>

  return HAL_OK;
 800b672:	2300      	movs	r3, #0
}
 800b674:	4618      	mov	r0, r3
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800b690:	2b01      	cmp	r3, #1
 800b692:	d101      	bne.n	800b698 <HAL_PCD_Start+0x1c>
 800b694:	2302      	movs	r3, #2
 800b696:	e022      	b.n	800b6de <HAL_PCD_Start+0x62>
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	68db      	ldr	r3, [r3, #12]
 800b6a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d009      	beq.n	800b6c0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d105      	bne.n	800b6c0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b6b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	4618      	mov	r0, r3
 800b6c6:	f004 ffad 	bl	8010624 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f006 f854 	bl	801177c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2200      	movs	r2, #0
 800b6d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3710      	adds	r7, #16
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}

0800b6e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800b6e6:	b590      	push	{r4, r7, lr}
 800b6e8:	b08d      	sub	sp, #52	@ 0x34
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	f006 f912 	bl	8011926 <USB_GetMode>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	f040 848c 	bne.w	800c022 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4618      	mov	r0, r3
 800b710:	f006 f876 	bl	8011800 <USB_ReadInterrupts>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	f000 8482 	beq.w	800c020 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b722:	689b      	ldr	r3, [r3, #8]
 800b724:	0a1b      	lsrs	r3, r3, #8
 800b726:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	4618      	mov	r0, r3
 800b736:	f006 f863 	bl	8011800 <USB_ReadInterrupts>
 800b73a:	4603      	mov	r3, r0
 800b73c:	f003 0302 	and.w	r3, r3, #2
 800b740:	2b02      	cmp	r3, #2
 800b742:	d107      	bne.n	800b754 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	695a      	ldr	r2, [r3, #20]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f002 0202 	and.w	r2, r2, #2
 800b752:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	4618      	mov	r0, r3
 800b75a:	f006 f851 	bl	8011800 <USB_ReadInterrupts>
 800b75e:	4603      	mov	r3, r0
 800b760:	f003 0310 	and.w	r3, r3, #16
 800b764:	2b10      	cmp	r3, #16
 800b766:	d161      	bne.n	800b82c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	699a      	ldr	r2, [r3, #24]
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f022 0210 	bic.w	r2, r2, #16
 800b776:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800b778:	6a3b      	ldr	r3, [r7, #32]
 800b77a:	6a1b      	ldr	r3, [r3, #32]
 800b77c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	f003 020f 	and.w	r2, r3, #15
 800b784:	4613      	mov	r3, r2
 800b786:	00db      	lsls	r3, r3, #3
 800b788:	4413      	add	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b790:	687a      	ldr	r2, [r7, #4]
 800b792:	4413      	add	r3, r2
 800b794:	3304      	adds	r3, #4
 800b796:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b79e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b7a2:	d124      	bne.n	800b7ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800b7a4:	69ba      	ldr	r2, [r7, #24]
 800b7a6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800b7aa:	4013      	ands	r3, r2
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	d035      	beq.n	800b81c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b7b0:	697b      	ldr	r3, [r7, #20]
 800b7b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	091b      	lsrs	r3, r3, #4
 800b7b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800b7ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7be:	b29b      	uxth	r3, r3
 800b7c0:	461a      	mov	r2, r3
 800b7c2:	6a38      	ldr	r0, [r7, #32]
 800b7c4:	f005 fe88 	bl	80114d8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b7c8:	697b      	ldr	r3, [r7, #20]
 800b7ca:	68da      	ldr	r2, [r3, #12]
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	091b      	lsrs	r3, r3, #4
 800b7d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7d4:	441a      	add	r2, r3
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	695a      	ldr	r2, [r3, #20]
 800b7de:	69bb      	ldr	r3, [r7, #24]
 800b7e0:	091b      	lsrs	r3, r3, #4
 800b7e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b7e6:	441a      	add	r2, r3
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	615a      	str	r2, [r3, #20]
 800b7ec:	e016      	b.n	800b81c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800b7ee:	69bb      	ldr	r3, [r7, #24]
 800b7f0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800b7f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800b7f8:	d110      	bne.n	800b81c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b800:	2208      	movs	r2, #8
 800b802:	4619      	mov	r1, r3
 800b804:	6a38      	ldr	r0, [r7, #32]
 800b806:	f005 fe67 	bl	80114d8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	695a      	ldr	r2, [r3, #20]
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	091b      	lsrs	r3, r3, #4
 800b812:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b816:	441a      	add	r2, r3
 800b818:	697b      	ldr	r3, [r7, #20]
 800b81a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	699a      	ldr	r2, [r3, #24]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f042 0210 	orr.w	r2, r2, #16
 800b82a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	4618      	mov	r0, r3
 800b832:	f005 ffe5 	bl	8011800 <USB_ReadInterrupts>
 800b836:	4603      	mov	r3, r0
 800b838:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b83c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800b840:	f040 80a7 	bne.w	800b992 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800b844:	2300      	movs	r3, #0
 800b846:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4618      	mov	r0, r3
 800b84e:	f005 ffea 	bl	8011826 <USB_ReadDevAllOutEpInterrupt>
 800b852:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800b854:	e099      	b.n	800b98a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800b856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b858:	f003 0301 	and.w	r3, r3, #1
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	f000 808e 	beq.w	800b97e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b868:	b2d2      	uxtb	r2, r2
 800b86a:	4611      	mov	r1, r2
 800b86c:	4618      	mov	r0, r3
 800b86e:	f006 f80e 	bl	801188e <USB_ReadDevOutEPInterrupt>
 800b872:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800b874:	693b      	ldr	r3, [r7, #16]
 800b876:	f003 0301 	and.w	r3, r3, #1
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00c      	beq.n	800b898 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800b87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b880:	015a      	lsls	r2, r3, #5
 800b882:	69fb      	ldr	r3, [r7, #28]
 800b884:	4413      	add	r3, r2
 800b886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b88a:	461a      	mov	r2, r3
 800b88c:	2301      	movs	r3, #1
 800b88e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800b890:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b892:	6878      	ldr	r0, [r7, #4]
 800b894:	f000 fea4 	bl	800c5e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	f003 0308 	and.w	r3, r3, #8
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00c      	beq.n	800b8bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800b8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8a4:	015a      	lsls	r2, r3, #5
 800b8a6:	69fb      	ldr	r3, [r7, #28]
 800b8a8:	4413      	add	r3, r2
 800b8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ae:	461a      	mov	r2, r3
 800b8b0:	2308      	movs	r3, #8
 800b8b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800b8b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	f000 ff7a 	bl	800c7b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	f003 0310 	and.w	r3, r3, #16
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d008      	beq.n	800b8d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800b8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b8c8:	015a      	lsls	r2, r3, #5
 800b8ca:	69fb      	ldr	r3, [r7, #28]
 800b8cc:	4413      	add	r3, r2
 800b8ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	2310      	movs	r3, #16
 800b8d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800b8d8:	693b      	ldr	r3, [r7, #16]
 800b8da:	f003 0302 	and.w	r3, r3, #2
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d030      	beq.n	800b944 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	695b      	ldr	r3, [r3, #20]
 800b8e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ea:	2b80      	cmp	r3, #128	@ 0x80
 800b8ec:	d109      	bne.n	800b902 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b8ee:	69fb      	ldr	r3, [r7, #28]
 800b8f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	69fa      	ldr	r2, [r7, #28]
 800b8f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b8fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b900:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b902:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b904:	4613      	mov	r3, r2
 800b906:	00db      	lsls	r3, r3, #3
 800b908:	4413      	add	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800b910:	687a      	ldr	r2, [r7, #4]
 800b912:	4413      	add	r3, r2
 800b914:	3304      	adds	r3, #4
 800b916:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b918:	697b      	ldr	r3, [r7, #20]
 800b91a:	78db      	ldrb	r3, [r3, #3]
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d108      	bne.n	800b932 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b920:	697b      	ldr	r3, [r7, #20]
 800b922:	2200      	movs	r2, #0
 800b924:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b928:	b2db      	uxtb	r3, r3
 800b92a:	4619      	mov	r1, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f00b fd09 	bl	8017344 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b934:	015a      	lsls	r2, r3, #5
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	4413      	add	r3, r2
 800b93a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b93e:	461a      	mov	r2, r3
 800b940:	2302      	movs	r3, #2
 800b942:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b944:	693b      	ldr	r3, [r7, #16]
 800b946:	f003 0320 	and.w	r3, r3, #32
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d008      	beq.n	800b960 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b94e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b950:	015a      	lsls	r2, r3, #5
 800b952:	69fb      	ldr	r3, [r7, #28]
 800b954:	4413      	add	r3, r2
 800b956:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b95a:	461a      	mov	r2, r3
 800b95c:	2320      	movs	r3, #32
 800b95e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b960:	693b      	ldr	r3, [r7, #16]
 800b962:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800b966:	2b00      	cmp	r3, #0
 800b968:	d009      	beq.n	800b97e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b96a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b96c:	015a      	lsls	r2, r3, #5
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	4413      	add	r3, r2
 800b972:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b976:	461a      	mov	r2, r3
 800b978:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b97c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b980:	3301      	adds	r3, #1
 800b982:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800b984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b986:	085b      	lsrs	r3, r3, #1
 800b988:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800b98a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	f47f af62 	bne.w	800b856 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4618      	mov	r0, r3
 800b998:	f005 ff32 	bl	8011800 <USB_ReadInterrupts>
 800b99c:	4603      	mov	r3, r0
 800b99e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b9a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b9a6:	f040 80db 	bne.w	800bb60 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f005 ff53 	bl	801185a <USB_ReadDevAllInEpInterrupt>
 800b9b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800b9ba:	e0cd      	b.n	800bb58 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b9bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9be:	f003 0301 	and.w	r3, r3, #1
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f000 80c2 	beq.w	800bb4c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b9ce:	b2d2      	uxtb	r2, r2
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f005 ff79 	bl	80118ca <USB_ReadDevInEPInterrupt>
 800b9d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d057      	beq.n	800ba94 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b9e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e6:	f003 030f 	and.w	r3, r3, #15
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b9f2:	69fb      	ldr	r3, [r7, #28]
 800b9f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	43db      	mvns	r3, r3
 800b9fe:	69f9      	ldr	r1, [r7, #28]
 800ba00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ba04:	4013      	ands	r3, r2
 800ba06:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800ba08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0a:	015a      	lsls	r2, r3, #5
 800ba0c:	69fb      	ldr	r3, [r7, #28]
 800ba0e:	4413      	add	r3, r2
 800ba10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba14:	461a      	mov	r2, r3
 800ba16:	2301      	movs	r3, #1
 800ba18:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	799b      	ldrb	r3, [r3, #6]
 800ba1e:	2b01      	cmp	r3, #1
 800ba20:	d132      	bne.n	800ba88 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800ba22:	6879      	ldr	r1, [r7, #4]
 800ba24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba26:	4613      	mov	r3, r2
 800ba28:	00db      	lsls	r3, r3, #3
 800ba2a:	4413      	add	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	440b      	add	r3, r1
 800ba30:	3320      	adds	r3, #32
 800ba32:	6819      	ldr	r1, [r3, #0]
 800ba34:	6878      	ldr	r0, [r7, #4]
 800ba36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba38:	4613      	mov	r3, r2
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	4403      	add	r3, r0
 800ba42:	331c      	adds	r3, #28
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	4419      	add	r1, r3
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba4c:	4613      	mov	r3, r2
 800ba4e:	00db      	lsls	r3, r3, #3
 800ba50:	4413      	add	r3, r2
 800ba52:	009b      	lsls	r3, r3, #2
 800ba54:	4403      	add	r3, r0
 800ba56:	3320      	adds	r3, #32
 800ba58:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800ba5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d113      	bne.n	800ba88 <HAL_PCD_IRQHandler+0x3a2>
 800ba60:	6879      	ldr	r1, [r7, #4]
 800ba62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba64:	4613      	mov	r3, r2
 800ba66:	00db      	lsls	r3, r3, #3
 800ba68:	4413      	add	r3, r2
 800ba6a:	009b      	lsls	r3, r3, #2
 800ba6c:	440b      	add	r3, r1
 800ba6e:	3324      	adds	r3, #36	@ 0x24
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d108      	bne.n	800ba88 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	6818      	ldr	r0, [r3, #0]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ba80:	461a      	mov	r2, r3
 800ba82:	2101      	movs	r1, #1
 800ba84:	f005 ff80 	bl	8011988 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800ba88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba8a:	b2db      	uxtb	r3, r3
 800ba8c:	4619      	mov	r1, r3
 800ba8e:	6878      	ldr	r0, [r7, #4]
 800ba90:	f00b fbd3 	bl	801723a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	f003 0308 	and.w	r3, r3, #8
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d008      	beq.n	800bab0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800ba9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa0:	015a      	lsls	r2, r3, #5
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	4413      	add	r3, r2
 800baa6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baaa:	461a      	mov	r2, r3
 800baac:	2308      	movs	r3, #8
 800baae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	f003 0310 	and.w	r3, r3, #16
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d008      	beq.n	800bacc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800baba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800babc:	015a      	lsls	r2, r3, #5
 800babe:	69fb      	ldr	r3, [r7, #28]
 800bac0:	4413      	add	r3, r2
 800bac2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bac6:	461a      	mov	r2, r3
 800bac8:	2310      	movs	r3, #16
 800baca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d008      	beq.n	800bae8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bad8:	015a      	lsls	r2, r3, #5
 800bada:	69fb      	ldr	r3, [r7, #28]
 800badc:	4413      	add	r3, r2
 800bade:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bae2:	461a      	mov	r2, r3
 800bae4:	2340      	movs	r3, #64	@ 0x40
 800bae6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	f003 0302 	and.w	r3, r3, #2
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d023      	beq.n	800bb3a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800baf2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800baf4:	6a38      	ldr	r0, [r7, #32]
 800baf6:	f004 ff67 	bl	80109c8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800bafa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bafc:	4613      	mov	r3, r2
 800bafe:	00db      	lsls	r3, r3, #3
 800bb00:	4413      	add	r3, r2
 800bb02:	009b      	lsls	r3, r3, #2
 800bb04:	3310      	adds	r3, #16
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	4413      	add	r3, r2
 800bb0a:	3304      	adds	r3, #4
 800bb0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	78db      	ldrb	r3, [r3, #3]
 800bb12:	2b01      	cmp	r3, #1
 800bb14:	d108      	bne.n	800bb28 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800bb16:	697b      	ldr	r3, [r7, #20]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bb1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb1e:	b2db      	uxtb	r3, r3
 800bb20:	4619      	mov	r1, r3
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f00b fc20 	bl	8017368 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800bb28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb2a:	015a      	lsls	r2, r3, #5
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb34:	461a      	mov	r2, r3
 800bb36:	2302      	movs	r3, #2
 800bb38:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d003      	beq.n	800bb4c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800bb44:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 fcbd 	bl	800c4c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bb4e:	3301      	adds	r3, #1
 800bb50:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800bb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb54:	085b      	lsrs	r3, r3, #1
 800bb56:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800bb58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	f47f af2e 	bne.w	800b9bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f005 fe4b 	bl	8011800 <USB_ReadInterrupts>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb74:	d122      	bne.n	800bbbc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bb76:	69fb      	ldr	r3, [r7, #28]
 800bb78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb7c:	685b      	ldr	r3, [r3, #4]
 800bb7e:	69fa      	ldr	r2, [r7, #28]
 800bb80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb84:	f023 0301 	bic.w	r3, r3, #1
 800bb88:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bb90:	2b01      	cmp	r3, #1
 800bb92:	d108      	bne.n	800bba6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2200      	movs	r2, #0
 800bb98:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bb9c:	2100      	movs	r1, #0
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f000 fea4 	bl	800c8ec <HAL_PCDEx_LPM_Callback>
 800bba4:	e002      	b.n	800bbac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f00b fbbe 	bl	8017328 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	695a      	ldr	r2, [r3, #20]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800bbba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f005 fe1d 	bl	8011800 <USB_ReadInterrupts>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bbcc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bbd0:	d112      	bne.n	800bbf8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800bbd2:	69fb      	ldr	r3, [r7, #28]
 800bbd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	f003 0301 	and.w	r3, r3, #1
 800bbde:	2b01      	cmp	r3, #1
 800bbe0:	d102      	bne.n	800bbe8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f00b fb7a 	bl	80172dc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	695a      	ldr	r2, [r3, #20]
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800bbf6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	f005 fdff 	bl	8011800 <USB_ReadInterrupts>
 800bc02:	4603      	mov	r3, r0
 800bc04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800bc08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bc0c:	f040 80b7 	bne.w	800bd7e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	69fa      	ldr	r2, [r7, #28]
 800bc1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc1e:	f023 0301 	bic.w	r3, r3, #1
 800bc22:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	2110      	movs	r1, #16
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f004 fecc 	bl	80109c8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bc30:	2300      	movs	r3, #0
 800bc32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bc34:	e046      	b.n	800bcc4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800bc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc38:	015a      	lsls	r2, r3, #5
 800bc3a:	69fb      	ldr	r3, [r7, #28]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc42:	461a      	mov	r2, r3
 800bc44:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc48:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc4c:	015a      	lsls	r2, r3, #5
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	4413      	add	r3, r2
 800bc52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc5a:	0151      	lsls	r1, r2, #5
 800bc5c:	69fa      	ldr	r2, [r7, #28]
 800bc5e:	440a      	add	r2, r1
 800bc60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bc64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bc68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800bc6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	69fb      	ldr	r3, [r7, #28]
 800bc70:	4413      	add	r3, r2
 800bc72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc76:	461a      	mov	r2, r3
 800bc78:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800bc7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bc7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc80:	015a      	lsls	r2, r3, #5
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	4413      	add	r3, r2
 800bc86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bc8e:	0151      	lsls	r1, r2, #5
 800bc90:	69fa      	ldr	r2, [r7, #28]
 800bc92:	440a      	add	r2, r1
 800bc94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc98:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bc9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bc9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bca0:	015a      	lsls	r2, r3, #5
 800bca2:	69fb      	ldr	r3, [r7, #28]
 800bca4:	4413      	add	r3, r2
 800bca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcae:	0151      	lsls	r1, r2, #5
 800bcb0:	69fa      	ldr	r2, [r7, #28]
 800bcb2:	440a      	add	r2, r1
 800bcb4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcb8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bcbc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800bcbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc0:	3301      	adds	r3, #1
 800bcc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	791b      	ldrb	r3, [r3, #4]
 800bcc8:	461a      	mov	r2, r3
 800bcca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d3b2      	bcc.n	800bc36 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcd6:	69db      	ldr	r3, [r3, #28]
 800bcd8:	69fa      	ldr	r2, [r7, #28]
 800bcda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcde:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800bce2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	7bdb      	ldrb	r3, [r3, #15]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d016      	beq.n	800bd1a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcf2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800bcf6:	69fa      	ldr	r2, [r7, #28]
 800bcf8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcfc:	f043 030b 	orr.w	r3, r3, #11
 800bd00:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800bd04:	69fb      	ldr	r3, [r7, #28]
 800bd06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd0c:	69fa      	ldr	r2, [r7, #28]
 800bd0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd12:	f043 030b 	orr.w	r3, r3, #11
 800bd16:	6453      	str	r3, [r2, #68]	@ 0x44
 800bd18:	e015      	b.n	800bd46 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd20:	695b      	ldr	r3, [r3, #20]
 800bd22:	69fa      	ldr	r2, [r7, #28]
 800bd24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd28:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800bd2c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800bd30:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd38:	691b      	ldr	r3, [r3, #16]
 800bd3a:	69fa      	ldr	r2, [r7, #28]
 800bd3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd40:	f043 030b 	orr.w	r3, r3, #11
 800bd44:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800bd46:	69fb      	ldr	r3, [r7, #28]
 800bd48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	69fa      	ldr	r2, [r7, #28]
 800bd50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd54:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bd58:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	6818      	ldr	r0, [r3, #0]
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800bd68:	461a      	mov	r2, r3
 800bd6a:	f005 fe0d 	bl	8011988 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	695a      	ldr	r2, [r3, #20]
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800bd7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	4618      	mov	r0, r3
 800bd84:	f005 fd3c 	bl	8011800 <USB_ReadInterrupts>
 800bd88:	4603      	mov	r3, r0
 800bd8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bd92:	d123      	bne.n	800bddc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f005 fdd2 	bl	8011942 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f004 fe89 	bl	8010aba <USB_GetDevSpeed>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	461a      	mov	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681c      	ldr	r4, [r3, #0]
 800bdb4:	f001 fa0a 	bl	800d1cc <HAL_RCC_GetHCLKFreq>
 800bdb8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	f004 fb8d 	bl	80104e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f00b fa5f 	bl	801728a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	695a      	ldr	r2, [r3, #20]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800bdda:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	4618      	mov	r0, r3
 800bde2:	f005 fd0d 	bl	8011800 <USB_ReadInterrupts>
 800bde6:	4603      	mov	r3, r0
 800bde8:	f003 0308 	and.w	r3, r3, #8
 800bdec:	2b08      	cmp	r3, #8
 800bdee:	d10a      	bne.n	800be06 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f00b fa3c 	bl	801726e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	695a      	ldr	r2, [r3, #20]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	681b      	ldr	r3, [r3, #0]
 800be00:	f002 0208 	and.w	r2, r2, #8
 800be04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	4618      	mov	r0, r3
 800be0c:	f005 fcf8 	bl	8011800 <USB_ReadInterrupts>
 800be10:	4603      	mov	r3, r0
 800be12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be16:	2b80      	cmp	r3, #128	@ 0x80
 800be18:	d123      	bne.n	800be62 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800be1a:	6a3b      	ldr	r3, [r7, #32]
 800be1c:	699b      	ldr	r3, [r3, #24]
 800be1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800be22:	6a3b      	ldr	r3, [r7, #32]
 800be24:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be26:	2301      	movs	r3, #1
 800be28:	627b      	str	r3, [r7, #36]	@ 0x24
 800be2a:	e014      	b.n	800be56 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800be2c:	6879      	ldr	r1, [r7, #4]
 800be2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be30:	4613      	mov	r3, r2
 800be32:	00db      	lsls	r3, r3, #3
 800be34:	4413      	add	r3, r2
 800be36:	009b      	lsls	r3, r3, #2
 800be38:	440b      	add	r3, r1
 800be3a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800be3e:	781b      	ldrb	r3, [r3, #0]
 800be40:	2b01      	cmp	r3, #1
 800be42:	d105      	bne.n	800be50 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800be44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be46:	b2db      	uxtb	r3, r3
 800be48:	4619      	mov	r1, r3
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f000 fb0a 	bl	800c464 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be52:	3301      	adds	r3, #1
 800be54:	627b      	str	r3, [r7, #36]	@ 0x24
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	791b      	ldrb	r3, [r3, #4]
 800be5a:	461a      	mov	r2, r3
 800be5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5e:	4293      	cmp	r3, r2
 800be60:	d3e4      	bcc.n	800be2c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4618      	mov	r0, r3
 800be68:	f005 fcca 	bl	8011800 <USB_ReadInterrupts>
 800be6c:	4603      	mov	r3, r0
 800be6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800be72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800be76:	d13c      	bne.n	800bef2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800be78:	2301      	movs	r3, #1
 800be7a:	627b      	str	r3, [r7, #36]	@ 0x24
 800be7c:	e02b      	b.n	800bed6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800be7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be80:	015a      	lsls	r2, r3, #5
 800be82:	69fb      	ldr	r3, [r7, #28]
 800be84:	4413      	add	r3, r2
 800be86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800be8e:	6879      	ldr	r1, [r7, #4]
 800be90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be92:	4613      	mov	r3, r2
 800be94:	00db      	lsls	r3, r3, #3
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	440b      	add	r3, r1
 800be9c:	3318      	adds	r3, #24
 800be9e:	781b      	ldrb	r3, [r3, #0]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d115      	bne.n	800bed0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800bea4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	da12      	bge.n	800bed0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800beaa:	6879      	ldr	r1, [r7, #4]
 800beac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800beae:	4613      	mov	r3, r2
 800beb0:	00db      	lsls	r3, r3, #3
 800beb2:	4413      	add	r3, r2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	440b      	add	r3, r1
 800beb8:	3317      	adds	r3, #23
 800beba:	2201      	movs	r2, #1
 800bebc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800bebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec0:	b2db      	uxtb	r3, r3
 800bec2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bec6:	b2db      	uxtb	r3, r3
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f000 faca 	bl	800c464 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bed2:	3301      	adds	r3, #1
 800bed4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	791b      	ldrb	r3, [r3, #4]
 800beda:	461a      	mov	r2, r3
 800bedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bede:	4293      	cmp	r3, r2
 800bee0:	d3cd      	bcc.n	800be7e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	695a      	ldr	r2, [r3, #20]
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800bef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4618      	mov	r0, r3
 800bef8:	f005 fc82 	bl	8011800 <USB_ReadInterrupts>
 800befc:	4603      	mov	r3, r0
 800befe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bf02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bf06:	d156      	bne.n	800bfb6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf08:	2301      	movs	r3, #1
 800bf0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf0c:	e045      	b.n	800bf9a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf10:	015a      	lsls	r2, r3, #5
 800bf12:	69fb      	ldr	r3, [r7, #28]
 800bf14:	4413      	add	r3, r2
 800bf16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf1e:	6879      	ldr	r1, [r7, #4]
 800bf20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf22:	4613      	mov	r3, r2
 800bf24:	00db      	lsls	r3, r3, #3
 800bf26:	4413      	add	r3, r2
 800bf28:	009b      	lsls	r3, r3, #2
 800bf2a:	440b      	add	r3, r1
 800bf2c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800bf30:	781b      	ldrb	r3, [r3, #0]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d12e      	bne.n	800bf94 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bf36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	da2b      	bge.n	800bf94 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800bf48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d121      	bne.n	800bf94 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800bf50:	6879      	ldr	r1, [r7, #4]
 800bf52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf54:	4613      	mov	r3, r2
 800bf56:	00db      	lsls	r3, r3, #3
 800bf58:	4413      	add	r3, r2
 800bf5a:	009b      	lsls	r3, r3, #2
 800bf5c:	440b      	add	r3, r1
 800bf5e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800bf62:	2201      	movs	r2, #1
 800bf64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	699b      	ldr	r3, [r3, #24]
 800bf6a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800bf6e:	6a3b      	ldr	r3, [r7, #32]
 800bf70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800bf72:	6a3b      	ldr	r3, [r7, #32]
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10a      	bne.n	800bf94 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800bf7e:	69fb      	ldr	r3, [r7, #28]
 800bf80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf84:	685b      	ldr	r3, [r3, #4]
 800bf86:	69fa      	ldr	r2, [r7, #28]
 800bf88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800bf90:	6053      	str	r3, [r2, #4]
            break;
 800bf92:	e008      	b.n	800bfa6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800bf94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf96:	3301      	adds	r3, #1
 800bf98:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	791b      	ldrb	r3, [r3, #4]
 800bf9e:	461a      	mov	r2, r3
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d3b3      	bcc.n	800bf0e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	695a      	ldr	r2, [r3, #20]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800bfb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f005 fc20 	bl	8011800 <USB_ReadInterrupts>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bfc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bfca:	d10a      	bne.n	800bfe2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800bfcc:	6878      	ldr	r0, [r7, #4]
 800bfce:	f00b f9dd 	bl	801738c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	695a      	ldr	r2, [r3, #20]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800bfe0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f005 fc0a 	bl	8011800 <USB_ReadInterrupts>
 800bfec:	4603      	mov	r3, r0
 800bfee:	f003 0304 	and.w	r3, r3, #4
 800bff2:	2b04      	cmp	r3, #4
 800bff4:	d115      	bne.n	800c022 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800bffe:	69bb      	ldr	r3, [r7, #24]
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	2b00      	cmp	r3, #0
 800c006:	d002      	beq.n	800c00e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c008:	6878      	ldr	r0, [r7, #4]
 800c00a:	f00b f9cd 	bl	80173a8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	6859      	ldr	r1, [r3, #4]
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	69ba      	ldr	r2, [r7, #24]
 800c01a:	430a      	orrs	r2, r1
 800c01c:	605a      	str	r2, [r3, #4]
 800c01e:	e000      	b.n	800c022 <HAL_PCD_IRQHandler+0x93c>
      return;
 800c020:	bf00      	nop
    }
  }
}
 800c022:	3734      	adds	r7, #52	@ 0x34
 800c024:	46bd      	mov	sp, r7
 800c026:	bd90      	pop	{r4, r7, pc}

0800c028 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c028:	b580      	push	{r7, lr}
 800c02a:	b082      	sub	sp, #8
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
 800c030:	460b      	mov	r3, r1
 800c032:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c03a:	2b01      	cmp	r3, #1
 800c03c:	d101      	bne.n	800c042 <HAL_PCD_SetAddress+0x1a>
 800c03e:	2302      	movs	r3, #2
 800c040:	e012      	b.n	800c068 <HAL_PCD_SetAddress+0x40>
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	2201      	movs	r2, #1
 800c046:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	78fa      	ldrb	r2, [r7, #3]
 800c04e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	78fa      	ldrb	r2, [r7, #3]
 800c056:	4611      	mov	r1, r2
 800c058:	4618      	mov	r0, r3
 800c05a:	f005 fb69 	bl	8011730 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	2200      	movs	r2, #0
 800c062:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c066:	2300      	movs	r3, #0
}
 800c068:	4618      	mov	r0, r3
 800c06a:	3708      	adds	r7, #8
 800c06c:	46bd      	mov	sp, r7
 800c06e:	bd80      	pop	{r7, pc}

0800c070 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b084      	sub	sp, #16
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	4608      	mov	r0, r1
 800c07a:	4611      	mov	r1, r2
 800c07c:	461a      	mov	r2, r3
 800c07e:	4603      	mov	r3, r0
 800c080:	70fb      	strb	r3, [r7, #3]
 800c082:	460b      	mov	r3, r1
 800c084:	803b      	strh	r3, [r7, #0]
 800c086:	4613      	mov	r3, r2
 800c088:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800c08a:	2300      	movs	r3, #0
 800c08c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c08e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c092:	2b00      	cmp	r3, #0
 800c094:	da0f      	bge.n	800c0b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c096:	78fb      	ldrb	r3, [r7, #3]
 800c098:	f003 020f 	and.w	r2, r3, #15
 800c09c:	4613      	mov	r3, r2
 800c09e:	00db      	lsls	r3, r3, #3
 800c0a0:	4413      	add	r3, r2
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	3310      	adds	r3, #16
 800c0a6:	687a      	ldr	r2, [r7, #4]
 800c0a8:	4413      	add	r3, r2
 800c0aa:	3304      	adds	r3, #4
 800c0ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	2201      	movs	r2, #1
 800c0b2:	705a      	strb	r2, [r3, #1]
 800c0b4:	e00f      	b.n	800c0d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c0b6:	78fb      	ldrb	r3, [r7, #3]
 800c0b8:	f003 020f 	and.w	r2, r3, #15
 800c0bc:	4613      	mov	r3, r2
 800c0be:	00db      	lsls	r3, r3, #3
 800c0c0:	4413      	add	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c0c8:	687a      	ldr	r2, [r7, #4]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	3304      	adds	r3, #4
 800c0ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	2200      	movs	r2, #0
 800c0d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c0d6:	78fb      	ldrb	r3, [r7, #3]
 800c0d8:	f003 030f 	and.w	r3, r3, #15
 800c0dc:	b2da      	uxtb	r2, r3
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800c0e2:	883b      	ldrh	r3, [r7, #0]
 800c0e4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	78ba      	ldrb	r2, [r7, #2]
 800c0f0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	785b      	ldrb	r3, [r3, #1]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d004      	beq.n	800c104 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	781b      	ldrb	r3, [r3, #0]
 800c0fe:	461a      	mov	r2, r3
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c104:	78bb      	ldrb	r3, [r7, #2]
 800c106:	2b02      	cmp	r3, #2
 800c108:	d102      	bne.n	800c110 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2200      	movs	r2, #0
 800c10e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c116:	2b01      	cmp	r3, #1
 800c118:	d101      	bne.n	800c11e <HAL_PCD_EP_Open+0xae>
 800c11a:	2302      	movs	r3, #2
 800c11c:	e00e      	b.n	800c13c <HAL_PCD_EP_Open+0xcc>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2201      	movs	r2, #1
 800c122:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68f9      	ldr	r1, [r7, #12]
 800c12c:	4618      	mov	r0, r3
 800c12e:	f004 fce9 	bl	8010b04 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2200      	movs	r2, #0
 800c136:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c13a:	7afb      	ldrb	r3, [r7, #11]
}
 800c13c:	4618      	mov	r0, r3
 800c13e:	3710      	adds	r7, #16
 800c140:	46bd      	mov	sp, r7
 800c142:	bd80      	pop	{r7, pc}

0800c144 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	460b      	mov	r3, r1
 800c14e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c154:	2b00      	cmp	r3, #0
 800c156:	da0f      	bge.n	800c178 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c158:	78fb      	ldrb	r3, [r7, #3]
 800c15a:	f003 020f 	and.w	r2, r3, #15
 800c15e:	4613      	mov	r3, r2
 800c160:	00db      	lsls	r3, r3, #3
 800c162:	4413      	add	r3, r2
 800c164:	009b      	lsls	r3, r3, #2
 800c166:	3310      	adds	r3, #16
 800c168:	687a      	ldr	r2, [r7, #4]
 800c16a:	4413      	add	r3, r2
 800c16c:	3304      	adds	r3, #4
 800c16e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	2201      	movs	r2, #1
 800c174:	705a      	strb	r2, [r3, #1]
 800c176:	e00f      	b.n	800c198 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c178:	78fb      	ldrb	r3, [r7, #3]
 800c17a:	f003 020f 	and.w	r2, r3, #15
 800c17e:	4613      	mov	r3, r2
 800c180:	00db      	lsls	r3, r3, #3
 800c182:	4413      	add	r3, r2
 800c184:	009b      	lsls	r3, r3, #2
 800c186:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	4413      	add	r3, r2
 800c18e:	3304      	adds	r3, #4
 800c190:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2200      	movs	r2, #0
 800c196:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c198:	78fb      	ldrb	r3, [r7, #3]
 800c19a:	f003 030f 	and.w	r3, r3, #15
 800c19e:	b2da      	uxtb	r2, r3
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d101      	bne.n	800c1b2 <HAL_PCD_EP_Close+0x6e>
 800c1ae:	2302      	movs	r3, #2
 800c1b0:	e00e      	b.n	800c1d0 <HAL_PCD_EP_Close+0x8c>
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	68f9      	ldr	r1, [r7, #12]
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f004 fd27 	bl	8010c14 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c1ce:	2300      	movs	r3, #0
}
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	3710      	adds	r7, #16
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b086      	sub	sp, #24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	60f8      	str	r0, [r7, #12]
 800c1e0:	607a      	str	r2, [r7, #4]
 800c1e2:	603b      	str	r3, [r7, #0]
 800c1e4:	460b      	mov	r3, r1
 800c1e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c1e8:	7afb      	ldrb	r3, [r7, #11]
 800c1ea:	f003 020f 	and.w	r2, r3, #15
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	00db      	lsls	r3, r3, #3
 800c1f2:	4413      	add	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c1fa:	68fa      	ldr	r2, [r7, #12]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	3304      	adds	r3, #4
 800c200:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c202:	697b      	ldr	r3, [r7, #20]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c208:	697b      	ldr	r3, [r7, #20]
 800c20a:	683a      	ldr	r2, [r7, #0]
 800c20c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	2200      	movs	r2, #0
 800c212:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c214:	697b      	ldr	r3, [r7, #20]
 800c216:	2200      	movs	r2, #0
 800c218:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c21a:	7afb      	ldrb	r3, [r7, #11]
 800c21c:	f003 030f 	and.w	r3, r3, #15
 800c220:	b2da      	uxtb	r2, r3
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	799b      	ldrb	r3, [r3, #6]
 800c22a:	2b01      	cmp	r3, #1
 800c22c:	d102      	bne.n	800c234 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6818      	ldr	r0, [r3, #0]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	799b      	ldrb	r3, [r3, #6]
 800c23c:	461a      	mov	r2, r3
 800c23e:	6979      	ldr	r1, [r7, #20]
 800c240:	f004 fdc4 	bl	8010dcc <USB_EPStartXfer>

  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3718      	adds	r7, #24
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c24e:	b480      	push	{r7}
 800c250:	b083      	sub	sp, #12
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
 800c256:	460b      	mov	r3, r1
 800c258:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c25a:	78fb      	ldrb	r3, [r7, #3]
 800c25c:	f003 020f 	and.w	r2, r3, #15
 800c260:	6879      	ldr	r1, [r7, #4]
 800c262:	4613      	mov	r3, r2
 800c264:	00db      	lsls	r3, r3, #3
 800c266:	4413      	add	r3, r2
 800c268:	009b      	lsls	r3, r3, #2
 800c26a:	440b      	add	r3, r1
 800c26c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c270:	681b      	ldr	r3, [r3, #0]
}
 800c272:	4618      	mov	r0, r3
 800c274:	370c      	adds	r7, #12
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr

0800c27e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c27e:	b580      	push	{r7, lr}
 800c280:	b086      	sub	sp, #24
 800c282:	af00      	add	r7, sp, #0
 800c284:	60f8      	str	r0, [r7, #12]
 800c286:	607a      	str	r2, [r7, #4]
 800c288:	603b      	str	r3, [r7, #0]
 800c28a:	460b      	mov	r3, r1
 800c28c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c28e:	7afb      	ldrb	r3, [r7, #11]
 800c290:	f003 020f 	and.w	r2, r3, #15
 800c294:	4613      	mov	r3, r2
 800c296:	00db      	lsls	r3, r3, #3
 800c298:	4413      	add	r3, r2
 800c29a:	009b      	lsls	r3, r3, #2
 800c29c:	3310      	adds	r3, #16
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	3304      	adds	r3, #4
 800c2a4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	683a      	ldr	r2, [r7, #0]
 800c2b0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	2200      	movs	r2, #0
 800c2b6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c2be:	7afb      	ldrb	r3, [r7, #11]
 800c2c0:	f003 030f 	and.w	r3, r3, #15
 800c2c4:	b2da      	uxtb	r2, r3
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c2ca:	68fb      	ldr	r3, [r7, #12]
 800c2cc:	799b      	ldrb	r3, [r3, #6]
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d102      	bne.n	800c2d8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6818      	ldr	r0, [r3, #0]
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	799b      	ldrb	r3, [r3, #6]
 800c2e0:	461a      	mov	r2, r3
 800c2e2:	6979      	ldr	r1, [r7, #20]
 800c2e4:	f004 fd72 	bl	8010dcc <USB_EPStartXfer>

  return HAL_OK;
 800c2e8:	2300      	movs	r3, #0
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3718      	adds	r7, #24
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b084      	sub	sp, #16
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
 800c2fa:	460b      	mov	r3, r1
 800c2fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c2fe:	78fb      	ldrb	r3, [r7, #3]
 800c300:	f003 030f 	and.w	r3, r3, #15
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	7912      	ldrb	r2, [r2, #4]
 800c308:	4293      	cmp	r3, r2
 800c30a:	d901      	bls.n	800c310 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	e04f      	b.n	800c3b0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c310:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c314:	2b00      	cmp	r3, #0
 800c316:	da0f      	bge.n	800c338 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c318:	78fb      	ldrb	r3, [r7, #3]
 800c31a:	f003 020f 	and.w	r2, r3, #15
 800c31e:	4613      	mov	r3, r2
 800c320:	00db      	lsls	r3, r3, #3
 800c322:	4413      	add	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	3310      	adds	r3, #16
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	4413      	add	r3, r2
 800c32c:	3304      	adds	r3, #4
 800c32e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2201      	movs	r2, #1
 800c334:	705a      	strb	r2, [r3, #1]
 800c336:	e00d      	b.n	800c354 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c338:	78fa      	ldrb	r2, [r7, #3]
 800c33a:	4613      	mov	r3, r2
 800c33c:	00db      	lsls	r3, r3, #3
 800c33e:	4413      	add	r3, r2
 800c340:	009b      	lsls	r3, r3, #2
 800c342:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	4413      	add	r3, r2
 800c34a:	3304      	adds	r3, #4
 800c34c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	2200      	movs	r2, #0
 800c352:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2201      	movs	r2, #1
 800c358:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c35a:	78fb      	ldrb	r3, [r7, #3]
 800c35c:	f003 030f 	and.w	r3, r3, #15
 800c360:	b2da      	uxtb	r2, r3
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d101      	bne.n	800c374 <HAL_PCD_EP_SetStall+0x82>
 800c370:	2302      	movs	r3, #2
 800c372:	e01d      	b.n	800c3b0 <HAL_PCD_EP_SetStall+0xbe>
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2201      	movs	r2, #1
 800c378:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	68f9      	ldr	r1, [r7, #12]
 800c382:	4618      	mov	r0, r3
 800c384:	f005 f900 	bl	8011588 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c388:	78fb      	ldrb	r3, [r7, #3]
 800c38a:	f003 030f 	and.w	r3, r3, #15
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d109      	bne.n	800c3a6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6818      	ldr	r0, [r3, #0]
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	7999      	ldrb	r1, [r3, #6]
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	f005 faf1 	bl	8011988 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c3ae:	2300      	movs	r3, #0
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3710      	adds	r7, #16
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c3b8:	b580      	push	{r7, lr}
 800c3ba:	b084      	sub	sp, #16
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	460b      	mov	r3, r1
 800c3c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c3c4:	78fb      	ldrb	r3, [r7, #3]
 800c3c6:	f003 030f 	and.w	r3, r3, #15
 800c3ca:	687a      	ldr	r2, [r7, #4]
 800c3cc:	7912      	ldrb	r2, [r2, #4]
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d901      	bls.n	800c3d6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	e042      	b.n	800c45c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c3d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	da0f      	bge.n	800c3fe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c3de:	78fb      	ldrb	r3, [r7, #3]
 800c3e0:	f003 020f 	and.w	r2, r3, #15
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	4413      	add	r3, r2
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	3310      	adds	r3, #16
 800c3ee:	687a      	ldr	r2, [r7, #4]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	3304      	adds	r3, #4
 800c3f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	705a      	strb	r2, [r3, #1]
 800c3fc:	e00f      	b.n	800c41e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c3fe:	78fb      	ldrb	r3, [r7, #3]
 800c400:	f003 020f 	and.w	r2, r3, #15
 800c404:	4613      	mov	r3, r2
 800c406:	00db      	lsls	r3, r3, #3
 800c408:	4413      	add	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c410:	687a      	ldr	r2, [r7, #4]
 800c412:	4413      	add	r3, r2
 800c414:	3304      	adds	r3, #4
 800c416:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2200      	movs	r2, #0
 800c422:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c424:	78fb      	ldrb	r3, [r7, #3]
 800c426:	f003 030f 	and.w	r3, r3, #15
 800c42a:	b2da      	uxtb	r2, r3
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c436:	2b01      	cmp	r3, #1
 800c438:	d101      	bne.n	800c43e <HAL_PCD_EP_ClrStall+0x86>
 800c43a:	2302      	movs	r3, #2
 800c43c:	e00e      	b.n	800c45c <HAL_PCD_EP_ClrStall+0xa4>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	2201      	movs	r2, #1
 800c442:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	68f9      	ldr	r1, [r7, #12]
 800c44c:	4618      	mov	r0, r3
 800c44e:	f005 f909 	bl	8011664 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	2200      	movs	r2, #0
 800c456:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c45a:	2300      	movs	r3, #0
}
 800c45c:	4618      	mov	r0, r3
 800c45e:	3710      	adds	r7, #16
 800c460:	46bd      	mov	sp, r7
 800c462:	bd80      	pop	{r7, pc}

0800c464 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
 800c46c:	460b      	mov	r3, r1
 800c46e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c470:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c474:	2b00      	cmp	r3, #0
 800c476:	da0c      	bge.n	800c492 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c478:	78fb      	ldrb	r3, [r7, #3]
 800c47a:	f003 020f 	and.w	r2, r3, #15
 800c47e:	4613      	mov	r3, r2
 800c480:	00db      	lsls	r3, r3, #3
 800c482:	4413      	add	r3, r2
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	3310      	adds	r3, #16
 800c488:	687a      	ldr	r2, [r7, #4]
 800c48a:	4413      	add	r3, r2
 800c48c:	3304      	adds	r3, #4
 800c48e:	60fb      	str	r3, [r7, #12]
 800c490:	e00c      	b.n	800c4ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c492:	78fb      	ldrb	r3, [r7, #3]
 800c494:	f003 020f 	and.w	r2, r3, #15
 800c498:	4613      	mov	r3, r2
 800c49a:	00db      	lsls	r3, r3, #3
 800c49c:	4413      	add	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c4a4:	687a      	ldr	r2, [r7, #4]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	3304      	adds	r3, #4
 800c4aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	68f9      	ldr	r1, [r7, #12]
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f004 ff28 	bl	8011308 <USB_EPStopXfer>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c4bc:	7afb      	ldrb	r3, [r7, #11]
}
 800c4be:	4618      	mov	r0, r3
 800c4c0:	3710      	adds	r7, #16
 800c4c2:	46bd      	mov	sp, r7
 800c4c4:	bd80      	pop	{r7, pc}

0800c4c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c4c6:	b580      	push	{r7, lr}
 800c4c8:	b08a      	sub	sp, #40	@ 0x28
 800c4ca:	af02      	add	r7, sp, #8
 800c4cc:	6078      	str	r0, [r7, #4]
 800c4ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c4da:	683a      	ldr	r2, [r7, #0]
 800c4dc:	4613      	mov	r3, r2
 800c4de:	00db      	lsls	r3, r3, #3
 800c4e0:	4413      	add	r3, r2
 800c4e2:	009b      	lsls	r3, r3, #2
 800c4e4:	3310      	adds	r3, #16
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	4413      	add	r3, r2
 800c4ea:	3304      	adds	r3, #4
 800c4ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	695a      	ldr	r2, [r3, #20]
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	691b      	ldr	r3, [r3, #16]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d901      	bls.n	800c4fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c4fa:	2301      	movs	r3, #1
 800c4fc:	e06b      	b.n	800c5d6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	691a      	ldr	r2, [r3, #16]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	695b      	ldr	r3, [r3, #20]
 800c506:	1ad3      	subs	r3, r2, r3
 800c508:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	689b      	ldr	r3, [r3, #8]
 800c50e:	69fa      	ldr	r2, [r7, #28]
 800c510:	429a      	cmp	r2, r3
 800c512:	d902      	bls.n	800c51a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	689b      	ldr	r3, [r3, #8]
 800c518:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c51a:	69fb      	ldr	r3, [r7, #28]
 800c51c:	3303      	adds	r3, #3
 800c51e:	089b      	lsrs	r3, r3, #2
 800c520:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c522:	e02a      	b.n	800c57a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	691a      	ldr	r2, [r3, #16]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	695b      	ldr	r3, [r3, #20]
 800c52c:	1ad3      	subs	r3, r2, r3
 800c52e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	689b      	ldr	r3, [r3, #8]
 800c534:	69fa      	ldr	r2, [r7, #28]
 800c536:	429a      	cmp	r2, r3
 800c538:	d902      	bls.n	800c540 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	689b      	ldr	r3, [r3, #8]
 800c53e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	3303      	adds	r3, #3
 800c544:	089b      	lsrs	r3, r3, #2
 800c546:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	68d9      	ldr	r1, [r3, #12]
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	69fb      	ldr	r3, [r7, #28]
 800c552:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c558:	9300      	str	r3, [sp, #0]
 800c55a:	4603      	mov	r3, r0
 800c55c:	6978      	ldr	r0, [r7, #20]
 800c55e:	f004 ff7d 	bl	801145c <USB_WritePacket>

    ep->xfer_buff  += len;
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	69fb      	ldr	r3, [r7, #28]
 800c568:	441a      	add	r2, r3
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	695a      	ldr	r2, [r3, #20]
 800c572:	69fb      	ldr	r3, [r7, #28]
 800c574:	441a      	add	r2, r3
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c57a:	683b      	ldr	r3, [r7, #0]
 800c57c:	015a      	lsls	r2, r3, #5
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	4413      	add	r3, r2
 800c582:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c58a:	69ba      	ldr	r2, [r7, #24]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d809      	bhi.n	800c5a4 <PCD_WriteEmptyTxFifo+0xde>
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	695a      	ldr	r2, [r3, #20]
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c598:	429a      	cmp	r2, r3
 800c59a:	d203      	bcs.n	800c5a4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	691b      	ldr	r3, [r3, #16]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d1bf      	bne.n	800c524 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	691a      	ldr	r2, [r3, #16]
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d811      	bhi.n	800c5d4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	f003 030f 	and.w	r3, r3, #15
 800c5b6:	2201      	movs	r2, #1
 800c5b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c5bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c5c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	43db      	mvns	r3, r3
 800c5ca:	6939      	ldr	r1, [r7, #16]
 800c5cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c5d0:	4013      	ands	r3, r2
 800c5d2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	3720      	adds	r7, #32
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	bd80      	pop	{r7, pc}
	...

0800c5e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b088      	sub	sp, #32
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	6078      	str	r0, [r7, #4]
 800c5e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5f0:	69fb      	ldr	r3, [r7, #28]
 800c5f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c5f4:	69fb      	ldr	r3, [r7, #28]
 800c5f6:	333c      	adds	r3, #60	@ 0x3c
 800c5f8:	3304      	adds	r3, #4
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	015a      	lsls	r2, r3, #5
 800c602:	69bb      	ldr	r3, [r7, #24]
 800c604:	4413      	add	r3, r2
 800c606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c60a:	689b      	ldr	r3, [r3, #8]
 800c60c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	799b      	ldrb	r3, [r3, #6]
 800c612:	2b01      	cmp	r3, #1
 800c614:	d17b      	bne.n	800c70e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800c616:	693b      	ldr	r3, [r7, #16]
 800c618:	f003 0308 	and.w	r3, r3, #8
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d015      	beq.n	800c64c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	4a61      	ldr	r2, [pc, #388]	@ (800c7a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c624:	4293      	cmp	r3, r2
 800c626:	f240 80b9 	bls.w	800c79c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c62a:	693b      	ldr	r3, [r7, #16]
 800c62c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c630:	2b00      	cmp	r3, #0
 800c632:	f000 80b3 	beq.w	800c79c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c636:	683b      	ldr	r3, [r7, #0]
 800c638:	015a      	lsls	r2, r3, #5
 800c63a:	69bb      	ldr	r3, [r7, #24]
 800c63c:	4413      	add	r3, r2
 800c63e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c642:	461a      	mov	r2, r3
 800c644:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c648:	6093      	str	r3, [r2, #8]
 800c64a:	e0a7      	b.n	800c79c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	f003 0320 	and.w	r3, r3, #32
 800c652:	2b00      	cmp	r3, #0
 800c654:	d009      	beq.n	800c66a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c656:	683b      	ldr	r3, [r7, #0]
 800c658:	015a      	lsls	r2, r3, #5
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	4413      	add	r3, r2
 800c65e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c662:	461a      	mov	r2, r3
 800c664:	2320      	movs	r3, #32
 800c666:	6093      	str	r3, [r2, #8]
 800c668:	e098      	b.n	800c79c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800c66a:	693b      	ldr	r3, [r7, #16]
 800c66c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800c670:	2b00      	cmp	r3, #0
 800c672:	f040 8093 	bne.w	800c79c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c676:	697b      	ldr	r3, [r7, #20]
 800c678:	4a4b      	ldr	r2, [pc, #300]	@ (800c7a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d90f      	bls.n	800c69e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c67e:	693b      	ldr	r3, [r7, #16]
 800c680:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c684:	2b00      	cmp	r3, #0
 800c686:	d00a      	beq.n	800c69e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	015a      	lsls	r2, r3, #5
 800c68c:	69bb      	ldr	r3, [r7, #24]
 800c68e:	4413      	add	r3, r2
 800c690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c694:	461a      	mov	r2, r3
 800c696:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c69a:	6093      	str	r3, [r2, #8]
 800c69c:	e07e      	b.n	800c79c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800c69e:	683a      	ldr	r2, [r7, #0]
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	00db      	lsls	r3, r3, #3
 800c6a4:	4413      	add	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	3304      	adds	r3, #4
 800c6b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	6a1a      	ldr	r2, [r3, #32]
 800c6b8:	683b      	ldr	r3, [r7, #0]
 800c6ba:	0159      	lsls	r1, r3, #5
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	440b      	add	r3, r1
 800c6c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c6c4:	691b      	ldr	r3, [r3, #16]
 800c6c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c6ca:	1ad2      	subs	r2, r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d114      	bne.n	800c700 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	691b      	ldr	r3, [r3, #16]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d109      	bne.n	800c6f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	6818      	ldr	r0, [r3, #0]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c6e8:	461a      	mov	r2, r3
 800c6ea:	2101      	movs	r1, #1
 800c6ec:	f005 f94c 	bl	8011988 <USB_EP0_OutStart>
 800c6f0:	e006      	b.n	800c700 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	68da      	ldr	r2, [r3, #12]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	695b      	ldr	r3, [r3, #20]
 800c6fa:	441a      	add	r2, r3
 800c6fc:	68fb      	ldr	r3, [r7, #12]
 800c6fe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	b2db      	uxtb	r3, r3
 800c704:	4619      	mov	r1, r3
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	f00a fd7c 	bl	8017204 <HAL_PCD_DataOutStageCallback>
 800c70c:	e046      	b.n	800c79c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800c70e:	697b      	ldr	r3, [r7, #20]
 800c710:	4a26      	ldr	r2, [pc, #152]	@ (800c7ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d124      	bne.n	800c760 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00a      	beq.n	800c736 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	015a      	lsls	r2, r3, #5
 800c724:	69bb      	ldr	r3, [r7, #24]
 800c726:	4413      	add	r3, r2
 800c728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c72c:	461a      	mov	r2, r3
 800c72e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c732:	6093      	str	r3, [r2, #8]
 800c734:	e032      	b.n	800c79c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	f003 0320 	and.w	r3, r3, #32
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d008      	beq.n	800c752 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	015a      	lsls	r2, r3, #5
 800c744:	69bb      	ldr	r3, [r7, #24]
 800c746:	4413      	add	r3, r2
 800c748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c74c:	461a      	mov	r2, r3
 800c74e:	2320      	movs	r3, #32
 800c750:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	b2db      	uxtb	r3, r3
 800c756:	4619      	mov	r1, r3
 800c758:	6878      	ldr	r0, [r7, #4]
 800c75a:	f00a fd53 	bl	8017204 <HAL_PCD_DataOutStageCallback>
 800c75e:	e01d      	b.n	800c79c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d114      	bne.n	800c790 <PCD_EP_OutXfrComplete_int+0x1b0>
 800c766:	6879      	ldr	r1, [r7, #4]
 800c768:	683a      	ldr	r2, [r7, #0]
 800c76a:	4613      	mov	r3, r2
 800c76c:	00db      	lsls	r3, r3, #3
 800c76e:	4413      	add	r3, r2
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	440b      	add	r3, r1
 800c774:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c778:	681b      	ldr	r3, [r3, #0]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d108      	bne.n	800c790 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	6818      	ldr	r0, [r3, #0]
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c788:	461a      	mov	r2, r3
 800c78a:	2100      	movs	r1, #0
 800c78c:	f005 f8fc 	bl	8011988 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800c790:	683b      	ldr	r3, [r7, #0]
 800c792:	b2db      	uxtb	r3, r3
 800c794:	4619      	mov	r1, r3
 800c796:	6878      	ldr	r0, [r7, #4]
 800c798:	f00a fd34 	bl	8017204 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3720      	adds	r7, #32
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}
 800c7a6:	bf00      	nop
 800c7a8:	4f54300a 	.word	0x4f54300a
 800c7ac:	4f54310a 	.word	0x4f54310a

0800c7b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
 800c7b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	333c      	adds	r3, #60	@ 0x3c
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800c7ce:	683b      	ldr	r3, [r7, #0]
 800c7d0:	015a      	lsls	r2, r3, #5
 800c7d2:	693b      	ldr	r3, [r7, #16]
 800c7d4:	4413      	add	r3, r2
 800c7d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7da:	689b      	ldr	r3, [r3, #8]
 800c7dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	4a15      	ldr	r2, [pc, #84]	@ (800c838 <PCD_EP_OutSetupPacket_int+0x88>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d90e      	bls.n	800c804 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800c7e6:	68bb      	ldr	r3, [r7, #8]
 800c7e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d009      	beq.n	800c804 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	015a      	lsls	r2, r3, #5
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c802:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800c804:	6878      	ldr	r0, [r7, #4]
 800c806:	f00a fceb 	bl	80171e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	4a0a      	ldr	r2, [pc, #40]	@ (800c838 <PCD_EP_OutSetupPacket_int+0x88>)
 800c80e:	4293      	cmp	r3, r2
 800c810:	d90c      	bls.n	800c82c <PCD_EP_OutSetupPacket_int+0x7c>
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	799b      	ldrb	r3, [r3, #6]
 800c816:	2b01      	cmp	r3, #1
 800c818:	d108      	bne.n	800c82c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6818      	ldr	r0, [r3, #0]
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c824:	461a      	mov	r2, r3
 800c826:	2101      	movs	r1, #1
 800c828:	f005 f8ae 	bl	8011988 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800c82c:	2300      	movs	r3, #0
}
 800c82e:	4618      	mov	r0, r3
 800c830:	3718      	adds	r7, #24
 800c832:	46bd      	mov	sp, r7
 800c834:	bd80      	pop	{r7, pc}
 800c836:	bf00      	nop
 800c838:	4f54300a 	.word	0x4f54300a

0800c83c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b085      	sub	sp, #20
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
 800c844:	460b      	mov	r3, r1
 800c846:	70fb      	strb	r3, [r7, #3]
 800c848:	4613      	mov	r3, r2
 800c84a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c852:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800c854:	78fb      	ldrb	r3, [r7, #3]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d107      	bne.n	800c86a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800c85a:	883b      	ldrh	r3, [r7, #0]
 800c85c:	0419      	lsls	r1, r3, #16
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	68ba      	ldr	r2, [r7, #8]
 800c864:	430a      	orrs	r2, r1
 800c866:	629a      	str	r2, [r3, #40]	@ 0x28
 800c868:	e028      	b.n	800c8bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c870:	0c1b      	lsrs	r3, r3, #16
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	4413      	add	r3, r2
 800c876:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c878:	2300      	movs	r3, #0
 800c87a:	73fb      	strb	r3, [r7, #15]
 800c87c:	e00d      	b.n	800c89a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681a      	ldr	r2, [r3, #0]
 800c882:	7bfb      	ldrb	r3, [r7, #15]
 800c884:	3340      	adds	r3, #64	@ 0x40
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4413      	add	r3, r2
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	0c1b      	lsrs	r3, r3, #16
 800c88e:	68ba      	ldr	r2, [r7, #8]
 800c890:	4413      	add	r3, r2
 800c892:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c894:	7bfb      	ldrb	r3, [r7, #15]
 800c896:	3301      	adds	r3, #1
 800c898:	73fb      	strb	r3, [r7, #15]
 800c89a:	7bfa      	ldrb	r2, [r7, #15]
 800c89c:	78fb      	ldrb	r3, [r7, #3]
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	429a      	cmp	r2, r3
 800c8a2:	d3ec      	bcc.n	800c87e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c8a4:	883b      	ldrh	r3, [r7, #0]
 800c8a6:	0418      	lsls	r0, r3, #16
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	6819      	ldr	r1, [r3, #0]
 800c8ac:	78fb      	ldrb	r3, [r7, #3]
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	4302      	orrs	r2, r0
 800c8b4:	3340      	adds	r3, #64	@ 0x40
 800c8b6:	009b      	lsls	r3, r3, #2
 800c8b8:	440b      	add	r3, r1
 800c8ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c8bc:	2300      	movs	r3, #0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3714      	adds	r7, #20
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c8:	4770      	bx	lr

0800c8ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c8ca:	b480      	push	{r7}
 800c8cc:	b083      	sub	sp, #12
 800c8ce:	af00      	add	r7, sp, #0
 800c8d0:	6078      	str	r0, [r7, #4]
 800c8d2:	460b      	mov	r3, r1
 800c8d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	887a      	ldrh	r2, [r7, #2]
 800c8dc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800c8de:	2300      	movs	r3, #0
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	370c      	adds	r7, #12
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ea:	4770      	bx	lr

0800c8ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c8ec:	b480      	push	{r7}
 800c8ee:	b083      	sub	sp, #12
 800c8f0:	af00      	add	r7, sp, #0
 800c8f2:	6078      	str	r0, [r7, #4]
 800c8f4:	460b      	mov	r3, r1
 800c8f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c8f8:	bf00      	nop
 800c8fa:	370c      	adds	r7, #12
 800c8fc:	46bd      	mov	sp, r7
 800c8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c902:	4770      	bx	lr

0800c904 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b086      	sub	sp, #24
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d101      	bne.n	800c916 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c912:	2301      	movs	r3, #1
 800c914:	e267      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f003 0301 	and.w	r3, r3, #1
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d075      	beq.n	800ca0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c922:	4b88      	ldr	r3, [pc, #544]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c924:	689b      	ldr	r3, [r3, #8]
 800c926:	f003 030c 	and.w	r3, r3, #12
 800c92a:	2b04      	cmp	r3, #4
 800c92c:	d00c      	beq.n	800c948 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c92e:	4b85      	ldr	r3, [pc, #532]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c930:	689b      	ldr	r3, [r3, #8]
 800c932:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800c936:	2b08      	cmp	r3, #8
 800c938:	d112      	bne.n	800c960 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c93a:	4b82      	ldr	r3, [pc, #520]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c93c:	685b      	ldr	r3, [r3, #4]
 800c93e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c942:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c946:	d10b      	bne.n	800c960 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c948:	4b7e      	ldr	r3, [pc, #504]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c950:	2b00      	cmp	r3, #0
 800c952:	d05b      	beq.n	800ca0c <HAL_RCC_OscConfig+0x108>
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d157      	bne.n	800ca0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c95c:	2301      	movs	r3, #1
 800c95e:	e242      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	685b      	ldr	r3, [r3, #4]
 800c964:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c968:	d106      	bne.n	800c978 <HAL_RCC_OscConfig+0x74>
 800c96a:	4b76      	ldr	r3, [pc, #472]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a75      	ldr	r2, [pc, #468]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c970:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c974:	6013      	str	r3, [r2, #0]
 800c976:	e01d      	b.n	800c9b4 <HAL_RCC_OscConfig+0xb0>
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	685b      	ldr	r3, [r3, #4]
 800c97c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800c980:	d10c      	bne.n	800c99c <HAL_RCC_OscConfig+0x98>
 800c982:	4b70      	ldr	r3, [pc, #448]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a6f      	ldr	r2, [pc, #444]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c988:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c98c:	6013      	str	r3, [r2, #0]
 800c98e:	4b6d      	ldr	r3, [pc, #436]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	4a6c      	ldr	r2, [pc, #432]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c994:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c998:	6013      	str	r3, [r2, #0]
 800c99a:	e00b      	b.n	800c9b4 <HAL_RCC_OscConfig+0xb0>
 800c99c:	4b69      	ldr	r3, [pc, #420]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	4a68      	ldr	r2, [pc, #416]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c9a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c9a6:	6013      	str	r3, [r2, #0]
 800c9a8:	4b66      	ldr	r3, [pc, #408]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	4a65      	ldr	r2, [pc, #404]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c9ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c9b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	685b      	ldr	r3, [r3, #4]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d013      	beq.n	800c9e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9bc:	f7fd fcfa 	bl	800a3b4 <HAL_GetTick>
 800c9c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9c2:	e008      	b.n	800c9d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9c4:	f7fd fcf6 	bl	800a3b4 <HAL_GetTick>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	1ad3      	subs	r3, r2, r3
 800c9ce:	2b64      	cmp	r3, #100	@ 0x64
 800c9d0:	d901      	bls.n	800c9d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e207      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c9d6:	4b5b      	ldr	r3, [pc, #364]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d0f0      	beq.n	800c9c4 <HAL_RCC_OscConfig+0xc0>
 800c9e2:	e014      	b.n	800ca0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9e4:	f7fd fce6 	bl	800a3b4 <HAL_GetTick>
 800c9e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c9ea:	e008      	b.n	800c9fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c9ec:	f7fd fce2 	bl	800a3b4 <HAL_GetTick>
 800c9f0:	4602      	mov	r2, r0
 800c9f2:	693b      	ldr	r3, [r7, #16]
 800c9f4:	1ad3      	subs	r3, r2, r3
 800c9f6:	2b64      	cmp	r3, #100	@ 0x64
 800c9f8:	d901      	bls.n	800c9fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	e1f3      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c9fe:	4b51      	ldr	r3, [pc, #324]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d1f0      	bne.n	800c9ec <HAL_RCC_OscConfig+0xe8>
 800ca0a:	e000      	b.n	800ca0e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ca0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f003 0302 	and.w	r3, r3, #2
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d063      	beq.n	800cae2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ca1a:	4b4a      	ldr	r3, [pc, #296]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800ca1c:	689b      	ldr	r3, [r3, #8]
 800ca1e:	f003 030c 	and.w	r3, r3, #12
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00b      	beq.n	800ca3e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca26:	4b47      	ldr	r3, [pc, #284]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ca2e:	2b08      	cmp	r3, #8
 800ca30:	d11c      	bne.n	800ca6c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ca32:	4b44      	ldr	r3, [pc, #272]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800ca34:	685b      	ldr	r3, [r3, #4]
 800ca36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d116      	bne.n	800ca6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca3e:	4b41      	ldr	r3, [pc, #260]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f003 0302 	and.w	r3, r3, #2
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d005      	beq.n	800ca56 <HAL_RCC_OscConfig+0x152>
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d001      	beq.n	800ca56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ca52:	2301      	movs	r3, #1
 800ca54:	e1c7      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ca56:	4b3b      	ldr	r3, [pc, #236]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	691b      	ldr	r3, [r3, #16]
 800ca62:	00db      	lsls	r3, r3, #3
 800ca64:	4937      	ldr	r1, [pc, #220]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800ca66:	4313      	orrs	r3, r2
 800ca68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ca6a:	e03a      	b.n	800cae2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	68db      	ldr	r3, [r3, #12]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d020      	beq.n	800cab6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ca74:	4b34      	ldr	r3, [pc, #208]	@ (800cb48 <HAL_RCC_OscConfig+0x244>)
 800ca76:	2201      	movs	r2, #1
 800ca78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca7a:	f7fd fc9b 	bl	800a3b4 <HAL_GetTick>
 800ca7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca80:	e008      	b.n	800ca94 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ca82:	f7fd fc97 	bl	800a3b4 <HAL_GetTick>
 800ca86:	4602      	mov	r2, r0
 800ca88:	693b      	ldr	r3, [r7, #16]
 800ca8a:	1ad3      	subs	r3, r2, r3
 800ca8c:	2b02      	cmp	r3, #2
 800ca8e:	d901      	bls.n	800ca94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ca90:	2303      	movs	r3, #3
 800ca92:	e1a8      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ca94:	4b2b      	ldr	r3, [pc, #172]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	f003 0302 	and.w	r3, r3, #2
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d0f0      	beq.n	800ca82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800caa0:	4b28      	ldr	r3, [pc, #160]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	691b      	ldr	r3, [r3, #16]
 800caac:	00db      	lsls	r3, r3, #3
 800caae:	4925      	ldr	r1, [pc, #148]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800cab0:	4313      	orrs	r3, r2
 800cab2:	600b      	str	r3, [r1, #0]
 800cab4:	e015      	b.n	800cae2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cab6:	4b24      	ldr	r3, [pc, #144]	@ (800cb48 <HAL_RCC_OscConfig+0x244>)
 800cab8:	2200      	movs	r2, #0
 800caba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cabc:	f7fd fc7a 	bl	800a3b4 <HAL_GetTick>
 800cac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cac2:	e008      	b.n	800cad6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800cac4:	f7fd fc76 	bl	800a3b4 <HAL_GetTick>
 800cac8:	4602      	mov	r2, r0
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	2b02      	cmp	r3, #2
 800cad0:	d901      	bls.n	800cad6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cad2:	2303      	movs	r3, #3
 800cad4:	e187      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cad6:	4b1b      	ldr	r3, [pc, #108]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	f003 0302 	and.w	r3, r3, #2
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d1f0      	bne.n	800cac4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	f003 0308 	and.w	r3, r3, #8
 800caea:	2b00      	cmp	r3, #0
 800caec:	d036      	beq.n	800cb5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	695b      	ldr	r3, [r3, #20]
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d016      	beq.n	800cb24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800caf6:	4b15      	ldr	r3, [pc, #84]	@ (800cb4c <HAL_RCC_OscConfig+0x248>)
 800caf8:	2201      	movs	r2, #1
 800cafa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cafc:	f7fd fc5a 	bl	800a3b4 <HAL_GetTick>
 800cb00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb02:	e008      	b.n	800cb16 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb04:	f7fd fc56 	bl	800a3b4 <HAL_GetTick>
 800cb08:	4602      	mov	r2, r0
 800cb0a:	693b      	ldr	r3, [r7, #16]
 800cb0c:	1ad3      	subs	r3, r2, r3
 800cb0e:	2b02      	cmp	r3, #2
 800cb10:	d901      	bls.n	800cb16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cb12:	2303      	movs	r3, #3
 800cb14:	e167      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cb16:	4b0b      	ldr	r3, [pc, #44]	@ (800cb44 <HAL_RCC_OscConfig+0x240>)
 800cb18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb1a:	f003 0302 	and.w	r3, r3, #2
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d0f0      	beq.n	800cb04 <HAL_RCC_OscConfig+0x200>
 800cb22:	e01b      	b.n	800cb5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cb24:	4b09      	ldr	r3, [pc, #36]	@ (800cb4c <HAL_RCC_OscConfig+0x248>)
 800cb26:	2200      	movs	r2, #0
 800cb28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cb2a:	f7fd fc43 	bl	800a3b4 <HAL_GetTick>
 800cb2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb30:	e00e      	b.n	800cb50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cb32:	f7fd fc3f 	bl	800a3b4 <HAL_GetTick>
 800cb36:	4602      	mov	r2, r0
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	1ad3      	subs	r3, r2, r3
 800cb3c:	2b02      	cmp	r3, #2
 800cb3e:	d907      	bls.n	800cb50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cb40:	2303      	movs	r3, #3
 800cb42:	e150      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
 800cb44:	40023800 	.word	0x40023800
 800cb48:	42470000 	.word	0x42470000
 800cb4c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cb50:	4b88      	ldr	r3, [pc, #544]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cb52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cb54:	f003 0302 	and.w	r3, r3, #2
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d1ea      	bne.n	800cb32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f003 0304 	and.w	r3, r3, #4
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	f000 8097 	beq.w	800cc98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cb6e:	4b81      	ldr	r3, [pc, #516]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cb70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cb76:	2b00      	cmp	r3, #0
 800cb78:	d10f      	bne.n	800cb9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	60bb      	str	r3, [r7, #8]
 800cb7e:	4b7d      	ldr	r3, [pc, #500]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cb80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb82:	4a7c      	ldr	r2, [pc, #496]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cb84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cb88:	6413      	str	r3, [r2, #64]	@ 0x40
 800cb8a:	4b7a      	ldr	r3, [pc, #488]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cb8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cb92:	60bb      	str	r3, [r7, #8]
 800cb94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cb96:	2301      	movs	r3, #1
 800cb98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cb9a:	4b77      	ldr	r3, [pc, #476]	@ (800cd78 <HAL_RCC_OscConfig+0x474>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d118      	bne.n	800cbd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cba6:	4b74      	ldr	r3, [pc, #464]	@ (800cd78 <HAL_RCC_OscConfig+0x474>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a73      	ldr	r2, [pc, #460]	@ (800cd78 <HAL_RCC_OscConfig+0x474>)
 800cbac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cbb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cbb2:	f7fd fbff 	bl	800a3b4 <HAL_GetTick>
 800cbb6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbb8:	e008      	b.n	800cbcc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cbba:	f7fd fbfb 	bl	800a3b4 <HAL_GetTick>
 800cbbe:	4602      	mov	r2, r0
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	1ad3      	subs	r3, r2, r3
 800cbc4:	2b02      	cmp	r3, #2
 800cbc6:	d901      	bls.n	800cbcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800cbc8:	2303      	movs	r3, #3
 800cbca:	e10c      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cbcc:	4b6a      	ldr	r3, [pc, #424]	@ (800cd78 <HAL_RCC_OscConfig+0x474>)
 800cbce:	681b      	ldr	r3, [r3, #0]
 800cbd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d0f0      	beq.n	800cbba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	689b      	ldr	r3, [r3, #8]
 800cbdc:	2b01      	cmp	r3, #1
 800cbde:	d106      	bne.n	800cbee <HAL_RCC_OscConfig+0x2ea>
 800cbe0:	4b64      	ldr	r3, [pc, #400]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cbe2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbe4:	4a63      	ldr	r2, [pc, #396]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cbe6:	f043 0301 	orr.w	r3, r3, #1
 800cbea:	6713      	str	r3, [r2, #112]	@ 0x70
 800cbec:	e01c      	b.n	800cc28 <HAL_RCC_OscConfig+0x324>
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	689b      	ldr	r3, [r3, #8]
 800cbf2:	2b05      	cmp	r3, #5
 800cbf4:	d10c      	bne.n	800cc10 <HAL_RCC_OscConfig+0x30c>
 800cbf6:	4b5f      	ldr	r3, [pc, #380]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cbf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cbfa:	4a5e      	ldr	r2, [pc, #376]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cbfc:	f043 0304 	orr.w	r3, r3, #4
 800cc00:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc02:	4b5c      	ldr	r3, [pc, #368]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cc04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc06:	4a5b      	ldr	r2, [pc, #364]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cc08:	f043 0301 	orr.w	r3, r3, #1
 800cc0c:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc0e:	e00b      	b.n	800cc28 <HAL_RCC_OscConfig+0x324>
 800cc10:	4b58      	ldr	r3, [pc, #352]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cc12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc14:	4a57      	ldr	r2, [pc, #348]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cc16:	f023 0301 	bic.w	r3, r3, #1
 800cc1a:	6713      	str	r3, [r2, #112]	@ 0x70
 800cc1c:	4b55      	ldr	r3, [pc, #340]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cc1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc20:	4a54      	ldr	r2, [pc, #336]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cc22:	f023 0304 	bic.w	r3, r3, #4
 800cc26:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	689b      	ldr	r3, [r3, #8]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d015      	beq.n	800cc5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cc30:	f7fd fbc0 	bl	800a3b4 <HAL_GetTick>
 800cc34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc36:	e00a      	b.n	800cc4e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc38:	f7fd fbbc 	bl	800a3b4 <HAL_GetTick>
 800cc3c:	4602      	mov	r2, r0
 800cc3e:	693b      	ldr	r3, [r7, #16]
 800cc40:	1ad3      	subs	r3, r2, r3
 800cc42:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d901      	bls.n	800cc4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800cc4a:	2303      	movs	r3, #3
 800cc4c:	e0cb      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800cc4e:	4b49      	ldr	r3, [pc, #292]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cc50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc52:	f003 0302 	and.w	r3, r3, #2
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d0ee      	beq.n	800cc38 <HAL_RCC_OscConfig+0x334>
 800cc5a:	e014      	b.n	800cc86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cc5c:	f7fd fbaa 	bl	800a3b4 <HAL_GetTick>
 800cc60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc62:	e00a      	b.n	800cc7a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800cc64:	f7fd fba6 	bl	800a3b4 <HAL_GetTick>
 800cc68:	4602      	mov	r2, r0
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	1ad3      	subs	r3, r2, r3
 800cc6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cc72:	4293      	cmp	r3, r2
 800cc74:	d901      	bls.n	800cc7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800cc76:	2303      	movs	r3, #3
 800cc78:	e0b5      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cc7a:	4b3e      	ldr	r3, [pc, #248]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cc7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cc7e:	f003 0302 	and.w	r3, r3, #2
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d1ee      	bne.n	800cc64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800cc86:	7dfb      	ldrb	r3, [r7, #23]
 800cc88:	2b01      	cmp	r3, #1
 800cc8a:	d105      	bne.n	800cc98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cc8c:	4b39      	ldr	r3, [pc, #228]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cc8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cc90:	4a38      	ldr	r2, [pc, #224]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cc92:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800cc96:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	699b      	ldr	r3, [r3, #24]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	f000 80a1 	beq.w	800cde4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cca2:	4b34      	ldr	r3, [pc, #208]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cca4:	689b      	ldr	r3, [r3, #8]
 800cca6:	f003 030c 	and.w	r3, r3, #12
 800ccaa:	2b08      	cmp	r3, #8
 800ccac:	d05c      	beq.n	800cd68 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	699b      	ldr	r3, [r3, #24]
 800ccb2:	2b02      	cmp	r3, #2
 800ccb4:	d141      	bne.n	800cd3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ccb6:	4b31      	ldr	r3, [pc, #196]	@ (800cd7c <HAL_RCC_OscConfig+0x478>)
 800ccb8:	2200      	movs	r2, #0
 800ccba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ccbc:	f7fd fb7a 	bl	800a3b4 <HAL_GetTick>
 800ccc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccc2:	e008      	b.n	800ccd6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ccc4:	f7fd fb76 	bl	800a3b4 <HAL_GetTick>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	1ad3      	subs	r3, r2, r3
 800ccce:	2b02      	cmp	r3, #2
 800ccd0:	d901      	bls.n	800ccd6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800ccd2:	2303      	movs	r3, #3
 800ccd4:	e087      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800ccd6:	4b27      	ldr	r3, [pc, #156]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d1f0      	bne.n	800ccc4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	69da      	ldr	r2, [r3, #28]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6a1b      	ldr	r3, [r3, #32]
 800ccea:	431a      	orrs	r2, r3
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ccf0:	019b      	lsls	r3, r3, #6
 800ccf2:	431a      	orrs	r2, r3
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ccf8:	085b      	lsrs	r3, r3, #1
 800ccfa:	3b01      	subs	r3, #1
 800ccfc:	041b      	lsls	r3, r3, #16
 800ccfe:	431a      	orrs	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd04:	061b      	lsls	r3, r3, #24
 800cd06:	491b      	ldr	r1, [pc, #108]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cd0c:	4b1b      	ldr	r3, [pc, #108]	@ (800cd7c <HAL_RCC_OscConfig+0x478>)
 800cd0e:	2201      	movs	r2, #1
 800cd10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd12:	f7fd fb4f 	bl	800a3b4 <HAL_GetTick>
 800cd16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd18:	e008      	b.n	800cd2c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd1a:	f7fd fb4b 	bl	800a3b4 <HAL_GetTick>
 800cd1e:	4602      	mov	r2, r0
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	1ad3      	subs	r3, r2, r3
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	d901      	bls.n	800cd2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800cd28:	2303      	movs	r3, #3
 800cd2a:	e05c      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cd2c:	4b11      	ldr	r3, [pc, #68]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d0f0      	beq.n	800cd1a <HAL_RCC_OscConfig+0x416>
 800cd38:	e054      	b.n	800cde4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cd3a:	4b10      	ldr	r3, [pc, #64]	@ (800cd7c <HAL_RCC_OscConfig+0x478>)
 800cd3c:	2200      	movs	r2, #0
 800cd3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cd40:	f7fd fb38 	bl	800a3b4 <HAL_GetTick>
 800cd44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd46:	e008      	b.n	800cd5a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cd48:	f7fd fb34 	bl	800a3b4 <HAL_GetTick>
 800cd4c:	4602      	mov	r2, r0
 800cd4e:	693b      	ldr	r3, [r7, #16]
 800cd50:	1ad3      	subs	r3, r2, r3
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d901      	bls.n	800cd5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800cd56:	2303      	movs	r3, #3
 800cd58:	e045      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cd5a:	4b06      	ldr	r3, [pc, #24]	@ (800cd74 <HAL_RCC_OscConfig+0x470>)
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d1f0      	bne.n	800cd48 <HAL_RCC_OscConfig+0x444>
 800cd66:	e03d      	b.n	800cde4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	699b      	ldr	r3, [r3, #24]
 800cd6c:	2b01      	cmp	r3, #1
 800cd6e:	d107      	bne.n	800cd80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800cd70:	2301      	movs	r3, #1
 800cd72:	e038      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
 800cd74:	40023800 	.word	0x40023800
 800cd78:	40007000 	.word	0x40007000
 800cd7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cd80:	4b1b      	ldr	r3, [pc, #108]	@ (800cdf0 <HAL_RCC_OscConfig+0x4ec>)
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	699b      	ldr	r3, [r3, #24]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d028      	beq.n	800cde0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d121      	bne.n	800cde0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cda6:	429a      	cmp	r2, r3
 800cda8:	d11a      	bne.n	800cde0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800cdb0:	4013      	ands	r3, r2
 800cdb2:	687a      	ldr	r2, [r7, #4]
 800cdb4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800cdb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cdb8:	4293      	cmp	r3, r2
 800cdba:	d111      	bne.n	800cde0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdc6:	085b      	lsrs	r3, r3, #1
 800cdc8:	3b01      	subs	r3, #1
 800cdca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d107      	bne.n	800cde0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d001      	beq.n	800cde4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800cde0:	2301      	movs	r3, #1
 800cde2:	e000      	b.n	800cde6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800cde4:	2300      	movs	r3, #0
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3718      	adds	r7, #24
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	40023800 	.word	0x40023800

0800cdf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cdf4:	b580      	push	{r7, lr}
 800cdf6:	b084      	sub	sp, #16
 800cdf8:	af00      	add	r7, sp, #0
 800cdfa:	6078      	str	r0, [r7, #4]
 800cdfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d101      	bne.n	800ce08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ce04:	2301      	movs	r3, #1
 800ce06:	e0cc      	b.n	800cfa2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ce08:	4b68      	ldr	r3, [pc, #416]	@ (800cfac <HAL_RCC_ClockConfig+0x1b8>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f003 0307 	and.w	r3, r3, #7
 800ce10:	683a      	ldr	r2, [r7, #0]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d90c      	bls.n	800ce30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ce16:	4b65      	ldr	r3, [pc, #404]	@ (800cfac <HAL_RCC_ClockConfig+0x1b8>)
 800ce18:	683a      	ldr	r2, [r7, #0]
 800ce1a:	b2d2      	uxtb	r2, r2
 800ce1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ce1e:	4b63      	ldr	r3, [pc, #396]	@ (800cfac <HAL_RCC_ClockConfig+0x1b8>)
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	f003 0307 	and.w	r3, r3, #7
 800ce26:	683a      	ldr	r2, [r7, #0]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d001      	beq.n	800ce30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e0b8      	b.n	800cfa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	f003 0302 	and.w	r3, r3, #2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d020      	beq.n	800ce7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f003 0304 	and.w	r3, r3, #4
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d005      	beq.n	800ce54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ce48:	4b59      	ldr	r3, [pc, #356]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce4a:	689b      	ldr	r3, [r3, #8]
 800ce4c:	4a58      	ldr	r2, [pc, #352]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800ce52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	f003 0308 	and.w	r3, r3, #8
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d005      	beq.n	800ce6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ce60:	4b53      	ldr	r3, [pc, #332]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce62:	689b      	ldr	r3, [r3, #8]
 800ce64:	4a52      	ldr	r2, [pc, #328]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800ce6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ce6c:	4b50      	ldr	r3, [pc, #320]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce6e:	689b      	ldr	r3, [r3, #8]
 800ce70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	689b      	ldr	r3, [r3, #8]
 800ce78:	494d      	ldr	r1, [pc, #308]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce7a:	4313      	orrs	r3, r2
 800ce7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	f003 0301 	and.w	r3, r3, #1
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	d044      	beq.n	800cf14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	685b      	ldr	r3, [r3, #4]
 800ce8e:	2b01      	cmp	r3, #1
 800ce90:	d107      	bne.n	800cea2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ce92:	4b47      	ldr	r3, [pc, #284]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d119      	bne.n	800ced2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	e07f      	b.n	800cfa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	685b      	ldr	r3, [r3, #4]
 800cea6:	2b02      	cmp	r3, #2
 800cea8:	d003      	beq.n	800ceb2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800ceae:	2b03      	cmp	r3, #3
 800ceb0:	d107      	bne.n	800cec2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800ceb2:	4b3f      	ldr	r3, [pc, #252]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d109      	bne.n	800ced2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cebe:	2301      	movs	r3, #1
 800cec0:	e06f      	b.n	800cfa2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cec2:	4b3b      	ldr	r3, [pc, #236]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f003 0302 	and.w	r3, r3, #2
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d101      	bne.n	800ced2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800cece:	2301      	movs	r3, #1
 800ced0:	e067      	b.n	800cfa2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800ced2:	4b37      	ldr	r3, [pc, #220]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800ced4:	689b      	ldr	r3, [r3, #8]
 800ced6:	f023 0203 	bic.w	r2, r3, #3
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	685b      	ldr	r3, [r3, #4]
 800cede:	4934      	ldr	r1, [pc, #208]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800cee0:	4313      	orrs	r3, r2
 800cee2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cee4:	f7fd fa66 	bl	800a3b4 <HAL_GetTick>
 800cee8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ceea:	e00a      	b.n	800cf02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ceec:	f7fd fa62 	bl	800a3b4 <HAL_GetTick>
 800cef0:	4602      	mov	r2, r0
 800cef2:	68fb      	ldr	r3, [r7, #12]
 800cef4:	1ad3      	subs	r3, r2, r3
 800cef6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d901      	bls.n	800cf02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800cefe:	2303      	movs	r3, #3
 800cf00:	e04f      	b.n	800cfa2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cf02:	4b2b      	ldr	r3, [pc, #172]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf04:	689b      	ldr	r3, [r3, #8]
 800cf06:	f003 020c 	and.w	r2, r3, #12
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	685b      	ldr	r3, [r3, #4]
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	429a      	cmp	r2, r3
 800cf12:	d1eb      	bne.n	800ceec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cf14:	4b25      	ldr	r3, [pc, #148]	@ (800cfac <HAL_RCC_ClockConfig+0x1b8>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	f003 0307 	and.w	r3, r3, #7
 800cf1c:	683a      	ldr	r2, [r7, #0]
 800cf1e:	429a      	cmp	r2, r3
 800cf20:	d20c      	bcs.n	800cf3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cf22:	4b22      	ldr	r3, [pc, #136]	@ (800cfac <HAL_RCC_ClockConfig+0x1b8>)
 800cf24:	683a      	ldr	r2, [r7, #0]
 800cf26:	b2d2      	uxtb	r2, r2
 800cf28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cf2a:	4b20      	ldr	r3, [pc, #128]	@ (800cfac <HAL_RCC_ClockConfig+0x1b8>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	f003 0307 	and.w	r3, r3, #7
 800cf32:	683a      	ldr	r2, [r7, #0]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	d001      	beq.n	800cf3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	e032      	b.n	800cfa2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	f003 0304 	and.w	r3, r3, #4
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d008      	beq.n	800cf5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cf48:	4b19      	ldr	r3, [pc, #100]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf4a:	689b      	ldr	r3, [r3, #8]
 800cf4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	4916      	ldr	r1, [pc, #88]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf56:	4313      	orrs	r3, r2
 800cf58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f003 0308 	and.w	r3, r3, #8
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d009      	beq.n	800cf7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800cf66:	4b12      	ldr	r3, [pc, #72]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf68:	689b      	ldr	r3, [r3, #8]
 800cf6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	691b      	ldr	r3, [r3, #16]
 800cf72:	00db      	lsls	r3, r3, #3
 800cf74:	490e      	ldr	r1, [pc, #56]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf76:	4313      	orrs	r3, r2
 800cf78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800cf7a:	f000 f821 	bl	800cfc0 <HAL_RCC_GetSysClockFreq>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	4b0b      	ldr	r3, [pc, #44]	@ (800cfb0 <HAL_RCC_ClockConfig+0x1bc>)
 800cf82:	689b      	ldr	r3, [r3, #8]
 800cf84:	091b      	lsrs	r3, r3, #4
 800cf86:	f003 030f 	and.w	r3, r3, #15
 800cf8a:	490a      	ldr	r1, [pc, #40]	@ (800cfb4 <HAL_RCC_ClockConfig+0x1c0>)
 800cf8c:	5ccb      	ldrb	r3, [r1, r3]
 800cf8e:	fa22 f303 	lsr.w	r3, r2, r3
 800cf92:	4a09      	ldr	r2, [pc, #36]	@ (800cfb8 <HAL_RCC_ClockConfig+0x1c4>)
 800cf94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800cf96:	4b09      	ldr	r3, [pc, #36]	@ (800cfbc <HAL_RCC_ClockConfig+0x1c8>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f7fc fa3e 	bl	800941c <HAL_InitTick>

  return HAL_OK;
 800cfa0:	2300      	movs	r3, #0
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	40023c00 	.word	0x40023c00
 800cfb0:	40023800 	.word	0x40023800
 800cfb4:	08020228 	.word	0x08020228
 800cfb8:	20000054 	.word	0x20000054
 800cfbc:	20000058 	.word	0x20000058

0800cfc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cfc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cfc4:	b094      	sub	sp, #80	@ 0x50
 800cfc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800cfd0:	2300      	movs	r3, #0
 800cfd2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cfd8:	4b79      	ldr	r3, [pc, #484]	@ (800d1c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800cfda:	689b      	ldr	r3, [r3, #8]
 800cfdc:	f003 030c 	and.w	r3, r3, #12
 800cfe0:	2b08      	cmp	r3, #8
 800cfe2:	d00d      	beq.n	800d000 <HAL_RCC_GetSysClockFreq+0x40>
 800cfe4:	2b08      	cmp	r3, #8
 800cfe6:	f200 80e1 	bhi.w	800d1ac <HAL_RCC_GetSysClockFreq+0x1ec>
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d002      	beq.n	800cff4 <HAL_RCC_GetSysClockFreq+0x34>
 800cfee:	2b04      	cmp	r3, #4
 800cff0:	d003      	beq.n	800cffa <HAL_RCC_GetSysClockFreq+0x3a>
 800cff2:	e0db      	b.n	800d1ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800cff4:	4b73      	ldr	r3, [pc, #460]	@ (800d1c4 <HAL_RCC_GetSysClockFreq+0x204>)
 800cff6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800cff8:	e0db      	b.n	800d1b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800cffa:	4b73      	ldr	r3, [pc, #460]	@ (800d1c8 <HAL_RCC_GetSysClockFreq+0x208>)
 800cffc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800cffe:	e0d8      	b.n	800d1b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d000:	4b6f      	ldr	r3, [pc, #444]	@ (800d1c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d002:	685b      	ldr	r3, [r3, #4]
 800d004:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d008:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d00a:	4b6d      	ldr	r3, [pc, #436]	@ (800d1c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d012:	2b00      	cmp	r3, #0
 800d014:	d063      	beq.n	800d0de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d016:	4b6a      	ldr	r3, [pc, #424]	@ (800d1c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d018:	685b      	ldr	r3, [r3, #4]
 800d01a:	099b      	lsrs	r3, r3, #6
 800d01c:	2200      	movs	r2, #0
 800d01e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d020:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d028:	633b      	str	r3, [r7, #48]	@ 0x30
 800d02a:	2300      	movs	r3, #0
 800d02c:	637b      	str	r3, [r7, #52]	@ 0x34
 800d02e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800d032:	4622      	mov	r2, r4
 800d034:	462b      	mov	r3, r5
 800d036:	f04f 0000 	mov.w	r0, #0
 800d03a:	f04f 0100 	mov.w	r1, #0
 800d03e:	0159      	lsls	r1, r3, #5
 800d040:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d044:	0150      	lsls	r0, r2, #5
 800d046:	4602      	mov	r2, r0
 800d048:	460b      	mov	r3, r1
 800d04a:	4621      	mov	r1, r4
 800d04c:	1a51      	subs	r1, r2, r1
 800d04e:	6139      	str	r1, [r7, #16]
 800d050:	4629      	mov	r1, r5
 800d052:	eb63 0301 	sbc.w	r3, r3, r1
 800d056:	617b      	str	r3, [r7, #20]
 800d058:	f04f 0200 	mov.w	r2, #0
 800d05c:	f04f 0300 	mov.w	r3, #0
 800d060:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d064:	4659      	mov	r1, fp
 800d066:	018b      	lsls	r3, r1, #6
 800d068:	4651      	mov	r1, sl
 800d06a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d06e:	4651      	mov	r1, sl
 800d070:	018a      	lsls	r2, r1, #6
 800d072:	4651      	mov	r1, sl
 800d074:	ebb2 0801 	subs.w	r8, r2, r1
 800d078:	4659      	mov	r1, fp
 800d07a:	eb63 0901 	sbc.w	r9, r3, r1
 800d07e:	f04f 0200 	mov.w	r2, #0
 800d082:	f04f 0300 	mov.w	r3, #0
 800d086:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d08a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d08e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d092:	4690      	mov	r8, r2
 800d094:	4699      	mov	r9, r3
 800d096:	4623      	mov	r3, r4
 800d098:	eb18 0303 	adds.w	r3, r8, r3
 800d09c:	60bb      	str	r3, [r7, #8]
 800d09e:	462b      	mov	r3, r5
 800d0a0:	eb49 0303 	adc.w	r3, r9, r3
 800d0a4:	60fb      	str	r3, [r7, #12]
 800d0a6:	f04f 0200 	mov.w	r2, #0
 800d0aa:	f04f 0300 	mov.w	r3, #0
 800d0ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d0b2:	4629      	mov	r1, r5
 800d0b4:	024b      	lsls	r3, r1, #9
 800d0b6:	4621      	mov	r1, r4
 800d0b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d0bc:	4621      	mov	r1, r4
 800d0be:	024a      	lsls	r2, r1, #9
 800d0c0:	4610      	mov	r0, r2
 800d0c2:	4619      	mov	r1, r3
 800d0c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d0ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d0cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d0d0:	f7f3 fdda 	bl	8000c88 <__aeabi_uldivmod>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	4613      	mov	r3, r2
 800d0da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d0dc:	e058      	b.n	800d190 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d0de:	4b38      	ldr	r3, [pc, #224]	@ (800d1c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d0e0:	685b      	ldr	r3, [r3, #4]
 800d0e2:	099b      	lsrs	r3, r3, #6
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	4618      	mov	r0, r3
 800d0e8:	4611      	mov	r1, r2
 800d0ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d0ee:	623b      	str	r3, [r7, #32]
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	627b      	str	r3, [r7, #36]	@ 0x24
 800d0f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d0f8:	4642      	mov	r2, r8
 800d0fa:	464b      	mov	r3, r9
 800d0fc:	f04f 0000 	mov.w	r0, #0
 800d100:	f04f 0100 	mov.w	r1, #0
 800d104:	0159      	lsls	r1, r3, #5
 800d106:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d10a:	0150      	lsls	r0, r2, #5
 800d10c:	4602      	mov	r2, r0
 800d10e:	460b      	mov	r3, r1
 800d110:	4641      	mov	r1, r8
 800d112:	ebb2 0a01 	subs.w	sl, r2, r1
 800d116:	4649      	mov	r1, r9
 800d118:	eb63 0b01 	sbc.w	fp, r3, r1
 800d11c:	f04f 0200 	mov.w	r2, #0
 800d120:	f04f 0300 	mov.w	r3, #0
 800d124:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d128:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d12c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d130:	ebb2 040a 	subs.w	r4, r2, sl
 800d134:	eb63 050b 	sbc.w	r5, r3, fp
 800d138:	f04f 0200 	mov.w	r2, #0
 800d13c:	f04f 0300 	mov.w	r3, #0
 800d140:	00eb      	lsls	r3, r5, #3
 800d142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d146:	00e2      	lsls	r2, r4, #3
 800d148:	4614      	mov	r4, r2
 800d14a:	461d      	mov	r5, r3
 800d14c:	4643      	mov	r3, r8
 800d14e:	18e3      	adds	r3, r4, r3
 800d150:	603b      	str	r3, [r7, #0]
 800d152:	464b      	mov	r3, r9
 800d154:	eb45 0303 	adc.w	r3, r5, r3
 800d158:	607b      	str	r3, [r7, #4]
 800d15a:	f04f 0200 	mov.w	r2, #0
 800d15e:	f04f 0300 	mov.w	r3, #0
 800d162:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d166:	4629      	mov	r1, r5
 800d168:	028b      	lsls	r3, r1, #10
 800d16a:	4621      	mov	r1, r4
 800d16c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d170:	4621      	mov	r1, r4
 800d172:	028a      	lsls	r2, r1, #10
 800d174:	4610      	mov	r0, r2
 800d176:	4619      	mov	r1, r3
 800d178:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d17a:	2200      	movs	r2, #0
 800d17c:	61bb      	str	r3, [r7, #24]
 800d17e:	61fa      	str	r2, [r7, #28]
 800d180:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d184:	f7f3 fd80 	bl	8000c88 <__aeabi_uldivmod>
 800d188:	4602      	mov	r2, r0
 800d18a:	460b      	mov	r3, r1
 800d18c:	4613      	mov	r3, r2
 800d18e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800d190:	4b0b      	ldr	r3, [pc, #44]	@ (800d1c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800d192:	685b      	ldr	r3, [r3, #4]
 800d194:	0c1b      	lsrs	r3, r3, #16
 800d196:	f003 0303 	and.w	r3, r3, #3
 800d19a:	3301      	adds	r3, #1
 800d19c:	005b      	lsls	r3, r3, #1
 800d19e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800d1a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d1a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d1a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800d1a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d1aa:	e002      	b.n	800d1b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d1ac:	4b05      	ldr	r3, [pc, #20]	@ (800d1c4 <HAL_RCC_GetSysClockFreq+0x204>)
 800d1ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d1b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d1b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800d1b4:	4618      	mov	r0, r3
 800d1b6:	3750      	adds	r7, #80	@ 0x50
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d1be:	bf00      	nop
 800d1c0:	40023800 	.word	0x40023800
 800d1c4:	00f42400 	.word	0x00f42400
 800d1c8:	007a1200 	.word	0x007a1200

0800d1cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d1cc:	b480      	push	{r7}
 800d1ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d1d0:	4b03      	ldr	r3, [pc, #12]	@ (800d1e0 <HAL_RCC_GetHCLKFreq+0x14>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	20000054 	.word	0x20000054

0800d1e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d1e8:	f7ff fff0 	bl	800d1cc <HAL_RCC_GetHCLKFreq>
 800d1ec:	4602      	mov	r2, r0
 800d1ee:	4b05      	ldr	r3, [pc, #20]	@ (800d204 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d1f0:	689b      	ldr	r3, [r3, #8]
 800d1f2:	0a9b      	lsrs	r3, r3, #10
 800d1f4:	f003 0307 	and.w	r3, r3, #7
 800d1f8:	4903      	ldr	r1, [pc, #12]	@ (800d208 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d1fa:	5ccb      	ldrb	r3, [r1, r3]
 800d1fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d200:	4618      	mov	r0, r3
 800d202:	bd80      	pop	{r7, pc}
 800d204:	40023800 	.word	0x40023800
 800d208:	08020238 	.word	0x08020238

0800d20c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d210:	f7ff ffdc 	bl	800d1cc <HAL_RCC_GetHCLKFreq>
 800d214:	4602      	mov	r2, r0
 800d216:	4b05      	ldr	r3, [pc, #20]	@ (800d22c <HAL_RCC_GetPCLK2Freq+0x20>)
 800d218:	689b      	ldr	r3, [r3, #8]
 800d21a:	0b5b      	lsrs	r3, r3, #13
 800d21c:	f003 0307 	and.w	r3, r3, #7
 800d220:	4903      	ldr	r1, [pc, #12]	@ (800d230 <HAL_RCC_GetPCLK2Freq+0x24>)
 800d222:	5ccb      	ldrb	r3, [r1, r3]
 800d224:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d228:	4618      	mov	r0, r3
 800d22a:	bd80      	pop	{r7, pc}
 800d22c:	40023800 	.word	0x40023800
 800d230:	08020238 	.word	0x08020238

0800d234 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d234:	b480      	push	{r7}
 800d236:	b083      	sub	sp, #12
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
 800d23c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	220f      	movs	r2, #15
 800d242:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d244:	4b12      	ldr	r3, [pc, #72]	@ (800d290 <HAL_RCC_GetClockConfig+0x5c>)
 800d246:	689b      	ldr	r3, [r3, #8]
 800d248:	f003 0203 	and.w	r2, r3, #3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d250:	4b0f      	ldr	r3, [pc, #60]	@ (800d290 <HAL_RCC_GetClockConfig+0x5c>)
 800d252:	689b      	ldr	r3, [r3, #8]
 800d254:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d25c:	4b0c      	ldr	r3, [pc, #48]	@ (800d290 <HAL_RCC_GetClockConfig+0x5c>)
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d268:	4b09      	ldr	r3, [pc, #36]	@ (800d290 <HAL_RCC_GetClockConfig+0x5c>)
 800d26a:	689b      	ldr	r3, [r3, #8]
 800d26c:	08db      	lsrs	r3, r3, #3
 800d26e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d276:	4b07      	ldr	r3, [pc, #28]	@ (800d294 <HAL_RCC_GetClockConfig+0x60>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f003 0207 	and.w	r2, r3, #7
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	601a      	str	r2, [r3, #0]
}
 800d282:	bf00      	nop
 800d284:	370c      	adds	r7, #12
 800d286:	46bd      	mov	sp, r7
 800d288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d28c:	4770      	bx	lr
 800d28e:	bf00      	nop
 800d290:	40023800 	.word	0x40023800
 800d294:	40023c00 	.word	0x40023c00

0800d298 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b082      	sub	sp, #8
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d101      	bne.n	800d2aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d2a6:	2301      	movs	r3, #1
 800d2a8:	e07b      	b.n	800d3a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d108      	bne.n	800d2c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	685b      	ldr	r3, [r3, #4]
 800d2b6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d2ba:	d009      	beq.n	800d2d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2200      	movs	r2, #0
 800d2c0:	61da      	str	r2, [r3, #28]
 800d2c2:	e005      	b.n	800d2d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	2200      	movs	r2, #0
 800d2ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2200      	movs	r2, #0
 800d2d4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	d106      	bne.n	800d2f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7fc f822 	bl	8009334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2202      	movs	r2, #2
 800d2f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	681a      	ldr	r2, [r3, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d306:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	685b      	ldr	r3, [r3, #4]
 800d30c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d318:	431a      	orrs	r2, r3
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	68db      	ldr	r3, [r3, #12]
 800d31e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d322:	431a      	orrs	r2, r3
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	691b      	ldr	r3, [r3, #16]
 800d328:	f003 0302 	and.w	r3, r3, #2
 800d32c:	431a      	orrs	r2, r3
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	695b      	ldr	r3, [r3, #20]
 800d332:	f003 0301 	and.w	r3, r3, #1
 800d336:	431a      	orrs	r2, r3
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	699b      	ldr	r3, [r3, #24]
 800d33c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d340:	431a      	orrs	r2, r3
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	69db      	ldr	r3, [r3, #28]
 800d346:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d34a:	431a      	orrs	r2, r3
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6a1b      	ldr	r3, [r3, #32]
 800d350:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d354:	ea42 0103 	orr.w	r1, r2, r3
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d35c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	430a      	orrs	r2, r1
 800d366:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	699b      	ldr	r3, [r3, #24]
 800d36c:	0c1b      	lsrs	r3, r3, #16
 800d36e:	f003 0104 	and.w	r1, r3, #4
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d376:	f003 0210 	and.w	r2, r3, #16
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	430a      	orrs	r2, r1
 800d380:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	69da      	ldr	r2, [r3, #28]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d390:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	2200      	movs	r2, #0
 800d396:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	2201      	movs	r2, #1
 800d39c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3708      	adds	r7, #8
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}

0800d3aa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d3aa:	b580      	push	{r7, lr}
 800d3ac:	b088      	sub	sp, #32
 800d3ae:	af00      	add	r7, sp, #0
 800d3b0:	60f8      	str	r0, [r7, #12]
 800d3b2:	60b9      	str	r1, [r7, #8]
 800d3b4:	603b      	str	r3, [r7, #0]
 800d3b6:	4613      	mov	r3, r2
 800d3b8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d3ba:	f7fc fffb 	bl	800a3b4 <HAL_GetTick>
 800d3be:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d3c0:	88fb      	ldrh	r3, [r7, #6]
 800d3c2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d001      	beq.n	800d3d4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d3d0:	2302      	movs	r3, #2
 800d3d2:	e12a      	b.n	800d62a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d002      	beq.n	800d3e0 <HAL_SPI_Transmit+0x36>
 800d3da:	88fb      	ldrh	r3, [r7, #6]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d101      	bne.n	800d3e4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d3e0:	2301      	movs	r3, #1
 800d3e2:	e122      	b.n	800d62a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d3ea:	2b01      	cmp	r3, #1
 800d3ec:	d101      	bne.n	800d3f2 <HAL_SPI_Transmit+0x48>
 800d3ee:	2302      	movs	r3, #2
 800d3f0:	e11b      	b.n	800d62a <HAL_SPI_Transmit+0x280>
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2201      	movs	r2, #1
 800d3f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	2203      	movs	r2, #3
 800d3fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	2200      	movs	r2, #0
 800d406:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	68ba      	ldr	r2, [r7, #8]
 800d40c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	88fa      	ldrh	r2, [r7, #6]
 800d412:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	88fa      	ldrh	r2, [r7, #6]
 800d418:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	2200      	movs	r2, #0
 800d424:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2200      	movs	r2, #0
 800d42a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2200      	movs	r2, #0
 800d430:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	2200      	movs	r2, #0
 800d436:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	689b      	ldr	r3, [r3, #8]
 800d43c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d440:	d10f      	bne.n	800d462 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	681a      	ldr	r2, [r3, #0]
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d450:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	681a      	ldr	r2, [r3, #0]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	681b      	ldr	r3, [r3, #0]
 800d45c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d460:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d462:	68fb      	ldr	r3, [r7, #12]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	681b      	ldr	r3, [r3, #0]
 800d468:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d46c:	2b40      	cmp	r3, #64	@ 0x40
 800d46e:	d007      	beq.n	800d480 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	681a      	ldr	r2, [r3, #0]
 800d476:	68fb      	ldr	r3, [r7, #12]
 800d478:	681b      	ldr	r3, [r3, #0]
 800d47a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d47e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	68db      	ldr	r3, [r3, #12]
 800d484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d488:	d152      	bne.n	800d530 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	685b      	ldr	r3, [r3, #4]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d002      	beq.n	800d498 <HAL_SPI_Transmit+0xee>
 800d492:	8b7b      	ldrh	r3, [r7, #26]
 800d494:	2b01      	cmp	r3, #1
 800d496:	d145      	bne.n	800d524 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d49c:	881a      	ldrh	r2, [r3, #0]
 800d49e:	68fb      	ldr	r3, [r7, #12]
 800d4a0:	681b      	ldr	r3, [r3, #0]
 800d4a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4a8:	1c9a      	adds	r2, r3, #2
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d4b2:	b29b      	uxth	r3, r3
 800d4b4:	3b01      	subs	r3, #1
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d4bc:	e032      	b.n	800d524 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	689b      	ldr	r3, [r3, #8]
 800d4c4:	f003 0302 	and.w	r3, r3, #2
 800d4c8:	2b02      	cmp	r3, #2
 800d4ca:	d112      	bne.n	800d4f2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4d0:	881a      	ldrh	r2, [r3, #0]
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4dc:	1c9a      	adds	r2, r3, #2
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d4e6:	b29b      	uxth	r3, r3
 800d4e8:	3b01      	subs	r3, #1
 800d4ea:	b29a      	uxth	r2, r3
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d4f0:	e018      	b.n	800d524 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d4f2:	f7fc ff5f 	bl	800a3b4 <HAL_GetTick>
 800d4f6:	4602      	mov	r2, r0
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	1ad3      	subs	r3, r2, r3
 800d4fc:	683a      	ldr	r2, [r7, #0]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d803      	bhi.n	800d50a <HAL_SPI_Transmit+0x160>
 800d502:	683b      	ldr	r3, [r7, #0]
 800d504:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d508:	d102      	bne.n	800d510 <HAL_SPI_Transmit+0x166>
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d109      	bne.n	800d524 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2201      	movs	r2, #1
 800d514:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2200      	movs	r2, #0
 800d51c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d520:	2303      	movs	r3, #3
 800d522:	e082      	b.n	800d62a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d528:	b29b      	uxth	r3, r3
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d1c7      	bne.n	800d4be <HAL_SPI_Transmit+0x114>
 800d52e:	e053      	b.n	800d5d8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	685b      	ldr	r3, [r3, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <HAL_SPI_Transmit+0x194>
 800d538:	8b7b      	ldrh	r3, [r7, #26]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	d147      	bne.n	800d5ce <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	330c      	adds	r3, #12
 800d548:	7812      	ldrb	r2, [r2, #0]
 800d54a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d54c:	68fb      	ldr	r3, [r7, #12]
 800d54e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d550:	1c5a      	adds	r2, r3, #1
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d55a:	b29b      	uxth	r3, r3
 800d55c:	3b01      	subs	r3, #1
 800d55e:	b29a      	uxth	r2, r3
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d564:	e033      	b.n	800d5ce <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	681b      	ldr	r3, [r3, #0]
 800d56a:	689b      	ldr	r3, [r3, #8]
 800d56c:	f003 0302 	and.w	r3, r3, #2
 800d570:	2b02      	cmp	r3, #2
 800d572:	d113      	bne.n	800d59c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	330c      	adds	r3, #12
 800d57e:	7812      	ldrb	r2, [r2, #0]
 800d580:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d586:	1c5a      	adds	r2, r3, #1
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d590:	b29b      	uxth	r3, r3
 800d592:	3b01      	subs	r3, #1
 800d594:	b29a      	uxth	r2, r3
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d59a:	e018      	b.n	800d5ce <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d59c:	f7fc ff0a 	bl	800a3b4 <HAL_GetTick>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	1ad3      	subs	r3, r2, r3
 800d5a6:	683a      	ldr	r2, [r7, #0]
 800d5a8:	429a      	cmp	r2, r3
 800d5aa:	d803      	bhi.n	800d5b4 <HAL_SPI_Transmit+0x20a>
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5b2:	d102      	bne.n	800d5ba <HAL_SPI_Transmit+0x210>
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d109      	bne.n	800d5ce <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	2200      	movs	r2, #0
 800d5c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d5ca:	2303      	movs	r3, #3
 800d5cc:	e02d      	b.n	800d62a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d5d2:	b29b      	uxth	r3, r3
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d1c6      	bne.n	800d566 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d5d8:	69fa      	ldr	r2, [r7, #28]
 800d5da:	6839      	ldr	r1, [r7, #0]
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f000 fbd9 	bl	800dd94 <SPI_EndRxTxTransaction>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d002      	beq.n	800d5ee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2220      	movs	r2, #32
 800d5ec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d5ee:	68fb      	ldr	r3, [r7, #12]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	2b00      	cmp	r3, #0
 800d5f4:	d10a      	bne.n	800d60c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	617b      	str	r3, [r7, #20]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	68db      	ldr	r3, [r3, #12]
 800d600:	617b      	str	r3, [r7, #20]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	689b      	ldr	r3, [r3, #8]
 800d608:	617b      	str	r3, [r7, #20]
 800d60a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2200      	movs	r2, #0
 800d618:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d620:	2b00      	cmp	r3, #0
 800d622:	d001      	beq.n	800d628 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800d624:	2301      	movs	r3, #1
 800d626:	e000      	b.n	800d62a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800d628:	2300      	movs	r3, #0
  }
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3720      	adds	r7, #32
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}

0800d632 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d632:	b580      	push	{r7, lr}
 800d634:	b088      	sub	sp, #32
 800d636:	af02      	add	r7, sp, #8
 800d638:	60f8      	str	r0, [r7, #12]
 800d63a:	60b9      	str	r1, [r7, #8]
 800d63c:	603b      	str	r3, [r7, #0]
 800d63e:	4613      	mov	r3, r2
 800d640:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800d642:	68fb      	ldr	r3, [r7, #12]
 800d644:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	2b01      	cmp	r3, #1
 800d64c:	d001      	beq.n	800d652 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800d64e:	2302      	movs	r3, #2
 800d650:	e104      	b.n	800d85c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d65a:	d112      	bne.n	800d682 <HAL_SPI_Receive+0x50>
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d10e      	bne.n	800d682 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2204      	movs	r2, #4
 800d668:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800d66c:	88fa      	ldrh	r2, [r7, #6]
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	9300      	str	r3, [sp, #0]
 800d672:	4613      	mov	r3, r2
 800d674:	68ba      	ldr	r2, [r7, #8]
 800d676:	68b9      	ldr	r1, [r7, #8]
 800d678:	68f8      	ldr	r0, [r7, #12]
 800d67a:	f000 f8f3 	bl	800d864 <HAL_SPI_TransmitReceive>
 800d67e:	4603      	mov	r3, r0
 800d680:	e0ec      	b.n	800d85c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d682:	f7fc fe97 	bl	800a3b4 <HAL_GetTick>
 800d686:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d002      	beq.n	800d694 <HAL_SPI_Receive+0x62>
 800d68e:	88fb      	ldrh	r3, [r7, #6]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d101      	bne.n	800d698 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800d694:	2301      	movs	r3, #1
 800d696:	e0e1      	b.n	800d85c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d69e:	2b01      	cmp	r3, #1
 800d6a0:	d101      	bne.n	800d6a6 <HAL_SPI_Receive+0x74>
 800d6a2:	2302      	movs	r3, #2
 800d6a4:	e0da      	b.n	800d85c <HAL_SPI_Receive+0x22a>
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	2201      	movs	r2, #1
 800d6aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	2204      	movs	r2, #4
 800d6b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2200      	movs	r2, #0
 800d6ba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	68ba      	ldr	r2, [r7, #8]
 800d6c0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	88fa      	ldrh	r2, [r7, #6]
 800d6c6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	88fa      	ldrh	r2, [r7, #6]
 800d6cc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	2200      	movs	r2, #0
 800d6d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	2200      	movs	r2, #0
 800d6de:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	689b      	ldr	r3, [r3, #8]
 800d6f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d6f4:	d10f      	bne.n	800d716 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	681a      	ldr	r2, [r3, #0]
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d704:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	68fb      	ldr	r3, [r7, #12]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d714:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d720:	2b40      	cmp	r3, #64	@ 0x40
 800d722:	d007      	beq.n	800d734 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681a      	ldr	r2, [r3, #0]
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	681b      	ldr	r3, [r3, #0]
 800d72e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d732:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	68db      	ldr	r3, [r3, #12]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d170      	bne.n	800d81e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800d73c:	e035      	b.n	800d7aa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	689b      	ldr	r3, [r3, #8]
 800d744:	f003 0301 	and.w	r3, r3, #1
 800d748:	2b01      	cmp	r3, #1
 800d74a:	d115      	bne.n	800d778 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	f103 020c 	add.w	r2, r3, #12
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d758:	7812      	ldrb	r2, [r2, #0]
 800d75a:	b2d2      	uxtb	r2, r2
 800d75c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d762:	1c5a      	adds	r2, r3, #1
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d76c:	b29b      	uxth	r3, r3
 800d76e:	3b01      	subs	r3, #1
 800d770:	b29a      	uxth	r2, r3
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d776:	e018      	b.n	800d7aa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d778:	f7fc fe1c 	bl	800a3b4 <HAL_GetTick>
 800d77c:	4602      	mov	r2, r0
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	683a      	ldr	r2, [r7, #0]
 800d784:	429a      	cmp	r2, r3
 800d786:	d803      	bhi.n	800d790 <HAL_SPI_Receive+0x15e>
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78e:	d102      	bne.n	800d796 <HAL_SPI_Receive+0x164>
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d109      	bne.n	800d7aa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2201      	movs	r2, #1
 800d79a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d7a6:	2303      	movs	r3, #3
 800d7a8:	e058      	b.n	800d85c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d1c4      	bne.n	800d73e <HAL_SPI_Receive+0x10c>
 800d7b4:	e038      	b.n	800d828 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	689b      	ldr	r3, [r3, #8]
 800d7bc:	f003 0301 	and.w	r3, r3, #1
 800d7c0:	2b01      	cmp	r3, #1
 800d7c2:	d113      	bne.n	800d7ec <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	68da      	ldr	r2, [r3, #12]
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7ce:	b292      	uxth	r2, r2
 800d7d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d7d6:	1c9a      	adds	r2, r3, #2
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d7e0:	b29b      	uxth	r3, r3
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	b29a      	uxth	r2, r3
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800d7ea:	e018      	b.n	800d81e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d7ec:	f7fc fde2 	bl	800a3b4 <HAL_GetTick>
 800d7f0:	4602      	mov	r2, r0
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	1ad3      	subs	r3, r2, r3
 800d7f6:	683a      	ldr	r2, [r7, #0]
 800d7f8:	429a      	cmp	r2, r3
 800d7fa:	d803      	bhi.n	800d804 <HAL_SPI_Receive+0x1d2>
 800d7fc:	683b      	ldr	r3, [r7, #0]
 800d7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d802:	d102      	bne.n	800d80a <HAL_SPI_Receive+0x1d8>
 800d804:	683b      	ldr	r3, [r7, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d109      	bne.n	800d81e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2201      	movs	r2, #1
 800d80e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	2200      	movs	r2, #0
 800d816:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d81a:	2303      	movs	r3, #3
 800d81c:	e01e      	b.n	800d85c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d822:	b29b      	uxth	r3, r3
 800d824:	2b00      	cmp	r3, #0
 800d826:	d1c6      	bne.n	800d7b6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d828:	697a      	ldr	r2, [r7, #20]
 800d82a:	6839      	ldr	r1, [r7, #0]
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f000 fa4b 	bl	800dcc8 <SPI_EndRxTransaction>
 800d832:	4603      	mov	r3, r0
 800d834:	2b00      	cmp	r3, #0
 800d836:	d002      	beq.n	800d83e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2220      	movs	r2, #32
 800d83c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800d846:	68fb      	ldr	r3, [r7, #12]
 800d848:	2200      	movs	r2, #0
 800d84a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d852:	2b00      	cmp	r3, #0
 800d854:	d001      	beq.n	800d85a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800d856:	2301      	movs	r3, #1
 800d858:	e000      	b.n	800d85c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800d85a:	2300      	movs	r3, #0
  }
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3718      	adds	r7, #24
 800d860:	46bd      	mov	sp, r7
 800d862:	bd80      	pop	{r7, pc}

0800d864 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b08a      	sub	sp, #40	@ 0x28
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60f8      	str	r0, [r7, #12]
 800d86c:	60b9      	str	r1, [r7, #8]
 800d86e:	607a      	str	r2, [r7, #4]
 800d870:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800d872:	2301      	movs	r3, #1
 800d874:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d876:	f7fc fd9d 	bl	800a3b4 <HAL_GetTick>
 800d87a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d882:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800d88a:	887b      	ldrh	r3, [r7, #2]
 800d88c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800d88e:	7ffb      	ldrb	r3, [r7, #31]
 800d890:	2b01      	cmp	r3, #1
 800d892:	d00c      	beq.n	800d8ae <HAL_SPI_TransmitReceive+0x4a>
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d89a:	d106      	bne.n	800d8aa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	689b      	ldr	r3, [r3, #8]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d102      	bne.n	800d8aa <HAL_SPI_TransmitReceive+0x46>
 800d8a4:	7ffb      	ldrb	r3, [r7, #31]
 800d8a6:	2b04      	cmp	r3, #4
 800d8a8:	d001      	beq.n	800d8ae <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800d8aa:	2302      	movs	r3, #2
 800d8ac:	e17f      	b.n	800dbae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d005      	beq.n	800d8c0 <HAL_SPI_TransmitReceive+0x5c>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d002      	beq.n	800d8c0 <HAL_SPI_TransmitReceive+0x5c>
 800d8ba:	887b      	ldrh	r3, [r7, #2]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d101      	bne.n	800d8c4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	e174      	b.n	800dbae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d101      	bne.n	800d8d2 <HAL_SPI_TransmitReceive+0x6e>
 800d8ce:	2302      	movs	r3, #2
 800d8d0:	e16d      	b.n	800dbae <HAL_SPI_TransmitReceive+0x34a>
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d8e0:	b2db      	uxtb	r3, r3
 800d8e2:	2b04      	cmp	r3, #4
 800d8e4:	d003      	beq.n	800d8ee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	2205      	movs	r2, #5
 800d8ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	887a      	ldrh	r2, [r7, #2]
 800d8fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	887a      	ldrh	r2, [r7, #2]
 800d904:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	887a      	ldrh	r2, [r7, #2]
 800d910:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	887a      	ldrh	r2, [r7, #2]
 800d916:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	2200      	movs	r2, #0
 800d91c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	2200      	movs	r2, #0
 800d922:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d92e:	2b40      	cmp	r3, #64	@ 0x40
 800d930:	d007      	beq.n	800d942 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d940:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	68db      	ldr	r3, [r3, #12]
 800d946:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d94a:	d17e      	bne.n	800da4a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d002      	beq.n	800d95a <HAL_SPI_TransmitReceive+0xf6>
 800d954:	8afb      	ldrh	r3, [r7, #22]
 800d956:	2b01      	cmp	r3, #1
 800d958:	d16c      	bne.n	800da34 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d95e:	881a      	ldrh	r2, [r3, #0]
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d96a:	1c9a      	adds	r2, r3, #2
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d974:	b29b      	uxth	r3, r3
 800d976:	3b01      	subs	r3, #1
 800d978:	b29a      	uxth	r2, r3
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800d97e:	e059      	b.n	800da34 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	689b      	ldr	r3, [r3, #8]
 800d986:	f003 0302 	and.w	r3, r3, #2
 800d98a:	2b02      	cmp	r3, #2
 800d98c:	d11b      	bne.n	800d9c6 <HAL_SPI_TransmitReceive+0x162>
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d992:	b29b      	uxth	r3, r3
 800d994:	2b00      	cmp	r3, #0
 800d996:	d016      	beq.n	800d9c6 <HAL_SPI_TransmitReceive+0x162>
 800d998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d99a:	2b01      	cmp	r3, #1
 800d99c:	d113      	bne.n	800d9c6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9a2:	881a      	ldrh	r2, [r3, #0]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d9ae:	1c9a      	adds	r2, r3, #2
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d9b8:	b29b      	uxth	r3, r3
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	b29a      	uxth	r2, r3
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	689b      	ldr	r3, [r3, #8]
 800d9cc:	f003 0301 	and.w	r3, r3, #1
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d119      	bne.n	800da08 <HAL_SPI_TransmitReceive+0x1a4>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9d8:	b29b      	uxth	r3, r3
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d014      	beq.n	800da08 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	68da      	ldr	r2, [r3, #12]
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9e8:	b292      	uxth	r2, r2
 800d9ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d9f0:	1c9a      	adds	r2, r3, #2
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800d9fa:	b29b      	uxth	r3, r3
 800d9fc:	3b01      	subs	r3, #1
 800d9fe:	b29a      	uxth	r2, r3
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800da04:	2301      	movs	r3, #1
 800da06:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800da08:	f7fc fcd4 	bl	800a3b4 <HAL_GetTick>
 800da0c:	4602      	mov	r2, r0
 800da0e:	6a3b      	ldr	r3, [r7, #32]
 800da10:	1ad3      	subs	r3, r2, r3
 800da12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da14:	429a      	cmp	r2, r3
 800da16:	d80d      	bhi.n	800da34 <HAL_SPI_TransmitReceive+0x1d0>
 800da18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da1e:	d009      	beq.n	800da34 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2201      	movs	r2, #1
 800da24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	2200      	movs	r2, #0
 800da2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800da30:	2303      	movs	r3, #3
 800da32:	e0bc      	b.n	800dbae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800da38:	b29b      	uxth	r3, r3
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d1a0      	bne.n	800d980 <HAL_SPI_TransmitReceive+0x11c>
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800da42:	b29b      	uxth	r3, r3
 800da44:	2b00      	cmp	r3, #0
 800da46:	d19b      	bne.n	800d980 <HAL_SPI_TransmitReceive+0x11c>
 800da48:	e082      	b.n	800db50 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	685b      	ldr	r3, [r3, #4]
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d002      	beq.n	800da58 <HAL_SPI_TransmitReceive+0x1f4>
 800da52:	8afb      	ldrh	r3, [r7, #22]
 800da54:	2b01      	cmp	r3, #1
 800da56:	d171      	bne.n	800db3c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	330c      	adds	r3, #12
 800da62:	7812      	ldrb	r2, [r2, #0]
 800da64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800da6a:	1c5a      	adds	r2, r3, #1
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800da74:	b29b      	uxth	r3, r3
 800da76:	3b01      	subs	r3, #1
 800da78:	b29a      	uxth	r2, r3
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800da7e:	e05d      	b.n	800db3c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	689b      	ldr	r3, [r3, #8]
 800da86:	f003 0302 	and.w	r3, r3, #2
 800da8a:	2b02      	cmp	r3, #2
 800da8c:	d11c      	bne.n	800dac8 <HAL_SPI_TransmitReceive+0x264>
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800da92:	b29b      	uxth	r3, r3
 800da94:	2b00      	cmp	r3, #0
 800da96:	d017      	beq.n	800dac8 <HAL_SPI_TransmitReceive+0x264>
 800da98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d114      	bne.n	800dac8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	330c      	adds	r3, #12
 800daa8:	7812      	ldrb	r2, [r2, #0]
 800daaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dab0:	1c5a      	adds	r2, r3, #1
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800daba:	b29b      	uxth	r3, r3
 800dabc:	3b01      	subs	r3, #1
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	68fb      	ldr	r3, [r7, #12]
 800dac2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800dac4:	2300      	movs	r3, #0
 800dac6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	689b      	ldr	r3, [r3, #8]
 800dace:	f003 0301 	and.w	r3, r3, #1
 800dad2:	2b01      	cmp	r3, #1
 800dad4:	d119      	bne.n	800db0a <HAL_SPI_TransmitReceive+0x2a6>
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dada:	b29b      	uxth	r3, r3
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d014      	beq.n	800db0a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	68da      	ldr	r2, [r3, #12]
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daea:	b2d2      	uxtb	r2, r2
 800daec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800daf2:	1c5a      	adds	r2, r3, #1
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dafc:	b29b      	uxth	r3, r3
 800dafe:	3b01      	subs	r3, #1
 800db00:	b29a      	uxth	r2, r3
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800db06:	2301      	movs	r3, #1
 800db08:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800db0a:	f7fc fc53 	bl	800a3b4 <HAL_GetTick>
 800db0e:	4602      	mov	r2, r0
 800db10:	6a3b      	ldr	r3, [r7, #32]
 800db12:	1ad3      	subs	r3, r2, r3
 800db14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800db16:	429a      	cmp	r2, r3
 800db18:	d803      	bhi.n	800db22 <HAL_SPI_TransmitReceive+0x2be>
 800db1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db20:	d102      	bne.n	800db28 <HAL_SPI_TransmitReceive+0x2c4>
 800db22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db24:	2b00      	cmp	r3, #0
 800db26:	d109      	bne.n	800db3c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800db28:	68fb      	ldr	r3, [r7, #12]
 800db2a:	2201      	movs	r2, #1
 800db2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2200      	movs	r2, #0
 800db34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800db38:	2303      	movs	r3, #3
 800db3a:	e038      	b.n	800dbae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800db40:	b29b      	uxth	r3, r3
 800db42:	2b00      	cmp	r3, #0
 800db44:	d19c      	bne.n	800da80 <HAL_SPI_TransmitReceive+0x21c>
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	2b00      	cmp	r3, #0
 800db4e:	d197      	bne.n	800da80 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800db50:	6a3a      	ldr	r2, [r7, #32]
 800db52:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800db54:	68f8      	ldr	r0, [r7, #12]
 800db56:	f000 f91d 	bl	800dd94 <SPI_EndRxTxTransaction>
 800db5a:	4603      	mov	r3, r0
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d008      	beq.n	800db72 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2220      	movs	r2, #32
 800db64:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2200      	movs	r2, #0
 800db6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800db6e:	2301      	movs	r3, #1
 800db70:	e01d      	b.n	800dbae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	689b      	ldr	r3, [r3, #8]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d10a      	bne.n	800db90 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db7a:	2300      	movs	r3, #0
 800db7c:	613b      	str	r3, [r7, #16]
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	68db      	ldr	r3, [r3, #12]
 800db84:	613b      	str	r3, [r7, #16]
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	689b      	ldr	r3, [r3, #8]
 800db8c:	613b      	str	r3, [r7, #16]
 800db8e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2201      	movs	r2, #1
 800db94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d001      	beq.n	800dbac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800dba8:	2301      	movs	r3, #1
 800dbaa:	e000      	b.n	800dbae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800dbac:	2300      	movs	r3, #0
  }
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3728      	adds	r7, #40	@ 0x28
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
	...

0800dbb8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b088      	sub	sp, #32
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	60f8      	str	r0, [r7, #12]
 800dbc0:	60b9      	str	r1, [r7, #8]
 800dbc2:	603b      	str	r3, [r7, #0]
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dbc8:	f7fc fbf4 	bl	800a3b4 <HAL_GetTick>
 800dbcc:	4602      	mov	r2, r0
 800dbce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbd0:	1a9b      	subs	r3, r3, r2
 800dbd2:	683a      	ldr	r2, [r7, #0]
 800dbd4:	4413      	add	r3, r2
 800dbd6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dbd8:	f7fc fbec 	bl	800a3b4 <HAL_GetTick>
 800dbdc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dbde:	4b39      	ldr	r3, [pc, #228]	@ (800dcc4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	015b      	lsls	r3, r3, #5
 800dbe4:	0d1b      	lsrs	r3, r3, #20
 800dbe6:	69fa      	ldr	r2, [r7, #28]
 800dbe8:	fb02 f303 	mul.w	r3, r2, r3
 800dbec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dbee:	e054      	b.n	800dc9a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbf6:	d050      	beq.n	800dc9a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800dbf8:	f7fc fbdc 	bl	800a3b4 <HAL_GetTick>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	69bb      	ldr	r3, [r7, #24]
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	69fa      	ldr	r2, [r7, #28]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d902      	bls.n	800dc0e <SPI_WaitFlagStateUntilTimeout+0x56>
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d13d      	bne.n	800dc8a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	685a      	ldr	r2, [r3, #4]
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	681b      	ldr	r3, [r3, #0]
 800dc18:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800dc1c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	685b      	ldr	r3, [r3, #4]
 800dc22:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dc26:	d111      	bne.n	800dc4c <SPI_WaitFlagStateUntilTimeout+0x94>
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	689b      	ldr	r3, [r3, #8]
 800dc2c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc30:	d004      	beq.n	800dc3c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	689b      	ldr	r3, [r3, #8]
 800dc36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dc3a:	d107      	bne.n	800dc4c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	681a      	ldr	r2, [r3, #0]
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dc4a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc50:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800dc54:	d10f      	bne.n	800dc76 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	681b      	ldr	r3, [r3, #0]
 800dc60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	681a      	ldr	r2, [r3, #0]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800dc74:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2201      	movs	r2, #1
 800dc7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	2200      	movs	r2, #0
 800dc82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800dc86:	2303      	movs	r3, #3
 800dc88:	e017      	b.n	800dcba <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800dc8a:	697b      	ldr	r3, [r7, #20]
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d101      	bne.n	800dc94 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800dc90:	2300      	movs	r3, #0
 800dc92:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	3b01      	subs	r3, #1
 800dc98:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	689a      	ldr	r2, [r3, #8]
 800dca0:	68bb      	ldr	r3, [r7, #8]
 800dca2:	4013      	ands	r3, r2
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	429a      	cmp	r2, r3
 800dca8:	bf0c      	ite	eq
 800dcaa:	2301      	moveq	r3, #1
 800dcac:	2300      	movne	r3, #0
 800dcae:	b2db      	uxtb	r3, r3
 800dcb0:	461a      	mov	r2, r3
 800dcb2:	79fb      	ldrb	r3, [r7, #7]
 800dcb4:	429a      	cmp	r2, r3
 800dcb6:	d19b      	bne.n	800dbf0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800dcb8:	2300      	movs	r3, #0
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3720      	adds	r7, #32
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}
 800dcc2:	bf00      	nop
 800dcc4:	20000054 	.word	0x20000054

0800dcc8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af02      	add	r7, sp, #8
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	685b      	ldr	r3, [r3, #4]
 800dcd8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dcdc:	d111      	bne.n	800dd02 <SPI_EndRxTransaction+0x3a>
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	689b      	ldr	r3, [r3, #8]
 800dce2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dce6:	d004      	beq.n	800dcf2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	689b      	ldr	r3, [r3, #8]
 800dcec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dcf0:	d107      	bne.n	800dd02 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	681a      	ldr	r2, [r3, #0]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800dd00:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dd0a:	d12a      	bne.n	800dd62 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	689b      	ldr	r3, [r3, #8]
 800dd10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800dd14:	d012      	beq.n	800dd3c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	9300      	str	r3, [sp, #0]
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	2180      	movs	r1, #128	@ 0x80
 800dd20:	68f8      	ldr	r0, [r7, #12]
 800dd22:	f7ff ff49 	bl	800dbb8 <SPI_WaitFlagStateUntilTimeout>
 800dd26:	4603      	mov	r3, r0
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d02d      	beq.n	800dd88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd30:	f043 0220 	orr.w	r2, r3, #32
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800dd38:	2303      	movs	r3, #3
 800dd3a:	e026      	b.n	800dd8a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	9300      	str	r3, [sp, #0]
 800dd40:	68bb      	ldr	r3, [r7, #8]
 800dd42:	2200      	movs	r2, #0
 800dd44:	2101      	movs	r1, #1
 800dd46:	68f8      	ldr	r0, [r7, #12]
 800dd48:	f7ff ff36 	bl	800dbb8 <SPI_WaitFlagStateUntilTimeout>
 800dd4c:	4603      	mov	r3, r0
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d01a      	beq.n	800dd88 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd56:	f043 0220 	orr.w	r2, r3, #32
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800dd5e:	2303      	movs	r3, #3
 800dd60:	e013      	b.n	800dd8a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	9300      	str	r3, [sp, #0]
 800dd66:	68bb      	ldr	r3, [r7, #8]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	2101      	movs	r1, #1
 800dd6c:	68f8      	ldr	r0, [r7, #12]
 800dd6e:	f7ff ff23 	bl	800dbb8 <SPI_WaitFlagStateUntilTimeout>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d007      	beq.n	800dd88 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd7c:	f043 0220 	orr.w	r2, r3, #32
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800dd84:	2303      	movs	r3, #3
 800dd86:	e000      	b.n	800dd8a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800dd88:	2300      	movs	r3, #0
}
 800dd8a:	4618      	mov	r0, r3
 800dd8c:	3710      	adds	r7, #16
 800dd8e:	46bd      	mov	sp, r7
 800dd90:	bd80      	pop	{r7, pc}
	...

0800dd94 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b088      	sub	sp, #32
 800dd98:	af02      	add	r7, sp, #8
 800dd9a:	60f8      	str	r0, [r7, #12]
 800dd9c:	60b9      	str	r1, [r7, #8]
 800dd9e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	9300      	str	r3, [sp, #0]
 800dda4:	68bb      	ldr	r3, [r7, #8]
 800dda6:	2201      	movs	r2, #1
 800dda8:	2102      	movs	r1, #2
 800ddaa:	68f8      	ldr	r0, [r7, #12]
 800ddac:	f7ff ff04 	bl	800dbb8 <SPI_WaitFlagStateUntilTimeout>
 800ddb0:	4603      	mov	r3, r0
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d007      	beq.n	800ddc6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddba:	f043 0220 	orr.w	r2, r3, #32
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800ddc2:	2303      	movs	r3, #3
 800ddc4:	e032      	b.n	800de2c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ddc6:	4b1b      	ldr	r3, [pc, #108]	@ (800de34 <SPI_EndRxTxTransaction+0xa0>)
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	4a1b      	ldr	r2, [pc, #108]	@ (800de38 <SPI_EndRxTxTransaction+0xa4>)
 800ddcc:	fba2 2303 	umull	r2, r3, r2, r3
 800ddd0:	0d5b      	lsrs	r3, r3, #21
 800ddd2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800ddd6:	fb02 f303 	mul.w	r3, r2, r3
 800ddda:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dde4:	d112      	bne.n	800de0c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	9300      	str	r3, [sp, #0]
 800ddea:	68bb      	ldr	r3, [r7, #8]
 800ddec:	2200      	movs	r2, #0
 800ddee:	2180      	movs	r1, #128	@ 0x80
 800ddf0:	68f8      	ldr	r0, [r7, #12]
 800ddf2:	f7ff fee1 	bl	800dbb8 <SPI_WaitFlagStateUntilTimeout>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d016      	beq.n	800de2a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ddfc:	68fb      	ldr	r3, [r7, #12]
 800ddfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de00:	f043 0220 	orr.w	r2, r3, #32
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800de08:	2303      	movs	r3, #3
 800de0a:	e00f      	b.n	800de2c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800de0c:	697b      	ldr	r3, [r7, #20]
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d00a      	beq.n	800de28 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800de12:	697b      	ldr	r3, [r7, #20]
 800de14:	3b01      	subs	r3, #1
 800de16:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	689b      	ldr	r3, [r3, #8]
 800de1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de22:	2b80      	cmp	r3, #128	@ 0x80
 800de24:	d0f2      	beq.n	800de0c <SPI_EndRxTxTransaction+0x78>
 800de26:	e000      	b.n	800de2a <SPI_EndRxTxTransaction+0x96>
        break;
 800de28:	bf00      	nop
  }

  return HAL_OK;
 800de2a:	2300      	movs	r3, #0
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3718      	adds	r7, #24
 800de30:	46bd      	mov	sp, r7
 800de32:	bd80      	pop	{r7, pc}
 800de34:	20000054 	.word	0x20000054
 800de38:	165e9f81 	.word	0x165e9f81

0800de3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b082      	sub	sp, #8
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d101      	bne.n	800de4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800de4a:	2301      	movs	r3, #1
 800de4c:	e041      	b.n	800ded2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800de54:	b2db      	uxtb	r3, r3
 800de56:	2b00      	cmp	r3, #0
 800de58:	d106      	bne.n	800de68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	2200      	movs	r2, #0
 800de5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f7fb fd64 	bl	8009930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	2202      	movs	r2, #2
 800de6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	3304      	adds	r3, #4
 800de78:	4619      	mov	r1, r3
 800de7a:	4610      	mov	r0, r2
 800de7c:	f000 fd28 	bl	800e8d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	2201      	movs	r2, #1
 800de84:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2201      	movs	r2, #1
 800de8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	2201      	movs	r2, #1
 800de94:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2201      	movs	r2, #1
 800de9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2201      	movs	r2, #1
 800dea4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2201      	movs	r2, #1
 800deb4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2201      	movs	r2, #1
 800debc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2201      	movs	r2, #1
 800dec4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	2201      	movs	r2, #1
 800decc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ded0:	2300      	movs	r3, #0
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3708      	adds	r7, #8
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
	...

0800dedc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800dedc:	b480      	push	{r7}
 800dede:	b085      	sub	sp, #20
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800deea:	b2db      	uxtb	r3, r3
 800deec:	2b01      	cmp	r3, #1
 800deee:	d001      	beq.n	800def4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800def0:	2301      	movs	r3, #1
 800def2:	e046      	b.n	800df82 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2202      	movs	r2, #2
 800def8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a23      	ldr	r2, [pc, #140]	@ (800df90 <HAL_TIM_Base_Start+0xb4>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d022      	beq.n	800df4c <HAL_TIM_Base_Start+0x70>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800df0e:	d01d      	beq.n	800df4c <HAL_TIM_Base_Start+0x70>
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	4a1f      	ldr	r2, [pc, #124]	@ (800df94 <HAL_TIM_Base_Start+0xb8>)
 800df16:	4293      	cmp	r3, r2
 800df18:	d018      	beq.n	800df4c <HAL_TIM_Base_Start+0x70>
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	4a1e      	ldr	r2, [pc, #120]	@ (800df98 <HAL_TIM_Base_Start+0xbc>)
 800df20:	4293      	cmp	r3, r2
 800df22:	d013      	beq.n	800df4c <HAL_TIM_Base_Start+0x70>
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	4a1c      	ldr	r2, [pc, #112]	@ (800df9c <HAL_TIM_Base_Start+0xc0>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d00e      	beq.n	800df4c <HAL_TIM_Base_Start+0x70>
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	4a1b      	ldr	r2, [pc, #108]	@ (800dfa0 <HAL_TIM_Base_Start+0xc4>)
 800df34:	4293      	cmp	r3, r2
 800df36:	d009      	beq.n	800df4c <HAL_TIM_Base_Start+0x70>
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a19      	ldr	r2, [pc, #100]	@ (800dfa4 <HAL_TIM_Base_Start+0xc8>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d004      	beq.n	800df4c <HAL_TIM_Base_Start+0x70>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	4a18      	ldr	r2, [pc, #96]	@ (800dfa8 <HAL_TIM_Base_Start+0xcc>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d111      	bne.n	800df70 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	689b      	ldr	r3, [r3, #8]
 800df52:	f003 0307 	and.w	r3, r3, #7
 800df56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	2b06      	cmp	r3, #6
 800df5c:	d010      	beq.n	800df80 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	f042 0201 	orr.w	r2, r2, #1
 800df6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df6e:	e007      	b.n	800df80 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	f042 0201 	orr.w	r2, r2, #1
 800df7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800df80:	2300      	movs	r3, #0
}
 800df82:	4618      	mov	r0, r3
 800df84:	3714      	adds	r7, #20
 800df86:	46bd      	mov	sp, r7
 800df88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8c:	4770      	bx	lr
 800df8e:	bf00      	nop
 800df90:	40010000 	.word	0x40010000
 800df94:	40000400 	.word	0x40000400
 800df98:	40000800 	.word	0x40000800
 800df9c:	40000c00 	.word	0x40000c00
 800dfa0:	40010400 	.word	0x40010400
 800dfa4:	40014000 	.word	0x40014000
 800dfa8:	40001800 	.word	0x40001800

0800dfac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b085      	sub	sp, #20
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dfba:	b2db      	uxtb	r3, r3
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	d001      	beq.n	800dfc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dfc0:	2301      	movs	r3, #1
 800dfc2:	e04e      	b.n	800e062 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	2202      	movs	r2, #2
 800dfc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	68da      	ldr	r2, [r3, #12]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f042 0201 	orr.w	r2, r2, #1
 800dfda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4a23      	ldr	r2, [pc, #140]	@ (800e070 <HAL_TIM_Base_Start_IT+0xc4>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d022      	beq.n	800e02c <HAL_TIM_Base_Start_IT+0x80>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800dfee:	d01d      	beq.n	800e02c <HAL_TIM_Base_Start_IT+0x80>
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4a1f      	ldr	r2, [pc, #124]	@ (800e074 <HAL_TIM_Base_Start_IT+0xc8>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d018      	beq.n	800e02c <HAL_TIM_Base_Start_IT+0x80>
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4a1e      	ldr	r2, [pc, #120]	@ (800e078 <HAL_TIM_Base_Start_IT+0xcc>)
 800e000:	4293      	cmp	r3, r2
 800e002:	d013      	beq.n	800e02c <HAL_TIM_Base_Start_IT+0x80>
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4a1c      	ldr	r2, [pc, #112]	@ (800e07c <HAL_TIM_Base_Start_IT+0xd0>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d00e      	beq.n	800e02c <HAL_TIM_Base_Start_IT+0x80>
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	4a1b      	ldr	r2, [pc, #108]	@ (800e080 <HAL_TIM_Base_Start_IT+0xd4>)
 800e014:	4293      	cmp	r3, r2
 800e016:	d009      	beq.n	800e02c <HAL_TIM_Base_Start_IT+0x80>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4a19      	ldr	r2, [pc, #100]	@ (800e084 <HAL_TIM_Base_Start_IT+0xd8>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d004      	beq.n	800e02c <HAL_TIM_Base_Start_IT+0x80>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	4a18      	ldr	r2, [pc, #96]	@ (800e088 <HAL_TIM_Base_Start_IT+0xdc>)
 800e028:	4293      	cmp	r3, r2
 800e02a:	d111      	bne.n	800e050 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	689b      	ldr	r3, [r3, #8]
 800e032:	f003 0307 	and.w	r3, r3, #7
 800e036:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	2b06      	cmp	r3, #6
 800e03c:	d010      	beq.n	800e060 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	681a      	ldr	r2, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	f042 0201 	orr.w	r2, r2, #1
 800e04c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e04e:	e007      	b.n	800e060 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	681a      	ldr	r2, [r3, #0]
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f042 0201 	orr.w	r2, r2, #1
 800e05e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e060:	2300      	movs	r3, #0
}
 800e062:	4618      	mov	r0, r3
 800e064:	3714      	adds	r7, #20
 800e066:	46bd      	mov	sp, r7
 800e068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06c:	4770      	bx	lr
 800e06e:	bf00      	nop
 800e070:	40010000 	.word	0x40010000
 800e074:	40000400 	.word	0x40000400
 800e078:	40000800 	.word	0x40000800
 800e07c:	40000c00 	.word	0x40000c00
 800e080:	40010400 	.word	0x40010400
 800e084:	40014000 	.word	0x40014000
 800e088:	40001800 	.word	0x40001800

0800e08c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e08c:	b580      	push	{r7, lr}
 800e08e:	b082      	sub	sp, #8
 800e090:	af00      	add	r7, sp, #0
 800e092:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d101      	bne.n	800e09e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e09a:	2301      	movs	r3, #1
 800e09c:	e041      	b.n	800e122 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e09e:	687b      	ldr	r3, [r7, #4]
 800e0a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e0a4:	b2db      	uxtb	r3, r3
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	d106      	bne.n	800e0b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f000 f88d 	bl	800e1d2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2202      	movs	r2, #2
 800e0bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	3304      	adds	r3, #4
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	4610      	mov	r0, r2
 800e0cc:	f000 fc00 	bl	800e8d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2201      	movs	r2, #1
 800e0d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	2201      	movs	r2, #1
 800e0e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2201      	movs	r2, #1
 800e0ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2201      	movs	r2, #1
 800e0f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2201      	movs	r2, #1
 800e104:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2201      	movs	r2, #1
 800e10c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2201      	movs	r2, #1
 800e114:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	2201      	movs	r2, #1
 800e11c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e120:	2300      	movs	r3, #0
}
 800e122:	4618      	mov	r0, r3
 800e124:	3708      	adds	r7, #8
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}

0800e12a <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800e12a:	b580      	push	{r7, lr}
 800e12c:	b082      	sub	sp, #8
 800e12e:	af00      	add	r7, sp, #0
 800e130:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	2202      	movs	r2, #2
 800e136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	6a1a      	ldr	r2, [r3, #32]
 800e140:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e144:	4013      	ands	r3, r2
 800e146:	2b00      	cmp	r3, #0
 800e148:	d10f      	bne.n	800e16a <HAL_TIM_PWM_DeInit+0x40>
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	6a1a      	ldr	r2, [r3, #32]
 800e150:	f240 4344 	movw	r3, #1092	@ 0x444
 800e154:	4013      	ands	r3, r2
 800e156:	2b00      	cmp	r3, #0
 800e158:	d107      	bne.n	800e16a <HAL_TIM_PWM_DeInit+0x40>
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	681a      	ldr	r2, [r3, #0]
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	f022 0201 	bic.w	r2, r2, #1
 800e168:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f000 f83b 	bl	800e1e6 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2200      	movs	r2, #0
 800e174:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2200      	movs	r2, #0
 800e184:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	2200      	movs	r2, #0
 800e18c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	2200      	movs	r2, #0
 800e194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	2200      	movs	r2, #0
 800e19c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2200      	movs	r2, #0
 800e1ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	2200      	movs	r2, #0
 800e1c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e1c8:	2300      	movs	r3, #0
}
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	3708      	adds	r7, #8
 800e1ce:	46bd      	mov	sp, r7
 800e1d0:	bd80      	pop	{r7, pc}

0800e1d2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e1d2:	b480      	push	{r7}
 800e1d4:	b083      	sub	sp, #12
 800e1d6:	af00      	add	r7, sp, #0
 800e1d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e1da:	bf00      	nop
 800e1dc:	370c      	adds	r7, #12
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1e4:	4770      	bx	lr

0800e1e6 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800e1e6:	b480      	push	{r7}
 800e1e8:	b083      	sub	sp, #12
 800e1ea:	af00      	add	r7, sp, #0
 800e1ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800e1ee:	bf00      	nop
 800e1f0:	370c      	adds	r7, #12
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f8:	4770      	bx	lr
	...

0800e1fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b084      	sub	sp, #16
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d109      	bne.n	800e220 <HAL_TIM_PWM_Start+0x24>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e212:	b2db      	uxtb	r3, r3
 800e214:	2b01      	cmp	r3, #1
 800e216:	bf14      	ite	ne
 800e218:	2301      	movne	r3, #1
 800e21a:	2300      	moveq	r3, #0
 800e21c:	b2db      	uxtb	r3, r3
 800e21e:	e022      	b.n	800e266 <HAL_TIM_PWM_Start+0x6a>
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	2b04      	cmp	r3, #4
 800e224:	d109      	bne.n	800e23a <HAL_TIM_PWM_Start+0x3e>
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b01      	cmp	r3, #1
 800e230:	bf14      	ite	ne
 800e232:	2301      	movne	r3, #1
 800e234:	2300      	moveq	r3, #0
 800e236:	b2db      	uxtb	r3, r3
 800e238:	e015      	b.n	800e266 <HAL_TIM_PWM_Start+0x6a>
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	2b08      	cmp	r3, #8
 800e23e:	d109      	bne.n	800e254 <HAL_TIM_PWM_Start+0x58>
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e246:	b2db      	uxtb	r3, r3
 800e248:	2b01      	cmp	r3, #1
 800e24a:	bf14      	ite	ne
 800e24c:	2301      	movne	r3, #1
 800e24e:	2300      	moveq	r3, #0
 800e250:	b2db      	uxtb	r3, r3
 800e252:	e008      	b.n	800e266 <HAL_TIM_PWM_Start+0x6a>
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	2b01      	cmp	r3, #1
 800e25e:	bf14      	ite	ne
 800e260:	2301      	movne	r3, #1
 800e262:	2300      	moveq	r3, #0
 800e264:	b2db      	uxtb	r3, r3
 800e266:	2b00      	cmp	r3, #0
 800e268:	d001      	beq.n	800e26e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e26a:	2301      	movs	r3, #1
 800e26c:	e07c      	b.n	800e368 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e26e:	683b      	ldr	r3, [r7, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d104      	bne.n	800e27e <HAL_TIM_PWM_Start+0x82>
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2202      	movs	r2, #2
 800e278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e27c:	e013      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xaa>
 800e27e:	683b      	ldr	r3, [r7, #0]
 800e280:	2b04      	cmp	r3, #4
 800e282:	d104      	bne.n	800e28e <HAL_TIM_PWM_Start+0x92>
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	2202      	movs	r2, #2
 800e288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e28c:	e00b      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xaa>
 800e28e:	683b      	ldr	r3, [r7, #0]
 800e290:	2b08      	cmp	r3, #8
 800e292:	d104      	bne.n	800e29e <HAL_TIM_PWM_Start+0xa2>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2202      	movs	r2, #2
 800e298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e29c:	e003      	b.n	800e2a6 <HAL_TIM_PWM_Start+0xaa>
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	2202      	movs	r2, #2
 800e2a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2201      	movs	r2, #1
 800e2ac:	6839      	ldr	r1, [r7, #0]
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	f000 fe04 	bl	800eebc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	4a2d      	ldr	r2, [pc, #180]	@ (800e370 <HAL_TIM_PWM_Start+0x174>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	d004      	beq.n	800e2c8 <HAL_TIM_PWM_Start+0xcc>
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	4a2c      	ldr	r2, [pc, #176]	@ (800e374 <HAL_TIM_PWM_Start+0x178>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d101      	bne.n	800e2cc <HAL_TIM_PWM_Start+0xd0>
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e000      	b.n	800e2ce <HAL_TIM_PWM_Start+0xd2>
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	d007      	beq.n	800e2e2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e2e0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a22      	ldr	r2, [pc, #136]	@ (800e370 <HAL_TIM_PWM_Start+0x174>)
 800e2e8:	4293      	cmp	r3, r2
 800e2ea:	d022      	beq.n	800e332 <HAL_TIM_PWM_Start+0x136>
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e2f4:	d01d      	beq.n	800e332 <HAL_TIM_PWM_Start+0x136>
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	681b      	ldr	r3, [r3, #0]
 800e2fa:	4a1f      	ldr	r2, [pc, #124]	@ (800e378 <HAL_TIM_PWM_Start+0x17c>)
 800e2fc:	4293      	cmp	r3, r2
 800e2fe:	d018      	beq.n	800e332 <HAL_TIM_PWM_Start+0x136>
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	4a1d      	ldr	r2, [pc, #116]	@ (800e37c <HAL_TIM_PWM_Start+0x180>)
 800e306:	4293      	cmp	r3, r2
 800e308:	d013      	beq.n	800e332 <HAL_TIM_PWM_Start+0x136>
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	4a1c      	ldr	r2, [pc, #112]	@ (800e380 <HAL_TIM_PWM_Start+0x184>)
 800e310:	4293      	cmp	r3, r2
 800e312:	d00e      	beq.n	800e332 <HAL_TIM_PWM_Start+0x136>
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	681b      	ldr	r3, [r3, #0]
 800e318:	4a16      	ldr	r2, [pc, #88]	@ (800e374 <HAL_TIM_PWM_Start+0x178>)
 800e31a:	4293      	cmp	r3, r2
 800e31c:	d009      	beq.n	800e332 <HAL_TIM_PWM_Start+0x136>
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	4a18      	ldr	r2, [pc, #96]	@ (800e384 <HAL_TIM_PWM_Start+0x188>)
 800e324:	4293      	cmp	r3, r2
 800e326:	d004      	beq.n	800e332 <HAL_TIM_PWM_Start+0x136>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	4a16      	ldr	r2, [pc, #88]	@ (800e388 <HAL_TIM_PWM_Start+0x18c>)
 800e32e:	4293      	cmp	r3, r2
 800e330:	d111      	bne.n	800e356 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	689b      	ldr	r3, [r3, #8]
 800e338:	f003 0307 	and.w	r3, r3, #7
 800e33c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	2b06      	cmp	r3, #6
 800e342:	d010      	beq.n	800e366 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	681a      	ldr	r2, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f042 0201 	orr.w	r2, r2, #1
 800e352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e354:	e007      	b.n	800e366 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	681a      	ldr	r2, [r3, #0]
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f042 0201 	orr.w	r2, r2, #1
 800e364:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e366:	2300      	movs	r3, #0
}
 800e368:	4618      	mov	r0, r3
 800e36a:	3710      	adds	r7, #16
 800e36c:	46bd      	mov	sp, r7
 800e36e:	bd80      	pop	{r7, pc}
 800e370:	40010000 	.word	0x40010000
 800e374:	40010400 	.word	0x40010400
 800e378:	40000400 	.word	0x40000400
 800e37c:	40000800 	.word	0x40000800
 800e380:	40000c00 	.word	0x40000c00
 800e384:	40014000 	.word	0x40014000
 800e388:	40001800 	.word	0x40001800

0800e38c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e38c:	b580      	push	{r7, lr}
 800e38e:	b084      	sub	sp, #16
 800e390:	af00      	add	r7, sp, #0
 800e392:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	68db      	ldr	r3, [r3, #12]
 800e39a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	691b      	ldr	r3, [r3, #16]
 800e3a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	f003 0302 	and.w	r3, r3, #2
 800e3aa:	2b00      	cmp	r3, #0
 800e3ac:	d020      	beq.n	800e3f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	f003 0302 	and.w	r3, r3, #2
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d01b      	beq.n	800e3f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	f06f 0202 	mvn.w	r2, #2
 800e3c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	2201      	movs	r2, #1
 800e3c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	699b      	ldr	r3, [r3, #24]
 800e3ce:	f003 0303 	and.w	r3, r3, #3
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d003      	beq.n	800e3de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e3d6:	6878      	ldr	r0, [r7, #4]
 800e3d8:	f000 fa5b 	bl	800e892 <HAL_TIM_IC_CaptureCallback>
 800e3dc:	e005      	b.n	800e3ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 fa4d 	bl	800e87e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f000 fa5e 	bl	800e8a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	f003 0304 	and.w	r3, r3, #4
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d020      	beq.n	800e43c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f003 0304 	and.w	r3, r3, #4
 800e400:	2b00      	cmp	r3, #0
 800e402:	d01b      	beq.n	800e43c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	f06f 0204 	mvn.w	r2, #4
 800e40c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	2202      	movs	r2, #2
 800e412:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	699b      	ldr	r3, [r3, #24]
 800e41a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d003      	beq.n	800e42a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e422:	6878      	ldr	r0, [r7, #4]
 800e424:	f000 fa35 	bl	800e892 <HAL_TIM_IC_CaptureCallback>
 800e428:	e005      	b.n	800e436 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e42a:	6878      	ldr	r0, [r7, #4]
 800e42c:	f000 fa27 	bl	800e87e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 fa38 	bl	800e8a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	2200      	movs	r2, #0
 800e43a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e43c:	68bb      	ldr	r3, [r7, #8]
 800e43e:	f003 0308 	and.w	r3, r3, #8
 800e442:	2b00      	cmp	r3, #0
 800e444:	d020      	beq.n	800e488 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	f003 0308 	and.w	r3, r3, #8
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d01b      	beq.n	800e488 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f06f 0208 	mvn.w	r2, #8
 800e458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2204      	movs	r2, #4
 800e45e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	69db      	ldr	r3, [r3, #28]
 800e466:	f003 0303 	and.w	r3, r3, #3
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d003      	beq.n	800e476 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e46e:	6878      	ldr	r0, [r7, #4]
 800e470:	f000 fa0f 	bl	800e892 <HAL_TIM_IC_CaptureCallback>
 800e474:	e005      	b.n	800e482 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f000 fa01 	bl	800e87e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e47c:	6878      	ldr	r0, [r7, #4]
 800e47e:	f000 fa12 	bl	800e8a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2200      	movs	r2, #0
 800e486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	f003 0310 	and.w	r3, r3, #16
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d020      	beq.n	800e4d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f003 0310 	and.w	r3, r3, #16
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d01b      	beq.n	800e4d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f06f 0210 	mvn.w	r2, #16
 800e4a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	2208      	movs	r2, #8
 800e4aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681b      	ldr	r3, [r3, #0]
 800e4b0:	69db      	ldr	r3, [r3, #28]
 800e4b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d003      	beq.n	800e4c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e4ba:	6878      	ldr	r0, [r7, #4]
 800e4bc:	f000 f9e9 	bl	800e892 <HAL_TIM_IC_CaptureCallback>
 800e4c0:	e005      	b.n	800e4ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e4c2:	6878      	ldr	r0, [r7, #4]
 800e4c4:	f000 f9db 	bl	800e87e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e4c8:	6878      	ldr	r0, [r7, #4]
 800e4ca:	f000 f9ec 	bl	800e8a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	f003 0301 	and.w	r3, r3, #1
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d00c      	beq.n	800e4f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	f003 0301 	and.w	r3, r3, #1
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d007      	beq.n	800e4f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	f06f 0201 	mvn.w	r2, #1
 800e4f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e4f2:	6878      	ldr	r0, [r7, #4]
 800e4f4:	f7fa f89e 	bl	8008634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e4f8:	68bb      	ldr	r3, [r7, #8]
 800e4fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d00c      	beq.n	800e51c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d007      	beq.n	800e51c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e516:	6878      	ldr	r0, [r7, #4]
 800e518:	f000 fd7c 	bl	800f014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e522:	2b00      	cmp	r3, #0
 800e524:	d00c      	beq.n	800e540 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d007      	beq.n	800e540 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e53a:	6878      	ldr	r0, [r7, #4]
 800e53c:	f000 f9bd 	bl	800e8ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	f003 0320 	and.w	r3, r3, #32
 800e546:	2b00      	cmp	r3, #0
 800e548:	d00c      	beq.n	800e564 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	f003 0320 	and.w	r3, r3, #32
 800e550:	2b00      	cmp	r3, #0
 800e552:	d007      	beq.n	800e564 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	f06f 0220 	mvn.w	r2, #32
 800e55c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f000 fd4e 	bl	800f000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e564:	bf00      	nop
 800e566:	3710      	adds	r7, #16
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}

0800e56c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e56c:	b580      	push	{r7, lr}
 800e56e:	b086      	sub	sp, #24
 800e570:	af00      	add	r7, sp, #0
 800e572:	60f8      	str	r0, [r7, #12]
 800e574:	60b9      	str	r1, [r7, #8]
 800e576:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e578:	2300      	movs	r3, #0
 800e57a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e582:	2b01      	cmp	r3, #1
 800e584:	d101      	bne.n	800e58a <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e586:	2302      	movs	r3, #2
 800e588:	e0ae      	b.n	800e6e8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	2201      	movs	r2, #1
 800e58e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2b0c      	cmp	r3, #12
 800e596:	f200 809f 	bhi.w	800e6d8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e59a:	a201      	add	r2, pc, #4	@ (adr r2, 800e5a0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e59c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a0:	0800e5d5 	.word	0x0800e5d5
 800e5a4:	0800e6d9 	.word	0x0800e6d9
 800e5a8:	0800e6d9 	.word	0x0800e6d9
 800e5ac:	0800e6d9 	.word	0x0800e6d9
 800e5b0:	0800e615 	.word	0x0800e615
 800e5b4:	0800e6d9 	.word	0x0800e6d9
 800e5b8:	0800e6d9 	.word	0x0800e6d9
 800e5bc:	0800e6d9 	.word	0x0800e6d9
 800e5c0:	0800e657 	.word	0x0800e657
 800e5c4:	0800e6d9 	.word	0x0800e6d9
 800e5c8:	0800e6d9 	.word	0x0800e6d9
 800e5cc:	0800e6d9 	.word	0x0800e6d9
 800e5d0:	0800e697 	.word	0x0800e697
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	68b9      	ldr	r1, [r7, #8]
 800e5da:	4618      	mov	r0, r3
 800e5dc:	f000 fa24 	bl	800ea28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	699a      	ldr	r2, [r3, #24]
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f042 0208 	orr.w	r2, r2, #8
 800e5ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	699a      	ldr	r2, [r3, #24]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	f022 0204 	bic.w	r2, r2, #4
 800e5fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	6999      	ldr	r1, [r3, #24]
 800e606:	68bb      	ldr	r3, [r7, #8]
 800e608:	691a      	ldr	r2, [r3, #16]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	430a      	orrs	r2, r1
 800e610:	619a      	str	r2, [r3, #24]
      break;
 800e612:	e064      	b.n	800e6de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	68b9      	ldr	r1, [r7, #8]
 800e61a:	4618      	mov	r0, r3
 800e61c:	f000 fa74 	bl	800eb08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	699a      	ldr	r2, [r3, #24]
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e62e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	699a      	ldr	r2, [r3, #24]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e63e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	6999      	ldr	r1, [r3, #24]
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	691b      	ldr	r3, [r3, #16]
 800e64a:	021a      	lsls	r2, r3, #8
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	430a      	orrs	r2, r1
 800e652:	619a      	str	r2, [r3, #24]
      break;
 800e654:	e043      	b.n	800e6de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	68b9      	ldr	r1, [r7, #8]
 800e65c:	4618      	mov	r0, r3
 800e65e:	f000 fac9 	bl	800ebf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	69da      	ldr	r2, [r3, #28]
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	f042 0208 	orr.w	r2, r2, #8
 800e670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e672:	68fb      	ldr	r3, [r7, #12]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	69da      	ldr	r2, [r3, #28]
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	f022 0204 	bic.w	r2, r2, #4
 800e680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	69d9      	ldr	r1, [r3, #28]
 800e688:	68bb      	ldr	r3, [r7, #8]
 800e68a:	691a      	ldr	r2, [r3, #16]
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	430a      	orrs	r2, r1
 800e692:	61da      	str	r2, [r3, #28]
      break;
 800e694:	e023      	b.n	800e6de <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e696:	68fb      	ldr	r3, [r7, #12]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	68b9      	ldr	r1, [r7, #8]
 800e69c:	4618      	mov	r0, r3
 800e69e:	f000 fb1d 	bl	800ecdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e6a2:	68fb      	ldr	r3, [r7, #12]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	69da      	ldr	r2, [r3, #28]
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800e6b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	69da      	ldr	r2, [r3, #28]
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800e6c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	69d9      	ldr	r1, [r3, #28]
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	691b      	ldr	r3, [r3, #16]
 800e6cc:	021a      	lsls	r2, r3, #8
 800e6ce:	68fb      	ldr	r3, [r7, #12]
 800e6d0:	681b      	ldr	r3, [r3, #0]
 800e6d2:	430a      	orrs	r2, r1
 800e6d4:	61da      	str	r2, [r3, #28]
      break;
 800e6d6:	e002      	b.n	800e6de <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800e6d8:	2301      	movs	r3, #1
 800e6da:	75fb      	strb	r3, [r7, #23]
      break;
 800e6dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	2200      	movs	r2, #0
 800e6e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e6e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3718      	adds	r7, #24
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}

0800e6f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e6f0:	b580      	push	{r7, lr}
 800e6f2:	b084      	sub	sp, #16
 800e6f4:	af00      	add	r7, sp, #0
 800e6f6:	6078      	str	r0, [r7, #4]
 800e6f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e704:	2b01      	cmp	r3, #1
 800e706:	d101      	bne.n	800e70c <HAL_TIM_ConfigClockSource+0x1c>
 800e708:	2302      	movs	r3, #2
 800e70a:	e0b4      	b.n	800e876 <HAL_TIM_ConfigClockSource+0x186>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	2201      	movs	r2, #1
 800e710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2202      	movs	r2, #2
 800e718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	689b      	ldr	r3, [r3, #8]
 800e722:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800e72a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800e732:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	68ba      	ldr	r2, [r7, #8]
 800e73a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e744:	d03e      	beq.n	800e7c4 <HAL_TIM_ConfigClockSource+0xd4>
 800e746:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e74a:	f200 8087 	bhi.w	800e85c <HAL_TIM_ConfigClockSource+0x16c>
 800e74e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e752:	f000 8086 	beq.w	800e862 <HAL_TIM_ConfigClockSource+0x172>
 800e756:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e75a:	d87f      	bhi.n	800e85c <HAL_TIM_ConfigClockSource+0x16c>
 800e75c:	2b70      	cmp	r3, #112	@ 0x70
 800e75e:	d01a      	beq.n	800e796 <HAL_TIM_ConfigClockSource+0xa6>
 800e760:	2b70      	cmp	r3, #112	@ 0x70
 800e762:	d87b      	bhi.n	800e85c <HAL_TIM_ConfigClockSource+0x16c>
 800e764:	2b60      	cmp	r3, #96	@ 0x60
 800e766:	d050      	beq.n	800e80a <HAL_TIM_ConfigClockSource+0x11a>
 800e768:	2b60      	cmp	r3, #96	@ 0x60
 800e76a:	d877      	bhi.n	800e85c <HAL_TIM_ConfigClockSource+0x16c>
 800e76c:	2b50      	cmp	r3, #80	@ 0x50
 800e76e:	d03c      	beq.n	800e7ea <HAL_TIM_ConfigClockSource+0xfa>
 800e770:	2b50      	cmp	r3, #80	@ 0x50
 800e772:	d873      	bhi.n	800e85c <HAL_TIM_ConfigClockSource+0x16c>
 800e774:	2b40      	cmp	r3, #64	@ 0x40
 800e776:	d058      	beq.n	800e82a <HAL_TIM_ConfigClockSource+0x13a>
 800e778:	2b40      	cmp	r3, #64	@ 0x40
 800e77a:	d86f      	bhi.n	800e85c <HAL_TIM_ConfigClockSource+0x16c>
 800e77c:	2b30      	cmp	r3, #48	@ 0x30
 800e77e:	d064      	beq.n	800e84a <HAL_TIM_ConfigClockSource+0x15a>
 800e780:	2b30      	cmp	r3, #48	@ 0x30
 800e782:	d86b      	bhi.n	800e85c <HAL_TIM_ConfigClockSource+0x16c>
 800e784:	2b20      	cmp	r3, #32
 800e786:	d060      	beq.n	800e84a <HAL_TIM_ConfigClockSource+0x15a>
 800e788:	2b20      	cmp	r3, #32
 800e78a:	d867      	bhi.n	800e85c <HAL_TIM_ConfigClockSource+0x16c>
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d05c      	beq.n	800e84a <HAL_TIM_ConfigClockSource+0x15a>
 800e790:	2b10      	cmp	r3, #16
 800e792:	d05a      	beq.n	800e84a <HAL_TIM_ConfigClockSource+0x15a>
 800e794:	e062      	b.n	800e85c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e79e:	683b      	ldr	r3, [r7, #0]
 800e7a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e7a2:	683b      	ldr	r3, [r7, #0]
 800e7a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e7a6:	f000 fb69 	bl	800ee7c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e7b2:	68bb      	ldr	r3, [r7, #8]
 800e7b4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800e7b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	68ba      	ldr	r2, [r7, #8]
 800e7c0:	609a      	str	r2, [r3, #8]
      break;
 800e7c2:	e04f      	b.n	800e864 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800e7c8:	683b      	ldr	r3, [r7, #0]
 800e7ca:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800e7cc:	683b      	ldr	r3, [r7, #0]
 800e7ce:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800e7d0:	683b      	ldr	r3, [r7, #0]
 800e7d2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800e7d4:	f000 fb52 	bl	800ee7c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	689a      	ldr	r2, [r3, #8]
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e7e6:	609a      	str	r2, [r3, #8]
      break;
 800e7e8:	e03c      	b.n	800e864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e7f6:	461a      	mov	r2, r3
 800e7f8:	f000 fac6 	bl	800ed88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	2150      	movs	r1, #80	@ 0x50
 800e802:	4618      	mov	r0, r3
 800e804:	f000 fb1f 	bl	800ee46 <TIM_ITRx_SetConfig>
      break;
 800e808:	e02c      	b.n	800e864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e80e:	683b      	ldr	r3, [r7, #0]
 800e810:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e816:	461a      	mov	r2, r3
 800e818:	f000 fae5 	bl	800ede6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	2160      	movs	r1, #96	@ 0x60
 800e822:	4618      	mov	r0, r3
 800e824:	f000 fb0f 	bl	800ee46 <TIM_ITRx_SetConfig>
      break;
 800e828:	e01c      	b.n	800e864 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e836:	461a      	mov	r2, r3
 800e838:	f000 faa6 	bl	800ed88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	2140      	movs	r1, #64	@ 0x40
 800e842:	4618      	mov	r0, r3
 800e844:	f000 faff 	bl	800ee46 <TIM_ITRx_SetConfig>
      break;
 800e848:	e00c      	b.n	800e864 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681a      	ldr	r2, [r3, #0]
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	4619      	mov	r1, r3
 800e854:	4610      	mov	r0, r2
 800e856:	f000 faf6 	bl	800ee46 <TIM_ITRx_SetConfig>
      break;
 800e85a:	e003      	b.n	800e864 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800e85c:	2301      	movs	r3, #1
 800e85e:	73fb      	strb	r3, [r7, #15]
      break;
 800e860:	e000      	b.n	800e864 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800e862:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2201      	movs	r2, #1
 800e868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2200      	movs	r2, #0
 800e870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800e874:	7bfb      	ldrb	r3, [r7, #15]
}
 800e876:	4618      	mov	r0, r3
 800e878:	3710      	adds	r7, #16
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}

0800e87e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e87e:	b480      	push	{r7}
 800e880:	b083      	sub	sp, #12
 800e882:	af00      	add	r7, sp, #0
 800e884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e886:	bf00      	nop
 800e888:	370c      	adds	r7, #12
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr

0800e892 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e892:	b480      	push	{r7}
 800e894:	b083      	sub	sp, #12
 800e896:	af00      	add	r7, sp, #0
 800e898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e89a:	bf00      	nop
 800e89c:	370c      	adds	r7, #12
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr

0800e8a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e8a6:	b480      	push	{r7}
 800e8a8:	b083      	sub	sp, #12
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e8ae:	bf00      	nop
 800e8b0:	370c      	adds	r7, #12
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr

0800e8ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e8ba:	b480      	push	{r7}
 800e8bc:	b083      	sub	sp, #12
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e8c2:	bf00      	nop
 800e8c4:	370c      	adds	r7, #12
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8cc:	4770      	bx	lr
	...

0800e8d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800e8d0:	b480      	push	{r7}
 800e8d2:	b085      	sub	sp, #20
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
 800e8d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e8e0:	687b      	ldr	r3, [r7, #4]
 800e8e2:	4a46      	ldr	r2, [pc, #280]	@ (800e9fc <TIM_Base_SetConfig+0x12c>)
 800e8e4:	4293      	cmp	r3, r2
 800e8e6:	d013      	beq.n	800e910 <TIM_Base_SetConfig+0x40>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e8ee:	d00f      	beq.n	800e910 <TIM_Base_SetConfig+0x40>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	4a43      	ldr	r2, [pc, #268]	@ (800ea00 <TIM_Base_SetConfig+0x130>)
 800e8f4:	4293      	cmp	r3, r2
 800e8f6:	d00b      	beq.n	800e910 <TIM_Base_SetConfig+0x40>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	4a42      	ldr	r2, [pc, #264]	@ (800ea04 <TIM_Base_SetConfig+0x134>)
 800e8fc:	4293      	cmp	r3, r2
 800e8fe:	d007      	beq.n	800e910 <TIM_Base_SetConfig+0x40>
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	4a41      	ldr	r2, [pc, #260]	@ (800ea08 <TIM_Base_SetConfig+0x138>)
 800e904:	4293      	cmp	r3, r2
 800e906:	d003      	beq.n	800e910 <TIM_Base_SetConfig+0x40>
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	4a40      	ldr	r2, [pc, #256]	@ (800ea0c <TIM_Base_SetConfig+0x13c>)
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d108      	bne.n	800e922 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e910:	68fb      	ldr	r3, [r7, #12]
 800e912:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800e916:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	685b      	ldr	r3, [r3, #4]
 800e91c:	68fa      	ldr	r2, [r7, #12]
 800e91e:	4313      	orrs	r3, r2
 800e920:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e922:	687b      	ldr	r3, [r7, #4]
 800e924:	4a35      	ldr	r2, [pc, #212]	@ (800e9fc <TIM_Base_SetConfig+0x12c>)
 800e926:	4293      	cmp	r3, r2
 800e928:	d02b      	beq.n	800e982 <TIM_Base_SetConfig+0xb2>
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e930:	d027      	beq.n	800e982 <TIM_Base_SetConfig+0xb2>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	4a32      	ldr	r2, [pc, #200]	@ (800ea00 <TIM_Base_SetConfig+0x130>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d023      	beq.n	800e982 <TIM_Base_SetConfig+0xb2>
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	4a31      	ldr	r2, [pc, #196]	@ (800ea04 <TIM_Base_SetConfig+0x134>)
 800e93e:	4293      	cmp	r3, r2
 800e940:	d01f      	beq.n	800e982 <TIM_Base_SetConfig+0xb2>
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	4a30      	ldr	r2, [pc, #192]	@ (800ea08 <TIM_Base_SetConfig+0x138>)
 800e946:	4293      	cmp	r3, r2
 800e948:	d01b      	beq.n	800e982 <TIM_Base_SetConfig+0xb2>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	4a2f      	ldr	r2, [pc, #188]	@ (800ea0c <TIM_Base_SetConfig+0x13c>)
 800e94e:	4293      	cmp	r3, r2
 800e950:	d017      	beq.n	800e982 <TIM_Base_SetConfig+0xb2>
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	4a2e      	ldr	r2, [pc, #184]	@ (800ea10 <TIM_Base_SetConfig+0x140>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d013      	beq.n	800e982 <TIM_Base_SetConfig+0xb2>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	4a2d      	ldr	r2, [pc, #180]	@ (800ea14 <TIM_Base_SetConfig+0x144>)
 800e95e:	4293      	cmp	r3, r2
 800e960:	d00f      	beq.n	800e982 <TIM_Base_SetConfig+0xb2>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	4a2c      	ldr	r2, [pc, #176]	@ (800ea18 <TIM_Base_SetConfig+0x148>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d00b      	beq.n	800e982 <TIM_Base_SetConfig+0xb2>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	4a2b      	ldr	r2, [pc, #172]	@ (800ea1c <TIM_Base_SetConfig+0x14c>)
 800e96e:	4293      	cmp	r3, r2
 800e970:	d007      	beq.n	800e982 <TIM_Base_SetConfig+0xb2>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	4a2a      	ldr	r2, [pc, #168]	@ (800ea20 <TIM_Base_SetConfig+0x150>)
 800e976:	4293      	cmp	r3, r2
 800e978:	d003      	beq.n	800e982 <TIM_Base_SetConfig+0xb2>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	4a29      	ldr	r2, [pc, #164]	@ (800ea24 <TIM_Base_SetConfig+0x154>)
 800e97e:	4293      	cmp	r3, r2
 800e980:	d108      	bne.n	800e994 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800e988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	68fa      	ldr	r2, [r7, #12]
 800e990:	4313      	orrs	r3, r2
 800e992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800e99a:	683b      	ldr	r3, [r7, #0]
 800e99c:	695b      	ldr	r3, [r3, #20]
 800e99e:	4313      	orrs	r3, r2
 800e9a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	689a      	ldr	r2, [r3, #8]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e9b0:	683b      	ldr	r3, [r7, #0]
 800e9b2:	681a      	ldr	r2, [r3, #0]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	4a10      	ldr	r2, [pc, #64]	@ (800e9fc <TIM_Base_SetConfig+0x12c>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d003      	beq.n	800e9c8 <TIM_Base_SetConfig+0xf8>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	4a12      	ldr	r2, [pc, #72]	@ (800ea0c <TIM_Base_SetConfig+0x13c>)
 800e9c4:	4293      	cmp	r3, r2
 800e9c6:	d103      	bne.n	800e9d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	691a      	ldr	r2, [r3, #16]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	691b      	ldr	r3, [r3, #16]
 800e9da:	f003 0301 	and.w	r3, r3, #1
 800e9de:	2b01      	cmp	r3, #1
 800e9e0:	d105      	bne.n	800e9ee <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	691b      	ldr	r3, [r3, #16]
 800e9e6:	f023 0201 	bic.w	r2, r3, #1
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	611a      	str	r2, [r3, #16]
  }
}
 800e9ee:	bf00      	nop
 800e9f0:	3714      	adds	r7, #20
 800e9f2:	46bd      	mov	sp, r7
 800e9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f8:	4770      	bx	lr
 800e9fa:	bf00      	nop
 800e9fc:	40010000 	.word	0x40010000
 800ea00:	40000400 	.word	0x40000400
 800ea04:	40000800 	.word	0x40000800
 800ea08:	40000c00 	.word	0x40000c00
 800ea0c:	40010400 	.word	0x40010400
 800ea10:	40014000 	.word	0x40014000
 800ea14:	40014400 	.word	0x40014400
 800ea18:	40014800 	.word	0x40014800
 800ea1c:	40001800 	.word	0x40001800
 800ea20:	40001c00 	.word	0x40001c00
 800ea24:	40002000 	.word	0x40002000

0800ea28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b087      	sub	sp, #28
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	6a1b      	ldr	r3, [r3, #32]
 800ea36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6a1b      	ldr	r3, [r3, #32]
 800ea3c:	f023 0201 	bic.w	r2, r3, #1
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	699b      	ldr	r3, [r3, #24]
 800ea4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ea56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f023 0303 	bic.w	r3, r3, #3
 800ea5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ea60:	683b      	ldr	r3, [r7, #0]
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	68fa      	ldr	r2, [r7, #12]
 800ea66:	4313      	orrs	r3, r2
 800ea68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ea6a:	697b      	ldr	r3, [r7, #20]
 800ea6c:	f023 0302 	bic.w	r3, r3, #2
 800ea70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	689b      	ldr	r3, [r3, #8]
 800ea76:	697a      	ldr	r2, [r7, #20]
 800ea78:	4313      	orrs	r3, r2
 800ea7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	4a20      	ldr	r2, [pc, #128]	@ (800eb00 <TIM_OC1_SetConfig+0xd8>)
 800ea80:	4293      	cmp	r3, r2
 800ea82:	d003      	beq.n	800ea8c <TIM_OC1_SetConfig+0x64>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	4a1f      	ldr	r2, [pc, #124]	@ (800eb04 <TIM_OC1_SetConfig+0xdc>)
 800ea88:	4293      	cmp	r3, r2
 800ea8a:	d10c      	bne.n	800eaa6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ea8c:	697b      	ldr	r3, [r7, #20]
 800ea8e:	f023 0308 	bic.w	r3, r3, #8
 800ea92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	68db      	ldr	r3, [r3, #12]
 800ea98:	697a      	ldr	r2, [r7, #20]
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ea9e:	697b      	ldr	r3, [r7, #20]
 800eaa0:	f023 0304 	bic.w	r3, r3, #4
 800eaa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	4a15      	ldr	r2, [pc, #84]	@ (800eb00 <TIM_OC1_SetConfig+0xd8>)
 800eaaa:	4293      	cmp	r3, r2
 800eaac:	d003      	beq.n	800eab6 <TIM_OC1_SetConfig+0x8e>
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	4a14      	ldr	r2, [pc, #80]	@ (800eb04 <TIM_OC1_SetConfig+0xdc>)
 800eab2:	4293      	cmp	r3, r2
 800eab4:	d111      	bne.n	800eada <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eabc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eabe:	693b      	ldr	r3, [r7, #16]
 800eac0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	695b      	ldr	r3, [r3, #20]
 800eaca:	693a      	ldr	r2, [r7, #16]
 800eacc:	4313      	orrs	r3, r2
 800eace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	699b      	ldr	r3, [r3, #24]
 800ead4:	693a      	ldr	r2, [r7, #16]
 800ead6:	4313      	orrs	r3, r2
 800ead8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	693a      	ldr	r2, [r7, #16]
 800eade:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	68fa      	ldr	r2, [r7, #12]
 800eae4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eae6:	683b      	ldr	r3, [r7, #0]
 800eae8:	685a      	ldr	r2, [r3, #4]
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	697a      	ldr	r2, [r7, #20]
 800eaf2:	621a      	str	r2, [r3, #32]
}
 800eaf4:	bf00      	nop
 800eaf6:	371c      	adds	r7, #28
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr
 800eb00:	40010000 	.word	0x40010000
 800eb04:	40010400 	.word	0x40010400

0800eb08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800eb08:	b480      	push	{r7}
 800eb0a:	b087      	sub	sp, #28
 800eb0c:	af00      	add	r7, sp, #0
 800eb0e:	6078      	str	r0, [r7, #4]
 800eb10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a1b      	ldr	r3, [r3, #32]
 800eb16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6a1b      	ldr	r3, [r3, #32]
 800eb1c:	f023 0210 	bic.w	r2, r3, #16
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	685b      	ldr	r3, [r3, #4]
 800eb28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	699b      	ldr	r3, [r3, #24]
 800eb2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800eb36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800eb3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	021b      	lsls	r3, r3, #8
 800eb46:	68fa      	ldr	r2, [r7, #12]
 800eb48:	4313      	orrs	r3, r2
 800eb4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800eb4c:	697b      	ldr	r3, [r7, #20]
 800eb4e:	f023 0320 	bic.w	r3, r3, #32
 800eb52:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800eb54:	683b      	ldr	r3, [r7, #0]
 800eb56:	689b      	ldr	r3, [r3, #8]
 800eb58:	011b      	lsls	r3, r3, #4
 800eb5a:	697a      	ldr	r2, [r7, #20]
 800eb5c:	4313      	orrs	r3, r2
 800eb5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	4a22      	ldr	r2, [pc, #136]	@ (800ebec <TIM_OC2_SetConfig+0xe4>)
 800eb64:	4293      	cmp	r3, r2
 800eb66:	d003      	beq.n	800eb70 <TIM_OC2_SetConfig+0x68>
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	4a21      	ldr	r2, [pc, #132]	@ (800ebf0 <TIM_OC2_SetConfig+0xe8>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d10d      	bne.n	800eb8c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eb70:	697b      	ldr	r3, [r7, #20]
 800eb72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800eb76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	68db      	ldr	r3, [r3, #12]
 800eb7c:	011b      	lsls	r3, r3, #4
 800eb7e:	697a      	ldr	r2, [r7, #20]
 800eb80:	4313      	orrs	r3, r2
 800eb82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800eb8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	4a17      	ldr	r2, [pc, #92]	@ (800ebec <TIM_OC2_SetConfig+0xe4>)
 800eb90:	4293      	cmp	r3, r2
 800eb92:	d003      	beq.n	800eb9c <TIM_OC2_SetConfig+0x94>
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	4a16      	ldr	r2, [pc, #88]	@ (800ebf0 <TIM_OC2_SetConfig+0xe8>)
 800eb98:	4293      	cmp	r3, r2
 800eb9a:	d113      	bne.n	800ebc4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800eba2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ebaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	695b      	ldr	r3, [r3, #20]
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	693a      	ldr	r2, [r7, #16]
 800ebb4:	4313      	orrs	r3, r2
 800ebb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ebb8:	683b      	ldr	r3, [r7, #0]
 800ebba:	699b      	ldr	r3, [r3, #24]
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	693a      	ldr	r2, [r7, #16]
 800ebc0:	4313      	orrs	r3, r2
 800ebc2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	693a      	ldr	r2, [r7, #16]
 800ebc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ebd0:	683b      	ldr	r3, [r7, #0]
 800ebd2:	685a      	ldr	r2, [r3, #4]
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	697a      	ldr	r2, [r7, #20]
 800ebdc:	621a      	str	r2, [r3, #32]
}
 800ebde:	bf00      	nop
 800ebe0:	371c      	adds	r7, #28
 800ebe2:	46bd      	mov	sp, r7
 800ebe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe8:	4770      	bx	lr
 800ebea:	bf00      	nop
 800ebec:	40010000 	.word	0x40010000
 800ebf0:	40010400 	.word	0x40010400

0800ebf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ebf4:	b480      	push	{r7}
 800ebf6:	b087      	sub	sp, #28
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
 800ebfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	6a1b      	ldr	r3, [r3, #32]
 800ec02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a1b      	ldr	r3, [r3, #32]
 800ec08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	685b      	ldr	r3, [r3, #4]
 800ec14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	69db      	ldr	r3, [r3, #28]
 800ec1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ec22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	f023 0303 	bic.w	r3, r3, #3
 800ec2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ec2c:	683b      	ldr	r3, [r7, #0]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	68fa      	ldr	r2, [r7, #12]
 800ec32:	4313      	orrs	r3, r2
 800ec34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ec36:	697b      	ldr	r3, [r7, #20]
 800ec38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ec3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	689b      	ldr	r3, [r3, #8]
 800ec42:	021b      	lsls	r3, r3, #8
 800ec44:	697a      	ldr	r2, [r7, #20]
 800ec46:	4313      	orrs	r3, r2
 800ec48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	4a21      	ldr	r2, [pc, #132]	@ (800ecd4 <TIM_OC3_SetConfig+0xe0>)
 800ec4e:	4293      	cmp	r3, r2
 800ec50:	d003      	beq.n	800ec5a <TIM_OC3_SetConfig+0x66>
 800ec52:	687b      	ldr	r3, [r7, #4]
 800ec54:	4a20      	ldr	r2, [pc, #128]	@ (800ecd8 <TIM_OC3_SetConfig+0xe4>)
 800ec56:	4293      	cmp	r3, r2
 800ec58:	d10d      	bne.n	800ec76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ec60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ec62:	683b      	ldr	r3, [r7, #0]
 800ec64:	68db      	ldr	r3, [r3, #12]
 800ec66:	021b      	lsls	r3, r3, #8
 800ec68:	697a      	ldr	r2, [r7, #20]
 800ec6a:	4313      	orrs	r3, r2
 800ec6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ec74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	4a16      	ldr	r2, [pc, #88]	@ (800ecd4 <TIM_OC3_SetConfig+0xe0>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d003      	beq.n	800ec86 <TIM_OC3_SetConfig+0x92>
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	4a15      	ldr	r2, [pc, #84]	@ (800ecd8 <TIM_OC3_SetConfig+0xe4>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d113      	bne.n	800ecae <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ec8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ec8e:	693b      	ldr	r3, [r7, #16]
 800ec90:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ec94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ec96:	683b      	ldr	r3, [r7, #0]
 800ec98:	695b      	ldr	r3, [r3, #20]
 800ec9a:	011b      	lsls	r3, r3, #4
 800ec9c:	693a      	ldr	r2, [r7, #16]
 800ec9e:	4313      	orrs	r3, r2
 800eca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	699b      	ldr	r3, [r3, #24]
 800eca6:	011b      	lsls	r3, r3, #4
 800eca8:	693a      	ldr	r2, [r7, #16]
 800ecaa:	4313      	orrs	r3, r2
 800ecac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	693a      	ldr	r2, [r7, #16]
 800ecb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ecba:	683b      	ldr	r3, [r7, #0]
 800ecbc:	685a      	ldr	r2, [r3, #4]
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	697a      	ldr	r2, [r7, #20]
 800ecc6:	621a      	str	r2, [r3, #32]
}
 800ecc8:	bf00      	nop
 800ecca:	371c      	adds	r7, #28
 800eccc:	46bd      	mov	sp, r7
 800ecce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd2:	4770      	bx	lr
 800ecd4:	40010000 	.word	0x40010000
 800ecd8:	40010400 	.word	0x40010400

0800ecdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b087      	sub	sp, #28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6a1b      	ldr	r3, [r3, #32]
 800ecea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6a1b      	ldr	r3, [r3, #32]
 800ecf0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	685b      	ldr	r3, [r3, #4]
 800ecfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	69db      	ldr	r3, [r3, #28]
 800ed02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ed0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	021b      	lsls	r3, r3, #8
 800ed1a:	68fa      	ldr	r2, [r7, #12]
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800ed26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ed28:	683b      	ldr	r3, [r7, #0]
 800ed2a:	689b      	ldr	r3, [r3, #8]
 800ed2c:	031b      	lsls	r3, r3, #12
 800ed2e:	693a      	ldr	r2, [r7, #16]
 800ed30:	4313      	orrs	r3, r2
 800ed32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	4a12      	ldr	r2, [pc, #72]	@ (800ed80 <TIM_OC4_SetConfig+0xa4>)
 800ed38:	4293      	cmp	r3, r2
 800ed3a:	d003      	beq.n	800ed44 <TIM_OC4_SetConfig+0x68>
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	4a11      	ldr	r2, [pc, #68]	@ (800ed84 <TIM_OC4_SetConfig+0xa8>)
 800ed40:	4293      	cmp	r3, r2
 800ed42:	d109      	bne.n	800ed58 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ed44:	697b      	ldr	r3, [r7, #20]
 800ed46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800ed4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ed4c:	683b      	ldr	r3, [r7, #0]
 800ed4e:	695b      	ldr	r3, [r3, #20]
 800ed50:	019b      	lsls	r3, r3, #6
 800ed52:	697a      	ldr	r2, [r7, #20]
 800ed54:	4313      	orrs	r3, r2
 800ed56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	697a      	ldr	r2, [r7, #20]
 800ed5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	68fa      	ldr	r2, [r7, #12]
 800ed62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ed64:	683b      	ldr	r3, [r7, #0]
 800ed66:	685a      	ldr	r2, [r3, #4]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	693a      	ldr	r2, [r7, #16]
 800ed70:	621a      	str	r2, [r3, #32]
}
 800ed72:	bf00      	nop
 800ed74:	371c      	adds	r7, #28
 800ed76:	46bd      	mov	sp, r7
 800ed78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7c:	4770      	bx	lr
 800ed7e:	bf00      	nop
 800ed80:	40010000 	.word	0x40010000
 800ed84:	40010400 	.word	0x40010400

0800ed88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ed88:	b480      	push	{r7}
 800ed8a:	b087      	sub	sp, #28
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	60f8      	str	r0, [r7, #12]
 800ed90:	60b9      	str	r1, [r7, #8]
 800ed92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	6a1b      	ldr	r3, [r3, #32]
 800ed98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	6a1b      	ldr	r3, [r3, #32]
 800ed9e:	f023 0201 	bic.w	r2, r3, #1
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	699b      	ldr	r3, [r3, #24]
 800edaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800edac:	693b      	ldr	r3, [r7, #16]
 800edae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800edb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	011b      	lsls	r3, r3, #4
 800edb8:	693a      	ldr	r2, [r7, #16]
 800edba:	4313      	orrs	r3, r2
 800edbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800edbe:	697b      	ldr	r3, [r7, #20]
 800edc0:	f023 030a 	bic.w	r3, r3, #10
 800edc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800edc6:	697a      	ldr	r2, [r7, #20]
 800edc8:	68bb      	ldr	r3, [r7, #8]
 800edca:	4313      	orrs	r3, r2
 800edcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800edce:	68fb      	ldr	r3, [r7, #12]
 800edd0:	693a      	ldr	r2, [r7, #16]
 800edd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	697a      	ldr	r2, [r7, #20]
 800edd8:	621a      	str	r2, [r3, #32]
}
 800edda:	bf00      	nop
 800eddc:	371c      	adds	r7, #28
 800edde:	46bd      	mov	sp, r7
 800ede0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede4:	4770      	bx	lr

0800ede6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ede6:	b480      	push	{r7}
 800ede8:	b087      	sub	sp, #28
 800edea:	af00      	add	r7, sp, #0
 800edec:	60f8      	str	r0, [r7, #12]
 800edee:	60b9      	str	r1, [r7, #8]
 800edf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	6a1b      	ldr	r3, [r3, #32]
 800edf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	6a1b      	ldr	r3, [r3, #32]
 800edfc:	f023 0210 	bic.w	r2, r3, #16
 800ee00:	68fb      	ldr	r3, [r7, #12]
 800ee02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	699b      	ldr	r3, [r3, #24]
 800ee08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ee0a:	693b      	ldr	r3, [r7, #16]
 800ee0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ee10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ee12:	687b      	ldr	r3, [r7, #4]
 800ee14:	031b      	lsls	r3, r3, #12
 800ee16:	693a      	ldr	r2, [r7, #16]
 800ee18:	4313      	orrs	r3, r2
 800ee1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ee22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ee24:	68bb      	ldr	r3, [r7, #8]
 800ee26:	011b      	lsls	r3, r3, #4
 800ee28:	697a      	ldr	r2, [r7, #20]
 800ee2a:	4313      	orrs	r3, r2
 800ee2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	693a      	ldr	r2, [r7, #16]
 800ee32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	697a      	ldr	r2, [r7, #20]
 800ee38:	621a      	str	r2, [r3, #32]
}
 800ee3a:	bf00      	nop
 800ee3c:	371c      	adds	r7, #28
 800ee3e:	46bd      	mov	sp, r7
 800ee40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee44:	4770      	bx	lr

0800ee46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ee46:	b480      	push	{r7}
 800ee48:	b085      	sub	sp, #20
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	6078      	str	r0, [r7, #4]
 800ee4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	689b      	ldr	r3, [r3, #8]
 800ee54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ee56:	68fb      	ldr	r3, [r7, #12]
 800ee58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ee5e:	683a      	ldr	r2, [r7, #0]
 800ee60:	68fb      	ldr	r3, [r7, #12]
 800ee62:	4313      	orrs	r3, r2
 800ee64:	f043 0307 	orr.w	r3, r3, #7
 800ee68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	609a      	str	r2, [r3, #8]
}
 800ee70:	bf00      	nop
 800ee72:	3714      	adds	r7, #20
 800ee74:	46bd      	mov	sp, r7
 800ee76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee7a:	4770      	bx	lr

0800ee7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ee7c:	b480      	push	{r7}
 800ee7e:	b087      	sub	sp, #28
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	60f8      	str	r0, [r7, #12]
 800ee84:	60b9      	str	r1, [r7, #8]
 800ee86:	607a      	str	r2, [r7, #4]
 800ee88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ee8a:	68fb      	ldr	r3, [r7, #12]
 800ee8c:	689b      	ldr	r3, [r3, #8]
 800ee8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ee90:	697b      	ldr	r3, [r7, #20]
 800ee92:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ee96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ee98:	683b      	ldr	r3, [r7, #0]
 800ee9a:	021a      	lsls	r2, r3, #8
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	431a      	orrs	r2, r3
 800eea0:	68bb      	ldr	r3, [r7, #8]
 800eea2:	4313      	orrs	r3, r2
 800eea4:	697a      	ldr	r2, [r7, #20]
 800eea6:	4313      	orrs	r3, r2
 800eea8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	697a      	ldr	r2, [r7, #20]
 800eeae:	609a      	str	r2, [r3, #8]
}
 800eeb0:	bf00      	nop
 800eeb2:	371c      	adds	r7, #28
 800eeb4:	46bd      	mov	sp, r7
 800eeb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeba:	4770      	bx	lr

0800eebc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b087      	sub	sp, #28
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	60f8      	str	r0, [r7, #12]
 800eec4:	60b9      	str	r1, [r7, #8]
 800eec6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800eec8:	68bb      	ldr	r3, [r7, #8]
 800eeca:	f003 031f 	and.w	r3, r3, #31
 800eece:	2201      	movs	r2, #1
 800eed0:	fa02 f303 	lsl.w	r3, r2, r3
 800eed4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	6a1a      	ldr	r2, [r3, #32]
 800eeda:	697b      	ldr	r3, [r7, #20]
 800eedc:	43db      	mvns	r3, r3
 800eede:	401a      	ands	r2, r3
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800eee4:	68fb      	ldr	r3, [r7, #12]
 800eee6:	6a1a      	ldr	r2, [r3, #32]
 800eee8:	68bb      	ldr	r3, [r7, #8]
 800eeea:	f003 031f 	and.w	r3, r3, #31
 800eeee:	6879      	ldr	r1, [r7, #4]
 800eef0:	fa01 f303 	lsl.w	r3, r1, r3
 800eef4:	431a      	orrs	r2, r3
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	621a      	str	r2, [r3, #32]
}
 800eefa:	bf00      	nop
 800eefc:	371c      	adds	r7, #28
 800eefe:	46bd      	mov	sp, r7
 800ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef04:	4770      	bx	lr
	...

0800ef08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ef08:	b480      	push	{r7}
 800ef0a:	b085      	sub	sp, #20
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
 800ef10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ef18:	2b01      	cmp	r3, #1
 800ef1a:	d101      	bne.n	800ef20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ef1c:	2302      	movs	r3, #2
 800ef1e:	e05a      	b.n	800efd6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	2201      	movs	r2, #1
 800ef24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	2202      	movs	r2, #2
 800ef2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	681b      	ldr	r3, [r3, #0]
 800ef34:	685b      	ldr	r3, [r3, #4]
 800ef36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	689b      	ldr	r3, [r3, #8]
 800ef3e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ef40:	68fb      	ldr	r3, [r7, #12]
 800ef42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ef46:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	68fa      	ldr	r2, [r7, #12]
 800ef4e:	4313      	orrs	r3, r2
 800ef50:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	68fa      	ldr	r2, [r7, #12]
 800ef58:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef5a:	687b      	ldr	r3, [r7, #4]
 800ef5c:	681b      	ldr	r3, [r3, #0]
 800ef5e:	4a21      	ldr	r2, [pc, #132]	@ (800efe4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ef60:	4293      	cmp	r3, r2
 800ef62:	d022      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef6c:	d01d      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	4a1d      	ldr	r2, [pc, #116]	@ (800efe8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ef74:	4293      	cmp	r3, r2
 800ef76:	d018      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4a1b      	ldr	r2, [pc, #108]	@ (800efec <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ef7e:	4293      	cmp	r3, r2
 800ef80:	d013      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef82:	687b      	ldr	r3, [r7, #4]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	4a1a      	ldr	r2, [pc, #104]	@ (800eff0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ef88:	4293      	cmp	r3, r2
 800ef8a:	d00e      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	681b      	ldr	r3, [r3, #0]
 800ef90:	4a18      	ldr	r2, [pc, #96]	@ (800eff4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d009      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	4a17      	ldr	r2, [pc, #92]	@ (800eff8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d004      	beq.n	800efaa <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4a15      	ldr	r2, [pc, #84]	@ (800effc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800efa6:	4293      	cmp	r3, r2
 800efa8:	d10c      	bne.n	800efc4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800efb0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800efb2:	683b      	ldr	r3, [r7, #0]
 800efb4:	685b      	ldr	r3, [r3, #4]
 800efb6:	68ba      	ldr	r2, [r7, #8]
 800efb8:	4313      	orrs	r3, r2
 800efba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	2201      	movs	r2, #1
 800efc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	2200      	movs	r2, #0
 800efd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800efd4:	2300      	movs	r3, #0
}
 800efd6:	4618      	mov	r0, r3
 800efd8:	3714      	adds	r7, #20
 800efda:	46bd      	mov	sp, r7
 800efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe0:	4770      	bx	lr
 800efe2:	bf00      	nop
 800efe4:	40010000 	.word	0x40010000
 800efe8:	40000400 	.word	0x40000400
 800efec:	40000800 	.word	0x40000800
 800eff0:	40000c00 	.word	0x40000c00
 800eff4:	40010400 	.word	0x40010400
 800eff8:	40014000 	.word	0x40014000
 800effc:	40001800 	.word	0x40001800

0800f000 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f000:	b480      	push	{r7}
 800f002:	b083      	sub	sp, #12
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f008:	bf00      	nop
 800f00a:	370c      	adds	r7, #12
 800f00c:	46bd      	mov	sp, r7
 800f00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f012:	4770      	bx	lr

0800f014 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f014:	b480      	push	{r7}
 800f016:	b083      	sub	sp, #12
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f01c:	bf00      	nop
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr

0800f028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b082      	sub	sp, #8
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d101      	bne.n	800f03a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f036:	2301      	movs	r3, #1
 800f038:	e042      	b.n	800f0c0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f040:	b2db      	uxtb	r3, r3
 800f042:	2b00      	cmp	r3, #0
 800f044:	d106      	bne.n	800f054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	2200      	movs	r2, #0
 800f04a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f7fa fd6e 	bl	8009b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	2224      	movs	r2, #36	@ 0x24
 800f058:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	68da      	ldr	r2, [r3, #12]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f06a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f06c:	6878      	ldr	r0, [r7, #4]
 800f06e:	f000 ff5f 	bl	800ff30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	691a      	ldr	r2, [r3, #16]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	681b      	ldr	r3, [r3, #0]
 800f086:	695a      	ldr	r2, [r3, #20]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	68da      	ldr	r2, [r3, #12]
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	681b      	ldr	r3, [r3, #0]
 800f09c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f0a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	2200      	movs	r2, #0
 800f0a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	2220      	movs	r2, #32
 800f0ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	2220      	movs	r2, #32
 800f0b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f0be:	2300      	movs	r3, #0
}
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	3708      	adds	r7, #8
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bd80      	pop	{r7, pc}

0800f0c8 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b082      	sub	sp, #8
 800f0cc:	af00      	add	r7, sp, #0
 800f0ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d101      	bne.n	800f0da <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f0d6:	2301      	movs	r3, #1
 800f0d8:	e024      	b.n	800f124 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	2224      	movs	r2, #36	@ 0x24
 800f0de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	68da      	ldr	r2, [r3, #12]
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f0f0:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f7fa fdd2 	bl	8009c9c <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2200      	movs	r2, #0
 800f10a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	2200      	movs	r2, #0
 800f112:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	2200      	movs	r2, #0
 800f118:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	2200      	movs	r2, #0
 800f11e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f122:	2300      	movs	r3, #0
}
 800f124:	4618      	mov	r0, r3
 800f126:	3708      	adds	r7, #8
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b08c      	sub	sp, #48	@ 0x30
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	4613      	mov	r3, r2
 800f138:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f140:	b2db      	uxtb	r3, r3
 800f142:	2b20      	cmp	r3, #32
 800f144:	d156      	bne.n	800f1f4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d002      	beq.n	800f152 <HAL_UART_Transmit_DMA+0x26>
 800f14c:	88fb      	ldrh	r3, [r7, #6]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d101      	bne.n	800f156 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f152:	2301      	movs	r3, #1
 800f154:	e04f      	b.n	800f1f6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800f156:	68ba      	ldr	r2, [r7, #8]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	88fa      	ldrh	r2, [r7, #6]
 800f160:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	88fa      	ldrh	r2, [r7, #6]
 800f166:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	2200      	movs	r2, #0
 800f16c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2221      	movs	r2, #33	@ 0x21
 800f172:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f17a:	4a21      	ldr	r2, [pc, #132]	@ (800f200 <HAL_UART_Transmit_DMA+0xd4>)
 800f17c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f182:	4a20      	ldr	r2, [pc, #128]	@ (800f204 <HAL_UART_Transmit_DMA+0xd8>)
 800f184:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f18a:	4a1f      	ldr	r2, [pc, #124]	@ (800f208 <HAL_UART_Transmit_DMA+0xdc>)
 800f18c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f192:	2200      	movs	r2, #0
 800f194:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800f196:	f107 0308 	add.w	r3, r7, #8
 800f19a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f19c:	68fb      	ldr	r3, [r7, #12]
 800f19e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1a2:	6819      	ldr	r1, [r3, #0]
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	3304      	adds	r3, #4
 800f1aa:	461a      	mov	r2, r3
 800f1ac:	88fb      	ldrh	r3, [r7, #6]
 800f1ae:	f7fb fb51 	bl	800a854 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	681b      	ldr	r3, [r3, #0]
 800f1b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f1ba:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	681b      	ldr	r3, [r3, #0]
 800f1c0:	3314      	adds	r3, #20
 800f1c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1c4:	69bb      	ldr	r3, [r7, #24]
 800f1c6:	e853 3f00 	ldrex	r3, [r3]
 800f1ca:	617b      	str	r3, [r7, #20]
   return(result);
 800f1cc:	697b      	ldr	r3, [r7, #20]
 800f1ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f1d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	681b      	ldr	r3, [r3, #0]
 800f1d8:	3314      	adds	r3, #20
 800f1da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f1dc:	627a      	str	r2, [r7, #36]	@ 0x24
 800f1de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e0:	6a39      	ldr	r1, [r7, #32]
 800f1e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1e4:	e841 2300 	strex	r3, r2, [r1]
 800f1e8:	61fb      	str	r3, [r7, #28]
   return(result);
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d1e5      	bne.n	800f1bc <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800f1f0:	2300      	movs	r3, #0
 800f1f2:	e000      	b.n	800f1f6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800f1f4:	2302      	movs	r3, #2
  }
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3730      	adds	r7, #48	@ 0x30
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}
 800f1fe:	bf00      	nop
 800f200:	0800f7bd 	.word	0x0800f7bd
 800f204:	0800f857 	.word	0x0800f857
 800f208:	0800f9db 	.word	0x0800f9db

0800f20c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b084      	sub	sp, #16
 800f210:	af00      	add	r7, sp, #0
 800f212:	60f8      	str	r0, [r7, #12]
 800f214:	60b9      	str	r1, [r7, #8]
 800f216:	4613      	mov	r3, r2
 800f218:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f220:	b2db      	uxtb	r3, r3
 800f222:	2b20      	cmp	r3, #32
 800f224:	d112      	bne.n	800f24c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800f226:	68bb      	ldr	r3, [r7, #8]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d002      	beq.n	800f232 <HAL_UART_Receive_DMA+0x26>
 800f22c:	88fb      	ldrh	r3, [r7, #6]
 800f22e:	2b00      	cmp	r3, #0
 800f230:	d101      	bne.n	800f236 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f232:	2301      	movs	r3, #1
 800f234:	e00b      	b.n	800f24e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f236:	68fb      	ldr	r3, [r7, #12]
 800f238:	2200      	movs	r2, #0
 800f23a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f23c:	88fb      	ldrh	r3, [r7, #6]
 800f23e:	461a      	mov	r2, r3
 800f240:	68b9      	ldr	r1, [r7, #8]
 800f242:	68f8      	ldr	r0, [r7, #12]
 800f244:	f000 fc14 	bl	800fa70 <UART_Start_Receive_DMA>
 800f248:	4603      	mov	r3, r0
 800f24a:	e000      	b.n	800f24e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800f24c:	2302      	movs	r3, #2
  }
}
 800f24e:	4618      	mov	r0, r3
 800f250:	3710      	adds	r7, #16
 800f252:	46bd      	mov	sp, r7
 800f254:	bd80      	pop	{r7, pc}
	...

0800f258 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f258:	b580      	push	{r7, lr}
 800f25a:	b0ba      	sub	sp, #232	@ 0xe8
 800f25c:	af00      	add	r7, sp, #0
 800f25e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	681b      	ldr	r3, [r3, #0]
 800f26e:	68db      	ldr	r3, [r3, #12]
 800f270:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	681b      	ldr	r3, [r3, #0]
 800f278:	695b      	ldr	r3, [r3, #20]
 800f27a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800f27e:	2300      	movs	r3, #0
 800f280:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800f284:	2300      	movs	r3, #0
 800f286:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f28a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f28e:	f003 030f 	and.w	r3, r3, #15
 800f292:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800f296:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d10f      	bne.n	800f2be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f29e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2a2:	f003 0320 	and.w	r3, r3, #32
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d009      	beq.n	800f2be <HAL_UART_IRQHandler+0x66>
 800f2aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2ae:	f003 0320 	and.w	r3, r3, #32
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d003      	beq.n	800f2be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f2b6:	6878      	ldr	r0, [r7, #4]
 800f2b8:	f000 fd7b 	bl	800fdb2 <UART_Receive_IT>
      return;
 800f2bc:	e25b      	b.n	800f776 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f2be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 80de 	beq.w	800f484 <HAL_UART_IRQHandler+0x22c>
 800f2c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f2cc:	f003 0301 	and.w	r3, r3, #1
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d106      	bne.n	800f2e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f2d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2d8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	f000 80d1 	beq.w	800f484 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f2e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f2e6:	f003 0301 	and.w	r3, r3, #1
 800f2ea:	2b00      	cmp	r3, #0
 800f2ec:	d00b      	beq.n	800f306 <HAL_UART_IRQHandler+0xae>
 800f2ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f2f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d005      	beq.n	800f306 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2fe:	f043 0201 	orr.w	r2, r3, #1
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f306:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f30a:	f003 0304 	and.w	r3, r3, #4
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d00b      	beq.n	800f32a <HAL_UART_IRQHandler+0xd2>
 800f312:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f316:	f003 0301 	and.w	r3, r3, #1
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d005      	beq.n	800f32a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f322:	f043 0202 	orr.w	r2, r3, #2
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f32a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f32e:	f003 0302 	and.w	r3, r3, #2
 800f332:	2b00      	cmp	r3, #0
 800f334:	d00b      	beq.n	800f34e <HAL_UART_IRQHandler+0xf6>
 800f336:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f33a:	f003 0301 	and.w	r3, r3, #1
 800f33e:	2b00      	cmp	r3, #0
 800f340:	d005      	beq.n	800f34e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f346:	f043 0204 	orr.w	r2, r3, #4
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f34e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f352:	f003 0308 	and.w	r3, r3, #8
 800f356:	2b00      	cmp	r3, #0
 800f358:	d011      	beq.n	800f37e <HAL_UART_IRQHandler+0x126>
 800f35a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f35e:	f003 0320 	and.w	r3, r3, #32
 800f362:	2b00      	cmp	r3, #0
 800f364:	d105      	bne.n	800f372 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f366:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f36a:	f003 0301 	and.w	r3, r3, #1
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d005      	beq.n	800f37e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f376:	f043 0208 	orr.w	r2, r3, #8
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f382:	2b00      	cmp	r3, #0
 800f384:	f000 81f2 	beq.w	800f76c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f38c:	f003 0320 	and.w	r3, r3, #32
 800f390:	2b00      	cmp	r3, #0
 800f392:	d008      	beq.n	800f3a6 <HAL_UART_IRQHandler+0x14e>
 800f394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f398:	f003 0320 	and.w	r3, r3, #32
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	d002      	beq.n	800f3a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f000 fd06 	bl	800fdb2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	695b      	ldr	r3, [r3, #20]
 800f3ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3b0:	2b40      	cmp	r3, #64	@ 0x40
 800f3b2:	bf0c      	ite	eq
 800f3b4:	2301      	moveq	r3, #1
 800f3b6:	2300      	movne	r3, #0
 800f3b8:	b2db      	uxtb	r3, r3
 800f3ba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3c2:	f003 0308 	and.w	r3, r3, #8
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d103      	bne.n	800f3d2 <HAL_UART_IRQHandler+0x17a>
 800f3ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d04f      	beq.n	800f472 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 fc0e 	bl	800fbf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	681b      	ldr	r3, [r3, #0]
 800f3dc:	695b      	ldr	r3, [r3, #20]
 800f3de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f3e2:	2b40      	cmp	r3, #64	@ 0x40
 800f3e4:	d141      	bne.n	800f46a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	3314      	adds	r3, #20
 800f3ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f3f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f3f4:	e853 3f00 	ldrex	r3, [r3]
 800f3f8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f3fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f400:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f404:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	3314      	adds	r3, #20
 800f40e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f412:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f416:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f41a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f41e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f422:	e841 2300 	strex	r3, r2, [r1]
 800f426:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f42a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d1d9      	bne.n	800f3e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f436:	2b00      	cmp	r3, #0
 800f438:	d013      	beq.n	800f462 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f43e:	4a7e      	ldr	r2, [pc, #504]	@ (800f638 <HAL_UART_IRQHandler+0x3e0>)
 800f440:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f446:	4618      	mov	r0, r3
 800f448:	f7fb facc 	bl	800a9e4 <HAL_DMA_Abort_IT>
 800f44c:	4603      	mov	r3, r0
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d016      	beq.n	800f480 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f458:	687a      	ldr	r2, [r7, #4]
 800f45a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f45c:	4610      	mov	r0, r2
 800f45e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f460:	e00e      	b.n	800f480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f7fa fd90 	bl	8009f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f468:	e00a      	b.n	800f480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f46a:	6878      	ldr	r0, [r7, #4]
 800f46c:	f7fa fd8c 	bl	8009f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f470:	e006      	b.n	800f480 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f472:	6878      	ldr	r0, [r7, #4]
 800f474:	f7fa fd88 	bl	8009f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	2200      	movs	r2, #0
 800f47c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800f47e:	e175      	b.n	800f76c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f480:	bf00      	nop
    return;
 800f482:	e173      	b.n	800f76c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f488:	2b01      	cmp	r3, #1
 800f48a:	f040 814f 	bne.w	800f72c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f48e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f492:	f003 0310 	and.w	r3, r3, #16
 800f496:	2b00      	cmp	r3, #0
 800f498:	f000 8148 	beq.w	800f72c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f49c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f4a0:	f003 0310 	and.w	r3, r3, #16
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	f000 8141 	beq.w	800f72c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	60bb      	str	r3, [r7, #8]
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	681b      	ldr	r3, [r3, #0]
 800f4b4:	60bb      	str	r3, [r7, #8]
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	60bb      	str	r3, [r7, #8]
 800f4be:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	695b      	ldr	r3, [r3, #20]
 800f4c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f4ca:	2b40      	cmp	r3, #64	@ 0x40
 800f4cc:	f040 80b6 	bne.w	800f63c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	685b      	ldr	r3, [r3, #4]
 800f4d8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f4dc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	f000 8145 	beq.w	800f770 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f4ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f4ee:	429a      	cmp	r2, r3
 800f4f0:	f080 813e 	bcs.w	800f770 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f4fa:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f500:	69db      	ldr	r3, [r3, #28]
 800f502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f506:	f000 8088 	beq.w	800f61a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	330c      	adds	r3, #12
 800f510:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f514:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f518:	e853 3f00 	ldrex	r3, [r3]
 800f51c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f520:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f524:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f528:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	681b      	ldr	r3, [r3, #0]
 800f530:	330c      	adds	r3, #12
 800f532:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800f536:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f53a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f53e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f542:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f546:	e841 2300 	strex	r3, r2, [r1]
 800f54a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f54e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f552:	2b00      	cmp	r3, #0
 800f554:	d1d9      	bne.n	800f50a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	3314      	adds	r3, #20
 800f55c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f55e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f560:	e853 3f00 	ldrex	r3, [r3]
 800f564:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f568:	f023 0301 	bic.w	r3, r3, #1
 800f56c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	3314      	adds	r3, #20
 800f576:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f57a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f57e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f580:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f582:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f586:	e841 2300 	strex	r3, r2, [r1]
 800f58a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f58c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1e1      	bne.n	800f556 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	3314      	adds	r3, #20
 800f598:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f59a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f59c:	e853 3f00 	ldrex	r3, [r3]
 800f5a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f5a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f5a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f5a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	681b      	ldr	r3, [r3, #0]
 800f5b0:	3314      	adds	r3, #20
 800f5b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f5b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f5b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f5bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f5be:	e841 2300 	strex	r3, r2, [r1]
 800f5c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f5c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d1e3      	bne.n	800f592 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	2220      	movs	r2, #32
 800f5ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	681b      	ldr	r3, [r3, #0]
 800f5dc:	330c      	adds	r3, #12
 800f5de:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f5e2:	e853 3f00 	ldrex	r3, [r3]
 800f5e6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f5e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f5ea:	f023 0310 	bic.w	r3, r3, #16
 800f5ee:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	681b      	ldr	r3, [r3, #0]
 800f5f6:	330c      	adds	r3, #12
 800f5f8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800f5fc:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f5fe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f600:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f602:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f604:	e841 2300 	strex	r3, r2, [r1]
 800f608:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f60a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d1e3      	bne.n	800f5d8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f614:	4618      	mov	r0, r3
 800f616:	f7fb f975 	bl	800a904 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	2202      	movs	r2, #2
 800f61e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f628:	b29b      	uxth	r3, r3
 800f62a:	1ad3      	subs	r3, r2, r3
 800f62c:	b29b      	uxth	r3, r3
 800f62e:	4619      	mov	r1, r3
 800f630:	6878      	ldr	r0, [r7, #4]
 800f632:	f000 f8b7 	bl	800f7a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f636:	e09b      	b.n	800f770 <HAL_UART_IRQHandler+0x518>
 800f638:	0800fcbb 	.word	0x0800fcbb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f644:	b29b      	uxth	r3, r3
 800f646:	1ad3      	subs	r3, r2, r3
 800f648:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800f650:	b29b      	uxth	r3, r3
 800f652:	2b00      	cmp	r3, #0
 800f654:	f000 808e 	beq.w	800f774 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800f658:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	f000 8089 	beq.w	800f774 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	330c      	adds	r3, #12
 800f668:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f66a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f66c:	e853 3f00 	ldrex	r3, [r3]
 800f670:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f674:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800f678:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	330c      	adds	r3, #12
 800f682:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800f686:	647a      	str	r2, [r7, #68]	@ 0x44
 800f688:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f68a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f68c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f68e:	e841 2300 	strex	r3, r2, [r1]
 800f692:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f694:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f696:	2b00      	cmp	r3, #0
 800f698:	d1e3      	bne.n	800f662 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	3314      	adds	r3, #20
 800f6a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6a4:	e853 3f00 	ldrex	r3, [r3]
 800f6a8:	623b      	str	r3, [r7, #32]
   return(result);
 800f6aa:	6a3b      	ldr	r3, [r7, #32]
 800f6ac:	f023 0301 	bic.w	r3, r3, #1
 800f6b0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	3314      	adds	r3, #20
 800f6ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800f6be:	633a      	str	r2, [r7, #48]	@ 0x30
 800f6c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f6c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f6c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f6c6:	e841 2300 	strex	r3, r2, [r1]
 800f6ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d1e3      	bne.n	800f69a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2220      	movs	r2, #32
 800f6d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	330c      	adds	r3, #12
 800f6e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	e853 3f00 	ldrex	r3, [r3]
 800f6ee:	60fb      	str	r3, [r7, #12]
   return(result);
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	f023 0310 	bic.w	r3, r3, #16
 800f6f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	330c      	adds	r3, #12
 800f700:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800f704:	61fa      	str	r2, [r7, #28]
 800f706:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f708:	69b9      	ldr	r1, [r7, #24]
 800f70a:	69fa      	ldr	r2, [r7, #28]
 800f70c:	e841 2300 	strex	r3, r2, [r1]
 800f710:	617b      	str	r3, [r7, #20]
   return(result);
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d1e3      	bne.n	800f6e0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	2202      	movs	r2, #2
 800f71c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f71e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800f722:	4619      	mov	r1, r3
 800f724:	6878      	ldr	r0, [r7, #4]
 800f726:	f000 f83d 	bl	800f7a4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800f72a:	e023      	b.n	800f774 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800f72c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f730:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f734:	2b00      	cmp	r3, #0
 800f736:	d009      	beq.n	800f74c <HAL_UART_IRQHandler+0x4f4>
 800f738:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f73c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f740:	2b00      	cmp	r3, #0
 800f742:	d003      	beq.n	800f74c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800f744:	6878      	ldr	r0, [r7, #4]
 800f746:	f000 facc 	bl	800fce2 <UART_Transmit_IT>
    return;
 800f74a:	e014      	b.n	800f776 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800f74c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f750:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f754:	2b00      	cmp	r3, #0
 800f756:	d00e      	beq.n	800f776 <HAL_UART_IRQHandler+0x51e>
 800f758:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f75c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f760:	2b00      	cmp	r3, #0
 800f762:	d008      	beq.n	800f776 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800f764:	6878      	ldr	r0, [r7, #4]
 800f766:	f000 fb0c 	bl	800fd82 <UART_EndTransmit_IT>
    return;
 800f76a:	e004      	b.n	800f776 <HAL_UART_IRQHandler+0x51e>
    return;
 800f76c:	bf00      	nop
 800f76e:	e002      	b.n	800f776 <HAL_UART_IRQHandler+0x51e>
      return;
 800f770:	bf00      	nop
 800f772:	e000      	b.n	800f776 <HAL_UART_IRQHandler+0x51e>
      return;
 800f774:	bf00      	nop
  }
}
 800f776:	37e8      	adds	r7, #232	@ 0xe8
 800f778:	46bd      	mov	sp, r7
 800f77a:	bd80      	pop	{r7, pc}

0800f77c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f77c:	b480      	push	{r7}
 800f77e:	b083      	sub	sp, #12
 800f780:	af00      	add	r7, sp, #0
 800f782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800f784:	bf00      	nop
 800f786:	370c      	adds	r7, #12
 800f788:	46bd      	mov	sp, r7
 800f78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78e:	4770      	bx	lr

0800f790 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800f798:	bf00      	nop
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b083      	sub	sp, #12
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
 800f7ac:	460b      	mov	r3, r1
 800f7ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f7b0:	bf00      	nop
 800f7b2:	370c      	adds	r7, #12
 800f7b4:	46bd      	mov	sp, r7
 800f7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ba:	4770      	bx	lr

0800f7bc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b090      	sub	sp, #64	@ 0x40
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	681b      	ldr	r3, [r3, #0]
 800f7d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d137      	bne.n	800f848 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800f7d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7da:	2200      	movs	r2, #0
 800f7dc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f7de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	3314      	adds	r3, #20
 800f7e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7e8:	e853 3f00 	ldrex	r3, [r3]
 800f7ec:	623b      	str	r3, [r7, #32]
   return(result);
 800f7ee:	6a3b      	ldr	r3, [r7, #32]
 800f7f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f7f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f7f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	3314      	adds	r3, #20
 800f7fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f7fe:	633a      	str	r2, [r7, #48]	@ 0x30
 800f800:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f802:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f806:	e841 2300 	strex	r3, r2, [r1]
 800f80a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f80c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d1e5      	bne.n	800f7de <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f812:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	330c      	adds	r3, #12
 800f818:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f81a:	693b      	ldr	r3, [r7, #16]
 800f81c:	e853 3f00 	ldrex	r3, [r3]
 800f820:	60fb      	str	r3, [r7, #12]
   return(result);
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f828:	637b      	str	r3, [r7, #52]	@ 0x34
 800f82a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f82c:	681b      	ldr	r3, [r3, #0]
 800f82e:	330c      	adds	r3, #12
 800f830:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f832:	61fa      	str	r2, [r7, #28]
 800f834:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f836:	69b9      	ldr	r1, [r7, #24]
 800f838:	69fa      	ldr	r2, [r7, #28]
 800f83a:	e841 2300 	strex	r3, r2, [r1]
 800f83e:	617b      	str	r3, [r7, #20]
   return(result);
 800f840:	697b      	ldr	r3, [r7, #20]
 800f842:	2b00      	cmp	r3, #0
 800f844:	d1e5      	bne.n	800f812 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f846:	e002      	b.n	800f84e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800f848:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800f84a:	f7fa fa67 	bl	8009d1c <HAL_UART_TxCpltCallback>
}
 800f84e:	bf00      	nop
 800f850:	3740      	adds	r7, #64	@ 0x40
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}

0800f856 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f856:	b580      	push	{r7, lr}
 800f858:	b084      	sub	sp, #16
 800f85a:	af00      	add	r7, sp, #0
 800f85c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f862:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800f864:	68f8      	ldr	r0, [r7, #12]
 800f866:	f7ff ff89 	bl	800f77c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f86a:	bf00      	nop
 800f86c:	3710      	adds	r7, #16
 800f86e:	46bd      	mov	sp, r7
 800f870:	bd80      	pop	{r7, pc}

0800f872 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800f872:	b580      	push	{r7, lr}
 800f874:	b09c      	sub	sp, #112	@ 0x70
 800f876:	af00      	add	r7, sp, #0
 800f878:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f87e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d172      	bne.n	800f974 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800f88e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f890:	2200      	movs	r2, #0
 800f892:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f894:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f896:	681b      	ldr	r3, [r3, #0]
 800f898:	330c      	adds	r3, #12
 800f89a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f89c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f89e:	e853 3f00 	ldrex	r3, [r3]
 800f8a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f8a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f8a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f8aa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800f8ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	330c      	adds	r3, #12
 800f8b2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800f8b4:	65ba      	str	r2, [r7, #88]	@ 0x58
 800f8b6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8b8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800f8ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800f8bc:	e841 2300 	strex	r3, r2, [r1]
 800f8c0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800f8c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	d1e5      	bne.n	800f894 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	3314      	adds	r3, #20
 800f8ce:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f8d2:	e853 3f00 	ldrex	r3, [r3]
 800f8d6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800f8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f8da:	f023 0301 	bic.w	r3, r3, #1
 800f8de:	667b      	str	r3, [r7, #100]	@ 0x64
 800f8e0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	3314      	adds	r3, #20
 800f8e6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800f8e8:	647a      	str	r2, [r7, #68]	@ 0x44
 800f8ea:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8ec:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800f8ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f8f0:	e841 2300 	strex	r3, r2, [r1]
 800f8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800f8f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d1e5      	bne.n	800f8c8 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f8fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	3314      	adds	r3, #20
 800f902:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f906:	e853 3f00 	ldrex	r3, [r3]
 800f90a:	623b      	str	r3, [r7, #32]
   return(result);
 800f90c:	6a3b      	ldr	r3, [r7, #32]
 800f90e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f912:	663b      	str	r3, [r7, #96]	@ 0x60
 800f914:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	3314      	adds	r3, #20
 800f91a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800f91c:	633a      	str	r2, [r7, #48]	@ 0x30
 800f91e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f920:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f922:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f924:	e841 2300 	strex	r3, r2, [r1]
 800f928:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800f92a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d1e5      	bne.n	800f8fc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f930:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f932:	2220      	movs	r2, #32
 800f934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f93a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d119      	bne.n	800f974 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f940:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	330c      	adds	r3, #12
 800f946:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	e853 3f00 	ldrex	r3, [r3]
 800f94e:	60fb      	str	r3, [r7, #12]
   return(result);
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	f023 0310 	bic.w	r3, r3, #16
 800f956:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f958:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	330c      	adds	r3, #12
 800f95e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800f960:	61fa      	str	r2, [r7, #28]
 800f962:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f964:	69b9      	ldr	r1, [r7, #24]
 800f966:	69fa      	ldr	r2, [r7, #28]
 800f968:	e841 2300 	strex	r3, r2, [r1]
 800f96c:	617b      	str	r3, [r7, #20]
   return(result);
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d1e5      	bne.n	800f940 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f976:	2200      	movs	r2, #0
 800f978:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f97a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f97c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f97e:	2b01      	cmp	r3, #1
 800f980:	d106      	bne.n	800f990 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800f982:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f984:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f986:	4619      	mov	r1, r3
 800f988:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f98a:	f7ff ff0b 	bl	800f7a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f98e:	e002      	b.n	800f996 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800f990:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800f992:	f7fa fa05 	bl	8009da0 <HAL_UART_RxCpltCallback>
}
 800f996:	bf00      	nop
 800f998:	3770      	adds	r7, #112	@ 0x70
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f99e:	b580      	push	{r7, lr}
 800f9a0:	b084      	sub	sp, #16
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9aa:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	2201      	movs	r2, #1
 800f9b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f9b6:	2b01      	cmp	r3, #1
 800f9b8:	d108      	bne.n	800f9cc <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f9be:	085b      	lsrs	r3, r3, #1
 800f9c0:	b29b      	uxth	r3, r3
 800f9c2:	4619      	mov	r1, r3
 800f9c4:	68f8      	ldr	r0, [r7, #12]
 800f9c6:	f7ff feed 	bl	800f7a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f9ca:	e002      	b.n	800f9d2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800f9cc:	68f8      	ldr	r0, [r7, #12]
 800f9ce:	f7ff fedf 	bl	800f790 <HAL_UART_RxHalfCpltCallback>
}
 800f9d2:	bf00      	nop
 800f9d4:	3710      	adds	r7, #16
 800f9d6:	46bd      	mov	sp, r7
 800f9d8:	bd80      	pop	{r7, pc}

0800f9da <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f9da:	b580      	push	{r7, lr}
 800f9dc:	b084      	sub	sp, #16
 800f9de:	af00      	add	r7, sp, #0
 800f9e0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800f9e2:	2300      	movs	r3, #0
 800f9e4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f9ea:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	695b      	ldr	r3, [r3, #20]
 800f9f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f9f6:	2b80      	cmp	r3, #128	@ 0x80
 800f9f8:	bf0c      	ite	eq
 800f9fa:	2301      	moveq	r3, #1
 800f9fc:	2300      	movne	r3, #0
 800f9fe:	b2db      	uxtb	r3, r3
 800fa00:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fa08:	b2db      	uxtb	r3, r3
 800fa0a:	2b21      	cmp	r3, #33	@ 0x21
 800fa0c:	d108      	bne.n	800fa20 <UART_DMAError+0x46>
 800fa0e:	68fb      	ldr	r3, [r7, #12]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d005      	beq.n	800fa20 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	2200      	movs	r2, #0
 800fa18:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800fa1a:	68b8      	ldr	r0, [r7, #8]
 800fa1c:	f000 f8c2 	bl	800fba4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fa20:	68bb      	ldr	r3, [r7, #8]
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	695b      	ldr	r3, [r3, #20]
 800fa26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa2a:	2b40      	cmp	r3, #64	@ 0x40
 800fa2c:	bf0c      	ite	eq
 800fa2e:	2301      	moveq	r3, #1
 800fa30:	2300      	movne	r3, #0
 800fa32:	b2db      	uxtb	r3, r3
 800fa34:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fa36:	68bb      	ldr	r3, [r7, #8]
 800fa38:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fa3c:	b2db      	uxtb	r3, r3
 800fa3e:	2b22      	cmp	r3, #34	@ 0x22
 800fa40:	d108      	bne.n	800fa54 <UART_DMAError+0x7a>
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d005      	beq.n	800fa54 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	2200      	movs	r2, #0
 800fa4c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800fa4e:	68b8      	ldr	r0, [r7, #8]
 800fa50:	f000 f8d0 	bl	800fbf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fa54:	68bb      	ldr	r3, [r7, #8]
 800fa56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa58:	f043 0210 	orr.w	r2, r3, #16
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fa60:	68b8      	ldr	r0, [r7, #8]
 800fa62:	f7fa fa91 	bl	8009f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fa66:	bf00      	nop
 800fa68:	3710      	adds	r7, #16
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
	...

0800fa70 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fa70:	b580      	push	{r7, lr}
 800fa72:	b098      	sub	sp, #96	@ 0x60
 800fa74:	af00      	add	r7, sp, #0
 800fa76:	60f8      	str	r0, [r7, #12]
 800fa78:	60b9      	str	r1, [r7, #8]
 800fa7a:	4613      	mov	r3, r2
 800fa7c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800fa7e:	68ba      	ldr	r2, [r7, #8]
 800fa80:	68fb      	ldr	r3, [r7, #12]
 800fa82:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	88fa      	ldrh	r2, [r7, #6]
 800fa88:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fa90:	68fb      	ldr	r3, [r7, #12]
 800fa92:	2222      	movs	r2, #34	@ 0x22
 800fa94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa9c:	4a3e      	ldr	r2, [pc, #248]	@ (800fb98 <UART_Start_Receive_DMA+0x128>)
 800fa9e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800faa0:	68fb      	ldr	r3, [r7, #12]
 800faa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faa4:	4a3d      	ldr	r2, [pc, #244]	@ (800fb9c <UART_Start_Receive_DMA+0x12c>)
 800faa6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800faac:	4a3c      	ldr	r2, [pc, #240]	@ (800fba0 <UART_Start_Receive_DMA+0x130>)
 800faae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fab4:	2200      	movs	r2, #0
 800fab6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800fab8:	f107 0308 	add.w	r3, r7, #8
 800fabc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	3304      	adds	r3, #4
 800fac8:	4619      	mov	r1, r3
 800faca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800facc:	681a      	ldr	r2, [r3, #0]
 800face:	88fb      	ldrh	r3, [r7, #6]
 800fad0:	f7fa fec0 	bl	800a854 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800fad4:	2300      	movs	r3, #0
 800fad6:	613b      	str	r3, [r7, #16]
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	613b      	str	r3, [r7, #16]
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	681b      	ldr	r3, [r3, #0]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	613b      	str	r3, [r7, #16]
 800fae8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	691b      	ldr	r3, [r3, #16]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d019      	beq.n	800fb26 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	330c      	adds	r3, #12
 800faf8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fafa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800fafc:	e853 3f00 	ldrex	r3, [r3]
 800fb00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fb02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fb04:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fb08:	65bb      	str	r3, [r7, #88]	@ 0x58
 800fb0a:	68fb      	ldr	r3, [r7, #12]
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	330c      	adds	r3, #12
 800fb10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fb12:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800fb14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb16:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800fb18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fb1a:	e841 2300 	strex	r3, r2, [r1]
 800fb1e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800fb20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d1e5      	bne.n	800faf2 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fb26:	68fb      	ldr	r3, [r7, #12]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	3314      	adds	r3, #20
 800fb2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fb30:	e853 3f00 	ldrex	r3, [r3]
 800fb34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fb36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb38:	f043 0301 	orr.w	r3, r3, #1
 800fb3c:	657b      	str	r3, [r7, #84]	@ 0x54
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	3314      	adds	r3, #20
 800fb44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800fb46:	63ba      	str	r2, [r7, #56]	@ 0x38
 800fb48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800fb4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fb4e:	e841 2300 	strex	r3, r2, [r1]
 800fb52:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fb54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d1e5      	bne.n	800fb26 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	3314      	adds	r3, #20
 800fb60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb62:	69bb      	ldr	r3, [r7, #24]
 800fb64:	e853 3f00 	ldrex	r3, [r3]
 800fb68:	617b      	str	r3, [r7, #20]
   return(result);
 800fb6a:	697b      	ldr	r3, [r7, #20]
 800fb6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb70:	653b      	str	r3, [r7, #80]	@ 0x50
 800fb72:	68fb      	ldr	r3, [r7, #12]
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	3314      	adds	r3, #20
 800fb78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800fb7a:	627a      	str	r2, [r7, #36]	@ 0x24
 800fb7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb7e:	6a39      	ldr	r1, [r7, #32]
 800fb80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb82:	e841 2300 	strex	r3, r2, [r1]
 800fb86:	61fb      	str	r3, [r7, #28]
   return(result);
 800fb88:	69fb      	ldr	r3, [r7, #28]
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d1e5      	bne.n	800fb5a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800fb8e:	2300      	movs	r3, #0
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3760      	adds	r7, #96	@ 0x60
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}
 800fb98:	0800f873 	.word	0x0800f873
 800fb9c:	0800f99f 	.word	0x0800f99f
 800fba0:	0800f9db 	.word	0x0800f9db

0800fba4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b089      	sub	sp, #36	@ 0x24
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	330c      	adds	r3, #12
 800fbb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	e853 3f00 	ldrex	r3, [r3]
 800fbba:	60bb      	str	r3, [r7, #8]
   return(result);
 800fbbc:	68bb      	ldr	r3, [r7, #8]
 800fbbe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800fbc2:	61fb      	str	r3, [r7, #28]
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	330c      	adds	r3, #12
 800fbca:	69fa      	ldr	r2, [r7, #28]
 800fbcc:	61ba      	str	r2, [r7, #24]
 800fbce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fbd0:	6979      	ldr	r1, [r7, #20]
 800fbd2:	69ba      	ldr	r2, [r7, #24]
 800fbd4:	e841 2300 	strex	r3, r2, [r1]
 800fbd8:	613b      	str	r3, [r7, #16]
   return(result);
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d1e5      	bne.n	800fbac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2220      	movs	r2, #32
 800fbe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800fbe8:	bf00      	nop
 800fbea:	3724      	adds	r7, #36	@ 0x24
 800fbec:	46bd      	mov	sp, r7
 800fbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf2:	4770      	bx	lr

0800fbf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b095      	sub	sp, #84	@ 0x54
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	330c      	adds	r3, #12
 800fc02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fc06:	e853 3f00 	ldrex	r3, [r3]
 800fc0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800fc0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fc0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fc12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	330c      	adds	r3, #12
 800fc1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800fc1c:	643a      	str	r2, [r7, #64]	@ 0x40
 800fc1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800fc22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800fc24:	e841 2300 	strex	r3, r2, [r1]
 800fc28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800fc2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d1e5      	bne.n	800fbfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	3314      	adds	r3, #20
 800fc36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc38:	6a3b      	ldr	r3, [r7, #32]
 800fc3a:	e853 3f00 	ldrex	r3, [r3]
 800fc3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800fc40:	69fb      	ldr	r3, [r7, #28]
 800fc42:	f023 0301 	bic.w	r3, r3, #1
 800fc46:	64bb      	str	r3, [r7, #72]	@ 0x48
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	3314      	adds	r3, #20
 800fc4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fc50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800fc52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fc56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800fc58:	e841 2300 	strex	r3, r2, [r1]
 800fc5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800fc5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d1e5      	bne.n	800fc30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc68:	2b01      	cmp	r3, #1
 800fc6a:	d119      	bne.n	800fca0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	330c      	adds	r3, #12
 800fc72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	e853 3f00 	ldrex	r3, [r3]
 800fc7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800fc7c:	68bb      	ldr	r3, [r7, #8]
 800fc7e:	f023 0310 	bic.w	r3, r3, #16
 800fc82:	647b      	str	r3, [r7, #68]	@ 0x44
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	681b      	ldr	r3, [r3, #0]
 800fc88:	330c      	adds	r3, #12
 800fc8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fc8c:	61ba      	str	r2, [r7, #24]
 800fc8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc90:	6979      	ldr	r1, [r7, #20]
 800fc92:	69ba      	ldr	r2, [r7, #24]
 800fc94:	e841 2300 	strex	r3, r2, [r1]
 800fc98:	613b      	str	r3, [r7, #16]
   return(result);
 800fc9a:	693b      	ldr	r3, [r7, #16]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d1e5      	bne.n	800fc6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2220      	movs	r2, #32
 800fca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2200      	movs	r2, #0
 800fcac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800fcae:	bf00      	nop
 800fcb0:	3754      	adds	r7, #84	@ 0x54
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb8:	4770      	bx	lr

0800fcba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800fcba:	b580      	push	{r7, lr}
 800fcbc:	b084      	sub	sp, #16
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fcc6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800fcc8:	68fb      	ldr	r3, [r7, #12]
 800fcca:	2200      	movs	r2, #0
 800fccc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800fcce:	68fb      	ldr	r3, [r7, #12]
 800fcd0:	2200      	movs	r2, #0
 800fcd2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fcd4:	68f8      	ldr	r0, [r7, #12]
 800fcd6:	f7fa f957 	bl	8009f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fcda:	bf00      	nop
 800fcdc:	3710      	adds	r7, #16
 800fcde:	46bd      	mov	sp, r7
 800fce0:	bd80      	pop	{r7, pc}

0800fce2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800fce2:	b480      	push	{r7}
 800fce4:	b085      	sub	sp, #20
 800fce6:	af00      	add	r7, sp, #0
 800fce8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fcf0:	b2db      	uxtb	r3, r3
 800fcf2:	2b21      	cmp	r3, #33	@ 0x21
 800fcf4:	d13e      	bne.n	800fd74 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	689b      	ldr	r3, [r3, #8]
 800fcfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fcfe:	d114      	bne.n	800fd2a <UART_Transmit_IT+0x48>
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	691b      	ldr	r3, [r3, #16]
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d110      	bne.n	800fd2a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	6a1b      	ldr	r3, [r3, #32]
 800fd0c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	881b      	ldrh	r3, [r3, #0]
 800fd12:	461a      	mov	r2, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fd1c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6a1b      	ldr	r3, [r3, #32]
 800fd22:	1c9a      	adds	r2, r3, #2
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	621a      	str	r2, [r3, #32]
 800fd28:	e008      	b.n	800fd3c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	6a1b      	ldr	r3, [r3, #32]
 800fd2e:	1c59      	adds	r1, r3, #1
 800fd30:	687a      	ldr	r2, [r7, #4]
 800fd32:	6211      	str	r1, [r2, #32]
 800fd34:	781a      	ldrb	r2, [r3, #0]
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800fd40:	b29b      	uxth	r3, r3
 800fd42:	3b01      	subs	r3, #1
 800fd44:	b29b      	uxth	r3, r3
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	4619      	mov	r1, r3
 800fd4a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d10f      	bne.n	800fd70 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	681b      	ldr	r3, [r3, #0]
 800fd54:	68da      	ldr	r2, [r3, #12]
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800fd5e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	68da      	ldr	r2, [r3, #12]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fd6e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800fd70:	2300      	movs	r3, #0
 800fd72:	e000      	b.n	800fd76 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800fd74:	2302      	movs	r3, #2
  }
}
 800fd76:	4618      	mov	r0, r3
 800fd78:	3714      	adds	r7, #20
 800fd7a:	46bd      	mov	sp, r7
 800fd7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd80:	4770      	bx	lr

0800fd82 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b082      	sub	sp, #8
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	68da      	ldr	r2, [r3, #12]
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800fd98:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	2220      	movs	r2, #32
 800fd9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fda2:	6878      	ldr	r0, [r7, #4]
 800fda4:	f7f9 ffba 	bl	8009d1c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800fda8:	2300      	movs	r3, #0
}
 800fdaa:	4618      	mov	r0, r3
 800fdac:	3708      	adds	r7, #8
 800fdae:	46bd      	mov	sp, r7
 800fdb0:	bd80      	pop	{r7, pc}

0800fdb2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b08c      	sub	sp, #48	@ 0x30
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fdc0:	b2db      	uxtb	r3, r3
 800fdc2:	2b22      	cmp	r3, #34	@ 0x22
 800fdc4:	f040 80ae 	bne.w	800ff24 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	689b      	ldr	r3, [r3, #8]
 800fdcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fdd0:	d117      	bne.n	800fe02 <UART_Receive_IT+0x50>
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	691b      	ldr	r3, [r3, #16]
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	d113      	bne.n	800fe02 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800fdda:	2300      	movs	r3, #0
 800fddc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fde2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fdf0:	b29a      	uxth	r2, r3
 800fdf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdf4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fdfa:	1c9a      	adds	r2, r3, #2
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	629a      	str	r2, [r3, #40]	@ 0x28
 800fe00:	e026      	b.n	800fe50 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe06:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800fe08:	2300      	movs	r3, #0
 800fe0a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	689b      	ldr	r3, [r3, #8]
 800fe10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800fe14:	d007      	beq.n	800fe26 <UART_Receive_IT+0x74>
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	689b      	ldr	r3, [r3, #8]
 800fe1a:	2b00      	cmp	r3, #0
 800fe1c:	d10a      	bne.n	800fe34 <UART_Receive_IT+0x82>
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	691b      	ldr	r3, [r3, #16]
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d106      	bne.n	800fe34 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	685b      	ldr	r3, [r3, #4]
 800fe2c:	b2da      	uxtb	r2, r3
 800fe2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe30:	701a      	strb	r2, [r3, #0]
 800fe32:	e008      	b.n	800fe46 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	685b      	ldr	r3, [r3, #4]
 800fe3a:	b2db      	uxtb	r3, r3
 800fe3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800fe40:	b2da      	uxtb	r2, r3
 800fe42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fe44:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fe4a:	1c5a      	adds	r2, r3, #1
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fe54:	b29b      	uxth	r3, r3
 800fe56:	3b01      	subs	r3, #1
 800fe58:	b29b      	uxth	r3, r3
 800fe5a:	687a      	ldr	r2, [r7, #4]
 800fe5c:	4619      	mov	r1, r3
 800fe5e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d15d      	bne.n	800ff20 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	68da      	ldr	r2, [r3, #12]
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	f022 0220 	bic.w	r2, r2, #32
 800fe72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	68da      	ldr	r2, [r3, #12]
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800fe82:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	695a      	ldr	r2, [r3, #20]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f022 0201 	bic.w	r2, r2, #1
 800fe92:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	2220      	movs	r2, #32
 800fe98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	2200      	movs	r2, #0
 800fea0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fea6:	2b01      	cmp	r3, #1
 800fea8:	d135      	bne.n	800ff16 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2200      	movs	r2, #0
 800feae:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	681b      	ldr	r3, [r3, #0]
 800feb4:	330c      	adds	r3, #12
 800feb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800feb8:	697b      	ldr	r3, [r7, #20]
 800feba:	e853 3f00 	ldrex	r3, [r3]
 800febe:	613b      	str	r3, [r7, #16]
   return(result);
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	f023 0310 	bic.w	r3, r3, #16
 800fec6:	627b      	str	r3, [r7, #36]	@ 0x24
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	330c      	adds	r3, #12
 800fece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fed0:	623a      	str	r2, [r7, #32]
 800fed2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fed4:	69f9      	ldr	r1, [r7, #28]
 800fed6:	6a3a      	ldr	r2, [r7, #32]
 800fed8:	e841 2300 	strex	r3, r2, [r1]
 800fedc:	61bb      	str	r3, [r7, #24]
   return(result);
 800fede:	69bb      	ldr	r3, [r7, #24]
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d1e5      	bne.n	800feb0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	f003 0310 	and.w	r3, r3, #16
 800feee:	2b10      	cmp	r3, #16
 800fef0:	d10a      	bne.n	800ff08 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800fef2:	2300      	movs	r3, #0
 800fef4:	60fb      	str	r3, [r7, #12]
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	681b      	ldr	r3, [r3, #0]
 800fefc:	60fb      	str	r3, [r7, #12]
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	685b      	ldr	r3, [r3, #4]
 800ff04:	60fb      	str	r3, [r7, #12]
 800ff06:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800ff0c:	4619      	mov	r1, r3
 800ff0e:	6878      	ldr	r0, [r7, #4]
 800ff10:	f7ff fc48 	bl	800f7a4 <HAL_UARTEx_RxEventCallback>
 800ff14:	e002      	b.n	800ff1c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ff16:	6878      	ldr	r0, [r7, #4]
 800ff18:	f7f9 ff42 	bl	8009da0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ff1c:	2300      	movs	r3, #0
 800ff1e:	e002      	b.n	800ff26 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ff20:	2300      	movs	r3, #0
 800ff22:	e000      	b.n	800ff26 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ff24:	2302      	movs	r3, #2
  }
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	3730      	adds	r7, #48	@ 0x30
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	bd80      	pop	{r7, pc}
	...

0800ff30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ff30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ff34:	b0c0      	sub	sp, #256	@ 0x100
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	691b      	ldr	r3, [r3, #16]
 800ff44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ff48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff4c:	68d9      	ldr	r1, [r3, #12]
 800ff4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff52:	681a      	ldr	r2, [r3, #0]
 800ff54:	ea40 0301 	orr.w	r3, r0, r1
 800ff58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800ff5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff5e:	689a      	ldr	r2, [r3, #8]
 800ff60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff64:	691b      	ldr	r3, [r3, #16]
 800ff66:	431a      	orrs	r2, r3
 800ff68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff6c:	695b      	ldr	r3, [r3, #20]
 800ff6e:	431a      	orrs	r2, r3
 800ff70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff74:	69db      	ldr	r3, [r3, #28]
 800ff76:	4313      	orrs	r3, r2
 800ff78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800ff7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	68db      	ldr	r3, [r3, #12]
 800ff84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800ff88:	f021 010c 	bic.w	r1, r1, #12
 800ff8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff90:	681a      	ldr	r2, [r3, #0]
 800ff92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800ff96:	430b      	orrs	r3, r1
 800ff98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ff9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	695b      	ldr	r3, [r3, #20]
 800ffa2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800ffa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffaa:	6999      	ldr	r1, [r3, #24]
 800ffac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffb0:	681a      	ldr	r2, [r3, #0]
 800ffb2:	ea40 0301 	orr.w	r3, r0, r1
 800ffb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800ffb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffbc:	681a      	ldr	r2, [r3, #0]
 800ffbe:	4b8f      	ldr	r3, [pc, #572]	@ (80101fc <UART_SetConfig+0x2cc>)
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d005      	beq.n	800ffd0 <UART_SetConfig+0xa0>
 800ffc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffc8:	681a      	ldr	r2, [r3, #0]
 800ffca:	4b8d      	ldr	r3, [pc, #564]	@ (8010200 <UART_SetConfig+0x2d0>)
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d104      	bne.n	800ffda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800ffd0:	f7fd f91c 	bl	800d20c <HAL_RCC_GetPCLK2Freq>
 800ffd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800ffd8:	e003      	b.n	800ffe2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800ffda:	f7fd f903 	bl	800d1e4 <HAL_RCC_GetPCLK1Freq>
 800ffde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ffe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ffe6:	69db      	ldr	r3, [r3, #28]
 800ffe8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ffec:	f040 810c 	bne.w	8010208 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800fff0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800fff4:	2200      	movs	r2, #0
 800fff6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800fffa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800fffe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8010002:	4622      	mov	r2, r4
 8010004:	462b      	mov	r3, r5
 8010006:	1891      	adds	r1, r2, r2
 8010008:	65b9      	str	r1, [r7, #88]	@ 0x58
 801000a:	415b      	adcs	r3, r3
 801000c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801000e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010012:	4621      	mov	r1, r4
 8010014:	eb12 0801 	adds.w	r8, r2, r1
 8010018:	4629      	mov	r1, r5
 801001a:	eb43 0901 	adc.w	r9, r3, r1
 801001e:	f04f 0200 	mov.w	r2, #0
 8010022:	f04f 0300 	mov.w	r3, #0
 8010026:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 801002a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801002e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010032:	4690      	mov	r8, r2
 8010034:	4699      	mov	r9, r3
 8010036:	4623      	mov	r3, r4
 8010038:	eb18 0303 	adds.w	r3, r8, r3
 801003c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010040:	462b      	mov	r3, r5
 8010042:	eb49 0303 	adc.w	r3, r9, r3
 8010046:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801004a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801004e:	685b      	ldr	r3, [r3, #4]
 8010050:	2200      	movs	r2, #0
 8010052:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010056:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 801005a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801005e:	460b      	mov	r3, r1
 8010060:	18db      	adds	r3, r3, r3
 8010062:	653b      	str	r3, [r7, #80]	@ 0x50
 8010064:	4613      	mov	r3, r2
 8010066:	eb42 0303 	adc.w	r3, r2, r3
 801006a:	657b      	str	r3, [r7, #84]	@ 0x54
 801006c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8010070:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8010074:	f7f0 fe08 	bl	8000c88 <__aeabi_uldivmod>
 8010078:	4602      	mov	r2, r0
 801007a:	460b      	mov	r3, r1
 801007c:	4b61      	ldr	r3, [pc, #388]	@ (8010204 <UART_SetConfig+0x2d4>)
 801007e:	fba3 2302 	umull	r2, r3, r3, r2
 8010082:	095b      	lsrs	r3, r3, #5
 8010084:	011c      	lsls	r4, r3, #4
 8010086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801008a:	2200      	movs	r2, #0
 801008c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010090:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8010094:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010098:	4642      	mov	r2, r8
 801009a:	464b      	mov	r3, r9
 801009c:	1891      	adds	r1, r2, r2
 801009e:	64b9      	str	r1, [r7, #72]	@ 0x48
 80100a0:	415b      	adcs	r3, r3
 80100a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80100a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80100a8:	4641      	mov	r1, r8
 80100aa:	eb12 0a01 	adds.w	sl, r2, r1
 80100ae:	4649      	mov	r1, r9
 80100b0:	eb43 0b01 	adc.w	fp, r3, r1
 80100b4:	f04f 0200 	mov.w	r2, #0
 80100b8:	f04f 0300 	mov.w	r3, #0
 80100bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80100c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80100c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80100c8:	4692      	mov	sl, r2
 80100ca:	469b      	mov	fp, r3
 80100cc:	4643      	mov	r3, r8
 80100ce:	eb1a 0303 	adds.w	r3, sl, r3
 80100d2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80100d6:	464b      	mov	r3, r9
 80100d8:	eb4b 0303 	adc.w	r3, fp, r3
 80100dc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80100e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80100e4:	685b      	ldr	r3, [r3, #4]
 80100e6:	2200      	movs	r2, #0
 80100e8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80100ec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80100f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80100f4:	460b      	mov	r3, r1
 80100f6:	18db      	adds	r3, r3, r3
 80100f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80100fa:	4613      	mov	r3, r2
 80100fc:	eb42 0303 	adc.w	r3, r2, r3
 8010100:	647b      	str	r3, [r7, #68]	@ 0x44
 8010102:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010106:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 801010a:	f7f0 fdbd 	bl	8000c88 <__aeabi_uldivmod>
 801010e:	4602      	mov	r2, r0
 8010110:	460b      	mov	r3, r1
 8010112:	4611      	mov	r1, r2
 8010114:	4b3b      	ldr	r3, [pc, #236]	@ (8010204 <UART_SetConfig+0x2d4>)
 8010116:	fba3 2301 	umull	r2, r3, r3, r1
 801011a:	095b      	lsrs	r3, r3, #5
 801011c:	2264      	movs	r2, #100	@ 0x64
 801011e:	fb02 f303 	mul.w	r3, r2, r3
 8010122:	1acb      	subs	r3, r1, r3
 8010124:	00db      	lsls	r3, r3, #3
 8010126:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 801012a:	4b36      	ldr	r3, [pc, #216]	@ (8010204 <UART_SetConfig+0x2d4>)
 801012c:	fba3 2302 	umull	r2, r3, r3, r2
 8010130:	095b      	lsrs	r3, r3, #5
 8010132:	005b      	lsls	r3, r3, #1
 8010134:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010138:	441c      	add	r4, r3
 801013a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801013e:	2200      	movs	r2, #0
 8010140:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010144:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8010148:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 801014c:	4642      	mov	r2, r8
 801014e:	464b      	mov	r3, r9
 8010150:	1891      	adds	r1, r2, r2
 8010152:	63b9      	str	r1, [r7, #56]	@ 0x38
 8010154:	415b      	adcs	r3, r3
 8010156:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010158:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 801015c:	4641      	mov	r1, r8
 801015e:	1851      	adds	r1, r2, r1
 8010160:	6339      	str	r1, [r7, #48]	@ 0x30
 8010162:	4649      	mov	r1, r9
 8010164:	414b      	adcs	r3, r1
 8010166:	637b      	str	r3, [r7, #52]	@ 0x34
 8010168:	f04f 0200 	mov.w	r2, #0
 801016c:	f04f 0300 	mov.w	r3, #0
 8010170:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8010174:	4659      	mov	r1, fp
 8010176:	00cb      	lsls	r3, r1, #3
 8010178:	4651      	mov	r1, sl
 801017a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801017e:	4651      	mov	r1, sl
 8010180:	00ca      	lsls	r2, r1, #3
 8010182:	4610      	mov	r0, r2
 8010184:	4619      	mov	r1, r3
 8010186:	4603      	mov	r3, r0
 8010188:	4642      	mov	r2, r8
 801018a:	189b      	adds	r3, r3, r2
 801018c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010190:	464b      	mov	r3, r9
 8010192:	460a      	mov	r2, r1
 8010194:	eb42 0303 	adc.w	r3, r2, r3
 8010198:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801019c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101a0:	685b      	ldr	r3, [r3, #4]
 80101a2:	2200      	movs	r2, #0
 80101a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80101a8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80101ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80101b0:	460b      	mov	r3, r1
 80101b2:	18db      	adds	r3, r3, r3
 80101b4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80101b6:	4613      	mov	r3, r2
 80101b8:	eb42 0303 	adc.w	r3, r2, r3
 80101bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80101be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80101c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80101c6:	f7f0 fd5f 	bl	8000c88 <__aeabi_uldivmod>
 80101ca:	4602      	mov	r2, r0
 80101cc:	460b      	mov	r3, r1
 80101ce:	4b0d      	ldr	r3, [pc, #52]	@ (8010204 <UART_SetConfig+0x2d4>)
 80101d0:	fba3 1302 	umull	r1, r3, r3, r2
 80101d4:	095b      	lsrs	r3, r3, #5
 80101d6:	2164      	movs	r1, #100	@ 0x64
 80101d8:	fb01 f303 	mul.w	r3, r1, r3
 80101dc:	1ad3      	subs	r3, r2, r3
 80101de:	00db      	lsls	r3, r3, #3
 80101e0:	3332      	adds	r3, #50	@ 0x32
 80101e2:	4a08      	ldr	r2, [pc, #32]	@ (8010204 <UART_SetConfig+0x2d4>)
 80101e4:	fba2 2303 	umull	r2, r3, r2, r3
 80101e8:	095b      	lsrs	r3, r3, #5
 80101ea:	f003 0207 	and.w	r2, r3, #7
 80101ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	4422      	add	r2, r4
 80101f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80101f8:	e106      	b.n	8010408 <UART_SetConfig+0x4d8>
 80101fa:	bf00      	nop
 80101fc:	40011000 	.word	0x40011000
 8010200:	40011400 	.word	0x40011400
 8010204:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801020c:	2200      	movs	r2, #0
 801020e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010212:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010216:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 801021a:	4642      	mov	r2, r8
 801021c:	464b      	mov	r3, r9
 801021e:	1891      	adds	r1, r2, r2
 8010220:	6239      	str	r1, [r7, #32]
 8010222:	415b      	adcs	r3, r3
 8010224:	627b      	str	r3, [r7, #36]	@ 0x24
 8010226:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 801022a:	4641      	mov	r1, r8
 801022c:	1854      	adds	r4, r2, r1
 801022e:	4649      	mov	r1, r9
 8010230:	eb43 0501 	adc.w	r5, r3, r1
 8010234:	f04f 0200 	mov.w	r2, #0
 8010238:	f04f 0300 	mov.w	r3, #0
 801023c:	00eb      	lsls	r3, r5, #3
 801023e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010242:	00e2      	lsls	r2, r4, #3
 8010244:	4614      	mov	r4, r2
 8010246:	461d      	mov	r5, r3
 8010248:	4643      	mov	r3, r8
 801024a:	18e3      	adds	r3, r4, r3
 801024c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010250:	464b      	mov	r3, r9
 8010252:	eb45 0303 	adc.w	r3, r5, r3
 8010256:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801025a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	2200      	movs	r2, #0
 8010262:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010266:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801026a:	f04f 0200 	mov.w	r2, #0
 801026e:	f04f 0300 	mov.w	r3, #0
 8010272:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010276:	4629      	mov	r1, r5
 8010278:	008b      	lsls	r3, r1, #2
 801027a:	4621      	mov	r1, r4
 801027c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010280:	4621      	mov	r1, r4
 8010282:	008a      	lsls	r2, r1, #2
 8010284:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010288:	f7f0 fcfe 	bl	8000c88 <__aeabi_uldivmod>
 801028c:	4602      	mov	r2, r0
 801028e:	460b      	mov	r3, r1
 8010290:	4b60      	ldr	r3, [pc, #384]	@ (8010414 <UART_SetConfig+0x4e4>)
 8010292:	fba3 2302 	umull	r2, r3, r3, r2
 8010296:	095b      	lsrs	r3, r3, #5
 8010298:	011c      	lsls	r4, r3, #4
 801029a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801029e:	2200      	movs	r2, #0
 80102a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80102a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80102a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80102ac:	4642      	mov	r2, r8
 80102ae:	464b      	mov	r3, r9
 80102b0:	1891      	adds	r1, r2, r2
 80102b2:	61b9      	str	r1, [r7, #24]
 80102b4:	415b      	adcs	r3, r3
 80102b6:	61fb      	str	r3, [r7, #28]
 80102b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80102bc:	4641      	mov	r1, r8
 80102be:	1851      	adds	r1, r2, r1
 80102c0:	6139      	str	r1, [r7, #16]
 80102c2:	4649      	mov	r1, r9
 80102c4:	414b      	adcs	r3, r1
 80102c6:	617b      	str	r3, [r7, #20]
 80102c8:	f04f 0200 	mov.w	r2, #0
 80102cc:	f04f 0300 	mov.w	r3, #0
 80102d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80102d4:	4659      	mov	r1, fp
 80102d6:	00cb      	lsls	r3, r1, #3
 80102d8:	4651      	mov	r1, sl
 80102da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80102de:	4651      	mov	r1, sl
 80102e0:	00ca      	lsls	r2, r1, #3
 80102e2:	4610      	mov	r0, r2
 80102e4:	4619      	mov	r1, r3
 80102e6:	4603      	mov	r3, r0
 80102e8:	4642      	mov	r2, r8
 80102ea:	189b      	adds	r3, r3, r2
 80102ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80102f0:	464b      	mov	r3, r9
 80102f2:	460a      	mov	r2, r1
 80102f4:	eb42 0303 	adc.w	r3, r2, r3
 80102f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80102fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010300:	685b      	ldr	r3, [r3, #4]
 8010302:	2200      	movs	r2, #0
 8010304:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010306:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010308:	f04f 0200 	mov.w	r2, #0
 801030c:	f04f 0300 	mov.w	r3, #0
 8010310:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010314:	4649      	mov	r1, r9
 8010316:	008b      	lsls	r3, r1, #2
 8010318:	4641      	mov	r1, r8
 801031a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801031e:	4641      	mov	r1, r8
 8010320:	008a      	lsls	r2, r1, #2
 8010322:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010326:	f7f0 fcaf 	bl	8000c88 <__aeabi_uldivmod>
 801032a:	4602      	mov	r2, r0
 801032c:	460b      	mov	r3, r1
 801032e:	4611      	mov	r1, r2
 8010330:	4b38      	ldr	r3, [pc, #224]	@ (8010414 <UART_SetConfig+0x4e4>)
 8010332:	fba3 2301 	umull	r2, r3, r3, r1
 8010336:	095b      	lsrs	r3, r3, #5
 8010338:	2264      	movs	r2, #100	@ 0x64
 801033a:	fb02 f303 	mul.w	r3, r2, r3
 801033e:	1acb      	subs	r3, r1, r3
 8010340:	011b      	lsls	r3, r3, #4
 8010342:	3332      	adds	r3, #50	@ 0x32
 8010344:	4a33      	ldr	r2, [pc, #204]	@ (8010414 <UART_SetConfig+0x4e4>)
 8010346:	fba2 2303 	umull	r2, r3, r2, r3
 801034a:	095b      	lsrs	r3, r3, #5
 801034c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010350:	441c      	add	r4, r3
 8010352:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010356:	2200      	movs	r2, #0
 8010358:	673b      	str	r3, [r7, #112]	@ 0x70
 801035a:	677a      	str	r2, [r7, #116]	@ 0x74
 801035c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010360:	4642      	mov	r2, r8
 8010362:	464b      	mov	r3, r9
 8010364:	1891      	adds	r1, r2, r2
 8010366:	60b9      	str	r1, [r7, #8]
 8010368:	415b      	adcs	r3, r3
 801036a:	60fb      	str	r3, [r7, #12]
 801036c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010370:	4641      	mov	r1, r8
 8010372:	1851      	adds	r1, r2, r1
 8010374:	6039      	str	r1, [r7, #0]
 8010376:	4649      	mov	r1, r9
 8010378:	414b      	adcs	r3, r1
 801037a:	607b      	str	r3, [r7, #4]
 801037c:	f04f 0200 	mov.w	r2, #0
 8010380:	f04f 0300 	mov.w	r3, #0
 8010384:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010388:	4659      	mov	r1, fp
 801038a:	00cb      	lsls	r3, r1, #3
 801038c:	4651      	mov	r1, sl
 801038e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010392:	4651      	mov	r1, sl
 8010394:	00ca      	lsls	r2, r1, #3
 8010396:	4610      	mov	r0, r2
 8010398:	4619      	mov	r1, r3
 801039a:	4603      	mov	r3, r0
 801039c:	4642      	mov	r2, r8
 801039e:	189b      	adds	r3, r3, r2
 80103a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80103a2:	464b      	mov	r3, r9
 80103a4:	460a      	mov	r2, r1
 80103a6:	eb42 0303 	adc.w	r3, r2, r3
 80103aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80103ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103b0:	685b      	ldr	r3, [r3, #4]
 80103b2:	2200      	movs	r2, #0
 80103b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80103b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80103b8:	f04f 0200 	mov.w	r2, #0
 80103bc:	f04f 0300 	mov.w	r3, #0
 80103c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80103c4:	4649      	mov	r1, r9
 80103c6:	008b      	lsls	r3, r1, #2
 80103c8:	4641      	mov	r1, r8
 80103ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80103ce:	4641      	mov	r1, r8
 80103d0:	008a      	lsls	r2, r1, #2
 80103d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80103d6:	f7f0 fc57 	bl	8000c88 <__aeabi_uldivmod>
 80103da:	4602      	mov	r2, r0
 80103dc:	460b      	mov	r3, r1
 80103de:	4b0d      	ldr	r3, [pc, #52]	@ (8010414 <UART_SetConfig+0x4e4>)
 80103e0:	fba3 1302 	umull	r1, r3, r3, r2
 80103e4:	095b      	lsrs	r3, r3, #5
 80103e6:	2164      	movs	r1, #100	@ 0x64
 80103e8:	fb01 f303 	mul.w	r3, r1, r3
 80103ec:	1ad3      	subs	r3, r2, r3
 80103ee:	011b      	lsls	r3, r3, #4
 80103f0:	3332      	adds	r3, #50	@ 0x32
 80103f2:	4a08      	ldr	r2, [pc, #32]	@ (8010414 <UART_SetConfig+0x4e4>)
 80103f4:	fba2 2303 	umull	r2, r3, r2, r3
 80103f8:	095b      	lsrs	r3, r3, #5
 80103fa:	f003 020f 	and.w	r2, r3, #15
 80103fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	4422      	add	r2, r4
 8010406:	609a      	str	r2, [r3, #8]
}
 8010408:	bf00      	nop
 801040a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801040e:	46bd      	mov	sp, r7
 8010410:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010414:	51eb851f 	.word	0x51eb851f

08010418 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010418:	b084      	sub	sp, #16
 801041a:	b580      	push	{r7, lr}
 801041c:	b084      	sub	sp, #16
 801041e:	af00      	add	r7, sp, #0
 8010420:	6078      	str	r0, [r7, #4]
 8010422:	f107 001c 	add.w	r0, r7, #28
 8010426:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801042a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801042e:	2b01      	cmp	r3, #1
 8010430:	d123      	bne.n	801047a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010436:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	68db      	ldr	r3, [r3, #12]
 8010442:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8010446:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801044a:	687a      	ldr	r2, [r7, #4]
 801044c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	68db      	ldr	r3, [r3, #12]
 8010452:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801045a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801045e:	2b01      	cmp	r3, #1
 8010460:	d105      	bne.n	801046e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	68db      	ldr	r3, [r3, #12]
 8010466:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801046e:	6878      	ldr	r0, [r7, #4]
 8010470:	f001 fae8 	bl	8011a44 <USB_CoreReset>
 8010474:	4603      	mov	r3, r0
 8010476:	73fb      	strb	r3, [r7, #15]
 8010478:	e01b      	b.n	80104b2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010486:	6878      	ldr	r0, [r7, #4]
 8010488:	f001 fadc 	bl	8011a44 <USB_CoreReset>
 801048c:	4603      	mov	r3, r0
 801048e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010490:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010494:	2b00      	cmp	r3, #0
 8010496:	d106      	bne.n	80104a6 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801049c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80104a4:	e005      	b.n	80104b2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104aa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80104b2:	7fbb      	ldrb	r3, [r7, #30]
 80104b4:	2b01      	cmp	r3, #1
 80104b6:	d10b      	bne.n	80104d0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	689b      	ldr	r3, [r3, #8]
 80104bc:	f043 0206 	orr.w	r2, r3, #6
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	689b      	ldr	r3, [r3, #8]
 80104c8:	f043 0220 	orr.w	r2, r3, #32
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80104d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3710      	adds	r7, #16
 80104d6:	46bd      	mov	sp, r7
 80104d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80104dc:	b004      	add	sp, #16
 80104de:	4770      	bx	lr

080104e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80104e0:	b480      	push	{r7}
 80104e2:	b087      	sub	sp, #28
 80104e4:	af00      	add	r7, sp, #0
 80104e6:	60f8      	str	r0, [r7, #12]
 80104e8:	60b9      	str	r1, [r7, #8]
 80104ea:	4613      	mov	r3, r2
 80104ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80104ee:	79fb      	ldrb	r3, [r7, #7]
 80104f0:	2b02      	cmp	r3, #2
 80104f2:	d165      	bne.n	80105c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80104f4:	68bb      	ldr	r3, [r7, #8]
 80104f6:	4a41      	ldr	r2, [pc, #260]	@ (80105fc <USB_SetTurnaroundTime+0x11c>)
 80104f8:	4293      	cmp	r3, r2
 80104fa:	d906      	bls.n	801050a <USB_SetTurnaroundTime+0x2a>
 80104fc:	68bb      	ldr	r3, [r7, #8]
 80104fe:	4a40      	ldr	r2, [pc, #256]	@ (8010600 <USB_SetTurnaroundTime+0x120>)
 8010500:	4293      	cmp	r3, r2
 8010502:	d202      	bcs.n	801050a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010504:	230f      	movs	r3, #15
 8010506:	617b      	str	r3, [r7, #20]
 8010508:	e062      	b.n	80105d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801050a:	68bb      	ldr	r3, [r7, #8]
 801050c:	4a3c      	ldr	r2, [pc, #240]	@ (8010600 <USB_SetTurnaroundTime+0x120>)
 801050e:	4293      	cmp	r3, r2
 8010510:	d306      	bcc.n	8010520 <USB_SetTurnaroundTime+0x40>
 8010512:	68bb      	ldr	r3, [r7, #8]
 8010514:	4a3b      	ldr	r2, [pc, #236]	@ (8010604 <USB_SetTurnaroundTime+0x124>)
 8010516:	4293      	cmp	r3, r2
 8010518:	d202      	bcs.n	8010520 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801051a:	230e      	movs	r3, #14
 801051c:	617b      	str	r3, [r7, #20]
 801051e:	e057      	b.n	80105d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8010520:	68bb      	ldr	r3, [r7, #8]
 8010522:	4a38      	ldr	r2, [pc, #224]	@ (8010604 <USB_SetTurnaroundTime+0x124>)
 8010524:	4293      	cmp	r3, r2
 8010526:	d306      	bcc.n	8010536 <USB_SetTurnaroundTime+0x56>
 8010528:	68bb      	ldr	r3, [r7, #8]
 801052a:	4a37      	ldr	r2, [pc, #220]	@ (8010608 <USB_SetTurnaroundTime+0x128>)
 801052c:	4293      	cmp	r3, r2
 801052e:	d202      	bcs.n	8010536 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8010530:	230d      	movs	r3, #13
 8010532:	617b      	str	r3, [r7, #20]
 8010534:	e04c      	b.n	80105d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010536:	68bb      	ldr	r3, [r7, #8]
 8010538:	4a33      	ldr	r2, [pc, #204]	@ (8010608 <USB_SetTurnaroundTime+0x128>)
 801053a:	4293      	cmp	r3, r2
 801053c:	d306      	bcc.n	801054c <USB_SetTurnaroundTime+0x6c>
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	4a32      	ldr	r2, [pc, #200]	@ (801060c <USB_SetTurnaroundTime+0x12c>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d802      	bhi.n	801054c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010546:	230c      	movs	r3, #12
 8010548:	617b      	str	r3, [r7, #20]
 801054a:	e041      	b.n	80105d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	4a2f      	ldr	r2, [pc, #188]	@ (801060c <USB_SetTurnaroundTime+0x12c>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d906      	bls.n	8010562 <USB_SetTurnaroundTime+0x82>
 8010554:	68bb      	ldr	r3, [r7, #8]
 8010556:	4a2e      	ldr	r2, [pc, #184]	@ (8010610 <USB_SetTurnaroundTime+0x130>)
 8010558:	4293      	cmp	r3, r2
 801055a:	d802      	bhi.n	8010562 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 801055c:	230b      	movs	r3, #11
 801055e:	617b      	str	r3, [r7, #20]
 8010560:	e036      	b.n	80105d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8010562:	68bb      	ldr	r3, [r7, #8]
 8010564:	4a2a      	ldr	r2, [pc, #168]	@ (8010610 <USB_SetTurnaroundTime+0x130>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d906      	bls.n	8010578 <USB_SetTurnaroundTime+0x98>
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	4a29      	ldr	r2, [pc, #164]	@ (8010614 <USB_SetTurnaroundTime+0x134>)
 801056e:	4293      	cmp	r3, r2
 8010570:	d802      	bhi.n	8010578 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8010572:	230a      	movs	r3, #10
 8010574:	617b      	str	r3, [r7, #20]
 8010576:	e02b      	b.n	80105d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	4a26      	ldr	r2, [pc, #152]	@ (8010614 <USB_SetTurnaroundTime+0x134>)
 801057c:	4293      	cmp	r3, r2
 801057e:	d906      	bls.n	801058e <USB_SetTurnaroundTime+0xae>
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	4a25      	ldr	r2, [pc, #148]	@ (8010618 <USB_SetTurnaroundTime+0x138>)
 8010584:	4293      	cmp	r3, r2
 8010586:	d202      	bcs.n	801058e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010588:	2309      	movs	r3, #9
 801058a:	617b      	str	r3, [r7, #20]
 801058c:	e020      	b.n	80105d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801058e:	68bb      	ldr	r3, [r7, #8]
 8010590:	4a21      	ldr	r2, [pc, #132]	@ (8010618 <USB_SetTurnaroundTime+0x138>)
 8010592:	4293      	cmp	r3, r2
 8010594:	d306      	bcc.n	80105a4 <USB_SetTurnaroundTime+0xc4>
 8010596:	68bb      	ldr	r3, [r7, #8]
 8010598:	4a20      	ldr	r2, [pc, #128]	@ (801061c <USB_SetTurnaroundTime+0x13c>)
 801059a:	4293      	cmp	r3, r2
 801059c:	d802      	bhi.n	80105a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 801059e:	2308      	movs	r3, #8
 80105a0:	617b      	str	r3, [r7, #20]
 80105a2:	e015      	b.n	80105d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	4a1d      	ldr	r2, [pc, #116]	@ (801061c <USB_SetTurnaroundTime+0x13c>)
 80105a8:	4293      	cmp	r3, r2
 80105aa:	d906      	bls.n	80105ba <USB_SetTurnaroundTime+0xda>
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	4a1c      	ldr	r2, [pc, #112]	@ (8010620 <USB_SetTurnaroundTime+0x140>)
 80105b0:	4293      	cmp	r3, r2
 80105b2:	d202      	bcs.n	80105ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80105b4:	2307      	movs	r3, #7
 80105b6:	617b      	str	r3, [r7, #20]
 80105b8:	e00a      	b.n	80105d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80105ba:	2306      	movs	r3, #6
 80105bc:	617b      	str	r3, [r7, #20]
 80105be:	e007      	b.n	80105d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80105c0:	79fb      	ldrb	r3, [r7, #7]
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d102      	bne.n	80105cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80105c6:	2309      	movs	r3, #9
 80105c8:	617b      	str	r3, [r7, #20]
 80105ca:	e001      	b.n	80105d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80105cc:	2309      	movs	r3, #9
 80105ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	68da      	ldr	r2, [r3, #12]
 80105e0:	697b      	ldr	r3, [r7, #20]
 80105e2:	029b      	lsls	r3, r3, #10
 80105e4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80105e8:	431a      	orrs	r2, r3
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80105ee:	2300      	movs	r3, #0
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	371c      	adds	r7, #28
 80105f4:	46bd      	mov	sp, r7
 80105f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fa:	4770      	bx	lr
 80105fc:	00d8acbf 	.word	0x00d8acbf
 8010600:	00e4e1c0 	.word	0x00e4e1c0
 8010604:	00f42400 	.word	0x00f42400
 8010608:	01067380 	.word	0x01067380
 801060c:	011a499f 	.word	0x011a499f
 8010610:	01312cff 	.word	0x01312cff
 8010614:	014ca43f 	.word	0x014ca43f
 8010618:	016e3600 	.word	0x016e3600
 801061c:	01a6ab1f 	.word	0x01a6ab1f
 8010620:	01e84800 	.word	0x01e84800

08010624 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010624:	b480      	push	{r7}
 8010626:	b083      	sub	sp, #12
 8010628:	af00      	add	r7, sp, #0
 801062a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	689b      	ldr	r3, [r3, #8]
 8010630:	f043 0201 	orr.w	r2, r3, #1
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010638:	2300      	movs	r3, #0
}
 801063a:	4618      	mov	r0, r3
 801063c:	370c      	adds	r7, #12
 801063e:	46bd      	mov	sp, r7
 8010640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010644:	4770      	bx	lr

08010646 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010646:	b480      	push	{r7}
 8010648:	b083      	sub	sp, #12
 801064a:	af00      	add	r7, sp, #0
 801064c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	689b      	ldr	r3, [r3, #8]
 8010652:	f023 0201 	bic.w	r2, r3, #1
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801065a:	2300      	movs	r3, #0
}
 801065c:	4618      	mov	r0, r3
 801065e:	370c      	adds	r7, #12
 8010660:	46bd      	mov	sp, r7
 8010662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010666:	4770      	bx	lr

08010668 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010668:	b580      	push	{r7, lr}
 801066a:	b084      	sub	sp, #16
 801066c:	af00      	add	r7, sp, #0
 801066e:	6078      	str	r0, [r7, #4]
 8010670:	460b      	mov	r3, r1
 8010672:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010674:	2300      	movs	r3, #0
 8010676:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010684:	78fb      	ldrb	r3, [r7, #3]
 8010686:	2b01      	cmp	r3, #1
 8010688:	d115      	bne.n	80106b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	68db      	ldr	r3, [r3, #12]
 801068e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010696:	200a      	movs	r0, #10
 8010698:	f7f9 fe98 	bl	800a3cc <HAL_Delay>
      ms += 10U;
 801069c:	68fb      	ldr	r3, [r7, #12]
 801069e:	330a      	adds	r3, #10
 80106a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	f001 f93f 	bl	8011926 <USB_GetMode>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b01      	cmp	r3, #1
 80106ac:	d01e      	beq.n	80106ec <USB_SetCurrentMode+0x84>
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	2bc7      	cmp	r3, #199	@ 0xc7
 80106b2:	d9f0      	bls.n	8010696 <USB_SetCurrentMode+0x2e>
 80106b4:	e01a      	b.n	80106ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80106b6:	78fb      	ldrb	r3, [r7, #3]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d115      	bne.n	80106e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	68db      	ldr	r3, [r3, #12]
 80106c0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80106c8:	200a      	movs	r0, #10
 80106ca:	f7f9 fe7f 	bl	800a3cc <HAL_Delay>
      ms += 10U;
 80106ce:	68fb      	ldr	r3, [r7, #12]
 80106d0:	330a      	adds	r3, #10
 80106d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80106d4:	6878      	ldr	r0, [r7, #4]
 80106d6:	f001 f926 	bl	8011926 <USB_GetMode>
 80106da:	4603      	mov	r3, r0
 80106dc:	2b00      	cmp	r3, #0
 80106de:	d005      	beq.n	80106ec <USB_SetCurrentMode+0x84>
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2bc7      	cmp	r3, #199	@ 0xc7
 80106e4:	d9f0      	bls.n	80106c8 <USB_SetCurrentMode+0x60>
 80106e6:	e001      	b.n	80106ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80106e8:	2301      	movs	r3, #1
 80106ea:	e005      	b.n	80106f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	2bc8      	cmp	r3, #200	@ 0xc8
 80106f0:	d101      	bne.n	80106f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80106f2:	2301      	movs	r3, #1
 80106f4:	e000      	b.n	80106f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80106f6:	2300      	movs	r3, #0
}
 80106f8:	4618      	mov	r0, r3
 80106fa:	3710      	adds	r7, #16
 80106fc:	46bd      	mov	sp, r7
 80106fe:	bd80      	pop	{r7, pc}

08010700 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010700:	b084      	sub	sp, #16
 8010702:	b580      	push	{r7, lr}
 8010704:	b086      	sub	sp, #24
 8010706:	af00      	add	r7, sp, #0
 8010708:	6078      	str	r0, [r7, #4]
 801070a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801070e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010712:	2300      	movs	r3, #0
 8010714:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801071a:	2300      	movs	r3, #0
 801071c:	613b      	str	r3, [r7, #16]
 801071e:	e009      	b.n	8010734 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010720:	687a      	ldr	r2, [r7, #4]
 8010722:	693b      	ldr	r3, [r7, #16]
 8010724:	3340      	adds	r3, #64	@ 0x40
 8010726:	009b      	lsls	r3, r3, #2
 8010728:	4413      	add	r3, r2
 801072a:	2200      	movs	r2, #0
 801072c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 801072e:	693b      	ldr	r3, [r7, #16]
 8010730:	3301      	adds	r3, #1
 8010732:	613b      	str	r3, [r7, #16]
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	2b0e      	cmp	r3, #14
 8010738:	d9f2      	bls.n	8010720 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801073a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 801073e:	2b00      	cmp	r3, #0
 8010740:	d11c      	bne.n	801077c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	68fa      	ldr	r2, [r7, #12]
 801074c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010750:	f043 0302 	orr.w	r3, r3, #2
 8010754:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801075a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010766:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010772:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	639a      	str	r2, [r3, #56]	@ 0x38
 801077a:	e00b      	b.n	8010794 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010780:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801078c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010790:	687b      	ldr	r3, [r7, #4]
 8010792:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801079a:	461a      	mov	r2, r3
 801079c:	2300      	movs	r3, #0
 801079e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80107a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80107a4:	2b01      	cmp	r3, #1
 80107a6:	d10d      	bne.n	80107c4 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80107a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80107ac:	2b00      	cmp	r3, #0
 80107ae:	d104      	bne.n	80107ba <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80107b0:	2100      	movs	r1, #0
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 f968 	bl	8010a88 <USB_SetDevSpeed>
 80107b8:	e008      	b.n	80107cc <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80107ba:	2101      	movs	r1, #1
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f000 f963 	bl	8010a88 <USB_SetDevSpeed>
 80107c2:	e003      	b.n	80107cc <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80107c4:	2103      	movs	r1, #3
 80107c6:	6878      	ldr	r0, [r7, #4]
 80107c8:	f000 f95e 	bl	8010a88 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80107cc:	2110      	movs	r1, #16
 80107ce:	6878      	ldr	r0, [r7, #4]
 80107d0:	f000 f8fa 	bl	80109c8 <USB_FlushTxFifo>
 80107d4:	4603      	mov	r3, r0
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d001      	beq.n	80107de <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80107da:	2301      	movs	r3, #1
 80107dc:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80107de:	6878      	ldr	r0, [r7, #4]
 80107e0:	f000 f924 	bl	8010a2c <USB_FlushRxFifo>
 80107e4:	4603      	mov	r3, r0
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d001      	beq.n	80107ee <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80107ea:	2301      	movs	r3, #1
 80107ec:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80107ee:	68fb      	ldr	r3, [r7, #12]
 80107f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80107f4:	461a      	mov	r2, r3
 80107f6:	2300      	movs	r3, #0
 80107f8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010800:	461a      	mov	r2, r3
 8010802:	2300      	movs	r3, #0
 8010804:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801080c:	461a      	mov	r2, r3
 801080e:	2300      	movs	r3, #0
 8010810:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010812:	2300      	movs	r3, #0
 8010814:	613b      	str	r3, [r7, #16]
 8010816:	e043      	b.n	80108a0 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010818:	693b      	ldr	r3, [r7, #16]
 801081a:	015a      	lsls	r2, r3, #5
 801081c:	68fb      	ldr	r3, [r7, #12]
 801081e:	4413      	add	r3, r2
 8010820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801082a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801082e:	d118      	bne.n	8010862 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8010830:	693b      	ldr	r3, [r7, #16]
 8010832:	2b00      	cmp	r3, #0
 8010834:	d10a      	bne.n	801084c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010836:	693b      	ldr	r3, [r7, #16]
 8010838:	015a      	lsls	r2, r3, #5
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	4413      	add	r3, r2
 801083e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010842:	461a      	mov	r2, r3
 8010844:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010848:	6013      	str	r3, [r2, #0]
 801084a:	e013      	b.n	8010874 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	015a      	lsls	r2, r3, #5
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	4413      	add	r3, r2
 8010854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010858:	461a      	mov	r2, r3
 801085a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801085e:	6013      	str	r3, [r2, #0]
 8010860:	e008      	b.n	8010874 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	015a      	lsls	r2, r3, #5
 8010866:	68fb      	ldr	r3, [r7, #12]
 8010868:	4413      	add	r3, r2
 801086a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801086e:	461a      	mov	r2, r3
 8010870:	2300      	movs	r3, #0
 8010872:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010874:	693b      	ldr	r3, [r7, #16]
 8010876:	015a      	lsls	r2, r3, #5
 8010878:	68fb      	ldr	r3, [r7, #12]
 801087a:	4413      	add	r3, r2
 801087c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010880:	461a      	mov	r2, r3
 8010882:	2300      	movs	r3, #0
 8010884:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010886:	693b      	ldr	r3, [r7, #16]
 8010888:	015a      	lsls	r2, r3, #5
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	4413      	add	r3, r2
 801088e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010892:	461a      	mov	r2, r3
 8010894:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010898:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	3301      	adds	r3, #1
 801089e:	613b      	str	r3, [r7, #16]
 80108a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80108a4:	461a      	mov	r2, r3
 80108a6:	693b      	ldr	r3, [r7, #16]
 80108a8:	4293      	cmp	r3, r2
 80108aa:	d3b5      	bcc.n	8010818 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80108ac:	2300      	movs	r3, #0
 80108ae:	613b      	str	r3, [r7, #16]
 80108b0:	e043      	b.n	801093a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80108b2:	693b      	ldr	r3, [r7, #16]
 80108b4:	015a      	lsls	r2, r3, #5
 80108b6:	68fb      	ldr	r3, [r7, #12]
 80108b8:	4413      	add	r3, r2
 80108ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80108c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80108c8:	d118      	bne.n	80108fc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80108ca:	693b      	ldr	r3, [r7, #16]
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d10a      	bne.n	80108e6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80108d0:	693b      	ldr	r3, [r7, #16]
 80108d2:	015a      	lsls	r2, r3, #5
 80108d4:	68fb      	ldr	r3, [r7, #12]
 80108d6:	4413      	add	r3, r2
 80108d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108dc:	461a      	mov	r2, r3
 80108de:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80108e2:	6013      	str	r3, [r2, #0]
 80108e4:	e013      	b.n	801090e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80108e6:	693b      	ldr	r3, [r7, #16]
 80108e8:	015a      	lsls	r2, r3, #5
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	4413      	add	r3, r2
 80108ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80108f2:	461a      	mov	r2, r3
 80108f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80108f8:	6013      	str	r3, [r2, #0]
 80108fa:	e008      	b.n	801090e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80108fc:	693b      	ldr	r3, [r7, #16]
 80108fe:	015a      	lsls	r2, r3, #5
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	4413      	add	r3, r2
 8010904:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010908:	461a      	mov	r2, r3
 801090a:	2300      	movs	r3, #0
 801090c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 801090e:	693b      	ldr	r3, [r7, #16]
 8010910:	015a      	lsls	r2, r3, #5
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	4413      	add	r3, r2
 8010916:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801091a:	461a      	mov	r2, r3
 801091c:	2300      	movs	r3, #0
 801091e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010920:	693b      	ldr	r3, [r7, #16]
 8010922:	015a      	lsls	r2, r3, #5
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	4413      	add	r3, r2
 8010928:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801092c:	461a      	mov	r2, r3
 801092e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010932:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010934:	693b      	ldr	r3, [r7, #16]
 8010936:	3301      	adds	r3, #1
 8010938:	613b      	str	r3, [r7, #16]
 801093a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801093e:	461a      	mov	r2, r3
 8010940:	693b      	ldr	r3, [r7, #16]
 8010942:	4293      	cmp	r3, r2
 8010944:	d3b5      	bcc.n	80108b2 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801094c:	691b      	ldr	r3, [r3, #16]
 801094e:	68fa      	ldr	r2, [r7, #12]
 8010950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010954:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010958:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	2200      	movs	r2, #0
 801095e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8010966:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010968:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801096c:	2b00      	cmp	r3, #0
 801096e:	d105      	bne.n	801097c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	699b      	ldr	r3, [r3, #24]
 8010974:	f043 0210 	orr.w	r2, r3, #16
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	699a      	ldr	r2, [r3, #24]
 8010980:	4b10      	ldr	r3, [pc, #64]	@ (80109c4 <USB_DevInit+0x2c4>)
 8010982:	4313      	orrs	r3, r2
 8010984:	687a      	ldr	r2, [r7, #4]
 8010986:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010988:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 801098c:	2b00      	cmp	r3, #0
 801098e:	d005      	beq.n	801099c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	699b      	ldr	r3, [r3, #24]
 8010994:	f043 0208 	orr.w	r2, r3, #8
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 801099c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80109a0:	2b01      	cmp	r3, #1
 80109a2:	d107      	bne.n	80109b4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	699b      	ldr	r3, [r3, #24]
 80109a8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80109ac:	f043 0304 	orr.w	r3, r3, #4
 80109b0:	687a      	ldr	r2, [r7, #4]
 80109b2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80109b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109b6:	4618      	mov	r0, r3
 80109b8:	3718      	adds	r7, #24
 80109ba:	46bd      	mov	sp, r7
 80109bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80109c0:	b004      	add	sp, #16
 80109c2:	4770      	bx	lr
 80109c4:	803c3800 	.word	0x803c3800

080109c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80109c8:	b480      	push	{r7}
 80109ca:	b085      	sub	sp, #20
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80109d2:	2300      	movs	r3, #0
 80109d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	3301      	adds	r3, #1
 80109da:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80109e2:	d901      	bls.n	80109e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80109e4:	2303      	movs	r3, #3
 80109e6:	e01b      	b.n	8010a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	691b      	ldr	r3, [r3, #16]
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	daf2      	bge.n	80109d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80109f0:	2300      	movs	r3, #0
 80109f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80109f4:	683b      	ldr	r3, [r7, #0]
 80109f6:	019b      	lsls	r3, r3, #6
 80109f8:	f043 0220 	orr.w	r2, r3, #32
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	3301      	adds	r3, #1
 8010a04:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a0c:	d901      	bls.n	8010a12 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010a0e:	2303      	movs	r3, #3
 8010a10:	e006      	b.n	8010a20 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	691b      	ldr	r3, [r3, #16]
 8010a16:	f003 0320 	and.w	r3, r3, #32
 8010a1a:	2b20      	cmp	r3, #32
 8010a1c:	d0f0      	beq.n	8010a00 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010a1e:	2300      	movs	r3, #0
}
 8010a20:	4618      	mov	r0, r3
 8010a22:	3714      	adds	r7, #20
 8010a24:	46bd      	mov	sp, r7
 8010a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a2a:	4770      	bx	lr

08010a2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010a2c:	b480      	push	{r7}
 8010a2e:	b085      	sub	sp, #20
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010a34:	2300      	movs	r3, #0
 8010a36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a44:	d901      	bls.n	8010a4a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010a46:	2303      	movs	r3, #3
 8010a48:	e018      	b.n	8010a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	691b      	ldr	r3, [r3, #16]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	daf2      	bge.n	8010a38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010a52:	2300      	movs	r3, #0
 8010a54:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	2210      	movs	r2, #16
 8010a5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010a5c:	68fb      	ldr	r3, [r7, #12]
 8010a5e:	3301      	adds	r3, #1
 8010a60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010a62:	68fb      	ldr	r3, [r7, #12]
 8010a64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010a68:	d901      	bls.n	8010a6e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010a6a:	2303      	movs	r3, #3
 8010a6c:	e006      	b.n	8010a7c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	691b      	ldr	r3, [r3, #16]
 8010a72:	f003 0310 	and.w	r3, r3, #16
 8010a76:	2b10      	cmp	r3, #16
 8010a78:	d0f0      	beq.n	8010a5c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010a7a:	2300      	movs	r3, #0
}
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	3714      	adds	r7, #20
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr

08010a88 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b085      	sub	sp, #20
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	460b      	mov	r3, r1
 8010a92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010a9e:	681a      	ldr	r2, [r3, #0]
 8010aa0:	78fb      	ldrb	r3, [r7, #3]
 8010aa2:	68f9      	ldr	r1, [r7, #12]
 8010aa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010aa8:	4313      	orrs	r3, r2
 8010aaa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010aac:	2300      	movs	r3, #0
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3714      	adds	r7, #20
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr

08010aba <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8010aba:	b480      	push	{r7}
 8010abc:	b087      	sub	sp, #28
 8010abe:	af00      	add	r7, sp, #0
 8010ac0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010ac6:	693b      	ldr	r3, [r7, #16]
 8010ac8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010acc:	689b      	ldr	r3, [r3, #8]
 8010ace:	f003 0306 	and.w	r3, r3, #6
 8010ad2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d102      	bne.n	8010ae0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010ada:	2300      	movs	r3, #0
 8010adc:	75fb      	strb	r3, [r7, #23]
 8010ade:	e00a      	b.n	8010af6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	2b02      	cmp	r3, #2
 8010ae4:	d002      	beq.n	8010aec <USB_GetDevSpeed+0x32>
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	2b06      	cmp	r3, #6
 8010aea:	d102      	bne.n	8010af2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010aec:	2302      	movs	r3, #2
 8010aee:	75fb      	strb	r3, [r7, #23]
 8010af0:	e001      	b.n	8010af6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010af2:	230f      	movs	r3, #15
 8010af4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010af8:	4618      	mov	r0, r3
 8010afa:	371c      	adds	r7, #28
 8010afc:	46bd      	mov	sp, r7
 8010afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b02:	4770      	bx	lr

08010b04 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010b04:	b480      	push	{r7}
 8010b06:	b085      	sub	sp, #20
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b0e:	687b      	ldr	r3, [r7, #4]
 8010b10:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010b12:	683b      	ldr	r3, [r7, #0]
 8010b14:	781b      	ldrb	r3, [r3, #0]
 8010b16:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	785b      	ldrb	r3, [r3, #1]
 8010b1c:	2b01      	cmp	r3, #1
 8010b1e:	d13a      	bne.n	8010b96 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010b20:	68fb      	ldr	r3, [r7, #12]
 8010b22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b26:	69da      	ldr	r2, [r3, #28]
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	781b      	ldrb	r3, [r3, #0]
 8010b2c:	f003 030f 	and.w	r3, r3, #15
 8010b30:	2101      	movs	r1, #1
 8010b32:	fa01 f303 	lsl.w	r3, r1, r3
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	68f9      	ldr	r1, [r7, #12]
 8010b3a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010b3e:	4313      	orrs	r3, r2
 8010b40:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010b42:	68bb      	ldr	r3, [r7, #8]
 8010b44:	015a      	lsls	r2, r3, #5
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	4413      	add	r3, r2
 8010b4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d155      	bne.n	8010c04 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b58:	68bb      	ldr	r3, [r7, #8]
 8010b5a:	015a      	lsls	r2, r3, #5
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	4413      	add	r3, r2
 8010b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	689b      	ldr	r3, [r3, #8]
 8010b6a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	791b      	ldrb	r3, [r3, #4]
 8010b72:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b74:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	059b      	lsls	r3, r3, #22
 8010b7a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010b7c:	4313      	orrs	r3, r2
 8010b7e:	68ba      	ldr	r2, [r7, #8]
 8010b80:	0151      	lsls	r1, r2, #5
 8010b82:	68fa      	ldr	r2, [r7, #12]
 8010b84:	440a      	add	r2, r1
 8010b86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010b8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010b8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010b92:	6013      	str	r3, [r2, #0]
 8010b94:	e036      	b.n	8010c04 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b9c:	69da      	ldr	r2, [r3, #28]
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	781b      	ldrb	r3, [r3, #0]
 8010ba2:	f003 030f 	and.w	r3, r3, #15
 8010ba6:	2101      	movs	r1, #1
 8010ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8010bac:	041b      	lsls	r3, r3, #16
 8010bae:	68f9      	ldr	r1, [r7, #12]
 8010bb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010bb4:	4313      	orrs	r3, r2
 8010bb6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010bb8:	68bb      	ldr	r3, [r7, #8]
 8010bba:	015a      	lsls	r2, r3, #5
 8010bbc:	68fb      	ldr	r3, [r7, #12]
 8010bbe:	4413      	add	r3, r2
 8010bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d11a      	bne.n	8010c04 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010bce:	68bb      	ldr	r3, [r7, #8]
 8010bd0:	015a      	lsls	r2, r3, #5
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	4413      	add	r3, r2
 8010bd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010bda:	681a      	ldr	r2, [r3, #0]
 8010bdc:	683b      	ldr	r3, [r7, #0]
 8010bde:	689b      	ldr	r3, [r3, #8]
 8010be0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010be4:	683b      	ldr	r3, [r7, #0]
 8010be6:	791b      	ldrb	r3, [r3, #4]
 8010be8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010bea:	430b      	orrs	r3, r1
 8010bec:	4313      	orrs	r3, r2
 8010bee:	68ba      	ldr	r2, [r7, #8]
 8010bf0:	0151      	lsls	r1, r2, #5
 8010bf2:	68fa      	ldr	r2, [r7, #12]
 8010bf4:	440a      	add	r2, r1
 8010bf6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010bfa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010bfe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010c02:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8010c04:	2300      	movs	r3, #0
}
 8010c06:	4618      	mov	r0, r3
 8010c08:	3714      	adds	r7, #20
 8010c0a:	46bd      	mov	sp, r7
 8010c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c10:	4770      	bx	lr
	...

08010c14 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010c14:	b480      	push	{r7}
 8010c16:	b085      	sub	sp, #20
 8010c18:	af00      	add	r7, sp, #0
 8010c1a:	6078      	str	r0, [r7, #4]
 8010c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c1e:	687b      	ldr	r3, [r7, #4]
 8010c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010c22:	683b      	ldr	r3, [r7, #0]
 8010c24:	781b      	ldrb	r3, [r3, #0]
 8010c26:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8010c28:	683b      	ldr	r3, [r7, #0]
 8010c2a:	785b      	ldrb	r3, [r3, #1]
 8010c2c:	2b01      	cmp	r3, #1
 8010c2e:	d161      	bne.n	8010cf4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010c30:	68bb      	ldr	r3, [r7, #8]
 8010c32:	015a      	lsls	r2, r3, #5
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	4413      	add	r3, r2
 8010c38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010c42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010c46:	d11f      	bne.n	8010c88 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	015a      	lsls	r2, r3, #5
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	4413      	add	r3, r2
 8010c50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c54:	681b      	ldr	r3, [r3, #0]
 8010c56:	68ba      	ldr	r2, [r7, #8]
 8010c58:	0151      	lsls	r1, r2, #5
 8010c5a:	68fa      	ldr	r2, [r7, #12]
 8010c5c:	440a      	add	r2, r1
 8010c5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010c62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010c66:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8010c68:	68bb      	ldr	r3, [r7, #8]
 8010c6a:	015a      	lsls	r2, r3, #5
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	4413      	add	r3, r2
 8010c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c74:	681b      	ldr	r3, [r3, #0]
 8010c76:	68ba      	ldr	r2, [r7, #8]
 8010c78:	0151      	lsls	r1, r2, #5
 8010c7a:	68fa      	ldr	r2, [r7, #12]
 8010c7c:	440a      	add	r2, r1
 8010c7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010c82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010c86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010c90:	683b      	ldr	r3, [r7, #0]
 8010c92:	781b      	ldrb	r3, [r3, #0]
 8010c94:	f003 030f 	and.w	r3, r3, #15
 8010c98:	2101      	movs	r1, #1
 8010c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	43db      	mvns	r3, r3
 8010ca2:	68f9      	ldr	r1, [r7, #12]
 8010ca4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010ca8:	4013      	ands	r3, r2
 8010caa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010cb2:	69da      	ldr	r2, [r3, #28]
 8010cb4:	683b      	ldr	r3, [r7, #0]
 8010cb6:	781b      	ldrb	r3, [r3, #0]
 8010cb8:	f003 030f 	and.w	r3, r3, #15
 8010cbc:	2101      	movs	r1, #1
 8010cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8010cc2:	b29b      	uxth	r3, r3
 8010cc4:	43db      	mvns	r3, r3
 8010cc6:	68f9      	ldr	r1, [r7, #12]
 8010cc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010ccc:	4013      	ands	r3, r2
 8010cce:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8010cd0:	68bb      	ldr	r3, [r7, #8]
 8010cd2:	015a      	lsls	r2, r3, #5
 8010cd4:	68fb      	ldr	r3, [r7, #12]
 8010cd6:	4413      	add	r3, r2
 8010cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cdc:	681a      	ldr	r2, [r3, #0]
 8010cde:	68bb      	ldr	r3, [r7, #8]
 8010ce0:	0159      	lsls	r1, r3, #5
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	440b      	add	r3, r1
 8010ce6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010cea:	4619      	mov	r1, r3
 8010cec:	4b35      	ldr	r3, [pc, #212]	@ (8010dc4 <USB_DeactivateEndpoint+0x1b0>)
 8010cee:	4013      	ands	r3, r2
 8010cf0:	600b      	str	r3, [r1, #0]
 8010cf2:	e060      	b.n	8010db6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010cf4:	68bb      	ldr	r3, [r7, #8]
 8010cf6:	015a      	lsls	r2, r3, #5
 8010cf8:	68fb      	ldr	r3, [r7, #12]
 8010cfa:	4413      	add	r3, r2
 8010cfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010d06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010d0a:	d11f      	bne.n	8010d4c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8010d0c:	68bb      	ldr	r3, [r7, #8]
 8010d0e:	015a      	lsls	r2, r3, #5
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	4413      	add	r3, r2
 8010d14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	68ba      	ldr	r2, [r7, #8]
 8010d1c:	0151      	lsls	r1, r2, #5
 8010d1e:	68fa      	ldr	r2, [r7, #12]
 8010d20:	440a      	add	r2, r1
 8010d22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010d26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8010d2a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	015a      	lsls	r2, r3, #5
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	4413      	add	r3, r2
 8010d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	68ba      	ldr	r2, [r7, #8]
 8010d3c:	0151      	lsls	r1, r2, #5
 8010d3e:	68fa      	ldr	r2, [r7, #12]
 8010d40:	440a      	add	r2, r1
 8010d42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8010d46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010d54:	683b      	ldr	r3, [r7, #0]
 8010d56:	781b      	ldrb	r3, [r3, #0]
 8010d58:	f003 030f 	and.w	r3, r3, #15
 8010d5c:	2101      	movs	r1, #1
 8010d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8010d62:	041b      	lsls	r3, r3, #16
 8010d64:	43db      	mvns	r3, r3
 8010d66:	68f9      	ldr	r1, [r7, #12]
 8010d68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010d6c:	4013      	ands	r3, r2
 8010d6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d76:	69da      	ldr	r2, [r3, #28]
 8010d78:	683b      	ldr	r3, [r7, #0]
 8010d7a:	781b      	ldrb	r3, [r3, #0]
 8010d7c:	f003 030f 	and.w	r3, r3, #15
 8010d80:	2101      	movs	r1, #1
 8010d82:	fa01 f303 	lsl.w	r3, r1, r3
 8010d86:	041b      	lsls	r3, r3, #16
 8010d88:	43db      	mvns	r3, r3
 8010d8a:	68f9      	ldr	r1, [r7, #12]
 8010d8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010d90:	4013      	ands	r3, r2
 8010d92:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8010d94:	68bb      	ldr	r3, [r7, #8]
 8010d96:	015a      	lsls	r2, r3, #5
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	4413      	add	r3, r2
 8010d9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	0159      	lsls	r1, r3, #5
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	440b      	add	r3, r1
 8010daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010dae:	4619      	mov	r1, r3
 8010db0:	4b05      	ldr	r3, [pc, #20]	@ (8010dc8 <USB_DeactivateEndpoint+0x1b4>)
 8010db2:	4013      	ands	r3, r2
 8010db4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8010db6:	2300      	movs	r3, #0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3714      	adds	r7, #20
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr
 8010dc4:	ec337800 	.word	0xec337800
 8010dc8:	eff37800 	.word	0xeff37800

08010dcc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b08a      	sub	sp, #40	@ 0x28
 8010dd0:	af02      	add	r7, sp, #8
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8010dde:	68bb      	ldr	r3, [r7, #8]
 8010de0:	781b      	ldrb	r3, [r3, #0]
 8010de2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	785b      	ldrb	r3, [r3, #1]
 8010de8:	2b01      	cmp	r3, #1
 8010dea:	f040 817f 	bne.w	80110ec <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	691b      	ldr	r3, [r3, #16]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d132      	bne.n	8010e5c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010df6:	69bb      	ldr	r3, [r7, #24]
 8010df8:	015a      	lsls	r2, r3, #5
 8010dfa:	69fb      	ldr	r3, [r7, #28]
 8010dfc:	4413      	add	r3, r2
 8010dfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e02:	691b      	ldr	r3, [r3, #16]
 8010e04:	69ba      	ldr	r2, [r7, #24]
 8010e06:	0151      	lsls	r1, r2, #5
 8010e08:	69fa      	ldr	r2, [r7, #28]
 8010e0a:	440a      	add	r2, r1
 8010e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e10:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010e14:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010e18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010e1a:	69bb      	ldr	r3, [r7, #24]
 8010e1c:	015a      	lsls	r2, r3, #5
 8010e1e:	69fb      	ldr	r3, [r7, #28]
 8010e20:	4413      	add	r3, r2
 8010e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e26:	691b      	ldr	r3, [r3, #16]
 8010e28:	69ba      	ldr	r2, [r7, #24]
 8010e2a:	0151      	lsls	r1, r2, #5
 8010e2c:	69fa      	ldr	r2, [r7, #28]
 8010e2e:	440a      	add	r2, r1
 8010e30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010e38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010e3a:	69bb      	ldr	r3, [r7, #24]
 8010e3c:	015a      	lsls	r2, r3, #5
 8010e3e:	69fb      	ldr	r3, [r7, #28]
 8010e40:	4413      	add	r3, r2
 8010e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e46:	691b      	ldr	r3, [r3, #16]
 8010e48:	69ba      	ldr	r2, [r7, #24]
 8010e4a:	0151      	lsls	r1, r2, #5
 8010e4c:	69fa      	ldr	r2, [r7, #28]
 8010e4e:	440a      	add	r2, r1
 8010e50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e54:	0cdb      	lsrs	r3, r3, #19
 8010e56:	04db      	lsls	r3, r3, #19
 8010e58:	6113      	str	r3, [r2, #16]
 8010e5a:	e097      	b.n	8010f8c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8010e5c:	69bb      	ldr	r3, [r7, #24]
 8010e5e:	015a      	lsls	r2, r3, #5
 8010e60:	69fb      	ldr	r3, [r7, #28]
 8010e62:	4413      	add	r3, r2
 8010e64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e68:	691b      	ldr	r3, [r3, #16]
 8010e6a:	69ba      	ldr	r2, [r7, #24]
 8010e6c:	0151      	lsls	r1, r2, #5
 8010e6e:	69fa      	ldr	r2, [r7, #28]
 8010e70:	440a      	add	r2, r1
 8010e72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e76:	0cdb      	lsrs	r3, r3, #19
 8010e78:	04db      	lsls	r3, r3, #19
 8010e7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8010e7c:	69bb      	ldr	r3, [r7, #24]
 8010e7e:	015a      	lsls	r2, r3, #5
 8010e80:	69fb      	ldr	r3, [r7, #28]
 8010e82:	4413      	add	r3, r2
 8010e84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010e88:	691b      	ldr	r3, [r3, #16]
 8010e8a:	69ba      	ldr	r2, [r7, #24]
 8010e8c:	0151      	lsls	r1, r2, #5
 8010e8e:	69fa      	ldr	r2, [r7, #28]
 8010e90:	440a      	add	r2, r1
 8010e92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010e96:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8010e9a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8010e9e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8010ea0:	69bb      	ldr	r3, [r7, #24]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d11a      	bne.n	8010edc <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8010ea6:	68bb      	ldr	r3, [r7, #8]
 8010ea8:	691a      	ldr	r2, [r3, #16]
 8010eaa:	68bb      	ldr	r3, [r7, #8]
 8010eac:	689b      	ldr	r3, [r3, #8]
 8010eae:	429a      	cmp	r2, r3
 8010eb0:	d903      	bls.n	8010eba <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8010eb2:	68bb      	ldr	r3, [r7, #8]
 8010eb4:	689a      	ldr	r2, [r3, #8]
 8010eb6:	68bb      	ldr	r3, [r7, #8]
 8010eb8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8010eba:	69bb      	ldr	r3, [r7, #24]
 8010ebc:	015a      	lsls	r2, r3, #5
 8010ebe:	69fb      	ldr	r3, [r7, #28]
 8010ec0:	4413      	add	r3, r2
 8010ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ec6:	691b      	ldr	r3, [r3, #16]
 8010ec8:	69ba      	ldr	r2, [r7, #24]
 8010eca:	0151      	lsls	r1, r2, #5
 8010ecc:	69fa      	ldr	r2, [r7, #28]
 8010ece:	440a      	add	r2, r1
 8010ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010ed4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8010ed8:	6113      	str	r3, [r2, #16]
 8010eda:	e044      	b.n	8010f66 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	691a      	ldr	r2, [r3, #16]
 8010ee0:	68bb      	ldr	r3, [r7, #8]
 8010ee2:	689b      	ldr	r3, [r3, #8]
 8010ee4:	4413      	add	r3, r2
 8010ee6:	1e5a      	subs	r2, r3, #1
 8010ee8:	68bb      	ldr	r3, [r7, #8]
 8010eea:	689b      	ldr	r3, [r3, #8]
 8010eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ef0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8010ef2:	69bb      	ldr	r3, [r7, #24]
 8010ef4:	015a      	lsls	r2, r3, #5
 8010ef6:	69fb      	ldr	r3, [r7, #28]
 8010ef8:	4413      	add	r3, r2
 8010efa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010efe:	691a      	ldr	r2, [r3, #16]
 8010f00:	8afb      	ldrh	r3, [r7, #22]
 8010f02:	04d9      	lsls	r1, r3, #19
 8010f04:	4ba4      	ldr	r3, [pc, #656]	@ (8011198 <USB_EPStartXfer+0x3cc>)
 8010f06:	400b      	ands	r3, r1
 8010f08:	69b9      	ldr	r1, [r7, #24]
 8010f0a:	0148      	lsls	r0, r1, #5
 8010f0c:	69f9      	ldr	r1, [r7, #28]
 8010f0e:	4401      	add	r1, r0
 8010f10:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010f14:	4313      	orrs	r3, r2
 8010f16:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	791b      	ldrb	r3, [r3, #4]
 8010f1c:	2b01      	cmp	r3, #1
 8010f1e:	d122      	bne.n	8010f66 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8010f20:	69bb      	ldr	r3, [r7, #24]
 8010f22:	015a      	lsls	r2, r3, #5
 8010f24:	69fb      	ldr	r3, [r7, #28]
 8010f26:	4413      	add	r3, r2
 8010f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f2c:	691b      	ldr	r3, [r3, #16]
 8010f2e:	69ba      	ldr	r2, [r7, #24]
 8010f30:	0151      	lsls	r1, r2, #5
 8010f32:	69fa      	ldr	r2, [r7, #28]
 8010f34:	440a      	add	r2, r1
 8010f36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f3a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8010f3e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8010f40:	69bb      	ldr	r3, [r7, #24]
 8010f42:	015a      	lsls	r2, r3, #5
 8010f44:	69fb      	ldr	r3, [r7, #28]
 8010f46:	4413      	add	r3, r2
 8010f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f4c:	691a      	ldr	r2, [r3, #16]
 8010f4e:	8afb      	ldrh	r3, [r7, #22]
 8010f50:	075b      	lsls	r3, r3, #29
 8010f52:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8010f56:	69b9      	ldr	r1, [r7, #24]
 8010f58:	0148      	lsls	r0, r1, #5
 8010f5a:	69f9      	ldr	r1, [r7, #28]
 8010f5c:	4401      	add	r1, r0
 8010f5e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010f62:	4313      	orrs	r3, r2
 8010f64:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8010f66:	69bb      	ldr	r3, [r7, #24]
 8010f68:	015a      	lsls	r2, r3, #5
 8010f6a:	69fb      	ldr	r3, [r7, #28]
 8010f6c:	4413      	add	r3, r2
 8010f6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f72:	691a      	ldr	r2, [r3, #16]
 8010f74:	68bb      	ldr	r3, [r7, #8]
 8010f76:	691b      	ldr	r3, [r3, #16]
 8010f78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010f7c:	69b9      	ldr	r1, [r7, #24]
 8010f7e:	0148      	lsls	r0, r1, #5
 8010f80:	69f9      	ldr	r1, [r7, #28]
 8010f82:	4401      	add	r1, r0
 8010f84:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8010f8c:	79fb      	ldrb	r3, [r7, #7]
 8010f8e:	2b01      	cmp	r3, #1
 8010f90:	d14b      	bne.n	801102a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8010f92:	68bb      	ldr	r3, [r7, #8]
 8010f94:	69db      	ldr	r3, [r3, #28]
 8010f96:	2b00      	cmp	r3, #0
 8010f98:	d009      	beq.n	8010fae <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8010f9a:	69bb      	ldr	r3, [r7, #24]
 8010f9c:	015a      	lsls	r2, r3, #5
 8010f9e:	69fb      	ldr	r3, [r7, #28]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fa6:	461a      	mov	r2, r3
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	69db      	ldr	r3, [r3, #28]
 8010fac:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8010fae:	68bb      	ldr	r3, [r7, #8]
 8010fb0:	791b      	ldrb	r3, [r3, #4]
 8010fb2:	2b01      	cmp	r3, #1
 8010fb4:	d128      	bne.n	8011008 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8010fb6:	69fb      	ldr	r3, [r7, #28]
 8010fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fbc:	689b      	ldr	r3, [r3, #8]
 8010fbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d110      	bne.n	8010fe8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8010fc6:	69bb      	ldr	r3, [r7, #24]
 8010fc8:	015a      	lsls	r2, r3, #5
 8010fca:	69fb      	ldr	r3, [r7, #28]
 8010fcc:	4413      	add	r3, r2
 8010fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	69ba      	ldr	r2, [r7, #24]
 8010fd6:	0151      	lsls	r1, r2, #5
 8010fd8:	69fa      	ldr	r2, [r7, #28]
 8010fda:	440a      	add	r2, r1
 8010fdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010fe0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8010fe4:	6013      	str	r3, [r2, #0]
 8010fe6:	e00f      	b.n	8011008 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8010fe8:	69bb      	ldr	r3, [r7, #24]
 8010fea:	015a      	lsls	r2, r3, #5
 8010fec:	69fb      	ldr	r3, [r7, #28]
 8010fee:	4413      	add	r3, r2
 8010ff0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	69ba      	ldr	r2, [r7, #24]
 8010ff8:	0151      	lsls	r1, r2, #5
 8010ffa:	69fa      	ldr	r2, [r7, #28]
 8010ffc:	440a      	add	r2, r1
 8010ffe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011002:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011006:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011008:	69bb      	ldr	r3, [r7, #24]
 801100a:	015a      	lsls	r2, r3, #5
 801100c:	69fb      	ldr	r3, [r7, #28]
 801100e:	4413      	add	r3, r2
 8011010:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	69ba      	ldr	r2, [r7, #24]
 8011018:	0151      	lsls	r1, r2, #5
 801101a:	69fa      	ldr	r2, [r7, #28]
 801101c:	440a      	add	r2, r1
 801101e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011022:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011026:	6013      	str	r3, [r2, #0]
 8011028:	e166      	b.n	80112f8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801102a:	69bb      	ldr	r3, [r7, #24]
 801102c:	015a      	lsls	r2, r3, #5
 801102e:	69fb      	ldr	r3, [r7, #28]
 8011030:	4413      	add	r3, r2
 8011032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	69ba      	ldr	r2, [r7, #24]
 801103a:	0151      	lsls	r1, r2, #5
 801103c:	69fa      	ldr	r2, [r7, #28]
 801103e:	440a      	add	r2, r1
 8011040:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011044:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011048:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 801104a:	68bb      	ldr	r3, [r7, #8]
 801104c:	791b      	ldrb	r3, [r3, #4]
 801104e:	2b01      	cmp	r3, #1
 8011050:	d015      	beq.n	801107e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	691b      	ldr	r3, [r3, #16]
 8011056:	2b00      	cmp	r3, #0
 8011058:	f000 814e 	beq.w	80112f8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 801105c:	69fb      	ldr	r3, [r7, #28]
 801105e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011062:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011064:	68bb      	ldr	r3, [r7, #8]
 8011066:	781b      	ldrb	r3, [r3, #0]
 8011068:	f003 030f 	and.w	r3, r3, #15
 801106c:	2101      	movs	r1, #1
 801106e:	fa01 f303 	lsl.w	r3, r1, r3
 8011072:	69f9      	ldr	r1, [r7, #28]
 8011074:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011078:	4313      	orrs	r3, r2
 801107a:	634b      	str	r3, [r1, #52]	@ 0x34
 801107c:	e13c      	b.n	80112f8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801107e:	69fb      	ldr	r3, [r7, #28]
 8011080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011084:	689b      	ldr	r3, [r3, #8]
 8011086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801108a:	2b00      	cmp	r3, #0
 801108c:	d110      	bne.n	80110b0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801108e:	69bb      	ldr	r3, [r7, #24]
 8011090:	015a      	lsls	r2, r3, #5
 8011092:	69fb      	ldr	r3, [r7, #28]
 8011094:	4413      	add	r3, r2
 8011096:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801109a:	681b      	ldr	r3, [r3, #0]
 801109c:	69ba      	ldr	r2, [r7, #24]
 801109e:	0151      	lsls	r1, r2, #5
 80110a0:	69fa      	ldr	r2, [r7, #28]
 80110a2:	440a      	add	r2, r1
 80110a4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80110a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80110ac:	6013      	str	r3, [r2, #0]
 80110ae:	e00f      	b.n	80110d0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	015a      	lsls	r2, r3, #5
 80110b4:	69fb      	ldr	r3, [r7, #28]
 80110b6:	4413      	add	r3, r2
 80110b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	69ba      	ldr	r2, [r7, #24]
 80110c0:	0151      	lsls	r1, r2, #5
 80110c2:	69fa      	ldr	r2, [r7, #28]
 80110c4:	440a      	add	r2, r1
 80110c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80110ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80110ce:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	68d9      	ldr	r1, [r3, #12]
 80110d4:	68bb      	ldr	r3, [r7, #8]
 80110d6:	781a      	ldrb	r2, [r3, #0]
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	691b      	ldr	r3, [r3, #16]
 80110dc:	b298      	uxth	r0, r3
 80110de:	79fb      	ldrb	r3, [r7, #7]
 80110e0:	9300      	str	r3, [sp, #0]
 80110e2:	4603      	mov	r3, r0
 80110e4:	68f8      	ldr	r0, [r7, #12]
 80110e6:	f000 f9b9 	bl	801145c <USB_WritePacket>
 80110ea:	e105      	b.n	80112f8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80110ec:	69bb      	ldr	r3, [r7, #24]
 80110ee:	015a      	lsls	r2, r3, #5
 80110f0:	69fb      	ldr	r3, [r7, #28]
 80110f2:	4413      	add	r3, r2
 80110f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80110f8:	691b      	ldr	r3, [r3, #16]
 80110fa:	69ba      	ldr	r2, [r7, #24]
 80110fc:	0151      	lsls	r1, r2, #5
 80110fe:	69fa      	ldr	r2, [r7, #28]
 8011100:	440a      	add	r2, r1
 8011102:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011106:	0cdb      	lsrs	r3, r3, #19
 8011108:	04db      	lsls	r3, r3, #19
 801110a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801110c:	69bb      	ldr	r3, [r7, #24]
 801110e:	015a      	lsls	r2, r3, #5
 8011110:	69fb      	ldr	r3, [r7, #28]
 8011112:	4413      	add	r3, r2
 8011114:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011118:	691b      	ldr	r3, [r3, #16]
 801111a:	69ba      	ldr	r2, [r7, #24]
 801111c:	0151      	lsls	r1, r2, #5
 801111e:	69fa      	ldr	r2, [r7, #28]
 8011120:	440a      	add	r2, r1
 8011122:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011126:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 801112a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 801112e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8011130:	69bb      	ldr	r3, [r7, #24]
 8011132:	2b00      	cmp	r3, #0
 8011134:	d132      	bne.n	801119c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	691b      	ldr	r3, [r3, #16]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d003      	beq.n	8011146 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	689a      	ldr	r2, [r3, #8]
 8011142:	68bb      	ldr	r3, [r7, #8]
 8011144:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011146:	68bb      	ldr	r3, [r7, #8]
 8011148:	689a      	ldr	r2, [r3, #8]
 801114a:	68bb      	ldr	r3, [r7, #8]
 801114c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801114e:	69bb      	ldr	r3, [r7, #24]
 8011150:	015a      	lsls	r2, r3, #5
 8011152:	69fb      	ldr	r3, [r7, #28]
 8011154:	4413      	add	r3, r2
 8011156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801115a:	691a      	ldr	r2, [r3, #16]
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	6a1b      	ldr	r3, [r3, #32]
 8011160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011164:	69b9      	ldr	r1, [r7, #24]
 8011166:	0148      	lsls	r0, r1, #5
 8011168:	69f9      	ldr	r1, [r7, #28]
 801116a:	4401      	add	r1, r0
 801116c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011170:	4313      	orrs	r3, r2
 8011172:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011174:	69bb      	ldr	r3, [r7, #24]
 8011176:	015a      	lsls	r2, r3, #5
 8011178:	69fb      	ldr	r3, [r7, #28]
 801117a:	4413      	add	r3, r2
 801117c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011180:	691b      	ldr	r3, [r3, #16]
 8011182:	69ba      	ldr	r2, [r7, #24]
 8011184:	0151      	lsls	r1, r2, #5
 8011186:	69fa      	ldr	r2, [r7, #28]
 8011188:	440a      	add	r2, r1
 801118a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801118e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011192:	6113      	str	r3, [r2, #16]
 8011194:	e062      	b.n	801125c <USB_EPStartXfer+0x490>
 8011196:	bf00      	nop
 8011198:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	691b      	ldr	r3, [r3, #16]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d123      	bne.n	80111ec <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80111a4:	69bb      	ldr	r3, [r7, #24]
 80111a6:	015a      	lsls	r2, r3, #5
 80111a8:	69fb      	ldr	r3, [r7, #28]
 80111aa:	4413      	add	r3, r2
 80111ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111b0:	691a      	ldr	r2, [r3, #16]
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	689b      	ldr	r3, [r3, #8]
 80111b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80111ba:	69b9      	ldr	r1, [r7, #24]
 80111bc:	0148      	lsls	r0, r1, #5
 80111be:	69f9      	ldr	r1, [r7, #28]
 80111c0:	4401      	add	r1, r0
 80111c2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80111c6:	4313      	orrs	r3, r2
 80111c8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80111ca:	69bb      	ldr	r3, [r7, #24]
 80111cc:	015a      	lsls	r2, r3, #5
 80111ce:	69fb      	ldr	r3, [r7, #28]
 80111d0:	4413      	add	r3, r2
 80111d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111d6:	691b      	ldr	r3, [r3, #16]
 80111d8:	69ba      	ldr	r2, [r7, #24]
 80111da:	0151      	lsls	r1, r2, #5
 80111dc:	69fa      	ldr	r2, [r7, #28]
 80111de:	440a      	add	r2, r1
 80111e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80111e4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80111e8:	6113      	str	r3, [r2, #16]
 80111ea:	e037      	b.n	801125c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80111ec:	68bb      	ldr	r3, [r7, #8]
 80111ee:	691a      	ldr	r2, [r3, #16]
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	689b      	ldr	r3, [r3, #8]
 80111f4:	4413      	add	r3, r2
 80111f6:	1e5a      	subs	r2, r3, #1
 80111f8:	68bb      	ldr	r3, [r7, #8]
 80111fa:	689b      	ldr	r3, [r3, #8]
 80111fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8011200:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	689b      	ldr	r3, [r3, #8]
 8011206:	8afa      	ldrh	r2, [r7, #22]
 8011208:	fb03 f202 	mul.w	r2, r3, r2
 801120c:	68bb      	ldr	r3, [r7, #8]
 801120e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011210:	69bb      	ldr	r3, [r7, #24]
 8011212:	015a      	lsls	r2, r3, #5
 8011214:	69fb      	ldr	r3, [r7, #28]
 8011216:	4413      	add	r3, r2
 8011218:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801121c:	691a      	ldr	r2, [r3, #16]
 801121e:	8afb      	ldrh	r3, [r7, #22]
 8011220:	04d9      	lsls	r1, r3, #19
 8011222:	4b38      	ldr	r3, [pc, #224]	@ (8011304 <USB_EPStartXfer+0x538>)
 8011224:	400b      	ands	r3, r1
 8011226:	69b9      	ldr	r1, [r7, #24]
 8011228:	0148      	lsls	r0, r1, #5
 801122a:	69f9      	ldr	r1, [r7, #28]
 801122c:	4401      	add	r1, r0
 801122e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011232:	4313      	orrs	r3, r2
 8011234:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	015a      	lsls	r2, r3, #5
 801123a:	69fb      	ldr	r3, [r7, #28]
 801123c:	4413      	add	r3, r2
 801123e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011242:	691a      	ldr	r2, [r3, #16]
 8011244:	68bb      	ldr	r3, [r7, #8]
 8011246:	6a1b      	ldr	r3, [r3, #32]
 8011248:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801124c:	69b9      	ldr	r1, [r7, #24]
 801124e:	0148      	lsls	r0, r1, #5
 8011250:	69f9      	ldr	r1, [r7, #28]
 8011252:	4401      	add	r1, r0
 8011254:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011258:	4313      	orrs	r3, r2
 801125a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 801125c:	79fb      	ldrb	r3, [r7, #7]
 801125e:	2b01      	cmp	r3, #1
 8011260:	d10d      	bne.n	801127e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	68db      	ldr	r3, [r3, #12]
 8011266:	2b00      	cmp	r3, #0
 8011268:	d009      	beq.n	801127e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	68d9      	ldr	r1, [r3, #12]
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	015a      	lsls	r2, r3, #5
 8011272:	69fb      	ldr	r3, [r7, #28]
 8011274:	4413      	add	r3, r2
 8011276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801127a:	460a      	mov	r2, r1
 801127c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	791b      	ldrb	r3, [r3, #4]
 8011282:	2b01      	cmp	r3, #1
 8011284:	d128      	bne.n	80112d8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011286:	69fb      	ldr	r3, [r7, #28]
 8011288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801128c:	689b      	ldr	r3, [r3, #8]
 801128e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011292:	2b00      	cmp	r3, #0
 8011294:	d110      	bne.n	80112b8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011296:	69bb      	ldr	r3, [r7, #24]
 8011298:	015a      	lsls	r2, r3, #5
 801129a:	69fb      	ldr	r3, [r7, #28]
 801129c:	4413      	add	r3, r2
 801129e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112a2:	681b      	ldr	r3, [r3, #0]
 80112a4:	69ba      	ldr	r2, [r7, #24]
 80112a6:	0151      	lsls	r1, r2, #5
 80112a8:	69fa      	ldr	r2, [r7, #28]
 80112aa:	440a      	add	r2, r1
 80112ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80112b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80112b4:	6013      	str	r3, [r2, #0]
 80112b6:	e00f      	b.n	80112d8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80112b8:	69bb      	ldr	r3, [r7, #24]
 80112ba:	015a      	lsls	r2, r3, #5
 80112bc:	69fb      	ldr	r3, [r7, #28]
 80112be:	4413      	add	r3, r2
 80112c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	69ba      	ldr	r2, [r7, #24]
 80112c8:	0151      	lsls	r1, r2, #5
 80112ca:	69fa      	ldr	r2, [r7, #28]
 80112cc:	440a      	add	r2, r1
 80112ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80112d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80112d6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80112d8:	69bb      	ldr	r3, [r7, #24]
 80112da:	015a      	lsls	r2, r3, #5
 80112dc:	69fb      	ldr	r3, [r7, #28]
 80112de:	4413      	add	r3, r2
 80112e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80112e4:	681b      	ldr	r3, [r3, #0]
 80112e6:	69ba      	ldr	r2, [r7, #24]
 80112e8:	0151      	lsls	r1, r2, #5
 80112ea:	69fa      	ldr	r2, [r7, #28]
 80112ec:	440a      	add	r2, r1
 80112ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80112f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80112f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80112f8:	2300      	movs	r3, #0
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	3720      	adds	r7, #32
 80112fe:	46bd      	mov	sp, r7
 8011300:	bd80      	pop	{r7, pc}
 8011302:	bf00      	nop
 8011304:	1ff80000 	.word	0x1ff80000

08011308 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011308:	b480      	push	{r7}
 801130a:	b087      	sub	sp, #28
 801130c:	af00      	add	r7, sp, #0
 801130e:	6078      	str	r0, [r7, #4]
 8011310:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011312:	2300      	movs	r3, #0
 8011314:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011316:	2300      	movs	r3, #0
 8011318:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801131e:	683b      	ldr	r3, [r7, #0]
 8011320:	785b      	ldrb	r3, [r3, #1]
 8011322:	2b01      	cmp	r3, #1
 8011324:	d14a      	bne.n	80113bc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011326:	683b      	ldr	r3, [r7, #0]
 8011328:	781b      	ldrb	r3, [r3, #0]
 801132a:	015a      	lsls	r2, r3, #5
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	4413      	add	r3, r2
 8011330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011334:	681b      	ldr	r3, [r3, #0]
 8011336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801133a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801133e:	f040 8086 	bne.w	801144e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011342:	683b      	ldr	r3, [r7, #0]
 8011344:	781b      	ldrb	r3, [r3, #0]
 8011346:	015a      	lsls	r2, r3, #5
 8011348:	693b      	ldr	r3, [r7, #16]
 801134a:	4413      	add	r3, r2
 801134c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	683a      	ldr	r2, [r7, #0]
 8011354:	7812      	ldrb	r2, [r2, #0]
 8011356:	0151      	lsls	r1, r2, #5
 8011358:	693a      	ldr	r2, [r7, #16]
 801135a:	440a      	add	r2, r1
 801135c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011360:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011364:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	781b      	ldrb	r3, [r3, #0]
 801136a:	015a      	lsls	r2, r3, #5
 801136c:	693b      	ldr	r3, [r7, #16]
 801136e:	4413      	add	r3, r2
 8011370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	683a      	ldr	r2, [r7, #0]
 8011378:	7812      	ldrb	r2, [r2, #0]
 801137a:	0151      	lsls	r1, r2, #5
 801137c:	693a      	ldr	r2, [r7, #16]
 801137e:	440a      	add	r2, r1
 8011380:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011384:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011388:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801138a:	68fb      	ldr	r3, [r7, #12]
 801138c:	3301      	adds	r3, #1
 801138e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011390:	68fb      	ldr	r3, [r7, #12]
 8011392:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011396:	4293      	cmp	r3, r2
 8011398:	d902      	bls.n	80113a0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 801139a:	2301      	movs	r3, #1
 801139c:	75fb      	strb	r3, [r7, #23]
          break;
 801139e:	e056      	b.n	801144e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80113a0:	683b      	ldr	r3, [r7, #0]
 80113a2:	781b      	ldrb	r3, [r3, #0]
 80113a4:	015a      	lsls	r2, r3, #5
 80113a6:	693b      	ldr	r3, [r7, #16]
 80113a8:	4413      	add	r3, r2
 80113aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80113b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80113b8:	d0e7      	beq.n	801138a <USB_EPStopXfer+0x82>
 80113ba:	e048      	b.n	801144e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80113bc:	683b      	ldr	r3, [r7, #0]
 80113be:	781b      	ldrb	r3, [r3, #0]
 80113c0:	015a      	lsls	r2, r3, #5
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	4413      	add	r3, r2
 80113c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80113d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80113d4:	d13b      	bne.n	801144e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	781b      	ldrb	r3, [r3, #0]
 80113da:	015a      	lsls	r2, r3, #5
 80113dc:	693b      	ldr	r3, [r7, #16]
 80113de:	4413      	add	r3, r2
 80113e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	7812      	ldrb	r2, [r2, #0]
 80113ea:	0151      	lsls	r1, r2, #5
 80113ec:	693a      	ldr	r2, [r7, #16]
 80113ee:	440a      	add	r2, r1
 80113f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80113f4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80113f8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80113fa:	683b      	ldr	r3, [r7, #0]
 80113fc:	781b      	ldrb	r3, [r3, #0]
 80113fe:	015a      	lsls	r2, r3, #5
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	4413      	add	r3, r2
 8011404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	683a      	ldr	r2, [r7, #0]
 801140c:	7812      	ldrb	r2, [r2, #0]
 801140e:	0151      	lsls	r1, r2, #5
 8011410:	693a      	ldr	r2, [r7, #16]
 8011412:	440a      	add	r2, r1
 8011414:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011418:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801141c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	3301      	adds	r3, #1
 8011422:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	f242 7210 	movw	r2, #10000	@ 0x2710
 801142a:	4293      	cmp	r3, r2
 801142c:	d902      	bls.n	8011434 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801142e:	2301      	movs	r3, #1
 8011430:	75fb      	strb	r3, [r7, #23]
          break;
 8011432:	e00c      	b.n	801144e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	781b      	ldrb	r3, [r3, #0]
 8011438:	015a      	lsls	r2, r3, #5
 801143a:	693b      	ldr	r3, [r7, #16]
 801143c:	4413      	add	r3, r2
 801143e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011448:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801144c:	d0e7      	beq.n	801141e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801144e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011450:	4618      	mov	r0, r3
 8011452:	371c      	adds	r7, #28
 8011454:	46bd      	mov	sp, r7
 8011456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145a:	4770      	bx	lr

0801145c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801145c:	b480      	push	{r7}
 801145e:	b089      	sub	sp, #36	@ 0x24
 8011460:	af00      	add	r7, sp, #0
 8011462:	60f8      	str	r0, [r7, #12]
 8011464:	60b9      	str	r1, [r7, #8]
 8011466:	4611      	mov	r1, r2
 8011468:	461a      	mov	r2, r3
 801146a:	460b      	mov	r3, r1
 801146c:	71fb      	strb	r3, [r7, #7]
 801146e:	4613      	mov	r3, r2
 8011470:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801147a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801147e:	2b00      	cmp	r3, #0
 8011480:	d123      	bne.n	80114ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8011482:	88bb      	ldrh	r3, [r7, #4]
 8011484:	3303      	adds	r3, #3
 8011486:	089b      	lsrs	r3, r3, #2
 8011488:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801148a:	2300      	movs	r3, #0
 801148c:	61bb      	str	r3, [r7, #24]
 801148e:	e018      	b.n	80114c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8011490:	79fb      	ldrb	r3, [r7, #7]
 8011492:	031a      	lsls	r2, r3, #12
 8011494:	697b      	ldr	r3, [r7, #20]
 8011496:	4413      	add	r3, r2
 8011498:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801149c:	461a      	mov	r2, r3
 801149e:	69fb      	ldr	r3, [r7, #28]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	3301      	adds	r3, #1
 80114a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80114aa:	69fb      	ldr	r3, [r7, #28]
 80114ac:	3301      	adds	r3, #1
 80114ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80114b0:	69fb      	ldr	r3, [r7, #28]
 80114b2:	3301      	adds	r3, #1
 80114b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80114b6:	69fb      	ldr	r3, [r7, #28]
 80114b8:	3301      	adds	r3, #1
 80114ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80114bc:	69bb      	ldr	r3, [r7, #24]
 80114be:	3301      	adds	r3, #1
 80114c0:	61bb      	str	r3, [r7, #24]
 80114c2:	69ba      	ldr	r2, [r7, #24]
 80114c4:	693b      	ldr	r3, [r7, #16]
 80114c6:	429a      	cmp	r2, r3
 80114c8:	d3e2      	bcc.n	8011490 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80114ca:	2300      	movs	r3, #0
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	3724      	adds	r7, #36	@ 0x24
 80114d0:	46bd      	mov	sp, r7
 80114d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d6:	4770      	bx	lr

080114d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80114d8:	b480      	push	{r7}
 80114da:	b08b      	sub	sp, #44	@ 0x2c
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	60b9      	str	r1, [r7, #8]
 80114e2:	4613      	mov	r3, r2
 80114e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80114ea:	68bb      	ldr	r3, [r7, #8]
 80114ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80114ee:	88fb      	ldrh	r3, [r7, #6]
 80114f0:	089b      	lsrs	r3, r3, #2
 80114f2:	b29b      	uxth	r3, r3
 80114f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80114f6:	88fb      	ldrh	r3, [r7, #6]
 80114f8:	f003 0303 	and.w	r3, r3, #3
 80114fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80114fe:	2300      	movs	r3, #0
 8011500:	623b      	str	r3, [r7, #32]
 8011502:	e014      	b.n	801152e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011504:	69bb      	ldr	r3, [r7, #24]
 8011506:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801150a:	681a      	ldr	r2, [r3, #0]
 801150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801150e:	601a      	str	r2, [r3, #0]
    pDest++;
 8011510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011512:	3301      	adds	r3, #1
 8011514:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011518:	3301      	adds	r3, #1
 801151a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801151c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801151e:	3301      	adds	r3, #1
 8011520:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011522:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011524:	3301      	adds	r3, #1
 8011526:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011528:	6a3b      	ldr	r3, [r7, #32]
 801152a:	3301      	adds	r3, #1
 801152c:	623b      	str	r3, [r7, #32]
 801152e:	6a3a      	ldr	r2, [r7, #32]
 8011530:	697b      	ldr	r3, [r7, #20]
 8011532:	429a      	cmp	r2, r3
 8011534:	d3e6      	bcc.n	8011504 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011536:	8bfb      	ldrh	r3, [r7, #30]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d01e      	beq.n	801157a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 801153c:	2300      	movs	r3, #0
 801153e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8011540:	69bb      	ldr	r3, [r7, #24]
 8011542:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011546:	461a      	mov	r2, r3
 8011548:	f107 0310 	add.w	r3, r7, #16
 801154c:	6812      	ldr	r2, [r2, #0]
 801154e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8011550:	693a      	ldr	r2, [r7, #16]
 8011552:	6a3b      	ldr	r3, [r7, #32]
 8011554:	b2db      	uxtb	r3, r3
 8011556:	00db      	lsls	r3, r3, #3
 8011558:	fa22 f303 	lsr.w	r3, r2, r3
 801155c:	b2da      	uxtb	r2, r3
 801155e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011560:	701a      	strb	r2, [r3, #0]
      i++;
 8011562:	6a3b      	ldr	r3, [r7, #32]
 8011564:	3301      	adds	r3, #1
 8011566:	623b      	str	r3, [r7, #32]
      pDest++;
 8011568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801156a:	3301      	adds	r3, #1
 801156c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801156e:	8bfb      	ldrh	r3, [r7, #30]
 8011570:	3b01      	subs	r3, #1
 8011572:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011574:	8bfb      	ldrh	r3, [r7, #30]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d1ea      	bne.n	8011550 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801157a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 801157c:	4618      	mov	r0, r3
 801157e:	372c      	adds	r7, #44	@ 0x2c
 8011580:	46bd      	mov	sp, r7
 8011582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011586:	4770      	bx	lr

08011588 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011588:	b480      	push	{r7}
 801158a:	b085      	sub	sp, #20
 801158c:	af00      	add	r7, sp, #0
 801158e:	6078      	str	r0, [r7, #4]
 8011590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011596:	683b      	ldr	r3, [r7, #0]
 8011598:	781b      	ldrb	r3, [r3, #0]
 801159a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801159c:	683b      	ldr	r3, [r7, #0]
 801159e:	785b      	ldrb	r3, [r3, #1]
 80115a0:	2b01      	cmp	r3, #1
 80115a2:	d12c      	bne.n	80115fe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80115a4:	68bb      	ldr	r3, [r7, #8]
 80115a6:	015a      	lsls	r2, r3, #5
 80115a8:	68fb      	ldr	r3, [r7, #12]
 80115aa:	4413      	add	r3, r2
 80115ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	db12      	blt.n	80115dc <USB_EPSetStall+0x54>
 80115b6:	68bb      	ldr	r3, [r7, #8]
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d00f      	beq.n	80115dc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	015a      	lsls	r2, r3, #5
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	4413      	add	r3, r2
 80115c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115c8:	681b      	ldr	r3, [r3, #0]
 80115ca:	68ba      	ldr	r2, [r7, #8]
 80115cc:	0151      	lsls	r1, r2, #5
 80115ce:	68fa      	ldr	r2, [r7, #12]
 80115d0:	440a      	add	r2, r1
 80115d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80115d6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80115da:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	015a      	lsls	r2, r3, #5
 80115e0:	68fb      	ldr	r3, [r7, #12]
 80115e2:	4413      	add	r3, r2
 80115e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	68ba      	ldr	r2, [r7, #8]
 80115ec:	0151      	lsls	r1, r2, #5
 80115ee:	68fa      	ldr	r2, [r7, #12]
 80115f0:	440a      	add	r2, r1
 80115f2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80115f6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80115fa:	6013      	str	r3, [r2, #0]
 80115fc:	e02b      	b.n	8011656 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	015a      	lsls	r2, r3, #5
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	4413      	add	r3, r2
 8011606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	2b00      	cmp	r3, #0
 801160e:	db12      	blt.n	8011636 <USB_EPSetStall+0xae>
 8011610:	68bb      	ldr	r3, [r7, #8]
 8011612:	2b00      	cmp	r3, #0
 8011614:	d00f      	beq.n	8011636 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011616:	68bb      	ldr	r3, [r7, #8]
 8011618:	015a      	lsls	r2, r3, #5
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	4413      	add	r3, r2
 801161e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	68ba      	ldr	r2, [r7, #8]
 8011626:	0151      	lsls	r1, r2, #5
 8011628:	68fa      	ldr	r2, [r7, #12]
 801162a:	440a      	add	r2, r1
 801162c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011630:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011634:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011636:	68bb      	ldr	r3, [r7, #8]
 8011638:	015a      	lsls	r2, r3, #5
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	4413      	add	r3, r2
 801163e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	68ba      	ldr	r2, [r7, #8]
 8011646:	0151      	lsls	r1, r2, #5
 8011648:	68fa      	ldr	r2, [r7, #12]
 801164a:	440a      	add	r2, r1
 801164c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011650:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011654:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011656:	2300      	movs	r3, #0
}
 8011658:	4618      	mov	r0, r3
 801165a:	3714      	adds	r7, #20
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011664:	b480      	push	{r7}
 8011666:	b085      	sub	sp, #20
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
 801166c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011672:	683b      	ldr	r3, [r7, #0]
 8011674:	781b      	ldrb	r3, [r3, #0]
 8011676:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	785b      	ldrb	r3, [r3, #1]
 801167c:	2b01      	cmp	r3, #1
 801167e:	d128      	bne.n	80116d2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011680:	68bb      	ldr	r3, [r7, #8]
 8011682:	015a      	lsls	r2, r3, #5
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	4413      	add	r3, r2
 8011688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801168c:	681b      	ldr	r3, [r3, #0]
 801168e:	68ba      	ldr	r2, [r7, #8]
 8011690:	0151      	lsls	r1, r2, #5
 8011692:	68fa      	ldr	r2, [r7, #12]
 8011694:	440a      	add	r2, r1
 8011696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801169a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 801169e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80116a0:	683b      	ldr	r3, [r7, #0]
 80116a2:	791b      	ldrb	r3, [r3, #4]
 80116a4:	2b03      	cmp	r3, #3
 80116a6:	d003      	beq.n	80116b0 <USB_EPClearStall+0x4c>
 80116a8:	683b      	ldr	r3, [r7, #0]
 80116aa:	791b      	ldrb	r3, [r3, #4]
 80116ac:	2b02      	cmp	r3, #2
 80116ae:	d138      	bne.n	8011722 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80116b0:	68bb      	ldr	r3, [r7, #8]
 80116b2:	015a      	lsls	r2, r3, #5
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	4413      	add	r3, r2
 80116b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	68ba      	ldr	r2, [r7, #8]
 80116c0:	0151      	lsls	r1, r2, #5
 80116c2:	68fa      	ldr	r2, [r7, #12]
 80116c4:	440a      	add	r2, r1
 80116c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80116ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80116ce:	6013      	str	r3, [r2, #0]
 80116d0:	e027      	b.n	8011722 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80116d2:	68bb      	ldr	r3, [r7, #8]
 80116d4:	015a      	lsls	r2, r3, #5
 80116d6:	68fb      	ldr	r3, [r7, #12]
 80116d8:	4413      	add	r3, r2
 80116da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	68ba      	ldr	r2, [r7, #8]
 80116e2:	0151      	lsls	r1, r2, #5
 80116e4:	68fa      	ldr	r2, [r7, #12]
 80116e6:	440a      	add	r2, r1
 80116e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80116ec:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80116f0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80116f2:	683b      	ldr	r3, [r7, #0]
 80116f4:	791b      	ldrb	r3, [r3, #4]
 80116f6:	2b03      	cmp	r3, #3
 80116f8:	d003      	beq.n	8011702 <USB_EPClearStall+0x9e>
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	791b      	ldrb	r3, [r3, #4]
 80116fe:	2b02      	cmp	r3, #2
 8011700:	d10f      	bne.n	8011722 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011702:	68bb      	ldr	r3, [r7, #8]
 8011704:	015a      	lsls	r2, r3, #5
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	4413      	add	r3, r2
 801170a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	68ba      	ldr	r2, [r7, #8]
 8011712:	0151      	lsls	r1, r2, #5
 8011714:	68fa      	ldr	r2, [r7, #12]
 8011716:	440a      	add	r2, r1
 8011718:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801171c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011720:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011722:	2300      	movs	r3, #0
}
 8011724:	4618      	mov	r0, r3
 8011726:	3714      	adds	r7, #20
 8011728:	46bd      	mov	sp, r7
 801172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172e:	4770      	bx	lr

08011730 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011730:	b480      	push	{r7}
 8011732:	b085      	sub	sp, #20
 8011734:	af00      	add	r7, sp, #0
 8011736:	6078      	str	r0, [r7, #4]
 8011738:	460b      	mov	r3, r1
 801173a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011746:	681b      	ldr	r3, [r3, #0]
 8011748:	68fa      	ldr	r2, [r7, #12]
 801174a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 801174e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8011752:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801175a:	681a      	ldr	r2, [r3, #0]
 801175c:	78fb      	ldrb	r3, [r7, #3]
 801175e:	011b      	lsls	r3, r3, #4
 8011760:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8011764:	68f9      	ldr	r1, [r7, #12]
 8011766:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801176a:	4313      	orrs	r3, r2
 801176c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801176e:	2300      	movs	r3, #0
}
 8011770:	4618      	mov	r0, r3
 8011772:	3714      	adds	r7, #20
 8011774:	46bd      	mov	sp, r7
 8011776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801177a:	4770      	bx	lr

0801177c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 801177c:	b480      	push	{r7}
 801177e:	b085      	sub	sp, #20
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 801178e:	681b      	ldr	r3, [r3, #0]
 8011790:	68fa      	ldr	r2, [r7, #12]
 8011792:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011796:	f023 0303 	bic.w	r3, r3, #3
 801179a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117a2:	685b      	ldr	r3, [r3, #4]
 80117a4:	68fa      	ldr	r2, [r7, #12]
 80117a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80117aa:	f023 0302 	bic.w	r3, r3, #2
 80117ae:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80117b0:	2300      	movs	r3, #0
}
 80117b2:	4618      	mov	r0, r3
 80117b4:	3714      	adds	r7, #20
 80117b6:	46bd      	mov	sp, r7
 80117b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117bc:	4770      	bx	lr

080117be <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80117be:	b480      	push	{r7}
 80117c0:	b085      	sub	sp, #20
 80117c2:	af00      	add	r7, sp, #0
 80117c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	68fa      	ldr	r2, [r7, #12]
 80117d4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80117d8:	f023 0303 	bic.w	r3, r3, #3
 80117dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80117de:	68fb      	ldr	r3, [r7, #12]
 80117e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117e4:	685b      	ldr	r3, [r3, #4]
 80117e6:	68fa      	ldr	r2, [r7, #12]
 80117e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80117ec:	f043 0302 	orr.w	r3, r3, #2
 80117f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80117f2:	2300      	movs	r3, #0
}
 80117f4:	4618      	mov	r0, r3
 80117f6:	3714      	adds	r7, #20
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr

08011800 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011800:	b480      	push	{r7}
 8011802:	b085      	sub	sp, #20
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	695b      	ldr	r3, [r3, #20]
 801180c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	699b      	ldr	r3, [r3, #24]
 8011812:	68fa      	ldr	r2, [r7, #12]
 8011814:	4013      	ands	r3, r2
 8011816:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011818:	68fb      	ldr	r3, [r7, #12]
}
 801181a:	4618      	mov	r0, r3
 801181c:	3714      	adds	r7, #20
 801181e:	46bd      	mov	sp, r7
 8011820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011824:	4770      	bx	lr

08011826 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011826:	b480      	push	{r7}
 8011828:	b085      	sub	sp, #20
 801182a:	af00      	add	r7, sp, #0
 801182c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011832:	68fb      	ldr	r3, [r7, #12]
 8011834:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011838:	699b      	ldr	r3, [r3, #24]
 801183a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011842:	69db      	ldr	r3, [r3, #28]
 8011844:	68ba      	ldr	r2, [r7, #8]
 8011846:	4013      	ands	r3, r2
 8011848:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801184a:	68bb      	ldr	r3, [r7, #8]
 801184c:	0c1b      	lsrs	r3, r3, #16
}
 801184e:	4618      	mov	r0, r3
 8011850:	3714      	adds	r7, #20
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr

0801185a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801185a:	b480      	push	{r7}
 801185c:	b085      	sub	sp, #20
 801185e:	af00      	add	r7, sp, #0
 8011860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011862:	687b      	ldr	r3, [r7, #4]
 8011864:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801186c:	699b      	ldr	r3, [r3, #24]
 801186e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011876:	69db      	ldr	r3, [r3, #28]
 8011878:	68ba      	ldr	r2, [r7, #8]
 801187a:	4013      	ands	r3, r2
 801187c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 801187e:	68bb      	ldr	r3, [r7, #8]
 8011880:	b29b      	uxth	r3, r3
}
 8011882:	4618      	mov	r0, r3
 8011884:	3714      	adds	r7, #20
 8011886:	46bd      	mov	sp, r7
 8011888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801188c:	4770      	bx	lr

0801188e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 801188e:	b480      	push	{r7}
 8011890:	b085      	sub	sp, #20
 8011892:	af00      	add	r7, sp, #0
 8011894:	6078      	str	r0, [r7, #4]
 8011896:	460b      	mov	r3, r1
 8011898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801189e:	78fb      	ldrb	r3, [r7, #3]
 80118a0:	015a      	lsls	r2, r3, #5
 80118a2:	68fb      	ldr	r3, [r7, #12]
 80118a4:	4413      	add	r3, r2
 80118a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80118aa:	689b      	ldr	r3, [r3, #8]
 80118ac:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118b4:	695b      	ldr	r3, [r3, #20]
 80118b6:	68ba      	ldr	r2, [r7, #8]
 80118b8:	4013      	ands	r3, r2
 80118ba:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80118bc:	68bb      	ldr	r3, [r7, #8]
}
 80118be:	4618      	mov	r0, r3
 80118c0:	3714      	adds	r7, #20
 80118c2:	46bd      	mov	sp, r7
 80118c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c8:	4770      	bx	lr

080118ca <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80118ca:	b480      	push	{r7}
 80118cc:	b087      	sub	sp, #28
 80118ce:	af00      	add	r7, sp, #0
 80118d0:	6078      	str	r0, [r7, #4]
 80118d2:	460b      	mov	r3, r1
 80118d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118e0:	691b      	ldr	r3, [r3, #16]
 80118e2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80118e4:	697b      	ldr	r3, [r7, #20]
 80118e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80118ec:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80118ee:	78fb      	ldrb	r3, [r7, #3]
 80118f0:	f003 030f 	and.w	r3, r3, #15
 80118f4:	68fa      	ldr	r2, [r7, #12]
 80118f6:	fa22 f303 	lsr.w	r3, r2, r3
 80118fa:	01db      	lsls	r3, r3, #7
 80118fc:	b2db      	uxtb	r3, r3
 80118fe:	693a      	ldr	r2, [r7, #16]
 8011900:	4313      	orrs	r3, r2
 8011902:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011904:	78fb      	ldrb	r3, [r7, #3]
 8011906:	015a      	lsls	r2, r3, #5
 8011908:	697b      	ldr	r3, [r7, #20]
 801190a:	4413      	add	r3, r2
 801190c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011910:	689b      	ldr	r3, [r3, #8]
 8011912:	693a      	ldr	r2, [r7, #16]
 8011914:	4013      	ands	r3, r2
 8011916:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011918:	68bb      	ldr	r3, [r7, #8]
}
 801191a:	4618      	mov	r0, r3
 801191c:	371c      	adds	r7, #28
 801191e:	46bd      	mov	sp, r7
 8011920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011924:	4770      	bx	lr

08011926 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011926:	b480      	push	{r7}
 8011928:	b083      	sub	sp, #12
 801192a:	af00      	add	r7, sp, #0
 801192c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	695b      	ldr	r3, [r3, #20]
 8011932:	f003 0301 	and.w	r3, r3, #1
}
 8011936:	4618      	mov	r0, r3
 8011938:	370c      	adds	r7, #12
 801193a:	46bd      	mov	sp, r7
 801193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011940:	4770      	bx	lr

08011942 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8011942:	b480      	push	{r7}
 8011944:	b085      	sub	sp, #20
 8011946:	af00      	add	r7, sp, #0
 8011948:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	68fa      	ldr	r2, [r7, #12]
 8011958:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801195c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8011960:	f023 0307 	bic.w	r3, r3, #7
 8011964:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801196c:	685b      	ldr	r3, [r3, #4]
 801196e:	68fa      	ldr	r2, [r7, #12]
 8011970:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011974:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011978:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801197a:	2300      	movs	r3, #0
}
 801197c:	4618      	mov	r0, r3
 801197e:	3714      	adds	r7, #20
 8011980:	46bd      	mov	sp, r7
 8011982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011986:	4770      	bx	lr

08011988 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8011988:	b480      	push	{r7}
 801198a:	b087      	sub	sp, #28
 801198c:	af00      	add	r7, sp, #0
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	460b      	mov	r3, r1
 8011992:	607a      	str	r2, [r7, #4]
 8011994:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	333c      	adds	r3, #60	@ 0x3c
 801199e:	3304      	adds	r3, #4
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80119a4:	693b      	ldr	r3, [r7, #16]
 80119a6:	4a26      	ldr	r2, [pc, #152]	@ (8011a40 <USB_EP0_OutStart+0xb8>)
 80119a8:	4293      	cmp	r3, r2
 80119aa:	d90a      	bls.n	80119c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80119ac:	697b      	ldr	r3, [r7, #20]
 80119ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119b2:	681b      	ldr	r3, [r3, #0]
 80119b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80119b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80119bc:	d101      	bne.n	80119c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80119be:	2300      	movs	r3, #0
 80119c0:	e037      	b.n	8011a32 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80119c2:	697b      	ldr	r3, [r7, #20]
 80119c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119c8:	461a      	mov	r2, r3
 80119ca:	2300      	movs	r3, #0
 80119cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119d4:	691b      	ldr	r3, [r3, #16]
 80119d6:	697a      	ldr	r2, [r7, #20]
 80119d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80119dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80119e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80119e2:	697b      	ldr	r3, [r7, #20]
 80119e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119e8:	691b      	ldr	r3, [r3, #16]
 80119ea:	697a      	ldr	r2, [r7, #20]
 80119ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80119f0:	f043 0318 	orr.w	r3, r3, #24
 80119f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119fc:	691b      	ldr	r3, [r3, #16]
 80119fe:	697a      	ldr	r2, [r7, #20]
 8011a00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a04:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8011a08:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011a0a:	7afb      	ldrb	r3, [r7, #11]
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	d10f      	bne.n	8011a30 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011a10:	697b      	ldr	r3, [r7, #20]
 8011a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a16:	461a      	mov	r2, r3
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011a1c:	697b      	ldr	r3, [r7, #20]
 8011a1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a22:	681b      	ldr	r3, [r3, #0]
 8011a24:	697a      	ldr	r2, [r7, #20]
 8011a26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a2a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8011a2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a30:	2300      	movs	r3, #0
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	371c      	adds	r7, #28
 8011a36:	46bd      	mov	sp, r7
 8011a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3c:	4770      	bx	lr
 8011a3e:	bf00      	nop
 8011a40:	4f54300a 	.word	0x4f54300a

08011a44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011a44:	b480      	push	{r7}
 8011a46:	b085      	sub	sp, #20
 8011a48:	af00      	add	r7, sp, #0
 8011a4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011a50:	68fb      	ldr	r3, [r7, #12]
 8011a52:	3301      	adds	r3, #1
 8011a54:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a5c:	d901      	bls.n	8011a62 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011a5e:	2303      	movs	r3, #3
 8011a60:	e01b      	b.n	8011a9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	691b      	ldr	r3, [r3, #16]
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	daf2      	bge.n	8011a50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	691b      	ldr	r3, [r3, #16]
 8011a72:	f043 0201 	orr.w	r2, r3, #1
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	3301      	adds	r3, #1
 8011a7e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011a86:	d901      	bls.n	8011a8c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011a88:	2303      	movs	r3, #3
 8011a8a:	e006      	b.n	8011a9a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	691b      	ldr	r3, [r3, #16]
 8011a90:	f003 0301 	and.w	r3, r3, #1
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d0f0      	beq.n	8011a7a <USB_CoreReset+0x36>

  return HAL_OK;
 8011a98:	2300      	movs	r3, #0
}
 8011a9a:	4618      	mov	r0, r3
 8011a9c:	3714      	adds	r7, #20
 8011a9e:	46bd      	mov	sp, r7
 8011aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aa4:	4770      	bx	lr
	...

08011aa8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b084      	sub	sp, #16
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	6078      	str	r0, [r7, #4]
 8011ab0:	460b      	mov	r3, r1
 8011ab2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011ab4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8011ab8:	f005 fe0e 	bl	80176d8 <USBD_static_malloc>
 8011abc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011abe:	68fb      	ldr	r3, [r7, #12]
 8011ac0:	2b00      	cmp	r3, #0
 8011ac2:	d109      	bne.n	8011ad8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	32b0      	adds	r2, #176	@ 0xb0
 8011ace:	2100      	movs	r1, #0
 8011ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011ad4:	2302      	movs	r3, #2
 8011ad6:	e0d4      	b.n	8011c82 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011ad8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8011adc:	2100      	movs	r1, #0
 8011ade:	68f8      	ldr	r0, [r7, #12]
 8011ae0:	f008 fd10 	bl	801a504 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	32b0      	adds	r2, #176	@ 0xb0
 8011aee:	68f9      	ldr	r1, [r7, #12]
 8011af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	32b0      	adds	r2, #176	@ 0xb0
 8011afe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	7c1b      	ldrb	r3, [r3, #16]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d138      	bne.n	8011b82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011b10:	4b5e      	ldr	r3, [pc, #376]	@ (8011c8c <USBD_CDC_Init+0x1e4>)
 8011b12:	7819      	ldrb	r1, [r3, #0]
 8011b14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011b18:	2202      	movs	r2, #2
 8011b1a:	6878      	ldr	r0, [r7, #4]
 8011b1c:	f005 fcb9 	bl	8017492 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011b20:	4b5a      	ldr	r3, [pc, #360]	@ (8011c8c <USBD_CDC_Init+0x1e4>)
 8011b22:	781b      	ldrb	r3, [r3, #0]
 8011b24:	f003 020f 	and.w	r2, r3, #15
 8011b28:	6879      	ldr	r1, [r7, #4]
 8011b2a:	4613      	mov	r3, r2
 8011b2c:	009b      	lsls	r3, r3, #2
 8011b2e:	4413      	add	r3, r2
 8011b30:	009b      	lsls	r3, r3, #2
 8011b32:	440b      	add	r3, r1
 8011b34:	3324      	adds	r3, #36	@ 0x24
 8011b36:	2201      	movs	r2, #1
 8011b38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011b3a:	4b55      	ldr	r3, [pc, #340]	@ (8011c90 <USBD_CDC_Init+0x1e8>)
 8011b3c:	7819      	ldrb	r1, [r3, #0]
 8011b3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011b42:	2202      	movs	r2, #2
 8011b44:	6878      	ldr	r0, [r7, #4]
 8011b46:	f005 fca4 	bl	8017492 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011b4a:	4b51      	ldr	r3, [pc, #324]	@ (8011c90 <USBD_CDC_Init+0x1e8>)
 8011b4c:	781b      	ldrb	r3, [r3, #0]
 8011b4e:	f003 020f 	and.w	r2, r3, #15
 8011b52:	6879      	ldr	r1, [r7, #4]
 8011b54:	4613      	mov	r3, r2
 8011b56:	009b      	lsls	r3, r3, #2
 8011b58:	4413      	add	r3, r2
 8011b5a:	009b      	lsls	r3, r3, #2
 8011b5c:	440b      	add	r3, r1
 8011b5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011b62:	2201      	movs	r2, #1
 8011b64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011b66:	4b4b      	ldr	r3, [pc, #300]	@ (8011c94 <USBD_CDC_Init+0x1ec>)
 8011b68:	781b      	ldrb	r3, [r3, #0]
 8011b6a:	f003 020f 	and.w	r2, r3, #15
 8011b6e:	6879      	ldr	r1, [r7, #4]
 8011b70:	4613      	mov	r3, r2
 8011b72:	009b      	lsls	r3, r3, #2
 8011b74:	4413      	add	r3, r2
 8011b76:	009b      	lsls	r3, r3, #2
 8011b78:	440b      	add	r3, r1
 8011b7a:	3326      	adds	r3, #38	@ 0x26
 8011b7c:	2210      	movs	r2, #16
 8011b7e:	801a      	strh	r2, [r3, #0]
 8011b80:	e035      	b.n	8011bee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011b82:	4b42      	ldr	r3, [pc, #264]	@ (8011c8c <USBD_CDC_Init+0x1e4>)
 8011b84:	7819      	ldrb	r1, [r3, #0]
 8011b86:	2340      	movs	r3, #64	@ 0x40
 8011b88:	2202      	movs	r2, #2
 8011b8a:	6878      	ldr	r0, [r7, #4]
 8011b8c:	f005 fc81 	bl	8017492 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011b90:	4b3e      	ldr	r3, [pc, #248]	@ (8011c8c <USBD_CDC_Init+0x1e4>)
 8011b92:	781b      	ldrb	r3, [r3, #0]
 8011b94:	f003 020f 	and.w	r2, r3, #15
 8011b98:	6879      	ldr	r1, [r7, #4]
 8011b9a:	4613      	mov	r3, r2
 8011b9c:	009b      	lsls	r3, r3, #2
 8011b9e:	4413      	add	r3, r2
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	440b      	add	r3, r1
 8011ba4:	3324      	adds	r3, #36	@ 0x24
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011baa:	4b39      	ldr	r3, [pc, #228]	@ (8011c90 <USBD_CDC_Init+0x1e8>)
 8011bac:	7819      	ldrb	r1, [r3, #0]
 8011bae:	2340      	movs	r3, #64	@ 0x40
 8011bb0:	2202      	movs	r2, #2
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f005 fc6d 	bl	8017492 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011bb8:	4b35      	ldr	r3, [pc, #212]	@ (8011c90 <USBD_CDC_Init+0x1e8>)
 8011bba:	781b      	ldrb	r3, [r3, #0]
 8011bbc:	f003 020f 	and.w	r2, r3, #15
 8011bc0:	6879      	ldr	r1, [r7, #4]
 8011bc2:	4613      	mov	r3, r2
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	4413      	add	r3, r2
 8011bc8:	009b      	lsls	r3, r3, #2
 8011bca:	440b      	add	r3, r1
 8011bcc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011bd0:	2201      	movs	r2, #1
 8011bd2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8011c94 <USBD_CDC_Init+0x1ec>)
 8011bd6:	781b      	ldrb	r3, [r3, #0]
 8011bd8:	f003 020f 	and.w	r2, r3, #15
 8011bdc:	6879      	ldr	r1, [r7, #4]
 8011bde:	4613      	mov	r3, r2
 8011be0:	009b      	lsls	r3, r3, #2
 8011be2:	4413      	add	r3, r2
 8011be4:	009b      	lsls	r3, r3, #2
 8011be6:	440b      	add	r3, r1
 8011be8:	3326      	adds	r3, #38	@ 0x26
 8011bea:	2210      	movs	r2, #16
 8011bec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011bee:	4b29      	ldr	r3, [pc, #164]	@ (8011c94 <USBD_CDC_Init+0x1ec>)
 8011bf0:	7819      	ldrb	r1, [r3, #0]
 8011bf2:	2308      	movs	r3, #8
 8011bf4:	2203      	movs	r2, #3
 8011bf6:	6878      	ldr	r0, [r7, #4]
 8011bf8:	f005 fc4b 	bl	8017492 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011bfc:	4b25      	ldr	r3, [pc, #148]	@ (8011c94 <USBD_CDC_Init+0x1ec>)
 8011bfe:	781b      	ldrb	r3, [r3, #0]
 8011c00:	f003 020f 	and.w	r2, r3, #15
 8011c04:	6879      	ldr	r1, [r7, #4]
 8011c06:	4613      	mov	r3, r2
 8011c08:	009b      	lsls	r3, r3, #2
 8011c0a:	4413      	add	r3, r2
 8011c0c:	009b      	lsls	r3, r3, #2
 8011c0e:	440b      	add	r3, r1
 8011c10:	3324      	adds	r3, #36	@ 0x24
 8011c12:	2201      	movs	r2, #1
 8011c14:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	2200      	movs	r2, #0
 8011c1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	33b0      	adds	r3, #176	@ 0xb0
 8011c28:	009b      	lsls	r3, r3, #2
 8011c2a:	4413      	add	r3, r2
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	2200      	movs	r2, #0
 8011c36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8011c42:	68fb      	ldr	r3, [r7, #12]
 8011c44:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d101      	bne.n	8011c50 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011c4c:	2302      	movs	r3, #2
 8011c4e:	e018      	b.n	8011c82 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	7c1b      	ldrb	r3, [r3, #16]
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d10a      	bne.n	8011c6e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011c58:	4b0d      	ldr	r3, [pc, #52]	@ (8011c90 <USBD_CDC_Init+0x1e8>)
 8011c5a:	7819      	ldrb	r1, [r3, #0]
 8011c5c:	68fb      	ldr	r3, [r7, #12]
 8011c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011c62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f005 fd02 	bl	8017670 <USBD_LL_PrepareReceive>
 8011c6c:	e008      	b.n	8011c80 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011c6e:	4b08      	ldr	r3, [pc, #32]	@ (8011c90 <USBD_CDC_Init+0x1e8>)
 8011c70:	7819      	ldrb	r1, [r3, #0]
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8011c78:	2340      	movs	r3, #64	@ 0x40
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f005 fcf8 	bl	8017670 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011c80:	2300      	movs	r3, #0
}
 8011c82:	4618      	mov	r0, r3
 8011c84:	3710      	adds	r7, #16
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}
 8011c8a:	bf00      	nop
 8011c8c:	200000e7 	.word	0x200000e7
 8011c90:	200000e8 	.word	0x200000e8
 8011c94:	200000e9 	.word	0x200000e9

08011c98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b082      	sub	sp, #8
 8011c9c:	af00      	add	r7, sp, #0
 8011c9e:	6078      	str	r0, [r7, #4]
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8011ca4:	4b3a      	ldr	r3, [pc, #232]	@ (8011d90 <USBD_CDC_DeInit+0xf8>)
 8011ca6:	781b      	ldrb	r3, [r3, #0]
 8011ca8:	4619      	mov	r1, r3
 8011caa:	6878      	ldr	r0, [r7, #4]
 8011cac:	f005 fc17 	bl	80174de <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8011cb0:	4b37      	ldr	r3, [pc, #220]	@ (8011d90 <USBD_CDC_DeInit+0xf8>)
 8011cb2:	781b      	ldrb	r3, [r3, #0]
 8011cb4:	f003 020f 	and.w	r2, r3, #15
 8011cb8:	6879      	ldr	r1, [r7, #4]
 8011cba:	4613      	mov	r3, r2
 8011cbc:	009b      	lsls	r3, r3, #2
 8011cbe:	4413      	add	r3, r2
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	440b      	add	r3, r1
 8011cc4:	3324      	adds	r3, #36	@ 0x24
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8011cca:	4b32      	ldr	r3, [pc, #200]	@ (8011d94 <USBD_CDC_DeInit+0xfc>)
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	4619      	mov	r1, r3
 8011cd0:	6878      	ldr	r0, [r7, #4]
 8011cd2:	f005 fc04 	bl	80174de <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8011cd6:	4b2f      	ldr	r3, [pc, #188]	@ (8011d94 <USBD_CDC_DeInit+0xfc>)
 8011cd8:	781b      	ldrb	r3, [r3, #0]
 8011cda:	f003 020f 	and.w	r2, r3, #15
 8011cde:	6879      	ldr	r1, [r7, #4]
 8011ce0:	4613      	mov	r3, r2
 8011ce2:	009b      	lsls	r3, r3, #2
 8011ce4:	4413      	add	r3, r2
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	440b      	add	r3, r1
 8011cea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011cee:	2200      	movs	r2, #0
 8011cf0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8011cf2:	4b29      	ldr	r3, [pc, #164]	@ (8011d98 <USBD_CDC_DeInit+0x100>)
 8011cf4:	781b      	ldrb	r3, [r3, #0]
 8011cf6:	4619      	mov	r1, r3
 8011cf8:	6878      	ldr	r0, [r7, #4]
 8011cfa:	f005 fbf0 	bl	80174de <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011cfe:	4b26      	ldr	r3, [pc, #152]	@ (8011d98 <USBD_CDC_DeInit+0x100>)
 8011d00:	781b      	ldrb	r3, [r3, #0]
 8011d02:	f003 020f 	and.w	r2, r3, #15
 8011d06:	6879      	ldr	r1, [r7, #4]
 8011d08:	4613      	mov	r3, r2
 8011d0a:	009b      	lsls	r3, r3, #2
 8011d0c:	4413      	add	r3, r2
 8011d0e:	009b      	lsls	r3, r3, #2
 8011d10:	440b      	add	r3, r1
 8011d12:	3324      	adds	r3, #36	@ 0x24
 8011d14:	2200      	movs	r2, #0
 8011d16:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8011d18:	4b1f      	ldr	r3, [pc, #124]	@ (8011d98 <USBD_CDC_DeInit+0x100>)
 8011d1a:	781b      	ldrb	r3, [r3, #0]
 8011d1c:	f003 020f 	and.w	r2, r3, #15
 8011d20:	6879      	ldr	r1, [r7, #4]
 8011d22:	4613      	mov	r3, r2
 8011d24:	009b      	lsls	r3, r3, #2
 8011d26:	4413      	add	r3, r2
 8011d28:	009b      	lsls	r3, r3, #2
 8011d2a:	440b      	add	r3, r1
 8011d2c:	3326      	adds	r3, #38	@ 0x26
 8011d2e:	2200      	movs	r2, #0
 8011d30:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	32b0      	adds	r2, #176	@ 0xb0
 8011d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d01f      	beq.n	8011d84 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	33b0      	adds	r3, #176	@ 0xb0
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	4413      	add	r3, r2
 8011d52:	685b      	ldr	r3, [r3, #4]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	32b0      	adds	r2, #176	@ 0xb0
 8011d62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011d66:	4618      	mov	r0, r3
 8011d68:	f005 fcc4 	bl	80176f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	32b0      	adds	r2, #176	@ 0xb0
 8011d76:	2100      	movs	r1, #0
 8011d78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	2200      	movs	r2, #0
 8011d80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8011d84:	2300      	movs	r3, #0
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	3708      	adds	r7, #8
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
 8011d8e:	bf00      	nop
 8011d90:	200000e7 	.word	0x200000e7
 8011d94:	200000e8 	.word	0x200000e8
 8011d98:	200000e9 	.word	0x200000e9

08011d9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b086      	sub	sp, #24
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
 8011da4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	32b0      	adds	r2, #176	@ 0xb0
 8011db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011db4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8011db6:	2300      	movs	r3, #0
 8011db8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8011dba:	2300      	movs	r3, #0
 8011dbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011dc2:	693b      	ldr	r3, [r7, #16]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d101      	bne.n	8011dcc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8011dc8:	2303      	movs	r3, #3
 8011dca:	e0bf      	b.n	8011f4c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011dcc:	683b      	ldr	r3, [r7, #0]
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d050      	beq.n	8011e7a <USBD_CDC_Setup+0xde>
 8011dd8:	2b20      	cmp	r3, #32
 8011dda:	f040 80af 	bne.w	8011f3c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011dde:	683b      	ldr	r3, [r7, #0]
 8011de0:	88db      	ldrh	r3, [r3, #6]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d03a      	beq.n	8011e5c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	781b      	ldrb	r3, [r3, #0]
 8011dea:	b25b      	sxtb	r3, r3
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	da1b      	bge.n	8011e28 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011df6:	687a      	ldr	r2, [r7, #4]
 8011df8:	33b0      	adds	r3, #176	@ 0xb0
 8011dfa:	009b      	lsls	r3, r3, #2
 8011dfc:	4413      	add	r3, r2
 8011dfe:	685b      	ldr	r3, [r3, #4]
 8011e00:	689b      	ldr	r3, [r3, #8]
 8011e02:	683a      	ldr	r2, [r7, #0]
 8011e04:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8011e06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011e08:	683a      	ldr	r2, [r7, #0]
 8011e0a:	88d2      	ldrh	r2, [r2, #6]
 8011e0c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011e0e:	683b      	ldr	r3, [r7, #0]
 8011e10:	88db      	ldrh	r3, [r3, #6]
 8011e12:	2b07      	cmp	r3, #7
 8011e14:	bf28      	it	cs
 8011e16:	2307      	movcs	r3, #7
 8011e18:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8011e1a:	693b      	ldr	r3, [r7, #16]
 8011e1c:	89fa      	ldrh	r2, [r7, #14]
 8011e1e:	4619      	mov	r1, r3
 8011e20:	6878      	ldr	r0, [r7, #4]
 8011e22:	f001 fd53 	bl	80138cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8011e26:	e090      	b.n	8011f4a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8011e28:	683b      	ldr	r3, [r7, #0]
 8011e2a:	785a      	ldrb	r2, [r3, #1]
 8011e2c:	693b      	ldr	r3, [r7, #16]
 8011e2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	88db      	ldrh	r3, [r3, #6]
 8011e36:	2b3f      	cmp	r3, #63	@ 0x3f
 8011e38:	d803      	bhi.n	8011e42 <USBD_CDC_Setup+0xa6>
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	88db      	ldrh	r3, [r3, #6]
 8011e3e:	b2da      	uxtb	r2, r3
 8011e40:	e000      	b.n	8011e44 <USBD_CDC_Setup+0xa8>
 8011e42:	2240      	movs	r2, #64	@ 0x40
 8011e44:	693b      	ldr	r3, [r7, #16]
 8011e46:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8011e4a:	6939      	ldr	r1, [r7, #16]
 8011e4c:	693b      	ldr	r3, [r7, #16]
 8011e4e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8011e52:	461a      	mov	r2, r3
 8011e54:	6878      	ldr	r0, [r7, #4]
 8011e56:	f001 fd65 	bl	8013924 <USBD_CtlPrepareRx>
      break;
 8011e5a:	e076      	b.n	8011f4a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8011e62:	687a      	ldr	r2, [r7, #4]
 8011e64:	33b0      	adds	r3, #176	@ 0xb0
 8011e66:	009b      	lsls	r3, r3, #2
 8011e68:	4413      	add	r3, r2
 8011e6a:	685b      	ldr	r3, [r3, #4]
 8011e6c:	689b      	ldr	r3, [r3, #8]
 8011e6e:	683a      	ldr	r2, [r7, #0]
 8011e70:	7850      	ldrb	r0, [r2, #1]
 8011e72:	2200      	movs	r2, #0
 8011e74:	6839      	ldr	r1, [r7, #0]
 8011e76:	4798      	blx	r3
      break;
 8011e78:	e067      	b.n	8011f4a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	785b      	ldrb	r3, [r3, #1]
 8011e7e:	2b0b      	cmp	r3, #11
 8011e80:	d851      	bhi.n	8011f26 <USBD_CDC_Setup+0x18a>
 8011e82:	a201      	add	r2, pc, #4	@ (adr r2, 8011e88 <USBD_CDC_Setup+0xec>)
 8011e84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e88:	08011eb9 	.word	0x08011eb9
 8011e8c:	08011f35 	.word	0x08011f35
 8011e90:	08011f27 	.word	0x08011f27
 8011e94:	08011f27 	.word	0x08011f27
 8011e98:	08011f27 	.word	0x08011f27
 8011e9c:	08011f27 	.word	0x08011f27
 8011ea0:	08011f27 	.word	0x08011f27
 8011ea4:	08011f27 	.word	0x08011f27
 8011ea8:	08011f27 	.word	0x08011f27
 8011eac:	08011f27 	.word	0x08011f27
 8011eb0:	08011ee3 	.word	0x08011ee3
 8011eb4:	08011f0d 	.word	0x08011f0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ebe:	b2db      	uxtb	r3, r3
 8011ec0:	2b03      	cmp	r3, #3
 8011ec2:	d107      	bne.n	8011ed4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011ec4:	f107 030a 	add.w	r3, r7, #10
 8011ec8:	2202      	movs	r2, #2
 8011eca:	4619      	mov	r1, r3
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f001 fcfd 	bl	80138cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011ed2:	e032      	b.n	8011f3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011ed4:	6839      	ldr	r1, [r7, #0]
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f001 fc7b 	bl	80137d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8011edc:	2303      	movs	r3, #3
 8011ede:	75fb      	strb	r3, [r7, #23]
          break;
 8011ee0:	e02b      	b.n	8011f3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011ee8:	b2db      	uxtb	r3, r3
 8011eea:	2b03      	cmp	r3, #3
 8011eec:	d107      	bne.n	8011efe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011eee:	f107 030d 	add.w	r3, r7, #13
 8011ef2:	2201      	movs	r2, #1
 8011ef4:	4619      	mov	r1, r3
 8011ef6:	6878      	ldr	r0, [r7, #4]
 8011ef8:	f001 fce8 	bl	80138cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011efc:	e01d      	b.n	8011f3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011efe:	6839      	ldr	r1, [r7, #0]
 8011f00:	6878      	ldr	r0, [r7, #4]
 8011f02:	f001 fc66 	bl	80137d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8011f06:	2303      	movs	r3, #3
 8011f08:	75fb      	strb	r3, [r7, #23]
          break;
 8011f0a:	e016      	b.n	8011f3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011f12:	b2db      	uxtb	r3, r3
 8011f14:	2b03      	cmp	r3, #3
 8011f16:	d00f      	beq.n	8011f38 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8011f18:	6839      	ldr	r1, [r7, #0]
 8011f1a:	6878      	ldr	r0, [r7, #4]
 8011f1c:	f001 fc59 	bl	80137d2 <USBD_CtlError>
            ret = USBD_FAIL;
 8011f20:	2303      	movs	r3, #3
 8011f22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011f24:	e008      	b.n	8011f38 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8011f26:	6839      	ldr	r1, [r7, #0]
 8011f28:	6878      	ldr	r0, [r7, #4]
 8011f2a:	f001 fc52 	bl	80137d2 <USBD_CtlError>
          ret = USBD_FAIL;
 8011f2e:	2303      	movs	r3, #3
 8011f30:	75fb      	strb	r3, [r7, #23]
          break;
 8011f32:	e002      	b.n	8011f3a <USBD_CDC_Setup+0x19e>
          break;
 8011f34:	bf00      	nop
 8011f36:	e008      	b.n	8011f4a <USBD_CDC_Setup+0x1ae>
          break;
 8011f38:	bf00      	nop
      }
      break;
 8011f3a:	e006      	b.n	8011f4a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011f3c:	6839      	ldr	r1, [r7, #0]
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f001 fc47 	bl	80137d2 <USBD_CtlError>
      ret = USBD_FAIL;
 8011f44:	2303      	movs	r3, #3
 8011f46:	75fb      	strb	r3, [r7, #23]
      break;
 8011f48:	bf00      	nop
  }

  return (uint8_t)ret;
 8011f4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011f4c:	4618      	mov	r0, r3
 8011f4e:	3718      	adds	r7, #24
 8011f50:	46bd      	mov	sp, r7
 8011f52:	bd80      	pop	{r7, pc}

08011f54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	460b      	mov	r3, r1
 8011f5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	32b0      	adds	r2, #176	@ 0xb0
 8011f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d101      	bne.n	8011f7e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8011f7a:	2303      	movs	r3, #3
 8011f7c:	e065      	b.n	801204a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	32b0      	adds	r2, #176	@ 0xb0
 8011f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011f8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011f8e:	78fb      	ldrb	r3, [r7, #3]
 8011f90:	f003 020f 	and.w	r2, r3, #15
 8011f94:	6879      	ldr	r1, [r7, #4]
 8011f96:	4613      	mov	r3, r2
 8011f98:	009b      	lsls	r3, r3, #2
 8011f9a:	4413      	add	r3, r2
 8011f9c:	009b      	lsls	r3, r3, #2
 8011f9e:	440b      	add	r3, r1
 8011fa0:	3318      	adds	r3, #24
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d02f      	beq.n	8012008 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8011fa8:	78fb      	ldrb	r3, [r7, #3]
 8011faa:	f003 020f 	and.w	r2, r3, #15
 8011fae:	6879      	ldr	r1, [r7, #4]
 8011fb0:	4613      	mov	r3, r2
 8011fb2:	009b      	lsls	r3, r3, #2
 8011fb4:	4413      	add	r3, r2
 8011fb6:	009b      	lsls	r3, r3, #2
 8011fb8:	440b      	add	r3, r1
 8011fba:	3318      	adds	r3, #24
 8011fbc:	681a      	ldr	r2, [r3, #0]
 8011fbe:	78fb      	ldrb	r3, [r7, #3]
 8011fc0:	f003 010f 	and.w	r1, r3, #15
 8011fc4:	68f8      	ldr	r0, [r7, #12]
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	00db      	lsls	r3, r3, #3
 8011fca:	440b      	add	r3, r1
 8011fcc:	009b      	lsls	r3, r3, #2
 8011fce:	4403      	add	r3, r0
 8011fd0:	331c      	adds	r3, #28
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	fbb2 f1f3 	udiv	r1, r2, r3
 8011fd8:	fb01 f303 	mul.w	r3, r1, r3
 8011fdc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d112      	bne.n	8012008 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8011fe2:	78fb      	ldrb	r3, [r7, #3]
 8011fe4:	f003 020f 	and.w	r2, r3, #15
 8011fe8:	6879      	ldr	r1, [r7, #4]
 8011fea:	4613      	mov	r3, r2
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	4413      	add	r3, r2
 8011ff0:	009b      	lsls	r3, r3, #2
 8011ff2:	440b      	add	r3, r1
 8011ff4:	3318      	adds	r3, #24
 8011ff6:	2200      	movs	r2, #0
 8011ff8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8011ffa:	78f9      	ldrb	r1, [r7, #3]
 8011ffc:	2300      	movs	r3, #0
 8011ffe:	2200      	movs	r2, #0
 8012000:	6878      	ldr	r0, [r7, #4]
 8012002:	f005 fb14 	bl	801762e <USBD_LL_Transmit>
 8012006:	e01f      	b.n	8012048 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012008:	68bb      	ldr	r3, [r7, #8]
 801200a:	2200      	movs	r2, #0
 801200c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012016:	687a      	ldr	r2, [r7, #4]
 8012018:	33b0      	adds	r3, #176	@ 0xb0
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	4413      	add	r3, r2
 801201e:	685b      	ldr	r3, [r3, #4]
 8012020:	691b      	ldr	r3, [r3, #16]
 8012022:	2b00      	cmp	r3, #0
 8012024:	d010      	beq.n	8012048 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801202c:	687a      	ldr	r2, [r7, #4]
 801202e:	33b0      	adds	r3, #176	@ 0xb0
 8012030:	009b      	lsls	r3, r3, #2
 8012032:	4413      	add	r3, r2
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	691b      	ldr	r3, [r3, #16]
 8012038:	68ba      	ldr	r2, [r7, #8]
 801203a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801203e:	68ba      	ldr	r2, [r7, #8]
 8012040:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012044:	78fa      	ldrb	r2, [r7, #3]
 8012046:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012048:	2300      	movs	r3, #0
}
 801204a:	4618      	mov	r0, r3
 801204c:	3710      	adds	r7, #16
 801204e:	46bd      	mov	sp, r7
 8012050:	bd80      	pop	{r7, pc}

08012052 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012052:	b580      	push	{r7, lr}
 8012054:	b084      	sub	sp, #16
 8012056:	af00      	add	r7, sp, #0
 8012058:	6078      	str	r0, [r7, #4]
 801205a:	460b      	mov	r3, r1
 801205c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012064:	687b      	ldr	r3, [r7, #4]
 8012066:	32b0      	adds	r2, #176	@ 0xb0
 8012068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801206c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801206e:	687b      	ldr	r3, [r7, #4]
 8012070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	32b0      	adds	r2, #176	@ 0xb0
 8012078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d101      	bne.n	8012084 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012080:	2303      	movs	r3, #3
 8012082:	e01a      	b.n	80120ba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012084:	78fb      	ldrb	r3, [r7, #3]
 8012086:	4619      	mov	r1, r3
 8012088:	6878      	ldr	r0, [r7, #4]
 801208a:	f005 fb12 	bl	80176b2 <USBD_LL_GetRxDataSize>
 801208e:	4602      	mov	r2, r0
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801209c:	687a      	ldr	r2, [r7, #4]
 801209e:	33b0      	adds	r3, #176	@ 0xb0
 80120a0:	009b      	lsls	r3, r3, #2
 80120a2:	4413      	add	r3, r2
 80120a4:	685b      	ldr	r3, [r3, #4]
 80120a6:	68db      	ldr	r3, [r3, #12]
 80120a8:	68fa      	ldr	r2, [r7, #12]
 80120aa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80120ae:	68fa      	ldr	r2, [r7, #12]
 80120b0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80120b4:	4611      	mov	r1, r2
 80120b6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80120b8:	2300      	movs	r3, #0
}
 80120ba:	4618      	mov	r0, r3
 80120bc:	3710      	adds	r7, #16
 80120be:	46bd      	mov	sp, r7
 80120c0:	bd80      	pop	{r7, pc}

080120c2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80120c2:	b580      	push	{r7, lr}
 80120c4:	b084      	sub	sp, #16
 80120c6:	af00      	add	r7, sp, #0
 80120c8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	32b0      	adds	r2, #176	@ 0xb0
 80120d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80120d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d101      	bne.n	80120e4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80120e0:	2303      	movs	r3, #3
 80120e2:	e024      	b.n	801212e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	33b0      	adds	r3, #176	@ 0xb0
 80120ee:	009b      	lsls	r3, r3, #2
 80120f0:	4413      	add	r3, r2
 80120f2:	685b      	ldr	r3, [r3, #4]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d019      	beq.n	801212c <USBD_CDC_EP0_RxReady+0x6a>
 80120f8:	68fb      	ldr	r3, [r7, #12]
 80120fa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80120fe:	2bff      	cmp	r3, #255	@ 0xff
 8012100:	d014      	beq.n	801212c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012108:	687a      	ldr	r2, [r7, #4]
 801210a:	33b0      	adds	r3, #176	@ 0xb0
 801210c:	009b      	lsls	r3, r3, #2
 801210e:	4413      	add	r3, r2
 8012110:	685b      	ldr	r3, [r3, #4]
 8012112:	689b      	ldr	r3, [r3, #8]
 8012114:	68fa      	ldr	r2, [r7, #12]
 8012116:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 801211a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 801211c:	68fa      	ldr	r2, [r7, #12]
 801211e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012122:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	22ff      	movs	r2, #255	@ 0xff
 8012128:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 801212c:	2300      	movs	r3, #0
}
 801212e:	4618      	mov	r0, r3
 8012130:	3710      	adds	r7, #16
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
	...

08012138 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b086      	sub	sp, #24
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012140:	2182      	movs	r1, #130	@ 0x82
 8012142:	4818      	ldr	r0, [pc, #96]	@ (80121a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012144:	f000 fd0f 	bl	8012b66 <USBD_GetEpDesc>
 8012148:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801214a:	2101      	movs	r1, #1
 801214c:	4815      	ldr	r0, [pc, #84]	@ (80121a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801214e:	f000 fd0a 	bl	8012b66 <USBD_GetEpDesc>
 8012152:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012154:	2181      	movs	r1, #129	@ 0x81
 8012156:	4813      	ldr	r0, [pc, #76]	@ (80121a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012158:	f000 fd05 	bl	8012b66 <USBD_GetEpDesc>
 801215c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801215e:	697b      	ldr	r3, [r7, #20]
 8012160:	2b00      	cmp	r3, #0
 8012162:	d002      	beq.n	801216a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012164:	697b      	ldr	r3, [r7, #20]
 8012166:	2210      	movs	r2, #16
 8012168:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d006      	beq.n	801217e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	2200      	movs	r2, #0
 8012174:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012178:	711a      	strb	r2, [r3, #4]
 801217a:	2200      	movs	r2, #0
 801217c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	2b00      	cmp	r3, #0
 8012182:	d006      	beq.n	8012192 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	2200      	movs	r2, #0
 8012188:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801218c:	711a      	strb	r2, [r3, #4]
 801218e:	2200      	movs	r2, #0
 8012190:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	2243      	movs	r2, #67	@ 0x43
 8012196:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012198:	4b02      	ldr	r3, [pc, #8]	@ (80121a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 801219a:	4618      	mov	r0, r3
 801219c:	3718      	adds	r7, #24
 801219e:	46bd      	mov	sp, r7
 80121a0:	bd80      	pop	{r7, pc}
 80121a2:	bf00      	nop
 80121a4:	200000a4 	.word	0x200000a4

080121a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b086      	sub	sp, #24
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80121b0:	2182      	movs	r1, #130	@ 0x82
 80121b2:	4818      	ldr	r0, [pc, #96]	@ (8012214 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80121b4:	f000 fcd7 	bl	8012b66 <USBD_GetEpDesc>
 80121b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80121ba:	2101      	movs	r1, #1
 80121bc:	4815      	ldr	r0, [pc, #84]	@ (8012214 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80121be:	f000 fcd2 	bl	8012b66 <USBD_GetEpDesc>
 80121c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80121c4:	2181      	movs	r1, #129	@ 0x81
 80121c6:	4813      	ldr	r0, [pc, #76]	@ (8012214 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80121c8:	f000 fccd 	bl	8012b66 <USBD_GetEpDesc>
 80121cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80121ce:	697b      	ldr	r3, [r7, #20]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d002      	beq.n	80121da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80121d4:	697b      	ldr	r3, [r7, #20]
 80121d6:	2210      	movs	r2, #16
 80121d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d006      	beq.n	80121ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80121e0:	693b      	ldr	r3, [r7, #16]
 80121e2:	2200      	movs	r2, #0
 80121e4:	711a      	strb	r2, [r3, #4]
 80121e6:	2200      	movs	r2, #0
 80121e8:	f042 0202 	orr.w	r2, r2, #2
 80121ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d006      	beq.n	8012202 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	2200      	movs	r2, #0
 80121f8:	711a      	strb	r2, [r3, #4]
 80121fa:	2200      	movs	r2, #0
 80121fc:	f042 0202 	orr.w	r2, r2, #2
 8012200:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	2243      	movs	r2, #67	@ 0x43
 8012206:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012208:	4b02      	ldr	r3, [pc, #8]	@ (8012214 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801220a:	4618      	mov	r0, r3
 801220c:	3718      	adds	r7, #24
 801220e:	46bd      	mov	sp, r7
 8012210:	bd80      	pop	{r7, pc}
 8012212:	bf00      	nop
 8012214:	200000a4 	.word	0x200000a4

08012218 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012218:	b580      	push	{r7, lr}
 801221a:	b086      	sub	sp, #24
 801221c:	af00      	add	r7, sp, #0
 801221e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012220:	2182      	movs	r1, #130	@ 0x82
 8012222:	4818      	ldr	r0, [pc, #96]	@ (8012284 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012224:	f000 fc9f 	bl	8012b66 <USBD_GetEpDesc>
 8012228:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801222a:	2101      	movs	r1, #1
 801222c:	4815      	ldr	r0, [pc, #84]	@ (8012284 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801222e:	f000 fc9a 	bl	8012b66 <USBD_GetEpDesc>
 8012232:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012234:	2181      	movs	r1, #129	@ 0x81
 8012236:	4813      	ldr	r0, [pc, #76]	@ (8012284 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012238:	f000 fc95 	bl	8012b66 <USBD_GetEpDesc>
 801223c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	2b00      	cmp	r3, #0
 8012242:	d002      	beq.n	801224a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012244:	697b      	ldr	r3, [r7, #20]
 8012246:	2210      	movs	r2, #16
 8012248:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801224a:	693b      	ldr	r3, [r7, #16]
 801224c:	2b00      	cmp	r3, #0
 801224e:	d006      	beq.n	801225e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	2200      	movs	r2, #0
 8012254:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012258:	711a      	strb	r2, [r3, #4]
 801225a:	2200      	movs	r2, #0
 801225c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	2b00      	cmp	r3, #0
 8012262:	d006      	beq.n	8012272 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012264:	68fb      	ldr	r3, [r7, #12]
 8012266:	2200      	movs	r2, #0
 8012268:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801226c:	711a      	strb	r2, [r3, #4]
 801226e:	2200      	movs	r2, #0
 8012270:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012272:	687b      	ldr	r3, [r7, #4]
 8012274:	2243      	movs	r2, #67	@ 0x43
 8012276:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012278:	4b02      	ldr	r3, [pc, #8]	@ (8012284 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 801227a:	4618      	mov	r0, r3
 801227c:	3718      	adds	r7, #24
 801227e:	46bd      	mov	sp, r7
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	200000a4 	.word	0x200000a4

08012288 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012288:	b480      	push	{r7}
 801228a:	b083      	sub	sp, #12
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	220a      	movs	r2, #10
 8012294:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012296:	4b03      	ldr	r3, [pc, #12]	@ (80122a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012298:	4618      	mov	r0, r3
 801229a:	370c      	adds	r7, #12
 801229c:	46bd      	mov	sp, r7
 801229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a2:	4770      	bx	lr
 80122a4:	20000060 	.word	0x20000060

080122a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80122a8:	b480      	push	{r7}
 80122aa:	b083      	sub	sp, #12
 80122ac:	af00      	add	r7, sp, #0
 80122ae:	6078      	str	r0, [r7, #4]
 80122b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80122b2:	683b      	ldr	r3, [r7, #0]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d101      	bne.n	80122bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80122b8:	2303      	movs	r3, #3
 80122ba:	e009      	b.n	80122d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80122c2:	687a      	ldr	r2, [r7, #4]
 80122c4:	33b0      	adds	r3, #176	@ 0xb0
 80122c6:	009b      	lsls	r3, r3, #2
 80122c8:	4413      	add	r3, r2
 80122ca:	683a      	ldr	r2, [r7, #0]
 80122cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80122ce:	2300      	movs	r3, #0
}
 80122d0:	4618      	mov	r0, r3
 80122d2:	370c      	adds	r7, #12
 80122d4:	46bd      	mov	sp, r7
 80122d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122da:	4770      	bx	lr

080122dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80122dc:	b480      	push	{r7}
 80122de:	b087      	sub	sp, #28
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	60f8      	str	r0, [r7, #12]
 80122e4:	60b9      	str	r1, [r7, #8]
 80122e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80122ee:	68fb      	ldr	r3, [r7, #12]
 80122f0:	32b0      	adds	r2, #176	@ 0xb0
 80122f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80122f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80122f8:	697b      	ldr	r3, [r7, #20]
 80122fa:	2b00      	cmp	r3, #0
 80122fc:	d101      	bne.n	8012302 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80122fe:	2303      	movs	r3, #3
 8012300:	e008      	b.n	8012314 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8012302:	697b      	ldr	r3, [r7, #20]
 8012304:	68ba      	ldr	r2, [r7, #8]
 8012306:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801230a:	697b      	ldr	r3, [r7, #20]
 801230c:	687a      	ldr	r2, [r7, #4]
 801230e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8012312:	2300      	movs	r3, #0
}
 8012314:	4618      	mov	r0, r3
 8012316:	371c      	adds	r7, #28
 8012318:	46bd      	mov	sp, r7
 801231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801231e:	4770      	bx	lr

08012320 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012320:	b480      	push	{r7}
 8012322:	b085      	sub	sp, #20
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
 8012328:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801232a:	687b      	ldr	r3, [r7, #4]
 801232c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	32b0      	adds	r2, #176	@ 0xb0
 8012334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012338:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d101      	bne.n	8012344 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012340:	2303      	movs	r3, #3
 8012342:	e004      	b.n	801234e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	683a      	ldr	r2, [r7, #0]
 8012348:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 801234c:	2300      	movs	r3, #0
}
 801234e:	4618      	mov	r0, r3
 8012350:	3714      	adds	r7, #20
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr
	...

0801235c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 801235c:	b580      	push	{r7, lr}
 801235e:	b084      	sub	sp, #16
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	32b0      	adds	r2, #176	@ 0xb0
 801236e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012372:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	32b0      	adds	r2, #176	@ 0xb0
 801237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d101      	bne.n	801238a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8012386:	2303      	movs	r3, #3
 8012388:	e018      	b.n	80123bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	7c1b      	ldrb	r3, [r3, #16]
 801238e:	2b00      	cmp	r3, #0
 8012390:	d10a      	bne.n	80123a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012392:	4b0c      	ldr	r3, [pc, #48]	@ (80123c4 <USBD_CDC_ReceivePacket+0x68>)
 8012394:	7819      	ldrb	r1, [r3, #0]
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801239c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80123a0:	6878      	ldr	r0, [r7, #4]
 80123a2:	f005 f965 	bl	8017670 <USBD_LL_PrepareReceive>
 80123a6:	e008      	b.n	80123ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80123a8:	4b06      	ldr	r3, [pc, #24]	@ (80123c4 <USBD_CDC_ReceivePacket+0x68>)
 80123aa:	7819      	ldrb	r1, [r3, #0]
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80123b2:	2340      	movs	r3, #64	@ 0x40
 80123b4:	6878      	ldr	r0, [r7, #4]
 80123b6:	f005 f95b 	bl	8017670 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80123ba:	2300      	movs	r3, #0
}
 80123bc:	4618      	mov	r0, r3
 80123be:	3710      	adds	r7, #16
 80123c0:	46bd      	mov	sp, r7
 80123c2:	bd80      	pop	{r7, pc}
 80123c4:	200000e8 	.word	0x200000e8

080123c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b086      	sub	sp, #24
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	60f8      	str	r0, [r7, #12]
 80123d0:	60b9      	str	r1, [r7, #8]
 80123d2:	4613      	mov	r3, r2
 80123d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d101      	bne.n	80123e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80123dc:	2303      	movs	r3, #3
 80123de:	e01f      	b.n	8012420 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	2200      	movs	r2, #0
 80123e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	2200      	movs	r2, #0
 80123ec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80123f0:	68fb      	ldr	r3, [r7, #12]
 80123f2:	2200      	movs	r2, #0
 80123f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80123f8:	68bb      	ldr	r3, [r7, #8]
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d003      	beq.n	8012406 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	68ba      	ldr	r2, [r7, #8]
 8012402:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	2201      	movs	r2, #1
 801240a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801240e:	68fb      	ldr	r3, [r7, #12]
 8012410:	79fa      	ldrb	r2, [r7, #7]
 8012412:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012414:	68f8      	ldr	r0, [r7, #12]
 8012416:	f004 ffd5 	bl	80173c4 <USBD_LL_Init>
 801241a:	4603      	mov	r3, r0
 801241c:	75fb      	strb	r3, [r7, #23]

  return ret;
 801241e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012420:	4618      	mov	r0, r3
 8012422:	3718      	adds	r7, #24
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
 8012430:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012432:	2300      	movs	r3, #0
 8012434:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012436:	683b      	ldr	r3, [r7, #0]
 8012438:	2b00      	cmp	r3, #0
 801243a:	d101      	bne.n	8012440 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 801243c:	2303      	movs	r3, #3
 801243e:	e025      	b.n	801248c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	683a      	ldr	r2, [r7, #0]
 8012444:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012448:	687b      	ldr	r3, [r7, #4]
 801244a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	32ae      	adds	r2, #174	@ 0xae
 8012452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012458:	2b00      	cmp	r3, #0
 801245a:	d00f      	beq.n	801247c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	32ae      	adds	r2, #174	@ 0xae
 8012466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801246a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801246c:	f107 020e 	add.w	r2, r7, #14
 8012470:	4610      	mov	r0, r2
 8012472:	4798      	blx	r3
 8012474:	4602      	mov	r2, r0
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 801247c:	687b      	ldr	r3, [r7, #4]
 801247e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8012482:	1c5a      	adds	r2, r3, #1
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801248a:	2300      	movs	r3, #0
}
 801248c:	4618      	mov	r0, r3
 801248e:	3710      	adds	r7, #16
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}

08012494 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b082      	sub	sp, #8
 8012498:	af00      	add	r7, sp, #0
 801249a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 801249c:	6878      	ldr	r0, [r7, #4]
 801249e:	f004 ffdd 	bl	801745c <USBD_LL_Start>
 80124a2:	4603      	mov	r3, r0
}
 80124a4:	4618      	mov	r0, r3
 80124a6:	3708      	adds	r7, #8
 80124a8:	46bd      	mov	sp, r7
 80124aa:	bd80      	pop	{r7, pc}

080124ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80124ac:	b480      	push	{r7}
 80124ae:	b083      	sub	sp, #12
 80124b0:	af00      	add	r7, sp, #0
 80124b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80124b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80124b6:	4618      	mov	r0, r3
 80124b8:	370c      	adds	r7, #12
 80124ba:	46bd      	mov	sp, r7
 80124bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c0:	4770      	bx	lr

080124c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b084      	sub	sp, #16
 80124c6:	af00      	add	r7, sp, #0
 80124c8:	6078      	str	r0, [r7, #4]
 80124ca:	460b      	mov	r3, r1
 80124cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80124ce:	2300      	movs	r3, #0
 80124d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d009      	beq.n	80124f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80124e2:	681b      	ldr	r3, [r3, #0]
 80124e4:	78fa      	ldrb	r2, [r7, #3]
 80124e6:	4611      	mov	r1, r2
 80124e8:	6878      	ldr	r0, [r7, #4]
 80124ea:	4798      	blx	r3
 80124ec:	4603      	mov	r3, r0
 80124ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80124f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	3710      	adds	r7, #16
 80124f6:	46bd      	mov	sp, r7
 80124f8:	bd80      	pop	{r7, pc}

080124fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80124fa:	b580      	push	{r7, lr}
 80124fc:	b084      	sub	sp, #16
 80124fe:	af00      	add	r7, sp, #0
 8012500:	6078      	str	r0, [r7, #4]
 8012502:	460b      	mov	r3, r1
 8012504:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012506:	2300      	movs	r3, #0
 8012508:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012510:	685b      	ldr	r3, [r3, #4]
 8012512:	78fa      	ldrb	r2, [r7, #3]
 8012514:	4611      	mov	r1, r2
 8012516:	6878      	ldr	r0, [r7, #4]
 8012518:	4798      	blx	r3
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d001      	beq.n	8012524 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8012520:	2303      	movs	r3, #3
 8012522:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012524:	7bfb      	ldrb	r3, [r7, #15]
}
 8012526:	4618      	mov	r0, r3
 8012528:	3710      	adds	r7, #16
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}

0801252e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801252e:	b580      	push	{r7, lr}
 8012530:	b084      	sub	sp, #16
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
 8012536:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801253e:	6839      	ldr	r1, [r7, #0]
 8012540:	4618      	mov	r0, r3
 8012542:	f001 f90c 	bl	801375e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	2201      	movs	r2, #1
 801254a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012554:	461a      	mov	r2, r3
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012562:	f003 031f 	and.w	r3, r3, #31
 8012566:	2b02      	cmp	r3, #2
 8012568:	d01a      	beq.n	80125a0 <USBD_LL_SetupStage+0x72>
 801256a:	2b02      	cmp	r3, #2
 801256c:	d822      	bhi.n	80125b4 <USBD_LL_SetupStage+0x86>
 801256e:	2b00      	cmp	r3, #0
 8012570:	d002      	beq.n	8012578 <USBD_LL_SetupStage+0x4a>
 8012572:	2b01      	cmp	r3, #1
 8012574:	d00a      	beq.n	801258c <USBD_LL_SetupStage+0x5e>
 8012576:	e01d      	b.n	80125b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801257e:	4619      	mov	r1, r3
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	f000 fb63 	bl	8012c4c <USBD_StdDevReq>
 8012586:	4603      	mov	r3, r0
 8012588:	73fb      	strb	r3, [r7, #15]
      break;
 801258a:	e020      	b.n	80125ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8012592:	4619      	mov	r1, r3
 8012594:	6878      	ldr	r0, [r7, #4]
 8012596:	f000 fbcb 	bl	8012d30 <USBD_StdItfReq>
 801259a:	4603      	mov	r3, r0
 801259c:	73fb      	strb	r3, [r7, #15]
      break;
 801259e:	e016      	b.n	80125ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80125a0:	687b      	ldr	r3, [r7, #4]
 80125a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80125a6:	4619      	mov	r1, r3
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f000 fc2d 	bl	8012e08 <USBD_StdEPReq>
 80125ae:	4603      	mov	r3, r0
 80125b0:	73fb      	strb	r3, [r7, #15]
      break;
 80125b2:	e00c      	b.n	80125ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80125ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80125be:	b2db      	uxtb	r3, r3
 80125c0:	4619      	mov	r1, r3
 80125c2:	6878      	ldr	r0, [r7, #4]
 80125c4:	f004 ffaa 	bl	801751c <USBD_LL_StallEP>
 80125c8:	4603      	mov	r3, r0
 80125ca:	73fb      	strb	r3, [r7, #15]
      break;
 80125cc:	bf00      	nop
  }

  return ret;
 80125ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80125d0:	4618      	mov	r0, r3
 80125d2:	3710      	adds	r7, #16
 80125d4:	46bd      	mov	sp, r7
 80125d6:	bd80      	pop	{r7, pc}

080125d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b086      	sub	sp, #24
 80125dc:	af00      	add	r7, sp, #0
 80125de:	60f8      	str	r0, [r7, #12]
 80125e0:	460b      	mov	r3, r1
 80125e2:	607a      	str	r2, [r7, #4]
 80125e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80125e6:	2300      	movs	r3, #0
 80125e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80125ea:	7afb      	ldrb	r3, [r7, #11]
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d16e      	bne.n	80126ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80125f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80125f8:	68fb      	ldr	r3, [r7, #12]
 80125fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80125fe:	2b03      	cmp	r3, #3
 8012600:	f040 8098 	bne.w	8012734 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012604:	693b      	ldr	r3, [r7, #16]
 8012606:	689a      	ldr	r2, [r3, #8]
 8012608:	693b      	ldr	r3, [r7, #16]
 801260a:	68db      	ldr	r3, [r3, #12]
 801260c:	429a      	cmp	r2, r3
 801260e:	d913      	bls.n	8012638 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012610:	693b      	ldr	r3, [r7, #16]
 8012612:	689a      	ldr	r2, [r3, #8]
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	68db      	ldr	r3, [r3, #12]
 8012618:	1ad2      	subs	r2, r2, r3
 801261a:	693b      	ldr	r3, [r7, #16]
 801261c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	68da      	ldr	r2, [r3, #12]
 8012622:	693b      	ldr	r3, [r7, #16]
 8012624:	689b      	ldr	r3, [r3, #8]
 8012626:	4293      	cmp	r3, r2
 8012628:	bf28      	it	cs
 801262a:	4613      	movcs	r3, r2
 801262c:	461a      	mov	r2, r3
 801262e:	6879      	ldr	r1, [r7, #4]
 8012630:	68f8      	ldr	r0, [r7, #12]
 8012632:	f001 f994 	bl	801395e <USBD_CtlContinueRx>
 8012636:	e07d      	b.n	8012734 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012638:	68fb      	ldr	r3, [r7, #12]
 801263a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801263e:	f003 031f 	and.w	r3, r3, #31
 8012642:	2b02      	cmp	r3, #2
 8012644:	d014      	beq.n	8012670 <USBD_LL_DataOutStage+0x98>
 8012646:	2b02      	cmp	r3, #2
 8012648:	d81d      	bhi.n	8012686 <USBD_LL_DataOutStage+0xae>
 801264a:	2b00      	cmp	r3, #0
 801264c:	d002      	beq.n	8012654 <USBD_LL_DataOutStage+0x7c>
 801264e:	2b01      	cmp	r3, #1
 8012650:	d003      	beq.n	801265a <USBD_LL_DataOutStage+0x82>
 8012652:	e018      	b.n	8012686 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012654:	2300      	movs	r3, #0
 8012656:	75bb      	strb	r3, [r7, #22]
            break;
 8012658:	e018      	b.n	801268c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012660:	b2db      	uxtb	r3, r3
 8012662:	4619      	mov	r1, r3
 8012664:	68f8      	ldr	r0, [r7, #12]
 8012666:	f000 fa64 	bl	8012b32 <USBD_CoreFindIF>
 801266a:	4603      	mov	r3, r0
 801266c:	75bb      	strb	r3, [r7, #22]
            break;
 801266e:	e00d      	b.n	801268c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012676:	b2db      	uxtb	r3, r3
 8012678:	4619      	mov	r1, r3
 801267a:	68f8      	ldr	r0, [r7, #12]
 801267c:	f000 fa66 	bl	8012b4c <USBD_CoreFindEP>
 8012680:	4603      	mov	r3, r0
 8012682:	75bb      	strb	r3, [r7, #22]
            break;
 8012684:	e002      	b.n	801268c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012686:	2300      	movs	r3, #0
 8012688:	75bb      	strb	r3, [r7, #22]
            break;
 801268a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 801268c:	7dbb      	ldrb	r3, [r7, #22]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d119      	bne.n	80126c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012692:	68fb      	ldr	r3, [r7, #12]
 8012694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012698:	b2db      	uxtb	r3, r3
 801269a:	2b03      	cmp	r3, #3
 801269c:	d113      	bne.n	80126c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 801269e:	7dba      	ldrb	r2, [r7, #22]
 80126a0:	68fb      	ldr	r3, [r7, #12]
 80126a2:	32ae      	adds	r2, #174	@ 0xae
 80126a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126a8:	691b      	ldr	r3, [r3, #16]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d00b      	beq.n	80126c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80126ae:	7dba      	ldrb	r2, [r7, #22]
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80126b6:	7dba      	ldrb	r2, [r7, #22]
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	32ae      	adds	r2, #174	@ 0xae
 80126bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80126c0:	691b      	ldr	r3, [r3, #16]
 80126c2:	68f8      	ldr	r0, [r7, #12]
 80126c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80126c6:	68f8      	ldr	r0, [r7, #12]
 80126c8:	f001 f95a 	bl	8013980 <USBD_CtlSendStatus>
 80126cc:	e032      	b.n	8012734 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80126ce:	7afb      	ldrb	r3, [r7, #11]
 80126d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80126d4:	b2db      	uxtb	r3, r3
 80126d6:	4619      	mov	r1, r3
 80126d8:	68f8      	ldr	r0, [r7, #12]
 80126da:	f000 fa37 	bl	8012b4c <USBD_CoreFindEP>
 80126de:	4603      	mov	r3, r0
 80126e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80126e2:	7dbb      	ldrb	r3, [r7, #22]
 80126e4:	2bff      	cmp	r3, #255	@ 0xff
 80126e6:	d025      	beq.n	8012734 <USBD_LL_DataOutStage+0x15c>
 80126e8:	7dbb      	ldrb	r3, [r7, #22]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d122      	bne.n	8012734 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80126f4:	b2db      	uxtb	r3, r3
 80126f6:	2b03      	cmp	r3, #3
 80126f8:	d117      	bne.n	801272a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80126fa:	7dba      	ldrb	r2, [r7, #22]
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	32ae      	adds	r2, #174	@ 0xae
 8012700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012704:	699b      	ldr	r3, [r3, #24]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d00f      	beq.n	801272a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801270a:	7dba      	ldrb	r2, [r7, #22]
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012712:	7dba      	ldrb	r2, [r7, #22]
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	32ae      	adds	r2, #174	@ 0xae
 8012718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801271c:	699b      	ldr	r3, [r3, #24]
 801271e:	7afa      	ldrb	r2, [r7, #11]
 8012720:	4611      	mov	r1, r2
 8012722:	68f8      	ldr	r0, [r7, #12]
 8012724:	4798      	blx	r3
 8012726:	4603      	mov	r3, r0
 8012728:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801272a:	7dfb      	ldrb	r3, [r7, #23]
 801272c:	2b00      	cmp	r3, #0
 801272e:	d001      	beq.n	8012734 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012730:	7dfb      	ldrb	r3, [r7, #23]
 8012732:	e000      	b.n	8012736 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012734:	2300      	movs	r3, #0
}
 8012736:	4618      	mov	r0, r3
 8012738:	3718      	adds	r7, #24
 801273a:	46bd      	mov	sp, r7
 801273c:	bd80      	pop	{r7, pc}

0801273e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801273e:	b580      	push	{r7, lr}
 8012740:	b086      	sub	sp, #24
 8012742:	af00      	add	r7, sp, #0
 8012744:	60f8      	str	r0, [r7, #12]
 8012746:	460b      	mov	r3, r1
 8012748:	607a      	str	r2, [r7, #4]
 801274a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801274c:	7afb      	ldrb	r3, [r7, #11]
 801274e:	2b00      	cmp	r3, #0
 8012750:	d16f      	bne.n	8012832 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	3314      	adds	r3, #20
 8012756:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801275e:	2b02      	cmp	r3, #2
 8012760:	d15a      	bne.n	8012818 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012762:	693b      	ldr	r3, [r7, #16]
 8012764:	689a      	ldr	r2, [r3, #8]
 8012766:	693b      	ldr	r3, [r7, #16]
 8012768:	68db      	ldr	r3, [r3, #12]
 801276a:	429a      	cmp	r2, r3
 801276c:	d914      	bls.n	8012798 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801276e:	693b      	ldr	r3, [r7, #16]
 8012770:	689a      	ldr	r2, [r3, #8]
 8012772:	693b      	ldr	r3, [r7, #16]
 8012774:	68db      	ldr	r3, [r3, #12]
 8012776:	1ad2      	subs	r2, r2, r3
 8012778:	693b      	ldr	r3, [r7, #16]
 801277a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801277c:	693b      	ldr	r3, [r7, #16]
 801277e:	689b      	ldr	r3, [r3, #8]
 8012780:	461a      	mov	r2, r3
 8012782:	6879      	ldr	r1, [r7, #4]
 8012784:	68f8      	ldr	r0, [r7, #12]
 8012786:	f001 f8bc 	bl	8013902 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801278a:	2300      	movs	r3, #0
 801278c:	2200      	movs	r2, #0
 801278e:	2100      	movs	r1, #0
 8012790:	68f8      	ldr	r0, [r7, #12]
 8012792:	f004 ff6d 	bl	8017670 <USBD_LL_PrepareReceive>
 8012796:	e03f      	b.n	8012818 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012798:	693b      	ldr	r3, [r7, #16]
 801279a:	68da      	ldr	r2, [r3, #12]
 801279c:	693b      	ldr	r3, [r7, #16]
 801279e:	689b      	ldr	r3, [r3, #8]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d11c      	bne.n	80127de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80127a4:	693b      	ldr	r3, [r7, #16]
 80127a6:	685a      	ldr	r2, [r3, #4]
 80127a8:	693b      	ldr	r3, [r7, #16]
 80127aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80127ac:	429a      	cmp	r2, r3
 80127ae:	d316      	bcc.n	80127de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	685a      	ldr	r2, [r3, #4]
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80127ba:	429a      	cmp	r2, r3
 80127bc:	d20f      	bcs.n	80127de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80127be:	2200      	movs	r2, #0
 80127c0:	2100      	movs	r1, #0
 80127c2:	68f8      	ldr	r0, [r7, #12]
 80127c4:	f001 f89d 	bl	8013902 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	2200      	movs	r2, #0
 80127cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80127d0:	2300      	movs	r3, #0
 80127d2:	2200      	movs	r2, #0
 80127d4:	2100      	movs	r1, #0
 80127d6:	68f8      	ldr	r0, [r7, #12]
 80127d8:	f004 ff4a 	bl	8017670 <USBD_LL_PrepareReceive>
 80127dc:	e01c      	b.n	8012818 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80127e4:	b2db      	uxtb	r3, r3
 80127e6:	2b03      	cmp	r3, #3
 80127e8:	d10f      	bne.n	801280a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80127ea:	68fb      	ldr	r3, [r7, #12]
 80127ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80127f0:	68db      	ldr	r3, [r3, #12]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d009      	beq.n	801280a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	2200      	movs	r2, #0
 80127fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012804:	68db      	ldr	r3, [r3, #12]
 8012806:	68f8      	ldr	r0, [r7, #12]
 8012808:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801280a:	2180      	movs	r1, #128	@ 0x80
 801280c:	68f8      	ldr	r0, [r7, #12]
 801280e:	f004 fe85 	bl	801751c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012812:	68f8      	ldr	r0, [r7, #12]
 8012814:	f001 f8c7 	bl	80139a6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801281e:	2b00      	cmp	r3, #0
 8012820:	d03a      	beq.n	8012898 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012822:	68f8      	ldr	r0, [r7, #12]
 8012824:	f7ff fe42 	bl	80124ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012828:	68fb      	ldr	r3, [r7, #12]
 801282a:	2200      	movs	r2, #0
 801282c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012830:	e032      	b.n	8012898 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012832:	7afb      	ldrb	r3, [r7, #11]
 8012834:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012838:	b2db      	uxtb	r3, r3
 801283a:	4619      	mov	r1, r3
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	f000 f985 	bl	8012b4c <USBD_CoreFindEP>
 8012842:	4603      	mov	r3, r0
 8012844:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012846:	7dfb      	ldrb	r3, [r7, #23]
 8012848:	2bff      	cmp	r3, #255	@ 0xff
 801284a:	d025      	beq.n	8012898 <USBD_LL_DataInStage+0x15a>
 801284c:	7dfb      	ldrb	r3, [r7, #23]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d122      	bne.n	8012898 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012858:	b2db      	uxtb	r3, r3
 801285a:	2b03      	cmp	r3, #3
 801285c:	d11c      	bne.n	8012898 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801285e:	7dfa      	ldrb	r2, [r7, #23]
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	32ae      	adds	r2, #174	@ 0xae
 8012864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012868:	695b      	ldr	r3, [r3, #20]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d014      	beq.n	8012898 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801286e:	7dfa      	ldrb	r2, [r7, #23]
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012876:	7dfa      	ldrb	r2, [r7, #23]
 8012878:	68fb      	ldr	r3, [r7, #12]
 801287a:	32ae      	adds	r2, #174	@ 0xae
 801287c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012880:	695b      	ldr	r3, [r3, #20]
 8012882:	7afa      	ldrb	r2, [r7, #11]
 8012884:	4611      	mov	r1, r2
 8012886:	68f8      	ldr	r0, [r7, #12]
 8012888:	4798      	blx	r3
 801288a:	4603      	mov	r3, r0
 801288c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801288e:	7dbb      	ldrb	r3, [r7, #22]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d001      	beq.n	8012898 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012894:	7dbb      	ldrb	r3, [r7, #22]
 8012896:	e000      	b.n	801289a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012898:	2300      	movs	r3, #0
}
 801289a:	4618      	mov	r0, r3
 801289c:	3718      	adds	r7, #24
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}

080128a2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80128a2:	b580      	push	{r7, lr}
 80128a4:	b084      	sub	sp, #16
 80128a6:	af00      	add	r7, sp, #0
 80128a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80128aa:	2300      	movs	r3, #0
 80128ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80128ae:	687b      	ldr	r3, [r7, #4]
 80128b0:	2201      	movs	r2, #1
 80128b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	2200      	movs	r2, #0
 80128ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	2200      	movs	r2, #0
 80128c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2200      	movs	r2, #0
 80128c8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2200      	movs	r2, #0
 80128d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d014      	beq.n	8012908 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80128e4:	685b      	ldr	r3, [r3, #4]
 80128e6:	2b00      	cmp	r3, #0
 80128e8:	d00e      	beq.n	8012908 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80128f0:	685b      	ldr	r3, [r3, #4]
 80128f2:	687a      	ldr	r2, [r7, #4]
 80128f4:	6852      	ldr	r2, [r2, #4]
 80128f6:	b2d2      	uxtb	r2, r2
 80128f8:	4611      	mov	r1, r2
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	4798      	blx	r3
 80128fe:	4603      	mov	r3, r0
 8012900:	2b00      	cmp	r3, #0
 8012902:	d001      	beq.n	8012908 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012904:	2303      	movs	r3, #3
 8012906:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012908:	2340      	movs	r3, #64	@ 0x40
 801290a:	2200      	movs	r2, #0
 801290c:	2100      	movs	r1, #0
 801290e:	6878      	ldr	r0, [r7, #4]
 8012910:	f004 fdbf 	bl	8017492 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	2201      	movs	r2, #1
 8012918:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	2240      	movs	r2, #64	@ 0x40
 8012920:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012924:	2340      	movs	r3, #64	@ 0x40
 8012926:	2200      	movs	r2, #0
 8012928:	2180      	movs	r1, #128	@ 0x80
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f004 fdb1 	bl	8017492 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	2201      	movs	r2, #1
 8012934:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	2240      	movs	r2, #64	@ 0x40
 801293a:	621a      	str	r2, [r3, #32]

  return ret;
 801293c:	7bfb      	ldrb	r3, [r7, #15]
}
 801293e:	4618      	mov	r0, r3
 8012940:	3710      	adds	r7, #16
 8012942:	46bd      	mov	sp, r7
 8012944:	bd80      	pop	{r7, pc}

08012946 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012946:	b480      	push	{r7}
 8012948:	b083      	sub	sp, #12
 801294a:	af00      	add	r7, sp, #0
 801294c:	6078      	str	r0, [r7, #4]
 801294e:	460b      	mov	r3, r1
 8012950:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	78fa      	ldrb	r2, [r7, #3]
 8012956:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012958:	2300      	movs	r3, #0
}
 801295a:	4618      	mov	r0, r3
 801295c:	370c      	adds	r7, #12
 801295e:	46bd      	mov	sp, r7
 8012960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012964:	4770      	bx	lr

08012966 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012966:	b480      	push	{r7}
 8012968:	b083      	sub	sp, #12
 801296a:	af00      	add	r7, sp, #0
 801296c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012974:	b2db      	uxtb	r3, r3
 8012976:	2b04      	cmp	r3, #4
 8012978:	d006      	beq.n	8012988 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801297a:	687b      	ldr	r3, [r7, #4]
 801297c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012980:	b2da      	uxtb	r2, r3
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	2204      	movs	r2, #4
 801298c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012990:	2300      	movs	r3, #0
}
 8012992:	4618      	mov	r0, r3
 8012994:	370c      	adds	r7, #12
 8012996:	46bd      	mov	sp, r7
 8012998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801299c:	4770      	bx	lr

0801299e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801299e:	b480      	push	{r7}
 80129a0:	b083      	sub	sp, #12
 80129a2:	af00      	add	r7, sp, #0
 80129a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80129a6:	687b      	ldr	r3, [r7, #4]
 80129a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129ac:	b2db      	uxtb	r3, r3
 80129ae:	2b04      	cmp	r3, #4
 80129b0:	d106      	bne.n	80129c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80129b8:	b2da      	uxtb	r2, r3
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80129c0:	2300      	movs	r3, #0
}
 80129c2:	4618      	mov	r0, r3
 80129c4:	370c      	adds	r7, #12
 80129c6:	46bd      	mov	sp, r7
 80129c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129cc:	4770      	bx	lr

080129ce <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80129ce:	b580      	push	{r7, lr}
 80129d0:	b082      	sub	sp, #8
 80129d2:	af00      	add	r7, sp, #0
 80129d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	2b03      	cmp	r3, #3
 80129e0:	d110      	bne.n	8012a04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d00b      	beq.n	8012a04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129f2:	69db      	ldr	r3, [r3, #28]
 80129f4:	2b00      	cmp	r3, #0
 80129f6:	d005      	beq.n	8012a04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80129fe:	69db      	ldr	r3, [r3, #28]
 8012a00:	6878      	ldr	r0, [r7, #4]
 8012a02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012a04:	2300      	movs	r3, #0
}
 8012a06:	4618      	mov	r0, r3
 8012a08:	3708      	adds	r7, #8
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	bd80      	pop	{r7, pc}

08012a0e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012a0e:	b580      	push	{r7, lr}
 8012a10:	b082      	sub	sp, #8
 8012a12:	af00      	add	r7, sp, #0
 8012a14:	6078      	str	r0, [r7, #4]
 8012a16:	460b      	mov	r3, r1
 8012a18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	32ae      	adds	r2, #174	@ 0xae
 8012a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d101      	bne.n	8012a30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012a2c:	2303      	movs	r3, #3
 8012a2e:	e01c      	b.n	8012a6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a30:	687b      	ldr	r3, [r7, #4]
 8012a32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a36:	b2db      	uxtb	r3, r3
 8012a38:	2b03      	cmp	r3, #3
 8012a3a:	d115      	bne.n	8012a68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	32ae      	adds	r2, #174	@ 0xae
 8012a46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a4a:	6a1b      	ldr	r3, [r3, #32]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d00b      	beq.n	8012a68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012a50:	687b      	ldr	r3, [r7, #4]
 8012a52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	32ae      	adds	r2, #174	@ 0xae
 8012a5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a5e:	6a1b      	ldr	r3, [r3, #32]
 8012a60:	78fa      	ldrb	r2, [r7, #3]
 8012a62:	4611      	mov	r1, r2
 8012a64:	6878      	ldr	r0, [r7, #4]
 8012a66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012a68:	2300      	movs	r3, #0
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3708      	adds	r7, #8
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}

08012a72 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012a72:	b580      	push	{r7, lr}
 8012a74:	b082      	sub	sp, #8
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	6078      	str	r0, [r7, #4]
 8012a7a:	460b      	mov	r3, r1
 8012a7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012a84:	687b      	ldr	r3, [r7, #4]
 8012a86:	32ae      	adds	r2, #174	@ 0xae
 8012a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d101      	bne.n	8012a94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8012a90:	2303      	movs	r3, #3
 8012a92:	e01c      	b.n	8012ace <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	2b03      	cmp	r3, #3
 8012a9e:	d115      	bne.n	8012acc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	32ae      	adds	r2, #174	@ 0xae
 8012aaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00b      	beq.n	8012acc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	32ae      	adds	r2, #174	@ 0xae
 8012abe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ac4:	78fa      	ldrb	r2, [r7, #3]
 8012ac6:	4611      	mov	r1, r2
 8012ac8:	6878      	ldr	r0, [r7, #4]
 8012aca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012acc:	2300      	movs	r3, #0
}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3708      	adds	r7, #8
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}

08012ad6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012ad6:	b480      	push	{r7}
 8012ad8:	b083      	sub	sp, #12
 8012ada:	af00      	add	r7, sp, #0
 8012adc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012ade:	2300      	movs	r3, #0
}
 8012ae0:	4618      	mov	r0, r3
 8012ae2:	370c      	adds	r7, #12
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr

08012aec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012aec:	b580      	push	{r7, lr}
 8012aee:	b084      	sub	sp, #16
 8012af0:	af00      	add	r7, sp, #0
 8012af2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012af4:	2300      	movs	r3, #0
 8012af6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	2201      	movs	r2, #1
 8012afc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d00e      	beq.n	8012b28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012b10:	685b      	ldr	r3, [r3, #4]
 8012b12:	687a      	ldr	r2, [r7, #4]
 8012b14:	6852      	ldr	r2, [r2, #4]
 8012b16:	b2d2      	uxtb	r2, r2
 8012b18:	4611      	mov	r1, r2
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	4798      	blx	r3
 8012b1e:	4603      	mov	r3, r0
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d001      	beq.n	8012b28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012b24:	2303      	movs	r3, #3
 8012b26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	3710      	adds	r7, #16
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}

08012b32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012b32:	b480      	push	{r7}
 8012b34:	b083      	sub	sp, #12
 8012b36:	af00      	add	r7, sp, #0
 8012b38:	6078      	str	r0, [r7, #4]
 8012b3a:	460b      	mov	r3, r1
 8012b3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012b3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012b40:	4618      	mov	r0, r3
 8012b42:	370c      	adds	r7, #12
 8012b44:	46bd      	mov	sp, r7
 8012b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4a:	4770      	bx	lr

08012b4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012b4c:	b480      	push	{r7}
 8012b4e:	b083      	sub	sp, #12
 8012b50:	af00      	add	r7, sp, #0
 8012b52:	6078      	str	r0, [r7, #4]
 8012b54:	460b      	mov	r3, r1
 8012b56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012b58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	370c      	adds	r7, #12
 8012b5e:	46bd      	mov	sp, r7
 8012b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b64:	4770      	bx	lr

08012b66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012b66:	b580      	push	{r7, lr}
 8012b68:	b086      	sub	sp, #24
 8012b6a:	af00      	add	r7, sp, #0
 8012b6c:	6078      	str	r0, [r7, #4]
 8012b6e:	460b      	mov	r3, r1
 8012b70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012b7a:	2300      	movs	r3, #0
 8012b7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	885b      	ldrh	r3, [r3, #2]
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	68fa      	ldr	r2, [r7, #12]
 8012b86:	7812      	ldrb	r2, [r2, #0]
 8012b88:	4293      	cmp	r3, r2
 8012b8a:	d91f      	bls.n	8012bcc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	781b      	ldrb	r3, [r3, #0]
 8012b90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012b92:	e013      	b.n	8012bbc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012b94:	f107 030a 	add.w	r3, r7, #10
 8012b98:	4619      	mov	r1, r3
 8012b9a:	6978      	ldr	r0, [r7, #20]
 8012b9c:	f000 f81b 	bl	8012bd6 <USBD_GetNextDesc>
 8012ba0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012ba2:	697b      	ldr	r3, [r7, #20]
 8012ba4:	785b      	ldrb	r3, [r3, #1]
 8012ba6:	2b05      	cmp	r3, #5
 8012ba8:	d108      	bne.n	8012bbc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012baa:	697b      	ldr	r3, [r7, #20]
 8012bac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	789b      	ldrb	r3, [r3, #2]
 8012bb2:	78fa      	ldrb	r2, [r7, #3]
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d008      	beq.n	8012bca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012bb8:	2300      	movs	r3, #0
 8012bba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012bbc:	68fb      	ldr	r3, [r7, #12]
 8012bbe:	885b      	ldrh	r3, [r3, #2]
 8012bc0:	b29a      	uxth	r2, r3
 8012bc2:	897b      	ldrh	r3, [r7, #10]
 8012bc4:	429a      	cmp	r2, r3
 8012bc6:	d8e5      	bhi.n	8012b94 <USBD_GetEpDesc+0x2e>
 8012bc8:	e000      	b.n	8012bcc <USBD_GetEpDesc+0x66>
          break;
 8012bca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012bcc:	693b      	ldr	r3, [r7, #16]
}
 8012bce:	4618      	mov	r0, r3
 8012bd0:	3718      	adds	r7, #24
 8012bd2:	46bd      	mov	sp, r7
 8012bd4:	bd80      	pop	{r7, pc}

08012bd6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012bd6:	b480      	push	{r7}
 8012bd8:	b085      	sub	sp, #20
 8012bda:	af00      	add	r7, sp, #0
 8012bdc:	6078      	str	r0, [r7, #4]
 8012bde:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012be4:	683b      	ldr	r3, [r7, #0]
 8012be6:	881b      	ldrh	r3, [r3, #0]
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	7812      	ldrb	r2, [r2, #0]
 8012bec:	4413      	add	r3, r2
 8012bee:	b29a      	uxth	r2, r3
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	781b      	ldrb	r3, [r3, #0]
 8012bf8:	461a      	mov	r2, r3
 8012bfa:	687b      	ldr	r3, [r7, #4]
 8012bfc:	4413      	add	r3, r2
 8012bfe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8012c00:	68fb      	ldr	r3, [r7, #12]
}
 8012c02:	4618      	mov	r0, r3
 8012c04:	3714      	adds	r7, #20
 8012c06:	46bd      	mov	sp, r7
 8012c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0c:	4770      	bx	lr

08012c0e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8012c0e:	b480      	push	{r7}
 8012c10:	b087      	sub	sp, #28
 8012c12:	af00      	add	r7, sp, #0
 8012c14:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8012c16:	687b      	ldr	r3, [r7, #4]
 8012c18:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	781b      	ldrb	r3, [r3, #0]
 8012c1e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8012c20:	697b      	ldr	r3, [r7, #20]
 8012c22:	3301      	adds	r3, #1
 8012c24:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8012c26:	697b      	ldr	r3, [r7, #20]
 8012c28:	781b      	ldrb	r3, [r3, #0]
 8012c2a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8012c2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8012c30:	021b      	lsls	r3, r3, #8
 8012c32:	b21a      	sxth	r2, r3
 8012c34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012c38:	4313      	orrs	r3, r2
 8012c3a:	b21b      	sxth	r3, r3
 8012c3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012c3e:	89fb      	ldrh	r3, [r7, #14]
}
 8012c40:	4618      	mov	r0, r3
 8012c42:	371c      	adds	r7, #28
 8012c44:	46bd      	mov	sp, r7
 8012c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c4a:	4770      	bx	lr

08012c4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b084      	sub	sp, #16
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	6078      	str	r0, [r7, #4]
 8012c54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c56:	2300      	movs	r3, #0
 8012c58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012c5a:	683b      	ldr	r3, [r7, #0]
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012c62:	2b40      	cmp	r3, #64	@ 0x40
 8012c64:	d005      	beq.n	8012c72 <USBD_StdDevReq+0x26>
 8012c66:	2b40      	cmp	r3, #64	@ 0x40
 8012c68:	d857      	bhi.n	8012d1a <USBD_StdDevReq+0xce>
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d00f      	beq.n	8012c8e <USBD_StdDevReq+0x42>
 8012c6e:	2b20      	cmp	r3, #32
 8012c70:	d153      	bne.n	8012d1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	32ae      	adds	r2, #174	@ 0xae
 8012c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c80:	689b      	ldr	r3, [r3, #8]
 8012c82:	6839      	ldr	r1, [r7, #0]
 8012c84:	6878      	ldr	r0, [r7, #4]
 8012c86:	4798      	blx	r3
 8012c88:	4603      	mov	r3, r0
 8012c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8012c8c:	e04a      	b.n	8012d24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012c8e:	683b      	ldr	r3, [r7, #0]
 8012c90:	785b      	ldrb	r3, [r3, #1]
 8012c92:	2b09      	cmp	r3, #9
 8012c94:	d83b      	bhi.n	8012d0e <USBD_StdDevReq+0xc2>
 8012c96:	a201      	add	r2, pc, #4	@ (adr r2, 8012c9c <USBD_StdDevReq+0x50>)
 8012c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c9c:	08012cf1 	.word	0x08012cf1
 8012ca0:	08012d05 	.word	0x08012d05
 8012ca4:	08012d0f 	.word	0x08012d0f
 8012ca8:	08012cfb 	.word	0x08012cfb
 8012cac:	08012d0f 	.word	0x08012d0f
 8012cb0:	08012ccf 	.word	0x08012ccf
 8012cb4:	08012cc5 	.word	0x08012cc5
 8012cb8:	08012d0f 	.word	0x08012d0f
 8012cbc:	08012ce7 	.word	0x08012ce7
 8012cc0:	08012cd9 	.word	0x08012cd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8012cc4:	6839      	ldr	r1, [r7, #0]
 8012cc6:	6878      	ldr	r0, [r7, #4]
 8012cc8:	f000 fa3c 	bl	8013144 <USBD_GetDescriptor>
          break;
 8012ccc:	e024      	b.n	8012d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012cce:	6839      	ldr	r1, [r7, #0]
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f000 fba1 	bl	8013418 <USBD_SetAddress>
          break;
 8012cd6:	e01f      	b.n	8012d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8012cd8:	6839      	ldr	r1, [r7, #0]
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f000 fbe0 	bl	80134a0 <USBD_SetConfig>
 8012ce0:	4603      	mov	r3, r0
 8012ce2:	73fb      	strb	r3, [r7, #15]
          break;
 8012ce4:	e018      	b.n	8012d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8012ce6:	6839      	ldr	r1, [r7, #0]
 8012ce8:	6878      	ldr	r0, [r7, #4]
 8012cea:	f000 fc83 	bl	80135f4 <USBD_GetConfig>
          break;
 8012cee:	e013      	b.n	8012d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8012cf0:	6839      	ldr	r1, [r7, #0]
 8012cf2:	6878      	ldr	r0, [r7, #4]
 8012cf4:	f000 fcb4 	bl	8013660 <USBD_GetStatus>
          break;
 8012cf8:	e00e      	b.n	8012d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8012cfa:	6839      	ldr	r1, [r7, #0]
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f000 fce3 	bl	80136c8 <USBD_SetFeature>
          break;
 8012d02:	e009      	b.n	8012d18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8012d04:	6839      	ldr	r1, [r7, #0]
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	f000 fd07 	bl	801371a <USBD_ClrFeature>
          break;
 8012d0c:	e004      	b.n	8012d18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8012d0e:	6839      	ldr	r1, [r7, #0]
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f000 fd5e 	bl	80137d2 <USBD_CtlError>
          break;
 8012d16:	bf00      	nop
      }
      break;
 8012d18:	e004      	b.n	8012d24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8012d1a:	6839      	ldr	r1, [r7, #0]
 8012d1c:	6878      	ldr	r0, [r7, #4]
 8012d1e:	f000 fd58 	bl	80137d2 <USBD_CtlError>
      break;
 8012d22:	bf00      	nop
  }

  return ret;
 8012d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d26:	4618      	mov	r0, r3
 8012d28:	3710      	adds	r7, #16
 8012d2a:	46bd      	mov	sp, r7
 8012d2c:	bd80      	pop	{r7, pc}
 8012d2e:	bf00      	nop

08012d30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012d30:	b580      	push	{r7, lr}
 8012d32:	b084      	sub	sp, #16
 8012d34:	af00      	add	r7, sp, #0
 8012d36:	6078      	str	r0, [r7, #4]
 8012d38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012d3a:	2300      	movs	r3, #0
 8012d3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012d3e:	683b      	ldr	r3, [r7, #0]
 8012d40:	781b      	ldrb	r3, [r3, #0]
 8012d42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012d46:	2b40      	cmp	r3, #64	@ 0x40
 8012d48:	d005      	beq.n	8012d56 <USBD_StdItfReq+0x26>
 8012d4a:	2b40      	cmp	r3, #64	@ 0x40
 8012d4c:	d852      	bhi.n	8012df4 <USBD_StdItfReq+0xc4>
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d001      	beq.n	8012d56 <USBD_StdItfReq+0x26>
 8012d52:	2b20      	cmp	r3, #32
 8012d54:	d14e      	bne.n	8012df4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d5c:	b2db      	uxtb	r3, r3
 8012d5e:	3b01      	subs	r3, #1
 8012d60:	2b02      	cmp	r3, #2
 8012d62:	d840      	bhi.n	8012de6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8012d64:	683b      	ldr	r3, [r7, #0]
 8012d66:	889b      	ldrh	r3, [r3, #4]
 8012d68:	b2db      	uxtb	r3, r3
 8012d6a:	2b01      	cmp	r3, #1
 8012d6c:	d836      	bhi.n	8012ddc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	889b      	ldrh	r3, [r3, #4]
 8012d72:	b2db      	uxtb	r3, r3
 8012d74:	4619      	mov	r1, r3
 8012d76:	6878      	ldr	r0, [r7, #4]
 8012d78:	f7ff fedb 	bl	8012b32 <USBD_CoreFindIF>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012d80:	7bbb      	ldrb	r3, [r7, #14]
 8012d82:	2bff      	cmp	r3, #255	@ 0xff
 8012d84:	d01d      	beq.n	8012dc2 <USBD_StdItfReq+0x92>
 8012d86:	7bbb      	ldrb	r3, [r7, #14]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d11a      	bne.n	8012dc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012d8c:	7bba      	ldrb	r2, [r7, #14]
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	32ae      	adds	r2, #174	@ 0xae
 8012d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012d96:	689b      	ldr	r3, [r3, #8]
 8012d98:	2b00      	cmp	r3, #0
 8012d9a:	d00f      	beq.n	8012dbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012d9c:	7bba      	ldrb	r2, [r7, #14]
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012da4:	7bba      	ldrb	r2, [r7, #14]
 8012da6:	687b      	ldr	r3, [r7, #4]
 8012da8:	32ae      	adds	r2, #174	@ 0xae
 8012daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012dae:	689b      	ldr	r3, [r3, #8]
 8012db0:	6839      	ldr	r1, [r7, #0]
 8012db2:	6878      	ldr	r0, [r7, #4]
 8012db4:	4798      	blx	r3
 8012db6:	4603      	mov	r3, r0
 8012db8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012dba:	e004      	b.n	8012dc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012dbc:	2303      	movs	r3, #3
 8012dbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012dc0:	e001      	b.n	8012dc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8012dc2:	2303      	movs	r3, #3
 8012dc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	88db      	ldrh	r3, [r3, #6]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d110      	bne.n	8012df0 <USBD_StdItfReq+0xc0>
 8012dce:	7bfb      	ldrb	r3, [r7, #15]
 8012dd0:	2b00      	cmp	r3, #0
 8012dd2:	d10d      	bne.n	8012df0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f000 fdd3 	bl	8013980 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8012dda:	e009      	b.n	8012df0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8012ddc:	6839      	ldr	r1, [r7, #0]
 8012dde:	6878      	ldr	r0, [r7, #4]
 8012de0:	f000 fcf7 	bl	80137d2 <USBD_CtlError>
          break;
 8012de4:	e004      	b.n	8012df0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8012de6:	6839      	ldr	r1, [r7, #0]
 8012de8:	6878      	ldr	r0, [r7, #4]
 8012dea:	f000 fcf2 	bl	80137d2 <USBD_CtlError>
          break;
 8012dee:	e000      	b.n	8012df2 <USBD_StdItfReq+0xc2>
          break;
 8012df0:	bf00      	nop
      }
      break;
 8012df2:	e004      	b.n	8012dfe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8012df4:	6839      	ldr	r1, [r7, #0]
 8012df6:	6878      	ldr	r0, [r7, #4]
 8012df8:	f000 fceb 	bl	80137d2 <USBD_CtlError>
      break;
 8012dfc:	bf00      	nop
  }

  return ret;
 8012dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8012e00:	4618      	mov	r0, r3
 8012e02:	3710      	adds	r7, #16
 8012e04:	46bd      	mov	sp, r7
 8012e06:	bd80      	pop	{r7, pc}

08012e08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b084      	sub	sp, #16
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]
 8012e10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8012e12:	2300      	movs	r3, #0
 8012e14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8012e16:	683b      	ldr	r3, [r7, #0]
 8012e18:	889b      	ldrh	r3, [r3, #4]
 8012e1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012e1c:	683b      	ldr	r3, [r7, #0]
 8012e1e:	781b      	ldrb	r3, [r3, #0]
 8012e20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8012e24:	2b40      	cmp	r3, #64	@ 0x40
 8012e26:	d007      	beq.n	8012e38 <USBD_StdEPReq+0x30>
 8012e28:	2b40      	cmp	r3, #64	@ 0x40
 8012e2a:	f200 817f 	bhi.w	801312c <USBD_StdEPReq+0x324>
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d02a      	beq.n	8012e88 <USBD_StdEPReq+0x80>
 8012e32:	2b20      	cmp	r3, #32
 8012e34:	f040 817a 	bne.w	801312c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012e38:	7bbb      	ldrb	r3, [r7, #14]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	6878      	ldr	r0, [r7, #4]
 8012e3e:	f7ff fe85 	bl	8012b4c <USBD_CoreFindEP>
 8012e42:	4603      	mov	r3, r0
 8012e44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012e46:	7b7b      	ldrb	r3, [r7, #13]
 8012e48:	2bff      	cmp	r3, #255	@ 0xff
 8012e4a:	f000 8174 	beq.w	8013136 <USBD_StdEPReq+0x32e>
 8012e4e:	7b7b      	ldrb	r3, [r7, #13]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	f040 8170 	bne.w	8013136 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8012e56:	7b7a      	ldrb	r2, [r7, #13]
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012e5e:	7b7a      	ldrb	r2, [r7, #13]
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	32ae      	adds	r2, #174	@ 0xae
 8012e64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e68:	689b      	ldr	r3, [r3, #8]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	f000 8163 	beq.w	8013136 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012e70:	7b7a      	ldrb	r2, [r7, #13]
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	32ae      	adds	r2, #174	@ 0xae
 8012e76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e7a:	689b      	ldr	r3, [r3, #8]
 8012e7c:	6839      	ldr	r1, [r7, #0]
 8012e7e:	6878      	ldr	r0, [r7, #4]
 8012e80:	4798      	blx	r3
 8012e82:	4603      	mov	r3, r0
 8012e84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8012e86:	e156      	b.n	8013136 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012e88:	683b      	ldr	r3, [r7, #0]
 8012e8a:	785b      	ldrb	r3, [r3, #1]
 8012e8c:	2b03      	cmp	r3, #3
 8012e8e:	d008      	beq.n	8012ea2 <USBD_StdEPReq+0x9a>
 8012e90:	2b03      	cmp	r3, #3
 8012e92:	f300 8145 	bgt.w	8013120 <USBD_StdEPReq+0x318>
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	f000 809b 	beq.w	8012fd2 <USBD_StdEPReq+0x1ca>
 8012e9c:	2b01      	cmp	r3, #1
 8012e9e:	d03c      	beq.n	8012f1a <USBD_StdEPReq+0x112>
 8012ea0:	e13e      	b.n	8013120 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	2b02      	cmp	r3, #2
 8012eac:	d002      	beq.n	8012eb4 <USBD_StdEPReq+0xac>
 8012eae:	2b03      	cmp	r3, #3
 8012eb0:	d016      	beq.n	8012ee0 <USBD_StdEPReq+0xd8>
 8012eb2:	e02c      	b.n	8012f0e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012eb4:	7bbb      	ldrb	r3, [r7, #14]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d00d      	beq.n	8012ed6 <USBD_StdEPReq+0xce>
 8012eba:	7bbb      	ldrb	r3, [r7, #14]
 8012ebc:	2b80      	cmp	r3, #128	@ 0x80
 8012ebe:	d00a      	beq.n	8012ed6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012ec0:	7bbb      	ldrb	r3, [r7, #14]
 8012ec2:	4619      	mov	r1, r3
 8012ec4:	6878      	ldr	r0, [r7, #4]
 8012ec6:	f004 fb29 	bl	801751c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012eca:	2180      	movs	r1, #128	@ 0x80
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f004 fb25 	bl	801751c <USBD_LL_StallEP>
 8012ed2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012ed4:	e020      	b.n	8012f18 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8012ed6:	6839      	ldr	r1, [r7, #0]
 8012ed8:	6878      	ldr	r0, [r7, #4]
 8012eda:	f000 fc7a 	bl	80137d2 <USBD_CtlError>
              break;
 8012ede:	e01b      	b.n	8012f18 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012ee0:	683b      	ldr	r3, [r7, #0]
 8012ee2:	885b      	ldrh	r3, [r3, #2]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d10e      	bne.n	8012f06 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8012ee8:	7bbb      	ldrb	r3, [r7, #14]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d00b      	beq.n	8012f06 <USBD_StdEPReq+0xfe>
 8012eee:	7bbb      	ldrb	r3, [r7, #14]
 8012ef0:	2b80      	cmp	r3, #128	@ 0x80
 8012ef2:	d008      	beq.n	8012f06 <USBD_StdEPReq+0xfe>
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	88db      	ldrh	r3, [r3, #6]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d104      	bne.n	8012f06 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8012efc:	7bbb      	ldrb	r3, [r7, #14]
 8012efe:	4619      	mov	r1, r3
 8012f00:	6878      	ldr	r0, [r7, #4]
 8012f02:	f004 fb0b 	bl	801751c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f000 fd3a 	bl	8013980 <USBD_CtlSendStatus>

              break;
 8012f0c:	e004      	b.n	8012f18 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8012f0e:	6839      	ldr	r1, [r7, #0]
 8012f10:	6878      	ldr	r0, [r7, #4]
 8012f12:	f000 fc5e 	bl	80137d2 <USBD_CtlError>
              break;
 8012f16:	bf00      	nop
          }
          break;
 8012f18:	e107      	b.n	801312a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012f20:	b2db      	uxtb	r3, r3
 8012f22:	2b02      	cmp	r3, #2
 8012f24:	d002      	beq.n	8012f2c <USBD_StdEPReq+0x124>
 8012f26:	2b03      	cmp	r3, #3
 8012f28:	d016      	beq.n	8012f58 <USBD_StdEPReq+0x150>
 8012f2a:	e04b      	b.n	8012fc4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012f2c:	7bbb      	ldrb	r3, [r7, #14]
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	d00d      	beq.n	8012f4e <USBD_StdEPReq+0x146>
 8012f32:	7bbb      	ldrb	r3, [r7, #14]
 8012f34:	2b80      	cmp	r3, #128	@ 0x80
 8012f36:	d00a      	beq.n	8012f4e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012f38:	7bbb      	ldrb	r3, [r7, #14]
 8012f3a:	4619      	mov	r1, r3
 8012f3c:	6878      	ldr	r0, [r7, #4]
 8012f3e:	f004 faed 	bl	801751c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012f42:	2180      	movs	r1, #128	@ 0x80
 8012f44:	6878      	ldr	r0, [r7, #4]
 8012f46:	f004 fae9 	bl	801751c <USBD_LL_StallEP>
 8012f4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012f4c:	e040      	b.n	8012fd0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012f4e:	6839      	ldr	r1, [r7, #0]
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f000 fc3e 	bl	80137d2 <USBD_CtlError>
              break;
 8012f56:	e03b      	b.n	8012fd0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012f58:	683b      	ldr	r3, [r7, #0]
 8012f5a:	885b      	ldrh	r3, [r3, #2]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d136      	bne.n	8012fce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012f60:	7bbb      	ldrb	r3, [r7, #14]
 8012f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d004      	beq.n	8012f74 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012f6a:	7bbb      	ldrb	r3, [r7, #14]
 8012f6c:	4619      	mov	r1, r3
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f004 faf3 	bl	801755a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f000 fd03 	bl	8013980 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012f7a:	7bbb      	ldrb	r3, [r7, #14]
 8012f7c:	4619      	mov	r1, r3
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f7ff fde4 	bl	8012b4c <USBD_CoreFindEP>
 8012f84:	4603      	mov	r3, r0
 8012f86:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012f88:	7b7b      	ldrb	r3, [r7, #13]
 8012f8a:	2bff      	cmp	r3, #255	@ 0xff
 8012f8c:	d01f      	beq.n	8012fce <USBD_StdEPReq+0x1c6>
 8012f8e:	7b7b      	ldrb	r3, [r7, #13]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d11c      	bne.n	8012fce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8012f94:	7b7a      	ldrb	r2, [r7, #13]
 8012f96:	687b      	ldr	r3, [r7, #4]
 8012f98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012f9c:	7b7a      	ldrb	r2, [r7, #13]
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	32ae      	adds	r2, #174	@ 0xae
 8012fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fa6:	689b      	ldr	r3, [r3, #8]
 8012fa8:	2b00      	cmp	r3, #0
 8012faa:	d010      	beq.n	8012fce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012fac:	7b7a      	ldrb	r2, [r7, #13]
 8012fae:	687b      	ldr	r3, [r7, #4]
 8012fb0:	32ae      	adds	r2, #174	@ 0xae
 8012fb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012fb6:	689b      	ldr	r3, [r3, #8]
 8012fb8:	6839      	ldr	r1, [r7, #0]
 8012fba:	6878      	ldr	r0, [r7, #4]
 8012fbc:	4798      	blx	r3
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8012fc2:	e004      	b.n	8012fce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8012fc4:	6839      	ldr	r1, [r7, #0]
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	f000 fc03 	bl	80137d2 <USBD_CtlError>
              break;
 8012fcc:	e000      	b.n	8012fd0 <USBD_StdEPReq+0x1c8>
              break;
 8012fce:	bf00      	nop
          }
          break;
 8012fd0:	e0ab      	b.n	801312a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012fd8:	b2db      	uxtb	r3, r3
 8012fda:	2b02      	cmp	r3, #2
 8012fdc:	d002      	beq.n	8012fe4 <USBD_StdEPReq+0x1dc>
 8012fde:	2b03      	cmp	r3, #3
 8012fe0:	d032      	beq.n	8013048 <USBD_StdEPReq+0x240>
 8012fe2:	e097      	b.n	8013114 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8012fe4:	7bbb      	ldrb	r3, [r7, #14]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d007      	beq.n	8012ffa <USBD_StdEPReq+0x1f2>
 8012fea:	7bbb      	ldrb	r3, [r7, #14]
 8012fec:	2b80      	cmp	r3, #128	@ 0x80
 8012fee:	d004      	beq.n	8012ffa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8012ff0:	6839      	ldr	r1, [r7, #0]
 8012ff2:	6878      	ldr	r0, [r7, #4]
 8012ff4:	f000 fbed 	bl	80137d2 <USBD_CtlError>
                break;
 8012ff8:	e091      	b.n	801311e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012ffa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	da0b      	bge.n	801301a <USBD_StdEPReq+0x212>
 8013002:	7bbb      	ldrb	r3, [r7, #14]
 8013004:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013008:	4613      	mov	r3, r2
 801300a:	009b      	lsls	r3, r3, #2
 801300c:	4413      	add	r3, r2
 801300e:	009b      	lsls	r3, r3, #2
 8013010:	3310      	adds	r3, #16
 8013012:	687a      	ldr	r2, [r7, #4]
 8013014:	4413      	add	r3, r2
 8013016:	3304      	adds	r3, #4
 8013018:	e00b      	b.n	8013032 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801301a:	7bbb      	ldrb	r3, [r7, #14]
 801301c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013020:	4613      	mov	r3, r2
 8013022:	009b      	lsls	r3, r3, #2
 8013024:	4413      	add	r3, r2
 8013026:	009b      	lsls	r3, r3, #2
 8013028:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801302c:	687a      	ldr	r2, [r7, #4]
 801302e:	4413      	add	r3, r2
 8013030:	3304      	adds	r3, #4
 8013032:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	2200      	movs	r2, #0
 8013038:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	2202      	movs	r2, #2
 801303e:	4619      	mov	r1, r3
 8013040:	6878      	ldr	r0, [r7, #4]
 8013042:	f000 fc43 	bl	80138cc <USBD_CtlSendData>
              break;
 8013046:	e06a      	b.n	801311e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801304c:	2b00      	cmp	r3, #0
 801304e:	da11      	bge.n	8013074 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013050:	7bbb      	ldrb	r3, [r7, #14]
 8013052:	f003 020f 	and.w	r2, r3, #15
 8013056:	6879      	ldr	r1, [r7, #4]
 8013058:	4613      	mov	r3, r2
 801305a:	009b      	lsls	r3, r3, #2
 801305c:	4413      	add	r3, r2
 801305e:	009b      	lsls	r3, r3, #2
 8013060:	440b      	add	r3, r1
 8013062:	3324      	adds	r3, #36	@ 0x24
 8013064:	881b      	ldrh	r3, [r3, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d117      	bne.n	801309a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801306a:	6839      	ldr	r1, [r7, #0]
 801306c:	6878      	ldr	r0, [r7, #4]
 801306e:	f000 fbb0 	bl	80137d2 <USBD_CtlError>
                  break;
 8013072:	e054      	b.n	801311e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013074:	7bbb      	ldrb	r3, [r7, #14]
 8013076:	f003 020f 	and.w	r2, r3, #15
 801307a:	6879      	ldr	r1, [r7, #4]
 801307c:	4613      	mov	r3, r2
 801307e:	009b      	lsls	r3, r3, #2
 8013080:	4413      	add	r3, r2
 8013082:	009b      	lsls	r3, r3, #2
 8013084:	440b      	add	r3, r1
 8013086:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801308a:	881b      	ldrh	r3, [r3, #0]
 801308c:	2b00      	cmp	r3, #0
 801308e:	d104      	bne.n	801309a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013090:	6839      	ldr	r1, [r7, #0]
 8013092:	6878      	ldr	r0, [r7, #4]
 8013094:	f000 fb9d 	bl	80137d2 <USBD_CtlError>
                  break;
 8013098:	e041      	b.n	801311e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801309a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	da0b      	bge.n	80130ba <USBD_StdEPReq+0x2b2>
 80130a2:	7bbb      	ldrb	r3, [r7, #14]
 80130a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80130a8:	4613      	mov	r3, r2
 80130aa:	009b      	lsls	r3, r3, #2
 80130ac:	4413      	add	r3, r2
 80130ae:	009b      	lsls	r3, r3, #2
 80130b0:	3310      	adds	r3, #16
 80130b2:	687a      	ldr	r2, [r7, #4]
 80130b4:	4413      	add	r3, r2
 80130b6:	3304      	adds	r3, #4
 80130b8:	e00b      	b.n	80130d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80130ba:	7bbb      	ldrb	r3, [r7, #14]
 80130bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80130c0:	4613      	mov	r3, r2
 80130c2:	009b      	lsls	r3, r3, #2
 80130c4:	4413      	add	r3, r2
 80130c6:	009b      	lsls	r3, r3, #2
 80130c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80130cc:	687a      	ldr	r2, [r7, #4]
 80130ce:	4413      	add	r3, r2
 80130d0:	3304      	adds	r3, #4
 80130d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80130d4:	7bbb      	ldrb	r3, [r7, #14]
 80130d6:	2b00      	cmp	r3, #0
 80130d8:	d002      	beq.n	80130e0 <USBD_StdEPReq+0x2d8>
 80130da:	7bbb      	ldrb	r3, [r7, #14]
 80130dc:	2b80      	cmp	r3, #128	@ 0x80
 80130de:	d103      	bne.n	80130e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	2200      	movs	r2, #0
 80130e4:	601a      	str	r2, [r3, #0]
 80130e6:	e00e      	b.n	8013106 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80130e8:	7bbb      	ldrb	r3, [r7, #14]
 80130ea:	4619      	mov	r1, r3
 80130ec:	6878      	ldr	r0, [r7, #4]
 80130ee:	f004 fa53 	bl	8017598 <USBD_LL_IsStallEP>
 80130f2:	4603      	mov	r3, r0
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d003      	beq.n	8013100 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80130f8:	68bb      	ldr	r3, [r7, #8]
 80130fa:	2201      	movs	r2, #1
 80130fc:	601a      	str	r2, [r3, #0]
 80130fe:	e002      	b.n	8013106 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013100:	68bb      	ldr	r3, [r7, #8]
 8013102:	2200      	movs	r2, #0
 8013104:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	2202      	movs	r2, #2
 801310a:	4619      	mov	r1, r3
 801310c:	6878      	ldr	r0, [r7, #4]
 801310e:	f000 fbdd 	bl	80138cc <USBD_CtlSendData>
              break;
 8013112:	e004      	b.n	801311e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013114:	6839      	ldr	r1, [r7, #0]
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f000 fb5b 	bl	80137d2 <USBD_CtlError>
              break;
 801311c:	bf00      	nop
          }
          break;
 801311e:	e004      	b.n	801312a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013120:	6839      	ldr	r1, [r7, #0]
 8013122:	6878      	ldr	r0, [r7, #4]
 8013124:	f000 fb55 	bl	80137d2 <USBD_CtlError>
          break;
 8013128:	bf00      	nop
      }
      break;
 801312a:	e005      	b.n	8013138 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801312c:	6839      	ldr	r1, [r7, #0]
 801312e:	6878      	ldr	r0, [r7, #4]
 8013130:	f000 fb4f 	bl	80137d2 <USBD_CtlError>
      break;
 8013134:	e000      	b.n	8013138 <USBD_StdEPReq+0x330>
      break;
 8013136:	bf00      	nop
  }

  return ret;
 8013138:	7bfb      	ldrb	r3, [r7, #15]
}
 801313a:	4618      	mov	r0, r3
 801313c:	3710      	adds	r7, #16
 801313e:	46bd      	mov	sp, r7
 8013140:	bd80      	pop	{r7, pc}
	...

08013144 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013144:	b580      	push	{r7, lr}
 8013146:	b084      	sub	sp, #16
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
 801314c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801314e:	2300      	movs	r3, #0
 8013150:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013152:	2300      	movs	r3, #0
 8013154:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013156:	2300      	movs	r3, #0
 8013158:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	885b      	ldrh	r3, [r3, #2]
 801315e:	0a1b      	lsrs	r3, r3, #8
 8013160:	b29b      	uxth	r3, r3
 8013162:	3b01      	subs	r3, #1
 8013164:	2b06      	cmp	r3, #6
 8013166:	f200 8128 	bhi.w	80133ba <USBD_GetDescriptor+0x276>
 801316a:	a201      	add	r2, pc, #4	@ (adr r2, 8013170 <USBD_GetDescriptor+0x2c>)
 801316c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013170:	0801318d 	.word	0x0801318d
 8013174:	080131a5 	.word	0x080131a5
 8013178:	080131e5 	.word	0x080131e5
 801317c:	080133bb 	.word	0x080133bb
 8013180:	080133bb 	.word	0x080133bb
 8013184:	0801335b 	.word	0x0801335b
 8013188:	08013387 	.word	0x08013387
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013192:	681b      	ldr	r3, [r3, #0]
 8013194:	687a      	ldr	r2, [r7, #4]
 8013196:	7c12      	ldrb	r2, [r2, #16]
 8013198:	f107 0108 	add.w	r1, r7, #8
 801319c:	4610      	mov	r0, r2
 801319e:	4798      	blx	r3
 80131a0:	60f8      	str	r0, [r7, #12]
      break;
 80131a2:	e112      	b.n	80133ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	7c1b      	ldrb	r3, [r3, #16]
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d10d      	bne.n	80131c8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80131b4:	f107 0208 	add.w	r2, r7, #8
 80131b8:	4610      	mov	r0, r2
 80131ba:	4798      	blx	r3
 80131bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	3301      	adds	r3, #1
 80131c2:	2202      	movs	r2, #2
 80131c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80131c6:	e100      	b.n	80133ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131d0:	f107 0208 	add.w	r2, r7, #8
 80131d4:	4610      	mov	r0, r2
 80131d6:	4798      	blx	r3
 80131d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	3301      	adds	r3, #1
 80131de:	2202      	movs	r2, #2
 80131e0:	701a      	strb	r2, [r3, #0]
      break;
 80131e2:	e0f2      	b.n	80133ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	885b      	ldrh	r3, [r3, #2]
 80131e8:	b2db      	uxtb	r3, r3
 80131ea:	2b05      	cmp	r3, #5
 80131ec:	f200 80ac 	bhi.w	8013348 <USBD_GetDescriptor+0x204>
 80131f0:	a201      	add	r2, pc, #4	@ (adr r2, 80131f8 <USBD_GetDescriptor+0xb4>)
 80131f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80131f6:	bf00      	nop
 80131f8:	08013211 	.word	0x08013211
 80131fc:	08013245 	.word	0x08013245
 8013200:	08013279 	.word	0x08013279
 8013204:	080132ad 	.word	0x080132ad
 8013208:	080132e1 	.word	0x080132e1
 801320c:	08013315 	.word	0x08013315
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013210:	687b      	ldr	r3, [r7, #4]
 8013212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013216:	685b      	ldr	r3, [r3, #4]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d00b      	beq.n	8013234 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	687a      	ldr	r2, [r7, #4]
 8013226:	7c12      	ldrb	r2, [r2, #16]
 8013228:	f107 0108 	add.w	r1, r7, #8
 801322c:	4610      	mov	r0, r2
 801322e:	4798      	blx	r3
 8013230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013232:	e091      	b.n	8013358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013234:	6839      	ldr	r1, [r7, #0]
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f000 facb 	bl	80137d2 <USBD_CtlError>
            err++;
 801323c:	7afb      	ldrb	r3, [r7, #11]
 801323e:	3301      	adds	r3, #1
 8013240:	72fb      	strb	r3, [r7, #11]
          break;
 8013242:	e089      	b.n	8013358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801324a:	689b      	ldr	r3, [r3, #8]
 801324c:	2b00      	cmp	r3, #0
 801324e:	d00b      	beq.n	8013268 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013256:	689b      	ldr	r3, [r3, #8]
 8013258:	687a      	ldr	r2, [r7, #4]
 801325a:	7c12      	ldrb	r2, [r2, #16]
 801325c:	f107 0108 	add.w	r1, r7, #8
 8013260:	4610      	mov	r0, r2
 8013262:	4798      	blx	r3
 8013264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013266:	e077      	b.n	8013358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013268:	6839      	ldr	r1, [r7, #0]
 801326a:	6878      	ldr	r0, [r7, #4]
 801326c:	f000 fab1 	bl	80137d2 <USBD_CtlError>
            err++;
 8013270:	7afb      	ldrb	r3, [r7, #11]
 8013272:	3301      	adds	r3, #1
 8013274:	72fb      	strb	r3, [r7, #11]
          break;
 8013276:	e06f      	b.n	8013358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801327e:	68db      	ldr	r3, [r3, #12]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d00b      	beq.n	801329c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013284:	687b      	ldr	r3, [r7, #4]
 8013286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801328a:	68db      	ldr	r3, [r3, #12]
 801328c:	687a      	ldr	r2, [r7, #4]
 801328e:	7c12      	ldrb	r2, [r2, #16]
 8013290:	f107 0108 	add.w	r1, r7, #8
 8013294:	4610      	mov	r0, r2
 8013296:	4798      	blx	r3
 8013298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801329a:	e05d      	b.n	8013358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 801329c:	6839      	ldr	r1, [r7, #0]
 801329e:	6878      	ldr	r0, [r7, #4]
 80132a0:	f000 fa97 	bl	80137d2 <USBD_CtlError>
            err++;
 80132a4:	7afb      	ldrb	r3, [r7, #11]
 80132a6:	3301      	adds	r3, #1
 80132a8:	72fb      	strb	r3, [r7, #11]
          break;
 80132aa:	e055      	b.n	8013358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132b2:	691b      	ldr	r3, [r3, #16]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d00b      	beq.n	80132d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132be:	691b      	ldr	r3, [r3, #16]
 80132c0:	687a      	ldr	r2, [r7, #4]
 80132c2:	7c12      	ldrb	r2, [r2, #16]
 80132c4:	f107 0108 	add.w	r1, r7, #8
 80132c8:	4610      	mov	r0, r2
 80132ca:	4798      	blx	r3
 80132cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80132ce:	e043      	b.n	8013358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80132d0:	6839      	ldr	r1, [r7, #0]
 80132d2:	6878      	ldr	r0, [r7, #4]
 80132d4:	f000 fa7d 	bl	80137d2 <USBD_CtlError>
            err++;
 80132d8:	7afb      	ldrb	r3, [r7, #11]
 80132da:	3301      	adds	r3, #1
 80132dc:	72fb      	strb	r3, [r7, #11]
          break;
 80132de:	e03b      	b.n	8013358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132e6:	695b      	ldr	r3, [r3, #20]
 80132e8:	2b00      	cmp	r3, #0
 80132ea:	d00b      	beq.n	8013304 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80132f2:	695b      	ldr	r3, [r3, #20]
 80132f4:	687a      	ldr	r2, [r7, #4]
 80132f6:	7c12      	ldrb	r2, [r2, #16]
 80132f8:	f107 0108 	add.w	r1, r7, #8
 80132fc:	4610      	mov	r0, r2
 80132fe:	4798      	blx	r3
 8013300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013302:	e029      	b.n	8013358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013304:	6839      	ldr	r1, [r7, #0]
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f000 fa63 	bl	80137d2 <USBD_CtlError>
            err++;
 801330c:	7afb      	ldrb	r3, [r7, #11]
 801330e:	3301      	adds	r3, #1
 8013310:	72fb      	strb	r3, [r7, #11]
          break;
 8013312:	e021      	b.n	8013358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801331a:	699b      	ldr	r3, [r3, #24]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d00b      	beq.n	8013338 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013326:	699b      	ldr	r3, [r3, #24]
 8013328:	687a      	ldr	r2, [r7, #4]
 801332a:	7c12      	ldrb	r2, [r2, #16]
 801332c:	f107 0108 	add.w	r1, r7, #8
 8013330:	4610      	mov	r0, r2
 8013332:	4798      	blx	r3
 8013334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013336:	e00f      	b.n	8013358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013338:	6839      	ldr	r1, [r7, #0]
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f000 fa49 	bl	80137d2 <USBD_CtlError>
            err++;
 8013340:	7afb      	ldrb	r3, [r7, #11]
 8013342:	3301      	adds	r3, #1
 8013344:	72fb      	strb	r3, [r7, #11]
          break;
 8013346:	e007      	b.n	8013358 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013348:	6839      	ldr	r1, [r7, #0]
 801334a:	6878      	ldr	r0, [r7, #4]
 801334c:	f000 fa41 	bl	80137d2 <USBD_CtlError>
          err++;
 8013350:	7afb      	ldrb	r3, [r7, #11]
 8013352:	3301      	adds	r3, #1
 8013354:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013356:	bf00      	nop
      }
      break;
 8013358:	e037      	b.n	80133ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	7c1b      	ldrb	r3, [r3, #16]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d109      	bne.n	8013376 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801336a:	f107 0208 	add.w	r2, r7, #8
 801336e:	4610      	mov	r0, r2
 8013370:	4798      	blx	r3
 8013372:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013374:	e029      	b.n	80133ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013376:	6839      	ldr	r1, [r7, #0]
 8013378:	6878      	ldr	r0, [r7, #4]
 801337a:	f000 fa2a 	bl	80137d2 <USBD_CtlError>
        err++;
 801337e:	7afb      	ldrb	r3, [r7, #11]
 8013380:	3301      	adds	r3, #1
 8013382:	72fb      	strb	r3, [r7, #11]
      break;
 8013384:	e021      	b.n	80133ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	7c1b      	ldrb	r3, [r3, #16]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d10d      	bne.n	80133aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013396:	f107 0208 	add.w	r2, r7, #8
 801339a:	4610      	mov	r0, r2
 801339c:	4798      	blx	r3
 801339e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	3301      	adds	r3, #1
 80133a4:	2207      	movs	r2, #7
 80133a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80133a8:	e00f      	b.n	80133ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80133aa:	6839      	ldr	r1, [r7, #0]
 80133ac:	6878      	ldr	r0, [r7, #4]
 80133ae:	f000 fa10 	bl	80137d2 <USBD_CtlError>
        err++;
 80133b2:	7afb      	ldrb	r3, [r7, #11]
 80133b4:	3301      	adds	r3, #1
 80133b6:	72fb      	strb	r3, [r7, #11]
      break;
 80133b8:	e007      	b.n	80133ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80133ba:	6839      	ldr	r1, [r7, #0]
 80133bc:	6878      	ldr	r0, [r7, #4]
 80133be:	f000 fa08 	bl	80137d2 <USBD_CtlError>
      err++;
 80133c2:	7afb      	ldrb	r3, [r7, #11]
 80133c4:	3301      	adds	r3, #1
 80133c6:	72fb      	strb	r3, [r7, #11]
      break;
 80133c8:	bf00      	nop
  }

  if (err != 0U)
 80133ca:	7afb      	ldrb	r3, [r7, #11]
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d11e      	bne.n	801340e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	88db      	ldrh	r3, [r3, #6]
 80133d4:	2b00      	cmp	r3, #0
 80133d6:	d016      	beq.n	8013406 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80133d8:	893b      	ldrh	r3, [r7, #8]
 80133da:	2b00      	cmp	r3, #0
 80133dc:	d00e      	beq.n	80133fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80133de:	683b      	ldr	r3, [r7, #0]
 80133e0:	88da      	ldrh	r2, [r3, #6]
 80133e2:	893b      	ldrh	r3, [r7, #8]
 80133e4:	4293      	cmp	r3, r2
 80133e6:	bf28      	it	cs
 80133e8:	4613      	movcs	r3, r2
 80133ea:	b29b      	uxth	r3, r3
 80133ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80133ee:	893b      	ldrh	r3, [r7, #8]
 80133f0:	461a      	mov	r2, r3
 80133f2:	68f9      	ldr	r1, [r7, #12]
 80133f4:	6878      	ldr	r0, [r7, #4]
 80133f6:	f000 fa69 	bl	80138cc <USBD_CtlSendData>
 80133fa:	e009      	b.n	8013410 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80133fc:	6839      	ldr	r1, [r7, #0]
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f000 f9e7 	bl	80137d2 <USBD_CtlError>
 8013404:	e004      	b.n	8013410 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013406:	6878      	ldr	r0, [r7, #4]
 8013408:	f000 faba 	bl	8013980 <USBD_CtlSendStatus>
 801340c:	e000      	b.n	8013410 <USBD_GetDescriptor+0x2cc>
    return;
 801340e:	bf00      	nop
  }
}
 8013410:	3710      	adds	r7, #16
 8013412:	46bd      	mov	sp, r7
 8013414:	bd80      	pop	{r7, pc}
 8013416:	bf00      	nop

08013418 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013418:	b580      	push	{r7, lr}
 801341a:	b084      	sub	sp, #16
 801341c:	af00      	add	r7, sp, #0
 801341e:	6078      	str	r0, [r7, #4]
 8013420:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8013422:	683b      	ldr	r3, [r7, #0]
 8013424:	889b      	ldrh	r3, [r3, #4]
 8013426:	2b00      	cmp	r3, #0
 8013428:	d131      	bne.n	801348e <USBD_SetAddress+0x76>
 801342a:	683b      	ldr	r3, [r7, #0]
 801342c:	88db      	ldrh	r3, [r3, #6]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d12d      	bne.n	801348e <USBD_SetAddress+0x76>
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	885b      	ldrh	r3, [r3, #2]
 8013436:	2b7f      	cmp	r3, #127	@ 0x7f
 8013438:	d829      	bhi.n	801348e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801343a:	683b      	ldr	r3, [r7, #0]
 801343c:	885b      	ldrh	r3, [r3, #2]
 801343e:	b2db      	uxtb	r3, r3
 8013440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013444:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801344c:	b2db      	uxtb	r3, r3
 801344e:	2b03      	cmp	r3, #3
 8013450:	d104      	bne.n	801345c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8013452:	6839      	ldr	r1, [r7, #0]
 8013454:	6878      	ldr	r0, [r7, #4]
 8013456:	f000 f9bc 	bl	80137d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801345a:	e01d      	b.n	8013498 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	7bfa      	ldrb	r2, [r7, #15]
 8013460:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013464:	7bfb      	ldrb	r3, [r7, #15]
 8013466:	4619      	mov	r1, r3
 8013468:	6878      	ldr	r0, [r7, #4]
 801346a:	f004 f8c1 	bl	80175f0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801346e:	6878      	ldr	r0, [r7, #4]
 8013470:	f000 fa86 	bl	8013980 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013474:	7bfb      	ldrb	r3, [r7, #15]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d004      	beq.n	8013484 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	2202      	movs	r2, #2
 801347e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013482:	e009      	b.n	8013498 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	2201      	movs	r2, #1
 8013488:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801348c:	e004      	b.n	8013498 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801348e:	6839      	ldr	r1, [r7, #0]
 8013490:	6878      	ldr	r0, [r7, #4]
 8013492:	f000 f99e 	bl	80137d2 <USBD_CtlError>
  }
}
 8013496:	bf00      	nop
 8013498:	bf00      	nop
 801349a:	3710      	adds	r7, #16
 801349c:	46bd      	mov	sp, r7
 801349e:	bd80      	pop	{r7, pc}

080134a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80134a0:	b580      	push	{r7, lr}
 80134a2:	b084      	sub	sp, #16
 80134a4:	af00      	add	r7, sp, #0
 80134a6:	6078      	str	r0, [r7, #4]
 80134a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80134aa:	2300      	movs	r3, #0
 80134ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80134ae:	683b      	ldr	r3, [r7, #0]
 80134b0:	885b      	ldrh	r3, [r3, #2]
 80134b2:	b2da      	uxtb	r2, r3
 80134b4:	4b4e      	ldr	r3, [pc, #312]	@ (80135f0 <USBD_SetConfig+0x150>)
 80134b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80134b8:	4b4d      	ldr	r3, [pc, #308]	@ (80135f0 <USBD_SetConfig+0x150>)
 80134ba:	781b      	ldrb	r3, [r3, #0]
 80134bc:	2b01      	cmp	r3, #1
 80134be:	d905      	bls.n	80134cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80134c0:	6839      	ldr	r1, [r7, #0]
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f000 f985 	bl	80137d2 <USBD_CtlError>
    return USBD_FAIL;
 80134c8:	2303      	movs	r3, #3
 80134ca:	e08c      	b.n	80135e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134d2:	b2db      	uxtb	r3, r3
 80134d4:	2b02      	cmp	r3, #2
 80134d6:	d002      	beq.n	80134de <USBD_SetConfig+0x3e>
 80134d8:	2b03      	cmp	r3, #3
 80134da:	d029      	beq.n	8013530 <USBD_SetConfig+0x90>
 80134dc:	e075      	b.n	80135ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80134de:	4b44      	ldr	r3, [pc, #272]	@ (80135f0 <USBD_SetConfig+0x150>)
 80134e0:	781b      	ldrb	r3, [r3, #0]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d020      	beq.n	8013528 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80134e6:	4b42      	ldr	r3, [pc, #264]	@ (80135f0 <USBD_SetConfig+0x150>)
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	461a      	mov	r2, r3
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80134f0:	4b3f      	ldr	r3, [pc, #252]	@ (80135f0 <USBD_SetConfig+0x150>)
 80134f2:	781b      	ldrb	r3, [r3, #0]
 80134f4:	4619      	mov	r1, r3
 80134f6:	6878      	ldr	r0, [r7, #4]
 80134f8:	f7fe ffe3 	bl	80124c2 <USBD_SetClassConfig>
 80134fc:	4603      	mov	r3, r0
 80134fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8013500:	7bfb      	ldrb	r3, [r7, #15]
 8013502:	2b00      	cmp	r3, #0
 8013504:	d008      	beq.n	8013518 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013506:	6839      	ldr	r1, [r7, #0]
 8013508:	6878      	ldr	r0, [r7, #4]
 801350a:	f000 f962 	bl	80137d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	2202      	movs	r2, #2
 8013512:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013516:	e065      	b.n	80135e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f000 fa31 	bl	8013980 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	2203      	movs	r2, #3
 8013522:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013526:	e05d      	b.n	80135e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013528:	6878      	ldr	r0, [r7, #4]
 801352a:	f000 fa29 	bl	8013980 <USBD_CtlSendStatus>
      break;
 801352e:	e059      	b.n	80135e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8013530:	4b2f      	ldr	r3, [pc, #188]	@ (80135f0 <USBD_SetConfig+0x150>)
 8013532:	781b      	ldrb	r3, [r3, #0]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d112      	bne.n	801355e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013538:	687b      	ldr	r3, [r7, #4]
 801353a:	2202      	movs	r2, #2
 801353c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8013540:	4b2b      	ldr	r3, [pc, #172]	@ (80135f0 <USBD_SetConfig+0x150>)
 8013542:	781b      	ldrb	r3, [r3, #0]
 8013544:	461a      	mov	r2, r3
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801354a:	4b29      	ldr	r3, [pc, #164]	@ (80135f0 <USBD_SetConfig+0x150>)
 801354c:	781b      	ldrb	r3, [r3, #0]
 801354e:	4619      	mov	r1, r3
 8013550:	6878      	ldr	r0, [r7, #4]
 8013552:	f7fe ffd2 	bl	80124fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013556:	6878      	ldr	r0, [r7, #4]
 8013558:	f000 fa12 	bl	8013980 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 801355c:	e042      	b.n	80135e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801355e:	4b24      	ldr	r3, [pc, #144]	@ (80135f0 <USBD_SetConfig+0x150>)
 8013560:	781b      	ldrb	r3, [r3, #0]
 8013562:	461a      	mov	r2, r3
 8013564:	687b      	ldr	r3, [r7, #4]
 8013566:	685b      	ldr	r3, [r3, #4]
 8013568:	429a      	cmp	r2, r3
 801356a:	d02a      	beq.n	80135c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	685b      	ldr	r3, [r3, #4]
 8013570:	b2db      	uxtb	r3, r3
 8013572:	4619      	mov	r1, r3
 8013574:	6878      	ldr	r0, [r7, #4]
 8013576:	f7fe ffc0 	bl	80124fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801357a:	4b1d      	ldr	r3, [pc, #116]	@ (80135f0 <USBD_SetConfig+0x150>)
 801357c:	781b      	ldrb	r3, [r3, #0]
 801357e:	461a      	mov	r2, r3
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013584:	4b1a      	ldr	r3, [pc, #104]	@ (80135f0 <USBD_SetConfig+0x150>)
 8013586:	781b      	ldrb	r3, [r3, #0]
 8013588:	4619      	mov	r1, r3
 801358a:	6878      	ldr	r0, [r7, #4]
 801358c:	f7fe ff99 	bl	80124c2 <USBD_SetClassConfig>
 8013590:	4603      	mov	r3, r0
 8013592:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8013594:	7bfb      	ldrb	r3, [r7, #15]
 8013596:	2b00      	cmp	r3, #0
 8013598:	d00f      	beq.n	80135ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801359a:	6839      	ldr	r1, [r7, #0]
 801359c:	6878      	ldr	r0, [r7, #4]
 801359e:	f000 f918 	bl	80137d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80135a2:	687b      	ldr	r3, [r7, #4]
 80135a4:	685b      	ldr	r3, [r3, #4]
 80135a6:	b2db      	uxtb	r3, r3
 80135a8:	4619      	mov	r1, r3
 80135aa:	6878      	ldr	r0, [r7, #4]
 80135ac:	f7fe ffa5 	bl	80124fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	2202      	movs	r2, #2
 80135b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80135b8:	e014      	b.n	80135e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80135ba:	6878      	ldr	r0, [r7, #4]
 80135bc:	f000 f9e0 	bl	8013980 <USBD_CtlSendStatus>
      break;
 80135c0:	e010      	b.n	80135e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80135c2:	6878      	ldr	r0, [r7, #4]
 80135c4:	f000 f9dc 	bl	8013980 <USBD_CtlSendStatus>
      break;
 80135c8:	e00c      	b.n	80135e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80135ca:	6839      	ldr	r1, [r7, #0]
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f000 f900 	bl	80137d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80135d2:	4b07      	ldr	r3, [pc, #28]	@ (80135f0 <USBD_SetConfig+0x150>)
 80135d4:	781b      	ldrb	r3, [r3, #0]
 80135d6:	4619      	mov	r1, r3
 80135d8:	6878      	ldr	r0, [r7, #4]
 80135da:	f7fe ff8e 	bl	80124fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80135de:	2303      	movs	r3, #3
 80135e0:	73fb      	strb	r3, [r7, #15]
      break;
 80135e2:	bf00      	nop
  }

  return ret;
 80135e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80135e6:	4618      	mov	r0, r3
 80135e8:	3710      	adds	r7, #16
 80135ea:	46bd      	mov	sp, r7
 80135ec:	bd80      	pop	{r7, pc}
 80135ee:	bf00      	nop
 80135f0:	20003f98 	.word	0x20003f98

080135f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80135f4:	b580      	push	{r7, lr}
 80135f6:	b082      	sub	sp, #8
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80135fe:	683b      	ldr	r3, [r7, #0]
 8013600:	88db      	ldrh	r3, [r3, #6]
 8013602:	2b01      	cmp	r3, #1
 8013604:	d004      	beq.n	8013610 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013606:	6839      	ldr	r1, [r7, #0]
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f000 f8e2 	bl	80137d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801360e:	e023      	b.n	8013658 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013616:	b2db      	uxtb	r3, r3
 8013618:	2b02      	cmp	r3, #2
 801361a:	dc02      	bgt.n	8013622 <USBD_GetConfig+0x2e>
 801361c:	2b00      	cmp	r3, #0
 801361e:	dc03      	bgt.n	8013628 <USBD_GetConfig+0x34>
 8013620:	e015      	b.n	801364e <USBD_GetConfig+0x5a>
 8013622:	2b03      	cmp	r3, #3
 8013624:	d00b      	beq.n	801363e <USBD_GetConfig+0x4a>
 8013626:	e012      	b.n	801364e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	2200      	movs	r2, #0
 801362c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	3308      	adds	r3, #8
 8013632:	2201      	movs	r2, #1
 8013634:	4619      	mov	r1, r3
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f000 f948 	bl	80138cc <USBD_CtlSendData>
        break;
 801363c:	e00c      	b.n	8013658 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	3304      	adds	r3, #4
 8013642:	2201      	movs	r2, #1
 8013644:	4619      	mov	r1, r3
 8013646:	6878      	ldr	r0, [r7, #4]
 8013648:	f000 f940 	bl	80138cc <USBD_CtlSendData>
        break;
 801364c:	e004      	b.n	8013658 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801364e:	6839      	ldr	r1, [r7, #0]
 8013650:	6878      	ldr	r0, [r7, #4]
 8013652:	f000 f8be 	bl	80137d2 <USBD_CtlError>
        break;
 8013656:	bf00      	nop
}
 8013658:	bf00      	nop
 801365a:	3708      	adds	r7, #8
 801365c:	46bd      	mov	sp, r7
 801365e:	bd80      	pop	{r7, pc}

08013660 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b082      	sub	sp, #8
 8013664:	af00      	add	r7, sp, #0
 8013666:	6078      	str	r0, [r7, #4]
 8013668:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013670:	b2db      	uxtb	r3, r3
 8013672:	3b01      	subs	r3, #1
 8013674:	2b02      	cmp	r3, #2
 8013676:	d81e      	bhi.n	80136b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013678:	683b      	ldr	r3, [r7, #0]
 801367a:	88db      	ldrh	r3, [r3, #6]
 801367c:	2b02      	cmp	r3, #2
 801367e:	d004      	beq.n	801368a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013680:	6839      	ldr	r1, [r7, #0]
 8013682:	6878      	ldr	r0, [r7, #4]
 8013684:	f000 f8a5 	bl	80137d2 <USBD_CtlError>
        break;
 8013688:	e01a      	b.n	80136c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	2201      	movs	r2, #1
 801368e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013696:	2b00      	cmp	r3, #0
 8013698:	d005      	beq.n	80136a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	68db      	ldr	r3, [r3, #12]
 801369e:	f043 0202 	orr.w	r2, r3, #2
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	330c      	adds	r3, #12
 80136aa:	2202      	movs	r2, #2
 80136ac:	4619      	mov	r1, r3
 80136ae:	6878      	ldr	r0, [r7, #4]
 80136b0:	f000 f90c 	bl	80138cc <USBD_CtlSendData>
      break;
 80136b4:	e004      	b.n	80136c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80136b6:	6839      	ldr	r1, [r7, #0]
 80136b8:	6878      	ldr	r0, [r7, #4]
 80136ba:	f000 f88a 	bl	80137d2 <USBD_CtlError>
      break;
 80136be:	bf00      	nop
  }
}
 80136c0:	bf00      	nop
 80136c2:	3708      	adds	r7, #8
 80136c4:	46bd      	mov	sp, r7
 80136c6:	bd80      	pop	{r7, pc}

080136c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b082      	sub	sp, #8
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
 80136d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80136d2:	683b      	ldr	r3, [r7, #0]
 80136d4:	885b      	ldrh	r3, [r3, #2]
 80136d6:	2b01      	cmp	r3, #1
 80136d8:	d107      	bne.n	80136ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	2201      	movs	r2, #1
 80136de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80136e2:	6878      	ldr	r0, [r7, #4]
 80136e4:	f000 f94c 	bl	8013980 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80136e8:	e013      	b.n	8013712 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80136ea:	683b      	ldr	r3, [r7, #0]
 80136ec:	885b      	ldrh	r3, [r3, #2]
 80136ee:	2b02      	cmp	r3, #2
 80136f0:	d10b      	bne.n	801370a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80136f2:	683b      	ldr	r3, [r7, #0]
 80136f4:	889b      	ldrh	r3, [r3, #4]
 80136f6:	0a1b      	lsrs	r3, r3, #8
 80136f8:	b29b      	uxth	r3, r3
 80136fa:	b2da      	uxtb	r2, r3
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f000 f93c 	bl	8013980 <USBD_CtlSendStatus>
}
 8013708:	e003      	b.n	8013712 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801370a:	6839      	ldr	r1, [r7, #0]
 801370c:	6878      	ldr	r0, [r7, #4]
 801370e:	f000 f860 	bl	80137d2 <USBD_CtlError>
}
 8013712:	bf00      	nop
 8013714:	3708      	adds	r7, #8
 8013716:	46bd      	mov	sp, r7
 8013718:	bd80      	pop	{r7, pc}

0801371a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801371a:	b580      	push	{r7, lr}
 801371c:	b082      	sub	sp, #8
 801371e:	af00      	add	r7, sp, #0
 8013720:	6078      	str	r0, [r7, #4]
 8013722:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801372a:	b2db      	uxtb	r3, r3
 801372c:	3b01      	subs	r3, #1
 801372e:	2b02      	cmp	r3, #2
 8013730:	d80b      	bhi.n	801374a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013732:	683b      	ldr	r3, [r7, #0]
 8013734:	885b      	ldrh	r3, [r3, #2]
 8013736:	2b01      	cmp	r3, #1
 8013738:	d10c      	bne.n	8013754 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	2200      	movs	r2, #0
 801373e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	f000 f91c 	bl	8013980 <USBD_CtlSendStatus>
      }
      break;
 8013748:	e004      	b.n	8013754 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801374a:	6839      	ldr	r1, [r7, #0]
 801374c:	6878      	ldr	r0, [r7, #4]
 801374e:	f000 f840 	bl	80137d2 <USBD_CtlError>
      break;
 8013752:	e000      	b.n	8013756 <USBD_ClrFeature+0x3c>
      break;
 8013754:	bf00      	nop
  }
}
 8013756:	bf00      	nop
 8013758:	3708      	adds	r7, #8
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}

0801375e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 801375e:	b580      	push	{r7, lr}
 8013760:	b084      	sub	sp, #16
 8013762:	af00      	add	r7, sp, #0
 8013764:	6078      	str	r0, [r7, #4]
 8013766:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013768:	683b      	ldr	r3, [r7, #0]
 801376a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 801376c:	68fb      	ldr	r3, [r7, #12]
 801376e:	781a      	ldrb	r2, [r3, #0]
 8013770:	687b      	ldr	r3, [r7, #4]
 8013772:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013774:	68fb      	ldr	r3, [r7, #12]
 8013776:	3301      	adds	r3, #1
 8013778:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801377a:	68fb      	ldr	r3, [r7, #12]
 801377c:	781a      	ldrb	r2, [r3, #0]
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	3301      	adds	r3, #1
 8013786:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013788:	68f8      	ldr	r0, [r7, #12]
 801378a:	f7ff fa40 	bl	8012c0e <SWAPBYTE>
 801378e:	4603      	mov	r3, r0
 8013790:	461a      	mov	r2, r3
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013796:	68fb      	ldr	r3, [r7, #12]
 8013798:	3301      	adds	r3, #1
 801379a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801379c:	68fb      	ldr	r3, [r7, #12]
 801379e:	3301      	adds	r3, #1
 80137a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80137a2:	68f8      	ldr	r0, [r7, #12]
 80137a4:	f7ff fa33 	bl	8012c0e <SWAPBYTE>
 80137a8:	4603      	mov	r3, r0
 80137aa:	461a      	mov	r2, r3
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80137b0:	68fb      	ldr	r3, [r7, #12]
 80137b2:	3301      	adds	r3, #1
 80137b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80137b6:	68fb      	ldr	r3, [r7, #12]
 80137b8:	3301      	adds	r3, #1
 80137ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80137bc:	68f8      	ldr	r0, [r7, #12]
 80137be:	f7ff fa26 	bl	8012c0e <SWAPBYTE>
 80137c2:	4603      	mov	r3, r0
 80137c4:	461a      	mov	r2, r3
 80137c6:	687b      	ldr	r3, [r7, #4]
 80137c8:	80da      	strh	r2, [r3, #6]
}
 80137ca:	bf00      	nop
 80137cc:	3710      	adds	r7, #16
 80137ce:	46bd      	mov	sp, r7
 80137d0:	bd80      	pop	{r7, pc}

080137d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80137d2:	b580      	push	{r7, lr}
 80137d4:	b082      	sub	sp, #8
 80137d6:	af00      	add	r7, sp, #0
 80137d8:	6078      	str	r0, [r7, #4]
 80137da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80137dc:	2180      	movs	r1, #128	@ 0x80
 80137de:	6878      	ldr	r0, [r7, #4]
 80137e0:	f003 fe9c 	bl	801751c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80137e4:	2100      	movs	r1, #0
 80137e6:	6878      	ldr	r0, [r7, #4]
 80137e8:	f003 fe98 	bl	801751c <USBD_LL_StallEP>
}
 80137ec:	bf00      	nop
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b086      	sub	sp, #24
 80137f8:	af00      	add	r7, sp, #0
 80137fa:	60f8      	str	r0, [r7, #12]
 80137fc:	60b9      	str	r1, [r7, #8]
 80137fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013800:	2300      	movs	r3, #0
 8013802:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2b00      	cmp	r3, #0
 8013808:	d042      	beq.n	8013890 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801380a:	68fb      	ldr	r3, [r7, #12]
 801380c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 801380e:	6938      	ldr	r0, [r7, #16]
 8013810:	f000 f842 	bl	8013898 <USBD_GetLen>
 8013814:	4603      	mov	r3, r0
 8013816:	3301      	adds	r3, #1
 8013818:	005b      	lsls	r3, r3, #1
 801381a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801381e:	d808      	bhi.n	8013832 <USBD_GetString+0x3e>
 8013820:	6938      	ldr	r0, [r7, #16]
 8013822:	f000 f839 	bl	8013898 <USBD_GetLen>
 8013826:	4603      	mov	r3, r0
 8013828:	3301      	adds	r3, #1
 801382a:	b29b      	uxth	r3, r3
 801382c:	005b      	lsls	r3, r3, #1
 801382e:	b29a      	uxth	r2, r3
 8013830:	e001      	b.n	8013836 <USBD_GetString+0x42>
 8013832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801383a:	7dfb      	ldrb	r3, [r7, #23]
 801383c:	68ba      	ldr	r2, [r7, #8]
 801383e:	4413      	add	r3, r2
 8013840:	687a      	ldr	r2, [r7, #4]
 8013842:	7812      	ldrb	r2, [r2, #0]
 8013844:	701a      	strb	r2, [r3, #0]
  idx++;
 8013846:	7dfb      	ldrb	r3, [r7, #23]
 8013848:	3301      	adds	r3, #1
 801384a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801384c:	7dfb      	ldrb	r3, [r7, #23]
 801384e:	68ba      	ldr	r2, [r7, #8]
 8013850:	4413      	add	r3, r2
 8013852:	2203      	movs	r2, #3
 8013854:	701a      	strb	r2, [r3, #0]
  idx++;
 8013856:	7dfb      	ldrb	r3, [r7, #23]
 8013858:	3301      	adds	r3, #1
 801385a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801385c:	e013      	b.n	8013886 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 801385e:	7dfb      	ldrb	r3, [r7, #23]
 8013860:	68ba      	ldr	r2, [r7, #8]
 8013862:	4413      	add	r3, r2
 8013864:	693a      	ldr	r2, [r7, #16]
 8013866:	7812      	ldrb	r2, [r2, #0]
 8013868:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801386a:	693b      	ldr	r3, [r7, #16]
 801386c:	3301      	adds	r3, #1
 801386e:	613b      	str	r3, [r7, #16]
    idx++;
 8013870:	7dfb      	ldrb	r3, [r7, #23]
 8013872:	3301      	adds	r3, #1
 8013874:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013876:	7dfb      	ldrb	r3, [r7, #23]
 8013878:	68ba      	ldr	r2, [r7, #8]
 801387a:	4413      	add	r3, r2
 801387c:	2200      	movs	r2, #0
 801387e:	701a      	strb	r2, [r3, #0]
    idx++;
 8013880:	7dfb      	ldrb	r3, [r7, #23]
 8013882:	3301      	adds	r3, #1
 8013884:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	781b      	ldrb	r3, [r3, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d1e7      	bne.n	801385e <USBD_GetString+0x6a>
 801388e:	e000      	b.n	8013892 <USBD_GetString+0x9e>
    return;
 8013890:	bf00      	nop
  }
}
 8013892:	3718      	adds	r7, #24
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}

08013898 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013898:	b480      	push	{r7}
 801389a:	b085      	sub	sp, #20
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80138a0:	2300      	movs	r3, #0
 80138a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80138a8:	e005      	b.n	80138b6 <USBD_GetLen+0x1e>
  {
    len++;
 80138aa:	7bfb      	ldrb	r3, [r7, #15]
 80138ac:	3301      	adds	r3, #1
 80138ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80138b0:	68bb      	ldr	r3, [r7, #8]
 80138b2:	3301      	adds	r3, #1
 80138b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80138b6:	68bb      	ldr	r3, [r7, #8]
 80138b8:	781b      	ldrb	r3, [r3, #0]
 80138ba:	2b00      	cmp	r3, #0
 80138bc:	d1f5      	bne.n	80138aa <USBD_GetLen+0x12>
  }

  return len;
 80138be:	7bfb      	ldrb	r3, [r7, #15]
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3714      	adds	r7, #20
 80138c4:	46bd      	mov	sp, r7
 80138c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ca:	4770      	bx	lr

080138cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b084      	sub	sp, #16
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2202      	movs	r2, #2
 80138dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	687a      	ldr	r2, [r7, #4]
 80138e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	687a      	ldr	r2, [r7, #4]
 80138ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	68ba      	ldr	r2, [r7, #8]
 80138f0:	2100      	movs	r1, #0
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f003 fe9b 	bl	801762e <USBD_LL_Transmit>

  return USBD_OK;
 80138f8:	2300      	movs	r3, #0
}
 80138fa:	4618      	mov	r0, r3
 80138fc:	3710      	adds	r7, #16
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd80      	pop	{r7, pc}

08013902 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013902:	b580      	push	{r7, lr}
 8013904:	b084      	sub	sp, #16
 8013906:	af00      	add	r7, sp, #0
 8013908:	60f8      	str	r0, [r7, #12]
 801390a:	60b9      	str	r1, [r7, #8]
 801390c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801390e:	687b      	ldr	r3, [r7, #4]
 8013910:	68ba      	ldr	r2, [r7, #8]
 8013912:	2100      	movs	r1, #0
 8013914:	68f8      	ldr	r0, [r7, #12]
 8013916:	f003 fe8a 	bl	801762e <USBD_LL_Transmit>

  return USBD_OK;
 801391a:	2300      	movs	r3, #0
}
 801391c:	4618      	mov	r0, r3
 801391e:	3710      	adds	r7, #16
 8013920:	46bd      	mov	sp, r7
 8013922:	bd80      	pop	{r7, pc}

08013924 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013924:	b580      	push	{r7, lr}
 8013926:	b084      	sub	sp, #16
 8013928:	af00      	add	r7, sp, #0
 801392a:	60f8      	str	r0, [r7, #12]
 801392c:	60b9      	str	r1, [r7, #8]
 801392e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	2203      	movs	r2, #3
 8013934:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8013938:	68fb      	ldr	r3, [r7, #12]
 801393a:	687a      	ldr	r2, [r7, #4]
 801393c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013940:	68fb      	ldr	r3, [r7, #12]
 8013942:	687a      	ldr	r2, [r7, #4]
 8013944:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	68ba      	ldr	r2, [r7, #8]
 801394c:	2100      	movs	r1, #0
 801394e:	68f8      	ldr	r0, [r7, #12]
 8013950:	f003 fe8e 	bl	8017670 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013954:	2300      	movs	r3, #0
}
 8013956:	4618      	mov	r0, r3
 8013958:	3710      	adds	r7, #16
 801395a:	46bd      	mov	sp, r7
 801395c:	bd80      	pop	{r7, pc}

0801395e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801395e:	b580      	push	{r7, lr}
 8013960:	b084      	sub	sp, #16
 8013962:	af00      	add	r7, sp, #0
 8013964:	60f8      	str	r0, [r7, #12]
 8013966:	60b9      	str	r1, [r7, #8]
 8013968:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	68ba      	ldr	r2, [r7, #8]
 801396e:	2100      	movs	r1, #0
 8013970:	68f8      	ldr	r0, [r7, #12]
 8013972:	f003 fe7d 	bl	8017670 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013976:	2300      	movs	r3, #0
}
 8013978:	4618      	mov	r0, r3
 801397a:	3710      	adds	r7, #16
 801397c:	46bd      	mov	sp, r7
 801397e:	bd80      	pop	{r7, pc}

08013980 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013980:	b580      	push	{r7, lr}
 8013982:	b082      	sub	sp, #8
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2204      	movs	r2, #4
 801398c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013990:	2300      	movs	r3, #0
 8013992:	2200      	movs	r2, #0
 8013994:	2100      	movs	r1, #0
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f003 fe49 	bl	801762e <USBD_LL_Transmit>

  return USBD_OK;
 801399c:	2300      	movs	r3, #0
}
 801399e:	4618      	mov	r0, r3
 80139a0:	3708      	adds	r7, #8
 80139a2:	46bd      	mov	sp, r7
 80139a4:	bd80      	pop	{r7, pc}

080139a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80139a6:	b580      	push	{r7, lr}
 80139a8:	b082      	sub	sp, #8
 80139aa:	af00      	add	r7, sp, #0
 80139ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	2205      	movs	r2, #5
 80139b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80139b6:	2300      	movs	r3, #0
 80139b8:	2200      	movs	r2, #0
 80139ba:	2100      	movs	r1, #0
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f003 fe57 	bl	8017670 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80139c2:	2300      	movs	r3, #0
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3708      	adds	r7, #8
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <__NVIC_SetPriority>:
{
 80139cc:	b480      	push	{r7}
 80139ce:	b083      	sub	sp, #12
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	4603      	mov	r3, r0
 80139d4:	6039      	str	r1, [r7, #0]
 80139d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80139d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139dc:	2b00      	cmp	r3, #0
 80139de:	db0a      	blt.n	80139f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80139e0:	683b      	ldr	r3, [r7, #0]
 80139e2:	b2da      	uxtb	r2, r3
 80139e4:	490c      	ldr	r1, [pc, #48]	@ (8013a18 <__NVIC_SetPriority+0x4c>)
 80139e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80139ea:	0112      	lsls	r2, r2, #4
 80139ec:	b2d2      	uxtb	r2, r2
 80139ee:	440b      	add	r3, r1
 80139f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80139f4:	e00a      	b.n	8013a0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80139f6:	683b      	ldr	r3, [r7, #0]
 80139f8:	b2da      	uxtb	r2, r3
 80139fa:	4908      	ldr	r1, [pc, #32]	@ (8013a1c <__NVIC_SetPriority+0x50>)
 80139fc:	79fb      	ldrb	r3, [r7, #7]
 80139fe:	f003 030f 	and.w	r3, r3, #15
 8013a02:	3b04      	subs	r3, #4
 8013a04:	0112      	lsls	r2, r2, #4
 8013a06:	b2d2      	uxtb	r2, r2
 8013a08:	440b      	add	r3, r1
 8013a0a:	761a      	strb	r2, [r3, #24]
}
 8013a0c:	bf00      	nop
 8013a0e:	370c      	adds	r7, #12
 8013a10:	46bd      	mov	sp, r7
 8013a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a16:	4770      	bx	lr
 8013a18:	e000e100 	.word	0xe000e100
 8013a1c:	e000ed00 	.word	0xe000ed00

08013a20 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013a20:	b580      	push	{r7, lr}
 8013a22:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013a24:	4b05      	ldr	r3, [pc, #20]	@ (8013a3c <SysTick_Handler+0x1c>)
 8013a26:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013a28:	f001 feec 	bl	8015804 <xTaskGetSchedulerState>
 8013a2c:	4603      	mov	r3, r0
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	d001      	beq.n	8013a36 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013a32:	f002 ff21 	bl	8016878 <xPortSysTickHandler>
  }
}
 8013a36:	bf00      	nop
 8013a38:	bd80      	pop	{r7, pc}
 8013a3a:	bf00      	nop
 8013a3c:	e000e010 	.word	0xe000e010

08013a40 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013a40:	b580      	push	{r7, lr}
 8013a42:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013a44:	2100      	movs	r1, #0
 8013a46:	f06f 0004 	mvn.w	r0, #4
 8013a4a:	f7ff ffbf 	bl	80139cc <__NVIC_SetPriority>
#endif
}
 8013a4e:	bf00      	nop
 8013a50:	bd80      	pop	{r7, pc}
	...

08013a54 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013a54:	b480      	push	{r7}
 8013a56:	b083      	sub	sp, #12
 8013a58:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013a5a:	f3ef 8305 	mrs	r3, IPSR
 8013a5e:	603b      	str	r3, [r7, #0]
  return(result);
 8013a60:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d003      	beq.n	8013a6e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013a66:	f06f 0305 	mvn.w	r3, #5
 8013a6a:	607b      	str	r3, [r7, #4]
 8013a6c:	e00c      	b.n	8013a88 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8013a98 <osKernelInitialize+0x44>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d105      	bne.n	8013a82 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013a76:	4b08      	ldr	r3, [pc, #32]	@ (8013a98 <osKernelInitialize+0x44>)
 8013a78:	2201      	movs	r2, #1
 8013a7a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013a7c:	2300      	movs	r3, #0
 8013a7e:	607b      	str	r3, [r7, #4]
 8013a80:	e002      	b.n	8013a88 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013a82:	f04f 33ff 	mov.w	r3, #4294967295
 8013a86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013a88:	687b      	ldr	r3, [r7, #4]
}
 8013a8a:	4618      	mov	r0, r3
 8013a8c:	370c      	adds	r7, #12
 8013a8e:	46bd      	mov	sp, r7
 8013a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a94:	4770      	bx	lr
 8013a96:	bf00      	nop
 8013a98:	20003f9c 	.word	0x20003f9c

08013a9c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b082      	sub	sp, #8
 8013aa0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013aa2:	f3ef 8305 	mrs	r3, IPSR
 8013aa6:	603b      	str	r3, [r7, #0]
  return(result);
 8013aa8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d003      	beq.n	8013ab6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8013aae:	f06f 0305 	mvn.w	r3, #5
 8013ab2:	607b      	str	r3, [r7, #4]
 8013ab4:	e010      	b.n	8013ad8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013ab6:	4b0b      	ldr	r3, [pc, #44]	@ (8013ae4 <osKernelStart+0x48>)
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	2b01      	cmp	r3, #1
 8013abc:	d109      	bne.n	8013ad2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013abe:	f7ff ffbf 	bl	8013a40 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013ac2:	4b08      	ldr	r3, [pc, #32]	@ (8013ae4 <osKernelStart+0x48>)
 8013ac4:	2202      	movs	r2, #2
 8013ac6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013ac8:	f001 fa28 	bl	8014f1c <vTaskStartScheduler>
      stat = osOK;
 8013acc:	2300      	movs	r3, #0
 8013ace:	607b      	str	r3, [r7, #4]
 8013ad0:	e002      	b.n	8013ad8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8013ad6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013ad8:	687b      	ldr	r3, [r7, #4]
}
 8013ada:	4618      	mov	r0, r3
 8013adc:	3708      	adds	r7, #8
 8013ade:	46bd      	mov	sp, r7
 8013ae0:	bd80      	pop	{r7, pc}
 8013ae2:	bf00      	nop
 8013ae4:	20003f9c 	.word	0x20003f9c

08013ae8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b08e      	sub	sp, #56	@ 0x38
 8013aec:	af04      	add	r7, sp, #16
 8013aee:	60f8      	str	r0, [r7, #12]
 8013af0:	60b9      	str	r1, [r7, #8]
 8013af2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013af4:	2300      	movs	r3, #0
 8013af6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013af8:	f3ef 8305 	mrs	r3, IPSR
 8013afc:	617b      	str	r3, [r7, #20]
  return(result);
 8013afe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d17e      	bne.n	8013c02 <osThreadNew+0x11a>
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d07b      	beq.n	8013c02 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013b0a:	2380      	movs	r3, #128	@ 0x80
 8013b0c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013b0e:	2318      	movs	r3, #24
 8013b10:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013b12:	2300      	movs	r3, #0
 8013b14:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8013b16:	f04f 33ff 	mov.w	r3, #4294967295
 8013b1a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d045      	beq.n	8013bae <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013b22:	687b      	ldr	r3, [r7, #4]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d002      	beq.n	8013b30 <osThreadNew+0x48>
        name = attr->name;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	681b      	ldr	r3, [r3, #0]
 8013b2e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	699b      	ldr	r3, [r3, #24]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d002      	beq.n	8013b3e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	699b      	ldr	r3, [r3, #24]
 8013b3c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013b3e:	69fb      	ldr	r3, [r7, #28]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d008      	beq.n	8013b56 <osThreadNew+0x6e>
 8013b44:	69fb      	ldr	r3, [r7, #28]
 8013b46:	2b38      	cmp	r3, #56	@ 0x38
 8013b48:	d805      	bhi.n	8013b56 <osThreadNew+0x6e>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	685b      	ldr	r3, [r3, #4]
 8013b4e:	f003 0301 	and.w	r3, r3, #1
 8013b52:	2b00      	cmp	r3, #0
 8013b54:	d001      	beq.n	8013b5a <osThreadNew+0x72>
        return (NULL);
 8013b56:	2300      	movs	r3, #0
 8013b58:	e054      	b.n	8013c04 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	695b      	ldr	r3, [r3, #20]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d003      	beq.n	8013b6a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	695b      	ldr	r3, [r3, #20]
 8013b66:	089b      	lsrs	r3, r3, #2
 8013b68:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013b6a:	687b      	ldr	r3, [r7, #4]
 8013b6c:	689b      	ldr	r3, [r3, #8]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d00e      	beq.n	8013b90 <osThreadNew+0xa8>
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	68db      	ldr	r3, [r3, #12]
 8013b76:	2ba7      	cmp	r3, #167	@ 0xa7
 8013b78:	d90a      	bls.n	8013b90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d006      	beq.n	8013b90 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	695b      	ldr	r3, [r3, #20]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d002      	beq.n	8013b90 <osThreadNew+0xa8>
        mem = 1;
 8013b8a:	2301      	movs	r3, #1
 8013b8c:	61bb      	str	r3, [r7, #24]
 8013b8e:	e010      	b.n	8013bb2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013b90:	687b      	ldr	r3, [r7, #4]
 8013b92:	689b      	ldr	r3, [r3, #8]
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d10c      	bne.n	8013bb2 <osThreadNew+0xca>
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	68db      	ldr	r3, [r3, #12]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d108      	bne.n	8013bb2 <osThreadNew+0xca>
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	691b      	ldr	r3, [r3, #16]
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d104      	bne.n	8013bb2 <osThreadNew+0xca>
          mem = 0;
 8013ba8:	2300      	movs	r3, #0
 8013baa:	61bb      	str	r3, [r7, #24]
 8013bac:	e001      	b.n	8013bb2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013bae:	2300      	movs	r3, #0
 8013bb0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013bb2:	69bb      	ldr	r3, [r7, #24]
 8013bb4:	2b01      	cmp	r3, #1
 8013bb6:	d110      	bne.n	8013bda <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013bbc:	687a      	ldr	r2, [r7, #4]
 8013bbe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013bc0:	9202      	str	r2, [sp, #8]
 8013bc2:	9301      	str	r3, [sp, #4]
 8013bc4:	69fb      	ldr	r3, [r7, #28]
 8013bc6:	9300      	str	r3, [sp, #0]
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	6a3a      	ldr	r2, [r7, #32]
 8013bcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013bce:	68f8      	ldr	r0, [r7, #12]
 8013bd0:	f000 ffb0 	bl	8014b34 <xTaskCreateStatic>
 8013bd4:	4603      	mov	r3, r0
 8013bd6:	613b      	str	r3, [r7, #16]
 8013bd8:	e013      	b.n	8013c02 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013bda:	69bb      	ldr	r3, [r7, #24]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d110      	bne.n	8013c02 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013be0:	6a3b      	ldr	r3, [r7, #32]
 8013be2:	b29a      	uxth	r2, r3
 8013be4:	f107 0310 	add.w	r3, r7, #16
 8013be8:	9301      	str	r3, [sp, #4]
 8013bea:	69fb      	ldr	r3, [r7, #28]
 8013bec:	9300      	str	r3, [sp, #0]
 8013bee:	68bb      	ldr	r3, [r7, #8]
 8013bf0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013bf2:	68f8      	ldr	r0, [r7, #12]
 8013bf4:	f000 fffe 	bl	8014bf4 <xTaskCreate>
 8013bf8:	4603      	mov	r3, r0
 8013bfa:	2b01      	cmp	r3, #1
 8013bfc:	d001      	beq.n	8013c02 <osThreadNew+0x11a>
            hTask = NULL;
 8013bfe:	2300      	movs	r3, #0
 8013c00:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8013c02:	693b      	ldr	r3, [r7, #16]
}
 8013c04:	4618      	mov	r0, r3
 8013c06:	3728      	adds	r7, #40	@ 0x28
 8013c08:	46bd      	mov	sp, r7
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b084      	sub	sp, #16
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013c14:	f3ef 8305 	mrs	r3, IPSR
 8013c18:	60bb      	str	r3, [r7, #8]
  return(result);
 8013c1a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d003      	beq.n	8013c28 <osDelay+0x1c>
    stat = osErrorISR;
 8013c20:	f06f 0305 	mvn.w	r3, #5
 8013c24:	60fb      	str	r3, [r7, #12]
 8013c26:	e007      	b.n	8013c38 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8013c28:	2300      	movs	r3, #0
 8013c2a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	2b00      	cmp	r3, #0
 8013c30:	d002      	beq.n	8013c38 <osDelay+0x2c>
      vTaskDelay(ticks);
 8013c32:	6878      	ldr	r0, [r7, #4]
 8013c34:	f001 f93c 	bl	8014eb0 <vTaskDelay>
    }
  }

  return (stat);
 8013c38:	68fb      	ldr	r3, [r7, #12]
}
 8013c3a:	4618      	mov	r0, r3
 8013c3c:	3710      	adds	r7, #16
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bd80      	pop	{r7, pc}
	...

08013c44 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013c44:	b480      	push	{r7}
 8013c46:	b085      	sub	sp, #20
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	60f8      	str	r0, [r7, #12]
 8013c4c:	60b9      	str	r1, [r7, #8]
 8013c4e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	4a07      	ldr	r2, [pc, #28]	@ (8013c70 <vApplicationGetIdleTaskMemory+0x2c>)
 8013c54:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	4a06      	ldr	r2, [pc, #24]	@ (8013c74 <vApplicationGetIdleTaskMemory+0x30>)
 8013c5a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	2280      	movs	r2, #128	@ 0x80
 8013c60:	601a      	str	r2, [r3, #0]
}
 8013c62:	bf00      	nop
 8013c64:	3714      	adds	r7, #20
 8013c66:	46bd      	mov	sp, r7
 8013c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c6c:	4770      	bx	lr
 8013c6e:	bf00      	nop
 8013c70:	20003fa0 	.word	0x20003fa0
 8013c74:	20004048 	.word	0x20004048

08013c78 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8013c78:	b480      	push	{r7}
 8013c7a:	b085      	sub	sp, #20
 8013c7c:	af00      	add	r7, sp, #0
 8013c7e:	60f8      	str	r0, [r7, #12]
 8013c80:	60b9      	str	r1, [r7, #8]
 8013c82:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	4a07      	ldr	r2, [pc, #28]	@ (8013ca4 <vApplicationGetTimerTaskMemory+0x2c>)
 8013c88:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013c8a:	68bb      	ldr	r3, [r7, #8]
 8013c8c:	4a06      	ldr	r2, [pc, #24]	@ (8013ca8 <vApplicationGetTimerTaskMemory+0x30>)
 8013c8e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013c96:	601a      	str	r2, [r3, #0]
}
 8013c98:	bf00      	nop
 8013c9a:	3714      	adds	r7, #20
 8013c9c:	46bd      	mov	sp, r7
 8013c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ca2:	4770      	bx	lr
 8013ca4:	20004248 	.word	0x20004248
 8013ca8:	200042f0 	.word	0x200042f0

08013cac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013cac:	b480      	push	{r7}
 8013cae:	b083      	sub	sp, #12
 8013cb0:	af00      	add	r7, sp, #0
 8013cb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	f103 0208 	add.w	r2, r3, #8
 8013cba:	687b      	ldr	r3, [r7, #4]
 8013cbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8013cc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	f103 0208 	add.w	r2, r3, #8
 8013ccc:	687b      	ldr	r3, [r7, #4]
 8013cce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	f103 0208 	add.w	r2, r3, #8
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013ce0:	bf00      	nop
 8013ce2:	370c      	adds	r7, #12
 8013ce4:	46bd      	mov	sp, r7
 8013ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cea:	4770      	bx	lr

08013cec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013cec:	b480      	push	{r7}
 8013cee:	b083      	sub	sp, #12
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013cfa:	bf00      	nop
 8013cfc:	370c      	adds	r7, #12
 8013cfe:	46bd      	mov	sp, r7
 8013d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d04:	4770      	bx	lr

08013d06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013d06:	b480      	push	{r7}
 8013d08:	b085      	sub	sp, #20
 8013d0a:	af00      	add	r7, sp, #0
 8013d0c:	6078      	str	r0, [r7, #4]
 8013d0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013d10:	687b      	ldr	r3, [r7, #4]
 8013d12:	685b      	ldr	r3, [r3, #4]
 8013d14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	68fa      	ldr	r2, [r7, #12]
 8013d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013d1c:	68fb      	ldr	r3, [r7, #12]
 8013d1e:	689a      	ldr	r2, [r3, #8]
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	689b      	ldr	r3, [r3, #8]
 8013d28:	683a      	ldr	r2, [r7, #0]
 8013d2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	683a      	ldr	r2, [r7, #0]
 8013d30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013d32:	683b      	ldr	r3, [r7, #0]
 8013d34:	687a      	ldr	r2, [r7, #4]
 8013d36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	1c5a      	adds	r2, r3, #1
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	601a      	str	r2, [r3, #0]
}
 8013d42:	bf00      	nop
 8013d44:	3714      	adds	r7, #20
 8013d46:	46bd      	mov	sp, r7
 8013d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d4c:	4770      	bx	lr

08013d4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013d4e:	b480      	push	{r7}
 8013d50:	b085      	sub	sp, #20
 8013d52:	af00      	add	r7, sp, #0
 8013d54:	6078      	str	r0, [r7, #4]
 8013d56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013d58:	683b      	ldr	r3, [r7, #0]
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d64:	d103      	bne.n	8013d6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	691b      	ldr	r3, [r3, #16]
 8013d6a:	60fb      	str	r3, [r7, #12]
 8013d6c:	e00c      	b.n	8013d88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	3308      	adds	r3, #8
 8013d72:	60fb      	str	r3, [r7, #12]
 8013d74:	e002      	b.n	8013d7c <vListInsert+0x2e>
 8013d76:	68fb      	ldr	r3, [r7, #12]
 8013d78:	685b      	ldr	r3, [r3, #4]
 8013d7a:	60fb      	str	r3, [r7, #12]
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	68ba      	ldr	r2, [r7, #8]
 8013d84:	429a      	cmp	r2, r3
 8013d86:	d2f6      	bcs.n	8013d76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	685a      	ldr	r2, [r3, #4]
 8013d8c:	683b      	ldr	r3, [r7, #0]
 8013d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013d90:	683b      	ldr	r3, [r7, #0]
 8013d92:	685b      	ldr	r3, [r3, #4]
 8013d94:	683a      	ldr	r2, [r7, #0]
 8013d96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013d98:	683b      	ldr	r3, [r7, #0]
 8013d9a:	68fa      	ldr	r2, [r7, #12]
 8013d9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013d9e:	68fb      	ldr	r3, [r7, #12]
 8013da0:	683a      	ldr	r2, [r7, #0]
 8013da2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	687a      	ldr	r2, [r7, #4]
 8013da8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	1c5a      	adds	r2, r3, #1
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	601a      	str	r2, [r3, #0]
}
 8013db4:	bf00      	nop
 8013db6:	3714      	adds	r7, #20
 8013db8:	46bd      	mov	sp, r7
 8013dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dbe:	4770      	bx	lr

08013dc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013dc0:	b480      	push	{r7}
 8013dc2:	b085      	sub	sp, #20
 8013dc4:	af00      	add	r7, sp, #0
 8013dc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	691b      	ldr	r3, [r3, #16]
 8013dcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	685b      	ldr	r3, [r3, #4]
 8013dd2:	687a      	ldr	r2, [r7, #4]
 8013dd4:	6892      	ldr	r2, [r2, #8]
 8013dd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	689b      	ldr	r3, [r3, #8]
 8013ddc:	687a      	ldr	r2, [r7, #4]
 8013dde:	6852      	ldr	r2, [r2, #4]
 8013de0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	685b      	ldr	r3, [r3, #4]
 8013de6:	687a      	ldr	r2, [r7, #4]
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d103      	bne.n	8013df4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	689a      	ldr	r2, [r3, #8]
 8013df0:	68fb      	ldr	r3, [r7, #12]
 8013df2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	2200      	movs	r2, #0
 8013df8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	681b      	ldr	r3, [r3, #0]
 8013dfe:	1e5a      	subs	r2, r3, #1
 8013e00:	68fb      	ldr	r3, [r7, #12]
 8013e02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	681b      	ldr	r3, [r3, #0]
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3714      	adds	r7, #20
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e12:	4770      	bx	lr

08013e14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b084      	sub	sp, #16
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
 8013e1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013e22:	68fb      	ldr	r3, [r7, #12]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d10b      	bne.n	8013e40 <xQueueGenericReset+0x2c>
	__asm volatile
 8013e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013e2c:	f383 8811 	msr	BASEPRI, r3
 8013e30:	f3bf 8f6f 	isb	sy
 8013e34:	f3bf 8f4f 	dsb	sy
 8013e38:	60bb      	str	r3, [r7, #8]
}
 8013e3a:	bf00      	nop
 8013e3c:	bf00      	nop
 8013e3e:	e7fd      	b.n	8013e3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8013e40:	f002 fc8a 	bl	8016758 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013e44:	68fb      	ldr	r3, [r7, #12]
 8013e46:	681a      	ldr	r2, [r3, #0]
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e4c:	68f9      	ldr	r1, [r7, #12]
 8013e4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013e50:	fb01 f303 	mul.w	r3, r1, r3
 8013e54:	441a      	add	r2, r3
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013e5a:	68fb      	ldr	r3, [r7, #12]
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	681a      	ldr	r2, [r3, #0]
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013e68:	68fb      	ldr	r3, [r7, #12]
 8013e6a:	681a      	ldr	r2, [r3, #0]
 8013e6c:	68fb      	ldr	r3, [r7, #12]
 8013e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e70:	3b01      	subs	r3, #1
 8013e72:	68f9      	ldr	r1, [r7, #12]
 8013e74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8013e76:	fb01 f303 	mul.w	r3, r1, r3
 8013e7a:	441a      	add	r2, r3
 8013e7c:	68fb      	ldr	r3, [r7, #12]
 8013e7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8013e80:	68fb      	ldr	r3, [r7, #12]
 8013e82:	22ff      	movs	r2, #255	@ 0xff
 8013e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013e88:	68fb      	ldr	r3, [r7, #12]
 8013e8a:	22ff      	movs	r2, #255	@ 0xff
 8013e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8013e90:	683b      	ldr	r3, [r7, #0]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d114      	bne.n	8013ec0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e96:	68fb      	ldr	r3, [r7, #12]
 8013e98:	691b      	ldr	r3, [r3, #16]
 8013e9a:	2b00      	cmp	r3, #0
 8013e9c:	d01a      	beq.n	8013ed4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e9e:	68fb      	ldr	r3, [r7, #12]
 8013ea0:	3310      	adds	r3, #16
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f001 fad8 	bl	8015458 <xTaskRemoveFromEventList>
 8013ea8:	4603      	mov	r3, r0
 8013eaa:	2b00      	cmp	r3, #0
 8013eac:	d012      	beq.n	8013ed4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013eae:	4b0d      	ldr	r3, [pc, #52]	@ (8013ee4 <xQueueGenericReset+0xd0>)
 8013eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013eb4:	601a      	str	r2, [r3, #0]
 8013eb6:	f3bf 8f4f 	dsb	sy
 8013eba:	f3bf 8f6f 	isb	sy
 8013ebe:	e009      	b.n	8013ed4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013ec0:	68fb      	ldr	r3, [r7, #12]
 8013ec2:	3310      	adds	r3, #16
 8013ec4:	4618      	mov	r0, r3
 8013ec6:	f7ff fef1 	bl	8013cac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	3324      	adds	r3, #36	@ 0x24
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f7ff feec 	bl	8013cac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013ed4:	f002 fc72 	bl	80167bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013ed8:	2301      	movs	r3, #1
}
 8013eda:	4618      	mov	r0, r3
 8013edc:	3710      	adds	r7, #16
 8013ede:	46bd      	mov	sp, r7
 8013ee0:	bd80      	pop	{r7, pc}
 8013ee2:	bf00      	nop
 8013ee4:	e000ed04 	.word	0xe000ed04

08013ee8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b08e      	sub	sp, #56	@ 0x38
 8013eec:	af02      	add	r7, sp, #8
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	607a      	str	r2, [r7, #4]
 8013ef4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	2b00      	cmp	r3, #0
 8013efa:	d10b      	bne.n	8013f14 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8013efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f00:	f383 8811 	msr	BASEPRI, r3
 8013f04:	f3bf 8f6f 	isb	sy
 8013f08:	f3bf 8f4f 	dsb	sy
 8013f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8013f0e:	bf00      	nop
 8013f10:	bf00      	nop
 8013f12:	e7fd      	b.n	8013f10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013f14:	683b      	ldr	r3, [r7, #0]
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d10b      	bne.n	8013f32 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8013f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f1e:	f383 8811 	msr	BASEPRI, r3
 8013f22:	f3bf 8f6f 	isb	sy
 8013f26:	f3bf 8f4f 	dsb	sy
 8013f2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8013f2c:	bf00      	nop
 8013f2e:	bf00      	nop
 8013f30:	e7fd      	b.n	8013f2e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d002      	beq.n	8013f3e <xQueueGenericCreateStatic+0x56>
 8013f38:	68bb      	ldr	r3, [r7, #8]
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d001      	beq.n	8013f42 <xQueueGenericCreateStatic+0x5a>
 8013f3e:	2301      	movs	r3, #1
 8013f40:	e000      	b.n	8013f44 <xQueueGenericCreateStatic+0x5c>
 8013f42:	2300      	movs	r3, #0
 8013f44:	2b00      	cmp	r3, #0
 8013f46:	d10b      	bne.n	8013f60 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8013f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f4c:	f383 8811 	msr	BASEPRI, r3
 8013f50:	f3bf 8f6f 	isb	sy
 8013f54:	f3bf 8f4f 	dsb	sy
 8013f58:	623b      	str	r3, [r7, #32]
}
 8013f5a:	bf00      	nop
 8013f5c:	bf00      	nop
 8013f5e:	e7fd      	b.n	8013f5c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d102      	bne.n	8013f6c <xQueueGenericCreateStatic+0x84>
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d101      	bne.n	8013f70 <xQueueGenericCreateStatic+0x88>
 8013f6c:	2301      	movs	r3, #1
 8013f6e:	e000      	b.n	8013f72 <xQueueGenericCreateStatic+0x8a>
 8013f70:	2300      	movs	r3, #0
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d10b      	bne.n	8013f8e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8013f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f7a:	f383 8811 	msr	BASEPRI, r3
 8013f7e:	f3bf 8f6f 	isb	sy
 8013f82:	f3bf 8f4f 	dsb	sy
 8013f86:	61fb      	str	r3, [r7, #28]
}
 8013f88:	bf00      	nop
 8013f8a:	bf00      	nop
 8013f8c:	e7fd      	b.n	8013f8a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013f8e:	2350      	movs	r3, #80	@ 0x50
 8013f90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	2b50      	cmp	r3, #80	@ 0x50
 8013f96:	d00b      	beq.n	8013fb0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8013f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013f9c:	f383 8811 	msr	BASEPRI, r3
 8013fa0:	f3bf 8f6f 	isb	sy
 8013fa4:	f3bf 8f4f 	dsb	sy
 8013fa8:	61bb      	str	r3, [r7, #24]
}
 8013faa:	bf00      	nop
 8013fac:	bf00      	nop
 8013fae:	e7fd      	b.n	8013fac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013fb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013fb2:	683b      	ldr	r3, [r7, #0]
 8013fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8013fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d00d      	beq.n	8013fd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fbe:	2201      	movs	r2, #1
 8013fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8013fc4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8013fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013fca:	9300      	str	r3, [sp, #0]
 8013fcc:	4613      	mov	r3, r2
 8013fce:	687a      	ldr	r2, [r7, #4]
 8013fd0:	68b9      	ldr	r1, [r7, #8]
 8013fd2:	68f8      	ldr	r0, [r7, #12]
 8013fd4:	f000 f840 	bl	8014058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3730      	adds	r7, #48	@ 0x30
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}

08013fe2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013fe2:	b580      	push	{r7, lr}
 8013fe4:	b08a      	sub	sp, #40	@ 0x28
 8013fe6:	af02      	add	r7, sp, #8
 8013fe8:	60f8      	str	r0, [r7, #12]
 8013fea:	60b9      	str	r1, [r7, #8]
 8013fec:	4613      	mov	r3, r2
 8013fee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d10b      	bne.n	801400e <xQueueGenericCreate+0x2c>
	__asm volatile
 8013ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8013ffa:	f383 8811 	msr	BASEPRI, r3
 8013ffe:	f3bf 8f6f 	isb	sy
 8014002:	f3bf 8f4f 	dsb	sy
 8014006:	613b      	str	r3, [r7, #16]
}
 8014008:	bf00      	nop
 801400a:	bf00      	nop
 801400c:	e7fd      	b.n	801400a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	68ba      	ldr	r2, [r7, #8]
 8014012:	fb02 f303 	mul.w	r3, r2, r3
 8014016:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014018:	69fb      	ldr	r3, [r7, #28]
 801401a:	3350      	adds	r3, #80	@ 0x50
 801401c:	4618      	mov	r0, r3
 801401e:	f002 fcbd 	bl	801699c <pvPortMalloc>
 8014022:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014024:	69bb      	ldr	r3, [r7, #24]
 8014026:	2b00      	cmp	r3, #0
 8014028:	d011      	beq.n	801404e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801402a:	69bb      	ldr	r3, [r7, #24]
 801402c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	3350      	adds	r3, #80	@ 0x50
 8014032:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014034:	69bb      	ldr	r3, [r7, #24]
 8014036:	2200      	movs	r2, #0
 8014038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801403c:	79fa      	ldrb	r2, [r7, #7]
 801403e:	69bb      	ldr	r3, [r7, #24]
 8014040:	9300      	str	r3, [sp, #0]
 8014042:	4613      	mov	r3, r2
 8014044:	697a      	ldr	r2, [r7, #20]
 8014046:	68b9      	ldr	r1, [r7, #8]
 8014048:	68f8      	ldr	r0, [r7, #12]
 801404a:	f000 f805 	bl	8014058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801404e:	69bb      	ldr	r3, [r7, #24]
	}
 8014050:	4618      	mov	r0, r3
 8014052:	3720      	adds	r7, #32
 8014054:	46bd      	mov	sp, r7
 8014056:	bd80      	pop	{r7, pc}

08014058 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014058:	b580      	push	{r7, lr}
 801405a:	b084      	sub	sp, #16
 801405c:	af00      	add	r7, sp, #0
 801405e:	60f8      	str	r0, [r7, #12]
 8014060:	60b9      	str	r1, [r7, #8]
 8014062:	607a      	str	r2, [r7, #4]
 8014064:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014066:	68bb      	ldr	r3, [r7, #8]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d103      	bne.n	8014074 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801406c:	69bb      	ldr	r3, [r7, #24]
 801406e:	69ba      	ldr	r2, [r7, #24]
 8014070:	601a      	str	r2, [r3, #0]
 8014072:	e002      	b.n	801407a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014074:	69bb      	ldr	r3, [r7, #24]
 8014076:	687a      	ldr	r2, [r7, #4]
 8014078:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801407a:	69bb      	ldr	r3, [r7, #24]
 801407c:	68fa      	ldr	r2, [r7, #12]
 801407e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014080:	69bb      	ldr	r3, [r7, #24]
 8014082:	68ba      	ldr	r2, [r7, #8]
 8014084:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014086:	2101      	movs	r1, #1
 8014088:	69b8      	ldr	r0, [r7, #24]
 801408a:	f7ff fec3 	bl	8013e14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801408e:	69bb      	ldr	r3, [r7, #24]
 8014090:	78fa      	ldrb	r2, [r7, #3]
 8014092:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014096:	bf00      	nop
 8014098:	3710      	adds	r7, #16
 801409a:	46bd      	mov	sp, r7
 801409c:	bd80      	pop	{r7, pc}

0801409e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 801409e:	b580      	push	{r7, lr}
 80140a0:	b082      	sub	sp, #8
 80140a2:	af00      	add	r7, sp, #0
 80140a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d00e      	beq.n	80140ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	2200      	movs	r2, #0
 80140b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2200      	movs	r2, #0
 80140b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	2200      	movs	r2, #0
 80140bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80140be:	2300      	movs	r3, #0
 80140c0:	2200      	movs	r2, #0
 80140c2:	2100      	movs	r1, #0
 80140c4:	6878      	ldr	r0, [r7, #4]
 80140c6:	f000 f81d 	bl	8014104 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80140ca:	bf00      	nop
 80140cc:	3708      	adds	r7, #8
 80140ce:	46bd      	mov	sp, r7
 80140d0:	bd80      	pop	{r7, pc}

080140d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80140d2:	b580      	push	{r7, lr}
 80140d4:	b086      	sub	sp, #24
 80140d6:	af00      	add	r7, sp, #0
 80140d8:	4603      	mov	r3, r0
 80140da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80140dc:	2301      	movs	r3, #1
 80140de:	617b      	str	r3, [r7, #20]
 80140e0:	2300      	movs	r3, #0
 80140e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80140e4:	79fb      	ldrb	r3, [r7, #7]
 80140e6:	461a      	mov	r2, r3
 80140e8:	6939      	ldr	r1, [r7, #16]
 80140ea:	6978      	ldr	r0, [r7, #20]
 80140ec:	f7ff ff79 	bl	8013fe2 <xQueueGenericCreate>
 80140f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80140f2:	68f8      	ldr	r0, [r7, #12]
 80140f4:	f7ff ffd3 	bl	801409e <prvInitialiseMutex>

		return xNewQueue;
 80140f8:	68fb      	ldr	r3, [r7, #12]
	}
 80140fa:	4618      	mov	r0, r3
 80140fc:	3718      	adds	r7, #24
 80140fe:	46bd      	mov	sp, r7
 8014100:	bd80      	pop	{r7, pc}
	...

08014104 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014104:	b580      	push	{r7, lr}
 8014106:	b08e      	sub	sp, #56	@ 0x38
 8014108:	af00      	add	r7, sp, #0
 801410a:	60f8      	str	r0, [r7, #12]
 801410c:	60b9      	str	r1, [r7, #8]
 801410e:	607a      	str	r2, [r7, #4]
 8014110:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014112:	2300      	movs	r3, #0
 8014114:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 801411a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801411c:	2b00      	cmp	r3, #0
 801411e:	d10b      	bne.n	8014138 <xQueueGenericSend+0x34>
	__asm volatile
 8014120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014124:	f383 8811 	msr	BASEPRI, r3
 8014128:	f3bf 8f6f 	isb	sy
 801412c:	f3bf 8f4f 	dsb	sy
 8014130:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014132:	bf00      	nop
 8014134:	bf00      	nop
 8014136:	e7fd      	b.n	8014134 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014138:	68bb      	ldr	r3, [r7, #8]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d103      	bne.n	8014146 <xQueueGenericSend+0x42>
 801413e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014142:	2b00      	cmp	r3, #0
 8014144:	d101      	bne.n	801414a <xQueueGenericSend+0x46>
 8014146:	2301      	movs	r3, #1
 8014148:	e000      	b.n	801414c <xQueueGenericSend+0x48>
 801414a:	2300      	movs	r3, #0
 801414c:	2b00      	cmp	r3, #0
 801414e:	d10b      	bne.n	8014168 <xQueueGenericSend+0x64>
	__asm volatile
 8014150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014154:	f383 8811 	msr	BASEPRI, r3
 8014158:	f3bf 8f6f 	isb	sy
 801415c:	f3bf 8f4f 	dsb	sy
 8014160:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014162:	bf00      	nop
 8014164:	bf00      	nop
 8014166:	e7fd      	b.n	8014164 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014168:	683b      	ldr	r3, [r7, #0]
 801416a:	2b02      	cmp	r3, #2
 801416c:	d103      	bne.n	8014176 <xQueueGenericSend+0x72>
 801416e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014170:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014172:	2b01      	cmp	r3, #1
 8014174:	d101      	bne.n	801417a <xQueueGenericSend+0x76>
 8014176:	2301      	movs	r3, #1
 8014178:	e000      	b.n	801417c <xQueueGenericSend+0x78>
 801417a:	2300      	movs	r3, #0
 801417c:	2b00      	cmp	r3, #0
 801417e:	d10b      	bne.n	8014198 <xQueueGenericSend+0x94>
	__asm volatile
 8014180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014184:	f383 8811 	msr	BASEPRI, r3
 8014188:	f3bf 8f6f 	isb	sy
 801418c:	f3bf 8f4f 	dsb	sy
 8014190:	623b      	str	r3, [r7, #32]
}
 8014192:	bf00      	nop
 8014194:	bf00      	nop
 8014196:	e7fd      	b.n	8014194 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014198:	f001 fb34 	bl	8015804 <xTaskGetSchedulerState>
 801419c:	4603      	mov	r3, r0
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d102      	bne.n	80141a8 <xQueueGenericSend+0xa4>
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d101      	bne.n	80141ac <xQueueGenericSend+0xa8>
 80141a8:	2301      	movs	r3, #1
 80141aa:	e000      	b.n	80141ae <xQueueGenericSend+0xaa>
 80141ac:	2300      	movs	r3, #0
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d10b      	bne.n	80141ca <xQueueGenericSend+0xc6>
	__asm volatile
 80141b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80141b6:	f383 8811 	msr	BASEPRI, r3
 80141ba:	f3bf 8f6f 	isb	sy
 80141be:	f3bf 8f4f 	dsb	sy
 80141c2:	61fb      	str	r3, [r7, #28]
}
 80141c4:	bf00      	nop
 80141c6:	bf00      	nop
 80141c8:	e7fd      	b.n	80141c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80141ca:	f002 fac5 	bl	8016758 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80141ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80141d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80141d6:	429a      	cmp	r2, r3
 80141d8:	d302      	bcc.n	80141e0 <xQueueGenericSend+0xdc>
 80141da:	683b      	ldr	r3, [r7, #0]
 80141dc:	2b02      	cmp	r3, #2
 80141de:	d129      	bne.n	8014234 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80141e0:	683a      	ldr	r2, [r7, #0]
 80141e2:	68b9      	ldr	r1, [r7, #8]
 80141e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80141e6:	f000 fb37 	bl	8014858 <prvCopyDataToQueue>
 80141ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80141ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d010      	beq.n	8014216 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80141f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80141f6:	3324      	adds	r3, #36	@ 0x24
 80141f8:	4618      	mov	r0, r3
 80141fa:	f001 f92d 	bl	8015458 <xTaskRemoveFromEventList>
 80141fe:	4603      	mov	r3, r0
 8014200:	2b00      	cmp	r3, #0
 8014202:	d013      	beq.n	801422c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014204:	4b3f      	ldr	r3, [pc, #252]	@ (8014304 <xQueueGenericSend+0x200>)
 8014206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801420a:	601a      	str	r2, [r3, #0]
 801420c:	f3bf 8f4f 	dsb	sy
 8014210:	f3bf 8f6f 	isb	sy
 8014214:	e00a      	b.n	801422c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014218:	2b00      	cmp	r3, #0
 801421a:	d007      	beq.n	801422c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801421c:	4b39      	ldr	r3, [pc, #228]	@ (8014304 <xQueueGenericSend+0x200>)
 801421e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014222:	601a      	str	r2, [r3, #0]
 8014224:	f3bf 8f4f 	dsb	sy
 8014228:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801422c:	f002 fac6 	bl	80167bc <vPortExitCritical>
				return pdPASS;
 8014230:	2301      	movs	r3, #1
 8014232:	e063      	b.n	80142fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	2b00      	cmp	r3, #0
 8014238:	d103      	bne.n	8014242 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801423a:	f002 fabf 	bl	80167bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801423e:	2300      	movs	r3, #0
 8014240:	e05c      	b.n	80142fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014244:	2b00      	cmp	r3, #0
 8014246:	d106      	bne.n	8014256 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014248:	f107 0314 	add.w	r3, r7, #20
 801424c:	4618      	mov	r0, r3
 801424e:	f001 f967 	bl	8015520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014252:	2301      	movs	r3, #1
 8014254:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014256:	f002 fab1 	bl	80167bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801425a:	f000 fecf 	bl	8014ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801425e:	f002 fa7b 	bl	8016758 <vPortEnterCritical>
 8014262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014264:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014268:	b25b      	sxtb	r3, r3
 801426a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801426e:	d103      	bne.n	8014278 <xQueueGenericSend+0x174>
 8014270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014272:	2200      	movs	r2, #0
 8014274:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801427a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801427e:	b25b      	sxtb	r3, r3
 8014280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014284:	d103      	bne.n	801428e <xQueueGenericSend+0x18a>
 8014286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014288:	2200      	movs	r2, #0
 801428a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801428e:	f002 fa95 	bl	80167bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014292:	1d3a      	adds	r2, r7, #4
 8014294:	f107 0314 	add.w	r3, r7, #20
 8014298:	4611      	mov	r1, r2
 801429a:	4618      	mov	r0, r3
 801429c:	f001 f956 	bl	801554c <xTaskCheckForTimeOut>
 80142a0:	4603      	mov	r3, r0
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d124      	bne.n	80142f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80142a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80142a8:	f000 fbce 	bl	8014a48 <prvIsQueueFull>
 80142ac:	4603      	mov	r3, r0
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d018      	beq.n	80142e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80142b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80142b4:	3310      	adds	r3, #16
 80142b6:	687a      	ldr	r2, [r7, #4]
 80142b8:	4611      	mov	r1, r2
 80142ba:	4618      	mov	r0, r3
 80142bc:	f001 f87a 	bl	80153b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80142c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80142c2:	f000 fb59 	bl	8014978 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80142c6:	f000 fea7 	bl	8015018 <xTaskResumeAll>
 80142ca:	4603      	mov	r3, r0
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	f47f af7c 	bne.w	80141ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80142d2:	4b0c      	ldr	r3, [pc, #48]	@ (8014304 <xQueueGenericSend+0x200>)
 80142d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142d8:	601a      	str	r2, [r3, #0]
 80142da:	f3bf 8f4f 	dsb	sy
 80142de:	f3bf 8f6f 	isb	sy
 80142e2:	e772      	b.n	80141ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80142e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80142e6:	f000 fb47 	bl	8014978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80142ea:	f000 fe95 	bl	8015018 <xTaskResumeAll>
 80142ee:	e76c      	b.n	80141ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80142f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80142f2:	f000 fb41 	bl	8014978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80142f6:	f000 fe8f 	bl	8015018 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80142fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80142fc:	4618      	mov	r0, r3
 80142fe:	3738      	adds	r7, #56	@ 0x38
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}
 8014304:	e000ed04 	.word	0xe000ed04

08014308 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014308:	b580      	push	{r7, lr}
 801430a:	b090      	sub	sp, #64	@ 0x40
 801430c:	af00      	add	r7, sp, #0
 801430e:	60f8      	str	r0, [r7, #12]
 8014310:	60b9      	str	r1, [r7, #8]
 8014312:	607a      	str	r2, [r7, #4]
 8014314:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014316:	68fb      	ldr	r3, [r7, #12]
 8014318:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 801431a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801431c:	2b00      	cmp	r3, #0
 801431e:	d10b      	bne.n	8014338 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8014320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014324:	f383 8811 	msr	BASEPRI, r3
 8014328:	f3bf 8f6f 	isb	sy
 801432c:	f3bf 8f4f 	dsb	sy
 8014330:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014332:	bf00      	nop
 8014334:	bf00      	nop
 8014336:	e7fd      	b.n	8014334 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014338:	68bb      	ldr	r3, [r7, #8]
 801433a:	2b00      	cmp	r3, #0
 801433c:	d103      	bne.n	8014346 <xQueueGenericSendFromISR+0x3e>
 801433e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014342:	2b00      	cmp	r3, #0
 8014344:	d101      	bne.n	801434a <xQueueGenericSendFromISR+0x42>
 8014346:	2301      	movs	r3, #1
 8014348:	e000      	b.n	801434c <xQueueGenericSendFromISR+0x44>
 801434a:	2300      	movs	r3, #0
 801434c:	2b00      	cmp	r3, #0
 801434e:	d10b      	bne.n	8014368 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8014350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014354:	f383 8811 	msr	BASEPRI, r3
 8014358:	f3bf 8f6f 	isb	sy
 801435c:	f3bf 8f4f 	dsb	sy
 8014360:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014362:	bf00      	nop
 8014364:	bf00      	nop
 8014366:	e7fd      	b.n	8014364 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014368:	683b      	ldr	r3, [r7, #0]
 801436a:	2b02      	cmp	r3, #2
 801436c:	d103      	bne.n	8014376 <xQueueGenericSendFromISR+0x6e>
 801436e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014370:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014372:	2b01      	cmp	r3, #1
 8014374:	d101      	bne.n	801437a <xQueueGenericSendFromISR+0x72>
 8014376:	2301      	movs	r3, #1
 8014378:	e000      	b.n	801437c <xQueueGenericSendFromISR+0x74>
 801437a:	2300      	movs	r3, #0
 801437c:	2b00      	cmp	r3, #0
 801437e:	d10b      	bne.n	8014398 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8014380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014384:	f383 8811 	msr	BASEPRI, r3
 8014388:	f3bf 8f6f 	isb	sy
 801438c:	f3bf 8f4f 	dsb	sy
 8014390:	623b      	str	r3, [r7, #32]
}
 8014392:	bf00      	nop
 8014394:	bf00      	nop
 8014396:	e7fd      	b.n	8014394 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014398:	f002 fabe 	bl	8016918 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801439c:	f3ef 8211 	mrs	r2, BASEPRI
 80143a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143a4:	f383 8811 	msr	BASEPRI, r3
 80143a8:	f3bf 8f6f 	isb	sy
 80143ac:	f3bf 8f4f 	dsb	sy
 80143b0:	61fa      	str	r2, [r7, #28]
 80143b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80143b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80143b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80143b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80143bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80143c0:	429a      	cmp	r2, r3
 80143c2:	d302      	bcc.n	80143ca <xQueueGenericSendFromISR+0xc2>
 80143c4:	683b      	ldr	r3, [r7, #0]
 80143c6:	2b02      	cmp	r3, #2
 80143c8:	d12f      	bne.n	801442a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80143ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80143d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80143d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80143d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80143da:	683a      	ldr	r2, [r7, #0]
 80143dc:	68b9      	ldr	r1, [r7, #8]
 80143de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80143e0:	f000 fa3a 	bl	8014858 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80143e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80143e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80143ec:	d112      	bne.n	8014414 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80143ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d016      	beq.n	8014424 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80143f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143f8:	3324      	adds	r3, #36	@ 0x24
 80143fa:	4618      	mov	r0, r3
 80143fc:	f001 f82c 	bl	8015458 <xTaskRemoveFromEventList>
 8014400:	4603      	mov	r3, r0
 8014402:	2b00      	cmp	r3, #0
 8014404:	d00e      	beq.n	8014424 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	2b00      	cmp	r3, #0
 801440a:	d00b      	beq.n	8014424 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801440c:	687b      	ldr	r3, [r7, #4]
 801440e:	2201      	movs	r2, #1
 8014410:	601a      	str	r2, [r3, #0]
 8014412:	e007      	b.n	8014424 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014414:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014418:	3301      	adds	r3, #1
 801441a:	b2db      	uxtb	r3, r3
 801441c:	b25a      	sxtb	r2, r3
 801441e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014420:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014424:	2301      	movs	r3, #1
 8014426:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8014428:	e001      	b.n	801442e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801442a:	2300      	movs	r3, #0
 801442c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801442e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014430:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8014432:	697b      	ldr	r3, [r7, #20]
 8014434:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014438:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801443a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801443c:	4618      	mov	r0, r3
 801443e:	3740      	adds	r7, #64	@ 0x40
 8014440:	46bd      	mov	sp, r7
 8014442:	bd80      	pop	{r7, pc}

08014444 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014444:	b580      	push	{r7, lr}
 8014446:	b08c      	sub	sp, #48	@ 0x30
 8014448:	af00      	add	r7, sp, #0
 801444a:	60f8      	str	r0, [r7, #12]
 801444c:	60b9      	str	r1, [r7, #8]
 801444e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8014450:	2300      	movs	r3, #0
 8014452:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801445a:	2b00      	cmp	r3, #0
 801445c:	d10b      	bne.n	8014476 <xQueueReceive+0x32>
	__asm volatile
 801445e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014462:	f383 8811 	msr	BASEPRI, r3
 8014466:	f3bf 8f6f 	isb	sy
 801446a:	f3bf 8f4f 	dsb	sy
 801446e:	623b      	str	r3, [r7, #32]
}
 8014470:	bf00      	nop
 8014472:	bf00      	nop
 8014474:	e7fd      	b.n	8014472 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014476:	68bb      	ldr	r3, [r7, #8]
 8014478:	2b00      	cmp	r3, #0
 801447a:	d103      	bne.n	8014484 <xQueueReceive+0x40>
 801447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801447e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014480:	2b00      	cmp	r3, #0
 8014482:	d101      	bne.n	8014488 <xQueueReceive+0x44>
 8014484:	2301      	movs	r3, #1
 8014486:	e000      	b.n	801448a <xQueueReceive+0x46>
 8014488:	2300      	movs	r3, #0
 801448a:	2b00      	cmp	r3, #0
 801448c:	d10b      	bne.n	80144a6 <xQueueReceive+0x62>
	__asm volatile
 801448e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014492:	f383 8811 	msr	BASEPRI, r3
 8014496:	f3bf 8f6f 	isb	sy
 801449a:	f3bf 8f4f 	dsb	sy
 801449e:	61fb      	str	r3, [r7, #28]
}
 80144a0:	bf00      	nop
 80144a2:	bf00      	nop
 80144a4:	e7fd      	b.n	80144a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80144a6:	f001 f9ad 	bl	8015804 <xTaskGetSchedulerState>
 80144aa:	4603      	mov	r3, r0
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d102      	bne.n	80144b6 <xQueueReceive+0x72>
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d101      	bne.n	80144ba <xQueueReceive+0x76>
 80144b6:	2301      	movs	r3, #1
 80144b8:	e000      	b.n	80144bc <xQueueReceive+0x78>
 80144ba:	2300      	movs	r3, #0
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d10b      	bne.n	80144d8 <xQueueReceive+0x94>
	__asm volatile
 80144c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80144c4:	f383 8811 	msr	BASEPRI, r3
 80144c8:	f3bf 8f6f 	isb	sy
 80144cc:	f3bf 8f4f 	dsb	sy
 80144d0:	61bb      	str	r3, [r7, #24]
}
 80144d2:	bf00      	nop
 80144d4:	bf00      	nop
 80144d6:	e7fd      	b.n	80144d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80144d8:	f002 f93e 	bl	8016758 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80144dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80144e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80144e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	d01f      	beq.n	8014528 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80144e8:	68b9      	ldr	r1, [r7, #8]
 80144ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80144ec:	f000 fa1e 	bl	801492c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80144f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80144f2:	1e5a      	subs	r2, r3, #1
 80144f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80144f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80144fa:	691b      	ldr	r3, [r3, #16]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d00f      	beq.n	8014520 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014502:	3310      	adds	r3, #16
 8014504:	4618      	mov	r0, r3
 8014506:	f000 ffa7 	bl	8015458 <xTaskRemoveFromEventList>
 801450a:	4603      	mov	r3, r0
 801450c:	2b00      	cmp	r3, #0
 801450e:	d007      	beq.n	8014520 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014510:	4b3c      	ldr	r3, [pc, #240]	@ (8014604 <xQueueReceive+0x1c0>)
 8014512:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014516:	601a      	str	r2, [r3, #0]
 8014518:	f3bf 8f4f 	dsb	sy
 801451c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014520:	f002 f94c 	bl	80167bc <vPortExitCritical>
				return pdPASS;
 8014524:	2301      	movs	r3, #1
 8014526:	e069      	b.n	80145fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	2b00      	cmp	r3, #0
 801452c:	d103      	bne.n	8014536 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801452e:	f002 f945 	bl	80167bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014532:	2300      	movs	r3, #0
 8014534:	e062      	b.n	80145fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014538:	2b00      	cmp	r3, #0
 801453a:	d106      	bne.n	801454a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801453c:	f107 0310 	add.w	r3, r7, #16
 8014540:	4618      	mov	r0, r3
 8014542:	f000 ffed 	bl	8015520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014546:	2301      	movs	r3, #1
 8014548:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801454a:	f002 f937 	bl	80167bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801454e:	f000 fd55 	bl	8014ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014552:	f002 f901 	bl	8016758 <vPortEnterCritical>
 8014556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014558:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801455c:	b25b      	sxtb	r3, r3
 801455e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014562:	d103      	bne.n	801456c <xQueueReceive+0x128>
 8014564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014566:	2200      	movs	r2, #0
 8014568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801456c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801456e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014572:	b25b      	sxtb	r3, r3
 8014574:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014578:	d103      	bne.n	8014582 <xQueueReceive+0x13e>
 801457a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801457c:	2200      	movs	r2, #0
 801457e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014582:	f002 f91b 	bl	80167bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014586:	1d3a      	adds	r2, r7, #4
 8014588:	f107 0310 	add.w	r3, r7, #16
 801458c:	4611      	mov	r1, r2
 801458e:	4618      	mov	r0, r3
 8014590:	f000 ffdc 	bl	801554c <xTaskCheckForTimeOut>
 8014594:	4603      	mov	r3, r0
 8014596:	2b00      	cmp	r3, #0
 8014598:	d123      	bne.n	80145e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801459a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801459c:	f000 fa3e 	bl	8014a1c <prvIsQueueEmpty>
 80145a0:	4603      	mov	r3, r0
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d017      	beq.n	80145d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80145a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145a8:	3324      	adds	r3, #36	@ 0x24
 80145aa:	687a      	ldr	r2, [r7, #4]
 80145ac:	4611      	mov	r1, r2
 80145ae:	4618      	mov	r0, r3
 80145b0:	f000 ff00 	bl	80153b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80145b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145b6:	f000 f9df 	bl	8014978 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80145ba:	f000 fd2d 	bl	8015018 <xTaskResumeAll>
 80145be:	4603      	mov	r3, r0
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d189      	bne.n	80144d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80145c4:	4b0f      	ldr	r3, [pc, #60]	@ (8014604 <xQueueReceive+0x1c0>)
 80145c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80145ca:	601a      	str	r2, [r3, #0]
 80145cc:	f3bf 8f4f 	dsb	sy
 80145d0:	f3bf 8f6f 	isb	sy
 80145d4:	e780      	b.n	80144d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80145d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145d8:	f000 f9ce 	bl	8014978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80145dc:	f000 fd1c 	bl	8015018 <xTaskResumeAll>
 80145e0:	e77a      	b.n	80144d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80145e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145e4:	f000 f9c8 	bl	8014978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80145e8:	f000 fd16 	bl	8015018 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80145ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80145ee:	f000 fa15 	bl	8014a1c <prvIsQueueEmpty>
 80145f2:	4603      	mov	r3, r0
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	f43f af6f 	beq.w	80144d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80145fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80145fc:	4618      	mov	r0, r3
 80145fe:	3730      	adds	r7, #48	@ 0x30
 8014600:	46bd      	mov	sp, r7
 8014602:	bd80      	pop	{r7, pc}
 8014604:	e000ed04 	.word	0xe000ed04

08014608 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b08e      	sub	sp, #56	@ 0x38
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014612:	2300      	movs	r3, #0
 8014614:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801461a:	2300      	movs	r3, #0
 801461c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801461e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014620:	2b00      	cmp	r3, #0
 8014622:	d10b      	bne.n	801463c <xQueueSemaphoreTake+0x34>
	__asm volatile
 8014624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014628:	f383 8811 	msr	BASEPRI, r3
 801462c:	f3bf 8f6f 	isb	sy
 8014630:	f3bf 8f4f 	dsb	sy
 8014634:	623b      	str	r3, [r7, #32]
}
 8014636:	bf00      	nop
 8014638:	bf00      	nop
 801463a:	e7fd      	b.n	8014638 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801463c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801463e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014640:	2b00      	cmp	r3, #0
 8014642:	d00b      	beq.n	801465c <xQueueSemaphoreTake+0x54>
	__asm volatile
 8014644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014648:	f383 8811 	msr	BASEPRI, r3
 801464c:	f3bf 8f6f 	isb	sy
 8014650:	f3bf 8f4f 	dsb	sy
 8014654:	61fb      	str	r3, [r7, #28]
}
 8014656:	bf00      	nop
 8014658:	bf00      	nop
 801465a:	e7fd      	b.n	8014658 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801465c:	f001 f8d2 	bl	8015804 <xTaskGetSchedulerState>
 8014660:	4603      	mov	r3, r0
 8014662:	2b00      	cmp	r3, #0
 8014664:	d102      	bne.n	801466c <xQueueSemaphoreTake+0x64>
 8014666:	683b      	ldr	r3, [r7, #0]
 8014668:	2b00      	cmp	r3, #0
 801466a:	d101      	bne.n	8014670 <xQueueSemaphoreTake+0x68>
 801466c:	2301      	movs	r3, #1
 801466e:	e000      	b.n	8014672 <xQueueSemaphoreTake+0x6a>
 8014670:	2300      	movs	r3, #0
 8014672:	2b00      	cmp	r3, #0
 8014674:	d10b      	bne.n	801468e <xQueueSemaphoreTake+0x86>
	__asm volatile
 8014676:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801467a:	f383 8811 	msr	BASEPRI, r3
 801467e:	f3bf 8f6f 	isb	sy
 8014682:	f3bf 8f4f 	dsb	sy
 8014686:	61bb      	str	r3, [r7, #24]
}
 8014688:	bf00      	nop
 801468a:	bf00      	nop
 801468c:	e7fd      	b.n	801468a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801468e:	f002 f863 	bl	8016758 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014696:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801469a:	2b00      	cmp	r3, #0
 801469c:	d024      	beq.n	80146e8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801469e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80146a0:	1e5a      	subs	r2, r3, #1
 80146a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146a4:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80146a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	2b00      	cmp	r3, #0
 80146ac:	d104      	bne.n	80146b8 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80146ae:	f001 fa23 	bl	8015af8 <pvTaskIncrementMutexHeldCount>
 80146b2:	4602      	mov	r2, r0
 80146b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80146b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146ba:	691b      	ldr	r3, [r3, #16]
 80146bc:	2b00      	cmp	r3, #0
 80146be:	d00f      	beq.n	80146e0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80146c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80146c2:	3310      	adds	r3, #16
 80146c4:	4618      	mov	r0, r3
 80146c6:	f000 fec7 	bl	8015458 <xTaskRemoveFromEventList>
 80146ca:	4603      	mov	r3, r0
 80146cc:	2b00      	cmp	r3, #0
 80146ce:	d007      	beq.n	80146e0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80146d0:	4b54      	ldr	r3, [pc, #336]	@ (8014824 <xQueueSemaphoreTake+0x21c>)
 80146d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146d6:	601a      	str	r2, [r3, #0]
 80146d8:	f3bf 8f4f 	dsb	sy
 80146dc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80146e0:	f002 f86c 	bl	80167bc <vPortExitCritical>
				return pdPASS;
 80146e4:	2301      	movs	r3, #1
 80146e6:	e098      	b.n	801481a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80146e8:	683b      	ldr	r3, [r7, #0]
 80146ea:	2b00      	cmp	r3, #0
 80146ec:	d112      	bne.n	8014714 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80146ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146f0:	2b00      	cmp	r3, #0
 80146f2:	d00b      	beq.n	801470c <xQueueSemaphoreTake+0x104>
	__asm volatile
 80146f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80146f8:	f383 8811 	msr	BASEPRI, r3
 80146fc:	f3bf 8f6f 	isb	sy
 8014700:	f3bf 8f4f 	dsb	sy
 8014704:	617b      	str	r3, [r7, #20]
}
 8014706:	bf00      	nop
 8014708:	bf00      	nop
 801470a:	e7fd      	b.n	8014708 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801470c:	f002 f856 	bl	80167bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014710:	2300      	movs	r3, #0
 8014712:	e082      	b.n	801481a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014716:	2b00      	cmp	r3, #0
 8014718:	d106      	bne.n	8014728 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801471a:	f107 030c 	add.w	r3, r7, #12
 801471e:	4618      	mov	r0, r3
 8014720:	f000 fefe 	bl	8015520 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014724:	2301      	movs	r3, #1
 8014726:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014728:	f002 f848 	bl	80167bc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 801472c:	f000 fc66 	bl	8014ffc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014730:	f002 f812 	bl	8016758 <vPortEnterCritical>
 8014734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014736:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801473a:	b25b      	sxtb	r3, r3
 801473c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014740:	d103      	bne.n	801474a <xQueueSemaphoreTake+0x142>
 8014742:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014744:	2200      	movs	r2, #0
 8014746:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801474a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801474c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014750:	b25b      	sxtb	r3, r3
 8014752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014756:	d103      	bne.n	8014760 <xQueueSemaphoreTake+0x158>
 8014758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801475a:	2200      	movs	r2, #0
 801475c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014760:	f002 f82c 	bl	80167bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014764:	463a      	mov	r2, r7
 8014766:	f107 030c 	add.w	r3, r7, #12
 801476a:	4611      	mov	r1, r2
 801476c:	4618      	mov	r0, r3
 801476e:	f000 feed 	bl	801554c <xTaskCheckForTimeOut>
 8014772:	4603      	mov	r3, r0
 8014774:	2b00      	cmp	r3, #0
 8014776:	d132      	bne.n	80147de <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014778:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801477a:	f000 f94f 	bl	8014a1c <prvIsQueueEmpty>
 801477e:	4603      	mov	r3, r0
 8014780:	2b00      	cmp	r3, #0
 8014782:	d026      	beq.n	80147d2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	2b00      	cmp	r3, #0
 801478a:	d109      	bne.n	80147a0 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 801478c:	f001 ffe4 	bl	8016758 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014792:	689b      	ldr	r3, [r3, #8]
 8014794:	4618      	mov	r0, r3
 8014796:	f001 f853 	bl	8015840 <xTaskPriorityInherit>
 801479a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 801479c:	f002 f80e 	bl	80167bc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80147a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80147a2:	3324      	adds	r3, #36	@ 0x24
 80147a4:	683a      	ldr	r2, [r7, #0]
 80147a6:	4611      	mov	r1, r2
 80147a8:	4618      	mov	r0, r3
 80147aa:	f000 fe03 	bl	80153b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80147ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80147b0:	f000 f8e2 	bl	8014978 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80147b4:	f000 fc30 	bl	8015018 <xTaskResumeAll>
 80147b8:	4603      	mov	r3, r0
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	f47f af67 	bne.w	801468e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80147c0:	4b18      	ldr	r3, [pc, #96]	@ (8014824 <xQueueSemaphoreTake+0x21c>)
 80147c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80147c6:	601a      	str	r2, [r3, #0]
 80147c8:	f3bf 8f4f 	dsb	sy
 80147cc:	f3bf 8f6f 	isb	sy
 80147d0:	e75d      	b.n	801468e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80147d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80147d4:	f000 f8d0 	bl	8014978 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80147d8:	f000 fc1e 	bl	8015018 <xTaskResumeAll>
 80147dc:	e757      	b.n	801468e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80147de:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80147e0:	f000 f8ca 	bl	8014978 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80147e4:	f000 fc18 	bl	8015018 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80147e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80147ea:	f000 f917 	bl	8014a1c <prvIsQueueEmpty>
 80147ee:	4603      	mov	r3, r0
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	f43f af4c 	beq.w	801468e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80147f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d00d      	beq.n	8014818 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80147fc:	f001 ffac 	bl	8016758 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014800:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014802:	f000 f811 	bl	8014828 <prvGetDisinheritPriorityAfterTimeout>
 8014806:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801480a:	689b      	ldr	r3, [r3, #8]
 801480c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801480e:	4618      	mov	r0, r3
 8014810:	f001 f8ee 	bl	80159f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014814:	f001 ffd2 	bl	80167bc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014818:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801481a:	4618      	mov	r0, r3
 801481c:	3738      	adds	r7, #56	@ 0x38
 801481e:	46bd      	mov	sp, r7
 8014820:	bd80      	pop	{r7, pc}
 8014822:	bf00      	nop
 8014824:	e000ed04 	.word	0xe000ed04

08014828 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014828:	b480      	push	{r7}
 801482a:	b085      	sub	sp, #20
 801482c:	af00      	add	r7, sp, #0
 801482e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014834:	2b00      	cmp	r3, #0
 8014836:	d006      	beq.n	8014846 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014838:	687b      	ldr	r3, [r7, #4]
 801483a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8014842:	60fb      	str	r3, [r7, #12]
 8014844:	e001      	b.n	801484a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014846:	2300      	movs	r3, #0
 8014848:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801484a:	68fb      	ldr	r3, [r7, #12]
	}
 801484c:	4618      	mov	r0, r3
 801484e:	3714      	adds	r7, #20
 8014850:	46bd      	mov	sp, r7
 8014852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014856:	4770      	bx	lr

08014858 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014858:	b580      	push	{r7, lr}
 801485a:	b086      	sub	sp, #24
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014864:	2300      	movs	r3, #0
 8014866:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801486c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014872:	2b00      	cmp	r3, #0
 8014874:	d10d      	bne.n	8014892 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	2b00      	cmp	r3, #0
 801487c:	d14d      	bne.n	801491a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	689b      	ldr	r3, [r3, #8]
 8014882:	4618      	mov	r0, r3
 8014884:	f001 f844 	bl	8015910 <xTaskPriorityDisinherit>
 8014888:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	2200      	movs	r2, #0
 801488e:	609a      	str	r2, [r3, #8]
 8014890:	e043      	b.n	801491a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d119      	bne.n	80148cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014898:	68fb      	ldr	r3, [r7, #12]
 801489a:	6858      	ldr	r0, [r3, #4]
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148a0:	461a      	mov	r2, r3
 80148a2:	68b9      	ldr	r1, [r7, #8]
 80148a4:	f005 ff0b 	bl	801a6be <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80148a8:	68fb      	ldr	r3, [r7, #12]
 80148aa:	685a      	ldr	r2, [r3, #4]
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148b0:	441a      	add	r2, r3
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80148b6:	68fb      	ldr	r3, [r7, #12]
 80148b8:	685a      	ldr	r2, [r3, #4]
 80148ba:	68fb      	ldr	r3, [r7, #12]
 80148bc:	689b      	ldr	r3, [r3, #8]
 80148be:	429a      	cmp	r2, r3
 80148c0:	d32b      	bcc.n	801491a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80148c2:	68fb      	ldr	r3, [r7, #12]
 80148c4:	681a      	ldr	r2, [r3, #0]
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	605a      	str	r2, [r3, #4]
 80148ca:	e026      	b.n	801491a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	68d8      	ldr	r0, [r3, #12]
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148d4:	461a      	mov	r2, r3
 80148d6:	68b9      	ldr	r1, [r7, #8]
 80148d8:	f005 fef1 	bl	801a6be <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	68da      	ldr	r2, [r3, #12]
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80148e4:	425b      	negs	r3, r3
 80148e6:	441a      	add	r2, r3
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	68da      	ldr	r2, [r3, #12]
 80148f0:	68fb      	ldr	r3, [r7, #12]
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d207      	bcs.n	8014908 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80148f8:	68fb      	ldr	r3, [r7, #12]
 80148fa:	689a      	ldr	r2, [r3, #8]
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014900:	425b      	negs	r3, r3
 8014902:	441a      	add	r2, r3
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	2b02      	cmp	r3, #2
 801490c:	d105      	bne.n	801491a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	2b00      	cmp	r3, #0
 8014912:	d002      	beq.n	801491a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	3b01      	subs	r3, #1
 8014918:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801491a:	693b      	ldr	r3, [r7, #16]
 801491c:	1c5a      	adds	r2, r3, #1
 801491e:	68fb      	ldr	r3, [r7, #12]
 8014920:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8014922:	697b      	ldr	r3, [r7, #20]
}
 8014924:	4618      	mov	r0, r3
 8014926:	3718      	adds	r7, #24
 8014928:	46bd      	mov	sp, r7
 801492a:	bd80      	pop	{r7, pc}

0801492c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b082      	sub	sp, #8
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
 8014934:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801493a:	2b00      	cmp	r3, #0
 801493c:	d018      	beq.n	8014970 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	68da      	ldr	r2, [r3, #12]
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014946:	441a      	add	r2, r3
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801494c:	687b      	ldr	r3, [r7, #4]
 801494e:	68da      	ldr	r2, [r3, #12]
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	689b      	ldr	r3, [r3, #8]
 8014954:	429a      	cmp	r2, r3
 8014956:	d303      	bcc.n	8014960 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	681a      	ldr	r2, [r3, #0]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	68d9      	ldr	r1, [r3, #12]
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014968:	461a      	mov	r2, r3
 801496a:	6838      	ldr	r0, [r7, #0]
 801496c:	f005 fea7 	bl	801a6be <memcpy>
	}
}
 8014970:	bf00      	nop
 8014972:	3708      	adds	r7, #8
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}

08014978 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014978:	b580      	push	{r7, lr}
 801497a:	b084      	sub	sp, #16
 801497c:	af00      	add	r7, sp, #0
 801497e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014980:	f001 feea 	bl	8016758 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801498a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801498c:	e011      	b.n	80149b2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801498e:	687b      	ldr	r3, [r7, #4]
 8014990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014992:	2b00      	cmp	r3, #0
 8014994:	d012      	beq.n	80149bc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	3324      	adds	r3, #36	@ 0x24
 801499a:	4618      	mov	r0, r3
 801499c:	f000 fd5c 	bl	8015458 <xTaskRemoveFromEventList>
 80149a0:	4603      	mov	r3, r0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d001      	beq.n	80149aa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80149a6:	f000 fe35 	bl	8015614 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80149aa:	7bfb      	ldrb	r3, [r7, #15]
 80149ac:	3b01      	subs	r3, #1
 80149ae:	b2db      	uxtb	r3, r3
 80149b0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80149b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	dce9      	bgt.n	801498e <prvUnlockQueue+0x16>
 80149ba:	e000      	b.n	80149be <prvUnlockQueue+0x46>
					break;
 80149bc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	22ff      	movs	r2, #255	@ 0xff
 80149c2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80149c6:	f001 fef9 	bl	80167bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80149ca:	f001 fec5 	bl	8016758 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80149d4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80149d6:	e011      	b.n	80149fc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	691b      	ldr	r3, [r3, #16]
 80149dc:	2b00      	cmp	r3, #0
 80149de:	d012      	beq.n	8014a06 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	3310      	adds	r3, #16
 80149e4:	4618      	mov	r0, r3
 80149e6:	f000 fd37 	bl	8015458 <xTaskRemoveFromEventList>
 80149ea:	4603      	mov	r3, r0
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d001      	beq.n	80149f4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80149f0:	f000 fe10 	bl	8015614 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80149f4:	7bbb      	ldrb	r3, [r7, #14]
 80149f6:	3b01      	subs	r3, #1
 80149f8:	b2db      	uxtb	r3, r3
 80149fa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80149fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	dce9      	bgt.n	80149d8 <prvUnlockQueue+0x60>
 8014a04:	e000      	b.n	8014a08 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014a06:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	22ff      	movs	r2, #255	@ 0xff
 8014a0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014a10:	f001 fed4 	bl	80167bc <vPortExitCritical>
}
 8014a14:	bf00      	nop
 8014a16:	3710      	adds	r7, #16
 8014a18:	46bd      	mov	sp, r7
 8014a1a:	bd80      	pop	{r7, pc}

08014a1c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014a1c:	b580      	push	{r7, lr}
 8014a1e:	b084      	sub	sp, #16
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014a24:	f001 fe98 	bl	8016758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d102      	bne.n	8014a36 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014a30:	2301      	movs	r3, #1
 8014a32:	60fb      	str	r3, [r7, #12]
 8014a34:	e001      	b.n	8014a3a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014a36:	2300      	movs	r3, #0
 8014a38:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014a3a:	f001 febf 	bl	80167bc <vPortExitCritical>

	return xReturn;
 8014a3e:	68fb      	ldr	r3, [r7, #12]
}
 8014a40:	4618      	mov	r0, r3
 8014a42:	3710      	adds	r7, #16
 8014a44:	46bd      	mov	sp, r7
 8014a46:	bd80      	pop	{r7, pc}

08014a48 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014a48:	b580      	push	{r7, lr}
 8014a4a:	b084      	sub	sp, #16
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014a50:	f001 fe82 	bl	8016758 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014a5c:	429a      	cmp	r2, r3
 8014a5e:	d102      	bne.n	8014a66 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014a60:	2301      	movs	r3, #1
 8014a62:	60fb      	str	r3, [r7, #12]
 8014a64:	e001      	b.n	8014a6a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014a66:	2300      	movs	r3, #0
 8014a68:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014a6a:	f001 fea7 	bl	80167bc <vPortExitCritical>

	return xReturn;
 8014a6e:	68fb      	ldr	r3, [r7, #12]
}
 8014a70:	4618      	mov	r0, r3
 8014a72:	3710      	adds	r7, #16
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bd80      	pop	{r7, pc}

08014a78 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014a78:	b480      	push	{r7}
 8014a7a:	b085      	sub	sp, #20
 8014a7c:	af00      	add	r7, sp, #0
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014a82:	2300      	movs	r3, #0
 8014a84:	60fb      	str	r3, [r7, #12]
 8014a86:	e014      	b.n	8014ab2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014a88:	4a0f      	ldr	r2, [pc, #60]	@ (8014ac8 <vQueueAddToRegistry+0x50>)
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d10b      	bne.n	8014aac <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014a94:	490c      	ldr	r1, [pc, #48]	@ (8014ac8 <vQueueAddToRegistry+0x50>)
 8014a96:	68fb      	ldr	r3, [r7, #12]
 8014a98:	683a      	ldr	r2, [r7, #0]
 8014a9a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014a9e:	4a0a      	ldr	r2, [pc, #40]	@ (8014ac8 <vQueueAddToRegistry+0x50>)
 8014aa0:	68fb      	ldr	r3, [r7, #12]
 8014aa2:	00db      	lsls	r3, r3, #3
 8014aa4:	4413      	add	r3, r2
 8014aa6:	687a      	ldr	r2, [r7, #4]
 8014aa8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014aaa:	e006      	b.n	8014aba <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	3301      	adds	r3, #1
 8014ab0:	60fb      	str	r3, [r7, #12]
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	2b07      	cmp	r3, #7
 8014ab6:	d9e7      	bls.n	8014a88 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014ab8:	bf00      	nop
 8014aba:	bf00      	nop
 8014abc:	3714      	adds	r7, #20
 8014abe:	46bd      	mov	sp, r7
 8014ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac4:	4770      	bx	lr
 8014ac6:	bf00      	nop
 8014ac8:	200046f0 	.word	0x200046f0

08014acc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b086      	sub	sp, #24
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	60f8      	str	r0, [r7, #12]
 8014ad4:	60b9      	str	r1, [r7, #8]
 8014ad6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014adc:	f001 fe3c 	bl	8016758 <vPortEnterCritical>
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014ae6:	b25b      	sxtb	r3, r3
 8014ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014aec:	d103      	bne.n	8014af6 <vQueueWaitForMessageRestricted+0x2a>
 8014aee:	697b      	ldr	r3, [r7, #20]
 8014af0:	2200      	movs	r2, #0
 8014af2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014af6:	697b      	ldr	r3, [r7, #20]
 8014af8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014afc:	b25b      	sxtb	r3, r3
 8014afe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b02:	d103      	bne.n	8014b0c <vQueueWaitForMessageRestricted+0x40>
 8014b04:	697b      	ldr	r3, [r7, #20]
 8014b06:	2200      	movs	r2, #0
 8014b08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014b0c:	f001 fe56 	bl	80167bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014b10:	697b      	ldr	r3, [r7, #20]
 8014b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014b14:	2b00      	cmp	r3, #0
 8014b16:	d106      	bne.n	8014b26 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014b18:	697b      	ldr	r3, [r7, #20]
 8014b1a:	3324      	adds	r3, #36	@ 0x24
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	68b9      	ldr	r1, [r7, #8]
 8014b20:	4618      	mov	r0, r3
 8014b22:	f000 fc6d 	bl	8015400 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014b26:	6978      	ldr	r0, [r7, #20]
 8014b28:	f7ff ff26 	bl	8014978 <prvUnlockQueue>
	}
 8014b2c:	bf00      	nop
 8014b2e:	3718      	adds	r7, #24
 8014b30:	46bd      	mov	sp, r7
 8014b32:	bd80      	pop	{r7, pc}

08014b34 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014b34:	b580      	push	{r7, lr}
 8014b36:	b08e      	sub	sp, #56	@ 0x38
 8014b38:	af04      	add	r7, sp, #16
 8014b3a:	60f8      	str	r0, [r7, #12]
 8014b3c:	60b9      	str	r1, [r7, #8]
 8014b3e:	607a      	str	r2, [r7, #4]
 8014b40:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014b42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d10b      	bne.n	8014b60 <xTaskCreateStatic+0x2c>
	__asm volatile
 8014b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b4c:	f383 8811 	msr	BASEPRI, r3
 8014b50:	f3bf 8f6f 	isb	sy
 8014b54:	f3bf 8f4f 	dsb	sy
 8014b58:	623b      	str	r3, [r7, #32]
}
 8014b5a:	bf00      	nop
 8014b5c:	bf00      	nop
 8014b5e:	e7fd      	b.n	8014b5c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b62:	2b00      	cmp	r3, #0
 8014b64:	d10b      	bne.n	8014b7e <xTaskCreateStatic+0x4a>
	__asm volatile
 8014b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b6a:	f383 8811 	msr	BASEPRI, r3
 8014b6e:	f3bf 8f6f 	isb	sy
 8014b72:	f3bf 8f4f 	dsb	sy
 8014b76:	61fb      	str	r3, [r7, #28]
}
 8014b78:	bf00      	nop
 8014b7a:	bf00      	nop
 8014b7c:	e7fd      	b.n	8014b7a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014b7e:	23a8      	movs	r3, #168	@ 0xa8
 8014b80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014b82:	693b      	ldr	r3, [r7, #16]
 8014b84:	2ba8      	cmp	r3, #168	@ 0xa8
 8014b86:	d00b      	beq.n	8014ba0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8014b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b8c:	f383 8811 	msr	BASEPRI, r3
 8014b90:	f3bf 8f6f 	isb	sy
 8014b94:	f3bf 8f4f 	dsb	sy
 8014b98:	61bb      	str	r3, [r7, #24]
}
 8014b9a:	bf00      	nop
 8014b9c:	bf00      	nop
 8014b9e:	e7fd      	b.n	8014b9c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014ba0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d01e      	beq.n	8014be6 <xTaskCreateStatic+0xb2>
 8014ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d01b      	beq.n	8014be6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014bae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014bb0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bb4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014bb6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014bb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bba:	2202      	movs	r2, #2
 8014bbc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	9303      	str	r3, [sp, #12]
 8014bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014bc6:	9302      	str	r3, [sp, #8]
 8014bc8:	f107 0314 	add.w	r3, r7, #20
 8014bcc:	9301      	str	r3, [sp, #4]
 8014bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014bd0:	9300      	str	r3, [sp, #0]
 8014bd2:	683b      	ldr	r3, [r7, #0]
 8014bd4:	687a      	ldr	r2, [r7, #4]
 8014bd6:	68b9      	ldr	r1, [r7, #8]
 8014bd8:	68f8      	ldr	r0, [r7, #12]
 8014bda:	f000 f851 	bl	8014c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014bde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014be0:	f000 f8f6 	bl	8014dd0 <prvAddNewTaskToReadyList>
 8014be4:	e001      	b.n	8014bea <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014be6:	2300      	movs	r3, #0
 8014be8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014bea:	697b      	ldr	r3, [r7, #20]
	}
 8014bec:	4618      	mov	r0, r3
 8014bee:	3728      	adds	r7, #40	@ 0x28
 8014bf0:	46bd      	mov	sp, r7
 8014bf2:	bd80      	pop	{r7, pc}

08014bf4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b08c      	sub	sp, #48	@ 0x30
 8014bf8:	af04      	add	r7, sp, #16
 8014bfa:	60f8      	str	r0, [r7, #12]
 8014bfc:	60b9      	str	r1, [r7, #8]
 8014bfe:	603b      	str	r3, [r7, #0]
 8014c00:	4613      	mov	r3, r2
 8014c02:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014c04:	88fb      	ldrh	r3, [r7, #6]
 8014c06:	009b      	lsls	r3, r3, #2
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f001 fec7 	bl	801699c <pvPortMalloc>
 8014c0e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	2b00      	cmp	r3, #0
 8014c14:	d00e      	beq.n	8014c34 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014c16:	20a8      	movs	r0, #168	@ 0xa8
 8014c18:	f001 fec0 	bl	801699c <pvPortMalloc>
 8014c1c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014c1e:	69fb      	ldr	r3, [r7, #28]
 8014c20:	2b00      	cmp	r3, #0
 8014c22:	d003      	beq.n	8014c2c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014c24:	69fb      	ldr	r3, [r7, #28]
 8014c26:	697a      	ldr	r2, [r7, #20]
 8014c28:	631a      	str	r2, [r3, #48]	@ 0x30
 8014c2a:	e005      	b.n	8014c38 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014c2c:	6978      	ldr	r0, [r7, #20]
 8014c2e:	f001 ff83 	bl	8016b38 <vPortFree>
 8014c32:	e001      	b.n	8014c38 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8014c34:	2300      	movs	r3, #0
 8014c36:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8014c38:	69fb      	ldr	r3, [r7, #28]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d017      	beq.n	8014c6e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014c3e:	69fb      	ldr	r3, [r7, #28]
 8014c40:	2200      	movs	r2, #0
 8014c42:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8014c46:	88fa      	ldrh	r2, [r7, #6]
 8014c48:	2300      	movs	r3, #0
 8014c4a:	9303      	str	r3, [sp, #12]
 8014c4c:	69fb      	ldr	r3, [r7, #28]
 8014c4e:	9302      	str	r3, [sp, #8]
 8014c50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c52:	9301      	str	r3, [sp, #4]
 8014c54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014c56:	9300      	str	r3, [sp, #0]
 8014c58:	683b      	ldr	r3, [r7, #0]
 8014c5a:	68b9      	ldr	r1, [r7, #8]
 8014c5c:	68f8      	ldr	r0, [r7, #12]
 8014c5e:	f000 f80f 	bl	8014c80 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014c62:	69f8      	ldr	r0, [r7, #28]
 8014c64:	f000 f8b4 	bl	8014dd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8014c68:	2301      	movs	r3, #1
 8014c6a:	61bb      	str	r3, [r7, #24]
 8014c6c:	e002      	b.n	8014c74 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c72:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8014c74:	69bb      	ldr	r3, [r7, #24]
	}
 8014c76:	4618      	mov	r0, r3
 8014c78:	3720      	adds	r7, #32
 8014c7a:	46bd      	mov	sp, r7
 8014c7c:	bd80      	pop	{r7, pc}
	...

08014c80 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b088      	sub	sp, #32
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	60f8      	str	r0, [r7, #12]
 8014c88:	60b9      	str	r1, [r7, #8]
 8014c8a:	607a      	str	r2, [r7, #4]
 8014c8c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8014c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c90:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	009b      	lsls	r3, r3, #2
 8014c96:	461a      	mov	r2, r3
 8014c98:	21a5      	movs	r1, #165	@ 0xa5
 8014c9a:	f005 fc33 	bl	801a504 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014c9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014ca0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8014ca2:	687b      	ldr	r3, [r7, #4]
 8014ca4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8014ca8:	3b01      	subs	r3, #1
 8014caa:	009b      	lsls	r3, r3, #2
 8014cac:	4413      	add	r3, r2
 8014cae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014cb0:	69bb      	ldr	r3, [r7, #24]
 8014cb2:	f023 0307 	bic.w	r3, r3, #7
 8014cb6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014cb8:	69bb      	ldr	r3, [r7, #24]
 8014cba:	f003 0307 	and.w	r3, r3, #7
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d00b      	beq.n	8014cda <prvInitialiseNewTask+0x5a>
	__asm volatile
 8014cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014cc6:	f383 8811 	msr	BASEPRI, r3
 8014cca:	f3bf 8f6f 	isb	sy
 8014cce:	f3bf 8f4f 	dsb	sy
 8014cd2:	617b      	str	r3, [r7, #20]
}
 8014cd4:	bf00      	nop
 8014cd6:	bf00      	nop
 8014cd8:	e7fd      	b.n	8014cd6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014cda:	68bb      	ldr	r3, [r7, #8]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d01f      	beq.n	8014d20 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014ce0:	2300      	movs	r3, #0
 8014ce2:	61fb      	str	r3, [r7, #28]
 8014ce4:	e012      	b.n	8014d0c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014ce6:	68ba      	ldr	r2, [r7, #8]
 8014ce8:	69fb      	ldr	r3, [r7, #28]
 8014cea:	4413      	add	r3, r2
 8014cec:	7819      	ldrb	r1, [r3, #0]
 8014cee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014cf0:	69fb      	ldr	r3, [r7, #28]
 8014cf2:	4413      	add	r3, r2
 8014cf4:	3334      	adds	r3, #52	@ 0x34
 8014cf6:	460a      	mov	r2, r1
 8014cf8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014cfa:	68ba      	ldr	r2, [r7, #8]
 8014cfc:	69fb      	ldr	r3, [r7, #28]
 8014cfe:	4413      	add	r3, r2
 8014d00:	781b      	ldrb	r3, [r3, #0]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d006      	beq.n	8014d14 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014d06:	69fb      	ldr	r3, [r7, #28]
 8014d08:	3301      	adds	r3, #1
 8014d0a:	61fb      	str	r3, [r7, #28]
 8014d0c:	69fb      	ldr	r3, [r7, #28]
 8014d0e:	2b0f      	cmp	r3, #15
 8014d10:	d9e9      	bls.n	8014ce6 <prvInitialiseNewTask+0x66>
 8014d12:	e000      	b.n	8014d16 <prvInitialiseNewTask+0x96>
			{
				break;
 8014d14:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d18:	2200      	movs	r2, #0
 8014d1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014d1e:	e003      	b.n	8014d28 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d22:	2200      	movs	r2, #0
 8014d24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d2a:	2b37      	cmp	r3, #55	@ 0x37
 8014d2c:	d901      	bls.n	8014d32 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014d2e:	2337      	movs	r3, #55	@ 0x37
 8014d30:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d36:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8014d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d3c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d40:	2200      	movs	r2, #0
 8014d42:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014d44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d46:	3304      	adds	r3, #4
 8014d48:	4618      	mov	r0, r3
 8014d4a:	f7fe ffcf 	bl	8013cec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d50:	3318      	adds	r3, #24
 8014d52:	4618      	mov	r0, r3
 8014d54:	f7fe ffca 	bl	8013cec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d5c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d60:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8014d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d66:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014d6c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014d6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d70:	2200      	movs	r2, #0
 8014d72:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d78:	2200      	movs	r2, #0
 8014d7a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8014d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d80:	3354      	adds	r3, #84	@ 0x54
 8014d82:	224c      	movs	r2, #76	@ 0x4c
 8014d84:	2100      	movs	r1, #0
 8014d86:	4618      	mov	r0, r3
 8014d88:	f005 fbbc 	bl	801a504 <memset>
 8014d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8014dc4 <prvInitialiseNewTask+0x144>)
 8014d90:	659a      	str	r2, [r3, #88]	@ 0x58
 8014d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d94:	4a0c      	ldr	r2, [pc, #48]	@ (8014dc8 <prvInitialiseNewTask+0x148>)
 8014d96:	65da      	str	r2, [r3, #92]	@ 0x5c
 8014d98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d9a:	4a0c      	ldr	r2, [pc, #48]	@ (8014dcc <prvInitialiseNewTask+0x14c>)
 8014d9c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8014d9e:	683a      	ldr	r2, [r7, #0]
 8014da0:	68f9      	ldr	r1, [r7, #12]
 8014da2:	69b8      	ldr	r0, [r7, #24]
 8014da4:	f001 fbaa 	bl	80164fc <pxPortInitialiseStack>
 8014da8:	4602      	mov	r2, r0
 8014daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8014dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d002      	beq.n	8014dba <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014db8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014dba:	bf00      	nop
 8014dbc:	3720      	adds	r7, #32
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}
 8014dc2:	bf00      	nop
 8014dc4:	2000a564 	.word	0x2000a564
 8014dc8:	2000a5cc 	.word	0x2000a5cc
 8014dcc:	2000a634 	.word	0x2000a634

08014dd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014dd8:	f001 fcbe 	bl	8016758 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8014e94 <prvAddNewTaskToReadyList+0xc4>)
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	3301      	adds	r3, #1
 8014de2:	4a2c      	ldr	r2, [pc, #176]	@ (8014e94 <prvAddNewTaskToReadyList+0xc4>)
 8014de4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014de6:	4b2c      	ldr	r3, [pc, #176]	@ (8014e98 <prvAddNewTaskToReadyList+0xc8>)
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	2b00      	cmp	r3, #0
 8014dec:	d109      	bne.n	8014e02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014dee:	4a2a      	ldr	r2, [pc, #168]	@ (8014e98 <prvAddNewTaskToReadyList+0xc8>)
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014df4:	4b27      	ldr	r3, [pc, #156]	@ (8014e94 <prvAddNewTaskToReadyList+0xc4>)
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	2b01      	cmp	r3, #1
 8014dfa:	d110      	bne.n	8014e1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014dfc:	f000 fc2e 	bl	801565c <prvInitialiseTaskLists>
 8014e00:	e00d      	b.n	8014e1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014e02:	4b26      	ldr	r3, [pc, #152]	@ (8014e9c <prvAddNewTaskToReadyList+0xcc>)
 8014e04:	681b      	ldr	r3, [r3, #0]
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d109      	bne.n	8014e1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8014e0a:	4b23      	ldr	r3, [pc, #140]	@ (8014e98 <prvAddNewTaskToReadyList+0xc8>)
 8014e0c:	681b      	ldr	r3, [r3, #0]
 8014e0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e14:	429a      	cmp	r2, r3
 8014e16:	d802      	bhi.n	8014e1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014e18:	4a1f      	ldr	r2, [pc, #124]	@ (8014e98 <prvAddNewTaskToReadyList+0xc8>)
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014e1e:	4b20      	ldr	r3, [pc, #128]	@ (8014ea0 <prvAddNewTaskToReadyList+0xd0>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	3301      	adds	r3, #1
 8014e24:	4a1e      	ldr	r2, [pc, #120]	@ (8014ea0 <prvAddNewTaskToReadyList+0xd0>)
 8014e26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014e28:	4b1d      	ldr	r3, [pc, #116]	@ (8014ea0 <prvAddNewTaskToReadyList+0xd0>)
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	687b      	ldr	r3, [r7, #4]
 8014e2e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e34:	4b1b      	ldr	r3, [pc, #108]	@ (8014ea4 <prvAddNewTaskToReadyList+0xd4>)
 8014e36:	681b      	ldr	r3, [r3, #0]
 8014e38:	429a      	cmp	r2, r3
 8014e3a:	d903      	bls.n	8014e44 <prvAddNewTaskToReadyList+0x74>
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e40:	4a18      	ldr	r2, [pc, #96]	@ (8014ea4 <prvAddNewTaskToReadyList+0xd4>)
 8014e42:	6013      	str	r3, [r2, #0]
 8014e44:	687b      	ldr	r3, [r7, #4]
 8014e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e48:	4613      	mov	r3, r2
 8014e4a:	009b      	lsls	r3, r3, #2
 8014e4c:	4413      	add	r3, r2
 8014e4e:	009b      	lsls	r3, r3, #2
 8014e50:	4a15      	ldr	r2, [pc, #84]	@ (8014ea8 <prvAddNewTaskToReadyList+0xd8>)
 8014e52:	441a      	add	r2, r3
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	3304      	adds	r3, #4
 8014e58:	4619      	mov	r1, r3
 8014e5a:	4610      	mov	r0, r2
 8014e5c:	f7fe ff53 	bl	8013d06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014e60:	f001 fcac 	bl	80167bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014e64:	4b0d      	ldr	r3, [pc, #52]	@ (8014e9c <prvAddNewTaskToReadyList+0xcc>)
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d00e      	beq.n	8014e8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8014e98 <prvAddNewTaskToReadyList+0xc8>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014e76:	429a      	cmp	r2, r3
 8014e78:	d207      	bcs.n	8014e8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8014e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8014eac <prvAddNewTaskToReadyList+0xdc>)
 8014e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014e80:	601a      	str	r2, [r3, #0]
 8014e82:	f3bf 8f4f 	dsb	sy
 8014e86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014e8a:	bf00      	nop
 8014e8c:	3708      	adds	r7, #8
 8014e8e:	46bd      	mov	sp, r7
 8014e90:	bd80      	pop	{r7, pc}
 8014e92:	bf00      	nop
 8014e94:	20004c04 	.word	0x20004c04
 8014e98:	20004730 	.word	0x20004730
 8014e9c:	20004c10 	.word	0x20004c10
 8014ea0:	20004c20 	.word	0x20004c20
 8014ea4:	20004c0c 	.word	0x20004c0c
 8014ea8:	20004734 	.word	0x20004734
 8014eac:	e000ed04 	.word	0xe000ed04

08014eb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b084      	sub	sp, #16
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014eb8:	2300      	movs	r3, #0
 8014eba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d018      	beq.n	8014ef4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014ec2:	4b14      	ldr	r3, [pc, #80]	@ (8014f14 <vTaskDelay+0x64>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d00b      	beq.n	8014ee2 <vTaskDelay+0x32>
	__asm volatile
 8014eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ece:	f383 8811 	msr	BASEPRI, r3
 8014ed2:	f3bf 8f6f 	isb	sy
 8014ed6:	f3bf 8f4f 	dsb	sy
 8014eda:	60bb      	str	r3, [r7, #8]
}
 8014edc:	bf00      	nop
 8014ede:	bf00      	nop
 8014ee0:	e7fd      	b.n	8014ede <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014ee2:	f000 f88b 	bl	8014ffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014ee6:	2100      	movs	r1, #0
 8014ee8:	6878      	ldr	r0, [r7, #4]
 8014eea:	f000 fefb 	bl	8015ce4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014eee:	f000 f893 	bl	8015018 <xTaskResumeAll>
 8014ef2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014ef4:	68fb      	ldr	r3, [r7, #12]
 8014ef6:	2b00      	cmp	r3, #0
 8014ef8:	d107      	bne.n	8014f0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8014efa:	4b07      	ldr	r3, [pc, #28]	@ (8014f18 <vTaskDelay+0x68>)
 8014efc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f00:	601a      	str	r2, [r3, #0]
 8014f02:	f3bf 8f4f 	dsb	sy
 8014f06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014f0a:	bf00      	nop
 8014f0c:	3710      	adds	r7, #16
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	bf00      	nop
 8014f14:	20004c2c 	.word	0x20004c2c
 8014f18:	e000ed04 	.word	0xe000ed04

08014f1c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014f1c:	b580      	push	{r7, lr}
 8014f1e:	b08a      	sub	sp, #40	@ 0x28
 8014f20:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014f22:	2300      	movs	r3, #0
 8014f24:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014f26:	2300      	movs	r3, #0
 8014f28:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014f2a:	463a      	mov	r2, r7
 8014f2c:	1d39      	adds	r1, r7, #4
 8014f2e:	f107 0308 	add.w	r3, r7, #8
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7fe fe86 	bl	8013c44 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014f38:	6839      	ldr	r1, [r7, #0]
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	68ba      	ldr	r2, [r7, #8]
 8014f3e:	9202      	str	r2, [sp, #8]
 8014f40:	9301      	str	r3, [sp, #4]
 8014f42:	2300      	movs	r3, #0
 8014f44:	9300      	str	r3, [sp, #0]
 8014f46:	2300      	movs	r3, #0
 8014f48:	460a      	mov	r2, r1
 8014f4a:	4924      	ldr	r1, [pc, #144]	@ (8014fdc <vTaskStartScheduler+0xc0>)
 8014f4c:	4824      	ldr	r0, [pc, #144]	@ (8014fe0 <vTaskStartScheduler+0xc4>)
 8014f4e:	f7ff fdf1 	bl	8014b34 <xTaskCreateStatic>
 8014f52:	4603      	mov	r3, r0
 8014f54:	4a23      	ldr	r2, [pc, #140]	@ (8014fe4 <vTaskStartScheduler+0xc8>)
 8014f56:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014f58:	4b22      	ldr	r3, [pc, #136]	@ (8014fe4 <vTaskStartScheduler+0xc8>)
 8014f5a:	681b      	ldr	r3, [r3, #0]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d002      	beq.n	8014f66 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014f60:	2301      	movs	r3, #1
 8014f62:	617b      	str	r3, [r7, #20]
 8014f64:	e001      	b.n	8014f6a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014f66:	2300      	movs	r3, #0
 8014f68:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014f6a:	697b      	ldr	r3, [r7, #20]
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	d102      	bne.n	8014f76 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014f70:	f000 ff0c 	bl	8015d8c <xTimerCreateTimerTask>
 8014f74:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014f76:	697b      	ldr	r3, [r7, #20]
 8014f78:	2b01      	cmp	r3, #1
 8014f7a:	d11b      	bne.n	8014fb4 <vTaskStartScheduler+0x98>
	__asm volatile
 8014f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f80:	f383 8811 	msr	BASEPRI, r3
 8014f84:	f3bf 8f6f 	isb	sy
 8014f88:	f3bf 8f4f 	dsb	sy
 8014f8c:	613b      	str	r3, [r7, #16]
}
 8014f8e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014f90:	4b15      	ldr	r3, [pc, #84]	@ (8014fe8 <vTaskStartScheduler+0xcc>)
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	3354      	adds	r3, #84	@ 0x54
 8014f96:	4a15      	ldr	r2, [pc, #84]	@ (8014fec <vTaskStartScheduler+0xd0>)
 8014f98:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014f9a:	4b15      	ldr	r3, [pc, #84]	@ (8014ff0 <vTaskStartScheduler+0xd4>)
 8014f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8014fa0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014fa2:	4b14      	ldr	r3, [pc, #80]	@ (8014ff4 <vTaskStartScheduler+0xd8>)
 8014fa4:	2201      	movs	r2, #1
 8014fa6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014fa8:	4b13      	ldr	r3, [pc, #76]	@ (8014ff8 <vTaskStartScheduler+0xdc>)
 8014faa:	2200      	movs	r2, #0
 8014fac:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014fae:	f001 fb2f 	bl	8016610 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014fb2:	e00f      	b.n	8014fd4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014fb4:	697b      	ldr	r3, [r7, #20]
 8014fb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014fba:	d10b      	bne.n	8014fd4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8014fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc0:	f383 8811 	msr	BASEPRI, r3
 8014fc4:	f3bf 8f6f 	isb	sy
 8014fc8:	f3bf 8f4f 	dsb	sy
 8014fcc:	60fb      	str	r3, [r7, #12]
}
 8014fce:	bf00      	nop
 8014fd0:	bf00      	nop
 8014fd2:	e7fd      	b.n	8014fd0 <vTaskStartScheduler+0xb4>
}
 8014fd4:	bf00      	nop
 8014fd6:	3718      	adds	r7, #24
 8014fd8:	46bd      	mov	sp, r7
 8014fda:	bd80      	pop	{r7, pc}
 8014fdc:	08020144 	.word	0x08020144
 8014fe0:	0801562d 	.word	0x0801562d
 8014fe4:	20004c28 	.word	0x20004c28
 8014fe8:	20004730 	.word	0x20004730
 8014fec:	20000160 	.word	0x20000160
 8014ff0:	20004c24 	.word	0x20004c24
 8014ff4:	20004c10 	.word	0x20004c10
 8014ff8:	20004c08 	.word	0x20004c08

08014ffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014ffc:	b480      	push	{r7}
 8014ffe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015000:	4b04      	ldr	r3, [pc, #16]	@ (8015014 <vTaskSuspendAll+0x18>)
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	3301      	adds	r3, #1
 8015006:	4a03      	ldr	r2, [pc, #12]	@ (8015014 <vTaskSuspendAll+0x18>)
 8015008:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801500a:	bf00      	nop
 801500c:	46bd      	mov	sp, r7
 801500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015012:	4770      	bx	lr
 8015014:	20004c2c 	.word	0x20004c2c

08015018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015018:	b580      	push	{r7, lr}
 801501a:	b084      	sub	sp, #16
 801501c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801501e:	2300      	movs	r3, #0
 8015020:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015022:	2300      	movs	r3, #0
 8015024:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015026:	4b42      	ldr	r3, [pc, #264]	@ (8015130 <xTaskResumeAll+0x118>)
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	2b00      	cmp	r3, #0
 801502c:	d10b      	bne.n	8015046 <xTaskResumeAll+0x2e>
	__asm volatile
 801502e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015032:	f383 8811 	msr	BASEPRI, r3
 8015036:	f3bf 8f6f 	isb	sy
 801503a:	f3bf 8f4f 	dsb	sy
 801503e:	603b      	str	r3, [r7, #0]
}
 8015040:	bf00      	nop
 8015042:	bf00      	nop
 8015044:	e7fd      	b.n	8015042 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015046:	f001 fb87 	bl	8016758 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801504a:	4b39      	ldr	r3, [pc, #228]	@ (8015130 <xTaskResumeAll+0x118>)
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	3b01      	subs	r3, #1
 8015050:	4a37      	ldr	r2, [pc, #220]	@ (8015130 <xTaskResumeAll+0x118>)
 8015052:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015054:	4b36      	ldr	r3, [pc, #216]	@ (8015130 <xTaskResumeAll+0x118>)
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d162      	bne.n	8015122 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801505c:	4b35      	ldr	r3, [pc, #212]	@ (8015134 <xTaskResumeAll+0x11c>)
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	2b00      	cmp	r3, #0
 8015062:	d05e      	beq.n	8015122 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015064:	e02f      	b.n	80150c6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015066:	4b34      	ldr	r3, [pc, #208]	@ (8015138 <xTaskResumeAll+0x120>)
 8015068:	68db      	ldr	r3, [r3, #12]
 801506a:	68db      	ldr	r3, [r3, #12]
 801506c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	3318      	adds	r3, #24
 8015072:	4618      	mov	r0, r3
 8015074:	f7fe fea4 	bl	8013dc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	3304      	adds	r3, #4
 801507c:	4618      	mov	r0, r3
 801507e:	f7fe fe9f 	bl	8013dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015086:	4b2d      	ldr	r3, [pc, #180]	@ (801513c <xTaskResumeAll+0x124>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	429a      	cmp	r2, r3
 801508c:	d903      	bls.n	8015096 <xTaskResumeAll+0x7e>
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015092:	4a2a      	ldr	r2, [pc, #168]	@ (801513c <xTaskResumeAll+0x124>)
 8015094:	6013      	str	r3, [r2, #0]
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801509a:	4613      	mov	r3, r2
 801509c:	009b      	lsls	r3, r3, #2
 801509e:	4413      	add	r3, r2
 80150a0:	009b      	lsls	r3, r3, #2
 80150a2:	4a27      	ldr	r2, [pc, #156]	@ (8015140 <xTaskResumeAll+0x128>)
 80150a4:	441a      	add	r2, r3
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	3304      	adds	r3, #4
 80150aa:	4619      	mov	r1, r3
 80150ac:	4610      	mov	r0, r2
 80150ae:	f7fe fe2a 	bl	8013d06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80150b2:	68fb      	ldr	r3, [r7, #12]
 80150b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80150b6:	4b23      	ldr	r3, [pc, #140]	@ (8015144 <xTaskResumeAll+0x12c>)
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80150bc:	429a      	cmp	r2, r3
 80150be:	d302      	bcc.n	80150c6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80150c0:	4b21      	ldr	r3, [pc, #132]	@ (8015148 <xTaskResumeAll+0x130>)
 80150c2:	2201      	movs	r2, #1
 80150c4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80150c6:	4b1c      	ldr	r3, [pc, #112]	@ (8015138 <xTaskResumeAll+0x120>)
 80150c8:	681b      	ldr	r3, [r3, #0]
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d1cb      	bne.n	8015066 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80150ce:	68fb      	ldr	r3, [r7, #12]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	d001      	beq.n	80150d8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80150d4:	f000 fb66 	bl	80157a4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80150d8:	4b1c      	ldr	r3, [pc, #112]	@ (801514c <xTaskResumeAll+0x134>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d010      	beq.n	8015106 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80150e4:	f000 f846 	bl	8015174 <xTaskIncrementTick>
 80150e8:	4603      	mov	r3, r0
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d002      	beq.n	80150f4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80150ee:	4b16      	ldr	r3, [pc, #88]	@ (8015148 <xTaskResumeAll+0x130>)
 80150f0:	2201      	movs	r2, #1
 80150f2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	3b01      	subs	r3, #1
 80150f8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	2b00      	cmp	r3, #0
 80150fe:	d1f1      	bne.n	80150e4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8015100:	4b12      	ldr	r3, [pc, #72]	@ (801514c <xTaskResumeAll+0x134>)
 8015102:	2200      	movs	r2, #0
 8015104:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015106:	4b10      	ldr	r3, [pc, #64]	@ (8015148 <xTaskResumeAll+0x130>)
 8015108:	681b      	ldr	r3, [r3, #0]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d009      	beq.n	8015122 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801510e:	2301      	movs	r3, #1
 8015110:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015112:	4b0f      	ldr	r3, [pc, #60]	@ (8015150 <xTaskResumeAll+0x138>)
 8015114:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015118:	601a      	str	r2, [r3, #0]
 801511a:	f3bf 8f4f 	dsb	sy
 801511e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015122:	f001 fb4b 	bl	80167bc <vPortExitCritical>

	return xAlreadyYielded;
 8015126:	68bb      	ldr	r3, [r7, #8]
}
 8015128:	4618      	mov	r0, r3
 801512a:	3710      	adds	r7, #16
 801512c:	46bd      	mov	sp, r7
 801512e:	bd80      	pop	{r7, pc}
 8015130:	20004c2c 	.word	0x20004c2c
 8015134:	20004c04 	.word	0x20004c04
 8015138:	20004bc4 	.word	0x20004bc4
 801513c:	20004c0c 	.word	0x20004c0c
 8015140:	20004734 	.word	0x20004734
 8015144:	20004730 	.word	0x20004730
 8015148:	20004c18 	.word	0x20004c18
 801514c:	20004c14 	.word	0x20004c14
 8015150:	e000ed04 	.word	0xe000ed04

08015154 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015154:	b480      	push	{r7}
 8015156:	b083      	sub	sp, #12
 8015158:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801515a:	4b05      	ldr	r3, [pc, #20]	@ (8015170 <xTaskGetTickCount+0x1c>)
 801515c:	681b      	ldr	r3, [r3, #0]
 801515e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015160:	687b      	ldr	r3, [r7, #4]
}
 8015162:	4618      	mov	r0, r3
 8015164:	370c      	adds	r7, #12
 8015166:	46bd      	mov	sp, r7
 8015168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516c:	4770      	bx	lr
 801516e:	bf00      	nop
 8015170:	20004c08 	.word	0x20004c08

08015174 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015174:	b580      	push	{r7, lr}
 8015176:	b086      	sub	sp, #24
 8015178:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801517a:	2300      	movs	r3, #0
 801517c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801517e:	4b4f      	ldr	r3, [pc, #316]	@ (80152bc <xTaskIncrementTick+0x148>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	2b00      	cmp	r3, #0
 8015184:	f040 8090 	bne.w	80152a8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015188:	4b4d      	ldr	r3, [pc, #308]	@ (80152c0 <xTaskIncrementTick+0x14c>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	3301      	adds	r3, #1
 801518e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015190:	4a4b      	ldr	r2, [pc, #300]	@ (80152c0 <xTaskIncrementTick+0x14c>)
 8015192:	693b      	ldr	r3, [r7, #16]
 8015194:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015196:	693b      	ldr	r3, [r7, #16]
 8015198:	2b00      	cmp	r3, #0
 801519a:	d121      	bne.n	80151e0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801519c:	4b49      	ldr	r3, [pc, #292]	@ (80152c4 <xTaskIncrementTick+0x150>)
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d00b      	beq.n	80151be <xTaskIncrementTick+0x4a>
	__asm volatile
 80151a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80151aa:	f383 8811 	msr	BASEPRI, r3
 80151ae:	f3bf 8f6f 	isb	sy
 80151b2:	f3bf 8f4f 	dsb	sy
 80151b6:	603b      	str	r3, [r7, #0]
}
 80151b8:	bf00      	nop
 80151ba:	bf00      	nop
 80151bc:	e7fd      	b.n	80151ba <xTaskIncrementTick+0x46>
 80151be:	4b41      	ldr	r3, [pc, #260]	@ (80152c4 <xTaskIncrementTick+0x150>)
 80151c0:	681b      	ldr	r3, [r3, #0]
 80151c2:	60fb      	str	r3, [r7, #12]
 80151c4:	4b40      	ldr	r3, [pc, #256]	@ (80152c8 <xTaskIncrementTick+0x154>)
 80151c6:	681b      	ldr	r3, [r3, #0]
 80151c8:	4a3e      	ldr	r2, [pc, #248]	@ (80152c4 <xTaskIncrementTick+0x150>)
 80151ca:	6013      	str	r3, [r2, #0]
 80151cc:	4a3e      	ldr	r2, [pc, #248]	@ (80152c8 <xTaskIncrementTick+0x154>)
 80151ce:	68fb      	ldr	r3, [r7, #12]
 80151d0:	6013      	str	r3, [r2, #0]
 80151d2:	4b3e      	ldr	r3, [pc, #248]	@ (80152cc <xTaskIncrementTick+0x158>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	3301      	adds	r3, #1
 80151d8:	4a3c      	ldr	r2, [pc, #240]	@ (80152cc <xTaskIncrementTick+0x158>)
 80151da:	6013      	str	r3, [r2, #0]
 80151dc:	f000 fae2 	bl	80157a4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80151e0:	4b3b      	ldr	r3, [pc, #236]	@ (80152d0 <xTaskIncrementTick+0x15c>)
 80151e2:	681b      	ldr	r3, [r3, #0]
 80151e4:	693a      	ldr	r2, [r7, #16]
 80151e6:	429a      	cmp	r2, r3
 80151e8:	d349      	bcc.n	801527e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80151ea:	4b36      	ldr	r3, [pc, #216]	@ (80152c4 <xTaskIncrementTick+0x150>)
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d104      	bne.n	80151fe <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151f4:	4b36      	ldr	r3, [pc, #216]	@ (80152d0 <xTaskIncrementTick+0x15c>)
 80151f6:	f04f 32ff 	mov.w	r2, #4294967295
 80151fa:	601a      	str	r2, [r3, #0]
					break;
 80151fc:	e03f      	b.n	801527e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80151fe:	4b31      	ldr	r3, [pc, #196]	@ (80152c4 <xTaskIncrementTick+0x150>)
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	68db      	ldr	r3, [r3, #12]
 8015204:	68db      	ldr	r3, [r3, #12]
 8015206:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	685b      	ldr	r3, [r3, #4]
 801520c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801520e:	693a      	ldr	r2, [r7, #16]
 8015210:	687b      	ldr	r3, [r7, #4]
 8015212:	429a      	cmp	r2, r3
 8015214:	d203      	bcs.n	801521e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015216:	4a2e      	ldr	r2, [pc, #184]	@ (80152d0 <xTaskIncrementTick+0x15c>)
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801521c:	e02f      	b.n	801527e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801521e:	68bb      	ldr	r3, [r7, #8]
 8015220:	3304      	adds	r3, #4
 8015222:	4618      	mov	r0, r3
 8015224:	f7fe fdcc 	bl	8013dc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801522c:	2b00      	cmp	r3, #0
 801522e:	d004      	beq.n	801523a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	3318      	adds	r3, #24
 8015234:	4618      	mov	r0, r3
 8015236:	f7fe fdc3 	bl	8013dc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801523a:	68bb      	ldr	r3, [r7, #8]
 801523c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801523e:	4b25      	ldr	r3, [pc, #148]	@ (80152d4 <xTaskIncrementTick+0x160>)
 8015240:	681b      	ldr	r3, [r3, #0]
 8015242:	429a      	cmp	r2, r3
 8015244:	d903      	bls.n	801524e <xTaskIncrementTick+0xda>
 8015246:	68bb      	ldr	r3, [r7, #8]
 8015248:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801524a:	4a22      	ldr	r2, [pc, #136]	@ (80152d4 <xTaskIncrementTick+0x160>)
 801524c:	6013      	str	r3, [r2, #0]
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015252:	4613      	mov	r3, r2
 8015254:	009b      	lsls	r3, r3, #2
 8015256:	4413      	add	r3, r2
 8015258:	009b      	lsls	r3, r3, #2
 801525a:	4a1f      	ldr	r2, [pc, #124]	@ (80152d8 <xTaskIncrementTick+0x164>)
 801525c:	441a      	add	r2, r3
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	3304      	adds	r3, #4
 8015262:	4619      	mov	r1, r3
 8015264:	4610      	mov	r0, r2
 8015266:	f7fe fd4e 	bl	8013d06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801526e:	4b1b      	ldr	r3, [pc, #108]	@ (80152dc <xTaskIncrementTick+0x168>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015274:	429a      	cmp	r2, r3
 8015276:	d3b8      	bcc.n	80151ea <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015278:	2301      	movs	r3, #1
 801527a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801527c:	e7b5      	b.n	80151ea <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801527e:	4b17      	ldr	r3, [pc, #92]	@ (80152dc <xTaskIncrementTick+0x168>)
 8015280:	681b      	ldr	r3, [r3, #0]
 8015282:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015284:	4914      	ldr	r1, [pc, #80]	@ (80152d8 <xTaskIncrementTick+0x164>)
 8015286:	4613      	mov	r3, r2
 8015288:	009b      	lsls	r3, r3, #2
 801528a:	4413      	add	r3, r2
 801528c:	009b      	lsls	r3, r3, #2
 801528e:	440b      	add	r3, r1
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	2b01      	cmp	r3, #1
 8015294:	d901      	bls.n	801529a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8015296:	2301      	movs	r3, #1
 8015298:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801529a:	4b11      	ldr	r3, [pc, #68]	@ (80152e0 <xTaskIncrementTick+0x16c>)
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d007      	beq.n	80152b2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80152a2:	2301      	movs	r3, #1
 80152a4:	617b      	str	r3, [r7, #20]
 80152a6:	e004      	b.n	80152b2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80152a8:	4b0e      	ldr	r3, [pc, #56]	@ (80152e4 <xTaskIncrementTick+0x170>)
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	3301      	adds	r3, #1
 80152ae:	4a0d      	ldr	r2, [pc, #52]	@ (80152e4 <xTaskIncrementTick+0x170>)
 80152b0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80152b2:	697b      	ldr	r3, [r7, #20]
}
 80152b4:	4618      	mov	r0, r3
 80152b6:	3718      	adds	r7, #24
 80152b8:	46bd      	mov	sp, r7
 80152ba:	bd80      	pop	{r7, pc}
 80152bc:	20004c2c 	.word	0x20004c2c
 80152c0:	20004c08 	.word	0x20004c08
 80152c4:	20004bbc 	.word	0x20004bbc
 80152c8:	20004bc0 	.word	0x20004bc0
 80152cc:	20004c1c 	.word	0x20004c1c
 80152d0:	20004c24 	.word	0x20004c24
 80152d4:	20004c0c 	.word	0x20004c0c
 80152d8:	20004734 	.word	0x20004734
 80152dc:	20004730 	.word	0x20004730
 80152e0:	20004c18 	.word	0x20004c18
 80152e4:	20004c14 	.word	0x20004c14

080152e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80152e8:	b480      	push	{r7}
 80152ea:	b085      	sub	sp, #20
 80152ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80152ee:	4b2b      	ldr	r3, [pc, #172]	@ (801539c <vTaskSwitchContext+0xb4>)
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d003      	beq.n	80152fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80152f6:	4b2a      	ldr	r3, [pc, #168]	@ (80153a0 <vTaskSwitchContext+0xb8>)
 80152f8:	2201      	movs	r2, #1
 80152fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80152fc:	e047      	b.n	801538e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80152fe:	4b28      	ldr	r3, [pc, #160]	@ (80153a0 <vTaskSwitchContext+0xb8>)
 8015300:	2200      	movs	r2, #0
 8015302:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015304:	4b27      	ldr	r3, [pc, #156]	@ (80153a4 <vTaskSwitchContext+0xbc>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	60fb      	str	r3, [r7, #12]
 801530a:	e011      	b.n	8015330 <vTaskSwitchContext+0x48>
 801530c:	68fb      	ldr	r3, [r7, #12]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d10b      	bne.n	801532a <vTaskSwitchContext+0x42>
	__asm volatile
 8015312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015316:	f383 8811 	msr	BASEPRI, r3
 801531a:	f3bf 8f6f 	isb	sy
 801531e:	f3bf 8f4f 	dsb	sy
 8015322:	607b      	str	r3, [r7, #4]
}
 8015324:	bf00      	nop
 8015326:	bf00      	nop
 8015328:	e7fd      	b.n	8015326 <vTaskSwitchContext+0x3e>
 801532a:	68fb      	ldr	r3, [r7, #12]
 801532c:	3b01      	subs	r3, #1
 801532e:	60fb      	str	r3, [r7, #12]
 8015330:	491d      	ldr	r1, [pc, #116]	@ (80153a8 <vTaskSwitchContext+0xc0>)
 8015332:	68fa      	ldr	r2, [r7, #12]
 8015334:	4613      	mov	r3, r2
 8015336:	009b      	lsls	r3, r3, #2
 8015338:	4413      	add	r3, r2
 801533a:	009b      	lsls	r3, r3, #2
 801533c:	440b      	add	r3, r1
 801533e:	681b      	ldr	r3, [r3, #0]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d0e3      	beq.n	801530c <vTaskSwitchContext+0x24>
 8015344:	68fa      	ldr	r2, [r7, #12]
 8015346:	4613      	mov	r3, r2
 8015348:	009b      	lsls	r3, r3, #2
 801534a:	4413      	add	r3, r2
 801534c:	009b      	lsls	r3, r3, #2
 801534e:	4a16      	ldr	r2, [pc, #88]	@ (80153a8 <vTaskSwitchContext+0xc0>)
 8015350:	4413      	add	r3, r2
 8015352:	60bb      	str	r3, [r7, #8]
 8015354:	68bb      	ldr	r3, [r7, #8]
 8015356:	685b      	ldr	r3, [r3, #4]
 8015358:	685a      	ldr	r2, [r3, #4]
 801535a:	68bb      	ldr	r3, [r7, #8]
 801535c:	605a      	str	r2, [r3, #4]
 801535e:	68bb      	ldr	r3, [r7, #8]
 8015360:	685a      	ldr	r2, [r3, #4]
 8015362:	68bb      	ldr	r3, [r7, #8]
 8015364:	3308      	adds	r3, #8
 8015366:	429a      	cmp	r2, r3
 8015368:	d104      	bne.n	8015374 <vTaskSwitchContext+0x8c>
 801536a:	68bb      	ldr	r3, [r7, #8]
 801536c:	685b      	ldr	r3, [r3, #4]
 801536e:	685a      	ldr	r2, [r3, #4]
 8015370:	68bb      	ldr	r3, [r7, #8]
 8015372:	605a      	str	r2, [r3, #4]
 8015374:	68bb      	ldr	r3, [r7, #8]
 8015376:	685b      	ldr	r3, [r3, #4]
 8015378:	68db      	ldr	r3, [r3, #12]
 801537a:	4a0c      	ldr	r2, [pc, #48]	@ (80153ac <vTaskSwitchContext+0xc4>)
 801537c:	6013      	str	r3, [r2, #0]
 801537e:	4a09      	ldr	r2, [pc, #36]	@ (80153a4 <vTaskSwitchContext+0xbc>)
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015384:	4b09      	ldr	r3, [pc, #36]	@ (80153ac <vTaskSwitchContext+0xc4>)
 8015386:	681b      	ldr	r3, [r3, #0]
 8015388:	3354      	adds	r3, #84	@ 0x54
 801538a:	4a09      	ldr	r2, [pc, #36]	@ (80153b0 <vTaskSwitchContext+0xc8>)
 801538c:	6013      	str	r3, [r2, #0]
}
 801538e:	bf00      	nop
 8015390:	3714      	adds	r7, #20
 8015392:	46bd      	mov	sp, r7
 8015394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015398:	4770      	bx	lr
 801539a:	bf00      	nop
 801539c:	20004c2c 	.word	0x20004c2c
 80153a0:	20004c18 	.word	0x20004c18
 80153a4:	20004c0c 	.word	0x20004c0c
 80153a8:	20004734 	.word	0x20004734
 80153ac:	20004730 	.word	0x20004730
 80153b0:	20000160 	.word	0x20000160

080153b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80153b4:	b580      	push	{r7, lr}
 80153b6:	b084      	sub	sp, #16
 80153b8:	af00      	add	r7, sp, #0
 80153ba:	6078      	str	r0, [r7, #4]
 80153bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80153be:	687b      	ldr	r3, [r7, #4]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d10b      	bne.n	80153dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80153c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153c8:	f383 8811 	msr	BASEPRI, r3
 80153cc:	f3bf 8f6f 	isb	sy
 80153d0:	f3bf 8f4f 	dsb	sy
 80153d4:	60fb      	str	r3, [r7, #12]
}
 80153d6:	bf00      	nop
 80153d8:	bf00      	nop
 80153da:	e7fd      	b.n	80153d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80153dc:	4b07      	ldr	r3, [pc, #28]	@ (80153fc <vTaskPlaceOnEventList+0x48>)
 80153de:	681b      	ldr	r3, [r3, #0]
 80153e0:	3318      	adds	r3, #24
 80153e2:	4619      	mov	r1, r3
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	f7fe fcb2 	bl	8013d4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80153ea:	2101      	movs	r1, #1
 80153ec:	6838      	ldr	r0, [r7, #0]
 80153ee:	f000 fc79 	bl	8015ce4 <prvAddCurrentTaskToDelayedList>
}
 80153f2:	bf00      	nop
 80153f4:	3710      	adds	r7, #16
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	20004730 	.word	0x20004730

08015400 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015400:	b580      	push	{r7, lr}
 8015402:	b086      	sub	sp, #24
 8015404:	af00      	add	r7, sp, #0
 8015406:	60f8      	str	r0, [r7, #12]
 8015408:	60b9      	str	r1, [r7, #8]
 801540a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801540c:	68fb      	ldr	r3, [r7, #12]
 801540e:	2b00      	cmp	r3, #0
 8015410:	d10b      	bne.n	801542a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8015412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015416:	f383 8811 	msr	BASEPRI, r3
 801541a:	f3bf 8f6f 	isb	sy
 801541e:	f3bf 8f4f 	dsb	sy
 8015422:	617b      	str	r3, [r7, #20]
}
 8015424:	bf00      	nop
 8015426:	bf00      	nop
 8015428:	e7fd      	b.n	8015426 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801542a:	4b0a      	ldr	r3, [pc, #40]	@ (8015454 <vTaskPlaceOnEventListRestricted+0x54>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	3318      	adds	r3, #24
 8015430:	4619      	mov	r1, r3
 8015432:	68f8      	ldr	r0, [r7, #12]
 8015434:	f7fe fc67 	bl	8013d06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d002      	beq.n	8015444 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801543e:	f04f 33ff 	mov.w	r3, #4294967295
 8015442:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015444:	6879      	ldr	r1, [r7, #4]
 8015446:	68b8      	ldr	r0, [r7, #8]
 8015448:	f000 fc4c 	bl	8015ce4 <prvAddCurrentTaskToDelayedList>
	}
 801544c:	bf00      	nop
 801544e:	3718      	adds	r7, #24
 8015450:	46bd      	mov	sp, r7
 8015452:	bd80      	pop	{r7, pc}
 8015454:	20004730 	.word	0x20004730

08015458 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b086      	sub	sp, #24
 801545c:	af00      	add	r7, sp, #0
 801545e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	68db      	ldr	r3, [r3, #12]
 8015464:	68db      	ldr	r3, [r3, #12]
 8015466:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015468:	693b      	ldr	r3, [r7, #16]
 801546a:	2b00      	cmp	r3, #0
 801546c:	d10b      	bne.n	8015486 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801546e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015472:	f383 8811 	msr	BASEPRI, r3
 8015476:	f3bf 8f6f 	isb	sy
 801547a:	f3bf 8f4f 	dsb	sy
 801547e:	60fb      	str	r3, [r7, #12]
}
 8015480:	bf00      	nop
 8015482:	bf00      	nop
 8015484:	e7fd      	b.n	8015482 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015486:	693b      	ldr	r3, [r7, #16]
 8015488:	3318      	adds	r3, #24
 801548a:	4618      	mov	r0, r3
 801548c:	f7fe fc98 	bl	8013dc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015490:	4b1d      	ldr	r3, [pc, #116]	@ (8015508 <xTaskRemoveFromEventList+0xb0>)
 8015492:	681b      	ldr	r3, [r3, #0]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d11d      	bne.n	80154d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8015498:	693b      	ldr	r3, [r7, #16]
 801549a:	3304      	adds	r3, #4
 801549c:	4618      	mov	r0, r3
 801549e:	f7fe fc8f 	bl	8013dc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80154a2:	693b      	ldr	r3, [r7, #16]
 80154a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154a6:	4b19      	ldr	r3, [pc, #100]	@ (801550c <xTaskRemoveFromEventList+0xb4>)
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	429a      	cmp	r2, r3
 80154ac:	d903      	bls.n	80154b6 <xTaskRemoveFromEventList+0x5e>
 80154ae:	693b      	ldr	r3, [r7, #16]
 80154b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154b2:	4a16      	ldr	r2, [pc, #88]	@ (801550c <xTaskRemoveFromEventList+0xb4>)
 80154b4:	6013      	str	r3, [r2, #0]
 80154b6:	693b      	ldr	r3, [r7, #16]
 80154b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154ba:	4613      	mov	r3, r2
 80154bc:	009b      	lsls	r3, r3, #2
 80154be:	4413      	add	r3, r2
 80154c0:	009b      	lsls	r3, r3, #2
 80154c2:	4a13      	ldr	r2, [pc, #76]	@ (8015510 <xTaskRemoveFromEventList+0xb8>)
 80154c4:	441a      	add	r2, r3
 80154c6:	693b      	ldr	r3, [r7, #16]
 80154c8:	3304      	adds	r3, #4
 80154ca:	4619      	mov	r1, r3
 80154cc:	4610      	mov	r0, r2
 80154ce:	f7fe fc1a 	bl	8013d06 <vListInsertEnd>
 80154d2:	e005      	b.n	80154e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80154d4:	693b      	ldr	r3, [r7, #16]
 80154d6:	3318      	adds	r3, #24
 80154d8:	4619      	mov	r1, r3
 80154da:	480e      	ldr	r0, [pc, #56]	@ (8015514 <xTaskRemoveFromEventList+0xbc>)
 80154dc:	f7fe fc13 	bl	8013d06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80154e0:	693b      	ldr	r3, [r7, #16]
 80154e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154e4:	4b0c      	ldr	r3, [pc, #48]	@ (8015518 <xTaskRemoveFromEventList+0xc0>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154ea:	429a      	cmp	r2, r3
 80154ec:	d905      	bls.n	80154fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80154ee:	2301      	movs	r3, #1
 80154f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80154f2:	4b0a      	ldr	r3, [pc, #40]	@ (801551c <xTaskRemoveFromEventList+0xc4>)
 80154f4:	2201      	movs	r2, #1
 80154f6:	601a      	str	r2, [r3, #0]
 80154f8:	e001      	b.n	80154fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80154fa:	2300      	movs	r3, #0
 80154fc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80154fe:	697b      	ldr	r3, [r7, #20]
}
 8015500:	4618      	mov	r0, r3
 8015502:	3718      	adds	r7, #24
 8015504:	46bd      	mov	sp, r7
 8015506:	bd80      	pop	{r7, pc}
 8015508:	20004c2c 	.word	0x20004c2c
 801550c:	20004c0c 	.word	0x20004c0c
 8015510:	20004734 	.word	0x20004734
 8015514:	20004bc4 	.word	0x20004bc4
 8015518:	20004730 	.word	0x20004730
 801551c:	20004c18 	.word	0x20004c18

08015520 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8015520:	b480      	push	{r7}
 8015522:	b083      	sub	sp, #12
 8015524:	af00      	add	r7, sp, #0
 8015526:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015528:	4b06      	ldr	r3, [pc, #24]	@ (8015544 <vTaskInternalSetTimeOutState+0x24>)
 801552a:	681a      	ldr	r2, [r3, #0]
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8015530:	4b05      	ldr	r3, [pc, #20]	@ (8015548 <vTaskInternalSetTimeOutState+0x28>)
 8015532:	681a      	ldr	r2, [r3, #0]
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	605a      	str	r2, [r3, #4]
}
 8015538:	bf00      	nop
 801553a:	370c      	adds	r7, #12
 801553c:	46bd      	mov	sp, r7
 801553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015542:	4770      	bx	lr
 8015544:	20004c1c 	.word	0x20004c1c
 8015548:	20004c08 	.word	0x20004c08

0801554c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801554c:	b580      	push	{r7, lr}
 801554e:	b088      	sub	sp, #32
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d10b      	bne.n	8015574 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 801555c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015560:	f383 8811 	msr	BASEPRI, r3
 8015564:	f3bf 8f6f 	isb	sy
 8015568:	f3bf 8f4f 	dsb	sy
 801556c:	613b      	str	r3, [r7, #16]
}
 801556e:	bf00      	nop
 8015570:	bf00      	nop
 8015572:	e7fd      	b.n	8015570 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015574:	683b      	ldr	r3, [r7, #0]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d10b      	bne.n	8015592 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801557a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801557e:	f383 8811 	msr	BASEPRI, r3
 8015582:	f3bf 8f6f 	isb	sy
 8015586:	f3bf 8f4f 	dsb	sy
 801558a:	60fb      	str	r3, [r7, #12]
}
 801558c:	bf00      	nop
 801558e:	bf00      	nop
 8015590:	e7fd      	b.n	801558e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8015592:	f001 f8e1 	bl	8016758 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015596:	4b1d      	ldr	r3, [pc, #116]	@ (801560c <xTaskCheckForTimeOut+0xc0>)
 8015598:	681b      	ldr	r3, [r3, #0]
 801559a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	685b      	ldr	r3, [r3, #4]
 80155a0:	69ba      	ldr	r2, [r7, #24]
 80155a2:	1ad3      	subs	r3, r2, r3
 80155a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80155a6:	683b      	ldr	r3, [r7, #0]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80155ae:	d102      	bne.n	80155b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80155b0:	2300      	movs	r3, #0
 80155b2:	61fb      	str	r3, [r7, #28]
 80155b4:	e023      	b.n	80155fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	681a      	ldr	r2, [r3, #0]
 80155ba:	4b15      	ldr	r3, [pc, #84]	@ (8015610 <xTaskCheckForTimeOut+0xc4>)
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	429a      	cmp	r2, r3
 80155c0:	d007      	beq.n	80155d2 <xTaskCheckForTimeOut+0x86>
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	685b      	ldr	r3, [r3, #4]
 80155c6:	69ba      	ldr	r2, [r7, #24]
 80155c8:	429a      	cmp	r2, r3
 80155ca:	d302      	bcc.n	80155d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80155cc:	2301      	movs	r3, #1
 80155ce:	61fb      	str	r3, [r7, #28]
 80155d0:	e015      	b.n	80155fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80155d2:	683b      	ldr	r3, [r7, #0]
 80155d4:	681b      	ldr	r3, [r3, #0]
 80155d6:	697a      	ldr	r2, [r7, #20]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d20b      	bcs.n	80155f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80155dc:	683b      	ldr	r3, [r7, #0]
 80155de:	681a      	ldr	r2, [r3, #0]
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	1ad2      	subs	r2, r2, r3
 80155e4:	683b      	ldr	r3, [r7, #0]
 80155e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80155e8:	6878      	ldr	r0, [r7, #4]
 80155ea:	f7ff ff99 	bl	8015520 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80155ee:	2300      	movs	r3, #0
 80155f0:	61fb      	str	r3, [r7, #28]
 80155f2:	e004      	b.n	80155fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	2200      	movs	r2, #0
 80155f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80155fa:	2301      	movs	r3, #1
 80155fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80155fe:	f001 f8dd 	bl	80167bc <vPortExitCritical>

	return xReturn;
 8015602:	69fb      	ldr	r3, [r7, #28]
}
 8015604:	4618      	mov	r0, r3
 8015606:	3720      	adds	r7, #32
 8015608:	46bd      	mov	sp, r7
 801560a:	bd80      	pop	{r7, pc}
 801560c:	20004c08 	.word	0x20004c08
 8015610:	20004c1c 	.word	0x20004c1c

08015614 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015614:	b480      	push	{r7}
 8015616:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015618:	4b03      	ldr	r3, [pc, #12]	@ (8015628 <vTaskMissedYield+0x14>)
 801561a:	2201      	movs	r2, #1
 801561c:	601a      	str	r2, [r3, #0]
}
 801561e:	bf00      	nop
 8015620:	46bd      	mov	sp, r7
 8015622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015626:	4770      	bx	lr
 8015628:	20004c18 	.word	0x20004c18

0801562c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801562c:	b580      	push	{r7, lr}
 801562e:	b082      	sub	sp, #8
 8015630:	af00      	add	r7, sp, #0
 8015632:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015634:	f000 f852 	bl	80156dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015638:	4b06      	ldr	r3, [pc, #24]	@ (8015654 <prvIdleTask+0x28>)
 801563a:	681b      	ldr	r3, [r3, #0]
 801563c:	2b01      	cmp	r3, #1
 801563e:	d9f9      	bls.n	8015634 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015640:	4b05      	ldr	r3, [pc, #20]	@ (8015658 <prvIdleTask+0x2c>)
 8015642:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015646:	601a      	str	r2, [r3, #0]
 8015648:	f3bf 8f4f 	dsb	sy
 801564c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015650:	e7f0      	b.n	8015634 <prvIdleTask+0x8>
 8015652:	bf00      	nop
 8015654:	20004734 	.word	0x20004734
 8015658:	e000ed04 	.word	0xe000ed04

0801565c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801565c:	b580      	push	{r7, lr}
 801565e:	b082      	sub	sp, #8
 8015660:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015662:	2300      	movs	r3, #0
 8015664:	607b      	str	r3, [r7, #4]
 8015666:	e00c      	b.n	8015682 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015668:	687a      	ldr	r2, [r7, #4]
 801566a:	4613      	mov	r3, r2
 801566c:	009b      	lsls	r3, r3, #2
 801566e:	4413      	add	r3, r2
 8015670:	009b      	lsls	r3, r3, #2
 8015672:	4a12      	ldr	r2, [pc, #72]	@ (80156bc <prvInitialiseTaskLists+0x60>)
 8015674:	4413      	add	r3, r2
 8015676:	4618      	mov	r0, r3
 8015678:	f7fe fb18 	bl	8013cac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	3301      	adds	r3, #1
 8015680:	607b      	str	r3, [r7, #4]
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	2b37      	cmp	r3, #55	@ 0x37
 8015686:	d9ef      	bls.n	8015668 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015688:	480d      	ldr	r0, [pc, #52]	@ (80156c0 <prvInitialiseTaskLists+0x64>)
 801568a:	f7fe fb0f 	bl	8013cac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801568e:	480d      	ldr	r0, [pc, #52]	@ (80156c4 <prvInitialiseTaskLists+0x68>)
 8015690:	f7fe fb0c 	bl	8013cac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015694:	480c      	ldr	r0, [pc, #48]	@ (80156c8 <prvInitialiseTaskLists+0x6c>)
 8015696:	f7fe fb09 	bl	8013cac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801569a:	480c      	ldr	r0, [pc, #48]	@ (80156cc <prvInitialiseTaskLists+0x70>)
 801569c:	f7fe fb06 	bl	8013cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80156a0:	480b      	ldr	r0, [pc, #44]	@ (80156d0 <prvInitialiseTaskLists+0x74>)
 80156a2:	f7fe fb03 	bl	8013cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80156a6:	4b0b      	ldr	r3, [pc, #44]	@ (80156d4 <prvInitialiseTaskLists+0x78>)
 80156a8:	4a05      	ldr	r2, [pc, #20]	@ (80156c0 <prvInitialiseTaskLists+0x64>)
 80156aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80156ac:	4b0a      	ldr	r3, [pc, #40]	@ (80156d8 <prvInitialiseTaskLists+0x7c>)
 80156ae:	4a05      	ldr	r2, [pc, #20]	@ (80156c4 <prvInitialiseTaskLists+0x68>)
 80156b0:	601a      	str	r2, [r3, #0]
}
 80156b2:	bf00      	nop
 80156b4:	3708      	adds	r7, #8
 80156b6:	46bd      	mov	sp, r7
 80156b8:	bd80      	pop	{r7, pc}
 80156ba:	bf00      	nop
 80156bc:	20004734 	.word	0x20004734
 80156c0:	20004b94 	.word	0x20004b94
 80156c4:	20004ba8 	.word	0x20004ba8
 80156c8:	20004bc4 	.word	0x20004bc4
 80156cc:	20004bd8 	.word	0x20004bd8
 80156d0:	20004bf0 	.word	0x20004bf0
 80156d4:	20004bbc 	.word	0x20004bbc
 80156d8:	20004bc0 	.word	0x20004bc0

080156dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b082      	sub	sp, #8
 80156e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80156e2:	e019      	b.n	8015718 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80156e4:	f001 f838 	bl	8016758 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156e8:	4b10      	ldr	r3, [pc, #64]	@ (801572c <prvCheckTasksWaitingTermination+0x50>)
 80156ea:	68db      	ldr	r3, [r3, #12]
 80156ec:	68db      	ldr	r3, [r3, #12]
 80156ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	3304      	adds	r3, #4
 80156f4:	4618      	mov	r0, r3
 80156f6:	f7fe fb63 	bl	8013dc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80156fa:	4b0d      	ldr	r3, [pc, #52]	@ (8015730 <prvCheckTasksWaitingTermination+0x54>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	3b01      	subs	r3, #1
 8015700:	4a0b      	ldr	r2, [pc, #44]	@ (8015730 <prvCheckTasksWaitingTermination+0x54>)
 8015702:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015704:	4b0b      	ldr	r3, [pc, #44]	@ (8015734 <prvCheckTasksWaitingTermination+0x58>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	3b01      	subs	r3, #1
 801570a:	4a0a      	ldr	r2, [pc, #40]	@ (8015734 <prvCheckTasksWaitingTermination+0x58>)
 801570c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801570e:	f001 f855 	bl	80167bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015712:	6878      	ldr	r0, [r7, #4]
 8015714:	f000 f810 	bl	8015738 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015718:	4b06      	ldr	r3, [pc, #24]	@ (8015734 <prvCheckTasksWaitingTermination+0x58>)
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d1e1      	bne.n	80156e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015720:	bf00      	nop
 8015722:	bf00      	nop
 8015724:	3708      	adds	r7, #8
 8015726:	46bd      	mov	sp, r7
 8015728:	bd80      	pop	{r7, pc}
 801572a:	bf00      	nop
 801572c:	20004bd8 	.word	0x20004bd8
 8015730:	20004c04 	.word	0x20004c04
 8015734:	20004bec 	.word	0x20004bec

08015738 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015738:	b580      	push	{r7, lr}
 801573a:	b084      	sub	sp, #16
 801573c:	af00      	add	r7, sp, #0
 801573e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	3354      	adds	r3, #84	@ 0x54
 8015744:	4618      	mov	r0, r3
 8015746:	f004 fef9 	bl	801a53c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8015750:	2b00      	cmp	r3, #0
 8015752:	d108      	bne.n	8015766 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015758:	4618      	mov	r0, r3
 801575a:	f001 f9ed 	bl	8016b38 <vPortFree>
				vPortFree( pxTCB );
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f001 f9ea 	bl	8016b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015764:	e019      	b.n	801579a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801576c:	2b01      	cmp	r3, #1
 801576e:	d103      	bne.n	8015778 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8015770:	6878      	ldr	r0, [r7, #4]
 8015772:	f001 f9e1 	bl	8016b38 <vPortFree>
	}
 8015776:	e010      	b.n	801579a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 801577e:	2b02      	cmp	r3, #2
 8015780:	d00b      	beq.n	801579a <prvDeleteTCB+0x62>
	__asm volatile
 8015782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015786:	f383 8811 	msr	BASEPRI, r3
 801578a:	f3bf 8f6f 	isb	sy
 801578e:	f3bf 8f4f 	dsb	sy
 8015792:	60fb      	str	r3, [r7, #12]
}
 8015794:	bf00      	nop
 8015796:	bf00      	nop
 8015798:	e7fd      	b.n	8015796 <prvDeleteTCB+0x5e>
	}
 801579a:	bf00      	nop
 801579c:	3710      	adds	r7, #16
 801579e:	46bd      	mov	sp, r7
 80157a0:	bd80      	pop	{r7, pc}
	...

080157a4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80157a4:	b480      	push	{r7}
 80157a6:	b083      	sub	sp, #12
 80157a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80157aa:	4b0c      	ldr	r3, [pc, #48]	@ (80157dc <prvResetNextTaskUnblockTime+0x38>)
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	681b      	ldr	r3, [r3, #0]
 80157b0:	2b00      	cmp	r3, #0
 80157b2:	d104      	bne.n	80157be <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80157b4:	4b0a      	ldr	r3, [pc, #40]	@ (80157e0 <prvResetNextTaskUnblockTime+0x3c>)
 80157b6:	f04f 32ff 	mov.w	r2, #4294967295
 80157ba:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80157bc:	e008      	b.n	80157d0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80157be:	4b07      	ldr	r3, [pc, #28]	@ (80157dc <prvResetNextTaskUnblockTime+0x38>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	68db      	ldr	r3, [r3, #12]
 80157c4:	68db      	ldr	r3, [r3, #12]
 80157c6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	685b      	ldr	r3, [r3, #4]
 80157cc:	4a04      	ldr	r2, [pc, #16]	@ (80157e0 <prvResetNextTaskUnblockTime+0x3c>)
 80157ce:	6013      	str	r3, [r2, #0]
}
 80157d0:	bf00      	nop
 80157d2:	370c      	adds	r7, #12
 80157d4:	46bd      	mov	sp, r7
 80157d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157da:	4770      	bx	lr
 80157dc:	20004bbc 	.word	0x20004bbc
 80157e0:	20004c24 	.word	0x20004c24

080157e4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80157e4:	b480      	push	{r7}
 80157e6:	b083      	sub	sp, #12
 80157e8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80157ea:	4b05      	ldr	r3, [pc, #20]	@ (8015800 <xTaskGetCurrentTaskHandle+0x1c>)
 80157ec:	681b      	ldr	r3, [r3, #0]
 80157ee:	607b      	str	r3, [r7, #4]

		return xReturn;
 80157f0:	687b      	ldr	r3, [r7, #4]
	}
 80157f2:	4618      	mov	r0, r3
 80157f4:	370c      	adds	r7, #12
 80157f6:	46bd      	mov	sp, r7
 80157f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fc:	4770      	bx	lr
 80157fe:	bf00      	nop
 8015800:	20004730 	.word	0x20004730

08015804 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015804:	b480      	push	{r7}
 8015806:	b083      	sub	sp, #12
 8015808:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801580a:	4b0b      	ldr	r3, [pc, #44]	@ (8015838 <xTaskGetSchedulerState+0x34>)
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	2b00      	cmp	r3, #0
 8015810:	d102      	bne.n	8015818 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015812:	2301      	movs	r3, #1
 8015814:	607b      	str	r3, [r7, #4]
 8015816:	e008      	b.n	801582a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015818:	4b08      	ldr	r3, [pc, #32]	@ (801583c <xTaskGetSchedulerState+0x38>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	2b00      	cmp	r3, #0
 801581e:	d102      	bne.n	8015826 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015820:	2302      	movs	r3, #2
 8015822:	607b      	str	r3, [r7, #4]
 8015824:	e001      	b.n	801582a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015826:	2300      	movs	r3, #0
 8015828:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801582a:	687b      	ldr	r3, [r7, #4]
	}
 801582c:	4618      	mov	r0, r3
 801582e:	370c      	adds	r7, #12
 8015830:	46bd      	mov	sp, r7
 8015832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015836:	4770      	bx	lr
 8015838:	20004c10 	.word	0x20004c10
 801583c:	20004c2c 	.word	0x20004c2c

08015840 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015840:	b580      	push	{r7, lr}
 8015842:	b084      	sub	sp, #16
 8015844:	af00      	add	r7, sp, #0
 8015846:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015848:	687b      	ldr	r3, [r7, #4]
 801584a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 801584c:	2300      	movs	r3, #0
 801584e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015850:	687b      	ldr	r3, [r7, #4]
 8015852:	2b00      	cmp	r3, #0
 8015854:	d051      	beq.n	80158fa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015856:	68bb      	ldr	r3, [r7, #8]
 8015858:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801585a:	4b2a      	ldr	r3, [pc, #168]	@ (8015904 <xTaskPriorityInherit+0xc4>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015860:	429a      	cmp	r2, r3
 8015862:	d241      	bcs.n	80158e8 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015864:	68bb      	ldr	r3, [r7, #8]
 8015866:	699b      	ldr	r3, [r3, #24]
 8015868:	2b00      	cmp	r3, #0
 801586a:	db06      	blt.n	801587a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801586c:	4b25      	ldr	r3, [pc, #148]	@ (8015904 <xTaskPriorityInherit+0xc4>)
 801586e:	681b      	ldr	r3, [r3, #0]
 8015870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015872:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	6959      	ldr	r1, [r3, #20]
 801587e:	68bb      	ldr	r3, [r7, #8]
 8015880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015882:	4613      	mov	r3, r2
 8015884:	009b      	lsls	r3, r3, #2
 8015886:	4413      	add	r3, r2
 8015888:	009b      	lsls	r3, r3, #2
 801588a:	4a1f      	ldr	r2, [pc, #124]	@ (8015908 <xTaskPriorityInherit+0xc8>)
 801588c:	4413      	add	r3, r2
 801588e:	4299      	cmp	r1, r3
 8015890:	d122      	bne.n	80158d8 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015892:	68bb      	ldr	r3, [r7, #8]
 8015894:	3304      	adds	r3, #4
 8015896:	4618      	mov	r0, r3
 8015898:	f7fe fa92 	bl	8013dc0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801589c:	4b19      	ldr	r3, [pc, #100]	@ (8015904 <xTaskPriorityInherit+0xc4>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158a2:	68bb      	ldr	r3, [r7, #8]
 80158a4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80158a6:	68bb      	ldr	r3, [r7, #8]
 80158a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158aa:	4b18      	ldr	r3, [pc, #96]	@ (801590c <xTaskPriorityInherit+0xcc>)
 80158ac:	681b      	ldr	r3, [r3, #0]
 80158ae:	429a      	cmp	r2, r3
 80158b0:	d903      	bls.n	80158ba <xTaskPriorityInherit+0x7a>
 80158b2:	68bb      	ldr	r3, [r7, #8]
 80158b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158b6:	4a15      	ldr	r2, [pc, #84]	@ (801590c <xTaskPriorityInherit+0xcc>)
 80158b8:	6013      	str	r3, [r2, #0]
 80158ba:	68bb      	ldr	r3, [r7, #8]
 80158bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158be:	4613      	mov	r3, r2
 80158c0:	009b      	lsls	r3, r3, #2
 80158c2:	4413      	add	r3, r2
 80158c4:	009b      	lsls	r3, r3, #2
 80158c6:	4a10      	ldr	r2, [pc, #64]	@ (8015908 <xTaskPriorityInherit+0xc8>)
 80158c8:	441a      	add	r2, r3
 80158ca:	68bb      	ldr	r3, [r7, #8]
 80158cc:	3304      	adds	r3, #4
 80158ce:	4619      	mov	r1, r3
 80158d0:	4610      	mov	r0, r2
 80158d2:	f7fe fa18 	bl	8013d06 <vListInsertEnd>
 80158d6:	e004      	b.n	80158e2 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80158d8:	4b0a      	ldr	r3, [pc, #40]	@ (8015904 <xTaskPriorityInherit+0xc4>)
 80158da:	681b      	ldr	r3, [r3, #0]
 80158dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158de:	68bb      	ldr	r3, [r7, #8]
 80158e0:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80158e2:	2301      	movs	r3, #1
 80158e4:	60fb      	str	r3, [r7, #12]
 80158e6:	e008      	b.n	80158fa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80158e8:	68bb      	ldr	r3, [r7, #8]
 80158ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80158ec:	4b05      	ldr	r3, [pc, #20]	@ (8015904 <xTaskPriorityInherit+0xc4>)
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158f2:	429a      	cmp	r2, r3
 80158f4:	d201      	bcs.n	80158fa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80158f6:	2301      	movs	r3, #1
 80158f8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80158fa:	68fb      	ldr	r3, [r7, #12]
	}
 80158fc:	4618      	mov	r0, r3
 80158fe:	3710      	adds	r7, #16
 8015900:	46bd      	mov	sp, r7
 8015902:	bd80      	pop	{r7, pc}
 8015904:	20004730 	.word	0x20004730
 8015908:	20004734 	.word	0x20004734
 801590c:	20004c0c 	.word	0x20004c0c

08015910 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015910:	b580      	push	{r7, lr}
 8015912:	b086      	sub	sp, #24
 8015914:	af00      	add	r7, sp, #0
 8015916:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801591c:	2300      	movs	r3, #0
 801591e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d058      	beq.n	80159d8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015926:	4b2f      	ldr	r3, [pc, #188]	@ (80159e4 <xTaskPriorityDisinherit+0xd4>)
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	693a      	ldr	r2, [r7, #16]
 801592c:	429a      	cmp	r2, r3
 801592e:	d00b      	beq.n	8015948 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8015930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015934:	f383 8811 	msr	BASEPRI, r3
 8015938:	f3bf 8f6f 	isb	sy
 801593c:	f3bf 8f4f 	dsb	sy
 8015940:	60fb      	str	r3, [r7, #12]
}
 8015942:	bf00      	nop
 8015944:	bf00      	nop
 8015946:	e7fd      	b.n	8015944 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015948:	693b      	ldr	r3, [r7, #16]
 801594a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801594c:	2b00      	cmp	r3, #0
 801594e:	d10b      	bne.n	8015968 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8015950:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015954:	f383 8811 	msr	BASEPRI, r3
 8015958:	f3bf 8f6f 	isb	sy
 801595c:	f3bf 8f4f 	dsb	sy
 8015960:	60bb      	str	r3, [r7, #8]
}
 8015962:	bf00      	nop
 8015964:	bf00      	nop
 8015966:	e7fd      	b.n	8015964 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8015968:	693b      	ldr	r3, [r7, #16]
 801596a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801596c:	1e5a      	subs	r2, r3, #1
 801596e:	693b      	ldr	r3, [r7, #16]
 8015970:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015972:	693b      	ldr	r3, [r7, #16]
 8015974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015976:	693b      	ldr	r3, [r7, #16]
 8015978:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801597a:	429a      	cmp	r2, r3
 801597c:	d02c      	beq.n	80159d8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801597e:	693b      	ldr	r3, [r7, #16]
 8015980:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015982:	2b00      	cmp	r3, #0
 8015984:	d128      	bne.n	80159d8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015986:	693b      	ldr	r3, [r7, #16]
 8015988:	3304      	adds	r3, #4
 801598a:	4618      	mov	r0, r3
 801598c:	f7fe fa18 	bl	8013dc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015990:	693b      	ldr	r3, [r7, #16]
 8015992:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015994:	693b      	ldr	r3, [r7, #16]
 8015996:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801599c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80159a0:	693b      	ldr	r3, [r7, #16]
 80159a2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80159a4:	693b      	ldr	r3, [r7, #16]
 80159a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159a8:	4b0f      	ldr	r3, [pc, #60]	@ (80159e8 <xTaskPriorityDisinherit+0xd8>)
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d903      	bls.n	80159b8 <xTaskPriorityDisinherit+0xa8>
 80159b0:	693b      	ldr	r3, [r7, #16]
 80159b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80159b4:	4a0c      	ldr	r2, [pc, #48]	@ (80159e8 <xTaskPriorityDisinherit+0xd8>)
 80159b6:	6013      	str	r3, [r2, #0]
 80159b8:	693b      	ldr	r3, [r7, #16]
 80159ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80159bc:	4613      	mov	r3, r2
 80159be:	009b      	lsls	r3, r3, #2
 80159c0:	4413      	add	r3, r2
 80159c2:	009b      	lsls	r3, r3, #2
 80159c4:	4a09      	ldr	r2, [pc, #36]	@ (80159ec <xTaskPriorityDisinherit+0xdc>)
 80159c6:	441a      	add	r2, r3
 80159c8:	693b      	ldr	r3, [r7, #16]
 80159ca:	3304      	adds	r3, #4
 80159cc:	4619      	mov	r1, r3
 80159ce:	4610      	mov	r0, r2
 80159d0:	f7fe f999 	bl	8013d06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80159d4:	2301      	movs	r3, #1
 80159d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80159d8:	697b      	ldr	r3, [r7, #20]
	}
 80159da:	4618      	mov	r0, r3
 80159dc:	3718      	adds	r7, #24
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
 80159e2:	bf00      	nop
 80159e4:	20004730 	.word	0x20004730
 80159e8:	20004c0c 	.word	0x20004c0c
 80159ec:	20004734 	.word	0x20004734

080159f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80159f0:	b580      	push	{r7, lr}
 80159f2:	b088      	sub	sp, #32
 80159f4:	af00      	add	r7, sp, #0
 80159f6:	6078      	str	r0, [r7, #4]
 80159f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80159fe:	2301      	movs	r3, #1
 8015a00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d06c      	beq.n	8015ae2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015a08:	69bb      	ldr	r3, [r7, #24]
 8015a0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d10b      	bne.n	8015a28 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a14:	f383 8811 	msr	BASEPRI, r3
 8015a18:	f3bf 8f6f 	isb	sy
 8015a1c:	f3bf 8f4f 	dsb	sy
 8015a20:	60fb      	str	r3, [r7, #12]
}
 8015a22:	bf00      	nop
 8015a24:	bf00      	nop
 8015a26:	e7fd      	b.n	8015a24 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015a28:	69bb      	ldr	r3, [r7, #24]
 8015a2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a2c:	683a      	ldr	r2, [r7, #0]
 8015a2e:	429a      	cmp	r2, r3
 8015a30:	d902      	bls.n	8015a38 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015a32:	683b      	ldr	r3, [r7, #0]
 8015a34:	61fb      	str	r3, [r7, #28]
 8015a36:	e002      	b.n	8015a3e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015a38:	69bb      	ldr	r3, [r7, #24]
 8015a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015a3c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015a3e:	69bb      	ldr	r3, [r7, #24]
 8015a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a42:	69fa      	ldr	r2, [r7, #28]
 8015a44:	429a      	cmp	r2, r3
 8015a46:	d04c      	beq.n	8015ae2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015a48:	69bb      	ldr	r3, [r7, #24]
 8015a4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015a4c:	697a      	ldr	r2, [r7, #20]
 8015a4e:	429a      	cmp	r2, r3
 8015a50:	d147      	bne.n	8015ae2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015a52:	4b26      	ldr	r3, [pc, #152]	@ (8015aec <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	69ba      	ldr	r2, [r7, #24]
 8015a58:	429a      	cmp	r2, r3
 8015a5a:	d10b      	bne.n	8015a74 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8015a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015a60:	f383 8811 	msr	BASEPRI, r3
 8015a64:	f3bf 8f6f 	isb	sy
 8015a68:	f3bf 8f4f 	dsb	sy
 8015a6c:	60bb      	str	r3, [r7, #8]
}
 8015a6e:	bf00      	nop
 8015a70:	bf00      	nop
 8015a72:	e7fd      	b.n	8015a70 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015a74:	69bb      	ldr	r3, [r7, #24]
 8015a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015a78:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015a7a:	69bb      	ldr	r3, [r7, #24]
 8015a7c:	69fa      	ldr	r2, [r7, #28]
 8015a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015a80:	69bb      	ldr	r3, [r7, #24]
 8015a82:	699b      	ldr	r3, [r3, #24]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	db04      	blt.n	8015a92 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a88:	69fb      	ldr	r3, [r7, #28]
 8015a8a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015a8e:	69bb      	ldr	r3, [r7, #24]
 8015a90:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015a92:	69bb      	ldr	r3, [r7, #24]
 8015a94:	6959      	ldr	r1, [r3, #20]
 8015a96:	693a      	ldr	r2, [r7, #16]
 8015a98:	4613      	mov	r3, r2
 8015a9a:	009b      	lsls	r3, r3, #2
 8015a9c:	4413      	add	r3, r2
 8015a9e:	009b      	lsls	r3, r3, #2
 8015aa0:	4a13      	ldr	r2, [pc, #76]	@ (8015af0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015aa2:	4413      	add	r3, r2
 8015aa4:	4299      	cmp	r1, r3
 8015aa6:	d11c      	bne.n	8015ae2 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015aa8:	69bb      	ldr	r3, [r7, #24]
 8015aaa:	3304      	adds	r3, #4
 8015aac:	4618      	mov	r0, r3
 8015aae:	f7fe f987 	bl	8013dc0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015ab2:	69bb      	ldr	r3, [r7, #24]
 8015ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ab6:	4b0f      	ldr	r3, [pc, #60]	@ (8015af4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	429a      	cmp	r2, r3
 8015abc:	d903      	bls.n	8015ac6 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8015abe:	69bb      	ldr	r3, [r7, #24]
 8015ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ac2:	4a0c      	ldr	r2, [pc, #48]	@ (8015af4 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015ac4:	6013      	str	r3, [r2, #0]
 8015ac6:	69bb      	ldr	r3, [r7, #24]
 8015ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015aca:	4613      	mov	r3, r2
 8015acc:	009b      	lsls	r3, r3, #2
 8015ace:	4413      	add	r3, r2
 8015ad0:	009b      	lsls	r3, r3, #2
 8015ad2:	4a07      	ldr	r2, [pc, #28]	@ (8015af0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015ad4:	441a      	add	r2, r3
 8015ad6:	69bb      	ldr	r3, [r7, #24]
 8015ad8:	3304      	adds	r3, #4
 8015ada:	4619      	mov	r1, r3
 8015adc:	4610      	mov	r0, r2
 8015ade:	f7fe f912 	bl	8013d06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015ae2:	bf00      	nop
 8015ae4:	3720      	adds	r7, #32
 8015ae6:	46bd      	mov	sp, r7
 8015ae8:	bd80      	pop	{r7, pc}
 8015aea:	bf00      	nop
 8015aec:	20004730 	.word	0x20004730
 8015af0:	20004734 	.word	0x20004734
 8015af4:	20004c0c 	.word	0x20004c0c

08015af8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015af8:	b480      	push	{r7}
 8015afa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015afc:	4b07      	ldr	r3, [pc, #28]	@ (8015b1c <pvTaskIncrementMutexHeldCount+0x24>)
 8015afe:	681b      	ldr	r3, [r3, #0]
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d004      	beq.n	8015b0e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015b04:	4b05      	ldr	r3, [pc, #20]	@ (8015b1c <pvTaskIncrementMutexHeldCount+0x24>)
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015b0a:	3201      	adds	r2, #1
 8015b0c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8015b0e:	4b03      	ldr	r3, [pc, #12]	@ (8015b1c <pvTaskIncrementMutexHeldCount+0x24>)
 8015b10:	681b      	ldr	r3, [r3, #0]
	}
 8015b12:	4618      	mov	r0, r3
 8015b14:	46bd      	mov	sp, r7
 8015b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1a:	4770      	bx	lr
 8015b1c:	20004730 	.word	0x20004730

08015b20 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b084      	sub	sp, #16
 8015b24:	af00      	add	r7, sp, #0
 8015b26:	6078      	str	r0, [r7, #4]
 8015b28:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8015b2a:	f000 fe15 	bl	8016758 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8015b2e:	4b20      	ldr	r3, [pc, #128]	@ (8015bb0 <ulTaskNotifyTake+0x90>)
 8015b30:	681b      	ldr	r3, [r3, #0]
 8015b32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d113      	bne.n	8015b62 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015b3a:	4b1d      	ldr	r3, [pc, #116]	@ (8015bb0 <ulTaskNotifyTake+0x90>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	2201      	movs	r2, #1
 8015b40:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8015b44:	683b      	ldr	r3, [r7, #0]
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d00b      	beq.n	8015b62 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015b4a:	2101      	movs	r1, #1
 8015b4c:	6838      	ldr	r0, [r7, #0]
 8015b4e:	f000 f8c9 	bl	8015ce4 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8015b52:	4b18      	ldr	r3, [pc, #96]	@ (8015bb4 <ulTaskNotifyTake+0x94>)
 8015b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015b58:	601a      	str	r2, [r3, #0]
 8015b5a:	f3bf 8f4f 	dsb	sy
 8015b5e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015b62:	f000 fe2b 	bl	80167bc <vPortExitCritical>

		taskENTER_CRITICAL();
 8015b66:	f000 fdf7 	bl	8016758 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8015b6a:	4b11      	ldr	r3, [pc, #68]	@ (8015bb0 <ulTaskNotifyTake+0x90>)
 8015b6c:	681b      	ldr	r3, [r3, #0]
 8015b6e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015b72:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d00e      	beq.n	8015b98 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d005      	beq.n	8015b8c <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015b80:	4b0b      	ldr	r3, [pc, #44]	@ (8015bb0 <ulTaskNotifyTake+0x90>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	2200      	movs	r2, #0
 8015b86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8015b8a:	e005      	b.n	8015b98 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015b8c:	4b08      	ldr	r3, [pc, #32]	@ (8015bb0 <ulTaskNotifyTake+0x90>)
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	68fa      	ldr	r2, [r7, #12]
 8015b92:	3a01      	subs	r2, #1
 8015b94:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015b98:	4b05      	ldr	r3, [pc, #20]	@ (8015bb0 <ulTaskNotifyTake+0x90>)
 8015b9a:	681b      	ldr	r3, [r3, #0]
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8015ba2:	f000 fe0b 	bl	80167bc <vPortExitCritical>

		return ulReturn;
 8015ba6:	68fb      	ldr	r3, [r7, #12]
	}
 8015ba8:	4618      	mov	r0, r3
 8015baa:	3710      	adds	r7, #16
 8015bac:	46bd      	mov	sp, r7
 8015bae:	bd80      	pop	{r7, pc}
 8015bb0:	20004730 	.word	0x20004730
 8015bb4:	e000ed04 	.word	0xe000ed04

08015bb8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015bb8:	b580      	push	{r7, lr}
 8015bba:	b08a      	sub	sp, #40	@ 0x28
 8015bbc:	af00      	add	r7, sp, #0
 8015bbe:	6078      	str	r0, [r7, #4]
 8015bc0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d10b      	bne.n	8015be0 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8015bc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bcc:	f383 8811 	msr	BASEPRI, r3
 8015bd0:	f3bf 8f6f 	isb	sy
 8015bd4:	f3bf 8f4f 	dsb	sy
 8015bd8:	61bb      	str	r3, [r7, #24]
}
 8015bda:	bf00      	nop
 8015bdc:	bf00      	nop
 8015bde:	e7fd      	b.n	8015bdc <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015be0:	f000 fe9a 	bl	8016918 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8015be8:	f3ef 8211 	mrs	r2, BASEPRI
 8015bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015bf0:	f383 8811 	msr	BASEPRI, r3
 8015bf4:	f3bf 8f6f 	isb	sy
 8015bf8:	f3bf 8f4f 	dsb	sy
 8015bfc:	617a      	str	r2, [r7, #20]
 8015bfe:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8015c00:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8015c02:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8015c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c06:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8015c0a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8015c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c0e:	2202      	movs	r2, #2
 8015c10:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8015c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c16:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015c1a:	1c5a      	adds	r2, r3, #1
 8015c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c1e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8015c22:	7ffb      	ldrb	r3, [r7, #31]
 8015c24:	2b01      	cmp	r3, #1
 8015c26:	d147      	bne.n	8015cb8 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8015c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d00b      	beq.n	8015c48 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 8015c30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c34:	f383 8811 	msr	BASEPRI, r3
 8015c38:	f3bf 8f6f 	isb	sy
 8015c3c:	f3bf 8f4f 	dsb	sy
 8015c40:	60fb      	str	r3, [r7, #12]
}
 8015c42:	bf00      	nop
 8015c44:	bf00      	nop
 8015c46:	e7fd      	b.n	8015c44 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c48:	4b20      	ldr	r3, [pc, #128]	@ (8015ccc <vTaskNotifyGiveFromISR+0x114>)
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	2b00      	cmp	r3, #0
 8015c4e:	d11d      	bne.n	8015c8c <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c52:	3304      	adds	r3, #4
 8015c54:	4618      	mov	r0, r3
 8015c56:	f7fe f8b3 	bl	8013dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8015cd0 <vTaskNotifyGiveFromISR+0x118>)
 8015c60:	681b      	ldr	r3, [r3, #0]
 8015c62:	429a      	cmp	r2, r3
 8015c64:	d903      	bls.n	8015c6e <vTaskNotifyGiveFromISR+0xb6>
 8015c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c6a:	4a19      	ldr	r2, [pc, #100]	@ (8015cd0 <vTaskNotifyGiveFromISR+0x118>)
 8015c6c:	6013      	str	r3, [r2, #0]
 8015c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c72:	4613      	mov	r3, r2
 8015c74:	009b      	lsls	r3, r3, #2
 8015c76:	4413      	add	r3, r2
 8015c78:	009b      	lsls	r3, r3, #2
 8015c7a:	4a16      	ldr	r2, [pc, #88]	@ (8015cd4 <vTaskNotifyGiveFromISR+0x11c>)
 8015c7c:	441a      	add	r2, r3
 8015c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c80:	3304      	adds	r3, #4
 8015c82:	4619      	mov	r1, r3
 8015c84:	4610      	mov	r0, r2
 8015c86:	f7fe f83e 	bl	8013d06 <vListInsertEnd>
 8015c8a:	e005      	b.n	8015c98 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8015c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c8e:	3318      	adds	r3, #24
 8015c90:	4619      	mov	r1, r3
 8015c92:	4811      	ldr	r0, [pc, #68]	@ (8015cd8 <vTaskNotifyGiveFromISR+0x120>)
 8015c94:	f7fe f837 	bl	8013d06 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015c9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8015cdc <vTaskNotifyGiveFromISR+0x124>)
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ca2:	429a      	cmp	r2, r3
 8015ca4:	d908      	bls.n	8015cb8 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8015ca6:	683b      	ldr	r3, [r7, #0]
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d002      	beq.n	8015cb2 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8015cac:	683b      	ldr	r3, [r7, #0]
 8015cae:	2201      	movs	r2, #1
 8015cb0:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8015cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8015ce0 <vTaskNotifyGiveFromISR+0x128>)
 8015cb4:	2201      	movs	r2, #1
 8015cb6:	601a      	str	r2, [r3, #0]
 8015cb8:	6a3b      	ldr	r3, [r7, #32]
 8015cba:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8015cbc:	68bb      	ldr	r3, [r7, #8]
 8015cbe:	f383 8811 	msr	BASEPRI, r3
}
 8015cc2:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8015cc4:	bf00      	nop
 8015cc6:	3728      	adds	r7, #40	@ 0x28
 8015cc8:	46bd      	mov	sp, r7
 8015cca:	bd80      	pop	{r7, pc}
 8015ccc:	20004c2c 	.word	0x20004c2c
 8015cd0:	20004c0c 	.word	0x20004c0c
 8015cd4:	20004734 	.word	0x20004734
 8015cd8:	20004bc4 	.word	0x20004bc4
 8015cdc:	20004730 	.word	0x20004730
 8015ce0:	20004c18 	.word	0x20004c18

08015ce4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b084      	sub	sp, #16
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015cee:	4b21      	ldr	r3, [pc, #132]	@ (8015d74 <prvAddCurrentTaskToDelayedList+0x90>)
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015cf4:	4b20      	ldr	r3, [pc, #128]	@ (8015d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	3304      	adds	r3, #4
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7fe f860 	bl	8013dc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015d06:	d10a      	bne.n	8015d1e <prvAddCurrentTaskToDelayedList+0x3a>
 8015d08:	683b      	ldr	r3, [r7, #0]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d007      	beq.n	8015d1e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8015d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	3304      	adds	r3, #4
 8015d14:	4619      	mov	r1, r3
 8015d16:	4819      	ldr	r0, [pc, #100]	@ (8015d7c <prvAddCurrentTaskToDelayedList+0x98>)
 8015d18:	f7fd fff5 	bl	8013d06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015d1c:	e026      	b.n	8015d6c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015d1e:	68fa      	ldr	r2, [r7, #12]
 8015d20:	687b      	ldr	r3, [r7, #4]
 8015d22:	4413      	add	r3, r2
 8015d24:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015d26:	4b14      	ldr	r3, [pc, #80]	@ (8015d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	68ba      	ldr	r2, [r7, #8]
 8015d2c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015d2e:	68ba      	ldr	r2, [r7, #8]
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	429a      	cmp	r2, r3
 8015d34:	d209      	bcs.n	8015d4a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d36:	4b12      	ldr	r3, [pc, #72]	@ (8015d80 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015d38:	681a      	ldr	r2, [r3, #0]
 8015d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8015d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	3304      	adds	r3, #4
 8015d40:	4619      	mov	r1, r3
 8015d42:	4610      	mov	r0, r2
 8015d44:	f7fe f803 	bl	8013d4e <vListInsert>
}
 8015d48:	e010      	b.n	8015d6c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d4a:	4b0e      	ldr	r3, [pc, #56]	@ (8015d84 <prvAddCurrentTaskToDelayedList+0xa0>)
 8015d4c:	681a      	ldr	r2, [r3, #0]
 8015d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8015d78 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	3304      	adds	r3, #4
 8015d54:	4619      	mov	r1, r3
 8015d56:	4610      	mov	r0, r2
 8015d58:	f7fd fff9 	bl	8013d4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015d5c:	4b0a      	ldr	r3, [pc, #40]	@ (8015d88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	68ba      	ldr	r2, [r7, #8]
 8015d62:	429a      	cmp	r2, r3
 8015d64:	d202      	bcs.n	8015d6c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015d66:	4a08      	ldr	r2, [pc, #32]	@ (8015d88 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	6013      	str	r3, [r2, #0]
}
 8015d6c:	bf00      	nop
 8015d6e:	3710      	adds	r7, #16
 8015d70:	46bd      	mov	sp, r7
 8015d72:	bd80      	pop	{r7, pc}
 8015d74:	20004c08 	.word	0x20004c08
 8015d78:	20004730 	.word	0x20004730
 8015d7c:	20004bf0 	.word	0x20004bf0
 8015d80:	20004bc0 	.word	0x20004bc0
 8015d84:	20004bbc 	.word	0x20004bbc
 8015d88:	20004c24 	.word	0x20004c24

08015d8c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015d8c:	b580      	push	{r7, lr}
 8015d8e:	b08a      	sub	sp, #40	@ 0x28
 8015d90:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015d92:	2300      	movs	r3, #0
 8015d94:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015d96:	f000 fb71 	bl	801647c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8015e10 <xTimerCreateTimerTask+0x84>)
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d021      	beq.n	8015de6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015da2:	2300      	movs	r3, #0
 8015da4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015da6:	2300      	movs	r3, #0
 8015da8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015daa:	1d3a      	adds	r2, r7, #4
 8015dac:	f107 0108 	add.w	r1, r7, #8
 8015db0:	f107 030c 	add.w	r3, r7, #12
 8015db4:	4618      	mov	r0, r3
 8015db6:	f7fd ff5f 	bl	8013c78 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015dba:	6879      	ldr	r1, [r7, #4]
 8015dbc:	68bb      	ldr	r3, [r7, #8]
 8015dbe:	68fa      	ldr	r2, [r7, #12]
 8015dc0:	9202      	str	r2, [sp, #8]
 8015dc2:	9301      	str	r3, [sp, #4]
 8015dc4:	2302      	movs	r3, #2
 8015dc6:	9300      	str	r3, [sp, #0]
 8015dc8:	2300      	movs	r3, #0
 8015dca:	460a      	mov	r2, r1
 8015dcc:	4911      	ldr	r1, [pc, #68]	@ (8015e14 <xTimerCreateTimerTask+0x88>)
 8015dce:	4812      	ldr	r0, [pc, #72]	@ (8015e18 <xTimerCreateTimerTask+0x8c>)
 8015dd0:	f7fe feb0 	bl	8014b34 <xTaskCreateStatic>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	4a11      	ldr	r2, [pc, #68]	@ (8015e1c <xTimerCreateTimerTask+0x90>)
 8015dd8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015dda:	4b10      	ldr	r3, [pc, #64]	@ (8015e1c <xTimerCreateTimerTask+0x90>)
 8015ddc:	681b      	ldr	r3, [r3, #0]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d001      	beq.n	8015de6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015de2:	2301      	movs	r3, #1
 8015de4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015de6:	697b      	ldr	r3, [r7, #20]
 8015de8:	2b00      	cmp	r3, #0
 8015dea:	d10b      	bne.n	8015e04 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8015dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015df0:	f383 8811 	msr	BASEPRI, r3
 8015df4:	f3bf 8f6f 	isb	sy
 8015df8:	f3bf 8f4f 	dsb	sy
 8015dfc:	613b      	str	r3, [r7, #16]
}
 8015dfe:	bf00      	nop
 8015e00:	bf00      	nop
 8015e02:	e7fd      	b.n	8015e00 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015e04:	697b      	ldr	r3, [r7, #20]
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	3718      	adds	r7, #24
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	bd80      	pop	{r7, pc}
 8015e0e:	bf00      	nop
 8015e10:	20004c60 	.word	0x20004c60
 8015e14:	0802014c 	.word	0x0802014c
 8015e18:	08016015 	.word	0x08016015
 8015e1c:	20004c64 	.word	0x20004c64

08015e20 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8015e20:	b580      	push	{r7, lr}
 8015e22:	b088      	sub	sp, #32
 8015e24:	af02      	add	r7, sp, #8
 8015e26:	60f8      	str	r0, [r7, #12]
 8015e28:	60b9      	str	r1, [r7, #8]
 8015e2a:	607a      	str	r2, [r7, #4]
 8015e2c:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8015e2e:	202c      	movs	r0, #44	@ 0x2c
 8015e30:	f000 fdb4 	bl	801699c <pvPortMalloc>
 8015e34:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8015e36:	697b      	ldr	r3, [r7, #20]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d00d      	beq.n	8015e58 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8015e3c:	697b      	ldr	r3, [r7, #20]
 8015e3e:	2200      	movs	r2, #0
 8015e40:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8015e44:	697b      	ldr	r3, [r7, #20]
 8015e46:	9301      	str	r3, [sp, #4]
 8015e48:	6a3b      	ldr	r3, [r7, #32]
 8015e4a:	9300      	str	r3, [sp, #0]
 8015e4c:	683b      	ldr	r3, [r7, #0]
 8015e4e:	687a      	ldr	r2, [r7, #4]
 8015e50:	68b9      	ldr	r1, [r7, #8]
 8015e52:	68f8      	ldr	r0, [r7, #12]
 8015e54:	f000 f805 	bl	8015e62 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8015e58:	697b      	ldr	r3, [r7, #20]
	}
 8015e5a:	4618      	mov	r0, r3
 8015e5c:	3718      	adds	r7, #24
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}

08015e62 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8015e62:	b580      	push	{r7, lr}
 8015e64:	b086      	sub	sp, #24
 8015e66:	af00      	add	r7, sp, #0
 8015e68:	60f8      	str	r0, [r7, #12]
 8015e6a:	60b9      	str	r1, [r7, #8]
 8015e6c:	607a      	str	r2, [r7, #4]
 8015e6e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8015e70:	68bb      	ldr	r3, [r7, #8]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d10b      	bne.n	8015e8e <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8015e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e7a:	f383 8811 	msr	BASEPRI, r3
 8015e7e:	f3bf 8f6f 	isb	sy
 8015e82:	f3bf 8f4f 	dsb	sy
 8015e86:	617b      	str	r3, [r7, #20]
}
 8015e88:	bf00      	nop
 8015e8a:	bf00      	nop
 8015e8c:	e7fd      	b.n	8015e8a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8015e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	d01e      	beq.n	8015ed2 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8015e94:	f000 faf2 	bl	801647c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8015e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e9a:	68fa      	ldr	r2, [r7, #12]
 8015e9c:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8015e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea0:	68ba      	ldr	r2, [r7, #8]
 8015ea2:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8015ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea6:	683a      	ldr	r2, [r7, #0]
 8015ea8:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8015eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eac:	6a3a      	ldr	r2, [r7, #32]
 8015eae:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8015eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eb2:	3304      	adds	r3, #4
 8015eb4:	4618      	mov	r0, r3
 8015eb6:	f7fd ff19 	bl	8013cec <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d008      	beq.n	8015ed2 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8015ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ec2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ec6:	f043 0304 	orr.w	r3, r3, #4
 8015eca:	b2da      	uxtb	r2, r3
 8015ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ece:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8015ed2:	bf00      	nop
 8015ed4:	3718      	adds	r7, #24
 8015ed6:	46bd      	mov	sp, r7
 8015ed8:	bd80      	pop	{r7, pc}
	...

08015edc <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015edc:	b580      	push	{r7, lr}
 8015ede:	b08a      	sub	sp, #40	@ 0x28
 8015ee0:	af00      	add	r7, sp, #0
 8015ee2:	60f8      	str	r0, [r7, #12]
 8015ee4:	60b9      	str	r1, [r7, #8]
 8015ee6:	607a      	str	r2, [r7, #4]
 8015ee8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015eea:	2300      	movs	r3, #0
 8015eec:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d10b      	bne.n	8015f0c <xTimerGenericCommand+0x30>
	__asm volatile
 8015ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ef8:	f383 8811 	msr	BASEPRI, r3
 8015efc:	f3bf 8f6f 	isb	sy
 8015f00:	f3bf 8f4f 	dsb	sy
 8015f04:	623b      	str	r3, [r7, #32]
}
 8015f06:	bf00      	nop
 8015f08:	bf00      	nop
 8015f0a:	e7fd      	b.n	8015f08 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015f0c:	4b19      	ldr	r3, [pc, #100]	@ (8015f74 <xTimerGenericCommand+0x98>)
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d02a      	beq.n	8015f6a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015f20:	68bb      	ldr	r3, [r7, #8]
 8015f22:	2b05      	cmp	r3, #5
 8015f24:	dc18      	bgt.n	8015f58 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015f26:	f7ff fc6d 	bl	8015804 <xTaskGetSchedulerState>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	2b02      	cmp	r3, #2
 8015f2e:	d109      	bne.n	8015f44 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015f30:	4b10      	ldr	r3, [pc, #64]	@ (8015f74 <xTimerGenericCommand+0x98>)
 8015f32:	6818      	ldr	r0, [r3, #0]
 8015f34:	f107 0110 	add.w	r1, r7, #16
 8015f38:	2300      	movs	r3, #0
 8015f3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015f3c:	f7fe f8e2 	bl	8014104 <xQueueGenericSend>
 8015f40:	6278      	str	r0, [r7, #36]	@ 0x24
 8015f42:	e012      	b.n	8015f6a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015f44:	4b0b      	ldr	r3, [pc, #44]	@ (8015f74 <xTimerGenericCommand+0x98>)
 8015f46:	6818      	ldr	r0, [r3, #0]
 8015f48:	f107 0110 	add.w	r1, r7, #16
 8015f4c:	2300      	movs	r3, #0
 8015f4e:	2200      	movs	r2, #0
 8015f50:	f7fe f8d8 	bl	8014104 <xQueueGenericSend>
 8015f54:	6278      	str	r0, [r7, #36]	@ 0x24
 8015f56:	e008      	b.n	8015f6a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015f58:	4b06      	ldr	r3, [pc, #24]	@ (8015f74 <xTimerGenericCommand+0x98>)
 8015f5a:	6818      	ldr	r0, [r3, #0]
 8015f5c:	f107 0110 	add.w	r1, r7, #16
 8015f60:	2300      	movs	r3, #0
 8015f62:	683a      	ldr	r2, [r7, #0]
 8015f64:	f7fe f9d0 	bl	8014308 <xQueueGenericSendFromISR>
 8015f68:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8015f6c:	4618      	mov	r0, r3
 8015f6e:	3728      	adds	r7, #40	@ 0x28
 8015f70:	46bd      	mov	sp, r7
 8015f72:	bd80      	pop	{r7, pc}
 8015f74:	20004c60 	.word	0x20004c60

08015f78 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015f78:	b580      	push	{r7, lr}
 8015f7a:	b088      	sub	sp, #32
 8015f7c:	af02      	add	r7, sp, #8
 8015f7e:	6078      	str	r0, [r7, #4]
 8015f80:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015f82:	4b23      	ldr	r3, [pc, #140]	@ (8016010 <prvProcessExpiredTimer+0x98>)
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	68db      	ldr	r3, [r3, #12]
 8015f88:	68db      	ldr	r3, [r3, #12]
 8015f8a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015f8c:	697b      	ldr	r3, [r7, #20]
 8015f8e:	3304      	adds	r3, #4
 8015f90:	4618      	mov	r0, r3
 8015f92:	f7fd ff15 	bl	8013dc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015f96:	697b      	ldr	r3, [r7, #20]
 8015f98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015f9c:	f003 0304 	and.w	r3, r3, #4
 8015fa0:	2b00      	cmp	r3, #0
 8015fa2:	d023      	beq.n	8015fec <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015fa4:	697b      	ldr	r3, [r7, #20]
 8015fa6:	699a      	ldr	r2, [r3, #24]
 8015fa8:	687b      	ldr	r3, [r7, #4]
 8015faa:	18d1      	adds	r1, r2, r3
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	683a      	ldr	r2, [r7, #0]
 8015fb0:	6978      	ldr	r0, [r7, #20]
 8015fb2:	f000 f8d5 	bl	8016160 <prvInsertTimerInActiveList>
 8015fb6:	4603      	mov	r3, r0
 8015fb8:	2b00      	cmp	r3, #0
 8015fba:	d020      	beq.n	8015ffe <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015fbc:	2300      	movs	r3, #0
 8015fbe:	9300      	str	r3, [sp, #0]
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	687a      	ldr	r2, [r7, #4]
 8015fc4:	2100      	movs	r1, #0
 8015fc6:	6978      	ldr	r0, [r7, #20]
 8015fc8:	f7ff ff88 	bl	8015edc <xTimerGenericCommand>
 8015fcc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015fce:	693b      	ldr	r3, [r7, #16]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d114      	bne.n	8015ffe <prvProcessExpiredTimer+0x86>
	__asm volatile
 8015fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fd8:	f383 8811 	msr	BASEPRI, r3
 8015fdc:	f3bf 8f6f 	isb	sy
 8015fe0:	f3bf 8f4f 	dsb	sy
 8015fe4:	60fb      	str	r3, [r7, #12]
}
 8015fe6:	bf00      	nop
 8015fe8:	bf00      	nop
 8015fea:	e7fd      	b.n	8015fe8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015fec:	697b      	ldr	r3, [r7, #20]
 8015fee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8015ff2:	f023 0301 	bic.w	r3, r3, #1
 8015ff6:	b2da      	uxtb	r2, r3
 8015ff8:	697b      	ldr	r3, [r7, #20]
 8015ffa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015ffe:	697b      	ldr	r3, [r7, #20]
 8016000:	6a1b      	ldr	r3, [r3, #32]
 8016002:	6978      	ldr	r0, [r7, #20]
 8016004:	4798      	blx	r3
}
 8016006:	bf00      	nop
 8016008:	3718      	adds	r7, #24
 801600a:	46bd      	mov	sp, r7
 801600c:	bd80      	pop	{r7, pc}
 801600e:	bf00      	nop
 8016010:	20004c58 	.word	0x20004c58

08016014 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016014:	b580      	push	{r7, lr}
 8016016:	b084      	sub	sp, #16
 8016018:	af00      	add	r7, sp, #0
 801601a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801601c:	f107 0308 	add.w	r3, r7, #8
 8016020:	4618      	mov	r0, r3
 8016022:	f000 f859 	bl	80160d8 <prvGetNextExpireTime>
 8016026:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016028:	68bb      	ldr	r3, [r7, #8]
 801602a:	4619      	mov	r1, r3
 801602c:	68f8      	ldr	r0, [r7, #12]
 801602e:	f000 f805 	bl	801603c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8016032:	f000 f8d7 	bl	80161e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016036:	bf00      	nop
 8016038:	e7f0      	b.n	801601c <prvTimerTask+0x8>
	...

0801603c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801603c:	b580      	push	{r7, lr}
 801603e:	b084      	sub	sp, #16
 8016040:	af00      	add	r7, sp, #0
 8016042:	6078      	str	r0, [r7, #4]
 8016044:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8016046:	f7fe ffd9 	bl	8014ffc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801604a:	f107 0308 	add.w	r3, r7, #8
 801604e:	4618      	mov	r0, r3
 8016050:	f000 f866 	bl	8016120 <prvSampleTimeNow>
 8016054:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8016056:	68bb      	ldr	r3, [r7, #8]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d130      	bne.n	80160be <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801605c:	683b      	ldr	r3, [r7, #0]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d10a      	bne.n	8016078 <prvProcessTimerOrBlockTask+0x3c>
 8016062:	687a      	ldr	r2, [r7, #4]
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	429a      	cmp	r2, r3
 8016068:	d806      	bhi.n	8016078 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801606a:	f7fe ffd5 	bl	8015018 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801606e:	68f9      	ldr	r1, [r7, #12]
 8016070:	6878      	ldr	r0, [r7, #4]
 8016072:	f7ff ff81 	bl	8015f78 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8016076:	e024      	b.n	80160c2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	2b00      	cmp	r3, #0
 801607c:	d008      	beq.n	8016090 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801607e:	4b13      	ldr	r3, [pc, #76]	@ (80160cc <prvProcessTimerOrBlockTask+0x90>)
 8016080:	681b      	ldr	r3, [r3, #0]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	2b00      	cmp	r3, #0
 8016086:	d101      	bne.n	801608c <prvProcessTimerOrBlockTask+0x50>
 8016088:	2301      	movs	r3, #1
 801608a:	e000      	b.n	801608e <prvProcessTimerOrBlockTask+0x52>
 801608c:	2300      	movs	r3, #0
 801608e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016090:	4b0f      	ldr	r3, [pc, #60]	@ (80160d0 <prvProcessTimerOrBlockTask+0x94>)
 8016092:	6818      	ldr	r0, [r3, #0]
 8016094:	687a      	ldr	r2, [r7, #4]
 8016096:	68fb      	ldr	r3, [r7, #12]
 8016098:	1ad3      	subs	r3, r2, r3
 801609a:	683a      	ldr	r2, [r7, #0]
 801609c:	4619      	mov	r1, r3
 801609e:	f7fe fd15 	bl	8014acc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80160a2:	f7fe ffb9 	bl	8015018 <xTaskResumeAll>
 80160a6:	4603      	mov	r3, r0
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d10a      	bne.n	80160c2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80160ac:	4b09      	ldr	r3, [pc, #36]	@ (80160d4 <prvProcessTimerOrBlockTask+0x98>)
 80160ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80160b2:	601a      	str	r2, [r3, #0]
 80160b4:	f3bf 8f4f 	dsb	sy
 80160b8:	f3bf 8f6f 	isb	sy
}
 80160bc:	e001      	b.n	80160c2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80160be:	f7fe ffab 	bl	8015018 <xTaskResumeAll>
}
 80160c2:	bf00      	nop
 80160c4:	3710      	adds	r7, #16
 80160c6:	46bd      	mov	sp, r7
 80160c8:	bd80      	pop	{r7, pc}
 80160ca:	bf00      	nop
 80160cc:	20004c5c 	.word	0x20004c5c
 80160d0:	20004c60 	.word	0x20004c60
 80160d4:	e000ed04 	.word	0xe000ed04

080160d8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80160d8:	b480      	push	{r7}
 80160da:	b085      	sub	sp, #20
 80160dc:	af00      	add	r7, sp, #0
 80160de:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80160e0:	4b0e      	ldr	r3, [pc, #56]	@ (801611c <prvGetNextExpireTime+0x44>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	681b      	ldr	r3, [r3, #0]
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	d101      	bne.n	80160ee <prvGetNextExpireTime+0x16>
 80160ea:	2201      	movs	r2, #1
 80160ec:	e000      	b.n	80160f0 <prvGetNextExpireTime+0x18>
 80160ee:	2200      	movs	r2, #0
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80160f4:	687b      	ldr	r3, [r7, #4]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	2b00      	cmp	r3, #0
 80160fa:	d105      	bne.n	8016108 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80160fc:	4b07      	ldr	r3, [pc, #28]	@ (801611c <prvGetNextExpireTime+0x44>)
 80160fe:	681b      	ldr	r3, [r3, #0]
 8016100:	68db      	ldr	r3, [r3, #12]
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	60fb      	str	r3, [r7, #12]
 8016106:	e001      	b.n	801610c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016108:	2300      	movs	r3, #0
 801610a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801610c:	68fb      	ldr	r3, [r7, #12]
}
 801610e:	4618      	mov	r0, r3
 8016110:	3714      	adds	r7, #20
 8016112:	46bd      	mov	sp, r7
 8016114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016118:	4770      	bx	lr
 801611a:	bf00      	nop
 801611c:	20004c58 	.word	0x20004c58

08016120 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016120:	b580      	push	{r7, lr}
 8016122:	b084      	sub	sp, #16
 8016124:	af00      	add	r7, sp, #0
 8016126:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016128:	f7ff f814 	bl	8015154 <xTaskGetTickCount>
 801612c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801612e:	4b0b      	ldr	r3, [pc, #44]	@ (801615c <prvSampleTimeNow+0x3c>)
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	68fa      	ldr	r2, [r7, #12]
 8016134:	429a      	cmp	r2, r3
 8016136:	d205      	bcs.n	8016144 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016138:	f000 f93a 	bl	80163b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	2201      	movs	r2, #1
 8016140:	601a      	str	r2, [r3, #0]
 8016142:	e002      	b.n	801614a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	2200      	movs	r2, #0
 8016148:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801614a:	4a04      	ldr	r2, [pc, #16]	@ (801615c <prvSampleTimeNow+0x3c>)
 801614c:	68fb      	ldr	r3, [r7, #12]
 801614e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016150:	68fb      	ldr	r3, [r7, #12]
}
 8016152:	4618      	mov	r0, r3
 8016154:	3710      	adds	r7, #16
 8016156:	46bd      	mov	sp, r7
 8016158:	bd80      	pop	{r7, pc}
 801615a:	bf00      	nop
 801615c:	20004c68 	.word	0x20004c68

08016160 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b086      	sub	sp, #24
 8016164:	af00      	add	r7, sp, #0
 8016166:	60f8      	str	r0, [r7, #12]
 8016168:	60b9      	str	r1, [r7, #8]
 801616a:	607a      	str	r2, [r7, #4]
 801616c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801616e:	2300      	movs	r3, #0
 8016170:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016172:	68fb      	ldr	r3, [r7, #12]
 8016174:	68ba      	ldr	r2, [r7, #8]
 8016176:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	68fa      	ldr	r2, [r7, #12]
 801617c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801617e:	68ba      	ldr	r2, [r7, #8]
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	429a      	cmp	r2, r3
 8016184:	d812      	bhi.n	80161ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016186:	687a      	ldr	r2, [r7, #4]
 8016188:	683b      	ldr	r3, [r7, #0]
 801618a:	1ad2      	subs	r2, r2, r3
 801618c:	68fb      	ldr	r3, [r7, #12]
 801618e:	699b      	ldr	r3, [r3, #24]
 8016190:	429a      	cmp	r2, r3
 8016192:	d302      	bcc.n	801619a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016194:	2301      	movs	r3, #1
 8016196:	617b      	str	r3, [r7, #20]
 8016198:	e01b      	b.n	80161d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801619a:	4b10      	ldr	r3, [pc, #64]	@ (80161dc <prvInsertTimerInActiveList+0x7c>)
 801619c:	681a      	ldr	r2, [r3, #0]
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	3304      	adds	r3, #4
 80161a2:	4619      	mov	r1, r3
 80161a4:	4610      	mov	r0, r2
 80161a6:	f7fd fdd2 	bl	8013d4e <vListInsert>
 80161aa:	e012      	b.n	80161d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80161ac:	687a      	ldr	r2, [r7, #4]
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	429a      	cmp	r2, r3
 80161b2:	d206      	bcs.n	80161c2 <prvInsertTimerInActiveList+0x62>
 80161b4:	68ba      	ldr	r2, [r7, #8]
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d302      	bcc.n	80161c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80161bc:	2301      	movs	r3, #1
 80161be:	617b      	str	r3, [r7, #20]
 80161c0:	e007      	b.n	80161d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80161c2:	4b07      	ldr	r3, [pc, #28]	@ (80161e0 <prvInsertTimerInActiveList+0x80>)
 80161c4:	681a      	ldr	r2, [r3, #0]
 80161c6:	68fb      	ldr	r3, [r7, #12]
 80161c8:	3304      	adds	r3, #4
 80161ca:	4619      	mov	r1, r3
 80161cc:	4610      	mov	r0, r2
 80161ce:	f7fd fdbe 	bl	8013d4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80161d2:	697b      	ldr	r3, [r7, #20]
}
 80161d4:	4618      	mov	r0, r3
 80161d6:	3718      	adds	r7, #24
 80161d8:	46bd      	mov	sp, r7
 80161da:	bd80      	pop	{r7, pc}
 80161dc:	20004c5c 	.word	0x20004c5c
 80161e0:	20004c58 	.word	0x20004c58

080161e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b08e      	sub	sp, #56	@ 0x38
 80161e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80161ea:	e0ce      	b.n	801638a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	da19      	bge.n	8016226 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80161f2:	1d3b      	adds	r3, r7, #4
 80161f4:	3304      	adds	r3, #4
 80161f6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80161f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80161fa:	2b00      	cmp	r3, #0
 80161fc:	d10b      	bne.n	8016216 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80161fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016202:	f383 8811 	msr	BASEPRI, r3
 8016206:	f3bf 8f6f 	isb	sy
 801620a:	f3bf 8f4f 	dsb	sy
 801620e:	61fb      	str	r3, [r7, #28]
}
 8016210:	bf00      	nop
 8016212:	bf00      	nop
 8016214:	e7fd      	b.n	8016212 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016216:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801621c:	6850      	ldr	r0, [r2, #4]
 801621e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016220:	6892      	ldr	r2, [r2, #8]
 8016222:	4611      	mov	r1, r2
 8016224:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	2b00      	cmp	r3, #0
 801622a:	f2c0 80ae 	blt.w	801638a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016234:	695b      	ldr	r3, [r3, #20]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d004      	beq.n	8016244 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801623a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801623c:	3304      	adds	r3, #4
 801623e:	4618      	mov	r0, r3
 8016240:	f7fd fdbe 	bl	8013dc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016244:	463b      	mov	r3, r7
 8016246:	4618      	mov	r0, r3
 8016248:	f7ff ff6a 	bl	8016120 <prvSampleTimeNow>
 801624c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	2b09      	cmp	r3, #9
 8016252:	f200 8097 	bhi.w	8016384 <prvProcessReceivedCommands+0x1a0>
 8016256:	a201      	add	r2, pc, #4	@ (adr r2, 801625c <prvProcessReceivedCommands+0x78>)
 8016258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801625c:	08016285 	.word	0x08016285
 8016260:	08016285 	.word	0x08016285
 8016264:	08016285 	.word	0x08016285
 8016268:	080162fb 	.word	0x080162fb
 801626c:	0801630f 	.word	0x0801630f
 8016270:	0801635b 	.word	0x0801635b
 8016274:	08016285 	.word	0x08016285
 8016278:	08016285 	.word	0x08016285
 801627c:	080162fb 	.word	0x080162fb
 8016280:	0801630f 	.word	0x0801630f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016284:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016286:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801628a:	f043 0301 	orr.w	r3, r3, #1
 801628e:	b2da      	uxtb	r2, r3
 8016290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016296:	68ba      	ldr	r2, [r7, #8]
 8016298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801629a:	699b      	ldr	r3, [r3, #24]
 801629c:	18d1      	adds	r1, r2, r3
 801629e:	68bb      	ldr	r3, [r7, #8]
 80162a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80162a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80162a4:	f7ff ff5c 	bl	8016160 <prvInsertTimerInActiveList>
 80162a8:	4603      	mov	r3, r0
 80162aa:	2b00      	cmp	r3, #0
 80162ac:	d06c      	beq.n	8016388 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80162ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162b0:	6a1b      	ldr	r3, [r3, #32]
 80162b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80162b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80162b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162b8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80162bc:	f003 0304 	and.w	r3, r3, #4
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d061      	beq.n	8016388 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80162c4:	68ba      	ldr	r2, [r7, #8]
 80162c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162c8:	699b      	ldr	r3, [r3, #24]
 80162ca:	441a      	add	r2, r3
 80162cc:	2300      	movs	r3, #0
 80162ce:	9300      	str	r3, [sp, #0]
 80162d0:	2300      	movs	r3, #0
 80162d2:	2100      	movs	r1, #0
 80162d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80162d6:	f7ff fe01 	bl	8015edc <xTimerGenericCommand>
 80162da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80162dc:	6a3b      	ldr	r3, [r7, #32]
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d152      	bne.n	8016388 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80162e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80162e6:	f383 8811 	msr	BASEPRI, r3
 80162ea:	f3bf 8f6f 	isb	sy
 80162ee:	f3bf 8f4f 	dsb	sy
 80162f2:	61bb      	str	r3, [r7, #24]
}
 80162f4:	bf00      	nop
 80162f6:	bf00      	nop
 80162f8:	e7fd      	b.n	80162f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80162fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80162fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016300:	f023 0301 	bic.w	r3, r3, #1
 8016304:	b2da      	uxtb	r2, r3
 8016306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016308:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801630c:	e03d      	b.n	801638a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801630e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016310:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016314:	f043 0301 	orr.w	r3, r3, #1
 8016318:	b2da      	uxtb	r2, r3
 801631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801631c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016320:	68ba      	ldr	r2, [r7, #8]
 8016322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016324:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016328:	699b      	ldr	r3, [r3, #24]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d10b      	bne.n	8016346 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801632e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016332:	f383 8811 	msr	BASEPRI, r3
 8016336:	f3bf 8f6f 	isb	sy
 801633a:	f3bf 8f4f 	dsb	sy
 801633e:	617b      	str	r3, [r7, #20]
}
 8016340:	bf00      	nop
 8016342:	bf00      	nop
 8016344:	e7fd      	b.n	8016342 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016348:	699a      	ldr	r2, [r3, #24]
 801634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801634c:	18d1      	adds	r1, r2, r3
 801634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016352:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016354:	f7ff ff04 	bl	8016160 <prvInsertTimerInActiveList>
					break;
 8016358:	e017      	b.n	801638a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801635a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801635c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016360:	f003 0302 	and.w	r3, r3, #2
 8016364:	2b00      	cmp	r3, #0
 8016366:	d103      	bne.n	8016370 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8016368:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801636a:	f000 fbe5 	bl	8016b38 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801636e:	e00c      	b.n	801638a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016372:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016376:	f023 0301 	bic.w	r3, r3, #1
 801637a:	b2da      	uxtb	r2, r3
 801637c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801637e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8016382:	e002      	b.n	801638a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8016384:	bf00      	nop
 8016386:	e000      	b.n	801638a <prvProcessReceivedCommands+0x1a6>
					break;
 8016388:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801638a:	4b08      	ldr	r3, [pc, #32]	@ (80163ac <prvProcessReceivedCommands+0x1c8>)
 801638c:	681b      	ldr	r3, [r3, #0]
 801638e:	1d39      	adds	r1, r7, #4
 8016390:	2200      	movs	r2, #0
 8016392:	4618      	mov	r0, r3
 8016394:	f7fe f856 	bl	8014444 <xQueueReceive>
 8016398:	4603      	mov	r3, r0
 801639a:	2b00      	cmp	r3, #0
 801639c:	f47f af26 	bne.w	80161ec <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80163a0:	bf00      	nop
 80163a2:	bf00      	nop
 80163a4:	3730      	adds	r7, #48	@ 0x30
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd80      	pop	{r7, pc}
 80163aa:	bf00      	nop
 80163ac:	20004c60 	.word	0x20004c60

080163b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b088      	sub	sp, #32
 80163b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80163b6:	e049      	b.n	801644c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80163b8:	4b2e      	ldr	r3, [pc, #184]	@ (8016474 <prvSwitchTimerLists+0xc4>)
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	68db      	ldr	r3, [r3, #12]
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80163c2:	4b2c      	ldr	r3, [pc, #176]	@ (8016474 <prvSwitchTimerLists+0xc4>)
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	68db      	ldr	r3, [r3, #12]
 80163c8:	68db      	ldr	r3, [r3, #12]
 80163ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	3304      	adds	r3, #4
 80163d0:	4618      	mov	r0, r3
 80163d2:	f7fd fcf5 	bl	8013dc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	6a1b      	ldr	r3, [r3, #32]
 80163da:	68f8      	ldr	r0, [r7, #12]
 80163dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80163de:	68fb      	ldr	r3, [r7, #12]
 80163e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80163e4:	f003 0304 	and.w	r3, r3, #4
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d02f      	beq.n	801644c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	699b      	ldr	r3, [r3, #24]
 80163f0:	693a      	ldr	r2, [r7, #16]
 80163f2:	4413      	add	r3, r2
 80163f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80163f6:	68ba      	ldr	r2, [r7, #8]
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	429a      	cmp	r2, r3
 80163fc:	d90e      	bls.n	801641c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	68ba      	ldr	r2, [r7, #8]
 8016402:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	68fa      	ldr	r2, [r7, #12]
 8016408:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801640a:	4b1a      	ldr	r3, [pc, #104]	@ (8016474 <prvSwitchTimerLists+0xc4>)
 801640c:	681a      	ldr	r2, [r3, #0]
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	3304      	adds	r3, #4
 8016412:	4619      	mov	r1, r3
 8016414:	4610      	mov	r0, r2
 8016416:	f7fd fc9a 	bl	8013d4e <vListInsert>
 801641a:	e017      	b.n	801644c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801641c:	2300      	movs	r3, #0
 801641e:	9300      	str	r3, [sp, #0]
 8016420:	2300      	movs	r3, #0
 8016422:	693a      	ldr	r2, [r7, #16]
 8016424:	2100      	movs	r1, #0
 8016426:	68f8      	ldr	r0, [r7, #12]
 8016428:	f7ff fd58 	bl	8015edc <xTimerGenericCommand>
 801642c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801642e:	687b      	ldr	r3, [r7, #4]
 8016430:	2b00      	cmp	r3, #0
 8016432:	d10b      	bne.n	801644c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8016434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016438:	f383 8811 	msr	BASEPRI, r3
 801643c:	f3bf 8f6f 	isb	sy
 8016440:	f3bf 8f4f 	dsb	sy
 8016444:	603b      	str	r3, [r7, #0]
}
 8016446:	bf00      	nop
 8016448:	bf00      	nop
 801644a:	e7fd      	b.n	8016448 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801644c:	4b09      	ldr	r3, [pc, #36]	@ (8016474 <prvSwitchTimerLists+0xc4>)
 801644e:	681b      	ldr	r3, [r3, #0]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d1b0      	bne.n	80163b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016456:	4b07      	ldr	r3, [pc, #28]	@ (8016474 <prvSwitchTimerLists+0xc4>)
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801645c:	4b06      	ldr	r3, [pc, #24]	@ (8016478 <prvSwitchTimerLists+0xc8>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	4a04      	ldr	r2, [pc, #16]	@ (8016474 <prvSwitchTimerLists+0xc4>)
 8016462:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016464:	4a04      	ldr	r2, [pc, #16]	@ (8016478 <prvSwitchTimerLists+0xc8>)
 8016466:	697b      	ldr	r3, [r7, #20]
 8016468:	6013      	str	r3, [r2, #0]
}
 801646a:	bf00      	nop
 801646c:	3718      	adds	r7, #24
 801646e:	46bd      	mov	sp, r7
 8016470:	bd80      	pop	{r7, pc}
 8016472:	bf00      	nop
 8016474:	20004c58 	.word	0x20004c58
 8016478:	20004c5c 	.word	0x20004c5c

0801647c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801647c:	b580      	push	{r7, lr}
 801647e:	b082      	sub	sp, #8
 8016480:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016482:	f000 f969 	bl	8016758 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016486:	4b15      	ldr	r3, [pc, #84]	@ (80164dc <prvCheckForValidListAndQueue+0x60>)
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d120      	bne.n	80164d0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801648e:	4814      	ldr	r0, [pc, #80]	@ (80164e0 <prvCheckForValidListAndQueue+0x64>)
 8016490:	f7fd fc0c 	bl	8013cac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016494:	4813      	ldr	r0, [pc, #76]	@ (80164e4 <prvCheckForValidListAndQueue+0x68>)
 8016496:	f7fd fc09 	bl	8013cac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801649a:	4b13      	ldr	r3, [pc, #76]	@ (80164e8 <prvCheckForValidListAndQueue+0x6c>)
 801649c:	4a10      	ldr	r2, [pc, #64]	@ (80164e0 <prvCheckForValidListAndQueue+0x64>)
 801649e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80164a0:	4b12      	ldr	r3, [pc, #72]	@ (80164ec <prvCheckForValidListAndQueue+0x70>)
 80164a2:	4a10      	ldr	r2, [pc, #64]	@ (80164e4 <prvCheckForValidListAndQueue+0x68>)
 80164a4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80164a6:	2300      	movs	r3, #0
 80164a8:	9300      	str	r3, [sp, #0]
 80164aa:	4b11      	ldr	r3, [pc, #68]	@ (80164f0 <prvCheckForValidListAndQueue+0x74>)
 80164ac:	4a11      	ldr	r2, [pc, #68]	@ (80164f4 <prvCheckForValidListAndQueue+0x78>)
 80164ae:	2110      	movs	r1, #16
 80164b0:	200a      	movs	r0, #10
 80164b2:	f7fd fd19 	bl	8013ee8 <xQueueGenericCreateStatic>
 80164b6:	4603      	mov	r3, r0
 80164b8:	4a08      	ldr	r2, [pc, #32]	@ (80164dc <prvCheckForValidListAndQueue+0x60>)
 80164ba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80164bc:	4b07      	ldr	r3, [pc, #28]	@ (80164dc <prvCheckForValidListAndQueue+0x60>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d005      	beq.n	80164d0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80164c4:	4b05      	ldr	r3, [pc, #20]	@ (80164dc <prvCheckForValidListAndQueue+0x60>)
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	490b      	ldr	r1, [pc, #44]	@ (80164f8 <prvCheckForValidListAndQueue+0x7c>)
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7fe fad4 	bl	8014a78 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80164d0:	f000 f974 	bl	80167bc <vPortExitCritical>
}
 80164d4:	bf00      	nop
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	bf00      	nop
 80164dc:	20004c60 	.word	0x20004c60
 80164e0:	20004c30 	.word	0x20004c30
 80164e4:	20004c44 	.word	0x20004c44
 80164e8:	20004c58 	.word	0x20004c58
 80164ec:	20004c5c 	.word	0x20004c5c
 80164f0:	20004d0c 	.word	0x20004d0c
 80164f4:	20004c6c 	.word	0x20004c6c
 80164f8:	08020154 	.word	0x08020154

080164fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80164fc:	b480      	push	{r7}
 80164fe:	b085      	sub	sp, #20
 8016500:	af00      	add	r7, sp, #0
 8016502:	60f8      	str	r0, [r7, #12]
 8016504:	60b9      	str	r1, [r7, #8]
 8016506:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	3b04      	subs	r3, #4
 801650c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016514:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016516:	68fb      	ldr	r3, [r7, #12]
 8016518:	3b04      	subs	r3, #4
 801651a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	f023 0201 	bic.w	r2, r3, #1
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016526:	68fb      	ldr	r3, [r7, #12]
 8016528:	3b04      	subs	r3, #4
 801652a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801652c:	4a0c      	ldr	r2, [pc, #48]	@ (8016560 <pxPortInitialiseStack+0x64>)
 801652e:	68fb      	ldr	r3, [r7, #12]
 8016530:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	3b14      	subs	r3, #20
 8016536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016538:	687a      	ldr	r2, [r7, #4]
 801653a:	68fb      	ldr	r3, [r7, #12]
 801653c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	3b04      	subs	r3, #4
 8016542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	f06f 0202 	mvn.w	r2, #2
 801654a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	3b20      	subs	r3, #32
 8016550:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016552:	68fb      	ldr	r3, [r7, #12]
}
 8016554:	4618      	mov	r0, r3
 8016556:	3714      	adds	r7, #20
 8016558:	46bd      	mov	sp, r7
 801655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801655e:	4770      	bx	lr
 8016560:	08016565 	.word	0x08016565

08016564 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016564:	b480      	push	{r7}
 8016566:	b085      	sub	sp, #20
 8016568:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801656a:	2300      	movs	r3, #0
 801656c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801656e:	4b13      	ldr	r3, [pc, #76]	@ (80165bc <prvTaskExitError+0x58>)
 8016570:	681b      	ldr	r3, [r3, #0]
 8016572:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016576:	d00b      	beq.n	8016590 <prvTaskExitError+0x2c>
	__asm volatile
 8016578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801657c:	f383 8811 	msr	BASEPRI, r3
 8016580:	f3bf 8f6f 	isb	sy
 8016584:	f3bf 8f4f 	dsb	sy
 8016588:	60fb      	str	r3, [r7, #12]
}
 801658a:	bf00      	nop
 801658c:	bf00      	nop
 801658e:	e7fd      	b.n	801658c <prvTaskExitError+0x28>
	__asm volatile
 8016590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016594:	f383 8811 	msr	BASEPRI, r3
 8016598:	f3bf 8f6f 	isb	sy
 801659c:	f3bf 8f4f 	dsb	sy
 80165a0:	60bb      	str	r3, [r7, #8]
}
 80165a2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80165a4:	bf00      	nop
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d0fc      	beq.n	80165a6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80165ac:	bf00      	nop
 80165ae:	bf00      	nop
 80165b0:	3714      	adds	r7, #20
 80165b2:	46bd      	mov	sp, r7
 80165b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b8:	4770      	bx	lr
 80165ba:	bf00      	nop
 80165bc:	200000ec 	.word	0x200000ec

080165c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80165c0:	4b07      	ldr	r3, [pc, #28]	@ (80165e0 <pxCurrentTCBConst2>)
 80165c2:	6819      	ldr	r1, [r3, #0]
 80165c4:	6808      	ldr	r0, [r1, #0]
 80165c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165ca:	f380 8809 	msr	PSP, r0
 80165ce:	f3bf 8f6f 	isb	sy
 80165d2:	f04f 0000 	mov.w	r0, #0
 80165d6:	f380 8811 	msr	BASEPRI, r0
 80165da:	4770      	bx	lr
 80165dc:	f3af 8000 	nop.w

080165e0 <pxCurrentTCBConst2>:
 80165e0:	20004730 	.word	0x20004730
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80165e4:	bf00      	nop
 80165e6:	bf00      	nop

080165e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80165e8:	4808      	ldr	r0, [pc, #32]	@ (801660c <prvPortStartFirstTask+0x24>)
 80165ea:	6800      	ldr	r0, [r0, #0]
 80165ec:	6800      	ldr	r0, [r0, #0]
 80165ee:	f380 8808 	msr	MSP, r0
 80165f2:	f04f 0000 	mov.w	r0, #0
 80165f6:	f380 8814 	msr	CONTROL, r0
 80165fa:	b662      	cpsie	i
 80165fc:	b661      	cpsie	f
 80165fe:	f3bf 8f4f 	dsb	sy
 8016602:	f3bf 8f6f 	isb	sy
 8016606:	df00      	svc	0
 8016608:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801660a:	bf00      	nop
 801660c:	e000ed08 	.word	0xe000ed08

08016610 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b086      	sub	sp, #24
 8016614:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016616:	4b47      	ldr	r3, [pc, #284]	@ (8016734 <xPortStartScheduler+0x124>)
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	4a47      	ldr	r2, [pc, #284]	@ (8016738 <xPortStartScheduler+0x128>)
 801661c:	4293      	cmp	r3, r2
 801661e:	d10b      	bne.n	8016638 <xPortStartScheduler+0x28>
	__asm volatile
 8016620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016624:	f383 8811 	msr	BASEPRI, r3
 8016628:	f3bf 8f6f 	isb	sy
 801662c:	f3bf 8f4f 	dsb	sy
 8016630:	60fb      	str	r3, [r7, #12]
}
 8016632:	bf00      	nop
 8016634:	bf00      	nop
 8016636:	e7fd      	b.n	8016634 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016638:	4b3e      	ldr	r3, [pc, #248]	@ (8016734 <xPortStartScheduler+0x124>)
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	4a3f      	ldr	r2, [pc, #252]	@ (801673c <xPortStartScheduler+0x12c>)
 801663e:	4293      	cmp	r3, r2
 8016640:	d10b      	bne.n	801665a <xPortStartScheduler+0x4a>
	__asm volatile
 8016642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016646:	f383 8811 	msr	BASEPRI, r3
 801664a:	f3bf 8f6f 	isb	sy
 801664e:	f3bf 8f4f 	dsb	sy
 8016652:	613b      	str	r3, [r7, #16]
}
 8016654:	bf00      	nop
 8016656:	bf00      	nop
 8016658:	e7fd      	b.n	8016656 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801665a:	4b39      	ldr	r3, [pc, #228]	@ (8016740 <xPortStartScheduler+0x130>)
 801665c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801665e:	697b      	ldr	r3, [r7, #20]
 8016660:	781b      	ldrb	r3, [r3, #0]
 8016662:	b2db      	uxtb	r3, r3
 8016664:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016666:	697b      	ldr	r3, [r7, #20]
 8016668:	22ff      	movs	r2, #255	@ 0xff
 801666a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	781b      	ldrb	r3, [r3, #0]
 8016670:	b2db      	uxtb	r3, r3
 8016672:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016674:	78fb      	ldrb	r3, [r7, #3]
 8016676:	b2db      	uxtb	r3, r3
 8016678:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801667c:	b2da      	uxtb	r2, r3
 801667e:	4b31      	ldr	r3, [pc, #196]	@ (8016744 <xPortStartScheduler+0x134>)
 8016680:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016682:	4b31      	ldr	r3, [pc, #196]	@ (8016748 <xPortStartScheduler+0x138>)
 8016684:	2207      	movs	r2, #7
 8016686:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016688:	e009      	b.n	801669e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801668a:	4b2f      	ldr	r3, [pc, #188]	@ (8016748 <xPortStartScheduler+0x138>)
 801668c:	681b      	ldr	r3, [r3, #0]
 801668e:	3b01      	subs	r3, #1
 8016690:	4a2d      	ldr	r2, [pc, #180]	@ (8016748 <xPortStartScheduler+0x138>)
 8016692:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016694:	78fb      	ldrb	r3, [r7, #3]
 8016696:	b2db      	uxtb	r3, r3
 8016698:	005b      	lsls	r3, r3, #1
 801669a:	b2db      	uxtb	r3, r3
 801669c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801669e:	78fb      	ldrb	r3, [r7, #3]
 80166a0:	b2db      	uxtb	r3, r3
 80166a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80166a6:	2b80      	cmp	r3, #128	@ 0x80
 80166a8:	d0ef      	beq.n	801668a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80166aa:	4b27      	ldr	r3, [pc, #156]	@ (8016748 <xPortStartScheduler+0x138>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	f1c3 0307 	rsb	r3, r3, #7
 80166b2:	2b04      	cmp	r3, #4
 80166b4:	d00b      	beq.n	80166ce <xPortStartScheduler+0xbe>
	__asm volatile
 80166b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166ba:	f383 8811 	msr	BASEPRI, r3
 80166be:	f3bf 8f6f 	isb	sy
 80166c2:	f3bf 8f4f 	dsb	sy
 80166c6:	60bb      	str	r3, [r7, #8]
}
 80166c8:	bf00      	nop
 80166ca:	bf00      	nop
 80166cc:	e7fd      	b.n	80166ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80166ce:	4b1e      	ldr	r3, [pc, #120]	@ (8016748 <xPortStartScheduler+0x138>)
 80166d0:	681b      	ldr	r3, [r3, #0]
 80166d2:	021b      	lsls	r3, r3, #8
 80166d4:	4a1c      	ldr	r2, [pc, #112]	@ (8016748 <xPortStartScheduler+0x138>)
 80166d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80166d8:	4b1b      	ldr	r3, [pc, #108]	@ (8016748 <xPortStartScheduler+0x138>)
 80166da:	681b      	ldr	r3, [r3, #0]
 80166dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80166e0:	4a19      	ldr	r2, [pc, #100]	@ (8016748 <xPortStartScheduler+0x138>)
 80166e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	b2da      	uxtb	r2, r3
 80166e8:	697b      	ldr	r3, [r7, #20]
 80166ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80166ec:	4b17      	ldr	r3, [pc, #92]	@ (801674c <xPortStartScheduler+0x13c>)
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	4a16      	ldr	r2, [pc, #88]	@ (801674c <xPortStartScheduler+0x13c>)
 80166f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80166f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80166f8:	4b14      	ldr	r3, [pc, #80]	@ (801674c <xPortStartScheduler+0x13c>)
 80166fa:	681b      	ldr	r3, [r3, #0]
 80166fc:	4a13      	ldr	r2, [pc, #76]	@ (801674c <xPortStartScheduler+0x13c>)
 80166fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016702:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016704:	f000 f8da 	bl	80168bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016708:	4b11      	ldr	r3, [pc, #68]	@ (8016750 <xPortStartScheduler+0x140>)
 801670a:	2200      	movs	r2, #0
 801670c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801670e:	f000 f8f9 	bl	8016904 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016712:	4b10      	ldr	r3, [pc, #64]	@ (8016754 <xPortStartScheduler+0x144>)
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	4a0f      	ldr	r2, [pc, #60]	@ (8016754 <xPortStartScheduler+0x144>)
 8016718:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801671c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801671e:	f7ff ff63 	bl	80165e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016722:	f7fe fde1 	bl	80152e8 <vTaskSwitchContext>
	prvTaskExitError();
 8016726:	f7ff ff1d 	bl	8016564 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801672a:	2300      	movs	r3, #0
}
 801672c:	4618      	mov	r0, r3
 801672e:	3718      	adds	r7, #24
 8016730:	46bd      	mov	sp, r7
 8016732:	bd80      	pop	{r7, pc}
 8016734:	e000ed00 	.word	0xe000ed00
 8016738:	410fc271 	.word	0x410fc271
 801673c:	410fc270 	.word	0x410fc270
 8016740:	e000e400 	.word	0xe000e400
 8016744:	20004d5c 	.word	0x20004d5c
 8016748:	20004d60 	.word	0x20004d60
 801674c:	e000ed20 	.word	0xe000ed20
 8016750:	200000ec 	.word	0x200000ec
 8016754:	e000ef34 	.word	0xe000ef34

08016758 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016758:	b480      	push	{r7}
 801675a:	b083      	sub	sp, #12
 801675c:	af00      	add	r7, sp, #0
	__asm volatile
 801675e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016762:	f383 8811 	msr	BASEPRI, r3
 8016766:	f3bf 8f6f 	isb	sy
 801676a:	f3bf 8f4f 	dsb	sy
 801676e:	607b      	str	r3, [r7, #4]
}
 8016770:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016772:	4b10      	ldr	r3, [pc, #64]	@ (80167b4 <vPortEnterCritical+0x5c>)
 8016774:	681b      	ldr	r3, [r3, #0]
 8016776:	3301      	adds	r3, #1
 8016778:	4a0e      	ldr	r2, [pc, #56]	@ (80167b4 <vPortEnterCritical+0x5c>)
 801677a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801677c:	4b0d      	ldr	r3, [pc, #52]	@ (80167b4 <vPortEnterCritical+0x5c>)
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	2b01      	cmp	r3, #1
 8016782:	d110      	bne.n	80167a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016784:	4b0c      	ldr	r3, [pc, #48]	@ (80167b8 <vPortEnterCritical+0x60>)
 8016786:	681b      	ldr	r3, [r3, #0]
 8016788:	b2db      	uxtb	r3, r3
 801678a:	2b00      	cmp	r3, #0
 801678c:	d00b      	beq.n	80167a6 <vPortEnterCritical+0x4e>
	__asm volatile
 801678e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016792:	f383 8811 	msr	BASEPRI, r3
 8016796:	f3bf 8f6f 	isb	sy
 801679a:	f3bf 8f4f 	dsb	sy
 801679e:	603b      	str	r3, [r7, #0]
}
 80167a0:	bf00      	nop
 80167a2:	bf00      	nop
 80167a4:	e7fd      	b.n	80167a2 <vPortEnterCritical+0x4a>
	}
}
 80167a6:	bf00      	nop
 80167a8:	370c      	adds	r7, #12
 80167aa:	46bd      	mov	sp, r7
 80167ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b0:	4770      	bx	lr
 80167b2:	bf00      	nop
 80167b4:	200000ec 	.word	0x200000ec
 80167b8:	e000ed04 	.word	0xe000ed04

080167bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80167bc:	b480      	push	{r7}
 80167be:	b083      	sub	sp, #12
 80167c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80167c2:	4b12      	ldr	r3, [pc, #72]	@ (801680c <vPortExitCritical+0x50>)
 80167c4:	681b      	ldr	r3, [r3, #0]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	d10b      	bne.n	80167e2 <vPortExitCritical+0x26>
	__asm volatile
 80167ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80167ce:	f383 8811 	msr	BASEPRI, r3
 80167d2:	f3bf 8f6f 	isb	sy
 80167d6:	f3bf 8f4f 	dsb	sy
 80167da:	607b      	str	r3, [r7, #4]
}
 80167dc:	bf00      	nop
 80167de:	bf00      	nop
 80167e0:	e7fd      	b.n	80167de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80167e2:	4b0a      	ldr	r3, [pc, #40]	@ (801680c <vPortExitCritical+0x50>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	3b01      	subs	r3, #1
 80167e8:	4a08      	ldr	r2, [pc, #32]	@ (801680c <vPortExitCritical+0x50>)
 80167ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80167ec:	4b07      	ldr	r3, [pc, #28]	@ (801680c <vPortExitCritical+0x50>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	d105      	bne.n	8016800 <vPortExitCritical+0x44>
 80167f4:	2300      	movs	r3, #0
 80167f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80167f8:	683b      	ldr	r3, [r7, #0]
 80167fa:	f383 8811 	msr	BASEPRI, r3
}
 80167fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016800:	bf00      	nop
 8016802:	370c      	adds	r7, #12
 8016804:	46bd      	mov	sp, r7
 8016806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801680a:	4770      	bx	lr
 801680c:	200000ec 	.word	0x200000ec

08016810 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016810:	f3ef 8009 	mrs	r0, PSP
 8016814:	f3bf 8f6f 	isb	sy
 8016818:	4b15      	ldr	r3, [pc, #84]	@ (8016870 <pxCurrentTCBConst>)
 801681a:	681a      	ldr	r2, [r3, #0]
 801681c:	f01e 0f10 	tst.w	lr, #16
 8016820:	bf08      	it	eq
 8016822:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016826:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801682a:	6010      	str	r0, [r2, #0]
 801682c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016830:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016834:	f380 8811 	msr	BASEPRI, r0
 8016838:	f3bf 8f4f 	dsb	sy
 801683c:	f3bf 8f6f 	isb	sy
 8016840:	f7fe fd52 	bl	80152e8 <vTaskSwitchContext>
 8016844:	f04f 0000 	mov.w	r0, #0
 8016848:	f380 8811 	msr	BASEPRI, r0
 801684c:	bc09      	pop	{r0, r3}
 801684e:	6819      	ldr	r1, [r3, #0]
 8016850:	6808      	ldr	r0, [r1, #0]
 8016852:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016856:	f01e 0f10 	tst.w	lr, #16
 801685a:	bf08      	it	eq
 801685c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016860:	f380 8809 	msr	PSP, r0
 8016864:	f3bf 8f6f 	isb	sy
 8016868:	4770      	bx	lr
 801686a:	bf00      	nop
 801686c:	f3af 8000 	nop.w

08016870 <pxCurrentTCBConst>:
 8016870:	20004730 	.word	0x20004730
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016874:	bf00      	nop
 8016876:	bf00      	nop

08016878 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b082      	sub	sp, #8
 801687c:	af00      	add	r7, sp, #0
	__asm volatile
 801687e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016882:	f383 8811 	msr	BASEPRI, r3
 8016886:	f3bf 8f6f 	isb	sy
 801688a:	f3bf 8f4f 	dsb	sy
 801688e:	607b      	str	r3, [r7, #4]
}
 8016890:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016892:	f7fe fc6f 	bl	8015174 <xTaskIncrementTick>
 8016896:	4603      	mov	r3, r0
 8016898:	2b00      	cmp	r3, #0
 801689a:	d003      	beq.n	80168a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801689c:	4b06      	ldr	r3, [pc, #24]	@ (80168b8 <xPortSysTickHandler+0x40>)
 801689e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80168a2:	601a      	str	r2, [r3, #0]
 80168a4:	2300      	movs	r3, #0
 80168a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80168a8:	683b      	ldr	r3, [r7, #0]
 80168aa:	f383 8811 	msr	BASEPRI, r3
}
 80168ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80168b0:	bf00      	nop
 80168b2:	3708      	adds	r7, #8
 80168b4:	46bd      	mov	sp, r7
 80168b6:	bd80      	pop	{r7, pc}
 80168b8:	e000ed04 	.word	0xe000ed04

080168bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80168bc:	b480      	push	{r7}
 80168be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80168c0:	4b0b      	ldr	r3, [pc, #44]	@ (80168f0 <vPortSetupTimerInterrupt+0x34>)
 80168c2:	2200      	movs	r2, #0
 80168c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80168c6:	4b0b      	ldr	r3, [pc, #44]	@ (80168f4 <vPortSetupTimerInterrupt+0x38>)
 80168c8:	2200      	movs	r2, #0
 80168ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80168cc:	4b0a      	ldr	r3, [pc, #40]	@ (80168f8 <vPortSetupTimerInterrupt+0x3c>)
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	4a0a      	ldr	r2, [pc, #40]	@ (80168fc <vPortSetupTimerInterrupt+0x40>)
 80168d2:	fba2 2303 	umull	r2, r3, r2, r3
 80168d6:	099b      	lsrs	r3, r3, #6
 80168d8:	4a09      	ldr	r2, [pc, #36]	@ (8016900 <vPortSetupTimerInterrupt+0x44>)
 80168da:	3b01      	subs	r3, #1
 80168dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80168de:	4b04      	ldr	r3, [pc, #16]	@ (80168f0 <vPortSetupTimerInterrupt+0x34>)
 80168e0:	2207      	movs	r2, #7
 80168e2:	601a      	str	r2, [r3, #0]
}
 80168e4:	bf00      	nop
 80168e6:	46bd      	mov	sp, r7
 80168e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168ec:	4770      	bx	lr
 80168ee:	bf00      	nop
 80168f0:	e000e010 	.word	0xe000e010
 80168f4:	e000e018 	.word	0xe000e018
 80168f8:	20000054 	.word	0x20000054
 80168fc:	10624dd3 	.word	0x10624dd3
 8016900:	e000e014 	.word	0xe000e014

08016904 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016904:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016914 <vPortEnableVFP+0x10>
 8016908:	6801      	ldr	r1, [r0, #0]
 801690a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801690e:	6001      	str	r1, [r0, #0]
 8016910:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016912:	bf00      	nop
 8016914:	e000ed88 	.word	0xe000ed88

08016918 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016918:	b480      	push	{r7}
 801691a:	b085      	sub	sp, #20
 801691c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801691e:	f3ef 8305 	mrs	r3, IPSR
 8016922:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016924:	68fb      	ldr	r3, [r7, #12]
 8016926:	2b0f      	cmp	r3, #15
 8016928:	d915      	bls.n	8016956 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801692a:	4a18      	ldr	r2, [pc, #96]	@ (801698c <vPortValidateInterruptPriority+0x74>)
 801692c:	68fb      	ldr	r3, [r7, #12]
 801692e:	4413      	add	r3, r2
 8016930:	781b      	ldrb	r3, [r3, #0]
 8016932:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016934:	4b16      	ldr	r3, [pc, #88]	@ (8016990 <vPortValidateInterruptPriority+0x78>)
 8016936:	781b      	ldrb	r3, [r3, #0]
 8016938:	7afa      	ldrb	r2, [r7, #11]
 801693a:	429a      	cmp	r2, r3
 801693c:	d20b      	bcs.n	8016956 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801693e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016942:	f383 8811 	msr	BASEPRI, r3
 8016946:	f3bf 8f6f 	isb	sy
 801694a:	f3bf 8f4f 	dsb	sy
 801694e:	607b      	str	r3, [r7, #4]
}
 8016950:	bf00      	nop
 8016952:	bf00      	nop
 8016954:	e7fd      	b.n	8016952 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016956:	4b0f      	ldr	r3, [pc, #60]	@ (8016994 <vPortValidateInterruptPriority+0x7c>)
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801695e:	4b0e      	ldr	r3, [pc, #56]	@ (8016998 <vPortValidateInterruptPriority+0x80>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	429a      	cmp	r2, r3
 8016964:	d90b      	bls.n	801697e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801696a:	f383 8811 	msr	BASEPRI, r3
 801696e:	f3bf 8f6f 	isb	sy
 8016972:	f3bf 8f4f 	dsb	sy
 8016976:	603b      	str	r3, [r7, #0]
}
 8016978:	bf00      	nop
 801697a:	bf00      	nop
 801697c:	e7fd      	b.n	801697a <vPortValidateInterruptPriority+0x62>
	}
 801697e:	bf00      	nop
 8016980:	3714      	adds	r7, #20
 8016982:	46bd      	mov	sp, r7
 8016984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016988:	4770      	bx	lr
 801698a:	bf00      	nop
 801698c:	e000e3f0 	.word	0xe000e3f0
 8016990:	20004d5c 	.word	0x20004d5c
 8016994:	e000ed0c 	.word	0xe000ed0c
 8016998:	20004d60 	.word	0x20004d60

0801699c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801699c:	b580      	push	{r7, lr}
 801699e:	b08a      	sub	sp, #40	@ 0x28
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80169a4:	2300      	movs	r3, #0
 80169a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80169a8:	f7fe fb28 	bl	8014ffc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80169ac:	4b5c      	ldr	r3, [pc, #368]	@ (8016b20 <pvPortMalloc+0x184>)
 80169ae:	681b      	ldr	r3, [r3, #0]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d101      	bne.n	80169b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80169b4:	f000 f924 	bl	8016c00 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80169b8:	4b5a      	ldr	r3, [pc, #360]	@ (8016b24 <pvPortMalloc+0x188>)
 80169ba:	681a      	ldr	r2, [r3, #0]
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	4013      	ands	r3, r2
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	f040 8095 	bne.w	8016af0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d01e      	beq.n	8016a0a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80169cc:	2208      	movs	r2, #8
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	4413      	add	r3, r2
 80169d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f003 0307 	and.w	r3, r3, #7
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d015      	beq.n	8016a0a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	f023 0307 	bic.w	r3, r3, #7
 80169e4:	3308      	adds	r3, #8
 80169e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	f003 0307 	and.w	r3, r3, #7
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	d00b      	beq.n	8016a0a <pvPortMalloc+0x6e>
	__asm volatile
 80169f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169f6:	f383 8811 	msr	BASEPRI, r3
 80169fa:	f3bf 8f6f 	isb	sy
 80169fe:	f3bf 8f4f 	dsb	sy
 8016a02:	617b      	str	r3, [r7, #20]
}
 8016a04:	bf00      	nop
 8016a06:	bf00      	nop
 8016a08:	e7fd      	b.n	8016a06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d06f      	beq.n	8016af0 <pvPortMalloc+0x154>
 8016a10:	4b45      	ldr	r3, [pc, #276]	@ (8016b28 <pvPortMalloc+0x18c>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	687a      	ldr	r2, [r7, #4]
 8016a16:	429a      	cmp	r2, r3
 8016a18:	d86a      	bhi.n	8016af0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016a1a:	4b44      	ldr	r3, [pc, #272]	@ (8016b2c <pvPortMalloc+0x190>)
 8016a1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016a1e:	4b43      	ldr	r3, [pc, #268]	@ (8016b2c <pvPortMalloc+0x190>)
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a24:	e004      	b.n	8016a30 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a32:	685b      	ldr	r3, [r3, #4]
 8016a34:	687a      	ldr	r2, [r7, #4]
 8016a36:	429a      	cmp	r2, r3
 8016a38:	d903      	bls.n	8016a42 <pvPortMalloc+0xa6>
 8016a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a3c:	681b      	ldr	r3, [r3, #0]
 8016a3e:	2b00      	cmp	r3, #0
 8016a40:	d1f1      	bne.n	8016a26 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016a42:	4b37      	ldr	r3, [pc, #220]	@ (8016b20 <pvPortMalloc+0x184>)
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a48:	429a      	cmp	r2, r3
 8016a4a:	d051      	beq.n	8016af0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016a4c:	6a3b      	ldr	r3, [r7, #32]
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	2208      	movs	r2, #8
 8016a52:	4413      	add	r3, r2
 8016a54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a58:	681a      	ldr	r2, [r3, #0]
 8016a5a:	6a3b      	ldr	r3, [r7, #32]
 8016a5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a60:	685a      	ldr	r2, [r3, #4]
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	1ad2      	subs	r2, r2, r3
 8016a66:	2308      	movs	r3, #8
 8016a68:	005b      	lsls	r3, r3, #1
 8016a6a:	429a      	cmp	r2, r3
 8016a6c:	d920      	bls.n	8016ab0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	4413      	add	r3, r2
 8016a74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016a76:	69bb      	ldr	r3, [r7, #24]
 8016a78:	f003 0307 	and.w	r3, r3, #7
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d00b      	beq.n	8016a98 <pvPortMalloc+0xfc>
	__asm volatile
 8016a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a84:	f383 8811 	msr	BASEPRI, r3
 8016a88:	f3bf 8f6f 	isb	sy
 8016a8c:	f3bf 8f4f 	dsb	sy
 8016a90:	613b      	str	r3, [r7, #16]
}
 8016a92:	bf00      	nop
 8016a94:	bf00      	nop
 8016a96:	e7fd      	b.n	8016a94 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a9a:	685a      	ldr	r2, [r3, #4]
 8016a9c:	687b      	ldr	r3, [r7, #4]
 8016a9e:	1ad2      	subs	r2, r2, r3
 8016aa0:	69bb      	ldr	r3, [r7, #24]
 8016aa2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016aa6:	687a      	ldr	r2, [r7, #4]
 8016aa8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016aaa:	69b8      	ldr	r0, [r7, #24]
 8016aac:	f000 f90a 	bl	8016cc4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016ab0:	4b1d      	ldr	r3, [pc, #116]	@ (8016b28 <pvPortMalloc+0x18c>)
 8016ab2:	681a      	ldr	r2, [r3, #0]
 8016ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ab6:	685b      	ldr	r3, [r3, #4]
 8016ab8:	1ad3      	subs	r3, r2, r3
 8016aba:	4a1b      	ldr	r2, [pc, #108]	@ (8016b28 <pvPortMalloc+0x18c>)
 8016abc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016abe:	4b1a      	ldr	r3, [pc, #104]	@ (8016b28 <pvPortMalloc+0x18c>)
 8016ac0:	681a      	ldr	r2, [r3, #0]
 8016ac2:	4b1b      	ldr	r3, [pc, #108]	@ (8016b30 <pvPortMalloc+0x194>)
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	429a      	cmp	r2, r3
 8016ac8:	d203      	bcs.n	8016ad2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016aca:	4b17      	ldr	r3, [pc, #92]	@ (8016b28 <pvPortMalloc+0x18c>)
 8016acc:	681b      	ldr	r3, [r3, #0]
 8016ace:	4a18      	ldr	r2, [pc, #96]	@ (8016b30 <pvPortMalloc+0x194>)
 8016ad0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ad4:	685a      	ldr	r2, [r3, #4]
 8016ad6:	4b13      	ldr	r3, [pc, #76]	@ (8016b24 <pvPortMalloc+0x188>)
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	431a      	orrs	r2, r3
 8016adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ade:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016ae6:	4b13      	ldr	r3, [pc, #76]	@ (8016b34 <pvPortMalloc+0x198>)
 8016ae8:	681b      	ldr	r3, [r3, #0]
 8016aea:	3301      	adds	r3, #1
 8016aec:	4a11      	ldr	r2, [pc, #68]	@ (8016b34 <pvPortMalloc+0x198>)
 8016aee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016af0:	f7fe fa92 	bl	8015018 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016af4:	69fb      	ldr	r3, [r7, #28]
 8016af6:	f003 0307 	and.w	r3, r3, #7
 8016afa:	2b00      	cmp	r3, #0
 8016afc:	d00b      	beq.n	8016b16 <pvPortMalloc+0x17a>
	__asm volatile
 8016afe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b02:	f383 8811 	msr	BASEPRI, r3
 8016b06:	f3bf 8f6f 	isb	sy
 8016b0a:	f3bf 8f4f 	dsb	sy
 8016b0e:	60fb      	str	r3, [r7, #12]
}
 8016b10:	bf00      	nop
 8016b12:	bf00      	nop
 8016b14:	e7fd      	b.n	8016b12 <pvPortMalloc+0x176>
	return pvReturn;
 8016b16:	69fb      	ldr	r3, [r7, #28]
}
 8016b18:	4618      	mov	r0, r3
 8016b1a:	3728      	adds	r7, #40	@ 0x28
 8016b1c:	46bd      	mov	sp, r7
 8016b1e:	bd80      	pop	{r7, pc}
 8016b20:	2000896c 	.word	0x2000896c
 8016b24:	20008980 	.word	0x20008980
 8016b28:	20008970 	.word	0x20008970
 8016b2c:	20008964 	.word	0x20008964
 8016b30:	20008974 	.word	0x20008974
 8016b34:	20008978 	.word	0x20008978

08016b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	b086      	sub	sp, #24
 8016b3c:	af00      	add	r7, sp, #0
 8016b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d04f      	beq.n	8016bea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016b4a:	2308      	movs	r3, #8
 8016b4c:	425b      	negs	r3, r3
 8016b4e:	697a      	ldr	r2, [r7, #20]
 8016b50:	4413      	add	r3, r2
 8016b52:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016b54:	697b      	ldr	r3, [r7, #20]
 8016b56:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016b58:	693b      	ldr	r3, [r7, #16]
 8016b5a:	685a      	ldr	r2, [r3, #4]
 8016b5c:	4b25      	ldr	r3, [pc, #148]	@ (8016bf4 <vPortFree+0xbc>)
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	4013      	ands	r3, r2
 8016b62:	2b00      	cmp	r3, #0
 8016b64:	d10b      	bne.n	8016b7e <vPortFree+0x46>
	__asm volatile
 8016b66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b6a:	f383 8811 	msr	BASEPRI, r3
 8016b6e:	f3bf 8f6f 	isb	sy
 8016b72:	f3bf 8f4f 	dsb	sy
 8016b76:	60fb      	str	r3, [r7, #12]
}
 8016b78:	bf00      	nop
 8016b7a:	bf00      	nop
 8016b7c:	e7fd      	b.n	8016b7a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016b7e:	693b      	ldr	r3, [r7, #16]
 8016b80:	681b      	ldr	r3, [r3, #0]
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	d00b      	beq.n	8016b9e <vPortFree+0x66>
	__asm volatile
 8016b86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b8a:	f383 8811 	msr	BASEPRI, r3
 8016b8e:	f3bf 8f6f 	isb	sy
 8016b92:	f3bf 8f4f 	dsb	sy
 8016b96:	60bb      	str	r3, [r7, #8]
}
 8016b98:	bf00      	nop
 8016b9a:	bf00      	nop
 8016b9c:	e7fd      	b.n	8016b9a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016b9e:	693b      	ldr	r3, [r7, #16]
 8016ba0:	685a      	ldr	r2, [r3, #4]
 8016ba2:	4b14      	ldr	r3, [pc, #80]	@ (8016bf4 <vPortFree+0xbc>)
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	4013      	ands	r3, r2
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d01e      	beq.n	8016bea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016bac:	693b      	ldr	r3, [r7, #16]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d11a      	bne.n	8016bea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016bb4:	693b      	ldr	r3, [r7, #16]
 8016bb6:	685a      	ldr	r2, [r3, #4]
 8016bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8016bf4 <vPortFree+0xbc>)
 8016bba:	681b      	ldr	r3, [r3, #0]
 8016bbc:	43db      	mvns	r3, r3
 8016bbe:	401a      	ands	r2, r3
 8016bc0:	693b      	ldr	r3, [r7, #16]
 8016bc2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016bc4:	f7fe fa1a 	bl	8014ffc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016bc8:	693b      	ldr	r3, [r7, #16]
 8016bca:	685a      	ldr	r2, [r3, #4]
 8016bcc:	4b0a      	ldr	r3, [pc, #40]	@ (8016bf8 <vPortFree+0xc0>)
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	4413      	add	r3, r2
 8016bd2:	4a09      	ldr	r2, [pc, #36]	@ (8016bf8 <vPortFree+0xc0>)
 8016bd4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016bd6:	6938      	ldr	r0, [r7, #16]
 8016bd8:	f000 f874 	bl	8016cc4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016bdc:	4b07      	ldr	r3, [pc, #28]	@ (8016bfc <vPortFree+0xc4>)
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	3301      	adds	r3, #1
 8016be2:	4a06      	ldr	r2, [pc, #24]	@ (8016bfc <vPortFree+0xc4>)
 8016be4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016be6:	f7fe fa17 	bl	8015018 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016bea:	bf00      	nop
 8016bec:	3718      	adds	r7, #24
 8016bee:	46bd      	mov	sp, r7
 8016bf0:	bd80      	pop	{r7, pc}
 8016bf2:	bf00      	nop
 8016bf4:	20008980 	.word	0x20008980
 8016bf8:	20008970 	.word	0x20008970
 8016bfc:	2000897c 	.word	0x2000897c

08016c00 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016c00:	b480      	push	{r7}
 8016c02:	b085      	sub	sp, #20
 8016c04:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016c06:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8016c0a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016c0c:	4b27      	ldr	r3, [pc, #156]	@ (8016cac <prvHeapInit+0xac>)
 8016c0e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016c10:	68fb      	ldr	r3, [r7, #12]
 8016c12:	f003 0307 	and.w	r3, r3, #7
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d00c      	beq.n	8016c34 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	3307      	adds	r3, #7
 8016c1e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	f023 0307 	bic.w	r3, r3, #7
 8016c26:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016c28:	68ba      	ldr	r2, [r7, #8]
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	1ad3      	subs	r3, r2, r3
 8016c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8016cac <prvHeapInit+0xac>)
 8016c30:	4413      	add	r3, r2
 8016c32:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016c34:	68fb      	ldr	r3, [r7, #12]
 8016c36:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016c38:	4a1d      	ldr	r2, [pc, #116]	@ (8016cb0 <prvHeapInit+0xb0>)
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016c3e:	4b1c      	ldr	r3, [pc, #112]	@ (8016cb0 <prvHeapInit+0xb0>)
 8016c40:	2200      	movs	r2, #0
 8016c42:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	68ba      	ldr	r2, [r7, #8]
 8016c48:	4413      	add	r3, r2
 8016c4a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016c4c:	2208      	movs	r2, #8
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	1a9b      	subs	r3, r3, r2
 8016c52:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	f023 0307 	bic.w	r3, r3, #7
 8016c5a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	4a15      	ldr	r2, [pc, #84]	@ (8016cb4 <prvHeapInit+0xb4>)
 8016c60:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016c62:	4b14      	ldr	r3, [pc, #80]	@ (8016cb4 <prvHeapInit+0xb4>)
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	2200      	movs	r2, #0
 8016c68:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016c6a:	4b12      	ldr	r3, [pc, #72]	@ (8016cb4 <prvHeapInit+0xb4>)
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	2200      	movs	r2, #0
 8016c70:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016c76:	683b      	ldr	r3, [r7, #0]
 8016c78:	68fa      	ldr	r2, [r7, #12]
 8016c7a:	1ad2      	subs	r2, r2, r3
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016c80:	4b0c      	ldr	r3, [pc, #48]	@ (8016cb4 <prvHeapInit+0xb4>)
 8016c82:	681a      	ldr	r2, [r3, #0]
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016c88:	683b      	ldr	r3, [r7, #0]
 8016c8a:	685b      	ldr	r3, [r3, #4]
 8016c8c:	4a0a      	ldr	r2, [pc, #40]	@ (8016cb8 <prvHeapInit+0xb8>)
 8016c8e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016c90:	683b      	ldr	r3, [r7, #0]
 8016c92:	685b      	ldr	r3, [r3, #4]
 8016c94:	4a09      	ldr	r2, [pc, #36]	@ (8016cbc <prvHeapInit+0xbc>)
 8016c96:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016c98:	4b09      	ldr	r3, [pc, #36]	@ (8016cc0 <prvHeapInit+0xc0>)
 8016c9a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016c9e:	601a      	str	r2, [r3, #0]
}
 8016ca0:	bf00      	nop
 8016ca2:	3714      	adds	r7, #20
 8016ca4:	46bd      	mov	sp, r7
 8016ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016caa:	4770      	bx	lr
 8016cac:	20004d64 	.word	0x20004d64
 8016cb0:	20008964 	.word	0x20008964
 8016cb4:	2000896c 	.word	0x2000896c
 8016cb8:	20008974 	.word	0x20008974
 8016cbc:	20008970 	.word	0x20008970
 8016cc0:	20008980 	.word	0x20008980

08016cc4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016cc4:	b480      	push	{r7}
 8016cc6:	b085      	sub	sp, #20
 8016cc8:	af00      	add	r7, sp, #0
 8016cca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016ccc:	4b28      	ldr	r3, [pc, #160]	@ (8016d70 <prvInsertBlockIntoFreeList+0xac>)
 8016cce:	60fb      	str	r3, [r7, #12]
 8016cd0:	e002      	b.n	8016cd8 <prvInsertBlockIntoFreeList+0x14>
 8016cd2:	68fb      	ldr	r3, [r7, #12]
 8016cd4:	681b      	ldr	r3, [r3, #0]
 8016cd6:	60fb      	str	r3, [r7, #12]
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	687a      	ldr	r2, [r7, #4]
 8016cde:	429a      	cmp	r2, r3
 8016ce0:	d8f7      	bhi.n	8016cd2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016ce6:	68fb      	ldr	r3, [r7, #12]
 8016ce8:	685b      	ldr	r3, [r3, #4]
 8016cea:	68ba      	ldr	r2, [r7, #8]
 8016cec:	4413      	add	r3, r2
 8016cee:	687a      	ldr	r2, [r7, #4]
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d108      	bne.n	8016d06 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	685a      	ldr	r2, [r3, #4]
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	685b      	ldr	r3, [r3, #4]
 8016cfc:	441a      	add	r2, r3
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	685b      	ldr	r3, [r3, #4]
 8016d0e:	68ba      	ldr	r2, [r7, #8]
 8016d10:	441a      	add	r2, r3
 8016d12:	68fb      	ldr	r3, [r7, #12]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	429a      	cmp	r2, r3
 8016d18:	d118      	bne.n	8016d4c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	681a      	ldr	r2, [r3, #0]
 8016d1e:	4b15      	ldr	r3, [pc, #84]	@ (8016d74 <prvInsertBlockIntoFreeList+0xb0>)
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	429a      	cmp	r2, r3
 8016d24:	d00d      	beq.n	8016d42 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	685a      	ldr	r2, [r3, #4]
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	681b      	ldr	r3, [r3, #0]
 8016d2e:	685b      	ldr	r3, [r3, #4]
 8016d30:	441a      	add	r2, r3
 8016d32:	687b      	ldr	r3, [r7, #4]
 8016d34:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	681b      	ldr	r3, [r3, #0]
 8016d3a:	681a      	ldr	r2, [r3, #0]
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	601a      	str	r2, [r3, #0]
 8016d40:	e008      	b.n	8016d54 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016d42:	4b0c      	ldr	r3, [pc, #48]	@ (8016d74 <prvInsertBlockIntoFreeList+0xb0>)
 8016d44:	681a      	ldr	r2, [r3, #0]
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	601a      	str	r2, [r3, #0]
 8016d4a:	e003      	b.n	8016d54 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016d4c:	68fb      	ldr	r3, [r7, #12]
 8016d4e:	681a      	ldr	r2, [r3, #0]
 8016d50:	687b      	ldr	r3, [r7, #4]
 8016d52:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016d54:	68fa      	ldr	r2, [r7, #12]
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	429a      	cmp	r2, r3
 8016d5a:	d002      	beq.n	8016d62 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	687a      	ldr	r2, [r7, #4]
 8016d60:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016d62:	bf00      	nop
 8016d64:	3714      	adds	r7, #20
 8016d66:	46bd      	mov	sp, r7
 8016d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d6c:	4770      	bx	lr
 8016d6e:	bf00      	nop
 8016d70:	20008964 	.word	0x20008964
 8016d74:	2000896c 	.word	0x2000896c

08016d78 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016d78:	b580      	push	{r7, lr}
 8016d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016d7c:	2200      	movs	r2, #0
 8016d7e:	4912      	ldr	r1, [pc, #72]	@ (8016dc8 <MX_USB_DEVICE_Init+0x50>)
 8016d80:	4812      	ldr	r0, [pc, #72]	@ (8016dcc <MX_USB_DEVICE_Init+0x54>)
 8016d82:	f7fb fb21 	bl	80123c8 <USBD_Init>
 8016d86:	4603      	mov	r3, r0
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d001      	beq.n	8016d90 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016d8c:	f7f1 fc64 	bl	8008658 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016d90:	490f      	ldr	r1, [pc, #60]	@ (8016dd0 <MX_USB_DEVICE_Init+0x58>)
 8016d92:	480e      	ldr	r0, [pc, #56]	@ (8016dcc <MX_USB_DEVICE_Init+0x54>)
 8016d94:	f7fb fb48 	bl	8012428 <USBD_RegisterClass>
 8016d98:	4603      	mov	r3, r0
 8016d9a:	2b00      	cmp	r3, #0
 8016d9c:	d001      	beq.n	8016da2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016d9e:	f7f1 fc5b 	bl	8008658 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016da2:	490c      	ldr	r1, [pc, #48]	@ (8016dd4 <MX_USB_DEVICE_Init+0x5c>)
 8016da4:	4809      	ldr	r0, [pc, #36]	@ (8016dcc <MX_USB_DEVICE_Init+0x54>)
 8016da6:	f7fb fa7f 	bl	80122a8 <USBD_CDC_RegisterInterface>
 8016daa:	4603      	mov	r3, r0
 8016dac:	2b00      	cmp	r3, #0
 8016dae:	d001      	beq.n	8016db4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016db0:	f7f1 fc52 	bl	8008658 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016db4:	4805      	ldr	r0, [pc, #20]	@ (8016dcc <MX_USB_DEVICE_Init+0x54>)
 8016db6:	f7fb fb6d 	bl	8012494 <USBD_Start>
 8016dba:	4603      	mov	r3, r0
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d001      	beq.n	8016dc4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016dc0:	f7f1 fc4a 	bl	8008658 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016dc4:	bf00      	nop
 8016dc6:	bd80      	pop	{r7, pc}
 8016dc8:	20000104 	.word	0x20000104
 8016dcc:	20008984 	.word	0x20008984
 8016dd0:	2000006c 	.word	0x2000006c
 8016dd4:	200000f0 	.word	0x200000f0

08016dd8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016ddc:	2200      	movs	r2, #0
 8016dde:	4905      	ldr	r1, [pc, #20]	@ (8016df4 <CDC_Init_FS+0x1c>)
 8016de0:	4805      	ldr	r0, [pc, #20]	@ (8016df8 <CDC_Init_FS+0x20>)
 8016de2:	f7fb fa7b 	bl	80122dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016de6:	4905      	ldr	r1, [pc, #20]	@ (8016dfc <CDC_Init_FS+0x24>)
 8016de8:	4803      	ldr	r0, [pc, #12]	@ (8016df8 <CDC_Init_FS+0x20>)
 8016dea:	f7fb fa99 	bl	8012320 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016dee:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016df0:	4618      	mov	r0, r3
 8016df2:	bd80      	pop	{r7, pc}
 8016df4:	20009460 	.word	0x20009460
 8016df8:	20008984 	.word	0x20008984
 8016dfc:	20008c60 	.word	0x20008c60

08016e00 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016e00:	b480      	push	{r7}
 8016e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016e04:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016e06:	4618      	mov	r0, r3
 8016e08:	46bd      	mov	sp, r7
 8016e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e0e:	4770      	bx	lr

08016e10 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016e10:	b480      	push	{r7}
 8016e12:	b083      	sub	sp, #12
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	4603      	mov	r3, r0
 8016e18:	6039      	str	r1, [r7, #0]
 8016e1a:	71fb      	strb	r3, [r7, #7]
 8016e1c:	4613      	mov	r3, r2
 8016e1e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016e20:	79fb      	ldrb	r3, [r7, #7]
 8016e22:	2b23      	cmp	r3, #35	@ 0x23
 8016e24:	d84a      	bhi.n	8016ebc <CDC_Control_FS+0xac>
 8016e26:	a201      	add	r2, pc, #4	@ (adr r2, 8016e2c <CDC_Control_FS+0x1c>)
 8016e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e2c:	08016ebd 	.word	0x08016ebd
 8016e30:	08016ebd 	.word	0x08016ebd
 8016e34:	08016ebd 	.word	0x08016ebd
 8016e38:	08016ebd 	.word	0x08016ebd
 8016e3c:	08016ebd 	.word	0x08016ebd
 8016e40:	08016ebd 	.word	0x08016ebd
 8016e44:	08016ebd 	.word	0x08016ebd
 8016e48:	08016ebd 	.word	0x08016ebd
 8016e4c:	08016ebd 	.word	0x08016ebd
 8016e50:	08016ebd 	.word	0x08016ebd
 8016e54:	08016ebd 	.word	0x08016ebd
 8016e58:	08016ebd 	.word	0x08016ebd
 8016e5c:	08016ebd 	.word	0x08016ebd
 8016e60:	08016ebd 	.word	0x08016ebd
 8016e64:	08016ebd 	.word	0x08016ebd
 8016e68:	08016ebd 	.word	0x08016ebd
 8016e6c:	08016ebd 	.word	0x08016ebd
 8016e70:	08016ebd 	.word	0x08016ebd
 8016e74:	08016ebd 	.word	0x08016ebd
 8016e78:	08016ebd 	.word	0x08016ebd
 8016e7c:	08016ebd 	.word	0x08016ebd
 8016e80:	08016ebd 	.word	0x08016ebd
 8016e84:	08016ebd 	.word	0x08016ebd
 8016e88:	08016ebd 	.word	0x08016ebd
 8016e8c:	08016ebd 	.word	0x08016ebd
 8016e90:	08016ebd 	.word	0x08016ebd
 8016e94:	08016ebd 	.word	0x08016ebd
 8016e98:	08016ebd 	.word	0x08016ebd
 8016e9c:	08016ebd 	.word	0x08016ebd
 8016ea0:	08016ebd 	.word	0x08016ebd
 8016ea4:	08016ebd 	.word	0x08016ebd
 8016ea8:	08016ebd 	.word	0x08016ebd
 8016eac:	08016ebd 	.word	0x08016ebd
 8016eb0:	08016ebd 	.word	0x08016ebd
 8016eb4:	08016ebd 	.word	0x08016ebd
 8016eb8:	08016ebd 	.word	0x08016ebd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016ebc:	bf00      	nop
  }

  return (USBD_OK);
 8016ebe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	370c      	adds	r7, #12
 8016ec4:	46bd      	mov	sp, r7
 8016ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016eca:	4770      	bx	lr

08016ecc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016ecc:	b580      	push	{r7, lr}
 8016ece:	b082      	sub	sp, #8
 8016ed0:	af00      	add	r7, sp, #0
 8016ed2:	6078      	str	r0, [r7, #4]
 8016ed4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016ed6:	6879      	ldr	r1, [r7, #4]
 8016ed8:	4805      	ldr	r0, [pc, #20]	@ (8016ef0 <CDC_Receive_FS+0x24>)
 8016eda:	f7fb fa21 	bl	8012320 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016ede:	4804      	ldr	r0, [pc, #16]	@ (8016ef0 <CDC_Receive_FS+0x24>)
 8016ee0:	f7fb fa3c 	bl	801235c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016ee4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	3708      	adds	r7, #8
 8016eea:	46bd      	mov	sp, r7
 8016eec:	bd80      	pop	{r7, pc}
 8016eee:	bf00      	nop
 8016ef0:	20008984 	.word	0x20008984

08016ef4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016ef4:	b480      	push	{r7}
 8016ef6:	b087      	sub	sp, #28
 8016ef8:	af00      	add	r7, sp, #0
 8016efa:	60f8      	str	r0, [r7, #12]
 8016efc:	60b9      	str	r1, [r7, #8]
 8016efe:	4613      	mov	r3, r2
 8016f00:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016f02:	2300      	movs	r3, #0
 8016f04:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016f06:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016f0a:	4618      	mov	r0, r3
 8016f0c:	371c      	adds	r7, #28
 8016f0e:	46bd      	mov	sp, r7
 8016f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f14:	4770      	bx	lr
	...

08016f18 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b083      	sub	sp, #12
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	4603      	mov	r3, r0
 8016f20:	6039      	str	r1, [r7, #0]
 8016f22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	2212      	movs	r2, #18
 8016f28:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016f2a:	4b03      	ldr	r3, [pc, #12]	@ (8016f38 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	370c      	adds	r7, #12
 8016f30:	46bd      	mov	sp, r7
 8016f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f36:	4770      	bx	lr
 8016f38:	20000120 	.word	0x20000120

08016f3c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f3c:	b480      	push	{r7}
 8016f3e:	b083      	sub	sp, #12
 8016f40:	af00      	add	r7, sp, #0
 8016f42:	4603      	mov	r3, r0
 8016f44:	6039      	str	r1, [r7, #0]
 8016f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016f48:	683b      	ldr	r3, [r7, #0]
 8016f4a:	2204      	movs	r2, #4
 8016f4c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016f4e:	4b03      	ldr	r3, [pc, #12]	@ (8016f5c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016f50:	4618      	mov	r0, r3
 8016f52:	370c      	adds	r7, #12
 8016f54:	46bd      	mov	sp, r7
 8016f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f5a:	4770      	bx	lr
 8016f5c:	20000134 	.word	0x20000134

08016f60 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f60:	b580      	push	{r7, lr}
 8016f62:	b082      	sub	sp, #8
 8016f64:	af00      	add	r7, sp, #0
 8016f66:	4603      	mov	r3, r0
 8016f68:	6039      	str	r1, [r7, #0]
 8016f6a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f6c:	79fb      	ldrb	r3, [r7, #7]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d105      	bne.n	8016f7e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016f72:	683a      	ldr	r2, [r7, #0]
 8016f74:	4907      	ldr	r1, [pc, #28]	@ (8016f94 <USBD_FS_ProductStrDescriptor+0x34>)
 8016f76:	4808      	ldr	r0, [pc, #32]	@ (8016f98 <USBD_FS_ProductStrDescriptor+0x38>)
 8016f78:	f7fc fc3c 	bl	80137f4 <USBD_GetString>
 8016f7c:	e004      	b.n	8016f88 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016f7e:	683a      	ldr	r2, [r7, #0]
 8016f80:	4904      	ldr	r1, [pc, #16]	@ (8016f94 <USBD_FS_ProductStrDescriptor+0x34>)
 8016f82:	4805      	ldr	r0, [pc, #20]	@ (8016f98 <USBD_FS_ProductStrDescriptor+0x38>)
 8016f84:	f7fc fc36 	bl	80137f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f88:	4b02      	ldr	r3, [pc, #8]	@ (8016f94 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	3708      	adds	r7, #8
 8016f8e:	46bd      	mov	sp, r7
 8016f90:	bd80      	pop	{r7, pc}
 8016f92:	bf00      	nop
 8016f94:	20009c60 	.word	0x20009c60
 8016f98:	0802015c 	.word	0x0802015c

08016f9c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	b082      	sub	sp, #8
 8016fa0:	af00      	add	r7, sp, #0
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	6039      	str	r1, [r7, #0]
 8016fa6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016fa8:	683a      	ldr	r2, [r7, #0]
 8016faa:	4904      	ldr	r1, [pc, #16]	@ (8016fbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016fac:	4804      	ldr	r0, [pc, #16]	@ (8016fc0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016fae:	f7fc fc21 	bl	80137f4 <USBD_GetString>
  return USBD_StrDesc;
 8016fb2:	4b02      	ldr	r3, [pc, #8]	@ (8016fbc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	3708      	adds	r7, #8
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	bd80      	pop	{r7, pc}
 8016fbc:	20009c60 	.word	0x20009c60
 8016fc0:	08020174 	.word	0x08020174

08016fc4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b082      	sub	sp, #8
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	4603      	mov	r3, r0
 8016fcc:	6039      	str	r1, [r7, #0]
 8016fce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016fd0:	683b      	ldr	r3, [r7, #0]
 8016fd2:	221a      	movs	r2, #26
 8016fd4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016fd6:	f000 f843 	bl	8017060 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016fda:	4b02      	ldr	r3, [pc, #8]	@ (8016fe4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016fdc:	4618      	mov	r0, r3
 8016fde:	3708      	adds	r7, #8
 8016fe0:	46bd      	mov	sp, r7
 8016fe2:	bd80      	pop	{r7, pc}
 8016fe4:	20000138 	.word	0x20000138

08016fe8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016fe8:	b580      	push	{r7, lr}
 8016fea:	b082      	sub	sp, #8
 8016fec:	af00      	add	r7, sp, #0
 8016fee:	4603      	mov	r3, r0
 8016ff0:	6039      	str	r1, [r7, #0]
 8016ff2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016ff4:	79fb      	ldrb	r3, [r7, #7]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d105      	bne.n	8017006 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016ffa:	683a      	ldr	r2, [r7, #0]
 8016ffc:	4907      	ldr	r1, [pc, #28]	@ (801701c <USBD_FS_ConfigStrDescriptor+0x34>)
 8016ffe:	4808      	ldr	r0, [pc, #32]	@ (8017020 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017000:	f7fc fbf8 	bl	80137f4 <USBD_GetString>
 8017004:	e004      	b.n	8017010 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017006:	683a      	ldr	r2, [r7, #0]
 8017008:	4904      	ldr	r1, [pc, #16]	@ (801701c <USBD_FS_ConfigStrDescriptor+0x34>)
 801700a:	4805      	ldr	r0, [pc, #20]	@ (8017020 <USBD_FS_ConfigStrDescriptor+0x38>)
 801700c:	f7fc fbf2 	bl	80137f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017010:	4b02      	ldr	r3, [pc, #8]	@ (801701c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017012:	4618      	mov	r0, r3
 8017014:	3708      	adds	r7, #8
 8017016:	46bd      	mov	sp, r7
 8017018:	bd80      	pop	{r7, pc}
 801701a:	bf00      	nop
 801701c:	20009c60 	.word	0x20009c60
 8017020:	08020188 	.word	0x08020188

08017024 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017024:	b580      	push	{r7, lr}
 8017026:	b082      	sub	sp, #8
 8017028:	af00      	add	r7, sp, #0
 801702a:	4603      	mov	r3, r0
 801702c:	6039      	str	r1, [r7, #0]
 801702e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017030:	79fb      	ldrb	r3, [r7, #7]
 8017032:	2b00      	cmp	r3, #0
 8017034:	d105      	bne.n	8017042 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017036:	683a      	ldr	r2, [r7, #0]
 8017038:	4907      	ldr	r1, [pc, #28]	@ (8017058 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801703a:	4808      	ldr	r0, [pc, #32]	@ (801705c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801703c:	f7fc fbda 	bl	80137f4 <USBD_GetString>
 8017040:	e004      	b.n	801704c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017042:	683a      	ldr	r2, [r7, #0]
 8017044:	4904      	ldr	r1, [pc, #16]	@ (8017058 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017046:	4805      	ldr	r0, [pc, #20]	@ (801705c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017048:	f7fc fbd4 	bl	80137f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 801704c:	4b02      	ldr	r3, [pc, #8]	@ (8017058 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801704e:	4618      	mov	r0, r3
 8017050:	3708      	adds	r7, #8
 8017052:	46bd      	mov	sp, r7
 8017054:	bd80      	pop	{r7, pc}
 8017056:	bf00      	nop
 8017058:	20009c60 	.word	0x20009c60
 801705c:	08020194 	.word	0x08020194

08017060 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b084      	sub	sp, #16
 8017064:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017066:	4b0f      	ldr	r3, [pc, #60]	@ (80170a4 <Get_SerialNum+0x44>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801706c:	4b0e      	ldr	r3, [pc, #56]	@ (80170a8 <Get_SerialNum+0x48>)
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017072:	4b0e      	ldr	r3, [pc, #56]	@ (80170ac <Get_SerialNum+0x4c>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017078:	68fa      	ldr	r2, [r7, #12]
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	4413      	add	r3, r2
 801707e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017080:	68fb      	ldr	r3, [r7, #12]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d009      	beq.n	801709a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017086:	2208      	movs	r2, #8
 8017088:	4909      	ldr	r1, [pc, #36]	@ (80170b0 <Get_SerialNum+0x50>)
 801708a:	68f8      	ldr	r0, [r7, #12]
 801708c:	f000 f814 	bl	80170b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017090:	2204      	movs	r2, #4
 8017092:	4908      	ldr	r1, [pc, #32]	@ (80170b4 <Get_SerialNum+0x54>)
 8017094:	68b8      	ldr	r0, [r7, #8]
 8017096:	f000 f80f 	bl	80170b8 <IntToUnicode>
  }
}
 801709a:	bf00      	nop
 801709c:	3710      	adds	r7, #16
 801709e:	46bd      	mov	sp, r7
 80170a0:	bd80      	pop	{r7, pc}
 80170a2:	bf00      	nop
 80170a4:	1fff7a10 	.word	0x1fff7a10
 80170a8:	1fff7a14 	.word	0x1fff7a14
 80170ac:	1fff7a18 	.word	0x1fff7a18
 80170b0:	2000013a 	.word	0x2000013a
 80170b4:	2000014a 	.word	0x2000014a

080170b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80170b8:	b480      	push	{r7}
 80170ba:	b087      	sub	sp, #28
 80170bc:	af00      	add	r7, sp, #0
 80170be:	60f8      	str	r0, [r7, #12]
 80170c0:	60b9      	str	r1, [r7, #8]
 80170c2:	4613      	mov	r3, r2
 80170c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80170c6:	2300      	movs	r3, #0
 80170c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80170ca:	2300      	movs	r3, #0
 80170cc:	75fb      	strb	r3, [r7, #23]
 80170ce:	e027      	b.n	8017120 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	0f1b      	lsrs	r3, r3, #28
 80170d4:	2b09      	cmp	r3, #9
 80170d6:	d80b      	bhi.n	80170f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	0f1b      	lsrs	r3, r3, #28
 80170dc:	b2da      	uxtb	r2, r3
 80170de:	7dfb      	ldrb	r3, [r7, #23]
 80170e0:	005b      	lsls	r3, r3, #1
 80170e2:	4619      	mov	r1, r3
 80170e4:	68bb      	ldr	r3, [r7, #8]
 80170e6:	440b      	add	r3, r1
 80170e8:	3230      	adds	r2, #48	@ 0x30
 80170ea:	b2d2      	uxtb	r2, r2
 80170ec:	701a      	strb	r2, [r3, #0]
 80170ee:	e00a      	b.n	8017106 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80170f0:	68fb      	ldr	r3, [r7, #12]
 80170f2:	0f1b      	lsrs	r3, r3, #28
 80170f4:	b2da      	uxtb	r2, r3
 80170f6:	7dfb      	ldrb	r3, [r7, #23]
 80170f8:	005b      	lsls	r3, r3, #1
 80170fa:	4619      	mov	r1, r3
 80170fc:	68bb      	ldr	r3, [r7, #8]
 80170fe:	440b      	add	r3, r1
 8017100:	3237      	adds	r2, #55	@ 0x37
 8017102:	b2d2      	uxtb	r2, r2
 8017104:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	011b      	lsls	r3, r3, #4
 801710a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801710c:	7dfb      	ldrb	r3, [r7, #23]
 801710e:	005b      	lsls	r3, r3, #1
 8017110:	3301      	adds	r3, #1
 8017112:	68ba      	ldr	r2, [r7, #8]
 8017114:	4413      	add	r3, r2
 8017116:	2200      	movs	r2, #0
 8017118:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801711a:	7dfb      	ldrb	r3, [r7, #23]
 801711c:	3301      	adds	r3, #1
 801711e:	75fb      	strb	r3, [r7, #23]
 8017120:	7dfa      	ldrb	r2, [r7, #23]
 8017122:	79fb      	ldrb	r3, [r7, #7]
 8017124:	429a      	cmp	r2, r3
 8017126:	d3d3      	bcc.n	80170d0 <IntToUnicode+0x18>
  }
}
 8017128:	bf00      	nop
 801712a:	bf00      	nop
 801712c:	371c      	adds	r7, #28
 801712e:	46bd      	mov	sp, r7
 8017130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017134:	4770      	bx	lr
	...

08017138 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017138:	b580      	push	{r7, lr}
 801713a:	b08a      	sub	sp, #40	@ 0x28
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017140:	f107 0314 	add.w	r3, r7, #20
 8017144:	2200      	movs	r2, #0
 8017146:	601a      	str	r2, [r3, #0]
 8017148:	605a      	str	r2, [r3, #4]
 801714a:	609a      	str	r2, [r3, #8]
 801714c:	60da      	str	r2, [r3, #12]
 801714e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017150:	687b      	ldr	r3, [r7, #4]
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017158:	d13a      	bne.n	80171d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801715a:	2300      	movs	r3, #0
 801715c:	613b      	str	r3, [r7, #16]
 801715e:	4b1e      	ldr	r3, [pc, #120]	@ (80171d8 <HAL_PCD_MspInit+0xa0>)
 8017160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017162:	4a1d      	ldr	r2, [pc, #116]	@ (80171d8 <HAL_PCD_MspInit+0xa0>)
 8017164:	f043 0301 	orr.w	r3, r3, #1
 8017168:	6313      	str	r3, [r2, #48]	@ 0x30
 801716a:	4b1b      	ldr	r3, [pc, #108]	@ (80171d8 <HAL_PCD_MspInit+0xa0>)
 801716c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801716e:	f003 0301 	and.w	r3, r3, #1
 8017172:	613b      	str	r3, [r7, #16]
 8017174:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017176:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801717a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801717c:	2302      	movs	r3, #2
 801717e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017180:	2300      	movs	r3, #0
 8017182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017184:	2303      	movs	r3, #3
 8017186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017188:	230a      	movs	r3, #10
 801718a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801718c:	f107 0314 	add.w	r3, r7, #20
 8017190:	4619      	mov	r1, r3
 8017192:	4812      	ldr	r0, [pc, #72]	@ (80171dc <HAL_PCD_MspInit+0xa4>)
 8017194:	f7f3 feb2 	bl	800aefc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017198:	4b0f      	ldr	r3, [pc, #60]	@ (80171d8 <HAL_PCD_MspInit+0xa0>)
 801719a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801719c:	4a0e      	ldr	r2, [pc, #56]	@ (80171d8 <HAL_PCD_MspInit+0xa0>)
 801719e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80171a2:	6353      	str	r3, [r2, #52]	@ 0x34
 80171a4:	2300      	movs	r3, #0
 80171a6:	60fb      	str	r3, [r7, #12]
 80171a8:	4b0b      	ldr	r3, [pc, #44]	@ (80171d8 <HAL_PCD_MspInit+0xa0>)
 80171aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171ac:	4a0a      	ldr	r2, [pc, #40]	@ (80171d8 <HAL_PCD_MspInit+0xa0>)
 80171ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80171b2:	6453      	str	r3, [r2, #68]	@ 0x44
 80171b4:	4b08      	ldr	r3, [pc, #32]	@ (80171d8 <HAL_PCD_MspInit+0xa0>)
 80171b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80171b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80171bc:	60fb      	str	r3, [r7, #12]
 80171be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80171c0:	2200      	movs	r2, #0
 80171c2:	2105      	movs	r1, #5
 80171c4:	2043      	movs	r0, #67	@ 0x43
 80171c6:	f7f3 fa01 	bl	800a5cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80171ca:	2043      	movs	r0, #67	@ 0x43
 80171cc:	f7f3 fa1a 	bl	800a604 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80171d0:	bf00      	nop
 80171d2:	3728      	adds	r7, #40	@ 0x28
 80171d4:	46bd      	mov	sp, r7
 80171d6:	bd80      	pop	{r7, pc}
 80171d8:	40023800 	.word	0x40023800
 80171dc:	40020000 	.word	0x40020000

080171e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171e0:	b580      	push	{r7, lr}
 80171e2:	b082      	sub	sp, #8
 80171e4:	af00      	add	r7, sp, #0
 80171e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80171ee:	687b      	ldr	r3, [r7, #4]
 80171f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80171f4:	4619      	mov	r1, r3
 80171f6:	4610      	mov	r0, r2
 80171f8:	f7fb f999 	bl	801252e <USBD_LL_SetupStage>
}
 80171fc:	bf00      	nop
 80171fe:	3708      	adds	r7, #8
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}

08017204 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b082      	sub	sp, #8
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
 801720c:	460b      	mov	r3, r1
 801720e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017216:	78fa      	ldrb	r2, [r7, #3]
 8017218:	6879      	ldr	r1, [r7, #4]
 801721a:	4613      	mov	r3, r2
 801721c:	00db      	lsls	r3, r3, #3
 801721e:	4413      	add	r3, r2
 8017220:	009b      	lsls	r3, r3, #2
 8017222:	440b      	add	r3, r1
 8017224:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017228:	681a      	ldr	r2, [r3, #0]
 801722a:	78fb      	ldrb	r3, [r7, #3]
 801722c:	4619      	mov	r1, r3
 801722e:	f7fb f9d3 	bl	80125d8 <USBD_LL_DataOutStage>
}
 8017232:	bf00      	nop
 8017234:	3708      	adds	r7, #8
 8017236:	46bd      	mov	sp, r7
 8017238:	bd80      	pop	{r7, pc}

0801723a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801723a:	b580      	push	{r7, lr}
 801723c:	b082      	sub	sp, #8
 801723e:	af00      	add	r7, sp, #0
 8017240:	6078      	str	r0, [r7, #4]
 8017242:	460b      	mov	r3, r1
 8017244:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801724c:	78fa      	ldrb	r2, [r7, #3]
 801724e:	6879      	ldr	r1, [r7, #4]
 8017250:	4613      	mov	r3, r2
 8017252:	00db      	lsls	r3, r3, #3
 8017254:	4413      	add	r3, r2
 8017256:	009b      	lsls	r3, r3, #2
 8017258:	440b      	add	r3, r1
 801725a:	3320      	adds	r3, #32
 801725c:	681a      	ldr	r2, [r3, #0]
 801725e:	78fb      	ldrb	r3, [r7, #3]
 8017260:	4619      	mov	r1, r3
 8017262:	f7fb fa6c 	bl	801273e <USBD_LL_DataInStage>
}
 8017266:	bf00      	nop
 8017268:	3708      	adds	r7, #8
 801726a:	46bd      	mov	sp, r7
 801726c:	bd80      	pop	{r7, pc}

0801726e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801726e:	b580      	push	{r7, lr}
 8017270:	b082      	sub	sp, #8
 8017272:	af00      	add	r7, sp, #0
 8017274:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801727c:	4618      	mov	r0, r3
 801727e:	f7fb fba6 	bl	80129ce <USBD_LL_SOF>
}
 8017282:	bf00      	nop
 8017284:	3708      	adds	r7, #8
 8017286:	46bd      	mov	sp, r7
 8017288:	bd80      	pop	{r7, pc}

0801728a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801728a:	b580      	push	{r7, lr}
 801728c:	b084      	sub	sp, #16
 801728e:	af00      	add	r7, sp, #0
 8017290:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017292:	2301      	movs	r3, #1
 8017294:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	79db      	ldrb	r3, [r3, #7]
 801729a:	2b00      	cmp	r3, #0
 801729c:	d102      	bne.n	80172a4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801729e:	2300      	movs	r3, #0
 80172a0:	73fb      	strb	r3, [r7, #15]
 80172a2:	e008      	b.n	80172b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	79db      	ldrb	r3, [r3, #7]
 80172a8:	2b02      	cmp	r3, #2
 80172aa:	d102      	bne.n	80172b2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80172ac:	2301      	movs	r3, #1
 80172ae:	73fb      	strb	r3, [r7, #15]
 80172b0:	e001      	b.n	80172b6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80172b2:	f7f1 f9d1 	bl	8008658 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80172bc:	7bfa      	ldrb	r2, [r7, #15]
 80172be:	4611      	mov	r1, r2
 80172c0:	4618      	mov	r0, r3
 80172c2:	f7fb fb40 	bl	8012946 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80172cc:	4618      	mov	r0, r3
 80172ce:	f7fb fae8 	bl	80128a2 <USBD_LL_Reset>
}
 80172d2:	bf00      	nop
 80172d4:	3710      	adds	r7, #16
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}
	...

080172dc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80172ea:	4618      	mov	r0, r3
 80172ec:	f7fb fb3b 	bl	8012966 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80172f8:	681b      	ldr	r3, [r3, #0]
 80172fa:	687a      	ldr	r2, [r7, #4]
 80172fc:	6812      	ldr	r2, [r2, #0]
 80172fe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017302:	f043 0301 	orr.w	r3, r3, #1
 8017306:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	7adb      	ldrb	r3, [r3, #11]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d005      	beq.n	801731c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017310:	4b04      	ldr	r3, [pc, #16]	@ (8017324 <HAL_PCD_SuspendCallback+0x48>)
 8017312:	691b      	ldr	r3, [r3, #16]
 8017314:	4a03      	ldr	r2, [pc, #12]	@ (8017324 <HAL_PCD_SuspendCallback+0x48>)
 8017316:	f043 0306 	orr.w	r3, r3, #6
 801731a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801731c:	bf00      	nop
 801731e:	3708      	adds	r7, #8
 8017320:	46bd      	mov	sp, r7
 8017322:	bd80      	pop	{r7, pc}
 8017324:	e000ed00 	.word	0xe000ed00

08017328 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b082      	sub	sp, #8
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017336:	4618      	mov	r0, r3
 8017338:	f7fb fb31 	bl	801299e <USBD_LL_Resume>
}
 801733c:	bf00      	nop
 801733e:	3708      	adds	r7, #8
 8017340:	46bd      	mov	sp, r7
 8017342:	bd80      	pop	{r7, pc}

08017344 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017344:	b580      	push	{r7, lr}
 8017346:	b082      	sub	sp, #8
 8017348:	af00      	add	r7, sp, #0
 801734a:	6078      	str	r0, [r7, #4]
 801734c:	460b      	mov	r3, r1
 801734e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017356:	78fa      	ldrb	r2, [r7, #3]
 8017358:	4611      	mov	r1, r2
 801735a:	4618      	mov	r0, r3
 801735c:	f7fb fb89 	bl	8012a72 <USBD_LL_IsoOUTIncomplete>
}
 8017360:	bf00      	nop
 8017362:	3708      	adds	r7, #8
 8017364:	46bd      	mov	sp, r7
 8017366:	bd80      	pop	{r7, pc}

08017368 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b082      	sub	sp, #8
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
 8017370:	460b      	mov	r3, r1
 8017372:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801737a:	78fa      	ldrb	r2, [r7, #3]
 801737c:	4611      	mov	r1, r2
 801737e:	4618      	mov	r0, r3
 8017380:	f7fb fb45 	bl	8012a0e <USBD_LL_IsoINIncomplete>
}
 8017384:	bf00      	nop
 8017386:	3708      	adds	r7, #8
 8017388:	46bd      	mov	sp, r7
 801738a:	bd80      	pop	{r7, pc}

0801738c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801738c:	b580      	push	{r7, lr}
 801738e:	b082      	sub	sp, #8
 8017390:	af00      	add	r7, sp, #0
 8017392:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801739a:	4618      	mov	r0, r3
 801739c:	f7fb fb9b 	bl	8012ad6 <USBD_LL_DevConnected>
}
 80173a0:	bf00      	nop
 80173a2:	3708      	adds	r7, #8
 80173a4:	46bd      	mov	sp, r7
 80173a6:	bd80      	pop	{r7, pc}

080173a8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b082      	sub	sp, #8
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80173b6:	4618      	mov	r0, r3
 80173b8:	f7fb fb98 	bl	8012aec <USBD_LL_DevDisconnected>
}
 80173bc:	bf00      	nop
 80173be:	3708      	adds	r7, #8
 80173c0:	46bd      	mov	sp, r7
 80173c2:	bd80      	pop	{r7, pc}

080173c4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80173c4:	b580      	push	{r7, lr}
 80173c6:	b082      	sub	sp, #8
 80173c8:	af00      	add	r7, sp, #0
 80173ca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	781b      	ldrb	r3, [r3, #0]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d13c      	bne.n	801744e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80173d4:	4a20      	ldr	r2, [pc, #128]	@ (8017458 <USBD_LL_Init+0x94>)
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	4a1e      	ldr	r2, [pc, #120]	@ (8017458 <USBD_LL_Init+0x94>)
 80173e0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80173e4:	4b1c      	ldr	r3, [pc, #112]	@ (8017458 <USBD_LL_Init+0x94>)
 80173e6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80173ea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80173ec:	4b1a      	ldr	r3, [pc, #104]	@ (8017458 <USBD_LL_Init+0x94>)
 80173ee:	2204      	movs	r2, #4
 80173f0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80173f2:	4b19      	ldr	r3, [pc, #100]	@ (8017458 <USBD_LL_Init+0x94>)
 80173f4:	2202      	movs	r2, #2
 80173f6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80173f8:	4b17      	ldr	r3, [pc, #92]	@ (8017458 <USBD_LL_Init+0x94>)
 80173fa:	2200      	movs	r2, #0
 80173fc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80173fe:	4b16      	ldr	r3, [pc, #88]	@ (8017458 <USBD_LL_Init+0x94>)
 8017400:	2202      	movs	r2, #2
 8017402:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017404:	4b14      	ldr	r3, [pc, #80]	@ (8017458 <USBD_LL_Init+0x94>)
 8017406:	2200      	movs	r2, #0
 8017408:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801740a:	4b13      	ldr	r3, [pc, #76]	@ (8017458 <USBD_LL_Init+0x94>)
 801740c:	2200      	movs	r2, #0
 801740e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017410:	4b11      	ldr	r3, [pc, #68]	@ (8017458 <USBD_LL_Init+0x94>)
 8017412:	2200      	movs	r2, #0
 8017414:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017416:	4b10      	ldr	r3, [pc, #64]	@ (8017458 <USBD_LL_Init+0x94>)
 8017418:	2200      	movs	r2, #0
 801741a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801741c:	4b0e      	ldr	r3, [pc, #56]	@ (8017458 <USBD_LL_Init+0x94>)
 801741e:	2200      	movs	r2, #0
 8017420:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017422:	480d      	ldr	r0, [pc, #52]	@ (8017458 <USBD_LL_Init+0x94>)
 8017424:	f7f4 f81b 	bl	800b45e <HAL_PCD_Init>
 8017428:	4603      	mov	r3, r0
 801742a:	2b00      	cmp	r3, #0
 801742c:	d001      	beq.n	8017432 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801742e:	f7f1 f913 	bl	8008658 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017432:	2180      	movs	r1, #128	@ 0x80
 8017434:	4808      	ldr	r0, [pc, #32]	@ (8017458 <USBD_LL_Init+0x94>)
 8017436:	f7f5 fa48 	bl	800c8ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801743a:	2240      	movs	r2, #64	@ 0x40
 801743c:	2100      	movs	r1, #0
 801743e:	4806      	ldr	r0, [pc, #24]	@ (8017458 <USBD_LL_Init+0x94>)
 8017440:	f7f5 f9fc 	bl	800c83c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017444:	2280      	movs	r2, #128	@ 0x80
 8017446:	2101      	movs	r1, #1
 8017448:	4803      	ldr	r0, [pc, #12]	@ (8017458 <USBD_LL_Init+0x94>)
 801744a:	f7f5 f9f7 	bl	800c83c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801744e:	2300      	movs	r3, #0
}
 8017450:	4618      	mov	r0, r3
 8017452:	3708      	adds	r7, #8
 8017454:	46bd      	mov	sp, r7
 8017456:	bd80      	pop	{r7, pc}
 8017458:	20009e60 	.word	0x20009e60

0801745c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b084      	sub	sp, #16
 8017460:	af00      	add	r7, sp, #0
 8017462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017464:	2300      	movs	r3, #0
 8017466:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017468:	2300      	movs	r3, #0
 801746a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017472:	4618      	mov	r0, r3
 8017474:	f7f4 f902 	bl	800b67c <HAL_PCD_Start>
 8017478:	4603      	mov	r3, r0
 801747a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801747c:	7bfb      	ldrb	r3, [r7, #15]
 801747e:	4618      	mov	r0, r3
 8017480:	f000 f942 	bl	8017708 <USBD_Get_USB_Status>
 8017484:	4603      	mov	r3, r0
 8017486:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017488:	7bbb      	ldrb	r3, [r7, #14]
}
 801748a:	4618      	mov	r0, r3
 801748c:	3710      	adds	r7, #16
 801748e:	46bd      	mov	sp, r7
 8017490:	bd80      	pop	{r7, pc}

08017492 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8017492:	b580      	push	{r7, lr}
 8017494:	b084      	sub	sp, #16
 8017496:	af00      	add	r7, sp, #0
 8017498:	6078      	str	r0, [r7, #4]
 801749a:	4608      	mov	r0, r1
 801749c:	4611      	mov	r1, r2
 801749e:	461a      	mov	r2, r3
 80174a0:	4603      	mov	r3, r0
 80174a2:	70fb      	strb	r3, [r7, #3]
 80174a4:	460b      	mov	r3, r1
 80174a6:	70bb      	strb	r3, [r7, #2]
 80174a8:	4613      	mov	r3, r2
 80174aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174ac:	2300      	movs	r3, #0
 80174ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174b0:	2300      	movs	r3, #0
 80174b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80174b4:	687b      	ldr	r3, [r7, #4]
 80174b6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80174ba:	78bb      	ldrb	r3, [r7, #2]
 80174bc:	883a      	ldrh	r2, [r7, #0]
 80174be:	78f9      	ldrb	r1, [r7, #3]
 80174c0:	f7f4 fdd6 	bl	800c070 <HAL_PCD_EP_Open>
 80174c4:	4603      	mov	r3, r0
 80174c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174c8:	7bfb      	ldrb	r3, [r7, #15]
 80174ca:	4618      	mov	r0, r3
 80174cc:	f000 f91c 	bl	8017708 <USBD_Get_USB_Status>
 80174d0:	4603      	mov	r3, r0
 80174d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80174d6:	4618      	mov	r0, r3
 80174d8:	3710      	adds	r7, #16
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}

080174de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174de:	b580      	push	{r7, lr}
 80174e0:	b084      	sub	sp, #16
 80174e2:	af00      	add	r7, sp, #0
 80174e4:	6078      	str	r0, [r7, #4]
 80174e6:	460b      	mov	r3, r1
 80174e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174ea:	2300      	movs	r3, #0
 80174ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174ee:	2300      	movs	r3, #0
 80174f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80174f8:	78fa      	ldrb	r2, [r7, #3]
 80174fa:	4611      	mov	r1, r2
 80174fc:	4618      	mov	r0, r3
 80174fe:	f7f4 fe21 	bl	800c144 <HAL_PCD_EP_Close>
 8017502:	4603      	mov	r3, r0
 8017504:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017506:	7bfb      	ldrb	r3, [r7, #15]
 8017508:	4618      	mov	r0, r3
 801750a:	f000 f8fd 	bl	8017708 <USBD_Get_USB_Status>
 801750e:	4603      	mov	r3, r0
 8017510:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017512:	7bbb      	ldrb	r3, [r7, #14]
}
 8017514:	4618      	mov	r0, r3
 8017516:	3710      	adds	r7, #16
 8017518:	46bd      	mov	sp, r7
 801751a:	bd80      	pop	{r7, pc}

0801751c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801751c:	b580      	push	{r7, lr}
 801751e:	b084      	sub	sp, #16
 8017520:	af00      	add	r7, sp, #0
 8017522:	6078      	str	r0, [r7, #4]
 8017524:	460b      	mov	r3, r1
 8017526:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017528:	2300      	movs	r3, #0
 801752a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801752c:	2300      	movs	r3, #0
 801752e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017536:	78fa      	ldrb	r2, [r7, #3]
 8017538:	4611      	mov	r1, r2
 801753a:	4618      	mov	r0, r3
 801753c:	f7f4 fed9 	bl	800c2f2 <HAL_PCD_EP_SetStall>
 8017540:	4603      	mov	r3, r0
 8017542:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017544:	7bfb      	ldrb	r3, [r7, #15]
 8017546:	4618      	mov	r0, r3
 8017548:	f000 f8de 	bl	8017708 <USBD_Get_USB_Status>
 801754c:	4603      	mov	r3, r0
 801754e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017550:	7bbb      	ldrb	r3, [r7, #14]
}
 8017552:	4618      	mov	r0, r3
 8017554:	3710      	adds	r7, #16
 8017556:	46bd      	mov	sp, r7
 8017558:	bd80      	pop	{r7, pc}

0801755a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801755a:	b580      	push	{r7, lr}
 801755c:	b084      	sub	sp, #16
 801755e:	af00      	add	r7, sp, #0
 8017560:	6078      	str	r0, [r7, #4]
 8017562:	460b      	mov	r3, r1
 8017564:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017566:	2300      	movs	r3, #0
 8017568:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801756a:	2300      	movs	r3, #0
 801756c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801756e:	687b      	ldr	r3, [r7, #4]
 8017570:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017574:	78fa      	ldrb	r2, [r7, #3]
 8017576:	4611      	mov	r1, r2
 8017578:	4618      	mov	r0, r3
 801757a:	f7f4 ff1d 	bl	800c3b8 <HAL_PCD_EP_ClrStall>
 801757e:	4603      	mov	r3, r0
 8017580:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017582:	7bfb      	ldrb	r3, [r7, #15]
 8017584:	4618      	mov	r0, r3
 8017586:	f000 f8bf 	bl	8017708 <USBD_Get_USB_Status>
 801758a:	4603      	mov	r3, r0
 801758c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801758e:	7bbb      	ldrb	r3, [r7, #14]
}
 8017590:	4618      	mov	r0, r3
 8017592:	3710      	adds	r7, #16
 8017594:	46bd      	mov	sp, r7
 8017596:	bd80      	pop	{r7, pc}

08017598 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017598:	b480      	push	{r7}
 801759a:	b085      	sub	sp, #20
 801759c:	af00      	add	r7, sp, #0
 801759e:	6078      	str	r0, [r7, #4]
 80175a0:	460b      	mov	r3, r1
 80175a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80175aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80175ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	da0b      	bge.n	80175cc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80175b4:	78fb      	ldrb	r3, [r7, #3]
 80175b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80175ba:	68f9      	ldr	r1, [r7, #12]
 80175bc:	4613      	mov	r3, r2
 80175be:	00db      	lsls	r3, r3, #3
 80175c0:	4413      	add	r3, r2
 80175c2:	009b      	lsls	r3, r3, #2
 80175c4:	440b      	add	r3, r1
 80175c6:	3316      	adds	r3, #22
 80175c8:	781b      	ldrb	r3, [r3, #0]
 80175ca:	e00b      	b.n	80175e4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80175cc:	78fb      	ldrb	r3, [r7, #3]
 80175ce:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80175d2:	68f9      	ldr	r1, [r7, #12]
 80175d4:	4613      	mov	r3, r2
 80175d6:	00db      	lsls	r3, r3, #3
 80175d8:	4413      	add	r3, r2
 80175da:	009b      	lsls	r3, r3, #2
 80175dc:	440b      	add	r3, r1
 80175de:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80175e2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80175e4:	4618      	mov	r0, r3
 80175e6:	3714      	adds	r7, #20
 80175e8:	46bd      	mov	sp, r7
 80175ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175ee:	4770      	bx	lr

080175f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b084      	sub	sp, #16
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
 80175f8:	460b      	mov	r3, r1
 80175fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175fc:	2300      	movs	r3, #0
 80175fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017600:	2300      	movs	r3, #0
 8017602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801760a:	78fa      	ldrb	r2, [r7, #3]
 801760c:	4611      	mov	r1, r2
 801760e:	4618      	mov	r0, r3
 8017610:	f7f4 fd0a 	bl	800c028 <HAL_PCD_SetAddress>
 8017614:	4603      	mov	r3, r0
 8017616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017618:	7bfb      	ldrb	r3, [r7, #15]
 801761a:	4618      	mov	r0, r3
 801761c:	f000 f874 	bl	8017708 <USBD_Get_USB_Status>
 8017620:	4603      	mov	r3, r0
 8017622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017624:	7bbb      	ldrb	r3, [r7, #14]
}
 8017626:	4618      	mov	r0, r3
 8017628:	3710      	adds	r7, #16
 801762a:	46bd      	mov	sp, r7
 801762c:	bd80      	pop	{r7, pc}

0801762e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801762e:	b580      	push	{r7, lr}
 8017630:	b086      	sub	sp, #24
 8017632:	af00      	add	r7, sp, #0
 8017634:	60f8      	str	r0, [r7, #12]
 8017636:	607a      	str	r2, [r7, #4]
 8017638:	603b      	str	r3, [r7, #0]
 801763a:	460b      	mov	r3, r1
 801763c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801763e:	2300      	movs	r3, #0
 8017640:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017642:	2300      	movs	r3, #0
 8017644:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017646:	68fb      	ldr	r3, [r7, #12]
 8017648:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801764c:	7af9      	ldrb	r1, [r7, #11]
 801764e:	683b      	ldr	r3, [r7, #0]
 8017650:	687a      	ldr	r2, [r7, #4]
 8017652:	f7f4 fe14 	bl	800c27e <HAL_PCD_EP_Transmit>
 8017656:	4603      	mov	r3, r0
 8017658:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801765a:	7dfb      	ldrb	r3, [r7, #23]
 801765c:	4618      	mov	r0, r3
 801765e:	f000 f853 	bl	8017708 <USBD_Get_USB_Status>
 8017662:	4603      	mov	r3, r0
 8017664:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017666:	7dbb      	ldrb	r3, [r7, #22]
}
 8017668:	4618      	mov	r0, r3
 801766a:	3718      	adds	r7, #24
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}

08017670 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017670:	b580      	push	{r7, lr}
 8017672:	b086      	sub	sp, #24
 8017674:	af00      	add	r7, sp, #0
 8017676:	60f8      	str	r0, [r7, #12]
 8017678:	607a      	str	r2, [r7, #4]
 801767a:	603b      	str	r3, [r7, #0]
 801767c:	460b      	mov	r3, r1
 801767e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017680:	2300      	movs	r3, #0
 8017682:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017684:	2300      	movs	r3, #0
 8017686:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017688:	68fb      	ldr	r3, [r7, #12]
 801768a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 801768e:	7af9      	ldrb	r1, [r7, #11]
 8017690:	683b      	ldr	r3, [r7, #0]
 8017692:	687a      	ldr	r2, [r7, #4]
 8017694:	f7f4 fda0 	bl	800c1d8 <HAL_PCD_EP_Receive>
 8017698:	4603      	mov	r3, r0
 801769a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801769c:	7dfb      	ldrb	r3, [r7, #23]
 801769e:	4618      	mov	r0, r3
 80176a0:	f000 f832 	bl	8017708 <USBD_Get_USB_Status>
 80176a4:	4603      	mov	r3, r0
 80176a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80176a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80176aa:	4618      	mov	r0, r3
 80176ac:	3718      	adds	r7, #24
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}

080176b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80176b2:	b580      	push	{r7, lr}
 80176b4:	b082      	sub	sp, #8
 80176b6:	af00      	add	r7, sp, #0
 80176b8:	6078      	str	r0, [r7, #4]
 80176ba:	460b      	mov	r3, r1
 80176bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80176be:	687b      	ldr	r3, [r7, #4]
 80176c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80176c4:	78fa      	ldrb	r2, [r7, #3]
 80176c6:	4611      	mov	r1, r2
 80176c8:	4618      	mov	r0, r3
 80176ca:	f7f4 fdc0 	bl	800c24e <HAL_PCD_EP_GetRxCount>
 80176ce:	4603      	mov	r3, r0
}
 80176d0:	4618      	mov	r0, r3
 80176d2:	3708      	adds	r7, #8
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd80      	pop	{r7, pc}

080176d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80176d8:	b480      	push	{r7}
 80176da:	b083      	sub	sp, #12
 80176dc:	af00      	add	r7, sp, #0
 80176de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80176e0:	4b03      	ldr	r3, [pc, #12]	@ (80176f0 <USBD_static_malloc+0x18>)
}
 80176e2:	4618      	mov	r0, r3
 80176e4:	370c      	adds	r7, #12
 80176e6:	46bd      	mov	sp, r7
 80176e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176ec:	4770      	bx	lr
 80176ee:	bf00      	nop
 80176f0:	2000a344 	.word	0x2000a344

080176f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80176f4:	b480      	push	{r7}
 80176f6:	b083      	sub	sp, #12
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	6078      	str	r0, [r7, #4]

}
 80176fc:	bf00      	nop
 80176fe:	370c      	adds	r7, #12
 8017700:	46bd      	mov	sp, r7
 8017702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017706:	4770      	bx	lr

08017708 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017708:	b480      	push	{r7}
 801770a:	b085      	sub	sp, #20
 801770c:	af00      	add	r7, sp, #0
 801770e:	4603      	mov	r3, r0
 8017710:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017712:	2300      	movs	r3, #0
 8017714:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017716:	79fb      	ldrb	r3, [r7, #7]
 8017718:	2b03      	cmp	r3, #3
 801771a:	d817      	bhi.n	801774c <USBD_Get_USB_Status+0x44>
 801771c:	a201      	add	r2, pc, #4	@ (adr r2, 8017724 <USBD_Get_USB_Status+0x1c>)
 801771e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017722:	bf00      	nop
 8017724:	08017735 	.word	0x08017735
 8017728:	0801773b 	.word	0x0801773b
 801772c:	08017741 	.word	0x08017741
 8017730:	08017747 	.word	0x08017747
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017734:	2300      	movs	r3, #0
 8017736:	73fb      	strb	r3, [r7, #15]
    break;
 8017738:	e00b      	b.n	8017752 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801773a:	2303      	movs	r3, #3
 801773c:	73fb      	strb	r3, [r7, #15]
    break;
 801773e:	e008      	b.n	8017752 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017740:	2301      	movs	r3, #1
 8017742:	73fb      	strb	r3, [r7, #15]
    break;
 8017744:	e005      	b.n	8017752 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017746:	2303      	movs	r3, #3
 8017748:	73fb      	strb	r3, [r7, #15]
    break;
 801774a:	e002      	b.n	8017752 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801774c:	2303      	movs	r3, #3
 801774e:	73fb      	strb	r3, [r7, #15]
    break;
 8017750:	bf00      	nop
  }
  return usb_status;
 8017752:	7bfb      	ldrb	r3, [r7, #15]
}
 8017754:	4618      	mov	r0, r3
 8017756:	3714      	adds	r7, #20
 8017758:	46bd      	mov	sp, r7
 801775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801775e:	4770      	bx	lr

08017760 <acosf>:
 8017760:	b508      	push	{r3, lr}
 8017762:	ed2d 8b02 	vpush	{d8}
 8017766:	eeb0 8a40 	vmov.f32	s16, s0
 801776a:	f000 faef 	bl	8017d4c <__ieee754_acosf>
 801776e:	eeb4 8a48 	vcmp.f32	s16, s16
 8017772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017776:	eef0 8a40 	vmov.f32	s17, s0
 801777a:	d615      	bvs.n	80177a8 <acosf+0x48>
 801777c:	eeb0 0a48 	vmov.f32	s0, s16
 8017780:	f000 f9d6 	bl	8017b30 <fabsf>
 8017784:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017788:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801778c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017790:	dd0a      	ble.n	80177a8 <acosf+0x48>
 8017792:	f002 ff67 	bl	801a664 <__errno>
 8017796:	ecbd 8b02 	vpop	{d8}
 801779a:	2321      	movs	r3, #33	@ 0x21
 801779c:	6003      	str	r3, [r0, #0]
 801779e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80177a2:	4804      	ldr	r0, [pc, #16]	@ (80177b4 <acosf+0x54>)
 80177a4:	f000 ba28 	b.w	8017bf8 <nanf>
 80177a8:	eeb0 0a68 	vmov.f32	s0, s17
 80177ac:	ecbd 8b02 	vpop	{d8}
 80177b0:	bd08      	pop	{r3, pc}
 80177b2:	bf00      	nop
 80177b4:	080202cb 	.word	0x080202cb

080177b8 <asinf>:
 80177b8:	b508      	push	{r3, lr}
 80177ba:	ed2d 8b02 	vpush	{d8}
 80177be:	eeb0 8a40 	vmov.f32	s16, s0
 80177c2:	f000 fbb9 	bl	8017f38 <__ieee754_asinf>
 80177c6:	eeb4 8a48 	vcmp.f32	s16, s16
 80177ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177ce:	eef0 8a40 	vmov.f32	s17, s0
 80177d2:	d615      	bvs.n	8017800 <asinf+0x48>
 80177d4:	eeb0 0a48 	vmov.f32	s0, s16
 80177d8:	f000 f9aa 	bl	8017b30 <fabsf>
 80177dc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80177e0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80177e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80177e8:	dd0a      	ble.n	8017800 <asinf+0x48>
 80177ea:	f002 ff3b 	bl	801a664 <__errno>
 80177ee:	ecbd 8b02 	vpop	{d8}
 80177f2:	2321      	movs	r3, #33	@ 0x21
 80177f4:	6003      	str	r3, [r0, #0]
 80177f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80177fa:	4804      	ldr	r0, [pc, #16]	@ (801780c <asinf+0x54>)
 80177fc:	f000 b9fc 	b.w	8017bf8 <nanf>
 8017800:	eeb0 0a68 	vmov.f32	s0, s17
 8017804:	ecbd 8b02 	vpop	{d8}
 8017808:	bd08      	pop	{r3, pc}
 801780a:	bf00      	nop
 801780c:	080202cb 	.word	0x080202cb

08017810 <atan2f>:
 8017810:	f000 bc76 	b.w	8018100 <__ieee754_atan2f>

08017814 <powf>:
 8017814:	b508      	push	{r3, lr}
 8017816:	ed2d 8b04 	vpush	{d8-d9}
 801781a:	eeb0 8a60 	vmov.f32	s16, s1
 801781e:	eeb0 9a40 	vmov.f32	s18, s0
 8017822:	f000 fd0d 	bl	8018240 <__ieee754_powf>
 8017826:	eeb4 8a48 	vcmp.f32	s16, s16
 801782a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801782e:	eef0 8a40 	vmov.f32	s17, s0
 8017832:	d63e      	bvs.n	80178b2 <powf+0x9e>
 8017834:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801783c:	d112      	bne.n	8017864 <powf+0x50>
 801783e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017846:	d039      	beq.n	80178bc <powf+0xa8>
 8017848:	eeb0 0a48 	vmov.f32	s0, s16
 801784c:	f000 f9be 	bl	8017bcc <finitef>
 8017850:	b378      	cbz	r0, 80178b2 <powf+0x9e>
 8017852:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801785a:	d52a      	bpl.n	80178b2 <powf+0x9e>
 801785c:	f002 ff02 	bl	801a664 <__errno>
 8017860:	2322      	movs	r3, #34	@ 0x22
 8017862:	e014      	b.n	801788e <powf+0x7a>
 8017864:	f000 f9b2 	bl	8017bcc <finitef>
 8017868:	b998      	cbnz	r0, 8017892 <powf+0x7e>
 801786a:	eeb0 0a49 	vmov.f32	s0, s18
 801786e:	f000 f9ad 	bl	8017bcc <finitef>
 8017872:	b170      	cbz	r0, 8017892 <powf+0x7e>
 8017874:	eeb0 0a48 	vmov.f32	s0, s16
 8017878:	f000 f9a8 	bl	8017bcc <finitef>
 801787c:	b148      	cbz	r0, 8017892 <powf+0x7e>
 801787e:	eef4 8a68 	vcmp.f32	s17, s17
 8017882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017886:	d7e9      	bvc.n	801785c <powf+0x48>
 8017888:	f002 feec 	bl	801a664 <__errno>
 801788c:	2321      	movs	r3, #33	@ 0x21
 801788e:	6003      	str	r3, [r0, #0]
 8017890:	e00f      	b.n	80178b2 <powf+0x9e>
 8017892:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801789a:	d10a      	bne.n	80178b2 <powf+0x9e>
 801789c:	eeb0 0a49 	vmov.f32	s0, s18
 80178a0:	f000 f994 	bl	8017bcc <finitef>
 80178a4:	b128      	cbz	r0, 80178b2 <powf+0x9e>
 80178a6:	eeb0 0a48 	vmov.f32	s0, s16
 80178aa:	f000 f98f 	bl	8017bcc <finitef>
 80178ae:	2800      	cmp	r0, #0
 80178b0:	d1d4      	bne.n	801785c <powf+0x48>
 80178b2:	eeb0 0a68 	vmov.f32	s0, s17
 80178b6:	ecbd 8b04 	vpop	{d8-d9}
 80178ba:	bd08      	pop	{r3, pc}
 80178bc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 80178c0:	e7f7      	b.n	80178b2 <powf+0x9e>
	...

080178c4 <sqrtf>:
 80178c4:	b508      	push	{r3, lr}
 80178c6:	ed2d 8b02 	vpush	{d8}
 80178ca:	eeb0 8a40 	vmov.f32	s16, s0
 80178ce:	f000 f999 	bl	8017c04 <__ieee754_sqrtf>
 80178d2:	eeb4 8a48 	vcmp.f32	s16, s16
 80178d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178da:	d60c      	bvs.n	80178f6 <sqrtf+0x32>
 80178dc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80178fc <sqrtf+0x38>
 80178e0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80178e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80178e8:	d505      	bpl.n	80178f6 <sqrtf+0x32>
 80178ea:	f002 febb 	bl	801a664 <__errno>
 80178ee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80178f2:	2321      	movs	r3, #33	@ 0x21
 80178f4:	6003      	str	r3, [r0, #0]
 80178f6:	ecbd 8b02 	vpop	{d8}
 80178fa:	bd08      	pop	{r3, pc}
 80178fc:	00000000 	.word	0x00000000

08017900 <atanf>:
 8017900:	b538      	push	{r3, r4, r5, lr}
 8017902:	ee10 5a10 	vmov	r5, s0
 8017906:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 801790a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 801790e:	eef0 7a40 	vmov.f32	s15, s0
 8017912:	d310      	bcc.n	8017936 <atanf+0x36>
 8017914:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8017918:	d904      	bls.n	8017924 <atanf+0x24>
 801791a:	ee70 7a00 	vadd.f32	s15, s0, s0
 801791e:	eeb0 0a67 	vmov.f32	s0, s15
 8017922:	bd38      	pop	{r3, r4, r5, pc}
 8017924:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8017a5c <atanf+0x15c>
 8017928:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8017a60 <atanf+0x160>
 801792c:	2d00      	cmp	r5, #0
 801792e:	bfc8      	it	gt
 8017930:	eef0 7a47 	vmovgt.f32	s15, s14
 8017934:	e7f3      	b.n	801791e <atanf+0x1e>
 8017936:	4b4b      	ldr	r3, [pc, #300]	@ (8017a64 <atanf+0x164>)
 8017938:	429c      	cmp	r4, r3
 801793a:	d810      	bhi.n	801795e <atanf+0x5e>
 801793c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8017940:	d20a      	bcs.n	8017958 <atanf+0x58>
 8017942:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8017a68 <atanf+0x168>
 8017946:	ee30 7a07 	vadd.f32	s14, s0, s14
 801794a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801794e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017956:	dce2      	bgt.n	801791e <atanf+0x1e>
 8017958:	f04f 33ff 	mov.w	r3, #4294967295
 801795c:	e013      	b.n	8017986 <atanf+0x86>
 801795e:	f000 f8e7 	bl	8017b30 <fabsf>
 8017962:	4b42      	ldr	r3, [pc, #264]	@ (8017a6c <atanf+0x16c>)
 8017964:	429c      	cmp	r4, r3
 8017966:	d84f      	bhi.n	8017a08 <atanf+0x108>
 8017968:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 801796c:	429c      	cmp	r4, r3
 801796e:	d841      	bhi.n	80179f4 <atanf+0xf4>
 8017970:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8017974:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017978:	eea0 7a27 	vfma.f32	s14, s0, s15
 801797c:	2300      	movs	r3, #0
 801797e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017982:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017986:	1c5a      	adds	r2, r3, #1
 8017988:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801798c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8017a70 <atanf+0x170>
 8017990:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8017a74 <atanf+0x174>
 8017994:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8017a78 <atanf+0x178>
 8017998:	ee66 6a06 	vmul.f32	s13, s12, s12
 801799c:	eee6 5a87 	vfma.f32	s11, s13, s14
 80179a0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8017a7c <atanf+0x17c>
 80179a4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80179a8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8017a80 <atanf+0x180>
 80179ac:	eee7 5a26 	vfma.f32	s11, s14, s13
 80179b0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8017a84 <atanf+0x184>
 80179b4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80179b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8017a88 <atanf+0x188>
 80179bc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80179c0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8017a8c <atanf+0x18c>
 80179c4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80179c8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8017a90 <atanf+0x190>
 80179cc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80179d0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8017a94 <atanf+0x194>
 80179d4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80179d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8017a98 <atanf+0x198>
 80179dc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80179e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80179e4:	eea5 7a86 	vfma.f32	s14, s11, s12
 80179e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80179ec:	d121      	bne.n	8017a32 <atanf+0x132>
 80179ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80179f2:	e794      	b.n	801791e <atanf+0x1e>
 80179f4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80179f8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80179fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017a00:	2301      	movs	r3, #1
 8017a02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017a06:	e7be      	b.n	8017986 <atanf+0x86>
 8017a08:	4b24      	ldr	r3, [pc, #144]	@ (8017a9c <atanf+0x19c>)
 8017a0a:	429c      	cmp	r4, r3
 8017a0c:	d80b      	bhi.n	8017a26 <atanf+0x126>
 8017a0e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8017a12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017a16:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017a1a:	2302      	movs	r3, #2
 8017a1c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017a24:	e7af      	b.n	8017986 <atanf+0x86>
 8017a26:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017a2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017a2e:	2303      	movs	r3, #3
 8017a30:	e7a9      	b.n	8017986 <atanf+0x86>
 8017a32:	4a1b      	ldr	r2, [pc, #108]	@ (8017aa0 <atanf+0x1a0>)
 8017a34:	491b      	ldr	r1, [pc, #108]	@ (8017aa4 <atanf+0x1a4>)
 8017a36:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017a3a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017a3e:	edd3 6a00 	vldr	s13, [r3]
 8017a42:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017a46:	2d00      	cmp	r5, #0
 8017a48:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017a4c:	edd2 7a00 	vldr	s15, [r2]
 8017a50:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017a54:	bfb8      	it	lt
 8017a56:	eef1 7a67 	vneglt.f32	s15, s15
 8017a5a:	e760      	b.n	801791e <atanf+0x1e>
 8017a5c:	bfc90fdb 	.word	0xbfc90fdb
 8017a60:	3fc90fdb 	.word	0x3fc90fdb
 8017a64:	3edfffff 	.word	0x3edfffff
 8017a68:	7149f2ca 	.word	0x7149f2ca
 8017a6c:	3f97ffff 	.word	0x3f97ffff
 8017a70:	3c8569d7 	.word	0x3c8569d7
 8017a74:	3d4bda59 	.word	0x3d4bda59
 8017a78:	bd6ef16b 	.word	0xbd6ef16b
 8017a7c:	3d886b35 	.word	0x3d886b35
 8017a80:	3dba2e6e 	.word	0x3dba2e6e
 8017a84:	3e124925 	.word	0x3e124925
 8017a88:	3eaaaaab 	.word	0x3eaaaaab
 8017a8c:	bd15a221 	.word	0xbd15a221
 8017a90:	bd9d8795 	.word	0xbd9d8795
 8017a94:	bde38e38 	.word	0xbde38e38
 8017a98:	be4ccccd 	.word	0xbe4ccccd
 8017a9c:	401bffff 	.word	0x401bffff
 8017aa0:	08020448 	.word	0x08020448
 8017aa4:	08020438 	.word	0x08020438

08017aa8 <cosf>:
 8017aa8:	ee10 3a10 	vmov	r3, s0
 8017aac:	b507      	push	{r0, r1, r2, lr}
 8017aae:	4a1e      	ldr	r2, [pc, #120]	@ (8017b28 <cosf+0x80>)
 8017ab0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017ab4:	4293      	cmp	r3, r2
 8017ab6:	d806      	bhi.n	8017ac6 <cosf+0x1e>
 8017ab8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8017b2c <cosf+0x84>
 8017abc:	b003      	add	sp, #12
 8017abe:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ac2:	f000 b8a3 	b.w	8017c0c <__kernel_cosf>
 8017ac6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017aca:	d304      	bcc.n	8017ad6 <cosf+0x2e>
 8017acc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017ad0:	b003      	add	sp, #12
 8017ad2:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ad6:	4668      	mov	r0, sp
 8017ad8:	f000 fe80 	bl	80187dc <__ieee754_rem_pio2f>
 8017adc:	f000 0003 	and.w	r0, r0, #3
 8017ae0:	2801      	cmp	r0, #1
 8017ae2:	d009      	beq.n	8017af8 <cosf+0x50>
 8017ae4:	2802      	cmp	r0, #2
 8017ae6:	d010      	beq.n	8017b0a <cosf+0x62>
 8017ae8:	b9b0      	cbnz	r0, 8017b18 <cosf+0x70>
 8017aea:	eddd 0a01 	vldr	s1, [sp, #4]
 8017aee:	ed9d 0a00 	vldr	s0, [sp]
 8017af2:	f000 f88b 	bl	8017c0c <__kernel_cosf>
 8017af6:	e7eb      	b.n	8017ad0 <cosf+0x28>
 8017af8:	eddd 0a01 	vldr	s1, [sp, #4]
 8017afc:	ed9d 0a00 	vldr	s0, [sp]
 8017b00:	f000 f8dc 	bl	8017cbc <__kernel_sinf>
 8017b04:	eeb1 0a40 	vneg.f32	s0, s0
 8017b08:	e7e2      	b.n	8017ad0 <cosf+0x28>
 8017b0a:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b0e:	ed9d 0a00 	vldr	s0, [sp]
 8017b12:	f000 f87b 	bl	8017c0c <__kernel_cosf>
 8017b16:	e7f5      	b.n	8017b04 <cosf+0x5c>
 8017b18:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b1c:	ed9d 0a00 	vldr	s0, [sp]
 8017b20:	2001      	movs	r0, #1
 8017b22:	f000 f8cb 	bl	8017cbc <__kernel_sinf>
 8017b26:	e7d3      	b.n	8017ad0 <cosf+0x28>
 8017b28:	3f490fd8 	.word	0x3f490fd8
 8017b2c:	00000000 	.word	0x00000000

08017b30 <fabsf>:
 8017b30:	ee10 3a10 	vmov	r3, s0
 8017b34:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017b38:	ee00 3a10 	vmov	s0, r3
 8017b3c:	4770      	bx	lr
	...

08017b40 <sinf>:
 8017b40:	ee10 3a10 	vmov	r3, s0
 8017b44:	b507      	push	{r0, r1, r2, lr}
 8017b46:	4a1f      	ldr	r2, [pc, #124]	@ (8017bc4 <sinf+0x84>)
 8017b48:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017b4c:	4293      	cmp	r3, r2
 8017b4e:	d807      	bhi.n	8017b60 <sinf+0x20>
 8017b50:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8017bc8 <sinf+0x88>
 8017b54:	2000      	movs	r0, #0
 8017b56:	b003      	add	sp, #12
 8017b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8017b5c:	f000 b8ae 	b.w	8017cbc <__kernel_sinf>
 8017b60:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017b64:	d304      	bcc.n	8017b70 <sinf+0x30>
 8017b66:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017b6a:	b003      	add	sp, #12
 8017b6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b70:	4668      	mov	r0, sp
 8017b72:	f000 fe33 	bl	80187dc <__ieee754_rem_pio2f>
 8017b76:	f000 0003 	and.w	r0, r0, #3
 8017b7a:	2801      	cmp	r0, #1
 8017b7c:	d00a      	beq.n	8017b94 <sinf+0x54>
 8017b7e:	2802      	cmp	r0, #2
 8017b80:	d00f      	beq.n	8017ba2 <sinf+0x62>
 8017b82:	b9c0      	cbnz	r0, 8017bb6 <sinf+0x76>
 8017b84:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b88:	ed9d 0a00 	vldr	s0, [sp]
 8017b8c:	2001      	movs	r0, #1
 8017b8e:	f000 f895 	bl	8017cbc <__kernel_sinf>
 8017b92:	e7ea      	b.n	8017b6a <sinf+0x2a>
 8017b94:	eddd 0a01 	vldr	s1, [sp, #4]
 8017b98:	ed9d 0a00 	vldr	s0, [sp]
 8017b9c:	f000 f836 	bl	8017c0c <__kernel_cosf>
 8017ba0:	e7e3      	b.n	8017b6a <sinf+0x2a>
 8017ba2:	eddd 0a01 	vldr	s1, [sp, #4]
 8017ba6:	ed9d 0a00 	vldr	s0, [sp]
 8017baa:	2001      	movs	r0, #1
 8017bac:	f000 f886 	bl	8017cbc <__kernel_sinf>
 8017bb0:	eeb1 0a40 	vneg.f32	s0, s0
 8017bb4:	e7d9      	b.n	8017b6a <sinf+0x2a>
 8017bb6:	eddd 0a01 	vldr	s1, [sp, #4]
 8017bba:	ed9d 0a00 	vldr	s0, [sp]
 8017bbe:	f000 f825 	bl	8017c0c <__kernel_cosf>
 8017bc2:	e7f5      	b.n	8017bb0 <sinf+0x70>
 8017bc4:	3f490fd8 	.word	0x3f490fd8
 8017bc8:	00000000 	.word	0x00000000

08017bcc <finitef>:
 8017bcc:	ee10 3a10 	vmov	r3, s0
 8017bd0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8017bd4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8017bd8:	bfac      	ite	ge
 8017bda:	2000      	movge	r0, #0
 8017bdc:	2001      	movlt	r0, #1
 8017bde:	4770      	bx	lr

08017be0 <copysignf>:
 8017be0:	ee10 2a10 	vmov	r2, s0
 8017be4:	ee10 3a90 	vmov	r3, s1
 8017be8:	f362 031e 	bfi	r3, r2, #0, #31
 8017bec:	ee00 3a90 	vmov	s1, r3
 8017bf0:	eeb0 0a60 	vmov.f32	s0, s1
 8017bf4:	4770      	bx	lr
	...

08017bf8 <nanf>:
 8017bf8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8017c00 <nanf+0x8>
 8017bfc:	4770      	bx	lr
 8017bfe:	bf00      	nop
 8017c00:	7fc00000 	.word	0x7fc00000

08017c04 <__ieee754_sqrtf>:
 8017c04:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8017c08:	4770      	bx	lr
	...

08017c0c <__kernel_cosf>:
 8017c0c:	ee10 3a10 	vmov	r3, s0
 8017c10:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017c14:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8017c18:	eef0 6a40 	vmov.f32	s13, s0
 8017c1c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8017c20:	d204      	bcs.n	8017c2c <__kernel_cosf+0x20>
 8017c22:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8017c26:	ee17 2a90 	vmov	r2, s15
 8017c2a:	b342      	cbz	r2, 8017c7e <__kernel_cosf+0x72>
 8017c2c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8017c30:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8017c9c <__kernel_cosf+0x90>
 8017c34:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8017ca0 <__kernel_cosf+0x94>
 8017c38:	4a1a      	ldr	r2, [pc, #104]	@ (8017ca4 <__kernel_cosf+0x98>)
 8017c3a:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017c3e:	4293      	cmp	r3, r2
 8017c40:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8017ca8 <__kernel_cosf+0x9c>
 8017c44:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017c48:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8017cac <__kernel_cosf+0xa0>
 8017c4c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017c50:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8017cb0 <__kernel_cosf+0xa4>
 8017c54:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017c58:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8017cb4 <__kernel_cosf+0xa8>
 8017c5c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017c60:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8017c64:	ee26 6a07 	vmul.f32	s12, s12, s14
 8017c68:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017c6c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8017c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8017c74:	d804      	bhi.n	8017c80 <__kernel_cosf+0x74>
 8017c76:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8017c7a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017c7e:	4770      	bx	lr
 8017c80:	4a0d      	ldr	r2, [pc, #52]	@ (8017cb8 <__kernel_cosf+0xac>)
 8017c82:	4293      	cmp	r3, r2
 8017c84:	bf9a      	itte	ls
 8017c86:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8017c8a:	ee07 3a10 	vmovls	s14, r3
 8017c8e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8017c92:	ee30 0a47 	vsub.f32	s0, s0, s14
 8017c96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017c9a:	e7ec      	b.n	8017c76 <__kernel_cosf+0x6a>
 8017c9c:	ad47d74e 	.word	0xad47d74e
 8017ca0:	310f74f6 	.word	0x310f74f6
 8017ca4:	3e999999 	.word	0x3e999999
 8017ca8:	b493f27c 	.word	0xb493f27c
 8017cac:	37d00d01 	.word	0x37d00d01
 8017cb0:	bab60b61 	.word	0xbab60b61
 8017cb4:	3d2aaaab 	.word	0x3d2aaaab
 8017cb8:	3f480000 	.word	0x3f480000

08017cbc <__kernel_sinf>:
 8017cbc:	ee10 3a10 	vmov	r3, s0
 8017cc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017cc4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8017cc8:	d204      	bcs.n	8017cd4 <__kernel_sinf+0x18>
 8017cca:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8017cce:	ee17 3a90 	vmov	r3, s15
 8017cd2:	b35b      	cbz	r3, 8017d2c <__kernel_sinf+0x70>
 8017cd4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8017cd8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8017d30 <__kernel_sinf+0x74>
 8017cdc:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8017d34 <__kernel_sinf+0x78>
 8017ce0:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017ce4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8017d38 <__kernel_sinf+0x7c>
 8017ce8:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017cec:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8017d3c <__kernel_sinf+0x80>
 8017cf0:	eea7 6a87 	vfma.f32	s12, s15, s14
 8017cf4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8017d40 <__kernel_sinf+0x84>
 8017cf8:	ee60 6a07 	vmul.f32	s13, s0, s14
 8017cfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8017d00:	b930      	cbnz	r0, 8017d10 <__kernel_sinf+0x54>
 8017d02:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8017d44 <__kernel_sinf+0x88>
 8017d06:	eea7 6a27 	vfma.f32	s12, s14, s15
 8017d0a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8017d0e:	4770      	bx	lr
 8017d10:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8017d14:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8017d18:	eee0 7a86 	vfma.f32	s15, s1, s12
 8017d1c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8017d20:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8017d48 <__kernel_sinf+0x8c>
 8017d24:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8017d28:	ee30 0a60 	vsub.f32	s0, s0, s1
 8017d2c:	4770      	bx	lr
 8017d2e:	bf00      	nop
 8017d30:	2f2ec9d3 	.word	0x2f2ec9d3
 8017d34:	b2d72f34 	.word	0xb2d72f34
 8017d38:	3638ef1b 	.word	0x3638ef1b
 8017d3c:	b9500d01 	.word	0xb9500d01
 8017d40:	3c088889 	.word	0x3c088889
 8017d44:	be2aaaab 	.word	0xbe2aaaab
 8017d48:	3e2aaaab 	.word	0x3e2aaaab

08017d4c <__ieee754_acosf>:
 8017d4c:	b508      	push	{r3, lr}
 8017d4e:	ee10 3a10 	vmov	r3, s0
 8017d52:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8017d56:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8017d5a:	ed2d 8b0c 	vpush	{d8-d13}
 8017d5e:	d10a      	bne.n	8017d76 <__ieee754_acosf+0x2a>
 8017d60:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8017ef4 <__ieee754_acosf+0x1a8>
 8017d64:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8017ef8 <__ieee754_acosf+0x1ac>
 8017d68:	2b00      	cmp	r3, #0
 8017d6a:	bfc8      	it	gt
 8017d6c:	eeb0 0a67 	vmovgt.f32	s0, s15
 8017d70:	ecbd 8b0c 	vpop	{d8-d13}
 8017d74:	bd08      	pop	{r3, pc}
 8017d76:	d904      	bls.n	8017d82 <__ieee754_acosf+0x36>
 8017d78:	ee30 8a40 	vsub.f32	s16, s0, s0
 8017d7c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8017d80:	e7f6      	b.n	8017d70 <__ieee754_acosf+0x24>
 8017d82:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8017d86:	d23c      	bcs.n	8017e02 <__ieee754_acosf+0xb6>
 8017d88:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8017d8c:	f240 80af 	bls.w	8017eee <__ieee754_acosf+0x1a2>
 8017d90:	ee60 7a00 	vmul.f32	s15, s0, s0
 8017d94:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8017efc <__ieee754_acosf+0x1b0>
 8017d98:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8017f00 <__ieee754_acosf+0x1b4>
 8017d9c:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8017f04 <__ieee754_acosf+0x1b8>
 8017da0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8017da4:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8017f08 <__ieee754_acosf+0x1bc>
 8017da8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017dac:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8017f0c <__ieee754_acosf+0x1c0>
 8017db0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017db4:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8017f10 <__ieee754_acosf+0x1c4>
 8017db8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8017dbc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8017f14 <__ieee754_acosf+0x1c8>
 8017dc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8017dc4:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8017f18 <__ieee754_acosf+0x1cc>
 8017dc8:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8017dcc:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8017f1c <__ieee754_acosf+0x1d0>
 8017dd0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017dd4:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8017f20 <__ieee754_acosf+0x1d4>
 8017dd8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8017ddc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017de0:	eee6 6a27 	vfma.f32	s13, s12, s15
 8017de4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8017de8:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8017f24 <__ieee754_acosf+0x1d8>
 8017dec:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8017df0:	eee0 7a46 	vfms.f32	s15, s0, s12
 8017df4:	ee70 7a67 	vsub.f32	s15, s0, s15
 8017df8:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8017f28 <__ieee754_acosf+0x1dc>
 8017dfc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8017e00:	e7b6      	b.n	8017d70 <__ieee754_acosf+0x24>
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	eddf da3d 	vldr	s27, [pc, #244]	@ 8017efc <__ieee754_acosf+0x1b0>
 8017e08:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8017f00 <__ieee754_acosf+0x1b4>
 8017e0c:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8017f08 <__ieee754_acosf+0x1bc>
 8017e10:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8017f0c <__ieee754_acosf+0x1c0>
 8017e14:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8017f10 <__ieee754_acosf+0x1c4>
 8017e18:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8017f14 <__ieee754_acosf+0x1c8>
 8017e1c:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8017f18 <__ieee754_acosf+0x1cc>
 8017e20:	eddf aa38 	vldr	s21, [pc, #224]	@ 8017f04 <__ieee754_acosf+0x1b8>
 8017e24:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 8017f1c <__ieee754_acosf+0x1d0>
 8017e28:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8017f20 <__ieee754_acosf+0x1d4>
 8017e2c:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8017e30:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017e34:	da28      	bge.n	8017e88 <__ieee754_acosf+0x13c>
 8017e36:	ee30 8a09 	vadd.f32	s16, s0, s18
 8017e3a:	ee28 0a27 	vmul.f32	s0, s16, s15
 8017e3e:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8017e42:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8017e46:	eeac ca80 	vfma.f32	s24, s25, s0
 8017e4a:	eeaa aa80 	vfma.f32	s20, s21, s0
 8017e4e:	eeec ba00 	vfma.f32	s23, s24, s0
 8017e52:	eeea 9a00 	vfma.f32	s19, s20, s0
 8017e56:	eeab ba80 	vfma.f32	s22, s23, s0
 8017e5a:	eea9 9a80 	vfma.f32	s18, s19, s0
 8017e5e:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8017e62:	ee68 8a80 	vmul.f32	s17, s17, s0
 8017e66:	f7ff fecd 	bl	8017c04 <__ieee754_sqrtf>
 8017e6a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8017e6e:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8017f2c <__ieee754_acosf+0x1e0>
 8017e72:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017e76:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8017e7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8017e7e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8017f30 <__ieee754_acosf+0x1e4>
 8017e82:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8017e86:	e773      	b.n	8017d70 <__ieee754_acosf+0x24>
 8017e88:	ee39 8a40 	vsub.f32	s16, s18, s0
 8017e8c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017e90:	eeb0 0a48 	vmov.f32	s0, s16
 8017e94:	f7ff feb6 	bl	8017c04 <__ieee754_sqrtf>
 8017e98:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8017e9c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8017ea0:	eeac ca88 	vfma.f32	s24, s25, s16
 8017ea4:	eeaa aa88 	vfma.f32	s20, s21, s16
 8017ea8:	eeec ba08 	vfma.f32	s23, s24, s16
 8017eac:	ee10 3a10 	vmov	r3, s0
 8017eb0:	eeab ba88 	vfma.f32	s22, s23, s16
 8017eb4:	f36f 030b 	bfc	r3, #0, #12
 8017eb8:	eeea 9a08 	vfma.f32	s19, s20, s16
 8017ebc:	ee07 3a90 	vmov	s15, r3
 8017ec0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8017ec4:	eeb0 6a48 	vmov.f32	s12, s16
 8017ec8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8017ecc:	eea9 9a88 	vfma.f32	s18, s19, s16
 8017ed0:	ee70 6a27 	vadd.f32	s13, s0, s15
 8017ed4:	ee68 8a88 	vmul.f32	s17, s17, s16
 8017ed8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8017edc:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8017ee0:	eea0 7a26 	vfma.f32	s14, s0, s13
 8017ee4:	ee37 0a87 	vadd.f32	s0, s15, s14
 8017ee8:	ee30 0a00 	vadd.f32	s0, s0, s0
 8017eec:	e740      	b.n	8017d70 <__ieee754_acosf+0x24>
 8017eee:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8017f34 <__ieee754_acosf+0x1e8>
 8017ef2:	e73d      	b.n	8017d70 <__ieee754_acosf+0x24>
 8017ef4:	40490fdb 	.word	0x40490fdb
 8017ef8:	00000000 	.word	0x00000000
 8017efc:	3811ef08 	.word	0x3811ef08
 8017f00:	3a4f7f04 	.word	0x3a4f7f04
 8017f04:	bf303361 	.word	0xbf303361
 8017f08:	bd241146 	.word	0xbd241146
 8017f0c:	3e4e0aa8 	.word	0x3e4e0aa8
 8017f10:	bea6b090 	.word	0xbea6b090
 8017f14:	3e2aaaab 	.word	0x3e2aaaab
 8017f18:	3d9dc62e 	.word	0x3d9dc62e
 8017f1c:	4001572d 	.word	0x4001572d
 8017f20:	c019d139 	.word	0xc019d139
 8017f24:	33a22168 	.word	0x33a22168
 8017f28:	3fc90fda 	.word	0x3fc90fda
 8017f2c:	b3a22168 	.word	0xb3a22168
 8017f30:	40490fda 	.word	0x40490fda
 8017f34:	3fc90fdb 	.word	0x3fc90fdb

08017f38 <__ieee754_asinf>:
 8017f38:	b538      	push	{r3, r4, r5, lr}
 8017f3a:	ee10 5a10 	vmov	r5, s0
 8017f3e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8017f42:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8017f46:	ed2d 8b04 	vpush	{d8-d9}
 8017f4a:	d10c      	bne.n	8017f66 <__ieee754_asinf+0x2e>
 8017f4c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80180c0 <__ieee754_asinf+0x188>
 8017f50:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80180c4 <__ieee754_asinf+0x18c>
 8017f54:	ee60 7a27 	vmul.f32	s15, s0, s15
 8017f58:	eee0 7a07 	vfma.f32	s15, s0, s14
 8017f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8017f60:	ecbd 8b04 	vpop	{d8-d9}
 8017f64:	bd38      	pop	{r3, r4, r5, pc}
 8017f66:	d904      	bls.n	8017f72 <__ieee754_asinf+0x3a>
 8017f68:	ee70 7a40 	vsub.f32	s15, s0, s0
 8017f6c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8017f70:	e7f6      	b.n	8017f60 <__ieee754_asinf+0x28>
 8017f72:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8017f76:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8017f7a:	d20b      	bcs.n	8017f94 <__ieee754_asinf+0x5c>
 8017f7c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8017f80:	d252      	bcs.n	8018028 <__ieee754_asinf+0xf0>
 8017f82:	eddf 7a51 	vldr	s15, [pc, #324]	@ 80180c8 <__ieee754_asinf+0x190>
 8017f86:	ee70 7a27 	vadd.f32	s15, s0, s15
 8017f8a:	eef4 7ae8 	vcmpe.f32	s15, s17
 8017f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017f92:	dce5      	bgt.n	8017f60 <__ieee754_asinf+0x28>
 8017f94:	f7ff fdcc 	bl	8017b30 <fabsf>
 8017f98:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8017f9c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8017fa0:	ee28 8a27 	vmul.f32	s16, s16, s15
 8017fa4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80180cc <__ieee754_asinf+0x194>
 8017fa8:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80180d0 <__ieee754_asinf+0x198>
 8017fac:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 80180d4 <__ieee754_asinf+0x19c>
 8017fb0:	eea8 7a27 	vfma.f32	s14, s16, s15
 8017fb4:	eddf 7a48 	vldr	s15, [pc, #288]	@ 80180d8 <__ieee754_asinf+0x1a0>
 8017fb8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8017fbc:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80180dc <__ieee754_asinf+0x1a4>
 8017fc0:	eea7 7a88 	vfma.f32	s14, s15, s16
 8017fc4:	eddf 7a46 	vldr	s15, [pc, #280]	@ 80180e0 <__ieee754_asinf+0x1a8>
 8017fc8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8017fcc:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80180e4 <__ieee754_asinf+0x1ac>
 8017fd0:	eea7 9a88 	vfma.f32	s18, s15, s16
 8017fd4:	eddf 7a44 	vldr	s15, [pc, #272]	@ 80180e8 <__ieee754_asinf+0x1b0>
 8017fd8:	eee8 7a07 	vfma.f32	s15, s16, s14
 8017fdc:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80180ec <__ieee754_asinf+0x1b4>
 8017fe0:	eea7 7a88 	vfma.f32	s14, s15, s16
 8017fe4:	eddf 7a42 	vldr	s15, [pc, #264]	@ 80180f0 <__ieee754_asinf+0x1b8>
 8017fe8:	eee7 7a08 	vfma.f32	s15, s14, s16
 8017fec:	eeb0 0a48 	vmov.f32	s0, s16
 8017ff0:	eee7 8a88 	vfma.f32	s17, s15, s16
 8017ff4:	f7ff fe06 	bl	8017c04 <__ieee754_sqrtf>
 8017ff8:	4b3e      	ldr	r3, [pc, #248]	@ (80180f4 <__ieee754_asinf+0x1bc>)
 8017ffa:	ee29 9a08 	vmul.f32	s18, s18, s16
 8017ffe:	429c      	cmp	r4, r3
 8018000:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8018004:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018008:	d93d      	bls.n	8018086 <__ieee754_asinf+0x14e>
 801800a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801800e:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 80180f8 <__ieee754_asinf+0x1c0>
 8018012:	eee0 7a26 	vfma.f32	s15, s0, s13
 8018016:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80180c4 <__ieee754_asinf+0x18c>
 801801a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801801e:	2d00      	cmp	r5, #0
 8018020:	bfd8      	it	le
 8018022:	eeb1 0a40 	vnegle.f32	s0, s0
 8018026:	e79b      	b.n	8017f60 <__ieee754_asinf+0x28>
 8018028:	ee60 7a00 	vmul.f32	s15, s0, s0
 801802c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80180d0 <__ieee754_asinf+0x198>
 8018030:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80180cc <__ieee754_asinf+0x194>
 8018034:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 80180e4 <__ieee754_asinf+0x1ac>
 8018038:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801803c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80180d8 <__ieee754_asinf+0x1a0>
 8018040:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018044:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80180dc <__ieee754_asinf+0x1a4>
 8018048:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801804c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80180e0 <__ieee754_asinf+0x1a8>
 8018050:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018054:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80180d4 <__ieee754_asinf+0x19c>
 8018058:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801805c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80180e8 <__ieee754_asinf+0x1b0>
 8018060:	eee7 6a86 	vfma.f32	s13, s15, s12
 8018064:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 80180ec <__ieee754_asinf+0x1b4>
 8018068:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801806c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 80180f0 <__ieee754_asinf+0x1b8>
 8018070:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018074:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018078:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801807c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8018080:	eea0 0a27 	vfma.f32	s0, s0, s15
 8018084:	e76c      	b.n	8017f60 <__ieee754_asinf+0x28>
 8018086:	ee10 3a10 	vmov	r3, s0
 801808a:	f36f 030b 	bfc	r3, #0, #12
 801808e:	ee07 3a10 	vmov	s14, r3
 8018092:	eea7 8a47 	vfms.f32	s16, s14, s14
 8018096:	ee70 5a00 	vadd.f32	s11, s0, s0
 801809a:	ee30 0a07 	vadd.f32	s0, s0, s14
 801809e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80180c0 <__ieee754_asinf+0x188>
 80180a2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80180a6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 80180fc <__ieee754_asinf+0x1c4>
 80180aa:	eee5 7a66 	vfms.f32	s15, s10, s13
 80180ae:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80180b2:	eeb0 6a40 	vmov.f32	s12, s0
 80180b6:	eea7 6a66 	vfms.f32	s12, s14, s13
 80180ba:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80180be:	e7ac      	b.n	801801a <__ieee754_asinf+0xe2>
 80180c0:	b33bbd2e 	.word	0xb33bbd2e
 80180c4:	3fc90fdb 	.word	0x3fc90fdb
 80180c8:	7149f2ca 	.word	0x7149f2ca
 80180cc:	3a4f7f04 	.word	0x3a4f7f04
 80180d0:	3811ef08 	.word	0x3811ef08
 80180d4:	3e2aaaab 	.word	0x3e2aaaab
 80180d8:	bd241146 	.word	0xbd241146
 80180dc:	3e4e0aa8 	.word	0x3e4e0aa8
 80180e0:	bea6b090 	.word	0xbea6b090
 80180e4:	3d9dc62e 	.word	0x3d9dc62e
 80180e8:	bf303361 	.word	0xbf303361
 80180ec:	4001572d 	.word	0x4001572d
 80180f0:	c019d139 	.word	0xc019d139
 80180f4:	3f799999 	.word	0x3f799999
 80180f8:	333bbd2e 	.word	0x333bbd2e
 80180fc:	3f490fdb 	.word	0x3f490fdb

08018100 <__ieee754_atan2f>:
 8018100:	ee10 2a90 	vmov	r2, s1
 8018104:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8018108:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801810c:	b510      	push	{r4, lr}
 801810e:	eef0 7a40 	vmov.f32	s15, s0
 8018112:	d806      	bhi.n	8018122 <__ieee754_atan2f+0x22>
 8018114:	ee10 0a10 	vmov	r0, s0
 8018118:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801811c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018120:	d904      	bls.n	801812c <__ieee754_atan2f+0x2c>
 8018122:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018126:	eeb0 0a67 	vmov.f32	s0, s15
 801812a:	bd10      	pop	{r4, pc}
 801812c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8018130:	d103      	bne.n	801813a <__ieee754_atan2f+0x3a>
 8018132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018136:	f7ff bbe3 	b.w	8017900 <atanf>
 801813a:	1794      	asrs	r4, r2, #30
 801813c:	f004 0402 	and.w	r4, r4, #2
 8018140:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8018144:	b943      	cbnz	r3, 8018158 <__ieee754_atan2f+0x58>
 8018146:	2c02      	cmp	r4, #2
 8018148:	d05e      	beq.n	8018208 <__ieee754_atan2f+0x108>
 801814a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801821c <__ieee754_atan2f+0x11c>
 801814e:	2c03      	cmp	r4, #3
 8018150:	bf08      	it	eq
 8018152:	eef0 7a47 	vmoveq.f32	s15, s14
 8018156:	e7e6      	b.n	8018126 <__ieee754_atan2f+0x26>
 8018158:	b941      	cbnz	r1, 801816c <__ieee754_atan2f+0x6c>
 801815a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8018220 <__ieee754_atan2f+0x120>
 801815e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8018224 <__ieee754_atan2f+0x124>
 8018162:	2800      	cmp	r0, #0
 8018164:	bfa8      	it	ge
 8018166:	eef0 7a47 	vmovge.f32	s15, s14
 801816a:	e7dc      	b.n	8018126 <__ieee754_atan2f+0x26>
 801816c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8018170:	d110      	bne.n	8018194 <__ieee754_atan2f+0x94>
 8018172:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018176:	f104 34ff 	add.w	r4, r4, #4294967295
 801817a:	d107      	bne.n	801818c <__ieee754_atan2f+0x8c>
 801817c:	2c02      	cmp	r4, #2
 801817e:	d846      	bhi.n	801820e <__ieee754_atan2f+0x10e>
 8018180:	4b29      	ldr	r3, [pc, #164]	@ (8018228 <__ieee754_atan2f+0x128>)
 8018182:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018186:	edd3 7a00 	vldr	s15, [r3]
 801818a:	e7cc      	b.n	8018126 <__ieee754_atan2f+0x26>
 801818c:	2c02      	cmp	r4, #2
 801818e:	d841      	bhi.n	8018214 <__ieee754_atan2f+0x114>
 8018190:	4b26      	ldr	r3, [pc, #152]	@ (801822c <__ieee754_atan2f+0x12c>)
 8018192:	e7f6      	b.n	8018182 <__ieee754_atan2f+0x82>
 8018194:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018198:	d0df      	beq.n	801815a <__ieee754_atan2f+0x5a>
 801819a:	1a5b      	subs	r3, r3, r1
 801819c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80181a0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80181a4:	da1a      	bge.n	80181dc <__ieee754_atan2f+0xdc>
 80181a6:	2a00      	cmp	r2, #0
 80181a8:	da01      	bge.n	80181ae <__ieee754_atan2f+0xae>
 80181aa:	313c      	adds	r1, #60	@ 0x3c
 80181ac:	db19      	blt.n	80181e2 <__ieee754_atan2f+0xe2>
 80181ae:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80181b2:	f7ff fcbd 	bl	8017b30 <fabsf>
 80181b6:	f7ff fba3 	bl	8017900 <atanf>
 80181ba:	eef0 7a40 	vmov.f32	s15, s0
 80181be:	2c01      	cmp	r4, #1
 80181c0:	d012      	beq.n	80181e8 <__ieee754_atan2f+0xe8>
 80181c2:	2c02      	cmp	r4, #2
 80181c4:	d017      	beq.n	80181f6 <__ieee754_atan2f+0xf6>
 80181c6:	2c00      	cmp	r4, #0
 80181c8:	d0ad      	beq.n	8018126 <__ieee754_atan2f+0x26>
 80181ca:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8018230 <__ieee754_atan2f+0x130>
 80181ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80181d2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8018234 <__ieee754_atan2f+0x134>
 80181d6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80181da:	e7a4      	b.n	8018126 <__ieee754_atan2f+0x26>
 80181dc:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8018224 <__ieee754_atan2f+0x124>
 80181e0:	e7ed      	b.n	80181be <__ieee754_atan2f+0xbe>
 80181e2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8018238 <__ieee754_atan2f+0x138>
 80181e6:	e7ea      	b.n	80181be <__ieee754_atan2f+0xbe>
 80181e8:	ee17 3a90 	vmov	r3, s15
 80181ec:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80181f0:	ee07 3a90 	vmov	s15, r3
 80181f4:	e797      	b.n	8018126 <__ieee754_atan2f+0x26>
 80181f6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8018230 <__ieee754_atan2f+0x130>
 80181fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80181fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8018234 <__ieee754_atan2f+0x134>
 8018202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018206:	e78e      	b.n	8018126 <__ieee754_atan2f+0x26>
 8018208:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8018234 <__ieee754_atan2f+0x134>
 801820c:	e78b      	b.n	8018126 <__ieee754_atan2f+0x26>
 801820e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801823c <__ieee754_atan2f+0x13c>
 8018212:	e788      	b.n	8018126 <__ieee754_atan2f+0x26>
 8018214:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8018238 <__ieee754_atan2f+0x138>
 8018218:	e785      	b.n	8018126 <__ieee754_atan2f+0x26>
 801821a:	bf00      	nop
 801821c:	c0490fdb 	.word	0xc0490fdb
 8018220:	bfc90fdb 	.word	0xbfc90fdb
 8018224:	3fc90fdb 	.word	0x3fc90fdb
 8018228:	08020464 	.word	0x08020464
 801822c:	08020458 	.word	0x08020458
 8018230:	33bbbd2e 	.word	0x33bbbd2e
 8018234:	40490fdb 	.word	0x40490fdb
 8018238:	00000000 	.word	0x00000000
 801823c:	3f490fdb 	.word	0x3f490fdb

08018240 <__ieee754_powf>:
 8018240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018244:	ee10 4a90 	vmov	r4, s1
 8018248:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801824c:	ed2d 8b02 	vpush	{d8}
 8018250:	ee10 6a10 	vmov	r6, s0
 8018254:	eeb0 8a40 	vmov.f32	s16, s0
 8018258:	eef0 8a60 	vmov.f32	s17, s1
 801825c:	d10c      	bne.n	8018278 <__ieee754_powf+0x38>
 801825e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8018262:	0076      	lsls	r6, r6, #1
 8018264:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8018268:	f240 8274 	bls.w	8018754 <__ieee754_powf+0x514>
 801826c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018270:	ecbd 8b02 	vpop	{d8}
 8018274:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018278:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801827c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8018280:	d802      	bhi.n	8018288 <__ieee754_powf+0x48>
 8018282:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018286:	d908      	bls.n	801829a <__ieee754_powf+0x5a>
 8018288:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801828c:	d1ee      	bne.n	801826c <__ieee754_powf+0x2c>
 801828e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8018292:	0064      	lsls	r4, r4, #1
 8018294:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8018298:	e7e6      	b.n	8018268 <__ieee754_powf+0x28>
 801829a:	2e00      	cmp	r6, #0
 801829c:	da1f      	bge.n	80182de <__ieee754_powf+0x9e>
 801829e:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80182a2:	f080 8260 	bcs.w	8018766 <__ieee754_powf+0x526>
 80182a6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80182aa:	d32f      	bcc.n	801830c <__ieee754_powf+0xcc>
 80182ac:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80182b0:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80182b4:	fa49 f503 	asr.w	r5, r9, r3
 80182b8:	fa05 f303 	lsl.w	r3, r5, r3
 80182bc:	454b      	cmp	r3, r9
 80182be:	d123      	bne.n	8018308 <__ieee754_powf+0xc8>
 80182c0:	f005 0501 	and.w	r5, r5, #1
 80182c4:	f1c5 0502 	rsb	r5, r5, #2
 80182c8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80182cc:	d11f      	bne.n	801830e <__ieee754_powf+0xce>
 80182ce:	2c00      	cmp	r4, #0
 80182d0:	f280 8246 	bge.w	8018760 <__ieee754_powf+0x520>
 80182d4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80182d8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80182dc:	e7c8      	b.n	8018270 <__ieee754_powf+0x30>
 80182de:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80182e2:	d111      	bne.n	8018308 <__ieee754_powf+0xc8>
 80182e4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80182e8:	f000 8234 	beq.w	8018754 <__ieee754_powf+0x514>
 80182ec:	d906      	bls.n	80182fc <__ieee754_powf+0xbc>
 80182ee:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8018604 <__ieee754_powf+0x3c4>
 80182f2:	2c00      	cmp	r4, #0
 80182f4:	bfa8      	it	ge
 80182f6:	eeb0 0a68 	vmovge.f32	s0, s17
 80182fa:	e7b9      	b.n	8018270 <__ieee754_powf+0x30>
 80182fc:	2c00      	cmp	r4, #0
 80182fe:	f280 822c 	bge.w	801875a <__ieee754_powf+0x51a>
 8018302:	eeb1 0a68 	vneg.f32	s0, s17
 8018306:	e7b3      	b.n	8018270 <__ieee754_powf+0x30>
 8018308:	2500      	movs	r5, #0
 801830a:	e7dd      	b.n	80182c8 <__ieee754_powf+0x88>
 801830c:	2500      	movs	r5, #0
 801830e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018312:	d102      	bne.n	801831a <__ieee754_powf+0xda>
 8018314:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018318:	e7aa      	b.n	8018270 <__ieee754_powf+0x30>
 801831a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801831e:	f040 8227 	bne.w	8018770 <__ieee754_powf+0x530>
 8018322:	2e00      	cmp	r6, #0
 8018324:	f2c0 8224 	blt.w	8018770 <__ieee754_powf+0x530>
 8018328:	eeb0 0a48 	vmov.f32	s0, s16
 801832c:	ecbd 8b02 	vpop	{d8}
 8018330:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018334:	f7ff bc66 	b.w	8017c04 <__ieee754_sqrtf>
 8018338:	2d01      	cmp	r5, #1
 801833a:	d199      	bne.n	8018270 <__ieee754_powf+0x30>
 801833c:	eeb1 0a40 	vneg.f32	s0, s0
 8018340:	e796      	b.n	8018270 <__ieee754_powf+0x30>
 8018342:	0ff0      	lsrs	r0, r6, #31
 8018344:	3801      	subs	r0, #1
 8018346:	ea55 0300 	orrs.w	r3, r5, r0
 801834a:	d104      	bne.n	8018356 <__ieee754_powf+0x116>
 801834c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018350:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018354:	e78c      	b.n	8018270 <__ieee754_powf+0x30>
 8018356:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801835a:	d96d      	bls.n	8018438 <__ieee754_powf+0x1f8>
 801835c:	4baa      	ldr	r3, [pc, #680]	@ (8018608 <__ieee754_powf+0x3c8>)
 801835e:	4598      	cmp	r8, r3
 8018360:	d808      	bhi.n	8018374 <__ieee754_powf+0x134>
 8018362:	2c00      	cmp	r4, #0
 8018364:	da0b      	bge.n	801837e <__ieee754_powf+0x13e>
 8018366:	2000      	movs	r0, #0
 8018368:	ecbd 8b02 	vpop	{d8}
 801836c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018370:	f000 bbea 	b.w	8018b48 <__math_oflowf>
 8018374:	4ba5      	ldr	r3, [pc, #660]	@ (801860c <__ieee754_powf+0x3cc>)
 8018376:	4598      	cmp	r8, r3
 8018378:	d908      	bls.n	801838c <__ieee754_powf+0x14c>
 801837a:	2c00      	cmp	r4, #0
 801837c:	dcf3      	bgt.n	8018366 <__ieee754_powf+0x126>
 801837e:	2000      	movs	r0, #0
 8018380:	ecbd 8b02 	vpop	{d8}
 8018384:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018388:	f000 bbd8 	b.w	8018b3c <__math_uflowf>
 801838c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018390:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018394:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8018610 <__ieee754_powf+0x3d0>
 8018398:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 801839c:	eee0 6a67 	vfms.f32	s13, s0, s15
 80183a0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80183a4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80183a8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80183ac:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8018614 <__ieee754_powf+0x3d4>
 80183b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80183b4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8018618 <__ieee754_powf+0x3d8>
 80183b8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80183bc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 801861c <__ieee754_powf+0x3dc>
 80183c0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80183c4:	eeb0 7a67 	vmov.f32	s14, s15
 80183c8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80183cc:	ee17 3a10 	vmov	r3, s14
 80183d0:	f36f 030b 	bfc	r3, #0, #12
 80183d4:	ee07 3a10 	vmov	s14, r3
 80183d8:	eeb0 6a47 	vmov.f32	s12, s14
 80183dc:	eea0 6a66 	vfms.f32	s12, s0, s13
 80183e0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80183e4:	3d01      	subs	r5, #1
 80183e6:	4305      	orrs	r5, r0
 80183e8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80183ec:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 80183f0:	f36f 040b 	bfc	r4, #0, #12
 80183f4:	bf18      	it	ne
 80183f6:	eeb0 8a66 	vmovne.f32	s16, s13
 80183fa:	ee06 4a90 	vmov	s13, r4
 80183fe:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018402:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8018406:	ee67 7a26 	vmul.f32	s15, s14, s13
 801840a:	eee6 0a07 	vfma.f32	s1, s12, s14
 801840e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018412:	ee17 1a10 	vmov	r1, s14
 8018416:	2900      	cmp	r1, #0
 8018418:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801841c:	f340 80dd 	ble.w	80185da <__ieee754_powf+0x39a>
 8018420:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8018424:	f240 80ca 	bls.w	80185bc <__ieee754_powf+0x37c>
 8018428:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801842c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018430:	bf4c      	ite	mi
 8018432:	2001      	movmi	r0, #1
 8018434:	2000      	movpl	r0, #0
 8018436:	e797      	b.n	8018368 <__ieee754_powf+0x128>
 8018438:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801843c:	bf01      	itttt	eq
 801843e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8018620 <__ieee754_powf+0x3e0>
 8018442:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018446:	f06f 0317 	mvneq.w	r3, #23
 801844a:	ee17 7a90 	vmoveq	r7, s15
 801844e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8018452:	bf18      	it	ne
 8018454:	2300      	movne	r3, #0
 8018456:	3a7f      	subs	r2, #127	@ 0x7f
 8018458:	441a      	add	r2, r3
 801845a:	4b72      	ldr	r3, [pc, #456]	@ (8018624 <__ieee754_powf+0x3e4>)
 801845c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8018460:	429f      	cmp	r7, r3
 8018462:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8018466:	dd06      	ble.n	8018476 <__ieee754_powf+0x236>
 8018468:	4b6f      	ldr	r3, [pc, #444]	@ (8018628 <__ieee754_powf+0x3e8>)
 801846a:	429f      	cmp	r7, r3
 801846c:	f340 80a4 	ble.w	80185b8 <__ieee754_powf+0x378>
 8018470:	3201      	adds	r2, #1
 8018472:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8018476:	2600      	movs	r6, #0
 8018478:	4b6c      	ldr	r3, [pc, #432]	@ (801862c <__ieee754_powf+0x3ec>)
 801847a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801847e:	ee07 1a10 	vmov	s14, r1
 8018482:	edd3 5a00 	vldr	s11, [r3]
 8018486:	4b6a      	ldr	r3, [pc, #424]	@ (8018630 <__ieee754_powf+0x3f0>)
 8018488:	ee75 7a87 	vadd.f32	s15, s11, s14
 801848c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018490:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8018494:	1049      	asrs	r1, r1, #1
 8018496:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 801849a:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 801849e:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80184a2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80184a6:	ee07 1a90 	vmov	s15, r1
 80184aa:	ee26 5a24 	vmul.f32	s10, s12, s9
 80184ae:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80184b2:	ee15 7a10 	vmov	r7, s10
 80184b6:	401f      	ands	r7, r3
 80184b8:	ee06 7a90 	vmov	s13, r7
 80184bc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80184c0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80184c4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80184c8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80184cc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8018634 <__ieee754_powf+0x3f4>
 80184d0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018638 <__ieee754_powf+0x3f8>
 80184d4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80184d8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 801863c <__ieee754_powf+0x3fc>
 80184dc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80184e0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8018610 <__ieee754_powf+0x3d0>
 80184e4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80184e8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018640 <__ieee754_powf+0x400>
 80184ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80184f0:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8018644 <__ieee754_powf+0x404>
 80184f4:	ee26 6a24 	vmul.f32	s12, s12, s9
 80184f8:	eee7 5a27 	vfma.f32	s11, s14, s15
 80184fc:	ee35 7a26 	vadd.f32	s14, s10, s13
 8018500:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8018504:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018508:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801850c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8018510:	eef0 5a67 	vmov.f32	s11, s15
 8018514:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8018518:	ee75 5a87 	vadd.f32	s11, s11, s14
 801851c:	ee15 1a90 	vmov	r1, s11
 8018520:	4019      	ands	r1, r3
 8018522:	ee05 1a90 	vmov	s11, r1
 8018526:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801852a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801852e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018532:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018536:	eee6 7a25 	vfma.f32	s15, s12, s11
 801853a:	eeb0 6a67 	vmov.f32	s12, s15
 801853e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018542:	ee16 1a10 	vmov	r1, s12
 8018546:	4019      	ands	r1, r3
 8018548:	ee06 1a10 	vmov	s12, r1
 801854c:	eeb0 7a46 	vmov.f32	s14, s12
 8018550:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8018554:	493c      	ldr	r1, [pc, #240]	@ (8018648 <__ieee754_powf+0x408>)
 8018556:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801855a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801855e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 801864c <__ieee754_powf+0x40c>
 8018562:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8018650 <__ieee754_powf+0x410>
 8018566:	ee67 7a87 	vmul.f32	s15, s15, s14
 801856a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8018654 <__ieee754_powf+0x414>
 801856e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018572:	ed91 7a00 	vldr	s14, [r1]
 8018576:	ee77 7a87 	vadd.f32	s15, s15, s14
 801857a:	ee07 2a10 	vmov	s14, r2
 801857e:	4a36      	ldr	r2, [pc, #216]	@ (8018658 <__ieee754_powf+0x418>)
 8018580:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8018584:	eeb0 7a67 	vmov.f32	s14, s15
 8018588:	eea6 7a25 	vfma.f32	s14, s12, s11
 801858c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8018590:	ed92 5a00 	vldr	s10, [r2]
 8018594:	ee37 7a05 	vadd.f32	s14, s14, s10
 8018598:	ee37 7a26 	vadd.f32	s14, s14, s13
 801859c:	ee17 2a10 	vmov	r2, s14
 80185a0:	401a      	ands	r2, r3
 80185a2:	ee07 2a10 	vmov	s14, r2
 80185a6:	ee77 6a66 	vsub.f32	s13, s14, s13
 80185aa:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80185ae:	eee6 6a65 	vfms.f32	s13, s12, s11
 80185b2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80185b6:	e715      	b.n	80183e4 <__ieee754_powf+0x1a4>
 80185b8:	2601      	movs	r6, #1
 80185ba:	e75d      	b.n	8018478 <__ieee754_powf+0x238>
 80185bc:	d152      	bne.n	8018664 <__ieee754_powf+0x424>
 80185be:	eddf 6a27 	vldr	s13, [pc, #156]	@ 801865c <__ieee754_powf+0x41c>
 80185c2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80185c6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80185ca:	eef4 6ac7 	vcmpe.f32	s13, s14
 80185ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185d2:	f73f af29 	bgt.w	8018428 <__ieee754_powf+0x1e8>
 80185d6:	2386      	movs	r3, #134	@ 0x86
 80185d8:	e048      	b.n	801866c <__ieee754_powf+0x42c>
 80185da:	4a21      	ldr	r2, [pc, #132]	@ (8018660 <__ieee754_powf+0x420>)
 80185dc:	4293      	cmp	r3, r2
 80185de:	d907      	bls.n	80185f0 <__ieee754_powf+0x3b0>
 80185e0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80185e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185e8:	bf4c      	ite	mi
 80185ea:	2001      	movmi	r0, #1
 80185ec:	2000      	movpl	r0, #0
 80185ee:	e6c7      	b.n	8018380 <__ieee754_powf+0x140>
 80185f0:	d138      	bne.n	8018664 <__ieee754_powf+0x424>
 80185f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80185f6:	eeb4 7ae0 	vcmpe.f32	s14, s1
 80185fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80185fe:	dbea      	blt.n	80185d6 <__ieee754_powf+0x396>
 8018600:	e7ee      	b.n	80185e0 <__ieee754_powf+0x3a0>
 8018602:	bf00      	nop
 8018604:	00000000 	.word	0x00000000
 8018608:	3f7ffff3 	.word	0x3f7ffff3
 801860c:	3f800007 	.word	0x3f800007
 8018610:	3eaaaaab 	.word	0x3eaaaaab
 8018614:	3fb8aa00 	.word	0x3fb8aa00
 8018618:	3fb8aa3b 	.word	0x3fb8aa3b
 801861c:	36eca570 	.word	0x36eca570
 8018620:	4b800000 	.word	0x4b800000
 8018624:	001cc471 	.word	0x001cc471
 8018628:	005db3d6 	.word	0x005db3d6
 801862c:	08020480 	.word	0x08020480
 8018630:	fffff000 	.word	0xfffff000
 8018634:	3e6c3255 	.word	0x3e6c3255
 8018638:	3e53f142 	.word	0x3e53f142
 801863c:	3e8ba305 	.word	0x3e8ba305
 8018640:	3edb6db7 	.word	0x3edb6db7
 8018644:	3f19999a 	.word	0x3f19999a
 8018648:	08020470 	.word	0x08020470
 801864c:	3f76384f 	.word	0x3f76384f
 8018650:	3f763800 	.word	0x3f763800
 8018654:	369dc3a0 	.word	0x369dc3a0
 8018658:	08020478 	.word	0x08020478
 801865c:	3338aa3c 	.word	0x3338aa3c
 8018660:	43160000 	.word	0x43160000
 8018664:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8018668:	d96f      	bls.n	801874a <__ieee754_powf+0x50a>
 801866a:	15db      	asrs	r3, r3, #23
 801866c:	3b7e      	subs	r3, #126	@ 0x7e
 801866e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018672:	4118      	asrs	r0, r3
 8018674:	4408      	add	r0, r1
 8018676:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801867a:	4a4e      	ldr	r2, [pc, #312]	@ (80187b4 <__ieee754_powf+0x574>)
 801867c:	3b7f      	subs	r3, #127	@ 0x7f
 801867e:	411a      	asrs	r2, r3
 8018680:	4002      	ands	r2, r0
 8018682:	ee07 2a10 	vmov	s14, r2
 8018686:	f3c0 0016 	ubfx	r0, r0, #0, #23
 801868a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801868e:	f1c3 0317 	rsb	r3, r3, #23
 8018692:	4118      	asrs	r0, r3
 8018694:	2900      	cmp	r1, #0
 8018696:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801869a:	bfb8      	it	lt
 801869c:	4240      	neglt	r0, r0
 801869e:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80186a2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80187b8 <__ieee754_powf+0x578>
 80186a6:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80187bc <__ieee754_powf+0x57c>
 80186aa:	ee16 3a90 	vmov	r3, s13
 80186ae:	f36f 030b 	bfc	r3, #0, #12
 80186b2:	ee06 3a90 	vmov	s13, r3
 80186b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80186ba:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80186be:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80186c2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80187c0 <__ieee754_powf+0x580>
 80186c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80186ca:	eee0 7a87 	vfma.f32	s15, s1, s14
 80186ce:	eeb0 7a67 	vmov.f32	s14, s15
 80186d2:	eea6 7a86 	vfma.f32	s14, s13, s12
 80186d6:	eef0 5a47 	vmov.f32	s11, s14
 80186da:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80186de:	ee67 6a07 	vmul.f32	s13, s14, s14
 80186e2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80186e6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80187c4 <__ieee754_powf+0x584>
 80186ea:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80187c8 <__ieee754_powf+0x588>
 80186ee:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80186f2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80187cc <__ieee754_powf+0x58c>
 80186f6:	eee6 5a26 	vfma.f32	s11, s12, s13
 80186fa:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80187d0 <__ieee754_powf+0x590>
 80186fe:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8018702:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80187d4 <__ieee754_powf+0x594>
 8018706:	eee6 5a26 	vfma.f32	s11, s12, s13
 801870a:	eeb0 6a47 	vmov.f32	s12, s14
 801870e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8018712:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018716:	ee67 5a06 	vmul.f32	s11, s14, s12
 801871a:	ee36 6a66 	vsub.f32	s12, s12, s13
 801871e:	eee7 7a27 	vfma.f32	s15, s14, s15
 8018722:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8018726:	ee76 7ae7 	vsub.f32	s15, s13, s15
 801872a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801872e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018732:	ee10 3a10 	vmov	r3, s0
 8018736:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 801873a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801873e:	da06      	bge.n	801874e <__ieee754_powf+0x50e>
 8018740:	f000 f97c 	bl	8018a3c <scalbnf>
 8018744:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018748:	e592      	b.n	8018270 <__ieee754_powf+0x30>
 801874a:	2000      	movs	r0, #0
 801874c:	e7a7      	b.n	801869e <__ieee754_powf+0x45e>
 801874e:	ee00 3a10 	vmov	s0, r3
 8018752:	e7f7      	b.n	8018744 <__ieee754_powf+0x504>
 8018754:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018758:	e58a      	b.n	8018270 <__ieee754_powf+0x30>
 801875a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80187d8 <__ieee754_powf+0x598>
 801875e:	e587      	b.n	8018270 <__ieee754_powf+0x30>
 8018760:	eeb0 0a48 	vmov.f32	s0, s16
 8018764:	e584      	b.n	8018270 <__ieee754_powf+0x30>
 8018766:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801876a:	f43f adbb 	beq.w	80182e4 <__ieee754_powf+0xa4>
 801876e:	2502      	movs	r5, #2
 8018770:	eeb0 0a48 	vmov.f32	s0, s16
 8018774:	f7ff f9dc 	bl	8017b30 <fabsf>
 8018778:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 801877c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8018780:	4647      	mov	r7, r8
 8018782:	d003      	beq.n	801878c <__ieee754_powf+0x54c>
 8018784:	f1b8 0f00 	cmp.w	r8, #0
 8018788:	f47f addb 	bne.w	8018342 <__ieee754_powf+0x102>
 801878c:	2c00      	cmp	r4, #0
 801878e:	bfbc      	itt	lt
 8018790:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8018794:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018798:	2e00      	cmp	r6, #0
 801879a:	f6bf ad69 	bge.w	8018270 <__ieee754_powf+0x30>
 801879e:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80187a2:	ea58 0805 	orrs.w	r8, r8, r5
 80187a6:	f47f adc7 	bne.w	8018338 <__ieee754_powf+0xf8>
 80187aa:	ee70 7a40 	vsub.f32	s15, s0, s0
 80187ae:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80187b2:	e55d      	b.n	8018270 <__ieee754_powf+0x30>
 80187b4:	ff800000 	.word	0xff800000
 80187b8:	3f317218 	.word	0x3f317218
 80187bc:	3f317200 	.word	0x3f317200
 80187c0:	35bfbe8c 	.word	0x35bfbe8c
 80187c4:	b5ddea0e 	.word	0xb5ddea0e
 80187c8:	3331bb4c 	.word	0x3331bb4c
 80187cc:	388ab355 	.word	0x388ab355
 80187d0:	bb360b61 	.word	0xbb360b61
 80187d4:	3e2aaaab 	.word	0x3e2aaaab
 80187d8:	00000000 	.word	0x00000000

080187dc <__ieee754_rem_pio2f>:
 80187dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80187de:	ee10 6a10 	vmov	r6, s0
 80187e2:	4b88      	ldr	r3, [pc, #544]	@ (8018a04 <__ieee754_rem_pio2f+0x228>)
 80187e4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80187e8:	429d      	cmp	r5, r3
 80187ea:	b087      	sub	sp, #28
 80187ec:	4604      	mov	r4, r0
 80187ee:	d805      	bhi.n	80187fc <__ieee754_rem_pio2f+0x20>
 80187f0:	2300      	movs	r3, #0
 80187f2:	ed80 0a00 	vstr	s0, [r0]
 80187f6:	6043      	str	r3, [r0, #4]
 80187f8:	2000      	movs	r0, #0
 80187fa:	e022      	b.n	8018842 <__ieee754_rem_pio2f+0x66>
 80187fc:	4b82      	ldr	r3, [pc, #520]	@ (8018a08 <__ieee754_rem_pio2f+0x22c>)
 80187fe:	429d      	cmp	r5, r3
 8018800:	d83a      	bhi.n	8018878 <__ieee754_rem_pio2f+0x9c>
 8018802:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8018806:	2e00      	cmp	r6, #0
 8018808:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8018a0c <__ieee754_rem_pio2f+0x230>
 801880c:	4a80      	ldr	r2, [pc, #512]	@ (8018a10 <__ieee754_rem_pio2f+0x234>)
 801880e:	f023 030f 	bic.w	r3, r3, #15
 8018812:	dd18      	ble.n	8018846 <__ieee754_rem_pio2f+0x6a>
 8018814:	4293      	cmp	r3, r2
 8018816:	ee70 7a47 	vsub.f32	s15, s0, s14
 801881a:	bf09      	itett	eq
 801881c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8018a14 <__ieee754_rem_pio2f+0x238>
 8018820:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8018a18 <__ieee754_rem_pio2f+0x23c>
 8018824:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8018a1c <__ieee754_rem_pio2f+0x240>
 8018828:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 801882c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8018830:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018834:	ed80 7a00 	vstr	s14, [r0]
 8018838:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801883c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018840:	2001      	movs	r0, #1
 8018842:	b007      	add	sp, #28
 8018844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018846:	4293      	cmp	r3, r2
 8018848:	ee70 7a07 	vadd.f32	s15, s0, s14
 801884c:	bf09      	itett	eq
 801884e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8018a14 <__ieee754_rem_pio2f+0x238>
 8018852:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8018a18 <__ieee754_rem_pio2f+0x23c>
 8018856:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8018a1c <__ieee754_rem_pio2f+0x240>
 801885a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 801885e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018862:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018866:	ed80 7a00 	vstr	s14, [r0]
 801886a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801886e:	edc0 7a01 	vstr	s15, [r0, #4]
 8018872:	f04f 30ff 	mov.w	r0, #4294967295
 8018876:	e7e4      	b.n	8018842 <__ieee754_rem_pio2f+0x66>
 8018878:	4b69      	ldr	r3, [pc, #420]	@ (8018a20 <__ieee754_rem_pio2f+0x244>)
 801887a:	429d      	cmp	r5, r3
 801887c:	d873      	bhi.n	8018966 <__ieee754_rem_pio2f+0x18a>
 801887e:	f7ff f957 	bl	8017b30 <fabsf>
 8018882:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8018a24 <__ieee754_rem_pio2f+0x248>
 8018886:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801888a:	eee0 7a07 	vfma.f32	s15, s0, s14
 801888e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018892:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018896:	ee17 0a90 	vmov	r0, s15
 801889a:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018a0c <__ieee754_rem_pio2f+0x230>
 801889e:	eea7 0a67 	vfms.f32	s0, s14, s15
 80188a2:	281f      	cmp	r0, #31
 80188a4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018a18 <__ieee754_rem_pio2f+0x23c>
 80188a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80188ac:	eeb1 6a47 	vneg.f32	s12, s14
 80188b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80188b4:	ee16 1a90 	vmov	r1, s13
 80188b8:	dc09      	bgt.n	80188ce <__ieee754_rem_pio2f+0xf2>
 80188ba:	4a5b      	ldr	r2, [pc, #364]	@ (8018a28 <__ieee754_rem_pio2f+0x24c>)
 80188bc:	1e47      	subs	r7, r0, #1
 80188be:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80188c2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 80188c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80188ca:	4293      	cmp	r3, r2
 80188cc:	d107      	bne.n	80188de <__ieee754_rem_pio2f+0x102>
 80188ce:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 80188d2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 80188d6:	2a08      	cmp	r2, #8
 80188d8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80188dc:	dc14      	bgt.n	8018908 <__ieee754_rem_pio2f+0x12c>
 80188de:	6021      	str	r1, [r4, #0]
 80188e0:	ed94 7a00 	vldr	s14, [r4]
 80188e4:	ee30 0a47 	vsub.f32	s0, s0, s14
 80188e8:	2e00      	cmp	r6, #0
 80188ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80188ee:	ed84 0a01 	vstr	s0, [r4, #4]
 80188f2:	daa6      	bge.n	8018842 <__ieee754_rem_pio2f+0x66>
 80188f4:	eeb1 7a47 	vneg.f32	s14, s14
 80188f8:	eeb1 0a40 	vneg.f32	s0, s0
 80188fc:	ed84 7a00 	vstr	s14, [r4]
 8018900:	ed84 0a01 	vstr	s0, [r4, #4]
 8018904:	4240      	negs	r0, r0
 8018906:	e79c      	b.n	8018842 <__ieee754_rem_pio2f+0x66>
 8018908:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8018a14 <__ieee754_rem_pio2f+0x238>
 801890c:	eef0 6a40 	vmov.f32	s13, s0
 8018910:	eee6 6a25 	vfma.f32	s13, s12, s11
 8018914:	ee70 7a66 	vsub.f32	s15, s0, s13
 8018918:	eee6 7a25 	vfma.f32	s15, s12, s11
 801891c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8018a1c <__ieee754_rem_pio2f+0x240>
 8018920:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8018924:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8018928:	ee15 2a90 	vmov	r2, s11
 801892c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8018930:	1a5b      	subs	r3, r3, r1
 8018932:	2b19      	cmp	r3, #25
 8018934:	dc04      	bgt.n	8018940 <__ieee754_rem_pio2f+0x164>
 8018936:	edc4 5a00 	vstr	s11, [r4]
 801893a:	eeb0 0a66 	vmov.f32	s0, s13
 801893e:	e7cf      	b.n	80188e0 <__ieee754_rem_pio2f+0x104>
 8018940:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8018a2c <__ieee754_rem_pio2f+0x250>
 8018944:	eeb0 0a66 	vmov.f32	s0, s13
 8018948:	eea6 0a25 	vfma.f32	s0, s12, s11
 801894c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8018950:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8018a30 <__ieee754_rem_pio2f+0x254>
 8018954:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018958:	eed7 7a26 	vfnms.f32	s15, s14, s13
 801895c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018960:	ed84 7a00 	vstr	s14, [r4]
 8018964:	e7bc      	b.n	80188e0 <__ieee754_rem_pio2f+0x104>
 8018966:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 801896a:	d306      	bcc.n	801897a <__ieee754_rem_pio2f+0x19e>
 801896c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018970:	edc0 7a01 	vstr	s15, [r0, #4]
 8018974:	edc0 7a00 	vstr	s15, [r0]
 8018978:	e73e      	b.n	80187f8 <__ieee754_rem_pio2f+0x1c>
 801897a:	15ea      	asrs	r2, r5, #23
 801897c:	3a86      	subs	r2, #134	@ 0x86
 801897e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8018982:	ee07 3a90 	vmov	s15, r3
 8018986:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801898a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8018a34 <__ieee754_rem_pio2f+0x258>
 801898e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018992:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018996:	ed8d 7a03 	vstr	s14, [sp, #12]
 801899a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801899e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80189a2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80189a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80189aa:	ed8d 7a04 	vstr	s14, [sp, #16]
 80189ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80189b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80189b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189ba:	edcd 7a05 	vstr	s15, [sp, #20]
 80189be:	d11e      	bne.n	80189fe <__ieee754_rem_pio2f+0x222>
 80189c0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80189c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189c8:	bf0c      	ite	eq
 80189ca:	2301      	moveq	r3, #1
 80189cc:	2302      	movne	r3, #2
 80189ce:	491a      	ldr	r1, [pc, #104]	@ (8018a38 <__ieee754_rem_pio2f+0x25c>)
 80189d0:	9101      	str	r1, [sp, #4]
 80189d2:	2102      	movs	r1, #2
 80189d4:	9100      	str	r1, [sp, #0]
 80189d6:	a803      	add	r0, sp, #12
 80189d8:	4621      	mov	r1, r4
 80189da:	f000 f8bb 	bl	8018b54 <__kernel_rem_pio2f>
 80189de:	2e00      	cmp	r6, #0
 80189e0:	f6bf af2f 	bge.w	8018842 <__ieee754_rem_pio2f+0x66>
 80189e4:	edd4 7a00 	vldr	s15, [r4]
 80189e8:	eef1 7a67 	vneg.f32	s15, s15
 80189ec:	edc4 7a00 	vstr	s15, [r4]
 80189f0:	edd4 7a01 	vldr	s15, [r4, #4]
 80189f4:	eef1 7a67 	vneg.f32	s15, s15
 80189f8:	edc4 7a01 	vstr	s15, [r4, #4]
 80189fc:	e782      	b.n	8018904 <__ieee754_rem_pio2f+0x128>
 80189fe:	2303      	movs	r3, #3
 8018a00:	e7e5      	b.n	80189ce <__ieee754_rem_pio2f+0x1f2>
 8018a02:	bf00      	nop
 8018a04:	3f490fd8 	.word	0x3f490fd8
 8018a08:	4016cbe3 	.word	0x4016cbe3
 8018a0c:	3fc90f80 	.word	0x3fc90f80
 8018a10:	3fc90fd0 	.word	0x3fc90fd0
 8018a14:	37354400 	.word	0x37354400
 8018a18:	37354443 	.word	0x37354443
 8018a1c:	2e85a308 	.word	0x2e85a308
 8018a20:	43490f80 	.word	0x43490f80
 8018a24:	3f22f984 	.word	0x3f22f984
 8018a28:	08020488 	.word	0x08020488
 8018a2c:	2e85a300 	.word	0x2e85a300
 8018a30:	248d3132 	.word	0x248d3132
 8018a34:	43800000 	.word	0x43800000
 8018a38:	08020508 	.word	0x08020508

08018a3c <scalbnf>:
 8018a3c:	ee10 3a10 	vmov	r3, s0
 8018a40:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018a44:	d02b      	beq.n	8018a9e <scalbnf+0x62>
 8018a46:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8018a4a:	d302      	bcc.n	8018a52 <scalbnf+0x16>
 8018a4c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018a50:	4770      	bx	lr
 8018a52:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8018a56:	d123      	bne.n	8018aa0 <scalbnf+0x64>
 8018a58:	4b24      	ldr	r3, [pc, #144]	@ (8018aec <scalbnf+0xb0>)
 8018a5a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8018af0 <scalbnf+0xb4>
 8018a5e:	4298      	cmp	r0, r3
 8018a60:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018a64:	db17      	blt.n	8018a96 <scalbnf+0x5a>
 8018a66:	ee10 3a10 	vmov	r3, s0
 8018a6a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018a6e:	3a19      	subs	r2, #25
 8018a70:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8018a74:	4288      	cmp	r0, r1
 8018a76:	dd15      	ble.n	8018aa4 <scalbnf+0x68>
 8018a78:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8018af4 <scalbnf+0xb8>
 8018a7c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8018af8 <scalbnf+0xbc>
 8018a80:	ee10 3a10 	vmov	r3, s0
 8018a84:	eeb0 7a67 	vmov.f32	s14, s15
 8018a88:	2b00      	cmp	r3, #0
 8018a8a:	bfb8      	it	lt
 8018a8c:	eef0 7a66 	vmovlt.f32	s15, s13
 8018a90:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018a94:	4770      	bx	lr
 8018a96:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018afc <scalbnf+0xc0>
 8018a9a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018a9e:	4770      	bx	lr
 8018aa0:	0dd2      	lsrs	r2, r2, #23
 8018aa2:	e7e5      	b.n	8018a70 <scalbnf+0x34>
 8018aa4:	4410      	add	r0, r2
 8018aa6:	28fe      	cmp	r0, #254	@ 0xfe
 8018aa8:	dce6      	bgt.n	8018a78 <scalbnf+0x3c>
 8018aaa:	2800      	cmp	r0, #0
 8018aac:	dd06      	ble.n	8018abc <scalbnf+0x80>
 8018aae:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018ab2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018ab6:	ee00 3a10 	vmov	s0, r3
 8018aba:	4770      	bx	lr
 8018abc:	f110 0f16 	cmn.w	r0, #22
 8018ac0:	da09      	bge.n	8018ad6 <scalbnf+0x9a>
 8018ac2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8018afc <scalbnf+0xc0>
 8018ac6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8018b00 <scalbnf+0xc4>
 8018aca:	ee10 3a10 	vmov	r3, s0
 8018ace:	eeb0 7a67 	vmov.f32	s14, s15
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	e7d9      	b.n	8018a8a <scalbnf+0x4e>
 8018ad6:	3019      	adds	r0, #25
 8018ad8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018adc:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018ae0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8018b04 <scalbnf+0xc8>
 8018ae4:	ee07 3a90 	vmov	s15, r3
 8018ae8:	e7d7      	b.n	8018a9a <scalbnf+0x5e>
 8018aea:	bf00      	nop
 8018aec:	ffff3cb0 	.word	0xffff3cb0
 8018af0:	4c000000 	.word	0x4c000000
 8018af4:	7149f2ca 	.word	0x7149f2ca
 8018af8:	f149f2ca 	.word	0xf149f2ca
 8018afc:	0da24260 	.word	0x0da24260
 8018b00:	8da24260 	.word	0x8da24260
 8018b04:	33000000 	.word	0x33000000

08018b08 <with_errnof>:
 8018b08:	b510      	push	{r4, lr}
 8018b0a:	ed2d 8b02 	vpush	{d8}
 8018b0e:	eeb0 8a40 	vmov.f32	s16, s0
 8018b12:	4604      	mov	r4, r0
 8018b14:	f001 fda6 	bl	801a664 <__errno>
 8018b18:	eeb0 0a48 	vmov.f32	s0, s16
 8018b1c:	ecbd 8b02 	vpop	{d8}
 8018b20:	6004      	str	r4, [r0, #0]
 8018b22:	bd10      	pop	{r4, pc}

08018b24 <xflowf>:
 8018b24:	b130      	cbz	r0, 8018b34 <xflowf+0x10>
 8018b26:	eef1 7a40 	vneg.f32	s15, s0
 8018b2a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018b2e:	2022      	movs	r0, #34	@ 0x22
 8018b30:	f7ff bfea 	b.w	8018b08 <with_errnof>
 8018b34:	eef0 7a40 	vmov.f32	s15, s0
 8018b38:	e7f7      	b.n	8018b2a <xflowf+0x6>
	...

08018b3c <__math_uflowf>:
 8018b3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018b44 <__math_uflowf+0x8>
 8018b40:	f7ff bff0 	b.w	8018b24 <xflowf>
 8018b44:	10000000 	.word	0x10000000

08018b48 <__math_oflowf>:
 8018b48:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018b50 <__math_oflowf+0x8>
 8018b4c:	f7ff bfea 	b.w	8018b24 <xflowf>
 8018b50:	70000000 	.word	0x70000000

08018b54 <__kernel_rem_pio2f>:
 8018b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b58:	ed2d 8b04 	vpush	{d8-d9}
 8018b5c:	b0d9      	sub	sp, #356	@ 0x164
 8018b5e:	4690      	mov	r8, r2
 8018b60:	9001      	str	r0, [sp, #4]
 8018b62:	4ab6      	ldr	r2, [pc, #728]	@ (8018e3c <__kernel_rem_pio2f+0x2e8>)
 8018b64:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8018b66:	f118 0f04 	cmn.w	r8, #4
 8018b6a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8018b6e:	460f      	mov	r7, r1
 8018b70:	f103 3bff 	add.w	fp, r3, #4294967295
 8018b74:	db26      	blt.n	8018bc4 <__kernel_rem_pio2f+0x70>
 8018b76:	f1b8 0203 	subs.w	r2, r8, #3
 8018b7a:	bf48      	it	mi
 8018b7c:	f108 0204 	addmi.w	r2, r8, #4
 8018b80:	10d2      	asrs	r2, r2, #3
 8018b82:	1c55      	adds	r5, r2, #1
 8018b84:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8018b86:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8018e4c <__kernel_rem_pio2f+0x2f8>
 8018b8a:	00e8      	lsls	r0, r5, #3
 8018b8c:	eba2 060b 	sub.w	r6, r2, fp
 8018b90:	9002      	str	r0, [sp, #8]
 8018b92:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8018b96:	eb0a 0c0b 	add.w	ip, sl, fp
 8018b9a:	ac1c      	add	r4, sp, #112	@ 0x70
 8018b9c:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8018ba0:	2000      	movs	r0, #0
 8018ba2:	4560      	cmp	r0, ip
 8018ba4:	dd10      	ble.n	8018bc8 <__kernel_rem_pio2f+0x74>
 8018ba6:	a91c      	add	r1, sp, #112	@ 0x70
 8018ba8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8018bac:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8018bb0:	2600      	movs	r6, #0
 8018bb2:	4556      	cmp	r6, sl
 8018bb4:	dc24      	bgt.n	8018c00 <__kernel_rem_pio2f+0xac>
 8018bb6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018bba:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8018e4c <__kernel_rem_pio2f+0x2f8>
 8018bbe:	4684      	mov	ip, r0
 8018bc0:	2400      	movs	r4, #0
 8018bc2:	e016      	b.n	8018bf2 <__kernel_rem_pio2f+0x9e>
 8018bc4:	2200      	movs	r2, #0
 8018bc6:	e7dc      	b.n	8018b82 <__kernel_rem_pio2f+0x2e>
 8018bc8:	42c6      	cmn	r6, r0
 8018bca:	bf5d      	ittte	pl
 8018bcc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8018bd0:	ee07 1a90 	vmovpl	s15, r1
 8018bd4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018bd8:	eef0 7a47 	vmovmi.f32	s15, s14
 8018bdc:	ece4 7a01 	vstmia	r4!, {s15}
 8018be0:	3001      	adds	r0, #1
 8018be2:	e7de      	b.n	8018ba2 <__kernel_rem_pio2f+0x4e>
 8018be4:	ecfe 6a01 	vldmia	lr!, {s13}
 8018be8:	ed3c 7a01 	vldmdb	ip!, {s14}
 8018bec:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018bf0:	3401      	adds	r4, #1
 8018bf2:	455c      	cmp	r4, fp
 8018bf4:	ddf6      	ble.n	8018be4 <__kernel_rem_pio2f+0x90>
 8018bf6:	ece9 7a01 	vstmia	r9!, {s15}
 8018bfa:	3601      	adds	r6, #1
 8018bfc:	3004      	adds	r0, #4
 8018bfe:	e7d8      	b.n	8018bb2 <__kernel_rem_pio2f+0x5e>
 8018c00:	a908      	add	r1, sp, #32
 8018c02:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018c06:	9104      	str	r1, [sp, #16]
 8018c08:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8018c0a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8018e48 <__kernel_rem_pio2f+0x2f4>
 8018c0e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8018e44 <__kernel_rem_pio2f+0x2f0>
 8018c12:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8018c16:	9203      	str	r2, [sp, #12]
 8018c18:	4654      	mov	r4, sl
 8018c1a:	00a2      	lsls	r2, r4, #2
 8018c1c:	9205      	str	r2, [sp, #20]
 8018c1e:	aa58      	add	r2, sp, #352	@ 0x160
 8018c20:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8018c24:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8018c28:	a944      	add	r1, sp, #272	@ 0x110
 8018c2a:	aa08      	add	r2, sp, #32
 8018c2c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8018c30:	4694      	mov	ip, r2
 8018c32:	4626      	mov	r6, r4
 8018c34:	2e00      	cmp	r6, #0
 8018c36:	dc4c      	bgt.n	8018cd2 <__kernel_rem_pio2f+0x17e>
 8018c38:	4628      	mov	r0, r5
 8018c3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8018c3e:	f7ff fefd 	bl	8018a3c <scalbnf>
 8018c42:	eeb0 8a40 	vmov.f32	s16, s0
 8018c46:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8018c4a:	ee28 0a00 	vmul.f32	s0, s16, s0
 8018c4e:	f000 f9e9 	bl	8019024 <floorf>
 8018c52:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8018c56:	eea0 8a67 	vfms.f32	s16, s0, s15
 8018c5a:	2d00      	cmp	r5, #0
 8018c5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018c60:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8018c64:	ee17 9a90 	vmov	r9, s15
 8018c68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018c6c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8018c70:	dd41      	ble.n	8018cf6 <__kernel_rem_pio2f+0x1a2>
 8018c72:	f104 3cff 	add.w	ip, r4, #4294967295
 8018c76:	a908      	add	r1, sp, #32
 8018c78:	f1c5 0e08 	rsb	lr, r5, #8
 8018c7c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8018c80:	fa46 f00e 	asr.w	r0, r6, lr
 8018c84:	4481      	add	r9, r0
 8018c86:	fa00 f00e 	lsl.w	r0, r0, lr
 8018c8a:	1a36      	subs	r6, r6, r0
 8018c8c:	f1c5 0007 	rsb	r0, r5, #7
 8018c90:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8018c94:	4106      	asrs	r6, r0
 8018c96:	2e00      	cmp	r6, #0
 8018c98:	dd3c      	ble.n	8018d14 <__kernel_rem_pio2f+0x1c0>
 8018c9a:	f04f 0e00 	mov.w	lr, #0
 8018c9e:	f109 0901 	add.w	r9, r9, #1
 8018ca2:	4670      	mov	r0, lr
 8018ca4:	4574      	cmp	r4, lr
 8018ca6:	dc68      	bgt.n	8018d7a <__kernel_rem_pio2f+0x226>
 8018ca8:	2d00      	cmp	r5, #0
 8018caa:	dd03      	ble.n	8018cb4 <__kernel_rem_pio2f+0x160>
 8018cac:	2d01      	cmp	r5, #1
 8018cae:	d074      	beq.n	8018d9a <__kernel_rem_pio2f+0x246>
 8018cb0:	2d02      	cmp	r5, #2
 8018cb2:	d07d      	beq.n	8018db0 <__kernel_rem_pio2f+0x25c>
 8018cb4:	2e02      	cmp	r6, #2
 8018cb6:	d12d      	bne.n	8018d14 <__kernel_rem_pio2f+0x1c0>
 8018cb8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018cbc:	ee30 8a48 	vsub.f32	s16, s0, s16
 8018cc0:	b340      	cbz	r0, 8018d14 <__kernel_rem_pio2f+0x1c0>
 8018cc2:	4628      	mov	r0, r5
 8018cc4:	9306      	str	r3, [sp, #24]
 8018cc6:	f7ff feb9 	bl	8018a3c <scalbnf>
 8018cca:	9b06      	ldr	r3, [sp, #24]
 8018ccc:	ee38 8a40 	vsub.f32	s16, s16, s0
 8018cd0:	e020      	b.n	8018d14 <__kernel_rem_pio2f+0x1c0>
 8018cd2:	ee60 7a28 	vmul.f32	s15, s0, s17
 8018cd6:	3e01      	subs	r6, #1
 8018cd8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ce0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8018ce4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018ce8:	ecac 0a01 	vstmia	ip!, {s0}
 8018cec:	ed30 0a01 	vldmdb	r0!, {s0}
 8018cf0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8018cf4:	e79e      	b.n	8018c34 <__kernel_rem_pio2f+0xe0>
 8018cf6:	d105      	bne.n	8018d04 <__kernel_rem_pio2f+0x1b0>
 8018cf8:	1e60      	subs	r0, r4, #1
 8018cfa:	a908      	add	r1, sp, #32
 8018cfc:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8018d00:	11f6      	asrs	r6, r6, #7
 8018d02:	e7c8      	b.n	8018c96 <__kernel_rem_pio2f+0x142>
 8018d04:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018d08:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8018d0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d10:	da31      	bge.n	8018d76 <__kernel_rem_pio2f+0x222>
 8018d12:	2600      	movs	r6, #0
 8018d14:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8018d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018d1c:	f040 8098 	bne.w	8018e50 <__kernel_rem_pio2f+0x2fc>
 8018d20:	1e60      	subs	r0, r4, #1
 8018d22:	2200      	movs	r2, #0
 8018d24:	4550      	cmp	r0, sl
 8018d26:	da4b      	bge.n	8018dc0 <__kernel_rem_pio2f+0x26c>
 8018d28:	2a00      	cmp	r2, #0
 8018d2a:	d065      	beq.n	8018df8 <__kernel_rem_pio2f+0x2a4>
 8018d2c:	3c01      	subs	r4, #1
 8018d2e:	ab08      	add	r3, sp, #32
 8018d30:	3d08      	subs	r5, #8
 8018d32:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8018d36:	2b00      	cmp	r3, #0
 8018d38:	d0f8      	beq.n	8018d2c <__kernel_rem_pio2f+0x1d8>
 8018d3a:	4628      	mov	r0, r5
 8018d3c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018d40:	f7ff fe7c 	bl	8018a3c <scalbnf>
 8018d44:	1c63      	adds	r3, r4, #1
 8018d46:	aa44      	add	r2, sp, #272	@ 0x110
 8018d48:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8018e48 <__kernel_rem_pio2f+0x2f4>
 8018d4c:	0099      	lsls	r1, r3, #2
 8018d4e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8018d52:	4623      	mov	r3, r4
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	f280 80a9 	bge.w	8018eac <__kernel_rem_pio2f+0x358>
 8018d5a:	4623      	mov	r3, r4
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	f2c0 80c7 	blt.w	8018ef0 <__kernel_rem_pio2f+0x39c>
 8018d62:	aa44      	add	r2, sp, #272	@ 0x110
 8018d64:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8018d68:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8018e40 <__kernel_rem_pio2f+0x2ec>
 8018d6c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8018e4c <__kernel_rem_pio2f+0x2f8>
 8018d70:	2000      	movs	r0, #0
 8018d72:	1ae2      	subs	r2, r4, r3
 8018d74:	e0b1      	b.n	8018eda <__kernel_rem_pio2f+0x386>
 8018d76:	2602      	movs	r6, #2
 8018d78:	e78f      	b.n	8018c9a <__kernel_rem_pio2f+0x146>
 8018d7a:	f852 1b04 	ldr.w	r1, [r2], #4
 8018d7e:	b948      	cbnz	r0, 8018d94 <__kernel_rem_pio2f+0x240>
 8018d80:	b121      	cbz	r1, 8018d8c <__kernel_rem_pio2f+0x238>
 8018d82:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8018d86:	f842 1c04 	str.w	r1, [r2, #-4]
 8018d8a:	2101      	movs	r1, #1
 8018d8c:	f10e 0e01 	add.w	lr, lr, #1
 8018d90:	4608      	mov	r0, r1
 8018d92:	e787      	b.n	8018ca4 <__kernel_rem_pio2f+0x150>
 8018d94:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8018d98:	e7f5      	b.n	8018d86 <__kernel_rem_pio2f+0x232>
 8018d9a:	f104 3cff 	add.w	ip, r4, #4294967295
 8018d9e:	aa08      	add	r2, sp, #32
 8018da0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8018da4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8018da8:	a908      	add	r1, sp, #32
 8018daa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8018dae:	e781      	b.n	8018cb4 <__kernel_rem_pio2f+0x160>
 8018db0:	f104 3cff 	add.w	ip, r4, #4294967295
 8018db4:	aa08      	add	r2, sp, #32
 8018db6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8018dba:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018dbe:	e7f3      	b.n	8018da8 <__kernel_rem_pio2f+0x254>
 8018dc0:	a908      	add	r1, sp, #32
 8018dc2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8018dc6:	3801      	subs	r0, #1
 8018dc8:	430a      	orrs	r2, r1
 8018dca:	e7ab      	b.n	8018d24 <__kernel_rem_pio2f+0x1d0>
 8018dcc:	3201      	adds	r2, #1
 8018dce:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8018dd2:	2e00      	cmp	r6, #0
 8018dd4:	d0fa      	beq.n	8018dcc <__kernel_rem_pio2f+0x278>
 8018dd6:	9905      	ldr	r1, [sp, #20]
 8018dd8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8018ddc:	eb0d 0001 	add.w	r0, sp, r1
 8018de0:	18e6      	adds	r6, r4, r3
 8018de2:	a91c      	add	r1, sp, #112	@ 0x70
 8018de4:	f104 0c01 	add.w	ip, r4, #1
 8018de8:	384c      	subs	r0, #76	@ 0x4c
 8018dea:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8018dee:	4422      	add	r2, r4
 8018df0:	4562      	cmp	r2, ip
 8018df2:	da04      	bge.n	8018dfe <__kernel_rem_pio2f+0x2aa>
 8018df4:	4614      	mov	r4, r2
 8018df6:	e710      	b.n	8018c1a <__kernel_rem_pio2f+0xc6>
 8018df8:	9804      	ldr	r0, [sp, #16]
 8018dfa:	2201      	movs	r2, #1
 8018dfc:	e7e7      	b.n	8018dce <__kernel_rem_pio2f+0x27a>
 8018dfe:	9903      	ldr	r1, [sp, #12]
 8018e00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018e04:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8018e08:	9105      	str	r1, [sp, #20]
 8018e0a:	ee07 1a90 	vmov	s15, r1
 8018e0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e12:	2400      	movs	r4, #0
 8018e14:	ece6 7a01 	vstmia	r6!, {s15}
 8018e18:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8018e4c <__kernel_rem_pio2f+0x2f8>
 8018e1c:	46b1      	mov	r9, r6
 8018e1e:	455c      	cmp	r4, fp
 8018e20:	dd04      	ble.n	8018e2c <__kernel_rem_pio2f+0x2d8>
 8018e22:	ece0 7a01 	vstmia	r0!, {s15}
 8018e26:	f10c 0c01 	add.w	ip, ip, #1
 8018e2a:	e7e1      	b.n	8018df0 <__kernel_rem_pio2f+0x29c>
 8018e2c:	ecfe 6a01 	vldmia	lr!, {s13}
 8018e30:	ed39 7a01 	vldmdb	r9!, {s14}
 8018e34:	3401      	adds	r4, #1
 8018e36:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018e3a:	e7f0      	b.n	8018e1e <__kernel_rem_pio2f+0x2ca>
 8018e3c:	0802084c 	.word	0x0802084c
 8018e40:	08020820 	.word	0x08020820
 8018e44:	43800000 	.word	0x43800000
 8018e48:	3b800000 	.word	0x3b800000
 8018e4c:	00000000 	.word	0x00000000
 8018e50:	9b02      	ldr	r3, [sp, #8]
 8018e52:	eeb0 0a48 	vmov.f32	s0, s16
 8018e56:	eba3 0008 	sub.w	r0, r3, r8
 8018e5a:	f7ff fdef 	bl	8018a3c <scalbnf>
 8018e5e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8018e44 <__kernel_rem_pio2f+0x2f0>
 8018e62:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8018e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018e6a:	db19      	blt.n	8018ea0 <__kernel_rem_pio2f+0x34c>
 8018e6c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8018e48 <__kernel_rem_pio2f+0x2f4>
 8018e70:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018e74:	aa08      	add	r2, sp, #32
 8018e76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e7a:	3508      	adds	r5, #8
 8018e7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018e80:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018e84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018e88:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018e8c:	ee10 3a10 	vmov	r3, s0
 8018e90:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018e94:	ee17 3a90 	vmov	r3, s15
 8018e98:	3401      	adds	r4, #1
 8018e9a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8018e9e:	e74c      	b.n	8018d3a <__kernel_rem_pio2f+0x1e6>
 8018ea0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8018ea4:	aa08      	add	r2, sp, #32
 8018ea6:	ee10 3a10 	vmov	r3, s0
 8018eaa:	e7f6      	b.n	8018e9a <__kernel_rem_pio2f+0x346>
 8018eac:	a808      	add	r0, sp, #32
 8018eae:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8018eb2:	9001      	str	r0, [sp, #4]
 8018eb4:	ee07 0a90 	vmov	s15, r0
 8018eb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018ebc:	3b01      	subs	r3, #1
 8018ebe:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018ec2:	ee20 0a07 	vmul.f32	s0, s0, s14
 8018ec6:	ed62 7a01 	vstmdb	r2!, {s15}
 8018eca:	e743      	b.n	8018d54 <__kernel_rem_pio2f+0x200>
 8018ecc:	ecfc 6a01 	vldmia	ip!, {s13}
 8018ed0:	ecb5 7a01 	vldmia	r5!, {s14}
 8018ed4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8018ed8:	3001      	adds	r0, #1
 8018eda:	4550      	cmp	r0, sl
 8018edc:	dc01      	bgt.n	8018ee2 <__kernel_rem_pio2f+0x38e>
 8018ede:	4290      	cmp	r0, r2
 8018ee0:	ddf4      	ble.n	8018ecc <__kernel_rem_pio2f+0x378>
 8018ee2:	a858      	add	r0, sp, #352	@ 0x160
 8018ee4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8018ee8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8018eec:	3b01      	subs	r3, #1
 8018eee:	e735      	b.n	8018d5c <__kernel_rem_pio2f+0x208>
 8018ef0:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8018ef2:	2b02      	cmp	r3, #2
 8018ef4:	dc09      	bgt.n	8018f0a <__kernel_rem_pio2f+0x3b6>
 8018ef6:	2b00      	cmp	r3, #0
 8018ef8:	dc27      	bgt.n	8018f4a <__kernel_rem_pio2f+0x3f6>
 8018efa:	d040      	beq.n	8018f7e <__kernel_rem_pio2f+0x42a>
 8018efc:	f009 0007 	and.w	r0, r9, #7
 8018f00:	b059      	add	sp, #356	@ 0x164
 8018f02:	ecbd 8b04 	vpop	{d8-d9}
 8018f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f0a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8018f0c:	2b03      	cmp	r3, #3
 8018f0e:	d1f5      	bne.n	8018efc <__kernel_rem_pio2f+0x3a8>
 8018f10:	aa30      	add	r2, sp, #192	@ 0xc0
 8018f12:	1f0b      	subs	r3, r1, #4
 8018f14:	4413      	add	r3, r2
 8018f16:	461a      	mov	r2, r3
 8018f18:	4620      	mov	r0, r4
 8018f1a:	2800      	cmp	r0, #0
 8018f1c:	dc50      	bgt.n	8018fc0 <__kernel_rem_pio2f+0x46c>
 8018f1e:	4622      	mov	r2, r4
 8018f20:	2a01      	cmp	r2, #1
 8018f22:	dc5d      	bgt.n	8018fe0 <__kernel_rem_pio2f+0x48c>
 8018f24:	ab30      	add	r3, sp, #192	@ 0xc0
 8018f26:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8018e4c <__kernel_rem_pio2f+0x2f8>
 8018f2a:	440b      	add	r3, r1
 8018f2c:	2c01      	cmp	r4, #1
 8018f2e:	dc67      	bgt.n	8019000 <__kernel_rem_pio2f+0x4ac>
 8018f30:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8018f34:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8018f38:	2e00      	cmp	r6, #0
 8018f3a:	d167      	bne.n	801900c <__kernel_rem_pio2f+0x4b8>
 8018f3c:	edc7 6a00 	vstr	s13, [r7]
 8018f40:	ed87 7a01 	vstr	s14, [r7, #4]
 8018f44:	edc7 7a02 	vstr	s15, [r7, #8]
 8018f48:	e7d8      	b.n	8018efc <__kernel_rem_pio2f+0x3a8>
 8018f4a:	ab30      	add	r3, sp, #192	@ 0xc0
 8018f4c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8018e4c <__kernel_rem_pio2f+0x2f8>
 8018f50:	440b      	add	r3, r1
 8018f52:	4622      	mov	r2, r4
 8018f54:	2a00      	cmp	r2, #0
 8018f56:	da24      	bge.n	8018fa2 <__kernel_rem_pio2f+0x44e>
 8018f58:	b34e      	cbz	r6, 8018fae <__kernel_rem_pio2f+0x45a>
 8018f5a:	eef1 7a47 	vneg.f32	s15, s14
 8018f5e:	edc7 7a00 	vstr	s15, [r7]
 8018f62:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8018f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018f6a:	aa31      	add	r2, sp, #196	@ 0xc4
 8018f6c:	2301      	movs	r3, #1
 8018f6e:	429c      	cmp	r4, r3
 8018f70:	da20      	bge.n	8018fb4 <__kernel_rem_pio2f+0x460>
 8018f72:	b10e      	cbz	r6, 8018f78 <__kernel_rem_pio2f+0x424>
 8018f74:	eef1 7a67 	vneg.f32	s15, s15
 8018f78:	edc7 7a01 	vstr	s15, [r7, #4]
 8018f7c:	e7be      	b.n	8018efc <__kernel_rem_pio2f+0x3a8>
 8018f7e:	ab30      	add	r3, sp, #192	@ 0xc0
 8018f80:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8018e4c <__kernel_rem_pio2f+0x2f8>
 8018f84:	440b      	add	r3, r1
 8018f86:	2c00      	cmp	r4, #0
 8018f88:	da05      	bge.n	8018f96 <__kernel_rem_pio2f+0x442>
 8018f8a:	b10e      	cbz	r6, 8018f90 <__kernel_rem_pio2f+0x43c>
 8018f8c:	eef1 7a67 	vneg.f32	s15, s15
 8018f90:	edc7 7a00 	vstr	s15, [r7]
 8018f94:	e7b2      	b.n	8018efc <__kernel_rem_pio2f+0x3a8>
 8018f96:	ed33 7a01 	vldmdb	r3!, {s14}
 8018f9a:	3c01      	subs	r4, #1
 8018f9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018fa0:	e7f1      	b.n	8018f86 <__kernel_rem_pio2f+0x432>
 8018fa2:	ed73 7a01 	vldmdb	r3!, {s15}
 8018fa6:	3a01      	subs	r2, #1
 8018fa8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018fac:	e7d2      	b.n	8018f54 <__kernel_rem_pio2f+0x400>
 8018fae:	eef0 7a47 	vmov.f32	s15, s14
 8018fb2:	e7d4      	b.n	8018f5e <__kernel_rem_pio2f+0x40a>
 8018fb4:	ecb2 7a01 	vldmia	r2!, {s14}
 8018fb8:	3301      	adds	r3, #1
 8018fba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8018fbe:	e7d6      	b.n	8018f6e <__kernel_rem_pio2f+0x41a>
 8018fc0:	ed72 7a01 	vldmdb	r2!, {s15}
 8018fc4:	edd2 6a01 	vldr	s13, [r2, #4]
 8018fc8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018fcc:	3801      	subs	r0, #1
 8018fce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018fd2:	ed82 7a00 	vstr	s14, [r2]
 8018fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018fda:	edc2 7a01 	vstr	s15, [r2, #4]
 8018fde:	e79c      	b.n	8018f1a <__kernel_rem_pio2f+0x3c6>
 8018fe0:	ed73 7a01 	vldmdb	r3!, {s15}
 8018fe4:	edd3 6a01 	vldr	s13, [r3, #4]
 8018fe8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018fec:	3a01      	subs	r2, #1
 8018fee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018ff2:	ed83 7a00 	vstr	s14, [r3]
 8018ff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018ffa:	edc3 7a01 	vstr	s15, [r3, #4]
 8018ffe:	e78f      	b.n	8018f20 <__kernel_rem_pio2f+0x3cc>
 8019000:	ed33 7a01 	vldmdb	r3!, {s14}
 8019004:	3c01      	subs	r4, #1
 8019006:	ee77 7a87 	vadd.f32	s15, s15, s14
 801900a:	e78f      	b.n	8018f2c <__kernel_rem_pio2f+0x3d8>
 801900c:	eef1 6a66 	vneg.f32	s13, s13
 8019010:	eeb1 7a47 	vneg.f32	s14, s14
 8019014:	edc7 6a00 	vstr	s13, [r7]
 8019018:	ed87 7a01 	vstr	s14, [r7, #4]
 801901c:	eef1 7a67 	vneg.f32	s15, s15
 8019020:	e790      	b.n	8018f44 <__kernel_rem_pio2f+0x3f0>
 8019022:	bf00      	nop

08019024 <floorf>:
 8019024:	ee10 3a10 	vmov	r3, s0
 8019028:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801902c:	3a7f      	subs	r2, #127	@ 0x7f
 801902e:	2a16      	cmp	r2, #22
 8019030:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019034:	dc2b      	bgt.n	801908e <floorf+0x6a>
 8019036:	2a00      	cmp	r2, #0
 8019038:	da12      	bge.n	8019060 <floorf+0x3c>
 801903a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80190a0 <floorf+0x7c>
 801903e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019042:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801904a:	dd06      	ble.n	801905a <floorf+0x36>
 801904c:	2b00      	cmp	r3, #0
 801904e:	da24      	bge.n	801909a <floorf+0x76>
 8019050:	2900      	cmp	r1, #0
 8019052:	4b14      	ldr	r3, [pc, #80]	@ (80190a4 <floorf+0x80>)
 8019054:	bf08      	it	eq
 8019056:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801905a:	ee00 3a10 	vmov	s0, r3
 801905e:	4770      	bx	lr
 8019060:	4911      	ldr	r1, [pc, #68]	@ (80190a8 <floorf+0x84>)
 8019062:	4111      	asrs	r1, r2
 8019064:	420b      	tst	r3, r1
 8019066:	d0fa      	beq.n	801905e <floorf+0x3a>
 8019068:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80190a0 <floorf+0x7c>
 801906c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019070:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019078:	ddef      	ble.n	801905a <floorf+0x36>
 801907a:	2b00      	cmp	r3, #0
 801907c:	bfbe      	ittt	lt
 801907e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8019082:	fa40 f202 	asrlt.w	r2, r0, r2
 8019086:	189b      	addlt	r3, r3, r2
 8019088:	ea23 0301 	bic.w	r3, r3, r1
 801908c:	e7e5      	b.n	801905a <floorf+0x36>
 801908e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019092:	d3e4      	bcc.n	801905e <floorf+0x3a>
 8019094:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019098:	4770      	bx	lr
 801909a:	2300      	movs	r3, #0
 801909c:	e7dd      	b.n	801905a <floorf+0x36>
 801909e:	bf00      	nop
 80190a0:	7149f2ca 	.word	0x7149f2ca
 80190a4:	bf800000 	.word	0xbf800000
 80190a8:	007fffff 	.word	0x007fffff

080190ac <__cvt>:
 80190ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80190b0:	ec57 6b10 	vmov	r6, r7, d0
 80190b4:	2f00      	cmp	r7, #0
 80190b6:	460c      	mov	r4, r1
 80190b8:	4619      	mov	r1, r3
 80190ba:	463b      	mov	r3, r7
 80190bc:	bfbb      	ittet	lt
 80190be:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80190c2:	461f      	movlt	r7, r3
 80190c4:	2300      	movge	r3, #0
 80190c6:	232d      	movlt	r3, #45	@ 0x2d
 80190c8:	700b      	strb	r3, [r1, #0]
 80190ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80190cc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80190d0:	4691      	mov	r9, r2
 80190d2:	f023 0820 	bic.w	r8, r3, #32
 80190d6:	bfbc      	itt	lt
 80190d8:	4632      	movlt	r2, r6
 80190da:	4616      	movlt	r6, r2
 80190dc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80190e0:	d005      	beq.n	80190ee <__cvt+0x42>
 80190e2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80190e6:	d100      	bne.n	80190ea <__cvt+0x3e>
 80190e8:	3401      	adds	r4, #1
 80190ea:	2102      	movs	r1, #2
 80190ec:	e000      	b.n	80190f0 <__cvt+0x44>
 80190ee:	2103      	movs	r1, #3
 80190f0:	ab03      	add	r3, sp, #12
 80190f2:	9301      	str	r3, [sp, #4]
 80190f4:	ab02      	add	r3, sp, #8
 80190f6:	9300      	str	r3, [sp, #0]
 80190f8:	ec47 6b10 	vmov	d0, r6, r7
 80190fc:	4653      	mov	r3, sl
 80190fe:	4622      	mov	r2, r4
 8019100:	f001 fb92 	bl	801a828 <_dtoa_r>
 8019104:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8019108:	4605      	mov	r5, r0
 801910a:	d119      	bne.n	8019140 <__cvt+0x94>
 801910c:	f019 0f01 	tst.w	r9, #1
 8019110:	d00e      	beq.n	8019130 <__cvt+0x84>
 8019112:	eb00 0904 	add.w	r9, r0, r4
 8019116:	2200      	movs	r2, #0
 8019118:	2300      	movs	r3, #0
 801911a:	4630      	mov	r0, r6
 801911c:	4639      	mov	r1, r7
 801911e:	f7e7 fcd3 	bl	8000ac8 <__aeabi_dcmpeq>
 8019122:	b108      	cbz	r0, 8019128 <__cvt+0x7c>
 8019124:	f8cd 900c 	str.w	r9, [sp, #12]
 8019128:	2230      	movs	r2, #48	@ 0x30
 801912a:	9b03      	ldr	r3, [sp, #12]
 801912c:	454b      	cmp	r3, r9
 801912e:	d31e      	bcc.n	801916e <__cvt+0xc2>
 8019130:	9b03      	ldr	r3, [sp, #12]
 8019132:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019134:	1b5b      	subs	r3, r3, r5
 8019136:	4628      	mov	r0, r5
 8019138:	6013      	str	r3, [r2, #0]
 801913a:	b004      	add	sp, #16
 801913c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019140:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019144:	eb00 0904 	add.w	r9, r0, r4
 8019148:	d1e5      	bne.n	8019116 <__cvt+0x6a>
 801914a:	7803      	ldrb	r3, [r0, #0]
 801914c:	2b30      	cmp	r3, #48	@ 0x30
 801914e:	d10a      	bne.n	8019166 <__cvt+0xba>
 8019150:	2200      	movs	r2, #0
 8019152:	2300      	movs	r3, #0
 8019154:	4630      	mov	r0, r6
 8019156:	4639      	mov	r1, r7
 8019158:	f7e7 fcb6 	bl	8000ac8 <__aeabi_dcmpeq>
 801915c:	b918      	cbnz	r0, 8019166 <__cvt+0xba>
 801915e:	f1c4 0401 	rsb	r4, r4, #1
 8019162:	f8ca 4000 	str.w	r4, [sl]
 8019166:	f8da 3000 	ldr.w	r3, [sl]
 801916a:	4499      	add	r9, r3
 801916c:	e7d3      	b.n	8019116 <__cvt+0x6a>
 801916e:	1c59      	adds	r1, r3, #1
 8019170:	9103      	str	r1, [sp, #12]
 8019172:	701a      	strb	r2, [r3, #0]
 8019174:	e7d9      	b.n	801912a <__cvt+0x7e>

08019176 <__exponent>:
 8019176:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019178:	2900      	cmp	r1, #0
 801917a:	bfba      	itte	lt
 801917c:	4249      	neglt	r1, r1
 801917e:	232d      	movlt	r3, #45	@ 0x2d
 8019180:	232b      	movge	r3, #43	@ 0x2b
 8019182:	2909      	cmp	r1, #9
 8019184:	7002      	strb	r2, [r0, #0]
 8019186:	7043      	strb	r3, [r0, #1]
 8019188:	dd29      	ble.n	80191de <__exponent+0x68>
 801918a:	f10d 0307 	add.w	r3, sp, #7
 801918e:	461d      	mov	r5, r3
 8019190:	270a      	movs	r7, #10
 8019192:	461a      	mov	r2, r3
 8019194:	fbb1 f6f7 	udiv	r6, r1, r7
 8019198:	fb07 1416 	mls	r4, r7, r6, r1
 801919c:	3430      	adds	r4, #48	@ 0x30
 801919e:	f802 4c01 	strb.w	r4, [r2, #-1]
 80191a2:	460c      	mov	r4, r1
 80191a4:	2c63      	cmp	r4, #99	@ 0x63
 80191a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80191aa:	4631      	mov	r1, r6
 80191ac:	dcf1      	bgt.n	8019192 <__exponent+0x1c>
 80191ae:	3130      	adds	r1, #48	@ 0x30
 80191b0:	1e94      	subs	r4, r2, #2
 80191b2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80191b6:	1c41      	adds	r1, r0, #1
 80191b8:	4623      	mov	r3, r4
 80191ba:	42ab      	cmp	r3, r5
 80191bc:	d30a      	bcc.n	80191d4 <__exponent+0x5e>
 80191be:	f10d 0309 	add.w	r3, sp, #9
 80191c2:	1a9b      	subs	r3, r3, r2
 80191c4:	42ac      	cmp	r4, r5
 80191c6:	bf88      	it	hi
 80191c8:	2300      	movhi	r3, #0
 80191ca:	3302      	adds	r3, #2
 80191cc:	4403      	add	r3, r0
 80191ce:	1a18      	subs	r0, r3, r0
 80191d0:	b003      	add	sp, #12
 80191d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80191d4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80191d8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80191dc:	e7ed      	b.n	80191ba <__exponent+0x44>
 80191de:	2330      	movs	r3, #48	@ 0x30
 80191e0:	3130      	adds	r1, #48	@ 0x30
 80191e2:	7083      	strb	r3, [r0, #2]
 80191e4:	70c1      	strb	r1, [r0, #3]
 80191e6:	1d03      	adds	r3, r0, #4
 80191e8:	e7f1      	b.n	80191ce <__exponent+0x58>
	...

080191ec <_printf_float>:
 80191ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80191f0:	b08d      	sub	sp, #52	@ 0x34
 80191f2:	460c      	mov	r4, r1
 80191f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80191f8:	4616      	mov	r6, r2
 80191fa:	461f      	mov	r7, r3
 80191fc:	4605      	mov	r5, r0
 80191fe:	f001 f989 	bl	801a514 <_localeconv_r>
 8019202:	6803      	ldr	r3, [r0, #0]
 8019204:	9304      	str	r3, [sp, #16]
 8019206:	4618      	mov	r0, r3
 8019208:	f7e7 f832 	bl	8000270 <strlen>
 801920c:	2300      	movs	r3, #0
 801920e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019210:	f8d8 3000 	ldr.w	r3, [r8]
 8019214:	9005      	str	r0, [sp, #20]
 8019216:	3307      	adds	r3, #7
 8019218:	f023 0307 	bic.w	r3, r3, #7
 801921c:	f103 0208 	add.w	r2, r3, #8
 8019220:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019224:	f8d4 b000 	ldr.w	fp, [r4]
 8019228:	f8c8 2000 	str.w	r2, [r8]
 801922c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019230:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8019234:	9307      	str	r3, [sp, #28]
 8019236:	f8cd 8018 	str.w	r8, [sp, #24]
 801923a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801923e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019242:	4b9c      	ldr	r3, [pc, #624]	@ (80194b4 <_printf_float+0x2c8>)
 8019244:	f04f 32ff 	mov.w	r2, #4294967295
 8019248:	f7e7 fc70 	bl	8000b2c <__aeabi_dcmpun>
 801924c:	bb70      	cbnz	r0, 80192ac <_printf_float+0xc0>
 801924e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019252:	4b98      	ldr	r3, [pc, #608]	@ (80194b4 <_printf_float+0x2c8>)
 8019254:	f04f 32ff 	mov.w	r2, #4294967295
 8019258:	f7e7 fc4a 	bl	8000af0 <__aeabi_dcmple>
 801925c:	bb30      	cbnz	r0, 80192ac <_printf_float+0xc0>
 801925e:	2200      	movs	r2, #0
 8019260:	2300      	movs	r3, #0
 8019262:	4640      	mov	r0, r8
 8019264:	4649      	mov	r1, r9
 8019266:	f7e7 fc39 	bl	8000adc <__aeabi_dcmplt>
 801926a:	b110      	cbz	r0, 8019272 <_printf_float+0x86>
 801926c:	232d      	movs	r3, #45	@ 0x2d
 801926e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019272:	4a91      	ldr	r2, [pc, #580]	@ (80194b8 <_printf_float+0x2cc>)
 8019274:	4b91      	ldr	r3, [pc, #580]	@ (80194bc <_printf_float+0x2d0>)
 8019276:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801927a:	bf8c      	ite	hi
 801927c:	4690      	movhi	r8, r2
 801927e:	4698      	movls	r8, r3
 8019280:	2303      	movs	r3, #3
 8019282:	6123      	str	r3, [r4, #16]
 8019284:	f02b 0304 	bic.w	r3, fp, #4
 8019288:	6023      	str	r3, [r4, #0]
 801928a:	f04f 0900 	mov.w	r9, #0
 801928e:	9700      	str	r7, [sp, #0]
 8019290:	4633      	mov	r3, r6
 8019292:	aa0b      	add	r2, sp, #44	@ 0x2c
 8019294:	4621      	mov	r1, r4
 8019296:	4628      	mov	r0, r5
 8019298:	f000 fb1e 	bl	80198d8 <_printf_common>
 801929c:	3001      	adds	r0, #1
 801929e:	f040 808d 	bne.w	80193bc <_printf_float+0x1d0>
 80192a2:	f04f 30ff 	mov.w	r0, #4294967295
 80192a6:	b00d      	add	sp, #52	@ 0x34
 80192a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80192ac:	4642      	mov	r2, r8
 80192ae:	464b      	mov	r3, r9
 80192b0:	4640      	mov	r0, r8
 80192b2:	4649      	mov	r1, r9
 80192b4:	f7e7 fc3a 	bl	8000b2c <__aeabi_dcmpun>
 80192b8:	b140      	cbz	r0, 80192cc <_printf_float+0xe0>
 80192ba:	464b      	mov	r3, r9
 80192bc:	2b00      	cmp	r3, #0
 80192be:	bfbc      	itt	lt
 80192c0:	232d      	movlt	r3, #45	@ 0x2d
 80192c2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80192c6:	4a7e      	ldr	r2, [pc, #504]	@ (80194c0 <_printf_float+0x2d4>)
 80192c8:	4b7e      	ldr	r3, [pc, #504]	@ (80194c4 <_printf_float+0x2d8>)
 80192ca:	e7d4      	b.n	8019276 <_printf_float+0x8a>
 80192cc:	6863      	ldr	r3, [r4, #4]
 80192ce:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80192d2:	9206      	str	r2, [sp, #24]
 80192d4:	1c5a      	adds	r2, r3, #1
 80192d6:	d13b      	bne.n	8019350 <_printf_float+0x164>
 80192d8:	2306      	movs	r3, #6
 80192da:	6063      	str	r3, [r4, #4]
 80192dc:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80192e0:	2300      	movs	r3, #0
 80192e2:	6022      	str	r2, [r4, #0]
 80192e4:	9303      	str	r3, [sp, #12]
 80192e6:	ab0a      	add	r3, sp, #40	@ 0x28
 80192e8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80192ec:	ab09      	add	r3, sp, #36	@ 0x24
 80192ee:	9300      	str	r3, [sp, #0]
 80192f0:	6861      	ldr	r1, [r4, #4]
 80192f2:	ec49 8b10 	vmov	d0, r8, r9
 80192f6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80192fa:	4628      	mov	r0, r5
 80192fc:	f7ff fed6 	bl	80190ac <__cvt>
 8019300:	9b06      	ldr	r3, [sp, #24]
 8019302:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019304:	2b47      	cmp	r3, #71	@ 0x47
 8019306:	4680      	mov	r8, r0
 8019308:	d129      	bne.n	801935e <_printf_float+0x172>
 801930a:	1cc8      	adds	r0, r1, #3
 801930c:	db02      	blt.n	8019314 <_printf_float+0x128>
 801930e:	6863      	ldr	r3, [r4, #4]
 8019310:	4299      	cmp	r1, r3
 8019312:	dd41      	ble.n	8019398 <_printf_float+0x1ac>
 8019314:	f1aa 0a02 	sub.w	sl, sl, #2
 8019318:	fa5f fa8a 	uxtb.w	sl, sl
 801931c:	3901      	subs	r1, #1
 801931e:	4652      	mov	r2, sl
 8019320:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019324:	9109      	str	r1, [sp, #36]	@ 0x24
 8019326:	f7ff ff26 	bl	8019176 <__exponent>
 801932a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801932c:	1813      	adds	r3, r2, r0
 801932e:	2a01      	cmp	r2, #1
 8019330:	4681      	mov	r9, r0
 8019332:	6123      	str	r3, [r4, #16]
 8019334:	dc02      	bgt.n	801933c <_printf_float+0x150>
 8019336:	6822      	ldr	r2, [r4, #0]
 8019338:	07d2      	lsls	r2, r2, #31
 801933a:	d501      	bpl.n	8019340 <_printf_float+0x154>
 801933c:	3301      	adds	r3, #1
 801933e:	6123      	str	r3, [r4, #16]
 8019340:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019344:	2b00      	cmp	r3, #0
 8019346:	d0a2      	beq.n	801928e <_printf_float+0xa2>
 8019348:	232d      	movs	r3, #45	@ 0x2d
 801934a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801934e:	e79e      	b.n	801928e <_printf_float+0xa2>
 8019350:	9a06      	ldr	r2, [sp, #24]
 8019352:	2a47      	cmp	r2, #71	@ 0x47
 8019354:	d1c2      	bne.n	80192dc <_printf_float+0xf0>
 8019356:	2b00      	cmp	r3, #0
 8019358:	d1c0      	bne.n	80192dc <_printf_float+0xf0>
 801935a:	2301      	movs	r3, #1
 801935c:	e7bd      	b.n	80192da <_printf_float+0xee>
 801935e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8019362:	d9db      	bls.n	801931c <_printf_float+0x130>
 8019364:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8019368:	d118      	bne.n	801939c <_printf_float+0x1b0>
 801936a:	2900      	cmp	r1, #0
 801936c:	6863      	ldr	r3, [r4, #4]
 801936e:	dd0b      	ble.n	8019388 <_printf_float+0x19c>
 8019370:	6121      	str	r1, [r4, #16]
 8019372:	b913      	cbnz	r3, 801937a <_printf_float+0x18e>
 8019374:	6822      	ldr	r2, [r4, #0]
 8019376:	07d0      	lsls	r0, r2, #31
 8019378:	d502      	bpl.n	8019380 <_printf_float+0x194>
 801937a:	3301      	adds	r3, #1
 801937c:	440b      	add	r3, r1
 801937e:	6123      	str	r3, [r4, #16]
 8019380:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019382:	f04f 0900 	mov.w	r9, #0
 8019386:	e7db      	b.n	8019340 <_printf_float+0x154>
 8019388:	b913      	cbnz	r3, 8019390 <_printf_float+0x1a4>
 801938a:	6822      	ldr	r2, [r4, #0]
 801938c:	07d2      	lsls	r2, r2, #31
 801938e:	d501      	bpl.n	8019394 <_printf_float+0x1a8>
 8019390:	3302      	adds	r3, #2
 8019392:	e7f4      	b.n	801937e <_printf_float+0x192>
 8019394:	2301      	movs	r3, #1
 8019396:	e7f2      	b.n	801937e <_printf_float+0x192>
 8019398:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801939c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801939e:	4299      	cmp	r1, r3
 80193a0:	db05      	blt.n	80193ae <_printf_float+0x1c2>
 80193a2:	6823      	ldr	r3, [r4, #0]
 80193a4:	6121      	str	r1, [r4, #16]
 80193a6:	07d8      	lsls	r0, r3, #31
 80193a8:	d5ea      	bpl.n	8019380 <_printf_float+0x194>
 80193aa:	1c4b      	adds	r3, r1, #1
 80193ac:	e7e7      	b.n	801937e <_printf_float+0x192>
 80193ae:	2900      	cmp	r1, #0
 80193b0:	bfd4      	ite	le
 80193b2:	f1c1 0202 	rsble	r2, r1, #2
 80193b6:	2201      	movgt	r2, #1
 80193b8:	4413      	add	r3, r2
 80193ba:	e7e0      	b.n	801937e <_printf_float+0x192>
 80193bc:	6823      	ldr	r3, [r4, #0]
 80193be:	055a      	lsls	r2, r3, #21
 80193c0:	d407      	bmi.n	80193d2 <_printf_float+0x1e6>
 80193c2:	6923      	ldr	r3, [r4, #16]
 80193c4:	4642      	mov	r2, r8
 80193c6:	4631      	mov	r1, r6
 80193c8:	4628      	mov	r0, r5
 80193ca:	47b8      	blx	r7
 80193cc:	3001      	adds	r0, #1
 80193ce:	d12b      	bne.n	8019428 <_printf_float+0x23c>
 80193d0:	e767      	b.n	80192a2 <_printf_float+0xb6>
 80193d2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80193d6:	f240 80dd 	bls.w	8019594 <_printf_float+0x3a8>
 80193da:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80193de:	2200      	movs	r2, #0
 80193e0:	2300      	movs	r3, #0
 80193e2:	f7e7 fb71 	bl	8000ac8 <__aeabi_dcmpeq>
 80193e6:	2800      	cmp	r0, #0
 80193e8:	d033      	beq.n	8019452 <_printf_float+0x266>
 80193ea:	4a37      	ldr	r2, [pc, #220]	@ (80194c8 <_printf_float+0x2dc>)
 80193ec:	2301      	movs	r3, #1
 80193ee:	4631      	mov	r1, r6
 80193f0:	4628      	mov	r0, r5
 80193f2:	47b8      	blx	r7
 80193f4:	3001      	adds	r0, #1
 80193f6:	f43f af54 	beq.w	80192a2 <_printf_float+0xb6>
 80193fa:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80193fe:	4543      	cmp	r3, r8
 8019400:	db02      	blt.n	8019408 <_printf_float+0x21c>
 8019402:	6823      	ldr	r3, [r4, #0]
 8019404:	07d8      	lsls	r0, r3, #31
 8019406:	d50f      	bpl.n	8019428 <_printf_float+0x23c>
 8019408:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801940c:	4631      	mov	r1, r6
 801940e:	4628      	mov	r0, r5
 8019410:	47b8      	blx	r7
 8019412:	3001      	adds	r0, #1
 8019414:	f43f af45 	beq.w	80192a2 <_printf_float+0xb6>
 8019418:	f04f 0900 	mov.w	r9, #0
 801941c:	f108 38ff 	add.w	r8, r8, #4294967295
 8019420:	f104 0a1a 	add.w	sl, r4, #26
 8019424:	45c8      	cmp	r8, r9
 8019426:	dc09      	bgt.n	801943c <_printf_float+0x250>
 8019428:	6823      	ldr	r3, [r4, #0]
 801942a:	079b      	lsls	r3, r3, #30
 801942c:	f100 8103 	bmi.w	8019636 <_printf_float+0x44a>
 8019430:	68e0      	ldr	r0, [r4, #12]
 8019432:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019434:	4298      	cmp	r0, r3
 8019436:	bfb8      	it	lt
 8019438:	4618      	movlt	r0, r3
 801943a:	e734      	b.n	80192a6 <_printf_float+0xba>
 801943c:	2301      	movs	r3, #1
 801943e:	4652      	mov	r2, sl
 8019440:	4631      	mov	r1, r6
 8019442:	4628      	mov	r0, r5
 8019444:	47b8      	blx	r7
 8019446:	3001      	adds	r0, #1
 8019448:	f43f af2b 	beq.w	80192a2 <_printf_float+0xb6>
 801944c:	f109 0901 	add.w	r9, r9, #1
 8019450:	e7e8      	b.n	8019424 <_printf_float+0x238>
 8019452:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019454:	2b00      	cmp	r3, #0
 8019456:	dc39      	bgt.n	80194cc <_printf_float+0x2e0>
 8019458:	4a1b      	ldr	r2, [pc, #108]	@ (80194c8 <_printf_float+0x2dc>)
 801945a:	2301      	movs	r3, #1
 801945c:	4631      	mov	r1, r6
 801945e:	4628      	mov	r0, r5
 8019460:	47b8      	blx	r7
 8019462:	3001      	adds	r0, #1
 8019464:	f43f af1d 	beq.w	80192a2 <_printf_float+0xb6>
 8019468:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801946c:	ea59 0303 	orrs.w	r3, r9, r3
 8019470:	d102      	bne.n	8019478 <_printf_float+0x28c>
 8019472:	6823      	ldr	r3, [r4, #0]
 8019474:	07d9      	lsls	r1, r3, #31
 8019476:	d5d7      	bpl.n	8019428 <_printf_float+0x23c>
 8019478:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801947c:	4631      	mov	r1, r6
 801947e:	4628      	mov	r0, r5
 8019480:	47b8      	blx	r7
 8019482:	3001      	adds	r0, #1
 8019484:	f43f af0d 	beq.w	80192a2 <_printf_float+0xb6>
 8019488:	f04f 0a00 	mov.w	sl, #0
 801948c:	f104 0b1a 	add.w	fp, r4, #26
 8019490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019492:	425b      	negs	r3, r3
 8019494:	4553      	cmp	r3, sl
 8019496:	dc01      	bgt.n	801949c <_printf_float+0x2b0>
 8019498:	464b      	mov	r3, r9
 801949a:	e793      	b.n	80193c4 <_printf_float+0x1d8>
 801949c:	2301      	movs	r3, #1
 801949e:	465a      	mov	r2, fp
 80194a0:	4631      	mov	r1, r6
 80194a2:	4628      	mov	r0, r5
 80194a4:	47b8      	blx	r7
 80194a6:	3001      	adds	r0, #1
 80194a8:	f43f aefb 	beq.w	80192a2 <_printf_float+0xb6>
 80194ac:	f10a 0a01 	add.w	sl, sl, #1
 80194b0:	e7ee      	b.n	8019490 <_printf_float+0x2a4>
 80194b2:	bf00      	nop
 80194b4:	7fefffff 	.word	0x7fefffff
 80194b8:	0802024c 	.word	0x0802024c
 80194bc:	08020248 	.word	0x08020248
 80194c0:	08020254 	.word	0x08020254
 80194c4:	08020250 	.word	0x08020250
 80194c8:	080203ca 	.word	0x080203ca
 80194cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80194ce:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80194d2:	4553      	cmp	r3, sl
 80194d4:	bfa8      	it	ge
 80194d6:	4653      	movge	r3, sl
 80194d8:	2b00      	cmp	r3, #0
 80194da:	4699      	mov	r9, r3
 80194dc:	dc36      	bgt.n	801954c <_printf_float+0x360>
 80194de:	f04f 0b00 	mov.w	fp, #0
 80194e2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80194e6:	f104 021a 	add.w	r2, r4, #26
 80194ea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80194ec:	9306      	str	r3, [sp, #24]
 80194ee:	eba3 0309 	sub.w	r3, r3, r9
 80194f2:	455b      	cmp	r3, fp
 80194f4:	dc31      	bgt.n	801955a <_printf_float+0x36e>
 80194f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80194f8:	459a      	cmp	sl, r3
 80194fa:	dc3a      	bgt.n	8019572 <_printf_float+0x386>
 80194fc:	6823      	ldr	r3, [r4, #0]
 80194fe:	07da      	lsls	r2, r3, #31
 8019500:	d437      	bmi.n	8019572 <_printf_float+0x386>
 8019502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019504:	ebaa 0903 	sub.w	r9, sl, r3
 8019508:	9b06      	ldr	r3, [sp, #24]
 801950a:	ebaa 0303 	sub.w	r3, sl, r3
 801950e:	4599      	cmp	r9, r3
 8019510:	bfa8      	it	ge
 8019512:	4699      	movge	r9, r3
 8019514:	f1b9 0f00 	cmp.w	r9, #0
 8019518:	dc33      	bgt.n	8019582 <_printf_float+0x396>
 801951a:	f04f 0800 	mov.w	r8, #0
 801951e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019522:	f104 0b1a 	add.w	fp, r4, #26
 8019526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019528:	ebaa 0303 	sub.w	r3, sl, r3
 801952c:	eba3 0309 	sub.w	r3, r3, r9
 8019530:	4543      	cmp	r3, r8
 8019532:	f77f af79 	ble.w	8019428 <_printf_float+0x23c>
 8019536:	2301      	movs	r3, #1
 8019538:	465a      	mov	r2, fp
 801953a:	4631      	mov	r1, r6
 801953c:	4628      	mov	r0, r5
 801953e:	47b8      	blx	r7
 8019540:	3001      	adds	r0, #1
 8019542:	f43f aeae 	beq.w	80192a2 <_printf_float+0xb6>
 8019546:	f108 0801 	add.w	r8, r8, #1
 801954a:	e7ec      	b.n	8019526 <_printf_float+0x33a>
 801954c:	4642      	mov	r2, r8
 801954e:	4631      	mov	r1, r6
 8019550:	4628      	mov	r0, r5
 8019552:	47b8      	blx	r7
 8019554:	3001      	adds	r0, #1
 8019556:	d1c2      	bne.n	80194de <_printf_float+0x2f2>
 8019558:	e6a3      	b.n	80192a2 <_printf_float+0xb6>
 801955a:	2301      	movs	r3, #1
 801955c:	4631      	mov	r1, r6
 801955e:	4628      	mov	r0, r5
 8019560:	9206      	str	r2, [sp, #24]
 8019562:	47b8      	blx	r7
 8019564:	3001      	adds	r0, #1
 8019566:	f43f ae9c 	beq.w	80192a2 <_printf_float+0xb6>
 801956a:	9a06      	ldr	r2, [sp, #24]
 801956c:	f10b 0b01 	add.w	fp, fp, #1
 8019570:	e7bb      	b.n	80194ea <_printf_float+0x2fe>
 8019572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019576:	4631      	mov	r1, r6
 8019578:	4628      	mov	r0, r5
 801957a:	47b8      	blx	r7
 801957c:	3001      	adds	r0, #1
 801957e:	d1c0      	bne.n	8019502 <_printf_float+0x316>
 8019580:	e68f      	b.n	80192a2 <_printf_float+0xb6>
 8019582:	9a06      	ldr	r2, [sp, #24]
 8019584:	464b      	mov	r3, r9
 8019586:	4442      	add	r2, r8
 8019588:	4631      	mov	r1, r6
 801958a:	4628      	mov	r0, r5
 801958c:	47b8      	blx	r7
 801958e:	3001      	adds	r0, #1
 8019590:	d1c3      	bne.n	801951a <_printf_float+0x32e>
 8019592:	e686      	b.n	80192a2 <_printf_float+0xb6>
 8019594:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8019598:	f1ba 0f01 	cmp.w	sl, #1
 801959c:	dc01      	bgt.n	80195a2 <_printf_float+0x3b6>
 801959e:	07db      	lsls	r3, r3, #31
 80195a0:	d536      	bpl.n	8019610 <_printf_float+0x424>
 80195a2:	2301      	movs	r3, #1
 80195a4:	4642      	mov	r2, r8
 80195a6:	4631      	mov	r1, r6
 80195a8:	4628      	mov	r0, r5
 80195aa:	47b8      	blx	r7
 80195ac:	3001      	adds	r0, #1
 80195ae:	f43f ae78 	beq.w	80192a2 <_printf_float+0xb6>
 80195b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80195b6:	4631      	mov	r1, r6
 80195b8:	4628      	mov	r0, r5
 80195ba:	47b8      	blx	r7
 80195bc:	3001      	adds	r0, #1
 80195be:	f43f ae70 	beq.w	80192a2 <_printf_float+0xb6>
 80195c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80195c6:	2200      	movs	r2, #0
 80195c8:	2300      	movs	r3, #0
 80195ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 80195ce:	f7e7 fa7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80195d2:	b9c0      	cbnz	r0, 8019606 <_printf_float+0x41a>
 80195d4:	4653      	mov	r3, sl
 80195d6:	f108 0201 	add.w	r2, r8, #1
 80195da:	4631      	mov	r1, r6
 80195dc:	4628      	mov	r0, r5
 80195de:	47b8      	blx	r7
 80195e0:	3001      	adds	r0, #1
 80195e2:	d10c      	bne.n	80195fe <_printf_float+0x412>
 80195e4:	e65d      	b.n	80192a2 <_printf_float+0xb6>
 80195e6:	2301      	movs	r3, #1
 80195e8:	465a      	mov	r2, fp
 80195ea:	4631      	mov	r1, r6
 80195ec:	4628      	mov	r0, r5
 80195ee:	47b8      	blx	r7
 80195f0:	3001      	adds	r0, #1
 80195f2:	f43f ae56 	beq.w	80192a2 <_printf_float+0xb6>
 80195f6:	f108 0801 	add.w	r8, r8, #1
 80195fa:	45d0      	cmp	r8, sl
 80195fc:	dbf3      	blt.n	80195e6 <_printf_float+0x3fa>
 80195fe:	464b      	mov	r3, r9
 8019600:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019604:	e6df      	b.n	80193c6 <_printf_float+0x1da>
 8019606:	f04f 0800 	mov.w	r8, #0
 801960a:	f104 0b1a 	add.w	fp, r4, #26
 801960e:	e7f4      	b.n	80195fa <_printf_float+0x40e>
 8019610:	2301      	movs	r3, #1
 8019612:	4642      	mov	r2, r8
 8019614:	e7e1      	b.n	80195da <_printf_float+0x3ee>
 8019616:	2301      	movs	r3, #1
 8019618:	464a      	mov	r2, r9
 801961a:	4631      	mov	r1, r6
 801961c:	4628      	mov	r0, r5
 801961e:	47b8      	blx	r7
 8019620:	3001      	adds	r0, #1
 8019622:	f43f ae3e 	beq.w	80192a2 <_printf_float+0xb6>
 8019626:	f108 0801 	add.w	r8, r8, #1
 801962a:	68e3      	ldr	r3, [r4, #12]
 801962c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801962e:	1a5b      	subs	r3, r3, r1
 8019630:	4543      	cmp	r3, r8
 8019632:	dcf0      	bgt.n	8019616 <_printf_float+0x42a>
 8019634:	e6fc      	b.n	8019430 <_printf_float+0x244>
 8019636:	f04f 0800 	mov.w	r8, #0
 801963a:	f104 0919 	add.w	r9, r4, #25
 801963e:	e7f4      	b.n	801962a <_printf_float+0x43e>

08019640 <__sfputc_r>:
 8019640:	6893      	ldr	r3, [r2, #8]
 8019642:	3b01      	subs	r3, #1
 8019644:	2b00      	cmp	r3, #0
 8019646:	b410      	push	{r4}
 8019648:	6093      	str	r3, [r2, #8]
 801964a:	da08      	bge.n	801965e <__sfputc_r+0x1e>
 801964c:	6994      	ldr	r4, [r2, #24]
 801964e:	42a3      	cmp	r3, r4
 8019650:	db01      	blt.n	8019656 <__sfputc_r+0x16>
 8019652:	290a      	cmp	r1, #10
 8019654:	d103      	bne.n	801965e <__sfputc_r+0x1e>
 8019656:	f85d 4b04 	ldr.w	r4, [sp], #4
 801965a:	f000 bea4 	b.w	801a3a6 <__swbuf_r>
 801965e:	6813      	ldr	r3, [r2, #0]
 8019660:	1c58      	adds	r0, r3, #1
 8019662:	6010      	str	r0, [r2, #0]
 8019664:	7019      	strb	r1, [r3, #0]
 8019666:	4608      	mov	r0, r1
 8019668:	f85d 4b04 	ldr.w	r4, [sp], #4
 801966c:	4770      	bx	lr

0801966e <__sfputs_r>:
 801966e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019670:	4606      	mov	r6, r0
 8019672:	460f      	mov	r7, r1
 8019674:	4614      	mov	r4, r2
 8019676:	18d5      	adds	r5, r2, r3
 8019678:	42ac      	cmp	r4, r5
 801967a:	d101      	bne.n	8019680 <__sfputs_r+0x12>
 801967c:	2000      	movs	r0, #0
 801967e:	e007      	b.n	8019690 <__sfputs_r+0x22>
 8019680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019684:	463a      	mov	r2, r7
 8019686:	4630      	mov	r0, r6
 8019688:	f7ff ffda 	bl	8019640 <__sfputc_r>
 801968c:	1c43      	adds	r3, r0, #1
 801968e:	d1f3      	bne.n	8019678 <__sfputs_r+0xa>
 8019690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019694 <_vfiprintf_r>:
 8019694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019698:	460d      	mov	r5, r1
 801969a:	b09d      	sub	sp, #116	@ 0x74
 801969c:	4614      	mov	r4, r2
 801969e:	4698      	mov	r8, r3
 80196a0:	4606      	mov	r6, r0
 80196a2:	b118      	cbz	r0, 80196ac <_vfiprintf_r+0x18>
 80196a4:	6a03      	ldr	r3, [r0, #32]
 80196a6:	b90b      	cbnz	r3, 80196ac <_vfiprintf_r+0x18>
 80196a8:	f000 fd3c 	bl	801a124 <__sinit>
 80196ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80196ae:	07d9      	lsls	r1, r3, #31
 80196b0:	d405      	bmi.n	80196be <_vfiprintf_r+0x2a>
 80196b2:	89ab      	ldrh	r3, [r5, #12]
 80196b4:	059a      	lsls	r2, r3, #22
 80196b6:	d402      	bmi.n	80196be <_vfiprintf_r+0x2a>
 80196b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80196ba:	f000 fffe 	bl	801a6ba <__retarget_lock_acquire_recursive>
 80196be:	89ab      	ldrh	r3, [r5, #12]
 80196c0:	071b      	lsls	r3, r3, #28
 80196c2:	d501      	bpl.n	80196c8 <_vfiprintf_r+0x34>
 80196c4:	692b      	ldr	r3, [r5, #16]
 80196c6:	b99b      	cbnz	r3, 80196f0 <_vfiprintf_r+0x5c>
 80196c8:	4629      	mov	r1, r5
 80196ca:	4630      	mov	r0, r6
 80196cc:	f000 feaa 	bl	801a424 <__swsetup_r>
 80196d0:	b170      	cbz	r0, 80196f0 <_vfiprintf_r+0x5c>
 80196d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80196d4:	07dc      	lsls	r4, r3, #31
 80196d6:	d504      	bpl.n	80196e2 <_vfiprintf_r+0x4e>
 80196d8:	f04f 30ff 	mov.w	r0, #4294967295
 80196dc:	b01d      	add	sp, #116	@ 0x74
 80196de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196e2:	89ab      	ldrh	r3, [r5, #12]
 80196e4:	0598      	lsls	r0, r3, #22
 80196e6:	d4f7      	bmi.n	80196d8 <_vfiprintf_r+0x44>
 80196e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80196ea:	f000 ffe7 	bl	801a6bc <__retarget_lock_release_recursive>
 80196ee:	e7f3      	b.n	80196d8 <_vfiprintf_r+0x44>
 80196f0:	2300      	movs	r3, #0
 80196f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80196f4:	2320      	movs	r3, #32
 80196f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80196fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80196fe:	2330      	movs	r3, #48	@ 0x30
 8019700:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80198b0 <_vfiprintf_r+0x21c>
 8019704:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019708:	f04f 0901 	mov.w	r9, #1
 801970c:	4623      	mov	r3, r4
 801970e:	469a      	mov	sl, r3
 8019710:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019714:	b10a      	cbz	r2, 801971a <_vfiprintf_r+0x86>
 8019716:	2a25      	cmp	r2, #37	@ 0x25
 8019718:	d1f9      	bne.n	801970e <_vfiprintf_r+0x7a>
 801971a:	ebba 0b04 	subs.w	fp, sl, r4
 801971e:	d00b      	beq.n	8019738 <_vfiprintf_r+0xa4>
 8019720:	465b      	mov	r3, fp
 8019722:	4622      	mov	r2, r4
 8019724:	4629      	mov	r1, r5
 8019726:	4630      	mov	r0, r6
 8019728:	f7ff ffa1 	bl	801966e <__sfputs_r>
 801972c:	3001      	adds	r0, #1
 801972e:	f000 80a7 	beq.w	8019880 <_vfiprintf_r+0x1ec>
 8019732:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019734:	445a      	add	r2, fp
 8019736:	9209      	str	r2, [sp, #36]	@ 0x24
 8019738:	f89a 3000 	ldrb.w	r3, [sl]
 801973c:	2b00      	cmp	r3, #0
 801973e:	f000 809f 	beq.w	8019880 <_vfiprintf_r+0x1ec>
 8019742:	2300      	movs	r3, #0
 8019744:	f04f 32ff 	mov.w	r2, #4294967295
 8019748:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801974c:	f10a 0a01 	add.w	sl, sl, #1
 8019750:	9304      	str	r3, [sp, #16]
 8019752:	9307      	str	r3, [sp, #28]
 8019754:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019758:	931a      	str	r3, [sp, #104]	@ 0x68
 801975a:	4654      	mov	r4, sl
 801975c:	2205      	movs	r2, #5
 801975e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019762:	4853      	ldr	r0, [pc, #332]	@ (80198b0 <_vfiprintf_r+0x21c>)
 8019764:	f7e6 fd34 	bl	80001d0 <memchr>
 8019768:	9a04      	ldr	r2, [sp, #16]
 801976a:	b9d8      	cbnz	r0, 80197a4 <_vfiprintf_r+0x110>
 801976c:	06d1      	lsls	r1, r2, #27
 801976e:	bf44      	itt	mi
 8019770:	2320      	movmi	r3, #32
 8019772:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019776:	0713      	lsls	r3, r2, #28
 8019778:	bf44      	itt	mi
 801977a:	232b      	movmi	r3, #43	@ 0x2b
 801977c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019780:	f89a 3000 	ldrb.w	r3, [sl]
 8019784:	2b2a      	cmp	r3, #42	@ 0x2a
 8019786:	d015      	beq.n	80197b4 <_vfiprintf_r+0x120>
 8019788:	9a07      	ldr	r2, [sp, #28]
 801978a:	4654      	mov	r4, sl
 801978c:	2000      	movs	r0, #0
 801978e:	f04f 0c0a 	mov.w	ip, #10
 8019792:	4621      	mov	r1, r4
 8019794:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019798:	3b30      	subs	r3, #48	@ 0x30
 801979a:	2b09      	cmp	r3, #9
 801979c:	d94b      	bls.n	8019836 <_vfiprintf_r+0x1a2>
 801979e:	b1b0      	cbz	r0, 80197ce <_vfiprintf_r+0x13a>
 80197a0:	9207      	str	r2, [sp, #28]
 80197a2:	e014      	b.n	80197ce <_vfiprintf_r+0x13a>
 80197a4:	eba0 0308 	sub.w	r3, r0, r8
 80197a8:	fa09 f303 	lsl.w	r3, r9, r3
 80197ac:	4313      	orrs	r3, r2
 80197ae:	9304      	str	r3, [sp, #16]
 80197b0:	46a2      	mov	sl, r4
 80197b2:	e7d2      	b.n	801975a <_vfiprintf_r+0xc6>
 80197b4:	9b03      	ldr	r3, [sp, #12]
 80197b6:	1d19      	adds	r1, r3, #4
 80197b8:	681b      	ldr	r3, [r3, #0]
 80197ba:	9103      	str	r1, [sp, #12]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	bfbb      	ittet	lt
 80197c0:	425b      	neglt	r3, r3
 80197c2:	f042 0202 	orrlt.w	r2, r2, #2
 80197c6:	9307      	strge	r3, [sp, #28]
 80197c8:	9307      	strlt	r3, [sp, #28]
 80197ca:	bfb8      	it	lt
 80197cc:	9204      	strlt	r2, [sp, #16]
 80197ce:	7823      	ldrb	r3, [r4, #0]
 80197d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80197d2:	d10a      	bne.n	80197ea <_vfiprintf_r+0x156>
 80197d4:	7863      	ldrb	r3, [r4, #1]
 80197d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80197d8:	d132      	bne.n	8019840 <_vfiprintf_r+0x1ac>
 80197da:	9b03      	ldr	r3, [sp, #12]
 80197dc:	1d1a      	adds	r2, r3, #4
 80197de:	681b      	ldr	r3, [r3, #0]
 80197e0:	9203      	str	r2, [sp, #12]
 80197e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80197e6:	3402      	adds	r4, #2
 80197e8:	9305      	str	r3, [sp, #20]
 80197ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80198c0 <_vfiprintf_r+0x22c>
 80197ee:	7821      	ldrb	r1, [r4, #0]
 80197f0:	2203      	movs	r2, #3
 80197f2:	4650      	mov	r0, sl
 80197f4:	f7e6 fcec 	bl	80001d0 <memchr>
 80197f8:	b138      	cbz	r0, 801980a <_vfiprintf_r+0x176>
 80197fa:	9b04      	ldr	r3, [sp, #16]
 80197fc:	eba0 000a 	sub.w	r0, r0, sl
 8019800:	2240      	movs	r2, #64	@ 0x40
 8019802:	4082      	lsls	r2, r0
 8019804:	4313      	orrs	r3, r2
 8019806:	3401      	adds	r4, #1
 8019808:	9304      	str	r3, [sp, #16]
 801980a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801980e:	4829      	ldr	r0, [pc, #164]	@ (80198b4 <_vfiprintf_r+0x220>)
 8019810:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019814:	2206      	movs	r2, #6
 8019816:	f7e6 fcdb 	bl	80001d0 <memchr>
 801981a:	2800      	cmp	r0, #0
 801981c:	d03f      	beq.n	801989e <_vfiprintf_r+0x20a>
 801981e:	4b26      	ldr	r3, [pc, #152]	@ (80198b8 <_vfiprintf_r+0x224>)
 8019820:	bb1b      	cbnz	r3, 801986a <_vfiprintf_r+0x1d6>
 8019822:	9b03      	ldr	r3, [sp, #12]
 8019824:	3307      	adds	r3, #7
 8019826:	f023 0307 	bic.w	r3, r3, #7
 801982a:	3308      	adds	r3, #8
 801982c:	9303      	str	r3, [sp, #12]
 801982e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019830:	443b      	add	r3, r7
 8019832:	9309      	str	r3, [sp, #36]	@ 0x24
 8019834:	e76a      	b.n	801970c <_vfiprintf_r+0x78>
 8019836:	fb0c 3202 	mla	r2, ip, r2, r3
 801983a:	460c      	mov	r4, r1
 801983c:	2001      	movs	r0, #1
 801983e:	e7a8      	b.n	8019792 <_vfiprintf_r+0xfe>
 8019840:	2300      	movs	r3, #0
 8019842:	3401      	adds	r4, #1
 8019844:	9305      	str	r3, [sp, #20]
 8019846:	4619      	mov	r1, r3
 8019848:	f04f 0c0a 	mov.w	ip, #10
 801984c:	4620      	mov	r0, r4
 801984e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019852:	3a30      	subs	r2, #48	@ 0x30
 8019854:	2a09      	cmp	r2, #9
 8019856:	d903      	bls.n	8019860 <_vfiprintf_r+0x1cc>
 8019858:	2b00      	cmp	r3, #0
 801985a:	d0c6      	beq.n	80197ea <_vfiprintf_r+0x156>
 801985c:	9105      	str	r1, [sp, #20]
 801985e:	e7c4      	b.n	80197ea <_vfiprintf_r+0x156>
 8019860:	fb0c 2101 	mla	r1, ip, r1, r2
 8019864:	4604      	mov	r4, r0
 8019866:	2301      	movs	r3, #1
 8019868:	e7f0      	b.n	801984c <_vfiprintf_r+0x1b8>
 801986a:	ab03      	add	r3, sp, #12
 801986c:	9300      	str	r3, [sp, #0]
 801986e:	462a      	mov	r2, r5
 8019870:	4b12      	ldr	r3, [pc, #72]	@ (80198bc <_vfiprintf_r+0x228>)
 8019872:	a904      	add	r1, sp, #16
 8019874:	4630      	mov	r0, r6
 8019876:	f7ff fcb9 	bl	80191ec <_printf_float>
 801987a:	4607      	mov	r7, r0
 801987c:	1c78      	adds	r0, r7, #1
 801987e:	d1d6      	bne.n	801982e <_vfiprintf_r+0x19a>
 8019880:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019882:	07d9      	lsls	r1, r3, #31
 8019884:	d405      	bmi.n	8019892 <_vfiprintf_r+0x1fe>
 8019886:	89ab      	ldrh	r3, [r5, #12]
 8019888:	059a      	lsls	r2, r3, #22
 801988a:	d402      	bmi.n	8019892 <_vfiprintf_r+0x1fe>
 801988c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801988e:	f000 ff15 	bl	801a6bc <__retarget_lock_release_recursive>
 8019892:	89ab      	ldrh	r3, [r5, #12]
 8019894:	065b      	lsls	r3, r3, #25
 8019896:	f53f af1f 	bmi.w	80196d8 <_vfiprintf_r+0x44>
 801989a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801989c:	e71e      	b.n	80196dc <_vfiprintf_r+0x48>
 801989e:	ab03      	add	r3, sp, #12
 80198a0:	9300      	str	r3, [sp, #0]
 80198a2:	462a      	mov	r2, r5
 80198a4:	4b05      	ldr	r3, [pc, #20]	@ (80198bc <_vfiprintf_r+0x228>)
 80198a6:	a904      	add	r1, sp, #16
 80198a8:	4630      	mov	r0, r6
 80198aa:	f000 f883 	bl	80199b4 <_printf_i>
 80198ae:	e7e4      	b.n	801987a <_vfiprintf_r+0x1e6>
 80198b0:	08020258 	.word	0x08020258
 80198b4:	08020262 	.word	0x08020262
 80198b8:	080191ed 	.word	0x080191ed
 80198bc:	0801966f 	.word	0x0801966f
 80198c0:	0802025e 	.word	0x0802025e

080198c4 <vfiprintf>:
 80198c4:	4613      	mov	r3, r2
 80198c6:	460a      	mov	r2, r1
 80198c8:	4601      	mov	r1, r0
 80198ca:	4802      	ldr	r0, [pc, #8]	@ (80198d4 <vfiprintf+0x10>)
 80198cc:	6800      	ldr	r0, [r0, #0]
 80198ce:	f7ff bee1 	b.w	8019694 <_vfiprintf_r>
 80198d2:	bf00      	nop
 80198d4:	20000160 	.word	0x20000160

080198d8 <_printf_common>:
 80198d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80198dc:	4616      	mov	r6, r2
 80198de:	4698      	mov	r8, r3
 80198e0:	688a      	ldr	r2, [r1, #8]
 80198e2:	690b      	ldr	r3, [r1, #16]
 80198e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80198e8:	4293      	cmp	r3, r2
 80198ea:	bfb8      	it	lt
 80198ec:	4613      	movlt	r3, r2
 80198ee:	6033      	str	r3, [r6, #0]
 80198f0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80198f4:	4607      	mov	r7, r0
 80198f6:	460c      	mov	r4, r1
 80198f8:	b10a      	cbz	r2, 80198fe <_printf_common+0x26>
 80198fa:	3301      	adds	r3, #1
 80198fc:	6033      	str	r3, [r6, #0]
 80198fe:	6823      	ldr	r3, [r4, #0]
 8019900:	0699      	lsls	r1, r3, #26
 8019902:	bf42      	ittt	mi
 8019904:	6833      	ldrmi	r3, [r6, #0]
 8019906:	3302      	addmi	r3, #2
 8019908:	6033      	strmi	r3, [r6, #0]
 801990a:	6825      	ldr	r5, [r4, #0]
 801990c:	f015 0506 	ands.w	r5, r5, #6
 8019910:	d106      	bne.n	8019920 <_printf_common+0x48>
 8019912:	f104 0a19 	add.w	sl, r4, #25
 8019916:	68e3      	ldr	r3, [r4, #12]
 8019918:	6832      	ldr	r2, [r6, #0]
 801991a:	1a9b      	subs	r3, r3, r2
 801991c:	42ab      	cmp	r3, r5
 801991e:	dc26      	bgt.n	801996e <_printf_common+0x96>
 8019920:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019924:	6822      	ldr	r2, [r4, #0]
 8019926:	3b00      	subs	r3, #0
 8019928:	bf18      	it	ne
 801992a:	2301      	movne	r3, #1
 801992c:	0692      	lsls	r2, r2, #26
 801992e:	d42b      	bmi.n	8019988 <_printf_common+0xb0>
 8019930:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019934:	4641      	mov	r1, r8
 8019936:	4638      	mov	r0, r7
 8019938:	47c8      	blx	r9
 801993a:	3001      	adds	r0, #1
 801993c:	d01e      	beq.n	801997c <_printf_common+0xa4>
 801993e:	6823      	ldr	r3, [r4, #0]
 8019940:	6922      	ldr	r2, [r4, #16]
 8019942:	f003 0306 	and.w	r3, r3, #6
 8019946:	2b04      	cmp	r3, #4
 8019948:	bf02      	ittt	eq
 801994a:	68e5      	ldreq	r5, [r4, #12]
 801994c:	6833      	ldreq	r3, [r6, #0]
 801994e:	1aed      	subeq	r5, r5, r3
 8019950:	68a3      	ldr	r3, [r4, #8]
 8019952:	bf0c      	ite	eq
 8019954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019958:	2500      	movne	r5, #0
 801995a:	4293      	cmp	r3, r2
 801995c:	bfc4      	itt	gt
 801995e:	1a9b      	subgt	r3, r3, r2
 8019960:	18ed      	addgt	r5, r5, r3
 8019962:	2600      	movs	r6, #0
 8019964:	341a      	adds	r4, #26
 8019966:	42b5      	cmp	r5, r6
 8019968:	d11a      	bne.n	80199a0 <_printf_common+0xc8>
 801996a:	2000      	movs	r0, #0
 801996c:	e008      	b.n	8019980 <_printf_common+0xa8>
 801996e:	2301      	movs	r3, #1
 8019970:	4652      	mov	r2, sl
 8019972:	4641      	mov	r1, r8
 8019974:	4638      	mov	r0, r7
 8019976:	47c8      	blx	r9
 8019978:	3001      	adds	r0, #1
 801997a:	d103      	bne.n	8019984 <_printf_common+0xac>
 801997c:	f04f 30ff 	mov.w	r0, #4294967295
 8019980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019984:	3501      	adds	r5, #1
 8019986:	e7c6      	b.n	8019916 <_printf_common+0x3e>
 8019988:	18e1      	adds	r1, r4, r3
 801998a:	1c5a      	adds	r2, r3, #1
 801998c:	2030      	movs	r0, #48	@ 0x30
 801998e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019992:	4422      	add	r2, r4
 8019994:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019998:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801999c:	3302      	adds	r3, #2
 801999e:	e7c7      	b.n	8019930 <_printf_common+0x58>
 80199a0:	2301      	movs	r3, #1
 80199a2:	4622      	mov	r2, r4
 80199a4:	4641      	mov	r1, r8
 80199a6:	4638      	mov	r0, r7
 80199a8:	47c8      	blx	r9
 80199aa:	3001      	adds	r0, #1
 80199ac:	d0e6      	beq.n	801997c <_printf_common+0xa4>
 80199ae:	3601      	adds	r6, #1
 80199b0:	e7d9      	b.n	8019966 <_printf_common+0x8e>
	...

080199b4 <_printf_i>:
 80199b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80199b8:	7e0f      	ldrb	r7, [r1, #24]
 80199ba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80199bc:	2f78      	cmp	r7, #120	@ 0x78
 80199be:	4691      	mov	r9, r2
 80199c0:	4680      	mov	r8, r0
 80199c2:	460c      	mov	r4, r1
 80199c4:	469a      	mov	sl, r3
 80199c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80199ca:	d807      	bhi.n	80199dc <_printf_i+0x28>
 80199cc:	2f62      	cmp	r7, #98	@ 0x62
 80199ce:	d80a      	bhi.n	80199e6 <_printf_i+0x32>
 80199d0:	2f00      	cmp	r7, #0
 80199d2:	f000 80d1 	beq.w	8019b78 <_printf_i+0x1c4>
 80199d6:	2f58      	cmp	r7, #88	@ 0x58
 80199d8:	f000 80b8 	beq.w	8019b4c <_printf_i+0x198>
 80199dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80199e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80199e4:	e03a      	b.n	8019a5c <_printf_i+0xa8>
 80199e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80199ea:	2b15      	cmp	r3, #21
 80199ec:	d8f6      	bhi.n	80199dc <_printf_i+0x28>
 80199ee:	a101      	add	r1, pc, #4	@ (adr r1, 80199f4 <_printf_i+0x40>)
 80199f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80199f4:	08019a4d 	.word	0x08019a4d
 80199f8:	08019a61 	.word	0x08019a61
 80199fc:	080199dd 	.word	0x080199dd
 8019a00:	080199dd 	.word	0x080199dd
 8019a04:	080199dd 	.word	0x080199dd
 8019a08:	080199dd 	.word	0x080199dd
 8019a0c:	08019a61 	.word	0x08019a61
 8019a10:	080199dd 	.word	0x080199dd
 8019a14:	080199dd 	.word	0x080199dd
 8019a18:	080199dd 	.word	0x080199dd
 8019a1c:	080199dd 	.word	0x080199dd
 8019a20:	08019b5f 	.word	0x08019b5f
 8019a24:	08019a8b 	.word	0x08019a8b
 8019a28:	08019b19 	.word	0x08019b19
 8019a2c:	080199dd 	.word	0x080199dd
 8019a30:	080199dd 	.word	0x080199dd
 8019a34:	08019b81 	.word	0x08019b81
 8019a38:	080199dd 	.word	0x080199dd
 8019a3c:	08019a8b 	.word	0x08019a8b
 8019a40:	080199dd 	.word	0x080199dd
 8019a44:	080199dd 	.word	0x080199dd
 8019a48:	08019b21 	.word	0x08019b21
 8019a4c:	6833      	ldr	r3, [r6, #0]
 8019a4e:	1d1a      	adds	r2, r3, #4
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	6032      	str	r2, [r6, #0]
 8019a54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019a58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019a5c:	2301      	movs	r3, #1
 8019a5e:	e09c      	b.n	8019b9a <_printf_i+0x1e6>
 8019a60:	6833      	ldr	r3, [r6, #0]
 8019a62:	6820      	ldr	r0, [r4, #0]
 8019a64:	1d19      	adds	r1, r3, #4
 8019a66:	6031      	str	r1, [r6, #0]
 8019a68:	0606      	lsls	r6, r0, #24
 8019a6a:	d501      	bpl.n	8019a70 <_printf_i+0xbc>
 8019a6c:	681d      	ldr	r5, [r3, #0]
 8019a6e:	e003      	b.n	8019a78 <_printf_i+0xc4>
 8019a70:	0645      	lsls	r5, r0, #25
 8019a72:	d5fb      	bpl.n	8019a6c <_printf_i+0xb8>
 8019a74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019a78:	2d00      	cmp	r5, #0
 8019a7a:	da03      	bge.n	8019a84 <_printf_i+0xd0>
 8019a7c:	232d      	movs	r3, #45	@ 0x2d
 8019a7e:	426d      	negs	r5, r5
 8019a80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019a84:	4858      	ldr	r0, [pc, #352]	@ (8019be8 <_printf_i+0x234>)
 8019a86:	230a      	movs	r3, #10
 8019a88:	e011      	b.n	8019aae <_printf_i+0xfa>
 8019a8a:	6821      	ldr	r1, [r4, #0]
 8019a8c:	6833      	ldr	r3, [r6, #0]
 8019a8e:	0608      	lsls	r0, r1, #24
 8019a90:	f853 5b04 	ldr.w	r5, [r3], #4
 8019a94:	d402      	bmi.n	8019a9c <_printf_i+0xe8>
 8019a96:	0649      	lsls	r1, r1, #25
 8019a98:	bf48      	it	mi
 8019a9a:	b2ad      	uxthmi	r5, r5
 8019a9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8019a9e:	4852      	ldr	r0, [pc, #328]	@ (8019be8 <_printf_i+0x234>)
 8019aa0:	6033      	str	r3, [r6, #0]
 8019aa2:	bf14      	ite	ne
 8019aa4:	230a      	movne	r3, #10
 8019aa6:	2308      	moveq	r3, #8
 8019aa8:	2100      	movs	r1, #0
 8019aaa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019aae:	6866      	ldr	r6, [r4, #4]
 8019ab0:	60a6      	str	r6, [r4, #8]
 8019ab2:	2e00      	cmp	r6, #0
 8019ab4:	db05      	blt.n	8019ac2 <_printf_i+0x10e>
 8019ab6:	6821      	ldr	r1, [r4, #0]
 8019ab8:	432e      	orrs	r6, r5
 8019aba:	f021 0104 	bic.w	r1, r1, #4
 8019abe:	6021      	str	r1, [r4, #0]
 8019ac0:	d04b      	beq.n	8019b5a <_printf_i+0x1a6>
 8019ac2:	4616      	mov	r6, r2
 8019ac4:	fbb5 f1f3 	udiv	r1, r5, r3
 8019ac8:	fb03 5711 	mls	r7, r3, r1, r5
 8019acc:	5dc7      	ldrb	r7, [r0, r7]
 8019ace:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019ad2:	462f      	mov	r7, r5
 8019ad4:	42bb      	cmp	r3, r7
 8019ad6:	460d      	mov	r5, r1
 8019ad8:	d9f4      	bls.n	8019ac4 <_printf_i+0x110>
 8019ada:	2b08      	cmp	r3, #8
 8019adc:	d10b      	bne.n	8019af6 <_printf_i+0x142>
 8019ade:	6823      	ldr	r3, [r4, #0]
 8019ae0:	07df      	lsls	r7, r3, #31
 8019ae2:	d508      	bpl.n	8019af6 <_printf_i+0x142>
 8019ae4:	6923      	ldr	r3, [r4, #16]
 8019ae6:	6861      	ldr	r1, [r4, #4]
 8019ae8:	4299      	cmp	r1, r3
 8019aea:	bfde      	ittt	le
 8019aec:	2330      	movle	r3, #48	@ 0x30
 8019aee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019af2:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019af6:	1b92      	subs	r2, r2, r6
 8019af8:	6122      	str	r2, [r4, #16]
 8019afa:	f8cd a000 	str.w	sl, [sp]
 8019afe:	464b      	mov	r3, r9
 8019b00:	aa03      	add	r2, sp, #12
 8019b02:	4621      	mov	r1, r4
 8019b04:	4640      	mov	r0, r8
 8019b06:	f7ff fee7 	bl	80198d8 <_printf_common>
 8019b0a:	3001      	adds	r0, #1
 8019b0c:	d14a      	bne.n	8019ba4 <_printf_i+0x1f0>
 8019b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8019b12:	b004      	add	sp, #16
 8019b14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b18:	6823      	ldr	r3, [r4, #0]
 8019b1a:	f043 0320 	orr.w	r3, r3, #32
 8019b1e:	6023      	str	r3, [r4, #0]
 8019b20:	4832      	ldr	r0, [pc, #200]	@ (8019bec <_printf_i+0x238>)
 8019b22:	2778      	movs	r7, #120	@ 0x78
 8019b24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019b28:	6823      	ldr	r3, [r4, #0]
 8019b2a:	6831      	ldr	r1, [r6, #0]
 8019b2c:	061f      	lsls	r7, r3, #24
 8019b2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8019b32:	d402      	bmi.n	8019b3a <_printf_i+0x186>
 8019b34:	065f      	lsls	r7, r3, #25
 8019b36:	bf48      	it	mi
 8019b38:	b2ad      	uxthmi	r5, r5
 8019b3a:	6031      	str	r1, [r6, #0]
 8019b3c:	07d9      	lsls	r1, r3, #31
 8019b3e:	bf44      	itt	mi
 8019b40:	f043 0320 	orrmi.w	r3, r3, #32
 8019b44:	6023      	strmi	r3, [r4, #0]
 8019b46:	b11d      	cbz	r5, 8019b50 <_printf_i+0x19c>
 8019b48:	2310      	movs	r3, #16
 8019b4a:	e7ad      	b.n	8019aa8 <_printf_i+0xf4>
 8019b4c:	4826      	ldr	r0, [pc, #152]	@ (8019be8 <_printf_i+0x234>)
 8019b4e:	e7e9      	b.n	8019b24 <_printf_i+0x170>
 8019b50:	6823      	ldr	r3, [r4, #0]
 8019b52:	f023 0320 	bic.w	r3, r3, #32
 8019b56:	6023      	str	r3, [r4, #0]
 8019b58:	e7f6      	b.n	8019b48 <_printf_i+0x194>
 8019b5a:	4616      	mov	r6, r2
 8019b5c:	e7bd      	b.n	8019ada <_printf_i+0x126>
 8019b5e:	6833      	ldr	r3, [r6, #0]
 8019b60:	6825      	ldr	r5, [r4, #0]
 8019b62:	6961      	ldr	r1, [r4, #20]
 8019b64:	1d18      	adds	r0, r3, #4
 8019b66:	6030      	str	r0, [r6, #0]
 8019b68:	062e      	lsls	r6, r5, #24
 8019b6a:	681b      	ldr	r3, [r3, #0]
 8019b6c:	d501      	bpl.n	8019b72 <_printf_i+0x1be>
 8019b6e:	6019      	str	r1, [r3, #0]
 8019b70:	e002      	b.n	8019b78 <_printf_i+0x1c4>
 8019b72:	0668      	lsls	r0, r5, #25
 8019b74:	d5fb      	bpl.n	8019b6e <_printf_i+0x1ba>
 8019b76:	8019      	strh	r1, [r3, #0]
 8019b78:	2300      	movs	r3, #0
 8019b7a:	6123      	str	r3, [r4, #16]
 8019b7c:	4616      	mov	r6, r2
 8019b7e:	e7bc      	b.n	8019afa <_printf_i+0x146>
 8019b80:	6833      	ldr	r3, [r6, #0]
 8019b82:	1d1a      	adds	r2, r3, #4
 8019b84:	6032      	str	r2, [r6, #0]
 8019b86:	681e      	ldr	r6, [r3, #0]
 8019b88:	6862      	ldr	r2, [r4, #4]
 8019b8a:	2100      	movs	r1, #0
 8019b8c:	4630      	mov	r0, r6
 8019b8e:	f7e6 fb1f 	bl	80001d0 <memchr>
 8019b92:	b108      	cbz	r0, 8019b98 <_printf_i+0x1e4>
 8019b94:	1b80      	subs	r0, r0, r6
 8019b96:	6060      	str	r0, [r4, #4]
 8019b98:	6863      	ldr	r3, [r4, #4]
 8019b9a:	6123      	str	r3, [r4, #16]
 8019b9c:	2300      	movs	r3, #0
 8019b9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019ba2:	e7aa      	b.n	8019afa <_printf_i+0x146>
 8019ba4:	6923      	ldr	r3, [r4, #16]
 8019ba6:	4632      	mov	r2, r6
 8019ba8:	4649      	mov	r1, r9
 8019baa:	4640      	mov	r0, r8
 8019bac:	47d0      	blx	sl
 8019bae:	3001      	adds	r0, #1
 8019bb0:	d0ad      	beq.n	8019b0e <_printf_i+0x15a>
 8019bb2:	6823      	ldr	r3, [r4, #0]
 8019bb4:	079b      	lsls	r3, r3, #30
 8019bb6:	d413      	bmi.n	8019be0 <_printf_i+0x22c>
 8019bb8:	68e0      	ldr	r0, [r4, #12]
 8019bba:	9b03      	ldr	r3, [sp, #12]
 8019bbc:	4298      	cmp	r0, r3
 8019bbe:	bfb8      	it	lt
 8019bc0:	4618      	movlt	r0, r3
 8019bc2:	e7a6      	b.n	8019b12 <_printf_i+0x15e>
 8019bc4:	2301      	movs	r3, #1
 8019bc6:	4632      	mov	r2, r6
 8019bc8:	4649      	mov	r1, r9
 8019bca:	4640      	mov	r0, r8
 8019bcc:	47d0      	blx	sl
 8019bce:	3001      	adds	r0, #1
 8019bd0:	d09d      	beq.n	8019b0e <_printf_i+0x15a>
 8019bd2:	3501      	adds	r5, #1
 8019bd4:	68e3      	ldr	r3, [r4, #12]
 8019bd6:	9903      	ldr	r1, [sp, #12]
 8019bd8:	1a5b      	subs	r3, r3, r1
 8019bda:	42ab      	cmp	r3, r5
 8019bdc:	dcf2      	bgt.n	8019bc4 <_printf_i+0x210>
 8019bde:	e7eb      	b.n	8019bb8 <_printf_i+0x204>
 8019be0:	2500      	movs	r5, #0
 8019be2:	f104 0619 	add.w	r6, r4, #25
 8019be6:	e7f5      	b.n	8019bd4 <_printf_i+0x220>
 8019be8:	08020269 	.word	0x08020269
 8019bec:	0802027a 	.word	0x0802027a

08019bf0 <_scanf_float>:
 8019bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019bf4:	b087      	sub	sp, #28
 8019bf6:	4691      	mov	r9, r2
 8019bf8:	9303      	str	r3, [sp, #12]
 8019bfa:	688b      	ldr	r3, [r1, #8]
 8019bfc:	1e5a      	subs	r2, r3, #1
 8019bfe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8019c02:	bf81      	itttt	hi
 8019c04:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8019c08:	eb03 0b05 	addhi.w	fp, r3, r5
 8019c0c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8019c10:	608b      	strhi	r3, [r1, #8]
 8019c12:	680b      	ldr	r3, [r1, #0]
 8019c14:	460a      	mov	r2, r1
 8019c16:	f04f 0500 	mov.w	r5, #0
 8019c1a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8019c1e:	f842 3b1c 	str.w	r3, [r2], #28
 8019c22:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8019c26:	4680      	mov	r8, r0
 8019c28:	460c      	mov	r4, r1
 8019c2a:	bf98      	it	ls
 8019c2c:	f04f 0b00 	movls.w	fp, #0
 8019c30:	9201      	str	r2, [sp, #4]
 8019c32:	4616      	mov	r6, r2
 8019c34:	46aa      	mov	sl, r5
 8019c36:	462f      	mov	r7, r5
 8019c38:	9502      	str	r5, [sp, #8]
 8019c3a:	68a2      	ldr	r2, [r4, #8]
 8019c3c:	b15a      	cbz	r2, 8019c56 <_scanf_float+0x66>
 8019c3e:	f8d9 3000 	ldr.w	r3, [r9]
 8019c42:	781b      	ldrb	r3, [r3, #0]
 8019c44:	2b4e      	cmp	r3, #78	@ 0x4e
 8019c46:	d863      	bhi.n	8019d10 <_scanf_float+0x120>
 8019c48:	2b40      	cmp	r3, #64	@ 0x40
 8019c4a:	d83b      	bhi.n	8019cc4 <_scanf_float+0xd4>
 8019c4c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8019c50:	b2c8      	uxtb	r0, r1
 8019c52:	280e      	cmp	r0, #14
 8019c54:	d939      	bls.n	8019cca <_scanf_float+0xda>
 8019c56:	b11f      	cbz	r7, 8019c60 <_scanf_float+0x70>
 8019c58:	6823      	ldr	r3, [r4, #0]
 8019c5a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8019c5e:	6023      	str	r3, [r4, #0]
 8019c60:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019c64:	f1ba 0f01 	cmp.w	sl, #1
 8019c68:	f200 8114 	bhi.w	8019e94 <_scanf_float+0x2a4>
 8019c6c:	9b01      	ldr	r3, [sp, #4]
 8019c6e:	429e      	cmp	r6, r3
 8019c70:	f200 8105 	bhi.w	8019e7e <_scanf_float+0x28e>
 8019c74:	2001      	movs	r0, #1
 8019c76:	b007      	add	sp, #28
 8019c78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019c7c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8019c80:	2a0d      	cmp	r2, #13
 8019c82:	d8e8      	bhi.n	8019c56 <_scanf_float+0x66>
 8019c84:	a101      	add	r1, pc, #4	@ (adr r1, 8019c8c <_scanf_float+0x9c>)
 8019c86:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8019c8a:	bf00      	nop
 8019c8c:	08019dd5 	.word	0x08019dd5
 8019c90:	08019c57 	.word	0x08019c57
 8019c94:	08019c57 	.word	0x08019c57
 8019c98:	08019c57 	.word	0x08019c57
 8019c9c:	08019e31 	.word	0x08019e31
 8019ca0:	08019e0b 	.word	0x08019e0b
 8019ca4:	08019c57 	.word	0x08019c57
 8019ca8:	08019c57 	.word	0x08019c57
 8019cac:	08019de3 	.word	0x08019de3
 8019cb0:	08019c57 	.word	0x08019c57
 8019cb4:	08019c57 	.word	0x08019c57
 8019cb8:	08019c57 	.word	0x08019c57
 8019cbc:	08019c57 	.word	0x08019c57
 8019cc0:	08019d9f 	.word	0x08019d9f
 8019cc4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8019cc8:	e7da      	b.n	8019c80 <_scanf_float+0x90>
 8019cca:	290e      	cmp	r1, #14
 8019ccc:	d8c3      	bhi.n	8019c56 <_scanf_float+0x66>
 8019cce:	a001      	add	r0, pc, #4	@ (adr r0, 8019cd4 <_scanf_float+0xe4>)
 8019cd0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8019cd4:	08019d8f 	.word	0x08019d8f
 8019cd8:	08019c57 	.word	0x08019c57
 8019cdc:	08019d8f 	.word	0x08019d8f
 8019ce0:	08019e1f 	.word	0x08019e1f
 8019ce4:	08019c57 	.word	0x08019c57
 8019ce8:	08019d31 	.word	0x08019d31
 8019cec:	08019d75 	.word	0x08019d75
 8019cf0:	08019d75 	.word	0x08019d75
 8019cf4:	08019d75 	.word	0x08019d75
 8019cf8:	08019d75 	.word	0x08019d75
 8019cfc:	08019d75 	.word	0x08019d75
 8019d00:	08019d75 	.word	0x08019d75
 8019d04:	08019d75 	.word	0x08019d75
 8019d08:	08019d75 	.word	0x08019d75
 8019d0c:	08019d75 	.word	0x08019d75
 8019d10:	2b6e      	cmp	r3, #110	@ 0x6e
 8019d12:	d809      	bhi.n	8019d28 <_scanf_float+0x138>
 8019d14:	2b60      	cmp	r3, #96	@ 0x60
 8019d16:	d8b1      	bhi.n	8019c7c <_scanf_float+0x8c>
 8019d18:	2b54      	cmp	r3, #84	@ 0x54
 8019d1a:	d07b      	beq.n	8019e14 <_scanf_float+0x224>
 8019d1c:	2b59      	cmp	r3, #89	@ 0x59
 8019d1e:	d19a      	bne.n	8019c56 <_scanf_float+0x66>
 8019d20:	2d07      	cmp	r5, #7
 8019d22:	d198      	bne.n	8019c56 <_scanf_float+0x66>
 8019d24:	2508      	movs	r5, #8
 8019d26:	e02f      	b.n	8019d88 <_scanf_float+0x198>
 8019d28:	2b74      	cmp	r3, #116	@ 0x74
 8019d2a:	d073      	beq.n	8019e14 <_scanf_float+0x224>
 8019d2c:	2b79      	cmp	r3, #121	@ 0x79
 8019d2e:	e7f6      	b.n	8019d1e <_scanf_float+0x12e>
 8019d30:	6821      	ldr	r1, [r4, #0]
 8019d32:	05c8      	lsls	r0, r1, #23
 8019d34:	d51e      	bpl.n	8019d74 <_scanf_float+0x184>
 8019d36:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8019d3a:	6021      	str	r1, [r4, #0]
 8019d3c:	3701      	adds	r7, #1
 8019d3e:	f1bb 0f00 	cmp.w	fp, #0
 8019d42:	d003      	beq.n	8019d4c <_scanf_float+0x15c>
 8019d44:	3201      	adds	r2, #1
 8019d46:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019d4a:	60a2      	str	r2, [r4, #8]
 8019d4c:	68a3      	ldr	r3, [r4, #8]
 8019d4e:	3b01      	subs	r3, #1
 8019d50:	60a3      	str	r3, [r4, #8]
 8019d52:	6923      	ldr	r3, [r4, #16]
 8019d54:	3301      	adds	r3, #1
 8019d56:	6123      	str	r3, [r4, #16]
 8019d58:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8019d5c:	3b01      	subs	r3, #1
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	f8c9 3004 	str.w	r3, [r9, #4]
 8019d64:	f340 8082 	ble.w	8019e6c <_scanf_float+0x27c>
 8019d68:	f8d9 3000 	ldr.w	r3, [r9]
 8019d6c:	3301      	adds	r3, #1
 8019d6e:	f8c9 3000 	str.w	r3, [r9]
 8019d72:	e762      	b.n	8019c3a <_scanf_float+0x4a>
 8019d74:	eb1a 0105 	adds.w	r1, sl, r5
 8019d78:	f47f af6d 	bne.w	8019c56 <_scanf_float+0x66>
 8019d7c:	6822      	ldr	r2, [r4, #0]
 8019d7e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8019d82:	6022      	str	r2, [r4, #0]
 8019d84:	460d      	mov	r5, r1
 8019d86:	468a      	mov	sl, r1
 8019d88:	f806 3b01 	strb.w	r3, [r6], #1
 8019d8c:	e7de      	b.n	8019d4c <_scanf_float+0x15c>
 8019d8e:	6822      	ldr	r2, [r4, #0]
 8019d90:	0610      	lsls	r0, r2, #24
 8019d92:	f57f af60 	bpl.w	8019c56 <_scanf_float+0x66>
 8019d96:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8019d9a:	6022      	str	r2, [r4, #0]
 8019d9c:	e7f4      	b.n	8019d88 <_scanf_float+0x198>
 8019d9e:	f1ba 0f00 	cmp.w	sl, #0
 8019da2:	d10c      	bne.n	8019dbe <_scanf_float+0x1ce>
 8019da4:	b977      	cbnz	r7, 8019dc4 <_scanf_float+0x1d4>
 8019da6:	6822      	ldr	r2, [r4, #0]
 8019da8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019dac:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019db0:	d108      	bne.n	8019dc4 <_scanf_float+0x1d4>
 8019db2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019db6:	6022      	str	r2, [r4, #0]
 8019db8:	f04f 0a01 	mov.w	sl, #1
 8019dbc:	e7e4      	b.n	8019d88 <_scanf_float+0x198>
 8019dbe:	f1ba 0f02 	cmp.w	sl, #2
 8019dc2:	d050      	beq.n	8019e66 <_scanf_float+0x276>
 8019dc4:	2d01      	cmp	r5, #1
 8019dc6:	d002      	beq.n	8019dce <_scanf_float+0x1de>
 8019dc8:	2d04      	cmp	r5, #4
 8019dca:	f47f af44 	bne.w	8019c56 <_scanf_float+0x66>
 8019dce:	3501      	adds	r5, #1
 8019dd0:	b2ed      	uxtb	r5, r5
 8019dd2:	e7d9      	b.n	8019d88 <_scanf_float+0x198>
 8019dd4:	f1ba 0f01 	cmp.w	sl, #1
 8019dd8:	f47f af3d 	bne.w	8019c56 <_scanf_float+0x66>
 8019ddc:	f04f 0a02 	mov.w	sl, #2
 8019de0:	e7d2      	b.n	8019d88 <_scanf_float+0x198>
 8019de2:	b975      	cbnz	r5, 8019e02 <_scanf_float+0x212>
 8019de4:	2f00      	cmp	r7, #0
 8019de6:	f47f af37 	bne.w	8019c58 <_scanf_float+0x68>
 8019dea:	6822      	ldr	r2, [r4, #0]
 8019dec:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8019df0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8019df4:	f040 8103 	bne.w	8019ffe <_scanf_float+0x40e>
 8019df8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019dfc:	6022      	str	r2, [r4, #0]
 8019dfe:	2501      	movs	r5, #1
 8019e00:	e7c2      	b.n	8019d88 <_scanf_float+0x198>
 8019e02:	2d03      	cmp	r5, #3
 8019e04:	d0e3      	beq.n	8019dce <_scanf_float+0x1de>
 8019e06:	2d05      	cmp	r5, #5
 8019e08:	e7df      	b.n	8019dca <_scanf_float+0x1da>
 8019e0a:	2d02      	cmp	r5, #2
 8019e0c:	f47f af23 	bne.w	8019c56 <_scanf_float+0x66>
 8019e10:	2503      	movs	r5, #3
 8019e12:	e7b9      	b.n	8019d88 <_scanf_float+0x198>
 8019e14:	2d06      	cmp	r5, #6
 8019e16:	f47f af1e 	bne.w	8019c56 <_scanf_float+0x66>
 8019e1a:	2507      	movs	r5, #7
 8019e1c:	e7b4      	b.n	8019d88 <_scanf_float+0x198>
 8019e1e:	6822      	ldr	r2, [r4, #0]
 8019e20:	0591      	lsls	r1, r2, #22
 8019e22:	f57f af18 	bpl.w	8019c56 <_scanf_float+0x66>
 8019e26:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8019e2a:	6022      	str	r2, [r4, #0]
 8019e2c:	9702      	str	r7, [sp, #8]
 8019e2e:	e7ab      	b.n	8019d88 <_scanf_float+0x198>
 8019e30:	6822      	ldr	r2, [r4, #0]
 8019e32:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8019e36:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8019e3a:	d005      	beq.n	8019e48 <_scanf_float+0x258>
 8019e3c:	0550      	lsls	r0, r2, #21
 8019e3e:	f57f af0a 	bpl.w	8019c56 <_scanf_float+0x66>
 8019e42:	2f00      	cmp	r7, #0
 8019e44:	f000 80db 	beq.w	8019ffe <_scanf_float+0x40e>
 8019e48:	0591      	lsls	r1, r2, #22
 8019e4a:	bf58      	it	pl
 8019e4c:	9902      	ldrpl	r1, [sp, #8]
 8019e4e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8019e52:	bf58      	it	pl
 8019e54:	1a79      	subpl	r1, r7, r1
 8019e56:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8019e5a:	bf58      	it	pl
 8019e5c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8019e60:	6022      	str	r2, [r4, #0]
 8019e62:	2700      	movs	r7, #0
 8019e64:	e790      	b.n	8019d88 <_scanf_float+0x198>
 8019e66:	f04f 0a03 	mov.w	sl, #3
 8019e6a:	e78d      	b.n	8019d88 <_scanf_float+0x198>
 8019e6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8019e70:	4649      	mov	r1, r9
 8019e72:	4640      	mov	r0, r8
 8019e74:	4798      	blx	r3
 8019e76:	2800      	cmp	r0, #0
 8019e78:	f43f aedf 	beq.w	8019c3a <_scanf_float+0x4a>
 8019e7c:	e6eb      	b.n	8019c56 <_scanf_float+0x66>
 8019e7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019e82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019e86:	464a      	mov	r2, r9
 8019e88:	4640      	mov	r0, r8
 8019e8a:	4798      	blx	r3
 8019e8c:	6923      	ldr	r3, [r4, #16]
 8019e8e:	3b01      	subs	r3, #1
 8019e90:	6123      	str	r3, [r4, #16]
 8019e92:	e6eb      	b.n	8019c6c <_scanf_float+0x7c>
 8019e94:	1e6b      	subs	r3, r5, #1
 8019e96:	2b06      	cmp	r3, #6
 8019e98:	d824      	bhi.n	8019ee4 <_scanf_float+0x2f4>
 8019e9a:	2d02      	cmp	r5, #2
 8019e9c:	d836      	bhi.n	8019f0c <_scanf_float+0x31c>
 8019e9e:	9b01      	ldr	r3, [sp, #4]
 8019ea0:	429e      	cmp	r6, r3
 8019ea2:	f67f aee7 	bls.w	8019c74 <_scanf_float+0x84>
 8019ea6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019eaa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019eae:	464a      	mov	r2, r9
 8019eb0:	4640      	mov	r0, r8
 8019eb2:	4798      	blx	r3
 8019eb4:	6923      	ldr	r3, [r4, #16]
 8019eb6:	3b01      	subs	r3, #1
 8019eb8:	6123      	str	r3, [r4, #16]
 8019eba:	e7f0      	b.n	8019e9e <_scanf_float+0x2ae>
 8019ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019ec0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8019ec4:	464a      	mov	r2, r9
 8019ec6:	4640      	mov	r0, r8
 8019ec8:	4798      	blx	r3
 8019eca:	6923      	ldr	r3, [r4, #16]
 8019ecc:	3b01      	subs	r3, #1
 8019ece:	6123      	str	r3, [r4, #16]
 8019ed0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8019ed4:	fa5f fa8a 	uxtb.w	sl, sl
 8019ed8:	f1ba 0f02 	cmp.w	sl, #2
 8019edc:	d1ee      	bne.n	8019ebc <_scanf_float+0x2cc>
 8019ede:	3d03      	subs	r5, #3
 8019ee0:	b2ed      	uxtb	r5, r5
 8019ee2:	1b76      	subs	r6, r6, r5
 8019ee4:	6823      	ldr	r3, [r4, #0]
 8019ee6:	05da      	lsls	r2, r3, #23
 8019ee8:	d530      	bpl.n	8019f4c <_scanf_float+0x35c>
 8019eea:	055b      	lsls	r3, r3, #21
 8019eec:	d511      	bpl.n	8019f12 <_scanf_float+0x322>
 8019eee:	9b01      	ldr	r3, [sp, #4]
 8019ef0:	429e      	cmp	r6, r3
 8019ef2:	f67f aebf 	bls.w	8019c74 <_scanf_float+0x84>
 8019ef6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019efa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8019efe:	464a      	mov	r2, r9
 8019f00:	4640      	mov	r0, r8
 8019f02:	4798      	blx	r3
 8019f04:	6923      	ldr	r3, [r4, #16]
 8019f06:	3b01      	subs	r3, #1
 8019f08:	6123      	str	r3, [r4, #16]
 8019f0a:	e7f0      	b.n	8019eee <_scanf_float+0x2fe>
 8019f0c:	46aa      	mov	sl, r5
 8019f0e:	46b3      	mov	fp, r6
 8019f10:	e7de      	b.n	8019ed0 <_scanf_float+0x2e0>
 8019f12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8019f16:	6923      	ldr	r3, [r4, #16]
 8019f18:	2965      	cmp	r1, #101	@ 0x65
 8019f1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8019f1e:	f106 35ff 	add.w	r5, r6, #4294967295
 8019f22:	6123      	str	r3, [r4, #16]
 8019f24:	d00c      	beq.n	8019f40 <_scanf_float+0x350>
 8019f26:	2945      	cmp	r1, #69	@ 0x45
 8019f28:	d00a      	beq.n	8019f40 <_scanf_float+0x350>
 8019f2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019f2e:	464a      	mov	r2, r9
 8019f30:	4640      	mov	r0, r8
 8019f32:	4798      	blx	r3
 8019f34:	6923      	ldr	r3, [r4, #16]
 8019f36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8019f3a:	3b01      	subs	r3, #1
 8019f3c:	1eb5      	subs	r5, r6, #2
 8019f3e:	6123      	str	r3, [r4, #16]
 8019f40:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8019f44:	464a      	mov	r2, r9
 8019f46:	4640      	mov	r0, r8
 8019f48:	4798      	blx	r3
 8019f4a:	462e      	mov	r6, r5
 8019f4c:	6822      	ldr	r2, [r4, #0]
 8019f4e:	f012 0210 	ands.w	r2, r2, #16
 8019f52:	d001      	beq.n	8019f58 <_scanf_float+0x368>
 8019f54:	2000      	movs	r0, #0
 8019f56:	e68e      	b.n	8019c76 <_scanf_float+0x86>
 8019f58:	7032      	strb	r2, [r6, #0]
 8019f5a:	6823      	ldr	r3, [r4, #0]
 8019f5c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8019f60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8019f64:	d125      	bne.n	8019fb2 <_scanf_float+0x3c2>
 8019f66:	9b02      	ldr	r3, [sp, #8]
 8019f68:	429f      	cmp	r7, r3
 8019f6a:	d00a      	beq.n	8019f82 <_scanf_float+0x392>
 8019f6c:	1bda      	subs	r2, r3, r7
 8019f6e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8019f72:	429e      	cmp	r6, r3
 8019f74:	bf28      	it	cs
 8019f76:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8019f7a:	4922      	ldr	r1, [pc, #136]	@ (801a004 <_scanf_float+0x414>)
 8019f7c:	4630      	mov	r0, r6
 8019f7e:	f000 f97f 	bl	801a280 <siprintf>
 8019f82:	9901      	ldr	r1, [sp, #4]
 8019f84:	2200      	movs	r2, #0
 8019f86:	4640      	mov	r0, r8
 8019f88:	f002 fdfa 	bl	801cb80 <_strtod_r>
 8019f8c:	9b03      	ldr	r3, [sp, #12]
 8019f8e:	6821      	ldr	r1, [r4, #0]
 8019f90:	681b      	ldr	r3, [r3, #0]
 8019f92:	f011 0f02 	tst.w	r1, #2
 8019f96:	ec57 6b10 	vmov	r6, r7, d0
 8019f9a:	f103 0204 	add.w	r2, r3, #4
 8019f9e:	d015      	beq.n	8019fcc <_scanf_float+0x3dc>
 8019fa0:	9903      	ldr	r1, [sp, #12]
 8019fa2:	600a      	str	r2, [r1, #0]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	e9c3 6700 	strd	r6, r7, [r3]
 8019faa:	68e3      	ldr	r3, [r4, #12]
 8019fac:	3301      	adds	r3, #1
 8019fae:	60e3      	str	r3, [r4, #12]
 8019fb0:	e7d0      	b.n	8019f54 <_scanf_float+0x364>
 8019fb2:	9b04      	ldr	r3, [sp, #16]
 8019fb4:	2b00      	cmp	r3, #0
 8019fb6:	d0e4      	beq.n	8019f82 <_scanf_float+0x392>
 8019fb8:	9905      	ldr	r1, [sp, #20]
 8019fba:	230a      	movs	r3, #10
 8019fbc:	3101      	adds	r1, #1
 8019fbe:	4640      	mov	r0, r8
 8019fc0:	f002 fe5e 	bl	801cc80 <_strtol_r>
 8019fc4:	9b04      	ldr	r3, [sp, #16]
 8019fc6:	9e05      	ldr	r6, [sp, #20]
 8019fc8:	1ac2      	subs	r2, r0, r3
 8019fca:	e7d0      	b.n	8019f6e <_scanf_float+0x37e>
 8019fcc:	f011 0f04 	tst.w	r1, #4
 8019fd0:	9903      	ldr	r1, [sp, #12]
 8019fd2:	600a      	str	r2, [r1, #0]
 8019fd4:	d1e6      	bne.n	8019fa4 <_scanf_float+0x3b4>
 8019fd6:	681d      	ldr	r5, [r3, #0]
 8019fd8:	4632      	mov	r2, r6
 8019fda:	463b      	mov	r3, r7
 8019fdc:	4630      	mov	r0, r6
 8019fde:	4639      	mov	r1, r7
 8019fe0:	f7e6 fda4 	bl	8000b2c <__aeabi_dcmpun>
 8019fe4:	b128      	cbz	r0, 8019ff2 <_scanf_float+0x402>
 8019fe6:	4808      	ldr	r0, [pc, #32]	@ (801a008 <_scanf_float+0x418>)
 8019fe8:	f7fd fe06 	bl	8017bf8 <nanf>
 8019fec:	ed85 0a00 	vstr	s0, [r5]
 8019ff0:	e7db      	b.n	8019faa <_scanf_float+0x3ba>
 8019ff2:	4630      	mov	r0, r6
 8019ff4:	4639      	mov	r1, r7
 8019ff6:	f7e6 fdf7 	bl	8000be8 <__aeabi_d2f>
 8019ffa:	6028      	str	r0, [r5, #0]
 8019ffc:	e7d5      	b.n	8019faa <_scanf_float+0x3ba>
 8019ffe:	2700      	movs	r7, #0
 801a000:	e62e      	b.n	8019c60 <_scanf_float+0x70>
 801a002:	bf00      	nop
 801a004:	0802028b 	.word	0x0802028b
 801a008:	080202cb 	.word	0x080202cb

0801a00c <std>:
 801a00c:	2300      	movs	r3, #0
 801a00e:	b510      	push	{r4, lr}
 801a010:	4604      	mov	r4, r0
 801a012:	e9c0 3300 	strd	r3, r3, [r0]
 801a016:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a01a:	6083      	str	r3, [r0, #8]
 801a01c:	8181      	strh	r1, [r0, #12]
 801a01e:	6643      	str	r3, [r0, #100]	@ 0x64
 801a020:	81c2      	strh	r2, [r0, #14]
 801a022:	6183      	str	r3, [r0, #24]
 801a024:	4619      	mov	r1, r3
 801a026:	2208      	movs	r2, #8
 801a028:	305c      	adds	r0, #92	@ 0x5c
 801a02a:	f000 fa6b 	bl	801a504 <memset>
 801a02e:	4b0d      	ldr	r3, [pc, #52]	@ (801a064 <std+0x58>)
 801a030:	6263      	str	r3, [r4, #36]	@ 0x24
 801a032:	4b0d      	ldr	r3, [pc, #52]	@ (801a068 <std+0x5c>)
 801a034:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a036:	4b0d      	ldr	r3, [pc, #52]	@ (801a06c <std+0x60>)
 801a038:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a03a:	4b0d      	ldr	r3, [pc, #52]	@ (801a070 <std+0x64>)
 801a03c:	6323      	str	r3, [r4, #48]	@ 0x30
 801a03e:	4b0d      	ldr	r3, [pc, #52]	@ (801a074 <std+0x68>)
 801a040:	6224      	str	r4, [r4, #32]
 801a042:	429c      	cmp	r4, r3
 801a044:	d006      	beq.n	801a054 <std+0x48>
 801a046:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a04a:	4294      	cmp	r4, r2
 801a04c:	d002      	beq.n	801a054 <std+0x48>
 801a04e:	33d0      	adds	r3, #208	@ 0xd0
 801a050:	429c      	cmp	r4, r3
 801a052:	d105      	bne.n	801a060 <std+0x54>
 801a054:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a05c:	f000 bb2c 	b.w	801a6b8 <__retarget_lock_init_recursive>
 801a060:	bd10      	pop	{r4, pc}
 801a062:	bf00      	nop
 801a064:	0801a31d 	.word	0x0801a31d
 801a068:	0801a343 	.word	0x0801a343
 801a06c:	0801a37b 	.word	0x0801a37b
 801a070:	0801a39f 	.word	0x0801a39f
 801a074:	2000a564 	.word	0x2000a564

0801a078 <stdio_exit_handler>:
 801a078:	4a02      	ldr	r2, [pc, #8]	@ (801a084 <stdio_exit_handler+0xc>)
 801a07a:	4903      	ldr	r1, [pc, #12]	@ (801a088 <stdio_exit_handler+0x10>)
 801a07c:	4803      	ldr	r0, [pc, #12]	@ (801a08c <stdio_exit_handler+0x14>)
 801a07e:	f000 b869 	b.w	801a154 <_fwalk_sglue>
 801a082:	bf00      	nop
 801a084:	20000154 	.word	0x20000154
 801a088:	0801d679 	.word	0x0801d679
 801a08c:	20000164 	.word	0x20000164

0801a090 <cleanup_stdio>:
 801a090:	6841      	ldr	r1, [r0, #4]
 801a092:	4b0c      	ldr	r3, [pc, #48]	@ (801a0c4 <cleanup_stdio+0x34>)
 801a094:	4299      	cmp	r1, r3
 801a096:	b510      	push	{r4, lr}
 801a098:	4604      	mov	r4, r0
 801a09a:	d001      	beq.n	801a0a0 <cleanup_stdio+0x10>
 801a09c:	f003 faec 	bl	801d678 <_fflush_r>
 801a0a0:	68a1      	ldr	r1, [r4, #8]
 801a0a2:	4b09      	ldr	r3, [pc, #36]	@ (801a0c8 <cleanup_stdio+0x38>)
 801a0a4:	4299      	cmp	r1, r3
 801a0a6:	d002      	beq.n	801a0ae <cleanup_stdio+0x1e>
 801a0a8:	4620      	mov	r0, r4
 801a0aa:	f003 fae5 	bl	801d678 <_fflush_r>
 801a0ae:	68e1      	ldr	r1, [r4, #12]
 801a0b0:	4b06      	ldr	r3, [pc, #24]	@ (801a0cc <cleanup_stdio+0x3c>)
 801a0b2:	4299      	cmp	r1, r3
 801a0b4:	d004      	beq.n	801a0c0 <cleanup_stdio+0x30>
 801a0b6:	4620      	mov	r0, r4
 801a0b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0bc:	f003 badc 	b.w	801d678 <_fflush_r>
 801a0c0:	bd10      	pop	{r4, pc}
 801a0c2:	bf00      	nop
 801a0c4:	2000a564 	.word	0x2000a564
 801a0c8:	2000a5cc 	.word	0x2000a5cc
 801a0cc:	2000a634 	.word	0x2000a634

0801a0d0 <global_stdio_init.part.0>:
 801a0d0:	b510      	push	{r4, lr}
 801a0d2:	4b0b      	ldr	r3, [pc, #44]	@ (801a100 <global_stdio_init.part.0+0x30>)
 801a0d4:	4c0b      	ldr	r4, [pc, #44]	@ (801a104 <global_stdio_init.part.0+0x34>)
 801a0d6:	4a0c      	ldr	r2, [pc, #48]	@ (801a108 <global_stdio_init.part.0+0x38>)
 801a0d8:	601a      	str	r2, [r3, #0]
 801a0da:	4620      	mov	r0, r4
 801a0dc:	2200      	movs	r2, #0
 801a0de:	2104      	movs	r1, #4
 801a0e0:	f7ff ff94 	bl	801a00c <std>
 801a0e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a0e8:	2201      	movs	r2, #1
 801a0ea:	2109      	movs	r1, #9
 801a0ec:	f7ff ff8e 	bl	801a00c <std>
 801a0f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a0f4:	2202      	movs	r2, #2
 801a0f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a0fa:	2112      	movs	r1, #18
 801a0fc:	f7ff bf86 	b.w	801a00c <std>
 801a100:	2000a69c 	.word	0x2000a69c
 801a104:	2000a564 	.word	0x2000a564
 801a108:	0801a079 	.word	0x0801a079

0801a10c <__sfp_lock_acquire>:
 801a10c:	4801      	ldr	r0, [pc, #4]	@ (801a114 <__sfp_lock_acquire+0x8>)
 801a10e:	f000 bad4 	b.w	801a6ba <__retarget_lock_acquire_recursive>
 801a112:	bf00      	nop
 801a114:	2000a6a5 	.word	0x2000a6a5

0801a118 <__sfp_lock_release>:
 801a118:	4801      	ldr	r0, [pc, #4]	@ (801a120 <__sfp_lock_release+0x8>)
 801a11a:	f000 bacf 	b.w	801a6bc <__retarget_lock_release_recursive>
 801a11e:	bf00      	nop
 801a120:	2000a6a5 	.word	0x2000a6a5

0801a124 <__sinit>:
 801a124:	b510      	push	{r4, lr}
 801a126:	4604      	mov	r4, r0
 801a128:	f7ff fff0 	bl	801a10c <__sfp_lock_acquire>
 801a12c:	6a23      	ldr	r3, [r4, #32]
 801a12e:	b11b      	cbz	r3, 801a138 <__sinit+0x14>
 801a130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a134:	f7ff bff0 	b.w	801a118 <__sfp_lock_release>
 801a138:	4b04      	ldr	r3, [pc, #16]	@ (801a14c <__sinit+0x28>)
 801a13a:	6223      	str	r3, [r4, #32]
 801a13c:	4b04      	ldr	r3, [pc, #16]	@ (801a150 <__sinit+0x2c>)
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	2b00      	cmp	r3, #0
 801a142:	d1f5      	bne.n	801a130 <__sinit+0xc>
 801a144:	f7ff ffc4 	bl	801a0d0 <global_stdio_init.part.0>
 801a148:	e7f2      	b.n	801a130 <__sinit+0xc>
 801a14a:	bf00      	nop
 801a14c:	0801a091 	.word	0x0801a091
 801a150:	2000a69c 	.word	0x2000a69c

0801a154 <_fwalk_sglue>:
 801a154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a158:	4607      	mov	r7, r0
 801a15a:	4688      	mov	r8, r1
 801a15c:	4614      	mov	r4, r2
 801a15e:	2600      	movs	r6, #0
 801a160:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a164:	f1b9 0901 	subs.w	r9, r9, #1
 801a168:	d505      	bpl.n	801a176 <_fwalk_sglue+0x22>
 801a16a:	6824      	ldr	r4, [r4, #0]
 801a16c:	2c00      	cmp	r4, #0
 801a16e:	d1f7      	bne.n	801a160 <_fwalk_sglue+0xc>
 801a170:	4630      	mov	r0, r6
 801a172:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a176:	89ab      	ldrh	r3, [r5, #12]
 801a178:	2b01      	cmp	r3, #1
 801a17a:	d907      	bls.n	801a18c <_fwalk_sglue+0x38>
 801a17c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a180:	3301      	adds	r3, #1
 801a182:	d003      	beq.n	801a18c <_fwalk_sglue+0x38>
 801a184:	4629      	mov	r1, r5
 801a186:	4638      	mov	r0, r7
 801a188:	47c0      	blx	r8
 801a18a:	4306      	orrs	r6, r0
 801a18c:	3568      	adds	r5, #104	@ 0x68
 801a18e:	e7e9      	b.n	801a164 <_fwalk_sglue+0x10>

0801a190 <iprintf>:
 801a190:	b40f      	push	{r0, r1, r2, r3}
 801a192:	b507      	push	{r0, r1, r2, lr}
 801a194:	4906      	ldr	r1, [pc, #24]	@ (801a1b0 <iprintf+0x20>)
 801a196:	ab04      	add	r3, sp, #16
 801a198:	6808      	ldr	r0, [r1, #0]
 801a19a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a19e:	6881      	ldr	r1, [r0, #8]
 801a1a0:	9301      	str	r3, [sp, #4]
 801a1a2:	f7ff fa77 	bl	8019694 <_vfiprintf_r>
 801a1a6:	b003      	add	sp, #12
 801a1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a1ac:	b004      	add	sp, #16
 801a1ae:	4770      	bx	lr
 801a1b0:	20000160 	.word	0x20000160

0801a1b4 <putchar>:
 801a1b4:	4b02      	ldr	r3, [pc, #8]	@ (801a1c0 <putchar+0xc>)
 801a1b6:	4601      	mov	r1, r0
 801a1b8:	6818      	ldr	r0, [r3, #0]
 801a1ba:	6882      	ldr	r2, [r0, #8]
 801a1bc:	f003 baf8 	b.w	801d7b0 <_putc_r>
 801a1c0:	20000160 	.word	0x20000160

0801a1c4 <_puts_r>:
 801a1c4:	6a03      	ldr	r3, [r0, #32]
 801a1c6:	b570      	push	{r4, r5, r6, lr}
 801a1c8:	6884      	ldr	r4, [r0, #8]
 801a1ca:	4605      	mov	r5, r0
 801a1cc:	460e      	mov	r6, r1
 801a1ce:	b90b      	cbnz	r3, 801a1d4 <_puts_r+0x10>
 801a1d0:	f7ff ffa8 	bl	801a124 <__sinit>
 801a1d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a1d6:	07db      	lsls	r3, r3, #31
 801a1d8:	d405      	bmi.n	801a1e6 <_puts_r+0x22>
 801a1da:	89a3      	ldrh	r3, [r4, #12]
 801a1dc:	0598      	lsls	r0, r3, #22
 801a1de:	d402      	bmi.n	801a1e6 <_puts_r+0x22>
 801a1e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a1e2:	f000 fa6a 	bl	801a6ba <__retarget_lock_acquire_recursive>
 801a1e6:	89a3      	ldrh	r3, [r4, #12]
 801a1e8:	0719      	lsls	r1, r3, #28
 801a1ea:	d502      	bpl.n	801a1f2 <_puts_r+0x2e>
 801a1ec:	6923      	ldr	r3, [r4, #16]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d135      	bne.n	801a25e <_puts_r+0x9a>
 801a1f2:	4621      	mov	r1, r4
 801a1f4:	4628      	mov	r0, r5
 801a1f6:	f000 f915 	bl	801a424 <__swsetup_r>
 801a1fa:	b380      	cbz	r0, 801a25e <_puts_r+0x9a>
 801a1fc:	f04f 35ff 	mov.w	r5, #4294967295
 801a200:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a202:	07da      	lsls	r2, r3, #31
 801a204:	d405      	bmi.n	801a212 <_puts_r+0x4e>
 801a206:	89a3      	ldrh	r3, [r4, #12]
 801a208:	059b      	lsls	r3, r3, #22
 801a20a:	d402      	bmi.n	801a212 <_puts_r+0x4e>
 801a20c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a20e:	f000 fa55 	bl	801a6bc <__retarget_lock_release_recursive>
 801a212:	4628      	mov	r0, r5
 801a214:	bd70      	pop	{r4, r5, r6, pc}
 801a216:	2b00      	cmp	r3, #0
 801a218:	da04      	bge.n	801a224 <_puts_r+0x60>
 801a21a:	69a2      	ldr	r2, [r4, #24]
 801a21c:	429a      	cmp	r2, r3
 801a21e:	dc17      	bgt.n	801a250 <_puts_r+0x8c>
 801a220:	290a      	cmp	r1, #10
 801a222:	d015      	beq.n	801a250 <_puts_r+0x8c>
 801a224:	6823      	ldr	r3, [r4, #0]
 801a226:	1c5a      	adds	r2, r3, #1
 801a228:	6022      	str	r2, [r4, #0]
 801a22a:	7019      	strb	r1, [r3, #0]
 801a22c:	68a3      	ldr	r3, [r4, #8]
 801a22e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a232:	3b01      	subs	r3, #1
 801a234:	60a3      	str	r3, [r4, #8]
 801a236:	2900      	cmp	r1, #0
 801a238:	d1ed      	bne.n	801a216 <_puts_r+0x52>
 801a23a:	2b00      	cmp	r3, #0
 801a23c:	da11      	bge.n	801a262 <_puts_r+0x9e>
 801a23e:	4622      	mov	r2, r4
 801a240:	210a      	movs	r1, #10
 801a242:	4628      	mov	r0, r5
 801a244:	f000 f8af 	bl	801a3a6 <__swbuf_r>
 801a248:	3001      	adds	r0, #1
 801a24a:	d0d7      	beq.n	801a1fc <_puts_r+0x38>
 801a24c:	250a      	movs	r5, #10
 801a24e:	e7d7      	b.n	801a200 <_puts_r+0x3c>
 801a250:	4622      	mov	r2, r4
 801a252:	4628      	mov	r0, r5
 801a254:	f000 f8a7 	bl	801a3a6 <__swbuf_r>
 801a258:	3001      	adds	r0, #1
 801a25a:	d1e7      	bne.n	801a22c <_puts_r+0x68>
 801a25c:	e7ce      	b.n	801a1fc <_puts_r+0x38>
 801a25e:	3e01      	subs	r6, #1
 801a260:	e7e4      	b.n	801a22c <_puts_r+0x68>
 801a262:	6823      	ldr	r3, [r4, #0]
 801a264:	1c5a      	adds	r2, r3, #1
 801a266:	6022      	str	r2, [r4, #0]
 801a268:	220a      	movs	r2, #10
 801a26a:	701a      	strb	r2, [r3, #0]
 801a26c:	e7ee      	b.n	801a24c <_puts_r+0x88>
	...

0801a270 <puts>:
 801a270:	4b02      	ldr	r3, [pc, #8]	@ (801a27c <puts+0xc>)
 801a272:	4601      	mov	r1, r0
 801a274:	6818      	ldr	r0, [r3, #0]
 801a276:	f7ff bfa5 	b.w	801a1c4 <_puts_r>
 801a27a:	bf00      	nop
 801a27c:	20000160 	.word	0x20000160

0801a280 <siprintf>:
 801a280:	b40e      	push	{r1, r2, r3}
 801a282:	b510      	push	{r4, lr}
 801a284:	b09d      	sub	sp, #116	@ 0x74
 801a286:	ab1f      	add	r3, sp, #124	@ 0x7c
 801a288:	9002      	str	r0, [sp, #8]
 801a28a:	9006      	str	r0, [sp, #24]
 801a28c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a290:	480a      	ldr	r0, [pc, #40]	@ (801a2bc <siprintf+0x3c>)
 801a292:	9107      	str	r1, [sp, #28]
 801a294:	9104      	str	r1, [sp, #16]
 801a296:	490a      	ldr	r1, [pc, #40]	@ (801a2c0 <siprintf+0x40>)
 801a298:	f853 2b04 	ldr.w	r2, [r3], #4
 801a29c:	9105      	str	r1, [sp, #20]
 801a29e:	2400      	movs	r4, #0
 801a2a0:	a902      	add	r1, sp, #8
 801a2a2:	6800      	ldr	r0, [r0, #0]
 801a2a4:	9301      	str	r3, [sp, #4]
 801a2a6:	941b      	str	r4, [sp, #108]	@ 0x6c
 801a2a8:	f002 fd48 	bl	801cd3c <_svfiprintf_r>
 801a2ac:	9b02      	ldr	r3, [sp, #8]
 801a2ae:	701c      	strb	r4, [r3, #0]
 801a2b0:	b01d      	add	sp, #116	@ 0x74
 801a2b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a2b6:	b003      	add	sp, #12
 801a2b8:	4770      	bx	lr
 801a2ba:	bf00      	nop
 801a2bc:	20000160 	.word	0x20000160
 801a2c0:	ffff0208 	.word	0xffff0208

0801a2c4 <siscanf>:
 801a2c4:	b40e      	push	{r1, r2, r3}
 801a2c6:	b570      	push	{r4, r5, r6, lr}
 801a2c8:	b09d      	sub	sp, #116	@ 0x74
 801a2ca:	ac21      	add	r4, sp, #132	@ 0x84
 801a2cc:	2500      	movs	r5, #0
 801a2ce:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801a2d2:	f854 6b04 	ldr.w	r6, [r4], #4
 801a2d6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a2da:	951b      	str	r5, [sp, #108]	@ 0x6c
 801a2dc:	9002      	str	r0, [sp, #8]
 801a2de:	9006      	str	r0, [sp, #24]
 801a2e0:	f7e5 ffc6 	bl	8000270 <strlen>
 801a2e4:	4b0b      	ldr	r3, [pc, #44]	@ (801a314 <siscanf+0x50>)
 801a2e6:	9003      	str	r0, [sp, #12]
 801a2e8:	9007      	str	r0, [sp, #28]
 801a2ea:	480b      	ldr	r0, [pc, #44]	@ (801a318 <siscanf+0x54>)
 801a2ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a2ee:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a2f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a2f6:	4632      	mov	r2, r6
 801a2f8:	4623      	mov	r3, r4
 801a2fa:	a902      	add	r1, sp, #8
 801a2fc:	6800      	ldr	r0, [r0, #0]
 801a2fe:	950f      	str	r5, [sp, #60]	@ 0x3c
 801a300:	9514      	str	r5, [sp, #80]	@ 0x50
 801a302:	9401      	str	r4, [sp, #4]
 801a304:	f002 fe70 	bl	801cfe8 <__ssvfiscanf_r>
 801a308:	b01d      	add	sp, #116	@ 0x74
 801a30a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a30e:	b003      	add	sp, #12
 801a310:	4770      	bx	lr
 801a312:	bf00      	nop
 801a314:	0801a33f 	.word	0x0801a33f
 801a318:	20000160 	.word	0x20000160

0801a31c <__sread>:
 801a31c:	b510      	push	{r4, lr}
 801a31e:	460c      	mov	r4, r1
 801a320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a324:	f000 f97a 	bl	801a61c <_read_r>
 801a328:	2800      	cmp	r0, #0
 801a32a:	bfab      	itete	ge
 801a32c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a32e:	89a3      	ldrhlt	r3, [r4, #12]
 801a330:	181b      	addge	r3, r3, r0
 801a332:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a336:	bfac      	ite	ge
 801a338:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a33a:	81a3      	strhlt	r3, [r4, #12]
 801a33c:	bd10      	pop	{r4, pc}

0801a33e <__seofread>:
 801a33e:	2000      	movs	r0, #0
 801a340:	4770      	bx	lr

0801a342 <__swrite>:
 801a342:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a346:	461f      	mov	r7, r3
 801a348:	898b      	ldrh	r3, [r1, #12]
 801a34a:	05db      	lsls	r3, r3, #23
 801a34c:	4605      	mov	r5, r0
 801a34e:	460c      	mov	r4, r1
 801a350:	4616      	mov	r6, r2
 801a352:	d505      	bpl.n	801a360 <__swrite+0x1e>
 801a354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a358:	2302      	movs	r3, #2
 801a35a:	2200      	movs	r2, #0
 801a35c:	f000 f94c 	bl	801a5f8 <_lseek_r>
 801a360:	89a3      	ldrh	r3, [r4, #12]
 801a362:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a366:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a36a:	81a3      	strh	r3, [r4, #12]
 801a36c:	4632      	mov	r2, r6
 801a36e:	463b      	mov	r3, r7
 801a370:	4628      	mov	r0, r5
 801a372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a376:	f000 b963 	b.w	801a640 <_write_r>

0801a37a <__sseek>:
 801a37a:	b510      	push	{r4, lr}
 801a37c:	460c      	mov	r4, r1
 801a37e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a382:	f000 f939 	bl	801a5f8 <_lseek_r>
 801a386:	1c43      	adds	r3, r0, #1
 801a388:	89a3      	ldrh	r3, [r4, #12]
 801a38a:	bf15      	itete	ne
 801a38c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a38e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a392:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a396:	81a3      	strheq	r3, [r4, #12]
 801a398:	bf18      	it	ne
 801a39a:	81a3      	strhne	r3, [r4, #12]
 801a39c:	bd10      	pop	{r4, pc}

0801a39e <__sclose>:
 801a39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a3a2:	f000 b8bb 	b.w	801a51c <_close_r>

0801a3a6 <__swbuf_r>:
 801a3a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3a8:	460e      	mov	r6, r1
 801a3aa:	4614      	mov	r4, r2
 801a3ac:	4605      	mov	r5, r0
 801a3ae:	b118      	cbz	r0, 801a3b8 <__swbuf_r+0x12>
 801a3b0:	6a03      	ldr	r3, [r0, #32]
 801a3b2:	b90b      	cbnz	r3, 801a3b8 <__swbuf_r+0x12>
 801a3b4:	f7ff feb6 	bl	801a124 <__sinit>
 801a3b8:	69a3      	ldr	r3, [r4, #24]
 801a3ba:	60a3      	str	r3, [r4, #8]
 801a3bc:	89a3      	ldrh	r3, [r4, #12]
 801a3be:	071a      	lsls	r2, r3, #28
 801a3c0:	d501      	bpl.n	801a3c6 <__swbuf_r+0x20>
 801a3c2:	6923      	ldr	r3, [r4, #16]
 801a3c4:	b943      	cbnz	r3, 801a3d8 <__swbuf_r+0x32>
 801a3c6:	4621      	mov	r1, r4
 801a3c8:	4628      	mov	r0, r5
 801a3ca:	f000 f82b 	bl	801a424 <__swsetup_r>
 801a3ce:	b118      	cbz	r0, 801a3d8 <__swbuf_r+0x32>
 801a3d0:	f04f 37ff 	mov.w	r7, #4294967295
 801a3d4:	4638      	mov	r0, r7
 801a3d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a3d8:	6823      	ldr	r3, [r4, #0]
 801a3da:	6922      	ldr	r2, [r4, #16]
 801a3dc:	1a98      	subs	r0, r3, r2
 801a3de:	6963      	ldr	r3, [r4, #20]
 801a3e0:	b2f6      	uxtb	r6, r6
 801a3e2:	4283      	cmp	r3, r0
 801a3e4:	4637      	mov	r7, r6
 801a3e6:	dc05      	bgt.n	801a3f4 <__swbuf_r+0x4e>
 801a3e8:	4621      	mov	r1, r4
 801a3ea:	4628      	mov	r0, r5
 801a3ec:	f003 f944 	bl	801d678 <_fflush_r>
 801a3f0:	2800      	cmp	r0, #0
 801a3f2:	d1ed      	bne.n	801a3d0 <__swbuf_r+0x2a>
 801a3f4:	68a3      	ldr	r3, [r4, #8]
 801a3f6:	3b01      	subs	r3, #1
 801a3f8:	60a3      	str	r3, [r4, #8]
 801a3fa:	6823      	ldr	r3, [r4, #0]
 801a3fc:	1c5a      	adds	r2, r3, #1
 801a3fe:	6022      	str	r2, [r4, #0]
 801a400:	701e      	strb	r6, [r3, #0]
 801a402:	6962      	ldr	r2, [r4, #20]
 801a404:	1c43      	adds	r3, r0, #1
 801a406:	429a      	cmp	r2, r3
 801a408:	d004      	beq.n	801a414 <__swbuf_r+0x6e>
 801a40a:	89a3      	ldrh	r3, [r4, #12]
 801a40c:	07db      	lsls	r3, r3, #31
 801a40e:	d5e1      	bpl.n	801a3d4 <__swbuf_r+0x2e>
 801a410:	2e0a      	cmp	r6, #10
 801a412:	d1df      	bne.n	801a3d4 <__swbuf_r+0x2e>
 801a414:	4621      	mov	r1, r4
 801a416:	4628      	mov	r0, r5
 801a418:	f003 f92e 	bl	801d678 <_fflush_r>
 801a41c:	2800      	cmp	r0, #0
 801a41e:	d0d9      	beq.n	801a3d4 <__swbuf_r+0x2e>
 801a420:	e7d6      	b.n	801a3d0 <__swbuf_r+0x2a>
	...

0801a424 <__swsetup_r>:
 801a424:	b538      	push	{r3, r4, r5, lr}
 801a426:	4b29      	ldr	r3, [pc, #164]	@ (801a4cc <__swsetup_r+0xa8>)
 801a428:	4605      	mov	r5, r0
 801a42a:	6818      	ldr	r0, [r3, #0]
 801a42c:	460c      	mov	r4, r1
 801a42e:	b118      	cbz	r0, 801a438 <__swsetup_r+0x14>
 801a430:	6a03      	ldr	r3, [r0, #32]
 801a432:	b90b      	cbnz	r3, 801a438 <__swsetup_r+0x14>
 801a434:	f7ff fe76 	bl	801a124 <__sinit>
 801a438:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a43c:	0719      	lsls	r1, r3, #28
 801a43e:	d422      	bmi.n	801a486 <__swsetup_r+0x62>
 801a440:	06da      	lsls	r2, r3, #27
 801a442:	d407      	bmi.n	801a454 <__swsetup_r+0x30>
 801a444:	2209      	movs	r2, #9
 801a446:	602a      	str	r2, [r5, #0]
 801a448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a44c:	81a3      	strh	r3, [r4, #12]
 801a44e:	f04f 30ff 	mov.w	r0, #4294967295
 801a452:	e033      	b.n	801a4bc <__swsetup_r+0x98>
 801a454:	0758      	lsls	r0, r3, #29
 801a456:	d512      	bpl.n	801a47e <__swsetup_r+0x5a>
 801a458:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a45a:	b141      	cbz	r1, 801a46e <__swsetup_r+0x4a>
 801a45c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a460:	4299      	cmp	r1, r3
 801a462:	d002      	beq.n	801a46a <__swsetup_r+0x46>
 801a464:	4628      	mov	r0, r5
 801a466:	f000 ffaf 	bl	801b3c8 <_free_r>
 801a46a:	2300      	movs	r3, #0
 801a46c:	6363      	str	r3, [r4, #52]	@ 0x34
 801a46e:	89a3      	ldrh	r3, [r4, #12]
 801a470:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a474:	81a3      	strh	r3, [r4, #12]
 801a476:	2300      	movs	r3, #0
 801a478:	6063      	str	r3, [r4, #4]
 801a47a:	6923      	ldr	r3, [r4, #16]
 801a47c:	6023      	str	r3, [r4, #0]
 801a47e:	89a3      	ldrh	r3, [r4, #12]
 801a480:	f043 0308 	orr.w	r3, r3, #8
 801a484:	81a3      	strh	r3, [r4, #12]
 801a486:	6923      	ldr	r3, [r4, #16]
 801a488:	b94b      	cbnz	r3, 801a49e <__swsetup_r+0x7a>
 801a48a:	89a3      	ldrh	r3, [r4, #12]
 801a48c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a494:	d003      	beq.n	801a49e <__swsetup_r+0x7a>
 801a496:	4621      	mov	r1, r4
 801a498:	4628      	mov	r0, r5
 801a49a:	f003 f94d 	bl	801d738 <__smakebuf_r>
 801a49e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4a2:	f013 0201 	ands.w	r2, r3, #1
 801a4a6:	d00a      	beq.n	801a4be <__swsetup_r+0x9a>
 801a4a8:	2200      	movs	r2, #0
 801a4aa:	60a2      	str	r2, [r4, #8]
 801a4ac:	6962      	ldr	r2, [r4, #20]
 801a4ae:	4252      	negs	r2, r2
 801a4b0:	61a2      	str	r2, [r4, #24]
 801a4b2:	6922      	ldr	r2, [r4, #16]
 801a4b4:	b942      	cbnz	r2, 801a4c8 <__swsetup_r+0xa4>
 801a4b6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a4ba:	d1c5      	bne.n	801a448 <__swsetup_r+0x24>
 801a4bc:	bd38      	pop	{r3, r4, r5, pc}
 801a4be:	0799      	lsls	r1, r3, #30
 801a4c0:	bf58      	it	pl
 801a4c2:	6962      	ldrpl	r2, [r4, #20]
 801a4c4:	60a2      	str	r2, [r4, #8]
 801a4c6:	e7f4      	b.n	801a4b2 <__swsetup_r+0x8e>
 801a4c8:	2000      	movs	r0, #0
 801a4ca:	e7f7      	b.n	801a4bc <__swsetup_r+0x98>
 801a4cc:	20000160 	.word	0x20000160

0801a4d0 <memmove>:
 801a4d0:	4288      	cmp	r0, r1
 801a4d2:	b510      	push	{r4, lr}
 801a4d4:	eb01 0402 	add.w	r4, r1, r2
 801a4d8:	d902      	bls.n	801a4e0 <memmove+0x10>
 801a4da:	4284      	cmp	r4, r0
 801a4dc:	4623      	mov	r3, r4
 801a4de:	d807      	bhi.n	801a4f0 <memmove+0x20>
 801a4e0:	1e43      	subs	r3, r0, #1
 801a4e2:	42a1      	cmp	r1, r4
 801a4e4:	d008      	beq.n	801a4f8 <memmove+0x28>
 801a4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a4ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a4ee:	e7f8      	b.n	801a4e2 <memmove+0x12>
 801a4f0:	4402      	add	r2, r0
 801a4f2:	4601      	mov	r1, r0
 801a4f4:	428a      	cmp	r2, r1
 801a4f6:	d100      	bne.n	801a4fa <memmove+0x2a>
 801a4f8:	bd10      	pop	{r4, pc}
 801a4fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a4fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a502:	e7f7      	b.n	801a4f4 <memmove+0x24>

0801a504 <memset>:
 801a504:	4402      	add	r2, r0
 801a506:	4603      	mov	r3, r0
 801a508:	4293      	cmp	r3, r2
 801a50a:	d100      	bne.n	801a50e <memset+0xa>
 801a50c:	4770      	bx	lr
 801a50e:	f803 1b01 	strb.w	r1, [r3], #1
 801a512:	e7f9      	b.n	801a508 <memset+0x4>

0801a514 <_localeconv_r>:
 801a514:	4800      	ldr	r0, [pc, #0]	@ (801a518 <_localeconv_r+0x4>)
 801a516:	4770      	bx	lr
 801a518:	200002a0 	.word	0x200002a0

0801a51c <_close_r>:
 801a51c:	b538      	push	{r3, r4, r5, lr}
 801a51e:	4d06      	ldr	r5, [pc, #24]	@ (801a538 <_close_r+0x1c>)
 801a520:	2300      	movs	r3, #0
 801a522:	4604      	mov	r4, r0
 801a524:	4608      	mov	r0, r1
 801a526:	602b      	str	r3, [r5, #0]
 801a528:	f7ef f89c 	bl	8009664 <_close>
 801a52c:	1c43      	adds	r3, r0, #1
 801a52e:	d102      	bne.n	801a536 <_close_r+0x1a>
 801a530:	682b      	ldr	r3, [r5, #0]
 801a532:	b103      	cbz	r3, 801a536 <_close_r+0x1a>
 801a534:	6023      	str	r3, [r4, #0]
 801a536:	bd38      	pop	{r3, r4, r5, pc}
 801a538:	2000a6a0 	.word	0x2000a6a0

0801a53c <_reclaim_reent>:
 801a53c:	4b2d      	ldr	r3, [pc, #180]	@ (801a5f4 <_reclaim_reent+0xb8>)
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	4283      	cmp	r3, r0
 801a542:	b570      	push	{r4, r5, r6, lr}
 801a544:	4604      	mov	r4, r0
 801a546:	d053      	beq.n	801a5f0 <_reclaim_reent+0xb4>
 801a548:	69c3      	ldr	r3, [r0, #28]
 801a54a:	b31b      	cbz	r3, 801a594 <_reclaim_reent+0x58>
 801a54c:	68db      	ldr	r3, [r3, #12]
 801a54e:	b163      	cbz	r3, 801a56a <_reclaim_reent+0x2e>
 801a550:	2500      	movs	r5, #0
 801a552:	69e3      	ldr	r3, [r4, #28]
 801a554:	68db      	ldr	r3, [r3, #12]
 801a556:	5959      	ldr	r1, [r3, r5]
 801a558:	b9b1      	cbnz	r1, 801a588 <_reclaim_reent+0x4c>
 801a55a:	3504      	adds	r5, #4
 801a55c:	2d80      	cmp	r5, #128	@ 0x80
 801a55e:	d1f8      	bne.n	801a552 <_reclaim_reent+0x16>
 801a560:	69e3      	ldr	r3, [r4, #28]
 801a562:	4620      	mov	r0, r4
 801a564:	68d9      	ldr	r1, [r3, #12]
 801a566:	f000 ff2f 	bl	801b3c8 <_free_r>
 801a56a:	69e3      	ldr	r3, [r4, #28]
 801a56c:	6819      	ldr	r1, [r3, #0]
 801a56e:	b111      	cbz	r1, 801a576 <_reclaim_reent+0x3a>
 801a570:	4620      	mov	r0, r4
 801a572:	f000 ff29 	bl	801b3c8 <_free_r>
 801a576:	69e3      	ldr	r3, [r4, #28]
 801a578:	689d      	ldr	r5, [r3, #8]
 801a57a:	b15d      	cbz	r5, 801a594 <_reclaim_reent+0x58>
 801a57c:	4629      	mov	r1, r5
 801a57e:	4620      	mov	r0, r4
 801a580:	682d      	ldr	r5, [r5, #0]
 801a582:	f000 ff21 	bl	801b3c8 <_free_r>
 801a586:	e7f8      	b.n	801a57a <_reclaim_reent+0x3e>
 801a588:	680e      	ldr	r6, [r1, #0]
 801a58a:	4620      	mov	r0, r4
 801a58c:	f000 ff1c 	bl	801b3c8 <_free_r>
 801a590:	4631      	mov	r1, r6
 801a592:	e7e1      	b.n	801a558 <_reclaim_reent+0x1c>
 801a594:	6961      	ldr	r1, [r4, #20]
 801a596:	b111      	cbz	r1, 801a59e <_reclaim_reent+0x62>
 801a598:	4620      	mov	r0, r4
 801a59a:	f000 ff15 	bl	801b3c8 <_free_r>
 801a59e:	69e1      	ldr	r1, [r4, #28]
 801a5a0:	b111      	cbz	r1, 801a5a8 <_reclaim_reent+0x6c>
 801a5a2:	4620      	mov	r0, r4
 801a5a4:	f000 ff10 	bl	801b3c8 <_free_r>
 801a5a8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a5aa:	b111      	cbz	r1, 801a5b2 <_reclaim_reent+0x76>
 801a5ac:	4620      	mov	r0, r4
 801a5ae:	f000 ff0b 	bl	801b3c8 <_free_r>
 801a5b2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a5b4:	b111      	cbz	r1, 801a5bc <_reclaim_reent+0x80>
 801a5b6:	4620      	mov	r0, r4
 801a5b8:	f000 ff06 	bl	801b3c8 <_free_r>
 801a5bc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801a5be:	b111      	cbz	r1, 801a5c6 <_reclaim_reent+0x8a>
 801a5c0:	4620      	mov	r0, r4
 801a5c2:	f000 ff01 	bl	801b3c8 <_free_r>
 801a5c6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801a5c8:	b111      	cbz	r1, 801a5d0 <_reclaim_reent+0x94>
 801a5ca:	4620      	mov	r0, r4
 801a5cc:	f000 fefc 	bl	801b3c8 <_free_r>
 801a5d0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801a5d2:	b111      	cbz	r1, 801a5da <_reclaim_reent+0x9e>
 801a5d4:	4620      	mov	r0, r4
 801a5d6:	f000 fef7 	bl	801b3c8 <_free_r>
 801a5da:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801a5dc:	b111      	cbz	r1, 801a5e4 <_reclaim_reent+0xa8>
 801a5de:	4620      	mov	r0, r4
 801a5e0:	f000 fef2 	bl	801b3c8 <_free_r>
 801a5e4:	6a23      	ldr	r3, [r4, #32]
 801a5e6:	b11b      	cbz	r3, 801a5f0 <_reclaim_reent+0xb4>
 801a5e8:	4620      	mov	r0, r4
 801a5ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a5ee:	4718      	bx	r3
 801a5f0:	bd70      	pop	{r4, r5, r6, pc}
 801a5f2:	bf00      	nop
 801a5f4:	20000160 	.word	0x20000160

0801a5f8 <_lseek_r>:
 801a5f8:	b538      	push	{r3, r4, r5, lr}
 801a5fa:	4d07      	ldr	r5, [pc, #28]	@ (801a618 <_lseek_r+0x20>)
 801a5fc:	4604      	mov	r4, r0
 801a5fe:	4608      	mov	r0, r1
 801a600:	4611      	mov	r1, r2
 801a602:	2200      	movs	r2, #0
 801a604:	602a      	str	r2, [r5, #0]
 801a606:	461a      	mov	r2, r3
 801a608:	f7ef f853 	bl	80096b2 <_lseek>
 801a60c:	1c43      	adds	r3, r0, #1
 801a60e:	d102      	bne.n	801a616 <_lseek_r+0x1e>
 801a610:	682b      	ldr	r3, [r5, #0]
 801a612:	b103      	cbz	r3, 801a616 <_lseek_r+0x1e>
 801a614:	6023      	str	r3, [r4, #0]
 801a616:	bd38      	pop	{r3, r4, r5, pc}
 801a618:	2000a6a0 	.word	0x2000a6a0

0801a61c <_read_r>:
 801a61c:	b538      	push	{r3, r4, r5, lr}
 801a61e:	4d07      	ldr	r5, [pc, #28]	@ (801a63c <_read_r+0x20>)
 801a620:	4604      	mov	r4, r0
 801a622:	4608      	mov	r0, r1
 801a624:	4611      	mov	r1, r2
 801a626:	2200      	movs	r2, #0
 801a628:	602a      	str	r2, [r5, #0]
 801a62a:	461a      	mov	r2, r3
 801a62c:	f7ee fffd 	bl	800962a <_read>
 801a630:	1c43      	adds	r3, r0, #1
 801a632:	d102      	bne.n	801a63a <_read_r+0x1e>
 801a634:	682b      	ldr	r3, [r5, #0]
 801a636:	b103      	cbz	r3, 801a63a <_read_r+0x1e>
 801a638:	6023      	str	r3, [r4, #0]
 801a63a:	bd38      	pop	{r3, r4, r5, pc}
 801a63c:	2000a6a0 	.word	0x2000a6a0

0801a640 <_write_r>:
 801a640:	b538      	push	{r3, r4, r5, lr}
 801a642:	4d07      	ldr	r5, [pc, #28]	@ (801a660 <_write_r+0x20>)
 801a644:	4604      	mov	r4, r0
 801a646:	4608      	mov	r0, r1
 801a648:	4611      	mov	r1, r2
 801a64a:	2200      	movs	r2, #0
 801a64c:	602a      	str	r2, [r5, #0]
 801a64e:	461a      	mov	r2, r3
 801a650:	f7ed ff4a 	bl	80084e8 <_write>
 801a654:	1c43      	adds	r3, r0, #1
 801a656:	d102      	bne.n	801a65e <_write_r+0x1e>
 801a658:	682b      	ldr	r3, [r5, #0]
 801a65a:	b103      	cbz	r3, 801a65e <_write_r+0x1e>
 801a65c:	6023      	str	r3, [r4, #0]
 801a65e:	bd38      	pop	{r3, r4, r5, pc}
 801a660:	2000a6a0 	.word	0x2000a6a0

0801a664 <__errno>:
 801a664:	4b01      	ldr	r3, [pc, #4]	@ (801a66c <__errno+0x8>)
 801a666:	6818      	ldr	r0, [r3, #0]
 801a668:	4770      	bx	lr
 801a66a:	bf00      	nop
 801a66c:	20000160 	.word	0x20000160

0801a670 <__libc_init_array>:
 801a670:	b570      	push	{r4, r5, r6, lr}
 801a672:	4d0d      	ldr	r5, [pc, #52]	@ (801a6a8 <__libc_init_array+0x38>)
 801a674:	4c0d      	ldr	r4, [pc, #52]	@ (801a6ac <__libc_init_array+0x3c>)
 801a676:	1b64      	subs	r4, r4, r5
 801a678:	10a4      	asrs	r4, r4, #2
 801a67a:	2600      	movs	r6, #0
 801a67c:	42a6      	cmp	r6, r4
 801a67e:	d109      	bne.n	801a694 <__libc_init_array+0x24>
 801a680:	4d0b      	ldr	r5, [pc, #44]	@ (801a6b0 <__libc_init_array+0x40>)
 801a682:	4c0c      	ldr	r4, [pc, #48]	@ (801a6b4 <__libc_init_array+0x44>)
 801a684:	f003 fdb8 	bl	801e1f8 <_init>
 801a688:	1b64      	subs	r4, r4, r5
 801a68a:	10a4      	asrs	r4, r4, #2
 801a68c:	2600      	movs	r6, #0
 801a68e:	42a6      	cmp	r6, r4
 801a690:	d105      	bne.n	801a69e <__libc_init_array+0x2e>
 801a692:	bd70      	pop	{r4, r5, r6, pc}
 801a694:	f855 3b04 	ldr.w	r3, [r5], #4
 801a698:	4798      	blx	r3
 801a69a:	3601      	adds	r6, #1
 801a69c:	e7ee      	b.n	801a67c <__libc_init_array+0xc>
 801a69e:	f855 3b04 	ldr.w	r3, [r5], #4
 801a6a2:	4798      	blx	r3
 801a6a4:	3601      	adds	r6, #1
 801a6a6:	e7f2      	b.n	801a68e <__libc_init_array+0x1e>
 801a6a8:	08020ab4 	.word	0x08020ab4
 801a6ac:	08020ab4 	.word	0x08020ab4
 801a6b0:	08020ab4 	.word	0x08020ab4
 801a6b4:	08020ab8 	.word	0x08020ab8

0801a6b8 <__retarget_lock_init_recursive>:
 801a6b8:	4770      	bx	lr

0801a6ba <__retarget_lock_acquire_recursive>:
 801a6ba:	4770      	bx	lr

0801a6bc <__retarget_lock_release_recursive>:
 801a6bc:	4770      	bx	lr

0801a6be <memcpy>:
 801a6be:	440a      	add	r2, r1
 801a6c0:	4291      	cmp	r1, r2
 801a6c2:	f100 33ff 	add.w	r3, r0, #4294967295
 801a6c6:	d100      	bne.n	801a6ca <memcpy+0xc>
 801a6c8:	4770      	bx	lr
 801a6ca:	b510      	push	{r4, lr}
 801a6cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a6d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a6d4:	4291      	cmp	r1, r2
 801a6d6:	d1f9      	bne.n	801a6cc <memcpy+0xe>
 801a6d8:	bd10      	pop	{r4, pc}
	...

0801a6dc <__assert_func>:
 801a6dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a6de:	4614      	mov	r4, r2
 801a6e0:	461a      	mov	r2, r3
 801a6e2:	4b09      	ldr	r3, [pc, #36]	@ (801a708 <__assert_func+0x2c>)
 801a6e4:	681b      	ldr	r3, [r3, #0]
 801a6e6:	4605      	mov	r5, r0
 801a6e8:	68d8      	ldr	r0, [r3, #12]
 801a6ea:	b14c      	cbz	r4, 801a700 <__assert_func+0x24>
 801a6ec:	4b07      	ldr	r3, [pc, #28]	@ (801a70c <__assert_func+0x30>)
 801a6ee:	9100      	str	r1, [sp, #0]
 801a6f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a6f4:	4906      	ldr	r1, [pc, #24]	@ (801a710 <__assert_func+0x34>)
 801a6f6:	462b      	mov	r3, r5
 801a6f8:	f002 ffe6 	bl	801d6c8 <fiprintf>
 801a6fc:	f003 f94c 	bl	801d998 <abort>
 801a700:	4b04      	ldr	r3, [pc, #16]	@ (801a714 <__assert_func+0x38>)
 801a702:	461c      	mov	r4, r3
 801a704:	e7f3      	b.n	801a6ee <__assert_func+0x12>
 801a706:	bf00      	nop
 801a708:	20000160 	.word	0x20000160
 801a70c:	08020290 	.word	0x08020290
 801a710:	0802029d 	.word	0x0802029d
 801a714:	080202cb 	.word	0x080202cb

0801a718 <quorem>:
 801a718:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a71c:	6903      	ldr	r3, [r0, #16]
 801a71e:	690c      	ldr	r4, [r1, #16]
 801a720:	42a3      	cmp	r3, r4
 801a722:	4607      	mov	r7, r0
 801a724:	db7e      	blt.n	801a824 <quorem+0x10c>
 801a726:	3c01      	subs	r4, #1
 801a728:	f101 0814 	add.w	r8, r1, #20
 801a72c:	00a3      	lsls	r3, r4, #2
 801a72e:	f100 0514 	add.w	r5, r0, #20
 801a732:	9300      	str	r3, [sp, #0]
 801a734:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a738:	9301      	str	r3, [sp, #4]
 801a73a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a73e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a742:	3301      	adds	r3, #1
 801a744:	429a      	cmp	r2, r3
 801a746:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a74a:	fbb2 f6f3 	udiv	r6, r2, r3
 801a74e:	d32e      	bcc.n	801a7ae <quorem+0x96>
 801a750:	f04f 0a00 	mov.w	sl, #0
 801a754:	46c4      	mov	ip, r8
 801a756:	46ae      	mov	lr, r5
 801a758:	46d3      	mov	fp, sl
 801a75a:	f85c 3b04 	ldr.w	r3, [ip], #4
 801a75e:	b298      	uxth	r0, r3
 801a760:	fb06 a000 	mla	r0, r6, r0, sl
 801a764:	0c02      	lsrs	r2, r0, #16
 801a766:	0c1b      	lsrs	r3, r3, #16
 801a768:	fb06 2303 	mla	r3, r6, r3, r2
 801a76c:	f8de 2000 	ldr.w	r2, [lr]
 801a770:	b280      	uxth	r0, r0
 801a772:	b292      	uxth	r2, r2
 801a774:	1a12      	subs	r2, r2, r0
 801a776:	445a      	add	r2, fp
 801a778:	f8de 0000 	ldr.w	r0, [lr]
 801a77c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801a780:	b29b      	uxth	r3, r3
 801a782:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801a786:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801a78a:	b292      	uxth	r2, r2
 801a78c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801a790:	45e1      	cmp	r9, ip
 801a792:	f84e 2b04 	str.w	r2, [lr], #4
 801a796:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801a79a:	d2de      	bcs.n	801a75a <quorem+0x42>
 801a79c:	9b00      	ldr	r3, [sp, #0]
 801a79e:	58eb      	ldr	r3, [r5, r3]
 801a7a0:	b92b      	cbnz	r3, 801a7ae <quorem+0x96>
 801a7a2:	9b01      	ldr	r3, [sp, #4]
 801a7a4:	3b04      	subs	r3, #4
 801a7a6:	429d      	cmp	r5, r3
 801a7a8:	461a      	mov	r2, r3
 801a7aa:	d32f      	bcc.n	801a80c <quorem+0xf4>
 801a7ac:	613c      	str	r4, [r7, #16]
 801a7ae:	4638      	mov	r0, r7
 801a7b0:	f001 f9c6 	bl	801bb40 <__mcmp>
 801a7b4:	2800      	cmp	r0, #0
 801a7b6:	db25      	blt.n	801a804 <quorem+0xec>
 801a7b8:	4629      	mov	r1, r5
 801a7ba:	2000      	movs	r0, #0
 801a7bc:	f858 2b04 	ldr.w	r2, [r8], #4
 801a7c0:	f8d1 c000 	ldr.w	ip, [r1]
 801a7c4:	fa1f fe82 	uxth.w	lr, r2
 801a7c8:	fa1f f38c 	uxth.w	r3, ip
 801a7cc:	eba3 030e 	sub.w	r3, r3, lr
 801a7d0:	4403      	add	r3, r0
 801a7d2:	0c12      	lsrs	r2, r2, #16
 801a7d4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801a7d8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801a7dc:	b29b      	uxth	r3, r3
 801a7de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a7e2:	45c1      	cmp	r9, r8
 801a7e4:	f841 3b04 	str.w	r3, [r1], #4
 801a7e8:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a7ec:	d2e6      	bcs.n	801a7bc <quorem+0xa4>
 801a7ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a7f2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a7f6:	b922      	cbnz	r2, 801a802 <quorem+0xea>
 801a7f8:	3b04      	subs	r3, #4
 801a7fa:	429d      	cmp	r5, r3
 801a7fc:	461a      	mov	r2, r3
 801a7fe:	d30b      	bcc.n	801a818 <quorem+0x100>
 801a800:	613c      	str	r4, [r7, #16]
 801a802:	3601      	adds	r6, #1
 801a804:	4630      	mov	r0, r6
 801a806:	b003      	add	sp, #12
 801a808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a80c:	6812      	ldr	r2, [r2, #0]
 801a80e:	3b04      	subs	r3, #4
 801a810:	2a00      	cmp	r2, #0
 801a812:	d1cb      	bne.n	801a7ac <quorem+0x94>
 801a814:	3c01      	subs	r4, #1
 801a816:	e7c6      	b.n	801a7a6 <quorem+0x8e>
 801a818:	6812      	ldr	r2, [r2, #0]
 801a81a:	3b04      	subs	r3, #4
 801a81c:	2a00      	cmp	r2, #0
 801a81e:	d1ef      	bne.n	801a800 <quorem+0xe8>
 801a820:	3c01      	subs	r4, #1
 801a822:	e7ea      	b.n	801a7fa <quorem+0xe2>
 801a824:	2000      	movs	r0, #0
 801a826:	e7ee      	b.n	801a806 <quorem+0xee>

0801a828 <_dtoa_r>:
 801a828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a82c:	69c7      	ldr	r7, [r0, #28]
 801a82e:	b097      	sub	sp, #92	@ 0x5c
 801a830:	ed8d 0b04 	vstr	d0, [sp, #16]
 801a834:	ec55 4b10 	vmov	r4, r5, d0
 801a838:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801a83a:	9107      	str	r1, [sp, #28]
 801a83c:	4681      	mov	r9, r0
 801a83e:	920c      	str	r2, [sp, #48]	@ 0x30
 801a840:	9311      	str	r3, [sp, #68]	@ 0x44
 801a842:	b97f      	cbnz	r7, 801a864 <_dtoa_r+0x3c>
 801a844:	2010      	movs	r0, #16
 801a846:	f000 fe09 	bl	801b45c <malloc>
 801a84a:	4602      	mov	r2, r0
 801a84c:	f8c9 001c 	str.w	r0, [r9, #28]
 801a850:	b920      	cbnz	r0, 801a85c <_dtoa_r+0x34>
 801a852:	4ba9      	ldr	r3, [pc, #676]	@ (801aaf8 <_dtoa_r+0x2d0>)
 801a854:	21ef      	movs	r1, #239	@ 0xef
 801a856:	48a9      	ldr	r0, [pc, #676]	@ (801aafc <_dtoa_r+0x2d4>)
 801a858:	f7ff ff40 	bl	801a6dc <__assert_func>
 801a85c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801a860:	6007      	str	r7, [r0, #0]
 801a862:	60c7      	str	r7, [r0, #12]
 801a864:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a868:	6819      	ldr	r1, [r3, #0]
 801a86a:	b159      	cbz	r1, 801a884 <_dtoa_r+0x5c>
 801a86c:	685a      	ldr	r2, [r3, #4]
 801a86e:	604a      	str	r2, [r1, #4]
 801a870:	2301      	movs	r3, #1
 801a872:	4093      	lsls	r3, r2
 801a874:	608b      	str	r3, [r1, #8]
 801a876:	4648      	mov	r0, r9
 801a878:	f000 fee6 	bl	801b648 <_Bfree>
 801a87c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801a880:	2200      	movs	r2, #0
 801a882:	601a      	str	r2, [r3, #0]
 801a884:	1e2b      	subs	r3, r5, #0
 801a886:	bfb9      	ittee	lt
 801a888:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801a88c:	9305      	strlt	r3, [sp, #20]
 801a88e:	2300      	movge	r3, #0
 801a890:	6033      	strge	r3, [r6, #0]
 801a892:	9f05      	ldr	r7, [sp, #20]
 801a894:	4b9a      	ldr	r3, [pc, #616]	@ (801ab00 <_dtoa_r+0x2d8>)
 801a896:	bfbc      	itt	lt
 801a898:	2201      	movlt	r2, #1
 801a89a:	6032      	strlt	r2, [r6, #0]
 801a89c:	43bb      	bics	r3, r7
 801a89e:	d112      	bne.n	801a8c6 <_dtoa_r+0x9e>
 801a8a0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a8a2:	f242 730f 	movw	r3, #9999	@ 0x270f
 801a8a6:	6013      	str	r3, [r2, #0]
 801a8a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801a8ac:	4323      	orrs	r3, r4
 801a8ae:	f000 855a 	beq.w	801b366 <_dtoa_r+0xb3e>
 801a8b2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a8b4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801ab14 <_dtoa_r+0x2ec>
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	f000 855c 	beq.w	801b376 <_dtoa_r+0xb4e>
 801a8be:	f10a 0303 	add.w	r3, sl, #3
 801a8c2:	f000 bd56 	b.w	801b372 <_dtoa_r+0xb4a>
 801a8c6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801a8ca:	2200      	movs	r2, #0
 801a8cc:	ec51 0b17 	vmov	r0, r1, d7
 801a8d0:	2300      	movs	r3, #0
 801a8d2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801a8d6:	f7e6 f8f7 	bl	8000ac8 <__aeabi_dcmpeq>
 801a8da:	4680      	mov	r8, r0
 801a8dc:	b158      	cbz	r0, 801a8f6 <_dtoa_r+0xce>
 801a8de:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801a8e0:	2301      	movs	r3, #1
 801a8e2:	6013      	str	r3, [r2, #0]
 801a8e4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801a8e6:	b113      	cbz	r3, 801a8ee <_dtoa_r+0xc6>
 801a8e8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a8ea:	4b86      	ldr	r3, [pc, #536]	@ (801ab04 <_dtoa_r+0x2dc>)
 801a8ec:	6013      	str	r3, [r2, #0]
 801a8ee:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801ab18 <_dtoa_r+0x2f0>
 801a8f2:	f000 bd40 	b.w	801b376 <_dtoa_r+0xb4e>
 801a8f6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801a8fa:	aa14      	add	r2, sp, #80	@ 0x50
 801a8fc:	a915      	add	r1, sp, #84	@ 0x54
 801a8fe:	4648      	mov	r0, r9
 801a900:	f001 fa3e 	bl	801bd80 <__d2b>
 801a904:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801a908:	9002      	str	r0, [sp, #8]
 801a90a:	2e00      	cmp	r6, #0
 801a90c:	d078      	beq.n	801aa00 <_dtoa_r+0x1d8>
 801a90e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a910:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801a914:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801a918:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a91c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801a920:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801a924:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801a928:	4619      	mov	r1, r3
 801a92a:	2200      	movs	r2, #0
 801a92c:	4b76      	ldr	r3, [pc, #472]	@ (801ab08 <_dtoa_r+0x2e0>)
 801a92e:	f7e5 fcab 	bl	8000288 <__aeabi_dsub>
 801a932:	a36b      	add	r3, pc, #428	@ (adr r3, 801aae0 <_dtoa_r+0x2b8>)
 801a934:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a938:	f7e5 fe5e 	bl	80005f8 <__aeabi_dmul>
 801a93c:	a36a      	add	r3, pc, #424	@ (adr r3, 801aae8 <_dtoa_r+0x2c0>)
 801a93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a942:	f7e5 fca3 	bl	800028c <__adddf3>
 801a946:	4604      	mov	r4, r0
 801a948:	4630      	mov	r0, r6
 801a94a:	460d      	mov	r5, r1
 801a94c:	f7e5 fdea 	bl	8000524 <__aeabi_i2d>
 801a950:	a367      	add	r3, pc, #412	@ (adr r3, 801aaf0 <_dtoa_r+0x2c8>)
 801a952:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a956:	f7e5 fe4f 	bl	80005f8 <__aeabi_dmul>
 801a95a:	4602      	mov	r2, r0
 801a95c:	460b      	mov	r3, r1
 801a95e:	4620      	mov	r0, r4
 801a960:	4629      	mov	r1, r5
 801a962:	f7e5 fc93 	bl	800028c <__adddf3>
 801a966:	4604      	mov	r4, r0
 801a968:	460d      	mov	r5, r1
 801a96a:	f7e6 f8f5 	bl	8000b58 <__aeabi_d2iz>
 801a96e:	2200      	movs	r2, #0
 801a970:	4607      	mov	r7, r0
 801a972:	2300      	movs	r3, #0
 801a974:	4620      	mov	r0, r4
 801a976:	4629      	mov	r1, r5
 801a978:	f7e6 f8b0 	bl	8000adc <__aeabi_dcmplt>
 801a97c:	b140      	cbz	r0, 801a990 <_dtoa_r+0x168>
 801a97e:	4638      	mov	r0, r7
 801a980:	f7e5 fdd0 	bl	8000524 <__aeabi_i2d>
 801a984:	4622      	mov	r2, r4
 801a986:	462b      	mov	r3, r5
 801a988:	f7e6 f89e 	bl	8000ac8 <__aeabi_dcmpeq>
 801a98c:	b900      	cbnz	r0, 801a990 <_dtoa_r+0x168>
 801a98e:	3f01      	subs	r7, #1
 801a990:	2f16      	cmp	r7, #22
 801a992:	d852      	bhi.n	801aa3a <_dtoa_r+0x212>
 801a994:	4b5d      	ldr	r3, [pc, #372]	@ (801ab0c <_dtoa_r+0x2e4>)
 801a996:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801a99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a99e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801a9a2:	f7e6 f89b 	bl	8000adc <__aeabi_dcmplt>
 801a9a6:	2800      	cmp	r0, #0
 801a9a8:	d049      	beq.n	801aa3e <_dtoa_r+0x216>
 801a9aa:	3f01      	subs	r7, #1
 801a9ac:	2300      	movs	r3, #0
 801a9ae:	9310      	str	r3, [sp, #64]	@ 0x40
 801a9b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a9b2:	1b9b      	subs	r3, r3, r6
 801a9b4:	1e5a      	subs	r2, r3, #1
 801a9b6:	bf45      	ittet	mi
 801a9b8:	f1c3 0301 	rsbmi	r3, r3, #1
 801a9bc:	9300      	strmi	r3, [sp, #0]
 801a9be:	2300      	movpl	r3, #0
 801a9c0:	2300      	movmi	r3, #0
 801a9c2:	9206      	str	r2, [sp, #24]
 801a9c4:	bf54      	ite	pl
 801a9c6:	9300      	strpl	r3, [sp, #0]
 801a9c8:	9306      	strmi	r3, [sp, #24]
 801a9ca:	2f00      	cmp	r7, #0
 801a9cc:	db39      	blt.n	801aa42 <_dtoa_r+0x21a>
 801a9ce:	9b06      	ldr	r3, [sp, #24]
 801a9d0:	970d      	str	r7, [sp, #52]	@ 0x34
 801a9d2:	443b      	add	r3, r7
 801a9d4:	9306      	str	r3, [sp, #24]
 801a9d6:	2300      	movs	r3, #0
 801a9d8:	9308      	str	r3, [sp, #32]
 801a9da:	9b07      	ldr	r3, [sp, #28]
 801a9dc:	2b09      	cmp	r3, #9
 801a9de:	d863      	bhi.n	801aaa8 <_dtoa_r+0x280>
 801a9e0:	2b05      	cmp	r3, #5
 801a9e2:	bfc4      	itt	gt
 801a9e4:	3b04      	subgt	r3, #4
 801a9e6:	9307      	strgt	r3, [sp, #28]
 801a9e8:	9b07      	ldr	r3, [sp, #28]
 801a9ea:	f1a3 0302 	sub.w	r3, r3, #2
 801a9ee:	bfcc      	ite	gt
 801a9f0:	2400      	movgt	r4, #0
 801a9f2:	2401      	movle	r4, #1
 801a9f4:	2b03      	cmp	r3, #3
 801a9f6:	d863      	bhi.n	801aac0 <_dtoa_r+0x298>
 801a9f8:	e8df f003 	tbb	[pc, r3]
 801a9fc:	2b375452 	.word	0x2b375452
 801aa00:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801aa04:	441e      	add	r6, r3
 801aa06:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801aa0a:	2b20      	cmp	r3, #32
 801aa0c:	bfc1      	itttt	gt
 801aa0e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801aa12:	409f      	lslgt	r7, r3
 801aa14:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801aa18:	fa24 f303 	lsrgt.w	r3, r4, r3
 801aa1c:	bfd6      	itet	le
 801aa1e:	f1c3 0320 	rsble	r3, r3, #32
 801aa22:	ea47 0003 	orrgt.w	r0, r7, r3
 801aa26:	fa04 f003 	lslle.w	r0, r4, r3
 801aa2a:	f7e5 fd6b 	bl	8000504 <__aeabi_ui2d>
 801aa2e:	2201      	movs	r2, #1
 801aa30:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801aa34:	3e01      	subs	r6, #1
 801aa36:	9212      	str	r2, [sp, #72]	@ 0x48
 801aa38:	e776      	b.n	801a928 <_dtoa_r+0x100>
 801aa3a:	2301      	movs	r3, #1
 801aa3c:	e7b7      	b.n	801a9ae <_dtoa_r+0x186>
 801aa3e:	9010      	str	r0, [sp, #64]	@ 0x40
 801aa40:	e7b6      	b.n	801a9b0 <_dtoa_r+0x188>
 801aa42:	9b00      	ldr	r3, [sp, #0]
 801aa44:	1bdb      	subs	r3, r3, r7
 801aa46:	9300      	str	r3, [sp, #0]
 801aa48:	427b      	negs	r3, r7
 801aa4a:	9308      	str	r3, [sp, #32]
 801aa4c:	2300      	movs	r3, #0
 801aa4e:	930d      	str	r3, [sp, #52]	@ 0x34
 801aa50:	e7c3      	b.n	801a9da <_dtoa_r+0x1b2>
 801aa52:	2301      	movs	r3, #1
 801aa54:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa56:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa58:	eb07 0b03 	add.w	fp, r7, r3
 801aa5c:	f10b 0301 	add.w	r3, fp, #1
 801aa60:	2b01      	cmp	r3, #1
 801aa62:	9303      	str	r3, [sp, #12]
 801aa64:	bfb8      	it	lt
 801aa66:	2301      	movlt	r3, #1
 801aa68:	e006      	b.n	801aa78 <_dtoa_r+0x250>
 801aa6a:	2301      	movs	r3, #1
 801aa6c:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	dd28      	ble.n	801aac6 <_dtoa_r+0x29e>
 801aa74:	469b      	mov	fp, r3
 801aa76:	9303      	str	r3, [sp, #12]
 801aa78:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801aa7c:	2100      	movs	r1, #0
 801aa7e:	2204      	movs	r2, #4
 801aa80:	f102 0514 	add.w	r5, r2, #20
 801aa84:	429d      	cmp	r5, r3
 801aa86:	d926      	bls.n	801aad6 <_dtoa_r+0x2ae>
 801aa88:	6041      	str	r1, [r0, #4]
 801aa8a:	4648      	mov	r0, r9
 801aa8c:	f000 fd9c 	bl	801b5c8 <_Balloc>
 801aa90:	4682      	mov	sl, r0
 801aa92:	2800      	cmp	r0, #0
 801aa94:	d142      	bne.n	801ab1c <_dtoa_r+0x2f4>
 801aa96:	4b1e      	ldr	r3, [pc, #120]	@ (801ab10 <_dtoa_r+0x2e8>)
 801aa98:	4602      	mov	r2, r0
 801aa9a:	f240 11af 	movw	r1, #431	@ 0x1af
 801aa9e:	e6da      	b.n	801a856 <_dtoa_r+0x2e>
 801aaa0:	2300      	movs	r3, #0
 801aaa2:	e7e3      	b.n	801aa6c <_dtoa_r+0x244>
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	e7d5      	b.n	801aa54 <_dtoa_r+0x22c>
 801aaa8:	2401      	movs	r4, #1
 801aaaa:	2300      	movs	r3, #0
 801aaac:	9307      	str	r3, [sp, #28]
 801aaae:	9409      	str	r4, [sp, #36]	@ 0x24
 801aab0:	f04f 3bff 	mov.w	fp, #4294967295
 801aab4:	2200      	movs	r2, #0
 801aab6:	f8cd b00c 	str.w	fp, [sp, #12]
 801aaba:	2312      	movs	r3, #18
 801aabc:	920c      	str	r2, [sp, #48]	@ 0x30
 801aabe:	e7db      	b.n	801aa78 <_dtoa_r+0x250>
 801aac0:	2301      	movs	r3, #1
 801aac2:	9309      	str	r3, [sp, #36]	@ 0x24
 801aac4:	e7f4      	b.n	801aab0 <_dtoa_r+0x288>
 801aac6:	f04f 0b01 	mov.w	fp, #1
 801aaca:	f8cd b00c 	str.w	fp, [sp, #12]
 801aace:	465b      	mov	r3, fp
 801aad0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801aad4:	e7d0      	b.n	801aa78 <_dtoa_r+0x250>
 801aad6:	3101      	adds	r1, #1
 801aad8:	0052      	lsls	r2, r2, #1
 801aada:	e7d1      	b.n	801aa80 <_dtoa_r+0x258>
 801aadc:	f3af 8000 	nop.w
 801aae0:	636f4361 	.word	0x636f4361
 801aae4:	3fd287a7 	.word	0x3fd287a7
 801aae8:	8b60c8b3 	.word	0x8b60c8b3
 801aaec:	3fc68a28 	.word	0x3fc68a28
 801aaf0:	509f79fb 	.word	0x509f79fb
 801aaf4:	3fd34413 	.word	0x3fd34413
 801aaf8:	080202d9 	.word	0x080202d9
 801aafc:	080202f0 	.word	0x080202f0
 801ab00:	7ff00000 	.word	0x7ff00000
 801ab04:	080203cb 	.word	0x080203cb
 801ab08:	3ff80000 	.word	0x3ff80000
 801ab0c:	08020890 	.word	0x08020890
 801ab10:	08020348 	.word	0x08020348
 801ab14:	080202d5 	.word	0x080202d5
 801ab18:	080203ca 	.word	0x080203ca
 801ab1c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801ab20:	6018      	str	r0, [r3, #0]
 801ab22:	9b03      	ldr	r3, [sp, #12]
 801ab24:	2b0e      	cmp	r3, #14
 801ab26:	f200 80a1 	bhi.w	801ac6c <_dtoa_r+0x444>
 801ab2a:	2c00      	cmp	r4, #0
 801ab2c:	f000 809e 	beq.w	801ac6c <_dtoa_r+0x444>
 801ab30:	2f00      	cmp	r7, #0
 801ab32:	dd33      	ble.n	801ab9c <_dtoa_r+0x374>
 801ab34:	4b9c      	ldr	r3, [pc, #624]	@ (801ada8 <_dtoa_r+0x580>)
 801ab36:	f007 020f 	and.w	r2, r7, #15
 801ab3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801ab3e:	ed93 7b00 	vldr	d7, [r3]
 801ab42:	05f8      	lsls	r0, r7, #23
 801ab44:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801ab48:	ea4f 1427 	mov.w	r4, r7, asr #4
 801ab4c:	d516      	bpl.n	801ab7c <_dtoa_r+0x354>
 801ab4e:	4b97      	ldr	r3, [pc, #604]	@ (801adac <_dtoa_r+0x584>)
 801ab50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801ab54:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801ab58:	f7e5 fe78 	bl	800084c <__aeabi_ddiv>
 801ab5c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ab60:	f004 040f 	and.w	r4, r4, #15
 801ab64:	2603      	movs	r6, #3
 801ab66:	4d91      	ldr	r5, [pc, #580]	@ (801adac <_dtoa_r+0x584>)
 801ab68:	b954      	cbnz	r4, 801ab80 <_dtoa_r+0x358>
 801ab6a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ab6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ab72:	f7e5 fe6b 	bl	800084c <__aeabi_ddiv>
 801ab76:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ab7a:	e028      	b.n	801abce <_dtoa_r+0x3a6>
 801ab7c:	2602      	movs	r6, #2
 801ab7e:	e7f2      	b.n	801ab66 <_dtoa_r+0x33e>
 801ab80:	07e1      	lsls	r1, r4, #31
 801ab82:	d508      	bpl.n	801ab96 <_dtoa_r+0x36e>
 801ab84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801ab88:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ab8c:	f7e5 fd34 	bl	80005f8 <__aeabi_dmul>
 801ab90:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801ab94:	3601      	adds	r6, #1
 801ab96:	1064      	asrs	r4, r4, #1
 801ab98:	3508      	adds	r5, #8
 801ab9a:	e7e5      	b.n	801ab68 <_dtoa_r+0x340>
 801ab9c:	f000 80af 	beq.w	801acfe <_dtoa_r+0x4d6>
 801aba0:	427c      	negs	r4, r7
 801aba2:	4b81      	ldr	r3, [pc, #516]	@ (801ada8 <_dtoa_r+0x580>)
 801aba4:	4d81      	ldr	r5, [pc, #516]	@ (801adac <_dtoa_r+0x584>)
 801aba6:	f004 020f 	and.w	r2, r4, #15
 801abaa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801abb2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801abb6:	f7e5 fd1f 	bl	80005f8 <__aeabi_dmul>
 801abba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801abbe:	1124      	asrs	r4, r4, #4
 801abc0:	2300      	movs	r3, #0
 801abc2:	2602      	movs	r6, #2
 801abc4:	2c00      	cmp	r4, #0
 801abc6:	f040 808f 	bne.w	801ace8 <_dtoa_r+0x4c0>
 801abca:	2b00      	cmp	r3, #0
 801abcc:	d1d3      	bne.n	801ab76 <_dtoa_r+0x34e>
 801abce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801abd0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801abd4:	2b00      	cmp	r3, #0
 801abd6:	f000 8094 	beq.w	801ad02 <_dtoa_r+0x4da>
 801abda:	4b75      	ldr	r3, [pc, #468]	@ (801adb0 <_dtoa_r+0x588>)
 801abdc:	2200      	movs	r2, #0
 801abde:	4620      	mov	r0, r4
 801abe0:	4629      	mov	r1, r5
 801abe2:	f7e5 ff7b 	bl	8000adc <__aeabi_dcmplt>
 801abe6:	2800      	cmp	r0, #0
 801abe8:	f000 808b 	beq.w	801ad02 <_dtoa_r+0x4da>
 801abec:	9b03      	ldr	r3, [sp, #12]
 801abee:	2b00      	cmp	r3, #0
 801abf0:	f000 8087 	beq.w	801ad02 <_dtoa_r+0x4da>
 801abf4:	f1bb 0f00 	cmp.w	fp, #0
 801abf8:	dd34      	ble.n	801ac64 <_dtoa_r+0x43c>
 801abfa:	4620      	mov	r0, r4
 801abfc:	4b6d      	ldr	r3, [pc, #436]	@ (801adb4 <_dtoa_r+0x58c>)
 801abfe:	2200      	movs	r2, #0
 801ac00:	4629      	mov	r1, r5
 801ac02:	f7e5 fcf9 	bl	80005f8 <__aeabi_dmul>
 801ac06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ac0a:	f107 38ff 	add.w	r8, r7, #4294967295
 801ac0e:	3601      	adds	r6, #1
 801ac10:	465c      	mov	r4, fp
 801ac12:	4630      	mov	r0, r6
 801ac14:	f7e5 fc86 	bl	8000524 <__aeabi_i2d>
 801ac18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ac1c:	f7e5 fcec 	bl	80005f8 <__aeabi_dmul>
 801ac20:	4b65      	ldr	r3, [pc, #404]	@ (801adb8 <_dtoa_r+0x590>)
 801ac22:	2200      	movs	r2, #0
 801ac24:	f7e5 fb32 	bl	800028c <__adddf3>
 801ac28:	4605      	mov	r5, r0
 801ac2a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801ac2e:	2c00      	cmp	r4, #0
 801ac30:	d16a      	bne.n	801ad08 <_dtoa_r+0x4e0>
 801ac32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ac36:	4b61      	ldr	r3, [pc, #388]	@ (801adbc <_dtoa_r+0x594>)
 801ac38:	2200      	movs	r2, #0
 801ac3a:	f7e5 fb25 	bl	8000288 <__aeabi_dsub>
 801ac3e:	4602      	mov	r2, r0
 801ac40:	460b      	mov	r3, r1
 801ac42:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ac46:	462a      	mov	r2, r5
 801ac48:	4633      	mov	r3, r6
 801ac4a:	f7e5 ff65 	bl	8000b18 <__aeabi_dcmpgt>
 801ac4e:	2800      	cmp	r0, #0
 801ac50:	f040 8298 	bne.w	801b184 <_dtoa_r+0x95c>
 801ac54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ac58:	462a      	mov	r2, r5
 801ac5a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801ac5e:	f7e5 ff3d 	bl	8000adc <__aeabi_dcmplt>
 801ac62:	bb38      	cbnz	r0, 801acb4 <_dtoa_r+0x48c>
 801ac64:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801ac68:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801ac6c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ac6e:	2b00      	cmp	r3, #0
 801ac70:	f2c0 8157 	blt.w	801af22 <_dtoa_r+0x6fa>
 801ac74:	2f0e      	cmp	r7, #14
 801ac76:	f300 8154 	bgt.w	801af22 <_dtoa_r+0x6fa>
 801ac7a:	4b4b      	ldr	r3, [pc, #300]	@ (801ada8 <_dtoa_r+0x580>)
 801ac7c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ac80:	ed93 7b00 	vldr	d7, [r3]
 801ac84:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	ed8d 7b00 	vstr	d7, [sp]
 801ac8c:	f280 80e5 	bge.w	801ae5a <_dtoa_r+0x632>
 801ac90:	9b03      	ldr	r3, [sp, #12]
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	f300 80e1 	bgt.w	801ae5a <_dtoa_r+0x632>
 801ac98:	d10c      	bne.n	801acb4 <_dtoa_r+0x48c>
 801ac9a:	4b48      	ldr	r3, [pc, #288]	@ (801adbc <_dtoa_r+0x594>)
 801ac9c:	2200      	movs	r2, #0
 801ac9e:	ec51 0b17 	vmov	r0, r1, d7
 801aca2:	f7e5 fca9 	bl	80005f8 <__aeabi_dmul>
 801aca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801acaa:	f7e5 ff2b 	bl	8000b04 <__aeabi_dcmpge>
 801acae:	2800      	cmp	r0, #0
 801acb0:	f000 8266 	beq.w	801b180 <_dtoa_r+0x958>
 801acb4:	2400      	movs	r4, #0
 801acb6:	4625      	mov	r5, r4
 801acb8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801acba:	4656      	mov	r6, sl
 801acbc:	ea6f 0803 	mvn.w	r8, r3
 801acc0:	2700      	movs	r7, #0
 801acc2:	4621      	mov	r1, r4
 801acc4:	4648      	mov	r0, r9
 801acc6:	f000 fcbf 	bl	801b648 <_Bfree>
 801acca:	2d00      	cmp	r5, #0
 801accc:	f000 80bd 	beq.w	801ae4a <_dtoa_r+0x622>
 801acd0:	b12f      	cbz	r7, 801acde <_dtoa_r+0x4b6>
 801acd2:	42af      	cmp	r7, r5
 801acd4:	d003      	beq.n	801acde <_dtoa_r+0x4b6>
 801acd6:	4639      	mov	r1, r7
 801acd8:	4648      	mov	r0, r9
 801acda:	f000 fcb5 	bl	801b648 <_Bfree>
 801acde:	4629      	mov	r1, r5
 801ace0:	4648      	mov	r0, r9
 801ace2:	f000 fcb1 	bl	801b648 <_Bfree>
 801ace6:	e0b0      	b.n	801ae4a <_dtoa_r+0x622>
 801ace8:	07e2      	lsls	r2, r4, #31
 801acea:	d505      	bpl.n	801acf8 <_dtoa_r+0x4d0>
 801acec:	e9d5 2300 	ldrd	r2, r3, [r5]
 801acf0:	f7e5 fc82 	bl	80005f8 <__aeabi_dmul>
 801acf4:	3601      	adds	r6, #1
 801acf6:	2301      	movs	r3, #1
 801acf8:	1064      	asrs	r4, r4, #1
 801acfa:	3508      	adds	r5, #8
 801acfc:	e762      	b.n	801abc4 <_dtoa_r+0x39c>
 801acfe:	2602      	movs	r6, #2
 801ad00:	e765      	b.n	801abce <_dtoa_r+0x3a6>
 801ad02:	9c03      	ldr	r4, [sp, #12]
 801ad04:	46b8      	mov	r8, r7
 801ad06:	e784      	b.n	801ac12 <_dtoa_r+0x3ea>
 801ad08:	4b27      	ldr	r3, [pc, #156]	@ (801ada8 <_dtoa_r+0x580>)
 801ad0a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ad0c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ad10:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ad14:	4454      	add	r4, sl
 801ad16:	2900      	cmp	r1, #0
 801ad18:	d054      	beq.n	801adc4 <_dtoa_r+0x59c>
 801ad1a:	4929      	ldr	r1, [pc, #164]	@ (801adc0 <_dtoa_r+0x598>)
 801ad1c:	2000      	movs	r0, #0
 801ad1e:	f7e5 fd95 	bl	800084c <__aeabi_ddiv>
 801ad22:	4633      	mov	r3, r6
 801ad24:	462a      	mov	r2, r5
 801ad26:	f7e5 faaf 	bl	8000288 <__aeabi_dsub>
 801ad2a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801ad2e:	4656      	mov	r6, sl
 801ad30:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ad34:	f7e5 ff10 	bl	8000b58 <__aeabi_d2iz>
 801ad38:	4605      	mov	r5, r0
 801ad3a:	f7e5 fbf3 	bl	8000524 <__aeabi_i2d>
 801ad3e:	4602      	mov	r2, r0
 801ad40:	460b      	mov	r3, r1
 801ad42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ad46:	f7e5 fa9f 	bl	8000288 <__aeabi_dsub>
 801ad4a:	3530      	adds	r5, #48	@ 0x30
 801ad4c:	4602      	mov	r2, r0
 801ad4e:	460b      	mov	r3, r1
 801ad50:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801ad54:	f806 5b01 	strb.w	r5, [r6], #1
 801ad58:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ad5c:	f7e5 febe 	bl	8000adc <__aeabi_dcmplt>
 801ad60:	2800      	cmp	r0, #0
 801ad62:	d172      	bne.n	801ae4a <_dtoa_r+0x622>
 801ad64:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ad68:	4911      	ldr	r1, [pc, #68]	@ (801adb0 <_dtoa_r+0x588>)
 801ad6a:	2000      	movs	r0, #0
 801ad6c:	f7e5 fa8c 	bl	8000288 <__aeabi_dsub>
 801ad70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ad74:	f7e5 feb2 	bl	8000adc <__aeabi_dcmplt>
 801ad78:	2800      	cmp	r0, #0
 801ad7a:	f040 80b4 	bne.w	801aee6 <_dtoa_r+0x6be>
 801ad7e:	42a6      	cmp	r6, r4
 801ad80:	f43f af70 	beq.w	801ac64 <_dtoa_r+0x43c>
 801ad84:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801ad88:	4b0a      	ldr	r3, [pc, #40]	@ (801adb4 <_dtoa_r+0x58c>)
 801ad8a:	2200      	movs	r2, #0
 801ad8c:	f7e5 fc34 	bl	80005f8 <__aeabi_dmul>
 801ad90:	4b08      	ldr	r3, [pc, #32]	@ (801adb4 <_dtoa_r+0x58c>)
 801ad92:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801ad96:	2200      	movs	r2, #0
 801ad98:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ad9c:	f7e5 fc2c 	bl	80005f8 <__aeabi_dmul>
 801ada0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ada4:	e7c4      	b.n	801ad30 <_dtoa_r+0x508>
 801ada6:	bf00      	nop
 801ada8:	08020890 	.word	0x08020890
 801adac:	08020868 	.word	0x08020868
 801adb0:	3ff00000 	.word	0x3ff00000
 801adb4:	40240000 	.word	0x40240000
 801adb8:	401c0000 	.word	0x401c0000
 801adbc:	40140000 	.word	0x40140000
 801adc0:	3fe00000 	.word	0x3fe00000
 801adc4:	4631      	mov	r1, r6
 801adc6:	4628      	mov	r0, r5
 801adc8:	f7e5 fc16 	bl	80005f8 <__aeabi_dmul>
 801adcc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801add0:	9413      	str	r4, [sp, #76]	@ 0x4c
 801add2:	4656      	mov	r6, sl
 801add4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801add8:	f7e5 febe 	bl	8000b58 <__aeabi_d2iz>
 801addc:	4605      	mov	r5, r0
 801adde:	f7e5 fba1 	bl	8000524 <__aeabi_i2d>
 801ade2:	4602      	mov	r2, r0
 801ade4:	460b      	mov	r3, r1
 801ade6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801adea:	f7e5 fa4d 	bl	8000288 <__aeabi_dsub>
 801adee:	3530      	adds	r5, #48	@ 0x30
 801adf0:	f806 5b01 	strb.w	r5, [r6], #1
 801adf4:	4602      	mov	r2, r0
 801adf6:	460b      	mov	r3, r1
 801adf8:	42a6      	cmp	r6, r4
 801adfa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801adfe:	f04f 0200 	mov.w	r2, #0
 801ae02:	d124      	bne.n	801ae4e <_dtoa_r+0x626>
 801ae04:	4baf      	ldr	r3, [pc, #700]	@ (801b0c4 <_dtoa_r+0x89c>)
 801ae06:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801ae0a:	f7e5 fa3f 	bl	800028c <__adddf3>
 801ae0e:	4602      	mov	r2, r0
 801ae10:	460b      	mov	r3, r1
 801ae12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ae16:	f7e5 fe7f 	bl	8000b18 <__aeabi_dcmpgt>
 801ae1a:	2800      	cmp	r0, #0
 801ae1c:	d163      	bne.n	801aee6 <_dtoa_r+0x6be>
 801ae1e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801ae22:	49a8      	ldr	r1, [pc, #672]	@ (801b0c4 <_dtoa_r+0x89c>)
 801ae24:	2000      	movs	r0, #0
 801ae26:	f7e5 fa2f 	bl	8000288 <__aeabi_dsub>
 801ae2a:	4602      	mov	r2, r0
 801ae2c:	460b      	mov	r3, r1
 801ae2e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801ae32:	f7e5 fe53 	bl	8000adc <__aeabi_dcmplt>
 801ae36:	2800      	cmp	r0, #0
 801ae38:	f43f af14 	beq.w	801ac64 <_dtoa_r+0x43c>
 801ae3c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801ae3e:	1e73      	subs	r3, r6, #1
 801ae40:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ae42:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801ae46:	2b30      	cmp	r3, #48	@ 0x30
 801ae48:	d0f8      	beq.n	801ae3c <_dtoa_r+0x614>
 801ae4a:	4647      	mov	r7, r8
 801ae4c:	e03b      	b.n	801aec6 <_dtoa_r+0x69e>
 801ae4e:	4b9e      	ldr	r3, [pc, #632]	@ (801b0c8 <_dtoa_r+0x8a0>)
 801ae50:	f7e5 fbd2 	bl	80005f8 <__aeabi_dmul>
 801ae54:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801ae58:	e7bc      	b.n	801add4 <_dtoa_r+0x5ac>
 801ae5a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801ae5e:	4656      	mov	r6, sl
 801ae60:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae64:	4620      	mov	r0, r4
 801ae66:	4629      	mov	r1, r5
 801ae68:	f7e5 fcf0 	bl	800084c <__aeabi_ddiv>
 801ae6c:	f7e5 fe74 	bl	8000b58 <__aeabi_d2iz>
 801ae70:	4680      	mov	r8, r0
 801ae72:	f7e5 fb57 	bl	8000524 <__aeabi_i2d>
 801ae76:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ae7a:	f7e5 fbbd 	bl	80005f8 <__aeabi_dmul>
 801ae7e:	4602      	mov	r2, r0
 801ae80:	460b      	mov	r3, r1
 801ae82:	4620      	mov	r0, r4
 801ae84:	4629      	mov	r1, r5
 801ae86:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801ae8a:	f7e5 f9fd 	bl	8000288 <__aeabi_dsub>
 801ae8e:	f806 4b01 	strb.w	r4, [r6], #1
 801ae92:	9d03      	ldr	r5, [sp, #12]
 801ae94:	eba6 040a 	sub.w	r4, r6, sl
 801ae98:	42a5      	cmp	r5, r4
 801ae9a:	4602      	mov	r2, r0
 801ae9c:	460b      	mov	r3, r1
 801ae9e:	d133      	bne.n	801af08 <_dtoa_r+0x6e0>
 801aea0:	f7e5 f9f4 	bl	800028c <__adddf3>
 801aea4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aea8:	4604      	mov	r4, r0
 801aeaa:	460d      	mov	r5, r1
 801aeac:	f7e5 fe34 	bl	8000b18 <__aeabi_dcmpgt>
 801aeb0:	b9c0      	cbnz	r0, 801aee4 <_dtoa_r+0x6bc>
 801aeb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 801aeb6:	4620      	mov	r0, r4
 801aeb8:	4629      	mov	r1, r5
 801aeba:	f7e5 fe05 	bl	8000ac8 <__aeabi_dcmpeq>
 801aebe:	b110      	cbz	r0, 801aec6 <_dtoa_r+0x69e>
 801aec0:	f018 0f01 	tst.w	r8, #1
 801aec4:	d10e      	bne.n	801aee4 <_dtoa_r+0x6bc>
 801aec6:	9902      	ldr	r1, [sp, #8]
 801aec8:	4648      	mov	r0, r9
 801aeca:	f000 fbbd 	bl	801b648 <_Bfree>
 801aece:	2300      	movs	r3, #0
 801aed0:	7033      	strb	r3, [r6, #0]
 801aed2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801aed4:	3701      	adds	r7, #1
 801aed6:	601f      	str	r7, [r3, #0]
 801aed8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801aeda:	2b00      	cmp	r3, #0
 801aedc:	f000 824b 	beq.w	801b376 <_dtoa_r+0xb4e>
 801aee0:	601e      	str	r6, [r3, #0]
 801aee2:	e248      	b.n	801b376 <_dtoa_r+0xb4e>
 801aee4:	46b8      	mov	r8, r7
 801aee6:	4633      	mov	r3, r6
 801aee8:	461e      	mov	r6, r3
 801aeea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801aeee:	2a39      	cmp	r2, #57	@ 0x39
 801aef0:	d106      	bne.n	801af00 <_dtoa_r+0x6d8>
 801aef2:	459a      	cmp	sl, r3
 801aef4:	d1f8      	bne.n	801aee8 <_dtoa_r+0x6c0>
 801aef6:	2230      	movs	r2, #48	@ 0x30
 801aef8:	f108 0801 	add.w	r8, r8, #1
 801aefc:	f88a 2000 	strb.w	r2, [sl]
 801af00:	781a      	ldrb	r2, [r3, #0]
 801af02:	3201      	adds	r2, #1
 801af04:	701a      	strb	r2, [r3, #0]
 801af06:	e7a0      	b.n	801ae4a <_dtoa_r+0x622>
 801af08:	4b6f      	ldr	r3, [pc, #444]	@ (801b0c8 <_dtoa_r+0x8a0>)
 801af0a:	2200      	movs	r2, #0
 801af0c:	f7e5 fb74 	bl	80005f8 <__aeabi_dmul>
 801af10:	2200      	movs	r2, #0
 801af12:	2300      	movs	r3, #0
 801af14:	4604      	mov	r4, r0
 801af16:	460d      	mov	r5, r1
 801af18:	f7e5 fdd6 	bl	8000ac8 <__aeabi_dcmpeq>
 801af1c:	2800      	cmp	r0, #0
 801af1e:	d09f      	beq.n	801ae60 <_dtoa_r+0x638>
 801af20:	e7d1      	b.n	801aec6 <_dtoa_r+0x69e>
 801af22:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801af24:	2a00      	cmp	r2, #0
 801af26:	f000 80ea 	beq.w	801b0fe <_dtoa_r+0x8d6>
 801af2a:	9a07      	ldr	r2, [sp, #28]
 801af2c:	2a01      	cmp	r2, #1
 801af2e:	f300 80cd 	bgt.w	801b0cc <_dtoa_r+0x8a4>
 801af32:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801af34:	2a00      	cmp	r2, #0
 801af36:	f000 80c1 	beq.w	801b0bc <_dtoa_r+0x894>
 801af3a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801af3e:	9c08      	ldr	r4, [sp, #32]
 801af40:	9e00      	ldr	r6, [sp, #0]
 801af42:	9a00      	ldr	r2, [sp, #0]
 801af44:	441a      	add	r2, r3
 801af46:	9200      	str	r2, [sp, #0]
 801af48:	9a06      	ldr	r2, [sp, #24]
 801af4a:	2101      	movs	r1, #1
 801af4c:	441a      	add	r2, r3
 801af4e:	4648      	mov	r0, r9
 801af50:	9206      	str	r2, [sp, #24]
 801af52:	f000 fc77 	bl	801b844 <__i2b>
 801af56:	4605      	mov	r5, r0
 801af58:	b166      	cbz	r6, 801af74 <_dtoa_r+0x74c>
 801af5a:	9b06      	ldr	r3, [sp, #24]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	dd09      	ble.n	801af74 <_dtoa_r+0x74c>
 801af60:	42b3      	cmp	r3, r6
 801af62:	9a00      	ldr	r2, [sp, #0]
 801af64:	bfa8      	it	ge
 801af66:	4633      	movge	r3, r6
 801af68:	1ad2      	subs	r2, r2, r3
 801af6a:	9200      	str	r2, [sp, #0]
 801af6c:	9a06      	ldr	r2, [sp, #24]
 801af6e:	1af6      	subs	r6, r6, r3
 801af70:	1ad3      	subs	r3, r2, r3
 801af72:	9306      	str	r3, [sp, #24]
 801af74:	9b08      	ldr	r3, [sp, #32]
 801af76:	b30b      	cbz	r3, 801afbc <_dtoa_r+0x794>
 801af78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af7a:	2b00      	cmp	r3, #0
 801af7c:	f000 80c6 	beq.w	801b10c <_dtoa_r+0x8e4>
 801af80:	2c00      	cmp	r4, #0
 801af82:	f000 80c0 	beq.w	801b106 <_dtoa_r+0x8de>
 801af86:	4629      	mov	r1, r5
 801af88:	4622      	mov	r2, r4
 801af8a:	4648      	mov	r0, r9
 801af8c:	f000 fd12 	bl	801b9b4 <__pow5mult>
 801af90:	9a02      	ldr	r2, [sp, #8]
 801af92:	4601      	mov	r1, r0
 801af94:	4605      	mov	r5, r0
 801af96:	4648      	mov	r0, r9
 801af98:	f000 fc6a 	bl	801b870 <__multiply>
 801af9c:	9902      	ldr	r1, [sp, #8]
 801af9e:	4680      	mov	r8, r0
 801afa0:	4648      	mov	r0, r9
 801afa2:	f000 fb51 	bl	801b648 <_Bfree>
 801afa6:	9b08      	ldr	r3, [sp, #32]
 801afa8:	1b1b      	subs	r3, r3, r4
 801afaa:	9308      	str	r3, [sp, #32]
 801afac:	f000 80b1 	beq.w	801b112 <_dtoa_r+0x8ea>
 801afb0:	9a08      	ldr	r2, [sp, #32]
 801afb2:	4641      	mov	r1, r8
 801afb4:	4648      	mov	r0, r9
 801afb6:	f000 fcfd 	bl	801b9b4 <__pow5mult>
 801afba:	9002      	str	r0, [sp, #8]
 801afbc:	2101      	movs	r1, #1
 801afbe:	4648      	mov	r0, r9
 801afc0:	f000 fc40 	bl	801b844 <__i2b>
 801afc4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801afc6:	4604      	mov	r4, r0
 801afc8:	2b00      	cmp	r3, #0
 801afca:	f000 81d8 	beq.w	801b37e <_dtoa_r+0xb56>
 801afce:	461a      	mov	r2, r3
 801afd0:	4601      	mov	r1, r0
 801afd2:	4648      	mov	r0, r9
 801afd4:	f000 fcee 	bl	801b9b4 <__pow5mult>
 801afd8:	9b07      	ldr	r3, [sp, #28]
 801afda:	2b01      	cmp	r3, #1
 801afdc:	4604      	mov	r4, r0
 801afde:	f300 809f 	bgt.w	801b120 <_dtoa_r+0x8f8>
 801afe2:	9b04      	ldr	r3, [sp, #16]
 801afe4:	2b00      	cmp	r3, #0
 801afe6:	f040 8097 	bne.w	801b118 <_dtoa_r+0x8f0>
 801afea:	9b05      	ldr	r3, [sp, #20]
 801afec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801aff0:	2b00      	cmp	r3, #0
 801aff2:	f040 8093 	bne.w	801b11c <_dtoa_r+0x8f4>
 801aff6:	9b05      	ldr	r3, [sp, #20]
 801aff8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801affc:	0d1b      	lsrs	r3, r3, #20
 801affe:	051b      	lsls	r3, r3, #20
 801b000:	b133      	cbz	r3, 801b010 <_dtoa_r+0x7e8>
 801b002:	9b00      	ldr	r3, [sp, #0]
 801b004:	3301      	adds	r3, #1
 801b006:	9300      	str	r3, [sp, #0]
 801b008:	9b06      	ldr	r3, [sp, #24]
 801b00a:	3301      	adds	r3, #1
 801b00c:	9306      	str	r3, [sp, #24]
 801b00e:	2301      	movs	r3, #1
 801b010:	9308      	str	r3, [sp, #32]
 801b012:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b014:	2b00      	cmp	r3, #0
 801b016:	f000 81b8 	beq.w	801b38a <_dtoa_r+0xb62>
 801b01a:	6923      	ldr	r3, [r4, #16]
 801b01c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b020:	6918      	ldr	r0, [r3, #16]
 801b022:	f000 fbc3 	bl	801b7ac <__hi0bits>
 801b026:	f1c0 0020 	rsb	r0, r0, #32
 801b02a:	9b06      	ldr	r3, [sp, #24]
 801b02c:	4418      	add	r0, r3
 801b02e:	f010 001f 	ands.w	r0, r0, #31
 801b032:	f000 8082 	beq.w	801b13a <_dtoa_r+0x912>
 801b036:	f1c0 0320 	rsb	r3, r0, #32
 801b03a:	2b04      	cmp	r3, #4
 801b03c:	dd73      	ble.n	801b126 <_dtoa_r+0x8fe>
 801b03e:	9b00      	ldr	r3, [sp, #0]
 801b040:	f1c0 001c 	rsb	r0, r0, #28
 801b044:	4403      	add	r3, r0
 801b046:	9300      	str	r3, [sp, #0]
 801b048:	9b06      	ldr	r3, [sp, #24]
 801b04a:	4403      	add	r3, r0
 801b04c:	4406      	add	r6, r0
 801b04e:	9306      	str	r3, [sp, #24]
 801b050:	9b00      	ldr	r3, [sp, #0]
 801b052:	2b00      	cmp	r3, #0
 801b054:	dd05      	ble.n	801b062 <_dtoa_r+0x83a>
 801b056:	9902      	ldr	r1, [sp, #8]
 801b058:	461a      	mov	r2, r3
 801b05a:	4648      	mov	r0, r9
 801b05c:	f000 fd04 	bl	801ba68 <__lshift>
 801b060:	9002      	str	r0, [sp, #8]
 801b062:	9b06      	ldr	r3, [sp, #24]
 801b064:	2b00      	cmp	r3, #0
 801b066:	dd05      	ble.n	801b074 <_dtoa_r+0x84c>
 801b068:	4621      	mov	r1, r4
 801b06a:	461a      	mov	r2, r3
 801b06c:	4648      	mov	r0, r9
 801b06e:	f000 fcfb 	bl	801ba68 <__lshift>
 801b072:	4604      	mov	r4, r0
 801b074:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b076:	2b00      	cmp	r3, #0
 801b078:	d061      	beq.n	801b13e <_dtoa_r+0x916>
 801b07a:	9802      	ldr	r0, [sp, #8]
 801b07c:	4621      	mov	r1, r4
 801b07e:	f000 fd5f 	bl	801bb40 <__mcmp>
 801b082:	2800      	cmp	r0, #0
 801b084:	da5b      	bge.n	801b13e <_dtoa_r+0x916>
 801b086:	2300      	movs	r3, #0
 801b088:	9902      	ldr	r1, [sp, #8]
 801b08a:	220a      	movs	r2, #10
 801b08c:	4648      	mov	r0, r9
 801b08e:	f000 fafd 	bl	801b68c <__multadd>
 801b092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b094:	9002      	str	r0, [sp, #8]
 801b096:	f107 38ff 	add.w	r8, r7, #4294967295
 801b09a:	2b00      	cmp	r3, #0
 801b09c:	f000 8177 	beq.w	801b38e <_dtoa_r+0xb66>
 801b0a0:	4629      	mov	r1, r5
 801b0a2:	2300      	movs	r3, #0
 801b0a4:	220a      	movs	r2, #10
 801b0a6:	4648      	mov	r0, r9
 801b0a8:	f000 faf0 	bl	801b68c <__multadd>
 801b0ac:	f1bb 0f00 	cmp.w	fp, #0
 801b0b0:	4605      	mov	r5, r0
 801b0b2:	dc6f      	bgt.n	801b194 <_dtoa_r+0x96c>
 801b0b4:	9b07      	ldr	r3, [sp, #28]
 801b0b6:	2b02      	cmp	r3, #2
 801b0b8:	dc49      	bgt.n	801b14e <_dtoa_r+0x926>
 801b0ba:	e06b      	b.n	801b194 <_dtoa_r+0x96c>
 801b0bc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b0be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801b0c2:	e73c      	b.n	801af3e <_dtoa_r+0x716>
 801b0c4:	3fe00000 	.word	0x3fe00000
 801b0c8:	40240000 	.word	0x40240000
 801b0cc:	9b03      	ldr	r3, [sp, #12]
 801b0ce:	1e5c      	subs	r4, r3, #1
 801b0d0:	9b08      	ldr	r3, [sp, #32]
 801b0d2:	42a3      	cmp	r3, r4
 801b0d4:	db09      	blt.n	801b0ea <_dtoa_r+0x8c2>
 801b0d6:	1b1c      	subs	r4, r3, r4
 801b0d8:	9b03      	ldr	r3, [sp, #12]
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	f6bf af30 	bge.w	801af40 <_dtoa_r+0x718>
 801b0e0:	9b00      	ldr	r3, [sp, #0]
 801b0e2:	9a03      	ldr	r2, [sp, #12]
 801b0e4:	1a9e      	subs	r6, r3, r2
 801b0e6:	2300      	movs	r3, #0
 801b0e8:	e72b      	b.n	801af42 <_dtoa_r+0x71a>
 801b0ea:	9b08      	ldr	r3, [sp, #32]
 801b0ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b0ee:	9408      	str	r4, [sp, #32]
 801b0f0:	1ae3      	subs	r3, r4, r3
 801b0f2:	441a      	add	r2, r3
 801b0f4:	9e00      	ldr	r6, [sp, #0]
 801b0f6:	9b03      	ldr	r3, [sp, #12]
 801b0f8:	920d      	str	r2, [sp, #52]	@ 0x34
 801b0fa:	2400      	movs	r4, #0
 801b0fc:	e721      	b.n	801af42 <_dtoa_r+0x71a>
 801b0fe:	9c08      	ldr	r4, [sp, #32]
 801b100:	9e00      	ldr	r6, [sp, #0]
 801b102:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b104:	e728      	b.n	801af58 <_dtoa_r+0x730>
 801b106:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b10a:	e751      	b.n	801afb0 <_dtoa_r+0x788>
 801b10c:	9a08      	ldr	r2, [sp, #32]
 801b10e:	9902      	ldr	r1, [sp, #8]
 801b110:	e750      	b.n	801afb4 <_dtoa_r+0x78c>
 801b112:	f8cd 8008 	str.w	r8, [sp, #8]
 801b116:	e751      	b.n	801afbc <_dtoa_r+0x794>
 801b118:	2300      	movs	r3, #0
 801b11a:	e779      	b.n	801b010 <_dtoa_r+0x7e8>
 801b11c:	9b04      	ldr	r3, [sp, #16]
 801b11e:	e777      	b.n	801b010 <_dtoa_r+0x7e8>
 801b120:	2300      	movs	r3, #0
 801b122:	9308      	str	r3, [sp, #32]
 801b124:	e779      	b.n	801b01a <_dtoa_r+0x7f2>
 801b126:	d093      	beq.n	801b050 <_dtoa_r+0x828>
 801b128:	9a00      	ldr	r2, [sp, #0]
 801b12a:	331c      	adds	r3, #28
 801b12c:	441a      	add	r2, r3
 801b12e:	9200      	str	r2, [sp, #0]
 801b130:	9a06      	ldr	r2, [sp, #24]
 801b132:	441a      	add	r2, r3
 801b134:	441e      	add	r6, r3
 801b136:	9206      	str	r2, [sp, #24]
 801b138:	e78a      	b.n	801b050 <_dtoa_r+0x828>
 801b13a:	4603      	mov	r3, r0
 801b13c:	e7f4      	b.n	801b128 <_dtoa_r+0x900>
 801b13e:	9b03      	ldr	r3, [sp, #12]
 801b140:	2b00      	cmp	r3, #0
 801b142:	46b8      	mov	r8, r7
 801b144:	dc20      	bgt.n	801b188 <_dtoa_r+0x960>
 801b146:	469b      	mov	fp, r3
 801b148:	9b07      	ldr	r3, [sp, #28]
 801b14a:	2b02      	cmp	r3, #2
 801b14c:	dd1e      	ble.n	801b18c <_dtoa_r+0x964>
 801b14e:	f1bb 0f00 	cmp.w	fp, #0
 801b152:	f47f adb1 	bne.w	801acb8 <_dtoa_r+0x490>
 801b156:	4621      	mov	r1, r4
 801b158:	465b      	mov	r3, fp
 801b15a:	2205      	movs	r2, #5
 801b15c:	4648      	mov	r0, r9
 801b15e:	f000 fa95 	bl	801b68c <__multadd>
 801b162:	4601      	mov	r1, r0
 801b164:	4604      	mov	r4, r0
 801b166:	9802      	ldr	r0, [sp, #8]
 801b168:	f000 fcea 	bl	801bb40 <__mcmp>
 801b16c:	2800      	cmp	r0, #0
 801b16e:	f77f ada3 	ble.w	801acb8 <_dtoa_r+0x490>
 801b172:	4656      	mov	r6, sl
 801b174:	2331      	movs	r3, #49	@ 0x31
 801b176:	f806 3b01 	strb.w	r3, [r6], #1
 801b17a:	f108 0801 	add.w	r8, r8, #1
 801b17e:	e59f      	b.n	801acc0 <_dtoa_r+0x498>
 801b180:	9c03      	ldr	r4, [sp, #12]
 801b182:	46b8      	mov	r8, r7
 801b184:	4625      	mov	r5, r4
 801b186:	e7f4      	b.n	801b172 <_dtoa_r+0x94a>
 801b188:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801b18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b18e:	2b00      	cmp	r3, #0
 801b190:	f000 8101 	beq.w	801b396 <_dtoa_r+0xb6e>
 801b194:	2e00      	cmp	r6, #0
 801b196:	dd05      	ble.n	801b1a4 <_dtoa_r+0x97c>
 801b198:	4629      	mov	r1, r5
 801b19a:	4632      	mov	r2, r6
 801b19c:	4648      	mov	r0, r9
 801b19e:	f000 fc63 	bl	801ba68 <__lshift>
 801b1a2:	4605      	mov	r5, r0
 801b1a4:	9b08      	ldr	r3, [sp, #32]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d05c      	beq.n	801b264 <_dtoa_r+0xa3c>
 801b1aa:	6869      	ldr	r1, [r5, #4]
 801b1ac:	4648      	mov	r0, r9
 801b1ae:	f000 fa0b 	bl	801b5c8 <_Balloc>
 801b1b2:	4606      	mov	r6, r0
 801b1b4:	b928      	cbnz	r0, 801b1c2 <_dtoa_r+0x99a>
 801b1b6:	4b82      	ldr	r3, [pc, #520]	@ (801b3c0 <_dtoa_r+0xb98>)
 801b1b8:	4602      	mov	r2, r0
 801b1ba:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801b1be:	f7ff bb4a 	b.w	801a856 <_dtoa_r+0x2e>
 801b1c2:	692a      	ldr	r2, [r5, #16]
 801b1c4:	3202      	adds	r2, #2
 801b1c6:	0092      	lsls	r2, r2, #2
 801b1c8:	f105 010c 	add.w	r1, r5, #12
 801b1cc:	300c      	adds	r0, #12
 801b1ce:	f7ff fa76 	bl	801a6be <memcpy>
 801b1d2:	2201      	movs	r2, #1
 801b1d4:	4631      	mov	r1, r6
 801b1d6:	4648      	mov	r0, r9
 801b1d8:	f000 fc46 	bl	801ba68 <__lshift>
 801b1dc:	f10a 0301 	add.w	r3, sl, #1
 801b1e0:	9300      	str	r3, [sp, #0]
 801b1e2:	eb0a 030b 	add.w	r3, sl, fp
 801b1e6:	9308      	str	r3, [sp, #32]
 801b1e8:	9b04      	ldr	r3, [sp, #16]
 801b1ea:	f003 0301 	and.w	r3, r3, #1
 801b1ee:	462f      	mov	r7, r5
 801b1f0:	9306      	str	r3, [sp, #24]
 801b1f2:	4605      	mov	r5, r0
 801b1f4:	9b00      	ldr	r3, [sp, #0]
 801b1f6:	9802      	ldr	r0, [sp, #8]
 801b1f8:	4621      	mov	r1, r4
 801b1fa:	f103 3bff 	add.w	fp, r3, #4294967295
 801b1fe:	f7ff fa8b 	bl	801a718 <quorem>
 801b202:	4603      	mov	r3, r0
 801b204:	3330      	adds	r3, #48	@ 0x30
 801b206:	9003      	str	r0, [sp, #12]
 801b208:	4639      	mov	r1, r7
 801b20a:	9802      	ldr	r0, [sp, #8]
 801b20c:	9309      	str	r3, [sp, #36]	@ 0x24
 801b20e:	f000 fc97 	bl	801bb40 <__mcmp>
 801b212:	462a      	mov	r2, r5
 801b214:	9004      	str	r0, [sp, #16]
 801b216:	4621      	mov	r1, r4
 801b218:	4648      	mov	r0, r9
 801b21a:	f000 fcad 	bl	801bb78 <__mdiff>
 801b21e:	68c2      	ldr	r2, [r0, #12]
 801b220:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b222:	4606      	mov	r6, r0
 801b224:	bb02      	cbnz	r2, 801b268 <_dtoa_r+0xa40>
 801b226:	4601      	mov	r1, r0
 801b228:	9802      	ldr	r0, [sp, #8]
 801b22a:	f000 fc89 	bl	801bb40 <__mcmp>
 801b22e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b230:	4602      	mov	r2, r0
 801b232:	4631      	mov	r1, r6
 801b234:	4648      	mov	r0, r9
 801b236:	920c      	str	r2, [sp, #48]	@ 0x30
 801b238:	9309      	str	r3, [sp, #36]	@ 0x24
 801b23a:	f000 fa05 	bl	801b648 <_Bfree>
 801b23e:	9b07      	ldr	r3, [sp, #28]
 801b240:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b242:	9e00      	ldr	r6, [sp, #0]
 801b244:	ea42 0103 	orr.w	r1, r2, r3
 801b248:	9b06      	ldr	r3, [sp, #24]
 801b24a:	4319      	orrs	r1, r3
 801b24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b24e:	d10d      	bne.n	801b26c <_dtoa_r+0xa44>
 801b250:	2b39      	cmp	r3, #57	@ 0x39
 801b252:	d027      	beq.n	801b2a4 <_dtoa_r+0xa7c>
 801b254:	9a04      	ldr	r2, [sp, #16]
 801b256:	2a00      	cmp	r2, #0
 801b258:	dd01      	ble.n	801b25e <_dtoa_r+0xa36>
 801b25a:	9b03      	ldr	r3, [sp, #12]
 801b25c:	3331      	adds	r3, #49	@ 0x31
 801b25e:	f88b 3000 	strb.w	r3, [fp]
 801b262:	e52e      	b.n	801acc2 <_dtoa_r+0x49a>
 801b264:	4628      	mov	r0, r5
 801b266:	e7b9      	b.n	801b1dc <_dtoa_r+0x9b4>
 801b268:	2201      	movs	r2, #1
 801b26a:	e7e2      	b.n	801b232 <_dtoa_r+0xa0a>
 801b26c:	9904      	ldr	r1, [sp, #16]
 801b26e:	2900      	cmp	r1, #0
 801b270:	db04      	blt.n	801b27c <_dtoa_r+0xa54>
 801b272:	9807      	ldr	r0, [sp, #28]
 801b274:	4301      	orrs	r1, r0
 801b276:	9806      	ldr	r0, [sp, #24]
 801b278:	4301      	orrs	r1, r0
 801b27a:	d120      	bne.n	801b2be <_dtoa_r+0xa96>
 801b27c:	2a00      	cmp	r2, #0
 801b27e:	ddee      	ble.n	801b25e <_dtoa_r+0xa36>
 801b280:	9902      	ldr	r1, [sp, #8]
 801b282:	9300      	str	r3, [sp, #0]
 801b284:	2201      	movs	r2, #1
 801b286:	4648      	mov	r0, r9
 801b288:	f000 fbee 	bl	801ba68 <__lshift>
 801b28c:	4621      	mov	r1, r4
 801b28e:	9002      	str	r0, [sp, #8]
 801b290:	f000 fc56 	bl	801bb40 <__mcmp>
 801b294:	2800      	cmp	r0, #0
 801b296:	9b00      	ldr	r3, [sp, #0]
 801b298:	dc02      	bgt.n	801b2a0 <_dtoa_r+0xa78>
 801b29a:	d1e0      	bne.n	801b25e <_dtoa_r+0xa36>
 801b29c:	07da      	lsls	r2, r3, #31
 801b29e:	d5de      	bpl.n	801b25e <_dtoa_r+0xa36>
 801b2a0:	2b39      	cmp	r3, #57	@ 0x39
 801b2a2:	d1da      	bne.n	801b25a <_dtoa_r+0xa32>
 801b2a4:	2339      	movs	r3, #57	@ 0x39
 801b2a6:	f88b 3000 	strb.w	r3, [fp]
 801b2aa:	4633      	mov	r3, r6
 801b2ac:	461e      	mov	r6, r3
 801b2ae:	3b01      	subs	r3, #1
 801b2b0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b2b4:	2a39      	cmp	r2, #57	@ 0x39
 801b2b6:	d04e      	beq.n	801b356 <_dtoa_r+0xb2e>
 801b2b8:	3201      	adds	r2, #1
 801b2ba:	701a      	strb	r2, [r3, #0]
 801b2bc:	e501      	b.n	801acc2 <_dtoa_r+0x49a>
 801b2be:	2a00      	cmp	r2, #0
 801b2c0:	dd03      	ble.n	801b2ca <_dtoa_r+0xaa2>
 801b2c2:	2b39      	cmp	r3, #57	@ 0x39
 801b2c4:	d0ee      	beq.n	801b2a4 <_dtoa_r+0xa7c>
 801b2c6:	3301      	adds	r3, #1
 801b2c8:	e7c9      	b.n	801b25e <_dtoa_r+0xa36>
 801b2ca:	9a00      	ldr	r2, [sp, #0]
 801b2cc:	9908      	ldr	r1, [sp, #32]
 801b2ce:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b2d2:	428a      	cmp	r2, r1
 801b2d4:	d028      	beq.n	801b328 <_dtoa_r+0xb00>
 801b2d6:	9902      	ldr	r1, [sp, #8]
 801b2d8:	2300      	movs	r3, #0
 801b2da:	220a      	movs	r2, #10
 801b2dc:	4648      	mov	r0, r9
 801b2de:	f000 f9d5 	bl	801b68c <__multadd>
 801b2e2:	42af      	cmp	r7, r5
 801b2e4:	9002      	str	r0, [sp, #8]
 801b2e6:	f04f 0300 	mov.w	r3, #0
 801b2ea:	f04f 020a 	mov.w	r2, #10
 801b2ee:	4639      	mov	r1, r7
 801b2f0:	4648      	mov	r0, r9
 801b2f2:	d107      	bne.n	801b304 <_dtoa_r+0xadc>
 801b2f4:	f000 f9ca 	bl	801b68c <__multadd>
 801b2f8:	4607      	mov	r7, r0
 801b2fa:	4605      	mov	r5, r0
 801b2fc:	9b00      	ldr	r3, [sp, #0]
 801b2fe:	3301      	adds	r3, #1
 801b300:	9300      	str	r3, [sp, #0]
 801b302:	e777      	b.n	801b1f4 <_dtoa_r+0x9cc>
 801b304:	f000 f9c2 	bl	801b68c <__multadd>
 801b308:	4629      	mov	r1, r5
 801b30a:	4607      	mov	r7, r0
 801b30c:	2300      	movs	r3, #0
 801b30e:	220a      	movs	r2, #10
 801b310:	4648      	mov	r0, r9
 801b312:	f000 f9bb 	bl	801b68c <__multadd>
 801b316:	4605      	mov	r5, r0
 801b318:	e7f0      	b.n	801b2fc <_dtoa_r+0xad4>
 801b31a:	f1bb 0f00 	cmp.w	fp, #0
 801b31e:	bfcc      	ite	gt
 801b320:	465e      	movgt	r6, fp
 801b322:	2601      	movle	r6, #1
 801b324:	4456      	add	r6, sl
 801b326:	2700      	movs	r7, #0
 801b328:	9902      	ldr	r1, [sp, #8]
 801b32a:	9300      	str	r3, [sp, #0]
 801b32c:	2201      	movs	r2, #1
 801b32e:	4648      	mov	r0, r9
 801b330:	f000 fb9a 	bl	801ba68 <__lshift>
 801b334:	4621      	mov	r1, r4
 801b336:	9002      	str	r0, [sp, #8]
 801b338:	f000 fc02 	bl	801bb40 <__mcmp>
 801b33c:	2800      	cmp	r0, #0
 801b33e:	dcb4      	bgt.n	801b2aa <_dtoa_r+0xa82>
 801b340:	d102      	bne.n	801b348 <_dtoa_r+0xb20>
 801b342:	9b00      	ldr	r3, [sp, #0]
 801b344:	07db      	lsls	r3, r3, #31
 801b346:	d4b0      	bmi.n	801b2aa <_dtoa_r+0xa82>
 801b348:	4633      	mov	r3, r6
 801b34a:	461e      	mov	r6, r3
 801b34c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b350:	2a30      	cmp	r2, #48	@ 0x30
 801b352:	d0fa      	beq.n	801b34a <_dtoa_r+0xb22>
 801b354:	e4b5      	b.n	801acc2 <_dtoa_r+0x49a>
 801b356:	459a      	cmp	sl, r3
 801b358:	d1a8      	bne.n	801b2ac <_dtoa_r+0xa84>
 801b35a:	2331      	movs	r3, #49	@ 0x31
 801b35c:	f108 0801 	add.w	r8, r8, #1
 801b360:	f88a 3000 	strb.w	r3, [sl]
 801b364:	e4ad      	b.n	801acc2 <_dtoa_r+0x49a>
 801b366:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b368:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801b3c4 <_dtoa_r+0xb9c>
 801b36c:	b11b      	cbz	r3, 801b376 <_dtoa_r+0xb4e>
 801b36e:	f10a 0308 	add.w	r3, sl, #8
 801b372:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b374:	6013      	str	r3, [r2, #0]
 801b376:	4650      	mov	r0, sl
 801b378:	b017      	add	sp, #92	@ 0x5c
 801b37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b37e:	9b07      	ldr	r3, [sp, #28]
 801b380:	2b01      	cmp	r3, #1
 801b382:	f77f ae2e 	ble.w	801afe2 <_dtoa_r+0x7ba>
 801b386:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b388:	9308      	str	r3, [sp, #32]
 801b38a:	2001      	movs	r0, #1
 801b38c:	e64d      	b.n	801b02a <_dtoa_r+0x802>
 801b38e:	f1bb 0f00 	cmp.w	fp, #0
 801b392:	f77f aed9 	ble.w	801b148 <_dtoa_r+0x920>
 801b396:	4656      	mov	r6, sl
 801b398:	9802      	ldr	r0, [sp, #8]
 801b39a:	4621      	mov	r1, r4
 801b39c:	f7ff f9bc 	bl	801a718 <quorem>
 801b3a0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801b3a4:	f806 3b01 	strb.w	r3, [r6], #1
 801b3a8:	eba6 020a 	sub.w	r2, r6, sl
 801b3ac:	4593      	cmp	fp, r2
 801b3ae:	ddb4      	ble.n	801b31a <_dtoa_r+0xaf2>
 801b3b0:	9902      	ldr	r1, [sp, #8]
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	220a      	movs	r2, #10
 801b3b6:	4648      	mov	r0, r9
 801b3b8:	f000 f968 	bl	801b68c <__multadd>
 801b3bc:	9002      	str	r0, [sp, #8]
 801b3be:	e7eb      	b.n	801b398 <_dtoa_r+0xb70>
 801b3c0:	08020348 	.word	0x08020348
 801b3c4:	080202cc 	.word	0x080202cc

0801b3c8 <_free_r>:
 801b3c8:	b538      	push	{r3, r4, r5, lr}
 801b3ca:	4605      	mov	r5, r0
 801b3cc:	2900      	cmp	r1, #0
 801b3ce:	d041      	beq.n	801b454 <_free_r+0x8c>
 801b3d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b3d4:	1f0c      	subs	r4, r1, #4
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	bfb8      	it	lt
 801b3da:	18e4      	addlt	r4, r4, r3
 801b3dc:	f000 f8e8 	bl	801b5b0 <__malloc_lock>
 801b3e0:	4a1d      	ldr	r2, [pc, #116]	@ (801b458 <_free_r+0x90>)
 801b3e2:	6813      	ldr	r3, [r2, #0]
 801b3e4:	b933      	cbnz	r3, 801b3f4 <_free_r+0x2c>
 801b3e6:	6063      	str	r3, [r4, #4]
 801b3e8:	6014      	str	r4, [r2, #0]
 801b3ea:	4628      	mov	r0, r5
 801b3ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b3f0:	f000 b8e4 	b.w	801b5bc <__malloc_unlock>
 801b3f4:	42a3      	cmp	r3, r4
 801b3f6:	d908      	bls.n	801b40a <_free_r+0x42>
 801b3f8:	6820      	ldr	r0, [r4, #0]
 801b3fa:	1821      	adds	r1, r4, r0
 801b3fc:	428b      	cmp	r3, r1
 801b3fe:	bf01      	itttt	eq
 801b400:	6819      	ldreq	r1, [r3, #0]
 801b402:	685b      	ldreq	r3, [r3, #4]
 801b404:	1809      	addeq	r1, r1, r0
 801b406:	6021      	streq	r1, [r4, #0]
 801b408:	e7ed      	b.n	801b3e6 <_free_r+0x1e>
 801b40a:	461a      	mov	r2, r3
 801b40c:	685b      	ldr	r3, [r3, #4]
 801b40e:	b10b      	cbz	r3, 801b414 <_free_r+0x4c>
 801b410:	42a3      	cmp	r3, r4
 801b412:	d9fa      	bls.n	801b40a <_free_r+0x42>
 801b414:	6811      	ldr	r1, [r2, #0]
 801b416:	1850      	adds	r0, r2, r1
 801b418:	42a0      	cmp	r0, r4
 801b41a:	d10b      	bne.n	801b434 <_free_r+0x6c>
 801b41c:	6820      	ldr	r0, [r4, #0]
 801b41e:	4401      	add	r1, r0
 801b420:	1850      	adds	r0, r2, r1
 801b422:	4283      	cmp	r3, r0
 801b424:	6011      	str	r1, [r2, #0]
 801b426:	d1e0      	bne.n	801b3ea <_free_r+0x22>
 801b428:	6818      	ldr	r0, [r3, #0]
 801b42a:	685b      	ldr	r3, [r3, #4]
 801b42c:	6053      	str	r3, [r2, #4]
 801b42e:	4408      	add	r0, r1
 801b430:	6010      	str	r0, [r2, #0]
 801b432:	e7da      	b.n	801b3ea <_free_r+0x22>
 801b434:	d902      	bls.n	801b43c <_free_r+0x74>
 801b436:	230c      	movs	r3, #12
 801b438:	602b      	str	r3, [r5, #0]
 801b43a:	e7d6      	b.n	801b3ea <_free_r+0x22>
 801b43c:	6820      	ldr	r0, [r4, #0]
 801b43e:	1821      	adds	r1, r4, r0
 801b440:	428b      	cmp	r3, r1
 801b442:	bf04      	itt	eq
 801b444:	6819      	ldreq	r1, [r3, #0]
 801b446:	685b      	ldreq	r3, [r3, #4]
 801b448:	6063      	str	r3, [r4, #4]
 801b44a:	bf04      	itt	eq
 801b44c:	1809      	addeq	r1, r1, r0
 801b44e:	6021      	streq	r1, [r4, #0]
 801b450:	6054      	str	r4, [r2, #4]
 801b452:	e7ca      	b.n	801b3ea <_free_r+0x22>
 801b454:	bd38      	pop	{r3, r4, r5, pc}
 801b456:	bf00      	nop
 801b458:	2000a6ac 	.word	0x2000a6ac

0801b45c <malloc>:
 801b45c:	4b02      	ldr	r3, [pc, #8]	@ (801b468 <malloc+0xc>)
 801b45e:	4601      	mov	r1, r0
 801b460:	6818      	ldr	r0, [r3, #0]
 801b462:	f000 b825 	b.w	801b4b0 <_malloc_r>
 801b466:	bf00      	nop
 801b468:	20000160 	.word	0x20000160

0801b46c <sbrk_aligned>:
 801b46c:	b570      	push	{r4, r5, r6, lr}
 801b46e:	4e0f      	ldr	r6, [pc, #60]	@ (801b4ac <sbrk_aligned+0x40>)
 801b470:	460c      	mov	r4, r1
 801b472:	6831      	ldr	r1, [r6, #0]
 801b474:	4605      	mov	r5, r0
 801b476:	b911      	cbnz	r1, 801b47e <sbrk_aligned+0x12>
 801b478:	f002 fa76 	bl	801d968 <_sbrk_r>
 801b47c:	6030      	str	r0, [r6, #0]
 801b47e:	4621      	mov	r1, r4
 801b480:	4628      	mov	r0, r5
 801b482:	f002 fa71 	bl	801d968 <_sbrk_r>
 801b486:	1c43      	adds	r3, r0, #1
 801b488:	d103      	bne.n	801b492 <sbrk_aligned+0x26>
 801b48a:	f04f 34ff 	mov.w	r4, #4294967295
 801b48e:	4620      	mov	r0, r4
 801b490:	bd70      	pop	{r4, r5, r6, pc}
 801b492:	1cc4      	adds	r4, r0, #3
 801b494:	f024 0403 	bic.w	r4, r4, #3
 801b498:	42a0      	cmp	r0, r4
 801b49a:	d0f8      	beq.n	801b48e <sbrk_aligned+0x22>
 801b49c:	1a21      	subs	r1, r4, r0
 801b49e:	4628      	mov	r0, r5
 801b4a0:	f002 fa62 	bl	801d968 <_sbrk_r>
 801b4a4:	3001      	adds	r0, #1
 801b4a6:	d1f2      	bne.n	801b48e <sbrk_aligned+0x22>
 801b4a8:	e7ef      	b.n	801b48a <sbrk_aligned+0x1e>
 801b4aa:	bf00      	nop
 801b4ac:	2000a6a8 	.word	0x2000a6a8

0801b4b0 <_malloc_r>:
 801b4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b4b4:	1ccd      	adds	r5, r1, #3
 801b4b6:	f025 0503 	bic.w	r5, r5, #3
 801b4ba:	3508      	adds	r5, #8
 801b4bc:	2d0c      	cmp	r5, #12
 801b4be:	bf38      	it	cc
 801b4c0:	250c      	movcc	r5, #12
 801b4c2:	2d00      	cmp	r5, #0
 801b4c4:	4606      	mov	r6, r0
 801b4c6:	db01      	blt.n	801b4cc <_malloc_r+0x1c>
 801b4c8:	42a9      	cmp	r1, r5
 801b4ca:	d904      	bls.n	801b4d6 <_malloc_r+0x26>
 801b4cc:	230c      	movs	r3, #12
 801b4ce:	6033      	str	r3, [r6, #0]
 801b4d0:	2000      	movs	r0, #0
 801b4d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b5ac <_malloc_r+0xfc>
 801b4da:	f000 f869 	bl	801b5b0 <__malloc_lock>
 801b4de:	f8d8 3000 	ldr.w	r3, [r8]
 801b4e2:	461c      	mov	r4, r3
 801b4e4:	bb44      	cbnz	r4, 801b538 <_malloc_r+0x88>
 801b4e6:	4629      	mov	r1, r5
 801b4e8:	4630      	mov	r0, r6
 801b4ea:	f7ff ffbf 	bl	801b46c <sbrk_aligned>
 801b4ee:	1c43      	adds	r3, r0, #1
 801b4f0:	4604      	mov	r4, r0
 801b4f2:	d158      	bne.n	801b5a6 <_malloc_r+0xf6>
 801b4f4:	f8d8 4000 	ldr.w	r4, [r8]
 801b4f8:	4627      	mov	r7, r4
 801b4fa:	2f00      	cmp	r7, #0
 801b4fc:	d143      	bne.n	801b586 <_malloc_r+0xd6>
 801b4fe:	2c00      	cmp	r4, #0
 801b500:	d04b      	beq.n	801b59a <_malloc_r+0xea>
 801b502:	6823      	ldr	r3, [r4, #0]
 801b504:	4639      	mov	r1, r7
 801b506:	4630      	mov	r0, r6
 801b508:	eb04 0903 	add.w	r9, r4, r3
 801b50c:	f002 fa2c 	bl	801d968 <_sbrk_r>
 801b510:	4581      	cmp	r9, r0
 801b512:	d142      	bne.n	801b59a <_malloc_r+0xea>
 801b514:	6821      	ldr	r1, [r4, #0]
 801b516:	1a6d      	subs	r5, r5, r1
 801b518:	4629      	mov	r1, r5
 801b51a:	4630      	mov	r0, r6
 801b51c:	f7ff ffa6 	bl	801b46c <sbrk_aligned>
 801b520:	3001      	adds	r0, #1
 801b522:	d03a      	beq.n	801b59a <_malloc_r+0xea>
 801b524:	6823      	ldr	r3, [r4, #0]
 801b526:	442b      	add	r3, r5
 801b528:	6023      	str	r3, [r4, #0]
 801b52a:	f8d8 3000 	ldr.w	r3, [r8]
 801b52e:	685a      	ldr	r2, [r3, #4]
 801b530:	bb62      	cbnz	r2, 801b58c <_malloc_r+0xdc>
 801b532:	f8c8 7000 	str.w	r7, [r8]
 801b536:	e00f      	b.n	801b558 <_malloc_r+0xa8>
 801b538:	6822      	ldr	r2, [r4, #0]
 801b53a:	1b52      	subs	r2, r2, r5
 801b53c:	d420      	bmi.n	801b580 <_malloc_r+0xd0>
 801b53e:	2a0b      	cmp	r2, #11
 801b540:	d917      	bls.n	801b572 <_malloc_r+0xc2>
 801b542:	1961      	adds	r1, r4, r5
 801b544:	42a3      	cmp	r3, r4
 801b546:	6025      	str	r5, [r4, #0]
 801b548:	bf18      	it	ne
 801b54a:	6059      	strne	r1, [r3, #4]
 801b54c:	6863      	ldr	r3, [r4, #4]
 801b54e:	bf08      	it	eq
 801b550:	f8c8 1000 	streq.w	r1, [r8]
 801b554:	5162      	str	r2, [r4, r5]
 801b556:	604b      	str	r3, [r1, #4]
 801b558:	4630      	mov	r0, r6
 801b55a:	f000 f82f 	bl	801b5bc <__malloc_unlock>
 801b55e:	f104 000b 	add.w	r0, r4, #11
 801b562:	1d23      	adds	r3, r4, #4
 801b564:	f020 0007 	bic.w	r0, r0, #7
 801b568:	1ac2      	subs	r2, r0, r3
 801b56a:	bf1c      	itt	ne
 801b56c:	1a1b      	subne	r3, r3, r0
 801b56e:	50a3      	strne	r3, [r4, r2]
 801b570:	e7af      	b.n	801b4d2 <_malloc_r+0x22>
 801b572:	6862      	ldr	r2, [r4, #4]
 801b574:	42a3      	cmp	r3, r4
 801b576:	bf0c      	ite	eq
 801b578:	f8c8 2000 	streq.w	r2, [r8]
 801b57c:	605a      	strne	r2, [r3, #4]
 801b57e:	e7eb      	b.n	801b558 <_malloc_r+0xa8>
 801b580:	4623      	mov	r3, r4
 801b582:	6864      	ldr	r4, [r4, #4]
 801b584:	e7ae      	b.n	801b4e4 <_malloc_r+0x34>
 801b586:	463c      	mov	r4, r7
 801b588:	687f      	ldr	r7, [r7, #4]
 801b58a:	e7b6      	b.n	801b4fa <_malloc_r+0x4a>
 801b58c:	461a      	mov	r2, r3
 801b58e:	685b      	ldr	r3, [r3, #4]
 801b590:	42a3      	cmp	r3, r4
 801b592:	d1fb      	bne.n	801b58c <_malloc_r+0xdc>
 801b594:	2300      	movs	r3, #0
 801b596:	6053      	str	r3, [r2, #4]
 801b598:	e7de      	b.n	801b558 <_malloc_r+0xa8>
 801b59a:	230c      	movs	r3, #12
 801b59c:	6033      	str	r3, [r6, #0]
 801b59e:	4630      	mov	r0, r6
 801b5a0:	f000 f80c 	bl	801b5bc <__malloc_unlock>
 801b5a4:	e794      	b.n	801b4d0 <_malloc_r+0x20>
 801b5a6:	6005      	str	r5, [r0, #0]
 801b5a8:	e7d6      	b.n	801b558 <_malloc_r+0xa8>
 801b5aa:	bf00      	nop
 801b5ac:	2000a6ac 	.word	0x2000a6ac

0801b5b0 <__malloc_lock>:
 801b5b0:	4801      	ldr	r0, [pc, #4]	@ (801b5b8 <__malloc_lock+0x8>)
 801b5b2:	f7ff b882 	b.w	801a6ba <__retarget_lock_acquire_recursive>
 801b5b6:	bf00      	nop
 801b5b8:	2000a6a4 	.word	0x2000a6a4

0801b5bc <__malloc_unlock>:
 801b5bc:	4801      	ldr	r0, [pc, #4]	@ (801b5c4 <__malloc_unlock+0x8>)
 801b5be:	f7ff b87d 	b.w	801a6bc <__retarget_lock_release_recursive>
 801b5c2:	bf00      	nop
 801b5c4:	2000a6a4 	.word	0x2000a6a4

0801b5c8 <_Balloc>:
 801b5c8:	b570      	push	{r4, r5, r6, lr}
 801b5ca:	69c6      	ldr	r6, [r0, #28]
 801b5cc:	4604      	mov	r4, r0
 801b5ce:	460d      	mov	r5, r1
 801b5d0:	b976      	cbnz	r6, 801b5f0 <_Balloc+0x28>
 801b5d2:	2010      	movs	r0, #16
 801b5d4:	f7ff ff42 	bl	801b45c <malloc>
 801b5d8:	4602      	mov	r2, r0
 801b5da:	61e0      	str	r0, [r4, #28]
 801b5dc:	b920      	cbnz	r0, 801b5e8 <_Balloc+0x20>
 801b5de:	4b18      	ldr	r3, [pc, #96]	@ (801b640 <_Balloc+0x78>)
 801b5e0:	4818      	ldr	r0, [pc, #96]	@ (801b644 <_Balloc+0x7c>)
 801b5e2:	216b      	movs	r1, #107	@ 0x6b
 801b5e4:	f7ff f87a 	bl	801a6dc <__assert_func>
 801b5e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b5ec:	6006      	str	r6, [r0, #0]
 801b5ee:	60c6      	str	r6, [r0, #12]
 801b5f0:	69e6      	ldr	r6, [r4, #28]
 801b5f2:	68f3      	ldr	r3, [r6, #12]
 801b5f4:	b183      	cbz	r3, 801b618 <_Balloc+0x50>
 801b5f6:	69e3      	ldr	r3, [r4, #28]
 801b5f8:	68db      	ldr	r3, [r3, #12]
 801b5fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b5fe:	b9b8      	cbnz	r0, 801b630 <_Balloc+0x68>
 801b600:	2101      	movs	r1, #1
 801b602:	fa01 f605 	lsl.w	r6, r1, r5
 801b606:	1d72      	adds	r2, r6, #5
 801b608:	0092      	lsls	r2, r2, #2
 801b60a:	4620      	mov	r0, r4
 801b60c:	f002 f9cb 	bl	801d9a6 <_calloc_r>
 801b610:	b160      	cbz	r0, 801b62c <_Balloc+0x64>
 801b612:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b616:	e00e      	b.n	801b636 <_Balloc+0x6e>
 801b618:	2221      	movs	r2, #33	@ 0x21
 801b61a:	2104      	movs	r1, #4
 801b61c:	4620      	mov	r0, r4
 801b61e:	f002 f9c2 	bl	801d9a6 <_calloc_r>
 801b622:	69e3      	ldr	r3, [r4, #28]
 801b624:	60f0      	str	r0, [r6, #12]
 801b626:	68db      	ldr	r3, [r3, #12]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d1e4      	bne.n	801b5f6 <_Balloc+0x2e>
 801b62c:	2000      	movs	r0, #0
 801b62e:	bd70      	pop	{r4, r5, r6, pc}
 801b630:	6802      	ldr	r2, [r0, #0]
 801b632:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b636:	2300      	movs	r3, #0
 801b638:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b63c:	e7f7      	b.n	801b62e <_Balloc+0x66>
 801b63e:	bf00      	nop
 801b640:	080202d9 	.word	0x080202d9
 801b644:	08020359 	.word	0x08020359

0801b648 <_Bfree>:
 801b648:	b570      	push	{r4, r5, r6, lr}
 801b64a:	69c6      	ldr	r6, [r0, #28]
 801b64c:	4605      	mov	r5, r0
 801b64e:	460c      	mov	r4, r1
 801b650:	b976      	cbnz	r6, 801b670 <_Bfree+0x28>
 801b652:	2010      	movs	r0, #16
 801b654:	f7ff ff02 	bl	801b45c <malloc>
 801b658:	4602      	mov	r2, r0
 801b65a:	61e8      	str	r0, [r5, #28]
 801b65c:	b920      	cbnz	r0, 801b668 <_Bfree+0x20>
 801b65e:	4b09      	ldr	r3, [pc, #36]	@ (801b684 <_Bfree+0x3c>)
 801b660:	4809      	ldr	r0, [pc, #36]	@ (801b688 <_Bfree+0x40>)
 801b662:	218f      	movs	r1, #143	@ 0x8f
 801b664:	f7ff f83a 	bl	801a6dc <__assert_func>
 801b668:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b66c:	6006      	str	r6, [r0, #0]
 801b66e:	60c6      	str	r6, [r0, #12]
 801b670:	b13c      	cbz	r4, 801b682 <_Bfree+0x3a>
 801b672:	69eb      	ldr	r3, [r5, #28]
 801b674:	6862      	ldr	r2, [r4, #4]
 801b676:	68db      	ldr	r3, [r3, #12]
 801b678:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b67c:	6021      	str	r1, [r4, #0]
 801b67e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b682:	bd70      	pop	{r4, r5, r6, pc}
 801b684:	080202d9 	.word	0x080202d9
 801b688:	08020359 	.word	0x08020359

0801b68c <__multadd>:
 801b68c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b690:	690d      	ldr	r5, [r1, #16]
 801b692:	4607      	mov	r7, r0
 801b694:	460c      	mov	r4, r1
 801b696:	461e      	mov	r6, r3
 801b698:	f101 0c14 	add.w	ip, r1, #20
 801b69c:	2000      	movs	r0, #0
 801b69e:	f8dc 3000 	ldr.w	r3, [ip]
 801b6a2:	b299      	uxth	r1, r3
 801b6a4:	fb02 6101 	mla	r1, r2, r1, r6
 801b6a8:	0c1e      	lsrs	r6, r3, #16
 801b6aa:	0c0b      	lsrs	r3, r1, #16
 801b6ac:	fb02 3306 	mla	r3, r2, r6, r3
 801b6b0:	b289      	uxth	r1, r1
 801b6b2:	3001      	adds	r0, #1
 801b6b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b6b8:	4285      	cmp	r5, r0
 801b6ba:	f84c 1b04 	str.w	r1, [ip], #4
 801b6be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b6c2:	dcec      	bgt.n	801b69e <__multadd+0x12>
 801b6c4:	b30e      	cbz	r6, 801b70a <__multadd+0x7e>
 801b6c6:	68a3      	ldr	r3, [r4, #8]
 801b6c8:	42ab      	cmp	r3, r5
 801b6ca:	dc19      	bgt.n	801b700 <__multadd+0x74>
 801b6cc:	6861      	ldr	r1, [r4, #4]
 801b6ce:	4638      	mov	r0, r7
 801b6d0:	3101      	adds	r1, #1
 801b6d2:	f7ff ff79 	bl	801b5c8 <_Balloc>
 801b6d6:	4680      	mov	r8, r0
 801b6d8:	b928      	cbnz	r0, 801b6e6 <__multadd+0x5a>
 801b6da:	4602      	mov	r2, r0
 801b6dc:	4b0c      	ldr	r3, [pc, #48]	@ (801b710 <__multadd+0x84>)
 801b6de:	480d      	ldr	r0, [pc, #52]	@ (801b714 <__multadd+0x88>)
 801b6e0:	21ba      	movs	r1, #186	@ 0xba
 801b6e2:	f7fe fffb 	bl	801a6dc <__assert_func>
 801b6e6:	6922      	ldr	r2, [r4, #16]
 801b6e8:	3202      	adds	r2, #2
 801b6ea:	f104 010c 	add.w	r1, r4, #12
 801b6ee:	0092      	lsls	r2, r2, #2
 801b6f0:	300c      	adds	r0, #12
 801b6f2:	f7fe ffe4 	bl	801a6be <memcpy>
 801b6f6:	4621      	mov	r1, r4
 801b6f8:	4638      	mov	r0, r7
 801b6fa:	f7ff ffa5 	bl	801b648 <_Bfree>
 801b6fe:	4644      	mov	r4, r8
 801b700:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b704:	3501      	adds	r5, #1
 801b706:	615e      	str	r6, [r3, #20]
 801b708:	6125      	str	r5, [r4, #16]
 801b70a:	4620      	mov	r0, r4
 801b70c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b710:	08020348 	.word	0x08020348
 801b714:	08020359 	.word	0x08020359

0801b718 <__s2b>:
 801b718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b71c:	460c      	mov	r4, r1
 801b71e:	4615      	mov	r5, r2
 801b720:	461f      	mov	r7, r3
 801b722:	2209      	movs	r2, #9
 801b724:	3308      	adds	r3, #8
 801b726:	4606      	mov	r6, r0
 801b728:	fb93 f3f2 	sdiv	r3, r3, r2
 801b72c:	2100      	movs	r1, #0
 801b72e:	2201      	movs	r2, #1
 801b730:	429a      	cmp	r2, r3
 801b732:	db09      	blt.n	801b748 <__s2b+0x30>
 801b734:	4630      	mov	r0, r6
 801b736:	f7ff ff47 	bl	801b5c8 <_Balloc>
 801b73a:	b940      	cbnz	r0, 801b74e <__s2b+0x36>
 801b73c:	4602      	mov	r2, r0
 801b73e:	4b19      	ldr	r3, [pc, #100]	@ (801b7a4 <__s2b+0x8c>)
 801b740:	4819      	ldr	r0, [pc, #100]	@ (801b7a8 <__s2b+0x90>)
 801b742:	21d3      	movs	r1, #211	@ 0xd3
 801b744:	f7fe ffca 	bl	801a6dc <__assert_func>
 801b748:	0052      	lsls	r2, r2, #1
 801b74a:	3101      	adds	r1, #1
 801b74c:	e7f0      	b.n	801b730 <__s2b+0x18>
 801b74e:	9b08      	ldr	r3, [sp, #32]
 801b750:	6143      	str	r3, [r0, #20]
 801b752:	2d09      	cmp	r5, #9
 801b754:	f04f 0301 	mov.w	r3, #1
 801b758:	6103      	str	r3, [r0, #16]
 801b75a:	dd16      	ble.n	801b78a <__s2b+0x72>
 801b75c:	f104 0909 	add.w	r9, r4, #9
 801b760:	46c8      	mov	r8, r9
 801b762:	442c      	add	r4, r5
 801b764:	f818 3b01 	ldrb.w	r3, [r8], #1
 801b768:	4601      	mov	r1, r0
 801b76a:	3b30      	subs	r3, #48	@ 0x30
 801b76c:	220a      	movs	r2, #10
 801b76e:	4630      	mov	r0, r6
 801b770:	f7ff ff8c 	bl	801b68c <__multadd>
 801b774:	45a0      	cmp	r8, r4
 801b776:	d1f5      	bne.n	801b764 <__s2b+0x4c>
 801b778:	f1a5 0408 	sub.w	r4, r5, #8
 801b77c:	444c      	add	r4, r9
 801b77e:	1b2d      	subs	r5, r5, r4
 801b780:	1963      	adds	r3, r4, r5
 801b782:	42bb      	cmp	r3, r7
 801b784:	db04      	blt.n	801b790 <__s2b+0x78>
 801b786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b78a:	340a      	adds	r4, #10
 801b78c:	2509      	movs	r5, #9
 801b78e:	e7f6      	b.n	801b77e <__s2b+0x66>
 801b790:	f814 3b01 	ldrb.w	r3, [r4], #1
 801b794:	4601      	mov	r1, r0
 801b796:	3b30      	subs	r3, #48	@ 0x30
 801b798:	220a      	movs	r2, #10
 801b79a:	4630      	mov	r0, r6
 801b79c:	f7ff ff76 	bl	801b68c <__multadd>
 801b7a0:	e7ee      	b.n	801b780 <__s2b+0x68>
 801b7a2:	bf00      	nop
 801b7a4:	08020348 	.word	0x08020348
 801b7a8:	08020359 	.word	0x08020359

0801b7ac <__hi0bits>:
 801b7ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801b7b0:	4603      	mov	r3, r0
 801b7b2:	bf36      	itet	cc
 801b7b4:	0403      	lslcc	r3, r0, #16
 801b7b6:	2000      	movcs	r0, #0
 801b7b8:	2010      	movcc	r0, #16
 801b7ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b7be:	bf3c      	itt	cc
 801b7c0:	021b      	lslcc	r3, r3, #8
 801b7c2:	3008      	addcc	r0, #8
 801b7c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b7c8:	bf3c      	itt	cc
 801b7ca:	011b      	lslcc	r3, r3, #4
 801b7cc:	3004      	addcc	r0, #4
 801b7ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b7d2:	bf3c      	itt	cc
 801b7d4:	009b      	lslcc	r3, r3, #2
 801b7d6:	3002      	addcc	r0, #2
 801b7d8:	2b00      	cmp	r3, #0
 801b7da:	db05      	blt.n	801b7e8 <__hi0bits+0x3c>
 801b7dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801b7e0:	f100 0001 	add.w	r0, r0, #1
 801b7e4:	bf08      	it	eq
 801b7e6:	2020      	moveq	r0, #32
 801b7e8:	4770      	bx	lr

0801b7ea <__lo0bits>:
 801b7ea:	6803      	ldr	r3, [r0, #0]
 801b7ec:	4602      	mov	r2, r0
 801b7ee:	f013 0007 	ands.w	r0, r3, #7
 801b7f2:	d00b      	beq.n	801b80c <__lo0bits+0x22>
 801b7f4:	07d9      	lsls	r1, r3, #31
 801b7f6:	d421      	bmi.n	801b83c <__lo0bits+0x52>
 801b7f8:	0798      	lsls	r0, r3, #30
 801b7fa:	bf49      	itett	mi
 801b7fc:	085b      	lsrmi	r3, r3, #1
 801b7fe:	089b      	lsrpl	r3, r3, #2
 801b800:	2001      	movmi	r0, #1
 801b802:	6013      	strmi	r3, [r2, #0]
 801b804:	bf5c      	itt	pl
 801b806:	6013      	strpl	r3, [r2, #0]
 801b808:	2002      	movpl	r0, #2
 801b80a:	4770      	bx	lr
 801b80c:	b299      	uxth	r1, r3
 801b80e:	b909      	cbnz	r1, 801b814 <__lo0bits+0x2a>
 801b810:	0c1b      	lsrs	r3, r3, #16
 801b812:	2010      	movs	r0, #16
 801b814:	b2d9      	uxtb	r1, r3
 801b816:	b909      	cbnz	r1, 801b81c <__lo0bits+0x32>
 801b818:	3008      	adds	r0, #8
 801b81a:	0a1b      	lsrs	r3, r3, #8
 801b81c:	0719      	lsls	r1, r3, #28
 801b81e:	bf04      	itt	eq
 801b820:	091b      	lsreq	r3, r3, #4
 801b822:	3004      	addeq	r0, #4
 801b824:	0799      	lsls	r1, r3, #30
 801b826:	bf04      	itt	eq
 801b828:	089b      	lsreq	r3, r3, #2
 801b82a:	3002      	addeq	r0, #2
 801b82c:	07d9      	lsls	r1, r3, #31
 801b82e:	d403      	bmi.n	801b838 <__lo0bits+0x4e>
 801b830:	085b      	lsrs	r3, r3, #1
 801b832:	f100 0001 	add.w	r0, r0, #1
 801b836:	d003      	beq.n	801b840 <__lo0bits+0x56>
 801b838:	6013      	str	r3, [r2, #0]
 801b83a:	4770      	bx	lr
 801b83c:	2000      	movs	r0, #0
 801b83e:	4770      	bx	lr
 801b840:	2020      	movs	r0, #32
 801b842:	4770      	bx	lr

0801b844 <__i2b>:
 801b844:	b510      	push	{r4, lr}
 801b846:	460c      	mov	r4, r1
 801b848:	2101      	movs	r1, #1
 801b84a:	f7ff febd 	bl	801b5c8 <_Balloc>
 801b84e:	4602      	mov	r2, r0
 801b850:	b928      	cbnz	r0, 801b85e <__i2b+0x1a>
 801b852:	4b05      	ldr	r3, [pc, #20]	@ (801b868 <__i2b+0x24>)
 801b854:	4805      	ldr	r0, [pc, #20]	@ (801b86c <__i2b+0x28>)
 801b856:	f240 1145 	movw	r1, #325	@ 0x145
 801b85a:	f7fe ff3f 	bl	801a6dc <__assert_func>
 801b85e:	2301      	movs	r3, #1
 801b860:	6144      	str	r4, [r0, #20]
 801b862:	6103      	str	r3, [r0, #16]
 801b864:	bd10      	pop	{r4, pc}
 801b866:	bf00      	nop
 801b868:	08020348 	.word	0x08020348
 801b86c:	08020359 	.word	0x08020359

0801b870 <__multiply>:
 801b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b874:	4617      	mov	r7, r2
 801b876:	690a      	ldr	r2, [r1, #16]
 801b878:	693b      	ldr	r3, [r7, #16]
 801b87a:	429a      	cmp	r2, r3
 801b87c:	bfa8      	it	ge
 801b87e:	463b      	movge	r3, r7
 801b880:	4689      	mov	r9, r1
 801b882:	bfa4      	itt	ge
 801b884:	460f      	movge	r7, r1
 801b886:	4699      	movge	r9, r3
 801b888:	693d      	ldr	r5, [r7, #16]
 801b88a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b88e:	68bb      	ldr	r3, [r7, #8]
 801b890:	6879      	ldr	r1, [r7, #4]
 801b892:	eb05 060a 	add.w	r6, r5, sl
 801b896:	42b3      	cmp	r3, r6
 801b898:	b085      	sub	sp, #20
 801b89a:	bfb8      	it	lt
 801b89c:	3101      	addlt	r1, #1
 801b89e:	f7ff fe93 	bl	801b5c8 <_Balloc>
 801b8a2:	b930      	cbnz	r0, 801b8b2 <__multiply+0x42>
 801b8a4:	4602      	mov	r2, r0
 801b8a6:	4b41      	ldr	r3, [pc, #260]	@ (801b9ac <__multiply+0x13c>)
 801b8a8:	4841      	ldr	r0, [pc, #260]	@ (801b9b0 <__multiply+0x140>)
 801b8aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801b8ae:	f7fe ff15 	bl	801a6dc <__assert_func>
 801b8b2:	f100 0414 	add.w	r4, r0, #20
 801b8b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801b8ba:	4623      	mov	r3, r4
 801b8bc:	2200      	movs	r2, #0
 801b8be:	4573      	cmp	r3, lr
 801b8c0:	d320      	bcc.n	801b904 <__multiply+0x94>
 801b8c2:	f107 0814 	add.w	r8, r7, #20
 801b8c6:	f109 0114 	add.w	r1, r9, #20
 801b8ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801b8ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801b8d2:	9302      	str	r3, [sp, #8]
 801b8d4:	1beb      	subs	r3, r5, r7
 801b8d6:	3b15      	subs	r3, #21
 801b8d8:	f023 0303 	bic.w	r3, r3, #3
 801b8dc:	3304      	adds	r3, #4
 801b8de:	3715      	adds	r7, #21
 801b8e0:	42bd      	cmp	r5, r7
 801b8e2:	bf38      	it	cc
 801b8e4:	2304      	movcc	r3, #4
 801b8e6:	9301      	str	r3, [sp, #4]
 801b8e8:	9b02      	ldr	r3, [sp, #8]
 801b8ea:	9103      	str	r1, [sp, #12]
 801b8ec:	428b      	cmp	r3, r1
 801b8ee:	d80c      	bhi.n	801b90a <__multiply+0x9a>
 801b8f0:	2e00      	cmp	r6, #0
 801b8f2:	dd03      	ble.n	801b8fc <__multiply+0x8c>
 801b8f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801b8f8:	2b00      	cmp	r3, #0
 801b8fa:	d055      	beq.n	801b9a8 <__multiply+0x138>
 801b8fc:	6106      	str	r6, [r0, #16]
 801b8fe:	b005      	add	sp, #20
 801b900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b904:	f843 2b04 	str.w	r2, [r3], #4
 801b908:	e7d9      	b.n	801b8be <__multiply+0x4e>
 801b90a:	f8b1 a000 	ldrh.w	sl, [r1]
 801b90e:	f1ba 0f00 	cmp.w	sl, #0
 801b912:	d01f      	beq.n	801b954 <__multiply+0xe4>
 801b914:	46c4      	mov	ip, r8
 801b916:	46a1      	mov	r9, r4
 801b918:	2700      	movs	r7, #0
 801b91a:	f85c 2b04 	ldr.w	r2, [ip], #4
 801b91e:	f8d9 3000 	ldr.w	r3, [r9]
 801b922:	fa1f fb82 	uxth.w	fp, r2
 801b926:	b29b      	uxth	r3, r3
 801b928:	fb0a 330b 	mla	r3, sl, fp, r3
 801b92c:	443b      	add	r3, r7
 801b92e:	f8d9 7000 	ldr.w	r7, [r9]
 801b932:	0c12      	lsrs	r2, r2, #16
 801b934:	0c3f      	lsrs	r7, r7, #16
 801b936:	fb0a 7202 	mla	r2, sl, r2, r7
 801b93a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801b93e:	b29b      	uxth	r3, r3
 801b940:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b944:	4565      	cmp	r5, ip
 801b946:	f849 3b04 	str.w	r3, [r9], #4
 801b94a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801b94e:	d8e4      	bhi.n	801b91a <__multiply+0xaa>
 801b950:	9b01      	ldr	r3, [sp, #4]
 801b952:	50e7      	str	r7, [r4, r3]
 801b954:	9b03      	ldr	r3, [sp, #12]
 801b956:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801b95a:	3104      	adds	r1, #4
 801b95c:	f1b9 0f00 	cmp.w	r9, #0
 801b960:	d020      	beq.n	801b9a4 <__multiply+0x134>
 801b962:	6823      	ldr	r3, [r4, #0]
 801b964:	4647      	mov	r7, r8
 801b966:	46a4      	mov	ip, r4
 801b968:	f04f 0a00 	mov.w	sl, #0
 801b96c:	f8b7 b000 	ldrh.w	fp, [r7]
 801b970:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801b974:	fb09 220b 	mla	r2, r9, fp, r2
 801b978:	4452      	add	r2, sl
 801b97a:	b29b      	uxth	r3, r3
 801b97c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b980:	f84c 3b04 	str.w	r3, [ip], #4
 801b984:	f857 3b04 	ldr.w	r3, [r7], #4
 801b988:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b98c:	f8bc 3000 	ldrh.w	r3, [ip]
 801b990:	fb09 330a 	mla	r3, r9, sl, r3
 801b994:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801b998:	42bd      	cmp	r5, r7
 801b99a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b99e:	d8e5      	bhi.n	801b96c <__multiply+0xfc>
 801b9a0:	9a01      	ldr	r2, [sp, #4]
 801b9a2:	50a3      	str	r3, [r4, r2]
 801b9a4:	3404      	adds	r4, #4
 801b9a6:	e79f      	b.n	801b8e8 <__multiply+0x78>
 801b9a8:	3e01      	subs	r6, #1
 801b9aa:	e7a1      	b.n	801b8f0 <__multiply+0x80>
 801b9ac:	08020348 	.word	0x08020348
 801b9b0:	08020359 	.word	0x08020359

0801b9b4 <__pow5mult>:
 801b9b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b9b8:	4615      	mov	r5, r2
 801b9ba:	f012 0203 	ands.w	r2, r2, #3
 801b9be:	4607      	mov	r7, r0
 801b9c0:	460e      	mov	r6, r1
 801b9c2:	d007      	beq.n	801b9d4 <__pow5mult+0x20>
 801b9c4:	4c25      	ldr	r4, [pc, #148]	@ (801ba5c <__pow5mult+0xa8>)
 801b9c6:	3a01      	subs	r2, #1
 801b9c8:	2300      	movs	r3, #0
 801b9ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b9ce:	f7ff fe5d 	bl	801b68c <__multadd>
 801b9d2:	4606      	mov	r6, r0
 801b9d4:	10ad      	asrs	r5, r5, #2
 801b9d6:	d03d      	beq.n	801ba54 <__pow5mult+0xa0>
 801b9d8:	69fc      	ldr	r4, [r7, #28]
 801b9da:	b97c      	cbnz	r4, 801b9fc <__pow5mult+0x48>
 801b9dc:	2010      	movs	r0, #16
 801b9de:	f7ff fd3d 	bl	801b45c <malloc>
 801b9e2:	4602      	mov	r2, r0
 801b9e4:	61f8      	str	r0, [r7, #28]
 801b9e6:	b928      	cbnz	r0, 801b9f4 <__pow5mult+0x40>
 801b9e8:	4b1d      	ldr	r3, [pc, #116]	@ (801ba60 <__pow5mult+0xac>)
 801b9ea:	481e      	ldr	r0, [pc, #120]	@ (801ba64 <__pow5mult+0xb0>)
 801b9ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801b9f0:	f7fe fe74 	bl	801a6dc <__assert_func>
 801b9f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b9f8:	6004      	str	r4, [r0, #0]
 801b9fa:	60c4      	str	r4, [r0, #12]
 801b9fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801ba00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ba04:	b94c      	cbnz	r4, 801ba1a <__pow5mult+0x66>
 801ba06:	f240 2171 	movw	r1, #625	@ 0x271
 801ba0a:	4638      	mov	r0, r7
 801ba0c:	f7ff ff1a 	bl	801b844 <__i2b>
 801ba10:	2300      	movs	r3, #0
 801ba12:	f8c8 0008 	str.w	r0, [r8, #8]
 801ba16:	4604      	mov	r4, r0
 801ba18:	6003      	str	r3, [r0, #0]
 801ba1a:	f04f 0900 	mov.w	r9, #0
 801ba1e:	07eb      	lsls	r3, r5, #31
 801ba20:	d50a      	bpl.n	801ba38 <__pow5mult+0x84>
 801ba22:	4631      	mov	r1, r6
 801ba24:	4622      	mov	r2, r4
 801ba26:	4638      	mov	r0, r7
 801ba28:	f7ff ff22 	bl	801b870 <__multiply>
 801ba2c:	4631      	mov	r1, r6
 801ba2e:	4680      	mov	r8, r0
 801ba30:	4638      	mov	r0, r7
 801ba32:	f7ff fe09 	bl	801b648 <_Bfree>
 801ba36:	4646      	mov	r6, r8
 801ba38:	106d      	asrs	r5, r5, #1
 801ba3a:	d00b      	beq.n	801ba54 <__pow5mult+0xa0>
 801ba3c:	6820      	ldr	r0, [r4, #0]
 801ba3e:	b938      	cbnz	r0, 801ba50 <__pow5mult+0x9c>
 801ba40:	4622      	mov	r2, r4
 801ba42:	4621      	mov	r1, r4
 801ba44:	4638      	mov	r0, r7
 801ba46:	f7ff ff13 	bl	801b870 <__multiply>
 801ba4a:	6020      	str	r0, [r4, #0]
 801ba4c:	f8c0 9000 	str.w	r9, [r0]
 801ba50:	4604      	mov	r4, r0
 801ba52:	e7e4      	b.n	801ba1e <__pow5mult+0x6a>
 801ba54:	4630      	mov	r0, r6
 801ba56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ba5a:	bf00      	nop
 801ba5c:	08020858 	.word	0x08020858
 801ba60:	080202d9 	.word	0x080202d9
 801ba64:	08020359 	.word	0x08020359

0801ba68 <__lshift>:
 801ba68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ba6c:	460c      	mov	r4, r1
 801ba6e:	6849      	ldr	r1, [r1, #4]
 801ba70:	6923      	ldr	r3, [r4, #16]
 801ba72:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ba76:	68a3      	ldr	r3, [r4, #8]
 801ba78:	4607      	mov	r7, r0
 801ba7a:	4691      	mov	r9, r2
 801ba7c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ba80:	f108 0601 	add.w	r6, r8, #1
 801ba84:	42b3      	cmp	r3, r6
 801ba86:	db0b      	blt.n	801baa0 <__lshift+0x38>
 801ba88:	4638      	mov	r0, r7
 801ba8a:	f7ff fd9d 	bl	801b5c8 <_Balloc>
 801ba8e:	4605      	mov	r5, r0
 801ba90:	b948      	cbnz	r0, 801baa6 <__lshift+0x3e>
 801ba92:	4602      	mov	r2, r0
 801ba94:	4b28      	ldr	r3, [pc, #160]	@ (801bb38 <__lshift+0xd0>)
 801ba96:	4829      	ldr	r0, [pc, #164]	@ (801bb3c <__lshift+0xd4>)
 801ba98:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801ba9c:	f7fe fe1e 	bl	801a6dc <__assert_func>
 801baa0:	3101      	adds	r1, #1
 801baa2:	005b      	lsls	r3, r3, #1
 801baa4:	e7ee      	b.n	801ba84 <__lshift+0x1c>
 801baa6:	2300      	movs	r3, #0
 801baa8:	f100 0114 	add.w	r1, r0, #20
 801baac:	f100 0210 	add.w	r2, r0, #16
 801bab0:	4618      	mov	r0, r3
 801bab2:	4553      	cmp	r3, sl
 801bab4:	db33      	blt.n	801bb1e <__lshift+0xb6>
 801bab6:	6920      	ldr	r0, [r4, #16]
 801bab8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801babc:	f104 0314 	add.w	r3, r4, #20
 801bac0:	f019 091f 	ands.w	r9, r9, #31
 801bac4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bac8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bacc:	d02b      	beq.n	801bb26 <__lshift+0xbe>
 801bace:	f1c9 0e20 	rsb	lr, r9, #32
 801bad2:	468a      	mov	sl, r1
 801bad4:	2200      	movs	r2, #0
 801bad6:	6818      	ldr	r0, [r3, #0]
 801bad8:	fa00 f009 	lsl.w	r0, r0, r9
 801badc:	4310      	orrs	r0, r2
 801bade:	f84a 0b04 	str.w	r0, [sl], #4
 801bae2:	f853 2b04 	ldr.w	r2, [r3], #4
 801bae6:	459c      	cmp	ip, r3
 801bae8:	fa22 f20e 	lsr.w	r2, r2, lr
 801baec:	d8f3      	bhi.n	801bad6 <__lshift+0x6e>
 801baee:	ebac 0304 	sub.w	r3, ip, r4
 801baf2:	3b15      	subs	r3, #21
 801baf4:	f023 0303 	bic.w	r3, r3, #3
 801baf8:	3304      	adds	r3, #4
 801bafa:	f104 0015 	add.w	r0, r4, #21
 801bafe:	4560      	cmp	r0, ip
 801bb00:	bf88      	it	hi
 801bb02:	2304      	movhi	r3, #4
 801bb04:	50ca      	str	r2, [r1, r3]
 801bb06:	b10a      	cbz	r2, 801bb0c <__lshift+0xa4>
 801bb08:	f108 0602 	add.w	r6, r8, #2
 801bb0c:	3e01      	subs	r6, #1
 801bb0e:	4638      	mov	r0, r7
 801bb10:	612e      	str	r6, [r5, #16]
 801bb12:	4621      	mov	r1, r4
 801bb14:	f7ff fd98 	bl	801b648 <_Bfree>
 801bb18:	4628      	mov	r0, r5
 801bb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bb1e:	f842 0f04 	str.w	r0, [r2, #4]!
 801bb22:	3301      	adds	r3, #1
 801bb24:	e7c5      	b.n	801bab2 <__lshift+0x4a>
 801bb26:	3904      	subs	r1, #4
 801bb28:	f853 2b04 	ldr.w	r2, [r3], #4
 801bb2c:	f841 2f04 	str.w	r2, [r1, #4]!
 801bb30:	459c      	cmp	ip, r3
 801bb32:	d8f9      	bhi.n	801bb28 <__lshift+0xc0>
 801bb34:	e7ea      	b.n	801bb0c <__lshift+0xa4>
 801bb36:	bf00      	nop
 801bb38:	08020348 	.word	0x08020348
 801bb3c:	08020359 	.word	0x08020359

0801bb40 <__mcmp>:
 801bb40:	690a      	ldr	r2, [r1, #16]
 801bb42:	4603      	mov	r3, r0
 801bb44:	6900      	ldr	r0, [r0, #16]
 801bb46:	1a80      	subs	r0, r0, r2
 801bb48:	b530      	push	{r4, r5, lr}
 801bb4a:	d10e      	bne.n	801bb6a <__mcmp+0x2a>
 801bb4c:	3314      	adds	r3, #20
 801bb4e:	3114      	adds	r1, #20
 801bb50:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bb54:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bb58:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bb5c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bb60:	4295      	cmp	r5, r2
 801bb62:	d003      	beq.n	801bb6c <__mcmp+0x2c>
 801bb64:	d205      	bcs.n	801bb72 <__mcmp+0x32>
 801bb66:	f04f 30ff 	mov.w	r0, #4294967295
 801bb6a:	bd30      	pop	{r4, r5, pc}
 801bb6c:	42a3      	cmp	r3, r4
 801bb6e:	d3f3      	bcc.n	801bb58 <__mcmp+0x18>
 801bb70:	e7fb      	b.n	801bb6a <__mcmp+0x2a>
 801bb72:	2001      	movs	r0, #1
 801bb74:	e7f9      	b.n	801bb6a <__mcmp+0x2a>
	...

0801bb78 <__mdiff>:
 801bb78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb7c:	4689      	mov	r9, r1
 801bb7e:	4606      	mov	r6, r0
 801bb80:	4611      	mov	r1, r2
 801bb82:	4648      	mov	r0, r9
 801bb84:	4614      	mov	r4, r2
 801bb86:	f7ff ffdb 	bl	801bb40 <__mcmp>
 801bb8a:	1e05      	subs	r5, r0, #0
 801bb8c:	d112      	bne.n	801bbb4 <__mdiff+0x3c>
 801bb8e:	4629      	mov	r1, r5
 801bb90:	4630      	mov	r0, r6
 801bb92:	f7ff fd19 	bl	801b5c8 <_Balloc>
 801bb96:	4602      	mov	r2, r0
 801bb98:	b928      	cbnz	r0, 801bba6 <__mdiff+0x2e>
 801bb9a:	4b3f      	ldr	r3, [pc, #252]	@ (801bc98 <__mdiff+0x120>)
 801bb9c:	f240 2137 	movw	r1, #567	@ 0x237
 801bba0:	483e      	ldr	r0, [pc, #248]	@ (801bc9c <__mdiff+0x124>)
 801bba2:	f7fe fd9b 	bl	801a6dc <__assert_func>
 801bba6:	2301      	movs	r3, #1
 801bba8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bbac:	4610      	mov	r0, r2
 801bbae:	b003      	add	sp, #12
 801bbb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbb4:	bfbc      	itt	lt
 801bbb6:	464b      	movlt	r3, r9
 801bbb8:	46a1      	movlt	r9, r4
 801bbba:	4630      	mov	r0, r6
 801bbbc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bbc0:	bfba      	itte	lt
 801bbc2:	461c      	movlt	r4, r3
 801bbc4:	2501      	movlt	r5, #1
 801bbc6:	2500      	movge	r5, #0
 801bbc8:	f7ff fcfe 	bl	801b5c8 <_Balloc>
 801bbcc:	4602      	mov	r2, r0
 801bbce:	b918      	cbnz	r0, 801bbd8 <__mdiff+0x60>
 801bbd0:	4b31      	ldr	r3, [pc, #196]	@ (801bc98 <__mdiff+0x120>)
 801bbd2:	f240 2145 	movw	r1, #581	@ 0x245
 801bbd6:	e7e3      	b.n	801bba0 <__mdiff+0x28>
 801bbd8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801bbdc:	6926      	ldr	r6, [r4, #16]
 801bbde:	60c5      	str	r5, [r0, #12]
 801bbe0:	f109 0310 	add.w	r3, r9, #16
 801bbe4:	f109 0514 	add.w	r5, r9, #20
 801bbe8:	f104 0e14 	add.w	lr, r4, #20
 801bbec:	f100 0b14 	add.w	fp, r0, #20
 801bbf0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801bbf4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801bbf8:	9301      	str	r3, [sp, #4]
 801bbfa:	46d9      	mov	r9, fp
 801bbfc:	f04f 0c00 	mov.w	ip, #0
 801bc00:	9b01      	ldr	r3, [sp, #4]
 801bc02:	f85e 0b04 	ldr.w	r0, [lr], #4
 801bc06:	f853 af04 	ldr.w	sl, [r3, #4]!
 801bc0a:	9301      	str	r3, [sp, #4]
 801bc0c:	fa1f f38a 	uxth.w	r3, sl
 801bc10:	4619      	mov	r1, r3
 801bc12:	b283      	uxth	r3, r0
 801bc14:	1acb      	subs	r3, r1, r3
 801bc16:	0c00      	lsrs	r0, r0, #16
 801bc18:	4463      	add	r3, ip
 801bc1a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801bc1e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801bc22:	b29b      	uxth	r3, r3
 801bc24:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801bc28:	4576      	cmp	r6, lr
 801bc2a:	f849 3b04 	str.w	r3, [r9], #4
 801bc2e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bc32:	d8e5      	bhi.n	801bc00 <__mdiff+0x88>
 801bc34:	1b33      	subs	r3, r6, r4
 801bc36:	3b15      	subs	r3, #21
 801bc38:	f023 0303 	bic.w	r3, r3, #3
 801bc3c:	3415      	adds	r4, #21
 801bc3e:	3304      	adds	r3, #4
 801bc40:	42a6      	cmp	r6, r4
 801bc42:	bf38      	it	cc
 801bc44:	2304      	movcc	r3, #4
 801bc46:	441d      	add	r5, r3
 801bc48:	445b      	add	r3, fp
 801bc4a:	461e      	mov	r6, r3
 801bc4c:	462c      	mov	r4, r5
 801bc4e:	4544      	cmp	r4, r8
 801bc50:	d30e      	bcc.n	801bc70 <__mdiff+0xf8>
 801bc52:	f108 0103 	add.w	r1, r8, #3
 801bc56:	1b49      	subs	r1, r1, r5
 801bc58:	f021 0103 	bic.w	r1, r1, #3
 801bc5c:	3d03      	subs	r5, #3
 801bc5e:	45a8      	cmp	r8, r5
 801bc60:	bf38      	it	cc
 801bc62:	2100      	movcc	r1, #0
 801bc64:	440b      	add	r3, r1
 801bc66:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bc6a:	b191      	cbz	r1, 801bc92 <__mdiff+0x11a>
 801bc6c:	6117      	str	r7, [r2, #16]
 801bc6e:	e79d      	b.n	801bbac <__mdiff+0x34>
 801bc70:	f854 1b04 	ldr.w	r1, [r4], #4
 801bc74:	46e6      	mov	lr, ip
 801bc76:	0c08      	lsrs	r0, r1, #16
 801bc78:	fa1c fc81 	uxtah	ip, ip, r1
 801bc7c:	4471      	add	r1, lr
 801bc7e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801bc82:	b289      	uxth	r1, r1
 801bc84:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801bc88:	f846 1b04 	str.w	r1, [r6], #4
 801bc8c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801bc90:	e7dd      	b.n	801bc4e <__mdiff+0xd6>
 801bc92:	3f01      	subs	r7, #1
 801bc94:	e7e7      	b.n	801bc66 <__mdiff+0xee>
 801bc96:	bf00      	nop
 801bc98:	08020348 	.word	0x08020348
 801bc9c:	08020359 	.word	0x08020359

0801bca0 <__ulp>:
 801bca0:	b082      	sub	sp, #8
 801bca2:	ed8d 0b00 	vstr	d0, [sp]
 801bca6:	9a01      	ldr	r2, [sp, #4]
 801bca8:	4b0f      	ldr	r3, [pc, #60]	@ (801bce8 <__ulp+0x48>)
 801bcaa:	4013      	ands	r3, r2
 801bcac:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801bcb0:	2b00      	cmp	r3, #0
 801bcb2:	dc08      	bgt.n	801bcc6 <__ulp+0x26>
 801bcb4:	425b      	negs	r3, r3
 801bcb6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801bcba:	ea4f 5223 	mov.w	r2, r3, asr #20
 801bcbe:	da04      	bge.n	801bcca <__ulp+0x2a>
 801bcc0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801bcc4:	4113      	asrs	r3, r2
 801bcc6:	2200      	movs	r2, #0
 801bcc8:	e008      	b.n	801bcdc <__ulp+0x3c>
 801bcca:	f1a2 0314 	sub.w	r3, r2, #20
 801bcce:	2b1e      	cmp	r3, #30
 801bcd0:	bfda      	itte	le
 801bcd2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801bcd6:	40da      	lsrle	r2, r3
 801bcd8:	2201      	movgt	r2, #1
 801bcda:	2300      	movs	r3, #0
 801bcdc:	4619      	mov	r1, r3
 801bcde:	4610      	mov	r0, r2
 801bce0:	ec41 0b10 	vmov	d0, r0, r1
 801bce4:	b002      	add	sp, #8
 801bce6:	4770      	bx	lr
 801bce8:	7ff00000 	.word	0x7ff00000

0801bcec <__b2d>:
 801bcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bcf0:	6906      	ldr	r6, [r0, #16]
 801bcf2:	f100 0814 	add.w	r8, r0, #20
 801bcf6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801bcfa:	1f37      	subs	r7, r6, #4
 801bcfc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801bd00:	4610      	mov	r0, r2
 801bd02:	f7ff fd53 	bl	801b7ac <__hi0bits>
 801bd06:	f1c0 0320 	rsb	r3, r0, #32
 801bd0a:	280a      	cmp	r0, #10
 801bd0c:	600b      	str	r3, [r1, #0]
 801bd0e:	491b      	ldr	r1, [pc, #108]	@ (801bd7c <__b2d+0x90>)
 801bd10:	dc15      	bgt.n	801bd3e <__b2d+0x52>
 801bd12:	f1c0 0c0b 	rsb	ip, r0, #11
 801bd16:	fa22 f30c 	lsr.w	r3, r2, ip
 801bd1a:	45b8      	cmp	r8, r7
 801bd1c:	ea43 0501 	orr.w	r5, r3, r1
 801bd20:	bf34      	ite	cc
 801bd22:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bd26:	2300      	movcs	r3, #0
 801bd28:	3015      	adds	r0, #21
 801bd2a:	fa02 f000 	lsl.w	r0, r2, r0
 801bd2e:	fa23 f30c 	lsr.w	r3, r3, ip
 801bd32:	4303      	orrs	r3, r0
 801bd34:	461c      	mov	r4, r3
 801bd36:	ec45 4b10 	vmov	d0, r4, r5
 801bd3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bd3e:	45b8      	cmp	r8, r7
 801bd40:	bf3a      	itte	cc
 801bd42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801bd46:	f1a6 0708 	subcc.w	r7, r6, #8
 801bd4a:	2300      	movcs	r3, #0
 801bd4c:	380b      	subs	r0, #11
 801bd4e:	d012      	beq.n	801bd76 <__b2d+0x8a>
 801bd50:	f1c0 0120 	rsb	r1, r0, #32
 801bd54:	fa23 f401 	lsr.w	r4, r3, r1
 801bd58:	4082      	lsls	r2, r0
 801bd5a:	4322      	orrs	r2, r4
 801bd5c:	4547      	cmp	r7, r8
 801bd5e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801bd62:	bf8c      	ite	hi
 801bd64:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801bd68:	2200      	movls	r2, #0
 801bd6a:	4083      	lsls	r3, r0
 801bd6c:	40ca      	lsrs	r2, r1
 801bd6e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801bd72:	4313      	orrs	r3, r2
 801bd74:	e7de      	b.n	801bd34 <__b2d+0x48>
 801bd76:	ea42 0501 	orr.w	r5, r2, r1
 801bd7a:	e7db      	b.n	801bd34 <__b2d+0x48>
 801bd7c:	3ff00000 	.word	0x3ff00000

0801bd80 <__d2b>:
 801bd80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801bd84:	460f      	mov	r7, r1
 801bd86:	2101      	movs	r1, #1
 801bd88:	ec59 8b10 	vmov	r8, r9, d0
 801bd8c:	4616      	mov	r6, r2
 801bd8e:	f7ff fc1b 	bl	801b5c8 <_Balloc>
 801bd92:	4604      	mov	r4, r0
 801bd94:	b930      	cbnz	r0, 801bda4 <__d2b+0x24>
 801bd96:	4602      	mov	r2, r0
 801bd98:	4b23      	ldr	r3, [pc, #140]	@ (801be28 <__d2b+0xa8>)
 801bd9a:	4824      	ldr	r0, [pc, #144]	@ (801be2c <__d2b+0xac>)
 801bd9c:	f240 310f 	movw	r1, #783	@ 0x30f
 801bda0:	f7fe fc9c 	bl	801a6dc <__assert_func>
 801bda4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801bda8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801bdac:	b10d      	cbz	r5, 801bdb2 <__d2b+0x32>
 801bdae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801bdb2:	9301      	str	r3, [sp, #4]
 801bdb4:	f1b8 0300 	subs.w	r3, r8, #0
 801bdb8:	d023      	beq.n	801be02 <__d2b+0x82>
 801bdba:	4668      	mov	r0, sp
 801bdbc:	9300      	str	r3, [sp, #0]
 801bdbe:	f7ff fd14 	bl	801b7ea <__lo0bits>
 801bdc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801bdc6:	b1d0      	cbz	r0, 801bdfe <__d2b+0x7e>
 801bdc8:	f1c0 0320 	rsb	r3, r0, #32
 801bdcc:	fa02 f303 	lsl.w	r3, r2, r3
 801bdd0:	430b      	orrs	r3, r1
 801bdd2:	40c2      	lsrs	r2, r0
 801bdd4:	6163      	str	r3, [r4, #20]
 801bdd6:	9201      	str	r2, [sp, #4]
 801bdd8:	9b01      	ldr	r3, [sp, #4]
 801bdda:	61a3      	str	r3, [r4, #24]
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	bf0c      	ite	eq
 801bde0:	2201      	moveq	r2, #1
 801bde2:	2202      	movne	r2, #2
 801bde4:	6122      	str	r2, [r4, #16]
 801bde6:	b1a5      	cbz	r5, 801be12 <__d2b+0x92>
 801bde8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801bdec:	4405      	add	r5, r0
 801bdee:	603d      	str	r5, [r7, #0]
 801bdf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801bdf4:	6030      	str	r0, [r6, #0]
 801bdf6:	4620      	mov	r0, r4
 801bdf8:	b003      	add	sp, #12
 801bdfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801bdfe:	6161      	str	r1, [r4, #20]
 801be00:	e7ea      	b.n	801bdd8 <__d2b+0x58>
 801be02:	a801      	add	r0, sp, #4
 801be04:	f7ff fcf1 	bl	801b7ea <__lo0bits>
 801be08:	9b01      	ldr	r3, [sp, #4]
 801be0a:	6163      	str	r3, [r4, #20]
 801be0c:	3020      	adds	r0, #32
 801be0e:	2201      	movs	r2, #1
 801be10:	e7e8      	b.n	801bde4 <__d2b+0x64>
 801be12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801be16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801be1a:	6038      	str	r0, [r7, #0]
 801be1c:	6918      	ldr	r0, [r3, #16]
 801be1e:	f7ff fcc5 	bl	801b7ac <__hi0bits>
 801be22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801be26:	e7e5      	b.n	801bdf4 <__d2b+0x74>
 801be28:	08020348 	.word	0x08020348
 801be2c:	08020359 	.word	0x08020359

0801be30 <__ratio>:
 801be30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be34:	b085      	sub	sp, #20
 801be36:	e9cd 1000 	strd	r1, r0, [sp]
 801be3a:	a902      	add	r1, sp, #8
 801be3c:	f7ff ff56 	bl	801bcec <__b2d>
 801be40:	9800      	ldr	r0, [sp, #0]
 801be42:	a903      	add	r1, sp, #12
 801be44:	ec55 4b10 	vmov	r4, r5, d0
 801be48:	f7ff ff50 	bl	801bcec <__b2d>
 801be4c:	9b01      	ldr	r3, [sp, #4]
 801be4e:	6919      	ldr	r1, [r3, #16]
 801be50:	9b00      	ldr	r3, [sp, #0]
 801be52:	691b      	ldr	r3, [r3, #16]
 801be54:	1ac9      	subs	r1, r1, r3
 801be56:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801be5a:	1a9b      	subs	r3, r3, r2
 801be5c:	ec5b ab10 	vmov	sl, fp, d0
 801be60:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801be64:	2b00      	cmp	r3, #0
 801be66:	bfce      	itee	gt
 801be68:	462a      	movgt	r2, r5
 801be6a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801be6e:	465a      	movle	r2, fp
 801be70:	462f      	mov	r7, r5
 801be72:	46d9      	mov	r9, fp
 801be74:	bfcc      	ite	gt
 801be76:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801be7a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801be7e:	464b      	mov	r3, r9
 801be80:	4652      	mov	r2, sl
 801be82:	4620      	mov	r0, r4
 801be84:	4639      	mov	r1, r7
 801be86:	f7e4 fce1 	bl	800084c <__aeabi_ddiv>
 801be8a:	ec41 0b10 	vmov	d0, r0, r1
 801be8e:	b005      	add	sp, #20
 801be90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801be94 <__copybits>:
 801be94:	3901      	subs	r1, #1
 801be96:	b570      	push	{r4, r5, r6, lr}
 801be98:	1149      	asrs	r1, r1, #5
 801be9a:	6914      	ldr	r4, [r2, #16]
 801be9c:	3101      	adds	r1, #1
 801be9e:	f102 0314 	add.w	r3, r2, #20
 801bea2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801bea6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801beaa:	1f05      	subs	r5, r0, #4
 801beac:	42a3      	cmp	r3, r4
 801beae:	d30c      	bcc.n	801beca <__copybits+0x36>
 801beb0:	1aa3      	subs	r3, r4, r2
 801beb2:	3b11      	subs	r3, #17
 801beb4:	f023 0303 	bic.w	r3, r3, #3
 801beb8:	3211      	adds	r2, #17
 801beba:	42a2      	cmp	r2, r4
 801bebc:	bf88      	it	hi
 801bebe:	2300      	movhi	r3, #0
 801bec0:	4418      	add	r0, r3
 801bec2:	2300      	movs	r3, #0
 801bec4:	4288      	cmp	r0, r1
 801bec6:	d305      	bcc.n	801bed4 <__copybits+0x40>
 801bec8:	bd70      	pop	{r4, r5, r6, pc}
 801beca:	f853 6b04 	ldr.w	r6, [r3], #4
 801bece:	f845 6f04 	str.w	r6, [r5, #4]!
 801bed2:	e7eb      	b.n	801beac <__copybits+0x18>
 801bed4:	f840 3b04 	str.w	r3, [r0], #4
 801bed8:	e7f4      	b.n	801bec4 <__copybits+0x30>

0801beda <__any_on>:
 801beda:	f100 0214 	add.w	r2, r0, #20
 801bede:	6900      	ldr	r0, [r0, #16]
 801bee0:	114b      	asrs	r3, r1, #5
 801bee2:	4298      	cmp	r0, r3
 801bee4:	b510      	push	{r4, lr}
 801bee6:	db11      	blt.n	801bf0c <__any_on+0x32>
 801bee8:	dd0a      	ble.n	801bf00 <__any_on+0x26>
 801beea:	f011 011f 	ands.w	r1, r1, #31
 801beee:	d007      	beq.n	801bf00 <__any_on+0x26>
 801bef0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801bef4:	fa24 f001 	lsr.w	r0, r4, r1
 801bef8:	fa00 f101 	lsl.w	r1, r0, r1
 801befc:	428c      	cmp	r4, r1
 801befe:	d10b      	bne.n	801bf18 <__any_on+0x3e>
 801bf00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801bf04:	4293      	cmp	r3, r2
 801bf06:	d803      	bhi.n	801bf10 <__any_on+0x36>
 801bf08:	2000      	movs	r0, #0
 801bf0a:	bd10      	pop	{r4, pc}
 801bf0c:	4603      	mov	r3, r0
 801bf0e:	e7f7      	b.n	801bf00 <__any_on+0x26>
 801bf10:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801bf14:	2900      	cmp	r1, #0
 801bf16:	d0f5      	beq.n	801bf04 <__any_on+0x2a>
 801bf18:	2001      	movs	r0, #1
 801bf1a:	e7f6      	b.n	801bf0a <__any_on+0x30>

0801bf1c <_realloc_r>:
 801bf1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bf20:	4607      	mov	r7, r0
 801bf22:	4614      	mov	r4, r2
 801bf24:	460d      	mov	r5, r1
 801bf26:	b921      	cbnz	r1, 801bf32 <_realloc_r+0x16>
 801bf28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bf2c:	4611      	mov	r1, r2
 801bf2e:	f7ff babf 	b.w	801b4b0 <_malloc_r>
 801bf32:	b92a      	cbnz	r2, 801bf40 <_realloc_r+0x24>
 801bf34:	f7ff fa48 	bl	801b3c8 <_free_r>
 801bf38:	4625      	mov	r5, r4
 801bf3a:	4628      	mov	r0, r5
 801bf3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bf40:	f002 f88f 	bl	801e062 <_malloc_usable_size_r>
 801bf44:	4284      	cmp	r4, r0
 801bf46:	4606      	mov	r6, r0
 801bf48:	d802      	bhi.n	801bf50 <_realloc_r+0x34>
 801bf4a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801bf4e:	d8f4      	bhi.n	801bf3a <_realloc_r+0x1e>
 801bf50:	4621      	mov	r1, r4
 801bf52:	4638      	mov	r0, r7
 801bf54:	f7ff faac 	bl	801b4b0 <_malloc_r>
 801bf58:	4680      	mov	r8, r0
 801bf5a:	b908      	cbnz	r0, 801bf60 <_realloc_r+0x44>
 801bf5c:	4645      	mov	r5, r8
 801bf5e:	e7ec      	b.n	801bf3a <_realloc_r+0x1e>
 801bf60:	42b4      	cmp	r4, r6
 801bf62:	4622      	mov	r2, r4
 801bf64:	4629      	mov	r1, r5
 801bf66:	bf28      	it	cs
 801bf68:	4632      	movcs	r2, r6
 801bf6a:	f7fe fba8 	bl	801a6be <memcpy>
 801bf6e:	4629      	mov	r1, r5
 801bf70:	4638      	mov	r0, r7
 801bf72:	f7ff fa29 	bl	801b3c8 <_free_r>
 801bf76:	e7f1      	b.n	801bf5c <_realloc_r+0x40>

0801bf78 <sulp>:
 801bf78:	b570      	push	{r4, r5, r6, lr}
 801bf7a:	4604      	mov	r4, r0
 801bf7c:	460d      	mov	r5, r1
 801bf7e:	ec45 4b10 	vmov	d0, r4, r5
 801bf82:	4616      	mov	r6, r2
 801bf84:	f7ff fe8c 	bl	801bca0 <__ulp>
 801bf88:	ec51 0b10 	vmov	r0, r1, d0
 801bf8c:	b17e      	cbz	r6, 801bfae <sulp+0x36>
 801bf8e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801bf92:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801bf96:	2b00      	cmp	r3, #0
 801bf98:	dd09      	ble.n	801bfae <sulp+0x36>
 801bf9a:	051b      	lsls	r3, r3, #20
 801bf9c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801bfa0:	2400      	movs	r4, #0
 801bfa2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801bfa6:	4622      	mov	r2, r4
 801bfa8:	462b      	mov	r3, r5
 801bfaa:	f7e4 fb25 	bl	80005f8 <__aeabi_dmul>
 801bfae:	ec41 0b10 	vmov	d0, r0, r1
 801bfb2:	bd70      	pop	{r4, r5, r6, pc}
 801bfb4:	0000      	movs	r0, r0
	...

0801bfb8 <_strtod_l>:
 801bfb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfbc:	b09f      	sub	sp, #124	@ 0x7c
 801bfbe:	460c      	mov	r4, r1
 801bfc0:	9217      	str	r2, [sp, #92]	@ 0x5c
 801bfc2:	2200      	movs	r2, #0
 801bfc4:	921a      	str	r2, [sp, #104]	@ 0x68
 801bfc6:	9005      	str	r0, [sp, #20]
 801bfc8:	f04f 0a00 	mov.w	sl, #0
 801bfcc:	f04f 0b00 	mov.w	fp, #0
 801bfd0:	460a      	mov	r2, r1
 801bfd2:	9219      	str	r2, [sp, #100]	@ 0x64
 801bfd4:	7811      	ldrb	r1, [r2, #0]
 801bfd6:	292b      	cmp	r1, #43	@ 0x2b
 801bfd8:	d04a      	beq.n	801c070 <_strtod_l+0xb8>
 801bfda:	d838      	bhi.n	801c04e <_strtod_l+0x96>
 801bfdc:	290d      	cmp	r1, #13
 801bfde:	d832      	bhi.n	801c046 <_strtod_l+0x8e>
 801bfe0:	2908      	cmp	r1, #8
 801bfe2:	d832      	bhi.n	801c04a <_strtod_l+0x92>
 801bfe4:	2900      	cmp	r1, #0
 801bfe6:	d03b      	beq.n	801c060 <_strtod_l+0xa8>
 801bfe8:	2200      	movs	r2, #0
 801bfea:	920e      	str	r2, [sp, #56]	@ 0x38
 801bfec:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801bfee:	782a      	ldrb	r2, [r5, #0]
 801bff0:	2a30      	cmp	r2, #48	@ 0x30
 801bff2:	f040 80b2 	bne.w	801c15a <_strtod_l+0x1a2>
 801bff6:	786a      	ldrb	r2, [r5, #1]
 801bff8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801bffc:	2a58      	cmp	r2, #88	@ 0x58
 801bffe:	d16e      	bne.n	801c0de <_strtod_l+0x126>
 801c000:	9302      	str	r3, [sp, #8]
 801c002:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c004:	9301      	str	r3, [sp, #4]
 801c006:	ab1a      	add	r3, sp, #104	@ 0x68
 801c008:	9300      	str	r3, [sp, #0]
 801c00a:	4a8f      	ldr	r2, [pc, #572]	@ (801c248 <_strtod_l+0x290>)
 801c00c:	9805      	ldr	r0, [sp, #20]
 801c00e:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c010:	a919      	add	r1, sp, #100	@ 0x64
 801c012:	f001 fd43 	bl	801da9c <__gethex>
 801c016:	f010 060f 	ands.w	r6, r0, #15
 801c01a:	4604      	mov	r4, r0
 801c01c:	d005      	beq.n	801c02a <_strtod_l+0x72>
 801c01e:	2e06      	cmp	r6, #6
 801c020:	d128      	bne.n	801c074 <_strtod_l+0xbc>
 801c022:	3501      	adds	r5, #1
 801c024:	2300      	movs	r3, #0
 801c026:	9519      	str	r5, [sp, #100]	@ 0x64
 801c028:	930e      	str	r3, [sp, #56]	@ 0x38
 801c02a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	f040 858e 	bne.w	801cb4e <_strtod_l+0xb96>
 801c032:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c034:	b1cb      	cbz	r3, 801c06a <_strtod_l+0xb2>
 801c036:	4652      	mov	r2, sl
 801c038:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801c03c:	ec43 2b10 	vmov	d0, r2, r3
 801c040:	b01f      	add	sp, #124	@ 0x7c
 801c042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c046:	2920      	cmp	r1, #32
 801c048:	d1ce      	bne.n	801bfe8 <_strtod_l+0x30>
 801c04a:	3201      	adds	r2, #1
 801c04c:	e7c1      	b.n	801bfd2 <_strtod_l+0x1a>
 801c04e:	292d      	cmp	r1, #45	@ 0x2d
 801c050:	d1ca      	bne.n	801bfe8 <_strtod_l+0x30>
 801c052:	2101      	movs	r1, #1
 801c054:	910e      	str	r1, [sp, #56]	@ 0x38
 801c056:	1c51      	adds	r1, r2, #1
 801c058:	9119      	str	r1, [sp, #100]	@ 0x64
 801c05a:	7852      	ldrb	r2, [r2, #1]
 801c05c:	2a00      	cmp	r2, #0
 801c05e:	d1c5      	bne.n	801bfec <_strtod_l+0x34>
 801c060:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c062:	9419      	str	r4, [sp, #100]	@ 0x64
 801c064:	2b00      	cmp	r3, #0
 801c066:	f040 8570 	bne.w	801cb4a <_strtod_l+0xb92>
 801c06a:	4652      	mov	r2, sl
 801c06c:	465b      	mov	r3, fp
 801c06e:	e7e5      	b.n	801c03c <_strtod_l+0x84>
 801c070:	2100      	movs	r1, #0
 801c072:	e7ef      	b.n	801c054 <_strtod_l+0x9c>
 801c074:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c076:	b13a      	cbz	r2, 801c088 <_strtod_l+0xd0>
 801c078:	2135      	movs	r1, #53	@ 0x35
 801c07a:	a81c      	add	r0, sp, #112	@ 0x70
 801c07c:	f7ff ff0a 	bl	801be94 <__copybits>
 801c080:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c082:	9805      	ldr	r0, [sp, #20]
 801c084:	f7ff fae0 	bl	801b648 <_Bfree>
 801c088:	3e01      	subs	r6, #1
 801c08a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c08c:	2e04      	cmp	r6, #4
 801c08e:	d806      	bhi.n	801c09e <_strtod_l+0xe6>
 801c090:	e8df f006 	tbb	[pc, r6]
 801c094:	201d0314 	.word	0x201d0314
 801c098:	14          	.byte	0x14
 801c099:	00          	.byte	0x00
 801c09a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801c09e:	05e1      	lsls	r1, r4, #23
 801c0a0:	bf48      	it	mi
 801c0a2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801c0a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c0aa:	0d1b      	lsrs	r3, r3, #20
 801c0ac:	051b      	lsls	r3, r3, #20
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d1bb      	bne.n	801c02a <_strtod_l+0x72>
 801c0b2:	f7fe fad7 	bl	801a664 <__errno>
 801c0b6:	2322      	movs	r3, #34	@ 0x22
 801c0b8:	6003      	str	r3, [r0, #0]
 801c0ba:	e7b6      	b.n	801c02a <_strtod_l+0x72>
 801c0bc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801c0c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801c0c4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c0c8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c0cc:	e7e7      	b.n	801c09e <_strtod_l+0xe6>
 801c0ce:	f8df b180 	ldr.w	fp, [pc, #384]	@ 801c250 <_strtod_l+0x298>
 801c0d2:	e7e4      	b.n	801c09e <_strtod_l+0xe6>
 801c0d4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801c0d8:	f04f 3aff 	mov.w	sl, #4294967295
 801c0dc:	e7df      	b.n	801c09e <_strtod_l+0xe6>
 801c0de:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c0e0:	1c5a      	adds	r2, r3, #1
 801c0e2:	9219      	str	r2, [sp, #100]	@ 0x64
 801c0e4:	785b      	ldrb	r3, [r3, #1]
 801c0e6:	2b30      	cmp	r3, #48	@ 0x30
 801c0e8:	d0f9      	beq.n	801c0de <_strtod_l+0x126>
 801c0ea:	2b00      	cmp	r3, #0
 801c0ec:	d09d      	beq.n	801c02a <_strtod_l+0x72>
 801c0ee:	2301      	movs	r3, #1
 801c0f0:	2700      	movs	r7, #0
 801c0f2:	9308      	str	r3, [sp, #32]
 801c0f4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c0f6:	930c      	str	r3, [sp, #48]	@ 0x30
 801c0f8:	970b      	str	r7, [sp, #44]	@ 0x2c
 801c0fa:	46b9      	mov	r9, r7
 801c0fc:	220a      	movs	r2, #10
 801c0fe:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c100:	7805      	ldrb	r5, [r0, #0]
 801c102:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801c106:	b2d9      	uxtb	r1, r3
 801c108:	2909      	cmp	r1, #9
 801c10a:	d928      	bls.n	801c15e <_strtod_l+0x1a6>
 801c10c:	494f      	ldr	r1, [pc, #316]	@ (801c24c <_strtod_l+0x294>)
 801c10e:	2201      	movs	r2, #1
 801c110:	f001 fbf5 	bl	801d8fe <strncmp>
 801c114:	2800      	cmp	r0, #0
 801c116:	d032      	beq.n	801c17e <_strtod_l+0x1c6>
 801c118:	2000      	movs	r0, #0
 801c11a:	462a      	mov	r2, r5
 801c11c:	900a      	str	r0, [sp, #40]	@ 0x28
 801c11e:	464d      	mov	r5, r9
 801c120:	4603      	mov	r3, r0
 801c122:	2a65      	cmp	r2, #101	@ 0x65
 801c124:	d001      	beq.n	801c12a <_strtod_l+0x172>
 801c126:	2a45      	cmp	r2, #69	@ 0x45
 801c128:	d114      	bne.n	801c154 <_strtod_l+0x19c>
 801c12a:	b91d      	cbnz	r5, 801c134 <_strtod_l+0x17c>
 801c12c:	9a08      	ldr	r2, [sp, #32]
 801c12e:	4302      	orrs	r2, r0
 801c130:	d096      	beq.n	801c060 <_strtod_l+0xa8>
 801c132:	2500      	movs	r5, #0
 801c134:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801c136:	1c62      	adds	r2, r4, #1
 801c138:	9219      	str	r2, [sp, #100]	@ 0x64
 801c13a:	7862      	ldrb	r2, [r4, #1]
 801c13c:	2a2b      	cmp	r2, #43	@ 0x2b
 801c13e:	d07a      	beq.n	801c236 <_strtod_l+0x27e>
 801c140:	2a2d      	cmp	r2, #45	@ 0x2d
 801c142:	d07e      	beq.n	801c242 <_strtod_l+0x28a>
 801c144:	f04f 0c00 	mov.w	ip, #0
 801c148:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801c14c:	2909      	cmp	r1, #9
 801c14e:	f240 8085 	bls.w	801c25c <_strtod_l+0x2a4>
 801c152:	9419      	str	r4, [sp, #100]	@ 0x64
 801c154:	f04f 0800 	mov.w	r8, #0
 801c158:	e0a5      	b.n	801c2a6 <_strtod_l+0x2ee>
 801c15a:	2300      	movs	r3, #0
 801c15c:	e7c8      	b.n	801c0f0 <_strtod_l+0x138>
 801c15e:	f1b9 0f08 	cmp.w	r9, #8
 801c162:	bfd8      	it	le
 801c164:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801c166:	f100 0001 	add.w	r0, r0, #1
 801c16a:	bfda      	itte	le
 801c16c:	fb02 3301 	mlale	r3, r2, r1, r3
 801c170:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801c172:	fb02 3707 	mlagt	r7, r2, r7, r3
 801c176:	f109 0901 	add.w	r9, r9, #1
 801c17a:	9019      	str	r0, [sp, #100]	@ 0x64
 801c17c:	e7bf      	b.n	801c0fe <_strtod_l+0x146>
 801c17e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c180:	1c5a      	adds	r2, r3, #1
 801c182:	9219      	str	r2, [sp, #100]	@ 0x64
 801c184:	785a      	ldrb	r2, [r3, #1]
 801c186:	f1b9 0f00 	cmp.w	r9, #0
 801c18a:	d03b      	beq.n	801c204 <_strtod_l+0x24c>
 801c18c:	900a      	str	r0, [sp, #40]	@ 0x28
 801c18e:	464d      	mov	r5, r9
 801c190:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801c194:	2b09      	cmp	r3, #9
 801c196:	d912      	bls.n	801c1be <_strtod_l+0x206>
 801c198:	2301      	movs	r3, #1
 801c19a:	e7c2      	b.n	801c122 <_strtod_l+0x16a>
 801c19c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c19e:	1c5a      	adds	r2, r3, #1
 801c1a0:	9219      	str	r2, [sp, #100]	@ 0x64
 801c1a2:	785a      	ldrb	r2, [r3, #1]
 801c1a4:	3001      	adds	r0, #1
 801c1a6:	2a30      	cmp	r2, #48	@ 0x30
 801c1a8:	d0f8      	beq.n	801c19c <_strtod_l+0x1e4>
 801c1aa:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801c1ae:	2b08      	cmp	r3, #8
 801c1b0:	f200 84d2 	bhi.w	801cb58 <_strtod_l+0xba0>
 801c1b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c1b6:	900a      	str	r0, [sp, #40]	@ 0x28
 801c1b8:	2000      	movs	r0, #0
 801c1ba:	930c      	str	r3, [sp, #48]	@ 0x30
 801c1bc:	4605      	mov	r5, r0
 801c1be:	3a30      	subs	r2, #48	@ 0x30
 801c1c0:	f100 0301 	add.w	r3, r0, #1
 801c1c4:	d018      	beq.n	801c1f8 <_strtod_l+0x240>
 801c1c6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c1c8:	4419      	add	r1, r3
 801c1ca:	910a      	str	r1, [sp, #40]	@ 0x28
 801c1cc:	462e      	mov	r6, r5
 801c1ce:	f04f 0e0a 	mov.w	lr, #10
 801c1d2:	1c71      	adds	r1, r6, #1
 801c1d4:	eba1 0c05 	sub.w	ip, r1, r5
 801c1d8:	4563      	cmp	r3, ip
 801c1da:	dc15      	bgt.n	801c208 <_strtod_l+0x250>
 801c1dc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801c1e0:	182b      	adds	r3, r5, r0
 801c1e2:	2b08      	cmp	r3, #8
 801c1e4:	f105 0501 	add.w	r5, r5, #1
 801c1e8:	4405      	add	r5, r0
 801c1ea:	dc1a      	bgt.n	801c222 <_strtod_l+0x26a>
 801c1ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c1ee:	230a      	movs	r3, #10
 801c1f0:	fb03 2301 	mla	r3, r3, r1, r2
 801c1f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c1f6:	2300      	movs	r3, #0
 801c1f8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c1fa:	1c51      	adds	r1, r2, #1
 801c1fc:	9119      	str	r1, [sp, #100]	@ 0x64
 801c1fe:	7852      	ldrb	r2, [r2, #1]
 801c200:	4618      	mov	r0, r3
 801c202:	e7c5      	b.n	801c190 <_strtod_l+0x1d8>
 801c204:	4648      	mov	r0, r9
 801c206:	e7ce      	b.n	801c1a6 <_strtod_l+0x1ee>
 801c208:	2e08      	cmp	r6, #8
 801c20a:	dc05      	bgt.n	801c218 <_strtod_l+0x260>
 801c20c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801c20e:	fb0e f606 	mul.w	r6, lr, r6
 801c212:	960b      	str	r6, [sp, #44]	@ 0x2c
 801c214:	460e      	mov	r6, r1
 801c216:	e7dc      	b.n	801c1d2 <_strtod_l+0x21a>
 801c218:	2910      	cmp	r1, #16
 801c21a:	bfd8      	it	le
 801c21c:	fb0e f707 	mulle.w	r7, lr, r7
 801c220:	e7f8      	b.n	801c214 <_strtod_l+0x25c>
 801c222:	2b0f      	cmp	r3, #15
 801c224:	bfdc      	itt	le
 801c226:	230a      	movle	r3, #10
 801c228:	fb03 2707 	mlale	r7, r3, r7, r2
 801c22c:	e7e3      	b.n	801c1f6 <_strtod_l+0x23e>
 801c22e:	2300      	movs	r3, #0
 801c230:	930a      	str	r3, [sp, #40]	@ 0x28
 801c232:	2301      	movs	r3, #1
 801c234:	e77a      	b.n	801c12c <_strtod_l+0x174>
 801c236:	f04f 0c00 	mov.w	ip, #0
 801c23a:	1ca2      	adds	r2, r4, #2
 801c23c:	9219      	str	r2, [sp, #100]	@ 0x64
 801c23e:	78a2      	ldrb	r2, [r4, #2]
 801c240:	e782      	b.n	801c148 <_strtod_l+0x190>
 801c242:	f04f 0c01 	mov.w	ip, #1
 801c246:	e7f8      	b.n	801c23a <_strtod_l+0x282>
 801c248:	0802096c 	.word	0x0802096c
 801c24c:	080203b2 	.word	0x080203b2
 801c250:	7ff00000 	.word	0x7ff00000
 801c254:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c256:	1c51      	adds	r1, r2, #1
 801c258:	9119      	str	r1, [sp, #100]	@ 0x64
 801c25a:	7852      	ldrb	r2, [r2, #1]
 801c25c:	2a30      	cmp	r2, #48	@ 0x30
 801c25e:	d0f9      	beq.n	801c254 <_strtod_l+0x29c>
 801c260:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801c264:	2908      	cmp	r1, #8
 801c266:	f63f af75 	bhi.w	801c154 <_strtod_l+0x19c>
 801c26a:	3a30      	subs	r2, #48	@ 0x30
 801c26c:	9209      	str	r2, [sp, #36]	@ 0x24
 801c26e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c270:	920f      	str	r2, [sp, #60]	@ 0x3c
 801c272:	f04f 080a 	mov.w	r8, #10
 801c276:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c278:	1c56      	adds	r6, r2, #1
 801c27a:	9619      	str	r6, [sp, #100]	@ 0x64
 801c27c:	7852      	ldrb	r2, [r2, #1]
 801c27e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801c282:	f1be 0f09 	cmp.w	lr, #9
 801c286:	d939      	bls.n	801c2fc <_strtod_l+0x344>
 801c288:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c28a:	1a76      	subs	r6, r6, r1
 801c28c:	2e08      	cmp	r6, #8
 801c28e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801c292:	dc03      	bgt.n	801c29c <_strtod_l+0x2e4>
 801c294:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c296:	4588      	cmp	r8, r1
 801c298:	bfa8      	it	ge
 801c29a:	4688      	movge	r8, r1
 801c29c:	f1bc 0f00 	cmp.w	ip, #0
 801c2a0:	d001      	beq.n	801c2a6 <_strtod_l+0x2ee>
 801c2a2:	f1c8 0800 	rsb	r8, r8, #0
 801c2a6:	2d00      	cmp	r5, #0
 801c2a8:	d14e      	bne.n	801c348 <_strtod_l+0x390>
 801c2aa:	9908      	ldr	r1, [sp, #32]
 801c2ac:	4308      	orrs	r0, r1
 801c2ae:	f47f aebc 	bne.w	801c02a <_strtod_l+0x72>
 801c2b2:	2b00      	cmp	r3, #0
 801c2b4:	f47f aed4 	bne.w	801c060 <_strtod_l+0xa8>
 801c2b8:	2a69      	cmp	r2, #105	@ 0x69
 801c2ba:	d028      	beq.n	801c30e <_strtod_l+0x356>
 801c2bc:	dc25      	bgt.n	801c30a <_strtod_l+0x352>
 801c2be:	2a49      	cmp	r2, #73	@ 0x49
 801c2c0:	d025      	beq.n	801c30e <_strtod_l+0x356>
 801c2c2:	2a4e      	cmp	r2, #78	@ 0x4e
 801c2c4:	f47f aecc 	bne.w	801c060 <_strtod_l+0xa8>
 801c2c8:	499a      	ldr	r1, [pc, #616]	@ (801c534 <_strtod_l+0x57c>)
 801c2ca:	a819      	add	r0, sp, #100	@ 0x64
 801c2cc:	f001 fe08 	bl	801dee0 <__match>
 801c2d0:	2800      	cmp	r0, #0
 801c2d2:	f43f aec5 	beq.w	801c060 <_strtod_l+0xa8>
 801c2d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c2d8:	781b      	ldrb	r3, [r3, #0]
 801c2da:	2b28      	cmp	r3, #40	@ 0x28
 801c2dc:	d12e      	bne.n	801c33c <_strtod_l+0x384>
 801c2de:	4996      	ldr	r1, [pc, #600]	@ (801c538 <_strtod_l+0x580>)
 801c2e0:	aa1c      	add	r2, sp, #112	@ 0x70
 801c2e2:	a819      	add	r0, sp, #100	@ 0x64
 801c2e4:	f001 fe10 	bl	801df08 <__hexnan>
 801c2e8:	2805      	cmp	r0, #5
 801c2ea:	d127      	bne.n	801c33c <_strtod_l+0x384>
 801c2ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c2ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801c2f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801c2f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801c2fa:	e696      	b.n	801c02a <_strtod_l+0x72>
 801c2fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c2fe:	fb08 2101 	mla	r1, r8, r1, r2
 801c302:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801c306:	9209      	str	r2, [sp, #36]	@ 0x24
 801c308:	e7b5      	b.n	801c276 <_strtod_l+0x2be>
 801c30a:	2a6e      	cmp	r2, #110	@ 0x6e
 801c30c:	e7da      	b.n	801c2c4 <_strtod_l+0x30c>
 801c30e:	498b      	ldr	r1, [pc, #556]	@ (801c53c <_strtod_l+0x584>)
 801c310:	a819      	add	r0, sp, #100	@ 0x64
 801c312:	f001 fde5 	bl	801dee0 <__match>
 801c316:	2800      	cmp	r0, #0
 801c318:	f43f aea2 	beq.w	801c060 <_strtod_l+0xa8>
 801c31c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c31e:	4988      	ldr	r1, [pc, #544]	@ (801c540 <_strtod_l+0x588>)
 801c320:	3b01      	subs	r3, #1
 801c322:	a819      	add	r0, sp, #100	@ 0x64
 801c324:	9319      	str	r3, [sp, #100]	@ 0x64
 801c326:	f001 fddb 	bl	801dee0 <__match>
 801c32a:	b910      	cbnz	r0, 801c332 <_strtod_l+0x37a>
 801c32c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c32e:	3301      	adds	r3, #1
 801c330:	9319      	str	r3, [sp, #100]	@ 0x64
 801c332:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 801c550 <_strtod_l+0x598>
 801c336:	f04f 0a00 	mov.w	sl, #0
 801c33a:	e676      	b.n	801c02a <_strtod_l+0x72>
 801c33c:	4881      	ldr	r0, [pc, #516]	@ (801c544 <_strtod_l+0x58c>)
 801c33e:	f001 fb23 	bl	801d988 <nan>
 801c342:	ec5b ab10 	vmov	sl, fp, d0
 801c346:	e670      	b.n	801c02a <_strtod_l+0x72>
 801c348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c34a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c34c:	eba8 0303 	sub.w	r3, r8, r3
 801c350:	f1b9 0f00 	cmp.w	r9, #0
 801c354:	bf08      	it	eq
 801c356:	46a9      	moveq	r9, r5
 801c358:	2d10      	cmp	r5, #16
 801c35a:	9309      	str	r3, [sp, #36]	@ 0x24
 801c35c:	462c      	mov	r4, r5
 801c35e:	bfa8      	it	ge
 801c360:	2410      	movge	r4, #16
 801c362:	f7e4 f8cf 	bl	8000504 <__aeabi_ui2d>
 801c366:	2d09      	cmp	r5, #9
 801c368:	4682      	mov	sl, r0
 801c36a:	468b      	mov	fp, r1
 801c36c:	dc13      	bgt.n	801c396 <_strtod_l+0x3de>
 801c36e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c370:	2b00      	cmp	r3, #0
 801c372:	f43f ae5a 	beq.w	801c02a <_strtod_l+0x72>
 801c376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c378:	dd78      	ble.n	801c46c <_strtod_l+0x4b4>
 801c37a:	2b16      	cmp	r3, #22
 801c37c:	dc5f      	bgt.n	801c43e <_strtod_l+0x486>
 801c37e:	4972      	ldr	r1, [pc, #456]	@ (801c548 <_strtod_l+0x590>)
 801c380:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c384:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c388:	4652      	mov	r2, sl
 801c38a:	465b      	mov	r3, fp
 801c38c:	f7e4 f934 	bl	80005f8 <__aeabi_dmul>
 801c390:	4682      	mov	sl, r0
 801c392:	468b      	mov	fp, r1
 801c394:	e649      	b.n	801c02a <_strtod_l+0x72>
 801c396:	4b6c      	ldr	r3, [pc, #432]	@ (801c548 <_strtod_l+0x590>)
 801c398:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c39c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801c3a0:	f7e4 f92a 	bl	80005f8 <__aeabi_dmul>
 801c3a4:	4682      	mov	sl, r0
 801c3a6:	4638      	mov	r0, r7
 801c3a8:	468b      	mov	fp, r1
 801c3aa:	f7e4 f8ab 	bl	8000504 <__aeabi_ui2d>
 801c3ae:	4602      	mov	r2, r0
 801c3b0:	460b      	mov	r3, r1
 801c3b2:	4650      	mov	r0, sl
 801c3b4:	4659      	mov	r1, fp
 801c3b6:	f7e3 ff69 	bl	800028c <__adddf3>
 801c3ba:	2d0f      	cmp	r5, #15
 801c3bc:	4682      	mov	sl, r0
 801c3be:	468b      	mov	fp, r1
 801c3c0:	ddd5      	ble.n	801c36e <_strtod_l+0x3b6>
 801c3c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3c4:	1b2c      	subs	r4, r5, r4
 801c3c6:	441c      	add	r4, r3
 801c3c8:	2c00      	cmp	r4, #0
 801c3ca:	f340 8093 	ble.w	801c4f4 <_strtod_l+0x53c>
 801c3ce:	f014 030f 	ands.w	r3, r4, #15
 801c3d2:	d00a      	beq.n	801c3ea <_strtod_l+0x432>
 801c3d4:	495c      	ldr	r1, [pc, #368]	@ (801c548 <_strtod_l+0x590>)
 801c3d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c3da:	4652      	mov	r2, sl
 801c3dc:	465b      	mov	r3, fp
 801c3de:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c3e2:	f7e4 f909 	bl	80005f8 <__aeabi_dmul>
 801c3e6:	4682      	mov	sl, r0
 801c3e8:	468b      	mov	fp, r1
 801c3ea:	f034 040f 	bics.w	r4, r4, #15
 801c3ee:	d073      	beq.n	801c4d8 <_strtod_l+0x520>
 801c3f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801c3f4:	dd49      	ble.n	801c48a <_strtod_l+0x4d2>
 801c3f6:	2400      	movs	r4, #0
 801c3f8:	46a0      	mov	r8, r4
 801c3fa:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c3fc:	46a1      	mov	r9, r4
 801c3fe:	9a05      	ldr	r2, [sp, #20]
 801c400:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 801c550 <_strtod_l+0x598>
 801c404:	2322      	movs	r3, #34	@ 0x22
 801c406:	6013      	str	r3, [r2, #0]
 801c408:	f04f 0a00 	mov.w	sl, #0
 801c40c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c40e:	2b00      	cmp	r3, #0
 801c410:	f43f ae0b 	beq.w	801c02a <_strtod_l+0x72>
 801c414:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c416:	9805      	ldr	r0, [sp, #20]
 801c418:	f7ff f916 	bl	801b648 <_Bfree>
 801c41c:	9805      	ldr	r0, [sp, #20]
 801c41e:	4649      	mov	r1, r9
 801c420:	f7ff f912 	bl	801b648 <_Bfree>
 801c424:	9805      	ldr	r0, [sp, #20]
 801c426:	4641      	mov	r1, r8
 801c428:	f7ff f90e 	bl	801b648 <_Bfree>
 801c42c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c42e:	9805      	ldr	r0, [sp, #20]
 801c430:	f7ff f90a 	bl	801b648 <_Bfree>
 801c434:	9805      	ldr	r0, [sp, #20]
 801c436:	4621      	mov	r1, r4
 801c438:	f7ff f906 	bl	801b648 <_Bfree>
 801c43c:	e5f5      	b.n	801c02a <_strtod_l+0x72>
 801c43e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c440:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801c444:	4293      	cmp	r3, r2
 801c446:	dbbc      	blt.n	801c3c2 <_strtod_l+0x40a>
 801c448:	4c3f      	ldr	r4, [pc, #252]	@ (801c548 <_strtod_l+0x590>)
 801c44a:	f1c5 050f 	rsb	r5, r5, #15
 801c44e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c452:	4652      	mov	r2, sl
 801c454:	465b      	mov	r3, fp
 801c456:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c45a:	f7e4 f8cd 	bl	80005f8 <__aeabi_dmul>
 801c45e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c460:	1b5d      	subs	r5, r3, r5
 801c462:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c466:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c46a:	e78f      	b.n	801c38c <_strtod_l+0x3d4>
 801c46c:	3316      	adds	r3, #22
 801c46e:	dba8      	blt.n	801c3c2 <_strtod_l+0x40a>
 801c470:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c472:	eba3 0808 	sub.w	r8, r3, r8
 801c476:	4b34      	ldr	r3, [pc, #208]	@ (801c548 <_strtod_l+0x590>)
 801c478:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801c47c:	e9d8 2300 	ldrd	r2, r3, [r8]
 801c480:	4650      	mov	r0, sl
 801c482:	4659      	mov	r1, fp
 801c484:	f7e4 f9e2 	bl	800084c <__aeabi_ddiv>
 801c488:	e782      	b.n	801c390 <_strtod_l+0x3d8>
 801c48a:	2300      	movs	r3, #0
 801c48c:	4f2f      	ldr	r7, [pc, #188]	@ (801c54c <_strtod_l+0x594>)
 801c48e:	1124      	asrs	r4, r4, #4
 801c490:	4650      	mov	r0, sl
 801c492:	4659      	mov	r1, fp
 801c494:	461e      	mov	r6, r3
 801c496:	2c01      	cmp	r4, #1
 801c498:	dc21      	bgt.n	801c4de <_strtod_l+0x526>
 801c49a:	b10b      	cbz	r3, 801c4a0 <_strtod_l+0x4e8>
 801c49c:	4682      	mov	sl, r0
 801c49e:	468b      	mov	fp, r1
 801c4a0:	492a      	ldr	r1, [pc, #168]	@ (801c54c <_strtod_l+0x594>)
 801c4a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801c4a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801c4aa:	4652      	mov	r2, sl
 801c4ac:	465b      	mov	r3, fp
 801c4ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c4b2:	f7e4 f8a1 	bl	80005f8 <__aeabi_dmul>
 801c4b6:	4b26      	ldr	r3, [pc, #152]	@ (801c550 <_strtod_l+0x598>)
 801c4b8:	460a      	mov	r2, r1
 801c4ba:	400b      	ands	r3, r1
 801c4bc:	4925      	ldr	r1, [pc, #148]	@ (801c554 <_strtod_l+0x59c>)
 801c4be:	428b      	cmp	r3, r1
 801c4c0:	4682      	mov	sl, r0
 801c4c2:	d898      	bhi.n	801c3f6 <_strtod_l+0x43e>
 801c4c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801c4c8:	428b      	cmp	r3, r1
 801c4ca:	bf86      	itte	hi
 801c4cc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 801c558 <_strtod_l+0x5a0>
 801c4d0:	f04f 3aff 	movhi.w	sl, #4294967295
 801c4d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801c4d8:	2300      	movs	r3, #0
 801c4da:	9308      	str	r3, [sp, #32]
 801c4dc:	e076      	b.n	801c5cc <_strtod_l+0x614>
 801c4de:	07e2      	lsls	r2, r4, #31
 801c4e0:	d504      	bpl.n	801c4ec <_strtod_l+0x534>
 801c4e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c4e6:	f7e4 f887 	bl	80005f8 <__aeabi_dmul>
 801c4ea:	2301      	movs	r3, #1
 801c4ec:	3601      	adds	r6, #1
 801c4ee:	1064      	asrs	r4, r4, #1
 801c4f0:	3708      	adds	r7, #8
 801c4f2:	e7d0      	b.n	801c496 <_strtod_l+0x4de>
 801c4f4:	d0f0      	beq.n	801c4d8 <_strtod_l+0x520>
 801c4f6:	4264      	negs	r4, r4
 801c4f8:	f014 020f 	ands.w	r2, r4, #15
 801c4fc:	d00a      	beq.n	801c514 <_strtod_l+0x55c>
 801c4fe:	4b12      	ldr	r3, [pc, #72]	@ (801c548 <_strtod_l+0x590>)
 801c500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c504:	4650      	mov	r0, sl
 801c506:	4659      	mov	r1, fp
 801c508:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c50c:	f7e4 f99e 	bl	800084c <__aeabi_ddiv>
 801c510:	4682      	mov	sl, r0
 801c512:	468b      	mov	fp, r1
 801c514:	1124      	asrs	r4, r4, #4
 801c516:	d0df      	beq.n	801c4d8 <_strtod_l+0x520>
 801c518:	2c1f      	cmp	r4, #31
 801c51a:	dd1f      	ble.n	801c55c <_strtod_l+0x5a4>
 801c51c:	2400      	movs	r4, #0
 801c51e:	46a0      	mov	r8, r4
 801c520:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c522:	46a1      	mov	r9, r4
 801c524:	9a05      	ldr	r2, [sp, #20]
 801c526:	2322      	movs	r3, #34	@ 0x22
 801c528:	f04f 0a00 	mov.w	sl, #0
 801c52c:	f04f 0b00 	mov.w	fp, #0
 801c530:	6013      	str	r3, [r2, #0]
 801c532:	e76b      	b.n	801c40c <_strtod_l+0x454>
 801c534:	08020255 	.word	0x08020255
 801c538:	08020958 	.word	0x08020958
 801c53c:	0802024d 	.word	0x0802024d
 801c540:	080202cf 	.word	0x080202cf
 801c544:	080202cb 	.word	0x080202cb
 801c548:	08020890 	.word	0x08020890
 801c54c:	08020868 	.word	0x08020868
 801c550:	7ff00000 	.word	0x7ff00000
 801c554:	7ca00000 	.word	0x7ca00000
 801c558:	7fefffff 	.word	0x7fefffff
 801c55c:	f014 0310 	ands.w	r3, r4, #16
 801c560:	bf18      	it	ne
 801c562:	236a      	movne	r3, #106	@ 0x6a
 801c564:	4ea9      	ldr	r6, [pc, #676]	@ (801c80c <_strtod_l+0x854>)
 801c566:	9308      	str	r3, [sp, #32]
 801c568:	4650      	mov	r0, sl
 801c56a:	4659      	mov	r1, fp
 801c56c:	2300      	movs	r3, #0
 801c56e:	07e7      	lsls	r7, r4, #31
 801c570:	d504      	bpl.n	801c57c <_strtod_l+0x5c4>
 801c572:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c576:	f7e4 f83f 	bl	80005f8 <__aeabi_dmul>
 801c57a:	2301      	movs	r3, #1
 801c57c:	1064      	asrs	r4, r4, #1
 801c57e:	f106 0608 	add.w	r6, r6, #8
 801c582:	d1f4      	bne.n	801c56e <_strtod_l+0x5b6>
 801c584:	b10b      	cbz	r3, 801c58a <_strtod_l+0x5d2>
 801c586:	4682      	mov	sl, r0
 801c588:	468b      	mov	fp, r1
 801c58a:	9b08      	ldr	r3, [sp, #32]
 801c58c:	b1b3      	cbz	r3, 801c5bc <_strtod_l+0x604>
 801c58e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c592:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801c596:	2b00      	cmp	r3, #0
 801c598:	4659      	mov	r1, fp
 801c59a:	dd0f      	ble.n	801c5bc <_strtod_l+0x604>
 801c59c:	2b1f      	cmp	r3, #31
 801c59e:	dd56      	ble.n	801c64e <_strtod_l+0x696>
 801c5a0:	2b34      	cmp	r3, #52	@ 0x34
 801c5a2:	bfde      	ittt	le
 801c5a4:	f04f 33ff 	movle.w	r3, #4294967295
 801c5a8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801c5ac:	4093      	lslle	r3, r2
 801c5ae:	f04f 0a00 	mov.w	sl, #0
 801c5b2:	bfcc      	ite	gt
 801c5b4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801c5b8:	ea03 0b01 	andle.w	fp, r3, r1
 801c5bc:	2200      	movs	r2, #0
 801c5be:	2300      	movs	r3, #0
 801c5c0:	4650      	mov	r0, sl
 801c5c2:	4659      	mov	r1, fp
 801c5c4:	f7e4 fa80 	bl	8000ac8 <__aeabi_dcmpeq>
 801c5c8:	2800      	cmp	r0, #0
 801c5ca:	d1a7      	bne.n	801c51c <_strtod_l+0x564>
 801c5cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c5ce:	9300      	str	r3, [sp, #0]
 801c5d0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801c5d2:	9805      	ldr	r0, [sp, #20]
 801c5d4:	462b      	mov	r3, r5
 801c5d6:	464a      	mov	r2, r9
 801c5d8:	f7ff f89e 	bl	801b718 <__s2b>
 801c5dc:	900b      	str	r0, [sp, #44]	@ 0x2c
 801c5de:	2800      	cmp	r0, #0
 801c5e0:	f43f af09 	beq.w	801c3f6 <_strtod_l+0x43e>
 801c5e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c5e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c5e8:	2a00      	cmp	r2, #0
 801c5ea:	eba3 0308 	sub.w	r3, r3, r8
 801c5ee:	bfa8      	it	ge
 801c5f0:	2300      	movge	r3, #0
 801c5f2:	9312      	str	r3, [sp, #72]	@ 0x48
 801c5f4:	2400      	movs	r4, #0
 801c5f6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801c5fa:	9316      	str	r3, [sp, #88]	@ 0x58
 801c5fc:	46a0      	mov	r8, r4
 801c5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c600:	9805      	ldr	r0, [sp, #20]
 801c602:	6859      	ldr	r1, [r3, #4]
 801c604:	f7fe ffe0 	bl	801b5c8 <_Balloc>
 801c608:	4681      	mov	r9, r0
 801c60a:	2800      	cmp	r0, #0
 801c60c:	f43f aef7 	beq.w	801c3fe <_strtod_l+0x446>
 801c610:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c612:	691a      	ldr	r2, [r3, #16]
 801c614:	3202      	adds	r2, #2
 801c616:	f103 010c 	add.w	r1, r3, #12
 801c61a:	0092      	lsls	r2, r2, #2
 801c61c:	300c      	adds	r0, #12
 801c61e:	f7fe f84e 	bl	801a6be <memcpy>
 801c622:	ec4b ab10 	vmov	d0, sl, fp
 801c626:	9805      	ldr	r0, [sp, #20]
 801c628:	aa1c      	add	r2, sp, #112	@ 0x70
 801c62a:	a91b      	add	r1, sp, #108	@ 0x6c
 801c62c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801c630:	f7ff fba6 	bl	801bd80 <__d2b>
 801c634:	901a      	str	r0, [sp, #104]	@ 0x68
 801c636:	2800      	cmp	r0, #0
 801c638:	f43f aee1 	beq.w	801c3fe <_strtod_l+0x446>
 801c63c:	9805      	ldr	r0, [sp, #20]
 801c63e:	2101      	movs	r1, #1
 801c640:	f7ff f900 	bl	801b844 <__i2b>
 801c644:	4680      	mov	r8, r0
 801c646:	b948      	cbnz	r0, 801c65c <_strtod_l+0x6a4>
 801c648:	f04f 0800 	mov.w	r8, #0
 801c64c:	e6d7      	b.n	801c3fe <_strtod_l+0x446>
 801c64e:	f04f 32ff 	mov.w	r2, #4294967295
 801c652:	fa02 f303 	lsl.w	r3, r2, r3
 801c656:	ea03 0a0a 	and.w	sl, r3, sl
 801c65a:	e7af      	b.n	801c5bc <_strtod_l+0x604>
 801c65c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801c65e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801c660:	2d00      	cmp	r5, #0
 801c662:	bfab      	itete	ge
 801c664:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801c666:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801c668:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801c66a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801c66c:	bfac      	ite	ge
 801c66e:	18ef      	addge	r7, r5, r3
 801c670:	1b5e      	sublt	r6, r3, r5
 801c672:	9b08      	ldr	r3, [sp, #32]
 801c674:	1aed      	subs	r5, r5, r3
 801c676:	4415      	add	r5, r2
 801c678:	4b65      	ldr	r3, [pc, #404]	@ (801c810 <_strtod_l+0x858>)
 801c67a:	3d01      	subs	r5, #1
 801c67c:	429d      	cmp	r5, r3
 801c67e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801c682:	da50      	bge.n	801c726 <_strtod_l+0x76e>
 801c684:	1b5b      	subs	r3, r3, r5
 801c686:	2b1f      	cmp	r3, #31
 801c688:	eba2 0203 	sub.w	r2, r2, r3
 801c68c:	f04f 0101 	mov.w	r1, #1
 801c690:	dc3d      	bgt.n	801c70e <_strtod_l+0x756>
 801c692:	fa01 f303 	lsl.w	r3, r1, r3
 801c696:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c698:	2300      	movs	r3, #0
 801c69a:	9310      	str	r3, [sp, #64]	@ 0x40
 801c69c:	18bd      	adds	r5, r7, r2
 801c69e:	9b08      	ldr	r3, [sp, #32]
 801c6a0:	42af      	cmp	r7, r5
 801c6a2:	4416      	add	r6, r2
 801c6a4:	441e      	add	r6, r3
 801c6a6:	463b      	mov	r3, r7
 801c6a8:	bfa8      	it	ge
 801c6aa:	462b      	movge	r3, r5
 801c6ac:	42b3      	cmp	r3, r6
 801c6ae:	bfa8      	it	ge
 801c6b0:	4633      	movge	r3, r6
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	bfc2      	ittt	gt
 801c6b6:	1aed      	subgt	r5, r5, r3
 801c6b8:	1af6      	subgt	r6, r6, r3
 801c6ba:	1aff      	subgt	r7, r7, r3
 801c6bc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801c6be:	2b00      	cmp	r3, #0
 801c6c0:	dd16      	ble.n	801c6f0 <_strtod_l+0x738>
 801c6c2:	4641      	mov	r1, r8
 801c6c4:	9805      	ldr	r0, [sp, #20]
 801c6c6:	461a      	mov	r2, r3
 801c6c8:	f7ff f974 	bl	801b9b4 <__pow5mult>
 801c6cc:	4680      	mov	r8, r0
 801c6ce:	2800      	cmp	r0, #0
 801c6d0:	d0ba      	beq.n	801c648 <_strtod_l+0x690>
 801c6d2:	4601      	mov	r1, r0
 801c6d4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c6d6:	9805      	ldr	r0, [sp, #20]
 801c6d8:	f7ff f8ca 	bl	801b870 <__multiply>
 801c6dc:	900a      	str	r0, [sp, #40]	@ 0x28
 801c6de:	2800      	cmp	r0, #0
 801c6e0:	f43f ae8d 	beq.w	801c3fe <_strtod_l+0x446>
 801c6e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c6e6:	9805      	ldr	r0, [sp, #20]
 801c6e8:	f7fe ffae 	bl	801b648 <_Bfree>
 801c6ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c6ee:	931a      	str	r3, [sp, #104]	@ 0x68
 801c6f0:	2d00      	cmp	r5, #0
 801c6f2:	dc1d      	bgt.n	801c730 <_strtod_l+0x778>
 801c6f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	dd23      	ble.n	801c742 <_strtod_l+0x78a>
 801c6fa:	4649      	mov	r1, r9
 801c6fc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c6fe:	9805      	ldr	r0, [sp, #20]
 801c700:	f7ff f958 	bl	801b9b4 <__pow5mult>
 801c704:	4681      	mov	r9, r0
 801c706:	b9e0      	cbnz	r0, 801c742 <_strtod_l+0x78a>
 801c708:	f04f 0900 	mov.w	r9, #0
 801c70c:	e677      	b.n	801c3fe <_strtod_l+0x446>
 801c70e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801c712:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801c716:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801c71a:	35e2      	adds	r5, #226	@ 0xe2
 801c71c:	fa01 f305 	lsl.w	r3, r1, r5
 801c720:	9310      	str	r3, [sp, #64]	@ 0x40
 801c722:	9113      	str	r1, [sp, #76]	@ 0x4c
 801c724:	e7ba      	b.n	801c69c <_strtod_l+0x6e4>
 801c726:	2300      	movs	r3, #0
 801c728:	9310      	str	r3, [sp, #64]	@ 0x40
 801c72a:	2301      	movs	r3, #1
 801c72c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c72e:	e7b5      	b.n	801c69c <_strtod_l+0x6e4>
 801c730:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c732:	9805      	ldr	r0, [sp, #20]
 801c734:	462a      	mov	r2, r5
 801c736:	f7ff f997 	bl	801ba68 <__lshift>
 801c73a:	901a      	str	r0, [sp, #104]	@ 0x68
 801c73c:	2800      	cmp	r0, #0
 801c73e:	d1d9      	bne.n	801c6f4 <_strtod_l+0x73c>
 801c740:	e65d      	b.n	801c3fe <_strtod_l+0x446>
 801c742:	2e00      	cmp	r6, #0
 801c744:	dd07      	ble.n	801c756 <_strtod_l+0x79e>
 801c746:	4649      	mov	r1, r9
 801c748:	9805      	ldr	r0, [sp, #20]
 801c74a:	4632      	mov	r2, r6
 801c74c:	f7ff f98c 	bl	801ba68 <__lshift>
 801c750:	4681      	mov	r9, r0
 801c752:	2800      	cmp	r0, #0
 801c754:	d0d8      	beq.n	801c708 <_strtod_l+0x750>
 801c756:	2f00      	cmp	r7, #0
 801c758:	dd08      	ble.n	801c76c <_strtod_l+0x7b4>
 801c75a:	4641      	mov	r1, r8
 801c75c:	9805      	ldr	r0, [sp, #20]
 801c75e:	463a      	mov	r2, r7
 801c760:	f7ff f982 	bl	801ba68 <__lshift>
 801c764:	4680      	mov	r8, r0
 801c766:	2800      	cmp	r0, #0
 801c768:	f43f ae49 	beq.w	801c3fe <_strtod_l+0x446>
 801c76c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c76e:	9805      	ldr	r0, [sp, #20]
 801c770:	464a      	mov	r2, r9
 801c772:	f7ff fa01 	bl	801bb78 <__mdiff>
 801c776:	4604      	mov	r4, r0
 801c778:	2800      	cmp	r0, #0
 801c77a:	f43f ae40 	beq.w	801c3fe <_strtod_l+0x446>
 801c77e:	68c3      	ldr	r3, [r0, #12]
 801c780:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c782:	2300      	movs	r3, #0
 801c784:	60c3      	str	r3, [r0, #12]
 801c786:	4641      	mov	r1, r8
 801c788:	f7ff f9da 	bl	801bb40 <__mcmp>
 801c78c:	2800      	cmp	r0, #0
 801c78e:	da45      	bge.n	801c81c <_strtod_l+0x864>
 801c790:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c792:	ea53 030a 	orrs.w	r3, r3, sl
 801c796:	d16b      	bne.n	801c870 <_strtod_l+0x8b8>
 801c798:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c79c:	2b00      	cmp	r3, #0
 801c79e:	d167      	bne.n	801c870 <_strtod_l+0x8b8>
 801c7a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c7a4:	0d1b      	lsrs	r3, r3, #20
 801c7a6:	051b      	lsls	r3, r3, #20
 801c7a8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c7ac:	d960      	bls.n	801c870 <_strtod_l+0x8b8>
 801c7ae:	6963      	ldr	r3, [r4, #20]
 801c7b0:	b913      	cbnz	r3, 801c7b8 <_strtod_l+0x800>
 801c7b2:	6923      	ldr	r3, [r4, #16]
 801c7b4:	2b01      	cmp	r3, #1
 801c7b6:	dd5b      	ble.n	801c870 <_strtod_l+0x8b8>
 801c7b8:	4621      	mov	r1, r4
 801c7ba:	2201      	movs	r2, #1
 801c7bc:	9805      	ldr	r0, [sp, #20]
 801c7be:	f7ff f953 	bl	801ba68 <__lshift>
 801c7c2:	4641      	mov	r1, r8
 801c7c4:	4604      	mov	r4, r0
 801c7c6:	f7ff f9bb 	bl	801bb40 <__mcmp>
 801c7ca:	2800      	cmp	r0, #0
 801c7cc:	dd50      	ble.n	801c870 <_strtod_l+0x8b8>
 801c7ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c7d2:	9a08      	ldr	r2, [sp, #32]
 801c7d4:	0d1b      	lsrs	r3, r3, #20
 801c7d6:	051b      	lsls	r3, r3, #20
 801c7d8:	2a00      	cmp	r2, #0
 801c7da:	d06a      	beq.n	801c8b2 <_strtod_l+0x8fa>
 801c7dc:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801c7e0:	d867      	bhi.n	801c8b2 <_strtod_l+0x8fa>
 801c7e2:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801c7e6:	f67f ae9d 	bls.w	801c524 <_strtod_l+0x56c>
 801c7ea:	4b0a      	ldr	r3, [pc, #40]	@ (801c814 <_strtod_l+0x85c>)
 801c7ec:	4650      	mov	r0, sl
 801c7ee:	4659      	mov	r1, fp
 801c7f0:	2200      	movs	r2, #0
 801c7f2:	f7e3 ff01 	bl	80005f8 <__aeabi_dmul>
 801c7f6:	4b08      	ldr	r3, [pc, #32]	@ (801c818 <_strtod_l+0x860>)
 801c7f8:	400b      	ands	r3, r1
 801c7fa:	4682      	mov	sl, r0
 801c7fc:	468b      	mov	fp, r1
 801c7fe:	2b00      	cmp	r3, #0
 801c800:	f47f ae08 	bne.w	801c414 <_strtod_l+0x45c>
 801c804:	9a05      	ldr	r2, [sp, #20]
 801c806:	2322      	movs	r3, #34	@ 0x22
 801c808:	6013      	str	r3, [r2, #0]
 801c80a:	e603      	b.n	801c414 <_strtod_l+0x45c>
 801c80c:	08020980 	.word	0x08020980
 801c810:	fffffc02 	.word	0xfffffc02
 801c814:	39500000 	.word	0x39500000
 801c818:	7ff00000 	.word	0x7ff00000
 801c81c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801c820:	d165      	bne.n	801c8ee <_strtod_l+0x936>
 801c822:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c824:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801c828:	b35a      	cbz	r2, 801c882 <_strtod_l+0x8ca>
 801c82a:	4a9f      	ldr	r2, [pc, #636]	@ (801caa8 <_strtod_l+0xaf0>)
 801c82c:	4293      	cmp	r3, r2
 801c82e:	d12b      	bne.n	801c888 <_strtod_l+0x8d0>
 801c830:	9b08      	ldr	r3, [sp, #32]
 801c832:	4651      	mov	r1, sl
 801c834:	b303      	cbz	r3, 801c878 <_strtod_l+0x8c0>
 801c836:	4b9d      	ldr	r3, [pc, #628]	@ (801caac <_strtod_l+0xaf4>)
 801c838:	465a      	mov	r2, fp
 801c83a:	4013      	ands	r3, r2
 801c83c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801c840:	f04f 32ff 	mov.w	r2, #4294967295
 801c844:	d81b      	bhi.n	801c87e <_strtod_l+0x8c6>
 801c846:	0d1b      	lsrs	r3, r3, #20
 801c848:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c84c:	fa02 f303 	lsl.w	r3, r2, r3
 801c850:	4299      	cmp	r1, r3
 801c852:	d119      	bne.n	801c888 <_strtod_l+0x8d0>
 801c854:	4b96      	ldr	r3, [pc, #600]	@ (801cab0 <_strtod_l+0xaf8>)
 801c856:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c858:	429a      	cmp	r2, r3
 801c85a:	d102      	bne.n	801c862 <_strtod_l+0x8aa>
 801c85c:	3101      	adds	r1, #1
 801c85e:	f43f adce 	beq.w	801c3fe <_strtod_l+0x446>
 801c862:	4b92      	ldr	r3, [pc, #584]	@ (801caac <_strtod_l+0xaf4>)
 801c864:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c866:	401a      	ands	r2, r3
 801c868:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801c86c:	f04f 0a00 	mov.w	sl, #0
 801c870:	9b08      	ldr	r3, [sp, #32]
 801c872:	2b00      	cmp	r3, #0
 801c874:	d1b9      	bne.n	801c7ea <_strtod_l+0x832>
 801c876:	e5cd      	b.n	801c414 <_strtod_l+0x45c>
 801c878:	f04f 33ff 	mov.w	r3, #4294967295
 801c87c:	e7e8      	b.n	801c850 <_strtod_l+0x898>
 801c87e:	4613      	mov	r3, r2
 801c880:	e7e6      	b.n	801c850 <_strtod_l+0x898>
 801c882:	ea53 030a 	orrs.w	r3, r3, sl
 801c886:	d0a2      	beq.n	801c7ce <_strtod_l+0x816>
 801c888:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c88a:	b1db      	cbz	r3, 801c8c4 <_strtod_l+0x90c>
 801c88c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c88e:	4213      	tst	r3, r2
 801c890:	d0ee      	beq.n	801c870 <_strtod_l+0x8b8>
 801c892:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c894:	9a08      	ldr	r2, [sp, #32]
 801c896:	4650      	mov	r0, sl
 801c898:	4659      	mov	r1, fp
 801c89a:	b1bb      	cbz	r3, 801c8cc <_strtod_l+0x914>
 801c89c:	f7ff fb6c 	bl	801bf78 <sulp>
 801c8a0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c8a4:	ec53 2b10 	vmov	r2, r3, d0
 801c8a8:	f7e3 fcf0 	bl	800028c <__adddf3>
 801c8ac:	4682      	mov	sl, r0
 801c8ae:	468b      	mov	fp, r1
 801c8b0:	e7de      	b.n	801c870 <_strtod_l+0x8b8>
 801c8b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801c8b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801c8ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801c8be:	f04f 3aff 	mov.w	sl, #4294967295
 801c8c2:	e7d5      	b.n	801c870 <_strtod_l+0x8b8>
 801c8c4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c8c6:	ea13 0f0a 	tst.w	r3, sl
 801c8ca:	e7e1      	b.n	801c890 <_strtod_l+0x8d8>
 801c8cc:	f7ff fb54 	bl	801bf78 <sulp>
 801c8d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801c8d4:	ec53 2b10 	vmov	r2, r3, d0
 801c8d8:	f7e3 fcd6 	bl	8000288 <__aeabi_dsub>
 801c8dc:	2200      	movs	r2, #0
 801c8de:	2300      	movs	r3, #0
 801c8e0:	4682      	mov	sl, r0
 801c8e2:	468b      	mov	fp, r1
 801c8e4:	f7e4 f8f0 	bl	8000ac8 <__aeabi_dcmpeq>
 801c8e8:	2800      	cmp	r0, #0
 801c8ea:	d0c1      	beq.n	801c870 <_strtod_l+0x8b8>
 801c8ec:	e61a      	b.n	801c524 <_strtod_l+0x56c>
 801c8ee:	4641      	mov	r1, r8
 801c8f0:	4620      	mov	r0, r4
 801c8f2:	f7ff fa9d 	bl	801be30 <__ratio>
 801c8f6:	ec57 6b10 	vmov	r6, r7, d0
 801c8fa:	2200      	movs	r2, #0
 801c8fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801c900:	4630      	mov	r0, r6
 801c902:	4639      	mov	r1, r7
 801c904:	f7e4 f8f4 	bl	8000af0 <__aeabi_dcmple>
 801c908:	2800      	cmp	r0, #0
 801c90a:	d06f      	beq.n	801c9ec <_strtod_l+0xa34>
 801c90c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c90e:	2b00      	cmp	r3, #0
 801c910:	d17a      	bne.n	801ca08 <_strtod_l+0xa50>
 801c912:	f1ba 0f00 	cmp.w	sl, #0
 801c916:	d158      	bne.n	801c9ca <_strtod_l+0xa12>
 801c918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c91a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c91e:	2b00      	cmp	r3, #0
 801c920:	d15a      	bne.n	801c9d8 <_strtod_l+0xa20>
 801c922:	4b64      	ldr	r3, [pc, #400]	@ (801cab4 <_strtod_l+0xafc>)
 801c924:	2200      	movs	r2, #0
 801c926:	4630      	mov	r0, r6
 801c928:	4639      	mov	r1, r7
 801c92a:	f7e4 f8d7 	bl	8000adc <__aeabi_dcmplt>
 801c92e:	2800      	cmp	r0, #0
 801c930:	d159      	bne.n	801c9e6 <_strtod_l+0xa2e>
 801c932:	4630      	mov	r0, r6
 801c934:	4639      	mov	r1, r7
 801c936:	4b60      	ldr	r3, [pc, #384]	@ (801cab8 <_strtod_l+0xb00>)
 801c938:	2200      	movs	r2, #0
 801c93a:	f7e3 fe5d 	bl	80005f8 <__aeabi_dmul>
 801c93e:	4606      	mov	r6, r0
 801c940:	460f      	mov	r7, r1
 801c942:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801c946:	9606      	str	r6, [sp, #24]
 801c948:	9307      	str	r3, [sp, #28]
 801c94a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c94e:	4d57      	ldr	r5, [pc, #348]	@ (801caac <_strtod_l+0xaf4>)
 801c950:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801c954:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c956:	401d      	ands	r5, r3
 801c958:	4b58      	ldr	r3, [pc, #352]	@ (801cabc <_strtod_l+0xb04>)
 801c95a:	429d      	cmp	r5, r3
 801c95c:	f040 80b2 	bne.w	801cac4 <_strtod_l+0xb0c>
 801c960:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c962:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801c966:	ec4b ab10 	vmov	d0, sl, fp
 801c96a:	f7ff f999 	bl	801bca0 <__ulp>
 801c96e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801c972:	ec51 0b10 	vmov	r0, r1, d0
 801c976:	f7e3 fe3f 	bl	80005f8 <__aeabi_dmul>
 801c97a:	4652      	mov	r2, sl
 801c97c:	465b      	mov	r3, fp
 801c97e:	f7e3 fc85 	bl	800028c <__adddf3>
 801c982:	460b      	mov	r3, r1
 801c984:	4949      	ldr	r1, [pc, #292]	@ (801caac <_strtod_l+0xaf4>)
 801c986:	4a4e      	ldr	r2, [pc, #312]	@ (801cac0 <_strtod_l+0xb08>)
 801c988:	4019      	ands	r1, r3
 801c98a:	4291      	cmp	r1, r2
 801c98c:	4682      	mov	sl, r0
 801c98e:	d942      	bls.n	801ca16 <_strtod_l+0xa5e>
 801c990:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c992:	4b47      	ldr	r3, [pc, #284]	@ (801cab0 <_strtod_l+0xaf8>)
 801c994:	429a      	cmp	r2, r3
 801c996:	d103      	bne.n	801c9a0 <_strtod_l+0x9e8>
 801c998:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c99a:	3301      	adds	r3, #1
 801c99c:	f43f ad2f 	beq.w	801c3fe <_strtod_l+0x446>
 801c9a0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801cab0 <_strtod_l+0xaf8>
 801c9a4:	f04f 3aff 	mov.w	sl, #4294967295
 801c9a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c9aa:	9805      	ldr	r0, [sp, #20]
 801c9ac:	f7fe fe4c 	bl	801b648 <_Bfree>
 801c9b0:	9805      	ldr	r0, [sp, #20]
 801c9b2:	4649      	mov	r1, r9
 801c9b4:	f7fe fe48 	bl	801b648 <_Bfree>
 801c9b8:	9805      	ldr	r0, [sp, #20]
 801c9ba:	4641      	mov	r1, r8
 801c9bc:	f7fe fe44 	bl	801b648 <_Bfree>
 801c9c0:	9805      	ldr	r0, [sp, #20]
 801c9c2:	4621      	mov	r1, r4
 801c9c4:	f7fe fe40 	bl	801b648 <_Bfree>
 801c9c8:	e619      	b.n	801c5fe <_strtod_l+0x646>
 801c9ca:	f1ba 0f01 	cmp.w	sl, #1
 801c9ce:	d103      	bne.n	801c9d8 <_strtod_l+0xa20>
 801c9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c9d2:	2b00      	cmp	r3, #0
 801c9d4:	f43f ada6 	beq.w	801c524 <_strtod_l+0x56c>
 801c9d8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801ca88 <_strtod_l+0xad0>
 801c9dc:	4f35      	ldr	r7, [pc, #212]	@ (801cab4 <_strtod_l+0xafc>)
 801c9de:	ed8d 7b06 	vstr	d7, [sp, #24]
 801c9e2:	2600      	movs	r6, #0
 801c9e4:	e7b1      	b.n	801c94a <_strtod_l+0x992>
 801c9e6:	4f34      	ldr	r7, [pc, #208]	@ (801cab8 <_strtod_l+0xb00>)
 801c9e8:	2600      	movs	r6, #0
 801c9ea:	e7aa      	b.n	801c942 <_strtod_l+0x98a>
 801c9ec:	4b32      	ldr	r3, [pc, #200]	@ (801cab8 <_strtod_l+0xb00>)
 801c9ee:	4630      	mov	r0, r6
 801c9f0:	4639      	mov	r1, r7
 801c9f2:	2200      	movs	r2, #0
 801c9f4:	f7e3 fe00 	bl	80005f8 <__aeabi_dmul>
 801c9f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801c9fa:	4606      	mov	r6, r0
 801c9fc:	460f      	mov	r7, r1
 801c9fe:	2b00      	cmp	r3, #0
 801ca00:	d09f      	beq.n	801c942 <_strtod_l+0x98a>
 801ca02:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801ca06:	e7a0      	b.n	801c94a <_strtod_l+0x992>
 801ca08:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801ca90 <_strtod_l+0xad8>
 801ca0c:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ca10:	ec57 6b17 	vmov	r6, r7, d7
 801ca14:	e799      	b.n	801c94a <_strtod_l+0x992>
 801ca16:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801ca1a:	9b08      	ldr	r3, [sp, #32]
 801ca1c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d1c1      	bne.n	801c9a8 <_strtod_l+0x9f0>
 801ca24:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ca28:	0d1b      	lsrs	r3, r3, #20
 801ca2a:	051b      	lsls	r3, r3, #20
 801ca2c:	429d      	cmp	r5, r3
 801ca2e:	d1bb      	bne.n	801c9a8 <_strtod_l+0x9f0>
 801ca30:	4630      	mov	r0, r6
 801ca32:	4639      	mov	r1, r7
 801ca34:	f7e4 f940 	bl	8000cb8 <__aeabi_d2lz>
 801ca38:	f7e3 fdb0 	bl	800059c <__aeabi_l2d>
 801ca3c:	4602      	mov	r2, r0
 801ca3e:	460b      	mov	r3, r1
 801ca40:	4630      	mov	r0, r6
 801ca42:	4639      	mov	r1, r7
 801ca44:	f7e3 fc20 	bl	8000288 <__aeabi_dsub>
 801ca48:	460b      	mov	r3, r1
 801ca4a:	4602      	mov	r2, r0
 801ca4c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801ca50:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801ca54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ca56:	ea46 060a 	orr.w	r6, r6, sl
 801ca5a:	431e      	orrs	r6, r3
 801ca5c:	d06f      	beq.n	801cb3e <_strtod_l+0xb86>
 801ca5e:	a30e      	add	r3, pc, #56	@ (adr r3, 801ca98 <_strtod_l+0xae0>)
 801ca60:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca64:	f7e4 f83a 	bl	8000adc <__aeabi_dcmplt>
 801ca68:	2800      	cmp	r0, #0
 801ca6a:	f47f acd3 	bne.w	801c414 <_strtod_l+0x45c>
 801ca6e:	a30c      	add	r3, pc, #48	@ (adr r3, 801caa0 <_strtod_l+0xae8>)
 801ca70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ca78:	f7e4 f84e 	bl	8000b18 <__aeabi_dcmpgt>
 801ca7c:	2800      	cmp	r0, #0
 801ca7e:	d093      	beq.n	801c9a8 <_strtod_l+0x9f0>
 801ca80:	e4c8      	b.n	801c414 <_strtod_l+0x45c>
 801ca82:	bf00      	nop
 801ca84:	f3af 8000 	nop.w
 801ca88:	00000000 	.word	0x00000000
 801ca8c:	bff00000 	.word	0xbff00000
 801ca90:	00000000 	.word	0x00000000
 801ca94:	3ff00000 	.word	0x3ff00000
 801ca98:	94a03595 	.word	0x94a03595
 801ca9c:	3fdfffff 	.word	0x3fdfffff
 801caa0:	35afe535 	.word	0x35afe535
 801caa4:	3fe00000 	.word	0x3fe00000
 801caa8:	000fffff 	.word	0x000fffff
 801caac:	7ff00000 	.word	0x7ff00000
 801cab0:	7fefffff 	.word	0x7fefffff
 801cab4:	3ff00000 	.word	0x3ff00000
 801cab8:	3fe00000 	.word	0x3fe00000
 801cabc:	7fe00000 	.word	0x7fe00000
 801cac0:	7c9fffff 	.word	0x7c9fffff
 801cac4:	9b08      	ldr	r3, [sp, #32]
 801cac6:	b323      	cbz	r3, 801cb12 <_strtod_l+0xb5a>
 801cac8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801cacc:	d821      	bhi.n	801cb12 <_strtod_l+0xb5a>
 801cace:	a328      	add	r3, pc, #160	@ (adr r3, 801cb70 <_strtod_l+0xbb8>)
 801cad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cad4:	4630      	mov	r0, r6
 801cad6:	4639      	mov	r1, r7
 801cad8:	f7e4 f80a 	bl	8000af0 <__aeabi_dcmple>
 801cadc:	b1a0      	cbz	r0, 801cb08 <_strtod_l+0xb50>
 801cade:	4639      	mov	r1, r7
 801cae0:	4630      	mov	r0, r6
 801cae2:	f7e4 f861 	bl	8000ba8 <__aeabi_d2uiz>
 801cae6:	2801      	cmp	r0, #1
 801cae8:	bf38      	it	cc
 801caea:	2001      	movcc	r0, #1
 801caec:	f7e3 fd0a 	bl	8000504 <__aeabi_ui2d>
 801caf0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801caf2:	4606      	mov	r6, r0
 801caf4:	460f      	mov	r7, r1
 801caf6:	b9fb      	cbnz	r3, 801cb38 <_strtod_l+0xb80>
 801caf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cafc:	9014      	str	r0, [sp, #80]	@ 0x50
 801cafe:	9315      	str	r3, [sp, #84]	@ 0x54
 801cb00:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801cb04:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801cb08:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cb0a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801cb0e:	1b5b      	subs	r3, r3, r5
 801cb10:	9311      	str	r3, [sp, #68]	@ 0x44
 801cb12:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801cb16:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801cb1a:	f7ff f8c1 	bl	801bca0 <__ulp>
 801cb1e:	4650      	mov	r0, sl
 801cb20:	ec53 2b10 	vmov	r2, r3, d0
 801cb24:	4659      	mov	r1, fp
 801cb26:	f7e3 fd67 	bl	80005f8 <__aeabi_dmul>
 801cb2a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801cb2e:	f7e3 fbad 	bl	800028c <__adddf3>
 801cb32:	4682      	mov	sl, r0
 801cb34:	468b      	mov	fp, r1
 801cb36:	e770      	b.n	801ca1a <_strtod_l+0xa62>
 801cb38:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801cb3c:	e7e0      	b.n	801cb00 <_strtod_l+0xb48>
 801cb3e:	a30e      	add	r3, pc, #56	@ (adr r3, 801cb78 <_strtod_l+0xbc0>)
 801cb40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb44:	f7e3 ffca 	bl	8000adc <__aeabi_dcmplt>
 801cb48:	e798      	b.n	801ca7c <_strtod_l+0xac4>
 801cb4a:	2300      	movs	r3, #0
 801cb4c:	930e      	str	r3, [sp, #56]	@ 0x38
 801cb4e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801cb50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cb52:	6013      	str	r3, [r2, #0]
 801cb54:	f7ff ba6d 	b.w	801c032 <_strtod_l+0x7a>
 801cb58:	2a65      	cmp	r2, #101	@ 0x65
 801cb5a:	f43f ab68 	beq.w	801c22e <_strtod_l+0x276>
 801cb5e:	2a45      	cmp	r2, #69	@ 0x45
 801cb60:	f43f ab65 	beq.w	801c22e <_strtod_l+0x276>
 801cb64:	2301      	movs	r3, #1
 801cb66:	f7ff bba0 	b.w	801c2aa <_strtod_l+0x2f2>
 801cb6a:	bf00      	nop
 801cb6c:	f3af 8000 	nop.w
 801cb70:	ffc00000 	.word	0xffc00000
 801cb74:	41dfffff 	.word	0x41dfffff
 801cb78:	94a03595 	.word	0x94a03595
 801cb7c:	3fcfffff 	.word	0x3fcfffff

0801cb80 <_strtod_r>:
 801cb80:	4b01      	ldr	r3, [pc, #4]	@ (801cb88 <_strtod_r+0x8>)
 801cb82:	f7ff ba19 	b.w	801bfb8 <_strtod_l>
 801cb86:	bf00      	nop
 801cb88:	200001b0 	.word	0x200001b0

0801cb8c <_strtol_l.isra.0>:
 801cb8c:	2b24      	cmp	r3, #36	@ 0x24
 801cb8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cb92:	4686      	mov	lr, r0
 801cb94:	4690      	mov	r8, r2
 801cb96:	d801      	bhi.n	801cb9c <_strtol_l.isra.0+0x10>
 801cb98:	2b01      	cmp	r3, #1
 801cb9a:	d106      	bne.n	801cbaa <_strtol_l.isra.0+0x1e>
 801cb9c:	f7fd fd62 	bl	801a664 <__errno>
 801cba0:	2316      	movs	r3, #22
 801cba2:	6003      	str	r3, [r0, #0]
 801cba4:	2000      	movs	r0, #0
 801cba6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cbaa:	4834      	ldr	r0, [pc, #208]	@ (801cc7c <_strtol_l.isra.0+0xf0>)
 801cbac:	460d      	mov	r5, r1
 801cbae:	462a      	mov	r2, r5
 801cbb0:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cbb4:	5d06      	ldrb	r6, [r0, r4]
 801cbb6:	f016 0608 	ands.w	r6, r6, #8
 801cbba:	d1f8      	bne.n	801cbae <_strtol_l.isra.0+0x22>
 801cbbc:	2c2d      	cmp	r4, #45	@ 0x2d
 801cbbe:	d110      	bne.n	801cbe2 <_strtol_l.isra.0+0x56>
 801cbc0:	782c      	ldrb	r4, [r5, #0]
 801cbc2:	2601      	movs	r6, #1
 801cbc4:	1c95      	adds	r5, r2, #2
 801cbc6:	f033 0210 	bics.w	r2, r3, #16
 801cbca:	d115      	bne.n	801cbf8 <_strtol_l.isra.0+0x6c>
 801cbcc:	2c30      	cmp	r4, #48	@ 0x30
 801cbce:	d10d      	bne.n	801cbec <_strtol_l.isra.0+0x60>
 801cbd0:	782a      	ldrb	r2, [r5, #0]
 801cbd2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801cbd6:	2a58      	cmp	r2, #88	@ 0x58
 801cbd8:	d108      	bne.n	801cbec <_strtol_l.isra.0+0x60>
 801cbda:	786c      	ldrb	r4, [r5, #1]
 801cbdc:	3502      	adds	r5, #2
 801cbde:	2310      	movs	r3, #16
 801cbe0:	e00a      	b.n	801cbf8 <_strtol_l.isra.0+0x6c>
 801cbe2:	2c2b      	cmp	r4, #43	@ 0x2b
 801cbe4:	bf04      	itt	eq
 801cbe6:	782c      	ldrbeq	r4, [r5, #0]
 801cbe8:	1c95      	addeq	r5, r2, #2
 801cbea:	e7ec      	b.n	801cbc6 <_strtol_l.isra.0+0x3a>
 801cbec:	2b00      	cmp	r3, #0
 801cbee:	d1f6      	bne.n	801cbde <_strtol_l.isra.0+0x52>
 801cbf0:	2c30      	cmp	r4, #48	@ 0x30
 801cbf2:	bf14      	ite	ne
 801cbf4:	230a      	movne	r3, #10
 801cbf6:	2308      	moveq	r3, #8
 801cbf8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801cbfc:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cc00:	2200      	movs	r2, #0
 801cc02:	fbbc f9f3 	udiv	r9, ip, r3
 801cc06:	4610      	mov	r0, r2
 801cc08:	fb03 ca19 	mls	sl, r3, r9, ip
 801cc0c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801cc10:	2f09      	cmp	r7, #9
 801cc12:	d80f      	bhi.n	801cc34 <_strtol_l.isra.0+0xa8>
 801cc14:	463c      	mov	r4, r7
 801cc16:	42a3      	cmp	r3, r4
 801cc18:	dd1b      	ble.n	801cc52 <_strtol_l.isra.0+0xc6>
 801cc1a:	1c57      	adds	r7, r2, #1
 801cc1c:	d007      	beq.n	801cc2e <_strtol_l.isra.0+0xa2>
 801cc1e:	4581      	cmp	r9, r0
 801cc20:	d314      	bcc.n	801cc4c <_strtol_l.isra.0+0xc0>
 801cc22:	d101      	bne.n	801cc28 <_strtol_l.isra.0+0x9c>
 801cc24:	45a2      	cmp	sl, r4
 801cc26:	db11      	blt.n	801cc4c <_strtol_l.isra.0+0xc0>
 801cc28:	fb00 4003 	mla	r0, r0, r3, r4
 801cc2c:	2201      	movs	r2, #1
 801cc2e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cc32:	e7eb      	b.n	801cc0c <_strtol_l.isra.0+0x80>
 801cc34:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801cc38:	2f19      	cmp	r7, #25
 801cc3a:	d801      	bhi.n	801cc40 <_strtol_l.isra.0+0xb4>
 801cc3c:	3c37      	subs	r4, #55	@ 0x37
 801cc3e:	e7ea      	b.n	801cc16 <_strtol_l.isra.0+0x8a>
 801cc40:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801cc44:	2f19      	cmp	r7, #25
 801cc46:	d804      	bhi.n	801cc52 <_strtol_l.isra.0+0xc6>
 801cc48:	3c57      	subs	r4, #87	@ 0x57
 801cc4a:	e7e4      	b.n	801cc16 <_strtol_l.isra.0+0x8a>
 801cc4c:	f04f 32ff 	mov.w	r2, #4294967295
 801cc50:	e7ed      	b.n	801cc2e <_strtol_l.isra.0+0xa2>
 801cc52:	1c53      	adds	r3, r2, #1
 801cc54:	d108      	bne.n	801cc68 <_strtol_l.isra.0+0xdc>
 801cc56:	2322      	movs	r3, #34	@ 0x22
 801cc58:	f8ce 3000 	str.w	r3, [lr]
 801cc5c:	4660      	mov	r0, ip
 801cc5e:	f1b8 0f00 	cmp.w	r8, #0
 801cc62:	d0a0      	beq.n	801cba6 <_strtol_l.isra.0+0x1a>
 801cc64:	1e69      	subs	r1, r5, #1
 801cc66:	e006      	b.n	801cc76 <_strtol_l.isra.0+0xea>
 801cc68:	b106      	cbz	r6, 801cc6c <_strtol_l.isra.0+0xe0>
 801cc6a:	4240      	negs	r0, r0
 801cc6c:	f1b8 0f00 	cmp.w	r8, #0
 801cc70:	d099      	beq.n	801cba6 <_strtol_l.isra.0+0x1a>
 801cc72:	2a00      	cmp	r2, #0
 801cc74:	d1f6      	bne.n	801cc64 <_strtol_l.isra.0+0xd8>
 801cc76:	f8c8 1000 	str.w	r1, [r8]
 801cc7a:	e794      	b.n	801cba6 <_strtol_l.isra.0+0x1a>
 801cc7c:	080209a9 	.word	0x080209a9

0801cc80 <_strtol_r>:
 801cc80:	f7ff bf84 	b.w	801cb8c <_strtol_l.isra.0>

0801cc84 <__ssputs_r>:
 801cc84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc88:	688e      	ldr	r6, [r1, #8]
 801cc8a:	461f      	mov	r7, r3
 801cc8c:	42be      	cmp	r6, r7
 801cc8e:	680b      	ldr	r3, [r1, #0]
 801cc90:	4682      	mov	sl, r0
 801cc92:	460c      	mov	r4, r1
 801cc94:	4690      	mov	r8, r2
 801cc96:	d82d      	bhi.n	801ccf4 <__ssputs_r+0x70>
 801cc98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cc9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801cca0:	d026      	beq.n	801ccf0 <__ssputs_r+0x6c>
 801cca2:	6965      	ldr	r5, [r4, #20]
 801cca4:	6909      	ldr	r1, [r1, #16]
 801cca6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ccaa:	eba3 0901 	sub.w	r9, r3, r1
 801ccae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801ccb2:	1c7b      	adds	r3, r7, #1
 801ccb4:	444b      	add	r3, r9
 801ccb6:	106d      	asrs	r5, r5, #1
 801ccb8:	429d      	cmp	r5, r3
 801ccba:	bf38      	it	cc
 801ccbc:	461d      	movcc	r5, r3
 801ccbe:	0553      	lsls	r3, r2, #21
 801ccc0:	d527      	bpl.n	801cd12 <__ssputs_r+0x8e>
 801ccc2:	4629      	mov	r1, r5
 801ccc4:	f7fe fbf4 	bl	801b4b0 <_malloc_r>
 801ccc8:	4606      	mov	r6, r0
 801ccca:	b360      	cbz	r0, 801cd26 <__ssputs_r+0xa2>
 801cccc:	6921      	ldr	r1, [r4, #16]
 801ccce:	464a      	mov	r2, r9
 801ccd0:	f7fd fcf5 	bl	801a6be <memcpy>
 801ccd4:	89a3      	ldrh	r3, [r4, #12]
 801ccd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801ccda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801ccde:	81a3      	strh	r3, [r4, #12]
 801cce0:	6126      	str	r6, [r4, #16]
 801cce2:	6165      	str	r5, [r4, #20]
 801cce4:	444e      	add	r6, r9
 801cce6:	eba5 0509 	sub.w	r5, r5, r9
 801ccea:	6026      	str	r6, [r4, #0]
 801ccec:	60a5      	str	r5, [r4, #8]
 801ccee:	463e      	mov	r6, r7
 801ccf0:	42be      	cmp	r6, r7
 801ccf2:	d900      	bls.n	801ccf6 <__ssputs_r+0x72>
 801ccf4:	463e      	mov	r6, r7
 801ccf6:	6820      	ldr	r0, [r4, #0]
 801ccf8:	4632      	mov	r2, r6
 801ccfa:	4641      	mov	r1, r8
 801ccfc:	f7fd fbe8 	bl	801a4d0 <memmove>
 801cd00:	68a3      	ldr	r3, [r4, #8]
 801cd02:	1b9b      	subs	r3, r3, r6
 801cd04:	60a3      	str	r3, [r4, #8]
 801cd06:	6823      	ldr	r3, [r4, #0]
 801cd08:	4433      	add	r3, r6
 801cd0a:	6023      	str	r3, [r4, #0]
 801cd0c:	2000      	movs	r0, #0
 801cd0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cd12:	462a      	mov	r2, r5
 801cd14:	f7ff f902 	bl	801bf1c <_realloc_r>
 801cd18:	4606      	mov	r6, r0
 801cd1a:	2800      	cmp	r0, #0
 801cd1c:	d1e0      	bne.n	801cce0 <__ssputs_r+0x5c>
 801cd1e:	6921      	ldr	r1, [r4, #16]
 801cd20:	4650      	mov	r0, sl
 801cd22:	f7fe fb51 	bl	801b3c8 <_free_r>
 801cd26:	230c      	movs	r3, #12
 801cd28:	f8ca 3000 	str.w	r3, [sl]
 801cd2c:	89a3      	ldrh	r3, [r4, #12]
 801cd2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801cd32:	81a3      	strh	r3, [r4, #12]
 801cd34:	f04f 30ff 	mov.w	r0, #4294967295
 801cd38:	e7e9      	b.n	801cd0e <__ssputs_r+0x8a>
	...

0801cd3c <_svfiprintf_r>:
 801cd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd40:	4698      	mov	r8, r3
 801cd42:	898b      	ldrh	r3, [r1, #12]
 801cd44:	061b      	lsls	r3, r3, #24
 801cd46:	b09d      	sub	sp, #116	@ 0x74
 801cd48:	4607      	mov	r7, r0
 801cd4a:	460d      	mov	r5, r1
 801cd4c:	4614      	mov	r4, r2
 801cd4e:	d510      	bpl.n	801cd72 <_svfiprintf_r+0x36>
 801cd50:	690b      	ldr	r3, [r1, #16]
 801cd52:	b973      	cbnz	r3, 801cd72 <_svfiprintf_r+0x36>
 801cd54:	2140      	movs	r1, #64	@ 0x40
 801cd56:	f7fe fbab 	bl	801b4b0 <_malloc_r>
 801cd5a:	6028      	str	r0, [r5, #0]
 801cd5c:	6128      	str	r0, [r5, #16]
 801cd5e:	b930      	cbnz	r0, 801cd6e <_svfiprintf_r+0x32>
 801cd60:	230c      	movs	r3, #12
 801cd62:	603b      	str	r3, [r7, #0]
 801cd64:	f04f 30ff 	mov.w	r0, #4294967295
 801cd68:	b01d      	add	sp, #116	@ 0x74
 801cd6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cd6e:	2340      	movs	r3, #64	@ 0x40
 801cd70:	616b      	str	r3, [r5, #20]
 801cd72:	2300      	movs	r3, #0
 801cd74:	9309      	str	r3, [sp, #36]	@ 0x24
 801cd76:	2320      	movs	r3, #32
 801cd78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cd7c:	f8cd 800c 	str.w	r8, [sp, #12]
 801cd80:	2330      	movs	r3, #48	@ 0x30
 801cd82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801cf20 <_svfiprintf_r+0x1e4>
 801cd86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801cd8a:	f04f 0901 	mov.w	r9, #1
 801cd8e:	4623      	mov	r3, r4
 801cd90:	469a      	mov	sl, r3
 801cd92:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cd96:	b10a      	cbz	r2, 801cd9c <_svfiprintf_r+0x60>
 801cd98:	2a25      	cmp	r2, #37	@ 0x25
 801cd9a:	d1f9      	bne.n	801cd90 <_svfiprintf_r+0x54>
 801cd9c:	ebba 0b04 	subs.w	fp, sl, r4
 801cda0:	d00b      	beq.n	801cdba <_svfiprintf_r+0x7e>
 801cda2:	465b      	mov	r3, fp
 801cda4:	4622      	mov	r2, r4
 801cda6:	4629      	mov	r1, r5
 801cda8:	4638      	mov	r0, r7
 801cdaa:	f7ff ff6b 	bl	801cc84 <__ssputs_r>
 801cdae:	3001      	adds	r0, #1
 801cdb0:	f000 80a7 	beq.w	801cf02 <_svfiprintf_r+0x1c6>
 801cdb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cdb6:	445a      	add	r2, fp
 801cdb8:	9209      	str	r2, [sp, #36]	@ 0x24
 801cdba:	f89a 3000 	ldrb.w	r3, [sl]
 801cdbe:	2b00      	cmp	r3, #0
 801cdc0:	f000 809f 	beq.w	801cf02 <_svfiprintf_r+0x1c6>
 801cdc4:	2300      	movs	r3, #0
 801cdc6:	f04f 32ff 	mov.w	r2, #4294967295
 801cdca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cdce:	f10a 0a01 	add.w	sl, sl, #1
 801cdd2:	9304      	str	r3, [sp, #16]
 801cdd4:	9307      	str	r3, [sp, #28]
 801cdd6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801cdda:	931a      	str	r3, [sp, #104]	@ 0x68
 801cddc:	4654      	mov	r4, sl
 801cdde:	2205      	movs	r2, #5
 801cde0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cde4:	484e      	ldr	r0, [pc, #312]	@ (801cf20 <_svfiprintf_r+0x1e4>)
 801cde6:	f7e3 f9f3 	bl	80001d0 <memchr>
 801cdea:	9a04      	ldr	r2, [sp, #16]
 801cdec:	b9d8      	cbnz	r0, 801ce26 <_svfiprintf_r+0xea>
 801cdee:	06d0      	lsls	r0, r2, #27
 801cdf0:	bf44      	itt	mi
 801cdf2:	2320      	movmi	r3, #32
 801cdf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801cdf8:	0711      	lsls	r1, r2, #28
 801cdfa:	bf44      	itt	mi
 801cdfc:	232b      	movmi	r3, #43	@ 0x2b
 801cdfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ce02:	f89a 3000 	ldrb.w	r3, [sl]
 801ce06:	2b2a      	cmp	r3, #42	@ 0x2a
 801ce08:	d015      	beq.n	801ce36 <_svfiprintf_r+0xfa>
 801ce0a:	9a07      	ldr	r2, [sp, #28]
 801ce0c:	4654      	mov	r4, sl
 801ce0e:	2000      	movs	r0, #0
 801ce10:	f04f 0c0a 	mov.w	ip, #10
 801ce14:	4621      	mov	r1, r4
 801ce16:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ce1a:	3b30      	subs	r3, #48	@ 0x30
 801ce1c:	2b09      	cmp	r3, #9
 801ce1e:	d94b      	bls.n	801ceb8 <_svfiprintf_r+0x17c>
 801ce20:	b1b0      	cbz	r0, 801ce50 <_svfiprintf_r+0x114>
 801ce22:	9207      	str	r2, [sp, #28]
 801ce24:	e014      	b.n	801ce50 <_svfiprintf_r+0x114>
 801ce26:	eba0 0308 	sub.w	r3, r0, r8
 801ce2a:	fa09 f303 	lsl.w	r3, r9, r3
 801ce2e:	4313      	orrs	r3, r2
 801ce30:	9304      	str	r3, [sp, #16]
 801ce32:	46a2      	mov	sl, r4
 801ce34:	e7d2      	b.n	801cddc <_svfiprintf_r+0xa0>
 801ce36:	9b03      	ldr	r3, [sp, #12]
 801ce38:	1d19      	adds	r1, r3, #4
 801ce3a:	681b      	ldr	r3, [r3, #0]
 801ce3c:	9103      	str	r1, [sp, #12]
 801ce3e:	2b00      	cmp	r3, #0
 801ce40:	bfbb      	ittet	lt
 801ce42:	425b      	neglt	r3, r3
 801ce44:	f042 0202 	orrlt.w	r2, r2, #2
 801ce48:	9307      	strge	r3, [sp, #28]
 801ce4a:	9307      	strlt	r3, [sp, #28]
 801ce4c:	bfb8      	it	lt
 801ce4e:	9204      	strlt	r2, [sp, #16]
 801ce50:	7823      	ldrb	r3, [r4, #0]
 801ce52:	2b2e      	cmp	r3, #46	@ 0x2e
 801ce54:	d10a      	bne.n	801ce6c <_svfiprintf_r+0x130>
 801ce56:	7863      	ldrb	r3, [r4, #1]
 801ce58:	2b2a      	cmp	r3, #42	@ 0x2a
 801ce5a:	d132      	bne.n	801cec2 <_svfiprintf_r+0x186>
 801ce5c:	9b03      	ldr	r3, [sp, #12]
 801ce5e:	1d1a      	adds	r2, r3, #4
 801ce60:	681b      	ldr	r3, [r3, #0]
 801ce62:	9203      	str	r2, [sp, #12]
 801ce64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801ce68:	3402      	adds	r4, #2
 801ce6a:	9305      	str	r3, [sp, #20]
 801ce6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801cf30 <_svfiprintf_r+0x1f4>
 801ce70:	7821      	ldrb	r1, [r4, #0]
 801ce72:	2203      	movs	r2, #3
 801ce74:	4650      	mov	r0, sl
 801ce76:	f7e3 f9ab 	bl	80001d0 <memchr>
 801ce7a:	b138      	cbz	r0, 801ce8c <_svfiprintf_r+0x150>
 801ce7c:	9b04      	ldr	r3, [sp, #16]
 801ce7e:	eba0 000a 	sub.w	r0, r0, sl
 801ce82:	2240      	movs	r2, #64	@ 0x40
 801ce84:	4082      	lsls	r2, r0
 801ce86:	4313      	orrs	r3, r2
 801ce88:	3401      	adds	r4, #1
 801ce8a:	9304      	str	r3, [sp, #16]
 801ce8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce90:	4824      	ldr	r0, [pc, #144]	@ (801cf24 <_svfiprintf_r+0x1e8>)
 801ce92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801ce96:	2206      	movs	r2, #6
 801ce98:	f7e3 f99a 	bl	80001d0 <memchr>
 801ce9c:	2800      	cmp	r0, #0
 801ce9e:	d036      	beq.n	801cf0e <_svfiprintf_r+0x1d2>
 801cea0:	4b21      	ldr	r3, [pc, #132]	@ (801cf28 <_svfiprintf_r+0x1ec>)
 801cea2:	bb1b      	cbnz	r3, 801ceec <_svfiprintf_r+0x1b0>
 801cea4:	9b03      	ldr	r3, [sp, #12]
 801cea6:	3307      	adds	r3, #7
 801cea8:	f023 0307 	bic.w	r3, r3, #7
 801ceac:	3308      	adds	r3, #8
 801ceae:	9303      	str	r3, [sp, #12]
 801ceb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ceb2:	4433      	add	r3, r6
 801ceb4:	9309      	str	r3, [sp, #36]	@ 0x24
 801ceb6:	e76a      	b.n	801cd8e <_svfiprintf_r+0x52>
 801ceb8:	fb0c 3202 	mla	r2, ip, r2, r3
 801cebc:	460c      	mov	r4, r1
 801cebe:	2001      	movs	r0, #1
 801cec0:	e7a8      	b.n	801ce14 <_svfiprintf_r+0xd8>
 801cec2:	2300      	movs	r3, #0
 801cec4:	3401      	adds	r4, #1
 801cec6:	9305      	str	r3, [sp, #20]
 801cec8:	4619      	mov	r1, r3
 801ceca:	f04f 0c0a 	mov.w	ip, #10
 801cece:	4620      	mov	r0, r4
 801ced0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ced4:	3a30      	subs	r2, #48	@ 0x30
 801ced6:	2a09      	cmp	r2, #9
 801ced8:	d903      	bls.n	801cee2 <_svfiprintf_r+0x1a6>
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d0c6      	beq.n	801ce6c <_svfiprintf_r+0x130>
 801cede:	9105      	str	r1, [sp, #20]
 801cee0:	e7c4      	b.n	801ce6c <_svfiprintf_r+0x130>
 801cee2:	fb0c 2101 	mla	r1, ip, r1, r2
 801cee6:	4604      	mov	r4, r0
 801cee8:	2301      	movs	r3, #1
 801ceea:	e7f0      	b.n	801cece <_svfiprintf_r+0x192>
 801ceec:	ab03      	add	r3, sp, #12
 801ceee:	9300      	str	r3, [sp, #0]
 801cef0:	462a      	mov	r2, r5
 801cef2:	4b0e      	ldr	r3, [pc, #56]	@ (801cf2c <_svfiprintf_r+0x1f0>)
 801cef4:	a904      	add	r1, sp, #16
 801cef6:	4638      	mov	r0, r7
 801cef8:	f7fc f978 	bl	80191ec <_printf_float>
 801cefc:	1c42      	adds	r2, r0, #1
 801cefe:	4606      	mov	r6, r0
 801cf00:	d1d6      	bne.n	801ceb0 <_svfiprintf_r+0x174>
 801cf02:	89ab      	ldrh	r3, [r5, #12]
 801cf04:	065b      	lsls	r3, r3, #25
 801cf06:	f53f af2d 	bmi.w	801cd64 <_svfiprintf_r+0x28>
 801cf0a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cf0c:	e72c      	b.n	801cd68 <_svfiprintf_r+0x2c>
 801cf0e:	ab03      	add	r3, sp, #12
 801cf10:	9300      	str	r3, [sp, #0]
 801cf12:	462a      	mov	r2, r5
 801cf14:	4b05      	ldr	r3, [pc, #20]	@ (801cf2c <_svfiprintf_r+0x1f0>)
 801cf16:	a904      	add	r1, sp, #16
 801cf18:	4638      	mov	r0, r7
 801cf1a:	f7fc fd4b 	bl	80199b4 <_printf_i>
 801cf1e:	e7ed      	b.n	801cefc <_svfiprintf_r+0x1c0>
 801cf20:	08020258 	.word	0x08020258
 801cf24:	08020262 	.word	0x08020262
 801cf28:	080191ed 	.word	0x080191ed
 801cf2c:	0801cc85 	.word	0x0801cc85
 801cf30:	0802025e 	.word	0x0802025e

0801cf34 <_sungetc_r>:
 801cf34:	b538      	push	{r3, r4, r5, lr}
 801cf36:	1c4b      	adds	r3, r1, #1
 801cf38:	4614      	mov	r4, r2
 801cf3a:	d103      	bne.n	801cf44 <_sungetc_r+0x10>
 801cf3c:	f04f 35ff 	mov.w	r5, #4294967295
 801cf40:	4628      	mov	r0, r5
 801cf42:	bd38      	pop	{r3, r4, r5, pc}
 801cf44:	8993      	ldrh	r3, [r2, #12]
 801cf46:	f023 0320 	bic.w	r3, r3, #32
 801cf4a:	8193      	strh	r3, [r2, #12]
 801cf4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801cf4e:	6852      	ldr	r2, [r2, #4]
 801cf50:	b2cd      	uxtb	r5, r1
 801cf52:	b18b      	cbz	r3, 801cf78 <_sungetc_r+0x44>
 801cf54:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801cf56:	4293      	cmp	r3, r2
 801cf58:	dd08      	ble.n	801cf6c <_sungetc_r+0x38>
 801cf5a:	6823      	ldr	r3, [r4, #0]
 801cf5c:	1e5a      	subs	r2, r3, #1
 801cf5e:	6022      	str	r2, [r4, #0]
 801cf60:	f803 5c01 	strb.w	r5, [r3, #-1]
 801cf64:	6863      	ldr	r3, [r4, #4]
 801cf66:	3301      	adds	r3, #1
 801cf68:	6063      	str	r3, [r4, #4]
 801cf6a:	e7e9      	b.n	801cf40 <_sungetc_r+0xc>
 801cf6c:	4621      	mov	r1, r4
 801cf6e:	f000 fc8c 	bl	801d88a <__submore>
 801cf72:	2800      	cmp	r0, #0
 801cf74:	d0f1      	beq.n	801cf5a <_sungetc_r+0x26>
 801cf76:	e7e1      	b.n	801cf3c <_sungetc_r+0x8>
 801cf78:	6921      	ldr	r1, [r4, #16]
 801cf7a:	6823      	ldr	r3, [r4, #0]
 801cf7c:	b151      	cbz	r1, 801cf94 <_sungetc_r+0x60>
 801cf7e:	4299      	cmp	r1, r3
 801cf80:	d208      	bcs.n	801cf94 <_sungetc_r+0x60>
 801cf82:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801cf86:	42a9      	cmp	r1, r5
 801cf88:	d104      	bne.n	801cf94 <_sungetc_r+0x60>
 801cf8a:	3b01      	subs	r3, #1
 801cf8c:	3201      	adds	r2, #1
 801cf8e:	6023      	str	r3, [r4, #0]
 801cf90:	6062      	str	r2, [r4, #4]
 801cf92:	e7d5      	b.n	801cf40 <_sungetc_r+0xc>
 801cf94:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801cf98:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cf9c:	6363      	str	r3, [r4, #52]	@ 0x34
 801cf9e:	2303      	movs	r3, #3
 801cfa0:	63a3      	str	r3, [r4, #56]	@ 0x38
 801cfa2:	4623      	mov	r3, r4
 801cfa4:	f803 5f46 	strb.w	r5, [r3, #70]!
 801cfa8:	6023      	str	r3, [r4, #0]
 801cfaa:	2301      	movs	r3, #1
 801cfac:	e7dc      	b.n	801cf68 <_sungetc_r+0x34>

0801cfae <__ssrefill_r>:
 801cfae:	b510      	push	{r4, lr}
 801cfb0:	460c      	mov	r4, r1
 801cfb2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801cfb4:	b169      	cbz	r1, 801cfd2 <__ssrefill_r+0x24>
 801cfb6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801cfba:	4299      	cmp	r1, r3
 801cfbc:	d001      	beq.n	801cfc2 <__ssrefill_r+0x14>
 801cfbe:	f7fe fa03 	bl	801b3c8 <_free_r>
 801cfc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801cfc4:	6063      	str	r3, [r4, #4]
 801cfc6:	2000      	movs	r0, #0
 801cfc8:	6360      	str	r0, [r4, #52]	@ 0x34
 801cfca:	b113      	cbz	r3, 801cfd2 <__ssrefill_r+0x24>
 801cfcc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801cfce:	6023      	str	r3, [r4, #0]
 801cfd0:	bd10      	pop	{r4, pc}
 801cfd2:	6923      	ldr	r3, [r4, #16]
 801cfd4:	6023      	str	r3, [r4, #0]
 801cfd6:	2300      	movs	r3, #0
 801cfd8:	6063      	str	r3, [r4, #4]
 801cfda:	89a3      	ldrh	r3, [r4, #12]
 801cfdc:	f043 0320 	orr.w	r3, r3, #32
 801cfe0:	81a3      	strh	r3, [r4, #12]
 801cfe2:	f04f 30ff 	mov.w	r0, #4294967295
 801cfe6:	e7f3      	b.n	801cfd0 <__ssrefill_r+0x22>

0801cfe8 <__ssvfiscanf_r>:
 801cfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfec:	460c      	mov	r4, r1
 801cfee:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801cff2:	2100      	movs	r1, #0
 801cff4:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801cff8:	49a6      	ldr	r1, [pc, #664]	@ (801d294 <__ssvfiscanf_r+0x2ac>)
 801cffa:	91a0      	str	r1, [sp, #640]	@ 0x280
 801cffc:	f10d 0804 	add.w	r8, sp, #4
 801d000:	49a5      	ldr	r1, [pc, #660]	@ (801d298 <__ssvfiscanf_r+0x2b0>)
 801d002:	4fa6      	ldr	r7, [pc, #664]	@ (801d29c <__ssvfiscanf_r+0x2b4>)
 801d004:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801d008:	4606      	mov	r6, r0
 801d00a:	91a1      	str	r1, [sp, #644]	@ 0x284
 801d00c:	9300      	str	r3, [sp, #0]
 801d00e:	f892 9000 	ldrb.w	r9, [r2]
 801d012:	f1b9 0f00 	cmp.w	r9, #0
 801d016:	f000 8158 	beq.w	801d2ca <__ssvfiscanf_r+0x2e2>
 801d01a:	f817 3009 	ldrb.w	r3, [r7, r9]
 801d01e:	f013 0308 	ands.w	r3, r3, #8
 801d022:	f102 0501 	add.w	r5, r2, #1
 801d026:	d019      	beq.n	801d05c <__ssvfiscanf_r+0x74>
 801d028:	6863      	ldr	r3, [r4, #4]
 801d02a:	2b00      	cmp	r3, #0
 801d02c:	dd0f      	ble.n	801d04e <__ssvfiscanf_r+0x66>
 801d02e:	6823      	ldr	r3, [r4, #0]
 801d030:	781a      	ldrb	r2, [r3, #0]
 801d032:	5cba      	ldrb	r2, [r7, r2]
 801d034:	0712      	lsls	r2, r2, #28
 801d036:	d401      	bmi.n	801d03c <__ssvfiscanf_r+0x54>
 801d038:	462a      	mov	r2, r5
 801d03a:	e7e8      	b.n	801d00e <__ssvfiscanf_r+0x26>
 801d03c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d03e:	3201      	adds	r2, #1
 801d040:	9245      	str	r2, [sp, #276]	@ 0x114
 801d042:	6862      	ldr	r2, [r4, #4]
 801d044:	3301      	adds	r3, #1
 801d046:	3a01      	subs	r2, #1
 801d048:	6062      	str	r2, [r4, #4]
 801d04a:	6023      	str	r3, [r4, #0]
 801d04c:	e7ec      	b.n	801d028 <__ssvfiscanf_r+0x40>
 801d04e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d050:	4621      	mov	r1, r4
 801d052:	4630      	mov	r0, r6
 801d054:	4798      	blx	r3
 801d056:	2800      	cmp	r0, #0
 801d058:	d0e9      	beq.n	801d02e <__ssvfiscanf_r+0x46>
 801d05a:	e7ed      	b.n	801d038 <__ssvfiscanf_r+0x50>
 801d05c:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801d060:	f040 8085 	bne.w	801d16e <__ssvfiscanf_r+0x186>
 801d064:	9341      	str	r3, [sp, #260]	@ 0x104
 801d066:	9343      	str	r3, [sp, #268]	@ 0x10c
 801d068:	7853      	ldrb	r3, [r2, #1]
 801d06a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d06c:	bf02      	ittt	eq
 801d06e:	2310      	moveq	r3, #16
 801d070:	1c95      	addeq	r5, r2, #2
 801d072:	9341      	streq	r3, [sp, #260]	@ 0x104
 801d074:	220a      	movs	r2, #10
 801d076:	46aa      	mov	sl, r5
 801d078:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801d07c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801d080:	2b09      	cmp	r3, #9
 801d082:	d91e      	bls.n	801d0c2 <__ssvfiscanf_r+0xda>
 801d084:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801d2a0 <__ssvfiscanf_r+0x2b8>
 801d088:	2203      	movs	r2, #3
 801d08a:	4658      	mov	r0, fp
 801d08c:	f7e3 f8a0 	bl	80001d0 <memchr>
 801d090:	b138      	cbz	r0, 801d0a2 <__ssvfiscanf_r+0xba>
 801d092:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d094:	eba0 000b 	sub.w	r0, r0, fp
 801d098:	2301      	movs	r3, #1
 801d09a:	4083      	lsls	r3, r0
 801d09c:	4313      	orrs	r3, r2
 801d09e:	9341      	str	r3, [sp, #260]	@ 0x104
 801d0a0:	4655      	mov	r5, sl
 801d0a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d0a6:	2b78      	cmp	r3, #120	@ 0x78
 801d0a8:	d806      	bhi.n	801d0b8 <__ssvfiscanf_r+0xd0>
 801d0aa:	2b57      	cmp	r3, #87	@ 0x57
 801d0ac:	d810      	bhi.n	801d0d0 <__ssvfiscanf_r+0xe8>
 801d0ae:	2b25      	cmp	r3, #37	@ 0x25
 801d0b0:	d05d      	beq.n	801d16e <__ssvfiscanf_r+0x186>
 801d0b2:	d857      	bhi.n	801d164 <__ssvfiscanf_r+0x17c>
 801d0b4:	2b00      	cmp	r3, #0
 801d0b6:	d075      	beq.n	801d1a4 <__ssvfiscanf_r+0x1bc>
 801d0b8:	2303      	movs	r3, #3
 801d0ba:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d0bc:	230a      	movs	r3, #10
 801d0be:	9342      	str	r3, [sp, #264]	@ 0x108
 801d0c0:	e088      	b.n	801d1d4 <__ssvfiscanf_r+0x1ec>
 801d0c2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801d0c4:	fb02 1103 	mla	r1, r2, r3, r1
 801d0c8:	3930      	subs	r1, #48	@ 0x30
 801d0ca:	9143      	str	r1, [sp, #268]	@ 0x10c
 801d0cc:	4655      	mov	r5, sl
 801d0ce:	e7d2      	b.n	801d076 <__ssvfiscanf_r+0x8e>
 801d0d0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801d0d4:	2a20      	cmp	r2, #32
 801d0d6:	d8ef      	bhi.n	801d0b8 <__ssvfiscanf_r+0xd0>
 801d0d8:	a101      	add	r1, pc, #4	@ (adr r1, 801d0e0 <__ssvfiscanf_r+0xf8>)
 801d0da:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d0de:	bf00      	nop
 801d0e0:	0801d1b3 	.word	0x0801d1b3
 801d0e4:	0801d0b9 	.word	0x0801d0b9
 801d0e8:	0801d0b9 	.word	0x0801d0b9
 801d0ec:	0801d20d 	.word	0x0801d20d
 801d0f0:	0801d0b9 	.word	0x0801d0b9
 801d0f4:	0801d0b9 	.word	0x0801d0b9
 801d0f8:	0801d0b9 	.word	0x0801d0b9
 801d0fc:	0801d0b9 	.word	0x0801d0b9
 801d100:	0801d0b9 	.word	0x0801d0b9
 801d104:	0801d0b9 	.word	0x0801d0b9
 801d108:	0801d0b9 	.word	0x0801d0b9
 801d10c:	0801d223 	.word	0x0801d223
 801d110:	0801d209 	.word	0x0801d209
 801d114:	0801d16b 	.word	0x0801d16b
 801d118:	0801d16b 	.word	0x0801d16b
 801d11c:	0801d16b 	.word	0x0801d16b
 801d120:	0801d0b9 	.word	0x0801d0b9
 801d124:	0801d1c5 	.word	0x0801d1c5
 801d128:	0801d0b9 	.word	0x0801d0b9
 801d12c:	0801d0b9 	.word	0x0801d0b9
 801d130:	0801d0b9 	.word	0x0801d0b9
 801d134:	0801d0b9 	.word	0x0801d0b9
 801d138:	0801d233 	.word	0x0801d233
 801d13c:	0801d1cd 	.word	0x0801d1cd
 801d140:	0801d1ab 	.word	0x0801d1ab
 801d144:	0801d0b9 	.word	0x0801d0b9
 801d148:	0801d0b9 	.word	0x0801d0b9
 801d14c:	0801d22f 	.word	0x0801d22f
 801d150:	0801d0b9 	.word	0x0801d0b9
 801d154:	0801d209 	.word	0x0801d209
 801d158:	0801d0b9 	.word	0x0801d0b9
 801d15c:	0801d0b9 	.word	0x0801d0b9
 801d160:	0801d1b3 	.word	0x0801d1b3
 801d164:	3b45      	subs	r3, #69	@ 0x45
 801d166:	2b02      	cmp	r3, #2
 801d168:	d8a6      	bhi.n	801d0b8 <__ssvfiscanf_r+0xd0>
 801d16a:	2305      	movs	r3, #5
 801d16c:	e031      	b.n	801d1d2 <__ssvfiscanf_r+0x1ea>
 801d16e:	6863      	ldr	r3, [r4, #4]
 801d170:	2b00      	cmp	r3, #0
 801d172:	dd0d      	ble.n	801d190 <__ssvfiscanf_r+0x1a8>
 801d174:	6823      	ldr	r3, [r4, #0]
 801d176:	781a      	ldrb	r2, [r3, #0]
 801d178:	454a      	cmp	r2, r9
 801d17a:	f040 80a6 	bne.w	801d2ca <__ssvfiscanf_r+0x2e2>
 801d17e:	3301      	adds	r3, #1
 801d180:	6862      	ldr	r2, [r4, #4]
 801d182:	6023      	str	r3, [r4, #0]
 801d184:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801d186:	3a01      	subs	r2, #1
 801d188:	3301      	adds	r3, #1
 801d18a:	6062      	str	r2, [r4, #4]
 801d18c:	9345      	str	r3, [sp, #276]	@ 0x114
 801d18e:	e753      	b.n	801d038 <__ssvfiscanf_r+0x50>
 801d190:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d192:	4621      	mov	r1, r4
 801d194:	4630      	mov	r0, r6
 801d196:	4798      	blx	r3
 801d198:	2800      	cmp	r0, #0
 801d19a:	d0eb      	beq.n	801d174 <__ssvfiscanf_r+0x18c>
 801d19c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d19e:	2800      	cmp	r0, #0
 801d1a0:	f040 808b 	bne.w	801d2ba <__ssvfiscanf_r+0x2d2>
 801d1a4:	f04f 30ff 	mov.w	r0, #4294967295
 801d1a8:	e08b      	b.n	801d2c2 <__ssvfiscanf_r+0x2da>
 801d1aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d1ac:	f042 0220 	orr.w	r2, r2, #32
 801d1b0:	9241      	str	r2, [sp, #260]	@ 0x104
 801d1b2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d1b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801d1b8:	9241      	str	r2, [sp, #260]	@ 0x104
 801d1ba:	2210      	movs	r2, #16
 801d1bc:	2b6e      	cmp	r3, #110	@ 0x6e
 801d1be:	9242      	str	r2, [sp, #264]	@ 0x108
 801d1c0:	d902      	bls.n	801d1c8 <__ssvfiscanf_r+0x1e0>
 801d1c2:	e005      	b.n	801d1d0 <__ssvfiscanf_r+0x1e8>
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	9342      	str	r3, [sp, #264]	@ 0x108
 801d1c8:	2303      	movs	r3, #3
 801d1ca:	e002      	b.n	801d1d2 <__ssvfiscanf_r+0x1ea>
 801d1cc:	2308      	movs	r3, #8
 801d1ce:	9342      	str	r3, [sp, #264]	@ 0x108
 801d1d0:	2304      	movs	r3, #4
 801d1d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d1d4:	6863      	ldr	r3, [r4, #4]
 801d1d6:	2b00      	cmp	r3, #0
 801d1d8:	dd39      	ble.n	801d24e <__ssvfiscanf_r+0x266>
 801d1da:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d1dc:	0659      	lsls	r1, r3, #25
 801d1de:	d404      	bmi.n	801d1ea <__ssvfiscanf_r+0x202>
 801d1e0:	6823      	ldr	r3, [r4, #0]
 801d1e2:	781a      	ldrb	r2, [r3, #0]
 801d1e4:	5cba      	ldrb	r2, [r7, r2]
 801d1e6:	0712      	lsls	r2, r2, #28
 801d1e8:	d438      	bmi.n	801d25c <__ssvfiscanf_r+0x274>
 801d1ea:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801d1ec:	2b02      	cmp	r3, #2
 801d1ee:	dc47      	bgt.n	801d280 <__ssvfiscanf_r+0x298>
 801d1f0:	466b      	mov	r3, sp
 801d1f2:	4622      	mov	r2, r4
 801d1f4:	a941      	add	r1, sp, #260	@ 0x104
 801d1f6:	4630      	mov	r0, r6
 801d1f8:	f000 f86c 	bl	801d2d4 <_scanf_chars>
 801d1fc:	2801      	cmp	r0, #1
 801d1fe:	d064      	beq.n	801d2ca <__ssvfiscanf_r+0x2e2>
 801d200:	2802      	cmp	r0, #2
 801d202:	f47f af19 	bne.w	801d038 <__ssvfiscanf_r+0x50>
 801d206:	e7c9      	b.n	801d19c <__ssvfiscanf_r+0x1b4>
 801d208:	220a      	movs	r2, #10
 801d20a:	e7d7      	b.n	801d1bc <__ssvfiscanf_r+0x1d4>
 801d20c:	4629      	mov	r1, r5
 801d20e:	4640      	mov	r0, r8
 801d210:	f000 fb02 	bl	801d818 <__sccl>
 801d214:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d21a:	9341      	str	r3, [sp, #260]	@ 0x104
 801d21c:	4605      	mov	r5, r0
 801d21e:	2301      	movs	r3, #1
 801d220:	e7d7      	b.n	801d1d2 <__ssvfiscanf_r+0x1ea>
 801d222:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d224:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d228:	9341      	str	r3, [sp, #260]	@ 0x104
 801d22a:	2300      	movs	r3, #0
 801d22c:	e7d1      	b.n	801d1d2 <__ssvfiscanf_r+0x1ea>
 801d22e:	2302      	movs	r3, #2
 801d230:	e7cf      	b.n	801d1d2 <__ssvfiscanf_r+0x1ea>
 801d232:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801d234:	06c3      	lsls	r3, r0, #27
 801d236:	f53f aeff 	bmi.w	801d038 <__ssvfiscanf_r+0x50>
 801d23a:	9b00      	ldr	r3, [sp, #0]
 801d23c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d23e:	1d19      	adds	r1, r3, #4
 801d240:	9100      	str	r1, [sp, #0]
 801d242:	681b      	ldr	r3, [r3, #0]
 801d244:	07c0      	lsls	r0, r0, #31
 801d246:	bf4c      	ite	mi
 801d248:	801a      	strhmi	r2, [r3, #0]
 801d24a:	601a      	strpl	r2, [r3, #0]
 801d24c:	e6f4      	b.n	801d038 <__ssvfiscanf_r+0x50>
 801d24e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d250:	4621      	mov	r1, r4
 801d252:	4630      	mov	r0, r6
 801d254:	4798      	blx	r3
 801d256:	2800      	cmp	r0, #0
 801d258:	d0bf      	beq.n	801d1da <__ssvfiscanf_r+0x1f2>
 801d25a:	e79f      	b.n	801d19c <__ssvfiscanf_r+0x1b4>
 801d25c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d25e:	3201      	adds	r2, #1
 801d260:	9245      	str	r2, [sp, #276]	@ 0x114
 801d262:	6862      	ldr	r2, [r4, #4]
 801d264:	3a01      	subs	r2, #1
 801d266:	2a00      	cmp	r2, #0
 801d268:	6062      	str	r2, [r4, #4]
 801d26a:	dd02      	ble.n	801d272 <__ssvfiscanf_r+0x28a>
 801d26c:	3301      	adds	r3, #1
 801d26e:	6023      	str	r3, [r4, #0]
 801d270:	e7b6      	b.n	801d1e0 <__ssvfiscanf_r+0x1f8>
 801d272:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d274:	4621      	mov	r1, r4
 801d276:	4630      	mov	r0, r6
 801d278:	4798      	blx	r3
 801d27a:	2800      	cmp	r0, #0
 801d27c:	d0b0      	beq.n	801d1e0 <__ssvfiscanf_r+0x1f8>
 801d27e:	e78d      	b.n	801d19c <__ssvfiscanf_r+0x1b4>
 801d280:	2b04      	cmp	r3, #4
 801d282:	dc0f      	bgt.n	801d2a4 <__ssvfiscanf_r+0x2bc>
 801d284:	466b      	mov	r3, sp
 801d286:	4622      	mov	r2, r4
 801d288:	a941      	add	r1, sp, #260	@ 0x104
 801d28a:	4630      	mov	r0, r6
 801d28c:	f000 f87c 	bl	801d388 <_scanf_i>
 801d290:	e7b4      	b.n	801d1fc <__ssvfiscanf_r+0x214>
 801d292:	bf00      	nop
 801d294:	0801cf35 	.word	0x0801cf35
 801d298:	0801cfaf 	.word	0x0801cfaf
 801d29c:	080209a9 	.word	0x080209a9
 801d2a0:	0802025e 	.word	0x0802025e
 801d2a4:	4b0a      	ldr	r3, [pc, #40]	@ (801d2d0 <__ssvfiscanf_r+0x2e8>)
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	f43f aec6 	beq.w	801d038 <__ssvfiscanf_r+0x50>
 801d2ac:	466b      	mov	r3, sp
 801d2ae:	4622      	mov	r2, r4
 801d2b0:	a941      	add	r1, sp, #260	@ 0x104
 801d2b2:	4630      	mov	r0, r6
 801d2b4:	f7fc fc9c 	bl	8019bf0 <_scanf_float>
 801d2b8:	e7a0      	b.n	801d1fc <__ssvfiscanf_r+0x214>
 801d2ba:	89a3      	ldrh	r3, [r4, #12]
 801d2bc:	065b      	lsls	r3, r3, #25
 801d2be:	f53f af71 	bmi.w	801d1a4 <__ssvfiscanf_r+0x1bc>
 801d2c2:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801d2c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d2ca:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d2cc:	e7f9      	b.n	801d2c2 <__ssvfiscanf_r+0x2da>
 801d2ce:	bf00      	nop
 801d2d0:	08019bf1 	.word	0x08019bf1

0801d2d4 <_scanf_chars>:
 801d2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d2d8:	4615      	mov	r5, r2
 801d2da:	688a      	ldr	r2, [r1, #8]
 801d2dc:	4680      	mov	r8, r0
 801d2de:	460c      	mov	r4, r1
 801d2e0:	b932      	cbnz	r2, 801d2f0 <_scanf_chars+0x1c>
 801d2e2:	698a      	ldr	r2, [r1, #24]
 801d2e4:	2a00      	cmp	r2, #0
 801d2e6:	bf14      	ite	ne
 801d2e8:	f04f 32ff 	movne.w	r2, #4294967295
 801d2ec:	2201      	moveq	r2, #1
 801d2ee:	608a      	str	r2, [r1, #8]
 801d2f0:	6822      	ldr	r2, [r4, #0]
 801d2f2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801d384 <_scanf_chars+0xb0>
 801d2f6:	06d1      	lsls	r1, r2, #27
 801d2f8:	bf5f      	itttt	pl
 801d2fa:	681a      	ldrpl	r2, [r3, #0]
 801d2fc:	1d11      	addpl	r1, r2, #4
 801d2fe:	6019      	strpl	r1, [r3, #0]
 801d300:	6816      	ldrpl	r6, [r2, #0]
 801d302:	2700      	movs	r7, #0
 801d304:	69a0      	ldr	r0, [r4, #24]
 801d306:	b188      	cbz	r0, 801d32c <_scanf_chars+0x58>
 801d308:	2801      	cmp	r0, #1
 801d30a:	d107      	bne.n	801d31c <_scanf_chars+0x48>
 801d30c:	682b      	ldr	r3, [r5, #0]
 801d30e:	781a      	ldrb	r2, [r3, #0]
 801d310:	6963      	ldr	r3, [r4, #20]
 801d312:	5c9b      	ldrb	r3, [r3, r2]
 801d314:	b953      	cbnz	r3, 801d32c <_scanf_chars+0x58>
 801d316:	2f00      	cmp	r7, #0
 801d318:	d031      	beq.n	801d37e <_scanf_chars+0xaa>
 801d31a:	e022      	b.n	801d362 <_scanf_chars+0x8e>
 801d31c:	2802      	cmp	r0, #2
 801d31e:	d120      	bne.n	801d362 <_scanf_chars+0x8e>
 801d320:	682b      	ldr	r3, [r5, #0]
 801d322:	781b      	ldrb	r3, [r3, #0]
 801d324:	f819 3003 	ldrb.w	r3, [r9, r3]
 801d328:	071b      	lsls	r3, r3, #28
 801d32a:	d41a      	bmi.n	801d362 <_scanf_chars+0x8e>
 801d32c:	6823      	ldr	r3, [r4, #0]
 801d32e:	06da      	lsls	r2, r3, #27
 801d330:	bf5e      	ittt	pl
 801d332:	682b      	ldrpl	r3, [r5, #0]
 801d334:	781b      	ldrbpl	r3, [r3, #0]
 801d336:	f806 3b01 	strbpl.w	r3, [r6], #1
 801d33a:	682a      	ldr	r2, [r5, #0]
 801d33c:	686b      	ldr	r3, [r5, #4]
 801d33e:	3201      	adds	r2, #1
 801d340:	602a      	str	r2, [r5, #0]
 801d342:	68a2      	ldr	r2, [r4, #8]
 801d344:	3b01      	subs	r3, #1
 801d346:	3a01      	subs	r2, #1
 801d348:	606b      	str	r3, [r5, #4]
 801d34a:	3701      	adds	r7, #1
 801d34c:	60a2      	str	r2, [r4, #8]
 801d34e:	b142      	cbz	r2, 801d362 <_scanf_chars+0x8e>
 801d350:	2b00      	cmp	r3, #0
 801d352:	dcd7      	bgt.n	801d304 <_scanf_chars+0x30>
 801d354:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801d358:	4629      	mov	r1, r5
 801d35a:	4640      	mov	r0, r8
 801d35c:	4798      	blx	r3
 801d35e:	2800      	cmp	r0, #0
 801d360:	d0d0      	beq.n	801d304 <_scanf_chars+0x30>
 801d362:	6823      	ldr	r3, [r4, #0]
 801d364:	f013 0310 	ands.w	r3, r3, #16
 801d368:	d105      	bne.n	801d376 <_scanf_chars+0xa2>
 801d36a:	68e2      	ldr	r2, [r4, #12]
 801d36c:	3201      	adds	r2, #1
 801d36e:	60e2      	str	r2, [r4, #12]
 801d370:	69a2      	ldr	r2, [r4, #24]
 801d372:	b102      	cbz	r2, 801d376 <_scanf_chars+0xa2>
 801d374:	7033      	strb	r3, [r6, #0]
 801d376:	6923      	ldr	r3, [r4, #16]
 801d378:	443b      	add	r3, r7
 801d37a:	6123      	str	r3, [r4, #16]
 801d37c:	2000      	movs	r0, #0
 801d37e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d382:	bf00      	nop
 801d384:	080209a9 	.word	0x080209a9

0801d388 <_scanf_i>:
 801d388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d38c:	4698      	mov	r8, r3
 801d38e:	4b74      	ldr	r3, [pc, #464]	@ (801d560 <_scanf_i+0x1d8>)
 801d390:	460c      	mov	r4, r1
 801d392:	4682      	mov	sl, r0
 801d394:	4616      	mov	r6, r2
 801d396:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d39a:	b087      	sub	sp, #28
 801d39c:	ab03      	add	r3, sp, #12
 801d39e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801d3a2:	4b70      	ldr	r3, [pc, #448]	@ (801d564 <_scanf_i+0x1dc>)
 801d3a4:	69a1      	ldr	r1, [r4, #24]
 801d3a6:	4a70      	ldr	r2, [pc, #448]	@ (801d568 <_scanf_i+0x1e0>)
 801d3a8:	2903      	cmp	r1, #3
 801d3aa:	bf08      	it	eq
 801d3ac:	461a      	moveq	r2, r3
 801d3ae:	68a3      	ldr	r3, [r4, #8]
 801d3b0:	9201      	str	r2, [sp, #4]
 801d3b2:	1e5a      	subs	r2, r3, #1
 801d3b4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801d3b8:	bf88      	it	hi
 801d3ba:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801d3be:	4627      	mov	r7, r4
 801d3c0:	bf82      	ittt	hi
 801d3c2:	eb03 0905 	addhi.w	r9, r3, r5
 801d3c6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801d3ca:	60a3      	strhi	r3, [r4, #8]
 801d3cc:	f857 3b1c 	ldr.w	r3, [r7], #28
 801d3d0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801d3d4:	bf98      	it	ls
 801d3d6:	f04f 0900 	movls.w	r9, #0
 801d3da:	6023      	str	r3, [r4, #0]
 801d3dc:	463d      	mov	r5, r7
 801d3de:	f04f 0b00 	mov.w	fp, #0
 801d3e2:	6831      	ldr	r1, [r6, #0]
 801d3e4:	ab03      	add	r3, sp, #12
 801d3e6:	7809      	ldrb	r1, [r1, #0]
 801d3e8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801d3ec:	2202      	movs	r2, #2
 801d3ee:	f7e2 feef 	bl	80001d0 <memchr>
 801d3f2:	b328      	cbz	r0, 801d440 <_scanf_i+0xb8>
 801d3f4:	f1bb 0f01 	cmp.w	fp, #1
 801d3f8:	d159      	bne.n	801d4ae <_scanf_i+0x126>
 801d3fa:	6862      	ldr	r2, [r4, #4]
 801d3fc:	b92a      	cbnz	r2, 801d40a <_scanf_i+0x82>
 801d3fe:	6822      	ldr	r2, [r4, #0]
 801d400:	2108      	movs	r1, #8
 801d402:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801d406:	6061      	str	r1, [r4, #4]
 801d408:	6022      	str	r2, [r4, #0]
 801d40a:	6822      	ldr	r2, [r4, #0]
 801d40c:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801d410:	6022      	str	r2, [r4, #0]
 801d412:	68a2      	ldr	r2, [r4, #8]
 801d414:	1e51      	subs	r1, r2, #1
 801d416:	60a1      	str	r1, [r4, #8]
 801d418:	b192      	cbz	r2, 801d440 <_scanf_i+0xb8>
 801d41a:	6832      	ldr	r2, [r6, #0]
 801d41c:	1c51      	adds	r1, r2, #1
 801d41e:	6031      	str	r1, [r6, #0]
 801d420:	7812      	ldrb	r2, [r2, #0]
 801d422:	f805 2b01 	strb.w	r2, [r5], #1
 801d426:	6872      	ldr	r2, [r6, #4]
 801d428:	3a01      	subs	r2, #1
 801d42a:	2a00      	cmp	r2, #0
 801d42c:	6072      	str	r2, [r6, #4]
 801d42e:	dc07      	bgt.n	801d440 <_scanf_i+0xb8>
 801d430:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801d434:	4631      	mov	r1, r6
 801d436:	4650      	mov	r0, sl
 801d438:	4790      	blx	r2
 801d43a:	2800      	cmp	r0, #0
 801d43c:	f040 8085 	bne.w	801d54a <_scanf_i+0x1c2>
 801d440:	f10b 0b01 	add.w	fp, fp, #1
 801d444:	f1bb 0f03 	cmp.w	fp, #3
 801d448:	d1cb      	bne.n	801d3e2 <_scanf_i+0x5a>
 801d44a:	6863      	ldr	r3, [r4, #4]
 801d44c:	b90b      	cbnz	r3, 801d452 <_scanf_i+0xca>
 801d44e:	230a      	movs	r3, #10
 801d450:	6063      	str	r3, [r4, #4]
 801d452:	6863      	ldr	r3, [r4, #4]
 801d454:	4945      	ldr	r1, [pc, #276]	@ (801d56c <_scanf_i+0x1e4>)
 801d456:	6960      	ldr	r0, [r4, #20]
 801d458:	1ac9      	subs	r1, r1, r3
 801d45a:	f000 f9dd 	bl	801d818 <__sccl>
 801d45e:	f04f 0b00 	mov.w	fp, #0
 801d462:	68a3      	ldr	r3, [r4, #8]
 801d464:	6822      	ldr	r2, [r4, #0]
 801d466:	2b00      	cmp	r3, #0
 801d468:	d03d      	beq.n	801d4e6 <_scanf_i+0x15e>
 801d46a:	6831      	ldr	r1, [r6, #0]
 801d46c:	6960      	ldr	r0, [r4, #20]
 801d46e:	f891 c000 	ldrb.w	ip, [r1]
 801d472:	f810 000c 	ldrb.w	r0, [r0, ip]
 801d476:	2800      	cmp	r0, #0
 801d478:	d035      	beq.n	801d4e6 <_scanf_i+0x15e>
 801d47a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801d47e:	d124      	bne.n	801d4ca <_scanf_i+0x142>
 801d480:	0510      	lsls	r0, r2, #20
 801d482:	d522      	bpl.n	801d4ca <_scanf_i+0x142>
 801d484:	f10b 0b01 	add.w	fp, fp, #1
 801d488:	f1b9 0f00 	cmp.w	r9, #0
 801d48c:	d003      	beq.n	801d496 <_scanf_i+0x10e>
 801d48e:	3301      	adds	r3, #1
 801d490:	f109 39ff 	add.w	r9, r9, #4294967295
 801d494:	60a3      	str	r3, [r4, #8]
 801d496:	6873      	ldr	r3, [r6, #4]
 801d498:	3b01      	subs	r3, #1
 801d49a:	2b00      	cmp	r3, #0
 801d49c:	6073      	str	r3, [r6, #4]
 801d49e:	dd1b      	ble.n	801d4d8 <_scanf_i+0x150>
 801d4a0:	6833      	ldr	r3, [r6, #0]
 801d4a2:	3301      	adds	r3, #1
 801d4a4:	6033      	str	r3, [r6, #0]
 801d4a6:	68a3      	ldr	r3, [r4, #8]
 801d4a8:	3b01      	subs	r3, #1
 801d4aa:	60a3      	str	r3, [r4, #8]
 801d4ac:	e7d9      	b.n	801d462 <_scanf_i+0xda>
 801d4ae:	f1bb 0f02 	cmp.w	fp, #2
 801d4b2:	d1ae      	bne.n	801d412 <_scanf_i+0x8a>
 801d4b4:	6822      	ldr	r2, [r4, #0]
 801d4b6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801d4ba:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801d4be:	d1c4      	bne.n	801d44a <_scanf_i+0xc2>
 801d4c0:	2110      	movs	r1, #16
 801d4c2:	6061      	str	r1, [r4, #4]
 801d4c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801d4c8:	e7a2      	b.n	801d410 <_scanf_i+0x88>
 801d4ca:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801d4ce:	6022      	str	r2, [r4, #0]
 801d4d0:	780b      	ldrb	r3, [r1, #0]
 801d4d2:	f805 3b01 	strb.w	r3, [r5], #1
 801d4d6:	e7de      	b.n	801d496 <_scanf_i+0x10e>
 801d4d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801d4dc:	4631      	mov	r1, r6
 801d4de:	4650      	mov	r0, sl
 801d4e0:	4798      	blx	r3
 801d4e2:	2800      	cmp	r0, #0
 801d4e4:	d0df      	beq.n	801d4a6 <_scanf_i+0x11e>
 801d4e6:	6823      	ldr	r3, [r4, #0]
 801d4e8:	05d9      	lsls	r1, r3, #23
 801d4ea:	d50d      	bpl.n	801d508 <_scanf_i+0x180>
 801d4ec:	42bd      	cmp	r5, r7
 801d4ee:	d909      	bls.n	801d504 <_scanf_i+0x17c>
 801d4f0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801d4f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d4f8:	4632      	mov	r2, r6
 801d4fa:	4650      	mov	r0, sl
 801d4fc:	4798      	blx	r3
 801d4fe:	f105 39ff 	add.w	r9, r5, #4294967295
 801d502:	464d      	mov	r5, r9
 801d504:	42bd      	cmp	r5, r7
 801d506:	d028      	beq.n	801d55a <_scanf_i+0x1d2>
 801d508:	6822      	ldr	r2, [r4, #0]
 801d50a:	f012 0210 	ands.w	r2, r2, #16
 801d50e:	d113      	bne.n	801d538 <_scanf_i+0x1b0>
 801d510:	702a      	strb	r2, [r5, #0]
 801d512:	6863      	ldr	r3, [r4, #4]
 801d514:	9e01      	ldr	r6, [sp, #4]
 801d516:	4639      	mov	r1, r7
 801d518:	4650      	mov	r0, sl
 801d51a:	47b0      	blx	r6
 801d51c:	f8d8 3000 	ldr.w	r3, [r8]
 801d520:	6821      	ldr	r1, [r4, #0]
 801d522:	1d1a      	adds	r2, r3, #4
 801d524:	f8c8 2000 	str.w	r2, [r8]
 801d528:	f011 0f20 	tst.w	r1, #32
 801d52c:	681b      	ldr	r3, [r3, #0]
 801d52e:	d00f      	beq.n	801d550 <_scanf_i+0x1c8>
 801d530:	6018      	str	r0, [r3, #0]
 801d532:	68e3      	ldr	r3, [r4, #12]
 801d534:	3301      	adds	r3, #1
 801d536:	60e3      	str	r3, [r4, #12]
 801d538:	6923      	ldr	r3, [r4, #16]
 801d53a:	1bed      	subs	r5, r5, r7
 801d53c:	445d      	add	r5, fp
 801d53e:	442b      	add	r3, r5
 801d540:	6123      	str	r3, [r4, #16]
 801d542:	2000      	movs	r0, #0
 801d544:	b007      	add	sp, #28
 801d546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d54a:	f04f 0b00 	mov.w	fp, #0
 801d54e:	e7ca      	b.n	801d4e6 <_scanf_i+0x15e>
 801d550:	07ca      	lsls	r2, r1, #31
 801d552:	bf4c      	ite	mi
 801d554:	8018      	strhmi	r0, [r3, #0]
 801d556:	6018      	strpl	r0, [r3, #0]
 801d558:	e7eb      	b.n	801d532 <_scanf_i+0x1aa>
 801d55a:	2001      	movs	r0, #1
 801d55c:	e7f2      	b.n	801d544 <_scanf_i+0x1bc>
 801d55e:	bf00      	nop
 801d560:	080201a4 	.word	0x080201a4
 801d564:	0801cc81 	.word	0x0801cc81
 801d568:	0801e151 	.word	0x0801e151
 801d56c:	080203c4 	.word	0x080203c4

0801d570 <__sflush_r>:
 801d570:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d578:	0716      	lsls	r6, r2, #28
 801d57a:	4605      	mov	r5, r0
 801d57c:	460c      	mov	r4, r1
 801d57e:	d454      	bmi.n	801d62a <__sflush_r+0xba>
 801d580:	684b      	ldr	r3, [r1, #4]
 801d582:	2b00      	cmp	r3, #0
 801d584:	dc02      	bgt.n	801d58c <__sflush_r+0x1c>
 801d586:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d588:	2b00      	cmp	r3, #0
 801d58a:	dd48      	ble.n	801d61e <__sflush_r+0xae>
 801d58c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d58e:	2e00      	cmp	r6, #0
 801d590:	d045      	beq.n	801d61e <__sflush_r+0xae>
 801d592:	2300      	movs	r3, #0
 801d594:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d598:	682f      	ldr	r7, [r5, #0]
 801d59a:	6a21      	ldr	r1, [r4, #32]
 801d59c:	602b      	str	r3, [r5, #0]
 801d59e:	d030      	beq.n	801d602 <__sflush_r+0x92>
 801d5a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d5a2:	89a3      	ldrh	r3, [r4, #12]
 801d5a4:	0759      	lsls	r1, r3, #29
 801d5a6:	d505      	bpl.n	801d5b4 <__sflush_r+0x44>
 801d5a8:	6863      	ldr	r3, [r4, #4]
 801d5aa:	1ad2      	subs	r2, r2, r3
 801d5ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d5ae:	b10b      	cbz	r3, 801d5b4 <__sflush_r+0x44>
 801d5b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d5b2:	1ad2      	subs	r2, r2, r3
 801d5b4:	2300      	movs	r3, #0
 801d5b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d5b8:	6a21      	ldr	r1, [r4, #32]
 801d5ba:	4628      	mov	r0, r5
 801d5bc:	47b0      	blx	r6
 801d5be:	1c43      	adds	r3, r0, #1
 801d5c0:	89a3      	ldrh	r3, [r4, #12]
 801d5c2:	d106      	bne.n	801d5d2 <__sflush_r+0x62>
 801d5c4:	6829      	ldr	r1, [r5, #0]
 801d5c6:	291d      	cmp	r1, #29
 801d5c8:	d82b      	bhi.n	801d622 <__sflush_r+0xb2>
 801d5ca:	4a2a      	ldr	r2, [pc, #168]	@ (801d674 <__sflush_r+0x104>)
 801d5cc:	40ca      	lsrs	r2, r1
 801d5ce:	07d6      	lsls	r6, r2, #31
 801d5d0:	d527      	bpl.n	801d622 <__sflush_r+0xb2>
 801d5d2:	2200      	movs	r2, #0
 801d5d4:	6062      	str	r2, [r4, #4]
 801d5d6:	04d9      	lsls	r1, r3, #19
 801d5d8:	6922      	ldr	r2, [r4, #16]
 801d5da:	6022      	str	r2, [r4, #0]
 801d5dc:	d504      	bpl.n	801d5e8 <__sflush_r+0x78>
 801d5de:	1c42      	adds	r2, r0, #1
 801d5e0:	d101      	bne.n	801d5e6 <__sflush_r+0x76>
 801d5e2:	682b      	ldr	r3, [r5, #0]
 801d5e4:	b903      	cbnz	r3, 801d5e8 <__sflush_r+0x78>
 801d5e6:	6560      	str	r0, [r4, #84]	@ 0x54
 801d5e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d5ea:	602f      	str	r7, [r5, #0]
 801d5ec:	b1b9      	cbz	r1, 801d61e <__sflush_r+0xae>
 801d5ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d5f2:	4299      	cmp	r1, r3
 801d5f4:	d002      	beq.n	801d5fc <__sflush_r+0x8c>
 801d5f6:	4628      	mov	r0, r5
 801d5f8:	f7fd fee6 	bl	801b3c8 <_free_r>
 801d5fc:	2300      	movs	r3, #0
 801d5fe:	6363      	str	r3, [r4, #52]	@ 0x34
 801d600:	e00d      	b.n	801d61e <__sflush_r+0xae>
 801d602:	2301      	movs	r3, #1
 801d604:	4628      	mov	r0, r5
 801d606:	47b0      	blx	r6
 801d608:	4602      	mov	r2, r0
 801d60a:	1c50      	adds	r0, r2, #1
 801d60c:	d1c9      	bne.n	801d5a2 <__sflush_r+0x32>
 801d60e:	682b      	ldr	r3, [r5, #0]
 801d610:	2b00      	cmp	r3, #0
 801d612:	d0c6      	beq.n	801d5a2 <__sflush_r+0x32>
 801d614:	2b1d      	cmp	r3, #29
 801d616:	d001      	beq.n	801d61c <__sflush_r+0xac>
 801d618:	2b16      	cmp	r3, #22
 801d61a:	d11e      	bne.n	801d65a <__sflush_r+0xea>
 801d61c:	602f      	str	r7, [r5, #0]
 801d61e:	2000      	movs	r0, #0
 801d620:	e022      	b.n	801d668 <__sflush_r+0xf8>
 801d622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d626:	b21b      	sxth	r3, r3
 801d628:	e01b      	b.n	801d662 <__sflush_r+0xf2>
 801d62a:	690f      	ldr	r7, [r1, #16]
 801d62c:	2f00      	cmp	r7, #0
 801d62e:	d0f6      	beq.n	801d61e <__sflush_r+0xae>
 801d630:	0793      	lsls	r3, r2, #30
 801d632:	680e      	ldr	r6, [r1, #0]
 801d634:	bf08      	it	eq
 801d636:	694b      	ldreq	r3, [r1, #20]
 801d638:	600f      	str	r7, [r1, #0]
 801d63a:	bf18      	it	ne
 801d63c:	2300      	movne	r3, #0
 801d63e:	eba6 0807 	sub.w	r8, r6, r7
 801d642:	608b      	str	r3, [r1, #8]
 801d644:	f1b8 0f00 	cmp.w	r8, #0
 801d648:	dde9      	ble.n	801d61e <__sflush_r+0xae>
 801d64a:	6a21      	ldr	r1, [r4, #32]
 801d64c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d64e:	4643      	mov	r3, r8
 801d650:	463a      	mov	r2, r7
 801d652:	4628      	mov	r0, r5
 801d654:	47b0      	blx	r6
 801d656:	2800      	cmp	r0, #0
 801d658:	dc08      	bgt.n	801d66c <__sflush_r+0xfc>
 801d65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d65e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d662:	81a3      	strh	r3, [r4, #12]
 801d664:	f04f 30ff 	mov.w	r0, #4294967295
 801d668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d66c:	4407      	add	r7, r0
 801d66e:	eba8 0800 	sub.w	r8, r8, r0
 801d672:	e7e7      	b.n	801d644 <__sflush_r+0xd4>
 801d674:	20400001 	.word	0x20400001

0801d678 <_fflush_r>:
 801d678:	b538      	push	{r3, r4, r5, lr}
 801d67a:	690b      	ldr	r3, [r1, #16]
 801d67c:	4605      	mov	r5, r0
 801d67e:	460c      	mov	r4, r1
 801d680:	b913      	cbnz	r3, 801d688 <_fflush_r+0x10>
 801d682:	2500      	movs	r5, #0
 801d684:	4628      	mov	r0, r5
 801d686:	bd38      	pop	{r3, r4, r5, pc}
 801d688:	b118      	cbz	r0, 801d692 <_fflush_r+0x1a>
 801d68a:	6a03      	ldr	r3, [r0, #32]
 801d68c:	b90b      	cbnz	r3, 801d692 <_fflush_r+0x1a>
 801d68e:	f7fc fd49 	bl	801a124 <__sinit>
 801d692:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d696:	2b00      	cmp	r3, #0
 801d698:	d0f3      	beq.n	801d682 <_fflush_r+0xa>
 801d69a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d69c:	07d0      	lsls	r0, r2, #31
 801d69e:	d404      	bmi.n	801d6aa <_fflush_r+0x32>
 801d6a0:	0599      	lsls	r1, r3, #22
 801d6a2:	d402      	bmi.n	801d6aa <_fflush_r+0x32>
 801d6a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d6a6:	f7fd f808 	bl	801a6ba <__retarget_lock_acquire_recursive>
 801d6aa:	4628      	mov	r0, r5
 801d6ac:	4621      	mov	r1, r4
 801d6ae:	f7ff ff5f 	bl	801d570 <__sflush_r>
 801d6b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d6b4:	07da      	lsls	r2, r3, #31
 801d6b6:	4605      	mov	r5, r0
 801d6b8:	d4e4      	bmi.n	801d684 <_fflush_r+0xc>
 801d6ba:	89a3      	ldrh	r3, [r4, #12]
 801d6bc:	059b      	lsls	r3, r3, #22
 801d6be:	d4e1      	bmi.n	801d684 <_fflush_r+0xc>
 801d6c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d6c2:	f7fc fffb 	bl	801a6bc <__retarget_lock_release_recursive>
 801d6c6:	e7dd      	b.n	801d684 <_fflush_r+0xc>

0801d6c8 <fiprintf>:
 801d6c8:	b40e      	push	{r1, r2, r3}
 801d6ca:	b503      	push	{r0, r1, lr}
 801d6cc:	4601      	mov	r1, r0
 801d6ce:	ab03      	add	r3, sp, #12
 801d6d0:	4805      	ldr	r0, [pc, #20]	@ (801d6e8 <fiprintf+0x20>)
 801d6d2:	f853 2b04 	ldr.w	r2, [r3], #4
 801d6d6:	6800      	ldr	r0, [r0, #0]
 801d6d8:	9301      	str	r3, [sp, #4]
 801d6da:	f7fb ffdb 	bl	8019694 <_vfiprintf_r>
 801d6de:	b002      	add	sp, #8
 801d6e0:	f85d eb04 	ldr.w	lr, [sp], #4
 801d6e4:	b003      	add	sp, #12
 801d6e6:	4770      	bx	lr
 801d6e8:	20000160 	.word	0x20000160

0801d6ec <__swhatbuf_r>:
 801d6ec:	b570      	push	{r4, r5, r6, lr}
 801d6ee:	460c      	mov	r4, r1
 801d6f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d6f4:	2900      	cmp	r1, #0
 801d6f6:	b096      	sub	sp, #88	@ 0x58
 801d6f8:	4615      	mov	r5, r2
 801d6fa:	461e      	mov	r6, r3
 801d6fc:	da0d      	bge.n	801d71a <__swhatbuf_r+0x2e>
 801d6fe:	89a3      	ldrh	r3, [r4, #12]
 801d700:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d704:	f04f 0100 	mov.w	r1, #0
 801d708:	bf14      	ite	ne
 801d70a:	2340      	movne	r3, #64	@ 0x40
 801d70c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d710:	2000      	movs	r0, #0
 801d712:	6031      	str	r1, [r6, #0]
 801d714:	602b      	str	r3, [r5, #0]
 801d716:	b016      	add	sp, #88	@ 0x58
 801d718:	bd70      	pop	{r4, r5, r6, pc}
 801d71a:	466a      	mov	r2, sp
 801d71c:	f000 f902 	bl	801d924 <_fstat_r>
 801d720:	2800      	cmp	r0, #0
 801d722:	dbec      	blt.n	801d6fe <__swhatbuf_r+0x12>
 801d724:	9901      	ldr	r1, [sp, #4]
 801d726:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d72a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d72e:	4259      	negs	r1, r3
 801d730:	4159      	adcs	r1, r3
 801d732:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d736:	e7eb      	b.n	801d710 <__swhatbuf_r+0x24>

0801d738 <__smakebuf_r>:
 801d738:	898b      	ldrh	r3, [r1, #12]
 801d73a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d73c:	079d      	lsls	r5, r3, #30
 801d73e:	4606      	mov	r6, r0
 801d740:	460c      	mov	r4, r1
 801d742:	d507      	bpl.n	801d754 <__smakebuf_r+0x1c>
 801d744:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d748:	6023      	str	r3, [r4, #0]
 801d74a:	6123      	str	r3, [r4, #16]
 801d74c:	2301      	movs	r3, #1
 801d74e:	6163      	str	r3, [r4, #20]
 801d750:	b003      	add	sp, #12
 801d752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d754:	ab01      	add	r3, sp, #4
 801d756:	466a      	mov	r2, sp
 801d758:	f7ff ffc8 	bl	801d6ec <__swhatbuf_r>
 801d75c:	9f00      	ldr	r7, [sp, #0]
 801d75e:	4605      	mov	r5, r0
 801d760:	4639      	mov	r1, r7
 801d762:	4630      	mov	r0, r6
 801d764:	f7fd fea4 	bl	801b4b0 <_malloc_r>
 801d768:	b948      	cbnz	r0, 801d77e <__smakebuf_r+0x46>
 801d76a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d76e:	059a      	lsls	r2, r3, #22
 801d770:	d4ee      	bmi.n	801d750 <__smakebuf_r+0x18>
 801d772:	f023 0303 	bic.w	r3, r3, #3
 801d776:	f043 0302 	orr.w	r3, r3, #2
 801d77a:	81a3      	strh	r3, [r4, #12]
 801d77c:	e7e2      	b.n	801d744 <__smakebuf_r+0xc>
 801d77e:	89a3      	ldrh	r3, [r4, #12]
 801d780:	6020      	str	r0, [r4, #0]
 801d782:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d786:	81a3      	strh	r3, [r4, #12]
 801d788:	9b01      	ldr	r3, [sp, #4]
 801d78a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d78e:	b15b      	cbz	r3, 801d7a8 <__smakebuf_r+0x70>
 801d790:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d794:	4630      	mov	r0, r6
 801d796:	f000 f8d7 	bl	801d948 <_isatty_r>
 801d79a:	b128      	cbz	r0, 801d7a8 <__smakebuf_r+0x70>
 801d79c:	89a3      	ldrh	r3, [r4, #12]
 801d79e:	f023 0303 	bic.w	r3, r3, #3
 801d7a2:	f043 0301 	orr.w	r3, r3, #1
 801d7a6:	81a3      	strh	r3, [r4, #12]
 801d7a8:	89a3      	ldrh	r3, [r4, #12]
 801d7aa:	431d      	orrs	r5, r3
 801d7ac:	81a5      	strh	r5, [r4, #12]
 801d7ae:	e7cf      	b.n	801d750 <__smakebuf_r+0x18>

0801d7b0 <_putc_r>:
 801d7b0:	b570      	push	{r4, r5, r6, lr}
 801d7b2:	460d      	mov	r5, r1
 801d7b4:	4614      	mov	r4, r2
 801d7b6:	4606      	mov	r6, r0
 801d7b8:	b118      	cbz	r0, 801d7c2 <_putc_r+0x12>
 801d7ba:	6a03      	ldr	r3, [r0, #32]
 801d7bc:	b90b      	cbnz	r3, 801d7c2 <_putc_r+0x12>
 801d7be:	f7fc fcb1 	bl	801a124 <__sinit>
 801d7c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d7c4:	07d8      	lsls	r0, r3, #31
 801d7c6:	d405      	bmi.n	801d7d4 <_putc_r+0x24>
 801d7c8:	89a3      	ldrh	r3, [r4, #12]
 801d7ca:	0599      	lsls	r1, r3, #22
 801d7cc:	d402      	bmi.n	801d7d4 <_putc_r+0x24>
 801d7ce:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d7d0:	f7fc ff73 	bl	801a6ba <__retarget_lock_acquire_recursive>
 801d7d4:	68a3      	ldr	r3, [r4, #8]
 801d7d6:	3b01      	subs	r3, #1
 801d7d8:	2b00      	cmp	r3, #0
 801d7da:	60a3      	str	r3, [r4, #8]
 801d7dc:	da05      	bge.n	801d7ea <_putc_r+0x3a>
 801d7de:	69a2      	ldr	r2, [r4, #24]
 801d7e0:	4293      	cmp	r3, r2
 801d7e2:	db12      	blt.n	801d80a <_putc_r+0x5a>
 801d7e4:	b2eb      	uxtb	r3, r5
 801d7e6:	2b0a      	cmp	r3, #10
 801d7e8:	d00f      	beq.n	801d80a <_putc_r+0x5a>
 801d7ea:	6823      	ldr	r3, [r4, #0]
 801d7ec:	1c5a      	adds	r2, r3, #1
 801d7ee:	6022      	str	r2, [r4, #0]
 801d7f0:	701d      	strb	r5, [r3, #0]
 801d7f2:	b2ed      	uxtb	r5, r5
 801d7f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d7f6:	07da      	lsls	r2, r3, #31
 801d7f8:	d405      	bmi.n	801d806 <_putc_r+0x56>
 801d7fa:	89a3      	ldrh	r3, [r4, #12]
 801d7fc:	059b      	lsls	r3, r3, #22
 801d7fe:	d402      	bmi.n	801d806 <_putc_r+0x56>
 801d800:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d802:	f7fc ff5b 	bl	801a6bc <__retarget_lock_release_recursive>
 801d806:	4628      	mov	r0, r5
 801d808:	bd70      	pop	{r4, r5, r6, pc}
 801d80a:	4629      	mov	r1, r5
 801d80c:	4622      	mov	r2, r4
 801d80e:	4630      	mov	r0, r6
 801d810:	f7fc fdc9 	bl	801a3a6 <__swbuf_r>
 801d814:	4605      	mov	r5, r0
 801d816:	e7ed      	b.n	801d7f4 <_putc_r+0x44>

0801d818 <__sccl>:
 801d818:	b570      	push	{r4, r5, r6, lr}
 801d81a:	780b      	ldrb	r3, [r1, #0]
 801d81c:	4604      	mov	r4, r0
 801d81e:	2b5e      	cmp	r3, #94	@ 0x5e
 801d820:	bf0b      	itete	eq
 801d822:	784b      	ldrbeq	r3, [r1, #1]
 801d824:	1c4a      	addne	r2, r1, #1
 801d826:	1c8a      	addeq	r2, r1, #2
 801d828:	2100      	movne	r1, #0
 801d82a:	bf08      	it	eq
 801d82c:	2101      	moveq	r1, #1
 801d82e:	3801      	subs	r0, #1
 801d830:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801d834:	f800 1f01 	strb.w	r1, [r0, #1]!
 801d838:	42a8      	cmp	r0, r5
 801d83a:	d1fb      	bne.n	801d834 <__sccl+0x1c>
 801d83c:	b90b      	cbnz	r3, 801d842 <__sccl+0x2a>
 801d83e:	1e50      	subs	r0, r2, #1
 801d840:	bd70      	pop	{r4, r5, r6, pc}
 801d842:	f081 0101 	eor.w	r1, r1, #1
 801d846:	54e1      	strb	r1, [r4, r3]
 801d848:	4610      	mov	r0, r2
 801d84a:	4602      	mov	r2, r0
 801d84c:	f812 5b01 	ldrb.w	r5, [r2], #1
 801d850:	2d2d      	cmp	r5, #45	@ 0x2d
 801d852:	d005      	beq.n	801d860 <__sccl+0x48>
 801d854:	2d5d      	cmp	r5, #93	@ 0x5d
 801d856:	d016      	beq.n	801d886 <__sccl+0x6e>
 801d858:	2d00      	cmp	r5, #0
 801d85a:	d0f1      	beq.n	801d840 <__sccl+0x28>
 801d85c:	462b      	mov	r3, r5
 801d85e:	e7f2      	b.n	801d846 <__sccl+0x2e>
 801d860:	7846      	ldrb	r6, [r0, #1]
 801d862:	2e5d      	cmp	r6, #93	@ 0x5d
 801d864:	d0fa      	beq.n	801d85c <__sccl+0x44>
 801d866:	42b3      	cmp	r3, r6
 801d868:	dcf8      	bgt.n	801d85c <__sccl+0x44>
 801d86a:	3002      	adds	r0, #2
 801d86c:	461a      	mov	r2, r3
 801d86e:	3201      	adds	r2, #1
 801d870:	4296      	cmp	r6, r2
 801d872:	54a1      	strb	r1, [r4, r2]
 801d874:	dcfb      	bgt.n	801d86e <__sccl+0x56>
 801d876:	1af2      	subs	r2, r6, r3
 801d878:	3a01      	subs	r2, #1
 801d87a:	1c5d      	adds	r5, r3, #1
 801d87c:	42b3      	cmp	r3, r6
 801d87e:	bfa8      	it	ge
 801d880:	2200      	movge	r2, #0
 801d882:	18ab      	adds	r3, r5, r2
 801d884:	e7e1      	b.n	801d84a <__sccl+0x32>
 801d886:	4610      	mov	r0, r2
 801d888:	e7da      	b.n	801d840 <__sccl+0x28>

0801d88a <__submore>:
 801d88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d88e:	460c      	mov	r4, r1
 801d890:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801d892:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d896:	4299      	cmp	r1, r3
 801d898:	d11d      	bne.n	801d8d6 <__submore+0x4c>
 801d89a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801d89e:	f7fd fe07 	bl	801b4b0 <_malloc_r>
 801d8a2:	b918      	cbnz	r0, 801d8ac <__submore+0x22>
 801d8a4:	f04f 30ff 	mov.w	r0, #4294967295
 801d8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d8ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d8b0:	63a3      	str	r3, [r4, #56]	@ 0x38
 801d8b2:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801d8b6:	6360      	str	r0, [r4, #52]	@ 0x34
 801d8b8:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801d8bc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801d8c0:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801d8c4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801d8c8:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801d8cc:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801d8d0:	6020      	str	r0, [r4, #0]
 801d8d2:	2000      	movs	r0, #0
 801d8d4:	e7e8      	b.n	801d8a8 <__submore+0x1e>
 801d8d6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801d8d8:	0077      	lsls	r7, r6, #1
 801d8da:	463a      	mov	r2, r7
 801d8dc:	f7fe fb1e 	bl	801bf1c <_realloc_r>
 801d8e0:	4605      	mov	r5, r0
 801d8e2:	2800      	cmp	r0, #0
 801d8e4:	d0de      	beq.n	801d8a4 <__submore+0x1a>
 801d8e6:	eb00 0806 	add.w	r8, r0, r6
 801d8ea:	4601      	mov	r1, r0
 801d8ec:	4632      	mov	r2, r6
 801d8ee:	4640      	mov	r0, r8
 801d8f0:	f7fc fee5 	bl	801a6be <memcpy>
 801d8f4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801d8f8:	f8c4 8000 	str.w	r8, [r4]
 801d8fc:	e7e9      	b.n	801d8d2 <__submore+0x48>

0801d8fe <strncmp>:
 801d8fe:	b510      	push	{r4, lr}
 801d900:	b16a      	cbz	r2, 801d91e <strncmp+0x20>
 801d902:	3901      	subs	r1, #1
 801d904:	1884      	adds	r4, r0, r2
 801d906:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d90a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801d90e:	429a      	cmp	r2, r3
 801d910:	d103      	bne.n	801d91a <strncmp+0x1c>
 801d912:	42a0      	cmp	r0, r4
 801d914:	d001      	beq.n	801d91a <strncmp+0x1c>
 801d916:	2a00      	cmp	r2, #0
 801d918:	d1f5      	bne.n	801d906 <strncmp+0x8>
 801d91a:	1ad0      	subs	r0, r2, r3
 801d91c:	bd10      	pop	{r4, pc}
 801d91e:	4610      	mov	r0, r2
 801d920:	e7fc      	b.n	801d91c <strncmp+0x1e>
	...

0801d924 <_fstat_r>:
 801d924:	b538      	push	{r3, r4, r5, lr}
 801d926:	4d07      	ldr	r5, [pc, #28]	@ (801d944 <_fstat_r+0x20>)
 801d928:	2300      	movs	r3, #0
 801d92a:	4604      	mov	r4, r0
 801d92c:	4608      	mov	r0, r1
 801d92e:	4611      	mov	r1, r2
 801d930:	602b      	str	r3, [r5, #0]
 801d932:	f7eb fea3 	bl	800967c <_fstat>
 801d936:	1c43      	adds	r3, r0, #1
 801d938:	d102      	bne.n	801d940 <_fstat_r+0x1c>
 801d93a:	682b      	ldr	r3, [r5, #0]
 801d93c:	b103      	cbz	r3, 801d940 <_fstat_r+0x1c>
 801d93e:	6023      	str	r3, [r4, #0]
 801d940:	bd38      	pop	{r3, r4, r5, pc}
 801d942:	bf00      	nop
 801d944:	2000a6a0 	.word	0x2000a6a0

0801d948 <_isatty_r>:
 801d948:	b538      	push	{r3, r4, r5, lr}
 801d94a:	4d06      	ldr	r5, [pc, #24]	@ (801d964 <_isatty_r+0x1c>)
 801d94c:	2300      	movs	r3, #0
 801d94e:	4604      	mov	r4, r0
 801d950:	4608      	mov	r0, r1
 801d952:	602b      	str	r3, [r5, #0]
 801d954:	f7eb fea2 	bl	800969c <_isatty>
 801d958:	1c43      	adds	r3, r0, #1
 801d95a:	d102      	bne.n	801d962 <_isatty_r+0x1a>
 801d95c:	682b      	ldr	r3, [r5, #0]
 801d95e:	b103      	cbz	r3, 801d962 <_isatty_r+0x1a>
 801d960:	6023      	str	r3, [r4, #0]
 801d962:	bd38      	pop	{r3, r4, r5, pc}
 801d964:	2000a6a0 	.word	0x2000a6a0

0801d968 <_sbrk_r>:
 801d968:	b538      	push	{r3, r4, r5, lr}
 801d96a:	4d06      	ldr	r5, [pc, #24]	@ (801d984 <_sbrk_r+0x1c>)
 801d96c:	2300      	movs	r3, #0
 801d96e:	4604      	mov	r4, r0
 801d970:	4608      	mov	r0, r1
 801d972:	602b      	str	r3, [r5, #0]
 801d974:	f7eb feaa 	bl	80096cc <_sbrk>
 801d978:	1c43      	adds	r3, r0, #1
 801d97a:	d102      	bne.n	801d982 <_sbrk_r+0x1a>
 801d97c:	682b      	ldr	r3, [r5, #0]
 801d97e:	b103      	cbz	r3, 801d982 <_sbrk_r+0x1a>
 801d980:	6023      	str	r3, [r4, #0]
 801d982:	bd38      	pop	{r3, r4, r5, pc}
 801d984:	2000a6a0 	.word	0x2000a6a0

0801d988 <nan>:
 801d988:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801d990 <nan+0x8>
 801d98c:	4770      	bx	lr
 801d98e:	bf00      	nop
 801d990:	00000000 	.word	0x00000000
 801d994:	7ff80000 	.word	0x7ff80000

0801d998 <abort>:
 801d998:	b508      	push	{r3, lr}
 801d99a:	2006      	movs	r0, #6
 801d99c:	f000 fc10 	bl	801e1c0 <raise>
 801d9a0:	2001      	movs	r0, #1
 801d9a2:	f7eb fe37 	bl	8009614 <_exit>

0801d9a6 <_calloc_r>:
 801d9a6:	b570      	push	{r4, r5, r6, lr}
 801d9a8:	fba1 5402 	umull	r5, r4, r1, r2
 801d9ac:	b934      	cbnz	r4, 801d9bc <_calloc_r+0x16>
 801d9ae:	4629      	mov	r1, r5
 801d9b0:	f7fd fd7e 	bl	801b4b0 <_malloc_r>
 801d9b4:	4606      	mov	r6, r0
 801d9b6:	b928      	cbnz	r0, 801d9c4 <_calloc_r+0x1e>
 801d9b8:	4630      	mov	r0, r6
 801d9ba:	bd70      	pop	{r4, r5, r6, pc}
 801d9bc:	220c      	movs	r2, #12
 801d9be:	6002      	str	r2, [r0, #0]
 801d9c0:	2600      	movs	r6, #0
 801d9c2:	e7f9      	b.n	801d9b8 <_calloc_r+0x12>
 801d9c4:	462a      	mov	r2, r5
 801d9c6:	4621      	mov	r1, r4
 801d9c8:	f7fc fd9c 	bl	801a504 <memset>
 801d9cc:	e7f4      	b.n	801d9b8 <_calloc_r+0x12>

0801d9ce <rshift>:
 801d9ce:	6903      	ldr	r3, [r0, #16]
 801d9d0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801d9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d9d8:	ea4f 1261 	mov.w	r2, r1, asr #5
 801d9dc:	f100 0414 	add.w	r4, r0, #20
 801d9e0:	dd45      	ble.n	801da6e <rshift+0xa0>
 801d9e2:	f011 011f 	ands.w	r1, r1, #31
 801d9e6:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801d9ea:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801d9ee:	d10c      	bne.n	801da0a <rshift+0x3c>
 801d9f0:	f100 0710 	add.w	r7, r0, #16
 801d9f4:	4629      	mov	r1, r5
 801d9f6:	42b1      	cmp	r1, r6
 801d9f8:	d334      	bcc.n	801da64 <rshift+0x96>
 801d9fa:	1a9b      	subs	r3, r3, r2
 801d9fc:	009b      	lsls	r3, r3, #2
 801d9fe:	1eea      	subs	r2, r5, #3
 801da00:	4296      	cmp	r6, r2
 801da02:	bf38      	it	cc
 801da04:	2300      	movcc	r3, #0
 801da06:	4423      	add	r3, r4
 801da08:	e015      	b.n	801da36 <rshift+0x68>
 801da0a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801da0e:	f1c1 0820 	rsb	r8, r1, #32
 801da12:	40cf      	lsrs	r7, r1
 801da14:	f105 0e04 	add.w	lr, r5, #4
 801da18:	46a1      	mov	r9, r4
 801da1a:	4576      	cmp	r6, lr
 801da1c:	46f4      	mov	ip, lr
 801da1e:	d815      	bhi.n	801da4c <rshift+0x7e>
 801da20:	1a9a      	subs	r2, r3, r2
 801da22:	0092      	lsls	r2, r2, #2
 801da24:	3a04      	subs	r2, #4
 801da26:	3501      	adds	r5, #1
 801da28:	42ae      	cmp	r6, r5
 801da2a:	bf38      	it	cc
 801da2c:	2200      	movcc	r2, #0
 801da2e:	18a3      	adds	r3, r4, r2
 801da30:	50a7      	str	r7, [r4, r2]
 801da32:	b107      	cbz	r7, 801da36 <rshift+0x68>
 801da34:	3304      	adds	r3, #4
 801da36:	1b1a      	subs	r2, r3, r4
 801da38:	42a3      	cmp	r3, r4
 801da3a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801da3e:	bf08      	it	eq
 801da40:	2300      	moveq	r3, #0
 801da42:	6102      	str	r2, [r0, #16]
 801da44:	bf08      	it	eq
 801da46:	6143      	streq	r3, [r0, #20]
 801da48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801da4c:	f8dc c000 	ldr.w	ip, [ip]
 801da50:	fa0c fc08 	lsl.w	ip, ip, r8
 801da54:	ea4c 0707 	orr.w	r7, ip, r7
 801da58:	f849 7b04 	str.w	r7, [r9], #4
 801da5c:	f85e 7b04 	ldr.w	r7, [lr], #4
 801da60:	40cf      	lsrs	r7, r1
 801da62:	e7da      	b.n	801da1a <rshift+0x4c>
 801da64:	f851 cb04 	ldr.w	ip, [r1], #4
 801da68:	f847 cf04 	str.w	ip, [r7, #4]!
 801da6c:	e7c3      	b.n	801d9f6 <rshift+0x28>
 801da6e:	4623      	mov	r3, r4
 801da70:	e7e1      	b.n	801da36 <rshift+0x68>

0801da72 <__hexdig_fun>:
 801da72:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801da76:	2b09      	cmp	r3, #9
 801da78:	d802      	bhi.n	801da80 <__hexdig_fun+0xe>
 801da7a:	3820      	subs	r0, #32
 801da7c:	b2c0      	uxtb	r0, r0
 801da7e:	4770      	bx	lr
 801da80:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801da84:	2b05      	cmp	r3, #5
 801da86:	d801      	bhi.n	801da8c <__hexdig_fun+0x1a>
 801da88:	3847      	subs	r0, #71	@ 0x47
 801da8a:	e7f7      	b.n	801da7c <__hexdig_fun+0xa>
 801da8c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801da90:	2b05      	cmp	r3, #5
 801da92:	d801      	bhi.n	801da98 <__hexdig_fun+0x26>
 801da94:	3827      	subs	r0, #39	@ 0x27
 801da96:	e7f1      	b.n	801da7c <__hexdig_fun+0xa>
 801da98:	2000      	movs	r0, #0
 801da9a:	4770      	bx	lr

0801da9c <__gethex>:
 801da9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801daa0:	b085      	sub	sp, #20
 801daa2:	468a      	mov	sl, r1
 801daa4:	9302      	str	r3, [sp, #8]
 801daa6:	680b      	ldr	r3, [r1, #0]
 801daa8:	9001      	str	r0, [sp, #4]
 801daaa:	4690      	mov	r8, r2
 801daac:	1c9c      	adds	r4, r3, #2
 801daae:	46a1      	mov	r9, r4
 801dab0:	f814 0b01 	ldrb.w	r0, [r4], #1
 801dab4:	2830      	cmp	r0, #48	@ 0x30
 801dab6:	d0fa      	beq.n	801daae <__gethex+0x12>
 801dab8:	eba9 0303 	sub.w	r3, r9, r3
 801dabc:	f1a3 0b02 	sub.w	fp, r3, #2
 801dac0:	f7ff ffd7 	bl	801da72 <__hexdig_fun>
 801dac4:	4605      	mov	r5, r0
 801dac6:	2800      	cmp	r0, #0
 801dac8:	d168      	bne.n	801db9c <__gethex+0x100>
 801daca:	49a0      	ldr	r1, [pc, #640]	@ (801dd4c <__gethex+0x2b0>)
 801dacc:	2201      	movs	r2, #1
 801dace:	4648      	mov	r0, r9
 801dad0:	f7ff ff15 	bl	801d8fe <strncmp>
 801dad4:	4607      	mov	r7, r0
 801dad6:	2800      	cmp	r0, #0
 801dad8:	d167      	bne.n	801dbaa <__gethex+0x10e>
 801dada:	f899 0001 	ldrb.w	r0, [r9, #1]
 801dade:	4626      	mov	r6, r4
 801dae0:	f7ff ffc7 	bl	801da72 <__hexdig_fun>
 801dae4:	2800      	cmp	r0, #0
 801dae6:	d062      	beq.n	801dbae <__gethex+0x112>
 801dae8:	4623      	mov	r3, r4
 801daea:	7818      	ldrb	r0, [r3, #0]
 801daec:	2830      	cmp	r0, #48	@ 0x30
 801daee:	4699      	mov	r9, r3
 801daf0:	f103 0301 	add.w	r3, r3, #1
 801daf4:	d0f9      	beq.n	801daea <__gethex+0x4e>
 801daf6:	f7ff ffbc 	bl	801da72 <__hexdig_fun>
 801dafa:	fab0 f580 	clz	r5, r0
 801dafe:	096d      	lsrs	r5, r5, #5
 801db00:	f04f 0b01 	mov.w	fp, #1
 801db04:	464a      	mov	r2, r9
 801db06:	4616      	mov	r6, r2
 801db08:	3201      	adds	r2, #1
 801db0a:	7830      	ldrb	r0, [r6, #0]
 801db0c:	f7ff ffb1 	bl	801da72 <__hexdig_fun>
 801db10:	2800      	cmp	r0, #0
 801db12:	d1f8      	bne.n	801db06 <__gethex+0x6a>
 801db14:	498d      	ldr	r1, [pc, #564]	@ (801dd4c <__gethex+0x2b0>)
 801db16:	2201      	movs	r2, #1
 801db18:	4630      	mov	r0, r6
 801db1a:	f7ff fef0 	bl	801d8fe <strncmp>
 801db1e:	2800      	cmp	r0, #0
 801db20:	d13f      	bne.n	801dba2 <__gethex+0x106>
 801db22:	b944      	cbnz	r4, 801db36 <__gethex+0x9a>
 801db24:	1c74      	adds	r4, r6, #1
 801db26:	4622      	mov	r2, r4
 801db28:	4616      	mov	r6, r2
 801db2a:	3201      	adds	r2, #1
 801db2c:	7830      	ldrb	r0, [r6, #0]
 801db2e:	f7ff ffa0 	bl	801da72 <__hexdig_fun>
 801db32:	2800      	cmp	r0, #0
 801db34:	d1f8      	bne.n	801db28 <__gethex+0x8c>
 801db36:	1ba4      	subs	r4, r4, r6
 801db38:	00a7      	lsls	r7, r4, #2
 801db3a:	7833      	ldrb	r3, [r6, #0]
 801db3c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801db40:	2b50      	cmp	r3, #80	@ 0x50
 801db42:	d13e      	bne.n	801dbc2 <__gethex+0x126>
 801db44:	7873      	ldrb	r3, [r6, #1]
 801db46:	2b2b      	cmp	r3, #43	@ 0x2b
 801db48:	d033      	beq.n	801dbb2 <__gethex+0x116>
 801db4a:	2b2d      	cmp	r3, #45	@ 0x2d
 801db4c:	d034      	beq.n	801dbb8 <__gethex+0x11c>
 801db4e:	1c71      	adds	r1, r6, #1
 801db50:	2400      	movs	r4, #0
 801db52:	7808      	ldrb	r0, [r1, #0]
 801db54:	f7ff ff8d 	bl	801da72 <__hexdig_fun>
 801db58:	1e43      	subs	r3, r0, #1
 801db5a:	b2db      	uxtb	r3, r3
 801db5c:	2b18      	cmp	r3, #24
 801db5e:	d830      	bhi.n	801dbc2 <__gethex+0x126>
 801db60:	f1a0 0210 	sub.w	r2, r0, #16
 801db64:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801db68:	f7ff ff83 	bl	801da72 <__hexdig_fun>
 801db6c:	f100 3cff 	add.w	ip, r0, #4294967295
 801db70:	fa5f fc8c 	uxtb.w	ip, ip
 801db74:	f1bc 0f18 	cmp.w	ip, #24
 801db78:	f04f 030a 	mov.w	r3, #10
 801db7c:	d91e      	bls.n	801dbbc <__gethex+0x120>
 801db7e:	b104      	cbz	r4, 801db82 <__gethex+0xe6>
 801db80:	4252      	negs	r2, r2
 801db82:	4417      	add	r7, r2
 801db84:	f8ca 1000 	str.w	r1, [sl]
 801db88:	b1ed      	cbz	r5, 801dbc6 <__gethex+0x12a>
 801db8a:	f1bb 0f00 	cmp.w	fp, #0
 801db8e:	bf0c      	ite	eq
 801db90:	2506      	moveq	r5, #6
 801db92:	2500      	movne	r5, #0
 801db94:	4628      	mov	r0, r5
 801db96:	b005      	add	sp, #20
 801db98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db9c:	2500      	movs	r5, #0
 801db9e:	462c      	mov	r4, r5
 801dba0:	e7b0      	b.n	801db04 <__gethex+0x68>
 801dba2:	2c00      	cmp	r4, #0
 801dba4:	d1c7      	bne.n	801db36 <__gethex+0x9a>
 801dba6:	4627      	mov	r7, r4
 801dba8:	e7c7      	b.n	801db3a <__gethex+0x9e>
 801dbaa:	464e      	mov	r6, r9
 801dbac:	462f      	mov	r7, r5
 801dbae:	2501      	movs	r5, #1
 801dbb0:	e7c3      	b.n	801db3a <__gethex+0x9e>
 801dbb2:	2400      	movs	r4, #0
 801dbb4:	1cb1      	adds	r1, r6, #2
 801dbb6:	e7cc      	b.n	801db52 <__gethex+0xb6>
 801dbb8:	2401      	movs	r4, #1
 801dbba:	e7fb      	b.n	801dbb4 <__gethex+0x118>
 801dbbc:	fb03 0002 	mla	r0, r3, r2, r0
 801dbc0:	e7ce      	b.n	801db60 <__gethex+0xc4>
 801dbc2:	4631      	mov	r1, r6
 801dbc4:	e7de      	b.n	801db84 <__gethex+0xe8>
 801dbc6:	eba6 0309 	sub.w	r3, r6, r9
 801dbca:	3b01      	subs	r3, #1
 801dbcc:	4629      	mov	r1, r5
 801dbce:	2b07      	cmp	r3, #7
 801dbd0:	dc0a      	bgt.n	801dbe8 <__gethex+0x14c>
 801dbd2:	9801      	ldr	r0, [sp, #4]
 801dbd4:	f7fd fcf8 	bl	801b5c8 <_Balloc>
 801dbd8:	4604      	mov	r4, r0
 801dbda:	b940      	cbnz	r0, 801dbee <__gethex+0x152>
 801dbdc:	4b5c      	ldr	r3, [pc, #368]	@ (801dd50 <__gethex+0x2b4>)
 801dbde:	4602      	mov	r2, r0
 801dbe0:	21e4      	movs	r1, #228	@ 0xe4
 801dbe2:	485c      	ldr	r0, [pc, #368]	@ (801dd54 <__gethex+0x2b8>)
 801dbe4:	f7fc fd7a 	bl	801a6dc <__assert_func>
 801dbe8:	3101      	adds	r1, #1
 801dbea:	105b      	asrs	r3, r3, #1
 801dbec:	e7ef      	b.n	801dbce <__gethex+0x132>
 801dbee:	f100 0a14 	add.w	sl, r0, #20
 801dbf2:	2300      	movs	r3, #0
 801dbf4:	4655      	mov	r5, sl
 801dbf6:	469b      	mov	fp, r3
 801dbf8:	45b1      	cmp	r9, r6
 801dbfa:	d337      	bcc.n	801dc6c <__gethex+0x1d0>
 801dbfc:	f845 bb04 	str.w	fp, [r5], #4
 801dc00:	eba5 050a 	sub.w	r5, r5, sl
 801dc04:	10ad      	asrs	r5, r5, #2
 801dc06:	6125      	str	r5, [r4, #16]
 801dc08:	4658      	mov	r0, fp
 801dc0a:	f7fd fdcf 	bl	801b7ac <__hi0bits>
 801dc0e:	016d      	lsls	r5, r5, #5
 801dc10:	f8d8 6000 	ldr.w	r6, [r8]
 801dc14:	1a2d      	subs	r5, r5, r0
 801dc16:	42b5      	cmp	r5, r6
 801dc18:	dd54      	ble.n	801dcc4 <__gethex+0x228>
 801dc1a:	1bad      	subs	r5, r5, r6
 801dc1c:	4629      	mov	r1, r5
 801dc1e:	4620      	mov	r0, r4
 801dc20:	f7fe f95b 	bl	801beda <__any_on>
 801dc24:	4681      	mov	r9, r0
 801dc26:	b178      	cbz	r0, 801dc48 <__gethex+0x1ac>
 801dc28:	1e6b      	subs	r3, r5, #1
 801dc2a:	1159      	asrs	r1, r3, #5
 801dc2c:	f003 021f 	and.w	r2, r3, #31
 801dc30:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801dc34:	f04f 0901 	mov.w	r9, #1
 801dc38:	fa09 f202 	lsl.w	r2, r9, r2
 801dc3c:	420a      	tst	r2, r1
 801dc3e:	d003      	beq.n	801dc48 <__gethex+0x1ac>
 801dc40:	454b      	cmp	r3, r9
 801dc42:	dc36      	bgt.n	801dcb2 <__gethex+0x216>
 801dc44:	f04f 0902 	mov.w	r9, #2
 801dc48:	4629      	mov	r1, r5
 801dc4a:	4620      	mov	r0, r4
 801dc4c:	f7ff febf 	bl	801d9ce <rshift>
 801dc50:	442f      	add	r7, r5
 801dc52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801dc56:	42bb      	cmp	r3, r7
 801dc58:	da42      	bge.n	801dce0 <__gethex+0x244>
 801dc5a:	9801      	ldr	r0, [sp, #4]
 801dc5c:	4621      	mov	r1, r4
 801dc5e:	f7fd fcf3 	bl	801b648 <_Bfree>
 801dc62:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dc64:	2300      	movs	r3, #0
 801dc66:	6013      	str	r3, [r2, #0]
 801dc68:	25a3      	movs	r5, #163	@ 0xa3
 801dc6a:	e793      	b.n	801db94 <__gethex+0xf8>
 801dc6c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801dc70:	2a2e      	cmp	r2, #46	@ 0x2e
 801dc72:	d012      	beq.n	801dc9a <__gethex+0x1fe>
 801dc74:	2b20      	cmp	r3, #32
 801dc76:	d104      	bne.n	801dc82 <__gethex+0x1e6>
 801dc78:	f845 bb04 	str.w	fp, [r5], #4
 801dc7c:	f04f 0b00 	mov.w	fp, #0
 801dc80:	465b      	mov	r3, fp
 801dc82:	7830      	ldrb	r0, [r6, #0]
 801dc84:	9303      	str	r3, [sp, #12]
 801dc86:	f7ff fef4 	bl	801da72 <__hexdig_fun>
 801dc8a:	9b03      	ldr	r3, [sp, #12]
 801dc8c:	f000 000f 	and.w	r0, r0, #15
 801dc90:	4098      	lsls	r0, r3
 801dc92:	ea4b 0b00 	orr.w	fp, fp, r0
 801dc96:	3304      	adds	r3, #4
 801dc98:	e7ae      	b.n	801dbf8 <__gethex+0x15c>
 801dc9a:	45b1      	cmp	r9, r6
 801dc9c:	d8ea      	bhi.n	801dc74 <__gethex+0x1d8>
 801dc9e:	492b      	ldr	r1, [pc, #172]	@ (801dd4c <__gethex+0x2b0>)
 801dca0:	9303      	str	r3, [sp, #12]
 801dca2:	2201      	movs	r2, #1
 801dca4:	4630      	mov	r0, r6
 801dca6:	f7ff fe2a 	bl	801d8fe <strncmp>
 801dcaa:	9b03      	ldr	r3, [sp, #12]
 801dcac:	2800      	cmp	r0, #0
 801dcae:	d1e1      	bne.n	801dc74 <__gethex+0x1d8>
 801dcb0:	e7a2      	b.n	801dbf8 <__gethex+0x15c>
 801dcb2:	1ea9      	subs	r1, r5, #2
 801dcb4:	4620      	mov	r0, r4
 801dcb6:	f7fe f910 	bl	801beda <__any_on>
 801dcba:	2800      	cmp	r0, #0
 801dcbc:	d0c2      	beq.n	801dc44 <__gethex+0x1a8>
 801dcbe:	f04f 0903 	mov.w	r9, #3
 801dcc2:	e7c1      	b.n	801dc48 <__gethex+0x1ac>
 801dcc4:	da09      	bge.n	801dcda <__gethex+0x23e>
 801dcc6:	1b75      	subs	r5, r6, r5
 801dcc8:	4621      	mov	r1, r4
 801dcca:	9801      	ldr	r0, [sp, #4]
 801dccc:	462a      	mov	r2, r5
 801dcce:	f7fd fecb 	bl	801ba68 <__lshift>
 801dcd2:	1b7f      	subs	r7, r7, r5
 801dcd4:	4604      	mov	r4, r0
 801dcd6:	f100 0a14 	add.w	sl, r0, #20
 801dcda:	f04f 0900 	mov.w	r9, #0
 801dcde:	e7b8      	b.n	801dc52 <__gethex+0x1b6>
 801dce0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801dce4:	42bd      	cmp	r5, r7
 801dce6:	dd6f      	ble.n	801ddc8 <__gethex+0x32c>
 801dce8:	1bed      	subs	r5, r5, r7
 801dcea:	42ae      	cmp	r6, r5
 801dcec:	dc34      	bgt.n	801dd58 <__gethex+0x2bc>
 801dcee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dcf2:	2b02      	cmp	r3, #2
 801dcf4:	d022      	beq.n	801dd3c <__gethex+0x2a0>
 801dcf6:	2b03      	cmp	r3, #3
 801dcf8:	d024      	beq.n	801dd44 <__gethex+0x2a8>
 801dcfa:	2b01      	cmp	r3, #1
 801dcfc:	d115      	bne.n	801dd2a <__gethex+0x28e>
 801dcfe:	42ae      	cmp	r6, r5
 801dd00:	d113      	bne.n	801dd2a <__gethex+0x28e>
 801dd02:	2e01      	cmp	r6, #1
 801dd04:	d10b      	bne.n	801dd1e <__gethex+0x282>
 801dd06:	9a02      	ldr	r2, [sp, #8]
 801dd08:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801dd0c:	6013      	str	r3, [r2, #0]
 801dd0e:	2301      	movs	r3, #1
 801dd10:	6123      	str	r3, [r4, #16]
 801dd12:	f8ca 3000 	str.w	r3, [sl]
 801dd16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801dd18:	2562      	movs	r5, #98	@ 0x62
 801dd1a:	601c      	str	r4, [r3, #0]
 801dd1c:	e73a      	b.n	801db94 <__gethex+0xf8>
 801dd1e:	1e71      	subs	r1, r6, #1
 801dd20:	4620      	mov	r0, r4
 801dd22:	f7fe f8da 	bl	801beda <__any_on>
 801dd26:	2800      	cmp	r0, #0
 801dd28:	d1ed      	bne.n	801dd06 <__gethex+0x26a>
 801dd2a:	9801      	ldr	r0, [sp, #4]
 801dd2c:	4621      	mov	r1, r4
 801dd2e:	f7fd fc8b 	bl	801b648 <_Bfree>
 801dd32:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dd34:	2300      	movs	r3, #0
 801dd36:	6013      	str	r3, [r2, #0]
 801dd38:	2550      	movs	r5, #80	@ 0x50
 801dd3a:	e72b      	b.n	801db94 <__gethex+0xf8>
 801dd3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd3e:	2b00      	cmp	r3, #0
 801dd40:	d1f3      	bne.n	801dd2a <__gethex+0x28e>
 801dd42:	e7e0      	b.n	801dd06 <__gethex+0x26a>
 801dd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801dd46:	2b00      	cmp	r3, #0
 801dd48:	d1dd      	bne.n	801dd06 <__gethex+0x26a>
 801dd4a:	e7ee      	b.n	801dd2a <__gethex+0x28e>
 801dd4c:	080203b2 	.word	0x080203b2
 801dd50:	08020348 	.word	0x08020348
 801dd54:	080203d7 	.word	0x080203d7
 801dd58:	1e6f      	subs	r7, r5, #1
 801dd5a:	f1b9 0f00 	cmp.w	r9, #0
 801dd5e:	d130      	bne.n	801ddc2 <__gethex+0x326>
 801dd60:	b127      	cbz	r7, 801dd6c <__gethex+0x2d0>
 801dd62:	4639      	mov	r1, r7
 801dd64:	4620      	mov	r0, r4
 801dd66:	f7fe f8b8 	bl	801beda <__any_on>
 801dd6a:	4681      	mov	r9, r0
 801dd6c:	117a      	asrs	r2, r7, #5
 801dd6e:	2301      	movs	r3, #1
 801dd70:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801dd74:	f007 071f 	and.w	r7, r7, #31
 801dd78:	40bb      	lsls	r3, r7
 801dd7a:	4213      	tst	r3, r2
 801dd7c:	4629      	mov	r1, r5
 801dd7e:	4620      	mov	r0, r4
 801dd80:	bf18      	it	ne
 801dd82:	f049 0902 	orrne.w	r9, r9, #2
 801dd86:	f7ff fe22 	bl	801d9ce <rshift>
 801dd8a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801dd8e:	1b76      	subs	r6, r6, r5
 801dd90:	2502      	movs	r5, #2
 801dd92:	f1b9 0f00 	cmp.w	r9, #0
 801dd96:	d047      	beq.n	801de28 <__gethex+0x38c>
 801dd98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801dd9c:	2b02      	cmp	r3, #2
 801dd9e:	d015      	beq.n	801ddcc <__gethex+0x330>
 801dda0:	2b03      	cmp	r3, #3
 801dda2:	d017      	beq.n	801ddd4 <__gethex+0x338>
 801dda4:	2b01      	cmp	r3, #1
 801dda6:	d109      	bne.n	801ddbc <__gethex+0x320>
 801dda8:	f019 0f02 	tst.w	r9, #2
 801ddac:	d006      	beq.n	801ddbc <__gethex+0x320>
 801ddae:	f8da 3000 	ldr.w	r3, [sl]
 801ddb2:	ea49 0903 	orr.w	r9, r9, r3
 801ddb6:	f019 0f01 	tst.w	r9, #1
 801ddba:	d10e      	bne.n	801ddda <__gethex+0x33e>
 801ddbc:	f045 0510 	orr.w	r5, r5, #16
 801ddc0:	e032      	b.n	801de28 <__gethex+0x38c>
 801ddc2:	f04f 0901 	mov.w	r9, #1
 801ddc6:	e7d1      	b.n	801dd6c <__gethex+0x2d0>
 801ddc8:	2501      	movs	r5, #1
 801ddca:	e7e2      	b.n	801dd92 <__gethex+0x2f6>
 801ddcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ddce:	f1c3 0301 	rsb	r3, r3, #1
 801ddd2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ddd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	d0f0      	beq.n	801ddbc <__gethex+0x320>
 801ddda:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801ddde:	f104 0314 	add.w	r3, r4, #20
 801dde2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801dde6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ddea:	f04f 0c00 	mov.w	ip, #0
 801ddee:	4618      	mov	r0, r3
 801ddf0:	f853 2b04 	ldr.w	r2, [r3], #4
 801ddf4:	f1b2 3fff 	cmp.w	r2, #4294967295
 801ddf8:	d01b      	beq.n	801de32 <__gethex+0x396>
 801ddfa:	3201      	adds	r2, #1
 801ddfc:	6002      	str	r2, [r0, #0]
 801ddfe:	2d02      	cmp	r5, #2
 801de00:	f104 0314 	add.w	r3, r4, #20
 801de04:	d13c      	bne.n	801de80 <__gethex+0x3e4>
 801de06:	f8d8 2000 	ldr.w	r2, [r8]
 801de0a:	3a01      	subs	r2, #1
 801de0c:	42b2      	cmp	r2, r6
 801de0e:	d109      	bne.n	801de24 <__gethex+0x388>
 801de10:	1171      	asrs	r1, r6, #5
 801de12:	2201      	movs	r2, #1
 801de14:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801de18:	f006 061f 	and.w	r6, r6, #31
 801de1c:	fa02 f606 	lsl.w	r6, r2, r6
 801de20:	421e      	tst	r6, r3
 801de22:	d13a      	bne.n	801de9a <__gethex+0x3fe>
 801de24:	f045 0520 	orr.w	r5, r5, #32
 801de28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801de2a:	601c      	str	r4, [r3, #0]
 801de2c:	9b02      	ldr	r3, [sp, #8]
 801de2e:	601f      	str	r7, [r3, #0]
 801de30:	e6b0      	b.n	801db94 <__gethex+0xf8>
 801de32:	4299      	cmp	r1, r3
 801de34:	f843 cc04 	str.w	ip, [r3, #-4]
 801de38:	d8d9      	bhi.n	801ddee <__gethex+0x352>
 801de3a:	68a3      	ldr	r3, [r4, #8]
 801de3c:	459b      	cmp	fp, r3
 801de3e:	db17      	blt.n	801de70 <__gethex+0x3d4>
 801de40:	6861      	ldr	r1, [r4, #4]
 801de42:	9801      	ldr	r0, [sp, #4]
 801de44:	3101      	adds	r1, #1
 801de46:	f7fd fbbf 	bl	801b5c8 <_Balloc>
 801de4a:	4681      	mov	r9, r0
 801de4c:	b918      	cbnz	r0, 801de56 <__gethex+0x3ba>
 801de4e:	4b1a      	ldr	r3, [pc, #104]	@ (801deb8 <__gethex+0x41c>)
 801de50:	4602      	mov	r2, r0
 801de52:	2184      	movs	r1, #132	@ 0x84
 801de54:	e6c5      	b.n	801dbe2 <__gethex+0x146>
 801de56:	6922      	ldr	r2, [r4, #16]
 801de58:	3202      	adds	r2, #2
 801de5a:	f104 010c 	add.w	r1, r4, #12
 801de5e:	0092      	lsls	r2, r2, #2
 801de60:	300c      	adds	r0, #12
 801de62:	f7fc fc2c 	bl	801a6be <memcpy>
 801de66:	4621      	mov	r1, r4
 801de68:	9801      	ldr	r0, [sp, #4]
 801de6a:	f7fd fbed 	bl	801b648 <_Bfree>
 801de6e:	464c      	mov	r4, r9
 801de70:	6923      	ldr	r3, [r4, #16]
 801de72:	1c5a      	adds	r2, r3, #1
 801de74:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801de78:	6122      	str	r2, [r4, #16]
 801de7a:	2201      	movs	r2, #1
 801de7c:	615a      	str	r2, [r3, #20]
 801de7e:	e7be      	b.n	801ddfe <__gethex+0x362>
 801de80:	6922      	ldr	r2, [r4, #16]
 801de82:	455a      	cmp	r2, fp
 801de84:	dd0b      	ble.n	801de9e <__gethex+0x402>
 801de86:	2101      	movs	r1, #1
 801de88:	4620      	mov	r0, r4
 801de8a:	f7ff fda0 	bl	801d9ce <rshift>
 801de8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801de92:	3701      	adds	r7, #1
 801de94:	42bb      	cmp	r3, r7
 801de96:	f6ff aee0 	blt.w	801dc5a <__gethex+0x1be>
 801de9a:	2501      	movs	r5, #1
 801de9c:	e7c2      	b.n	801de24 <__gethex+0x388>
 801de9e:	f016 061f 	ands.w	r6, r6, #31
 801dea2:	d0fa      	beq.n	801de9a <__gethex+0x3fe>
 801dea4:	4453      	add	r3, sl
 801dea6:	f1c6 0620 	rsb	r6, r6, #32
 801deaa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801deae:	f7fd fc7d 	bl	801b7ac <__hi0bits>
 801deb2:	42b0      	cmp	r0, r6
 801deb4:	dbe7      	blt.n	801de86 <__gethex+0x3ea>
 801deb6:	e7f0      	b.n	801de9a <__gethex+0x3fe>
 801deb8:	08020348 	.word	0x08020348

0801debc <L_shift>:
 801debc:	f1c2 0208 	rsb	r2, r2, #8
 801dec0:	0092      	lsls	r2, r2, #2
 801dec2:	b570      	push	{r4, r5, r6, lr}
 801dec4:	f1c2 0620 	rsb	r6, r2, #32
 801dec8:	6843      	ldr	r3, [r0, #4]
 801deca:	6804      	ldr	r4, [r0, #0]
 801decc:	fa03 f506 	lsl.w	r5, r3, r6
 801ded0:	432c      	orrs	r4, r5
 801ded2:	40d3      	lsrs	r3, r2
 801ded4:	6004      	str	r4, [r0, #0]
 801ded6:	f840 3f04 	str.w	r3, [r0, #4]!
 801deda:	4288      	cmp	r0, r1
 801dedc:	d3f4      	bcc.n	801dec8 <L_shift+0xc>
 801dede:	bd70      	pop	{r4, r5, r6, pc}

0801dee0 <__match>:
 801dee0:	b530      	push	{r4, r5, lr}
 801dee2:	6803      	ldr	r3, [r0, #0]
 801dee4:	3301      	adds	r3, #1
 801dee6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801deea:	b914      	cbnz	r4, 801def2 <__match+0x12>
 801deec:	6003      	str	r3, [r0, #0]
 801deee:	2001      	movs	r0, #1
 801def0:	bd30      	pop	{r4, r5, pc}
 801def2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801def6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801defa:	2d19      	cmp	r5, #25
 801defc:	bf98      	it	ls
 801defe:	3220      	addls	r2, #32
 801df00:	42a2      	cmp	r2, r4
 801df02:	d0f0      	beq.n	801dee6 <__match+0x6>
 801df04:	2000      	movs	r0, #0
 801df06:	e7f3      	b.n	801def0 <__match+0x10>

0801df08 <__hexnan>:
 801df08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df0c:	680b      	ldr	r3, [r1, #0]
 801df0e:	6801      	ldr	r1, [r0, #0]
 801df10:	115e      	asrs	r6, r3, #5
 801df12:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801df16:	f013 031f 	ands.w	r3, r3, #31
 801df1a:	b087      	sub	sp, #28
 801df1c:	bf18      	it	ne
 801df1e:	3604      	addne	r6, #4
 801df20:	2500      	movs	r5, #0
 801df22:	1f37      	subs	r7, r6, #4
 801df24:	4682      	mov	sl, r0
 801df26:	4690      	mov	r8, r2
 801df28:	9301      	str	r3, [sp, #4]
 801df2a:	f846 5c04 	str.w	r5, [r6, #-4]
 801df2e:	46b9      	mov	r9, r7
 801df30:	463c      	mov	r4, r7
 801df32:	9502      	str	r5, [sp, #8]
 801df34:	46ab      	mov	fp, r5
 801df36:	784a      	ldrb	r2, [r1, #1]
 801df38:	1c4b      	adds	r3, r1, #1
 801df3a:	9303      	str	r3, [sp, #12]
 801df3c:	b342      	cbz	r2, 801df90 <__hexnan+0x88>
 801df3e:	4610      	mov	r0, r2
 801df40:	9105      	str	r1, [sp, #20]
 801df42:	9204      	str	r2, [sp, #16]
 801df44:	f7ff fd95 	bl	801da72 <__hexdig_fun>
 801df48:	2800      	cmp	r0, #0
 801df4a:	d151      	bne.n	801dff0 <__hexnan+0xe8>
 801df4c:	9a04      	ldr	r2, [sp, #16]
 801df4e:	9905      	ldr	r1, [sp, #20]
 801df50:	2a20      	cmp	r2, #32
 801df52:	d818      	bhi.n	801df86 <__hexnan+0x7e>
 801df54:	9b02      	ldr	r3, [sp, #8]
 801df56:	459b      	cmp	fp, r3
 801df58:	dd13      	ble.n	801df82 <__hexnan+0x7a>
 801df5a:	454c      	cmp	r4, r9
 801df5c:	d206      	bcs.n	801df6c <__hexnan+0x64>
 801df5e:	2d07      	cmp	r5, #7
 801df60:	dc04      	bgt.n	801df6c <__hexnan+0x64>
 801df62:	462a      	mov	r2, r5
 801df64:	4649      	mov	r1, r9
 801df66:	4620      	mov	r0, r4
 801df68:	f7ff ffa8 	bl	801debc <L_shift>
 801df6c:	4544      	cmp	r4, r8
 801df6e:	d952      	bls.n	801e016 <__hexnan+0x10e>
 801df70:	2300      	movs	r3, #0
 801df72:	f1a4 0904 	sub.w	r9, r4, #4
 801df76:	f844 3c04 	str.w	r3, [r4, #-4]
 801df7a:	f8cd b008 	str.w	fp, [sp, #8]
 801df7e:	464c      	mov	r4, r9
 801df80:	461d      	mov	r5, r3
 801df82:	9903      	ldr	r1, [sp, #12]
 801df84:	e7d7      	b.n	801df36 <__hexnan+0x2e>
 801df86:	2a29      	cmp	r2, #41	@ 0x29
 801df88:	d157      	bne.n	801e03a <__hexnan+0x132>
 801df8a:	3102      	adds	r1, #2
 801df8c:	f8ca 1000 	str.w	r1, [sl]
 801df90:	f1bb 0f00 	cmp.w	fp, #0
 801df94:	d051      	beq.n	801e03a <__hexnan+0x132>
 801df96:	454c      	cmp	r4, r9
 801df98:	d206      	bcs.n	801dfa8 <__hexnan+0xa0>
 801df9a:	2d07      	cmp	r5, #7
 801df9c:	dc04      	bgt.n	801dfa8 <__hexnan+0xa0>
 801df9e:	462a      	mov	r2, r5
 801dfa0:	4649      	mov	r1, r9
 801dfa2:	4620      	mov	r0, r4
 801dfa4:	f7ff ff8a 	bl	801debc <L_shift>
 801dfa8:	4544      	cmp	r4, r8
 801dfaa:	d936      	bls.n	801e01a <__hexnan+0x112>
 801dfac:	f1a8 0204 	sub.w	r2, r8, #4
 801dfb0:	4623      	mov	r3, r4
 801dfb2:	f853 1b04 	ldr.w	r1, [r3], #4
 801dfb6:	f842 1f04 	str.w	r1, [r2, #4]!
 801dfba:	429f      	cmp	r7, r3
 801dfbc:	d2f9      	bcs.n	801dfb2 <__hexnan+0xaa>
 801dfbe:	1b3b      	subs	r3, r7, r4
 801dfc0:	f023 0303 	bic.w	r3, r3, #3
 801dfc4:	3304      	adds	r3, #4
 801dfc6:	3401      	adds	r4, #1
 801dfc8:	3e03      	subs	r6, #3
 801dfca:	42b4      	cmp	r4, r6
 801dfcc:	bf88      	it	hi
 801dfce:	2304      	movhi	r3, #4
 801dfd0:	4443      	add	r3, r8
 801dfd2:	2200      	movs	r2, #0
 801dfd4:	f843 2b04 	str.w	r2, [r3], #4
 801dfd8:	429f      	cmp	r7, r3
 801dfda:	d2fb      	bcs.n	801dfd4 <__hexnan+0xcc>
 801dfdc:	683b      	ldr	r3, [r7, #0]
 801dfde:	b91b      	cbnz	r3, 801dfe8 <__hexnan+0xe0>
 801dfe0:	4547      	cmp	r7, r8
 801dfe2:	d128      	bne.n	801e036 <__hexnan+0x12e>
 801dfe4:	2301      	movs	r3, #1
 801dfe6:	603b      	str	r3, [r7, #0]
 801dfe8:	2005      	movs	r0, #5
 801dfea:	b007      	add	sp, #28
 801dfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dff0:	3501      	adds	r5, #1
 801dff2:	2d08      	cmp	r5, #8
 801dff4:	f10b 0b01 	add.w	fp, fp, #1
 801dff8:	dd06      	ble.n	801e008 <__hexnan+0x100>
 801dffa:	4544      	cmp	r4, r8
 801dffc:	d9c1      	bls.n	801df82 <__hexnan+0x7a>
 801dffe:	2300      	movs	r3, #0
 801e000:	f844 3c04 	str.w	r3, [r4, #-4]
 801e004:	2501      	movs	r5, #1
 801e006:	3c04      	subs	r4, #4
 801e008:	6822      	ldr	r2, [r4, #0]
 801e00a:	f000 000f 	and.w	r0, r0, #15
 801e00e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801e012:	6020      	str	r0, [r4, #0]
 801e014:	e7b5      	b.n	801df82 <__hexnan+0x7a>
 801e016:	2508      	movs	r5, #8
 801e018:	e7b3      	b.n	801df82 <__hexnan+0x7a>
 801e01a:	9b01      	ldr	r3, [sp, #4]
 801e01c:	2b00      	cmp	r3, #0
 801e01e:	d0dd      	beq.n	801dfdc <__hexnan+0xd4>
 801e020:	f1c3 0320 	rsb	r3, r3, #32
 801e024:	f04f 32ff 	mov.w	r2, #4294967295
 801e028:	40da      	lsrs	r2, r3
 801e02a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801e02e:	4013      	ands	r3, r2
 801e030:	f846 3c04 	str.w	r3, [r6, #-4]
 801e034:	e7d2      	b.n	801dfdc <__hexnan+0xd4>
 801e036:	3f04      	subs	r7, #4
 801e038:	e7d0      	b.n	801dfdc <__hexnan+0xd4>
 801e03a:	2004      	movs	r0, #4
 801e03c:	e7d5      	b.n	801dfea <__hexnan+0xe2>

0801e03e <__ascii_mbtowc>:
 801e03e:	b082      	sub	sp, #8
 801e040:	b901      	cbnz	r1, 801e044 <__ascii_mbtowc+0x6>
 801e042:	a901      	add	r1, sp, #4
 801e044:	b142      	cbz	r2, 801e058 <__ascii_mbtowc+0x1a>
 801e046:	b14b      	cbz	r3, 801e05c <__ascii_mbtowc+0x1e>
 801e048:	7813      	ldrb	r3, [r2, #0]
 801e04a:	600b      	str	r3, [r1, #0]
 801e04c:	7812      	ldrb	r2, [r2, #0]
 801e04e:	1e10      	subs	r0, r2, #0
 801e050:	bf18      	it	ne
 801e052:	2001      	movne	r0, #1
 801e054:	b002      	add	sp, #8
 801e056:	4770      	bx	lr
 801e058:	4610      	mov	r0, r2
 801e05a:	e7fb      	b.n	801e054 <__ascii_mbtowc+0x16>
 801e05c:	f06f 0001 	mvn.w	r0, #1
 801e060:	e7f8      	b.n	801e054 <__ascii_mbtowc+0x16>

0801e062 <_malloc_usable_size_r>:
 801e062:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e066:	1f18      	subs	r0, r3, #4
 801e068:	2b00      	cmp	r3, #0
 801e06a:	bfbc      	itt	lt
 801e06c:	580b      	ldrlt	r3, [r1, r0]
 801e06e:	18c0      	addlt	r0, r0, r3
 801e070:	4770      	bx	lr
	...

0801e074 <_strtoul_l.isra.0>:
 801e074:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e078:	4e34      	ldr	r6, [pc, #208]	@ (801e14c <_strtoul_l.isra.0+0xd8>)
 801e07a:	4686      	mov	lr, r0
 801e07c:	460d      	mov	r5, r1
 801e07e:	4628      	mov	r0, r5
 801e080:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e084:	5d37      	ldrb	r7, [r6, r4]
 801e086:	f017 0708 	ands.w	r7, r7, #8
 801e08a:	d1f8      	bne.n	801e07e <_strtoul_l.isra.0+0xa>
 801e08c:	2c2d      	cmp	r4, #45	@ 0x2d
 801e08e:	d110      	bne.n	801e0b2 <_strtoul_l.isra.0+0x3e>
 801e090:	782c      	ldrb	r4, [r5, #0]
 801e092:	2701      	movs	r7, #1
 801e094:	1c85      	adds	r5, r0, #2
 801e096:	f033 0010 	bics.w	r0, r3, #16
 801e09a:	d115      	bne.n	801e0c8 <_strtoul_l.isra.0+0x54>
 801e09c:	2c30      	cmp	r4, #48	@ 0x30
 801e09e:	d10d      	bne.n	801e0bc <_strtoul_l.isra.0+0x48>
 801e0a0:	7828      	ldrb	r0, [r5, #0]
 801e0a2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801e0a6:	2858      	cmp	r0, #88	@ 0x58
 801e0a8:	d108      	bne.n	801e0bc <_strtoul_l.isra.0+0x48>
 801e0aa:	786c      	ldrb	r4, [r5, #1]
 801e0ac:	3502      	adds	r5, #2
 801e0ae:	2310      	movs	r3, #16
 801e0b0:	e00a      	b.n	801e0c8 <_strtoul_l.isra.0+0x54>
 801e0b2:	2c2b      	cmp	r4, #43	@ 0x2b
 801e0b4:	bf04      	itt	eq
 801e0b6:	782c      	ldrbeq	r4, [r5, #0]
 801e0b8:	1c85      	addeq	r5, r0, #2
 801e0ba:	e7ec      	b.n	801e096 <_strtoul_l.isra.0+0x22>
 801e0bc:	2b00      	cmp	r3, #0
 801e0be:	d1f6      	bne.n	801e0ae <_strtoul_l.isra.0+0x3a>
 801e0c0:	2c30      	cmp	r4, #48	@ 0x30
 801e0c2:	bf14      	ite	ne
 801e0c4:	230a      	movne	r3, #10
 801e0c6:	2308      	moveq	r3, #8
 801e0c8:	f04f 38ff 	mov.w	r8, #4294967295
 801e0cc:	2600      	movs	r6, #0
 801e0ce:	fbb8 f8f3 	udiv	r8, r8, r3
 801e0d2:	fb03 f908 	mul.w	r9, r3, r8
 801e0d6:	ea6f 0909 	mvn.w	r9, r9
 801e0da:	4630      	mov	r0, r6
 801e0dc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801e0e0:	f1bc 0f09 	cmp.w	ip, #9
 801e0e4:	d810      	bhi.n	801e108 <_strtoul_l.isra.0+0x94>
 801e0e6:	4664      	mov	r4, ip
 801e0e8:	42a3      	cmp	r3, r4
 801e0ea:	dd1e      	ble.n	801e12a <_strtoul_l.isra.0+0xb6>
 801e0ec:	f1b6 3fff 	cmp.w	r6, #4294967295
 801e0f0:	d007      	beq.n	801e102 <_strtoul_l.isra.0+0x8e>
 801e0f2:	4580      	cmp	r8, r0
 801e0f4:	d316      	bcc.n	801e124 <_strtoul_l.isra.0+0xb0>
 801e0f6:	d101      	bne.n	801e0fc <_strtoul_l.isra.0+0x88>
 801e0f8:	45a1      	cmp	r9, r4
 801e0fa:	db13      	blt.n	801e124 <_strtoul_l.isra.0+0xb0>
 801e0fc:	fb00 4003 	mla	r0, r0, r3, r4
 801e100:	2601      	movs	r6, #1
 801e102:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e106:	e7e9      	b.n	801e0dc <_strtoul_l.isra.0+0x68>
 801e108:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801e10c:	f1bc 0f19 	cmp.w	ip, #25
 801e110:	d801      	bhi.n	801e116 <_strtoul_l.isra.0+0xa2>
 801e112:	3c37      	subs	r4, #55	@ 0x37
 801e114:	e7e8      	b.n	801e0e8 <_strtoul_l.isra.0+0x74>
 801e116:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801e11a:	f1bc 0f19 	cmp.w	ip, #25
 801e11e:	d804      	bhi.n	801e12a <_strtoul_l.isra.0+0xb6>
 801e120:	3c57      	subs	r4, #87	@ 0x57
 801e122:	e7e1      	b.n	801e0e8 <_strtoul_l.isra.0+0x74>
 801e124:	f04f 36ff 	mov.w	r6, #4294967295
 801e128:	e7eb      	b.n	801e102 <_strtoul_l.isra.0+0x8e>
 801e12a:	1c73      	adds	r3, r6, #1
 801e12c:	d106      	bne.n	801e13c <_strtoul_l.isra.0+0xc8>
 801e12e:	2322      	movs	r3, #34	@ 0x22
 801e130:	f8ce 3000 	str.w	r3, [lr]
 801e134:	4630      	mov	r0, r6
 801e136:	b932      	cbnz	r2, 801e146 <_strtoul_l.isra.0+0xd2>
 801e138:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e13c:	b107      	cbz	r7, 801e140 <_strtoul_l.isra.0+0xcc>
 801e13e:	4240      	negs	r0, r0
 801e140:	2a00      	cmp	r2, #0
 801e142:	d0f9      	beq.n	801e138 <_strtoul_l.isra.0+0xc4>
 801e144:	b106      	cbz	r6, 801e148 <_strtoul_l.isra.0+0xd4>
 801e146:	1e69      	subs	r1, r5, #1
 801e148:	6011      	str	r1, [r2, #0]
 801e14a:	e7f5      	b.n	801e138 <_strtoul_l.isra.0+0xc4>
 801e14c:	080209a9 	.word	0x080209a9

0801e150 <_strtoul_r>:
 801e150:	f7ff bf90 	b.w	801e074 <_strtoul_l.isra.0>

0801e154 <__ascii_wctomb>:
 801e154:	4603      	mov	r3, r0
 801e156:	4608      	mov	r0, r1
 801e158:	b141      	cbz	r1, 801e16c <__ascii_wctomb+0x18>
 801e15a:	2aff      	cmp	r2, #255	@ 0xff
 801e15c:	d904      	bls.n	801e168 <__ascii_wctomb+0x14>
 801e15e:	228a      	movs	r2, #138	@ 0x8a
 801e160:	601a      	str	r2, [r3, #0]
 801e162:	f04f 30ff 	mov.w	r0, #4294967295
 801e166:	4770      	bx	lr
 801e168:	700a      	strb	r2, [r1, #0]
 801e16a:	2001      	movs	r0, #1
 801e16c:	4770      	bx	lr

0801e16e <_raise_r>:
 801e16e:	291f      	cmp	r1, #31
 801e170:	b538      	push	{r3, r4, r5, lr}
 801e172:	4605      	mov	r5, r0
 801e174:	460c      	mov	r4, r1
 801e176:	d904      	bls.n	801e182 <_raise_r+0x14>
 801e178:	2316      	movs	r3, #22
 801e17a:	6003      	str	r3, [r0, #0]
 801e17c:	f04f 30ff 	mov.w	r0, #4294967295
 801e180:	bd38      	pop	{r3, r4, r5, pc}
 801e182:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e184:	b112      	cbz	r2, 801e18c <_raise_r+0x1e>
 801e186:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e18a:	b94b      	cbnz	r3, 801e1a0 <_raise_r+0x32>
 801e18c:	4628      	mov	r0, r5
 801e18e:	f000 f831 	bl	801e1f4 <_getpid_r>
 801e192:	4622      	mov	r2, r4
 801e194:	4601      	mov	r1, r0
 801e196:	4628      	mov	r0, r5
 801e198:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e19c:	f000 b818 	b.w	801e1d0 <_kill_r>
 801e1a0:	2b01      	cmp	r3, #1
 801e1a2:	d00a      	beq.n	801e1ba <_raise_r+0x4c>
 801e1a4:	1c59      	adds	r1, r3, #1
 801e1a6:	d103      	bne.n	801e1b0 <_raise_r+0x42>
 801e1a8:	2316      	movs	r3, #22
 801e1aa:	6003      	str	r3, [r0, #0]
 801e1ac:	2001      	movs	r0, #1
 801e1ae:	e7e7      	b.n	801e180 <_raise_r+0x12>
 801e1b0:	2100      	movs	r1, #0
 801e1b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e1b6:	4620      	mov	r0, r4
 801e1b8:	4798      	blx	r3
 801e1ba:	2000      	movs	r0, #0
 801e1bc:	e7e0      	b.n	801e180 <_raise_r+0x12>
	...

0801e1c0 <raise>:
 801e1c0:	4b02      	ldr	r3, [pc, #8]	@ (801e1cc <raise+0xc>)
 801e1c2:	4601      	mov	r1, r0
 801e1c4:	6818      	ldr	r0, [r3, #0]
 801e1c6:	f7ff bfd2 	b.w	801e16e <_raise_r>
 801e1ca:	bf00      	nop
 801e1cc:	20000160 	.word	0x20000160

0801e1d0 <_kill_r>:
 801e1d0:	b538      	push	{r3, r4, r5, lr}
 801e1d2:	4d07      	ldr	r5, [pc, #28]	@ (801e1f0 <_kill_r+0x20>)
 801e1d4:	2300      	movs	r3, #0
 801e1d6:	4604      	mov	r4, r0
 801e1d8:	4608      	mov	r0, r1
 801e1da:	4611      	mov	r1, r2
 801e1dc:	602b      	str	r3, [r5, #0]
 801e1de:	f7eb fa09 	bl	80095f4 <_kill>
 801e1e2:	1c43      	adds	r3, r0, #1
 801e1e4:	d102      	bne.n	801e1ec <_kill_r+0x1c>
 801e1e6:	682b      	ldr	r3, [r5, #0]
 801e1e8:	b103      	cbz	r3, 801e1ec <_kill_r+0x1c>
 801e1ea:	6023      	str	r3, [r4, #0]
 801e1ec:	bd38      	pop	{r3, r4, r5, pc}
 801e1ee:	bf00      	nop
 801e1f0:	2000a6a0 	.word	0x2000a6a0

0801e1f4 <_getpid_r>:
 801e1f4:	f7eb b9f6 	b.w	80095e4 <_getpid>

0801e1f8 <_init>:
 801e1f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1fa:	bf00      	nop
 801e1fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e1fe:	bc08      	pop	{r3}
 801e200:	469e      	mov	lr, r3
 801e202:	4770      	bx	lr

0801e204 <_fini>:
 801e204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e206:	bf00      	nop
 801e208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e20a:	bc08      	pop	{r3}
 801e20c:	469e      	mov	lr, r3
 801e20e:	4770      	bx	lr
