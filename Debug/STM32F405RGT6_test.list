
STM32F405RGT6_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f078  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b0c  0801f208  0801f208  00020208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021d14  08021d14  0002331c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08021d14  08021d14  00022d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021d1c  08021d1c  0002331c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021d1c  08021d1c  00022d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08021d20  08021d20  00022d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08021d24  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002331c  2**0
                  CONTENTS
 10 .bss          0000c048  2000031c  2000031c  0002331c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000c364  2000c364  0002331c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002331c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003923f  00000000  00000000  0002334c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008622  00000000  00000000  0005c58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d88  00000000  00000000  00064bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000230b  00000000  00000000  00067938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a372  00000000  00000000  00069c43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039402  00000000  00000000  00093fb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc03c  00000000  00000000  000cd3b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a93f3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000db78  00000000  00000000  001a9438  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001b6fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000031c 	.word	0x2000031c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801f1f0 	.word	0x0801f1f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000320 	.word	0x20000320
 80001cc:	0801f1f0 	.word	0x0801f1f0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9be 	b.w	800103c <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	468e      	mov	lr, r1
 8000d4c:	4604      	mov	r4, r0
 8000d4e:	4688      	mov	r8, r1
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d14a      	bne.n	8000dea <__udivmoddi4+0xa6>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d962      	bls.n	8000e20 <__udivmoddi4+0xdc>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	b14e      	cbz	r6, 8000d74 <__udivmoddi4+0x30>
 8000d60:	f1c6 0320 	rsb	r3, r6, #32
 8000d64:	fa01 f806 	lsl.w	r8, r1, r6
 8000d68:	fa20 f303 	lsr.w	r3, r0, r3
 8000d6c:	40b7      	lsls	r7, r6
 8000d6e:	ea43 0808 	orr.w	r8, r3, r8
 8000d72:	40b4      	lsls	r4, r6
 8000d74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d78:	fa1f fc87 	uxth.w	ip, r7
 8000d7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d80:	0c23      	lsrs	r3, r4, #16
 8000d82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x62>
 8000d92:	18fb      	adds	r3, r7, r3
 8000d94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d98:	f080 80ea 	bcs.w	8000f70 <__udivmoddi4+0x22c>
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f240 80e7 	bls.w	8000f70 <__udivmoddi4+0x22c>
 8000da2:	3902      	subs	r1, #2
 8000da4:	443b      	add	r3, r7
 8000da6:	1a9a      	subs	r2, r3, r2
 8000da8:	b2a3      	uxth	r3, r4
 8000daa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000db2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000db6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dba:	459c      	cmp	ip, r3
 8000dbc:	d909      	bls.n	8000dd2 <__udivmoddi4+0x8e>
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dc4:	f080 80d6 	bcs.w	8000f74 <__udivmoddi4+0x230>
 8000dc8:	459c      	cmp	ip, r3
 8000dca:	f240 80d3 	bls.w	8000f74 <__udivmoddi4+0x230>
 8000dce:	443b      	add	r3, r7
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dd6:	eba3 030c 	sub.w	r3, r3, ip
 8000dda:	2100      	movs	r1, #0
 8000ddc:	b11d      	cbz	r5, 8000de6 <__udivmoddi4+0xa2>
 8000dde:	40f3      	lsrs	r3, r6
 8000de0:	2200      	movs	r2, #0
 8000de2:	e9c5 3200 	strd	r3, r2, [r5]
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d905      	bls.n	8000dfa <__udivmoddi4+0xb6>
 8000dee:	b10d      	cbz	r5, 8000df4 <__udivmoddi4+0xb0>
 8000df0:	e9c5 0100 	strd	r0, r1, [r5]
 8000df4:	2100      	movs	r1, #0
 8000df6:	4608      	mov	r0, r1
 8000df8:	e7f5      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000dfa:	fab3 f183 	clz	r1, r3
 8000dfe:	2900      	cmp	r1, #0
 8000e00:	d146      	bne.n	8000e90 <__udivmoddi4+0x14c>
 8000e02:	4573      	cmp	r3, lr
 8000e04:	d302      	bcc.n	8000e0c <__udivmoddi4+0xc8>
 8000e06:	4282      	cmp	r2, r0
 8000e08:	f200 8105 	bhi.w	8001016 <__udivmoddi4+0x2d2>
 8000e0c:	1a84      	subs	r4, r0, r2
 8000e0e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e12:	2001      	movs	r0, #1
 8000e14:	4690      	mov	r8, r2
 8000e16:	2d00      	cmp	r5, #0
 8000e18:	d0e5      	beq.n	8000de6 <__udivmoddi4+0xa2>
 8000e1a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e1e:	e7e2      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000e20:	2a00      	cmp	r2, #0
 8000e22:	f000 8090 	beq.w	8000f46 <__udivmoddi4+0x202>
 8000e26:	fab2 f682 	clz	r6, r2
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	f040 80a4 	bne.w	8000f78 <__udivmoddi4+0x234>
 8000e30:	1a8a      	subs	r2, r1, r2
 8000e32:	0c03      	lsrs	r3, r0, #16
 8000e34:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e38:	b280      	uxth	r0, r0
 8000e3a:	b2bc      	uxth	r4, r7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e42:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e4a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e4e:	429a      	cmp	r2, r3
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x11e>
 8000e52:	18fb      	adds	r3, r7, r3
 8000e54:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e58:	d202      	bcs.n	8000e60 <__udivmoddi4+0x11c>
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	f200 80e0 	bhi.w	8001020 <__udivmoddi4+0x2dc>
 8000e60:	46c4      	mov	ip, r8
 8000e62:	1a9b      	subs	r3, r3, r2
 8000e64:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e68:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e6c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e70:	fb02 f404 	mul.w	r4, r2, r4
 8000e74:	429c      	cmp	r4, r3
 8000e76:	d907      	bls.n	8000e88 <__udivmoddi4+0x144>
 8000e78:	18fb      	adds	r3, r7, r3
 8000e7a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x142>
 8000e80:	429c      	cmp	r4, r3
 8000e82:	f200 80ca 	bhi.w	800101a <__udivmoddi4+0x2d6>
 8000e86:	4602      	mov	r2, r0
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e8e:	e7a5      	b.n	8000ddc <__udivmoddi4+0x98>
 8000e90:	f1c1 0620 	rsb	r6, r1, #32
 8000e94:	408b      	lsls	r3, r1
 8000e96:	fa22 f706 	lsr.w	r7, r2, r6
 8000e9a:	431f      	orrs	r7, r3
 8000e9c:	fa0e f401 	lsl.w	r4, lr, r1
 8000ea0:	fa20 f306 	lsr.w	r3, r0, r6
 8000ea4:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ea8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000eac:	4323      	orrs	r3, r4
 8000eae:	fa00 f801 	lsl.w	r8, r0, r1
 8000eb2:	fa1f fc87 	uxth.w	ip, r7
 8000eb6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eba:	0c1c      	lsrs	r4, r3, #16
 8000ebc:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ec0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ec4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ec8:	45a6      	cmp	lr, r4
 8000eca:	fa02 f201 	lsl.w	r2, r2, r1
 8000ece:	d909      	bls.n	8000ee4 <__udivmoddi4+0x1a0>
 8000ed0:	193c      	adds	r4, r7, r4
 8000ed2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ed6:	f080 809c 	bcs.w	8001012 <__udivmoddi4+0x2ce>
 8000eda:	45a6      	cmp	lr, r4
 8000edc:	f240 8099 	bls.w	8001012 <__udivmoddi4+0x2ce>
 8000ee0:	3802      	subs	r0, #2
 8000ee2:	443c      	add	r4, r7
 8000ee4:	eba4 040e 	sub.w	r4, r4, lr
 8000ee8:	fa1f fe83 	uxth.w	lr, r3
 8000eec:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ef0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ef4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ef8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000efc:	45a4      	cmp	ip, r4
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x1ce>
 8000f00:	193c      	adds	r4, r7, r4
 8000f02:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f06:	f080 8082 	bcs.w	800100e <__udivmoddi4+0x2ca>
 8000f0a:	45a4      	cmp	ip, r4
 8000f0c:	d97f      	bls.n	800100e <__udivmoddi4+0x2ca>
 8000f0e:	3b02      	subs	r3, #2
 8000f10:	443c      	add	r4, r7
 8000f12:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f16:	eba4 040c 	sub.w	r4, r4, ip
 8000f1a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f1e:	4564      	cmp	r4, ip
 8000f20:	4673      	mov	r3, lr
 8000f22:	46e1      	mov	r9, ip
 8000f24:	d362      	bcc.n	8000fec <__udivmoddi4+0x2a8>
 8000f26:	d05f      	beq.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f28:	b15d      	cbz	r5, 8000f42 <__udivmoddi4+0x1fe>
 8000f2a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f2e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f32:	fa04 f606 	lsl.w	r6, r4, r6
 8000f36:	fa22 f301 	lsr.w	r3, r2, r1
 8000f3a:	431e      	orrs	r6, r3
 8000f3c:	40cc      	lsrs	r4, r1
 8000f3e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f42:	2100      	movs	r1, #0
 8000f44:	e74f      	b.n	8000de6 <__udivmoddi4+0xa2>
 8000f46:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f4a:	0c01      	lsrs	r1, r0, #16
 8000f4c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f50:	b280      	uxth	r0, r0
 8000f52:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f56:	463b      	mov	r3, r7
 8000f58:	4638      	mov	r0, r7
 8000f5a:	463c      	mov	r4, r7
 8000f5c:	46b8      	mov	r8, r7
 8000f5e:	46be      	mov	lr, r7
 8000f60:	2620      	movs	r6, #32
 8000f62:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f66:	eba2 0208 	sub.w	r2, r2, r8
 8000f6a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f6e:	e766      	b.n	8000e3e <__udivmoddi4+0xfa>
 8000f70:	4601      	mov	r1, r0
 8000f72:	e718      	b.n	8000da6 <__udivmoddi4+0x62>
 8000f74:	4610      	mov	r0, r2
 8000f76:	e72c      	b.n	8000dd2 <__udivmoddi4+0x8e>
 8000f78:	f1c6 0220 	rsb	r2, r6, #32
 8000f7c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f80:	40b7      	lsls	r7, r6
 8000f82:	40b1      	lsls	r1, r6
 8000f84:	fa20 f202 	lsr.w	r2, r0, r2
 8000f88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f92:	b2bc      	uxth	r4, r7
 8000f94:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f9e:	fb08 f904 	mul.w	r9, r8, r4
 8000fa2:	40b0      	lsls	r0, r6
 8000fa4:	4589      	cmp	r9, r1
 8000fa6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000faa:	b280      	uxth	r0, r0
 8000fac:	d93e      	bls.n	800102c <__udivmoddi4+0x2e8>
 8000fae:	1879      	adds	r1, r7, r1
 8000fb0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fb4:	d201      	bcs.n	8000fba <__udivmoddi4+0x276>
 8000fb6:	4589      	cmp	r9, r1
 8000fb8:	d81f      	bhi.n	8000ffa <__udivmoddi4+0x2b6>
 8000fba:	eba1 0109 	sub.w	r1, r1, r9
 8000fbe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fc2:	fb09 f804 	mul.w	r8, r9, r4
 8000fc6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fca:	b292      	uxth	r2, r2
 8000fcc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fd0:	4542      	cmp	r2, r8
 8000fd2:	d229      	bcs.n	8001028 <__udivmoddi4+0x2e4>
 8000fd4:	18ba      	adds	r2, r7, r2
 8000fd6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fda:	d2c4      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fdc:	4542      	cmp	r2, r8
 8000fde:	d2c2      	bcs.n	8000f66 <__udivmoddi4+0x222>
 8000fe0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fe4:	443a      	add	r2, r7
 8000fe6:	e7be      	b.n	8000f66 <__udivmoddi4+0x222>
 8000fe8:	45f0      	cmp	r8, lr
 8000fea:	d29d      	bcs.n	8000f28 <__udivmoddi4+0x1e4>
 8000fec:	ebbe 0302 	subs.w	r3, lr, r2
 8000ff0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ff4:	3801      	subs	r0, #1
 8000ff6:	46e1      	mov	r9, ip
 8000ff8:	e796      	b.n	8000f28 <__udivmoddi4+0x1e4>
 8000ffa:	eba7 0909 	sub.w	r9, r7, r9
 8000ffe:	4449      	add	r1, r9
 8001000:	f1a8 0c02 	sub.w	ip, r8, #2
 8001004:	fbb1 f9fe 	udiv	r9, r1, lr
 8001008:	fb09 f804 	mul.w	r8, r9, r4
 800100c:	e7db      	b.n	8000fc6 <__udivmoddi4+0x282>
 800100e:	4673      	mov	r3, lr
 8001010:	e77f      	b.n	8000f12 <__udivmoddi4+0x1ce>
 8001012:	4650      	mov	r0, sl
 8001014:	e766      	b.n	8000ee4 <__udivmoddi4+0x1a0>
 8001016:	4608      	mov	r0, r1
 8001018:	e6fd      	b.n	8000e16 <__udivmoddi4+0xd2>
 800101a:	443b      	add	r3, r7
 800101c:	3a02      	subs	r2, #2
 800101e:	e733      	b.n	8000e88 <__udivmoddi4+0x144>
 8001020:	f1ac 0c02 	sub.w	ip, ip, #2
 8001024:	443b      	add	r3, r7
 8001026:	e71c      	b.n	8000e62 <__udivmoddi4+0x11e>
 8001028:	4649      	mov	r1, r9
 800102a:	e79c      	b.n	8000f66 <__udivmoddi4+0x222>
 800102c:	eba1 0109 	sub.w	r1, r1, r9
 8001030:	46c4      	mov	ip, r8
 8001032:	fbb1 f9fe 	udiv	r9, r1, lr
 8001036:	fb09 f804 	mul.w	r8, r9, r4
 800103a:	e7c4      	b.n	8000fc6 <__udivmoddi4+0x282>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <attitude_controller_init>:
void attitude_controller_init(
    attitude_controller_t* fc,
    float rate_gain,
    float max_angle,
    float max_rate
) {
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	ed87 0a02 	vstr	s0, [r7, #8]
 800104c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001050:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d00e      	beq.n	8001078 <attitude_controller_init+0x38>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(attitude_controller_t));
 800105a:	2234      	movs	r2, #52	@ 0x34
 800105c:	2100      	movs	r1, #0
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f01a fa48 	bl	801b4f4 <memset>

	fc->rate_gain = rate_gain;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	68ba      	ldr	r2, [r7, #8]
 8001068:	611a      	str	r2, [r3, #16]
	fc->max_angle = max_angle;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	687a      	ldr	r2, [r7, #4]
 800106e:	615a      	str	r2, [r3, #20]
	fc->max_rate = max_rate;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	683a      	ldr	r2, [r7, #0]
 8001074:	619a      	str	r2, [r3, #24]
 8001076:	e000      	b.n	800107a <attitude_controller_init+0x3a>
        return;
 8001078:	bf00      	nop

}
 800107a:	3710      	adds	r7, #16
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}

08001080 <quat_remove_yaw>:


/* Remove yaw (rotation about world Z) from q */
static quaternion quat_remove_yaw(quaternion q)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b09c      	sub	sp, #112	@ 0x70
 8001084:	af00      	add	r7, sp, #0
 8001086:	eeb0 6a40 	vmov.f32	s12, s0
 800108a:	eef0 6a60 	vmov.f32	s13, s1
 800108e:	eeb0 7a41 	vmov.f32	s14, s2
 8001092:	eef0 7a61 	vmov.f32	s15, s3
 8001096:	ed87 6a04 	vstr	s12, [r7, #16]
 800109a:	edc7 6a05 	vstr	s13, [r7, #20]
 800109e:	ed87 7a06 	vstr	s14, [r7, #24]
 80010a2:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure q is unit (good practice)
    q = quatnormalize(&q);
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4618      	mov	r0, r3
 80010ac:	f001 fa4e 	bl	800254c <quatnormalize>
 80010b0:	eeb0 6a40 	vmov.f32	s12, s0
 80010b4:	eef0 6a60 	vmov.f32	s13, s1
 80010b8:	eeb0 7a41 	vmov.f32	s14, s2
 80010bc:	eef0 7a61 	vmov.f32	s15, s3
 80010c0:	ed87 6a04 	vstr	s12, [r7, #16]
 80010c4:	edc7 6a05 	vstr	s13, [r7, #20]
 80010c8:	ed87 7a06 	vstr	s14, [r7, #24]
 80010cc:	edc7 7a07 	vstr	s15, [r7, #28]

    // Twist around world Z: keep only w and z, renormalize
    quaternion q_twist = { q.w, 0.0f, 0.0f, q.z };
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80010d4:	f04f 0300 	mov.w	r3, #0
 80010d8:	657b      	str	r3, [r7, #84]	@ 0x54
 80010da:	f04f 0300 	mov.w	r3, #0
 80010de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	65fb      	str	r3, [r7, #92]	@ 0x5c

    quaternion q_twist_normalized = quatnormalize(&q_twist);
 80010e4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fa2f 	bl	800254c <quatnormalize>
 80010ee:	eeb0 6a40 	vmov.f32	s12, s0
 80010f2:	eef0 6a60 	vmov.f32	s13, s1
 80010f6:	eeb0 7a41 	vmov.f32	s14, s2
 80010fa:	eef0 7a61 	vmov.f32	s15, s3
 80010fe:	ed87 6a10 	vstr	s12, [r7, #64]	@ 0x40
 8001102:	edc7 6a11 	vstr	s13, [r7, #68]	@ 0x44
 8001106:	ed87 7a12 	vstr	s14, [r7, #72]	@ 0x48
 800110a:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    quaternion twist_conj = quatconj(&q_twist_normalized);
 800110e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001112:	4618      	mov	r0, r3
 8001114:	f001 f9de 	bl	80024d4 <quatconj>
 8001118:	eeb0 6a40 	vmov.f32	s12, s0
 800111c:	eef0 6a60 	vmov.f32	s13, s1
 8001120:	eeb0 7a41 	vmov.f32	s14, s2
 8001124:	eef0 7a61 	vmov.f32	s15, s3
 8001128:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 800112c:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8001130:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8001134:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // swing = q * conj(twist)  -> orientation with yaw removed
    quaternion q_no_yaw = quatmultiply(&q, &twist_conj);
 8001138:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f001 fabd 	bl	80026c2 <quatmultiply>
 8001148:	eeb0 6a40 	vmov.f32	s12, s0
 800114c:	eef0 6a60 	vmov.f32	s13, s1
 8001150:	eeb0 7a41 	vmov.f32	s14, s2
 8001154:	eef0 7a61 	vmov.f32	s15, s3
 8001158:	ed87 6a08 	vstr	s12, [r7, #32]
 800115c:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8001160:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8001164:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Optional: normalize to clean tiny numeric errors
    return quatnormalize(&q_no_yaw);
 8001168:	f107 0320 	add.w	r3, r7, #32
 800116c:	4618      	mov	r0, r3
 800116e:	f001 f9ed 	bl	800254c <quatnormalize>
 8001172:	eeb0 6a40 	vmov.f32	s12, s0
 8001176:	eef0 6a60 	vmov.f32	s13, s1
 800117a:	eeb0 7a41 	vmov.f32	s14, s2
 800117e:	eef0 7a61 	vmov.f32	s15, s3
 8001182:	ed87 6a18 	vstr	s12, [r7, #96]	@ 0x60
 8001186:	edc7 6a19 	vstr	s13, [r7, #100]	@ 0x64
 800118a:	ed87 7a1a 	vstr	s14, [r7, #104]	@ 0x68
 800118e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 8001192:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001194:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001196:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800119a:	ee06 0a10 	vmov	s12, r0
 800119e:	ee06 1a90 	vmov	s13, r1
 80011a2:	ee07 2a10 	vmov	s14, r2
 80011a6:	ee07 3a90 	vmov	s15, r3
}
 80011aa:	eeb0 0a46 	vmov.f32	s0, s12
 80011ae:	eef0 0a66 	vmov.f32	s1, s13
 80011b2:	eeb0 1a47 	vmov.f32	s2, s14
 80011b6:	eef0 1a67 	vmov.f32	s3, s15
 80011ba:	3770      	adds	r7, #112	@ 0x70
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <attitude_controller_angle_mode_update>:
    attitude_controller_t* fc,
    quaternion estimated_q,
    float target_roll,
    float target_pitch,
    float target_yaw_rate
) {
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b0a7      	sub	sp, #156	@ 0x9c
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	61f8      	str	r0, [r7, #28]
 80011c8:	eeb0 6a40 	vmov.f32	s12, s0
 80011cc:	eef0 6a60 	vmov.f32	s13, s1
 80011d0:	eeb0 7a41 	vmov.f32	s14, s2
 80011d4:	eef0 7a61 	vmov.f32	s15, s3
 80011d8:	ed87 2a02 	vstr	s4, [r7, #8]
 80011dc:	edc7 2a01 	vstr	s5, [r7, #4]
 80011e0:	ed87 3a00 	vstr	s6, [r7]
 80011e4:	ed87 6a03 	vstr	s12, [r7, #12]
 80011e8:	edc7 6a04 	vstr	s13, [r7, #16]
 80011ec:	ed87 7a05 	vstr	s14, [r7, #20]
 80011f0:	edc7 7a06 	vstr	s15, [r7, #24]
    if (!fc) {
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f000 81b0 	beq.w	800155c <attitude_controller_angle_mode_update+0x39c>
        return;
    }

    target_roll = CLAMP(target_roll, -fc->max_angle, fc->max_angle);
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	edd3 7a05 	vldr	s15, [r3, #20]
 8001202:	eef1 7a67 	vneg.f32	s15, s15
 8001206:	ed97 7a02 	vldr	s14, [r7, #8]
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	d505      	bpl.n	8001220 <attitude_controller_angle_mode_update+0x60>
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	edd3 7a05 	vldr	s15, [r3, #20]
 800121a:	eef1 7a67 	vneg.f32	s15, s15
 800121e:	e00f      	b.n	8001240 <attitude_controller_angle_mode_update+0x80>
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	edd3 7a05 	vldr	s15, [r3, #20]
 8001226:	ed97 7a02 	vldr	s14, [r7, #8]
 800122a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800122e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001232:	dd03      	ble.n	800123c <attitude_controller_angle_mode_update+0x7c>
 8001234:	69fb      	ldr	r3, [r7, #28]
 8001236:	edd3 7a05 	vldr	s15, [r3, #20]
 800123a:	e001      	b.n	8001240 <attitude_controller_angle_mode_update+0x80>
 800123c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001240:	edc7 7a02 	vstr	s15, [r7, #8]
    target_pitch = CLAMP(target_pitch, -fc->max_angle, fc->max_angle);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	edd3 7a05 	vldr	s15, [r3, #20]
 800124a:	eef1 7a67 	vneg.f32	s15, s15
 800124e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	d505      	bpl.n	8001268 <attitude_controller_angle_mode_update+0xa8>
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001262:	eef1 7a67 	vneg.f32	s15, s15
 8001266:	e00f      	b.n	8001288 <attitude_controller_angle_mode_update+0xc8>
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	edd3 7a05 	vldr	s15, [r3, #20]
 800126e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800127a:	dd03      	ble.n	8001284 <attitude_controller_angle_mode_update+0xc4>
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001282:	e001      	b.n	8001288 <attitude_controller_angle_mode_update+0xc8>
 8001284:	edd7 7a01 	vldr	s15, [r7, #4]
 8001288:	edc7 7a01 	vstr	s15, [r7, #4]
    target_yaw_rate = CLAMP(target_yaw_rate, -fc->max_rate, fc->max_rate);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001292:	eef1 7a67 	vneg.f32	s15, s15
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	d505      	bpl.n	80012b0 <attitude_controller_angle_mode_update+0xf0>
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012aa:	eef1 7a67 	vneg.f32	s15, s15
 80012ae:	e00f      	b.n	80012d0 <attitude_controller_angle_mode_update+0x110>
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80012b6:	ed97 7a00 	vldr	s14, [r7]
 80012ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	dd03      	ble.n	80012cc <attitude_controller_angle_mode_update+0x10c>
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012ca:	e001      	b.n	80012d0 <attitude_controller_angle_mode_update+0x110>
 80012cc:	edd7 7a00 	vldr	s15, [r7]
 80012d0:	edc7 7a00 	vstr	s15, [r7]

    // --- Store current sensor inputs and setpoints ---
    fc->estimated_q = estimated_q;
 80012d4:	69fb      	ldr	r3, [r7, #28]
 80012d6:	461c      	mov	r4, r3
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    fc->target_roll = target_roll;
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	68ba      	ldr	r2, [r7, #8]
 80012e6:	61da      	str	r2, [r3, #28]
    fc->target_pitch = target_pitch;
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	621a      	str	r2, [r3, #32]
    fc->target_yaw = target_yaw_rate;
 80012ee:	69fb      	ldr	r3, [r7, #28]
 80012f0:	683a      	ldr	r2, [r7, #0]
 80012f2:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Step 1: Build target quaternion from commanded roll/pitch ---
    angles3D target_rp = { target_roll, target_pitch, 0.0f }; // yaw handled separately
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    quaternion target_delta_q = angle2quat(&target_rp);
 8001308:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fc51 	bl	8002bb4 <angle2quat>
 8001312:	eeb0 6a40 	vmov.f32	s12, s0
 8001316:	eef0 6a60 	vmov.f32	s13, s1
 800131a:	eeb0 7a41 	vmov.f32	s14, s2
 800131e:	eef0 7a61 	vmov.f32	s15, s3
 8001322:	ed87 6a1f 	vstr	s12, [r7, #124]	@ 0x7c
 8001326:	edc7 6a20 	vstr	s13, [r7, #128]	@ 0x80
 800132a:	ed87 7a21 	vstr	s14, [r7, #132]	@ 0x84
 800132e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // --- Step 2: Compose target quaternion relative to level reference ---
	quaternion temp_default_leveld_position_q = FC_DEFAULT_LEVELD_POSITION_Q;
 8001332:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001336:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	673b      	str	r3, [r7, #112]	@ 0x70
 800133e:	f04f 0300 	mov.w	r3, #0
 8001342:	677b      	str	r3, [r7, #116]	@ 0x74
 8001344:	f04f 0300 	mov.w	r3, #0
 8001348:	67bb      	str	r3, [r7, #120]	@ 0x78
    quaternion target_q = quatmultiply(&temp_default_leveld_position_q, &target_delta_q);
 800134a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800134e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001352:	4611      	mov	r1, r2
 8001354:	4618      	mov	r0, r3
 8001356:	f001 f9b4 	bl	80026c2 <quatmultiply>
 800135a:	eeb0 6a40 	vmov.f32	s12, s0
 800135e:	eef0 6a60 	vmov.f32	s13, s1
 8001362:	eeb0 7a41 	vmov.f32	s14, s2
 8001366:	eef0 7a61 	vmov.f32	s15, s3
 800136a:	ed87 6a13 	vstr	s12, [r7, #76]	@ 0x4c
 800136e:	edc7 6a14 	vstr	s13, [r7, #80]	@ 0x50
 8001372:	ed87 7a15 	vstr	s14, [r7, #84]	@ 0x54
 8001376:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

    // --- Step 3: Orientation error quaternion ---
    quaternion error_q = quat_error(&fc->estimated_q, &target_q);
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f001 fd7e 	bl	8002e84 <quat_error>
 8001388:	eeb0 6a40 	vmov.f32	s12, s0
 800138c:	eef0 6a60 	vmov.f32	s13, s1
 8001390:	eeb0 7a41 	vmov.f32	s14, s2
 8001394:	eef0 7a61 	vmov.f32	s15, s3
 8001398:	ed87 6a0f 	vstr	s12, [r7, #60]	@ 0x3c
 800139c:	edc7 6a10 	vstr	s13, [r7, #64]	@ 0x40
 80013a0:	ed87 7a11 	vstr	s14, [r7, #68]	@ 0x44
 80013a4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    quaternion estimated_q_witouth_yaw = quat_remove_yaw(error_q);
 80013a8:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 80013ac:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 80013b0:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80013b4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80013b8:	eeb0 0a46 	vmov.f32	s0, s12
 80013bc:	eef0 0a66 	vmov.f32	s1, s13
 80013c0:	eeb0 1a47 	vmov.f32	s2, s14
 80013c4:	eef0 1a67 	vmov.f32	s3, s15
 80013c8:	f7ff fe5a 	bl	8001080 <quat_remove_yaw>
 80013cc:	eeb0 6a40 	vmov.f32	s12, s0
 80013d0:	eef0 6a60 	vmov.f32	s13, s1
 80013d4:	eeb0 7a41 	vmov.f32	s14, s2
 80013d8:	eef0 7a61 	vmov.f32	s15, s3
 80013dc:	ed87 6a0b 	vstr	s12, [r7, #44]	@ 0x2c
 80013e0:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 80013e4:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 80013e8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // --- Step 4: Convert error quaternion → rotation vector (rad) ---
    angles3D rotvec_err = quat2rotvec(estimated_q_witouth_yaw);
 80013ec:	ed97 6a0b 	vldr	s12, [r7, #44]	@ 0x2c
 80013f0:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80013f4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80013f8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013fc:	eeb0 0a46 	vmov.f32	s0, s12
 8001400:	eef0 0a66 	vmov.f32	s1, s13
 8001404:	eeb0 1a47 	vmov.f32	s2, s14
 8001408:	eef0 1a67 	vmov.f32	s3, s15
 800140c:	f001 fb1c 	bl	8002a48 <quat2rotvec>
 8001410:	eef0 6a40 	vmov.f32	s13, s0
 8001414:	eeb0 7a60 	vmov.f32	s14, s1
 8001418:	eef0 7a41 	vmov.f32	s15, s2
 800141c:	edc7 6a08 	vstr	s13, [r7, #32]
 8001420:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 8001424:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles3D rotvec_err = quat2rotvec(error_q);

    rotvec_err.z = 0.0f;
 8001428:	f04f 0300 	mov.w	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	@ 0x28

    fc->calculated_roll_rate = rotvec_err.x * fc->rate_gain;
 800142e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	edd3 7a04 	vldr	s15, [r3, #16]
 8001438:	ee67 7a27 	vmul.f32	s15, s14, s15
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = rotvec_err.y * fc->rate_gain;
 8001442:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	edd3 7a04 	vldr	s15, [r3, #16]
 800144c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = target_yaw_rate * fc->rate_gain;
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	ed93 7a04 	vldr	s14, [r3, #16]
 800145c:	edd7 7a00 	vldr	s15, [r7]
 8001460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// --- Step 5: Apply limits ---
	fc->calculated_roll_rate = CLAMP(fc->calculated_roll_rate, -fc->max_rate, fc->max_rate);
 800146a:	69fb      	ldr	r3, [r7, #28]
 800146c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	edd3 7a06 	vldr	s15, [r3, #24]
 8001476:	eef1 7a67 	vneg.f32	s15, s15
 800147a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800147e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001482:	d505      	bpl.n	8001490 <attitude_controller_angle_mode_update+0x2d0>
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	edd3 7a06 	vldr	s15, [r3, #24]
 800148a:	eef1 7a67 	vneg.f32	s15, s15
 800148e:	e011      	b.n	80014b4 <attitude_controller_angle_mode_update+0x2f4>
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001496:	69fb      	ldr	r3, [r7, #28]
 8001498:	edd3 7a06 	vldr	s15, [r3, #24]
 800149c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a4:	dd03      	ble.n	80014ae <attitude_controller_angle_mode_update+0x2ee>
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ac:	e002      	b.n	80014b4 <attitude_controller_angle_mode_update+0x2f4>
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = CLAMP(fc->calculated_pitch_rate, -fc->max_rate, fc->max_rate);
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014c6:	eef1 7a67 	vneg.f32	s15, s15
 80014ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d2:	d505      	bpl.n	80014e0 <attitude_controller_angle_mode_update+0x320>
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014da:	eef1 7a67 	vneg.f32	s15, s15
 80014de:	e011      	b.n	8001504 <attitude_controller_angle_mode_update+0x344>
 80014e0:	69fb      	ldr	r3, [r7, #28]
 80014e2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f4:	dd03      	ble.n	80014fe <attitude_controller_angle_mode_update+0x33e>
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014fc:	e002      	b.n	8001504 <attitude_controller_angle_mode_update+0x344>
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = CLAMP(fc->calculated_yaw_rate, -fc->max_rate, fc->max_rate);
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	edd3 7a06 	vldr	s15, [r3, #24]
 8001516:	eef1 7a67 	vneg.f32	s15, s15
 800151a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800151e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001522:	d505      	bpl.n	8001530 <attitude_controller_angle_mode_update+0x370>
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	edd3 7a06 	vldr	s15, [r3, #24]
 800152a:	eef1 7a67 	vneg.f32	s15, s15
 800152e:	e011      	b.n	8001554 <attitude_controller_angle_mode_update+0x394>
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	edd3 7a06 	vldr	s15, [r3, #24]
 800153c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001544:	dd03      	ble.n	800154e <attitude_controller_angle_mode_update+0x38e>
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	edd3 7a06 	vldr	s15, [r3, #24]
 800154c:	e002      	b.n	8001554 <attitude_controller_angle_mode_update+0x394>
 800154e:	69fb      	ldr	r3, [r7, #28]
 8001550:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800155a:	e000      	b.n	800155e <attitude_controller_angle_mode_update+0x39e>
        return;
 800155c:	bf00      	nop

}
 800155e:	379c      	adds	r7, #156	@ 0x9c
 8001560:	46bd      	mov	sp, r7
 8001562:	bd90      	pop	{r4, r7, pc}

08001564 <attitude_controller_get_calculated_rate>:
void attitude_controller_get_calculated_rate(
    attitude_controller_t* fc,
    float* out_roll_rate,
    float* out_pitch_rate,
    float* out_yaw_rate
) {
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
 8001570:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d015      	beq.n	80015a4 <attitude_controller_get_calculated_rate+0x40>
        return; // Avoid null pointer access
    }
	if (out_roll_rate) {
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <attitude_controller_get_calculated_rate+0x22>
		*out_roll_rate = fc->calculated_roll_rate;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	601a      	str	r2, [r3, #0]
	}
	if (out_pitch_rate) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <attitude_controller_get_calculated_rate+0x30>
		*out_pitch_rate = fc->calculated_pitch_rate;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	601a      	str	r2, [r3, #0]
	}
	if (out_yaw_rate) {
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d005      	beq.n	80015a6 <attitude_controller_get_calculated_rate+0x42>
		*out_yaw_rate = fc->calculated_yaw_rate;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	e000      	b.n	80015a6 <attitude_controller_get_calculated_rate+0x42>
        return; // Avoid null pointer access
 80015a4:	bf00      	nop
	}
}
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr

080015b0 <crc16_ccitt_init>:
#include "crc.h"


uint16_t crc16_ccitt_init(void) {
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	return (uint16_t)0xFFFF; // Initial value for CRC-16-CCITT
 80015b4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <crc16_ccitt_add>:

uint16_t crc16_ccitt_add(uint16_t crc, uint8_t a)
{
 80015c2:	b480      	push	{r7}
 80015c4:	b085      	sub	sp, #20
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	460a      	mov	r2, r1
 80015cc:	80fb      	strh	r3, [r7, #6]
 80015ce:	4613      	mov	r3, r2
 80015d0:	717b      	strb	r3, [r7, #5]
    crc ^= (uint16_t)a << (uint8_t)8;
 80015d2:	797b      	ldrb	r3, [r7, #5]
 80015d4:	b21b      	sxth	r3, r3
 80015d6:	021b      	lsls	r3, r3, #8
 80015d8:	b21a      	sxth	r2, r3
 80015da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015de:	4053      	eors	r3, r2
 80015e0:	b21b      	sxth	r3, r3
 80015e2:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 80015e4:	2300      	movs	r3, #0
 80015e6:	73fb      	strb	r3, [r7, #15]
 80015e8:	e014      	b.n	8001614 <crc16_ccitt_add+0x52>
        if (crc & (uint16_t)0x8000) {
 80015ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	da0a      	bge.n	8001608 <crc16_ccitt_add+0x46>
            crc = (crc << (uint8_t)1) ^ (uint16_t)0x1021;
 80015f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80015fe:	f083 0301 	eor.w	r3, r3, #1
 8001602:	b21b      	sxth	r3, r3
 8001604:	80fb      	strh	r3, [r7, #6]
 8001606:	e002      	b.n	800160e <crc16_ccitt_add+0x4c>
        }
        else{
        	crc = (crc << (uint8_t)1);
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 800160e:	7bfb      	ldrb	r3, [r7, #15]
 8001610:	3301      	adds	r3, #1
 8001612:	73fb      	strb	r3, [r7, #15]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	2b07      	cmp	r3, #7
 8001618:	d9e7      	bls.n	80015ea <crc16_ccitt_add+0x28>
        }
    }
    return crc;
 800161a:	88fb      	ldrh	r3, [r7, #6]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <crc16_ccitt_add_arr>:

uint16_t crc16_ccitt_add_arr(uint16_t crc, uint8_t* data, size_t len) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
 8001634:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
 800163a:	e00d      	b.n	8001658 <crc16_ccitt_add_arr+0x30>
        crc = crc16_ccitt_add(crc, data[i]);
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	4413      	add	r3, r2
 8001642:	781a      	ldrb	r2, [r3, #0]
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ffba 	bl	80015c2 <crc16_ccitt_add>
 800164e:	4603      	mov	r3, r0
 8001650:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	3301      	adds	r3, #1
 8001656:	617b      	str	r3, [r7, #20]
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	429a      	cmp	r2, r3
 800165e:	d3ed      	bcc.n	800163c <crc16_ccitt_add_arr+0x14>
    }
    return crc;
 8001660:	89fb      	ldrh	r3, [r7, #14]
}
 8001662:	4618      	mov	r0, r3
 8001664:	3718      	adds	r7, #24
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	0000      	movs	r0, r0
 800166c:	0000      	movs	r0, r0
	...

08001670 <pt1_filter_init_lowpass>:
#include "filters.h"
#define _USE_MATH_DEFINES
#include <math.h>
#include <float.h>

void pt1_filter_init_lowpass(pt1_filter_t* filter, float cutoff_freq, float sample_rate) {
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	ed87 0a02 	vstr	s0, [r7, #8]
 800167c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(cutoff_freq <= FLT_EPSILON || sample_rate <= FLT_EPSILON){
 8001680:	edd7 7a02 	vldr	s15, [r7, #8]
 8001684:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001730 <pt1_filter_init_lowpass+0xc0>
 8001688:	eef4 7ac7 	vcmpe.f32	s15, s14
 800168c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001690:	d908      	bls.n	80016a4 <pt1_filter_init_lowpass+0x34>
 8001692:	edd7 7a01 	vldr	s15, [r7, #4]
 8001696:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001730 <pt1_filter_init_lowpass+0xc0>
 800169a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a2:	d804      	bhi.n	80016ae <pt1_filter_init_lowpass+0x3e>
		filter->alpha = 0.0f;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	e02b      	b.n	8001706 <pt1_filter_init_lowpass+0x96>
	}
	else{
	    float dt = 1.0f / sample_rate;
 80016ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80016b2:	ed97 7a01 	vldr	s14, [r7, #4]
 80016b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016ba:	edc7 7a05 	vstr	s15, [r7, #20]
	    float rc = 1.0f / (2.0f * M_PI * cutoff_freq);
 80016be:	68b8      	ldr	r0, [r7, #8]
 80016c0:	f7fe ff52 	bl	8000568 <__aeabi_f2d>
 80016c4:	a318      	add	r3, pc, #96	@ (adr r3, 8001728 <pt1_filter_init_lowpass+0xb8>)
 80016c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ca:	f7fe ffa5 	bl	8000618 <__aeabi_dmul>
 80016ce:	4602      	mov	r2, r0
 80016d0:	460b      	mov	r3, r1
 80016d2:	f04f 0000 	mov.w	r0, #0
 80016d6:	4917      	ldr	r1, [pc, #92]	@ (8001734 <pt1_filter_init_lowpass+0xc4>)
 80016d8:	f7ff f8c8 	bl	800086c <__aeabi_ddiv>
 80016dc:	4602      	mov	r2, r0
 80016de:	460b      	mov	r3, r1
 80016e0:	4610      	mov	r0, r2
 80016e2:	4619      	mov	r1, r3
 80016e4:	f7ff fa90 	bl	8000c08 <__aeabi_d2f>
 80016e8:	4603      	mov	r3, r0
 80016ea:	613b      	str	r3, [r7, #16]
	    filter->alpha = dt / (dt + rc);
 80016ec:	ed97 7a05 	vldr	s14, [r7, #20]
 80016f0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016f8:	edd7 6a05 	vldr	s13, [r7, #20]
 80016fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	filter->sample_freq = sample_rate;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	601a      	str	r2, [r3, #0]
    filter->cutoff_freq = cutoff_freq;
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	68ba      	ldr	r2, [r7, #8]
 8001710:	605a      	str	r2, [r3, #4]
    filter->state = 0.0f;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f04f 0200 	mov.w	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
}
 800171a:	bf00      	nop
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	f3af 8000 	nop.w
 8001728:	54442d18 	.word	0x54442d18
 800172c:	401921fb 	.word	0x401921fb
 8001730:	34000000 	.word	0x34000000
 8001734:	3ff00000 	.word	0x3ff00000

08001738 <pt1_filter_apply_lowpass>:

float pt1_filter_apply_lowpass(pt1_filter_t* filter, float input) {
 8001738:	b480      	push	{r7}
 800173a:	b083      	sub	sp, #12
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	ed87 0a00 	vstr	s0, [r7]
    filter->state += (filter->alpha * (input - filter->state));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	ed93 7a03 	vldr	s14, [r3, #12]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	edd3 7a03 	vldr	s15, [r3, #12]
 8001756:	ed97 6a00 	vldr	s12, [r7]
 800175a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800175e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001762:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	edc3 7a03 	vstr	s15, [r3, #12]
    return filter->state;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	ee07 3a90 	vmov	s15, r3
}
 8001774:	eeb0 0a67 	vmov.f32	s0, s15
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <pt1_filter_reset>:

void pt1_filter_reset(pt1_filter_t* filter) {
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
    filter->state = 0.0f;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
}
 8001792:	bf00      	nop
 8001794:	370c      	adds	r7, #12
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr

0800179e <pt2_filter_init_lowpass>:
    f->a2 = a2 / a0;
    biquad_filter_reset(f);
}


void pt2_filter_init_lowpass(pt2_filter_t *f, float cutoff_freq, float sample_freq) {
 800179e:	b580      	push	{r7, lr}
 80017a0:	b084      	sub	sp, #16
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	60f8      	str	r0, [r7, #12]
 80017a6:	ed87 0a02 	vstr	s0, [r7, #8]
 80017aa:	edc7 0a01 	vstr	s1, [r7, #4]
    pt1_filter_init_lowpass(&f->s1, cutoff_freq, sample_freq);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	edd7 0a01 	vldr	s1, [r7, #4]
 80017b4:	ed97 0a02 	vldr	s0, [r7, #8]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff59 	bl	8001670 <pt1_filter_init_lowpass>
    pt1_filter_init_lowpass(&f->s2, cutoff_freq, sample_freq);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3310      	adds	r3, #16
 80017c2:	edd7 0a01 	vldr	s1, [r7, #4]
 80017c6:	ed97 0a02 	vldr	s0, [r7, #8]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7ff ff50 	bl	8001670 <pt1_filter_init_lowpass>
	f->sample_freq = sample_freq;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	621a      	str	r2, [r3, #32]
    f->cutoff_freq = cutoff_freq;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	68ba      	ldr	r2, [r7, #8]
 80017da:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <pt2_filter_apply_lowpass>:

float pt2_filter_apply_lowpass(pt2_filter_t *f, float x) {
 80017e4:	b590      	push	{r4, r7, lr}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	ed87 0a00 	vstr	s0, [r7]
    return pt1_filter_apply_lowpass(&f->s2, pt1_filter_apply_lowpass(&f->s1, x));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f103 0410 	add.w	r4, r3, #16
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	ed97 0a00 	vldr	s0, [r7]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff ff9b 	bl	8001738 <pt1_filter_apply_lowpass>
 8001802:	eef0 7a40 	vmov.f32	s15, s0
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	4620      	mov	r0, r4
 800180c:	f7ff ff94 	bl	8001738 <pt1_filter_apply_lowpass>
 8001810:	eef0 7a40 	vmov.f32	s15, s0
}
 8001814:	eeb0 0a67 	vmov.f32	s0, s15
 8001818:	370c      	adds	r7, #12
 800181a:	46bd      	mov	sp, r7
 800181c:	bd90      	pop	{r4, r7, pc}

0800181e <pt2_filter_reset>:

void pt2_filter_reset(pt2_filter_t *f) {
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
    pt1_filter_reset(&f->s1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ffaa 	bl	8001782 <pt1_filter_reset>
    pt1_filter_reset(&f->s2);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	3310      	adds	r3, #16
 8001832:	4618      	mov	r0, r3
 8001834:	f7ff ffa5 	bl	8001782 <pt1_filter_reset>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <flight_control_loop_arm_esc>:
// https://articulatedrobotics.xyz/tools/rotation-calculator/
//static quaternion ground_default_position_q = { .w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f };	// angle2quat();
static quaternion ground_default_position_q = { .w = 0.999698f, .x = 0.007852f, .y = 0.023297f, .z = 0.000183f };


void flight_control_loop_arm_esc(flight_control_loop_t* fcl) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b082      	sub	sp, #8
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800184e:	f04f 31ff 	mov.w	r1, #4294967295
 8001852:	4618      	mov	r0, r3
 8001854:	f013 fd2a 	bl	80152ac <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 1;
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800186c:	2300      	movs	r3, #0
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	f013 fa99 	bl	8014da8 <xQueueGenericSend>
	#endif
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <flight_control_loop_disarm_esc>:

void flight_control_loop_disarm_esc(flight_control_loop_t* fcl) {
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	4618      	mov	r0, r3
 8001892:	f013 fd0b 	bl	80152ac <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 0;
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80018aa:	2300      	movs	r3, #0
 80018ac:	2200      	movs	r2, #0
 80018ae:	2100      	movs	r1, #0
 80018b0:	f013 fa7a 	bl	8014da8 <xQueueGenericSend>
	#endif
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <flight_control_loop_are_esc_armed>:

int flight_control_loop_are_esc_armed(flight_control_loop_t* fcl) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	int flag;
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80018ca:	f04f 31ff 	mov.w	r1, #4294967295
 80018ce:	4618      	mov	r0, r3
 80018d0:	f013 fcec 	bl	80152ac <xQueueSemaphoreTake>
	#endif
	flag = fcl->are_esc_armed;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f893 33c0 	ldrb.w	r3, [r3, #960]	@ 0x3c0
 80018da:	f343 0300 	sbfx	r3, r3, #0, #1
 80018de:	b25b      	sxtb	r3, r3
 80018e0:	60fb      	str	r3, [r7, #12]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80018e8:	2300      	movs	r3, #0
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	f013 fa5b 	bl	8014da8 <xQueueGenericSend>
	#endif
	return flag;
 80018f2:	68fb      	ldr	r3, [r7, #12]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <flight_control_loop_init>:
	fcl->write_throttle = hook;
	fcl->write_throttle_hook_context = context;
}


void flight_control_loop_init(flight_control_loop_t* fcl) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
	memset(fcl, 0, sizeof(flight_control_loop_t));
 8001904:	f240 4204 	movw	r2, #1028	@ 0x404
 8001908:	2100      	movs	r1, #0
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f019 fdf2 	bl	801b4f4 <memset>

	// Initialize IMU and attitude controller here (not shown)
	imu_init(
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	ed9f 2a87 	vldr	s4, [pc, #540]	@ 8001b30 <flight_control_loop_init+0x234>
 8001916:	eddf 1a86 	vldr	s3, [pc, #536]	@ 8001b30 <flight_control_loop_init+0x234>
 800191a:	ed9f 1a85 	vldr	s2, [pc, #532]	@ 8001b30 <flight_control_loop_init+0x234>
 800191e:	eddf 0a85 	vldr	s1, [pc, #532]	@ 8001b34 <flight_control_loop_init+0x238>
 8001922:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001926:	4618      	mov	r0, r3
 8001928:	f001 faf2 	bl	8002f10 <imu_init>
		ACCELEROMETER_SAMPLE_RATE_HZ,
		GYRO_SAMPLE_RATE_HZ,
		FLIGHT_CONTROLLER_PID_FREQ_HZ
	);

	imu_set_accel_bias(&fcl->imu, (coord3D) { accelerometer_bias[0], accelerometer_bias[1], accelerometer_bias[2] }, accelerometer_A_1);
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	4b82      	ldr	r3, [pc, #520]	@ (8001b38 <flight_control_loop_init+0x23c>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	4b80      	ldr	r3, [pc, #512]	@ (8001b38 <flight_control_loop_init+0x23c>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b38 <flight_control_loop_init+0x23c>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	61fb      	str	r3, [r7, #28]
 8001940:	edd7 6a05 	vldr	s13, [r7, #20]
 8001944:	ed97 7a06 	vldr	s14, [r7, #24]
 8001948:	edd7 7a07 	vldr	s15, [r7, #28]
 800194c:	497b      	ldr	r1, [pc, #492]	@ (8001b3c <flight_control_loop_init+0x240>)
 800194e:	eeb0 0a66 	vmov.f32	s0, s13
 8001952:	eef0 0a47 	vmov.f32	s1, s14
 8001956:	eeb0 1a67 	vmov.f32	s2, s15
 800195a:	4610      	mov	r0, r2
 800195c:	f001 fd30 	bl	80033c0 <imu_set_accel_bias>
	imu_set_gyro_bias(&fcl->imu, (coord3D) { gyro_bias[0], gyro_bias[1], gyro_bias[2] });
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4b77      	ldr	r3, [pc, #476]	@ (8001b40 <flight_control_loop_init+0x244>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	4b75      	ldr	r3, [pc, #468]	@ (8001b40 <flight_control_loop_init+0x244>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	4b74      	ldr	r3, [pc, #464]	@ (8001b40 <flight_control_loop_init+0x244>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	edd7 6a02 	vldr	s13, [r7, #8]
 8001978:	ed97 7a03 	vldr	s14, [r7, #12]
 800197c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001980:	eeb0 0a66 	vmov.f32	s0, s13
 8001984:	eef0 0a47 	vmov.f32	s1, s14
 8001988:	eeb0 1a67 	vmov.f32	s2, s15
 800198c:	4610      	mov	r0, r2
 800198e:	f001 fcf5 	bl	800337c <imu_set_gyro_bias>
	imu_set_leveled_attitude(&fcl->imu, ground_default_position_q);
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	4b6b      	ldr	r3, [pc, #428]	@ (8001b44 <flight_control_loop_init+0x248>)
 8001996:	ed93 6a00 	vldr	s12, [r3]
 800199a:	edd3 6a01 	vldr	s13, [r3, #4]
 800199e:	ed93 7a02 	vldr	s14, [r3, #8]
 80019a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80019a6:	eeb0 0a46 	vmov.f32	s0, s12
 80019aa:	eef0 0a66 	vmov.f32	s1, s13
 80019ae:	eeb0 1a47 	vmov.f32	s2, s14
 80019b2:	eef0 1a67 	vmov.f32	s3, s15
 80019b6:	4610      	mov	r0, r2
 80019b8:	f001 fb3a 	bl	8003030 <imu_set_leveled_attitude>

	attitude_controller_init(
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80019c2:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8001b48 <flight_control_loop_init+0x24c>
 80019c6:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8001b4c <flight_control_loop_init+0x250>
 80019ca:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff fb36 	bl	8001040 <attitude_controller_init>
		RATE_GAIN,
		MAX_ANGLE,
		MAX_RATE
	);

	rate_controller_init(
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019da:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 8001b50 <flight_control_loop_init+0x254>
 80019de:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80019e2:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001b30 <flight_control_loop_init+0x234>
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 fad0 	bl	8003f8c <rate_controller_init>
		FLIGHT_CONTROLLER_PID_FREQ_HZ,
		D_TERM_PID_FILTER_CUTOFF_FREQ_HZ,
		FF_TERM_PID_FILTER_CUTOFF_FREQ_HZ
	);

	rate_controller_init_roll_pid(
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019f2:	ed9f 2a58 	vldr	s4, [pc, #352]	@ 8001b54 <flight_control_loop_init+0x258>
 80019f6:	eddf 1a58 	vldr	s3, [pc, #352]	@ 8001b58 <flight_control_loop_init+0x25c>
 80019fa:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 8001b54 <flight_control_loop_init+0x258>
 80019fe:	eef0 0a0c 	vmov.f32	s1, #12	@ 0x40600000  3.5
 8001a02:	ed9f 0a56 	vldr	s0, [pc, #344]	@ 8001b5c <flight_control_loop_init+0x260>
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fb4e 	bl	80040a8 <rate_controller_init_roll_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_pitch_pid(
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001a12:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a16:	eddf 1a50 	vldr	s3, [pc, #320]	@ 8001b58 <flight_control_loop_init+0x25c>
 8001a1a:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a1e:	eef0 0a0c 	vmov.f32	s1, #12	@ 0x40600000  3.5
 8001a22:	ed9f 0a4e 	vldr	s0, [pc, #312]	@ 8001b5c <flight_control_loop_init+0x260>
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fb70 	bl	800410c <rate_controller_init_pitch_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_yaw_pid(
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001a32:	ed9f 2a48 	vldr	s4, [pc, #288]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a36:	eddf 1a4a 	vldr	s3, [pc, #296]	@ 8001b60 <flight_control_loop_init+0x264>
 8001a3a:	ed9f 1a46 	vldr	s2, [pc, #280]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a3e:	eef2 0a08 	vmov.f32	s1, #40	@ 0x41400000  12.0
 8001a42:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f002 fb92 	bl	8004170 <rate_controller_init_yaw_pid>
		CONTROLLER_YAW_PID_KD,
		CONTROLLER_YAW_MAX_INTEGRAL_LIMIT,
		CONTROLLER_YAW_PID_KFF
	);

	rc_attitude_control_init_roll(
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a52:	ed9f 2a44 	vldr	s4, [pc, #272]	@ 8001b64 <flight_control_loop_init+0x268>
 8001a56:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a5a:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8001b4c <flight_control_loop_init+0x250>
 8001a5e:	eddf 0a42 	vldr	s1, [pc, #264]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001a62:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8001b50 <flight_control_loop_init+0x254>
 8001a66:	2101      	movs	r1, #1
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f002 fe97 	bl	800479c <rc_attitude_control_init_roll>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_pitch(
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a74:	ed9f 2a3b 	vldr	s4, [pc, #236]	@ 8001b64 <flight_control_loop_init+0x268>
 8001a78:	eddf 1a36 	vldr	s3, [pc, #216]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a7c:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8001b4c <flight_control_loop_init+0x250>
 8001a80:	eddf 0a39 	vldr	s1, [pc, #228]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001a84:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8001b50 <flight_control_loop_init+0x254>
 8001a88:	2101      	movs	r1, #1
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f002 fee3 	bl	8004856 <rc_attitude_control_init_pitch>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_yaw(
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a96:	ed9f 2a33 	vldr	s4, [pc, #204]	@ 8001b64 <flight_control_loop_init+0x268>
 8001a9a:	eddf 1a2e 	vldr	s3, [pc, #184]	@ 8001b54 <flight_control_loop_init+0x258>
 8001a9e:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8001b4c <flight_control_loop_init+0x250>
 8001aa2:	eddf 0a31 	vldr	s1, [pc, #196]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001aa6:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001b50 <flight_control_loop_init+0x254>
 8001aaa:	2101      	movs	r1, #1
 8001aac:	4618      	mov	r0, r3
 8001aae:	f002 ff31 	bl	8004914 <rc_attitude_control_init_yaw>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_throttle(
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001ab8:	ed9f 2a2a 	vldr	s4, [pc, #168]	@ 8001b64 <flight_control_loop_init+0x268>
 8001abc:	eddf 1a25 	vldr	s3, [pc, #148]	@ 8001b54 <flight_control_loop_init+0x258>
 8001ac0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001ac4:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001b68 <flight_control_loop_init+0x26c>
 8001ac8:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001b50 <flight_control_loop_init+0x254>
 8001acc:	2101      	movs	r1, #1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 ff80 	bl	80049d4 <rc_attitude_control_init_throttle>
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

#if MUTEX_ESP_ENABLE != 0
	fcl->imu_mutex = xSemaphoreCreateMutex();
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	f013 f94e 	bl	8014d76 <xQueueCreateMutex>
 8001ada:	4602      	mov	r2, r0
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
	fcl->rate_controller_mutex = xSemaphoreCreateMutex();
 8001ae2:	2001      	movs	r0, #1
 8001ae4:	f013 f947 	bl	8014d76 <xQueueCreateMutex>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
	fcl->attitude_controller_mutex = xSemaphoreCreateMutex();
 8001af0:	2001      	movs	r0, #1
 8001af2:	f013 f940 	bl	8014d76 <xQueueCreateMutex>
 8001af6:	4602      	mov	r2, r0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f8c3 23f4 	str.w	r2, [r3, #1012]	@ 0x3f4
	fcl->rc_attitude_control_mutex = xSemaphoreCreateMutex();
 8001afe:	2001      	movs	r0, #1
 8001b00:	f013 f939 	bl	8014d76 <xQueueCreateMutex>
 8001b04:	4602      	mov	r2, r0
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
	fcl->motor_throttle_mutex = xSemaphoreCreateMutex();
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f013 f932 	bl	8014d76 <xQueueCreateMutex>
 8001b12:	4602      	mov	r2, r0
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
	fcl->flags_mutex = xSemaphoreCreateMutex();
 8001b1a:	2001      	movs	r0, #1
 8001b1c:	f013 f92b 	bl	8014d76 <xQueueCreateMutex>
 8001b20:	4602      	mov	r2, r0
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
#endif
}
 8001b28:	bf00      	nop
 8001b2a:	3720      	adds	r7, #32
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	447a0000 	.word	0x447a0000
 8001b34:	42a00000 	.word	0x42a00000
 8001b38:	20000000 	.word	0x20000000
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	20000030 	.word	0x20000030
 8001b44:	2000003c 	.word	0x2000003c
 8001b48:	40a78d36 	.word	0x40a78d36
 8001b4c:	3f1c61aa 	.word	0x3f1c61aa
 8001b50:	42200000 	.word	0x42200000
 8001b54:	00000000 	.word	0x00000000
 8001b58:	3f3f7cd0 	.word	0x3f3f7cd0
 8001b5c:	3f19999a 	.word	0x3f19999a
 8001b60:	3e5f66f3 	.word	0x3e5f66f3
 8001b64:	42c80000 	.word	0x42c80000
 8001b68:	3d75c28f 	.word	0x3d75c28f

08001b6c <flight_control_loop_tick>:


void flight_control_loop_tick(flight_control_loop_t* fcl) {
 8001b6c:	b590      	push	{r4, r7, lr}
 8001b6e:	b09b      	sub	sp, #108	@ 0x6c
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	6078      	str	r0, [r7, #4]
	// RC input
	coord3D target_attitude = { 0 };
 8001b74:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	4618      	mov	r0, r3
 8001b92:	f013 fb8b 	bl	80152ac <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8001b9c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ba0:	f103 0408 	add.w	r4, r3, #8
 8001ba4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001ba8:	1d1a      	adds	r2, r3, #4
 8001baa:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001bae:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	4623      	mov	r3, r4
 8001bb6:	f002 ff8d 	bl	8004ad4 <rc_attitude_control_get_processed>
		&(target_attitude.z),
		&target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	f013 f8ef 	bl	8014da8 <xQueueGenericSend>
	// Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
	quaternion body_frame_estimated_q;

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f013 fb69 	bl	80152ac <xQueueSemaphoreTake>
#endif
	imu_get_estimated_data(&fcl->imu, &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001be0:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001be4:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001be8:	f001 fc38 	bl	800345c <imu_get_estimated_data>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2100      	movs	r1, #0
 8001bf8:	f013 f8d6 	bl	8014da8 <xQueueGenericSend>
#endif


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->attitude_controller_mutex, portMAX_DELAY);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8001c02:	f04f 31ff 	mov.w	r1, #4294967295
 8001c06:	4618      	mov	r0, r3
 8001c08:	f013 fb50 	bl	80152ac <xQueueSemaphoreTake>
#endif
	// Update attitude controller
	attitude_controller_angle_mode_update(
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8001c12:	edd7 5a14 	vldr	s11, [r7, #80]	@ 0x50
 8001c16:	ed97 5a15 	vldr	s10, [r7, #84]	@ 0x54
 8001c1a:	edd7 4a16 	vldr	s9, [r7, #88]	@ 0x58
 8001c1e:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001c22:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001c26:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c2a:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c2e:	eeb0 3a64 	vmov.f32	s6, s9
 8001c32:	eef0 2a45 	vmov.f32	s5, s10
 8001c36:	eeb0 2a65 	vmov.f32	s4, s11
 8001c3a:	eeb0 0a46 	vmov.f32	s0, s12
 8001c3e:	eef0 0a66 	vmov.f32	s1, s13
 8001c42:	eeb0 1a47 	vmov.f32	s2, s14
 8001c46:	eef0 1a67 	vmov.f32	s3, s15
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f7ff fab8 	bl	80011c0 <attitude_controller_angle_mode_update>
		target_attitude.x, // target roll
		target_attitude.y,  // target pitch
		target_attitude.z   // target yaw rate
	);

	float target_roll_rate = 0.0f;
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 8001c56:	f04f 0300 	mov.w	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 8001c5c:	f04f 0300 	mov.w	r3, #0
 8001c60:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001c68:	f107 0318 	add.w	r3, r7, #24
 8001c6c:	f107 021c 	add.w	r2, r7, #28
 8001c70:	f107 0120 	add.w	r1, r7, #32
 8001c74:	f7ff fc76 	bl	8001564 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->attitude_controller_mutex);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 8001c7e:	2300      	movs	r3, #0
 8001c80:	2200      	movs	r2, #0
 8001c82:	2100      	movs	r1, #0
 8001c84:	f013 f890 	bl	8014da8 <xQueueGenericSend>
#endif

	float pid_roll_output = 0.0f;
 8001c88:	f04f 0300 	mov.w	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 8001c8e:	f04f 0300 	mov.w	r3, #0
 8001c92:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 8001c94:	f04f 0300 	mov.w	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rate_controller_mutex, portMAX_DELAY);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8001ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f013 fb01 	bl	80152ac <xQueueSemaphoreTake>
#endif
	if (target_throttle > THROTTLE_IDLE)
 8001caa:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001cae:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001dd4 <flight_control_loop_tick+0x268>
 8001cb2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cba:	dd1e      	ble.n	8001cfa <flight_control_loop_tick+0x18e>
	{
		rate_controller_update(
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001cc2:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cc6:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001cca:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001cce:	ed97 6a08 	vldr	s12, [r7, #32]
 8001cd2:	edd7 5a07 	vldr	s11, [r7, #28]
 8001cd6:	ed97 5a06 	vldr	s10, [r7, #24]
 8001cda:	eef0 2a45 	vmov.f32	s5, s10
 8001cde:	eeb0 2a65 	vmov.f32	s4, s11
 8001ce2:	eef0 1a46 	vmov.f32	s3, s12
 8001ce6:	eeb0 1a66 	vmov.f32	s2, s13
 8001cea:	eef0 0a47 	vmov.f32	s1, s14
 8001cee:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f002 fa6e 	bl	80041d4 <rate_controller_update>
 8001cf8:	e005      	b.n	8001d06 <flight_control_loop_tick+0x19a>
			target_pitch_rate,
			target_yaw_rate
		);
	}
	else {
		rate_controller_reset(&fcl->rate_controller);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001d00:	4618      	mov	r0, r3
 8001d02:	f002 fbf5 	bl	80044f0 <rate_controller_reset>
	}

	// Get PID outputs
	rate_controller_get_pid_outputs(
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	f107 0210 	add.w	r2, r7, #16
 8001d14:	f107 0114 	add.w	r1, r7, #20
 8001d18:	f002 fc3e 	bl	8004598 <rate_controller_get_pid_outputs>
		&pid_pitch_output,
		&pid_yaw_output
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rate_controller_mutex);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8001d22:	2300      	movs	r3, #0
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	f013 f83e 	bl	8014da8 <xQueueGenericSend>
#endif

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001d32:	f04f 31ff 	mov.w	r1, #4294967295
 8001d36:	4618      	mov	r0, r3
 8001d38:	f013 fab8 	bl	80152ac <xQueueSemaphoreTake>
#endif
	// Mix PID outputs to motor commands
	if (flight_control_loop_are_esc_armed(fcl) != 0)
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff fdbd 	bl	80018bc <flight_control_loop_are_esc_armed>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d018      	beq.n	8001d7a <flight_control_loop_tick+0x20e>
	{
		motor_mixer_quad_x(
 8001d48:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d4c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d50:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d54:	ed97 6a03 	vldr	s12, [r7, #12]
			target_throttle,
			pid_roll_output,
			pid_pitch_output,
			pid_yaw_output,
			THROTTLE_IDLE,
			fcl->motor_throttle
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
		motor_mixer_quad_x(
 8001d5e:	4618      	mov	r0, r3
 8001d60:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8001dd4 <flight_control_loop_tick+0x268>
 8001d64:	eef0 1a46 	vmov.f32	s3, s12
 8001d68:	eeb0 1a66 	vmov.f32	s2, s13
 8001d6c:	eef0 0a47 	vmov.f32	s1, s14
 8001d70:	eeb0 0a67 	vmov.f32	s0, s15
 8001d74:	f001 fe10 	bl	8003998 <motor_mixer_quad_x>
 8001d78:	e010      	b.n	8001d9c <flight_control_loop_tick+0x230>
		);
	}
	else {
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d7e:	e00a      	b.n	8001d96 <flight_control_loop_tick+0x22a>
			fcl->motor_throttle[i] = 0.0f;
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d84:	33ec      	adds	r3, #236	@ 0xec
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	4413      	add	r3, r2
 8001d8a:	f04f 0200 	mov.w	r2, #0
 8001d8e:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d90:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d92:	3301      	adds	r3, #1
 8001d94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	ddf1      	ble.n	8001d80 <flight_control_loop_tick+0x214>
		}
	}
	if (fcl->write_throttle) {
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d00a      	beq.n	8001dbc <flight_control_loop_tick+0x250>
		fcl->write_throttle(fcl, fcl->motor_throttle, fcl->write_throttle_hook_context);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	f502 716c 	add.w	r1, r2, #944	@ 0x3b0
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	f8d2 23e8 	ldr.w	r2, [r2, #1000]	@ 0x3e8
 8001db8:	6878      	ldr	r0, [r7, #4]
 8001dba:	4798      	blx	r3
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	f012 ffee 	bl	8014da8 <xQueueGenericSend>
#endif

}
 8001dcc:	bf00      	nop
 8001dce:	3764      	adds	r7, #100	@ 0x64
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}
 8001dd4:	3d6147ae 	.word	0x3d6147ae

08001dd8 <flight_control_loop_update_rc_control>:

void flight_control_loop_update_rc_control(flight_control_loop_t* fcl, coord3D target_attitude, float target_throttle) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6178      	str	r0, [r7, #20]
 8001de0:	eef0 6a40 	vmov.f32	s13, s0
 8001de4:	eeb0 7a60 	vmov.f32	s14, s1
 8001de8:	eef0 7a41 	vmov.f32	s15, s2
 8001dec:	edc7 1a01 	vstr	s3, [r7, #4]
 8001df0:	edc7 6a02 	vstr	s13, [r7, #8]
 8001df4:	ed87 7a03 	vstr	s14, [r7, #12]
 8001df8:	edc7 7a04 	vstr	s15, [r7, #16]

	target_attitude.x = CLAMP(target_attitude.x, -1.0f, 1.0f);
 8001dfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e00:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e04:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e0c:	d501      	bpl.n	8001e12 <flight_control_loop_update_rc_control+0x3a>
 8001e0e:	4b41      	ldr	r3, [pc, #260]	@ (8001f14 <flight_control_loop_update_rc_control+0x13c>)
 8001e10:	e00c      	b.n	8001e2c <flight_control_loop_update_rc_control+0x54>
 8001e12:	edd7 7a02 	vldr	s15, [r7, #8]
 8001e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e22:	dd02      	ble.n	8001e2a <flight_control_loop_update_rc_control+0x52>
 8001e24:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e28:	e000      	b.n	8001e2c <flight_control_loop_update_rc_control+0x54>
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	60bb      	str	r3, [r7, #8]
	target_attitude.y = CLAMP(target_attitude.y, -1.0f, 1.0f);
 8001e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e32:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e3e:	d501      	bpl.n	8001e44 <flight_control_loop_update_rc_control+0x6c>
 8001e40:	4b34      	ldr	r3, [pc, #208]	@ (8001f14 <flight_control_loop_update_rc_control+0x13c>)
 8001e42:	e00c      	b.n	8001e5e <flight_control_loop_update_rc_control+0x86>
 8001e44:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e54:	dd02      	ble.n	8001e5c <flight_control_loop_update_rc_control+0x84>
 8001e56:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e5a:	e000      	b.n	8001e5e <flight_control_loop_update_rc_control+0x86>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	60fb      	str	r3, [r7, #12]
	target_attitude.z = CLAMP(target_attitude.z, -1.0f, 1.0f);
 8001e60:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e64:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e70:	d501      	bpl.n	8001e76 <flight_control_loop_update_rc_control+0x9e>
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <flight_control_loop_update_rc_control+0x13c>)
 8001e74:	e00c      	b.n	8001e90 <flight_control_loop_update_rc_control+0xb8>
 8001e76:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e7a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e7e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e86:	dd02      	ble.n	8001e8e <flight_control_loop_update_rc_control+0xb6>
 8001e88:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e8c:	e000      	b.n	8001e90 <flight_control_loop_update_rc_control+0xb8>
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	613b      	str	r3, [r7, #16]
	target_throttle = CLAMP(target_throttle, 0.0f, 1.0f);
 8001e92:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e96:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e9e:	d502      	bpl.n	8001ea6 <flight_control_loop_update_rc_control+0xce>
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	e00c      	b.n	8001ec0 <flight_control_loop_update_rc_control+0xe8>
 8001ea6:	edd7 7a01 	vldr	s15, [r7, #4]
 8001eaa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001eae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	dd02      	ble.n	8001ebe <flight_control_loop_update_rc_control+0xe6>
 8001eb8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ebc:	e000      	b.n	8001ec0 <flight_control_loop_update_rc_control+0xe8>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	607b      	str	r3, [r7, #4]

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001ec2:	697b      	ldr	r3, [r7, #20]
 8001ec4:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f013 f9ed 	bl	80152ac <xQueueSemaphoreTake>
#endif
	rc_attitude_control_update(
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001ed8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001edc:	ed97 7a03 	vldr	s14, [r7, #12]
 8001ee0:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ee4:	edd7 1a01 	vldr	s3, [r7, #4]
 8001ee8:	eeb0 1a66 	vmov.f32	s2, s13
 8001eec:	eef0 0a47 	vmov.f32	s1, s14
 8001ef0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f002 fdc9 	bl	8004a8c <rc_attitude_control_update>
		target_attitude.z,
		target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001f00:	2300      	movs	r3, #0
 8001f02:	2200      	movs	r2, #0
 8001f04:	2100      	movs	r1, #0
 8001f06:	f012 ff4f 	bl	8014da8 <xQueueGenericSend>
#endif
}
 8001f0a:	bf00      	nop
 8001f0c:	3718      	adds	r7, #24
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	bf800000 	.word	0xbf800000

08001f18 <flight_control_loop_update_imu>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
#endif
}

void flight_control_loop_update_imu(flight_control_loop_t* fcl, coord3D gyro_data, coord3D accel_data) {
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b088      	sub	sp, #32
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	61f8      	str	r0, [r7, #28]
 8001f20:	eeb0 5a40 	vmov.f32	s10, s0
 8001f24:	eef0 5a60 	vmov.f32	s11, s1
 8001f28:	eeb0 6a41 	vmov.f32	s12, s2
 8001f2c:	eef0 6a61 	vmov.f32	s13, s3
 8001f30:	eeb0 7a42 	vmov.f32	s14, s4
 8001f34:	eef0 7a62 	vmov.f32	s15, s5
 8001f38:	ed87 5a04 	vstr	s10, [r7, #16]
 8001f3c:	edc7 5a05 	vstr	s11, [r7, #20]
 8001f40:	ed87 6a06 	vstr	s12, [r7, #24]
 8001f44:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f48:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f4c:	edc7 7a03 	vstr	s15, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001f50:	69fb      	ldr	r3, [r7, #28]
 8001f52:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001f56:	f04f 31ff 	mov.w	r1, #4294967295
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f013 f9a6 	bl	80152ac <xQueueSemaphoreTake>
#endif
	imu_update(&fcl->imu, accel_data, gyro_data);
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	ed97 5a04 	vldr	s10, [r7, #16]
 8001f66:	edd7 5a05 	vldr	s11, [r7, #20]
 8001f6a:	ed97 6a06 	vldr	s12, [r7, #24]
 8001f6e:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f72:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f7a:	eef0 1a45 	vmov.f32	s3, s10
 8001f7e:	eeb0 2a65 	vmov.f32	s4, s11
 8001f82:	eef0 2a46 	vmov.f32	s5, s12
 8001f86:	eeb0 0a66 	vmov.f32	s0, s13
 8001f8a:	eef0 0a47 	vmov.f32	s1, s14
 8001f8e:	eeb0 1a67 	vmov.f32	s2, s15
 8001f92:	4618      	mov	r0, r3
 8001f94:	f001 f9b1 	bl	80032fa <imu_update>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2100      	movs	r1, #0
 8001fa4:	f012 ff00 	bl	8014da8 <xQueueGenericSend>
#endif
}
 8001fa8:	bf00      	nop
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <flight_control_loop_get_motors_throttle>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
#endif
}

void flight_control_loop_get_motors_throttle(flight_control_loop_t* fcl, float motors_throttle[NUM_MOTORS]) {
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
 8001fb8:	6039      	str	r1, [r7, #0]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001fc0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f013 f971 	bl	80152ac <xQueueSemaphoreTake>
#endif
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	e00d      	b.n	8001fec <flight_control_loop_get_motors_throttle+0x3c>
	{
		motors_throttle[i] = fcl->motor_throttle[i];
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	6879      	ldr	r1, [r7, #4]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	32ec      	adds	r2, #236	@ 0xec
 8001fde:	0092      	lsls	r2, r2, #2
 8001fe0:	440a      	add	r2, r1
 8001fe2:	6812      	ldr	r2, [r2, #0]
 8001fe4:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d9ee      	bls.n	8001fd0 <flight_control_loop_get_motors_throttle+0x20>
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2100      	movs	r1, #0
 8001ffe:	f012 fed3 	bl	8014da8 <xQueueGenericSend>
#endif
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <set_cmd_fn>:
//    return 0;
//}


/* Command to get called */
int32_t set_cmd_fn(int32_t argc, char** argv) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
	if(argc < 2) {
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b01      	cmp	r3, #1
 800201a:	dc07      	bgt.n	800202c <set_cmd_fn+0x20>
		usb_printf("\r\n");
 800201c:	4858      	ldr	r0, [pc, #352]	@ (8002180 <set_cmd_fn+0x174>)
 800201e:	f015 ff11 	bl	8017e44 <usb_printf>
		usb_printf("Type \"set list\" to list all parameters that can be set.\r\n");
 8002022:	4858      	ldr	r0, [pc, #352]	@ (8002184 <set_cmd_fn+0x178>)
 8002024:	f015 ff0e 	bl	8017e44 <usb_printf>
		return 0;
 8002028:	2300      	movs	r3, #0
 800202a:	e0a4      	b.n	8002176 <set_cmd_fn+0x16a>
	}

	int argc_index = 1;
 800202c:	2301      	movs	r3, #1
 800202e:	61bb      	str	r3, [r7, #24]

	if(strcmp(argv[argc_index], "list") == 0){
 8002030:	69bb      	ldr	r3, [r7, #24]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	683a      	ldr	r2, [r7, #0]
 8002036:	4413      	add	r3, r2
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4953      	ldr	r1, [pc, #332]	@ (8002188 <set_cmd_fn+0x17c>)
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe f8c7 	bl	80001d0 <strcmp>
 8002042:	4603      	mov	r3, r0
 8002044:	2b00      	cmp	r3, #0
 8002046:	d106      	bne.n	8002056 <set_cmd_fn+0x4a>
		usb_printf("\r\n");
 8002048:	484d      	ldr	r0, [pc, #308]	@ (8002180 <set_cmd_fn+0x174>)
 800204a:	f015 fefb 	bl	8017e44 <usb_printf>
		usb_printf("rate_controller_roll_pid (float)kp (float)ki (float)kd (float)max_integral_error\r\n");
 800204e:	484f      	ldr	r0, [pc, #316]	@ (800218c <set_cmd_fn+0x180>)
 8002050:	f015 fef8 	bl	8017e44 <usb_printf>
 8002054:	e08e      	b.n	8002174 <set_cmd_fn+0x168>
	}

	// Rate controller PID
	else if(strcmp(argv[argc_index], "rate_controller_roll_pid") == 0){
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	4413      	add	r3, r2
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	494b      	ldr	r1, [pc, #300]	@ (8002190 <set_cmd_fn+0x184>)
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f8b4 	bl	80001d0 <strcmp>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 8082 	bne.w	8002174 <set_cmd_fn+0x168>
		if(argc >= (1+1+4)){
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b05      	cmp	r3, #5
 8002074:	dd78      	ble.n	8002168 <set_cmd_fn+0x15c>
		#if MUTEX_ESP_ENABLE != 0
			xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8002076:	4b47      	ldr	r3, [pc, #284]	@ (8002194 <set_cmd_fn+0x188>)
 8002078:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800207c:	f04f 31ff 	mov.w	r1, #4294967295
 8002080:	4618      	mov	r0, r3
 8002082:	f013 f913 	bl	80152ac <xQueueSemaphoreTake>
		#endif
			int error_detected = 0;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
			float kp, ki, kd, max_integral_error;
			argc_index++;
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	3301      	adds	r3, #1
 800208e:	61bb      	str	r3, [r7, #24]
			if(sscanf(argv[argc_index], "%f", &kp) != 1) {error_detected = 1;}
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	4413      	add	r3, r2
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f107 0214 	add.w	r2, r7, #20
 800209e:	493e      	ldr	r1, [pc, #248]	@ (8002198 <set_cmd_fn+0x18c>)
 80020a0:	4618      	mov	r0, r3
 80020a2:	f019 f8cb 	bl	801b23c <siscanf>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d001      	beq.n	80020b0 <set_cmd_fn+0xa4>
 80020ac:	2301      	movs	r3, #1
 80020ae:	61fb      	str	r3, [r7, #28]
			argc_index++;
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	3301      	adds	r3, #1
 80020b4:	61bb      	str	r3, [r7, #24]
			if(sscanf(argv[argc_index], "%f", &ki) != 1) {error_detected = 1;}
 80020b6:	69bb      	ldr	r3, [r7, #24]
 80020b8:	009b      	lsls	r3, r3, #2
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	4413      	add	r3, r2
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f107 0210 	add.w	r2, r7, #16
 80020c4:	4934      	ldr	r1, [pc, #208]	@ (8002198 <set_cmd_fn+0x18c>)
 80020c6:	4618      	mov	r0, r3
 80020c8:	f019 f8b8 	bl	801b23c <siscanf>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b01      	cmp	r3, #1
 80020d0:	d001      	beq.n	80020d6 <set_cmd_fn+0xca>
 80020d2:	2301      	movs	r3, #1
 80020d4:	61fb      	str	r3, [r7, #28]
			argc_index++;
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	3301      	adds	r3, #1
 80020da:	61bb      	str	r3, [r7, #24]
			if(sscanf(argv[argc_index], "%f", &kd) != 1) {error_detected = 1;}
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	4413      	add	r3, r2
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f107 020c 	add.w	r2, r7, #12
 80020ea:	492b      	ldr	r1, [pc, #172]	@ (8002198 <set_cmd_fn+0x18c>)
 80020ec:	4618      	mov	r0, r3
 80020ee:	f019 f8a5 	bl	801b23c <siscanf>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d001      	beq.n	80020fc <set_cmd_fn+0xf0>
 80020f8:	2301      	movs	r3, #1
 80020fa:	61fb      	str	r3, [r7, #28]
			argc_index++;
 80020fc:	69bb      	ldr	r3, [r7, #24]
 80020fe:	3301      	adds	r3, #1
 8002100:	61bb      	str	r3, [r7, #24]
			if(sscanf(argv[argc_index], "%f", &max_integral_error) != 1) {error_detected = 1;}
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	683a      	ldr	r2, [r7, #0]
 8002108:	4413      	add	r3, r2
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f107 0208 	add.w	r2, r7, #8
 8002110:	4921      	ldr	r1, [pc, #132]	@ (8002198 <set_cmd_fn+0x18c>)
 8002112:	4618      	mov	r0, r3
 8002114:	f019 f892 	bl	801b23c <siscanf>
 8002118:	4603      	mov	r3, r0
 800211a:	2b01      	cmp	r3, #1
 800211c:	d001      	beq.n	8002122 <set_cmd_fn+0x116>
 800211e:	2301      	movs	r3, #1
 8002120:	61fb      	str	r3, [r7, #28]

			if(error_detected == 0){
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d110      	bne.n	800214a <set_cmd_fn+0x13e>
				fcl.rate_controller.pid_roll.Kp = kp;
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	4a1a      	ldr	r2, [pc, #104]	@ (8002194 <set_cmd_fn+0x188>)
 800212c:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
				fcl.rate_controller.pid_roll.Ki = ki;
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4a18      	ldr	r2, [pc, #96]	@ (8002194 <set_cmd_fn+0x188>)
 8002134:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
				fcl.rate_controller.pid_roll.Kd = kd;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4a16      	ldr	r2, [pc, #88]	@ (8002194 <set_cmd_fn+0x188>)
 800213c:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c
				fcl.rate_controller.pid_roll.integral_max_error = max_integral_error;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	4a14      	ldr	r2, [pc, #80]	@ (8002194 <set_cmd_fn+0x188>)
 8002144:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 8002148:	e005      	b.n	8002156 <set_cmd_fn+0x14a>
			}
			else{
				usb_printf("\r\n");
 800214a:	480d      	ldr	r0, [pc, #52]	@ (8002180 <set_cmd_fn+0x174>)
 800214c:	f015 fe7a 	bl	8017e44 <usb_printf>
				usb_printf("ERROR: Parsing error\r\n");
 8002150:	4812      	ldr	r0, [pc, #72]	@ (800219c <set_cmd_fn+0x190>)
 8002152:	f015 fe77 	bl	8017e44 <usb_printf>
			}
		#if MUTEX_ESP_ENABLE != 0
			xSemaphoreGive(fcl.rate_controller_mutex);
 8002156:	4b0f      	ldr	r3, [pc, #60]	@ (8002194 <set_cmd_fn+0x188>)
 8002158:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 800215c:	2300      	movs	r3, #0
 800215e:	2200      	movs	r2, #0
 8002160:	2100      	movs	r1, #0
 8002162:	f012 fe21 	bl	8014da8 <xQueueGenericSend>
 8002166:	e005      	b.n	8002174 <set_cmd_fn+0x168>
		#endif
		}
		else{
			usb_printf("\r\n");
 8002168:	4805      	ldr	r0, [pc, #20]	@ (8002180 <set_cmd_fn+0x174>)
 800216a:	f015 fe6b 	bl	8017e44 <usb_printf>
			usb_printf("ERROR: Missing parameter\r\n");
 800216e:	480c      	ldr	r0, [pc, #48]	@ (80021a0 <set_cmd_fn+0x194>)
 8002170:	f015 fe68 	bl	8017e44 <usb_printf>
		}
	}

    /* Successful execution */
    return 0;
 8002174:	2300      	movs	r3, #0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3720      	adds	r7, #32
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	0801f208 	.word	0x0801f208
 8002184:	0801f20c 	.word	0x0801f20c
 8002188:	0801f248 	.word	0x0801f248
 800218c:	0801f250 	.word	0x0801f250
 8002190:	0801f2a4 	.word	0x0801f2a4
 8002194:	2000124c 	.word	0x2000124c
 8002198:	0801f2c0 	.word	0x0801f2c0
 800219c:	0801f2c4 	.word	0x0801f2c4
 80021a0:	0801f2dc 	.word	0x0801f2dc

080021a4 <get_cmd_fn>:

int32_t get_cmd_fn(int32_t argc, char** argv) {
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b084      	sub	sp, #16
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
	if(argc < 2) {
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	dc07      	bgt.n	80021c4 <get_cmd_fn+0x20>
		usb_printf("\r\n");
 80021b4:	483b      	ldr	r0, [pc, #236]	@ (80022a4 <get_cmd_fn+0x100>)
 80021b6:	f015 fe45 	bl	8017e44 <usb_printf>
		usb_printf("Type \"get list\" to list all parameters that can be set.\r\n");
 80021ba:	483b      	ldr	r0, [pc, #236]	@ (80022a8 <get_cmd_fn+0x104>)
 80021bc:	f015 fe42 	bl	8017e44 <usb_printf>
		return 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e06b      	b.n	800229c <get_cmd_fn+0xf8>
	}

	int argc_index = 1;
 80021c4:	2301      	movs	r3, #1
 80021c6:	60fb      	str	r3, [r7, #12]

	if(strcmp(argv[argc_index], "list") == 0){
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	009b      	lsls	r3, r3, #2
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4936      	ldr	r1, [pc, #216]	@ (80022ac <get_cmd_fn+0x108>)
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fd fffb 	bl	80001d0 <strcmp>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d106      	bne.n	80021ee <get_cmd_fn+0x4a>
		usb_printf("\r\n");
 80021e0:	4830      	ldr	r0, [pc, #192]	@ (80022a4 <get_cmd_fn+0x100>)
 80021e2:	f015 fe2f 	bl	8017e44 <usb_printf>
		usb_printf("rate_controller_roll_pid\r\n");
 80021e6:	4832      	ldr	r0, [pc, #200]	@ (80022b0 <get_cmd_fn+0x10c>)
 80021e8:	f015 fe2c 	bl	8017e44 <usb_printf>
 80021ec:	e055      	b.n	800229a <get_cmd_fn+0xf6>
	}

	// Rate controller PID
	else if(strcmp(argv[argc_index], "rate_controller_roll_pid") == 0){
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	4413      	add	r3, r2
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	492e      	ldr	r1, [pc, #184]	@ (80022b4 <get_cmd_fn+0x110>)
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7fd ffe8 	bl	80001d0 <strcmp>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d149      	bne.n	800229a <get_cmd_fn+0xf6>
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8002206:	4b2c      	ldr	r3, [pc, #176]	@ (80022b8 <get_cmd_fn+0x114>)
 8002208:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800220c:	f04f 31ff 	mov.w	r1, #4294967295
 8002210:	4618      	mov	r0, r3
 8002212:	f013 f84b 	bl	80152ac <xQueueSemaphoreTake>
	#endif
	usb_printf("\r\nParameter: rate_controller_roll_pid\r\n");
 8002216:	4829      	ldr	r0, [pc, #164]	@ (80022bc <get_cmd_fn+0x118>)
 8002218:	f015 fe14 	bl	8017e44 <usb_printf>
	usb_printf("Kp: %f\r\n", fcl.rate_controller.pid_roll.Kp);
 800221c:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <get_cmd_fn+0x114>)
 800221e:	f8d3 3174 	ldr.w	r3, [r3, #372]	@ 0x174
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f9a0 	bl	8000568 <__aeabi_f2d>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4824      	ldr	r0, [pc, #144]	@ (80022c0 <get_cmd_fn+0x11c>)
 800222e:	f015 fe09 	bl	8017e44 <usb_printf>
	usb_printf("Ki: %f\r\n", fcl.rate_controller.pid_roll.Ki);
 8002232:	4b21      	ldr	r3, [pc, #132]	@ (80022b8 <get_cmd_fn+0x114>)
 8002234:	f8d3 3178 	ldr.w	r3, [r3, #376]	@ 0x178
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe f995 	bl	8000568 <__aeabi_f2d>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4820      	ldr	r0, [pc, #128]	@ (80022c4 <get_cmd_fn+0x120>)
 8002244:	f015 fdfe 	bl	8017e44 <usb_printf>
	usb_printf("Kd: %f\r\n", fcl.rate_controller.pid_roll.Kd);
 8002248:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <get_cmd_fn+0x114>)
 800224a:	f8d3 317c 	ldr.w	r3, [r3, #380]	@ 0x17c
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f98a 	bl	8000568 <__aeabi_f2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	481b      	ldr	r0, [pc, #108]	@ (80022c8 <get_cmd_fn+0x124>)
 800225a:	f015 fdf3 	bl	8017e44 <usb_printf>
	usb_printf("integral_max_error: %f\r\n", fcl.rate_controller.pid_roll.integral_max_error);
 800225e:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <get_cmd_fn+0x114>)
 8002260:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002264:	4618      	mov	r0, r3
 8002266:	f7fe f97f 	bl	8000568 <__aeabi_f2d>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4817      	ldr	r0, [pc, #92]	@ (80022cc <get_cmd_fn+0x128>)
 8002270:	f015 fde8 	bl	8017e44 <usb_printf>
	usb_printf("Max Output: +/- %f\r\n", fcl.rate_controller.pid_roll.max_output);
 8002274:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <get_cmd_fn+0x114>)
 8002276:	f8d3 316c 	ldr.w	r3, [r3, #364]	@ 0x16c
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe f974 	bl	8000568 <__aeabi_f2d>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4812      	ldr	r0, [pc, #72]	@ (80022d0 <get_cmd_fn+0x12c>)
 8002286:	f015 fddd 	bl	8017e44 <usb_printf>

	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl.rate_controller_mutex);
 800228a:	4b0b      	ldr	r3, [pc, #44]	@ (80022b8 <get_cmd_fn+0x114>)
 800228c:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8002290:	2300      	movs	r3, #0
 8002292:	2200      	movs	r2, #0
 8002294:	2100      	movs	r1, #0
 8002296:	f012 fd87 	bl	8014da8 <xQueueGenericSend>
	#endif
	}

    /* Successful execution */
    return 0;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	0801f208 	.word	0x0801f208
 80022a8:	0801f2f8 	.word	0x0801f2f8
 80022ac:	0801f248 	.word	0x0801f248
 80022b0:	0801f334 	.word	0x0801f334
 80022b4:	0801f2a4 	.word	0x0801f2a4
 80022b8:	2000124c 	.word	0x2000124c
 80022bc:	0801f350 	.word	0x0801f350
 80022c0:	0801f378 	.word	0x0801f378
 80022c4:	0801f384 	.word	0x0801f384
 80022c8:	0801f390 	.word	0x0801f390
 80022cc:	0801f39c 	.word	0x0801f39c
 80022d0:	0801f3b8 	.word	0x0801f3b8

080022d4 <output_fn>:

void output_fn(const char* str, struct lwshell* lwobj){
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
	usb_printf("%s", str);
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	4803      	ldr	r0, [pc, #12]	@ (80022f0 <output_fn+0x1c>)
 80022e2:	f015 fdaf 	bl	8017e44 <usb_printf>
}
 80022e6:	bf00      	nop
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	0801f3d0 	.word	0x0801f3d0

080022f4 <fp_cli_example_minimal_init>:

/* Example code */
void fp_cli_example_minimal_init(void) {
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
    /* Init library */
    lwshell_init_ex(&lwshell_cli);
 80022f8:	480a      	ldr	r0, [pc, #40]	@ (8002324 <fp_cli_example_minimal_init+0x30>)
 80022fa:	f002 fdd9 	bl	8004eb0 <lwshell_init_ex>

    lwshellr_t lwshell_set_output_fn_ex(lwshell_t* lwobj, lwshell_output_fn out_fn);
    lwshell_set_output_fn_ex(&lwshell_cli, output_fn);
 80022fe:	490a      	ldr	r1, [pc, #40]	@ (8002328 <fp_cli_example_minimal_init+0x34>)
 8002300:	4808      	ldr	r0, [pc, #32]	@ (8002324 <fp_cli_example_minimal_init+0x30>)
 8002302:	f002 fded 	bl	8004ee0 <lwshell_set_output_fn_ex>

    /* Define shell commands */
    lwshell_register_cmd_ex(&lwshell_cli, "set", set_cmd_fn, "set a parameter");
 8002306:	4b09      	ldr	r3, [pc, #36]	@ (800232c <fp_cli_example_minimal_init+0x38>)
 8002308:	4a09      	ldr	r2, [pc, #36]	@ (8002330 <fp_cli_example_minimal_init+0x3c>)
 800230a:	490a      	ldr	r1, [pc, #40]	@ (8002334 <fp_cli_example_minimal_init+0x40>)
 800230c:	4805      	ldr	r0, [pc, #20]	@ (8002324 <fp_cli_example_minimal_init+0x30>)
 800230e:	f002 fdff 	bl	8004f10 <lwshell_register_cmd_ex>
    lwshell_register_cmd_ex(&lwshell_cli, "get", get_cmd_fn, "get a parameter");
 8002312:	4b09      	ldr	r3, [pc, #36]	@ (8002338 <fp_cli_example_minimal_init+0x44>)
 8002314:	4a09      	ldr	r2, [pc, #36]	@ (800233c <fp_cli_example_minimal_init+0x48>)
 8002316:	490a      	ldr	r1, [pc, #40]	@ (8002340 <fp_cli_example_minimal_init+0x4c>)
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <fp_cli_example_minimal_init+0x30>)
 800231a:	f002 fdf9 	bl	8004f10 <lwshell_register_cmd_ex>

}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000338 	.word	0x20000338
 8002328:	080022d5 	.word	0x080022d5
 800232c:	0801f3d4 	.word	0x0801f3d4
 8002330:	0800200d 	.word	0x0800200d
 8002334:	0801f3e4 	.word	0x0801f3e4
 8002338:	0801f3e8 	.word	0x0801f3e8
 800233c:	080021a5 	.word	0x080021a5
 8002340:	0801f3f8 	.word	0x0801f3f8

08002344 <MagCal>:

#ifdef __cplusplus
extern "C" {
#endif

void MagCal(float* _x, float* _y, float* _z, float _bias[3], float A_1[3][3]) {
 8002344:	b480      	push	{r7}
 8002346:	b089      	sub	sp, #36	@ 0x24
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
 8002350:	603b      	str	r3, [r7, #0]
	//h_cal = (xyz - _bias) * A^-1
	float x_temp, y_temp, z_temp;

	x_temp = *_x;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	61fb      	str	r3, [r7, #28]
	y_temp = *_y;
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	61bb      	str	r3, [r7, #24]
	z_temp = *_z;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	617b      	str	r3, [r7, #20]

	x_temp -= _bias[0];
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	edd3 7a00 	vldr	s15, [r3]
 800236a:	ed97 7a07 	vldr	s14, [r7, #28]
 800236e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002372:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp -= _bias[1];
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	3304      	adds	r3, #4
 800237a:	edd3 7a00 	vldr	s15, [r3]
 800237e:	ed97 7a06 	vldr	s14, [r7, #24]
 8002382:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002386:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp -= _bias[2];
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	3308      	adds	r3, #8
 800238e:	edd3 7a00 	vldr	s15, [r3]
 8002392:	ed97 7a05 	vldr	s14, [r7, #20]
 8002396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800239a:	edc7 7a05 	vstr	s15, [r7, #20]


	x_temp = x_temp * A_1[0][0] + y_temp * A_1[1][0] + z_temp * A_1[2][0];
 800239e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023a0:	ed93 7a00 	vldr	s14, [r3]
 80023a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80023a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023ae:	330c      	adds	r3, #12
 80023b0:	edd3 6a00 	vldr	s13, [r3]
 80023b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80023b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023c2:	3318      	adds	r3, #24
 80023c4:	edd3 6a00 	vldr	s13, [r3]
 80023c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80023cc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d4:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp = x_temp * A_1[0][1] + y_temp * A_1[1][1] + z_temp * A_1[2][1];
 80023d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023da:	ed93 7a01 	vldr	s14, [r3, #4]
 80023de:	edd7 7a07 	vldr	s15, [r7, #28]
 80023e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e8:	330c      	adds	r3, #12
 80023ea:	edd3 6a01 	vldr	s13, [r3, #4]
 80023ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80023f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023fc:	3318      	adds	r3, #24
 80023fe:	edd3 6a01 	vldr	s13, [r3, #4]
 8002402:	edd7 7a05 	vldr	s15, [r7, #20]
 8002406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp = x_temp * A_1[0][2] + y_temp * A_1[1][2] + z_temp * A_1[2][2];
 8002412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002414:	ed93 7a02 	vldr	s14, [r3, #8]
 8002418:	edd7 7a07 	vldr	s15, [r7, #28]
 800241c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002420:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002422:	330c      	adds	r3, #12
 8002424:	edd3 6a02 	vldr	s13, [r3, #8]
 8002428:	edd7 7a06 	vldr	s15, [r7, #24]
 800242c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002430:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002436:	3318      	adds	r3, #24
 8002438:	edd3 6a02 	vldr	s13, [r3, #8]
 800243c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002440:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002444:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002448:	edc7 7a05 	vstr	s15, [r7, #20]

	*_x = x_temp;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	69fa      	ldr	r2, [r7, #28]
 8002450:	601a      	str	r2, [r3, #0]
	*_y = y_temp;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	601a      	str	r2, [r3, #0]
	*_z = z_temp;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	601a      	str	r2, [r3, #0]
}
 800245e:	bf00      	nop
 8002460:	3724      	adds	r7, #36	@ 0x24
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr

0800246a <quatnorm>:
// ================================================================
// ===						QUATERNIONS			                ===
// ================================================================
// https://www.mathworks.com/help/aerotbx/referencelist.html?type=function&category=flight-parameters-1&s_tid=CRUX_topnav

float quatnorm(quaternion* q) {
 800246a:	b580      	push	{r7, lr}
 800246c:	b082      	sub	sp, #8
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
	return sqrtf((q->w * q->w) + (q->x * q->x) + (q->y * q->y) + (q->z * q->z));
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	ed93 7a00 	vldr	s14, [r3]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	edd3 7a00 	vldr	s15, [r3]
 800247e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	edd3 6a01 	vldr	s13, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	edd3 7a01 	vldr	s15, [r3, #4]
 800248e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002492:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	edd3 6a02 	vldr	s13, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	edd3 7a02 	vldr	s15, [r3, #8]
 80024a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	edd3 6a03 	vldr	s13, [r3, #12]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80024b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024be:	eeb0 0a67 	vmov.f32	s0, s15
 80024c2:	f016 f9bb 	bl	801883c <sqrtf>
 80024c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80024ca:	eeb0 0a67 	vmov.f32	s0, s15
 80024ce:	3708      	adds	r7, #8
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <quatconj>:

quaternion quatconj(quaternion* q) {
 80024d4:	b490      	push	{r4, r7}
 80024d6:	b08e      	sub	sp, #56	@ 0x38
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6178      	str	r0, [r7, #20]
    quaternion result;
    result.w =  q->w;
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	61bb      	str	r3, [r7, #24]
    result.x = -q->x;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80024e8:	eef1 7a67 	vneg.f32	s15, s15
 80024ec:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = -q->y;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80024f6:	eef1 7a67 	vneg.f32	s15, s15
 80024fa:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = -q->z;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	edd3 7a03 	vldr	s15, [r3, #12]
 8002504:	eef1 7a67 	vneg.f32	s15, s15
 8002508:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 800250c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002510:	f107 0318 	add.w	r3, r7, #24
 8002514:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002516:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800251a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800251c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800251e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002520:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002522:	ee06 0a10 	vmov	s12, r0
 8002526:	ee06 1a90 	vmov	s13, r1
 800252a:	ee07 2a10 	vmov	s14, r2
 800252e:	ee07 3a90 	vmov	s15, r3
}
 8002532:	eeb0 0a46 	vmov.f32	s0, s12
 8002536:	eef0 0a66 	vmov.f32	s1, s13
 800253a:	eeb0 1a47 	vmov.f32	s2, s14
 800253e:	eef0 1a67 	vmov.f32	s3, s15
 8002542:	3738      	adds	r7, #56	@ 0x38
 8002544:	46bd      	mov	sp, r7
 8002546:	bc90      	pop	{r4, r7}
 8002548:	4770      	bx	lr
	...

0800254c <quatnormalize>:

quaternion quatnormalize(quaternion* q) {
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b091      	sub	sp, #68	@ 0x44
 8002550:	af00      	add	r7, sp, #0
 8002552:	6178      	str	r0, [r7, #20]
    float im;
    quaternion result;
	float q_norm = quatnorm(q);
 8002554:	6978      	ldr	r0, [r7, #20]
 8002556:	f7ff ff88 	bl	800246a <quatnorm>
 800255a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

	if (q_norm <= FLT_EPSILON){
 800255e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002562:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800262c <quatnormalize+0xe0>
 8002566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800256a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256e:	d813      	bhi.n	8002598 <quatnormalize+0x4c>
	    result.w = 1.0f;
 8002570:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002574:	61bb      	str	r3, [r7, #24]
	    result.x = 0.0f;
 8002576:	f04f 0300 	mov.w	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
	    result.y = 0.0f;
 800257c:	f04f 0300 	mov.w	r3, #0
 8002580:	623b      	str	r3, [r7, #32]
	    result.z = 0.0f;
 8002582:	f04f 0300 	mov.w	r3, #0
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
		return result;
 8002588:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 800258c:	f107 0318 	add.w	r3, r7, #24
 8002590:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002592:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002596:	e032      	b.n	80025fe <quatnormalize+0xb2>
	}

	im = 1.0f / q_norm;
 8002598:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800259c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80025a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025a4:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    result.w = q->w * im;
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	ed93 7a00 	vldr	s14, [r3]
 80025ae:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025b6:	edc7 7a06 	vstr	s15, [r7, #24]
    result.x = q->x * im;
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80025c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025c8:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = q->y * im;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	ed93 7a02 	vldr	s14, [r3, #8]
 80025d2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025da:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = q->z * im;
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	ed93 7a03 	vldr	s14, [r3, #12]
 80025e4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80025e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 80025f0:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80025f4:	f107 0318 	add.w	r3, r7, #24
 80025f8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80025fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002600:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002602:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002604:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002606:	ee06 0a10 	vmov	s12, r0
 800260a:	ee06 1a90 	vmov	s13, r1
 800260e:	ee07 2a10 	vmov	s14, r2
 8002612:	ee07 3a90 	vmov	s15, r3
 8002616:	eeb0 0a46 	vmov.f32	s0, s12
 800261a:	eef0 0a66 	vmov.f32	s1, s13
 800261e:	eeb0 1a47 	vmov.f32	s2, s14
 8002622:	eef0 1a67 	vmov.f32	s3, s15
 8002626:	3744      	adds	r7, #68	@ 0x44
 8002628:	46bd      	mov	sp, r7
 800262a:	bd90      	pop	{r4, r7, pc}
 800262c:	34000000 	.word	0x34000000

08002630 <quatmultiply_scalar>:
    result.z = qinv.z / norm_sq;
    return result;
}

// Multiply a reference of a quaternion by a scalar, q = s*q
quaternion quatmultiply_scalar(quaternion *q, float scalar){
 8002630:	b490      	push	{r4, r7}
 8002632:	b08e      	sub	sp, #56	@ 0x38
 8002634:	af00      	add	r7, sp, #0
 8002636:	6178      	str	r0, [r7, #20]
 8002638:	ed87 0a04 	vstr	s0, [r7, #16]
	quaternion res;
    res.w = q->w * scalar;
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	ed93 7a00 	vldr	s14, [r3]
 8002642:	edd7 7a04 	vldr	s15, [r7, #16]
 8002646:	ee67 7a27 	vmul.f32	s15, s14, s15
 800264a:	edc7 7a06 	vstr	s15, [r7, #24]
    res.x = q->x * scalar;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	ed93 7a01 	vldr	s14, [r3, #4]
 8002654:	edd7 7a04 	vldr	s15, [r7, #16]
 8002658:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265c:	edc7 7a07 	vstr	s15, [r7, #28]
    res.y = q->y * scalar;
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	ed93 7a02 	vldr	s14, [r3, #8]
 8002666:	edd7 7a04 	vldr	s15, [r7, #16]
 800266a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800266e:	edc7 7a08 	vstr	s15, [r7, #32]
    res.z = q->z * scalar;
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	ed93 7a03 	vldr	s14, [r3, #12]
 8002678:	edd7 7a04 	vldr	s15, [r7, #16]
 800267c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002680:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002684:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002688:	f107 0318 	add.w	r3, r7, #24
 800268c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800268e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002692:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002696:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002698:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800269a:	ee06 0a10 	vmov	s12, r0
 800269e:	ee06 1a90 	vmov	s13, r1
 80026a2:	ee07 2a10 	vmov	s14, r2
 80026a6:	ee07 3a90 	vmov	s15, r3
}
 80026aa:	eeb0 0a46 	vmov.f32	s0, s12
 80026ae:	eef0 0a66 	vmov.f32	s1, s13
 80026b2:	eeb0 1a47 	vmov.f32	s2, s14
 80026b6:	eef0 1a67 	vmov.f32	s3, s15
 80026ba:	3738      	adds	r7, #56	@ 0x38
 80026bc:	46bd      	mov	sp, r7
 80026be:	bc90      	pop	{r4, r7}
 80026c0:	4770      	bx	lr

080026c2 <quatmultiply>:

quaternion quatmultiply(quaternion* _quat1, quaternion* _quat2) {
 80026c2:	b490      	push	{r4, r7}
 80026c4:	b096      	sub	sp, #88	@ 0x58
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6178      	str	r0, [r7, #20]
 80026ca:	6139      	str	r1, [r7, #16]
	quaternion res;
	float w1, x1, y1, z1;
	float w2, x2, y2, z2;

	w1 = _quat1->w;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	657b      	str	r3, [r7, #84]	@ 0x54
	x1 = _quat1->x;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	653b      	str	r3, [r7, #80]	@ 0x50
	y1 = _quat1->y;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
	z1 = _quat1->z;
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	64bb      	str	r3, [r7, #72]	@ 0x48

	w2 = _quat2->w;
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	647b      	str	r3, [r7, #68]	@ 0x44
	x2 = _quat2->x;
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	643b      	str	r3, [r7, #64]	@ 0x40
	y2 = _quat2->y;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	z2 = _quat2->z;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	63bb      	str	r3, [r7, #56]	@ 0x38

	res.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;  // new w
 80026fc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002700:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002708:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800270c:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002710:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002714:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002718:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800271c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002720:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002724:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002728:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800272c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002730:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002734:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002738:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;  // new x
 800273c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002740:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002744:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002748:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800274c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002750:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002754:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002758:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800275c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002760:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002768:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 800276c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002778:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;  // new y
 800277c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002780:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002788:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 800278c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002790:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002794:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002798:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 800279c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80027a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027a8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80027ac:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80027b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027b8:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;	// new z
 80027bc:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80027c0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80027c4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027c8:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80027cc:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80027d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027d8:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80027dc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80027e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027e8:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80027ec:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80027f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80027f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027f8:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return res;
 80027fc:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002800:	f107 0318 	add.w	r3, r7, #24
 8002804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002806:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800280a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800280c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800280e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002812:	ee06 0a10 	vmov	s12, r0
 8002816:	ee06 1a90 	vmov	s13, r1
 800281a:	ee07 2a10 	vmov	s14, r2
 800281e:	ee07 3a90 	vmov	s15, r3
}
 8002822:	eeb0 0a46 	vmov.f32	s0, s12
 8002826:	eef0 0a66 	vmov.f32	s1, s13
 800282a:	eeb0 1a47 	vmov.f32	s2, s14
 800282e:	eef0 1a67 	vmov.f32	s3, s15
 8002832:	3758      	adds	r7, #88	@ 0x58
 8002834:	46bd      	mov	sp, r7
 8002836:	bc90      	pop	{r4, r7}
 8002838:	4770      	bx	lr

0800283a <quatrotate>:
quaternion quatdivide(quaternion* _quat1, quaternion* _quat2) {
	quaternion qtemp = quatinv(_quat2);
	return quatmultiply(&qtemp, _quat1);
}

vector3D quatrotate(quaternion* q, vector3D* vect) {
 800283a:	b580      	push	{r7, lr}
 800283c:	b094      	sub	sp, #80	@ 0x50
 800283e:	af00      	add	r7, sp, #0
 8002840:	6178      	str	r0, [r7, #20]
 8002842:	6139      	str	r1, [r7, #16]
	// - P_out is the output vector
	// - q is the orientation quaternion
	// - P_in is the input vector (a*aReal)
	// - conj(q) is the conjugate of the orientation quaternion (q=[w,x,y,z], q*=[w,-x,-y,-z])

	quaternion p = { 0.0f, vect->x, vect->y, vect->z }, qtemp;
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	637b      	str	r3, [r7, #52]	@ 0x34
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	643b      	str	r3, [r7, #64]	@ 0x40

	// quaternion multiplication: q * p, stored back in p
	p = quatmultiply(q, &p);
 800285c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002860:	4619      	mov	r1, r3
 8002862:	6978      	ldr	r0, [r7, #20]
 8002864:	f7ff ff2d 	bl	80026c2 <quatmultiply>
 8002868:	eeb0 6a40 	vmov.f32	s12, s0
 800286c:	eef0 6a60 	vmov.f32	s13, s1
 8002870:	eeb0 7a41 	vmov.f32	s14, s2
 8002874:	eef0 7a61 	vmov.f32	s15, s3
 8002878:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 800287c:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8002880:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8002884:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// quaternion multiplication: p * conj(q), stored back in p
	qtemp = quatconj(q);
 8002888:	6978      	ldr	r0, [r7, #20]
 800288a:	f7ff fe23 	bl	80024d4 <quatconj>
 800288e:	eeb0 6a40 	vmov.f32	s12, s0
 8002892:	eef0 6a60 	vmov.f32	s13, s1
 8002896:	eeb0 7a41 	vmov.f32	s14, s2
 800289a:	eef0 7a61 	vmov.f32	s15, s3
 800289e:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 80028a2:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 80028a6:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 80028aa:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	p = quatmultiply(&p, &qtemp);
 80028ae:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80028b2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff02 	bl	80026c2 <quatmultiply>
 80028be:	eeb0 6a40 	vmov.f32	s12, s0
 80028c2:	eef0 6a60 	vmov.f32	s13, s1
 80028c6:	eeb0 7a41 	vmov.f32	s14, s2
 80028ca:	eef0 7a61 	vmov.f32	s15, s3
 80028ce:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80028d2:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80028d6:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80028da:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// p quaternion is now [0, x', y', z']
	vector3D result;
	result.x = p.x;
 80028de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028e0:	61bb      	str	r3, [r7, #24]
	result.y = p.y;
 80028e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028e4:	61fb      	str	r3, [r7, #28]
	result.z = p.z;
 80028e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028e8:	623b      	str	r3, [r7, #32]
	return result;
 80028ea:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80028ee:	f107 0218 	add.w	r2, r7, #24
 80028f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80028f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80028f8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80028fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80028fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80028fe:	ee06 1a90 	vmov	s13, r1
 8002902:	ee07 2a10 	vmov	s14, r2
 8002906:	ee07 3a90 	vmov	s15, r3
}
 800290a:	eeb0 0a66 	vmov.f32	s0, s13
 800290e:	eef0 0a47 	vmov.f32	s1, s14
 8002912:	eeb0 1a67 	vmov.f32	s2, s15
 8002916:	3750      	adds	r7, #80	@ 0x50
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <quat2angle>:

// Quaternion to rotating angles (Euler angles)
// rotation order: yaw (Z), pitch (Y), roll (X)
angles3D quat2angle(quaternion* q) {
 800291c:	b580      	push	{r7, lr}
 800291e:	b090      	sub	sp, #64	@ 0x40
 8002920:	af00      	add	r7, sp, #0
 8002922:	6178      	str	r0, [r7, #20]
	angles3D angles;
	//float sinr_cosp, cosr_cosp, sinp, siny_cosp, cosy_cosp;
	float w, x, y, z;

	w = q->w;
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x = q->x;
 800292a:	697b      	ldr	r3, [r7, #20]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	63bb      	str	r3, [r7, #56]	@ 0x38
	y = q->y;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	637b      	str	r3, [r7, #52]	@ 0x34
	z = q->z;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	633b      	str	r3, [r7, #48]	@ 0x30

//	angles.x = atan2(2 * x * y - 2 * w * z, 2 * w * w + 2 * x * x - 1);   // psi
//	angles.y = -asin(2 * x * z + 2 * w * y);                              // theta
//	angles.z = atan2(2 * y * z - 2 * w * x, 2 * w * w + 2 * z * z - 1);   // phi

	angles.x = atan2f(2.0f * (w * x + y * z), 1.0f - 2.0f * (x * x + y * y)); // roll (X)
 800293c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002940:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002944:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002948:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 800294c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002950:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002954:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002958:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800295c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002960:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002964:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002968:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800296c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002970:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002974:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800297c:	eef0 0a67 	vmov.f32	s1, s15
 8002980:	eeb0 0a66 	vmov.f32	s0, s13
 8002984:	f015 ff00 	bl	8018788 <atan2f>
 8002988:	eef0 7a40 	vmov.f32	s15, s0
 800298c:	edc7 7a06 	vstr	s15, [r7, #24]
	angles.y = asinf(2.0f * (w * y - z * x));                           // pitch (Y)
 8002990:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002994:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002998:	ee27 7a27 	vmul.f32	s14, s14, s15
 800299c:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80029a0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80029a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ac:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029b0:	eeb0 0a67 	vmov.f32	s0, s15
 80029b4:	f015 febc 	bl	8018730 <asinf>
 80029b8:	eef0 7a40 	vmov.f32	s15, s0
 80029bc:	edc7 7a07 	vstr	s15, [r7, #28]
	angles.z = atan2f(2.0f * (w * z + x * y), 1.0f - 2.0f * (y * y + z * z)); // yaw (Z)
 80029c0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80029c4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80029c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029cc:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80029d0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80029d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029dc:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80029e0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80029e4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80029e8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80029ec:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80029f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80029f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80029fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a00:	eef0 0a67 	vmov.f32	s1, s15
 8002a04:	eeb0 0a66 	vmov.f32	s0, s13
 8002a08:	f015 febe 	bl	8018788 <atan2f>
 8002a0c:	eef0 7a40 	vmov.f32	s15, s0
 8002a10:	edc7 7a08 	vstr	s15, [r7, #32]

	return angles;
 8002a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a18:	f107 0218 	add.w	r2, r7, #24
 8002a1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002a22:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a28:	ee06 1a90 	vmov	s13, r1
 8002a2c:	ee07 2a10 	vmov	s14, r2
 8002a30:	ee07 3a90 	vmov	s15, r3
}
 8002a34:	eeb0 0a66 	vmov.f32	s0, s13
 8002a38:	eef0 0a47 	vmov.f32	s1, s14
 8002a3c:	eeb0 1a67 	vmov.f32	s2, s15
 8002a40:	3740      	adds	r7, #64	@ 0x40
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
	...

08002a48 <quat2rotvec>:

vector3D quat2rotvec(quaternion q) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b090      	sub	sp, #64	@ 0x40
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	eeb0 6a40 	vmov.f32	s12, s0
 8002a52:	eef0 6a60 	vmov.f32	s13, s1
 8002a56:	eeb0 7a41 	vmov.f32	s14, s2
 8002a5a:	eef0 7a61 	vmov.f32	s15, s3
 8002a5e:	ed87 6a04 	vstr	s12, [r7, #16]
 8002a62:	edc7 6a05 	vstr	s13, [r7, #20]
 8002a66:	ed87 7a06 	vstr	s14, [r7, #24]
 8002a6a:	edc7 7a07 	vstr	s15, [r7, #28]
	q = quatnormalize(&q);
 8002a6e:	f107 0310 	add.w	r3, r7, #16
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fd6a 	bl	800254c <quatnormalize>
 8002a78:	eeb0 6a40 	vmov.f32	s12, s0
 8002a7c:	eef0 6a60 	vmov.f32	s13, s1
 8002a80:	eeb0 7a41 	vmov.f32	s14, s2
 8002a84:	eef0 7a61 	vmov.f32	s15, s3
 8002a88:	ed87 6a04 	vstr	s12, [r7, #16]
 8002a8c:	edc7 6a05 	vstr	s13, [r7, #20]
 8002a90:	ed87 7a06 	vstr	s14, [r7, #24]
 8002a94:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure shortest rotation
    if (q.w < 0) {
 8002a98:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a9c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa4:	d517      	bpl.n	8002ad6 <quat2rotvec+0x8e>
        q.w = -q.w;
 8002aa6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002aaa:	eef1 7a67 	vneg.f32	s15, s15
 8002aae:	edc7 7a04 	vstr	s15, [r7, #16]
        q.x = -q.x;
 8002ab2:	edd7 7a05 	vldr	s15, [r7, #20]
 8002ab6:	eef1 7a67 	vneg.f32	s15, s15
 8002aba:	edc7 7a05 	vstr	s15, [r7, #20]
        q.y = -q.y;
 8002abe:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ac2:	eef1 7a67 	vneg.f32	s15, s15
 8002ac6:	edc7 7a06 	vstr	s15, [r7, #24]
        q.z = -q.z;
 8002aca:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ace:	eef1 7a67 	vneg.f32	s15, s15
 8002ad2:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    vector3D rotvec;
    float angle = 2.0f * acosf(q.w);
 8002ad6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002ada:	eeb0 0a67 	vmov.f32	s0, s15
 8002ade:	f015 fdfb 	bl	80186d8 <acosf>
 8002ae2:	eef0 7a40 	vmov.f32	s15, s0
 8002ae6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002aea:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float s = sqrtf(1.0f - q.w * q.w);  // sin(angle/2)
 8002aee:	ed97 7a04 	vldr	s14, [r7, #16]
 8002af2:	edd7 7a04 	vldr	s15, [r7, #16]
 8002af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b02:	eeb0 0a67 	vmov.f32	s0, s15
 8002b06:	f015 fe99 	bl	801883c <sqrtf>
 8002b0a:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

    if (s <= FLT_EPSILON) {
 8002b0e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b12:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8002bb0 <quat2rotvec+0x168>
 8002b16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1e:	d809      	bhi.n	8002b34 <quat2rotvec+0xec>
        // If angle is too small, return zero vector
        rotvec.x = 0.0f;
 8002b20:	f04f 0300 	mov.w	r3, #0
 8002b24:	623b      	str	r3, [r7, #32]
        rotvec.y = 0.0f;
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
        rotvec.z = 0.0f;
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002b32:	e023      	b.n	8002b7c <quat2rotvec+0x134>
    } else {
        // Normalize axis and scale by angle
        rotvec.x = angle * (q.x / s);
 8002b34:	edd7 6a05 	vldr	s13, [r7, #20]
 8002b38:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b40:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002b44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b48:	edc7 7a08 	vstr	s15, [r7, #32]
        rotvec.y = angle * (q.y / s);
 8002b4c:	edd7 6a06 	vldr	s13, [r7, #24]
 8002b50:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b54:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b58:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        rotvec.z = angle * (q.z / s);
 8002b64:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b68:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002b6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b70:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b78:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }

    return rotvec;
 8002b7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002b80:	f107 0220 	add.w	r2, r7, #32
 8002b84:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b86:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002b8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b8e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b90:	ee06 1a90 	vmov	s13, r1
 8002b94:	ee07 2a10 	vmov	s14, r2
 8002b98:	ee07 3a90 	vmov	s15, r3
}
 8002b9c:	eeb0 0a66 	vmov.f32	s0, s13
 8002ba0:	eef0 0a47 	vmov.f32	s1, s14
 8002ba4:	eeb0 1a67 	vmov.f32	s2, s15
 8002ba8:	3740      	adds	r7, #64	@ 0x40
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	34000000 	.word	0x34000000

08002bb4 <angle2quat>:

// rotation order: yaw (Z), pitch (Y), roll (X) in radians
quaternion angle2quat(angles3D* angles) {
 8002bb4:	b590      	push	{r4, r7, lr}
 8002bb6:	b095      	sub	sp, #84	@ 0x54
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6178      	str	r0, [r7, #20]
	// Abbreviations for the various angular functions
	float cy = cosf(angles->z * 0.5f);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bc2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002bc6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bca:	eeb0 0a67 	vmov.f32	s0, s15
 8002bce:	f015 ff27 	bl	8018a20 <cosf>
 8002bd2:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
	float sy = sinf(angles->z * 0.5f);
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	edd3 7a02 	vldr	s15, [r3, #8]
 8002bdc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002be0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002be4:	eeb0 0a67 	vmov.f32	s0, s15
 8002be8:	f015 ff66 	bl	8018ab8 <sinf>
 8002bec:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
	float cp = cosf(angles->y * 0.5f);
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bf6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002bfa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002bfe:	eeb0 0a67 	vmov.f32	s0, s15
 8002c02:	f015 ff0d 	bl	8018a20 <cosf>
 8002c06:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	float sp = sinf(angles->y * 0.5f);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c10:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c18:	eeb0 0a67 	vmov.f32	s0, s15
 8002c1c:	f015 ff4c 	bl	8018ab8 <sinf>
 8002c20:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
	float cr = cosf(angles->x * 0.5f);
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	edd3 7a00 	vldr	s15, [r3]
 8002c2a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c32:	eeb0 0a67 	vmov.f32	s0, s15
 8002c36:	f015 fef3 	bl	8018a20 <cosf>
 8002c3a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	float sr = sinf(angles->x * 0.5f);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c50:	f015 ff32 	bl	8018ab8 <sinf>
 8002c54:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

	quaternion q;
	q.w = cr * cp * cy + sr * sp * sy;
 8002c58:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002c5c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002c60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c64:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002c68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c6c:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002c70:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002c74:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002c78:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c84:	edc7 7a06 	vstr	s15, [r7, #24]
	q.x = sr * cp * cy - cr * sp * sy;
 8002c88:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8002c8c:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002c90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c94:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002c98:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c9c:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8002ca0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002ca4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ca8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002cac:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cb4:	edc7 7a07 	vstr	s15, [r7, #28]
	q.y = cr * sp * cy + sr * cp * sy;
 8002cb8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002cbc:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002cc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cc4:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ccc:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002cd0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002cd4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002cd8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002cdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ce4:	edc7 7a08 	vstr	s15, [r7, #32]
	q.z = cr * cp * sy - sr * sp * cy;
 8002ce8:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002cec:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002cf0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cf4:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002cf8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cfc:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002d00:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002d04:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002d08:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002d0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d14:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return q;
 8002d18:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002d1c:	f107 0318 	add.w	r3, r7, #24
 8002d20:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002d22:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002d26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002d28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d2e:	ee06 0a10 	vmov	s12, r0
 8002d32:	ee06 1a90 	vmov	s13, r1
 8002d36:	ee07 2a10 	vmov	s14, r2
 8002d3a:	ee07 3a90 	vmov	s15, r3
}
 8002d3e:	eeb0 0a46 	vmov.f32	s0, s12
 8002d42:	eef0 0a66 	vmov.f32	s1, s13
 8002d46:	eeb0 1a47 	vmov.f32	s2, s14
 8002d4a:	eef0 1a67 	vmov.f32	s3, s15
 8002d4e:	3754      	adds	r7, #84	@ 0x54
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd90      	pop	{r4, r7, pc}

08002d54 <quatadd>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
quaternion quatadd(quaternion *L, quaternion *R){
 8002d54:	b490      	push	{r4, r7}
 8002d56:	b08e      	sub	sp, #56	@ 0x38
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6178      	str	r0, [r7, #20]
 8002d5c:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w + R->w;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	ed93 7a00 	vldr	s14, [r3]
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	edd3 7a00 	vldr	s15, [r3]
 8002d6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d6e:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x + R->x;
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	ed93 7a01 	vldr	s14, [r3, #4]
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d82:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y + R->y;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d96:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z + R->z;
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	ed93 7a03 	vldr	s14, [r3, #12]
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	edd3 7a03 	vldr	s15, [r3, #12]
 8002da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002daa:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002dae:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002db2:	f107 0318 	add.w	r3, r7, #24
 8002db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002dbc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dc4:	ee06 0a10 	vmov	s12, r0
 8002dc8:	ee06 1a90 	vmov	s13, r1
 8002dcc:	ee07 2a10 	vmov	s14, r2
 8002dd0:	ee07 3a90 	vmov	s15, r3
}
 8002dd4:	eeb0 0a46 	vmov.f32	s0, s12
 8002dd8:	eef0 0a66 	vmov.f32	s1, s13
 8002ddc:	eeb0 1a47 	vmov.f32	s2, s14
 8002de0:	eef0 1a67 	vmov.f32	s3, s15
 8002de4:	3738      	adds	r7, #56	@ 0x38
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bc90      	pop	{r4, r7}
 8002dea:	4770      	bx	lr

08002dec <quatsub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
quaternion quatsub(quaternion *L, quaternion *R){
 8002dec:	b490      	push	{r4, r7}
 8002dee:	b08e      	sub	sp, #56	@ 0x38
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6178      	str	r0, [r7, #20]
 8002df4:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w - R->w;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	ed93 7a00 	vldr	s14, [r3]
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e06:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x - R->x;
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1a:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y - R->y;
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	ed93 7a02 	vldr	s14, [r3, #8]
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	edd3 7a02 	vldr	s15, [r3, #8]
 8002e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2e:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z - R->z;
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	ed93 7a03 	vldr	s14, [r3, #12]
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	edd3 7a03 	vldr	s15, [r3, #12]
 8002e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e42:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002e46:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002e4a:	f107 0318 	add.w	r3, r7, #24
 8002e4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002e54:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e5c:	ee06 0a10 	vmov	s12, r0
 8002e60:	ee06 1a90 	vmov	s13, r1
 8002e64:	ee07 2a10 	vmov	s14, r2
 8002e68:	ee07 3a90 	vmov	s15, r3
}
 8002e6c:	eeb0 0a46 	vmov.f32	s0, s12
 8002e70:	eef0 0a66 	vmov.f32	s1, s13
 8002e74:	eeb0 1a47 	vmov.f32	s2, s14
 8002e78:	eef0 1a67 	vmov.f32	s3, s15
 8002e7c:	3738      	adds	r7, #56	@ 0x38
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bc90      	pop	{r4, r7}
 8002e82:	4770      	bx	lr

08002e84 <quat_error>:

// Compute error quaternion: q_err = conj(current) * desired
quaternion quat_error(quaternion *q_current, quaternion *q_desired) {
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08e      	sub	sp, #56	@ 0x38
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6178      	str	r0, [r7, #20]
 8002e8c:	6139      	str	r1, [r7, #16]
    quaternion q_conj = quatconj(q_current);
 8002e8e:	6978      	ldr	r0, [r7, #20]
 8002e90:	f7ff fb20 	bl	80024d4 <quatconj>
 8002e94:	eeb0 6a40 	vmov.f32	s12, s0
 8002e98:	eef0 6a60 	vmov.f32	s13, s1
 8002e9c:	eeb0 7a41 	vmov.f32	s14, s2
 8002ea0:	eef0 7a61 	vmov.f32	s15, s3
 8002ea4:	ed87 6a06 	vstr	s12, [r7, #24]
 8002ea8:	edc7 6a07 	vstr	s13, [r7, #28]
 8002eac:	ed87 7a08 	vstr	s14, [r7, #32]
 8002eb0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return quatmultiply(q_desired, &q_conj);
 8002eb4:	f107 0318 	add.w	r3, r7, #24
 8002eb8:	4619      	mov	r1, r3
 8002eba:	6938      	ldr	r0, [r7, #16]
 8002ebc:	f7ff fc01 	bl	80026c2 <quatmultiply>
 8002ec0:	eeb0 6a40 	vmov.f32	s12, s0
 8002ec4:	eef0 6a60 	vmov.f32	s13, s1
 8002ec8:	eeb0 7a41 	vmov.f32	s14, s2
 8002ecc:	eef0 7a61 	vmov.f32	s15, s3
 8002ed0:	ed87 6a0a 	vstr	s12, [r7, #40]	@ 0x28
 8002ed4:	edc7 6a0b 	vstr	s13, [r7, #44]	@ 0x2c
 8002ed8:	ed87 7a0c 	vstr	s14, [r7, #48]	@ 0x30
 8002edc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8002ee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ee4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ee8:	ee06 0a10 	vmov	s12, r0
 8002eec:	ee06 1a90 	vmov	s13, r1
 8002ef0:	ee07 2a10 	vmov	s14, r2
 8002ef4:	ee07 3a90 	vmov	s15, r3
}
 8002ef8:	eeb0 0a46 	vmov.f32	s0, s12
 8002efc:	eef0 0a66 	vmov.f32	s1, s13
 8002f00:	eeb0 1a47 	vmov.f32	s2, s14
 8002f04:	eef0 1a67 	vmov.f32	s3, s15
 8002f08:	3738      	adds	r7, #56	@ 0x38
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
	...

08002f10 <imu_init>:
	float accel_filter_cutoff_freq_hz,
	float gyro_filter_cutoff_freq_hz,
	float accel_sample_rate_hz,
	float gyro_sample_rate_hz,
	float madgwick_sample_rate_hz
) {
 8002f10:	b590      	push	{r4, r7, lr}
 8002f12:	b08b      	sub	sp, #44	@ 0x2c
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6178      	str	r0, [r7, #20]
 8002f18:	ed87 0a04 	vstr	s0, [r7, #16]
 8002f1c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002f20:	ed87 1a02 	vstr	s2, [r7, #8]
 8002f24:	edc7 1a01 	vstr	s3, [r7, #4]
 8002f28:	ed87 2a00 	vstr	s4, [r7]
	memset(im, 0, sizeof(imu_t));
 8002f2c:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8002f30:	2100      	movs	r1, #0
 8002f32:	6978      	ldr	r0, [r7, #20]
 8002f34:	f018 fade 	bl	801b4f4 <memset>

	imu_set_leveled_attitude(im, IMU_DEFAULT_LEVELD_ATTITUDE_Q); // set default leveld position to identity quaternion
 8002f38:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002f3c:	61bb      	str	r3, [r7, #24]
 8002f3e:	f04f 0300 	mov.w	r3, #0
 8002f42:	61fb      	str	r3, [r7, #28]
 8002f44:	f04f 0300 	mov.w	r3, #0
 8002f48:	623b      	str	r3, [r7, #32]
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f50:	ed97 6a06 	vldr	s12, [r7, #24]
 8002f54:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f58:	ed97 7a08 	vldr	s14, [r7, #32]
 8002f5c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002f60:	eeb0 0a46 	vmov.f32	s0, s12
 8002f64:	eef0 0a66 	vmov.f32	s1, s13
 8002f68:	eeb0 1a47 	vmov.f32	s2, s14
 8002f6c:	eef0 1a67 	vmov.f32	s3, s15
 8002f70:	6978      	ldr	r0, [r7, #20]
 8002f72:	f000 f85d 	bl	8003030 <imu_set_leveled_attitude>
	im->estimated_q = im->leveld_attitude_q; // identity quaternion
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 8002f7e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002f82:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002f84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	im->accel_misalignment_A_inv[0][0] = 1.0f; // default: no misalignment
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002f8e:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	im->accel_misalignment_A_inv[1][1] = 1.0f; // default: no misalignment
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002f98:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	im->accel_misalignment_A_inv[2][2] = 1.0f; // default: no misalignment
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002fa2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

	pt1_filter_init_lowpass(&(im->accel_pt1_filter_x), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	3388      	adds	r3, #136	@ 0x88
 8002faa:	edd7 0a02 	vldr	s1, [r7, #8]
 8002fae:	ed97 0a04 	vldr	s0, [r7, #16]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fb5c 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_y), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	3398      	adds	r3, #152	@ 0x98
 8002fbc:	edd7 0a02 	vldr	s1, [r7, #8]
 8002fc0:	ed97 0a04 	vldr	s0, [r7, #16]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7fe fb53 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_z), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	33a8      	adds	r3, #168	@ 0xa8
 8002fce:	edd7 0a02 	vldr	s1, [r7, #8]
 8002fd2:	ed97 0a04 	vldr	s0, [r7, #16]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fb4a 	bl	8001670 <pt1_filter_init_lowpass>

	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_x), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	33b8      	adds	r3, #184	@ 0xb8
 8002fe0:	edd7 0a01 	vldr	s1, [r7, #4]
 8002fe4:	ed97 0a03 	vldr	s0, [r7, #12]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fe fb41 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_y), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	33c8      	adds	r3, #200	@ 0xc8
 8002ff2:	edd7 0a01 	vldr	s1, [r7, #4]
 8002ff6:	ed97 0a03 	vldr	s0, [r7, #12]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7fe fb38 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_z), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	33d8      	adds	r3, #216	@ 0xd8
 8003004:	edd7 0a01 	vldr	s1, [r7, #4]
 8003008:	ed97 0a03 	vldr	s0, [r7, #12]
 800300c:	4618      	mov	r0, r3
 800300e:	f7fe fb2f 	bl	8001670 <pt1_filter_init_lowpass>

	madgwick_filter_init(&(im->madgwick_filter), madgwick_sample_rate_hz, (float)IMU_GYRO_MEAN_ERROR_RAD);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	3370      	adds	r3, #112	@ 0x70
 8003016:	eddf 0a05 	vldr	s1, [pc, #20]	@ 800302c <imu_init+0x11c>
 800301a:	ed97 0a00 	vldr	s0, [r7]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fa70 	bl	8003504 <madgwick_filter_init>
}
 8003024:	bf00      	nop
 8003026:	372c      	adds	r7, #44	@ 0x2c
 8003028:	46bd      	mov	sp, r7
 800302a:	bd90      	pop	{r4, r7, pc}
 800302c:	3db2b8c2 	.word	0x3db2b8c2

08003030 <imu_set_leveled_attitude>:

void imu_set_leveled_attitude(imu_t* im, quaternion leveld_attitude_q) {
 8003030:	b590      	push	{r4, r7, lr}
 8003032:	b08f      	sub	sp, #60	@ 0x3c
 8003034:	af00      	add	r7, sp, #0
 8003036:	6178      	str	r0, [r7, #20]
 8003038:	eeb0 6a40 	vmov.f32	s12, s0
 800303c:	eef0 6a60 	vmov.f32	s13, s1
 8003040:	eeb0 7a41 	vmov.f32	s14, s2
 8003044:	eef0 7a61 	vmov.f32	s15, s3
 8003048:	ed87 6a01 	vstr	s12, [r7, #4]
 800304c:	edc7 6a02 	vstr	s13, [r7, #8]
 8003050:	ed87 7a03 	vstr	s14, [r7, #12]
 8003054:	edc7 7a04 	vstr	s15, [r7, #16]
	quaternion q_ref = IMU_DEFAULT_LEVELD_ATTITUDE_Q;      // "leveled = identity"
 8003058:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800305c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800305e:	f04f 0300 	mov.w	r3, #0
 8003062:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003064:	f04f 0300 	mov.w	r3, #0
 8003068:	633b      	str	r3, [r7, #48]	@ 0x30
 800306a:	f04f 0300 	mov.w	r3, #0
 800306e:	637b      	str	r3, [r7, #52]	@ 0x34
	im->q_offset = quat_error(&q_ref, &leveld_attitude_q);
 8003070:	697c      	ldr	r4, [r7, #20]
 8003072:	1d3a      	adds	r2, r7, #4
 8003074:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003078:	4611      	mov	r1, r2
 800307a:	4618      	mov	r0, r3
 800307c:	f7ff ff02 	bl	8002e84 <quat_error>
 8003080:	eeb0 6a40 	vmov.f32	s12, s0
 8003084:	eef0 6a60 	vmov.f32	s13, s1
 8003088:	eeb0 7a41 	vmov.f32	s14, s2
 800308c:	eef0 7a61 	vmov.f32	s15, s3
 8003090:	ed84 6a4d 	vstr	s12, [r4, #308]	@ 0x134
 8003094:	edc4 6a4e 	vstr	s13, [r4, #312]	@ 0x138
 8003098:	ed84 7a4f 	vstr	s14, [r4, #316]	@ 0x13c
 800309c:	edc4 7a50 	vstr	s15, [r4, #320]	@ 0x140
}
 80030a0:	bf00      	nop
 80030a2:	373c      	adds	r7, #60	@ 0x3c
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd90      	pop	{r4, r7, pc}

080030a8 <imu_update_gyro>:

void imu_update_gyro(imu_t* im, coord3D imu_raw_gyro_rad) {
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	eef0 6a40 	vmov.f32	s13, s0
 80030b4:	eeb0 7a60 	vmov.f32	s14, s1
 80030b8:	eef0 7a41 	vmov.f32	s15, s2
 80030bc:	edc7 6a00 	vstr	s13, [r7]
 80030c0:	ed87 7a01 	vstr	s14, [r7, #4]
 80030c4:	edc7 7a02 	vstr	s15, [r7, #8]

	im->raw_gyro = imu_raw_gyro_rad; // store raw gyro data
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	330c      	adds	r3, #12
 80030cc:	463a      	mov	r2, r7
 80030ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80030d0:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->calibrated_gyro.x = imu_raw_gyro_rad.x - im->gyro_bias[0];
 80030d4:	ed97 7a00 	vldr	s14, [r7]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 80030de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	im->calibrated_gyro.y = imu_raw_gyro_rad.y - im->gyro_bias[1];
 80030e8:	ed97 7a01 	vldr	s14, [r7, #4]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 80030f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	im->calibrated_gyro.z = imu_raw_gyro_rad.z - im->gyro_bias[2];
 80030fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8003106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	im->filtered_gyro.x = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_x), im->calibrated_gyro.x);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800311c:	eeb0 0a67 	vmov.f32	s0, s15
 8003120:	4610      	mov	r0, r2
 8003122:	f7fe fb09 	bl	8001738 <pt1_filter_apply_lowpass>
 8003126:	eef0 7a40 	vmov.f32	s15, s0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	im->filtered_gyro.y = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_y), im->calibrated_gyro.y);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800313c:	eeb0 0a67 	vmov.f32	s0, s15
 8003140:	4610      	mov	r0, r2
 8003142:	f7fe faf9 	bl	8001738 <pt1_filter_apply_lowpass>
 8003146:	eef0 7a40 	vmov.f32	s15, s0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	im->filtered_gyro.z = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_z), im->calibrated_gyro.z);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 800315c:	eeb0 0a67 	vmov.f32	s0, s15
 8003160:	4610      	mov	r0, r2
 8003162:	f7fe fae9 	bl	8001738 <pt1_filter_apply_lowpass>
 8003166:	eef0 7a40 	vmov.f32	s15, s0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	im->body_frame_gyro = quatrotate(&(im->q_offset), &(im->filtered_gyro));
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	333c      	adds	r3, #60	@ 0x3c
 800317a:	68fc      	ldr	r4, [r7, #12]
 800317c:	4619      	mov	r1, r3
 800317e:	4610      	mov	r0, r2
 8003180:	f7ff fb5b 	bl	800283a <quatrotate>
 8003184:	eef0 6a40 	vmov.f32	s13, s0
 8003188:	eeb0 7a60 	vmov.f32	s14, s1
 800318c:	eef0 7a41 	vmov.f32	s15, s2
 8003190:	edc4 6a15 	vstr	s13, [r4, #84]	@ 0x54
 8003194:	ed84 7a16 	vstr	s14, [r4, #88]	@ 0x58
 8003198:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
}
 800319c:	bf00      	nop
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd90      	pop	{r4, r7, pc}

080031a4 <imu_update_accel>:

void imu_update_accel(imu_t* im, coord3D imu_raw_accel_m_s2) {
 80031a4:	b5b0      	push	{r4, r5, r7, lr}
 80031a6:	b086      	sub	sp, #24
 80031a8:	af02      	add	r7, sp, #8
 80031aa:	60f8      	str	r0, [r7, #12]
 80031ac:	eef0 6a40 	vmov.f32	s13, s0
 80031b0:	eeb0 7a60 	vmov.f32	s14, s1
 80031b4:	eef0 7a41 	vmov.f32	s15, s2
 80031b8:	edc7 6a00 	vstr	s13, [r7]
 80031bc:	ed87 7a01 	vstr	s14, [r7, #4]
 80031c0:	edc7 7a02 	vstr	s15, [r7, #8]
	im->raw_accel = imu_raw_accel_m_s2;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	461c      	mov	r4, r3
 80031c8:	463b      	mov	r3, r7
 80031ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	MagCal(&(imu_raw_accel_m_s2.x), &(imu_raw_accel_m_s2.y), &(imu_raw_accel_m_s2.z), im->accel_bias, im->accel_misalignment_A_inv);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f103 05e8 	add.w	r5, r3, #232	@ 0xe8
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	33f4      	adds	r3, #244	@ 0xf4
 80031dc:	463a      	mov	r2, r7
 80031de:	f102 0408 	add.w	r4, r2, #8
 80031e2:	463a      	mov	r2, r7
 80031e4:	1d11      	adds	r1, r2, #4
 80031e6:	4638      	mov	r0, r7
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	462b      	mov	r3, r5
 80031ec:	4622      	mov	r2, r4
 80031ee:	f7ff f8a9 	bl	8002344 <MagCal>

	im->calibrated_accel = imu_raw_accel_m_s2;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3318      	adds	r3, #24
 80031f6:	463a      	mov	r2, r7
 80031f8:	ca07      	ldmia	r2, {r0, r1, r2}
 80031fa:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->filtered_accel.x = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_x), imu_raw_accel_m_s2.x);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	3388      	adds	r3, #136	@ 0x88
 8003202:	edd7 7a00 	vldr	s15, [r7]
 8003206:	eeb0 0a67 	vmov.f32	s0, s15
 800320a:	4618      	mov	r0, r3
 800320c:	f7fe fa94 	bl	8001738 <pt1_filter_apply_lowpass>
 8003210:	eef0 7a40 	vmov.f32	s15, s0
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	im->filtered_accel.y = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_y), imu_raw_accel_m_s2.y);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	3398      	adds	r3, #152	@ 0x98
 800321e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003222:	eeb0 0a67 	vmov.f32	s0, s15
 8003226:	4618      	mov	r0, r3
 8003228:	f7fe fa86 	bl	8001738 <pt1_filter_apply_lowpass>
 800322c:	eef0 7a40 	vmov.f32	s15, s0
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	im->filtered_accel.z = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_z), imu_raw_accel_m_s2.z);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	33a8      	adds	r3, #168	@ 0xa8
 800323a:	edd7 7a02 	vldr	s15, [r7, #8]
 800323e:	eeb0 0a67 	vmov.f32	s0, s15
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fa78 	bl	8001738 <pt1_filter_apply_lowpass>
 8003248:	eef0 7a40 	vmov.f32	s15, s0
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	im->body_frame_accel = quatrotate(&(im->q_offset), &(im->filtered_accel));
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3330      	adds	r3, #48	@ 0x30
 800325c:	68fc      	ldr	r4, [r7, #12]
 800325e:	4619      	mov	r1, r3
 8003260:	4610      	mov	r0, r2
 8003262:	f7ff faea 	bl	800283a <quatrotate>
 8003266:	eef0 6a40 	vmov.f32	s13, s0
 800326a:	eeb0 7a60 	vmov.f32	s14, s1
 800326e:	eef0 7a41 	vmov.f32	s15, s2
 8003272:	edc4 6a12 	vstr	s13, [r4, #72]	@ 0x48
 8003276:	ed84 7a13 	vstr	s14, [r4, #76]	@ 0x4c
 800327a:	edc4 7a14 	vstr	s15, [r4, #80]	@ 0x50
}
 800327e:	bf00      	nop
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bdb0      	pop	{r4, r5, r7, pc}

08003286 <imu_update_madgwick>:

void imu_update_madgwick(imu_t* im) {
 8003286:	b590      	push	{r4, r7, lr}
 8003288:	b083      	sub	sp, #12
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
	madgwick_filter_apply(
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f103 0270 	add.w	r2, r3, #112	@ 0x70
		&(im->madgwick_filter),
		-im->body_frame_accel.x,
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	madgwick_filter_apply(
 800329a:	eeb1 7a67 	vneg.f32	s14, s15
		-im->body_frame_accel.y,
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
	madgwick_filter_apply(
 80032a4:	eef1 6a67 	vneg.f32	s13, s15
		-im->body_frame_accel.z,
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
	madgwick_filter_apply(
 80032ae:	eef1 7a67 	vneg.f32	s15, s15
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	edd3 5a16 	vldr	s11, [r3, #88]	@ 0x58
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	ed93 5a17 	vldr	s10, [r3, #92]	@ 0x5c
 80032c4:	eef0 2a45 	vmov.f32	s5, s10
 80032c8:	eeb0 2a65 	vmov.f32	s4, s11
 80032cc:	eef0 1a46 	vmov.f32	s3, s12
 80032d0:	eeb0 1a67 	vmov.f32	s2, s15
 80032d4:	eef0 0a66 	vmov.f32	s1, s13
 80032d8:	eeb0 0a47 	vmov.f32	s0, s14
 80032dc:	4610      	mov	r0, r2
 80032de:	f000 f935 	bl	800354c <madgwick_filter_apply>
//		-im->body_frame_gyro.z
//	);

	//im->estimated_q = quatmultiply(&(im->q_offset), &(im->madgwick_filter.q_est));
	//im->estimated_q = quatnormalize(&(im->madgwick_filter.q_est));
	im->estimated_q = im->madgwick_filter.q_est;
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 80032ea:	3370      	adds	r3, #112	@ 0x70
 80032ec:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd90      	pop	{r4, r7, pc}

080032fa <imu_update>:

void imu_update(imu_t* im, coord3D imu_raw_accel_m_s2, coord3D imu_raw_gyro_rad) {
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b088      	sub	sp, #32
 80032fe:	af00      	add	r7, sp, #0
 8003300:	61f8      	str	r0, [r7, #28]
 8003302:	eeb0 5a40 	vmov.f32	s10, s0
 8003306:	eef0 5a60 	vmov.f32	s11, s1
 800330a:	eeb0 6a41 	vmov.f32	s12, s2
 800330e:	eef0 6a61 	vmov.f32	s13, s3
 8003312:	eeb0 7a42 	vmov.f32	s14, s4
 8003316:	eef0 7a62 	vmov.f32	s15, s5
 800331a:	ed87 5a04 	vstr	s10, [r7, #16]
 800331e:	edc7 5a05 	vstr	s11, [r7, #20]
 8003322:	ed87 6a06 	vstr	s12, [r7, #24]
 8003326:	edc7 6a01 	vstr	s13, [r7, #4]
 800332a:	ed87 7a02 	vstr	s14, [r7, #8]
 800332e:	edc7 7a03 	vstr	s15, [r7, #12]
	imu_update_accel(im, imu_raw_accel_m_s2);
 8003332:	edd7 6a04 	vldr	s13, [r7, #16]
 8003336:	ed97 7a05 	vldr	s14, [r7, #20]
 800333a:	edd7 7a06 	vldr	s15, [r7, #24]
 800333e:	eeb0 0a66 	vmov.f32	s0, s13
 8003342:	eef0 0a47 	vmov.f32	s1, s14
 8003346:	eeb0 1a67 	vmov.f32	s2, s15
 800334a:	69f8      	ldr	r0, [r7, #28]
 800334c:	f7ff ff2a 	bl	80031a4 <imu_update_accel>
	imu_update_gyro(im, imu_raw_gyro_rad);
 8003350:	edd7 6a01 	vldr	s13, [r7, #4]
 8003354:	ed97 7a02 	vldr	s14, [r7, #8]
 8003358:	edd7 7a03 	vldr	s15, [r7, #12]
 800335c:	eeb0 0a66 	vmov.f32	s0, s13
 8003360:	eef0 0a47 	vmov.f32	s1, s14
 8003364:	eeb0 1a67 	vmov.f32	s2, s15
 8003368:	69f8      	ldr	r0, [r7, #28]
 800336a:	f7ff fe9d 	bl	80030a8 <imu_update_gyro>
	imu_update_madgwick(im);
 800336e:	69f8      	ldr	r0, [r7, #28]
 8003370:	f7ff ff89 	bl	8003286 <imu_update_madgwick>
}
 8003374:	bf00      	nop
 8003376:	3720      	adds	r7, #32
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <imu_set_gyro_bias>:

void imu_set_gyro_bias(imu_t* im, coord3D gyro_bias) {
 800337c:	b480      	push	{r7}
 800337e:	b085      	sub	sp, #20
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	eef0 6a40 	vmov.f32	s13, s0
 8003388:	eeb0 7a60 	vmov.f32	s14, s1
 800338c:	eef0 7a41 	vmov.f32	s15, s2
 8003390:	edc7 6a00 	vstr	s13, [r7]
 8003394:	ed87 7a01 	vstr	s14, [r7, #4]
 8003398:	edc7 7a02 	vstr	s15, [r7, #8]
	im->gyro_bias[0] = gyro_bias.x;
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	im->gyro_bias[1] = gyro_bias.y;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	im->gyro_bias[2] = gyro_bias.z;
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <imu_set_accel_bias>:

void imu_set_accel_bias(imu_t* im, coord3D accel_bias, float accel_misalignment_A_1[3][3]) {
 80033c0:	b480      	push	{r7}
 80033c2:	b089      	sub	sp, #36	@ 0x24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6178      	str	r0, [r7, #20]
 80033c8:	eef0 6a40 	vmov.f32	s13, s0
 80033cc:	eeb0 7a60 	vmov.f32	s14, s1
 80033d0:	eef0 7a41 	vmov.f32	s15, s2
 80033d4:	6079      	str	r1, [r7, #4]
 80033d6:	edc7 6a02 	vstr	s13, [r7, #8]
 80033da:	ed87 7a03 	vstr	s14, [r7, #12]
 80033de:	edc7 7a04 	vstr	s15, [r7, #16]
	im->accel_bias[0] = accel_bias.x;
 80033e2:	68ba      	ldr	r2, [r7, #8]
 80033e4:	697b      	ldr	r3, [r7, #20]
 80033e6:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	im->accel_bias[1] = accel_bias.y;
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	im->accel_bias[2] = accel_bias.z;
 80033f2:	693a      	ldr	r2, [r7, #16]
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

	for (size_t i = 0; i < 3; i++)
 80033fa:	2300      	movs	r3, #0
 80033fc:	61fb      	str	r3, [r7, #28]
 80033fe:	e023      	b.n	8003448 <imu_set_accel_bias+0x88>
	{
		for (size_t j = 0; j < 3; j++) {
 8003400:	2300      	movs	r3, #0
 8003402:	61bb      	str	r3, [r7, #24]
 8003404:	e01a      	b.n	800343c <imu_set_accel_bias+0x7c>
			im->accel_misalignment_A_inv[i][j] = accel_misalignment_A_1[i][j];
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	4613      	mov	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	009b      	lsls	r3, r3, #2
 8003410:	461a      	mov	r2, r3
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	441a      	add	r2, r3
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4413      	add	r3, r2
 800341c:	6819      	ldr	r1, [r3, #0]
 800341e:	6978      	ldr	r0, [r7, #20]
 8003420:	69fa      	ldr	r2, [r7, #28]
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4413      	add	r3, r2
 800342c:	333c      	adds	r3, #60	@ 0x3c
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4403      	add	r3, r0
 8003432:	3304      	adds	r3, #4
 8003434:	6019      	str	r1, [r3, #0]
		for (size_t j = 0; j < 3; j++) {
 8003436:	69bb      	ldr	r3, [r7, #24]
 8003438:	3301      	adds	r3, #1
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d9e1      	bls.n	8003406 <imu_set_accel_bias+0x46>
	for (size_t i = 0; i < 3; i++)
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	3301      	adds	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d9d8      	bls.n	8003400 <imu_set_accel_bias+0x40>
		}
	}
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	3724      	adds	r7, #36	@ 0x24
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <imu_get_estimated_data>:


void imu_get_estimated_data(imu_t* im, quaternion* estimated_q, coord3D* estimated_acc, coord3D* estimated_gyro) {
 800345c:	b490      	push	{r4, r7}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
 8003468:	603b      	str	r3, [r7, #0]
	if (estimated_q) {
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d006      	beq.n	800347e <imu_get_estimated_data+0x22>
		*estimated_q = im->estimated_q;
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	4614      	mov	r4, r2
 8003476:	3360      	adds	r3, #96	@ 0x60
 8003478:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800347a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	if (estimated_acc) {
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d007      	beq.n	8003494 <imu_get_estimated_data+0x38>
		*estimated_acc = im->body_frame_accel;
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	4614      	mov	r4, r2
 800348a:	3348      	adds	r3, #72	@ 0x48
 800348c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003490:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	if (estimated_gyro) {
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <imu_get_estimated_data+0x4e>
		*estimated_gyro = im->body_frame_gyro;
 800349a:	683a      	ldr	r2, [r7, #0]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	4614      	mov	r4, r2
 80034a0:	3354      	adds	r3, #84	@ 0x54
 80034a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 80034aa:	bf00      	nop
 80034ac:	3710      	adds	r7, #16
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bc90      	pop	{r4, r7}
 80034b2:	4770      	bx	lr

080034b4 <imu_get_raw_accel_data>:

void imu_get_raw_accel_data(imu_t* im, coord3D* raw_acc){
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]
	if (raw_acc) {
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d004      	beq.n	80034ce <imu_get_raw_accel_data+0x1a>
		*raw_acc = im->raw_accel;
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80034ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
}
 80034ce:	bf00      	nop
 80034d0:	370c      	adds	r7, #12
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr

080034da <imu_get_raw_gyro_data>:

void imu_get_raw_gyro_data(imu_t* im, coord3D* raw_gyro){
 80034da:	b490      	push	{r4, r7}
 80034dc:	b082      	sub	sp, #8
 80034de:	af00      	add	r7, sp, #0
 80034e0:	6078      	str	r0, [r7, #4]
 80034e2:	6039      	str	r1, [r7, #0]
		if (raw_gyro) {
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d007      	beq.n	80034fa <imu_get_raw_gyro_data+0x20>
		*raw_gyro = im->raw_gyro;
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4614      	mov	r4, r2
 80034f0:	330c      	adds	r3, #12
 80034f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 80034fa:	bf00      	nop
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bc90      	pop	{r4, r7}
 8003502:	4770      	bx	lr

08003504 <madgwick_filter_init>:
    //#define BETA(gyro_mean_error) (sqrt(3.0f/4.0f) * gyro_mean_error)    //*from paper*
	#define BETA(gyro_mean_error) (0.866025403784439f * gyro_mean_error)    //*from paper*
#endif


void madgwick_filter_init(madgwick_filter_t* filter, float sampling_freq, float gyro_mean_error) {
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003510:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->q_est.w = 1.0f;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800351a:	601a      	str	r2, [r3, #0]
	filter->q_est.x = 0.0f;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	605a      	str	r2, [r3, #4]
	filter->q_est.y = 0.0f;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
	filter->q_est.z = 0.0f;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f04f 0200 	mov.w	r2, #0
 8003532:	60da      	str	r2, [r3, #12]

	filter->sampling_freq = sampling_freq;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	611a      	str	r2, [r3, #16]
	filter->gyro_mean_error = gyro_mean_error;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	615a      	str	r2, [r3, #20]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <madgwick_filter_apply>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void madgwick_filter_apply(madgwick_filter_t *filter, float ax, float ay, float az, float gx, float gy, float gz){
 800354c:	b590      	push	{r4, r7, lr}
 800354e:	b0b1      	sub	sp, #196	@ 0xc4
 8003550:	af00      	add	r7, sp, #0
 8003552:	61f8      	str	r0, [r7, #28]
 8003554:	ed87 0a06 	vstr	s0, [r7, #24]
 8003558:	edc7 0a05 	vstr	s1, [r7, #20]
 800355c:	ed87 1a04 	vstr	s2, [r7, #16]
 8003560:	edc7 1a03 	vstr	s3, [r7, #12]
 8003564:	ed87 2a02 	vstr	s4, [r7, #8]
 8003568:	edc7 2a01 	vstr	s5, [r7, #4]

    //Variables and constants
	quaternion q_est = filter->q_est;
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8003572:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003574:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_prev = q_est;
 8003578:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 800357c:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8003580:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003582:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_dot = {0.0f};            // used as a place holder in equations 42 and 43
 8003586:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
 800358e:	605a      	str	r2, [r3, #4]
 8003590:	609a      	str	r2, [r3, #8]
 8003592:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0.0f, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 80035ae:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                   // jacobian matrix for gravity
 80035ba:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80035be:	2230      	movs	r2, #48	@ 0x30
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f017 ff96 	bl	801b4f4 <memset>

    struct quaternion gradient = {0.0f};
 80035c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035cc:	2200      	movs	r2, #0
 80035ce:	601a      	str	r2, [r3, #0]
 80035d0:	605a      	str	r2, [r3, #4]
 80035d2:	609a      	str	r2, [r3, #8]
 80035d4:	60da      	str	r2, [r3, #12]

    /* Integrate angluar velocity to obtain position in angles. */
    struct quaternion q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.w = 0.0f;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 80035d6:	f04f 0300 	mov.w	r3, #0
 80035da:	627b      	str	r3, [r7, #36]	@ 0x24
    q_w.x = gx;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	62bb      	str	r3, [r7, #40]	@ 0x28
    q_w.y = gy;
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    q_w.z = gz;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	633b      	str	r3, [r7, #48]	@ 0x30

    q_w = quatmultiply_scalar(&q_w, 0.5f);                  // equation (12) dq/dt = (1/2)q*w
 80035e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035ec:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7ff f81d 	bl	8002630 <quatmultiply_scalar>
 80035f6:	eeb0 6a40 	vmov.f32	s12, s0
 80035fa:	eef0 6a60 	vmov.f32	s13, s1
 80035fe:	eeb0 7a41 	vmov.f32	s14, s2
 8003602:	eef0 7a61 	vmov.f32	s15, s3
 8003606:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800360a:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 800360e:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8003612:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q_w = quatmultiply(&q_est_prev, &q_w);        // equation (12)
 8003616:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800361a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff f84e 	bl	80026c2 <quatmultiply>
 8003626:	eeb0 6a40 	vmov.f32	s12, s0
 800362a:	eef0 6a60 	vmov.f32	s13, s1
 800362e:	eeb0 7a41 	vmov.f32	s14, s2
 8003632:	eef0 7a61 	vmov.f32	s15, s3
 8003636:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800363a:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 800363e:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8003642:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
     The matrix multiplcation can also be done hard coded to reduce code.

     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */

    q_a = quatnormalize(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 8003646:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe ff7e 	bl	800254c <quatnormalize>
 8003650:	eeb0 6a40 	vmov.f32	s12, s0
 8003654:	eef0 6a60 	vmov.f32	s13, s1
 8003658:	eeb0 7a41 	vmov.f32	s14, s2
 800365c:	eef0 7a61 	vmov.f32	s15, s3
 8003660:	ed87 6a20 	vstr	s12, [r7, #128]	@ 0x80
 8003664:	edc7 6a21 	vstr	s13, [r7, #132]	@ 0x84
 8003668:	ed87 7a22 	vstr	s14, [r7, #136]	@ 0x88
 800366c:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.x * q_est_prev.z - q_est_prev.w * q_est_prev.y) - q_a.x;
 8003670:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003674:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003678:	ee27 7a27 	vmul.f32	s14, s14, s15
 800367c:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 8003680:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800368c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003690:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003698:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    F_g[1] = 2*(q_est_prev.w * q_est_prev.x + q_est_prev.y* q_est_prev.z) - q_a.y;
 800369c:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 80036a0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80036a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036a8:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 80036ac:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80036b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80036bc:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80036c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036c4:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    F_g[2] = 2*(0.5f - q_est_prev.x * q_est_prev.x - q_est_prev.y * q_est_prev.y) - q_a.z;
 80036c8:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80036cc:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80036d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036d4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80036d8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80036dc:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 80036e0:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80036e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80036e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ec:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80036f0:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80036f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036f8:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2.0f * q_est_prev.y;
 80036fc:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003700:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003704:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003708:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    J_g[0][1] =  2.0f * q_est_prev.z;
 800370c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003710:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003714:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    J_g[0][2] = -2.0f * q_est_prev.w;
 8003718:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800371c:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003720:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003724:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    J_g[0][3] =  2.0f * q_est_prev.x;
 8003728:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800372c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003730:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    J_g[1][0] = 2.0f * q_est_prev.x;
 8003734:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003738:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800373c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    J_g[1][1] = 2.0f * q_est_prev.w;
 8003740:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003744:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003748:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    J_g[1][2] = 2.0f * q_est_prev.z;
 800374c:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003750:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003754:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    J_g[1][3] = 2.0f * q_est_prev.y;
 8003758:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800375c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003760:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    J_g[2][0] = 0.0f;
 8003764:	f04f 0300 	mov.w	r3, #0
 8003768:	667b      	str	r3, [r7, #100]	@ 0x64
    J_g[2][1] = -4.0f * q_est_prev.x;
 800376a:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800376e:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8003772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003776:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    J_g[2][2] = -4.0f * q_est_prev.y;
 800377a:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 800377e:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8003782:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003786:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    J_g[2][3] = 0.0f;
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	673b      	str	r3, [r7, #112]	@ 0x70

    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.w = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 8003790:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8003794:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003798:	ee27 7a27 	vmul.f32	s14, s14, s15
 800379c:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80037a0:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80037a4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ac:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 80037b0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80037b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037bc:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    gradient.x = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 80037c0:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80037c4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80037c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037cc:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80037d0:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80037d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037dc:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 80037e0:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80037e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ec:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    gradient.y = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 80037f0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80037f4:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80037f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037fc:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8003800:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003804:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003808:	ee37 7a27 	vadd.f32	s14, s14, s15
 800380c:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8003810:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003814:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003818:	ee77 7a27 	vadd.f32	s15, s14, s15
 800381c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    gradient.z = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 8003820:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003824:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8003828:	ee27 7a27 	vmul.f32	s14, s14, s15
 800382c:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8003830:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003834:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003838:	ee37 7a27 	vadd.f32	s14, s14, s15
 800383c:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8003840:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003844:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Normalize the gradient, equation (44)
    gradient = quatnormalize(&gradient);
 8003850:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003854:	4618      	mov	r0, r3
 8003856:	f7fe fe79 	bl	800254c <quatnormalize>
 800385a:	eeb0 6a40 	vmov.f32	s12, s0
 800385e:	eef0 6a60 	vmov.f32	s13, s1
 8003862:	eeb0 7a41 	vmov.f32	s14, s2
 8003866:	eef0 7a61 	vmov.f32	s15, s3
 800386a:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 800386e:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8003872:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 8003876:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    gradient = quatmultiply_scalar(&gradient, BETA(filter->gyro_mean_error));             // multiply normalized gradient by beta
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	edd3 7a05 	vldr	s15, [r3, #20]
 8003880:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8003994 <madgwick_filter_apply+0x448>
 8003884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003888:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800388c:	eeb0 0a67 	vmov.f32	s0, s15
 8003890:	4618      	mov	r0, r3
 8003892:	f7fe fecd 	bl	8002630 <quatmultiply_scalar>
 8003896:	eeb0 6a40 	vmov.f32	s12, s0
 800389a:	eef0 6a60 	vmov.f32	s13, s1
 800389e:	eeb0 7a41 	vmov.f32	s14, s2
 80038a2:	eef0 7a61 	vmov.f32	s15, s3
 80038a6:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80038aa:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80038ae:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80038b2:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    q_est_dot = quatsub(&q_w, &gradient);        // subtract above from q_w, the integrated gyro quaternion
 80038b6:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80038ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038be:	4611      	mov	r1, r2
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff fa93 	bl	8002dec <quatsub>
 80038c6:	eeb0 6a40 	vmov.f32	s12, s0
 80038ca:	eef0 6a60 	vmov.f32	s13, s1
 80038ce:	eeb0 7a41 	vmov.f32	s14, s2
 80038d2:	eef0 7a61 	vmov.f32	s15, s3
 80038d6:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 80038da:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 80038de:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 80038e2:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est_dot = quatmultiply_scalar(&q_est_dot, (1.0f / filter->sampling_freq));
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80038ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80038f0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038f4:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80038f8:	eeb0 0a47 	vmov.f32	s0, s14
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7fe fe97 	bl	8002630 <quatmultiply_scalar>
 8003902:	eeb0 6a40 	vmov.f32	s12, s0
 8003906:	eef0 6a60 	vmov.f32	s13, s1
 800390a:	eeb0 7a41 	vmov.f32	s14, s2
 800390e:	eef0 7a61 	vmov.f32	s15, s3
 8003912:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 8003916:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 800391a:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 800391e:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est = quatadd(&q_est_prev, &q_est_dot);     // Integrate orientation rate to find position
 8003922:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8003926:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800392a:	4611      	mov	r1, r2
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fa11 	bl	8002d54 <quatadd>
 8003932:	eeb0 6a40 	vmov.f32	s12, s0
 8003936:	eef0 6a60 	vmov.f32	s13, s1
 800393a:	eeb0 7a41 	vmov.f32	s14, s2
 800393e:	eef0 7a61 	vmov.f32	s15, s3
 8003942:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 8003946:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 800394a:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 800394e:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
    q_est = quatnormalize(&q_est);                 // normalize the orientation of the estimate
 8003952:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fdf8 	bl	800254c <quatnormalize>
 800395c:	eeb0 6a40 	vmov.f32	s12, s0
 8003960:	eef0 6a60 	vmov.f32	s13, s1
 8003964:	eeb0 7a41 	vmov.f32	s14, s2
 8003968:	eef0 7a61 	vmov.f32	s15, s3
 800396c:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 8003970:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 8003974:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 8003978:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
                                                //(shown in diagram, plus always use unit quaternions for orientation)
    filter->q_est = q_est;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	461c      	mov	r4, r3
 8003980:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8003984:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003986:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800398a:	bf00      	nop
 800398c:	37c4      	adds	r7, #196	@ 0xc4
 800398e:	46bd      	mov	sp, r7
 8003990:	bd90      	pop	{r4, r7, pc}
 8003992:	bf00      	nop
 8003994:	3f5db3d7 	.word	0x3f5db3d7

08003998 <motor_mixer_quad_x>:
void motor_mixer_quad_x(
    float throttle_norm,       // 0..1 throttle
    float roll_out, float pitch_out, float yaw_out,  // ±PID_LIMIT
	float throttle_idle,  // e.g., 0..1 idle throttle
    float motor_dshot[NUM_MOTORS]     // output throttle per motor
) {
 8003998:	b480      	push	{r7}
 800399a:	b097      	sub	sp, #92	@ 0x5c
 800399c:	af00      	add	r7, sp, #0
 800399e:	ed87 0a05 	vstr	s0, [r7, #20]
 80039a2:	edc7 0a04 	vstr	s1, [r7, #16]
 80039a6:	ed87 1a03 	vstr	s2, [r7, #12]
 80039aa:	edc7 1a02 	vstr	s3, [r7, #8]
 80039ae:	ed87 2a01 	vstr	s4, [r7, #4]
 80039b2:	6038      	str	r0, [r7, #0]
	// Clamp inputs
	throttle_norm = CLAMP(throttle_norm, 0.0f, MAX_THROTTLE_MIX);
 80039b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80039b8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039c0:	d502      	bpl.n	80039c8 <motor_mixer_quad_x+0x30>
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	e00c      	b.n	80039e2 <motor_mixer_quad_x+0x4a>
 80039c8:	edd7 7a05 	vldr	s15, [r7, #20]
 80039cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d8:	dd02      	ble.n	80039e0 <motor_mixer_quad_x+0x48>
 80039da:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80039de:	e000      	b.n	80039e2 <motor_mixer_quad_x+0x4a>
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	617b      	str	r3, [r7, #20]
	throttle_idle = CLAMP(throttle_idle, 0.0f, MAX_THROTTLE_MIX);
 80039e4:	edd7 7a01 	vldr	s15, [r7, #4]
 80039e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80039ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f0:	d502      	bpl.n	80039f8 <motor_mixer_quad_x+0x60>
 80039f2:	f04f 0300 	mov.w	r3, #0
 80039f6:	e00c      	b.n	8003a12 <motor_mixer_quad_x+0x7a>
 80039f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80039fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003a00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a08:	dd02      	ble.n	8003a10 <motor_mixer_quad_x+0x78>
 8003a0a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003a0e:	e000      	b.n	8003a12 <motor_mixer_quad_x+0x7a>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	607b      	str	r3, [r7, #4]

    // Scale PID outputs into motor fraction
    float r = roll_out * AXIS_TO_MOTOR_GAIN;
 8003a14:	edd7 7a04 	vldr	s15, [r7, #16]
 8003a18:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8003c70 <motor_mixer_quad_x+0x2d8>
 8003a1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a20:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float p = pitch_out * AXIS_TO_MOTOR_GAIN;
 8003a24:	edd7 7a03 	vldr	s15, [r7, #12]
 8003a28:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003c70 <motor_mixer_quad_x+0x2d8>
 8003a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a30:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float y = yaw_out * AXIS_TO_MOTOR_GAIN;
 8003a34:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a38:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8003c70 <motor_mixer_quad_x+0x2d8>
 8003a3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a40:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    // Step 1: Compute raw motor mix
    float m[NUM_MOTORS];


	// Add throttle + roll + pitch + yaw for each motor
    for (int i = 0; i < NUM_MOTORS; i++) {
 8003a44:	2300      	movs	r3, #0
 8003a46:	657b      	str	r3, [r7, #84]	@ 0x54
 8003a48:	e03a      	b.n	8003ac0 <motor_mixer_quad_x+0x128>
        m[i] = throttle_norm + MIX[i][0] * r + MIX[i][1] * p + MIX[i][2] * y;
 8003a4a:	498a      	ldr	r1, [pc, #552]	@ (8003c74 <motor_mixer_quad_x+0x2dc>)
 8003a4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	ed93 7a00 	vldr	s14, [r3]
 8003a5c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003a60:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8003a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a6c:	4981      	ldr	r1, [pc, #516]	@ (8003c74 <motor_mixer_quad_x+0x2dc>)
 8003a6e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a70:	4613      	mov	r3, r2
 8003a72:	005b      	lsls	r3, r3, #1
 8003a74:	4413      	add	r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	3304      	adds	r3, #4
 8003a7c:	edd3 6a00 	vldr	s13, [r3]
 8003a80:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8003a84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a8c:	4979      	ldr	r1, [pc, #484]	@ (8003c74 <motor_mixer_quad_x+0x2dc>)
 8003a8e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a90:	4613      	mov	r3, r2
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	edd3 6a00 	vldr	s13, [r3]
 8003aa0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8003aa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	3358      	adds	r3, #88	@ 0x58
 8003ab2:	443b      	add	r3, r7
 8003ab4:	3b40      	subs	r3, #64	@ 0x40
 8003ab6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < NUM_MOTORS; i++) {
 8003aba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003abc:	3301      	adds	r3, #1
 8003abe:	657b      	str	r3, [r7, #84]	@ 0x54
 8003ac0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	ddc1      	ble.n	8003a4a <motor_mixer_quad_x+0xb2>
    }

    // Step 2: Desaturate so all motors stay in [0..1]
    float mmin = m[0], mmax = m[0];
 8003ac6:	69bb      	ldr	r3, [r7, #24]
 8003ac8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 8003ace:	2301      	movs	r3, #1
 8003ad0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ad2:	e02c      	b.n	8003b2e <motor_mixer_quad_x+0x196>
        if (m[i] < mmin) mmin = m[i];
 8003ad4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	3358      	adds	r3, #88	@ 0x58
 8003ada:	443b      	add	r3, r7
 8003adc:	3b40      	subs	r3, #64	@ 0x40
 8003ade:	edd3 7a00 	vldr	s15, [r3]
 8003ae2:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003ae6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003aee:	dd06      	ble.n	8003afe <motor_mixer_quad_x+0x166>
 8003af0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	3358      	adds	r3, #88	@ 0x58
 8003af6:	443b      	add	r3, r7
 8003af8:	3b40      	subs	r3, #64	@ 0x40
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	653b      	str	r3, [r7, #80]	@ 0x50
        if (m[i] > mmax) mmax = m[i];
 8003afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	3358      	adds	r3, #88	@ 0x58
 8003b04:	443b      	add	r3, r7
 8003b06:	3b40      	subs	r3, #64	@ 0x40
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003b10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b18:	d506      	bpl.n	8003b28 <motor_mixer_quad_x+0x190>
 8003b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	3358      	adds	r3, #88	@ 0x58
 8003b20:	443b      	add	r3, r7
 8003b22:	3b40      	subs	r3, #64	@ 0x40
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 8003b28:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b2a:	3301      	adds	r3, #1
 8003b2c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b30:	2b03      	cmp	r3, #3
 8003b32:	ddcf      	ble.n	8003ad4 <motor_mixer_quad_x+0x13c>
    }

	// If any motor is above 1.0, lower all motors by the excess
    if (mmax > MAX_THROTTLE_MIX) {
 8003b34:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003b38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b44:	dd22      	ble.n	8003b8c <motor_mixer_quad_x+0x1f4>
        float shift = mmax - MAX_THROTTLE_MIX;
 8003b46:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8003b4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b4e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b52:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        for (int i = 0; i < NUM_MOTORS; i++) m[i] -= shift;
 8003b56:	2300      	movs	r3, #0
 8003b58:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b5a:	e014      	b.n	8003b86 <motor_mixer_quad_x+0x1ee>
 8003b5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	3358      	adds	r3, #88	@ 0x58
 8003b62:	443b      	add	r3, r7
 8003b64:	3b40      	subs	r3, #64	@ 0x40
 8003b66:	ed93 7a00 	vldr	s14, [r3]
 8003b6a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	3358      	adds	r3, #88	@ 0x58
 8003b78:	443b      	add	r3, r7
 8003b7a:	3b40      	subs	r3, #64	@ 0x40
 8003b7c:	edc3 7a00 	vstr	s15, [r3]
 8003b80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b82:	3301      	adds	r3, #1
 8003b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	dde7      	ble.n	8003b5c <motor_mixer_quad_x+0x1c4>
    }

	// If any motor is below 0.0, raise all motors by the deficit
    if (mmin < 0.0f) {
 8003b8c:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003b90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b98:	d522      	bpl.n	8003be0 <motor_mixer_quad_x+0x248>
        float shift = 0.0f - mmin;
 8003b9a:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 8003c78 <motor_mixer_quad_x+0x2e0>
 8003b9e:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003ba6:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        for (int i = 0; i < NUM_MOTORS; i++) m[i] += shift;
 8003baa:	2300      	movs	r3, #0
 8003bac:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bae:	e014      	b.n	8003bda <motor_mixer_quad_x+0x242>
 8003bb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	3358      	adds	r3, #88	@ 0x58
 8003bb6:	443b      	add	r3, r7
 8003bb8:	3b40      	subs	r3, #64	@ 0x40
 8003bba:	ed93 7a00 	vldr	s14, [r3]
 8003bbe:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8003bc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	3358      	adds	r3, #88	@ 0x58
 8003bcc:	443b      	add	r3, r7
 8003bce:	3b40      	subs	r3, #64	@ 0x40
 8003bd0:	edc3 7a00 	vstr	s15, [r3]
 8003bd4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003bda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	dde7      	ble.n	8003bb0 <motor_mixer_quad_x+0x218>
    }

	// Step 3: Clamp to [throttle_idle..1.0] and write output
    for (int i = 0; i < NUM_MOTORS; i++) {
 8003be0:	2300      	movs	r3, #0
 8003be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be4:	e03a      	b.n	8003c5c <motor_mixer_quad_x+0x2c4>
        m[i] = CLAMP(m[i], throttle_idle, MAX_THROTTLE_MIX);
 8003be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	3358      	adds	r3, #88	@ 0x58
 8003bec:	443b      	add	r3, r7
 8003bee:	3b40      	subs	r3, #64	@ 0x40
 8003bf0:	edd3 7a00 	vldr	s15, [r3]
 8003bf4:	ed97 7a01 	vldr	s14, [r7, #4]
 8003bf8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c00:	dd01      	ble.n	8003c06 <motor_mixer_quad_x+0x26e>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	e016      	b.n	8003c34 <motor_mixer_quad_x+0x29c>
 8003c06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	3358      	adds	r3, #88	@ 0x58
 8003c0c:	443b      	add	r3, r7
 8003c0e:	3b40      	subs	r3, #64	@ 0x40
 8003c10:	edd3 7a00 	vldr	s15, [r3]
 8003c14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c18:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c20:	dd02      	ble.n	8003c28 <motor_mixer_quad_x+0x290>
 8003c22:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003c26:	e005      	b.n	8003c34 <motor_mixer_quad_x+0x29c>
 8003c28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	3358      	adds	r3, #88	@ 0x58
 8003c2e:	443b      	add	r3, r7
 8003c30:	3b40      	subs	r3, #64	@ 0x40
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c36:	0092      	lsls	r2, r2, #2
 8003c38:	3258      	adds	r2, #88	@ 0x58
 8003c3a:	443a      	add	r2, r7
 8003c3c:	3a40      	subs	r2, #64	@ 0x40
 8003c3e:	6013      	str	r3, [r2, #0]
        motor_dshot[i] = m[i];
 8003c40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	4413      	add	r3, r2
 8003c48:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003c4a:	0092      	lsls	r2, r2, #2
 8003c4c:	3258      	adds	r2, #88	@ 0x58
 8003c4e:	443a      	add	r2, r7
 8003c50:	3a40      	subs	r2, #64	@ 0x40
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 8003c56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c58:	3301      	adds	r3, #1
 8003c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	ddc1      	ble.n	8003be6 <motor_mixer_quad_x+0x24e>
    }
}
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
 8003c66:	375c      	adds	r7, #92	@ 0x5c
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	3ceaaefa 	.word	0x3ceaaefa
 8003c74:	08021440 	.word	0x08021440
 8003c78:	00000000 	.word	0x00000000

08003c7c <pid_init>:
#include <math.h>

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

void pid_init(pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output) {
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6178      	str	r0, [r7, #20]
 8003c84:	ed87 0a04 	vstr	s0, [r7, #16]
 8003c88:	edc7 0a03 	vstr	s1, [r7, #12]
 8003c8c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003c90:	edc7 1a01 	vstr	s3, [r7, #4]
 8003c94:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	609a      	str	r2, [r3, #8]
    pid->Ki = Ki;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	60da      	str	r2, [r3, #12]
    pid->Kd = Kd;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	611a      	str	r2, [r3, #16]
    pid->min_output = min_output;
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	605a      	str	r2, [r3, #4]
    pid->max_output = max_output;
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	601a      	str	r2, [r3, #0]
    pid->error = 0.0f;
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	615a      	str	r2, [r3, #20]
    pid->pre_error = 0.0f;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f04f 0200 	mov.w	r2, #0
 8003ccc:	621a      	str	r2, [r3, #32]
    pid->integral_max_error = -1.0;
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	4a07      	ldr	r2, [pc, #28]	@ (8003cf0 <pid_init+0x74>)
 8003cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->delta_time = 0.0f;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f04f 0200 	mov.w	r2, #0
 8003cda:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->derivative_error = 0.0f;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	f04f 0200 	mov.w	r2, #0
 8003ce2:	61da      	str	r2, [r3, #28]
}
 8003ce4:	bf00      	nop
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr
 8003cf0:	bf800000 	.word	0xbf800000

08003cf4 <pid_init_with_integral_limit>:

void pid_init_with_integral_limit(pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output, float integral_max_error) {
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b088      	sub	sp, #32
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	61f8      	str	r0, [r7, #28]
 8003cfc:	ed87 0a06 	vstr	s0, [r7, #24]
 8003d00:	edc7 0a05 	vstr	s1, [r7, #20]
 8003d04:	ed87 1a04 	vstr	s2, [r7, #16]
 8003d08:	edc7 1a03 	vstr	s3, [r7, #12]
 8003d0c:	ed87 2a02 	vstr	s4, [r7, #8]
 8003d10:	edc7 2a01 	vstr	s5, [r7, #4]
    pid_init(pid, Kp, Ki, Kd, min_output, max_output);
 8003d14:	ed97 2a02 	vldr	s4, [r7, #8]
 8003d18:	edd7 1a03 	vldr	s3, [r7, #12]
 8003d1c:	ed97 1a04 	vldr	s2, [r7, #16]
 8003d20:	edd7 0a05 	vldr	s1, [r7, #20]
 8003d24:	ed97 0a06 	vldr	s0, [r7, #24]
 8003d28:	69f8      	ldr	r0, [r7, #28]
 8003d2a:	f7ff ffa7 	bl	8003c7c <pid_init>
    pid_set_integral_limit(pid, integral_max_error);
 8003d2e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d32:	69f8      	ldr	r0, [r7, #28]
 8003d34:	f000 f8d4 	bl	8003ee0 <pid_set_integral_limit>
}
 8003d38:	bf00      	nop
 8003d3a:	3720      	adds	r7, #32
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <pid_calculate>:

float pid_calculate(pid_t *pid, float setpoint, float process_value, float dt) {
 8003d40:	b480      	push	{r7}
 8003d42:	b08b      	sub	sp, #44	@ 0x2c
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	ed87 0a02 	vstr	s0, [r7, #8]
 8003d4c:	edc7 0a01 	vstr	s1, [r7, #4]
 8003d50:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - process_value;
 8003d54:	ed97 7a02 	vldr	s14, [r7, #8]
 8003d58:	edd7 7a01 	vldr	s15, [r7, #4]
 8003d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003d60:	edc7 7a05 	vstr	s15, [r7, #20]
    float Pout = pid->Kp * error;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	edd3 7a02 	vldr	s15, [r3, #8]
 8003d6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d72:	edc7 7a04 	vstr	s15, [r7, #16]
    float Iout = 0.0f;
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    float Dout = 0.0f;
 8003d7c:	f04f 0300 	mov.w	r3, #0
 8003d80:	623b      	str	r3, [r7, #32]
    float derivative = 0.0f;
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	61fb      	str	r3, [r7, #28]
    dt = fabsf(dt);
 8003d88:	edd7 7a00 	vldr	s15, [r7]
 8003d8c:	eef0 7ae7 	vabs.f32	s15, s15
 8003d90:	edc7 7a00 	vstr	s15, [r7]
    pid->delta_time = dt;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	683a      	ldr	r2, [r7, #0]
 8003d98:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->error = error;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	615a      	str	r2, [r3, #20]

    if (dt > FLT_EPSILON) {
 8003da0:	edd7 7a00 	vldr	s15, [r7]
 8003da4:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003edc <pid_calculate+0x19c>
 8003da8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003dac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003db0:	dd5c      	ble.n	8003e6c <pid_calculate+0x12c>
        pid->integral += error * dt;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	ed93 7a08 	vldr	s14, [r3, #32]
 8003db8:	edd7 6a05 	vldr	s13, [r7, #20]
 8003dbc:	edd7 7a00 	vldr	s15, [r7]
 8003dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003dc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	edc3 7a08 	vstr	s15, [r3, #32]

        if (pid->integral_max_error > FLT_EPSILON) {
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003dd4:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8003edc <pid_calculate+0x19c>
 8003dd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de0:	dd24      	ble.n	8003e2c <pid_calculate+0xec>
            if (pid->integral > pid->integral_max_error)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	ed93 7a08 	vldr	s14, [r3, #32]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003dee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df6:	dd04      	ble.n	8003e02 <pid_calculate+0xc2>
                pid->integral = pid->integral_max_error;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	621a      	str	r2, [r3, #32]
 8003e00:	e014      	b.n	8003e2c <pid_calculate+0xec>
            else if (pid->integral < -pid->integral_max_error)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	ed93 7a08 	vldr	s14, [r3, #32]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003e0e:	eef1 7a67 	vneg.f32	s15, s15
 8003e12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e1a:	d507      	bpl.n	8003e2c <pid_calculate+0xec>
                pid->integral = -pid->integral_max_error;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003e22:	eef1 7a67 	vneg.f32	s15, s15
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	edc3 7a08 	vstr	s15, [r3, #32]
        }

        Iout = pid->Ki * pid->integral;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	edd3 7a08 	vldr	s15, [r3, #32]
 8003e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e3c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        derivative = (error - pid->pre_error) / dt;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	edd3 7a06 	vldr	s15, [r3, #24]
 8003e46:	ed97 7a05 	vldr	s14, [r7, #20]
 8003e4a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e4e:	ed97 7a00 	vldr	s14, [r7]
 8003e52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e56:	edc7 7a07 	vstr	s15, [r7, #28]
        Dout = pid->Kd * derivative;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003e60:	ed97 7a07 	vldr	s14, [r7, #28]
 8003e64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e68:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    float output = Pout + Iout + Dout;
 8003e6c:	ed97 7a04 	vldr	s14, [r7, #16]
 8003e70:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003e74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e78:	ed97 7a08 	vldr	s14, [r7, #32]
 8003e7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e80:	edc7 7a06 	vstr	s15, [r7, #24]

    if (output > pid->max_output) output = pid->max_output;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	ed97 7a06 	vldr	s14, [r7, #24]
 8003e8e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e96:	dd03      	ble.n	8003ea0 <pid_calculate+0x160>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	e00c      	b.n	8003eba <pid_calculate+0x17a>
    else if (output < pid->min_output) output = pid->min_output;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ea6:	ed97 7a06 	vldr	s14, [r7, #24]
 8003eaa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003eae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003eb2:	d502      	bpl.n	8003eba <pid_calculate+0x17a>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	61bb      	str	r3, [r7, #24]
    pid->derivative_error = derivative;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	69fa      	ldr	r2, [r7, #28]
 8003ebe:	61da      	str	r2, [r3, #28]
    pid->pre_error = error;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	619a      	str	r2, [r3, #24]
    return output;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	ee07 3a90 	vmov	s15, r3
}
 8003ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8003ed0:	372c      	adds	r7, #44	@ 0x2c
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	34000000 	.word	0x34000000

08003ee0 <pid_set_integral_limit>:
void pid_set_min_output(pid_t *pid, float val) { pid->min_output = val; }
void pid_set_Kp(pid_t *pid, float val) { pid->Kp = val; }
void pid_set_Ki(pid_t *pid, float val) { pid->Ki = val; }
void pid_set_Kd(pid_t *pid, float val) { pid->Kd = val; }

void pid_set_integral_limit(pid_t *pid, float val) {
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
 8003ee8:	ed87 0a00 	vstr	s0, [r7]
    val = fabsf(val);
 8003eec:	edd7 7a00 	vldr	s15, [r7]
 8003ef0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ef4:	edc7 7a00 	vstr	s15, [r7]
    pid->integral_max_error = val;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	683a      	ldr	r2, [r7, #0]
 8003efc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pid->integral > val) pid->integral = val;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	edd3 7a08 	vldr	s15, [r3, #32]
 8003f04:	ed97 7a00 	vldr	s14, [r7]
 8003f08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f10:	d503      	bpl.n	8003f1a <pid_set_integral_limit+0x3a>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	621a      	str	r2, [r3, #32]
    else if (pid->integral < -val) pid->integral = -val;
}
 8003f18:	e013      	b.n	8003f42 <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	ed93 7a08 	vldr	s14, [r3, #32]
 8003f20:	edd7 7a00 	vldr	s15, [r7]
 8003f24:	eef1 7a67 	vneg.f32	s15, s15
 8003f28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f30:	d400      	bmi.n	8003f34 <pid_set_integral_limit+0x54>
}
 8003f32:	e006      	b.n	8003f42 <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8003f34:	edd7 7a00 	vldr	s15, [r7]
 8003f38:	eef1 7a67 	vneg.f32	s15, s15
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8003f42:	bf00      	nop
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <pid_reset>:
float pid_get_Kp(pid_t *pid) { return pid->Kp; }
float pid_get_Ki(pid_t *pid) { return pid->Ki; }
float pid_get_Kd(pid_t *pid) { return pid->Kd; }
float pid_get_integral_error(pid_t *pid) { return pid->integral; }

void pid_reset(pid_t *pid) {
 8003f4e:	b480      	push	{r7}
 8003f50:	b083      	sub	sp, #12
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
    pid->pre_error = 0.0f;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f04f 0200 	mov.w	r2, #0
 8003f64:	621a      	str	r2, [r3, #32]
    pid->error = 0.0f;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	615a      	str	r2, [r3, #20]
    pid->derivative_error = 0.0f;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	61da      	str	r2, [r3, #28]
    pid->delta_time = 0.0f;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f04f 0200 	mov.w	r2, #0
 8003f7c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <rate_controller_init>:
void rate_controller_init(
    rate_controller_t* fc,
    float sample_rate_hz,
    float d_term_pid_filter_cutoff_freq_hz,
    float ff_term_pid_filter_cutoff_freq_hz
) {
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	ed87 0a02 	vstr	s0, [r7, #8]
 8003f98:	edc7 0a01 	vstr	s1, [r7, #4]
 8003f9c:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d076      	beq.n	8004094 <rate_controller_init+0x108>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(rate_controller_t));
 8003fa6:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8003faa:	2100      	movs	r1, #0
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f017 faa1 	bl	801b4f4 <memset>

    // Store sample rate and D-term gain (applied manually in update loop)
    fc->sample_rate_hz = sample_rate_hz;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Initialize D-term filters (low-pass for noise reduction) ---
    pt2_filter_init_lowpass(&(fc->d_term_pid_roll_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	33c4      	adds	r3, #196	@ 0xc4
 8003fbc:	edd7 0a02 	vldr	s1, [r7, #8]
 8003fc0:	ed97 0a01 	vldr	s0, [r7, #4]
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fd fbea 	bl	800179e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_pitch_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	33ec      	adds	r3, #236	@ 0xec
 8003fce:	edd7 0a02 	vldr	s1, [r7, #8]
 8003fd2:	ed97 0a01 	vldr	s0, [r7, #4]
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fd fbe1 	bl	800179e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_yaw_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8003fe2:	edd7 0a02 	vldr	s1, [r7, #8]
 8003fe6:	ed97 0a01 	vldr	s0, [r7, #4]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd fbd7 	bl	800179e <pt2_filter_init_lowpass>

	// --- Initialize FF-term filters (PT1 for smoothing) ---
	pt1_filter_init_lowpass(&(fc->ff_term_pid_roll_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003ff6:	edd7 0a02 	vldr	s1, [r7, #8]
 8003ffa:	ed97 0a00 	vldr	s0, [r7]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fd fb36 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_pitch_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800400a:	edd7 0a02 	vldr	s1, [r7, #8]
 800400e:	ed97 0a00 	vldr	s0, [r7]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fd fb2c 	bl	8001670 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_yaw_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800401e:	edd7 0a02 	vldr	s1, [r7, #8]
 8004022:	ed97 0a00 	vldr	s0, [r7]
 8004026:	4618      	mov	r0, r3
 8004028:	f7fd fb22 	bl	8001670 <pt1_filter_init_lowpass>

    // --- Initialize PID controllers (no D gain here; applied separately) ---
    pid_init_with_integral_limit(&(fc->pid_roll), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3328      	adds	r3, #40	@ 0x28
 8004030:	eddf 2a1a 	vldr	s5, [pc, #104]	@ 800409c <rate_controller_init+0x110>
 8004034:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 80040a0 <rate_controller_init+0x114>
 8004038:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 80040a4 <rate_controller_init+0x118>
 800403c:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 800409c <rate_controller_init+0x110>
 8004040:	eddf 0a16 	vldr	s1, [pc, #88]	@ 800409c <rate_controller_init+0x110>
 8004044:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 800409c <rate_controller_init+0x110>
 8004048:	4618      	mov	r0, r3
 800404a:	f7ff fe53 	bl	8003cf4 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_pitch), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	3354      	adds	r3, #84	@ 0x54
 8004052:	eddf 2a12 	vldr	s5, [pc, #72]	@ 800409c <rate_controller_init+0x110>
 8004056:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 80040a0 <rate_controller_init+0x114>
 800405a:	eddf 1a12 	vldr	s3, [pc, #72]	@ 80040a4 <rate_controller_init+0x118>
 800405e:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 800409c <rate_controller_init+0x110>
 8004062:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 800409c <rate_controller_init+0x110>
 8004066:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800409c <rate_controller_init+0x110>
 800406a:	4618      	mov	r0, r3
 800406c:	f7ff fe42 	bl	8003cf4 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_yaw), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	3380      	adds	r3, #128	@ 0x80
 8004074:	eddf 2a09 	vldr	s5, [pc, #36]	@ 800409c <rate_controller_init+0x110>
 8004078:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 80040a0 <rate_controller_init+0x114>
 800407c:	eddf 1a09 	vldr	s3, [pc, #36]	@ 80040a4 <rate_controller_init+0x118>
 8004080:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 800409c <rate_controller_init+0x110>
 8004084:	eddf 0a05 	vldr	s1, [pc, #20]	@ 800409c <rate_controller_init+0x110>
 8004088:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 800409c <rate_controller_init+0x110>
 800408c:	4618      	mov	r0, r3
 800408e:	f7ff fe31 	bl	8003cf4 <pid_init_with_integral_limit>
 8004092:	e000      	b.n	8004096 <rate_controller_init+0x10a>
        return;
 8004094:	bf00      	nop
}
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	00000000 	.word	0x00000000
 80040a0:	410ba058 	.word	0x410ba058
 80040a4:	c10ba058 	.word	0xc10ba058

080040a8 <rate_controller_init_roll_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b086      	sub	sp, #24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6178      	str	r0, [r7, #20]
 80040b0:	ed87 0a04 	vstr	s0, [r7, #16]
 80040b4:	edc7 0a03 	vstr	s1, [r7, #12]
 80040b8:	ed87 1a02 	vstr	s2, [r7, #8]
 80040bc:	edc7 1a01 	vstr	s3, [r7, #4]
 80040c0:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_roll), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	3328      	adds	r3, #40	@ 0x28
 80040c8:	edd7 2a01 	vldr	s5, [r7, #4]
 80040cc:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8004100 <rate_controller_init_roll_pid+0x58>
 80040d0:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8004104 <rate_controller_init_roll_pid+0x5c>
 80040d4:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8004108 <rate_controller_init_roll_pid+0x60>
 80040d8:	edd7 0a03 	vldr	s1, [r7, #12]
 80040dc:	ed97 0a04 	vldr	s0, [r7, #16]
 80040e0:	4618      	mov	r0, r3
 80040e2:	f7ff fe07 	bl	8003cf4 <pid_init_with_integral_limit>
    fc->pid_roll_k_d = pid_k_d;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	fc->pid_roll_k_ff = pid_k_ff;
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 80040f6:	bf00      	nop
 80040f8:	3718      	adds	r7, #24
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	410ba058 	.word	0x410ba058
 8004104:	c10ba058 	.word	0xc10ba058
 8004108:	00000000 	.word	0x00000000

0800410c <rate_controller_init_pitch_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	6178      	str	r0, [r7, #20]
 8004114:	ed87 0a04 	vstr	s0, [r7, #16]
 8004118:	edc7 0a03 	vstr	s1, [r7, #12]
 800411c:	ed87 1a02 	vstr	s2, [r7, #8]
 8004120:	edc7 1a01 	vstr	s3, [r7, #4]
 8004124:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_pitch), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3354      	adds	r3, #84	@ 0x54
 800412c:	edd7 2a01 	vldr	s5, [r7, #4]
 8004130:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8004164 <rate_controller_init_pitch_pid+0x58>
 8004134:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8004168 <rate_controller_init_pitch_pid+0x5c>
 8004138:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 800416c <rate_controller_init_pitch_pid+0x60>
 800413c:	edd7 0a03 	vldr	s1, [r7, #12]
 8004140:	ed97 0a04 	vldr	s0, [r7, #16]
 8004144:	4618      	mov	r0, r3
 8004146:	f7ff fdd5 	bl	8003cf4 <pid_init_with_integral_limit>
    fc->pid_pitch_k_d = pid_k_d;
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    fc->pid_pitch_k_ff = pid_k_ff;
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 800415a:	bf00      	nop
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	410ba058 	.word	0x410ba058
 8004168:	c10ba058 	.word	0xc10ba058
 800416c:	00000000 	.word	0x00000000

08004170 <rate_controller_init_yaw_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6178      	str	r0, [r7, #20]
 8004178:	ed87 0a04 	vstr	s0, [r7, #16]
 800417c:	edc7 0a03 	vstr	s1, [r7, #12]
 8004180:	ed87 1a02 	vstr	s2, [r7, #8]
 8004184:	edc7 1a01 	vstr	s3, [r7, #4]
 8004188:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_yaw), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	3380      	adds	r3, #128	@ 0x80
 8004190:	edd7 2a01 	vldr	s5, [r7, #4]
 8004194:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 80041c8 <rate_controller_init_yaw_pid+0x58>
 8004198:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 80041cc <rate_controller_init_yaw_pid+0x5c>
 800419c:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 80041d0 <rate_controller_init_yaw_pid+0x60>
 80041a0:	edd7 0a03 	vldr	s1, [r7, #12]
 80041a4:	ed97 0a04 	vldr	s0, [r7, #16]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7ff fda3 	bl	8003cf4 <pid_init_with_integral_limit>
    fc->pid_yaw_k_d = pid_k_d;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	68ba      	ldr	r2, [r7, #8]
 80041b2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    fc->pid_yaw_k_ff = pid_k_ff;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	683a      	ldr	r2, [r7, #0]
 80041ba:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 80041be:	bf00      	nop
 80041c0:	3718      	adds	r7, #24
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	410ba058 	.word	0x410ba058
 80041cc:	c10ba058 	.word	0xc10ba058
 80041d0:	00000000 	.word	0x00000000

080041d4 <rate_controller_update>:
	float sensor_pitch_rate,
	float sensor_yaw_rate,
    float target_roll_rate,
    float target_pitch_rate,
    float target_yaw_rate
) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b092      	sub	sp, #72	@ 0x48
 80041d8:	af00      	add	r7, sp, #0
 80041da:	61f8      	str	r0, [r7, #28]
 80041dc:	ed87 0a06 	vstr	s0, [r7, #24]
 80041e0:	edc7 0a05 	vstr	s1, [r7, #20]
 80041e4:	ed87 1a04 	vstr	s2, [r7, #16]
 80041e8:	edc7 1a03 	vstr	s3, [r7, #12]
 80041ec:	ed87 2a02 	vstr	s4, [r7, #8]
 80041f0:	edc7 2a01 	vstr	s5, [r7, #4]
    if (!fc) {
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 816c 	beq.w	80044d4 <rate_controller_update+0x300>
    float roll_out;
    float pitch_out;
    float yaw_out;

    // --- Store current sensor inputs and setpoints ---
    fc->prev_target_roll_rate = fc->target_roll_rate;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	68da      	ldr	r2, [r3, #12]
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	619a      	str	r2, [r3, #24]
	fc->prev_target_pitch_rate = fc->target_pitch_rate;
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	61da      	str	r2, [r3, #28]
	fc->prev_target_yaw_rate = fc->target_yaw_rate;
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	695a      	ldr	r2, [r3, #20]
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	621a      	str	r2, [r3, #32]

    fc->target_roll_rate = target_roll_rate;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	60da      	str	r2, [r3, #12]
    fc->target_pitch_rate = target_pitch_rate;
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	68ba      	ldr	r2, [r7, #8]
 800421e:	611a      	str	r2, [r3, #16]
    fc->target_yaw_rate = target_yaw_rate;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	615a      	str	r2, [r3, #20]

    fc->body_frame_roll_rate = sensor_roll_rate;
 8004226:	69fb      	ldr	r3, [r7, #28]
 8004228:	69ba      	ldr	r2, [r7, #24]
 800422a:	601a      	str	r2, [r3, #0]
	fc->body_frame_pitch_rate = sensor_pitch_rate;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	605a      	str	r2, [r3, #4]
    fc->body_frame_yaw_rate = sensor_yaw_rate;
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	609a      	str	r2, [r3, #8]

    float dt = HzToSec(fc->sample_rate_hz);
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 800423e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004242:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004246:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    if(fabsf(dt) > FLT_EPSILON){
 800424a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800424e:	eef0 7ae7 	vabs.f32	s15, s15
 8004252:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 80044dc <rate_controller_update+0x308>
 8004256:	eef4 7ac7 	vcmpe.f32	s15, s14
 800425a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800425e:	f340 80e4 	ble.w	800442a <rate_controller_update+0x256>

    // --- Step 5: PID control ---
    roll_out = pid_calculate(&fc->pid_roll, target_roll_rate, sensor_roll_rate, dt);
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	3328      	adds	r3, #40	@ 0x28
 8004266:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 800426a:	edd7 0a06 	vldr	s1, [r7, #24]
 800426e:	ed97 0a03 	vldr	s0, [r7, #12]
 8004272:	4618      	mov	r0, r3
 8004274:	f7ff fd64 	bl	8003d40 <pid_calculate>
 8004278:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    pitch_out = pid_calculate(&fc->pid_pitch, target_pitch_rate, sensor_pitch_rate, dt);
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	3354      	adds	r3, #84	@ 0x54
 8004280:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8004284:	edd7 0a05 	vldr	s1, [r7, #20]
 8004288:	ed97 0a02 	vldr	s0, [r7, #8]
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff fd57 	bl	8003d40 <pid_calculate>
 8004292:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
    yaw_out = pid_calculate(&fc->pid_yaw, target_yaw_rate, sensor_yaw_rate, dt);
 8004296:	69fb      	ldr	r3, [r7, #28]
 8004298:	3380      	adds	r3, #128	@ 0x80
 800429a:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 800429e:	edd7 0a04 	vldr	s1, [r7, #16]
 80042a2:	ed97 0a01 	vldr	s0, [r7, #4]
 80042a6:	4618      	mov	r0, r3
 80042a8:	f7ff fd4a 	bl	8003d40 <pid_calculate>
 80042ac:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

    float roll_k_ff = fc->pid_roll_k_ff * ((fc->target_roll_rate - fc->prev_target_roll_rate) / dt);
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	edd3 7a06 	vldr	s15, [r3, #24]
 80042c2:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80042c6:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80042ca:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80042ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float pitch_k_ff = fc->pid_pitch_k_ff * ((fc->target_pitch_rate - fc->prev_target_pitch_rate) / dt);
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	ed93 7a2f 	vldr	s14, [r3, #188]	@ 0xbc
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	edd3 6a04 	vldr	s13, [r3, #16]
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	edd3 7a07 	vldr	s15, [r3, #28]
 80042e8:	ee36 6ae7 	vsub.f32	s12, s13, s15
 80042ec:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80042f0:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80042f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042f8:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float yaw_k_ff = fc->pid_yaw_k_ff * ((fc->target_yaw_rate - fc->prev_target_yaw_rate) / dt);
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	edd3 6a05 	vldr	s13, [r3, #20]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	edd3 7a08 	vldr	s15, [r3, #32]
 800430e:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004312:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004316:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800431a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800431e:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	roll_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_roll_pt1_filter, roll_k_ff);
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004328:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 800432c:	4618      	mov	r0, r3
 800432e:	f7fd fa03 	bl	8001738 <pt1_filter_apply_lowpass>
 8004332:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	pitch_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_pitch_pt1_filter, pitch_k_ff);
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800433c:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8004340:	4618      	mov	r0, r3
 8004342:	f7fd f9f9 	bl	8001738 <pt1_filter_apply_lowpass>
 8004346:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	yaw_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_yaw_pt1_filter, yaw_k_ff);
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004350:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8004354:	4618      	mov	r0, r3
 8004356:	f7fd f9ef 	bl	8001738 <pt1_filter_apply_lowpass>
 800435a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

    // --- Step 6: D-term filtering ---
    float roll_d = pt2_filter_apply_lowpass(&fc->d_term_pid_roll_filter, fc->pid_roll.derivative_error * fc->pid_roll_k_d);
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8004370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004374:	eeb0 0a67 	vmov.f32	s0, s15
 8004378:	4610      	mov	r0, r2
 800437a:	f7fd fa33 	bl	80017e4 <pt2_filter_apply_lowpass>
 800437e:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    float pitch_d = pt2_filter_apply_lowpass(&fc->d_term_pid_pitch_filter, fc->pid_pitch.derivative_error * fc->pid_pitch_k_d);
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 800438e:	69fb      	ldr	r3, [r7, #28]
 8004390:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 8004394:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004398:	eeb0 0a67 	vmov.f32	s0, s15
 800439c:	4610      	mov	r0, r2
 800439e:	f7fd fa21 	bl	80017e4 <pt2_filter_apply_lowpass>
 80043a2:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float yaw_d = pt2_filter_apply_lowpass(&fc->d_term_pid_yaw_filter, fc->pid_yaw.derivative_error * fc->pid_yaw_k_d);
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	f503 728a 	add.w	r2, r3, #276	@ 0x114
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 80043b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80043bc:	eeb0 0a67 	vmov.f32	s0, s15
 80043c0:	4610      	mov	r0, r2
 80043c2:	f7fd fa0f 	bl	80017e4 <pt2_filter_apply_lowpass>
 80043c6:	ed87 0a08 	vstr	s0, [r7, #32]

    // Add D-term back to PID outputs
    roll_out += roll_d;
 80043ca:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80043ce:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80043d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043d6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_d;
 80043da:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80043de:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80043e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_d;
 80043ea:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80043ee:	edd7 7a08 	vldr	s15, [r7, #32]
 80043f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043f6:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Add FF term back to PID outputs
    roll_out += roll_k_ff;
 80043fa:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80043fe:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004402:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004406:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_k_ff;
 800440a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800440e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004412:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004416:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_k_ff;
 800441a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800441e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004422:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004426:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Clamp to allowed range
    roll_out = CLAMP(roll_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 800442a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800442e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80044e0 <rate_controller_update+0x30c>
 8004432:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	d501      	bpl.n	8004440 <rate_controller_update+0x26c>
 800443c:	4b29      	ldr	r3, [pc, #164]	@ (80044e4 <rate_controller_update+0x310>)
 800443e:	e00b      	b.n	8004458 <rate_controller_update+0x284>
 8004440:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004444:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80044e8 <rate_controller_update+0x314>
 8004448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800444c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004450:	dd01      	ble.n	8004456 <rate_controller_update+0x282>
 8004452:	4b26      	ldr	r3, [pc, #152]	@ (80044ec <rate_controller_update+0x318>)
 8004454:	e000      	b.n	8004458 <rate_controller_update+0x284>
 8004456:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004458:	647b      	str	r3, [r7, #68]	@ 0x44
    pitch_out = CLAMP(pitch_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 800445a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 800445e:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80044e0 <rate_controller_update+0x30c>
 8004462:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004466:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800446a:	d501      	bpl.n	8004470 <rate_controller_update+0x29c>
 800446c:	4b1d      	ldr	r3, [pc, #116]	@ (80044e4 <rate_controller_update+0x310>)
 800446e:	e00b      	b.n	8004488 <rate_controller_update+0x2b4>
 8004470:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004474:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 80044e8 <rate_controller_update+0x314>
 8004478:	eef4 7ac7 	vcmpe.f32	s15, s14
 800447c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004480:	dd01      	ble.n	8004486 <rate_controller_update+0x2b2>
 8004482:	4b1a      	ldr	r3, [pc, #104]	@ (80044ec <rate_controller_update+0x318>)
 8004484:	e000      	b.n	8004488 <rate_controller_update+0x2b4>
 8004486:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004488:	643b      	str	r3, [r7, #64]	@ 0x40
    yaw_out = CLAMP(yaw_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 800448a:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800448e:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80044e0 <rate_controller_update+0x30c>
 8004492:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449a:	d501      	bpl.n	80044a0 <rate_controller_update+0x2cc>
 800449c:	4b11      	ldr	r3, [pc, #68]	@ (80044e4 <rate_controller_update+0x310>)
 800449e:	e00b      	b.n	80044b8 <rate_controller_update+0x2e4>
 80044a0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80044a4:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 80044e8 <rate_controller_update+0x314>
 80044a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b0:	dd01      	ble.n	80044b6 <rate_controller_update+0x2e2>
 80044b2:	4b0e      	ldr	r3, [pc, #56]	@ (80044ec <rate_controller_update+0x318>)
 80044b4:	e000      	b.n	80044b8 <rate_controller_update+0x2e4>
 80044b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044b8:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Store final PID outputs
    fc->out_pid_roll = roll_out;
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044be:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = pitch_out;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80044c6:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = yaw_out;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044ce:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 80044d2:	e000      	b.n	80044d6 <rate_controller_update+0x302>
        return;
 80044d4:	bf00      	nop
}
 80044d6:	3748      	adds	r7, #72	@ 0x48
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	34000000 	.word	0x34000000
 80044e0:	c10ba058 	.word	0xc10ba058
 80044e4:	c10ba058 	.word	0xc10ba058
 80044e8:	410ba058 	.word	0x410ba058
 80044ec:	410ba058 	.word	0x410ba058

080044f0 <rate_controller_reset>:

void rate_controller_reset(rate_controller_t* fc) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b082      	sub	sp, #8
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
	pt2_filter_reset(&(fc->d_term_pid_roll_filter));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	33c4      	adds	r3, #196	@ 0xc4
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fd f98e 	bl	800181e <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_pitch_filter));
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	33ec      	adds	r3, #236	@ 0xec
 8004506:	4618      	mov	r0, r3
 8004508:	f7fd f989 	bl	800181e <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_yaw_filter));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd f983 	bl	800181e <pt2_filter_reset>

    pt1_filter_reset(&(fc->ff_term_pid_roll_pt1_filter));
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd f92f 	bl	8001782 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_pitch_pt1_filter));
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800452a:	4618      	mov	r0, r3
 800452c:	f7fd f929 	bl	8001782 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_yaw_pt1_filter));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004536:	4618      	mov	r0, r3
 8004538:	f7fd f923 	bl	8001782 <pt1_filter_reset>

    pid_reset(&(fc->pid_roll));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	3328      	adds	r3, #40	@ 0x28
 8004540:	4618      	mov	r0, r3
 8004542:	f7ff fd04 	bl	8003f4e <pid_reset>
    pid_reset(&(fc->pid_pitch));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3354      	adds	r3, #84	@ 0x54
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff fcff 	bl	8003f4e <pid_reset>
    pid_reset(&(fc->pid_yaw));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	3380      	adds	r3, #128	@ 0x80
 8004554:	4618      	mov	r0, r3
 8004556:	f7ff fcfa 	bl	8003f4e <pid_reset>

    fc->prev_target_roll_rate = 0.0f;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f04f 0200 	mov.w	r2, #0
 8004560:	619a      	str	r2, [r3, #24]
    fc->prev_target_pitch_rate = 0.0f;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	61da      	str	r2, [r3, #28]
    fc->prev_target_yaw_rate = 0.0f;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	621a      	str	r2, [r3, #32]

    fc->out_pid_roll = 0.0f;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f04f 0200 	mov.w	r2, #0
 8004578:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = 0.0f;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f04f 0200 	mov.w	r2, #0
 8004582:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = 0.0f;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f04f 0200 	mov.w	r2, #0
 800458c:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
}
 8004590:	bf00      	nop
 8004592:	3708      	adds	r7, #8
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <rate_controller_get_pid_outputs>:
void rate_controller_get_pid_outputs(
    rate_controller_t* fc,
    float* out_pid_roll,
    float* out_pid_pitch,
    float* out_pid_yaw
) {
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	60f8      	str	r0, [r7, #12]
 80045a0:	60b9      	str	r1, [r7, #8]
 80045a2:	607a      	str	r2, [r7, #4]
 80045a4:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d018      	beq.n	80045de <rate_controller_get_pid_outputs+0x46>
        return; // Avoid null pointer access
    }
    if (out_pid_roll) {
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d004      	beq.n	80045bc <rate_controller_get_pid_outputs+0x24>
        *out_pid_roll = fc->out_pid_roll;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_pitch) {
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d004      	beq.n	80045cc <rate_controller_get_pid_outputs+0x34>
        *out_pid_pitch = fc->out_pid_pitch;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_yaw) {
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d006      	beq.n	80045e0 <rate_controller_get_pid_outputs+0x48>
        *out_pid_yaw = fc->out_pid_yaw;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e000      	b.n	80045e0 <rate_controller_get_pid_outputs+0x48>
        return; // Avoid null pointer access
 80045de:	bf00      	nop
    }
}
 80045e0:	3714      	adds	r7, #20
 80045e2:	46bd      	mov	sp, r7
 80045e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e8:	4770      	bx	lr

080045ea <rc_channel_filter_init>:
#include "rc_control.h"
#include <math.h>
#include <string.h>
#include "geometry2D.h"

void rc_channel_filter_init(rc_channel_filter_t* channel, int enable_lpf, float lpf_cutoff_freq_hz, float deadband,float multiplier,  float expo, float sample_rate_hz) {
 80045ea:	b580      	push	{r7, lr}
 80045ec:	b088      	sub	sp, #32
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	61f8      	str	r0, [r7, #28]
 80045f2:	61b9      	str	r1, [r7, #24]
 80045f4:	ed87 0a05 	vstr	s0, [r7, #20]
 80045f8:	edc7 0a04 	vstr	s1, [r7, #16]
 80045fc:	ed87 1a03 	vstr	s2, [r7, #12]
 8004600:	edc7 1a02 	vstr	s3, [r7, #8]
 8004604:	ed87 2a01 	vstr	s4, [r7, #4]
	memset(channel, 0, sizeof(rc_channel_filter_t));
 8004608:	2230      	movs	r2, #48	@ 0x30
 800460a:	2100      	movs	r1, #0
 800460c:	69f8      	ldr	r0, [r7, #28]
 800460e:	f016 ff71 	bl	801b4f4 <memset>

	channel->enable_lpf = enable_lpf;
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	601a      	str	r2, [r3, #0]
	if (enable_lpf) {
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d008      	beq.n	8004630 <rc_channel_filter_init+0x46>
		pt1_filter_init_lowpass(&channel->lpf, lpf_cutoff_freq_hz, sample_rate_hz);
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3304      	adds	r3, #4
 8004622:	edd7 0a01 	vldr	s1, [r7, #4]
 8004626:	ed97 0a05 	vldr	s0, [r7, #20]
 800462a:	4618      	mov	r0, r3
 800462c:	f7fd f820 	bl	8001670 <pt1_filter_init_lowpass>
	}
	channel->smoothed = 0.0f;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	f04f 0200 	mov.w	r2, #0
 8004636:	615a      	str	r2, [r3, #20]
	channel->raw = 0.0f;
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f04f 0200 	mov.w	r2, #0
 800463e:	619a      	str	r2, [r3, #24]
	channel->prev_raw = 0.0f;
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	f04f 0200 	mov.w	r2, #0
 8004646:	61da      	str	r2, [r3, #28]
	channel->deadband = deadband;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	621a      	str	r2, [r3, #32]
	channel->multiplier = multiplier;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	68fa      	ldr	r2, [r7, #12]
 8004652:	629a      	str	r2, [r3, #40]	@ 0x28
	channel->expo = expo;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	625a      	str	r2, [r3, #36]	@ 0x24
	channel->sample_rate = sample_rate_hz;
 800465a:	69fb      	ldr	r3, [r7, #28]
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004660:	bf00      	nop
 8004662:	3720      	adds	r7, #32
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <rc_channel_filter_update>:

void rc_channel_filter_update(rc_channel_filter_t* channel, float raw_input) {
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	ed87 0a00 	vstr	s0, [r7]
	channel->prev_raw = channel->raw;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	699a      	ldr	r2, [r3, #24]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	61da      	str	r2, [r3, #28]
	channel->raw = raw_input;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	619a      	str	r2, [r3, #24]

	float processed_input = raw_input;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	60fb      	str	r3, [r7, #12]

	// Apply deadband
	if (fabsf(processed_input) < channel->deadband) {
 8004686:	edd7 7a03 	vldr	s15, [r7, #12]
 800468a:	eeb0 7ae7 	vabs.f32	s14, s15
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	edd3 7a08 	vldr	s15, [r3, #32]
 8004694:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469c:	d503      	bpl.n	80046a6 <rc_channel_filter_update+0x3e>
		processed_input = 0.0f;
 800469e:	f04f 0300 	mov.w	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e02b      	b.n	80046fe <rc_channel_filter_update+0x96>
	}
	else {
		// Scale to compensate for deadband
		if (processed_input > 0.0f) {
 80046a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80046aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80046ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b2:	dd12      	ble.n	80046da <rc_channel_filter_update+0x72>
			processed_input = (processed_input - channel->deadband) / (1.0f - channel->deadband);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	edd3 7a08 	vldr	s15, [r3, #32]
 80046ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80046be:	ee77 6a67 	vsub.f32	s13, s14, s15
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	edd3 7a08 	vldr	s15, [r3, #32]
 80046c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046d4:	edc7 7a03 	vstr	s15, [r7, #12]
 80046d8:	e011      	b.n	80046fe <rc_channel_filter_update+0x96>
		}
		else {
			processed_input = (processed_input + channel->deadband) / (1.0f - channel->deadband);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	ed93 7a08 	vldr	s14, [r3, #32]
 80046e0:	edd7 7a03 	vldr	s15, [r7, #12]
 80046e4:	ee77 6a27 	vadd.f32	s13, s14, s15
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	edd3 7a08 	vldr	s15, [r3, #32]
 80046ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046fa:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	}

	// Apply exponential curve
	if (channel->expo != 0.0f) {
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004704:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004708:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800470c:	d01a      	beq.n	8004744 <rc_channel_filter_update+0xdc>
		processed_input = copysignf(powf(fabsf(processed_input), 1.0f + channel->expo), processed_input);
 800470e:	edd7 7a03 	vldr	s15, [r7, #12]
 8004712:	eeb0 7ae7 	vabs.f32	s14, s15
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 800471c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004724:	eef0 0a67 	vmov.f32	s1, s15
 8004728:	eeb0 0a47 	vmov.f32	s0, s14
 800472c:	f014 f82e 	bl	801878c <powf>
 8004730:	eef0 7a40 	vmov.f32	s15, s0
 8004734:	edd7 0a03 	vldr	s1, [r7, #12]
 8004738:	eeb0 0a67 	vmov.f32	s0, s15
 800473c:	f014 fa0c 	bl	8018b58 <copysignf>
 8004740:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	processed_input = processed_input * channel->multiplier;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800474a:	ed97 7a03 	vldr	s14, [r7, #12]
 800474e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004752:	edc7 7a03 	vstr	s15, [r7, #12]

	if (channel->enable_lpf) {
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d008      	beq.n	8004770 <rc_channel_filter_update+0x108>
		processed_input = pt1_filter_apply_lowpass(&channel->lpf, processed_input);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3304      	adds	r3, #4
 8004762:	ed97 0a03 	vldr	s0, [r7, #12]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fc ffe6 	bl	8001738 <pt1_filter_apply_lowpass>
 800476c:	ed87 0a03 	vstr	s0, [r7, #12]
	}
	channel->smoothed = processed_input;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	615a      	str	r2, [r3, #20]
}
 8004776:	bf00      	nop
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <rc_channel_filter_get_processed>:

float rc_channel_filter_get_processed(rc_channel_filter_t* channel) {
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
	return channel->smoothed;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	ee07 3a90 	vmov	s15, r3
}
 800478e:	eeb0 0a67 	vmov.f32	s0, s15
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <rc_attitude_control_init_roll>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	61f8      	str	r0, [r7, #28]
 80047a4:	61b9      	str	r1, [r7, #24]
 80047a6:	ed87 0a05 	vstr	s0, [r7, #20]
 80047aa:	edc7 0a04 	vstr	s1, [r7, #16]
 80047ae:	ed87 1a03 	vstr	s2, [r7, #12]
 80047b2:	edc7 1a02 	vstr	s3, [r7, #8]
 80047b6:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->roll_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	ed97 2a01 	vldr	s4, [r7, #4]
 80047c0:	edd7 1a02 	vldr	s3, [r7, #8]
 80047c4:	ed97 1a03 	vldr	s2, [r7, #12]
 80047c8:	edd7 0a04 	vldr	s1, [r7, #16]
 80047cc:	ed97 0a05 	vldr	s0, [r7, #20]
 80047d0:	69b9      	ldr	r1, [r7, #24]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7ff ff09 	bl	80045ea <rc_channel_filter_init>
}
 80047d8:	bf00      	nop
 80047da:	3720      	adds	r7, #32
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <rc_attitude_control_update_roll>:

void rc_attitude_control_update_roll(
	rc_attitude_control_t* rc,
	float raw_input
) {
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 80047ec:	edd7 7a00 	vldr	s15, [r7]
 80047f0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80047f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80047f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047fc:	d501      	bpl.n	8004802 <rc_attitude_control_update_roll+0x22>
 80047fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004834 <rc_attitude_control_update_roll+0x54>)
 8004800:	e00c      	b.n	800481c <rc_attitude_control_update_roll+0x3c>
 8004802:	edd7 7a00 	vldr	s15, [r7]
 8004806:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800480a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800480e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004812:	dd02      	ble.n	800481a <rc_attitude_control_update_roll+0x3a>
 8004814:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004818:	e000      	b.n	800481c <rc_attitude_control_update_roll+0x3c>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->roll_filter, raw_input);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	ed97 0a00 	vldr	s0, [r7]
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff ff1f 	bl	8004668 <rc_channel_filter_update>
}
 800482a:	bf00      	nop
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	bf800000 	.word	0xbf800000

08004838 <rc_attitude_control_get_processed_roll>:

float rc_attitude_control_get_processed_roll(
	rc_attitude_control_t* rc
) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->roll_filter);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	4618      	mov	r0, r3
 8004844:	f7ff ff9b 	bl	800477e <rc_channel_filter_get_processed>
 8004848:	eef0 7a40 	vmov.f32	s15, s0
}
 800484c:	eeb0 0a67 	vmov.f32	s0, s15
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <rc_attitude_control_init_pitch>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8004856:	b580      	push	{r7, lr}
 8004858:	b088      	sub	sp, #32
 800485a:	af00      	add	r7, sp, #0
 800485c:	61f8      	str	r0, [r7, #28]
 800485e:	61b9      	str	r1, [r7, #24]
 8004860:	ed87 0a05 	vstr	s0, [r7, #20]
 8004864:	edc7 0a04 	vstr	s1, [r7, #16]
 8004868:	ed87 1a03 	vstr	s2, [r7, #12]
 800486c:	edc7 1a02 	vstr	s3, [r7, #8]
 8004870:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->pitch_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	3330      	adds	r3, #48	@ 0x30
 8004878:	ed97 2a01 	vldr	s4, [r7, #4]
 800487c:	edd7 1a02 	vldr	s3, [r7, #8]
 8004880:	ed97 1a03 	vldr	s2, [r7, #12]
 8004884:	edd7 0a04 	vldr	s1, [r7, #16]
 8004888:	ed97 0a05 	vldr	s0, [r7, #20]
 800488c:	69b9      	ldr	r1, [r7, #24]
 800488e:	4618      	mov	r0, r3
 8004890:	f7ff feab 	bl	80045ea <rc_channel_filter_init>
}
 8004894:	bf00      	nop
 8004896:	3720      	adds	r7, #32
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <rc_attitude_control_update_pitch>:

void rc_attitude_control_update_pitch(
	rc_attitude_control_t* rc,
	float raw_input
) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
 80048a4:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 80048a8:	edd7 7a00 	vldr	s15, [r7]
 80048ac:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80048b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b8:	d501      	bpl.n	80048be <rc_attitude_control_update_pitch+0x22>
 80048ba:	4b0d      	ldr	r3, [pc, #52]	@ (80048f0 <rc_attitude_control_update_pitch+0x54>)
 80048bc:	e00c      	b.n	80048d8 <rc_attitude_control_update_pitch+0x3c>
 80048be:	edd7 7a00 	vldr	s15, [r7]
 80048c2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048ce:	dd02      	ble.n	80048d6 <rc_attitude_control_update_pitch+0x3a>
 80048d0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80048d4:	e000      	b.n	80048d8 <rc_attitude_control_update_pitch+0x3c>
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->pitch_filter, raw_input);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	3330      	adds	r3, #48	@ 0x30
 80048de:	ed97 0a00 	vldr	s0, [r7]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fec0 	bl	8004668 <rc_channel_filter_update>
}
 80048e8:	bf00      	nop
 80048ea:	3708      	adds	r7, #8
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	bf800000 	.word	0xbf800000

080048f4 <rc_attitude_control_get_processed_pitch>:

float rc_attitude_control_get_processed_pitch(
	rc_attitude_control_t* rc
) {
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->pitch_filter);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	3330      	adds	r3, #48	@ 0x30
 8004900:	4618      	mov	r0, r3
 8004902:	f7ff ff3c 	bl	800477e <rc_channel_filter_get_processed>
 8004906:	eef0 7a40 	vmov.f32	s15, s0
}
 800490a:	eeb0 0a67 	vmov.f32	s0, s15
 800490e:	3708      	adds	r7, #8
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <rc_attitude_control_init_yaw>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8004914:	b580      	push	{r7, lr}
 8004916:	b088      	sub	sp, #32
 8004918:	af00      	add	r7, sp, #0
 800491a:	61f8      	str	r0, [r7, #28]
 800491c:	61b9      	str	r1, [r7, #24]
 800491e:	ed87 0a05 	vstr	s0, [r7, #20]
 8004922:	edc7 0a04 	vstr	s1, [r7, #16]
 8004926:	ed87 1a03 	vstr	s2, [r7, #12]
 800492a:	edc7 1a02 	vstr	s3, [r7, #8]
 800492e:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->yaw_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	3360      	adds	r3, #96	@ 0x60
 8004936:	ed97 2a01 	vldr	s4, [r7, #4]
 800493a:	edd7 1a02 	vldr	s3, [r7, #8]
 800493e:	ed97 1a03 	vldr	s2, [r7, #12]
 8004942:	edd7 0a04 	vldr	s1, [r7, #16]
 8004946:	ed97 0a05 	vldr	s0, [r7, #20]
 800494a:	69b9      	ldr	r1, [r7, #24]
 800494c:	4618      	mov	r0, r3
 800494e:	f7ff fe4c 	bl	80045ea <rc_channel_filter_init>
}
 8004952:	bf00      	nop
 8004954:	3720      	adds	r7, #32
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}
	...

0800495c <rc_attitude_control_update_yaw>:

void rc_attitude_control_update_yaw(
	rc_attitude_control_t* rc,
	float raw_input
) {
 800495c:	b580      	push	{r7, lr}
 800495e:	b082      	sub	sp, #8
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 8004968:	edd7 7a00 	vldr	s15, [r7]
 800496c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004970:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004978:	d501      	bpl.n	800497e <rc_attitude_control_update_yaw+0x22>
 800497a:	4b0d      	ldr	r3, [pc, #52]	@ (80049b0 <rc_attitude_control_update_yaw+0x54>)
 800497c:	e00c      	b.n	8004998 <rc_attitude_control_update_yaw+0x3c>
 800497e:	edd7 7a00 	vldr	s15, [r7]
 8004982:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004986:	eef4 7ac7 	vcmpe.f32	s15, s14
 800498a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800498e:	dd02      	ble.n	8004996 <rc_attitude_control_update_yaw+0x3a>
 8004990:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004994:	e000      	b.n	8004998 <rc_attitude_control_update_yaw+0x3c>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->yaw_filter, raw_input);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	3360      	adds	r3, #96	@ 0x60
 800499e:	ed97 0a00 	vldr	s0, [r7]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7ff fe60 	bl	8004668 <rc_channel_filter_update>
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	bf800000 	.word	0xbf800000

080049b4 <rc_attitude_control_get_processed_yaw>:

float rc_attitude_control_get_processed_yaw(
	rc_attitude_control_t* rc
) {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->yaw_filter);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3360      	adds	r3, #96	@ 0x60
 80049c0:	4618      	mov	r0, r3
 80049c2:	f7ff fedc 	bl	800477e <rc_channel_filter_get_processed>
 80049c6:	eef0 7a40 	vmov.f32	s15, s0
}
 80049ca:	eeb0 0a67 	vmov.f32	s0, s15
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <rc_attitude_control_init_throttle>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	61f8      	str	r0, [r7, #28]
 80049dc:	61b9      	str	r1, [r7, #24]
 80049de:	ed87 0a05 	vstr	s0, [r7, #20]
 80049e2:	edc7 0a04 	vstr	s1, [r7, #16]
 80049e6:	ed87 1a03 	vstr	s2, [r7, #12]
 80049ea:	edc7 1a02 	vstr	s3, [r7, #8]
 80049ee:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->throttle_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3390      	adds	r3, #144	@ 0x90
 80049f6:	ed97 2a01 	vldr	s4, [r7, #4]
 80049fa:	edd7 1a02 	vldr	s3, [r7, #8]
 80049fe:	ed97 1a03 	vldr	s2, [r7, #12]
 8004a02:	edd7 0a04 	vldr	s1, [r7, #16]
 8004a06:	ed97 0a05 	vldr	s0, [r7, #20]
 8004a0a:	69b9      	ldr	r1, [r7, #24]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f7ff fdec 	bl	80045ea <rc_channel_filter_init>
}
 8004a12:	bf00      	nop
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <rc_attitude_control_update_throttle>:

void rc_attitude_control_update_throttle(
	rc_attitude_control_t* rc,
	float raw_input
) {
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b082      	sub	sp, #8
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	6078      	str	r0, [r7, #4]
 8004a22:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, 0.0f, 1.0f);
 8004a26:	edd7 7a00 	vldr	s15, [r7]
 8004a2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a32:	d502      	bpl.n	8004a3a <rc_attitude_control_update_throttle+0x20>
 8004a34:	f04f 0300 	mov.w	r3, #0
 8004a38:	e00c      	b.n	8004a54 <rc_attitude_control_update_throttle+0x3a>
 8004a3a:	edd7 7a00 	vldr	s15, [r7]
 8004a3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004a42:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4a:	dd02      	ble.n	8004a52 <rc_attitude_control_update_throttle+0x38>
 8004a4c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004a50:	e000      	b.n	8004a54 <rc_attitude_control_update_throttle+0x3a>
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->throttle_filter, raw_input);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	3390      	adds	r3, #144	@ 0x90
 8004a5a:	ed97 0a00 	vldr	s0, [r7]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff fe02 	bl	8004668 <rc_channel_filter_update>
}
 8004a64:	bf00      	nop
 8004a66:	3708      	adds	r7, #8
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <rc_attitude_control_get_processed_throttle>:

float rc_attitude_control_get_processed_throttle(
	rc_attitude_control_t* rc
) {
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	b082      	sub	sp, #8
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->throttle_filter);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	3390      	adds	r3, #144	@ 0x90
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f7ff fe80 	bl	800477e <rc_channel_filter_get_processed>
 8004a7e:	eef0 7a40 	vmov.f32	s15, s0
}
 8004a82:	eeb0 0a67 	vmov.f32	s0, s15
 8004a86:	3708      	adds	r7, #8
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <rc_attitude_control_update>:
	rc_attitude_control_t* rc,
	float raw_roll,
	float raw_pitch,
	float raw_yaw,
	float raw_throttle
) {
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6178      	str	r0, [r7, #20]
 8004a94:	ed87 0a04 	vstr	s0, [r7, #16]
 8004a98:	edc7 0a03 	vstr	s1, [r7, #12]
 8004a9c:	ed87 1a02 	vstr	s2, [r7, #8]
 8004aa0:	edc7 1a01 	vstr	s3, [r7, #4]
	rc_attitude_control_update_roll(rc, raw_roll);
 8004aa4:	ed97 0a04 	vldr	s0, [r7, #16]
 8004aa8:	6978      	ldr	r0, [r7, #20]
 8004aaa:	f7ff fe99 	bl	80047e0 <rc_attitude_control_update_roll>
	rc_attitude_control_update_pitch(rc, raw_pitch);
 8004aae:	ed97 0a03 	vldr	s0, [r7, #12]
 8004ab2:	6978      	ldr	r0, [r7, #20]
 8004ab4:	f7ff fef2 	bl	800489c <rc_attitude_control_update_pitch>
	rc_attitude_control_update_yaw(rc, raw_yaw);
 8004ab8:	ed97 0a02 	vldr	s0, [r7, #8]
 8004abc:	6978      	ldr	r0, [r7, #20]
 8004abe:	f7ff ff4d 	bl	800495c <rc_attitude_control_update_yaw>
	rc_attitude_control_update_throttle(rc, raw_throttle);
 8004ac2:	ed97 0a01 	vldr	s0, [r7, #4]
 8004ac6:	6978      	ldr	r0, [r7, #20]
 8004ac8:	f7ff ffa7 	bl	8004a1a <rc_attitude_control_update_throttle>

}
 8004acc:	bf00      	nop
 8004ace:	3718      	adds	r7, #24
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <rc_attitude_control_get_processed>:
	rc_attitude_control_t* rc,
	float* roll,
	float* pitch,
	float* yaw,
	float* throttle
) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
 8004ae0:	603b      	str	r3, [r7, #0]
	if (roll) {
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d007      	beq.n	8004af8 <rc_attitude_control_get_processed+0x24>
		*roll = rc_attitude_control_get_processed_roll(rc);
 8004ae8:	68f8      	ldr	r0, [r7, #12]
 8004aea:	f7ff fea5 	bl	8004838 <rc_attitude_control_get_processed_roll>
 8004aee:	eef0 7a40 	vmov.f32	s15, s0
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	edc3 7a00 	vstr	s15, [r3]
	}
	if (pitch) {
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d007      	beq.n	8004b0e <rc_attitude_control_get_processed+0x3a>
		*pitch = rc_attitude_control_get_processed_pitch(rc);
 8004afe:	68f8      	ldr	r0, [r7, #12]
 8004b00:	f7ff fef8 	bl	80048f4 <rc_attitude_control_get_processed_pitch>
 8004b04:	eef0 7a40 	vmov.f32	s15, s0
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	edc3 7a00 	vstr	s15, [r3]
	}

	if (yaw) {
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <rc_attitude_control_get_processed+0x50>
		*yaw = rc_attitude_control_get_processed_yaw(rc);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f7ff ff4d 	bl	80049b4 <rc_attitude_control_get_processed_yaw>
 8004b1a:	eef0 7a40 	vmov.f32	s15, s0
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	edc3 7a00 	vstr	s15, [r3]
	}

	if (throttle) {
 8004b24:	69bb      	ldr	r3, [r7, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d007      	beq.n	8004b3a <rc_attitude_control_get_processed+0x66>
		*throttle = rc_attitude_control_get_processed_throttle(rc);
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f7ff ff9e 	bl	8004a6c <rc_attitude_control_get_processed_throttle>
 8004b30:	eef0 7a40 	vmov.f32	s15, s0
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	edc3 7a00 	vstr	s15, [r3]
	}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
	...

08004b44 <prv_parse_input>:
/**
 * \brief           Parse input string
 * \param[in]       lwobj: LwSHELL instance
 */
static void
prv_parse_input(lwshell_t* lwobj) {
 8004b44:	b590      	push	{r4, r7, lr}
 8004b46:	b089      	sub	sp, #36	@ 0x24
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]

    /*
     * Check string length and compare with buffer pointer
     * Must be more than `1` character since we have to include end of line
     */
    s_len = strlen(lwobj->buff);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3304      	adds	r3, #4
 8004b50:	4618      	mov	r0, r3
 8004b52:	f7fb fb9d 	bl	8000290 <strlen>
 8004b56:	60f8      	str	r0, [r7, #12]
    if (s_len != lwobj->buff_ptr || lwobj->buff_ptr == 0) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	f040 8197 	bne.w	8004e94 <prv_parse_input+0x350>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 8191 	beq.w	8004e94 <prv_parse_input+0x350>
        return;
    }

    /* Set default values */
    lwobj->argc = 0;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    lwobj->argv[0] = lwobj->buff;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	1d1a      	adds	r2, r3, #4
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    /* Process complete input */
    str = lwobj->buff;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3304      	adds	r3, #4
 8004b88:	61fb      	str	r3, [r7, #28]

    /* Process complete string */
    while (*str != '\0') {
 8004b8a:	e072      	b.n	8004c72 <prv_parse_input+0x12e>
        while (*str == ' ' && ++str) {} /* Remove leading spaces */
 8004b8c:	bf00      	nop
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	d105      	bne.n	8004ba2 <prv_parse_input+0x5e>
 8004b96:	69fb      	ldr	r3, [r7, #28]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	61fb      	str	r3, [r7, #28]
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1f5      	bne.n	8004b8e <prv_parse_input+0x4a>
        if (*str == '\0') {
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d068      	beq.n	8004c7c <prv_parse_input+0x138>
            break;
        }

        /* Check if it starts with quote to handle escapes */
        if (*str == '"') {
 8004baa:	69fb      	ldr	r3, [r7, #28]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	2b22      	cmp	r3, #34	@ 0x22
 8004bb0:	d131      	bne.n	8004c16 <prv_parse_input+0xd2>
            ++str;
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	3301      	adds	r3, #1
 8004bb6:	61fb      	str	r3, [r7, #28]
            lwobj->argv[lwobj->argc++] = str; /* Set start of argument after quotes */
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004bbe:	1c59      	adds	r1, r3, #1
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	3324      	adds	r3, #36	@ 0x24
 8004bca:	69f9      	ldr	r1, [r7, #28]
 8004bcc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

            /* Process until end of quote */
            while (*str != '\0') {
 8004bd0:	e01c      	b.n	8004c0c <prv_parse_input+0xc8>
                if (*str == '\\') {
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	2b5c      	cmp	r3, #92	@ 0x5c
 8004bd8:	d10a      	bne.n	8004bf0 <prv_parse_input+0xac>
                    ++str;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	61fb      	str	r3, [r7, #28]
                    if (*str == '"') {
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b22      	cmp	r3, #34	@ 0x22
 8004be6:	d111      	bne.n	8004c0c <prv_parse_input+0xc8>
                        ++str;
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	3301      	adds	r3, #1
 8004bec:	61fb      	str	r3, [r7, #28]
 8004bee:	e00d      	b.n	8004c0c <prv_parse_input+0xc8>
                    }
                } else if (*str == '"') {
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b22      	cmp	r3, #34	@ 0x22
 8004bf6:	d106      	bne.n	8004c06 <prv_parse_input+0xc2>
                    *str = '\0';
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	701a      	strb	r2, [r3, #0]
                    ++str;
 8004bfe:	69fb      	ldr	r3, [r7, #28]
 8004c00:	3301      	adds	r3, #1
 8004c02:	61fb      	str	r3, [r7, #28]
                    break;
 8004c04:	e030      	b.n	8004c68 <prv_parse_input+0x124>
                } else {
                    ++str;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	61fb      	str	r3, [r7, #28]
            while (*str != '\0') {
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1de      	bne.n	8004bd2 <prv_parse_input+0x8e>
 8004c14:	e028      	b.n	8004c68 <prv_parse_input+0x124>
                }
            }
        } else {
            lwobj->argv[lwobj->argc++] = str; /* Set start of argument directly on character */
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c1c:	1c59      	adds	r1, r3, #1
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	f8c2 108c 	str.w	r1, [r2, #140]	@ 0x8c
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	3324      	adds	r3, #36	@ 0x24
 8004c28:	69f9      	ldr	r1, [r7, #28]
 8004c2a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            while (*str != ' ' && *str != '\0') {
 8004c2e:	e009      	b.n	8004c44 <prv_parse_input+0x100>
                if (*str == '"') { /* Quote should not be here... */
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	2b22      	cmp	r3, #34	@ 0x22
 8004c36:	d102      	bne.n	8004c3e <prv_parse_input+0xfa>
                    *str = '\0';   /* ...add NULL termination to end token */
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	701a      	strb	r2, [r3, #0]
                }
                ++str;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	3301      	adds	r3, #1
 8004c42:	61fb      	str	r3, [r7, #28]
            while (*str != ' ' && *str != '\0') {
 8004c44:	69fb      	ldr	r3, [r7, #28]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b20      	cmp	r3, #32
 8004c4a:	d003      	beq.n	8004c54 <prv_parse_input+0x110>
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1ed      	bne.n	8004c30 <prv_parse_input+0xec>
            }
            if (*str == '\0') {
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d011      	beq.n	8004c80 <prv_parse_input+0x13c>
                break;
            }
            *str = '\0';
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	701a      	strb	r2, [r3, #0]
            ++str;
 8004c62:	69fb      	ldr	r3, [r7, #28]
 8004c64:	3301      	adds	r3, #1
 8004c66:	61fb      	str	r3, [r7, #28]
        }

        /* Check for number of arguments */
        if (lwobj->argc == LWSHELL_ARRAYSIZE(lwobj->argv)) {
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d008      	beq.n	8004c84 <prv_parse_input+0x140>
    while (*str != '\0') {
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d188      	bne.n	8004b8c <prv_parse_input+0x48>
 8004c7a:	e004      	b.n	8004c86 <prv_parse_input+0x142>
            break;
 8004c7c:	bf00      	nop
 8004c7e:	e002      	b.n	8004c86 <prv_parse_input+0x142>
                break;
 8004c80:	bf00      	nop
 8004c82:	e000      	b.n	8004c86 <prv_parse_input+0x142>
            break;
 8004c84:	bf00      	nop
        }
    }

    /* Check for command */
    if (lwobj->argc > 0) {
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f340 8102 	ble.w	8004e96 <prv_parse_input+0x352>
        const lwshell_cmd_t* ccmd = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	61bb      	str	r3, [r7, #24]
        size_t arg_len = strlen(lwobj->argv[0]);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	f7fb faf7 	bl	8000290 <strlen>
 8004ca2:	60b8      	str	r0, [r7, #8]

#if LWSHELL_CFG_USE_DYNAMIC_COMMANDS
        /* Process all dynamic commands */
        if (ccmd == NULL && lwobj->dynamic_cmds_cnt > 0) {
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d13d      	bne.n	8004d26 <prv_parse_input+0x1e2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d038      	beq.n	8004d26 <prv_parse_input+0x1e2>
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
 8004cb8:	e02f      	b.n	8004d1a <prv_parse_input+0x1d6>
                if (arg_len == strlen(lwobj->dynamic_cmds[idx].name)
 8004cba:	6879      	ldr	r1, [r7, #4]
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4613      	mov	r3, r2
 8004cc0:	005b      	lsls	r3, r3, #1
 8004cc2:	4413      	add	r3, r2
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	440b      	add	r3, r1
 8004cc8:	33b4      	adds	r3, #180	@ 0xb4
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7fb fadf 	bl	8000290 <strlen>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d11c      	bne.n	8004d14 <prv_parse_input+0x1d0>
                    && strncmp(lwobj->dynamic_cmds[idx].name, lwobj->argv[0], arg_len) == 0) {
 8004cda:	6879      	ldr	r1, [r7, #4]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	4613      	mov	r3, r2
 8004ce0:	005b      	lsls	r3, r3, #1
 8004ce2:	4413      	add	r3, r2
 8004ce4:	009b      	lsls	r3, r3, #2
 8004ce6:	440b      	add	r3, r1
 8004ce8:	33b4      	adds	r3, #180	@ 0xb4
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4619      	mov	r1, r3
 8004cf6:	f016 fc05 	bl	801b504 <strncmp>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <prv_parse_input+0x1d0>
                    ccmd = &lwobj->dynamic_cmds[idx];
 8004d00:	697a      	ldr	r2, [r7, #20]
 8004d02:	4613      	mov	r3, r2
 8004d04:	005b      	lsls	r3, r3, #1
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	33b0      	adds	r3, #176	@ 0xb0
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	4413      	add	r3, r2
 8004d10:	61bb      	str	r3, [r7, #24]
                    break;
 8004d12:	e008      	b.n	8004d26 <prv_parse_input+0x1e2>
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	3301      	adds	r3, #1
 8004d18:	617b      	str	r3, [r7, #20]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004d20:	697a      	ldr	r2, [r7, #20]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d3c9      	bcc.n	8004cba <prv_parse_input+0x176>
            }
        }
#endif /* LWSHELL_CFG_USE_STATIC_COMMANDS */

        /* Valid command ready? */
        if (ccmd != NULL) {
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d03c      	beq.n	8004da6 <prv_parse_input+0x262>
            if (lwobj->argc == 2U && lwobj->argv[1][0] == '-' && lwobj->argv[1][1] == 'h'
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d12d      	bne.n	8004d92 <prv_parse_input+0x24e>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	2b2d      	cmp	r3, #45	@ 0x2d
 8004d40:	d127      	bne.n	8004d92 <prv_parse_input+0x24e>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d48:	3301      	adds	r3, #1
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	2b68      	cmp	r3, #104	@ 0x68
 8004d4e:	d120      	bne.n	8004d92 <prv_parse_input+0x24e>
                && lwobj->argv[1][2] == '\0') {
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d56:	3302      	adds	r3, #2
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d119      	bne.n	8004d92 <prv_parse_input+0x24e>
                /* Here we can print version */
                LWSHELL_OUTPUT(lwobj, ccmd->desc);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d00a      	beq.n	8004d7c <prv_parse_input+0x238>
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d006      	beq.n	8004d7c <prv_parse_input+0x238>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69ba      	ldr	r2, [r7, #24]
 8004d74:	6892      	ldr	r2, [r2, #8]
 8004d76:	6879      	ldr	r1, [r7, #4]
 8004d78:	4610      	mov	r0, r2
 8004d7a:	4798      	blx	r3
                LWSHELL_OUTPUT(lwobj, "\r\n");
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 8088 	beq.w	8004e96 <prv_parse_input+0x352>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6879      	ldr	r1, [r7, #4]
 8004d8c:	4843      	ldr	r0, [pc, #268]	@ (8004e9c <prv_parse_input+0x358>)
 8004d8e:	4798      	blx	r3
 8004d90:	e081      	b.n	8004e96 <prv_parse_input+0x352>
            } else {
                ccmd->fn(lwobj->argc, lwobj->argv);
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	f8d2 008c 	ldr.w	r0, [r2, #140]	@ 0x8c
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	3290      	adds	r2, #144	@ 0x90
 8004da0:	4611      	mov	r1, r2
 8004da2:	4798      	blx	r3
 8004da4:	e077      	b.n	8004e96 <prv_parse_input+0x352>
            }
#if LWSHELL_CFG_USE_LIST_CMD
        } else if (strncmp(lwobj->argv[0], "listcmd", 7U) == 0) {
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004dac:	2207      	movs	r2, #7
 8004dae:	493c      	ldr	r1, [pc, #240]	@ (8004ea0 <prv_parse_input+0x35c>)
 8004db0:	4618      	mov	r0, r3
 8004db2:	f016 fba7 	bl	801b504 <strncmp>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d161      	bne.n	8004e80 <prv_parse_input+0x33c>
            LWSHELL_OUTPUT(lwobj, "List of registered commands\r\n");
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d004      	beq.n	8004dce <prv_parse_input+0x28a>
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4836      	ldr	r0, [pc, #216]	@ (8004ea4 <prv_parse_input+0x360>)
 8004dcc:	4798      	blx	r3
#if LWSHELL_CFG_USE_DYNAMIC_COMMANDS
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 8004dce:	2300      	movs	r3, #0
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	e04e      	b.n	8004e72 <prv_parse_input+0x32e>
                LWSHELL_OUTPUT(lwobj, lwobj->dynamic_cmds[idx].name);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d018      	beq.n	8004e0e <prv_parse_input+0x2ca>
 8004ddc:	6879      	ldr	r1, [r7, #4]
 8004dde:	693a      	ldr	r2, [r7, #16]
 8004de0:	4613      	mov	r3, r2
 8004de2:	005b      	lsls	r3, r3, #1
 8004de4:	4413      	add	r3, r2
 8004de6:	009b      	lsls	r3, r3, #2
 8004de8:	440b      	add	r3, r1
 8004dea:	33b4      	adds	r3, #180	@ 0xb4
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00d      	beq.n	8004e0e <prv_parse_input+0x2ca>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681c      	ldr	r4, [r3, #0]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	440b      	add	r3, r1
 8004e04:	33b4      	adds	r3, #180	@ 0xb4
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6879      	ldr	r1, [r7, #4]
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	47a0      	blx	r4
                LWSHELL_OUTPUT(lwobj, "\t\t\t");
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d004      	beq.n	8004e20 <prv_parse_input+0x2dc>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6879      	ldr	r1, [r7, #4]
 8004e1c:	4822      	ldr	r0, [pc, #136]	@ (8004ea8 <prv_parse_input+0x364>)
 8004e1e:	4798      	blx	r3
                LWSHELL_OUTPUT(lwobj, lwobj->dynamic_cmds[idx].desc);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d018      	beq.n	8004e5a <prv_parse_input+0x316>
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	693a      	ldr	r2, [r7, #16]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	33b8      	adds	r3, #184	@ 0xb8
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00d      	beq.n	8004e5a <prv_parse_input+0x316>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681c      	ldr	r4, [r3, #0]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4613      	mov	r3, r2
 8004e48:	005b      	lsls	r3, r3, #1
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	440b      	add	r3, r1
 8004e50:	33b8      	adds	r3, #184	@ 0xb8
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4618      	mov	r0, r3
 8004e58:	47a0      	blx	r4
                LWSHELL_OUTPUT(lwobj, "\r\n");
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d004      	beq.n	8004e6c <prv_parse_input+0x328>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6879      	ldr	r1, [r7, #4]
 8004e68:	480c      	ldr	r0, [pc, #48]	@ (8004e9c <prv_parse_input+0x358>)
 8004e6a:	4798      	blx	r3
            for (size_t idx = 0; idx < lwobj->dynamic_cmds_cnt; ++idx) {
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	613b      	str	r3, [r7, #16]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d3aa      	bcc.n	8004dd4 <prv_parse_input+0x290>
 8004e7e:	e00a      	b.n	8004e96 <prv_parse_input+0x352>
                LWSHELL_OUTPUT(lwobj, "\r\n");
            }
#endif /* LWSHELL_CFG_USE_STATIC_COMMANDS */
#endif /* LWSHELL_CFG_USE_LIST_CMD */
        } else {
            LWSHELL_OUTPUT(lwobj, LWSHELL_CFG_USE_LIST_CMD
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d006      	beq.n	8004e96 <prv_parse_input+0x352>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	6879      	ldr	r1, [r7, #4]
 8004e8e:	4807      	ldr	r0, [pc, #28]	@ (8004eac <prv_parse_input+0x368>)
 8004e90:	4798      	blx	r3
 8004e92:	e000      	b.n	8004e96 <prv_parse_input+0x352>
        return;
 8004e94:	bf00      	nop
                                      ? "Unknown command, use listcmd to list available commands\r\n"
                                      : "Unknown command\r\n");
        }
    }
}
 8004e96:	3724      	adds	r7, #36	@ 0x24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd90      	pop	{r4, r7, pc}
 8004e9c:	0801f3fc 	.word	0x0801f3fc
 8004ea0:	0801f400 	.word	0x0801f400
 8004ea4:	0801f408 	.word	0x0801f408
 8004ea8:	0801f428 	.word	0x0801f428
 8004eac:	0801f42c 	.word	0x0801f42c

08004eb0 <lwshell_init_ex>:
 * \brief           Initialize shell interface
 * \param[in]       lwobj: LwSHELL object instance. Set to `NULL` to use default one
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_init_ex(lwshell_t* lwobj) {
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d001      	beq.n	8004ec2 <lwshell_init_ex+0x12>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	e000      	b.n	8004ec4 <lwshell_init_ex+0x14>
 8004ec2:	4b06      	ldr	r3, [pc, #24]	@ (8004edc <lwshell_init_ex+0x2c>)
 8004ec4:	607b      	str	r3, [r7, #4]
    LWSHELL_MEMSET(lwobj, 0x00, sizeof(*lwobj));
 8004ec6:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8004eca:	2100      	movs	r1, #0
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f016 fb11 	bl	801b4f4 <memset>
    return lwshellOK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	2000044c 	.word	0x2000044c

08004ee0 <lwshell_set_output_fn_ex>:
 * \param[in]       out_fn: Output function to print library data.
 *                      Set to `NULL` to disable the feature
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_set_output_fn_ex(lwshell_t* lwobj, lwshell_output_fn out_fn) {
 8004ee0:	b480      	push	{r7}
 8004ee2:	b083      	sub	sp, #12
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d001      	beq.n	8004ef4 <lwshell_set_output_fn_ex+0x14>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	e000      	b.n	8004ef6 <lwshell_set_output_fn_ex+0x16>
 8004ef4:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <lwshell_set_output_fn_ex+0x2c>)
 8004ef6:	607b      	str	r3, [r7, #4]
    lwobj->out_fn = out_fn;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	601a      	str	r2, [r3, #0]
    return lwshellOK;
 8004efe:	2300      	movs	r3, #0
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr
 8004f0c:	2000044c 	.word	0x2000044c

08004f10 <lwshell_register_cmd_ex>:
 * \param[in]       desc: Custom command description
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 * \note            Available only when \ref LWSHELL_CFG_USE_DYNAMIC_COMMANDS is enabled
 */
lwshellr_t
lwshell_register_cmd_ex(lwshell_t* lwobj, const char* cmd_name, lwshell_cmd_fn cmd_fn, const char* desc) {
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
 8004f1c:	603b      	str	r3, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d001      	beq.n	8004f28 <lwshell_register_cmd_ex+0x18>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	e000      	b.n	8004f2a <lwshell_register_cmd_ex+0x1a>
 8004f28:	4b23      	ldr	r3, [pc, #140]	@ (8004fb8 <lwshell_register_cmd_ex+0xa8>)
 8004f2a:	60fb      	str	r3, [r7, #12]

    if (cmd_name == NULL || cmd_fn == NULL || strlen(cmd_name) == 0) {
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d006      	beq.n	8004f40 <lwshell_register_cmd_ex+0x30>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <lwshell_register_cmd_ex+0x30>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <lwshell_register_cmd_ex+0x34>
        return lwshellERRPAR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e032      	b.n	8004faa <lwshell_register_cmd_ex+0x9a>
    }

    /* Check for memory available */
    if (lwobj->dynamic_cmds_cnt < LWSHELL_ARRAYSIZE(lwobj->dynamic_cmds)) {
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004f4a:	2b07      	cmp	r3, #7
 8004f4c:	d82c      	bhi.n	8004fa8 <lwshell_register_cmd_ex+0x98>
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].name = cmd_name;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004f54:	68f9      	ldr	r1, [r7, #12]
 8004f56:	4613      	mov	r3, r2
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	4413      	add	r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	33b4      	adds	r3, #180	@ 0xb4
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].fn = cmd_fn;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004f6c:	68f9      	ldr	r1, [r7, #12]
 8004f6e:	4613      	mov	r3, r2
 8004f70:	005b      	lsls	r3, r3, #1
 8004f72:	4413      	add	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	440b      	add	r3, r1
 8004f78:	33b0      	adds	r3, #176	@ 0xb0
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].desc = desc;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8004f84:	68f9      	ldr	r1, [r7, #12]
 8004f86:	4613      	mov	r3, r2
 8004f88:	005b      	lsls	r3, r3, #1
 8004f8a:	4413      	add	r3, r2
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	33b8      	adds	r3, #184	@ 0xb8
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	601a      	str	r2, [r3, #0]

        ++lwobj->dynamic_cmds_cnt;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004f9c:	1c5a      	adds	r2, r3, #1
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        return lwshellOK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <lwshell_register_cmd_ex+0x9a>
    }
    return lwshellERRMEM;
 8004fa8:	2302      	movs	r3, #2
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3714      	adds	r7, #20
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	2000044c 	.word	0x2000044c

08004fbc <lwshell_input_ex>:
 * \param[in]       in_data: Input data to process
 * \param[in]       len: Length of data for input
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_input_ex(lwshell_t* lwobj, const void* in_data, size_t len) {
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b088      	sub	sp, #32
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	60f8      	str	r0, [r7, #12]
 8004fc4:	60b9      	str	r1, [r7, #8]
 8004fc6:	607a      	str	r2, [r7, #4]
    const char* p_data = in_data;
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	61bb      	str	r3, [r7, #24]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d001      	beq.n	8004fd6 <lwshell_input_ex+0x1a>
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	e000      	b.n	8004fd8 <lwshell_input_ex+0x1c>
 8004fd6:	4b54      	ldr	r3, [pc, #336]	@ (8005128 <lwshell_input_ex+0x16c>)
 8004fd8:	60fb      	str	r3, [r7, #12]

    if (in_data == NULL || len == 0) {
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d002      	beq.n	8004fe6 <lwshell_input_ex+0x2a>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <lwshell_input_ex+0x2e>
        return lwshellERRPAR;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e09a      	b.n	8005120 <lwshell_input_ex+0x164>
    }

    /* Process all bytes */
    for (size_t idx = 0; idx < len; ++idx) {
 8004fea:	2300      	movs	r3, #0
 8004fec:	61fb      	str	r3, [r7, #28]
 8004fee:	e091      	b.n	8005114 <lwshell_input_ex+0x158>
        switch (p_data[idx]) {
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	2b0d      	cmp	r3, #13
 8004ffa:	d005      	beq.n	8005008 <lwshell_input_ex+0x4c>
 8004ffc:	2b0d      	cmp	r3, #13
 8004ffe:	dc48      	bgt.n	8005092 <lwshell_input_ex+0xd6>
 8005000:	2b08      	cmp	r3, #8
 8005002:	d029      	beq.n	8005058 <lwshell_input_ex+0x9c>
 8005004:	2b0a      	cmp	r3, #10
 8005006:	d144      	bne.n	8005092 <lwshell_input_ex+0xd6>
            case LWSHELL_ASCII_CR:
            case LWSHELL_ASCII_LF: {
                LWSHELL_OUTPUT(lwobj, p_data[idx] == LWSHELL_ASCII_CR ? "\r" : "\n");
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d00d      	beq.n	800502c <lwshell_input_ex+0x70>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69b9      	ldr	r1, [r7, #24]
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	440a      	add	r2, r1
 800501a:	7812      	ldrb	r2, [r2, #0]
 800501c:	2a0d      	cmp	r2, #13
 800501e:	d101      	bne.n	8005024 <lwshell_input_ex+0x68>
 8005020:	4a42      	ldr	r2, [pc, #264]	@ (800512c <lwshell_input_ex+0x170>)
 8005022:	e000      	b.n	8005026 <lwshell_input_ex+0x6a>
 8005024:	4a42      	ldr	r2, [pc, #264]	@ (8005130 <lwshell_input_ex+0x174>)
 8005026:	68f9      	ldr	r1, [r7, #12]
 8005028:	4610      	mov	r0, r2
 800502a:	4798      	blx	r3
                prv_parse_input(lwobj);
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f7ff fd89 	bl	8004b44 <prv_parse_input>
                LWSHELL_RESET_BUFF(lwobj);
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3304      	adds	r3, #4
 8005036:	2281      	movs	r2, #129	@ 0x81
 8005038:	2100      	movs	r1, #0
 800503a:	4618      	mov	r0, r3
 800503c:	f016 fa5a 	bl	801b4f4 <memset>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	3390      	adds	r3, #144	@ 0x90
 8005044:	2220      	movs	r2, #32
 8005046:	2100      	movs	r1, #0
 8005048:	4618      	mov	r0, r3
 800504a:	f016 fa53 	bl	801b4f4 <memset>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                break;
 8005056:	e05a      	b.n	800510e <lwshell_input_ex+0x152>
            }
            case LWSHELL_ASCII_BACKSPACE: {
                /* Try to delete character from buffer */
                if (lwobj->buff_ptr > 0) {
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800505e:	2b00      	cmp	r3, #0
 8005060:	d054      	beq.n	800510c <lwshell_input_ex+0x150>
                    --lwobj->buff_ptr;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005068:	1e5a      	subs	r2, r3, #1
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
                    lwobj->buff[lwobj->buff_ptr] = '\0';
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	2200      	movs	r2, #0
 800507c:	711a      	strb	r2, [r3, #4]
                    LWSHELL_OUTPUT(lwobj, "\b \b");
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d042      	beq.n	800510c <lwshell_input_ex+0x150>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68f9      	ldr	r1, [r7, #12]
 800508c:	4829      	ldr	r0, [pc, #164]	@ (8005134 <lwshell_input_ex+0x178>)
 800508e:	4798      	blx	r3
                }
                break;
 8005090:	e03c      	b.n	800510c <lwshell_input_ex+0x150>
            }
            default: {
#if LWSHELL_CFG_USE_OUTPUT
                char str[2] = {p_data[idx], 0};
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	753b      	strb	r3, [r7, #20]
 800509c:	2300      	movs	r3, #0
 800509e:	757b      	strb	r3, [r7, #21]
                LWSHELL_OUTPUT(lwobj, str);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d006      	beq.n	80050b6 <lwshell_input_ex+0xfa>
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f107 0214 	add.w	r2, r7, #20
 80050b0:	68f9      	ldr	r1, [r7, #12]
 80050b2:	4610      	mov	r0, r2
 80050b4:	4798      	blx	r3
#endif /* LWSHELL_CFG_USE_OUTPUT */
                if (p_data[idx] >= 0x20 && p_data[idx] < 0x7F) {
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b1f      	cmp	r3, #31
 80050c0:	d925      	bls.n	800510e <lwshell_input_ex+0x152>
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	4413      	add	r3, r2
 80050c8:	781b      	ldrb	r3, [r3, #0]
 80050ca:	2b7e      	cmp	r3, #126	@ 0x7e
 80050cc:	d81f      	bhi.n	800510e <lwshell_input_ex+0x152>
                    LWSHELL_ADD_CH(lwobj, p_data[idx]);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80050d6:	d81a      	bhi.n	800510e <lwshell_input_ex+0x152>
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	69fb      	ldr	r3, [r7, #28]
 80050dc:	441a      	add	r2, r3
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e4:	7811      	ldrb	r1, [r2, #0]
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4413      	add	r3, r2
 80050ea:	460a      	mov	r2, r1
 80050ec:	711a      	strb	r2, [r3, #4]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	4413      	add	r3, r2
 8005106:	2200      	movs	r2, #0
 8005108:	711a      	strb	r2, [r3, #4]
 800510a:	e000      	b.n	800510e <lwshell_input_ex+0x152>
                break;
 800510c:	bf00      	nop
    for (size_t idx = 0; idx < len; ++idx) {
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	3301      	adds	r3, #1
 8005112:	61fb      	str	r3, [r7, #28]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	429a      	cmp	r2, r3
 800511a:	f4ff af69 	bcc.w	8004ff0 <lwshell_input_ex+0x34>
                }
            }
        }
    }
    return lwshellOK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3720      	adds	r7, #32
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	2000044c 	.word	0x2000044c
 800512c:	0801f468 	.word	0x0801f468
 8005130:	0801f46c 	.word	0x0801f46c
 8005134:	0801f470 	.word	0x0801f470

08005138 <mpu6500_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      spi can't read magnetometer data
 */
uint8_t mpu6500_basic_init(mpu6500_interface_t interface, mpu6500_address_t addr_pin)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	4603      	mov	r3, r0
 8005140:	460a      	mov	r2, r1
 8005142:	71fb      	strb	r3, [r7, #7]
 8005144:	4613      	mov	r3, r2
 8005146:	71bb      	strb	r3, [r7, #6]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU6500_LINK_INIT(&gs_handle_mpu6500, mpu6500_handle_t);
 8005148:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 800514c:	2100      	movs	r1, #0
 800514e:	48a4      	ldr	r0, [pc, #656]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005150:	f016 f9d0 	bl	801b4f4 <memset>
    DRIVER_MPU6500_LINK_IIC_INIT(&gs_handle_mpu6500, mpu6500_interface_iic_init);
 8005154:	4ba2      	ldr	r3, [pc, #648]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005156:	4aa3      	ldr	r2, [pc, #652]	@ (80053e4 <mpu6500_basic_init+0x2ac>)
 8005158:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6500_LINK_IIC_DEINIT(&gs_handle_mpu6500, mpu6500_interface_iic_deinit);
 800515a:	4ba1      	ldr	r3, [pc, #644]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800515c:	4aa2      	ldr	r2, [pc, #648]	@ (80053e8 <mpu6500_basic_init+0x2b0>)
 800515e:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6500_LINK_IIC_READ(&gs_handle_mpu6500, mpu6500_interface_iic_read);
 8005160:	4b9f      	ldr	r3, [pc, #636]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005162:	4aa2      	ldr	r2, [pc, #648]	@ (80053ec <mpu6500_basic_init+0x2b4>)
 8005164:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6500_LINK_IIC_WRITE(&gs_handle_mpu6500, mpu6500_interface_iic_write);
 8005166:	4b9e      	ldr	r3, [pc, #632]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005168:	4aa1      	ldr	r2, [pc, #644]	@ (80053f0 <mpu6500_basic_init+0x2b8>)
 800516a:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6500_LINK_SPI_INIT(&gs_handle_mpu6500, mpu6500_interface_spi_init);
 800516c:	4b9c      	ldr	r3, [pc, #624]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800516e:	4aa1      	ldr	r2, [pc, #644]	@ (80053f4 <mpu6500_basic_init+0x2bc>)
 8005170:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6500_LINK_SPI_DEINIT(&gs_handle_mpu6500, mpu6500_interface_spi_deinit);
 8005172:	4b9b      	ldr	r3, [pc, #620]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005174:	4aa0      	ldr	r2, [pc, #640]	@ (80053f8 <mpu6500_basic_init+0x2c0>)
 8005176:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6500_LINK_SPI_READ(&gs_handle_mpu6500, mpu6500_interface_spi_read);
 8005178:	4b99      	ldr	r3, [pc, #612]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800517a:	4aa0      	ldr	r2, [pc, #640]	@ (80053fc <mpu6500_basic_init+0x2c4>)
 800517c:	61da      	str	r2, [r3, #28]
    DRIVER_MPU6500_LINK_SPI_WRITE(&gs_handle_mpu6500, mpu6500_interface_spi_write);
 800517e:	4b98      	ldr	r3, [pc, #608]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005180:	4a9f      	ldr	r2, [pc, #636]	@ (8005400 <mpu6500_basic_init+0x2c8>)
 8005182:	621a      	str	r2, [r3, #32]
    DRIVER_MPU6500_LINK_DELAY_MS(&gs_handle_mpu6500, mpu6500_interface_delay_ms);
 8005184:	4b96      	ldr	r3, [pc, #600]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005186:	4a9f      	ldr	r2, [pc, #636]	@ (8005404 <mpu6500_basic_init+0x2cc>)
 8005188:	625a      	str	r2, [r3, #36]	@ 0x24
    DRIVER_MPU6500_LINK_DEBUG_PRINT(&gs_handle_mpu6500, mpu6500_interface_debug_print);
 800518a:	4b95      	ldr	r3, [pc, #596]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800518c:	4a9e      	ldr	r2, [pc, #632]	@ (8005408 <mpu6500_basic_init+0x2d0>)
 800518e:	629a      	str	r2, [r3, #40]	@ 0x28
    DRIVER_MPU6500_LINK_RECEIVE_CALLBACK(&gs_handle_mpu6500, mpu6500_interface_receive_callback);
 8005190:	4b93      	ldr	r3, [pc, #588]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005192:	4a9e      	ldr	r2, [pc, #632]	@ (800540c <mpu6500_basic_init+0x2d4>)
 8005194:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* set the interface */
    res = mpu6500_set_interface(&gs_handle_mpu6500, interface);
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	4619      	mov	r1, r3
 800519a:	4891      	ldr	r0, [pc, #580]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800519c:	f000 fd86 	bl	8005cac <mpu6500_set_interface>
 80051a0:	4603      	mov	r3, r0
 80051a2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80051a4:	7bfb      	ldrb	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d004      	beq.n	80051b4 <mpu6500_basic_init+0x7c>
    {
        mpu6500_interface_debug_print("mpu6500: set interface failed.\n");
 80051aa:	4899      	ldr	r0, [pc, #612]	@ (8005410 <mpu6500_basic_init+0x2d8>)
 80051ac:	f000 fca2 	bl	8005af4 <mpu6500_interface_debug_print>
       
        return 1;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e3ce      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the addr pin */
    res = mpu6500_set_addr_pin(&gs_handle_mpu6500, addr_pin);
 80051b4:	79bb      	ldrb	r3, [r7, #6]
 80051b6:	4619      	mov	r1, r3
 80051b8:	4889      	ldr	r0, [pc, #548]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 80051ba:	f000 fd8d 	bl	8005cd8 <mpu6500_set_addr_pin>
 80051be:	4603      	mov	r3, r0
 80051c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80051c2:	7bfb      	ldrb	r3, [r7, #15]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d004      	beq.n	80051d2 <mpu6500_basic_init+0x9a>
    {
        mpu6500_interface_debug_print("mpu6500: set addr pin failed.\n");
 80051c8:	4892      	ldr	r0, [pc, #584]	@ (8005414 <mpu6500_basic_init+0x2dc>)
 80051ca:	f000 fc93 	bl	8005af4 <mpu6500_interface_debug_print>
       
        return 1;
 80051ce:	2301      	movs	r3, #1
 80051d0:	e3bf      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* init */
    res = mpu6500_init(&gs_handle_mpu6500);
 80051d2:	4883      	ldr	r0, [pc, #524]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 80051d4:	f000 fd96 	bl	8005d04 <mpu6500_init>
 80051d8:	4603      	mov	r3, r0
 80051da:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80051dc:	7bfb      	ldrb	r3, [r7, #15]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d004      	beq.n	80051ec <mpu6500_basic_init+0xb4>
    {
        mpu6500_interface_debug_print("mpu6500: init failed.\n");
 80051e2:	488d      	ldr	r0, [pc, #564]	@ (8005418 <mpu6500_basic_init+0x2e0>)
 80051e4:	f000 fc86 	bl	8005af4 <mpu6500_interface_debug_print>
       
        return 1;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e3b2      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* delay 100 ms */
    mpu6500_interface_delay_ms(100);
 80051ec:	2064      	movs	r0, #100	@ 0x64
 80051ee:	f000 fc6b 	bl	8005ac8 <mpu6500_interface_delay_ms>
    
    /* disable sleep */
    res = mpu6500_set_sleep(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 80051f2:	2100      	movs	r1, #0
 80051f4:	487a      	ldr	r0, [pc, #488]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 80051f6:	f001 ff61 	bl	80070bc <mpu6500_set_sleep>
 80051fa:	4603      	mov	r3, r0
 80051fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80051fe:	7bfb      	ldrb	r3, [r7, #15]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d007      	beq.n	8005214 <mpu6500_basic_init+0xdc>
    {
        mpu6500_interface_debug_print("mpu6500: set sleep failed.\n");
 8005204:	4885      	ldr	r0, [pc, #532]	@ (800541c <mpu6500_basic_init+0x2e4>)
 8005206:	f000 fc75 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800520a:	4875      	ldr	r0, [pc, #468]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800520c:	f000 fea6 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005210:	2301      	movs	r3, #1
 8005212:	e39e      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* if spi interface, disable iic interface */
    if (interface == MPU6500_INTERFACE_SPI)
 8005214:	79fb      	ldrb	r3, [r7, #7]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d110      	bne.n	800523c <mpu6500_basic_init+0x104>
    {
        /* disable iic */
        res = mpu6500_set_disable_iic_slave(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 800521a:	2101      	movs	r1, #1
 800521c:	4870      	ldr	r0, [pc, #448]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800521e:	f001 fe17 	bl	8006e50 <mpu6500_set_disable_iic_slave>
 8005222:	4603      	mov	r3, r0
 8005224:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8005226:	7bfb      	ldrb	r3, [r7, #15]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d007      	beq.n	800523c <mpu6500_basic_init+0x104>
        {
            mpu6500_interface_debug_print("mpu6500: set disable iic slave failed.\n");
 800522c:	487c      	ldr	r0, [pc, #496]	@ (8005420 <mpu6500_basic_init+0x2e8>)
 800522e:	f000 fc61 	bl	8005af4 <mpu6500_interface_debug_print>
            (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005232:	486b      	ldr	r0, [pc, #428]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005234:	f000 fe92 	bl	8005f5c <mpu6500_deinit>
           
            return 1;
 8005238:	2301      	movs	r3, #1
 800523a:	e38a      	b.n	8005952 <mpu6500_basic_init+0x81a>
        }
    }
    
    /* set fifo 1024kb */
    res = mpu6500_set_fifo_1024kb(&gs_handle_mpu6500);
 800523c:	4868      	ldr	r0, [pc, #416]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800523e:	f002 fae7 	bl	8007810 <mpu6500_set_fifo_1024kb>
 8005242:	4603      	mov	r3, r0
 8005244:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d007      	beq.n	800525c <mpu6500_basic_init+0x124>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo 1024kb failed.\n");
 800524c:	4875      	ldr	r0, [pc, #468]	@ (8005424 <mpu6500_basic_init+0x2ec>)
 800524e:	f000 fc51 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005252:	4863      	ldr	r0, [pc, #396]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005254:	f000 fe82 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005258:	2301      	movs	r3, #1
 800525a:	e37a      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default clock source */
    res = mpu6500_set_clock_source(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CLOCK_SOURCE);
 800525c:	2101      	movs	r1, #1
 800525e:	4860      	ldr	r0, [pc, #384]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005260:	f001 fe44 	bl	8006eec <mpu6500_set_clock_source>
 8005264:	4603      	mov	r3, r0
 8005266:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d007      	beq.n	800527e <mpu6500_basic_init+0x146>
    {
        mpu6500_interface_debug_print("mpu6500: set clock source failed.\n");
 800526e:	486e      	ldr	r0, [pc, #440]	@ (8005428 <mpu6500_basic_init+0x2f0>)
 8005270:	f000 fc40 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005274:	485a      	ldr	r0, [pc, #360]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005276:	f000 fe71 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800527a:	2301      	movs	r3, #1
 800527c:	e369      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default rate */
    res = mpu6500_set_sample_rate_divider(&gs_handle_mpu6500, (1000 / MPU6500_BASIC_DEFAULT_RATE) - 1);
 800527e:	2100      	movs	r1, #0
 8005280:	4857      	ldr	r0, [pc, #348]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005282:	f002 f811 	bl	80072a8 <mpu6500_set_sample_rate_divider>
 8005286:	4603      	mov	r3, r0
 8005288:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800528a:	7bfb      	ldrb	r3, [r7, #15]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d007      	beq.n	80052a0 <mpu6500_basic_init+0x168>
    {
        mpu6500_interface_debug_print("mpu6500: set sample rate divider failed.\n");
 8005290:	4866      	ldr	r0, [pc, #408]	@ (800542c <mpu6500_basic_init+0x2f4>)
 8005292:	f000 fc2f 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005296:	4852      	ldr	r0, [pc, #328]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005298:	f000 fe60 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800529c:	2301      	movs	r3, #1
 800529e:	e358      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* enable temperature sensor */
    res = mpu6500_set_ptat(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 80052a0:	2101      	movs	r1, #1
 80052a2:	484f      	ldr	r0, [pc, #316]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 80052a4:	f001 fe6c 	bl	8006f80 <mpu6500_set_ptat>
 80052a8:	4603      	mov	r3, r0
 80052aa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d007      	beq.n	80052c2 <mpu6500_basic_init+0x18a>
    {
        mpu6500_interface_debug_print("mpu6500: set ptat failed.\n");
 80052b2:	485f      	ldr	r0, [pc, #380]	@ (8005430 <mpu6500_basic_init+0x2f8>)
 80052b4:	f000 fc1e 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80052b8:	4849      	ldr	r0, [pc, #292]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 80052ba:	f000 fe4f 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80052be:	2301      	movs	r3, #1
 80052c0:	e347      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default cycle wake up */
    res = mpu6500_set_cycle_wake_up(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CYCLE_WAKE_UP);
 80052c2:	2100      	movs	r1, #0
 80052c4:	4846      	ldr	r0, [pc, #280]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 80052c6:	f001 feab 	bl	8007020 <mpu6500_set_cycle_wake_up>
 80052ca:	4603      	mov	r3, r0
 80052cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d007      	beq.n	80052e4 <mpu6500_basic_init+0x1ac>
    {
        mpu6500_interface_debug_print("mpu6500: set cycle wake up failed.\n");
 80052d4:	4857      	ldr	r0, [pc, #348]	@ (8005434 <mpu6500_basic_init+0x2fc>)
 80052d6:	f000 fc0d 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80052da:	4841      	ldr	r0, [pc, #260]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 80052dc:	f000 fe3e 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e336      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_X, MPU6500_BOOL_FALSE);
 80052e4:	2200      	movs	r2, #0
 80052e6:	2105      	movs	r1, #5
 80052e8:	483d      	ldr	r0, [pc, #244]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 80052ea:	f001 ff83 	bl	80071f4 <mpu6500_set_standby_mode>
 80052ee:	4603      	mov	r3, r0
 80052f0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80052f2:	7bfb      	ldrb	r3, [r7, #15]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d007      	beq.n	8005308 <mpu6500_basic_init+0x1d0>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 80052f8:	484f      	ldr	r0, [pc, #316]	@ (8005438 <mpu6500_basic_init+0x300>)
 80052fa:	f000 fbfb 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80052fe:	4838      	ldr	r0, [pc, #224]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005300:	f000 fe2c 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005304:	2301      	movs	r3, #1
 8005306:	e324      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Y, MPU6500_BOOL_FALSE);
 8005308:	2200      	movs	r2, #0
 800530a:	2104      	movs	r1, #4
 800530c:	4834      	ldr	r0, [pc, #208]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800530e:	f001 ff71 	bl	80071f4 <mpu6500_set_standby_mode>
 8005312:	4603      	mov	r3, r0
 8005314:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005316:	7bfb      	ldrb	r3, [r7, #15]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d007      	beq.n	800532c <mpu6500_basic_init+0x1f4>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 800531c:	4846      	ldr	r0, [pc, #280]	@ (8005438 <mpu6500_basic_init+0x300>)
 800531e:	f000 fbe9 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005322:	482f      	ldr	r0, [pc, #188]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005324:	f000 fe1a 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005328:	2301      	movs	r3, #1
 800532a:	e312      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Z, MPU6500_BOOL_FALSE);
 800532c:	2200      	movs	r2, #0
 800532e:	2103      	movs	r1, #3
 8005330:	482b      	ldr	r0, [pc, #172]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005332:	f001 ff5f 	bl	80071f4 <mpu6500_set_standby_mode>
 8005336:	4603      	mov	r3, r0
 8005338:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800533a:	7bfb      	ldrb	r3, [r7, #15]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d007      	beq.n	8005350 <mpu6500_basic_init+0x218>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005340:	483d      	ldr	r0, [pc, #244]	@ (8005438 <mpu6500_basic_init+0x300>)
 8005342:	f000 fbd7 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005346:	4826      	ldr	r0, [pc, #152]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005348:	f000 fe08 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800534c:	2301      	movs	r3, #1
 800534e:	e300      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_X, MPU6500_BOOL_FALSE);
 8005350:	2200      	movs	r2, #0
 8005352:	2102      	movs	r1, #2
 8005354:	4822      	ldr	r0, [pc, #136]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005356:	f001 ff4d 	bl	80071f4 <mpu6500_set_standby_mode>
 800535a:	4603      	mov	r3, r0
 800535c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d007      	beq.n	8005374 <mpu6500_basic_init+0x23c>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005364:	4834      	ldr	r0, [pc, #208]	@ (8005438 <mpu6500_basic_init+0x300>)
 8005366:	f000 fbc5 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800536a:	481d      	ldr	r0, [pc, #116]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800536c:	f000 fdf6 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005370:	2301      	movs	r3, #1
 8005372:	e2ee      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Y, MPU6500_BOOL_FALSE);
 8005374:	2200      	movs	r2, #0
 8005376:	2101      	movs	r1, #1
 8005378:	4819      	ldr	r0, [pc, #100]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800537a:	f001 ff3b 	bl	80071f4 <mpu6500_set_standby_mode>
 800537e:	4603      	mov	r3, r0
 8005380:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005382:	7bfb      	ldrb	r3, [r7, #15]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d007      	beq.n	8005398 <mpu6500_basic_init+0x260>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8005388:	482b      	ldr	r0, [pc, #172]	@ (8005438 <mpu6500_basic_init+0x300>)
 800538a:	f000 fbb3 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800538e:	4814      	ldr	r0, [pc, #80]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 8005390:	f000 fde4 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005394:	2301      	movs	r3, #1
 8005396:	e2dc      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Z, MPU6500_BOOL_FALSE);
 8005398:	2200      	movs	r2, #0
 800539a:	2100      	movs	r1, #0
 800539c:	4810      	ldr	r0, [pc, #64]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 800539e:	f001 ff29 	bl	80071f4 <mpu6500_set_standby_mode>
 80053a2:	4603      	mov	r3, r0
 80053a4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80053a6:	7bfb      	ldrb	r3, [r7, #15]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d007      	beq.n	80053bc <mpu6500_basic_init+0x284>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 80053ac:	4822      	ldr	r0, [pc, #136]	@ (8005438 <mpu6500_basic_init+0x300>)
 80053ae:	f000 fba1 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80053b2:	480b      	ldr	r0, [pc, #44]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 80053b4:	f000 fdd2 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80053b8:	2301      	movs	r3, #1
 80053ba:	e2ca      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope x test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 80053bc:	2200      	movs	r2, #0
 80053be:	2107      	movs	r1, #7
 80053c0:	4807      	ldr	r0, [pc, #28]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 80053c2:	f002 f881 	bl	80074c8 <mpu6500_set_gyroscope_test>
 80053c6:	4603      	mov	r3, r0
 80053c8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d037      	beq.n	8005440 <mpu6500_basic_init+0x308>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 80053d0:	481a      	ldr	r0, [pc, #104]	@ (800543c <mpu6500_basic_init+0x304>)
 80053d2:	f000 fb8f 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80053d6:	4802      	ldr	r0, [pc, #8]	@ (80053e0 <mpu6500_basic_init+0x2a8>)
 80053d8:	f000 fdc0 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80053dc:	2301      	movs	r3, #1
 80053de:	e2b8      	b.n	8005952 <mpu6500_basic_init+0x81a>
 80053e0:	20000560 	.word	0x20000560
 80053e4:	080059a1 	.word	0x080059a1
 80053e8:	080059b1 	.word	0x080059b1
 80053ec:	080059c1 	.word	0x080059c1
 80053f0:	080059e5 	.word	0x080059e5
 80053f4:	08005a09 	.word	0x08005a09
 80053f8:	08005a19 	.word	0x08005a19
 80053fc:	08005a29 	.word	0x08005a29
 8005400:	08005a79 	.word	0x08005a79
 8005404:	08005ac9 	.word	0x08005ac9
 8005408:	08005af5 	.word	0x08005af5
 800540c:	08005b25 	.word	0x08005b25
 8005410:	0801f474 	.word	0x0801f474
 8005414:	0801f494 	.word	0x0801f494
 8005418:	0801f4b4 	.word	0x0801f4b4
 800541c:	0801f4cc 	.word	0x0801f4cc
 8005420:	0801f4e8 	.word	0x0801f4e8
 8005424:	0801f510 	.word	0x0801f510
 8005428:	0801f534 	.word	0x0801f534
 800542c:	0801f558 	.word	0x0801f558
 8005430:	0801f584 	.word	0x0801f584
 8005434:	0801f5a0 	.word	0x0801f5a0
 8005438:	0801f5c4 	.word	0x0801f5c4
 800543c:	0801f5e8 	.word	0x0801f5e8
    }
    
    /* disable gyroscope y test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8005440:	2200      	movs	r2, #0
 8005442:	2106      	movs	r1, #6
 8005444:	48b0      	ldr	r0, [pc, #704]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005446:	f002 f83f 	bl	80074c8 <mpu6500_set_gyroscope_test>
 800544a:	4603      	mov	r3, r0
 800544c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800544e:	7bfb      	ldrb	r3, [r7, #15]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d007      	beq.n	8005464 <mpu6500_basic_init+0x32c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8005454:	48ad      	ldr	r0, [pc, #692]	@ (800570c <mpu6500_basic_init+0x5d4>)
 8005456:	f000 fb4d 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800545a:	48ab      	ldr	r0, [pc, #684]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 800545c:	f000 fd7e 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005460:	2301      	movs	r3, #1
 8005462:	e276      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope z test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8005464:	2200      	movs	r2, #0
 8005466:	2105      	movs	r1, #5
 8005468:	48a7      	ldr	r0, [pc, #668]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 800546a:	f002 f82d 	bl	80074c8 <mpu6500_set_gyroscope_test>
 800546e:	4603      	mov	r3, r0
 8005470:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d007      	beq.n	8005488 <mpu6500_basic_init+0x350>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8005478:	48a4      	ldr	r0, [pc, #656]	@ (800570c <mpu6500_basic_init+0x5d4>)
 800547a:	f000 fb3b 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800547e:	48a2      	ldr	r0, [pc, #648]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005480:	f000 fd6c 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005484:	2301      	movs	r3, #1
 8005486:	e264      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer x test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8005488:	2200      	movs	r2, #0
 800548a:	2107      	movs	r1, #7
 800548c:	489e      	ldr	r0, [pc, #632]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 800548e:	f002 f917 	bl	80076c0 <mpu6500_set_accelerometer_test>
 8005492:	4603      	mov	r3, r0
 8005494:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005496:	7bfb      	ldrb	r3, [r7, #15]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d007      	beq.n	80054ac <mpu6500_basic_init+0x374>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 800549c:	489c      	ldr	r0, [pc, #624]	@ (8005710 <mpu6500_basic_init+0x5d8>)
 800549e:	f000 fb29 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80054a2:	4899      	ldr	r0, [pc, #612]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80054a4:	f000 fd5a 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80054a8:	2301      	movs	r3, #1
 80054aa:	e252      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer y test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 80054ac:	2200      	movs	r2, #0
 80054ae:	2106      	movs	r1, #6
 80054b0:	4895      	ldr	r0, [pc, #596]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80054b2:	f002 f905 	bl	80076c0 <mpu6500_set_accelerometer_test>
 80054b6:	4603      	mov	r3, r0
 80054b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80054ba:	7bfb      	ldrb	r3, [r7, #15]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d007      	beq.n	80054d0 <mpu6500_basic_init+0x398>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 80054c0:	4893      	ldr	r0, [pc, #588]	@ (8005710 <mpu6500_basic_init+0x5d8>)
 80054c2:	f000 fb17 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80054c6:	4890      	ldr	r0, [pc, #576]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80054c8:	f000 fd48 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e240      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer z test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 80054d0:	2200      	movs	r2, #0
 80054d2:	2105      	movs	r1, #5
 80054d4:	488c      	ldr	r0, [pc, #560]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80054d6:	f002 f8f3 	bl	80076c0 <mpu6500_set_accelerometer_test>
 80054da:	4603      	mov	r3, r0
 80054dc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80054de:	7bfb      	ldrb	r3, [r7, #15]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d007      	beq.n	80054f4 <mpu6500_basic_init+0x3bc>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 80054e4:	488a      	ldr	r0, [pc, #552]	@ (8005710 <mpu6500_basic_init+0x5d8>)
 80054e6:	f000 fb05 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80054ea:	4887      	ldr	r0, [pc, #540]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80054ec:	f000 fd36 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e22e      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* disable fifo */
    res = mpu6500_set_fifo(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 80054f4:	2100      	movs	r1, #0
 80054f6:	4884      	ldr	r0, [pc, #528]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80054f8:	f001 fc0e 	bl	8006d18 <mpu6500_set_fifo>
 80054fc:	4603      	mov	r3, r0
 80054fe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <mpu6500_basic_init+0x3de>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo failed.\n");
 8005506:	4883      	ldr	r0, [pc, #524]	@ (8005714 <mpu6500_basic_init+0x5dc>)
 8005508:	f000 faf4 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800550c:	487e      	ldr	r0, [pc, #504]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 800550e:	f000 fd25 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005512:	2301      	movs	r3, #1
 8005514:	e21d      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* disable temp fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_TEMP, MPU6500_BOOL_FALSE);
 8005516:	2200      	movs	r2, #0
 8005518:	2107      	movs	r1, #7
 800551a:	487b      	ldr	r0, [pc, #492]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 800551c:	f002 fb4a 	bl	8007bb4 <mpu6500_set_fifo_enable>
 8005520:	4603      	mov	r3, r0
 8005522:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d007      	beq.n	800553a <mpu6500_basic_init+0x402>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 800552a:	487b      	ldr	r0, [pc, #492]	@ (8005718 <mpu6500_basic_init+0x5e0>)
 800552c:	f000 fae2 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005530:	4875      	ldr	r0, [pc, #468]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005532:	f000 fd13 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005536:	2301      	movs	r3, #1
 8005538:	e20b      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* disable xg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_XG, MPU6500_BOOL_FALSE);
 800553a:	2200      	movs	r2, #0
 800553c:	2106      	movs	r1, #6
 800553e:	4872      	ldr	r0, [pc, #456]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005540:	f002 fb38 	bl	8007bb4 <mpu6500_set_fifo_enable>
 8005544:	4603      	mov	r3, r0
 8005546:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005548:	7bfb      	ldrb	r3, [r7, #15]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <mpu6500_basic_init+0x426>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 800554e:	4872      	ldr	r0, [pc, #456]	@ (8005718 <mpu6500_basic_init+0x5e0>)
 8005550:	f000 fad0 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005554:	486c      	ldr	r0, [pc, #432]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005556:	f000 fd01 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800555a:	2301      	movs	r3, #1
 800555c:	e1f9      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* disable yg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_YG, MPU6500_BOOL_FALSE);
 800555e:	2200      	movs	r2, #0
 8005560:	2105      	movs	r1, #5
 8005562:	4869      	ldr	r0, [pc, #420]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005564:	f002 fb26 	bl	8007bb4 <mpu6500_set_fifo_enable>
 8005568:	4603      	mov	r3, r0
 800556a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800556c:	7bfb      	ldrb	r3, [r7, #15]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d007      	beq.n	8005582 <mpu6500_basic_init+0x44a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8005572:	4869      	ldr	r0, [pc, #420]	@ (8005718 <mpu6500_basic_init+0x5e0>)
 8005574:	f000 fabe 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005578:	4863      	ldr	r0, [pc, #396]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 800557a:	f000 fcef 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800557e:	2301      	movs	r3, #1
 8005580:	e1e7      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* disable zg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ZG, MPU6500_BOOL_FALSE);
 8005582:	2200      	movs	r2, #0
 8005584:	2104      	movs	r1, #4
 8005586:	4860      	ldr	r0, [pc, #384]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005588:	f002 fb14 	bl	8007bb4 <mpu6500_set_fifo_enable>
 800558c:	4603      	mov	r3, r0
 800558e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005590:	7bfb      	ldrb	r3, [r7, #15]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d007      	beq.n	80055a6 <mpu6500_basic_init+0x46e>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8005596:	4860      	ldr	r0, [pc, #384]	@ (8005718 <mpu6500_basic_init+0x5e0>)
 8005598:	f000 faac 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800559c:	485a      	ldr	r0, [pc, #360]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 800559e:	f000 fcdd 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e1d5      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* disable accel fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ACCEL, MPU6500_BOOL_FALSE);
 80055a6:	2200      	movs	r2, #0
 80055a8:	2103      	movs	r1, #3
 80055aa:	4857      	ldr	r0, [pc, #348]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80055ac:	f002 fb02 	bl	8007bb4 <mpu6500_set_fifo_enable>
 80055b0:	4603      	mov	r3, r0
 80055b2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d007      	beq.n	80055ca <mpu6500_basic_init+0x492>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 80055ba:	4857      	ldr	r0, [pc, #348]	@ (8005718 <mpu6500_basic_init+0x5e0>)
 80055bc:	f000 fa9a 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80055c0:	4851      	ldr	r0, [pc, #324]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80055c2:	f000 fccb 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e1c3      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt level */
    res = mpu6500_set_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 80055ca:	2101      	movs	r1, #1
 80055cc:	484e      	ldr	r0, [pc, #312]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80055ce:	f002 fb4b 	bl	8007c68 <mpu6500_set_interrupt_level>
 80055d2:	4603      	mov	r3, r0
 80055d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d007      	beq.n	80055ec <mpu6500_basic_init+0x4b4>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt level failed.\n");
 80055dc:	484f      	ldr	r0, [pc, #316]	@ (800571c <mpu6500_basic_init+0x5e4>)
 80055de:	f000 fa89 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80055e2:	4849      	ldr	r0, [pc, #292]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80055e4:	f000 fcba 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e1b2      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default pin type */
    res = mpu6500_set_interrupt_pin_type(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 80055ec:	2100      	movs	r1, #0
 80055ee:	4846      	ldr	r0, [pc, #280]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80055f0:	f002 fb88 	bl	8007d04 <mpu6500_set_interrupt_pin_type>
 80055f4:	4603      	mov	r3, r0
 80055f6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80055f8:	7bfb      	ldrb	r3, [r7, #15]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d007      	beq.n	800560e <mpu6500_basic_init+0x4d6>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt pin type failed.\n");
 80055fe:	4848      	ldr	r0, [pc, #288]	@ (8005720 <mpu6500_basic_init+0x5e8>)
 8005600:	f000 fa78 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005604:	4840      	ldr	r0, [pc, #256]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005606:	f000 fca9 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800560a:	2301      	movs	r3, #1
 800560c:	e1a1      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default motion interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_MOTION, MPU6500_BASIC_DEFAULT_INTERRUPT_MOTION);
 800560e:	2200      	movs	r2, #0
 8005610:	2106      	movs	r1, #6
 8005612:	483d      	ldr	r0, [pc, #244]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005614:	f002 fd4c 	bl	80080b0 <mpu6500_set_interrupt>
 8005618:	4603      	mov	r3, r0
 800561a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d007      	beq.n	8005632 <mpu6500_basic_init+0x4fa>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8005622:	4840      	ldr	r0, [pc, #256]	@ (8005724 <mpu6500_basic_init+0x5ec>)
 8005624:	f000 fa66 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005628:	4837      	ldr	r0, [pc, #220]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 800562a:	f000 fc97 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800562e:	2301      	movs	r3, #1
 8005630:	e18f      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FIFO_OVERFLOW, MPU6500_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 8005632:	2200      	movs	r2, #0
 8005634:	2104      	movs	r1, #4
 8005636:	4834      	ldr	r0, [pc, #208]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005638:	f002 fd3a 	bl	80080b0 <mpu6500_set_interrupt>
 800563c:	4603      	mov	r3, r0
 800563e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005640:	7bfb      	ldrb	r3, [r7, #15]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d007      	beq.n	8005656 <mpu6500_basic_init+0x51e>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8005646:	4837      	ldr	r0, [pc, #220]	@ (8005724 <mpu6500_basic_init+0x5ec>)
 8005648:	f000 fa54 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800564c:	482e      	ldr	r0, [pc, #184]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 800564e:	f000 fc85 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005652:	2301      	movs	r3, #1
 8005654:	e17d      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default dmp interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DMP, MPU6500_BASIC_DEFAULT_INTERRUPT_DMP);
 8005656:	2200      	movs	r2, #0
 8005658:	2101      	movs	r1, #1
 800565a:	482b      	ldr	r0, [pc, #172]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 800565c:	f002 fd28 	bl	80080b0 <mpu6500_set_interrupt>
 8005660:	4603      	mov	r3, r0
 8005662:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005664:	7bfb      	ldrb	r3, [r7, #15]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d007      	beq.n	800567a <mpu6500_basic_init+0x542>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 800566a:	482e      	ldr	r0, [pc, #184]	@ (8005724 <mpu6500_basic_init+0x5ec>)
 800566c:	f000 fa42 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005670:	4825      	ldr	r0, [pc, #148]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005672:	f000 fc73 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005676:	2301      	movs	r3, #1
 8005678:	e16b      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync int interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FSYNC_INT, MPU6500_BASIC_DEFAULT_INTERRUPT_FSYNC_INT);
 800567a:	2200      	movs	r2, #0
 800567c:	2103      	movs	r1, #3
 800567e:	4822      	ldr	r0, [pc, #136]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005680:	f002 fd16 	bl	80080b0 <mpu6500_set_interrupt>
 8005684:	4603      	mov	r3, r0
 8005686:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005688:	7bfb      	ldrb	r3, [r7, #15]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d007      	beq.n	800569e <mpu6500_basic_init+0x566>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 800568e:	4825      	ldr	r0, [pc, #148]	@ (8005724 <mpu6500_basic_init+0x5ec>)
 8005690:	f000 fa30 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005694:	481c      	ldr	r0, [pc, #112]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 8005696:	f000 fc61 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800569a:	2301      	movs	r3, #1
 800569c:	e159      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default data ready interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DATA_READY, MPU6500_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 800569e:	2200      	movs	r2, #0
 80056a0:	2100      	movs	r1, #0
 80056a2:	4819      	ldr	r0, [pc, #100]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80056a4:	f002 fd04 	bl	80080b0 <mpu6500_set_interrupt>
 80056a8:	4603      	mov	r3, r0
 80056aa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80056ac:	7bfb      	ldrb	r3, [r7, #15]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d007      	beq.n	80056c2 <mpu6500_basic_init+0x58a>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 80056b2:	481c      	ldr	r0, [pc, #112]	@ (8005724 <mpu6500_basic_init+0x5ec>)
 80056b4:	f000 fa1e 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80056b8:	4813      	ldr	r0, [pc, #76]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80056ba:	f000 fc4f 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80056be:	2301      	movs	r3, #1
 80056c0:	e147      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt latch */
    res = mpu6500_set_interrupt_latch(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_LATCH);
 80056c2:	2101      	movs	r1, #1
 80056c4:	4810      	ldr	r0, [pc, #64]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80056c6:	f002 fb6b 	bl	8007da0 <mpu6500_set_interrupt_latch>
 80056ca:	4603      	mov	r3, r0
 80056cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d007      	beq.n	80056e4 <mpu6500_basic_init+0x5ac>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt latch failed.\n");
 80056d4:	4814      	ldr	r0, [pc, #80]	@ (8005728 <mpu6500_basic_init+0x5f0>)
 80056d6:	f000 fa0d 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80056da:	480b      	ldr	r0, [pc, #44]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80056dc:	f000 fc3e 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80056e0:	2301      	movs	r3, #1
 80056e2:	e136      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt read clear */
    res = mpu6500_set_interrupt_read_clear(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 80056e4:	2101      	movs	r1, #1
 80056e6:	4808      	ldr	r0, [pc, #32]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80056e8:	f002 fbaa 	bl	8007e40 <mpu6500_set_interrupt_read_clear>
 80056ec:	4603      	mov	r3, r0
 80056ee:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80056f0:	7bfb      	ldrb	r3, [r7, #15]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d01c      	beq.n	8005730 <mpu6500_basic_init+0x5f8>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt read clear failed.\n");
 80056f6:	480d      	ldr	r0, [pc, #52]	@ (800572c <mpu6500_basic_init+0x5f4>)
 80056f8:	f000 f9fc 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80056fc:	4802      	ldr	r0, [pc, #8]	@ (8005708 <mpu6500_basic_init+0x5d0>)
 80056fe:	f000 fc2d 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005702:	2301      	movs	r3, #1
 8005704:	e125      	b.n	8005952 <mpu6500_basic_init+0x81a>
 8005706:	bf00      	nop
 8005708:	20000560 	.word	0x20000560
 800570c:	0801f5e8 	.word	0x0801f5e8
 8005710:	0801f610 	.word	0x0801f610
 8005714:	0801f63c 	.word	0x0801f63c
 8005718:	0801f658 	.word	0x0801f658
 800571c:	0801f67c 	.word	0x0801f67c
 8005720:	0801f6a4 	.word	0x0801f6a4
 8005724:	0801f6d0 	.word	0x0801f6d0
 8005728:	0801f6f0 	.word	0x0801f6f0
 800572c:	0801f718 	.word	0x0801f718
    }
    
    /* set the extern sync */
    res = mpu6500_set_extern_sync(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_EXTERN_SYNC);
 8005730:	2100      	movs	r1, #0
 8005732:	488a      	ldr	r0, [pc, #552]	@ (800595c <mpu6500_basic_init+0x824>)
 8005734:	f001 fde2 	bl	80072fc <mpu6500_set_extern_sync>
 8005738:	4603      	mov	r3, r0
 800573a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800573c:	7bfb      	ldrb	r3, [r7, #15]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d007      	beq.n	8005752 <mpu6500_basic_init+0x61a>
    {
        mpu6500_interface_debug_print("mpu6500: set extern sync failed.\n");
 8005742:	4887      	ldr	r0, [pc, #540]	@ (8005960 <mpu6500_basic_init+0x828>)
 8005744:	f000 f9d6 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005748:	4884      	ldr	r0, [pc, #528]	@ (800595c <mpu6500_basic_init+0x824>)
 800574a:	f000 fc07 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800574e:	2301      	movs	r3, #1
 8005750:	e0ff      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt */
    res = mpu6500_set_fsync_interrupt(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT);
 8005752:	2100      	movs	r1, #0
 8005754:	4881      	ldr	r0, [pc, #516]	@ (800595c <mpu6500_basic_init+0x824>)
 8005756:	f002 fc0f 	bl	8007f78 <mpu6500_set_fsync_interrupt>
 800575a:	4603      	mov	r3, r0
 800575c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d007      	beq.n	8005774 <mpu6500_basic_init+0x63c>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt failed.\n");
 8005764:	487f      	ldr	r0, [pc, #508]	@ (8005964 <mpu6500_basic_init+0x82c>)
 8005766:	f000 f9c5 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800576a:	487c      	ldr	r0, [pc, #496]	@ (800595c <mpu6500_basic_init+0x824>)
 800576c:	f000 fbf6 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005770:	2301      	movs	r3, #1
 8005772:	e0ee      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt level */
    res = mpu6500_set_fsync_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 8005774:	2101      	movs	r1, #1
 8005776:	4879      	ldr	r0, [pc, #484]	@ (800595c <mpu6500_basic_init+0x824>)
 8005778:	f002 fbb0 	bl	8007edc <mpu6500_set_fsync_interrupt_level>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005780:	7bfb      	ldrb	r3, [r7, #15]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d007      	beq.n	8005796 <mpu6500_basic_init+0x65e>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt level failed.\n");
 8005786:	4878      	ldr	r0, [pc, #480]	@ (8005968 <mpu6500_basic_init+0x830>)
 8005788:	f000 f9b4 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800578c:	4873      	ldr	r0, [pc, #460]	@ (800595c <mpu6500_basic_init+0x824>)
 800578e:	f000 fbe5 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005792:	2301      	movs	r3, #1
 8005794:	e0dd      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic master */
    res = mpu6500_set_iic_master(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_MASTER);
 8005796:	2100      	movs	r1, #0
 8005798:	4870      	ldr	r0, [pc, #448]	@ (800595c <mpu6500_basic_init+0x824>)
 800579a:	f001 fb0b 	bl	8006db4 <mpu6500_set_iic_master>
 800579e:	4603      	mov	r3, r0
 80057a0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d007      	beq.n	80057b8 <mpu6500_basic_init+0x680>
    {
        mpu6500_interface_debug_print("mpu6500: set iic master failed.\n");
 80057a8:	4870      	ldr	r0, [pc, #448]	@ (800596c <mpu6500_basic_init+0x834>)
 80057aa:	f000 f9a3 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80057ae:	486b      	ldr	r0, [pc, #428]	@ (800595c <mpu6500_basic_init+0x824>)
 80057b0:	f000 fbd4 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e0cc      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic bypass */
    res = mpu6500_set_iic_bypass(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_BYPASS);
 80057b8:	2100      	movs	r1, #0
 80057ba:	4868      	ldr	r0, [pc, #416]	@ (800595c <mpu6500_basic_init+0x824>)
 80057bc:	f002 fc2a 	bl	8008014 <mpu6500_set_iic_bypass>
 80057c0:	4603      	mov	r3, r0
 80057c2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80057c4:	7bfb      	ldrb	r3, [r7, #15]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <mpu6500_basic_init+0x6a2>
    {
        mpu6500_interface_debug_print("mpu6500: set iic bypass failed.\n");
 80057ca:	4869      	ldr	r0, [pc, #420]	@ (8005970 <mpu6500_basic_init+0x838>)
 80057cc:	f000 f992 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80057d0:	4862      	ldr	r0, [pc, #392]	@ (800595c <mpu6500_basic_init+0x824>)
 80057d2:	f000 fbc3 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80057d6:	2301      	movs	r3, #1
 80057d8:	e0bb      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer range */
    res = mpu6500_set_accelerometer_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 80057da:	2103      	movs	r1, #3
 80057dc:	485f      	ldr	r0, [pc, #380]	@ (800595c <mpu6500_basic_init+0x824>)
 80057de:	f001 ffc9 	bl	8007774 <mpu6500_set_accelerometer_range>
 80057e2:	4603      	mov	r3, r0
 80057e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d007      	beq.n	80057fc <mpu6500_basic_init+0x6c4>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer range failed.\n");
 80057ec:	4861      	ldr	r0, [pc, #388]	@ (8005974 <mpu6500_basic_init+0x83c>)
 80057ee:	f000 f981 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80057f2:	485a      	ldr	r0, [pc, #360]	@ (800595c <mpu6500_basic_init+0x824>)
 80057f4:	f000 fbb2 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e0aa      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope range */
    res = mpu6500_set_gyroscope_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_RANGE);
 80057fc:	2103      	movs	r1, #3
 80057fe:	4857      	ldr	r0, [pc, #348]	@ (800595c <mpu6500_basic_init+0x824>)
 8005800:	f001 febc 	bl	800757c <mpu6500_set_gyroscope_range>
 8005804:	4603      	mov	r3, r0
 8005806:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005808:	7bfb      	ldrb	r3, [r7, #15]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <mpu6500_basic_init+0x6e6>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope range failed.\n");
 800580e:	485a      	ldr	r0, [pc, #360]	@ (8005978 <mpu6500_basic_init+0x840>)
 8005810:	f000 f970 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005814:	4851      	ldr	r0, [pc, #324]	@ (800595c <mpu6500_basic_init+0x824>)
 8005816:	f000 fba1 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800581a:	2301      	movs	r3, #1
 800581c:	e099      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyro standby */
    res = mpu6500_set_gyro_standby(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_STANDBY);
 800581e:	2100      	movs	r1, #0
 8005820:	484e      	ldr	r0, [pc, #312]	@ (800595c <mpu6500_basic_init+0x824>)
 8005822:	f001 fc99 	bl	8007158 <mpu6500_set_gyro_standby>
 8005826:	4603      	mov	r3, r0
 8005828:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d007      	beq.n	8005840 <mpu6500_basic_init+0x708>
    {
        mpu6500_interface_debug_print("mpu6500: set gyro standby failed.\n");
 8005830:	4852      	ldr	r0, [pc, #328]	@ (800597c <mpu6500_basic_init+0x844>)
 8005832:	f000 f95f 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005836:	4849      	ldr	r0, [pc, #292]	@ (800595c <mpu6500_basic_init+0x824>)
 8005838:	f000 fb90 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800583c:	2301      	movs	r3, #1
 800583e:	e088      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo mode */
    res = mpu6500_set_fifo_mode(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FIFO_MODE);
 8005840:	2101      	movs	r1, #1
 8005842:	4846      	ldr	r0, [pc, #280]	@ (800595c <mpu6500_basic_init+0x824>)
 8005844:	f001 fdf2 	bl	800742c <mpu6500_set_fifo_mode>
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800584c:	7bfb      	ldrb	r3, [r7, #15]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d007      	beq.n	8005862 <mpu6500_basic_init+0x72a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo mode failed.\n");
 8005852:	484b      	ldr	r0, [pc, #300]	@ (8005980 <mpu6500_basic_init+0x848>)
 8005854:	f000 f94e 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005858:	4840      	ldr	r0, [pc, #256]	@ (800595c <mpu6500_basic_init+0x824>)
 800585a:	f000 fb7f 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800585e:	2301      	movs	r3, #1
 8005860:	e077      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope choice */
    res = mpu6500_set_gyroscope_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_CHOICE);
 8005862:	2100      	movs	r1, #0
 8005864:	483d      	ldr	r0, [pc, #244]	@ (800595c <mpu6500_basic_init+0x824>)
 8005866:	f001 fed7 	bl	8007618 <mpu6500_set_gyroscope_choice>
 800586a:	4603      	mov	r3, r0
 800586c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800586e:	7bfb      	ldrb	r3, [r7, #15]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d007      	beq.n	8005884 <mpu6500_basic_init+0x74c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope choice failed.\n");
 8005874:	4843      	ldr	r0, [pc, #268]	@ (8005984 <mpu6500_basic_init+0x84c>)
 8005876:	f000 f93d 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800587a:	4838      	ldr	r0, [pc, #224]	@ (800595c <mpu6500_basic_init+0x824>)
 800587c:	f000 fb6e 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005880:	2301      	movs	r3, #1
 8005882:	e066      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low pass filter */
    res = mpu6500_set_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_PASS_FILTER);
 8005884:	2102      	movs	r1, #2
 8005886:	4835      	ldr	r0, [pc, #212]	@ (800595c <mpu6500_basic_init+0x824>)
 8005888:	f001 fd86 	bl	8007398 <mpu6500_set_low_pass_filter>
 800588c:	4603      	mov	r3, r0
 800588e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005890:	7bfb      	ldrb	r3, [r7, #15]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d007      	beq.n	80058a6 <mpu6500_basic_init+0x76e>
    {
        mpu6500_interface_debug_print("mpu6500: set low pass filter failed.\n");
 8005896:	483c      	ldr	r0, [pc, #240]	@ (8005988 <mpu6500_basic_init+0x850>)
 8005898:	f000 f92c 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800589c:	482f      	ldr	r0, [pc, #188]	@ (800595c <mpu6500_basic_init+0x824>)
 800589e:	f000 fb5d 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e055      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer choice */
    res = mpu6500_set_accelerometer_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_CHOICE);
 80058a6:	2100      	movs	r1, #0
 80058a8:	482c      	ldr	r0, [pc, #176]	@ (800595c <mpu6500_basic_init+0x824>)
 80058aa:	f001 fff9 	bl	80078a0 <mpu6500_set_accelerometer_choice>
 80058ae:	4603      	mov	r3, r0
 80058b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80058b2:	7bfb      	ldrb	r3, [r7, #15]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d007      	beq.n	80058c8 <mpu6500_basic_init+0x790>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer choice failed.\n");
 80058b8:	4834      	ldr	r0, [pc, #208]	@ (800598c <mpu6500_basic_init+0x854>)
 80058ba:	f000 f91b 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80058be:	4827      	ldr	r0, [pc, #156]	@ (800595c <mpu6500_basic_init+0x824>)
 80058c0:	f000 fb4c 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e044      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer low pass filter */
    res = mpu6500_set_accelerometer_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_LOW_PASS_FILTER);
 80058c8:	2104      	movs	r1, #4
 80058ca:	4824      	ldr	r0, [pc, #144]	@ (800595c <mpu6500_basic_init+0x824>)
 80058cc:	f002 f842 	bl	8007954 <mpu6500_set_accelerometer_low_pass_filter>
 80058d0:	4603      	mov	r3, r0
 80058d2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80058d4:	7bfb      	ldrb	r3, [r7, #15]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d007      	beq.n	80058ea <mpu6500_basic_init+0x7b2>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer low pass filter failed.\n");
 80058da:	482d      	ldr	r0, [pc, #180]	@ (8005990 <mpu6500_basic_init+0x858>)
 80058dc:	f000 f90a 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80058e0:	481e      	ldr	r0, [pc, #120]	@ (800595c <mpu6500_basic_init+0x824>)
 80058e2:	f000 fb3b 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e033      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low power accel output rate */
    res = mpu6500_set_low_power_accel_output_rate(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_POWER_ACCEL_OUTPUT_RATE);
 80058ea:	2108      	movs	r1, #8
 80058ec:	481b      	ldr	r0, [pc, #108]	@ (800595c <mpu6500_basic_init+0x824>)
 80058ee:	f002 f87b 	bl	80079e8 <mpu6500_set_low_power_accel_output_rate>
 80058f2:	4603      	mov	r3, r0
 80058f4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80058f6:	7bfb      	ldrb	r3, [r7, #15]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d007      	beq.n	800590c <mpu6500_basic_init+0x7d4>
    {
        mpu6500_interface_debug_print("mpu6500: set low power accel output rate failed.\n");
 80058fc:	4825      	ldr	r0, [pc, #148]	@ (8005994 <mpu6500_basic_init+0x85c>)
 80058fe:	f000 f8f9 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005902:	4816      	ldr	r0, [pc, #88]	@ (800595c <mpu6500_basic_init+0x824>)
 8005904:	f000 fb2a 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 8005908:	2301      	movs	r3, #1
 800590a:	e022      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default wake on motion */
    res = mpu6500_set_wake_on_motion(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_WAKE_ON_MOTION);
 800590c:	2100      	movs	r1, #0
 800590e:	4813      	ldr	r0, [pc, #76]	@ (800595c <mpu6500_basic_init+0x824>)
 8005910:	f002 f8b4 	bl	8007a7c <mpu6500_set_wake_on_motion>
 8005914:	4603      	mov	r3, r0
 8005916:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d007      	beq.n	800592e <mpu6500_basic_init+0x7f6>
    {
        mpu6500_interface_debug_print("mpu6500: set wake on motion failed.\n");
 800591e:	481e      	ldr	r0, [pc, #120]	@ (8005998 <mpu6500_basic_init+0x860>)
 8005920:	f000 f8e8 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005924:	480d      	ldr	r0, [pc, #52]	@ (800595c <mpu6500_basic_init+0x824>)
 8005926:	f000 fb19 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800592a:	2301      	movs	r3, #1
 800592c:	e011      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accel compare with previous sample */
    res = mpu6500_set_accel_compare_with_previous_sample(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_COMPARE);
 800592e:	2101      	movs	r1, #1
 8005930:	480a      	ldr	r0, [pc, #40]	@ (800595c <mpu6500_basic_init+0x824>)
 8005932:	f002 f8f1 	bl	8007b18 <mpu6500_set_accel_compare_with_previous_sample>
 8005936:	4603      	mov	r3, r0
 8005938:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800593a:	7bfb      	ldrb	r3, [r7, #15]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <mpu6500_basic_init+0x818>
    {
        mpu6500_interface_debug_print("mpu6500: set accel compare with previous sample failed.\n");
 8005940:	4816      	ldr	r0, [pc, #88]	@ (800599c <mpu6500_basic_init+0x864>)
 8005942:	f000 f8d7 	bl	8005af4 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005946:	4805      	ldr	r0, [pc, #20]	@ (800595c <mpu6500_basic_init+0x824>)
 8005948:	f000 fb08 	bl	8005f5c <mpu6500_deinit>
       
        return 1;
 800594c:	2301      	movs	r3, #1
 800594e:	e000      	b.n	8005952 <mpu6500_basic_init+0x81a>
    }
    
    return 0;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	20000560 	.word	0x20000560
 8005960:	0801f744 	.word	0x0801f744
 8005964:	0801f768 	.word	0x0801f768
 8005968:	0801f790 	.word	0x0801f790
 800596c:	0801f7bc 	.word	0x0801f7bc
 8005970:	0801f7e0 	.word	0x0801f7e0
 8005974:	0801f804 	.word	0x0801f804
 8005978:	0801f830 	.word	0x0801f830
 800597c:	0801f858 	.word	0x0801f858
 8005980:	0801f87c 	.word	0x0801f87c
 8005984:	0801f89c 	.word	0x0801f89c
 8005988:	0801f8c4 	.word	0x0801f8c4
 800598c:	0801f8ec 	.word	0x0801f8ec
 8005990:	0801f918 	.word	0x0801f918
 8005994:	0801f94c 	.word	0x0801f94c
 8005998:	0801f980 	.word	0x0801f980
 800599c:	0801f9a8 	.word	0x0801f9a8

080059a0 <mpu6500_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_init(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
    return 0;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <mpu6500_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_deinit(void)
{
 80059b0:	b480      	push	{r7}
 80059b2:	af00      	add	r7, sp, #0
    return 0;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <mpu6500_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	603a      	str	r2, [r7, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	4603      	mov	r3, r0
 80059cc:	71fb      	strb	r3, [r7, #7]
 80059ce:	460b      	mov	r3, r1
 80059d0:	71bb      	strb	r3, [r7, #6]
 80059d2:	4613      	mov	r3, r2
 80059d4:	80bb      	strh	r3, [r7, #4]
    return 0;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	370c      	adds	r7, #12
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr

080059e4 <mpu6500_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	603a      	str	r2, [r7, #0]
 80059ec:	461a      	mov	r2, r3
 80059ee:	4603      	mov	r3, r0
 80059f0:	71fb      	strb	r3, [r7, #7]
 80059f2:	460b      	mov	r3, r1
 80059f4:	71bb      	strb	r3, [r7, #6]
 80059f6:	4613      	mov	r3, r2
 80059f8:	80bb      	strh	r3, [r7, #4]
    return 0;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <mpu6500_interface_spi_init>:
 *         - 0 success
 *         - 1 spi init failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_init(void)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	af00      	add	r7, sp, #0
    return 0;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <mpu6500_interface_spi_deinit>:
 *         - 0 success
 *         - 1 spi deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_deinit(void)
{   
 8005a18:	b480      	push	{r7}
 8005a1a:	af00      	add	r7, sp, #0
    return 0;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <mpu6500_interface_spi_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_spi_read(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b082      	sub	sp, #8
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	4603      	mov	r3, r0
 8005a30:	6039      	str	r1, [r7, #0]
 8005a32:	71fb      	strb	r3, [r7, #7]
 8005a34:	4613      	mov	r3, r2
 8005a36:	80bb      	strh	r3, [r7, #4]
	//uint8_t temp_data = 0x80|reg;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8005a38:	2200      	movs	r2, #0
 8005a3a:	2110      	movs	r1, #16
 8005a3c:	480c      	ldr	r0, [pc, #48]	@ (8005a70 <mpu6500_interface_spi_read+0x48>)
 8005a3e:	f006 fb07 	bl	800c050 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg , 1, 100);
 8005a42:	1df9      	adds	r1, r7, #7
 8005a44:	2364      	movs	r3, #100	@ 0x64
 8005a46:	2201      	movs	r2, #1
 8005a48:	480a      	ldr	r0, [pc, #40]	@ (8005a74 <mpu6500_interface_spi_read+0x4c>)
 8005a4a:	f008 fac0 	bl	800dfce <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buf, len, 100);
 8005a4e:	88ba      	ldrh	r2, [r7, #4]
 8005a50:	2364      	movs	r3, #100	@ 0x64
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	4807      	ldr	r0, [pc, #28]	@ (8005a74 <mpu6500_interface_spi_read+0x4c>)
 8005a56:	f008 fbfe 	bl	800e256 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	2110      	movs	r1, #16
 8005a5e:	4804      	ldr	r0, [pc, #16]	@ (8005a70 <mpu6500_interface_spi_read+0x48>)
 8005a60:	f006 faf6 	bl	800c050 <HAL_GPIO_WritePin>
    return 0;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3708      	adds	r7, #8
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
 8005a6e:	bf00      	nop
 8005a70:	40020000 	.word	0x40020000
 8005a74:	20004354 	.word	0x20004354

08005a78 <mpu6500_interface_spi_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_spi_write(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	4603      	mov	r3, r0
 8005a80:	6039      	str	r1, [r7, #0]
 8005a82:	71fb      	strb	r3, [r7, #7]
 8005a84:	4613      	mov	r3, r2
 8005a86:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8005a88:	2200      	movs	r2, #0
 8005a8a:	2110      	movs	r1, #16
 8005a8c:	480c      	ldr	r0, [pc, #48]	@ (8005ac0 <mpu6500_interface_spi_write+0x48>)
 8005a8e:	f006 fadf 	bl	800c050 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 8005a92:	1df9      	adds	r1, r7, #7
 8005a94:	2364      	movs	r3, #100	@ 0x64
 8005a96:	2201      	movs	r2, #1
 8005a98:	480a      	ldr	r0, [pc, #40]	@ (8005ac4 <mpu6500_interface_spi_write+0x4c>)
 8005a9a:	f008 fa98 	bl	800dfce <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 8005a9e:	2364      	movs	r3, #100	@ 0x64
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	6839      	ldr	r1, [r7, #0]
 8005aa4:	4807      	ldr	r0, [pc, #28]	@ (8005ac4 <mpu6500_interface_spi_write+0x4c>)
 8005aa6:	f008 fa92 	bl	800dfce <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8005aaa:	2201      	movs	r2, #1
 8005aac:	2110      	movs	r1, #16
 8005aae:	4804      	ldr	r0, [pc, #16]	@ (8005ac0 <mpu6500_interface_spi_write+0x48>)
 8005ab0:	f006 face 	bl	800c050 <HAL_GPIO_WritePin>
    return 0;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	40020000 	.word	0x40020000
 8005ac4:	20004354 	.word	0x20004354

08005ac8 <mpu6500_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms time
 * @note      none
 */
void mpu6500_interface_delay_ms(uint32_t ms)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
	vTaskDelay(pdMS_TO_TICKS(ms));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ad6:	fb02 f303 	mul.w	r3, r2, r3
 8005ada:	4a05      	ldr	r2, [pc, #20]	@ (8005af0 <mpu6500_interface_delay_ms+0x28>)
 8005adc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae0:	099b      	lsrs	r3, r3, #6
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	f010 f836 	bl	8015b54 <vTaskDelay>
}
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	10624dd3 	.word	0x10624dd3

08005af4 <mpu6500_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt format data
 * @note      none
 */
void mpu6500_interface_debug_print(const char *const fmt, ...)
{
 8005af4:	b40f      	push	{r0, r1, r2, r3}
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8005afc:	f107 0314 	add.w	r3, r7, #20
 8005b00:	607b      	str	r3, [r7, #4]
    vfprintf(stderr, fmt, args);  // <-- Pass to stderr
 8005b02:	4b07      	ldr	r3, [pc, #28]	@ (8005b20 <mpu6500_interface_debug_print+0x2c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	6939      	ldr	r1, [r7, #16]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f014 fe95 	bl	801a83c <vfiprintf>
    va_end(args);
}
 8005b12:	bf00      	nop
 8005b14:	3708      	adds	r7, #8
 8005b16:	46bd      	mov	sp, r7
 8005b18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b1c:	b004      	add	sp, #16
 8005b1e:	4770      	bx	lr
 8005b20:	20000160 	.word	0x20000160

08005b24 <mpu6500_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type irq type
 * @note      none
 */
void mpu6500_interface_receive_callback(uint8_t type)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	71fb      	strb	r3, [r7, #7]
    switch (type)
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	2b06      	cmp	r3, #6
 8005b32:	d825      	bhi.n	8005b80 <mpu6500_interface_receive_callback+0x5c>
 8005b34:	a201      	add	r2, pc, #4	@ (adr r2, 8005b3c <mpu6500_interface_receive_callback+0x18>)
 8005b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b3a:	bf00      	nop
 8005b3c:	08005b79 	.word	0x08005b79
 8005b40:	08005b71 	.word	0x08005b71
 8005b44:	08005b81 	.word	0x08005b81
 8005b48:	08005b69 	.word	0x08005b69
 8005b4c:	08005b61 	.word	0x08005b61
 8005b50:	08005b81 	.word	0x08005b81
 8005b54:	08005b59 	.word	0x08005b59
    {
        case MPU6500_INTERRUPT_MOTION :
        {
            mpu6500_interface_debug_print("mpu6500: irq motion.\n");
 8005b58:	480d      	ldr	r0, [pc, #52]	@ (8005b90 <mpu6500_interface_receive_callback+0x6c>)
 8005b5a:	f7ff ffcb 	bl	8005af4 <mpu6500_interface_debug_print>
            
            break;
 8005b5e:	e013      	b.n	8005b88 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6500_interface_debug_print("mpu6500: irq fifo overflow.\n");
 8005b60:	480c      	ldr	r0, [pc, #48]	@ (8005b94 <mpu6500_interface_receive_callback+0x70>)
 8005b62:	f7ff ffc7 	bl	8005af4 <mpu6500_interface_debug_print>
            
            break;
 8005b66:	e00f      	b.n	8005b88 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FSYNC_INT :
        {
            mpu6500_interface_debug_print("mpu6500: irq fsync int.\n");
 8005b68:	480b      	ldr	r0, [pc, #44]	@ (8005b98 <mpu6500_interface_receive_callback+0x74>)
 8005b6a:	f7ff ffc3 	bl	8005af4 <mpu6500_interface_debug_print>
            
            break;
 8005b6e:	e00b      	b.n	8005b88 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DMP :
        {
            mpu6500_interface_debug_print("mpu6500: irq dmp\n");
 8005b70:	480a      	ldr	r0, [pc, #40]	@ (8005b9c <mpu6500_interface_receive_callback+0x78>)
 8005b72:	f7ff ffbf 	bl	8005af4 <mpu6500_interface_debug_print>
            
            break;
 8005b76:	e007      	b.n	8005b88 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DATA_READY :
        {
            mpu6500_interface_debug_print("mpu6500: irq data ready\n");
 8005b78:	4809      	ldr	r0, [pc, #36]	@ (8005ba0 <mpu6500_interface_receive_callback+0x7c>)
 8005b7a:	f7ff ffbb 	bl	8005af4 <mpu6500_interface_debug_print>
            
            break;
 8005b7e:	e003      	b.n	8005b88 <mpu6500_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6500_interface_debug_print("mpu6500: irq unknown code.\n");
 8005b80:	4808      	ldr	r0, [pc, #32]	@ (8005ba4 <mpu6500_interface_receive_callback+0x80>)
 8005b82:	f7ff ffb7 	bl	8005af4 <mpu6500_interface_debug_print>
            
            break;
 8005b86:	bf00      	nop
        }
    }
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	0801f9e4 	.word	0x0801f9e4
 8005b94:	0801f9fc 	.word	0x0801f9fc
 8005b98:	0801fa1c 	.word	0x0801fa1c
 8005b9c:	0801fa38 	.word	0x0801fa38
 8005ba0:	0801fa4c 	.word	0x0801fa4c
 8005ba4:	0801fa68 	.word	0x0801fa68

08005ba8 <a_mpu6500_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6500_read(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005ba8:	b590      	push	{r4, r7, lr}
 8005baa:	b085      	sub	sp, #20
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	607a      	str	r2, [r7, #4]
 8005bb2:	461a      	mov	r2, r3
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	72fb      	strb	r3, [r7, #11]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                     /* if iic interface */
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d10e      	bne.n	8005be4 <a_mpu6500_read+0x3c>
    {
        if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	68dc      	ldr	r4, [r3, #12]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	7818      	ldrb	r0, [r3, #0]
 8005bce:	893b      	ldrh	r3, [r7, #8]
 8005bd0:	7af9      	ldrb	r1, [r7, #11]
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	47a0      	blx	r4
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <a_mpu6500_read+0x38>
        {
            return 1;                                                                 /* return error */
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e010      	b.n	8005c02 <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8005be0:	2300      	movs	r3, #0
 8005be2:	e00e      	b.n	8005c02 <a_mpu6500_read+0x5a>
        }
    }
    else                                                                              /* spi interface */
    {
        if (handle->spi_read(reg | 0x80, (uint8_t *)buf, len) != 0)                   /* read data */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	69db      	ldr	r3, [r3, #28]
 8005be8:	7afa      	ldrb	r2, [r7, #11]
 8005bea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bee:	b2d0      	uxtb	r0, r2
 8005bf0:	893a      	ldrh	r2, [r7, #8]
 8005bf2:	6879      	ldr	r1, [r7, #4]
 8005bf4:	4798      	blx	r3
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <a_mpu6500_read+0x58>
        {
            return 1;                                                                 /* return error */
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e000      	b.n	8005c02 <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 8005c00:	2300      	movs	r3, #0
        }
    }
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3714      	adds	r7, #20
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd90      	pop	{r4, r7, pc}

08005c0a <a_mpu6500_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6500_write(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005c0a:	b590      	push	{r4, r7, lr}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	461a      	mov	r2, r3
 8005c16:	460b      	mov	r3, r1
 8005c18:	72fb      	strb	r3, [r7, #11]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                      /* if iic interface */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d10e      	bne.n	8005c46 <a_mpu6500_write+0x3c>
    {
        if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	691c      	ldr	r4, [r3, #16]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	7818      	ldrb	r0, [r3, #0]
 8005c30:	893b      	ldrh	r3, [r7, #8]
 8005c32:	7af9      	ldrb	r1, [r7, #11]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	47a0      	blx	r4
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d001      	beq.n	8005c42 <a_mpu6500_write+0x38>
        {
            return 1;                                                                  /* return error */
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e010      	b.n	8005c64 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 8005c42:	2300      	movs	r3, #0
 8005c44:	e00e      	b.n	8005c64 <a_mpu6500_write+0x5a>
        }
    }
    else                                                                               /* spi interface */
    {
        if (handle->spi_write(reg & (~0x80), (uint8_t *)buf, len) != 0)                /* write data */
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6a1b      	ldr	r3, [r3, #32]
 8005c4a:	7afa      	ldrb	r2, [r7, #11]
 8005c4c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c50:	b2d0      	uxtb	r0, r2
 8005c52:	893a      	ldrh	r2, [r7, #8]
 8005c54:	6879      	ldr	r1, [r7, #4]
 8005c56:	4798      	blx	r3
 8005c58:	4603      	mov	r3, r0
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d001      	beq.n	8005c62 <a_mpu6500_write+0x58>
        {
            return 1;                                                                  /* return error */
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e000      	b.n	8005c64 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 8005c62:	2300      	movs	r3, #0
        }
    }
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd90      	pop	{r4, r7, pc}

08005c6c <a_mpu6500_deinit>:
 *            - 0 success
 *            - 1 deinit failed
 * @note      none
 */
static uint8_t a_mpu6500_deinit(mpu6500_handle_t *handle)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)        /* if iic interface */
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d109      	bne.n	8005c92 <a_mpu6500_deinit+0x26>
    {
        if (handle->iic_deinit() != 0)                   /* iic deinit */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	4798      	blx	r3
 8005c84:	4603      	mov	r3, r0
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d001      	beq.n	8005c8e <a_mpu6500_deinit+0x22>
        {
            return 1;                                    /* return error */
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e00a      	b.n	8005ca4 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 8005c8e:	2300      	movs	r3, #0
 8005c90:	e008      	b.n	8005ca4 <a_mpu6500_deinit+0x38>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                   /* if spi interface */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	699b      	ldr	r3, [r3, #24]
 8005c96:	4798      	blx	r3
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <a_mpu6500_deinit+0x36>
        {
            return 1;                                    /* return error */
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e000      	b.n	8005ca4 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 8005ca2:	2300      	movs	r3, #0
        }
    }
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3708      	adds	r7, #8
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <mpu6500_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_interface(mpu6500_handle_t *handle, mpu6500_interface_t interface)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b083      	sub	sp, #12
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	460b      	mov	r3, r1
 8005cb6:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <mpu6500_set_interface+0x16>
    {
        return 2;                                /* return error */
 8005cbe:	2302      	movs	r3, #2
 8005cc0:	e004      	b.n	8005ccc <mpu6500_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;        /* set interface */
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	78fa      	ldrb	r2, [r7, #3]
 8005cc6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
    return 0;                                    /* success return 0 */
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	370c      	adds	r7, #12
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd6:	4770      	bx	lr

08005cd8 <mpu6500_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_addr_pin(mpu6500_handle_t *handle, mpu6500_address_t addr_pin)
{
 8005cd8:	b480      	push	{r7}
 8005cda:	b083      	sub	sp, #12
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	460b      	mov	r3, r1
 8005ce2:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d101      	bne.n	8005cee <mpu6500_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 8005cea:	2302      	movs	r3, #2
 8005cec:	e003      	b.n	8005cf6 <mpu6500_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	78fa      	ldrb	r2, [r7, #3]
 8005cf2:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
	...

08005d04 <mpu6500_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6500_init(mpu6500_handle_t *handle)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;
  
    if (handle == NULL)                                                             /* check handle */
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <mpu6500_init+0x12>
    {
        return 2;                                                                   /* return error */
 8005d12:	2302      	movs	r3, #2
 8005d14:	e0fb      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d101      	bne.n	8005d22 <mpu6500_init+0x1e>
    {
        return 3;                                                                   /* return error */
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e0f5      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d105      	bne.n	8005d36 <mpu6500_init+0x32>
    {
        handle->debug_print("mpu6500: iic_init is null.\n");                        /* iic_init is null */
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2e:	487a      	ldr	r0, [pc, #488]	@ (8005f18 <mpu6500_init+0x214>)
 8005d30:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005d32:	2303      	movs	r3, #3
 8005d34:	e0eb      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	689b      	ldr	r3, [r3, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d105      	bne.n	8005d4a <mpu6500_init+0x46>
    {
        handle->debug_print("mpu6500: iic_deinit is null.\n");                      /* iic_deinit is null */
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d42:	4876      	ldr	r0, [pc, #472]	@ (8005f1c <mpu6500_init+0x218>)
 8005d44:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005d46:	2303      	movs	r3, #3
 8005d48:	e0e1      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68db      	ldr	r3, [r3, #12]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d105      	bne.n	8005d5e <mpu6500_init+0x5a>
    {
        handle->debug_print("mpu6500: iic_read is null.\n");                        /* iic_read is null */
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d56:	4872      	ldr	r0, [pc, #456]	@ (8005f20 <mpu6500_init+0x21c>)
 8005d58:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005d5a:	2303      	movs	r3, #3
 8005d5c:	e0d7      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d105      	bne.n	8005d72 <mpu6500_init+0x6e>
    {
        handle->debug_print("mpu6500: iic_write is null.\n");                       /* iic_write is null */
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d6a:	486e      	ldr	r0, [pc, #440]	@ (8005f24 <mpu6500_init+0x220>)
 8005d6c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e0cd      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (handle->spi_init == NULL)                                                   /* check spi_init */
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d105      	bne.n	8005d86 <mpu6500_init+0x82>
    {
        handle->debug_print("mpu6500: spi_init is null.\n");                        /* spi_init is null */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7e:	486a      	ldr	r0, [pc, #424]	@ (8005f28 <mpu6500_init+0x224>)
 8005d80:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005d82:	2303      	movs	r3, #3
 8005d84:	e0c3      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (handle->spi_deinit == NULL)                                                 /* check spi_deinit */
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d105      	bne.n	8005d9a <mpu6500_init+0x96>
    {
        handle->debug_print("mpu6500: spi_deinit is null.\n");                      /* spi_deinit is null */
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d92:	4866      	ldr	r0, [pc, #408]	@ (8005f2c <mpu6500_init+0x228>)
 8005d94:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005d96:	2303      	movs	r3, #3
 8005d98:	e0b9      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (handle->spi_read == NULL)                                                   /* check spi_read */
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d105      	bne.n	8005dae <mpu6500_init+0xaa>
    {
        handle->debug_print("mpu6500: spi_read is null.\n");                        /* spi_read is null */
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da6:	4862      	ldr	r0, [pc, #392]	@ (8005f30 <mpu6500_init+0x22c>)
 8005da8:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005daa:	2303      	movs	r3, #3
 8005dac:	e0af      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (handle->spi_write == NULL)                                                  /* check spi_write */
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6a1b      	ldr	r3, [r3, #32]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d105      	bne.n	8005dc2 <mpu6500_init+0xbe>
    {
        handle->debug_print("mpu6500: spi_write is null.\n");                       /* spi_write is null */
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dba:	485e      	ldr	r0, [pc, #376]	@ (8005f34 <mpu6500_init+0x230>)
 8005dbc:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e0a5      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d105      	bne.n	8005dd6 <mpu6500_init+0xd2>
    {
        handle->debug_print("mpu6500: delay_ms is null.\n");                        /* delay_ms is null */
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dce:	485a      	ldr	r0, [pc, #360]	@ (8005f38 <mpu6500_init+0x234>)
 8005dd0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005dd2:	2303      	movs	r3, #3
 8005dd4:	e09b      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d105      	bne.n	8005dea <mpu6500_init+0xe6>
    {
        handle->debug_print("mpu6500: receive_callback is null.\n");                /* receive_callback is null */
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de2:	4856      	ldr	r0, [pc, #344]	@ (8005f3c <mpu6500_init+0x238>)
 8005de4:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005de6:	2303      	movs	r3, #3
 8005de8:	e091      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                   /* if iic interface */
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10d      	bne.n	8005e10 <mpu6500_init+0x10c>
    {
        res = handle->iic_init();                                                   /* iic init */
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	4798      	blx	r3
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8005dfe:	7afb      	ldrb	r3, [r7, #11]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d013      	beq.n	8005e2c <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: iic init failed.\n");                     /* iic init failed */
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e08:	484d      	ldr	r0, [pc, #308]	@ (8005f40 <mpu6500_init+0x23c>)
 8005e0a:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e07e      	b.n	8005f0e <mpu6500_init+0x20a>
        }
    }
    else                                                                            /* if spi interface */
    {
        res = handle->spi_init();                                                   /* spi init */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	695b      	ldr	r3, [r3, #20]
 8005e14:	4798      	blx	r3
 8005e16:	4603      	mov	r3, r0
 8005e18:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8005e1a:	7afb      	ldrb	r3, [r7, #11]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: spi init failed.\n");                     /* spi init failed */
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e24:	4847      	ldr	r0, [pc, #284]	@ (8005f44 <mpu6500_init+0x240>)
 8005e26:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e070      	b.n	8005f0e <mpu6500_init+0x20a>
        }
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_WHO_AM_I, &prev, 1);                   /* read who am I */
 8005e2c:	f107 020a 	add.w	r2, r7, #10
 8005e30:	2301      	movs	r3, #1
 8005e32:	2175      	movs	r1, #117	@ 0x75
 8005e34:	6878      	ldr	r0, [r7, #4]
 8005e36:	f7ff feb7 	bl	8005ba8 <a_mpu6500_read>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8005e3e:	7afb      	ldrb	r3, [r7, #11]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <mpu6500_init+0x152>
    {
        handle->debug_print("mpu6500: read who am i failed.\n");                    /* read who am I failed */
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e48:	483f      	ldr	r0, [pc, #252]	@ (8005f48 <mpu6500_init+0x244>)
 8005e4a:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 8005e4c:	6878      	ldr	r0, [r7, #4]
 8005e4e:	f7ff ff0d 	bl	8005c6c <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 8005e52:	2305      	movs	r3, #5
 8005e54:	e05b      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    if (prev != 0x70)                                                               /* check the id */
 8005e56:	7abb      	ldrb	r3, [r7, #10]
 8005e58:	2b70      	cmp	r3, #112	@ 0x70
 8005e5a:	d008      	beq.n	8005e6e <mpu6500_init+0x16a>
    {
        handle->debug_print("mpu6500: id is invalid.\n");                           /* id is invalid */
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e60:	483a      	ldr	r0, [pc, #232]	@ (8005f4c <mpu6500_init+0x248>)
 8005e62:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff ff01 	bl	8005c6c <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 8005e6a:	2305      	movs	r3, #5
 8005e6c:	e04f      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    
    prev = 1 << 7;                                                                  /* reset the device */
 8005e6e:	2380      	movs	r3, #128	@ 0x80
 8005e70:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);                /* write pwr mgmt 1 */
 8005e72:	f107 020a 	add.w	r2, r7, #10
 8005e76:	2301      	movs	r3, #1
 8005e78:	216b      	movs	r1, #107	@ 0x6b
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7ff fec5 	bl	8005c0a <a_mpu6500_write>
 8005e80:	4603      	mov	r3, r0
 8005e82:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8005e84:	7afb      	ldrb	r3, [r7, #11]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d008      	beq.n	8005e9c <mpu6500_init+0x198>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e8e:	4830      	ldr	r0, [pc, #192]	@ (8005f50 <mpu6500_init+0x24c>)
 8005e90:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff feea 	bl	8005c6c <a_mpu6500_deinit>
        
        return 4;                                                                   /* return error */
 8005e98:	2304      	movs	r3, #4
 8005e9a:	e038      	b.n	8005f0e <mpu6500_init+0x20a>
    }
    handle->delay_ms(10);                                                           /* delay 10 ms */
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea0:	200a      	movs	r0, #10
 8005ea2:	4798      	blx	r3
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 8005ea4:	2364      	movs	r3, #100	@ 0x64
 8005ea6:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8005ea8:	e029      	b.n	8005efe <mpu6500_init+0x1fa>
    {
        res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);             /* read pwr mgmt 1 */
 8005eaa:	f107 020a 	add.w	r2, r7, #10
 8005eae:	2301      	movs	r3, #1
 8005eb0:	216b      	movs	r1, #107	@ 0x6b
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f7ff fe78 	bl	8005ba8 <a_mpu6500_read>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8005ebc:	7afb      	ldrb	r3, [r7, #11]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d008      	beq.n	8005ed4 <mpu6500_init+0x1d0>
        {
            handle->debug_print("mpu6500: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec6:	4823      	ldr	r0, [pc, #140]	@ (8005f54 <mpu6500_init+0x250>)
 8005ec8:	4798      	blx	r3
            (void)a_mpu6500_deinit(handle);                                         /* iic or spi deinit */
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	f7ff fece 	bl	8005c6c <a_mpu6500_deinit>
            
            return 4;                                                               /* return error */
 8005ed0:	2304      	movs	r3, #4
 8005ed2:	e01c      	b.n	8005f0e <mpu6500_init+0x20a>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 8005ed4:	7abb      	ldrb	r3, [r7, #10]
 8005ed6:	b25b      	sxtb	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	db09      	blt.n	8005ef0 <mpu6500_init+0x1ec>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            handle->dmp_inited = 0;                                                 /* flag closed */
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            
            return 0;                                                               /* success return 0 */
 8005eec:	2300      	movs	r3, #0
 8005eee:	e00e      	b.n	8005f0e <mpu6500_init+0x20a>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ef4:	200a      	movs	r0, #10
 8005ef6:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	3b01      	subs	r3, #1
 8005efc:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1d2      	bne.n	8005eaa <mpu6500_init+0x1a6>
    }
    
    handle->debug_print("mpu6500: reset failed.\n");                                /* reset failed */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f08:	4813      	ldr	r0, [pc, #76]	@ (8005f58 <mpu6500_init+0x254>)
 8005f0a:	4798      	blx	r3
   
    return 4;                                                                       /* return error */
 8005f0c:	2304      	movs	r3, #4
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	08020040 	.word	0x08020040
 8005f1c:	0802005c 	.word	0x0802005c
 8005f20:	0802007c 	.word	0x0802007c
 8005f24:	08020098 	.word	0x08020098
 8005f28:	080200b8 	.word	0x080200b8
 8005f2c:	080200d4 	.word	0x080200d4
 8005f30:	080200f4 	.word	0x080200f4
 8005f34:	08020110 	.word	0x08020110
 8005f38:	08020130 	.word	0x08020130
 8005f3c:	0802014c 	.word	0x0802014c
 8005f40:	08020170 	.word	0x08020170
 8005f44:	0802018c 	.word	0x0802018c
 8005f48:	080201a8 	.word	0x080201a8
 8005f4c:	080201c8 	.word	0x080201c8
 8005f50:	080201e4 	.word	0x080201e4
 8005f54:	08020208 	.word	0x08020208
 8005f58:	0802022c 	.word	0x0802022c

08005f5c <mpu6500_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6500_deinit(mpu6500_handle_t *handle)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                         /* check handle */
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <mpu6500_deinit+0x12>
    {
        return 2;                                                               /* return error */
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e031      	b.n	8005fd2 <mpu6500_deinit+0x76>
    }
    if (handle->inited != 1)                                                    /* check handle initialization */
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d001      	beq.n	8005f7c <mpu6500_deinit+0x20>
    {
        return 3;                                                               /* return error */
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e02a      	b.n	8005fd2 <mpu6500_deinit+0x76>
    }
    
    prev = (1 << 6) | (1 << 3) | (7 << 0);                                      /* enter sleep mode */
 8005f7c:	234f      	movs	r3, #79	@ 0x4f
 8005f7e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 8005f80:	f107 020e 	add.w	r2, r7, #14
 8005f84:	2301      	movs	r3, #1
 8005f86:	216b      	movs	r1, #107	@ 0x6b
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f7ff fe3e 	bl	8005c0a <a_mpu6500_write>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 8005f92:	7bfb      	ldrb	r3, [r7, #15]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d005      	beq.n	8005fa4 <mpu6500_deinit+0x48>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");             /* write pwr mgmt 1 failed */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f9c:	480f      	ldr	r0, [pc, #60]	@ (8005fdc <mpu6500_deinit+0x80>)
 8005f9e:	4798      	blx	r3
       
        return 4;                                                               /* return error */
 8005fa0:	2304      	movs	r3, #4
 8005fa2:	e016      	b.n	8005fd2 <mpu6500_deinit+0x76>
    }
    res = a_mpu6500_deinit(handle);                                             /* deinit */
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f7ff fe61 	bl	8005c6c <a_mpu6500_deinit>
 8005faa:	4603      	mov	r3, r0
 8005fac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 8005fae:	7bfb      	ldrb	r3, [r7, #15]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d005      	beq.n	8005fc0 <mpu6500_deinit+0x64>
    {
        handle->debug_print("mpu6500: deinit failed.\n");                       /* deinit failed */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fb8:	4809      	ldr	r0, [pc, #36]	@ (8005fe0 <mpu6500_deinit+0x84>)
 8005fba:	4798      	blx	r3
       
        return 1;                                                               /* return error */
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e008      	b.n	8005fd2 <mpu6500_deinit+0x76>
    }
    handle->inited = 0;                                                         /* flag closed */
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    handle->dmp_inited = 0;                                                     /* flag closed */
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    
    return 0;                                                                   /* success return 0 */
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3710      	adds	r7, #16
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}
 8005fda:	bf00      	nop
 8005fdc:	080201e4 	.word	0x080201e4
 8005fe0:	08020244 	.word	0x08020244

08005fe4 <mpu6500_read>:
uint8_t mpu6500_read(mpu6500_handle_t *handle,
                     int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                     uint16_t *len
                    )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b088      	sub	sp, #32
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;
    
    if (handle == NULL)                                                                            /* check handle */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <mpu6500_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	f000 be88 	b.w	8006d0e <mpu6500_read+0xd2a>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006004:	2b01      	cmp	r3, #1
 8006006:	d002      	beq.n	800600e <mpu6500_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 8006008:	2303      	movs	r3, #3
 800600a:	f000 be80 	b.w	8006d0e <mpu6500_read+0xd2a>
    }
    if ((*len) == 0)                                                                               /* check length */
 800600e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d106      	bne.n	8006024 <mpu6500_read+0x40>
    {
        handle->debug_print("mpu6500: length is zero.\n");                                         /* length is zero */
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800601a:	486a      	ldr	r0, [pc, #424]	@ (80061c4 <mpu6500_read+0x1e0>)
 800601c:	4798      	blx	r3
                                                                                                  
        return 4;                                                                                  /* return error */
 800601e:	2304      	movs	r3, #4
 8006020:	f000 be75 	b.w	8006d0e <mpu6500_read+0xd2a>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800602a:	2b00      	cmp	r3, #0
 800602c:	d006      	beq.n	800603c <mpu6500_read+0x58>
    {
        handle->debug_print("mpu6500: dmp is running.\n");                                         /* dmp is running */
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006032:	4865      	ldr	r0, [pc, #404]	@ (80061c8 <mpu6500_read+0x1e4>)
 8006034:	4798      	blx	r3
        
        return 5;                                                                                  /* return error */
 8006036:	2305      	movs	r3, #5
 8006038:	f000 be69 	b.w	8006d0e <mpu6500_read+0xd2a>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);                      /* read config */
 800603c:	f107 0219 	add.w	r2, r7, #25
 8006040:	2301      	movs	r3, #1
 8006042:	216a      	movs	r1, #106	@ 0x6a
 8006044:	68f8      	ldr	r0, [r7, #12]
 8006046:	f7ff fdaf 	bl	8005ba8 <a_mpu6500_read>
 800604a:	4603      	mov	r3, r0
 800604c:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 800604e:	7f7b      	ldrb	r3, [r7, #29]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d006      	beq.n	8006062 <mpu6500_read+0x7e>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006058:	485c      	ldr	r0, [pc, #368]	@ (80061cc <mpu6500_read+0x1e8>)
 800605a:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 800605c:	2301      	movs	r3, #1
 800605e:	f000 be56 	b.w	8006d0e <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);             /* read accel config */
 8006062:	f107 0218 	add.w	r2, r7, #24
 8006066:	2301      	movs	r3, #1
 8006068:	211c      	movs	r1, #28
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f7ff fd9c 	bl	8005ba8 <a_mpu6500_read>
 8006070:	4603      	mov	r3, r0
 8006072:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8006074:	7f7b      	ldrb	r3, [r7, #29]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d006      	beq.n	8006088 <mpu6500_read+0xa4>
    {
        handle->debug_print("mpu6500: read accel config failed.\n");                               /* read accel config failed */
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800607e:	4854      	ldr	r0, [pc, #336]	@ (80061d0 <mpu6500_read+0x1ec>)
 8006080:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8006082:	2301      	movs	r3, #1
 8006084:	f000 be43 	b.w	8006d0e <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);               /* read gyro config */
 8006088:	f107 0217 	add.w	r2, r7, #23
 800608c:	2301      	movs	r3, #1
 800608e:	211b      	movs	r1, #27
 8006090:	68f8      	ldr	r0, [r7, #12]
 8006092:	f7ff fd89 	bl	8005ba8 <a_mpu6500_read>
 8006096:	4603      	mov	r3, r0
 8006098:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 800609a:	7f7b      	ldrb	r3, [r7, #29]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d006      	beq.n	80060ae <mpu6500_read+0xca>
    {
        handle->debug_print("mpu6500: read gyro config failed.\n");                                /* read gyro config failed */
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a4:	484b      	ldr	r0, [pc, #300]	@ (80061d4 <mpu6500_read+0x1f0>)
 80060a6:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 80060a8:	2301      	movs	r3, #1
 80060aa:	f000 be30 	b.w	8006d0e <mpu6500_read+0xd2a>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 80060ae:	7e3b      	ldrb	r3, [r7, #24]
 80060b0:	08db      	lsrs	r3, r3, #3
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	f003 0303 	and.w	r3, r3, #3
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	763b      	strb	r3, [r7, #24]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 80060bc:	7dfb      	ldrb	r3, [r7, #23]
 80060be:	08db      	lsrs	r3, r3, #3
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	75fb      	strb	r3, [r7, #23]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 80060ca:	7e7b      	ldrb	r3, [r7, #25]
 80060cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f000 8436 	beq.w	8006942 <mpu6500_read+0x95e>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&conf, 1);                    /* read fifo enable */
 80060d6:	f107 0216 	add.w	r2, r7, #22
 80060da:	2301      	movs	r3, #1
 80060dc:	2123      	movs	r1, #35	@ 0x23
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f7ff fd62 	bl	8005ba8 <a_mpu6500_read>
 80060e4:	4603      	mov	r3, r0
 80060e6:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80060e8:	7f7b      	ldrb	r3, [r7, #29]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d006      	beq.n	80060fc <mpu6500_read+0x118>
        {
            handle->debug_print("mpu6500: read fifo enable failed.\n");                            /* read fifo enable failed */
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060f2:	4839      	ldr	r0, [pc, #228]	@ (80061d8 <mpu6500_read+0x1f4>)
 80060f4:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 80060f6:	2301      	movs	r3, #1
 80060f8:	f000 be09 	b.w	8006d0e <mpu6500_read+0xd2a>
        }
        if (conf != 0x78)                                                                          /* check the conf */
 80060fc:	7dbb      	ldrb	r3, [r7, #22]
 80060fe:	2b78      	cmp	r3, #120	@ 0x78
 8006100:	d006      	beq.n	8006110 <mpu6500_read+0x12c>
        {
            handle->debug_print("mpu6500: fifo conf is error.\n");                                 /* fifo conf is error */
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006106:	4835      	ldr	r0, [pc, #212]	@ (80061dc <mpu6500_read+0x1f8>)
 8006108:	4798      	blx	r3
                                                                                                      
            return 6;                                                                              /* return error */
 800610a:	2306      	movs	r3, #6
 800610c:	f000 bdff 	b.w	8006d0e <mpu6500_read+0xd2a>
        }
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_COUNTH, (uint8_t *)buf, 2);                  /* read fifo count */
 8006110:	f107 0214 	add.w	r2, r7, #20
 8006114:	2302      	movs	r3, #2
 8006116:	2172      	movs	r1, #114	@ 0x72
 8006118:	68f8      	ldr	r0, [r7, #12]
 800611a:	f7ff fd45 	bl	8005ba8 <a_mpu6500_read>
 800611e:	4603      	mov	r3, r0
 8006120:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006122:	7f7b      	ldrb	r3, [r7, #29]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d006      	beq.n	8006136 <mpu6500_read+0x152>
        {
            handle->debug_print("mpu6500: read fifo count failed.\n");                             /* read fifo count failed */
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800612c:	482c      	ldr	r0, [pc, #176]	@ (80061e0 <mpu6500_read+0x1fc>)
 800612e:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8006130:	2301      	movs	r3, #1
 8006132:	f000 bdec 	b.w	8006d0e <mpu6500_read+0xd2a>
        }
        
        count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                      /* set count */
 8006136:	7d3b      	ldrb	r3, [r7, #20]
 8006138:	b21b      	sxth	r3, r3
 800613a:	021b      	lsls	r3, r3, #8
 800613c:	b21a      	sxth	r2, r3
 800613e:	7d7b      	ldrb	r3, [r7, #21]
 8006140:	b21b      	sxth	r3, r3
 8006142:	4313      	orrs	r3, r2
 8006144:	b21b      	sxth	r3, r3
 8006146:	837b      	strh	r3, [r7, #26]
        count = (count < 1024) ? count : 1024;                                                     /* just the counter */
 8006148:	8b7b      	ldrh	r3, [r7, #26]
 800614a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800614e:	bf28      	it	cs
 8006150:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8006154:	837b      	strh	r3, [r7, #26]
        count = (count < ((*len) * 12)) ? count : ((*len) * 12);                                   /* just outer buffer size */
 8006156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	4613      	mov	r3, r2
 800615e:	005b      	lsls	r3, r3, #1
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	461a      	mov	r2, r3
 8006166:	8b7b      	ldrh	r3, [r7, #26]
 8006168:	4293      	cmp	r3, r2
 800616a:	bfa8      	it	ge
 800616c:	4613      	movge	r3, r2
 800616e:	837b      	strh	r3, [r7, #26]
        count = (count / 12) * 12;                                                                 /* 12 times */
 8006170:	8b7b      	ldrh	r3, [r7, #26]
 8006172:	4a1c      	ldr	r2, [pc, #112]	@ (80061e4 <mpu6500_read+0x200>)
 8006174:	fba2 2303 	umull	r2, r3, r2, r3
 8006178:	08db      	lsrs	r3, r3, #3
 800617a:	b29b      	uxth	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	0052      	lsls	r2, r2, #1
 8006180:	4413      	add	r3, r2
 8006182:	009b      	lsls	r3, r3, #2
 8006184:	837b      	strh	r3, [r7, #26]
        *len = count / 12;                                                                         /* set the output length */
 8006186:	8b7b      	ldrh	r3, [r7, #26]
 8006188:	4a16      	ldr	r2, [pc, #88]	@ (80061e4 <mpu6500_read+0x200>)
 800618a:	fba2 2303 	umull	r2, r3, r2, r3
 800618e:	08db      	lsrs	r3, r3, #3
 8006190:	b29a      	uxth	r2, r3
 8006192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006194:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_R_W, handle->buf, count);                         /* read data */
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800619c:	8b7b      	ldrh	r3, [r7, #26]
 800619e:	2174      	movs	r1, #116	@ 0x74
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7ff fd01 	bl	8005ba8 <a_mpu6500_read>
 80061a6:	4603      	mov	r3, r0
 80061a8:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80061aa:	7f7b      	ldrb	r3, [r7, #29]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d006      	beq.n	80061be <mpu6500_read+0x1da>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b4:	480c      	ldr	r0, [pc, #48]	@ (80061e8 <mpu6500_read+0x204>)
 80061b6:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 80061b8:	2301      	movs	r3, #1
 80061ba:	f000 bda8 	b.w	8006d0e <mpu6500_read+0xd2a>
        }
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 80061be:	2300      	movs	r3, #0
 80061c0:	83fb      	strh	r3, [r7, #30]
 80061c2:	e3b6      	b.n	8006932 <mpu6500_read+0x94e>
 80061c4:	08020260 	.word	0x08020260
 80061c8:	0801fd30 	.word	0x0801fd30
 80061cc:	0801fff8 	.word	0x0801fff8
 80061d0:	0801ffb0 	.word	0x0801ffb0
 80061d4:	0801ffd4 	.word	0x0801ffd4
 80061d8:	0802027c 	.word	0x0802027c
 80061dc:	080202a0 	.word	0x080202a0
 80061e0:	0801ff34 	.word	0x0801ff34
 80061e4:	aaaaaaab 	.word	0xaaaaaaab
 80061e8:	0801ff58 	.word	0x0801ff58
 80061ec:	46800000 	.word	0x46800000
 80061f0:	46000000 	.word	0x46000000
        {
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 80061f4:	8bfa      	ldrh	r2, [r7, #30]
 80061f6:	4613      	mov	r3, r2
 80061f8:	005b      	lsls	r3, r3, #1
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	461a      	mov	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	4413      	add	r3, r2
 8006204:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006208:	b21b      	sxth	r3, r3
 800620a:	021b      	lsls	r3, r3, #8
 800620c:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 1];                                  /* set raw accel x */
 800620e:	8bfa      	ldrh	r2, [r7, #30]
 8006210:	4613      	mov	r3, r2
 8006212:	005b      	lsls	r3, r3, #1
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	3301      	adds	r3, #1
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	4413      	add	r3, r2
 800621e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006222:	b219      	sxth	r1, r3
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8006224:	8bfa      	ldrh	r2, [r7, #30]
 8006226:	4613      	mov	r3, r2
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	4413      	add	r3, r2
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	461a      	mov	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	4413      	add	r3, r2
 8006234:	ea40 0201 	orr.w	r2, r0, r1
 8006238:	b212      	sxth	r2, r2
 800623a:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 800623c:	8bfa      	ldrh	r2, [r7, #30]
 800623e:	4613      	mov	r3, r2
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	4413      	add	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	3302      	adds	r3, #2
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4413      	add	r3, r2
 800624c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006250:	b21b      	sxth	r3, r3
 8006252:	021b      	lsls	r3, r3, #8
 8006254:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 3];                                  /* set raw accel y */
 8006256:	8bfa      	ldrh	r2, [r7, #30]
 8006258:	4613      	mov	r3, r2
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	4413      	add	r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	3303      	adds	r3, #3
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	4413      	add	r3, r2
 8006266:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800626a:	b219      	sxth	r1, r3
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 800626c:	8bfa      	ldrh	r2, [r7, #30]
 800626e:	4613      	mov	r3, r2
 8006270:	005b      	lsls	r3, r3, #1
 8006272:	4413      	add	r3, r2
 8006274:	005b      	lsls	r3, r3, #1
 8006276:	461a      	mov	r2, r3
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	4413      	add	r3, r2
 800627c:	ea40 0201 	orr.w	r2, r0, r1
 8006280:	b212      	sxth	r2, r2
 8006282:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8006284:	8bfa      	ldrh	r2, [r7, #30]
 8006286:	4613      	mov	r3, r2
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	3304      	adds	r3, #4
 8006290:	68fa      	ldr	r2, [r7, #12]
 8006292:	4413      	add	r3, r2
 8006294:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006298:	b21b      	sxth	r3, r3
 800629a:	021b      	lsls	r3, r3, #8
 800629c:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 5];                                  /* set raw accel z */
 800629e:	8bfa      	ldrh	r2, [r7, #30]
 80062a0:	4613      	mov	r3, r2
 80062a2:	005b      	lsls	r3, r3, #1
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	3305      	adds	r3, #5
 80062aa:	68fa      	ldr	r2, [r7, #12]
 80062ac:	4413      	add	r3, r2
 80062ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062b2:	b219      	sxth	r1, r3
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 80062b4:	8bfa      	ldrh	r2, [r7, #30]
 80062b6:	4613      	mov	r3, r2
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	4413      	add	r3, r2
 80062bc:	005b      	lsls	r3, r3, #1
 80062be:	461a      	mov	r2, r3
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4413      	add	r3, r2
 80062c4:	ea40 0201 	orr.w	r2, r0, r1
 80062c8:	b212      	sxth	r2, r2
 80062ca:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 80062cc:	8bfa      	ldrh	r2, [r7, #30]
 80062ce:	4613      	mov	r3, r2
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	3306      	adds	r3, #6
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	4413      	add	r3, r2
 80062dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062e0:	b21b      	sxth	r3, r3
 80062e2:	021b      	lsls	r3, r3, #8
 80062e4:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 7];                                   /* set raw gyro x */
 80062e6:	8bfa      	ldrh	r2, [r7, #30]
 80062e8:	4613      	mov	r3, r2
 80062ea:	005b      	lsls	r3, r3, #1
 80062ec:	4413      	add	r3, r2
 80062ee:	009b      	lsls	r3, r3, #2
 80062f0:	3307      	adds	r3, #7
 80062f2:	68fa      	ldr	r2, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80062fa:	b219      	sxth	r1, r3
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 80062fc:	8bfa      	ldrh	r2, [r7, #30]
 80062fe:	4613      	mov	r3, r2
 8006300:	005b      	lsls	r3, r3, #1
 8006302:	4413      	add	r3, r2
 8006304:	005b      	lsls	r3, r3, #1
 8006306:	461a      	mov	r2, r3
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	4413      	add	r3, r2
 800630c:	ea40 0201 	orr.w	r2, r0, r1
 8006310:	b212      	sxth	r2, r2
 8006312:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8006314:	8bfa      	ldrh	r2, [r7, #30]
 8006316:	4613      	mov	r3, r2
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4413      	add	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	3308      	adds	r3, #8
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006328:	b21b      	sxth	r3, r3
 800632a:	021b      	lsls	r3, r3, #8
 800632c:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 9];                                   /* set raw gyro y */
 800632e:	8bfa      	ldrh	r2, [r7, #30]
 8006330:	4613      	mov	r3, r2
 8006332:	005b      	lsls	r3, r3, #1
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	3309      	adds	r3, #9
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006342:	b219      	sxth	r1, r3
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8006344:	8bfa      	ldrh	r2, [r7, #30]
 8006346:	4613      	mov	r3, r2
 8006348:	005b      	lsls	r3, r3, #1
 800634a:	4413      	add	r3, r2
 800634c:	005b      	lsls	r3, r3, #1
 800634e:	461a      	mov	r2, r3
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	4413      	add	r3, r2
 8006354:	ea40 0201 	orr.w	r2, r0, r1
 8006358:	b212      	sxth	r2, r2
 800635a:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 800635c:	8bfa      	ldrh	r2, [r7, #30]
 800635e:	4613      	mov	r3, r2
 8006360:	005b      	lsls	r3, r3, #1
 8006362:	4413      	add	r3, r2
 8006364:	009b      	lsls	r3, r3, #2
 8006366:	330a      	adds	r3, #10
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	4413      	add	r3, r2
 800636c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006370:	b21b      	sxth	r3, r3
 8006372:	021b      	lsls	r3, r3, #8
 8006374:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 11];                                  /* set raw gyro z */
 8006376:	8bfa      	ldrh	r2, [r7, #30]
 8006378:	4613      	mov	r3, r2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	4413      	add	r3, r2
 800637e:	009b      	lsls	r3, r3, #2
 8006380:	330b      	adds	r3, #11
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800638a:	b219      	sxth	r1, r3
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 800638c:	8bfa      	ldrh	r2, [r7, #30]
 800638e:	4613      	mov	r3, r2
 8006390:	005b      	lsls	r3, r3, #1
 8006392:	4413      	add	r3, r2
 8006394:	005b      	lsls	r3, r3, #1
 8006396:	461a      	mov	r2, r3
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	4413      	add	r3, r2
 800639c:	ea40 0201 	orr.w	r2, r0, r1
 80063a0:	b212      	sxth	r2, r2
 80063a2:	809a      	strh	r2, [r3, #4]
            
            if (accel_conf == 0)                                                                   /* ±2g */
 80063a4:	7e3b      	ldrb	r3, [r7, #24]
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d154      	bne.n	8006454 <mpu6500_read+0x470>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                               /* set accel x */
 80063aa:	8bfa      	ldrh	r2, [r7, #30]
 80063ac:	4613      	mov	r3, r2
 80063ae:	005b      	lsls	r3, r3, #1
 80063b0:	4413      	add	r3, r2
 80063b2:	005b      	lsls	r3, r3, #1
 80063b4:	461a      	mov	r2, r3
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	4413      	add	r3, r2
 80063ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063be:	ee07 3a90 	vmov	s15, r3
 80063c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063c6:	8bfa      	ldrh	r2, [r7, #30]
 80063c8:	4613      	mov	r3, r2
 80063ca:	005b      	lsls	r3, r3, #1
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4413      	add	r3, r2
 80063d6:	ed5f 6a7b 	vldr	s13, [pc, #-492]	@ 80061ec <mpu6500_read+0x208>
 80063da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063de:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                               /* set accel y */
 80063e2:	8bfa      	ldrh	r2, [r7, #30]
 80063e4:	4613      	mov	r3, r2
 80063e6:	005b      	lsls	r3, r3, #1
 80063e8:	4413      	add	r3, r2
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	461a      	mov	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4413      	add	r3, r2
 80063f2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80063f6:	ee07 3a90 	vmov	s15, r3
 80063fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063fe:	8bfa      	ldrh	r2, [r7, #30]
 8006400:	4613      	mov	r3, r2
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	461a      	mov	r2, r3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	ed5f 6a89 	vldr	s13, [pc, #-548]	@ 80061ec <mpu6500_read+0x208>
 8006412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006416:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                               /* set accel z */
 800641a:	8bfa      	ldrh	r2, [r7, #30]
 800641c:	4613      	mov	r3, r2
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	4413      	add	r3, r2
 8006422:	005b      	lsls	r3, r3, #1
 8006424:	461a      	mov	r2, r3
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	4413      	add	r3, r2
 800642a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006436:	8bfa      	ldrh	r2, [r7, #30]
 8006438:	4613      	mov	r3, r2
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	461a      	mov	r2, r3
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4413      	add	r3, r2
 8006446:	ed5f 6a97 	vldr	s13, [pc, #-604]	@ 80061ec <mpu6500_read+0x208>
 800644a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800644e:	edc3 7a02 	vstr	s15, [r3, #8]
 8006452:	e103      	b.n	800665c <mpu6500_read+0x678>
            }
            else if (accel_conf == 1)                                                              /* ±4g */
 8006454:	7e3b      	ldrb	r3, [r7, #24]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d154      	bne.n	8006504 <mpu6500_read+0x520>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                                /* set accel x */
 800645a:	8bfa      	ldrh	r2, [r7, #30]
 800645c:	4613      	mov	r3, r2
 800645e:	005b      	lsls	r3, r3, #1
 8006460:	4413      	add	r3, r2
 8006462:	005b      	lsls	r3, r3, #1
 8006464:	461a      	mov	r2, r3
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	4413      	add	r3, r2
 800646a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800646e:	ee07 3a90 	vmov	s15, r3
 8006472:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006476:	8bfa      	ldrh	r2, [r7, #30]
 8006478:	4613      	mov	r3, r2
 800647a:	005b      	lsls	r3, r3, #1
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	461a      	mov	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4413      	add	r3, r2
 8006486:	ed5f 6aa6 	vldr	s13, [pc, #-664]	@ 80061f0 <mpu6500_read+0x20c>
 800648a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800648e:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                                /* set accel y */
 8006492:	8bfa      	ldrh	r2, [r7, #30]
 8006494:	4613      	mov	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	4413      	add	r3, r2
 800649a:	005b      	lsls	r3, r3, #1
 800649c:	461a      	mov	r2, r3
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	4413      	add	r3, r2
 80064a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064ae:	8bfa      	ldrh	r2, [r7, #30]
 80064b0:	4613      	mov	r3, r2
 80064b2:	005b      	lsls	r3, r3, #1
 80064b4:	4413      	add	r3, r2
 80064b6:	009b      	lsls	r3, r3, #2
 80064b8:	461a      	mov	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4413      	add	r3, r2
 80064be:	ed5f 6ab4 	vldr	s13, [pc, #-720]	@ 80061f0 <mpu6500_read+0x20c>
 80064c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064c6:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                                /* set accel z */
 80064ca:	8bfa      	ldrh	r2, [r7, #30]
 80064cc:	4613      	mov	r3, r2
 80064ce:	005b      	lsls	r3, r3, #1
 80064d0:	4413      	add	r3, r2
 80064d2:	005b      	lsls	r3, r3, #1
 80064d4:	461a      	mov	r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	4413      	add	r3, r2
 80064da:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80064de:	ee07 3a90 	vmov	s15, r3
 80064e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064e6:	8bfa      	ldrh	r2, [r7, #30]
 80064e8:	4613      	mov	r3, r2
 80064ea:	005b      	lsls	r3, r3, #1
 80064ec:	4413      	add	r3, r2
 80064ee:	009b      	lsls	r3, r3, #2
 80064f0:	461a      	mov	r2, r3
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4413      	add	r3, r2
 80064f6:	ed5f 6ac2 	vldr	s13, [pc, #-776]	@ 80061f0 <mpu6500_read+0x20c>
 80064fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064fe:	edc3 7a02 	vstr	s15, [r3, #8]
 8006502:	e0ab      	b.n	800665c <mpu6500_read+0x678>
            }
            else if (accel_conf == 2)                                                              /* ±8g */
 8006504:	7e3b      	ldrb	r3, [r7, #24]
 8006506:	2b02      	cmp	r3, #2
 8006508:	d154      	bne.n	80065b4 <mpu6500_read+0x5d0>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                                /* set accel x */
 800650a:	8bfa      	ldrh	r2, [r7, #30]
 800650c:	4613      	mov	r3, r2
 800650e:	005b      	lsls	r3, r3, #1
 8006510:	4413      	add	r3, r2
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	461a      	mov	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	4413      	add	r3, r2
 800651a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800651e:	ee07 3a90 	vmov	s15, r3
 8006522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006526:	8bfa      	ldrh	r2, [r7, #30]
 8006528:	4613      	mov	r3, r2
 800652a:	005b      	lsls	r3, r3, #1
 800652c:	4413      	add	r3, r2
 800652e:	009b      	lsls	r3, r3, #2
 8006530:	461a      	mov	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4413      	add	r3, r2
 8006536:	eddf 6acd 	vldr	s13, [pc, #820]	@ 800686c <mpu6500_read+0x888>
 800653a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800653e:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                                /* set accel y */
 8006542:	8bfa      	ldrh	r2, [r7, #30]
 8006544:	4613      	mov	r3, r2
 8006546:	005b      	lsls	r3, r3, #1
 8006548:	4413      	add	r3, r2
 800654a:	005b      	lsls	r3, r3, #1
 800654c:	461a      	mov	r2, r3
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	4413      	add	r3, r2
 8006552:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006556:	ee07 3a90 	vmov	s15, r3
 800655a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800655e:	8bfa      	ldrh	r2, [r7, #30]
 8006560:	4613      	mov	r3, r2
 8006562:	005b      	lsls	r3, r3, #1
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	461a      	mov	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4413      	add	r3, r2
 800656e:	eddf 6abf 	vldr	s13, [pc, #764]	@ 800686c <mpu6500_read+0x888>
 8006572:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006576:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                                /* set accel z */
 800657a:	8bfa      	ldrh	r2, [r7, #30]
 800657c:	4613      	mov	r3, r2
 800657e:	005b      	lsls	r3, r3, #1
 8006580:	4413      	add	r3, r2
 8006582:	005b      	lsls	r3, r3, #1
 8006584:	461a      	mov	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	4413      	add	r3, r2
 800658a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800658e:	ee07 3a90 	vmov	s15, r3
 8006592:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006596:	8bfa      	ldrh	r2, [r7, #30]
 8006598:	4613      	mov	r3, r2
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	4413      	add	r3, r2
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	461a      	mov	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4413      	add	r3, r2
 80065a6:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 800686c <mpu6500_read+0x888>
 80065aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065ae:	edc3 7a02 	vstr	s15, [r3, #8]
 80065b2:	e053      	b.n	800665c <mpu6500_read+0x678>
            }
            else                                                                                   /* ±16g */
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                                /* set accel x */
 80065b4:	8bfa      	ldrh	r2, [r7, #30]
 80065b6:	4613      	mov	r3, r2
 80065b8:	005b      	lsls	r3, r3, #1
 80065ba:	4413      	add	r3, r2
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	461a      	mov	r2, r3
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	4413      	add	r3, r2
 80065c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80065c8:	ee07 3a90 	vmov	s15, r3
 80065cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80065d0:	8bfa      	ldrh	r2, [r7, #30]
 80065d2:	4613      	mov	r3, r2
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	4413      	add	r3, r2
 80065d8:	009b      	lsls	r3, r3, #2
 80065da:	461a      	mov	r2, r3
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4413      	add	r3, r2
 80065e0:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8006870 <mpu6500_read+0x88c>
 80065e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80065e8:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                                /* set accel y */
 80065ec:	8bfa      	ldrh	r2, [r7, #30]
 80065ee:	4613      	mov	r3, r2
 80065f0:	005b      	lsls	r3, r3, #1
 80065f2:	4413      	add	r3, r2
 80065f4:	005b      	lsls	r3, r3, #1
 80065f6:	461a      	mov	r2, r3
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	4413      	add	r3, r2
 80065fc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006600:	ee07 3a90 	vmov	s15, r3
 8006604:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006608:	8bfa      	ldrh	r2, [r7, #30]
 800660a:	4613      	mov	r3, r2
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	4413      	add	r3, r2
 8006610:	009b      	lsls	r3, r3, #2
 8006612:	461a      	mov	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4413      	add	r3, r2
 8006618:	eddf 6a95 	vldr	s13, [pc, #596]	@ 8006870 <mpu6500_read+0x88c>
 800661c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006620:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                                /* set accel z */
 8006624:	8bfa      	ldrh	r2, [r7, #30]
 8006626:	4613      	mov	r3, r2
 8006628:	005b      	lsls	r3, r3, #1
 800662a:	4413      	add	r3, r2
 800662c:	005b      	lsls	r3, r3, #1
 800662e:	461a      	mov	r2, r3
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	4413      	add	r3, r2
 8006634:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006638:	ee07 3a90 	vmov	s15, r3
 800663c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006640:	8bfa      	ldrh	r2, [r7, #30]
 8006642:	4613      	mov	r3, r2
 8006644:	005b      	lsls	r3, r3, #1
 8006646:	4413      	add	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	461a      	mov	r2, r3
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	4413      	add	r3, r2
 8006650:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8006870 <mpu6500_read+0x88c>
 8006654:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006658:	edc3 7a02 	vstr	s15, [r3, #8]
            }
            
            if (gyro_conf == 0)                                                                    /* ±250dps */
 800665c:	7dfb      	ldrb	r3, [r7, #23]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d154      	bne.n	800670c <mpu6500_read+0x728>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                                 /* set gyro x */
 8006662:	8bfa      	ldrh	r2, [r7, #30]
 8006664:	4613      	mov	r3, r2
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	4413      	add	r3, r2
 800666a:	005b      	lsls	r3, r3, #1
 800666c:	461a      	mov	r2, r3
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	4413      	add	r3, r2
 8006672:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006676:	ee07 3a90 	vmov	s15, r3
 800667a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800667e:	8bfa      	ldrh	r2, [r7, #30]
 8006680:	4613      	mov	r3, r2
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	461a      	mov	r2, r3
 800668a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668c:	4413      	add	r3, r2
 800668e:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8006874 <mpu6500_read+0x890>
 8006692:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006696:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                                 /* set gyro y */
 800669a:	8bfa      	ldrh	r2, [r7, #30]
 800669c:	4613      	mov	r3, r2
 800669e:	005b      	lsls	r3, r3, #1
 80066a0:	4413      	add	r3, r2
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	461a      	mov	r2, r3
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	4413      	add	r3, r2
 80066aa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80066ae:	ee07 3a90 	vmov	s15, r3
 80066b2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066b6:	8bfa      	ldrh	r2, [r7, #30]
 80066b8:	4613      	mov	r3, r2
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	4413      	add	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	461a      	mov	r2, r3
 80066c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c4:	4413      	add	r3, r2
 80066c6:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8006874 <mpu6500_read+0x890>
 80066ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80066ce:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                                 /* set gyro z */
 80066d2:	8bfa      	ldrh	r2, [r7, #30]
 80066d4:	4613      	mov	r3, r2
 80066d6:	005b      	lsls	r3, r3, #1
 80066d8:	4413      	add	r3, r2
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	461a      	mov	r2, r3
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	4413      	add	r3, r2
 80066e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80066e6:	ee07 3a90 	vmov	s15, r3
 80066ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80066ee:	8bfa      	ldrh	r2, [r7, #30]
 80066f0:	4613      	mov	r3, r2
 80066f2:	005b      	lsls	r3, r3, #1
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	461a      	mov	r2, r3
 80066fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fc:	4413      	add	r3, r2
 80066fe:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8006874 <mpu6500_read+0x890>
 8006702:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006706:	edc3 7a02 	vstr	s15, [r3, #8]
 800670a:	e10f      	b.n	800692c <mpu6500_read+0x948>
            }
            else if (gyro_conf == 1)                                                               /* ±500dps */
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d154      	bne.n	80067bc <mpu6500_read+0x7d8>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                                  /* set gyro x */
 8006712:	8bfa      	ldrh	r2, [r7, #30]
 8006714:	4613      	mov	r3, r2
 8006716:	005b      	lsls	r3, r3, #1
 8006718:	4413      	add	r3, r2
 800671a:	005b      	lsls	r3, r3, #1
 800671c:	461a      	mov	r2, r3
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	4413      	add	r3, r2
 8006722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006726:	ee07 3a90 	vmov	s15, r3
 800672a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800672e:	8bfa      	ldrh	r2, [r7, #30]
 8006730:	4613      	mov	r3, r2
 8006732:	005b      	lsls	r3, r3, #1
 8006734:	4413      	add	r3, r2
 8006736:	009b      	lsls	r3, r3, #2
 8006738:	461a      	mov	r2, r3
 800673a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673c:	4413      	add	r3, r2
 800673e:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006878 <mpu6500_read+0x894>
 8006742:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006746:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                                  /* set gyro y */
 800674a:	8bfa      	ldrh	r2, [r7, #30]
 800674c:	4613      	mov	r3, r2
 800674e:	005b      	lsls	r3, r3, #1
 8006750:	4413      	add	r3, r2
 8006752:	005b      	lsls	r3, r3, #1
 8006754:	461a      	mov	r2, r3
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	4413      	add	r3, r2
 800675a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800675e:	ee07 3a90 	vmov	s15, r3
 8006762:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006766:	8bfa      	ldrh	r2, [r7, #30]
 8006768:	4613      	mov	r3, r2
 800676a:	005b      	lsls	r3, r3, #1
 800676c:	4413      	add	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	461a      	mov	r2, r3
 8006772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006774:	4413      	add	r3, r2
 8006776:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8006878 <mpu6500_read+0x894>
 800677a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800677e:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                                  /* set gyro z */
 8006782:	8bfa      	ldrh	r2, [r7, #30]
 8006784:	4613      	mov	r3, r2
 8006786:	005b      	lsls	r3, r3, #1
 8006788:	4413      	add	r3, r2
 800678a:	005b      	lsls	r3, r3, #1
 800678c:	461a      	mov	r2, r3
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	4413      	add	r3, r2
 8006792:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006796:	ee07 3a90 	vmov	s15, r3
 800679a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800679e:	8bfa      	ldrh	r2, [r7, #30]
 80067a0:	4613      	mov	r3, r2
 80067a2:	005b      	lsls	r3, r3, #1
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	461a      	mov	r2, r3
 80067aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ac:	4413      	add	r3, r2
 80067ae:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006878 <mpu6500_read+0x894>
 80067b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067b6:	edc3 7a02 	vstr	s15, [r3, #8]
 80067ba:	e0b7      	b.n	800692c <mpu6500_read+0x948>
            }
            else if (gyro_conf == 2)                                                               /* ±1000dps */
 80067bc:	7dfb      	ldrb	r3, [r7, #23]
 80067be:	2b02      	cmp	r3, #2
 80067c0:	d160      	bne.n	8006884 <mpu6500_read+0x8a0>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                                  /* set gyro x */
 80067c2:	8bfa      	ldrh	r2, [r7, #30]
 80067c4:	4613      	mov	r3, r2
 80067c6:	005b      	lsls	r3, r3, #1
 80067c8:	4413      	add	r3, r2
 80067ca:	005b      	lsls	r3, r3, #1
 80067cc:	461a      	mov	r2, r3
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	4413      	add	r3, r2
 80067d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80067d6:	ee07 3a90 	vmov	s15, r3
 80067da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067de:	8bfa      	ldrh	r2, [r7, #30]
 80067e0:	4613      	mov	r3, r2
 80067e2:	005b      	lsls	r3, r3, #1
 80067e4:	4413      	add	r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	461a      	mov	r2, r3
 80067ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ec:	4413      	add	r3, r2
 80067ee:	eddf 6a23 	vldr	s13, [pc, #140]	@ 800687c <mpu6500_read+0x898>
 80067f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80067f6:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                                  /* set gyro y */
 80067fa:	8bfa      	ldrh	r2, [r7, #30]
 80067fc:	4613      	mov	r3, r2
 80067fe:	005b      	lsls	r3, r3, #1
 8006800:	4413      	add	r3, r2
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	461a      	mov	r2, r3
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	4413      	add	r3, r2
 800680a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800680e:	ee07 3a90 	vmov	s15, r3
 8006812:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006816:	8bfa      	ldrh	r2, [r7, #30]
 8006818:	4613      	mov	r3, r2
 800681a:	005b      	lsls	r3, r3, #1
 800681c:	4413      	add	r3, r2
 800681e:	009b      	lsls	r3, r3, #2
 8006820:	461a      	mov	r2, r3
 8006822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006824:	4413      	add	r3, r2
 8006826:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800687c <mpu6500_read+0x898>
 800682a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800682e:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                                  /* set gyro z */
 8006832:	8bfa      	ldrh	r2, [r7, #30]
 8006834:	4613      	mov	r3, r2
 8006836:	005b      	lsls	r3, r3, #1
 8006838:	4413      	add	r3, r2
 800683a:	005b      	lsls	r3, r3, #1
 800683c:	461a      	mov	r2, r3
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	4413      	add	r3, r2
 8006842:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006846:	ee07 3a90 	vmov	s15, r3
 800684a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800684e:	8bfa      	ldrh	r2, [r7, #30]
 8006850:	4613      	mov	r3, r2
 8006852:	005b      	lsls	r3, r3, #1
 8006854:	4413      	add	r3, r2
 8006856:	009b      	lsls	r3, r3, #2
 8006858:	461a      	mov	r2, r3
 800685a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685c:	4413      	add	r3, r2
 800685e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 800687c <mpu6500_read+0x898>
 8006862:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006866:	edc3 7a02 	vstr	s15, [r3, #8]
 800686a:	e05f      	b.n	800692c <mpu6500_read+0x948>
 800686c:	45800000 	.word	0x45800000
 8006870:	45000000 	.word	0x45000000
 8006874:	43030000 	.word	0x43030000
 8006878:	42830000 	.word	0x42830000
 800687c:	42033333 	.word	0x42033333
 8006880:	41833333 	.word	0x41833333
            }
            else                                                                                   /* ±2000dps */
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                                  /* set gyro x */
 8006884:	8bfa      	ldrh	r2, [r7, #30]
 8006886:	4613      	mov	r3, r2
 8006888:	005b      	lsls	r3, r3, #1
 800688a:	4413      	add	r3, r2
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	461a      	mov	r2, r3
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	4413      	add	r3, r2
 8006894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006898:	ee07 3a90 	vmov	s15, r3
 800689c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068a0:	8bfa      	ldrh	r2, [r7, #30]
 80068a2:	4613      	mov	r3, r2
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	4413      	add	r3, r2
 80068a8:	009b      	lsls	r3, r3, #2
 80068aa:	461a      	mov	r2, r3
 80068ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ae:	4413      	add	r3, r2
 80068b0:	ed5f 6a0d 	vldr	s13, [pc, #-52]	@ 8006880 <mpu6500_read+0x89c>
 80068b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80068b8:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                                  /* set gyro y */
 80068bc:	8bfa      	ldrh	r2, [r7, #30]
 80068be:	4613      	mov	r3, r2
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	4413      	add	r3, r2
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	461a      	mov	r2, r3
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	4413      	add	r3, r2
 80068cc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80068d0:	ee07 3a90 	vmov	s15, r3
 80068d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80068d8:	8bfa      	ldrh	r2, [r7, #30]
 80068da:	4613      	mov	r3, r2
 80068dc:	005b      	lsls	r3, r3, #1
 80068de:	4413      	add	r3, r2
 80068e0:	009b      	lsls	r3, r3, #2
 80068e2:	461a      	mov	r2, r3
 80068e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e6:	4413      	add	r3, r2
 80068e8:	ed5f 6a1b 	vldr	s13, [pc, #-108]	@ 8006880 <mpu6500_read+0x89c>
 80068ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80068f0:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                                  /* set gyro z */
 80068f4:	8bfa      	ldrh	r2, [r7, #30]
 80068f6:	4613      	mov	r3, r2
 80068f8:	005b      	lsls	r3, r3, #1
 80068fa:	4413      	add	r3, r2
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	461a      	mov	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	4413      	add	r3, r2
 8006904:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006908:	ee07 3a90 	vmov	s15, r3
 800690c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006910:	8bfa      	ldrh	r2, [r7, #30]
 8006912:	4613      	mov	r3, r2
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	4413      	add	r3, r2
 8006918:	009b      	lsls	r3, r3, #2
 800691a:	461a      	mov	r2, r3
 800691c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800691e:	4413      	add	r3, r2
 8006920:	ed5f 6a29 	vldr	s13, [pc, #-164]	@ 8006880 <mpu6500_read+0x89c>
 8006924:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006928:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 800692c:	8bfb      	ldrh	r3, [r7, #30]
 800692e:	3301      	adds	r3, #1
 8006930:	83fb      	strh	r3, [r7, #30]
 8006932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006934:	881b      	ldrh	r3, [r3, #0]
 8006936:	8bfa      	ldrh	r2, [r7, #30]
 8006938:	429a      	cmp	r2, r3
 800693a:	f4ff ac5b 	bcc.w	80061f4 <mpu6500_read+0x210>
            }
        }
        
        return 0;                                                                                  /* success return 0 */
 800693e:	2300      	movs	r3, #0
 8006940:	e1e5      	b.n	8006d0e <mpu6500_read+0xd2a>
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 8006942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006944:	2201      	movs	r2, #1
 8006946:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_XOUT_H, handle->buf, 14);                   /* read data */
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800694e:	230e      	movs	r3, #14
 8006950:	213b      	movs	r1, #59	@ 0x3b
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f7ff f928 	bl	8005ba8 <a_mpu6500_read>
 8006958:	4603      	mov	r3, r0
 800695a:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 800695c:	7f7b      	ldrb	r3, [r7, #29]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d005      	beq.n	800696e <mpu6500_read+0x98a>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006966:	48b4      	ldr	r0, [pc, #720]	@ (8006c38 <mpu6500_read+0xc54>)
 8006968:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 800696a:	2301      	movs	r3, #1
 800696c:	e1cf      	b.n	8006d0e <mpu6500_read+0xd2a>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006974:	b21b      	sxth	r3, r3
 8006976:	021b      	lsls	r3, r3, #8
 8006978:	b21a      	sxth	r2, r3
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006980:	b21b      	sxth	r3, r3
 8006982:	4313      	orrs	r3, r2
 8006984:	b21a      	sxth	r2, r3
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006990:	b21b      	sxth	r3, r3
 8006992:	021b      	lsls	r3, r3, #8
 8006994:	b21a      	sxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800699c:	b21b      	sxth	r3, r3
 800699e:	4313      	orrs	r3, r2
 80069a0:	b21a      	sxth	r2, r3
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80069ac:	b21b      	sxth	r3, r3
 80069ae:	021b      	lsls	r3, r3, #8
 80069b0:	b21a      	sxth	r2, r3
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80069b8:	b21b      	sxth	r3, r3
 80069ba:	4313      	orrs	r3, r2
 80069bc:	b21a      	sxth	r2, r3
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80069c8:	b21b      	sxth	r3, r3
 80069ca:	021b      	lsls	r3, r3, #8
 80069cc:	b21a      	sxth	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80069d4:	b21b      	sxth	r3, r3
 80069d6:	4313      	orrs	r3, r2
 80069d8:	b21a      	sxth	r2, r3
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80069e4:	b21b      	sxth	r3, r3
 80069e6:	021b      	lsls	r3, r3, #8
 80069e8:	b21a      	sxth	r2, r3
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80069f0:	b21b      	sxth	r3, r3
 80069f2:	4313      	orrs	r3, r2
 80069f4:	b21a      	sxth	r2, r3
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8006a00:	b21b      	sxth	r3, r3
 8006a02:	021b      	lsls	r3, r3, #8
 8006a04:	b21a      	sxth	r2, r3
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006a0c:	b21b      	sxth	r3, r3
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	b21a      	sxth	r2, r3
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	809a      	strh	r2, [r3, #4]
        
        if (accel_conf == 0)                                                                       /* ±2g */
 8006a16:	7e3b      	ldrb	r3, [r7, #24]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d12a      	bne.n	8006a72 <mpu6500_read+0xa8e>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a22:	ee07 3a90 	vmov	s15, r3
 8006a26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a2a:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8006c3c <mpu6500_read+0xc58>
 8006a2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a3e:	ee07 3a90 	vmov	s15, r3
 8006a42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a46:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8006c3c <mpu6500_read+0xc58>
 8006a4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006a5a:	ee07 3a90 	vmov	s15, r3
 8006a5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a62:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8006c3c <mpu6500_read+0xc58>
 8006a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	edc3 7a02 	vstr	s15, [r3, #8]
 8006a70:	e085      	b.n	8006b7e <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 8006a72:	7e3b      	ldrb	r3, [r7, #24]
 8006a74:	2b01      	cmp	r3, #1
 8006a76:	d12a      	bne.n	8006ace <mpu6500_read+0xaea>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a7e:	ee07 3a90 	vmov	s15, r3
 8006a82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006a86:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8006c40 <mpu6500_read+0xc5c>
 8006a8a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006aa2:	eddf 6a67 	vldr	s13, [pc, #412]	@ 8006c40 <mpu6500_read+0xc5c>
 8006aa6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006abe:	eddf 6a60 	vldr	s13, [pc, #384]	@ 8006c40 <mpu6500_read+0xc5c>
 8006ac2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	edc3 7a02 	vstr	s15, [r3, #8]
 8006acc:	e057      	b.n	8006b7e <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 8006ace:	7e3b      	ldrb	r3, [r7, #24]
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d12a      	bne.n	8006b2a <mpu6500_read+0xb46>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ada:	ee07 3a90 	vmov	s15, r3
 8006ade:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ae2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006c44 <mpu6500_read+0xc60>
 8006ae6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006afe:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8006c44 <mpu6500_read+0xc60>
 8006b02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b1a:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8006c44 <mpu6500_read+0xc60>
 8006b1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	edc3 7a02 	vstr	s15, [r3, #8]
 8006b28:	e029      	b.n	8006b7e <mpu6500_read+0xb9a>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b30:	ee07 3a90 	vmov	s15, r3
 8006b34:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b38:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006c48 <mpu6500_read+0xc64>
 8006b3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006b4c:	ee07 3a90 	vmov	s15, r3
 8006b50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b54:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8006c48 <mpu6500_read+0xc64>
 8006b58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006b68:	ee07 3a90 	vmov	s15, r3
 8006b6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b70:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8006c48 <mpu6500_read+0xc64>
 8006b74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        if (gyro_conf == 0)                                                                        /* ±250dps */
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d12a      	bne.n	8006bda <mpu6500_read+0xbf6>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006b8a:	ee07 3a90 	vmov	s15, r3
 8006b8e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006b92:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8006c4c <mpu6500_read+0xc68>
 8006b96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b9c:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bae:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8006c4c <mpu6500_read+0xc68>
 8006bb2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb8:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006bc2:	ee07 3a90 	vmov	s15, r3
 8006bc6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bca:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8006c4c <mpu6500_read+0xc68>
 8006bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd4:	edc3 7a02 	vstr	s15, [r3, #8]
 8006bd8:	e098      	b.n	8006d0c <mpu6500_read+0xd28>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 8006bda:	7dfb      	ldrb	r3, [r7, #23]
 8006bdc:	2b01      	cmp	r3, #1
 8006bde:	d13d      	bne.n	8006c5c <mpu6500_read+0xc78>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006be6:	ee07 3a90 	vmov	s15, r3
 8006bea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006bee:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8006c50 <mpu6500_read+0xc6c>
 8006bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf8:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006c02:	ee07 3a90 	vmov	s15, r3
 8006c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c0a:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8006c50 <mpu6500_read+0xc6c>
 8006c0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c14:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c26:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8006c50 <mpu6500_read+0xc6c>
 8006c2a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c30:	edc3 7a02 	vstr	s15, [r3, #8]
 8006c34:	e06a      	b.n	8006d0c <mpu6500_read+0xd28>
 8006c36:	bf00      	nop
 8006c38:	0801ff58 	.word	0x0801ff58
 8006c3c:	46800000 	.word	0x46800000
 8006c40:	46000000 	.word	0x46000000
 8006c44:	45800000 	.word	0x45800000
 8006c48:	45000000 	.word	0x45000000
 8006c4c:	43030000 	.word	0x43030000
 8006c50:	42830000 	.word	0x42830000
 8006c54:	42033333 	.word	0x42033333
 8006c58:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d12a      	bne.n	8006cb8 <mpu6500_read+0xcd4>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c68:	ee07 3a90 	vmov	s15, r3
 8006c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c70:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8006c54 <mpu6500_read+0xc70>
 8006c74:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7a:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006c84:	ee07 3a90 	vmov	s15, r3
 8006c88:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006c8c:	ed5f 6a0f 	vldr	s13, [pc, #-60]	@ 8006c54 <mpu6500_read+0xc70>
 8006c90:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006c94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c96:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006ca0:	ee07 3a90 	vmov	s15, r3
 8006ca4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ca8:	ed5f 6a16 	vldr	s13, [pc, #-88]	@ 8006c54 <mpu6500_read+0xc70>
 8006cac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb2:	edc3 7a02 	vstr	s15, [r3, #8]
 8006cb6:	e029      	b.n	8006d0c <mpu6500_read+0xd28>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cc6:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 8006c58 <mpu6500_read+0xc74>
 8006cca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd0:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 8006cd4:	683b      	ldr	r3, [r7, #0]
 8006cd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006cda:	ee07 3a90 	vmov	s15, r3
 8006cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006ce2:	ed5f 6a23 	vldr	s13, [pc, #-140]	@ 8006c58 <mpu6500_read+0xc74>
 8006ce6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006cf6:	ee07 3a90 	vmov	s15, r3
 8006cfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006cfe:	ed5f 6a2a 	vldr	s13, [pc, #-168]	@ 8006c58 <mpu6500_read+0xc74>
 8006d02:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006d06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d08:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        return 0;                                                                                  /* success return 0 */
 8006d0c:	2300      	movs	r3, #0
    }
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	bf00      	nop

08006d18 <mpu6500_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
 8006d20:	460b      	mov	r3, r1
 8006d22:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                               /* check handle */
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d101      	bne.n	8006d2e <mpu6500_set_fifo+0x16>
    {
        return 2;                                                                     /* return error */
 8006d2a:	2302      	movs	r3, #2
 8006d2c:	e03a      	b.n	8006da4 <mpu6500_set_fifo+0x8c>
    }
    if (handle->inited != 1)                                                          /* check handle initialization */
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006d34:	2b01      	cmp	r3, #1
 8006d36:	d001      	beq.n	8006d3c <mpu6500_set_fifo+0x24>
    {
        return 3;                                                                     /* return error */
 8006d38:	2303      	movs	r3, #3
 8006d3a:	e033      	b.n	8006da4 <mpu6500_set_fifo+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8006d3c:	f107 020e 	add.w	r2, r7, #14
 8006d40:	2301      	movs	r3, #1
 8006d42:	216a      	movs	r1, #106	@ 0x6a
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f7fe ff2f 	bl	8005ba8 <a_mpu6500_read>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 8006d4e:	7bfb      	ldrb	r3, [r7, #15]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <mpu6500_set_fifo+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                     /* read user ctrl failed */
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d58:	4814      	ldr	r0, [pc, #80]	@ (8006dac <mpu6500_set_fifo+0x94>)
 8006d5a:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e021      	b.n	8006da4 <mpu6500_set_fifo+0x8c>
    }
    prev &= ~(1 << 6);                                                                /* clear config */
 8006d60:	7bbb      	ldrb	r3, [r7, #14]
 8006d62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                              /* set config */
 8006d6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d6e:	019b      	lsls	r3, r3, #6
 8006d70:	b25a      	sxtb	r2, r3
 8006d72:	7bbb      	ldrb	r3, [r7, #14]
 8006d74:	b25b      	sxtb	r3, r3
 8006d76:	4313      	orrs	r3, r2
 8006d78:	b25b      	sxtb	r3, r3
 8006d7a:	b2db      	uxtb	r3, r3
 8006d7c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 8006d7e:	f107 020e 	add.w	r2, r7, #14
 8006d82:	2301      	movs	r3, #1
 8006d84:	216a      	movs	r1, #106	@ 0x6a
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f7fe ff3f 	bl	8005c0a <a_mpu6500_write>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 8006d90:	7bfb      	ldrb	r3, [r7, #15]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d005      	beq.n	8006da2 <mpu6500_set_fifo+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                    /* write user ctrl failed */
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d9a:	4805      	ldr	r0, [pc, #20]	@ (8006db0 <mpu6500_set_fifo+0x98>)
 8006d9c:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <mpu6500_set_fifo+0x8c>
    }
    
    return 0;                                                                         /* success return 0 */
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3710      	adds	r7, #16
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd80      	pop	{r7, pc}
 8006dac:	0801fff8 	.word	0x0801fff8
 8006db0:	0802001c 	.word	0x0802001c

08006db4 <mpu6500_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_master(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <mpu6500_set_iic_master+0x16>
    {
        return 2;                                                                    /* return error */
 8006dc6:	2302      	movs	r3, #2
 8006dc8:	e03a      	b.n	8006e40 <mpu6500_set_iic_master+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d001      	beq.n	8006dd8 <mpu6500_set_iic_master+0x24>
    {
        return 3;                                                                    /* return error */
 8006dd4:	2303      	movs	r3, #3
 8006dd6:	e033      	b.n	8006e40 <mpu6500_set_iic_master+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8006dd8:	f107 020e 	add.w	r2, r7, #14
 8006ddc:	2301      	movs	r3, #1
 8006dde:	216a      	movs	r1, #106	@ 0x6a
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7fe fee1 	bl	8005ba8 <a_mpu6500_read>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <mpu6500_set_iic_master+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006df4:	4814      	ldr	r0, [pc, #80]	@ (8006e48 <mpu6500_set_iic_master+0x94>)
 8006df6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e021      	b.n	8006e40 <mpu6500_set_iic_master+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8006dfc:	7bbb      	ldrb	r3, [r7, #14]
 8006dfe:	f023 0320 	bic.w	r3, r3, #32
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8006e06:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e0a:	015b      	lsls	r3, r3, #5
 8006e0c:	b25a      	sxtb	r2, r3
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	b25b      	sxtb	r3, r3
 8006e12:	4313      	orrs	r3, r2
 8006e14:	b25b      	sxtb	r3, r3
 8006e16:	b2db      	uxtb	r3, r3
 8006e18:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8006e1a:	f107 020e 	add.w	r2, r7, #14
 8006e1e:	2301      	movs	r3, #1
 8006e20:	216a      	movs	r1, #106	@ 0x6a
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fe fef1 	bl	8005c0a <a_mpu6500_write>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d005      	beq.n	8006e3e <mpu6500_set_iic_master+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e36:	4805      	ldr	r0, [pc, #20]	@ (8006e4c <mpu6500_set_iic_master+0x98>)
 8006e38:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <mpu6500_set_iic_master+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	0801fff8 	.word	0x0801fff8
 8006e4c:	0802001c 	.word	0x0802001c

08006e50 <mpu6500_set_disable_iic_slave>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_disable_iic_slave(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d101      	bne.n	8006e66 <mpu6500_set_disable_iic_slave+0x16>
    {
        return 2;                                                                    /* return error */
 8006e62:	2302      	movs	r3, #2
 8006e64:	e03a      	b.n	8006edc <mpu6500_set_disable_iic_slave+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d001      	beq.n	8006e74 <mpu6500_set_disable_iic_slave+0x24>
    {
        return 3;                                                                    /* return error */
 8006e70:	2303      	movs	r3, #3
 8006e72:	e033      	b.n	8006edc <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8006e74:	f107 020e 	add.w	r2, r7, #14
 8006e78:	2301      	movs	r3, #1
 8006e7a:	216a      	movs	r1, #106	@ 0x6a
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fe fe93 	bl	8005ba8 <a_mpu6500_read>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d005      	beq.n	8006e98 <mpu6500_set_disable_iic_slave+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e90:	4814      	ldr	r0, [pc, #80]	@ (8006ee4 <mpu6500_set_disable_iic_slave+0x94>)
 8006e92:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006e94:	2301      	movs	r3, #1
 8006e96:	e021      	b.n	8006edc <mpu6500_set_disable_iic_slave+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 8006e98:	7bbb      	ldrb	r3, [r7, #14]
 8006e9a:	f023 0310 	bic.w	r3, r3, #16
 8006e9e:	b2db      	uxtb	r3, r3
 8006ea0:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 8006ea2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ea6:	011b      	lsls	r3, r3, #4
 8006ea8:	b25a      	sxtb	r2, r3
 8006eaa:	7bbb      	ldrb	r3, [r7, #14]
 8006eac:	b25b      	sxtb	r3, r3
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	b25b      	sxtb	r3, r3
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8006eb6:	f107 020e 	add.w	r2, r7, #14
 8006eba:	2301      	movs	r3, #1
 8006ebc:	216a      	movs	r1, #106	@ 0x6a
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f7fe fea3 	bl	8005c0a <a_mpu6500_write>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d005      	beq.n	8006eda <mpu6500_set_disable_iic_slave+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed2:	4805      	ldr	r0, [pc, #20]	@ (8006ee8 <mpu6500_set_disable_iic_slave+0x98>)
 8006ed4:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e000      	b.n	8006edc <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	0801fff8 	.word	0x0801fff8
 8006ee8:	0802001c 	.word	0x0802001c

08006eec <mpu6500_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_clock_source(mpu6500_handle_t *handle, mpu6500_clock_source_t clock_source)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d101      	bne.n	8006f02 <mpu6500_set_clock_source+0x16>
    {
        return 2;                                                                    /* return error */
 8006efe:	2302      	movs	r3, #2
 8006f00:	e035      	b.n	8006f6e <mpu6500_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d001      	beq.n	8006f10 <mpu6500_set_clock_source+0x24>
    {
        return 3;                                                                    /* return error */
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e02e      	b.n	8006f6e <mpu6500_set_clock_source+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006f10:	f107 020e 	add.w	r2, r7, #14
 8006f14:	2301      	movs	r3, #1
 8006f16:	216b      	movs	r1, #107	@ 0x6b
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f7fe fe45 	bl	8005ba8 <a_mpu6500_read>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006f22:	7bfb      	ldrb	r3, [r7, #15]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d005      	beq.n	8006f34 <mpu6500_set_clock_source+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2c:	4812      	ldr	r0, [pc, #72]	@ (8006f78 <mpu6500_set_clock_source+0x8c>)
 8006f2e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006f30:	2301      	movs	r3, #1
 8006f32:	e01c      	b.n	8006f6e <mpu6500_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                             /* clear config */
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	f023 0307 	bic.w	r3, r3, #7
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                       /* set config */
 8006f3e:	7bba      	ldrb	r2, [r7, #14]
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	4313      	orrs	r3, r2
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006f48:	f107 020e 	add.w	r2, r7, #14
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	216b      	movs	r1, #107	@ 0x6b
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7fe fe5a 	bl	8005c0a <a_mpu6500_write>
 8006f56:	4603      	mov	r3, r0
 8006f58:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <mpu6500_set_clock_source+0x80>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	4805      	ldr	r0, [pc, #20]	@ (8006f7c <mpu6500_set_clock_source+0x90>)
 8006f66:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <mpu6500_set_clock_source+0x82>
    }
    
    return 0;                                                                        /* success return 0 */
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	080202e4 	.word	0x080202e4
 8006f7c:	08020310 	.word	0x08020310

08006f80 <mpu6500_set_ptat>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_ptat(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <mpu6500_set_ptat+0x16>
    {
        return 2;                                                                    /* return error */
 8006f92:	2302      	movs	r3, #2
 8006f94:	e03c      	b.n	8007010 <mpu6500_set_ptat+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d001      	beq.n	8006fa4 <mpu6500_set_ptat+0x24>
    {
        return 3;                                                                    /* return error */
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e035      	b.n	8007010 <mpu6500_set_ptat+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006fa4:	f107 020e 	add.w	r2, r7, #14
 8006fa8:	2301      	movs	r3, #1
 8006faa:	216b      	movs	r1, #107	@ 0x6b
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fe fdfb 	bl	8005ba8 <a_mpu6500_read>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <mpu6500_set_ptat+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc0:	4815      	ldr	r0, [pc, #84]	@ (8007018 <mpu6500_set_ptat+0x98>)
 8006fc2:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e023      	b.n	8007010 <mpu6500_set_ptat+0x90>
    }
    prev &= ~(1 << 3);                                                               /* clear config */
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	f023 0308 	bic.w	r3, r3, #8
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                          /* set config */
 8006fd2:	78fb      	ldrb	r3, [r7, #3]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d101      	bne.n	8006fdc <mpu6500_set_ptat+0x5c>
 8006fd8:	2208      	movs	r2, #8
 8006fda:	e000      	b.n	8006fde <mpu6500_set_ptat+0x5e>
 8006fdc:	2200      	movs	r2, #0
 8006fde:	7bbb      	ldrb	r3, [r7, #14]
 8006fe0:	b25b      	sxtb	r3, r3
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	b25b      	sxtb	r3, r3
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006fea:	f107 020e 	add.w	r2, r7, #14
 8006fee:	2301      	movs	r3, #1
 8006ff0:	216b      	movs	r1, #107	@ 0x6b
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f7fe fe09 	bl	8005c0a <a_mpu6500_write>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d005      	beq.n	800700e <mpu6500_set_ptat+0x8e>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007006:	4805      	ldr	r0, [pc, #20]	@ (800701c <mpu6500_set_ptat+0x9c>)
 8007008:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800700a:	2301      	movs	r3, #1
 800700c:	e000      	b.n	8007010 <mpu6500_set_ptat+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3710      	adds	r7, #16
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}
 8007018:	080202e4 	.word	0x080202e4
 800701c:	08020310 	.word	0x08020310

08007020 <mpu6500_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_cycle_wake_up(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	460b      	mov	r3, r1
 800702a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2b00      	cmp	r3, #0
 8007030:	d101      	bne.n	8007036 <mpu6500_set_cycle_wake_up+0x16>
    {
        return 2;                                                                    /* return error */
 8007032:	2302      	movs	r3, #2
 8007034:	e03a      	b.n	80070ac <mpu6500_set_cycle_wake_up+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800703c:	2b01      	cmp	r3, #1
 800703e:	d001      	beq.n	8007044 <mpu6500_set_cycle_wake_up+0x24>
    {
        return 3;                                                                    /* return error */
 8007040:	2303      	movs	r3, #3
 8007042:	e033      	b.n	80070ac <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8007044:	f107 020e 	add.w	r2, r7, #14
 8007048:	2301      	movs	r3, #1
 800704a:	216b      	movs	r1, #107	@ 0x6b
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f7fe fdab 	bl	8005ba8 <a_mpu6500_read>
 8007052:	4603      	mov	r3, r0
 8007054:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d005      	beq.n	8007068 <mpu6500_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007060:	4814      	ldr	r0, [pc, #80]	@ (80070b4 <mpu6500_set_cycle_wake_up+0x94>)
 8007062:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007064:	2301      	movs	r3, #1
 8007066:	e021      	b.n	80070ac <mpu6500_set_cycle_wake_up+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	f023 0320 	bic.w	r3, r3, #32
 800706e:	b2db      	uxtb	r3, r3
 8007070:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8007072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007076:	015b      	lsls	r3, r3, #5
 8007078:	b25a      	sxtb	r2, r3
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	b25b      	sxtb	r3, r3
 800707e:	4313      	orrs	r3, r2
 8007080:	b25b      	sxtb	r3, r3
 8007082:	b2db      	uxtb	r3, r3
 8007084:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007086:	f107 020e 	add.w	r2, r7, #14
 800708a:	2301      	movs	r3, #1
 800708c:	216b      	movs	r1, #107	@ 0x6b
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f7fe fdbb 	bl	8005c0a <a_mpu6500_write>
 8007094:	4603      	mov	r3, r0
 8007096:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d005      	beq.n	80070aa <mpu6500_set_cycle_wake_up+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070a2:	4805      	ldr	r0, [pc, #20]	@ (80070b8 <mpu6500_set_cycle_wake_up+0x98>)
 80070a4:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 80070aa:	2300      	movs	r3, #0
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	3710      	adds	r7, #16
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}
 80070b4:	080202e4 	.word	0x080202e4
 80070b8:	08020310 	.word	0x08020310

080070bc <mpu6500_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sleep(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	460b      	mov	r3, r1
 80070c6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d101      	bne.n	80070d2 <mpu6500_set_sleep+0x16>
    {
        return 2;                                                                    /* return error */
 80070ce:	2302      	movs	r3, #2
 80070d0:	e03a      	b.n	8007148 <mpu6500_set_sleep+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d001      	beq.n	80070e0 <mpu6500_set_sleep+0x24>
    {
        return 3;                                                                    /* return error */
 80070dc:	2303      	movs	r3, #3
 80070de:	e033      	b.n	8007148 <mpu6500_set_sleep+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80070e0:	f107 020e 	add.w	r2, r7, #14
 80070e4:	2301      	movs	r3, #1
 80070e6:	216b      	movs	r1, #107	@ 0x6b
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fe fd5d 	bl	8005ba8 <a_mpu6500_read>
 80070ee:	4603      	mov	r3, r0
 80070f0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d005      	beq.n	8007104 <mpu6500_set_sleep+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fc:	4814      	ldr	r0, [pc, #80]	@ (8007150 <mpu6500_set_sleep+0x94>)
 80070fe:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007100:	2301      	movs	r3, #1
 8007102:	e021      	b.n	8007148 <mpu6500_set_sleep+0x8c>
    }
    prev &= ~(1 << 6);                                                               /* clear config */
 8007104:	7bbb      	ldrb	r3, [r7, #14]
 8007106:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800710a:	b2db      	uxtb	r3, r3
 800710c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                             /* set config */
 800710e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007112:	019b      	lsls	r3, r3, #6
 8007114:	b25a      	sxtb	r2, r3
 8007116:	7bbb      	ldrb	r3, [r7, #14]
 8007118:	b25b      	sxtb	r3, r3
 800711a:	4313      	orrs	r3, r2
 800711c:	b25b      	sxtb	r3, r3
 800711e:	b2db      	uxtb	r3, r3
 8007120:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8007122:	f107 020e 	add.w	r2, r7, #14
 8007126:	2301      	movs	r3, #1
 8007128:	216b      	movs	r1, #107	@ 0x6b
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7fe fd6d 	bl	8005c0a <a_mpu6500_write>
 8007130:	4603      	mov	r3, r0
 8007132:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d005      	beq.n	8007146 <mpu6500_set_sleep+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713e:	4805      	ldr	r0, [pc, #20]	@ (8007154 <mpu6500_set_sleep+0x98>)
 8007140:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <mpu6500_set_sleep+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	080202e4 	.word	0x080202e4
 8007154:	08020310 	.word	0x08020310

08007158 <mpu6500_set_gyro_standby>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_standby(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b084      	sub	sp, #16
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <mpu6500_set_gyro_standby+0x16>
    {
        return 2;                                                                    /* return error */
 800716a:	2302      	movs	r3, #2
 800716c:	e03a      	b.n	80071e4 <mpu6500_set_gyro_standby+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007174:	2b01      	cmp	r3, #1
 8007176:	d001      	beq.n	800717c <mpu6500_set_gyro_standby+0x24>
    {
        return 3;                                                                    /* return error */
 8007178:	2303      	movs	r3, #3
 800717a:	e033      	b.n	80071e4 <mpu6500_set_gyro_standby+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 800717c:	f107 020e 	add.w	r2, r7, #14
 8007180:	2301      	movs	r3, #1
 8007182:	216b      	movs	r1, #107	@ 0x6b
 8007184:	6878      	ldr	r0, [r7, #4]
 8007186:	f7fe fd0f 	bl	8005ba8 <a_mpu6500_read>
 800718a:	4603      	mov	r3, r0
 800718c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800718e:	7bfb      	ldrb	r3, [r7, #15]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d005      	beq.n	80071a0 <mpu6500_set_gyro_standby+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007198:	4814      	ldr	r0, [pc, #80]	@ (80071ec <mpu6500_set_gyro_standby+0x94>)
 800719a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800719c:	2301      	movs	r3, #1
 800719e:	e021      	b.n	80071e4 <mpu6500_set_gyro_standby+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 80071a0:	7bbb      	ldrb	r3, [r7, #14]
 80071a2:	f023 0310 	bic.w	r3, r3, #16
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 80071aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071ae:	011b      	lsls	r3, r3, #4
 80071b0:	b25a      	sxtb	r2, r3
 80071b2:	7bbb      	ldrb	r3, [r7, #14]
 80071b4:	b25b      	sxtb	r3, r3
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b25b      	sxtb	r3, r3
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80071be:	f107 020e 	add.w	r2, r7, #14
 80071c2:	2301      	movs	r3, #1
 80071c4:	216b      	movs	r1, #107	@ 0x6b
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f7fe fd1f 	bl	8005c0a <a_mpu6500_write>
 80071cc:	4603      	mov	r3, r0
 80071ce:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80071d0:	7bfb      	ldrb	r3, [r7, #15]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <mpu6500_set_gyro_standby+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071da:	4805      	ldr	r0, [pc, #20]	@ (80071f0 <mpu6500_set_gyro_standby+0x98>)
 80071dc:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <mpu6500_set_gyro_standby+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 80071e2:	2300      	movs	r3, #0
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3710      	adds	r7, #16
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	080202e4 	.word	0x080202e4
 80071f0:	08020310 	.word	0x08020310

080071f4 <mpu6500_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_standby_mode(mpu6500_handle_t *handle, mpu6500_source_t source, mpu6500_bool_t enable)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
 8007200:	4613      	mov	r3, r2
 8007202:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <mpu6500_set_standby_mode+0x1a>
    {
        return 2;                                                                    /* return error */
 800720a:	2302      	movs	r3, #2
 800720c:	e043      	b.n	8007296 <mpu6500_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007214:	2b01      	cmp	r3, #1
 8007216:	d001      	beq.n	800721c <mpu6500_set_standby_mode+0x28>
    {
        return 3;                                                                    /* return error */
 8007218:	2303      	movs	r3, #3
 800721a:	e03c      	b.n	8007296 <mpu6500_set_standby_mode+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 800721c:	f107 020e 	add.w	r2, r7, #14
 8007220:	2301      	movs	r3, #1
 8007222:	216c      	movs	r1, #108	@ 0x6c
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f7fe fcbf 	bl	8005ba8 <a_mpu6500_read>
 800722a:	4603      	mov	r3, r0
 800722c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800722e:	7bfb      	ldrb	r3, [r7, #15]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d005      	beq.n	8007240 <mpu6500_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6500: read power management 2 failed.\n");           /* read power management 2 failed */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007238:	4819      	ldr	r0, [pc, #100]	@ (80072a0 <mpu6500_set_standby_mode+0xac>)
 800723a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800723c:	2301      	movs	r3, #1
 800723e:	e02a      	b.n	8007296 <mpu6500_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                          /* clear config */
 8007240:	78fb      	ldrb	r3, [r7, #3]
 8007242:	2201      	movs	r2, #1
 8007244:	fa02 f303 	lsl.w	r3, r2, r3
 8007248:	b25b      	sxtb	r3, r3
 800724a:	43db      	mvns	r3, r3
 800724c:	b25a      	sxtb	r2, r3
 800724e:	7bbb      	ldrb	r3, [r7, #14]
 8007250:	b25b      	sxtb	r3, r3
 8007252:	4013      	ands	r3, r2
 8007254:	b25b      	sxtb	r3, r3
 8007256:	b2db      	uxtb	r3, r3
 8007258:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                        /* set config */
 800725a:	78ba      	ldrb	r2, [r7, #2]
 800725c:	78fb      	ldrb	r3, [r7, #3]
 800725e:	fa02 f303 	lsl.w	r3, r2, r3
 8007262:	b25a      	sxtb	r2, r3
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	b25b      	sxtb	r3, r3
 8007268:	4313      	orrs	r3, r2
 800726a:	b25b      	sxtb	r3, r3
 800726c:	b2db      	uxtb	r3, r3
 800726e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8007270:	f107 020e 	add.w	r2, r7, #14
 8007274:	2301      	movs	r3, #1
 8007276:	216c      	movs	r1, #108	@ 0x6c
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7fe fcc6 	bl	8005c0a <a_mpu6500_write>
 800727e:	4603      	mov	r3, r0
 8007280:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d005      	beq.n	8007294 <mpu6500_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6500: write power management 2 failed.\n");          /* write power management 2 failed */
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800728c:	4805      	ldr	r0, [pc, #20]	@ (80072a4 <mpu6500_set_standby_mode+0xb0>)
 800728e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <mpu6500_set_standby_mode+0xa2>
    }
    
    return 0;                                                                        /* success return 0 */
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	0802033c 	.word	0x0802033c
 80072a4:	08020368 	.word	0x08020368

080072a8 <mpu6500_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sample_rate_divider(mpu6500_handle_t *handle, uint8_t d)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                              /* check handle */
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <mpu6500_set_sample_rate_divider+0x16>
    {
        return 2;                                                                    /* return error */
 80072ba:	2302      	movs	r3, #2
 80072bc:	e018      	b.n	80072f0 <mpu6500_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d001      	beq.n	80072cc <mpu6500_set_sample_rate_divider+0x24>
    {
        return 3;                                                                    /* return error */
 80072c8:	2303      	movs	r3, #3
 80072ca:	e011      	b.n	80072f0 <mpu6500_set_sample_rate_divider+0x48>
    }
    
    res = a_mpu6500_write(handle, MPU6500_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 80072cc:	1cfa      	adds	r2, r7, #3
 80072ce:	2301      	movs	r3, #1
 80072d0:	2119      	movs	r1, #25
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7fe fc99 	bl	8005c0a <a_mpu6500_write>
 80072d8:	4603      	mov	r3, r0
 80072da:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80072dc:	7bfb      	ldrb	r3, [r7, #15]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d005      	beq.n	80072ee <mpu6500_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6500: write smprt div failed.\n");                   /* write smprt div failed */
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072e6:	4804      	ldr	r0, [pc, #16]	@ (80072f8 <mpu6500_set_sample_rate_divider+0x50>)
 80072e8:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80072ea:	2301      	movs	r3, #1
 80072ec:	e000      	b.n	80072f0 <mpu6500_set_sample_rate_divider+0x48>
    }
    
    return 0;                                                                        /* success return 0 */
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3710      	adds	r7, #16
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	08020428 	.word	0x08020428

080072fc <mpu6500_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_extern_sync(mpu6500_handle_t *handle, mpu6500_extern_sync_t sync)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
 8007304:	460b      	mov	r3, r1
 8007306:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d101      	bne.n	8007312 <mpu6500_set_extern_sync+0x16>
    {
        return 2;                                                                  /* return error */
 800730e:	2302      	movs	r3, #2
 8007310:	e03a      	b.n	8007388 <mpu6500_set_extern_sync+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007318:	2b01      	cmp	r3, #1
 800731a:	d001      	beq.n	8007320 <mpu6500_set_extern_sync+0x24>
    {
        return 3;                                                                  /* return error */
 800731c:	2303      	movs	r3, #3
 800731e:	e033      	b.n	8007388 <mpu6500_set_extern_sync+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8007320:	f107 020e 	add.w	r2, r7, #14
 8007324:	2301      	movs	r3, #1
 8007326:	211a      	movs	r1, #26
 8007328:	6878      	ldr	r0, [r7, #4]
 800732a:	f7fe fc3d 	bl	8005ba8 <a_mpu6500_read>
 800732e:	4603      	mov	r3, r0
 8007330:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007332:	7bfb      	ldrb	r3, [r7, #15]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d005      	beq.n	8007344 <mpu6500_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800733c:	4814      	ldr	r0, [pc, #80]	@ (8007390 <mpu6500_set_extern_sync+0x94>)
 800733e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007340:	2301      	movs	r3, #1
 8007342:	e021      	b.n	8007388 <mpu6500_set_extern_sync+0x8c>
    }
    prev &= ~(0x7 << 3);                                                           /* clear config */
 8007344:	7bbb      	ldrb	r3, [r7, #14]
 8007346:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800734a:	b2db      	uxtb	r3, r3
 800734c:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                             /* set config */
 800734e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007352:	00db      	lsls	r3, r3, #3
 8007354:	b25a      	sxtb	r2, r3
 8007356:	7bbb      	ldrb	r3, [r7, #14]
 8007358:	b25b      	sxtb	r3, r3
 800735a:	4313      	orrs	r3, r2
 800735c:	b25b      	sxtb	r3, r3
 800735e:	b2db      	uxtb	r3, r3
 8007360:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007362:	f107 020e 	add.w	r2, r7, #14
 8007366:	2301      	movs	r3, #1
 8007368:	211a      	movs	r1, #26
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7fe fc4d 	bl	8005c0a <a_mpu6500_write>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <mpu6500_set_extern_sync+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800737e:	4805      	ldr	r0, [pc, #20]	@ (8007394 <mpu6500_set_extern_sync+0x98>)
 8007380:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <mpu6500_set_extern_sync+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}
 8007390:	08020470 	.word	0x08020470
 8007394:	08020490 	.word	0x08020490

08007398 <mpu6500_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_pass_filter(mpu6500_handle_t *handle, mpu6500_low_pass_filter_t filter)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	460b      	mov	r3, r1
 80073a2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d101      	bne.n	80073ae <mpu6500_set_low_pass_filter+0x16>
    {
        return 2;                                                                  /* return error */
 80073aa:	2302      	movs	r3, #2
 80073ac:	e035      	b.n	800741a <mpu6500_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80073b4:	2b01      	cmp	r3, #1
 80073b6:	d001      	beq.n	80073bc <mpu6500_set_low_pass_filter+0x24>
    {
        return 3;                                                                  /* return error */
 80073b8:	2303      	movs	r3, #3
 80073ba:	e02e      	b.n	800741a <mpu6500_set_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 80073bc:	f107 020e 	add.w	r2, r7, #14
 80073c0:	2301      	movs	r3, #1
 80073c2:	211a      	movs	r1, #26
 80073c4:	6878      	ldr	r0, [r7, #4]
 80073c6:	f7fe fbef 	bl	8005ba8 <a_mpu6500_read>
 80073ca:	4603      	mov	r3, r0
 80073cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 80073ce:	7bfb      	ldrb	r3, [r7, #15]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d005      	beq.n	80073e0 <mpu6500_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073d8:	4812      	ldr	r0, [pc, #72]	@ (8007424 <mpu6500_set_low_pass_filter+0x8c>)
 80073da:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 80073dc:	2301      	movs	r3, #1
 80073de:	e01c      	b.n	800741a <mpu6500_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                           /* clear config */
 80073e0:	7bbb      	ldrb	r3, [r7, #14]
 80073e2:	f023 0307 	bic.w	r3, r3, #7
 80073e6:	b2db      	uxtb	r3, r3
 80073e8:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                           /* set config */
 80073ea:	7bba      	ldrb	r2, [r7, #14]
 80073ec:	78fb      	ldrb	r3, [r7, #3]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	b2db      	uxtb	r3, r3
 80073f2:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 80073f4:	f107 020e 	add.w	r2, r7, #14
 80073f8:	2301      	movs	r3, #1
 80073fa:	211a      	movs	r1, #26
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7fe fc04 	bl	8005c0a <a_mpu6500_write>
 8007402:	4603      	mov	r3, r0
 8007404:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d005      	beq.n	8007418 <mpu6500_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007410:	4805      	ldr	r0, [pc, #20]	@ (8007428 <mpu6500_set_low_pass_filter+0x90>)
 8007412:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007414:	2301      	movs	r3, #1
 8007416:	e000      	b.n	800741a <mpu6500_set_low_pass_filter+0x82>
    }
    
    return 0;                                                                      /* success return 0 */
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
 8007422:	bf00      	nop
 8007424:	08020470 	.word	0x08020470
 8007428:	08020490 	.word	0x08020490

0800742c <mpu6500_set_fifo_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_mode(mpu6500_handle_t *handle, mpu6500_fifo_mode mode)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b084      	sub	sp, #16
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	460b      	mov	r3, r1
 8007436:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d101      	bne.n	8007442 <mpu6500_set_fifo_mode+0x16>
    {
        return 2;                                                                  /* return error */
 800743e:	2302      	movs	r3, #2
 8007440:	e03a      	b.n	80074b8 <mpu6500_set_fifo_mode+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007448:	2b01      	cmp	r3, #1
 800744a:	d001      	beq.n	8007450 <mpu6500_set_fifo_mode+0x24>
    {
        return 3;                                                                  /* return error */
 800744c:	2303      	movs	r3, #3
 800744e:	e033      	b.n	80074b8 <mpu6500_set_fifo_mode+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8007450:	f107 020e 	add.w	r2, r7, #14
 8007454:	2301      	movs	r3, #1
 8007456:	211a      	movs	r1, #26
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	f7fe fba5 	bl	8005ba8 <a_mpu6500_read>
 800745e:	4603      	mov	r3, r0
 8007460:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8007462:	7bfb      	ldrb	r3, [r7, #15]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d005      	beq.n	8007474 <mpu6500_set_fifo_mode+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800746c:	4814      	ldr	r0, [pc, #80]	@ (80074c0 <mpu6500_set_fifo_mode+0x94>)
 800746e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8007470:	2301      	movs	r3, #1
 8007472:	e021      	b.n	80074b8 <mpu6500_set_fifo_mode+0x8c>
    }
    prev &= ~(1 << 6);                                                             /* clear config */
 8007474:	7bbb      	ldrb	r3, [r7, #14]
 8007476:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800747a:	b2db      	uxtb	r3, r3
 800747c:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 6;                                                             /* set config */
 800747e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007482:	019b      	lsls	r3, r3, #6
 8007484:	b25a      	sxtb	r2, r3
 8007486:	7bbb      	ldrb	r3, [r7, #14]
 8007488:	b25b      	sxtb	r3, r3
 800748a:	4313      	orrs	r3, r2
 800748c:	b25b      	sxtb	r3, r3
 800748e:	b2db      	uxtb	r3, r3
 8007490:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8007492:	f107 020e 	add.w	r2, r7, #14
 8007496:	2301      	movs	r3, #1
 8007498:	211a      	movs	r1, #26
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fe fbb5 	bl	8005c0a <a_mpu6500_write>
 80074a0:	4603      	mov	r3, r0
 80074a2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 80074a4:	7bfb      	ldrb	r3, [r7, #15]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d005      	beq.n	80074b6 <mpu6500_set_fifo_mode+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074ae:	4805      	ldr	r0, [pc, #20]	@ (80074c4 <mpu6500_set_fifo_mode+0x98>)
 80074b0:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 80074b2:	2301      	movs	r3, #1
 80074b4:	e000      	b.n	80074b8 <mpu6500_set_fifo_mode+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 80074b6:	2300      	movs	r3, #0
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3710      	adds	r7, #16
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	08020470 	.word	0x08020470
 80074c4:	08020490 	.word	0x08020490

080074c8 <mpu6500_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	460b      	mov	r3, r1
 80074d2:	70fb      	strb	r3, [r7, #3]
 80074d4:	4613      	mov	r3, r2
 80074d6:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d101      	bne.n	80074e2 <mpu6500_set_gyroscope_test+0x1a>
    {
        return 2;                                                                       /* return error */
 80074de:	2302      	movs	r3, #2
 80074e0:	e043      	b.n	800756a <mpu6500_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80074e8:	2b01      	cmp	r3, #1
 80074ea:	d001      	beq.n	80074f0 <mpu6500_set_gyroscope_test+0x28>
    {
        return 3;                                                                       /* return error */
 80074ec:	2303      	movs	r3, #3
 80074ee:	e03c      	b.n	800756a <mpu6500_set_gyroscope_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 80074f0:	f107 020e 	add.w	r2, r7, #14
 80074f4:	2301      	movs	r3, #1
 80074f6:	211b      	movs	r1, #27
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7fe fb55 	bl	8005ba8 <a_mpu6500_read>
 80074fe:	4603      	mov	r3, r0
 8007500:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007502:	7bfb      	ldrb	r3, [r7, #15]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d005      	beq.n	8007514 <mpu6500_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800750c:	4819      	ldr	r0, [pc, #100]	@ (8007574 <mpu6500_set_gyroscope_test+0xac>)
 800750e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007510:	2301      	movs	r3, #1
 8007512:	e02a      	b.n	800756a <mpu6500_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	2201      	movs	r2, #1
 8007518:	fa02 f303 	lsl.w	r3, r2, r3
 800751c:	b25b      	sxtb	r3, r3
 800751e:	43db      	mvns	r3, r3
 8007520:	b25a      	sxtb	r2, r3
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	b25b      	sxtb	r3, r3
 8007526:	4013      	ands	r3, r2
 8007528:	b25b      	sxtb	r3, r3
 800752a:	b2db      	uxtb	r3, r3
 800752c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 800752e:	78ba      	ldrb	r2, [r7, #2]
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	fa02 f303 	lsl.w	r3, r2, r3
 8007536:	b25a      	sxtb	r2, r3
 8007538:	7bbb      	ldrb	r3, [r7, #14]
 800753a:	b25b      	sxtb	r3, r3
 800753c:	4313      	orrs	r3, r2
 800753e:	b25b      	sxtb	r3, r3
 8007540:	b2db      	uxtb	r3, r3
 8007542:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8007544:	f107 020e 	add.w	r2, r7, #14
 8007548:	2301      	movs	r3, #1
 800754a:	211b      	movs	r1, #27
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f7fe fb5c 	bl	8005c0a <a_mpu6500_write>
 8007552:	4603      	mov	r3, r0
 8007554:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <mpu6500_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007560:	4805      	ldr	r0, [pc, #20]	@ (8007578 <mpu6500_set_gyroscope_test+0xb0>)
 8007562:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007564:	2301      	movs	r3, #1
 8007566:	e000      	b.n	800756a <mpu6500_set_gyroscope_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8007568:	2300      	movs	r3, #0
}
 800756a:	4618      	mov	r0, r3
 800756c:	3710      	adds	r7, #16
 800756e:	46bd      	mov	sp, r7
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	080204b0 	.word	0x080204b0
 8007578:	080204d8 	.word	0x080204d8

0800757c <mpu6500_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_range(mpu6500_handle_t *handle, mpu6500_gyroscope_range_t range)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	460b      	mov	r3, r1
 8007586:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <mpu6500_set_gyroscope_range+0x16>
    {
        return 2;                                                                       /* return error */
 800758e:	2302      	movs	r3, #2
 8007590:	e03a      	b.n	8007608 <mpu6500_set_gyroscope_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007598:	2b01      	cmp	r3, #1
 800759a:	d001      	beq.n	80075a0 <mpu6500_set_gyroscope_range+0x24>
    {
        return 3;                                                                       /* return error */
 800759c:	2303      	movs	r3, #3
 800759e:	e033      	b.n	8007608 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 80075a0:	f107 020e 	add.w	r2, r7, #14
 80075a4:	2301      	movs	r3, #1
 80075a6:	211b      	movs	r1, #27
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f7fe fafd 	bl	8005ba8 <a_mpu6500_read>
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80075b2:	7bfb      	ldrb	r3, [r7, #15]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d005      	beq.n	80075c4 <mpu6500_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075bc:	4814      	ldr	r0, [pc, #80]	@ (8007610 <mpu6500_set_gyroscope_range+0x94>)
 80075be:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80075c0:	2301      	movs	r3, #1
 80075c2:	e021      	b.n	8007608 <mpu6500_set_gyroscope_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 80075c4:	7bbb      	ldrb	r3, [r7, #14]
 80075c6:	f023 0318 	bic.w	r3, r3, #24
 80075ca:	b2db      	uxtb	r3, r3
 80075cc:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 80075ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075d2:	00db      	lsls	r3, r3, #3
 80075d4:	b25a      	sxtb	r2, r3
 80075d6:	7bbb      	ldrb	r3, [r7, #14]
 80075d8:	b25b      	sxtb	r3, r3
 80075da:	4313      	orrs	r3, r2
 80075dc:	b25b      	sxtb	r3, r3
 80075de:	b2db      	uxtb	r3, r3
 80075e0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 80075e2:	f107 020e 	add.w	r2, r7, #14
 80075e6:	2301      	movs	r3, #1
 80075e8:	211b      	movs	r1, #27
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7fe fb0d 	bl	8005c0a <a_mpu6500_write>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d005      	beq.n	8007606 <mpu6500_set_gyroscope_range+0x8a>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075fe:	4805      	ldr	r0, [pc, #20]	@ (8007614 <mpu6500_set_gyroscope_range+0x98>)
 8007600:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8007606:	2300      	movs	r3, #0
}
 8007608:	4618      	mov	r0, r3
 800760a:	3710      	adds	r7, #16
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	080204b0 	.word	0x080204b0
 8007614:	080204d8 	.word	0x080204d8

08007618 <mpu6500_set_gyroscope_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 3
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	460b      	mov	r3, r1
 8007622:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <mpu6500_set_gyroscope_choice+0x16>
    {
        return 2;                                                                       /* return error */
 800762a:	2302      	movs	r3, #2
 800762c:	e03e      	b.n	80076ac <mpu6500_set_gyroscope_choice+0x94>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007634:	2b01      	cmp	r3, #1
 8007636:	d001      	beq.n	800763c <mpu6500_set_gyroscope_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8007638:	2303      	movs	r3, #3
 800763a:	e037      	b.n	80076ac <mpu6500_set_gyroscope_choice+0x94>
    }
    if (choice > 3)                                                                     /* check the choice */
 800763c:	78fb      	ldrb	r3, [r7, #3]
 800763e:	2b03      	cmp	r3, #3
 8007640:	d905      	bls.n	800764e <mpu6500_set_gyroscope_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 3.\n");                                  /* choice > 3 */
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007646:	481b      	ldr	r0, [pc, #108]	@ (80076b4 <mpu6500_set_gyroscope_choice+0x9c>)
 8007648:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 800764a:	2304      	movs	r3, #4
 800764c:	e02e      	b.n	80076ac <mpu6500_set_gyroscope_choice+0x94>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 800764e:	f107 020e 	add.w	r2, r7, #14
 8007652:	2301      	movs	r3, #1
 8007654:	211b      	movs	r1, #27
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f7fe faa6 	bl	8005ba8 <a_mpu6500_read>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d005      	beq.n	8007672 <mpu6500_set_gyroscope_choice+0x5a>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766a:	4813      	ldr	r0, [pc, #76]	@ (80076b8 <mpu6500_set_gyroscope_choice+0xa0>)
 800766c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800766e:	2301      	movs	r3, #1
 8007670:	e01c      	b.n	80076ac <mpu6500_set_gyroscope_choice+0x94>
    }
    prev &= ~(3 << 0);                                                                  /* clear config */
 8007672:	7bbb      	ldrb	r3, [r7, #14]
 8007674:	f023 0303 	bic.w	r3, r3, #3
 8007678:	b2db      	uxtb	r3, r3
 800767a:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 0;                                                                /* set config */
 800767c:	7bba      	ldrb	r2, [r7, #14]
 800767e:	78fb      	ldrb	r3, [r7, #3]
 8007680:	4313      	orrs	r3, r2
 8007682:	b2db      	uxtb	r3, r3
 8007684:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8007686:	f107 020e 	add.w	r2, r7, #14
 800768a:	2301      	movs	r3, #1
 800768c:	211b      	movs	r1, #27
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f7fe fabb 	bl	8005c0a <a_mpu6500_write>
 8007694:	4603      	mov	r3, r0
 8007696:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d005      	beq.n	80076aa <mpu6500_set_gyroscope_choice+0x92>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076a2:	4806      	ldr	r0, [pc, #24]	@ (80076bc <mpu6500_set_gyroscope_choice+0xa4>)
 80076a4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80076a6:	2301      	movs	r3, #1
 80076a8:	e000      	b.n	80076ac <mpu6500_set_gyroscope_choice+0x94>
    }
    
    return 0;                                                                           /* success return 0 */
 80076aa:	2300      	movs	r3, #0
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}
 80076b4:	08020504 	.word	0x08020504
 80076b8:	080204b0 	.word	0x080204b0
 80076bc:	080204d8 	.word	0x080204d8

080076c0 <mpu6500_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b084      	sub	sp, #16
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	460b      	mov	r3, r1
 80076ca:	70fb      	strb	r3, [r7, #3]
 80076cc:	4613      	mov	r3, r2
 80076ce:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d101      	bne.n	80076da <mpu6500_set_accelerometer_test+0x1a>
    {
        return 2;                                                                       /* return error */
 80076d6:	2302      	movs	r3, #2
 80076d8:	e043      	b.n	8007762 <mpu6500_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80076e0:	2b01      	cmp	r3, #1
 80076e2:	d001      	beq.n	80076e8 <mpu6500_set_accelerometer_test+0x28>
    {
        return 3;                                                                       /* return error */
 80076e4:	2303      	movs	r3, #3
 80076e6:	e03c      	b.n	8007762 <mpu6500_set_accelerometer_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 80076e8:	f107 020e 	add.w	r2, r7, #14
 80076ec:	2301      	movs	r3, #1
 80076ee:	211c      	movs	r1, #28
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f7fe fa59 	bl	8005ba8 <a_mpu6500_read>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80076fa:	7bfb      	ldrb	r3, [r7, #15]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d005      	beq.n	800770c <mpu6500_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007704:	4819      	ldr	r0, [pc, #100]	@ (800776c <mpu6500_set_accelerometer_test+0xac>)
 8007706:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007708:	2301      	movs	r3, #1
 800770a:	e02a      	b.n	8007762 <mpu6500_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	2201      	movs	r2, #1
 8007710:	fa02 f303 	lsl.w	r3, r2, r3
 8007714:	b25b      	sxtb	r3, r3
 8007716:	43db      	mvns	r3, r3
 8007718:	b25a      	sxtb	r2, r3
 800771a:	7bbb      	ldrb	r3, [r7, #14]
 800771c:	b25b      	sxtb	r3, r3
 800771e:	4013      	ands	r3, r2
 8007720:	b25b      	sxtb	r3, r3
 8007722:	b2db      	uxtb	r3, r3
 8007724:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8007726:	78ba      	ldrb	r2, [r7, #2]
 8007728:	78fb      	ldrb	r3, [r7, #3]
 800772a:	fa02 f303 	lsl.w	r3, r2, r3
 800772e:	b25a      	sxtb	r2, r3
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	b25b      	sxtb	r3, r3
 8007734:	4313      	orrs	r3, r2
 8007736:	b25b      	sxtb	r3, r3
 8007738:	b2db      	uxtb	r3, r3
 800773a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 800773c:	f107 020e 	add.w	r2, r7, #14
 8007740:	2301      	movs	r3, #1
 8007742:	211c      	movs	r1, #28
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f7fe fa60 	bl	8005c0a <a_mpu6500_write>
 800774a:	4603      	mov	r3, r0
 800774c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d005      	beq.n	8007760 <mpu6500_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007758:	4805      	ldr	r0, [pc, #20]	@ (8007770 <mpu6500_set_accelerometer_test+0xb0>)
 800775a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800775c:	2301      	movs	r3, #1
 800775e:	e000      	b.n	8007762 <mpu6500_set_accelerometer_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8007760:	2300      	movs	r3, #0
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	0801fe60 	.word	0x0801fe60
 8007770:	0802051c 	.word	0x0802051c

08007774 <mpu6500_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_range(mpu6500_handle_t *handle, mpu6500_accelerometer_range_t range)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b084      	sub	sp, #16
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
 800777c:	460b      	mov	r3, r1
 800777e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <mpu6500_set_accelerometer_range+0x16>
    {
        return 2;                                                                       /* return error */
 8007786:	2302      	movs	r3, #2
 8007788:	e03a      	b.n	8007800 <mpu6500_set_accelerometer_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007790:	2b01      	cmp	r3, #1
 8007792:	d001      	beq.n	8007798 <mpu6500_set_accelerometer_range+0x24>
    {
        return 3;                                                                       /* return error */
 8007794:	2303      	movs	r3, #3
 8007796:	e033      	b.n	8007800 <mpu6500_set_accelerometer_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8007798:	f107 020e 	add.w	r2, r7, #14
 800779c:	2301      	movs	r3, #1
 800779e:	211c      	movs	r1, #28
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f7fe fa01 	bl	8005ba8 <a_mpu6500_read>
 80077a6:	4603      	mov	r3, r0
 80077a8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80077aa:	7bfb      	ldrb	r3, [r7, #15]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <mpu6500_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077b4:	4814      	ldr	r0, [pc, #80]	@ (8007808 <mpu6500_set_accelerometer_range+0x94>)
 80077b6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80077b8:	2301      	movs	r3, #1
 80077ba:	e021      	b.n	8007800 <mpu6500_set_accelerometer_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 80077bc:	7bbb      	ldrb	r3, [r7, #14]
 80077be:	f023 0318 	bic.w	r3, r3, #24
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 80077c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	b25a      	sxtb	r2, r3
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	b25b      	sxtb	r3, r3
 80077d2:	4313      	orrs	r3, r2
 80077d4:	b25b      	sxtb	r3, r3
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 80077da:	f107 020e 	add.w	r2, r7, #14
 80077de:	2301      	movs	r3, #1
 80077e0:	211c      	movs	r1, #28
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7fe fa11 	bl	8005c0a <a_mpu6500_write>
 80077e8:	4603      	mov	r3, r0
 80077ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80077ec:	7bfb      	ldrb	r3, [r7, #15]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d005      	beq.n	80077fe <mpu6500_set_accelerometer_range+0x8a>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077f6:	4805      	ldr	r0, [pc, #20]	@ (800780c <mpu6500_set_accelerometer_range+0x98>)
 80077f8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <mpu6500_set_accelerometer_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	0801fe60 	.word	0x0801fe60
 800780c:	0802051c 	.word	0x0802051c

08007810 <mpu6500_set_fifo_1024kb>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_1024kb(mpu6500_handle_t *handle)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <mpu6500_set_fifo_1024kb+0x12>
    {
        return 2;                                                                         /* return error */
 800781e:	2302      	movs	r3, #2
 8007820:	e035      	b.n	800788e <mpu6500_set_fifo_1024kb+0x7e>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007828:	2b01      	cmp	r3, #1
 800782a:	d001      	beq.n	8007830 <mpu6500_set_fifo_1024kb+0x20>
    {
        return 3;                                                                         /* return error */
 800782c:	2303      	movs	r3, #3
 800782e:	e02e      	b.n	800788e <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8007830:	f107 020e 	add.w	r2, r7, #14
 8007834:	2301      	movs	r3, #1
 8007836:	211d      	movs	r1, #29
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f7fe f9b5 	bl	8005ba8 <a_mpu6500_read>
 800783e:	4603      	mov	r3, r0
 8007840:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8007842:	7bfb      	ldrb	r3, [r7, #15]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d005      	beq.n	8007854 <mpu6500_set_fifo_1024kb+0x44>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800784c:	4812      	ldr	r0, [pc, #72]	@ (8007898 <mpu6500_set_fifo_1024kb+0x88>)
 800784e:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8007850:	2301      	movs	r3, #1
 8007852:	e01c      	b.n	800788e <mpu6500_set_fifo_1024kb+0x7e>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800785a:	b2db      	uxtb	r3, r3
 800785c:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 6;                                                                       /* set config */
 800785e:	7bbb      	ldrb	r3, [r7, #14]
 8007860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007864:	b2db      	uxtb	r3, r3
 8007866:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8007868:	f107 020e 	add.w	r2, r7, #14
 800786c:	2301      	movs	r3, #1
 800786e:	211d      	movs	r1, #29
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7fe f9ca 	bl	8005c0a <a_mpu6500_write>
 8007876:	4603      	mov	r3, r0
 8007878:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800787a:	7bfb      	ldrb	r3, [r7, #15]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d005      	beq.n	800788c <mpu6500_set_fifo_1024kb+0x7c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007884:	4805      	ldr	r0, [pc, #20]	@ (800789c <mpu6500_set_fifo_1024kb+0x8c>)
 8007886:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8007888:	2301      	movs	r3, #1
 800788a:	e000      	b.n	800788e <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    return 0;                                                                             /* success return 0 */
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
 8007896:	bf00      	nop
 8007898:	0802054c 	.word	0x0802054c
 800789c:	0802057c 	.word	0x0802057c

080078a0 <mpu6500_set_accelerometer_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 1
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b084      	sub	sp, #16
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
 80078a8:	460b      	mov	r3, r1
 80078aa:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d101      	bne.n	80078b6 <mpu6500_set_accelerometer_choice+0x16>
    {
        return 2;                                                                       /* return error */
 80078b2:	2302      	movs	r3, #2
 80078b4:	e043      	b.n	800793e <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d001      	beq.n	80078c4 <mpu6500_set_accelerometer_choice+0x24>
    {
        return 3;                                                                       /* return error */
 80078c0:	2303      	movs	r3, #3
 80078c2:	e03c      	b.n	800793e <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (choice > 1)                                                                     /* check the choice */
 80078c4:	78fb      	ldrb	r3, [r7, #3]
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	d905      	bls.n	80078d6 <mpu6500_set_accelerometer_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 1.\n");                                  /* choice > 1 */
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078ce:	481e      	ldr	r0, [pc, #120]	@ (8007948 <mpu6500_set_accelerometer_choice+0xa8>)
 80078d0:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 80078d2:	2304      	movs	r3, #4
 80078d4:	e033      	b.n	800793e <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);       /* read accelerometer config */
 80078d6:	f107 020e 	add.w	r2, r7, #14
 80078da:	2301      	movs	r3, #1
 80078dc:	211d      	movs	r1, #29
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f7fe f962 	bl	8005ba8 <a_mpu6500_read>
 80078e4:	4603      	mov	r3, r0
 80078e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80078e8:	7bfb      	ldrb	r3, [r7, #15]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d005      	beq.n	80078fa <mpu6500_set_accelerometer_choice+0x5a>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");          /* read accelerometer 2 config failed */
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078f2:	4816      	ldr	r0, [pc, #88]	@ (800794c <mpu6500_set_accelerometer_choice+0xac>)
 80078f4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80078f6:	2301      	movs	r3, #1
 80078f8:	e021      	b.n	800793e <mpu6500_set_accelerometer_choice+0x9e>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	f023 0308 	bic.w	r3, r3, #8
 8007900:	b2db      	uxtb	r3, r3
 8007902:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 3;                                                                /* set config */
 8007904:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007908:	00db      	lsls	r3, r3, #3
 800790a:	b25a      	sxtb	r2, r3
 800790c:	7bbb      	ldrb	r3, [r7, #14]
 800790e:	b25b      	sxtb	r3, r3
 8007910:	4313      	orrs	r3, r2
 8007912:	b25b      	sxtb	r3, r3
 8007914:	b2db      	uxtb	r3, r3
 8007916:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);      /* write accelerometer config */
 8007918:	f107 020e 	add.w	r2, r7, #14
 800791c:	2301      	movs	r3, #1
 800791e:	211d      	movs	r1, #29
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7fe f972 	bl	8005c0a <a_mpu6500_write>
 8007926:	4603      	mov	r3, r0
 8007928:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800792a:	7bfb      	ldrb	r3, [r7, #15]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <mpu6500_set_accelerometer_choice+0x9c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");         /* write accelerometer 2 config failed */
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007934:	4806      	ldr	r0, [pc, #24]	@ (8007950 <mpu6500_set_accelerometer_choice+0xb0>)
 8007936:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007938:	2301      	movs	r3, #1
 800793a:	e000      	b.n	800793e <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    return 0;                                                                           /* success return 0 */
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	080205ac 	.word	0x080205ac
 800794c:	0802054c 	.word	0x0802054c
 8007950:	0802057c 	.word	0x0802057c

08007954 <mpu6500_set_accelerometer_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_low_pass_filter(mpu6500_handle_t *handle, mpu6500_accelerometer_low_pass_filter_t filter)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b084      	sub	sp, #16
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	460b      	mov	r3, r1
 800795e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <mpu6500_set_accelerometer_low_pass_filter+0x16>
    {
        return 2;                                                                         /* return error */
 8007966:	2302      	movs	r3, #2
 8007968:	e035      	b.n	80079d6 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007970:	2b01      	cmp	r3, #1
 8007972:	d001      	beq.n	8007978 <mpu6500_set_accelerometer_low_pass_filter+0x24>
    {
        return 3;                                                                         /* return error */
 8007974:	2303      	movs	r3, #3
 8007976:	e02e      	b.n	80079d6 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8007978:	f107 020e 	add.w	r2, r7, #14
 800797c:	2301      	movs	r3, #1
 800797e:	211d      	movs	r1, #29
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7fe f911 	bl	8005ba8 <a_mpu6500_read>
 8007986:	4603      	mov	r3, r0
 8007988:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800798a:	7bfb      	ldrb	r3, [r7, #15]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d005      	beq.n	800799c <mpu6500_set_accelerometer_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007994:	4812      	ldr	r0, [pc, #72]	@ (80079e0 <mpu6500_set_accelerometer_low_pass_filter+0x8c>)
 8007996:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8007998:	2301      	movs	r3, #1
 800799a:	e01c      	b.n	80079d6 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                                  /* clear config */
 800799c:	7bbb      	ldrb	r3, [r7, #14]
 800799e:	f023 0307 	bic.w	r3, r3, #7
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                                  /* set config */
 80079a6:	7bba      	ldrb	r2, [r7, #14]
 80079a8:	78fb      	ldrb	r3, [r7, #3]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 80079b0:	f107 020e 	add.w	r2, r7, #14
 80079b4:	2301      	movs	r3, #1
 80079b6:	211d      	movs	r1, #29
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	f7fe f926 	bl	8005c0a <a_mpu6500_write>
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d005      	beq.n	80079d4 <mpu6500_set_accelerometer_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079cc:	4805      	ldr	r0, [pc, #20]	@ (80079e4 <mpu6500_set_accelerometer_low_pass_filter+0x90>)
 80079ce:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80079d0:	2301      	movs	r3, #1
 80079d2:	e000      	b.n	80079d6 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    return 0;                                                                             /* success return 0 */
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3710      	adds	r7, #16
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	0802054c 	.word	0x0802054c
 80079e4:	0802057c 	.word	0x0802057c

080079e8 <mpu6500_set_low_power_accel_output_rate>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_power_accel_output_rate(mpu6500_handle_t *handle, mpu6500_low_power_accel_output_rate_t rate)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b084      	sub	sp, #16
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
 80079f0:	460b      	mov	r3, r1
 80079f2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                  /* check handle */
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <mpu6500_set_low_power_accel_output_rate+0x16>
    {
        return 2;                                                                        /* return error */
 80079fa:	2302      	movs	r3, #2
 80079fc:	e035      	b.n	8007a6a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d001      	beq.n	8007a0c <mpu6500_set_low_power_accel_output_rate+0x24>
    {
        return 3;                                                                        /* return error */
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e02e      	b.n	8007a6a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);         /* read config */
 8007a0c:	f107 020e 	add.w	r2, r7, #14
 8007a10:	2301      	movs	r3, #1
 8007a12:	211e      	movs	r1, #30
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f7fe f8c7 	bl	8005ba8 <a_mpu6500_read>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007a1e:	7bfb      	ldrb	r3, [r7, #15]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d005      	beq.n	8007a30 <mpu6500_set_low_power_accel_output_rate+0x48>
    {
        handle->debug_print("mpu6500: read lp accelerometer odr failed.\n");             /* read lp accelerometer odr failed */
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a28:	4812      	ldr	r0, [pc, #72]	@ (8007a74 <mpu6500_set_low_power_accel_output_rate+0x8c>)
 8007a2a:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8007a2c:	2301      	movs	r3, #1
 8007a2e:	e01c      	b.n	8007a6a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    prev &= ~(0xF << 0);                                                                 /* clear config */
 8007a30:	7bbb      	ldrb	r3, [r7, #14]
 8007a32:	f023 030f 	bic.w	r3, r3, #15
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	73bb      	strb	r3, [r7, #14]
    prev |= rate << 0;                                                                   /* set config */
 8007a3a:	7bba      	ldrb	r2, [r7, #14]
 8007a3c:	78fb      	ldrb	r3, [r7, #3]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);        /* write config */
 8007a44:	f107 020e 	add.w	r2, r7, #14
 8007a48:	2301      	movs	r3, #1
 8007a4a:	211e      	movs	r1, #30
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f7fe f8dc 	bl	8005c0a <a_mpu6500_write>
 8007a52:	4603      	mov	r3, r0
 8007a54:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007a56:	7bfb      	ldrb	r3, [r7, #15]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d005      	beq.n	8007a68 <mpu6500_set_low_power_accel_output_rate+0x80>
    {
        handle->debug_print("mpu6500: write lp accelerometer odr failed.\n");            /* write lp accelerometer odr failed */
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a60:	4805      	ldr	r0, [pc, #20]	@ (8007a78 <mpu6500_set_low_power_accel_output_rate+0x90>)
 8007a62:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8007a64:	2301      	movs	r3, #1
 8007a66:	e000      	b.n	8007a6a <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    return 0;                                                                            /* success return 0 */
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3710      	adds	r7, #16
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	080205c4 	.word	0x080205c4
 8007a78:	080205f0 	.word	0x080205f0

08007a7c <mpu6500_set_wake_on_motion>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_wake_on_motion(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b084      	sub	sp, #16
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	460b      	mov	r3, r1
 8007a86:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d101      	bne.n	8007a92 <mpu6500_set_wake_on_motion+0x16>
    {
        return 2;                                                                           /* return error */
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e03a      	b.n	8007b08 <mpu6500_set_wake_on_motion+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d001      	beq.n	8007aa0 <mpu6500_set_wake_on_motion+0x24>
    {
        return 3;                                                                           /* return error */
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e033      	b.n	8007b08 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8007aa0:	f107 020e 	add.w	r2, r7, #14
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	2169      	movs	r1, #105	@ 0x69
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7fe f87d 	bl	8005ba8 <a_mpu6500_read>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007ab2:	7bfb      	ldrb	r3, [r7, #15]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d005      	beq.n	8007ac4 <mpu6500_set_wake_on_motion+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007abc:	4814      	ldr	r0, [pc, #80]	@ (8007b10 <mpu6500_set_wake_on_motion+0x94>)
 8007abe:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e021      	b.n	8007b08 <mpu6500_set_wake_on_motion+0x8c>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
 8007ac6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 7;                                                                    /* set config */
 8007ace:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ad2:	01db      	lsls	r3, r3, #7
 8007ad4:	b25a      	sxtb	r2, r3
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	b25b      	sxtb	r3, r3
 8007ada:	4313      	orrs	r3, r2
 8007adc:	b25b      	sxtb	r3, r3
 8007ade:	b2db      	uxtb	r3, r3
 8007ae0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 8007ae2:	f107 020e 	add.w	r2, r7, #14
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	2169      	movs	r1, #105	@ 0x69
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f7fe f88d 	bl	8005c0a <a_mpu6500_write>
 8007af0:	4603      	mov	r3, r0
 8007af2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d005      	beq.n	8007b06 <mpu6500_set_wake_on_motion+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007afe:	4805      	ldr	r0, [pc, #20]	@ (8007b14 <mpu6500_set_wake_on_motion+0x98>)
 8007b00:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8007b02:	2301      	movs	r3, #1
 8007b04:	e000      	b.n	8007b08 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 8007b06:	2300      	movs	r3, #0
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3710      	adds	r7, #16
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	bd80      	pop	{r7, pc}
 8007b10:	08020620 	.word	0x08020620
 8007b14:	0802064c 	.word	0x0802064c

08007b18 <mpu6500_set_accel_compare_with_previous_sample>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accel_compare_with_previous_sample(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <mpu6500_set_accel_compare_with_previous_sample+0x16>
    {
        return 2;                                                                           /* return error */
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	e03a      	b.n	8007ba4 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d001      	beq.n	8007b3c <mpu6500_set_accel_compare_with_previous_sample+0x24>
    {
        return 3;                                                                           /* return error */
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e033      	b.n	8007ba4 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8007b3c:	f107 020e 	add.w	r2, r7, #14
 8007b40:	2301      	movs	r3, #1
 8007b42:	2169      	movs	r1, #105	@ 0x69
 8007b44:	6878      	ldr	r0, [r7, #4]
 8007b46:	f7fe f82f 	bl	8005ba8 <a_mpu6500_read>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007b4e:	7bfb      	ldrb	r3, [r7, #15]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d005      	beq.n	8007b60 <mpu6500_set_accel_compare_with_previous_sample+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b58:	4814      	ldr	r0, [pc, #80]	@ (8007bac <mpu6500_set_accel_compare_with_previous_sample+0x94>)
 8007b5a:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e021      	b.n	8007ba4 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 8007b60:	7bbb      	ldrb	r3, [r7, #14]
 8007b62:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b66:	b2db      	uxtb	r3, r3
 8007b68:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                    /* set config */
 8007b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b6e:	019b      	lsls	r3, r3, #6
 8007b70:	b25a      	sxtb	r2, r3
 8007b72:	7bbb      	ldrb	r3, [r7, #14]
 8007b74:	b25b      	sxtb	r3, r3
 8007b76:	4313      	orrs	r3, r2
 8007b78:	b25b      	sxtb	r3, r3
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 8007b7e:	f107 020e 	add.w	r2, r7, #14
 8007b82:	2301      	movs	r3, #1
 8007b84:	2169      	movs	r1, #105	@ 0x69
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f7fe f83f 	bl	8005c0a <a_mpu6500_write>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d005      	beq.n	8007ba2 <mpu6500_set_accel_compare_with_previous_sample+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b9a:	4805      	ldr	r0, [pc, #20]	@ (8007bb0 <mpu6500_set_accel_compare_with_previous_sample+0x98>)
 8007b9c:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e000      	b.n	8007ba4 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3710      	adds	r7, #16
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	bd80      	pop	{r7, pc}
 8007bac:	08020620 	.word	0x08020620
 8007bb0:	0802064c 	.word	0x0802064c

08007bb4 <mpu6500_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_enable(mpu6500_handle_t *handle, mpu6500_fifo_t fifo, mpu6500_bool_t enable)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	70fb      	strb	r3, [r7, #3]
 8007bc0:	4613      	mov	r3, r2
 8007bc2:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d101      	bne.n	8007bce <mpu6500_set_fifo_enable+0x1a>
    {
        return 2;                                                                   /* return error */
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e043      	b.n	8007c56 <mpu6500_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d001      	beq.n	8007bdc <mpu6500_set_fifo_enable+0x28>
    {
        return 3;                                                                   /* return error */
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e03c      	b.n	8007c56 <mpu6500_set_fifo_enable+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 8007bdc:	f107 020e 	add.w	r2, r7, #14
 8007be0:	2301      	movs	r3, #1
 8007be2:	2123      	movs	r1, #35	@ 0x23
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f7fd ffdf 	bl	8005ba8 <a_mpu6500_read>
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d005      	beq.n	8007c00 <mpu6500_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6500: read fifo enable config failed.\n");          /* read fifo enable config failed */
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bf8:	4819      	ldr	r0, [pc, #100]	@ (8007c60 <mpu6500_set_fifo_enable+0xac>)
 8007bfa:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e02a      	b.n	8007c56 <mpu6500_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                           /* clear config */
 8007c00:	78fb      	ldrb	r3, [r7, #3]
 8007c02:	2201      	movs	r2, #1
 8007c04:	fa02 f303 	lsl.w	r3, r2, r3
 8007c08:	b25b      	sxtb	r3, r3
 8007c0a:	43db      	mvns	r3, r3
 8007c0c:	b25a      	sxtb	r2, r3
 8007c0e:	7bbb      	ldrb	r3, [r7, #14]
 8007c10:	b25b      	sxtb	r3, r3
 8007c12:	4013      	ands	r3, r2
 8007c14:	b25b      	sxtb	r3, r3
 8007c16:	b2db      	uxtb	r3, r3
 8007c18:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                         /* set config */
 8007c1a:	78ba      	ldrb	r2, [r7, #2]
 8007c1c:	78fb      	ldrb	r3, [r7, #3]
 8007c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c22:	b25a      	sxtb	r2, r3
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
 8007c26:	b25b      	sxtb	r3, r3
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	b25b      	sxtb	r3, r3
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 8007c30:	f107 020e 	add.w	r2, r7, #14
 8007c34:	2301      	movs	r3, #1
 8007c36:	2123      	movs	r1, #35	@ 0x23
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f7fd ffe6 	bl	8005c0a <a_mpu6500_write>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 8007c42:	7bfb      	ldrb	r3, [r7, #15]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d005      	beq.n	8007c54 <mpu6500_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6500: write fifo enable config failed.\n");         /* write fifo enable config failed */
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c4c:	4805      	ldr	r0, [pc, #20]	@ (8007c64 <mpu6500_set_fifo_enable+0xb0>)
 8007c4e:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8007c50:	2301      	movs	r3, #1
 8007c52:	e000      	b.n	8007c56 <mpu6500_set_fifo_enable+0xa2>
    }
    
    return 0;                                                                       /* success return 0 */
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
 8007c5e:	bf00      	nop
 8007c60:	08020678 	.word	0x08020678
 8007c64:	080206a4 	.word	0x080206a4

08007c68 <mpu6500_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	460b      	mov	r3, r1
 8007c72:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d101      	bne.n	8007c7e <mpu6500_set_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e03a      	b.n	8007cf4 <mpu6500_set_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d001      	beq.n	8007c8c <mpu6500_set_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8007c88:	2303      	movs	r3, #3
 8007c8a:	e033      	b.n	8007cf4 <mpu6500_set_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007c8c:	f107 020e 	add.w	r2, r7, #14
 8007c90:	2301      	movs	r3, #1
 8007c92:	2137      	movs	r1, #55	@ 0x37
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f7fd ff87 	bl	8005ba8 <a_mpu6500_read>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <mpu6500_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ca8:	4814      	ldr	r0, [pc, #80]	@ (8007cfc <mpu6500_set_interrupt_level+0x94>)
 8007caa:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007cac:	2301      	movs	r3, #1
 8007cae:	e021      	b.n	8007cf4 <mpu6500_set_interrupt_level+0x8c>
    }
    prev &= ~(1 << 7);                                                                  /* clear config */
 8007cb0:	7bbb      	ldrb	r3, [r7, #14]
 8007cb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                 /* set config */
 8007cba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cbe:	01db      	lsls	r3, r3, #7
 8007cc0:	b25a      	sxtb	r2, r3
 8007cc2:	7bbb      	ldrb	r3, [r7, #14]
 8007cc4:	b25b      	sxtb	r3, r3
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	b25b      	sxtb	r3, r3
 8007cca:	b2db      	uxtb	r3, r3
 8007ccc:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007cce:	f107 020e 	add.w	r2, r7, #14
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	2137      	movs	r1, #55	@ 0x37
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fd ff97 	bl	8005c0a <a_mpu6500_write>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d005      	beq.n	8007cf2 <mpu6500_set_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007cea:	4805      	ldr	r0, [pc, #20]	@ (8007d00 <mpu6500_set_interrupt_level+0x98>)
 8007cec:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e000      	b.n	8007cf4 <mpu6500_set_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3710      	adds	r7, #16
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	080206d0 	.word	0x080206d0
 8007d00:	080206f8 	.word	0x080206f8

08007d04 <mpu6500_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_pin_type(mpu6500_handle_t *handle, mpu6500_pin_type_t type)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
 8007d0c:	460b      	mov	r3, r1
 8007d0e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <mpu6500_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                       /* return error */
 8007d16:	2302      	movs	r3, #2
 8007d18:	e03a      	b.n	8007d90 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d001      	beq.n	8007d28 <mpu6500_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                       /* return error */
 8007d24:	2303      	movs	r3, #3
 8007d26:	e033      	b.n	8007d90 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007d28:	f107 020e 	add.w	r2, r7, #14
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	2137      	movs	r1, #55	@ 0x37
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f7fd ff39 	bl	8005ba8 <a_mpu6500_read>
 8007d36:	4603      	mov	r3, r0
 8007d38:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d005      	beq.n	8007d4c <mpu6500_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d44:	4814      	ldr	r0, [pc, #80]	@ (8007d98 <mpu6500_set_interrupt_pin_type+0x94>)
 8007d46:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007d48:	2301      	movs	r3, #1
 8007d4a:	e021      	b.n	8007d90 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    prev &= ~(1 << 6);                                                                  /* clear config */
 8007d4c:	7bbb      	ldrb	r3, [r7, #14]
 8007d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d52:	b2db      	uxtb	r3, r3
 8007d54:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                  /* set config */
 8007d56:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d5a:	019b      	lsls	r3, r3, #6
 8007d5c:	b25a      	sxtb	r2, r3
 8007d5e:	7bbb      	ldrb	r3, [r7, #14]
 8007d60:	b25b      	sxtb	r3, r3
 8007d62:	4313      	orrs	r3, r2
 8007d64:	b25b      	sxtb	r3, r3
 8007d66:	b2db      	uxtb	r3, r3
 8007d68:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007d6a:	f107 020e 	add.w	r2, r7, #14
 8007d6e:	2301      	movs	r3, #1
 8007d70:	2137      	movs	r1, #55	@ 0x37
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fd ff49 	bl	8005c0a <a_mpu6500_write>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007d7c:	7bfb      	ldrb	r3, [r7, #15]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d005      	beq.n	8007d8e <mpu6500_set_interrupt_pin_type+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d86:	4805      	ldr	r0, [pc, #20]	@ (8007d9c <mpu6500_set_interrupt_pin_type+0x98>)
 8007d88:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e000      	b.n	8007d90 <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	080206d0 	.word	0x080206d0
 8007d9c:	080206f8 	.word	0x080206f8

08007da0 <mpu6500_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_latch(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b084      	sub	sp, #16
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	460b      	mov	r3, r1
 8007daa:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d101      	bne.n	8007db6 <mpu6500_set_interrupt_latch+0x16>
    {
        return 2;                                                                       /* return error */
 8007db2:	2302      	movs	r3, #2
 8007db4:	e03c      	b.n	8007e30 <mpu6500_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007dbc:	2b01      	cmp	r3, #1
 8007dbe:	d001      	beq.n	8007dc4 <mpu6500_set_interrupt_latch+0x24>
    {
        return 3;                                                                       /* return error */
 8007dc0:	2303      	movs	r3, #3
 8007dc2:	e035      	b.n	8007e30 <mpu6500_set_interrupt_latch+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007dc4:	f107 020e 	add.w	r2, r7, #14
 8007dc8:	2301      	movs	r3, #1
 8007dca:	2137      	movs	r1, #55	@ 0x37
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f7fd feeb 	bl	8005ba8 <a_mpu6500_read>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007dd6:	7bfb      	ldrb	r3, [r7, #15]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d005      	beq.n	8007de8 <mpu6500_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007de0:	4815      	ldr	r0, [pc, #84]	@ (8007e38 <mpu6500_set_interrupt_latch+0x98>)
 8007de2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007de4:	2301      	movs	r3, #1
 8007de6:	e023      	b.n	8007e30 <mpu6500_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                  /* clear config */
 8007de8:	7bbb      	ldrb	r3, [r7, #14]
 8007dea:	f023 0320 	bic.w	r3, r3, #32
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                             /* set config */
 8007df2:	78fb      	ldrb	r3, [r7, #3]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d101      	bne.n	8007dfc <mpu6500_set_interrupt_latch+0x5c>
 8007df8:	2220      	movs	r2, #32
 8007dfa:	e000      	b.n	8007dfe <mpu6500_set_interrupt_latch+0x5e>
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	7bbb      	ldrb	r3, [r7, #14]
 8007e00:	b25b      	sxtb	r3, r3
 8007e02:	4313      	orrs	r3, r2
 8007e04:	b25b      	sxtb	r3, r3
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007e0a:	f107 020e 	add.w	r2, r7, #14
 8007e0e:	2301      	movs	r3, #1
 8007e10:	2137      	movs	r1, #55	@ 0x37
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7fd fef9 	bl	8005c0a <a_mpu6500_write>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007e1c:	7bfb      	ldrb	r3, [r7, #15]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d005      	beq.n	8007e2e <mpu6500_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e26:	4805      	ldr	r0, [pc, #20]	@ (8007e3c <mpu6500_set_interrupt_latch+0x9c>)
 8007e28:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <mpu6500_set_interrupt_latch+0x90>
    }
    
    return 0;                                                                           /* success return 0 */
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	080206d0 	.word	0x080206d0
 8007e3c:	080206f8 	.word	0x080206f8

08007e40 <mpu6500_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_read_clear(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	460b      	mov	r3, r1
 8007e4a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d101      	bne.n	8007e56 <mpu6500_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                       /* return error */
 8007e52:	2302      	movs	r3, #2
 8007e54:	e03a      	b.n	8007ecc <mpu6500_set_interrupt_read_clear+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007e5c:	2b01      	cmp	r3, #1
 8007e5e:	d001      	beq.n	8007e64 <mpu6500_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                       /* return error */
 8007e60:	2303      	movs	r3, #3
 8007e62:	e033      	b.n	8007ecc <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007e64:	f107 020e 	add.w	r2, r7, #14
 8007e68:	2301      	movs	r3, #1
 8007e6a:	2137      	movs	r1, #55	@ 0x37
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f7fd fe9b 	bl	8005ba8 <a_mpu6500_read>
 8007e72:	4603      	mov	r3, r0
 8007e74:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007e76:	7bfb      	ldrb	r3, [r7, #15]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <mpu6500_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e80:	4814      	ldr	r0, [pc, #80]	@ (8007ed4 <mpu6500_set_interrupt_read_clear+0x94>)
 8007e82:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007e84:	2301      	movs	r3, #1
 8007e86:	e021      	b.n	8007ecc <mpu6500_set_interrupt_read_clear+0x8c>
    }
    prev &= ~(1 << 4);                                                                  /* clear config */
 8007e88:	7bbb      	ldrb	r3, [r7, #14]
 8007e8a:	f023 0310 	bic.w	r3, r3, #16
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                /* set config */
 8007e92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e96:	011b      	lsls	r3, r3, #4
 8007e98:	b25a      	sxtb	r2, r3
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	b25b      	sxtb	r3, r3
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	b25b      	sxtb	r3, r3
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007ea6:	f107 020e 	add.w	r2, r7, #14
 8007eaa:	2301      	movs	r3, #1
 8007eac:	2137      	movs	r1, #55	@ 0x37
 8007eae:	6878      	ldr	r0, [r7, #4]
 8007eb0:	f7fd feab 	bl	8005c0a <a_mpu6500_write>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007eb8:	7bfb      	ldrb	r3, [r7, #15]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d005      	beq.n	8007eca <mpu6500_set_interrupt_read_clear+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ec2:	4805      	ldr	r0, [pc, #20]	@ (8007ed8 <mpu6500_set_interrupt_read_clear+0x98>)
 8007ec4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e000      	b.n	8007ecc <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	080206d0 	.word	0x080206d0
 8007ed8:	080206f8 	.word	0x080206f8

08007edc <mpu6500_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d101      	bne.n	8007ef2 <mpu6500_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 8007eee:	2302      	movs	r3, #2
 8007ef0:	e03a      	b.n	8007f68 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d001      	beq.n	8007f00 <mpu6500_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8007efc:	2303      	movs	r3, #3
 8007efe:	e033      	b.n	8007f68 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007f00:	f107 020e 	add.w	r2, r7, #14
 8007f04:	2301      	movs	r3, #1
 8007f06:	2137      	movs	r1, #55	@ 0x37
 8007f08:	6878      	ldr	r0, [r7, #4]
 8007f0a:	f7fd fe4d 	bl	8005ba8 <a_mpu6500_read>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007f12:	7bfb      	ldrb	r3, [r7, #15]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d005      	beq.n	8007f24 <mpu6500_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f1c:	4814      	ldr	r0, [pc, #80]	@ (8007f70 <mpu6500_set_fsync_interrupt_level+0x94>)
 8007f1e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007f20:	2301      	movs	r3, #1
 8007f22:	e021      	b.n	8007f68 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8007f24:	7bbb      	ldrb	r3, [r7, #14]
 8007f26:	f023 0308 	bic.w	r3, r3, #8
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                 /* set config */
 8007f2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	b25a      	sxtb	r2, r3
 8007f36:	7bbb      	ldrb	r3, [r7, #14]
 8007f38:	b25b      	sxtb	r3, r3
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	b25b      	sxtb	r3, r3
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007f42:	f107 020e 	add.w	r2, r7, #14
 8007f46:	2301      	movs	r3, #1
 8007f48:	2137      	movs	r1, #55	@ 0x37
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7fd fe5d 	bl	8005c0a <a_mpu6500_write>
 8007f50:	4603      	mov	r3, r0
 8007f52:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007f54:	7bfb      	ldrb	r3, [r7, #15]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <mpu6500_set_fsync_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f5e:	4805      	ldr	r0, [pc, #20]	@ (8007f74 <mpu6500_set_fsync_interrupt_level+0x98>)
 8007f60:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007f62:	2301      	movs	r3, #1
 8007f64:	e000      	b.n	8007f68 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8007f66:	2300      	movs	r3, #0
}
 8007f68:	4618      	mov	r0, r3
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	080206d0 	.word	0x080206d0
 8007f74:	080206f8 	.word	0x080206f8

08007f78 <mpu6500_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	460b      	mov	r3, r1
 8007f82:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d101      	bne.n	8007f8e <mpu6500_set_fsync_interrupt+0x16>
    {
        return 2;                                                                       /* return error */
 8007f8a:	2302      	movs	r3, #2
 8007f8c:	e03a      	b.n	8008004 <mpu6500_set_fsync_interrupt+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d001      	beq.n	8007f9c <mpu6500_set_fsync_interrupt+0x24>
    {
        return 3;                                                                       /* return error */
 8007f98:	2303      	movs	r3, #3
 8007f9a:	e033      	b.n	8008004 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007f9c:	f107 020e 	add.w	r2, r7, #14
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	2137      	movs	r1, #55	@ 0x37
 8007fa4:	6878      	ldr	r0, [r7, #4]
 8007fa6:	f7fd fdff 	bl	8005ba8 <a_mpu6500_read>
 8007faa:	4603      	mov	r3, r0
 8007fac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d005      	beq.n	8007fc0 <mpu6500_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fb8:	4814      	ldr	r0, [pc, #80]	@ (800800c <mpu6500_set_fsync_interrupt+0x94>)
 8007fba:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e021      	b.n	8008004 <mpu6500_set_fsync_interrupt+0x8c>
    }
    prev &= ~(1 << 2);                                                                  /* clear config */
 8007fc0:	7bbb      	ldrb	r3, [r7, #14]
 8007fc2:	f023 0304 	bic.w	r3, r3, #4
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                /* set config */
 8007fca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	b25a      	sxtb	r2, r3
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	b25b      	sxtb	r3, r3
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	b25b      	sxtb	r3, r3
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007fde:	f107 020e 	add.w	r2, r7, #14
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	2137      	movs	r1, #55	@ 0x37
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f7fd fe0f 	bl	8005c0a <a_mpu6500_write>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d005      	beq.n	8008002 <mpu6500_set_fsync_interrupt+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ffa:	4805      	ldr	r0, [pc, #20]	@ (8008010 <mpu6500_set_fsync_interrupt+0x98>)
 8007ffc:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	080206d0 	.word	0x080206d0
 8008010:	080206f8 	.word	0x080206f8

08008014 <mpu6500_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_bypass(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <mpu6500_set_iic_bypass+0x16>
    {
        return 2;                                                                       /* return error */
 8008026:	2302      	movs	r3, #2
 8008028:	e03a      	b.n	80080a0 <mpu6500_set_iic_bypass+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008030:	2b01      	cmp	r3, #1
 8008032:	d001      	beq.n	8008038 <mpu6500_set_iic_bypass+0x24>
    {
        return 3;                                                                       /* return error */
 8008034:	2303      	movs	r3, #3
 8008036:	e033      	b.n	80080a0 <mpu6500_set_iic_bypass+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 8008038:	f107 020e 	add.w	r2, r7, #14
 800803c:	2301      	movs	r3, #1
 800803e:	2137      	movs	r1, #55	@ 0x37
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7fd fdb1 	bl	8005ba8 <a_mpu6500_read>
 8008046:	4603      	mov	r3, r0
 8008048:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800804a:	7bfb      	ldrb	r3, [r7, #15]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d005      	beq.n	800805c <mpu6500_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008054:	4814      	ldr	r0, [pc, #80]	@ (80080a8 <mpu6500_set_iic_bypass+0x94>)
 8008056:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8008058:	2301      	movs	r3, #1
 800805a:	e021      	b.n	80080a0 <mpu6500_set_iic_bypass+0x8c>
    }
    prev &= ~(1 << 1);                                                                  /* clear config */
 800805c:	7bbb      	ldrb	r3, [r7, #14]
 800805e:	f023 0302 	bic.w	r3, r3, #2
 8008062:	b2db      	uxtb	r3, r3
 8008064:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                /* set config */
 8008066:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800806a:	005b      	lsls	r3, r3, #1
 800806c:	b25a      	sxtb	r2, r3
 800806e:	7bbb      	ldrb	r3, [r7, #14]
 8008070:	b25b      	sxtb	r3, r3
 8008072:	4313      	orrs	r3, r2
 8008074:	b25b      	sxtb	r3, r3
 8008076:	b2db      	uxtb	r3, r3
 8008078:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800807a:	f107 020e 	add.w	r2, r7, #14
 800807e:	2301      	movs	r3, #1
 8008080:	2137      	movs	r1, #55	@ 0x37
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f7fd fdc1 	bl	8005c0a <a_mpu6500_write>
 8008088:	4603      	mov	r3, r0
 800808a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800808c:	7bfb      	ldrb	r3, [r7, #15]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d005      	beq.n	800809e <mpu6500_set_iic_bypass+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008096:	4805      	ldr	r0, [pc, #20]	@ (80080ac <mpu6500_set_iic_bypass+0x98>)
 8008098:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800809a:	2301      	movs	r3, #1
 800809c:	e000      	b.n	80080a0 <mpu6500_set_iic_bypass+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3710      	adds	r7, #16
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}
 80080a8:	080206d0 	.word	0x080206d0
 80080ac:	080206f8 	.word	0x080206f8

080080b0 <mpu6500_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt(mpu6500_handle_t *handle, mpu6500_interrupt_t type, mpu6500_bool_t enable)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	460b      	mov	r3, r1
 80080ba:	70fb      	strb	r3, [r7, #3]
 80080bc:	4613      	mov	r3, r2
 80080be:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d101      	bne.n	80080ca <mpu6500_set_interrupt+0x1a>
    {
        return 2;                                                                       /* return error */
 80080c6:	2302      	movs	r3, #2
 80080c8:	e043      	b.n	8008152 <mpu6500_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d001      	beq.n	80080d8 <mpu6500_set_interrupt+0x28>
    {
        return 3;                                                                       /* return error */
 80080d4:	2303      	movs	r3, #3
 80080d6:	e03c      	b.n	8008152 <mpu6500_set_interrupt+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 80080d8:	f107 020e 	add.w	r2, r7, #14
 80080dc:	2301      	movs	r3, #1
 80080de:	2138      	movs	r1, #56	@ 0x38
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fd fd61 	bl	8005ba8 <a_mpu6500_read>
 80080e6:	4603      	mov	r3, r0
 80080e8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80080ea:	7bfb      	ldrb	r3, [r7, #15]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d005      	beq.n	80080fc <mpu6500_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6500: read interrupt enable failed.\n");                /* read interrupt enable failed */
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080f4:	4819      	ldr	r0, [pc, #100]	@ (800815c <mpu6500_set_interrupt+0xac>)
 80080f6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80080f8:	2301      	movs	r3, #1
 80080fa:	e02a      	b.n	8008152 <mpu6500_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                               /* clear config */
 80080fc:	78fb      	ldrb	r3, [r7, #3]
 80080fe:	2201      	movs	r2, #1
 8008100:	fa02 f303 	lsl.w	r3, r2, r3
 8008104:	b25b      	sxtb	r3, r3
 8008106:	43db      	mvns	r3, r3
 8008108:	b25a      	sxtb	r2, r3
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	b25b      	sxtb	r3, r3
 800810e:	4013      	ands	r3, r2
 8008110:	b25b      	sxtb	r3, r3
 8008112:	b2db      	uxtb	r3, r3
 8008114:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                             /* set config */
 8008116:	78ba      	ldrb	r2, [r7, #2]
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	fa02 f303 	lsl.w	r3, r2, r3
 800811e:	b25a      	sxtb	r2, r3
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	b25b      	sxtb	r3, r3
 8008124:	4313      	orrs	r3, r2
 8008126:	b25b      	sxtb	r3, r3
 8008128:	b2db      	uxtb	r3, r3
 800812a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 800812c:	f107 020e 	add.w	r2, r7, #14
 8008130:	2301      	movs	r3, #1
 8008132:	2138      	movs	r1, #56	@ 0x38
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f7fd fd68 	bl	8005c0a <a_mpu6500_write>
 800813a:	4603      	mov	r3, r0
 800813c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800813e:	7bfb      	ldrb	r3, [r7, #15]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d005      	beq.n	8008150 <mpu6500_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6500: write interrupt enable failed.\n");               /* write interrupt enable failed */
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008148:	4805      	ldr	r0, [pc, #20]	@ (8008160 <mpu6500_set_interrupt+0xb0>)
 800814a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800814c:	2301      	movs	r3, #1
 800814e:	e000      	b.n	8008152 <mpu6500_set_interrupt+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3710      	adds	r7, #16
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	08020720 	.word	0x08020720
 8008160:	08020748 	.word	0x08020748

08008164 <mpu6500_set_accelerometer_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	460b      	mov	r3, r1
 800816e:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d101      	bne.n	800817a <mpu6500_set_accelerometer_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008176:	2302      	movs	r3, #2
 8008178:	e022      	b.n	80081c0 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008180:	2b01      	cmp	r3, #1
 8008182:	d001      	beq.n	8008188 <mpu6500_set_accelerometer_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008184:	2303      	movs	r3, #3
 8008186:	e01b      	b.n	80081c0 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008188:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800818c:	121b      	asrs	r3, r3, #8
 800818e:	b21b      	sxth	r3, r3
 8008190:	b2db      	uxtb	r3, r3
 8008192:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008194:	887b      	ldrh	r3, [r7, #2]
 8008196:	b2db      	uxtb	r3, r3
 8008198:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XA_OFFSET_H, buf, 2);        /* write xa offset */
 800819a:	f107 020c 	add.w	r2, r7, #12
 800819e:	2302      	movs	r3, #2
 80081a0:	2177      	movs	r1, #119	@ 0x77
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f7fd fd31 	bl	8005c0a <a_mpu6500_write>
 80081a8:	4603      	mov	r3, r0
 80081aa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d005      	beq.n	80081be <mpu6500_set_accelerometer_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xa offset failed.\n");         /* write xa offset failed*/
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081b6:	4804      	ldr	r0, [pc, #16]	@ (80081c8 <mpu6500_set_accelerometer_x_offset+0x64>)
 80081b8:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 80081ba:	2301      	movs	r3, #1
 80081bc:	e000      	b.n	80081c0 <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3710      	adds	r7, #16
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}
 80081c8:	08020874 	.word	0x08020874

080081cc <mpu6500_set_accelerometer_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	460b      	mov	r3, r1
 80081d6:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d101      	bne.n	80081e2 <mpu6500_set_accelerometer_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 80081de:	2302      	movs	r3, #2
 80081e0:	e022      	b.n	8008228 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80081e8:	2b01      	cmp	r3, #1
 80081ea:	d001      	beq.n	80081f0 <mpu6500_set_accelerometer_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 80081ec:	2303      	movs	r3, #3
 80081ee:	e01b      	b.n	8008228 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 80081f0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80081f4:	121b      	asrs	r3, r3, #8
 80081f6:	b21b      	sxth	r3, r3
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 80081fc:	887b      	ldrh	r3, [r7, #2]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YA_OFFSET_H, buf, 2);        /* write ya offset */
 8008202:	f107 020c 	add.w	r2, r7, #12
 8008206:	2302      	movs	r3, #2
 8008208:	217a      	movs	r1, #122	@ 0x7a
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f7fd fcfd 	bl	8005c0a <a_mpu6500_write>
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d005      	beq.n	8008226 <mpu6500_set_accelerometer_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write ya offset failed.\n");         /* write ya offset failed*/
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821e:	4804      	ldr	r0, [pc, #16]	@ (8008230 <mpu6500_set_accelerometer_y_offset+0x64>)
 8008220:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008222:	2301      	movs	r3, #1
 8008224:	e000      	b.n	8008228 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8008226:	2300      	movs	r3, #0
}
 8008228:	4618      	mov	r0, r3
 800822a:	3710      	adds	r7, #16
 800822c:	46bd      	mov	sp, r7
 800822e:	bd80      	pop	{r7, pc}
 8008230:	080208bc 	.word	0x080208bc

08008234 <mpu6500_set_accelerometer_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <mpu6500_set_accelerometer_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008246:	2302      	movs	r3, #2
 8008248:	e022      	b.n	8008290 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008250:	2b01      	cmp	r3, #1
 8008252:	d001      	beq.n	8008258 <mpu6500_set_accelerometer_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008254:	2303      	movs	r3, #3
 8008256:	e01b      	b.n	8008290 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008258:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800825c:	121b      	asrs	r3, r3, #8
 800825e:	b21b      	sxth	r3, r3
 8008260:	b2db      	uxtb	r3, r3
 8008262:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008264:	887b      	ldrh	r3, [r7, #2]
 8008266:	b2db      	uxtb	r3, r3
 8008268:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZA_OFFSET_H, buf, 2);        /* write za offset */
 800826a:	f107 020c 	add.w	r2, r7, #12
 800826e:	2302      	movs	r3, #2
 8008270:	217d      	movs	r1, #125	@ 0x7d
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f7fd fcc9 	bl	8005c0a <a_mpu6500_write>
 8008278:	4603      	mov	r3, r0
 800827a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 800827c:	7bfb      	ldrb	r3, [r7, #15]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d005      	beq.n	800828e <mpu6500_set_accelerometer_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write za offset failed.\n");         /* write za offset failed*/
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008286:	4804      	ldr	r0, [pc, #16]	@ (8008298 <mpu6500_set_accelerometer_z_offset+0x64>)
 8008288:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 800828e:	2300      	movs	r3, #0
}
 8008290:	4618      	mov	r0, r3
 8008292:	3710      	adds	r7, #16
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}
 8008298:	08020904 	.word	0x08020904

0800829c <mpu6500_accelerometer_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_accelerometer_offset_convert_to_register(mpu6500_handle_t *handle, float mg, int16_t *reg)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	ed87 0a02 	vstr	s0, [r7, #8]
 80082a8:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                 /* check handle */
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <mpu6500_accelerometer_offset_convert_to_register+0x18>
    {
        return 2;                       /* return error */
 80082b0:	2302      	movs	r3, #2
 80082b2:	e014      	b.n	80082de <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)            /* check handle initialization */
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80082ba:	2b01      	cmp	r3, #1
 80082bc:	d001      	beq.n	80082c2 <mpu6500_accelerometer_offset_convert_to_register+0x26>
    {
        return 3;                       /* return error */
 80082be:	2303      	movs	r3, #3
 80082c0:	e00d      	b.n	80082de <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(mg / 0.98f);       /* convert real data to register data */
 80082c2:	ed97 7a02 	vldr	s14, [r7, #8]
 80082c6:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80082ec <mpu6500_accelerometer_offset_convert_to_register+0x50>
 80082ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80082ce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082d2:	ee17 3a90 	vmov	r3, s15
 80082d6:	b21a      	sxth	r2, r3
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	801a      	strh	r2, [r3, #0]
    
    return 0;                           /* success return 0 */
 80082dc:	2300      	movs	r3, #0
}
 80082de:	4618      	mov	r0, r3
 80082e0:	3714      	adds	r7, #20
 80082e2:	46bd      	mov	sp, r7
 80082e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e8:	4770      	bx	lr
 80082ea:	bf00      	nop
 80082ec:	3f7ae148 	.word	0x3f7ae148

080082f0 <mpu6500_set_gyro_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	460b      	mov	r3, r1
 80082fa:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <mpu6500_set_gyro_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 8008302:	2302      	movs	r3, #2
 8008304:	e022      	b.n	800834c <mpu6500_set_gyro_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800830c:	2b01      	cmp	r3, #1
 800830e:	d001      	beq.n	8008314 <mpu6500_set_gyro_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008310:	2303      	movs	r3, #3
 8008312:	e01b      	b.n	800834c <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8008314:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008318:	121b      	asrs	r3, r3, #8
 800831a:	b21b      	sxth	r3, r3
 800831c:	b2db      	uxtb	r3, r3
 800831e:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008320:	887b      	ldrh	r3, [r7, #2]
 8008322:	b2db      	uxtb	r3, r3
 8008324:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XG_OFFSET_H, buf, 2);        /* write xg offset */
 8008326:	f107 020c 	add.w	r2, r7, #12
 800832a:	2302      	movs	r3, #2
 800832c:	2113      	movs	r1, #19
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7fd fc6b 	bl	8005c0a <a_mpu6500_write>
 8008334:	4603      	mov	r3, r0
 8008336:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008338:	7bfb      	ldrb	r3, [r7, #15]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d005      	beq.n	800834a <mpu6500_set_gyro_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xg offset failed.\n");         /* write xg offset failed*/
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008342:	4804      	ldr	r0, [pc, #16]	@ (8008354 <mpu6500_set_gyro_x_offset+0x64>)
 8008344:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008346:	2301      	movs	r3, #1
 8008348:	e000      	b.n	800834c <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3710      	adds	r7, #16
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	0802094c 	.word	0x0802094c

08008358 <mpu6500_set_gyro_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	460b      	mov	r3, r1
 8008362:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d101      	bne.n	800836e <mpu6500_set_gyro_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 800836a:	2302      	movs	r3, #2
 800836c:	e022      	b.n	80083b4 <mpu6500_set_gyro_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008374:	2b01      	cmp	r3, #1
 8008376:	d001      	beq.n	800837c <mpu6500_set_gyro_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 8008378:	2303      	movs	r3, #3
 800837a:	e01b      	b.n	80083b4 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 800837c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008380:	121b      	asrs	r3, r3, #8
 8008382:	b21b      	sxth	r3, r3
 8008384:	b2db      	uxtb	r3, r3
 8008386:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8008388:	887b      	ldrh	r3, [r7, #2]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YG_OFFSET_H, buf, 2);        /* write yg offset */
 800838e:	f107 020c 	add.w	r2, r7, #12
 8008392:	2302      	movs	r3, #2
 8008394:	2115      	movs	r1, #21
 8008396:	6878      	ldr	r0, [r7, #4]
 8008398:	f7fd fc37 	bl	8005c0a <a_mpu6500_write>
 800839c:	4603      	mov	r3, r0
 800839e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 80083a0:	7bfb      	ldrb	r3, [r7, #15]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d005      	beq.n	80083b2 <mpu6500_set_gyro_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write yg offset failed.\n");         /* write yg offset failed*/
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083aa:	4804      	ldr	r0, [pc, #16]	@ (80083bc <mpu6500_set_gyro_y_offset+0x64>)
 80083ac:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 80083b2:	2300      	movs	r3, #0
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3710      	adds	r7, #16
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}
 80083bc:	08020994 	.word	0x08020994

080083c0 <mpu6500_set_gyro_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b084      	sub	sp, #16
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	460b      	mov	r3, r1
 80083ca:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <mpu6500_set_gyro_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 80083d2:	2302      	movs	r3, #2
 80083d4:	e022      	b.n	800841c <mpu6500_set_gyro_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d001      	beq.n	80083e4 <mpu6500_set_gyro_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 80083e0:	2303      	movs	r3, #3
 80083e2:	e01b      	b.n	800841c <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 80083e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80083e8:	121b      	asrs	r3, r3, #8
 80083ea:	b21b      	sxth	r3, r3
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 80083f0:	887b      	ldrh	r3, [r7, #2]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZG_OFFSET_H, buf, 2);        /* write zg offset */
 80083f6:	f107 020c 	add.w	r2, r7, #12
 80083fa:	2302      	movs	r3, #2
 80083fc:	2117      	movs	r1, #23
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7fd fc03 	bl	8005c0a <a_mpu6500_write>
 8008404:	4603      	mov	r3, r0
 8008406:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8008408:	7bfb      	ldrb	r3, [r7, #15]
 800840a:	2b00      	cmp	r3, #0
 800840c:	d005      	beq.n	800841a <mpu6500_set_gyro_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write zg offset failed.\n");         /* write zg offset failed*/
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008412:	4804      	ldr	r0, [pc, #16]	@ (8008424 <mpu6500_set_gyro_z_offset+0x64>)
 8008414:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8008416:	2301      	movs	r3, #1
 8008418:	e000      	b.n	800841c <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}
 8008424:	080209dc 	.word	0x080209dc

08008428 <mpu6500_gyro_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_gyro_offset_convert_to_register(mpu6500_handle_t *handle, float dps, int16_t *reg)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	ed87 0a02 	vstr	s0, [r7, #8]
 8008434:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                     /* check handle */
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <mpu6500_gyro_offset_convert_to_register+0x18>
    {
        return 2;                           /* return error */
 800843c:	2302      	movs	r3, #2
 800843e:	e014      	b.n	800846a <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)                /* check handle initialization */
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8008446:	2b01      	cmp	r3, #1
 8008448:	d001      	beq.n	800844e <mpu6500_gyro_offset_convert_to_register+0x26>
    {
        return 3;                           /* return error */
 800844a:	2303      	movs	r3, #3
 800844c:	e00d      	b.n	800846a <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(dps / 0.0305f);        /* convert real data to register data */
 800844e:	ed97 7a02 	vldr	s14, [r7, #8]
 8008452:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8008478 <mpu6500_gyro_offset_convert_to_register+0x50>
 8008456:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800845a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800845e:	ee17 3a90 	vmov	r3, s15
 8008462:	b21a      	sxth	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	801a      	strh	r2, [r3, #0]
    
    return 0;                               /* success return 0 */
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	3714      	adds	r7, #20
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	3cf9db23 	.word	0x3cf9db23

0800847c <ring_buffer_init>:

#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define MAX(X, Y) (((X) > (Y)) ? (X) : (Y))


uint8_t ring_buffer_init(ring_buffer_t* rb, uint8_t* buffer, size_t size) {
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	607a      	str	r2, [r7, #4]
	if (rb == NULL || buffer == NULL || size < (size_t)2) {
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d005      	beq.n	800849a <ring_buffer_init+0x1e>
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d002      	beq.n	800849a <ring_buffer_init+0x1e>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b01      	cmp	r3, #1
 8008498:	d801      	bhi.n	800849e <ring_buffer_init+0x22>
		// Must have valid pointers and buffer size ≥ 2
		return RING_BUFFER_ERROR_INVALID_PARAMETERS;
 800849a:	2301      	movs	r3, #1
 800849c:	e00c      	b.n	80084b8 <ring_buffer_init+0x3c>
	}

	rb->buffer = buffer;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	68ba      	ldr	r2, [r7, #8]
 80084a2:	601a      	str	r2, [r3, #0]
	rb->size = size;
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	687a      	ldr	r2, [r7, #4]
 80084a8:	605a      	str	r2, [r3, #4]
	rb->head = (size_t)0;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2200      	movs	r2, #0
 80084ae:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	2200      	movs	r2, #0
 80084b4:	60da      	str	r2, [r3, #12]

	return RING_BUFFER_SUCCESS;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c2:	4770      	bx	lr

080084c4 <ring_buffer_free_space>:
//		return rb->tail - rb->head - (size_t)1; // Free space when tail is ahead of head
//	}
//}


size_t ring_buffer_free_space(ring_buffer_t* rb) {
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->tail + rb->size - rb->head - (size_t)1) % rb->size;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68da      	ldr	r2, [r3, #12]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	441a      	add	r2, r3
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	3b01      	subs	r3, #1
 80084de:	687a      	ldr	r2, [r7, #4]
 80084e0:	6852      	ldr	r2, [r2, #4]
 80084e2:	fbb3 f1f2 	udiv	r1, r3, r2
 80084e6:	fb01 f202 	mul.w	r2, r1, r2
 80084ea:	1a9b      	subs	r3, r3, r2
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <ring_buffer_used_space>:
uint8_t ring_buffer_is_full(ring_buffer_t* rb) {
	//if (rb == NULL) return (size_t)0;
	return (uint8_t) (((rb->head + (size_t)1) % rb->size) == rb->tail);
}

size_t ring_buffer_used_space(ring_buffer_t* rb) {
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->head + rb->size - rb->tail) % rb->size;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689a      	ldr	r2, [r3, #8]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	441a      	add	r2, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	1ad3      	subs	r3, r2, r3
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	6852      	ldr	r2, [r2, #4]
 8008514:	fbb3 f1f2 	udiv	r1, r3, r2
 8008518:	fb01 f202 	mul.w	r2, r1, r2
 800851c:	1a9b      	subs	r3, r3, r2
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <ring_buffer_linear_free_space>:

 buffer size = 8, tail = 7, head = 2
 [ _ _ H _ _ _ _ T ]
 returns: 7 - 2 - 1 = 4 bytes available before reaching tail
*/
size_t ring_buffer_linear_free_space(ring_buffer_t* rb) {
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	689a      	ldr	r2, [r3, #8]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	68db      	ldr	r3, [r3, #12]
 800853a:	429a      	cmp	r2, r3
 800853c:	d310      	bcc.n	8008560 <ring_buffer_linear_free_space+0x36>
		if (rb->tail == (size_t)0) {
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	68db      	ldr	r3, [r3, #12]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d106      	bne.n	8008554 <ring_buffer_linear_free_space+0x2a>
			// Only leave one byte free to distinguish full/empty
			return rb->size - rb->head - (size_t)1;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	3b01      	subs	r3, #1
 8008552:	e00b      	b.n	800856c <ring_buffer_linear_free_space+0x42>
		}
		else {
			return rb->size - rb->head;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	689b      	ldr	r3, [r3, #8]
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	e005      	b.n	800856c <ring_buffer_linear_free_space+0x42>
		}
	}
	else {
		// Tail is before head, space is up to tail - 1
		return rb->tail - rb->head - (size_t)1;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	68da      	ldr	r2, [r3, #12]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	3b01      	subs	r3, #1
	}
}
 800856c:	4618      	mov	r0, r3
 800856e:	370c      	adds	r7, #12
 8008570:	46bd      	mov	sp, r7
 8008572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008576:	4770      	bx	lr

08008578 <ring_buffer_linear_used_space>:



size_t ring_buffer_linear_used_space(ring_buffer_t* rb) {
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	689a      	ldr	r2, [r3, #8]
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	68db      	ldr	r3, [r3, #12]
 8008588:	429a      	cmp	r2, r3
 800858a:	d305      	bcc.n	8008598 <ring_buffer_linear_used_space+0x20>
		// All used data is linear
		return rb->head - rb->tail;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	68db      	ldr	r3, [r3, #12]
 8008594:	1ad3      	subs	r3, r2, r3
 8008596:	e004      	b.n	80085a2 <ring_buffer_linear_used_space+0x2a>
	}
	else {
		// Used data wraps around, so linear part is from tail to end
		return rb->size - rb->tail;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68db      	ldr	r3, [r3, #12]
 80085a0:	1ad3      	subs	r3, r2, r3
	}
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	370c      	adds	r7, #12
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr

080085ae <ring_buffer_write_ptr>:



uint8_t* ring_buffer_write_ptr(ring_buffer_t* rb) {
 80085ae:	b480      	push	{r7}
 80085b0:	b083      	sub	sp, #12
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->head];
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681a      	ldr	r2, [r3, #0]
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	689b      	ldr	r3, [r3, #8]
 80085be:	4413      	add	r3, r2
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	370c      	adds	r7, #12
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <ring_buffer_read_ptr>:


uint8_t* ring_buffer_read_ptr(ring_buffer_t* rb) {
 80085cc:	b480      	push	{r7}
 80085ce:	b083      	sub	sp, #12
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->tail];
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681a      	ldr	r2, [r3, #0]
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	68db      	ldr	r3, [r3, #12]
 80085dc:	4413      	add	r3, r2
}
 80085de:	4618      	mov	r0, r3
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr

080085ea <ring_buffer_enqueue_arr>:

size_t ring_buffer_enqueue_arr(ring_buffer_t* rb, uint8_t* byte_array, size_t len) {
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b088      	sub	sp, #32
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || byte_array == NULL || rb->size == (size_t)0) {
//		return (size_t)0;
//	}

	size_t free_space = ring_buffer_free_space(rb);
 80085f6:	68f8      	ldr	r0, [r7, #12]
 80085f8:	f7ff ff64 	bl	80084c4 <ring_buffer_free_space>
 80085fc:	61f8      	str	r0, [r7, #28]
	size_t to_write = MIN(len, free_space);
 80085fe:	69fa      	ldr	r2, [r7, #28]
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	4293      	cmp	r3, r2
 8008604:	bf28      	it	cs
 8008606:	4613      	movcs	r3, r2
 8008608:	61bb      	str	r3, [r7, #24]

	size_t linear_part = MIN(ring_buffer_linear_free_space(rb), to_write);
 800860a:	68f8      	ldr	r0, [r7, #12]
 800860c:	f7ff ff8d 	bl	800852a <ring_buffer_linear_free_space>
 8008610:	4602      	mov	r2, r0
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	4293      	cmp	r3, r2
 8008616:	d904      	bls.n	8008622 <ring_buffer_enqueue_arr+0x38>
 8008618:	68f8      	ldr	r0, [r7, #12]
 800861a:	f7ff ff86 	bl	800852a <ring_buffer_linear_free_space>
 800861e:	4603      	mov	r3, r0
 8008620:	e000      	b.n	8008624 <ring_buffer_enqueue_arr+0x3a>
 8008622:	69bb      	ldr	r3, [r7, #24]
 8008624:	617b      	str	r3, [r7, #20]
	memcpy(&rb->buffer[rb->head], byte_array, linear_part);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	4413      	add	r3, r2
 8008630:	697a      	ldr	r2, [r7, #20]
 8008632:	68b9      	ldr	r1, [r7, #8]
 8008634:	4618      	mov	r0, r3
 8008636:	f013 f84c 	bl	801b6d2 <memcpy>
	rb->head = (rb->head + linear_part) % rb->size;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	689a      	ldr	r2, [r3, #8]
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	4413      	add	r3, r2
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	6852      	ldr	r2, [r2, #4]
 8008646:	fbb3 f1f2 	udiv	r1, r3, r2
 800864a:	fb01 f202 	mul.w	r2, r1, r2
 800864e:	1a9a      	subs	r2, r3, r2
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	609a      	str	r2, [r3, #8]

	size_t wrapped_part = to_write - linear_part;
 8008654:	69ba      	ldr	r2, [r7, #24]
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	613b      	str	r3, [r7, #16]
	if (wrapped_part > (size_t)0) {
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d018      	beq.n	8008694 <ring_buffer_enqueue_arr+0xaa>
		memcpy(&rb->buffer[rb->head], &byte_array[linear_part], wrapped_part);
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	18d0      	adds	r0, r2, r3
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	4413      	add	r3, r2
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4619      	mov	r1, r3
 8008676:	f013 f82c 	bl	801b6d2 <memcpy>
		rb->head = (rb->head + wrapped_part) % rb->size;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	689a      	ldr	r2, [r3, #8]
 800867e:	693b      	ldr	r3, [r7, #16]
 8008680:	4413      	add	r3, r2
 8008682:	68fa      	ldr	r2, [r7, #12]
 8008684:	6852      	ldr	r2, [r2, #4]
 8008686:	fbb3 f1f2 	udiv	r1, r3, r2
 800868a:	fb01 f202 	mul.w	r2, r1, r2
 800868e:	1a9a      	subs	r2, r3, r2
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	609a      	str	r2, [r3, #8]
	}

	return to_write;
 8008694:	69bb      	ldr	r3, [r7, #24]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3720      	adds	r7, #32
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <ring_buffer_dequeue_arr>:


size_t ring_buffer_dequeue_arr(ring_buffer_t* rb, uint8_t* out_array, size_t len) {
 800869e:	b580      	push	{r7, lr}
 80086a0:	b08a      	sub	sp, #40	@ 0x28
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0 || out_array == NULL) {
//		return (size_t)0;
//	}

	size_t used = ring_buffer_used_space(rb);
 80086aa:	68f8      	ldr	r0, [r7, #12]
 80086ac:	f7ff ff24 	bl	80084f8 <ring_buffer_used_space>
 80086b0:	6278      	str	r0, [r7, #36]	@ 0x24
	if (used == (size_t)0) {
 80086b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <ring_buffer_dequeue_arr+0x1e>
		return (size_t)0; // Nothing to read
 80086b8:	2300      	movs	r3, #0
 80086ba:	e048      	b.n	800874e <ring_buffer_dequeue_arr+0xb0>
	}

	size_t to_read = MIN(len, used);
 80086bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	4293      	cmp	r3, r2
 80086c2:	bf28      	it	cs
 80086c4:	4613      	movcs	r3, r2
 80086c6:	623b      	str	r3, [r7, #32]

	// How many bytes we can read linearly (without wrapping)
	size_t linear_data = ring_buffer_linear_used_space(rb);
 80086c8:	68f8      	ldr	r0, [r7, #12]
 80086ca:	f7ff ff55 	bl	8008578 <ring_buffer_linear_used_space>
 80086ce:	61f8      	str	r0, [r7, #28]

	
	size_t first_chunk = MIN(to_read, linear_data);
 80086d0:	69fa      	ldr	r2, [r7, #28]
 80086d2:	6a3b      	ldr	r3, [r7, #32]
 80086d4:	4293      	cmp	r3, r2
 80086d6:	bf28      	it	cs
 80086d8:	4613      	movcs	r3, r2
 80086da:	61bb      	str	r3, [r7, #24]

	memcpy(out_array, &rb->buffer[rb->tail], first_chunk);
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	69ba      	ldr	r2, [r7, #24]
 80086e8:	4619      	mov	r1, r3
 80086ea:	68b8      	ldr	r0, [r7, #8]
 80086ec:	f012 fff1 	bl	801b6d2 <memcpy>
	rb->tail = (rb->tail + first_chunk) % rb->size;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	68da      	ldr	r2, [r3, #12]
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	4413      	add	r3, r2
 80086f8:	68fa      	ldr	r2, [r7, #12]
 80086fa:	6852      	ldr	r2, [r2, #4]
 80086fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8008700:	fb01 f202 	mul.w	r2, r1, r2
 8008704:	1a9a      	subs	r2, r3, r2
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	60da      	str	r2, [r3, #12]

	if (to_read > first_chunk) {
 800870a:	6a3a      	ldr	r2, [r7, #32]
 800870c:	69bb      	ldr	r3, [r7, #24]
 800870e:	429a      	cmp	r2, r3
 8008710:	d91c      	bls.n	800874c <ring_buffer_dequeue_arr+0xae>
		size_t second_chunk = to_read - first_chunk;
 8008712:	6a3a      	ldr	r2, [r7, #32]
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	1ad3      	subs	r3, r2, r3
 8008718:	617b      	str	r3, [r7, #20]
		memcpy(&out_array[first_chunk], &rb->buffer[rb->tail], second_chunk);
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	18d0      	adds	r0, r2, r3
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	68db      	ldr	r3, [r3, #12]
 8008728:	4413      	add	r3, r2
 800872a:	697a      	ldr	r2, [r7, #20]
 800872c:	4619      	mov	r1, r3
 800872e:	f012 ffd0 	bl	801b6d2 <memcpy>
		rb->tail = (rb->tail + second_chunk) % rb->size;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	68da      	ldr	r2, [r3, #12]
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	4413      	add	r3, r2
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	6852      	ldr	r2, [r2, #4]
 800873e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008742:	fb01 f202 	mul.w	r2, r1, r2
 8008746:	1a9a      	subs	r2, r3, r2
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	60da      	str	r2, [r3, #12]
	}

	return (size_t)to_read;
 800874c:	6a3b      	ldr	r3, [r7, #32]
}
 800874e:	4618      	mov	r0, r3
 8008750:	3728      	adds	r7, #40	@ 0x28
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}

08008756 <ring_buffer_advance_tail>:
	}

	return to_peek - offset;
}

void ring_buffer_advance_tail(ring_buffer_t* rb, size_t len) {
 8008756:	b580      	push	{r7, lr}
 8008758:	b084      	sub	sp, #16
 800875a:	af00      	add	r7, sp, #0
 800875c:	6078      	str	r0, [r7, #4]
 800875e:	6039      	str	r1, [r7, #0]
//	if (rb == NULL) {
//		return;
//	}
	size_t used = ring_buffer_used_space(rb);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f7ff fec9 	bl	80084f8 <ring_buffer_used_space>
 8008766:	60f8      	str	r0, [r7, #12]
	size_t advance_len = MIN(len, used);
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	4293      	cmp	r3, r2
 800876e:	bf28      	it	cs
 8008770:	4613      	movcs	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]
	rb->tail = (rb->tail + advance_len) % rb->size;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	68da      	ldr	r2, [r3, #12]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	4413      	add	r3, r2
 800877c:	687a      	ldr	r2, [r7, #4]
 800877e:	6852      	ldr	r2, [r2, #4]
 8008780:	fbb3 f1f2 	udiv	r1, r3, r2
 8008784:	fb01 f202 	mul.w	r2, r1, r2
 8008788:	1a9a      	subs	r2, r3, r2
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	60da      	str	r2, [r3, #12]
}
 800878e:	bf00      	nop
 8008790:	3710      	adds	r7, #16
 8008792:	46bd      	mov	sp, r7
 8008794:	bd80      	pop	{r7, pc}

08008796 <ring_buffer_clear>:
	size_t free_space = ring_buffer_free_space(rb);
	size_t advance_len = MIN(len, free_space);
	rb->head = (rb->head + advance_len) % rb->size;
}

void ring_buffer_clear(ring_buffer_t* rb) {
 8008796:	b480      	push	{r7}
 8008798:	b083      	sub	sp, #12
 800879a:	af00      	add	r7, sp, #0
 800879c:	6078      	str	r0, [r7, #4]
//	if (rb == NULL) {
//		return;
//	}
	rb->head = (size_t)0;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	60da      	str	r2, [r3, #12]
}
 80087aa:	bf00      	nop
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
	...

080087b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80087be:	2300      	movs	r3, #0
 80087c0:	607b      	str	r3, [r7, #4]
 80087c2:	4b10      	ldr	r3, [pc, #64]	@ (8008804 <MX_DMA_Init+0x4c>)
 80087c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087c6:	4a0f      	ldr	r2, [pc, #60]	@ (8008804 <MX_DMA_Init+0x4c>)
 80087c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80087cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80087ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008804 <MX_DMA_Init+0x4c>)
 80087d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80087d6:	607b      	str	r3, [r7, #4]
 80087d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80087da:	2200      	movs	r2, #0
 80087dc:	2105      	movs	r1, #5
 80087de:	203a      	movs	r0, #58	@ 0x3a
 80087e0:	f002 fd06 	bl	800b1f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80087e4:	203a      	movs	r0, #58	@ 0x3a
 80087e6:	f002 fd1f 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80087ea:	2200      	movs	r2, #0
 80087ec:	2105      	movs	r1, #5
 80087ee:	2046      	movs	r0, #70	@ 0x46
 80087f0:	f002 fcfe 	bl	800b1f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 80087f4:	2046      	movs	r0, #70	@ 0x46
 80087f6:	f002 fd17 	bl	800b228 <HAL_NVIC_EnableIRQ>

}
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
 8008802:	bf00      	nop
 8008804:	40023800 	.word	0x40023800

08008808 <arr_from_freqf>:
// esc_pwm_dc.c
#include "esc_pwm.h"

static inline uint32_t arr_from_freqf(uint32_t base_hz, float pwm_hz_f) {
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	ed87 0a00 	vstr	s0, [r7]
    if (pwm_hz_f < 1e-3f) pwm_hz_f = 1e-3f;           // protecție
 8008814:	edd7 7a00 	vldr	s15, [r7]
 8008818:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008880 <arr_from_freqf+0x78>
 800881c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008824:	d501      	bpl.n	800882a <arr_from_freqf+0x22>
 8008826:	4b17      	ldr	r3, [pc, #92]	@ (8008884 <arr_from_freqf+0x7c>)
 8008828:	603b      	str	r3, [r7, #0]
    double ticks = (float)base_hz / (float)pwm_hz_f; // folosește double pt. precizie
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	ee07 3a90 	vmov	s15, r3
 8008830:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008834:	edd7 7a00 	vldr	s15, [r7]
 8008838:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800883c:	ee16 0a90 	vmov	r0, s13
 8008840:	f7f7 fe92 	bl	8000568 <__aeabi_f2d>
 8008844:	4602      	mov	r2, r0
 8008846:	460b      	mov	r3, r1
 8008848:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint32_t period_ticks = (uint32_t)(ticks + 0.5);   // rotunjire la cel mai apropiat
 800884c:	f04f 0200 	mov.w	r2, #0
 8008850:	4b0d      	ldr	r3, [pc, #52]	@ (8008888 <arr_from_freqf+0x80>)
 8008852:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008856:	f7f7 fd29 	bl	80002ac <__adddf3>
 800885a:	4602      	mov	r2, r0
 800885c:	460b      	mov	r3, r1
 800885e:	4610      	mov	r0, r2
 8008860:	4619      	mov	r1, r3
 8008862:	f7f8 f9b1 	bl	8000bc8 <__aeabi_d2uiz>
 8008866:	4603      	mov	r3, r0
 8008868:	617b      	str	r3, [r7, #20]
    if (period_ticks < 1u) period_ticks = 1u;
 800886a:	697b      	ldr	r3, [r7, #20]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d101      	bne.n	8008874 <arr_from_freqf+0x6c>
 8008870:	2301      	movs	r3, #1
 8008872:	617b      	str	r3, [r7, #20]
    return period_ticks - 1u;                          // ARR = top - 1
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	3b01      	subs	r3, #1
}
 8008878:	4618      	mov	r0, r3
 800887a:	3718      	adds	r7, #24
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	3a83126f 	.word	0x3a83126f
 8008884:	3a83126f 	.word	0x3a83126f
 8008888:	3fe00000 	.word	0x3fe00000

0800888c <ccr_from_duty>:

static inline uint32_t ccr_from_duty(uint32_t arr, float duty) {
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	ed87 0a00 	vstr	s0, [r7]
    if (duty < 0.0f) duty = 0.0f;
 8008898:	edd7 7a00 	vldr	s15, [r7]
 800889c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80088a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088a4:	d502      	bpl.n	80088ac <ccr_from_duty+0x20>
 80088a6:	f04f 0300 	mov.w	r3, #0
 80088aa:	603b      	str	r3, [r7, #0]
    if (duty > 1.0f) duty = 1.0f;
 80088ac:	edd7 7a00 	vldr	s15, [r7]
 80088b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80088b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80088b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088bc:	dd02      	ble.n	80088c4 <ccr_from_duty+0x38>
 80088be:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80088c2:	603b      	str	r3, [r7, #0]
    uint32_t top = arr + 1u;
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	3301      	adds	r3, #1
 80088c8:	60bb      	str	r3, [r7, #8]
    uint32_t ccr = (uint32_t)((float)top * (float)duty + 0.5f);
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	ee07 3a90 	vmov	s15, r3
 80088d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80088d4:	edd7 7a00 	vldr	s15, [r7]
 80088d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088dc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80088e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088e8:	ee17 3a90 	vmov	r3, s15
 80088ec:	60fb      	str	r3, [r7, #12]
    if (ccr > arr) ccr = arr;
 80088ee:	68fa      	ldr	r2, [r7, #12]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d901      	bls.n	80088fa <ccr_from_duty+0x6e>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	60fb      	str	r3, [r7, #12]
    return ccr;
 80088fa:	68fb      	ldr	r3, [r7, #12]
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr

08008908 <pwm_init>:
// 1) make this non-static and let caller provide storage, or
// 2) keep an array of TIM_HandleTypeDef.
HAL_StatusTypeDef pwm_init(pwm_t *esc,
    TIM_HandleTypeDef *htim, uint32_t channel,
    uint32_t timer_clock_hz, float pwm_hz, float duty)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b09c      	sub	sp, #112	@ 0x70
 800890c:	af00      	add	r7, sp, #0
 800890e:	6178      	str	r0, [r7, #20]
 8008910:	6139      	str	r1, [r7, #16]
 8008912:	60fa      	str	r2, [r7, #12]
 8008914:	60bb      	str	r3, [r7, #8]
 8008916:	ed87 0a01 	vstr	s0, [r7, #4]
 800891a:	edc7 0a00 	vstr	s1, [r7]
    if (!esc || !htim) return HAL_ERROR;
 800891e:	697b      	ldr	r3, [r7, #20]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d002      	beq.n	800892a <pwm_init+0x22>
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <pwm_init+0x26>
 800892a:	2301      	movs	r3, #1
 800892c:	e0de      	b.n	8008aec <pwm_init+0x1e4>
    if (timer_clock_hz < 1000000u) return HAL_ERROR;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	4a70      	ldr	r2, [pc, #448]	@ (8008af4 <pwm_init+0x1ec>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d801      	bhi.n	800893a <pwm_init+0x32>
 8008936:	2301      	movs	r3, #1
 8008938:	e0d8      	b.n	8008aec <pwm_init+0x1e4>

    HAL_StatusTypeDef st;
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800893a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800893e:	2200      	movs	r2, #0
 8008940:	601a      	str	r2, [r3, #0]
 8008942:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8008944:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008948:	2200      	movs	r2, #0
 800894a:	601a      	str	r2, [r3, #0]
 800894c:	605a      	str	r2, [r3, #4]
 800894e:	609a      	str	r2, [r3, #8]
 8008950:	60da      	str	r2, [r3, #12]
 8008952:	611a      	str	r2, [r3, #16]
 8008954:	615a      	str	r2, [r3, #20]
 8008956:	619a      	str	r2, [r3, #24]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008958:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800895c:	2200      	movs	r2, #0
 800895e:	601a      	str	r2, [r3, #0]
 8008960:	605a      	str	r2, [r3, #4]
 8008962:	609a      	str	r2, [r3, #8]
 8008964:	60da      	str	r2, [r3, #12]

    esc->htim       = htim;
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	693a      	ldr	r2, [r7, #16]
 800896a:	601a      	str	r2, [r3, #0]
    esc->channel    = channel;
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	68fa      	ldr	r2, [r7, #12]
 8008970:	605a      	str	r2, [r3, #4]
    esc->tim_clk_hz = timer_clock_hz;
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	ee07 3a90 	vmov	s15, r3
 8008978:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800897c:	697b      	ldr	r3, [r7, #20]
 800897e:	edc3 7a02 	vstr	s15, [r3, #8]
    esc->pwm_hz     = (pwm_hz <= 0.0f) ? 50.0f : pwm_hz;
 8008982:	edd7 7a01 	vldr	s15, [r7, #4]
 8008986:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800898a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800898e:	d801      	bhi.n	8008994 <pwm_init+0x8c>
 8008990:	4b59      	ldr	r3, [pc, #356]	@ (8008af8 <pwm_init+0x1f0>)
 8008992:	e000      	b.n	8008996 <pwm_init+0x8e>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	697a      	ldr	r2, [r7, #20]
 8008998:	60d3      	str	r3, [r2, #12]
    esc->duty       = (duty < 0.0f) ? 0.0f : (duty > 1.0f ? 1.0f : duty);
 800899a:	edd7 7a00 	vldr	s15, [r7]
 800899e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80089a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089a6:	d502      	bpl.n	80089ae <pwm_init+0xa6>
 80089a8:	f04f 0300 	mov.w	r3, #0
 80089ac:	e00c      	b.n	80089c8 <pwm_init+0xc0>
 80089ae:	edd7 7a00 	vldr	s15, [r7]
 80089b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80089b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80089ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80089be:	dd02      	ble.n	80089c6 <pwm_init+0xbe>
 80089c0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80089c4:	e000      	b.n	80089c8 <pwm_init+0xc0>
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	6113      	str	r3, [r2, #16]

    uint32_t psc = (timer_clock_hz / 1000000u) - 1u;  // 1 MHz base
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4a4b      	ldr	r2, [pc, #300]	@ (8008afc <pwm_init+0x1f4>)
 80089d0:	fba2 2303 	umull	r2, r3, r2, r3
 80089d4:	0c9b      	lsrs	r3, r3, #18
 80089d6:	3b01      	subs	r3, #1
 80089d8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (psc > 0xFFFFu) return HAL_ERROR;
 80089da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80089dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089e0:	d301      	bcc.n	80089e6 <pwm_init+0xde>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e082      	b.n	8008aec <pwm_init+0x1e4>

    //HAL_TIM_Base_DeInit(htim);
    HAL_TIM_PWM_DeInit(htim);
 80089e6:	6938      	ldr	r0, [r7, #16]
 80089e8:	f006 f9b1 	bl	800ed4e <HAL_TIM_PWM_DeInit>

    htim->Init.Prescaler         = psc;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80089f0:	605a      	str	r2, [r3, #4]
    htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2200      	movs	r2, #0
 80089f6:	609a      	str	r2, [r3, #8]
    htim->Init.Period            = arr_from_freqf(1000000u, esc->pwm_hz);
 80089f8:	697b      	ldr	r3, [r7, #20]
 80089fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80089fe:	eeb0 0a67 	vmov.f32	s0, s15
 8008a02:	483f      	ldr	r0, [pc, #252]	@ (8008b00 <pwm_init+0x1f8>)
 8008a04:	f7ff ff00 	bl	8008808 <arr_from_freqf>
 8008a08:	4602      	mov	r2, r0
 8008a0a:	693b      	ldr	r3, [r7, #16]
 8008a0c:	60da      	str	r2, [r3, #12]
    htim->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	2200      	movs	r2, #0
 8008a12:	611a      	str	r2, [r3, #16]
    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	2280      	movs	r2, #128	@ 0x80
 8008a18:	619a      	str	r2, [r3, #24]

    st = HAL_TIM_Base_Init(htim);
 8008a1a:	6938      	ldr	r0, [r7, #16]
 8008a1c:	f006 f820 	bl	800ea60 <HAL_TIM_Base_Init>
 8008a20:	4603      	mov	r3, r0
 8008a22:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8008a26:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d002      	beq.n	8008a34 <pwm_init+0x12c>
 8008a2e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008a32:	e05b      	b.n	8008aec <pwm_init+0x1e4>


    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008a38:	637b      	str	r3, [r7, #52]	@ 0x34
    st = HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 8008a3a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008a3e:	4619      	mov	r1, r3
 8008a40:	6938      	ldr	r0, [r7, #16]
 8008a42:	f006 fc67 	bl	800f314 <HAL_TIM_ConfigClockSource>
 8008a46:	4603      	mov	r3, r0
 8008a48:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

    st = HAL_TIM_PWM_Init(htim);
 8008a4c:	6938      	ldr	r0, [r7, #16]
 8008a4e:	f006 f92f 	bl	800ecb0 <HAL_TIM_PWM_Init>
 8008a52:	4603      	mov	r3, r0
 8008a54:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8008a58:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <pwm_init+0x15e>
 8008a60:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008a64:	e042      	b.n	8008aec <pwm_init+0x1e4>


    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a66:	2300      	movs	r3, #0
 8008a68:	663b      	str	r3, [r7, #96]	@ 0x60
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 8008a6e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8008a72:	4619      	mov	r1, r3
 8008a74:	6938      	ldr	r0, [r7, #16]
 8008a76:	f007 f859 	bl	800fb2c <HAL_TIMEx_MasterConfigSynchronization>
    if (st != HAL_OK) return st;
 8008a7a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <pwm_init+0x180>
 8008a82:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008a86:	e031      	b.n	8008aec <pwm_init+0x1e4>


    TIM_OC_InitTypeDef oc = {0};
 8008a88:	f107 0318 	add.w	r3, r7, #24
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	605a      	str	r2, [r3, #4]
 8008a92:	609a      	str	r2, [r3, #8]
 8008a94:	60da      	str	r2, [r3, #12]
 8008a96:	611a      	str	r2, [r3, #16]
 8008a98:	615a      	str	r2, [r3, #20]
 8008a9a:	619a      	str	r2, [r3, #24]
    oc.OCMode     = TIM_OCMODE_PWM1;
 8008a9c:	2360      	movs	r3, #96	@ 0x60
 8008a9e:	61bb      	str	r3, [r7, #24]
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	623b      	str	r3, [r7, #32]
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    oc.Pulse      = ccr_from_duty(htim->Init.Period, esc->duty);
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	68da      	ldr	r2, [r3, #12]
 8008aac:	697b      	ldr	r3, [r7, #20]
 8008aae:	edd3 7a04 	vldr	s15, [r3, #16]
 8008ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	f7ff fee8 	bl	800888c <ccr_from_duty>
 8008abc:	4603      	mov	r3, r0
 8008abe:	61fb      	str	r3, [r7, #28]

    st = HAL_TIM_PWM_ConfigChannel(htim, &oc, channel);
 8008ac0:	f107 0318 	add.w	r3, r7, #24
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	6938      	ldr	r0, [r7, #16]
 8008aca:	f006 fb61 	bl	800f190 <HAL_TIM_PWM_ConfigChannel>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8008ad4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d002      	beq.n	8008ae2 <pwm_init+0x1da>
 8008adc:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008ae0:	e004      	b.n	8008aec <pwm_init+0x1e4>

    return HAL_TIM_PWM_Start(htim, channel);
 8008ae2:	68f9      	ldr	r1, [r7, #12]
 8008ae4:	6938      	ldr	r0, [r7, #16]
 8008ae6:	f006 f99b 	bl	800ee20 <HAL_TIM_PWM_Start>
 8008aea:	4603      	mov	r3, r0
}
 8008aec:	4618      	mov	r0, r3
 8008aee:	3770      	adds	r7, #112	@ 0x70
 8008af0:	46bd      	mov	sp, r7
 8008af2:	bd80      	pop	{r7, pc}
 8008af4:	000f423f 	.word	0x000f423f
 8008af8:	42480000 	.word	0x42480000
 8008afc:	431bde83 	.word	0x431bde83
 8008b00:	000f4240 	.word	0x000f4240

08008b04 <pwm_set_duty>:



void pwm_set_duty(pwm_t *esc, float duty_0_1) {
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b084      	sub	sp, #16
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	6078      	str	r0, [r7, #4]
 8008b0c:	ed87 0a00 	vstr	s0, [r7]
    if (!esc) return;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d04a      	beq.n	8008bac <pwm_set_duty+0xa8>
    esc->duty = (duty_0_1 < 0.0f) ? 0.0f : (duty_0_1 > 1.0f ? 1.0f : duty_0_1);
 8008b16:	edd7 7a00 	vldr	s15, [r7]
 8008b1a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b22:	d502      	bpl.n	8008b2a <pwm_set_duty+0x26>
 8008b24:	f04f 0300 	mov.w	r3, #0
 8008b28:	e00c      	b.n	8008b44 <pwm_set_duty+0x40>
 8008b2a:	edd7 7a00 	vldr	s15, [r7]
 8008b2e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008b32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008b36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b3a:	dd02      	ble.n	8008b42 <pwm_set_duty+0x3e>
 8008b3c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008b40:	e000      	b.n	8008b44 <pwm_set_duty+0x40>
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	6113      	str	r3, [r2, #16]
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(esc->htim);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b50:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = ccr_from_duty(arr, esc->duty);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	edd3 7a04 	vldr	s15, [r3, #16]
 8008b58:	eeb0 0a67 	vmov.f32	s0, s15
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f7ff fe95 	bl	800888c <ccr_from_duty>
 8008b62:	60b8      	str	r0, [r7, #8]
    __HAL_TIM_SET_COMPARE(esc->htim, esc->channel, ccr);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	685b      	ldr	r3, [r3, #4]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d105      	bne.n	8008b78 <pwm_set_duty+0x74>
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	68ba      	ldr	r2, [r7, #8]
 8008b74:	635a      	str	r2, [r3, #52]	@ 0x34
 8008b76:	e01a      	b.n	8008bae <pwm_set_duty+0xaa>
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d105      	bne.n	8008b8c <pwm_set_duty+0x88>
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	6393      	str	r3, [r2, #56]	@ 0x38
 8008b8a:	e010      	b.n	8008bae <pwm_set_duty+0xaa>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	2b08      	cmp	r3, #8
 8008b92:	d105      	bne.n	8008ba0 <pwm_set_duty+0x9c>
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8008b9e:	e006      	b.n	8008bae <pwm_set_duty+0xaa>
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	6413      	str	r3, [r2, #64]	@ 0x40
 8008baa:	e000      	b.n	8008bae <pwm_set_duty+0xaa>
    if (!esc) return;
 8008bac:	bf00      	nop
}
 8008bae:	3710      	adds	r7, #16
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <esc_pwm_throttle_to_duty_cycle>:
    HAL_TIM_GenerateEvent(esc->htim, TIM_EVENTSOURCE_UPDATE);
    __HAL_TIM_ENABLE(esc->htim);
}

float esc_pwm_throttle_to_duty_cycle(float pwm_hz, float min_us, float max_us, float throttle)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b089      	sub	sp, #36	@ 0x24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	ed87 0a03 	vstr	s0, [r7, #12]
 8008bbe:	edc7 0a02 	vstr	s1, [r7, #8]
 8008bc2:	ed87 1a01 	vstr	s2, [r7, #4]
 8008bc6:	edc7 1a00 	vstr	s3, [r7]
    if (throttle < 0.0f) throttle = 0.0f;
 8008bca:	edd7 7a00 	vldr	s15, [r7]
 8008bce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bd6:	d502      	bpl.n	8008bde <esc_pwm_throttle_to_duty_cycle+0x2a>
 8008bd8:	f04f 0300 	mov.w	r3, #0
 8008bdc:	603b      	str	r3, [r7, #0]
    if (throttle > 1.0f) throttle = 1.0f;
 8008bde:	edd7 7a00 	vldr	s15, [r7]
 8008be2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008be6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bee:	dd02      	ble.n	8008bf6 <esc_pwm_throttle_to_duty_cycle+0x42>
 8008bf0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008bf4:	603b      	str	r3, [r7, #0]

    // Period of the PWM in microseconds
    float period_us = 1000000.0f / pwm_hz;
 8008bf6:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8008c78 <esc_pwm_throttle_to_duty_cycle+0xc4>
 8008bfa:	ed97 7a03 	vldr	s14, [r7, #12]
 8008bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c02:	edc7 7a06 	vstr	s15, [r7, #24]

    // Map throttle to pulse width in microseconds
    float pulse_us = min_us + throttle * (max_us - min_us);
 8008c06:	ed97 7a01 	vldr	s14, [r7, #4]
 8008c0a:	edd7 7a02 	vldr	s15, [r7, #8]
 8008c0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008c12:	edd7 7a00 	vldr	s15, [r7]
 8008c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c1a:	ed97 7a02 	vldr	s14, [r7, #8]
 8008c1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008c22:	edc7 7a05 	vstr	s15, [r7, #20]

    // Duty cycle = pulse / period
    float duty = pulse_us / period_us;
 8008c26:	edd7 6a05 	vldr	s13, [r7, #20]
 8008c2a:	ed97 7a06 	vldr	s14, [r7, #24]
 8008c2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c32:	edc7 7a07 	vstr	s15, [r7, #28]

    // Clamp to [0..1]
    if (duty < 0.0f) duty = 0.0f;
 8008c36:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008c3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c42:	d502      	bpl.n	8008c4a <esc_pwm_throttle_to_duty_cycle+0x96>
 8008c44:	f04f 0300 	mov.w	r3, #0
 8008c48:	61fb      	str	r3, [r7, #28]
    if (duty > 1.0f) duty = 1.0f;
 8008c4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8008c4e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c5a:	dd02      	ble.n	8008c62 <esc_pwm_throttle_to_duty_cycle+0xae>
 8008c5c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008c60:	61fb      	str	r3, [r7, #28]

    return duty;
 8008c62:	69fb      	ldr	r3, [r7, #28]
 8008c64:	ee07 3a90 	vmov	s15, r3
}
 8008c68:	eeb0 0a67 	vmov.f32	s0, s15
 8008c6c:	3724      	adds	r7, #36	@ 0x24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr
 8008c76:	bf00      	nop
 8008c78:	49742400 	.word	0x49742400

08008c7c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	app_main_start(NULL);
 8008c80:	2000      	movs	r0, #0
 8008c82:	f000 ffed 	bl	8009c60 <app_main_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8008c86:	4a05      	ldr	r2, [pc, #20]	@ (8008c9c <MX_FREERTOS_Init+0x20>)
 8008c88:	2100      	movs	r1, #0
 8008c8a:	4805      	ldr	r0, [pc, #20]	@ (8008ca0 <MX_FREERTOS_Init+0x24>)
 8008c8c:	f00b fd7e 	bl	801478c <osThreadNew>
 8008c90:	4603      	mov	r3, r0
 8008c92:	4a04      	ldr	r2, [pc, #16]	@ (8008ca4 <MX_FREERTOS_Init+0x28>)
 8008c94:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8008c96:	bf00      	nop
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	08021470 	.word	0x08021470
 8008ca0:	08008ca9 	.word	0x08008ca9
 8008ca4:	200009a0 	.word	0x200009a0

08008ca8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b082      	sub	sp, #8
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8008cb0:	f00e feba 	bl	8017a28 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000));
 8008cb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008cb8:	f00b fdfa 	bl	80148b0 <osDelay>
 8008cbc:	e7fa      	b.n	8008cb4 <StartDefaultTask+0xc>
	...

08008cc0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b08a      	sub	sp, #40	@ 0x28
 8008cc4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008cc6:	f107 0314 	add.w	r3, r7, #20
 8008cca:	2200      	movs	r2, #0
 8008ccc:	601a      	str	r2, [r3, #0]
 8008cce:	605a      	str	r2, [r3, #4]
 8008cd0:	609a      	str	r2, [r3, #8]
 8008cd2:	60da      	str	r2, [r3, #12]
 8008cd4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	613b      	str	r3, [r7, #16]
 8008cda:	4b26      	ldr	r3, [pc, #152]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cde:	4a25      	ldr	r2, [pc, #148]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008ce0:	f043 0304 	orr.w	r3, r3, #4
 8008ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8008ce6:	4b23      	ldr	r3, [pc, #140]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cea:	f003 0304 	and.w	r3, r3, #4
 8008cee:	613b      	str	r3, [r7, #16]
 8008cf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	60fb      	str	r3, [r7, #12]
 8008cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008cfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d02:	4b1c      	ldr	r3, [pc, #112]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d0a:	60fb      	str	r3, [r7, #12]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d0e:	2300      	movs	r3, #0
 8008d10:	60bb      	str	r3, [r7, #8]
 8008d12:	4b18      	ldr	r3, [pc, #96]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d16:	4a17      	ldr	r2, [pc, #92]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008d18:	f043 0301 	orr.w	r3, r3, #1
 8008d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d1e:	4b15      	ldr	r3, [pc, #84]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	60bb      	str	r3, [r7, #8]
 8008d28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	607b      	str	r3, [r7, #4]
 8008d2e:	4b11      	ldr	r3, [pc, #68]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d32:	4a10      	ldr	r2, [pc, #64]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008d34:	f043 0302 	orr.w	r3, r3, #2
 8008d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8008d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d74 <MX_GPIO_Init+0xb4>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	607b      	str	r3, [r7, #4]
 8008d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8008d46:	2200      	movs	r2, #0
 8008d48:	2110      	movs	r1, #16
 8008d4a:	480b      	ldr	r0, [pc, #44]	@ (8008d78 <MX_GPIO_Init+0xb8>)
 8008d4c:	f003 f980 	bl	800c050 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8008d50:	2310      	movs	r3, #16
 8008d52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d54:	2301      	movs	r3, #1
 8008d56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8008d60:	f107 0314 	add.w	r3, r7, #20
 8008d64:	4619      	mov	r1, r3
 8008d66:	4804      	ldr	r0, [pc, #16]	@ (8008d78 <MX_GPIO_Init+0xb8>)
 8008d68:	f002 feda 	bl	800bb20 <HAL_GPIO_Init>

}
 8008d6c:	bf00      	nop
 8008d6e:	3728      	adds	r7, #40	@ 0x28
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	40023800 	.word	0x40023800
 8008d78:	40020000 	.word	0x40020000

08008d7c <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len) {
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b086      	sub	sp, #24
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
    static char err_header[] = "ERROR->";
int sent_size = len;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	617b      	str	r3, [r7, #20]
    if (file == 2) { // stderror to usb
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	2b02      	cmp	r3, #2
 8008d90:	d103      	bne.n	8008d9a <_write+0x1e>
        //CDC_Transmit_FS((uint8_t*)err_header, sizeof(err_header) - 1);
        usart1_send_data(err_header, sizeof(err_header) - 1);
 8008d92:	2107      	movs	r1, #7
 8008d94:	4807      	ldr	r0, [pc, #28]	@ (8008db4 <_write+0x38>)
 8008d96:	f001 ffd1 	bl	800ad3c <usart1_send_data>
    }
    //CDC_Transmit_FS((uint8_t*)data, len);
    sent_size = usart1_send_data(data, len);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4619      	mov	r1, r3
 8008d9e:	68b8      	ldr	r0, [r7, #8]
 8008da0:	f001 ffcc 	bl	800ad3c <usart1_send_data>
 8008da4:	4603      	mov	r3, r0
 8008da6:	617b      	str	r3, [r7, #20]
    return sent_size;
 8008da8:	697b      	ldr	r3, [r7, #20]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	2000004c 	.word	0x2000004c

08008db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008dbc:	f002 f8d6 	bl	800af6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008dc0:	f000 f818 	bl	8008df4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008dc4:	f7ff ff7c 	bl	8008cc0 <MX_GPIO_Init>
  MX_DMA_Init();
 8008dc8:	f7ff fcf6 	bl	80087b8 <MX_DMA_Init>
  MX_SPI1_Init();
 8008dcc:	f001 f88e 	bl	8009eec <MX_SPI1_Init>
  MX_TIM4_Init();
 8008dd0:	f001 fb6c 	bl	800a4ac <MX_TIM4_Init>
  MX_TIM2_Init();
 8008dd4:	f001 fad4 	bl	800a380 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8008dd8:	f001 fc50 	bl	800a67c <MX_USART1_UART_Init>
  //HAL_UART_Receive_DMA(&huart1, uart_rx_buffer, UART_RX_BUFFER_SIZE);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8008ddc:	f00b fc8c 	bl	80146f8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8008de0:	f7ff ff4c 	bl	8008c7c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8008de4:	f00b fcac 	bl	8014740 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //dshot_test_sweep();
	  HAL_Delay(1000); // Only runs if scheduler fails
 8008de8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008dec:	f002 f900 	bl	800aff0 <HAL_Delay>
 8008df0:	e7fa      	b.n	8008de8 <main+0x30>
	...

08008df4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b094      	sub	sp, #80	@ 0x50
 8008df8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008dfa:	f107 0320 	add.w	r3, r7, #32
 8008dfe:	2230      	movs	r2, #48	@ 0x30
 8008e00:	2100      	movs	r1, #0
 8008e02:	4618      	mov	r0, r3
 8008e04:	f012 fb76 	bl	801b4f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008e08:	f107 030c 	add.w	r3, r7, #12
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	605a      	str	r2, [r3, #4]
 8008e12:	609a      	str	r2, [r3, #8]
 8008e14:	60da      	str	r2, [r3, #12]
 8008e16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60bb      	str	r3, [r7, #8]
 8008e1c:	4b28      	ldr	r3, [pc, #160]	@ (8008ec0 <SystemClock_Config+0xcc>)
 8008e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e20:	4a27      	ldr	r2, [pc, #156]	@ (8008ec0 <SystemClock_Config+0xcc>)
 8008e22:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e26:	6413      	str	r3, [r2, #64]	@ 0x40
 8008e28:	4b25      	ldr	r3, [pc, #148]	@ (8008ec0 <SystemClock_Config+0xcc>)
 8008e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e30:	60bb      	str	r3, [r7, #8]
 8008e32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e34:	2300      	movs	r3, #0
 8008e36:	607b      	str	r3, [r7, #4]
 8008e38:	4b22      	ldr	r3, [pc, #136]	@ (8008ec4 <SystemClock_Config+0xd0>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a21      	ldr	r2, [pc, #132]	@ (8008ec4 <SystemClock_Config+0xd0>)
 8008e3e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e42:	6013      	str	r3, [r2, #0]
 8008e44:	4b1f      	ldr	r3, [pc, #124]	@ (8008ec4 <SystemClock_Config+0xd0>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008e4c:	607b      	str	r3, [r7, #4]
 8008e4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008e50:	2301      	movs	r3, #1
 8008e52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008e54:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008e58:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008e5a:	2302      	movs	r3, #2
 8008e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008e5e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8008e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008e64:	2304      	movs	r3, #4
 8008e66:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8008e68:	23a8      	movs	r3, #168	@ 0xa8
 8008e6a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008e70:	2307      	movs	r3, #7
 8008e72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008e74:	f107 0320 	add.w	r3, r7, #32
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f004 fb55 	bl	800d528 <HAL_RCC_OscConfig>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d001      	beq.n	8008e88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008e84:	f000 f832 	bl	8008eec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008e88:	230f      	movs	r3, #15
 8008e8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008e8c:	2302      	movs	r3, #2
 8008e8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008e90:	2300      	movs	r3, #0
 8008e92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008e94:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8008e98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008e9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008e9e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8008ea0:	f107 030c 	add.w	r3, r7, #12
 8008ea4:	2105      	movs	r1, #5
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	f004 fdb6 	bl	800da18 <HAL_RCC_ClockConfig>
 8008eac:	4603      	mov	r3, r0
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d001      	beq.n	8008eb6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8008eb2:	f000 f81b 	bl	8008eec <Error_Handler>
  }
}
 8008eb6:	bf00      	nop
 8008eb8:	3750      	adds	r7, #80	@ 0x50
 8008eba:	46bd      	mov	sp, r7
 8008ebc:	bd80      	pop	{r7, pc}
 8008ebe:	bf00      	nop
 8008ec0:	40023800 	.word	0x40023800
 8008ec4:	40007000 	.word	0x40007000

08008ec8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a04      	ldr	r2, [pc, #16]	@ (8008ee8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d101      	bne.n	8008ede <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8008eda:	f002 f869 	bl	800afb0 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if(htim == &htim4){
		//flight_controller_loop();
	}
  /* USER CODE END Callback 1 */
}
 8008ede:	bf00      	nop
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	40010000 	.word	0x40010000

08008eec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008eec:	b480      	push	{r7}
 8008eee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8008ef0:	b672      	cpsid	i
}
 8008ef2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008ef4:	bf00      	nop
 8008ef6:	e7fd      	b.n	8008ef4 <Error_Handler+0x8>

08008ef8 <ctrl_timer_cb>:


#define STACK_WORDS(bytes) ((bytes)/sizeof(StackType_t))

static void ctrl_timer_cb(TimerHandle_t arg)
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 8008f00:	2300      	movs	r3, #0
 8008f02:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(ctrl_task_h, &hpw);
 8008f04:	4b0c      	ldr	r3, [pc, #48]	@ (8008f38 <ctrl_timer_cb+0x40>)
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f107 020c 	add.w	r2, r7, #12
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f00d fca4 	bl	801685c <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <ctrl_timer_cb+0x38>
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d007      	beq.n	8008f30 <ctrl_timer_cb+0x38>
 8008f20:	4b06      	ldr	r3, [pc, #24]	@ (8008f3c <ctrl_timer_cb+0x44>)
 8008f22:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f26:	601a      	str	r2, [r3, #0]
 8008f28:	f3bf 8f4f 	dsb	sy
 8008f2c:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(ctrl_task_h);   // task-context safe
}
 8008f30:	bf00      	nop
 8008f32:	3710      	adds	r7, #16
 8008f34:	46bd      	mov	sp, r7
 8008f36:	bd80      	pop	{r7, pc}
 8008f38:	200016b4 	.word	0x200016b4
 8008f3c:	e000ed04 	.word	0xe000ed04

08008f40 <write_motor_timer_cb>:

static void write_motor_timer_cb(TimerHandle_t arg)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(write_motor_main_h, &hpw);
 8008f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8008f80 <write_motor_timer_cb+0x40>)
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f107 020c 	add.w	r2, r7, #12
 8008f54:	4611      	mov	r1, r2
 8008f56:	4618      	mov	r0, r3
 8008f58:	f00d fc80 	bl	801685c <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d00a      	beq.n	8008f78 <write_motor_timer_cb+0x38>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d007      	beq.n	8008f78 <write_motor_timer_cb+0x38>
 8008f68:	4b06      	ldr	r3, [pc, #24]	@ (8008f84 <write_motor_timer_cb+0x44>)
 8008f6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(write_motor_main_h);   // task-context safe
}
 8008f78:	bf00      	nop
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bd80      	pop	{r7, pc}
 8008f80:	200016b8 	.word	0x200016b8
 8008f84:	e000ed04 	.word	0xe000ed04

08008f88 <init_imu>:

static void init_imu(){
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b082      	sub	sp, #8
 8008f8c:	af00      	add	r7, sp, #0
    int16_t temp_int16_t;
    uint8_t mpu_res;
	mpu_res = mpu6500_basic_init(MPU6500_INTERFACE_SPI, MPU6500_ADDRESS_0x68);
 8008f8e:	2168      	movs	r1, #104	@ 0x68
 8008f90:	2001      	movs	r0, #1
 8008f92:	f7fc f8d1 	bl	8005138 <mpu6500_basic_init>
 8008f96:	4603      	mov	r3, r0
 8008f98:	71fb      	strb	r3, [r7, #7]
	if(mpu_res == 0){
 8008f9a:	79fb      	ldrb	r3, [r7, #7]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d14e      	bne.n	800903e <init_imu+0xb6>
		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008fa0:	1d3b      	adds	r3, r7, #4
 8008fa2:	4619      	mov	r1, r3
 8008fa4:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 800904c <init_imu+0xc4>
 8008fa8:	4829      	ldr	r0, [pc, #164]	@ (8009050 <init_imu+0xc8>)
 8008faa:	f7ff fa3d 	bl	8008428 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_x_offset(&gs_handle_mpu6500, temp_int16_t);
 8008fae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008fb2:	4619      	mov	r1, r3
 8008fb4:	4826      	ldr	r0, [pc, #152]	@ (8009050 <init_imu+0xc8>)
 8008fb6:	f7ff f99b 	bl	80082f0 <mpu6500_set_gyro_x_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008fba:	1d3b      	adds	r3, r7, #4
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 800904c <init_imu+0xc4>
 8008fc2:	4823      	ldr	r0, [pc, #140]	@ (8009050 <init_imu+0xc8>)
 8008fc4:	f7ff fa30 	bl	8008428 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_y_offset(&gs_handle_mpu6500, temp_int16_t);
 8008fc8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008fcc:	4619      	mov	r1, r3
 8008fce:	4820      	ldr	r0, [pc, #128]	@ (8009050 <init_imu+0xc8>)
 8008fd0:	f7ff f9c2 	bl	8008358 <mpu6500_set_gyro_y_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008fd4:	1d3b      	adds	r3, r7, #4
 8008fd6:	4619      	mov	r1, r3
 8008fd8:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800904c <init_imu+0xc4>
 8008fdc:	481c      	ldr	r0, [pc, #112]	@ (8009050 <init_imu+0xc8>)
 8008fde:	f7ff fa23 	bl	8008428 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_z_offset(&gs_handle_mpu6500, temp_int16_t);
 8008fe2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4819      	ldr	r0, [pc, #100]	@ (8009050 <init_imu+0xc8>)
 8008fea:	f7ff f9e9 	bl	80083c0 <mpu6500_set_gyro_z_offset>


		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008fee:	1d3b      	adds	r3, r7, #4
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 800904c <init_imu+0xc4>
 8008ff6:	4816      	ldr	r0, [pc, #88]	@ (8009050 <init_imu+0xc8>)
 8008ff8:	f7ff f950 	bl	800829c <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_x_offset(&gs_handle_mpu6500, temp_int16_t);
 8008ffc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009000:	4619      	mov	r1, r3
 8009002:	4813      	ldr	r0, [pc, #76]	@ (8009050 <init_imu+0xc8>)
 8009004:	f7ff f8ae 	bl	8008164 <mpu6500_set_accelerometer_x_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8009008:	1d3b      	adds	r3, r7, #4
 800900a:	4619      	mov	r1, r3
 800900c:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 800904c <init_imu+0xc4>
 8009010:	480f      	ldr	r0, [pc, #60]	@ (8009050 <init_imu+0xc8>)
 8009012:	f7ff f943 	bl	800829c <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_y_offset(&gs_handle_mpu6500, temp_int16_t);
 8009016:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800901a:	4619      	mov	r1, r3
 800901c:	480c      	ldr	r0, [pc, #48]	@ (8009050 <init_imu+0xc8>)
 800901e:	f7ff f8d5 	bl	80081cc <mpu6500_set_accelerometer_y_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8009022:	1d3b      	adds	r3, r7, #4
 8009024:	4619      	mov	r1, r3
 8009026:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 800904c <init_imu+0xc4>
 800902a:	4809      	ldr	r0, [pc, #36]	@ (8009050 <init_imu+0xc8>)
 800902c:	f7ff f936 	bl	800829c <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_z_offset(&gs_handle_mpu6500, temp_int16_t);
 8009030:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8009034:	4619      	mov	r1, r3
 8009036:	4806      	ldr	r0, [pc, #24]	@ (8009050 <init_imu+0xc8>)
 8009038:	f7ff f8fc 	bl	8008234 <mpu6500_set_accelerometer_z_offset>
	  }
	  else{
		  printf("MPU6500 failed to initialize");
	  }
}
 800903c:	e002      	b.n	8009044 <init_imu+0xbc>
		  printf("MPU6500 failed to initialize");
 800903e:	4805      	ldr	r0, [pc, #20]	@ (8009054 <init_imu+0xcc>)
 8009040:	f012 f862 	bl	801b108 <iprintf>
}
 8009044:	bf00      	nop
 8009046:	3708      	adds	r7, #8
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}
 800904c:	00000000 	.word	0x00000000
 8009050:	20000560 	.word	0x20000560
 8009054:	080212c8 	.word	0x080212c8

08009058 <flight_controller_main>:


static void flight_controller_main(void *arg)
{
 8009058:	b590      	push	{r4, r7, lr}
 800905a:	b095      	sub	sp, #84	@ 0x54
 800905c:	af02      	add	r7, sp, #8
 800905e:	6078      	str	r0, [r7, #4]
    float accel[3];
    float gyro[3];
    coord3D gyro_data;
    coord3D accel_data;

    ctrl_task_h = xTaskGetCurrentTaskHandle();
 8009060:	f00d fa12 	bl	8016488 <xTaskGetCurrentTaskHandle>
 8009064:	4603      	mov	r3, r0
 8009066:	4a4d      	ldr	r2, [pc, #308]	@ (800919c <flight_controller_main+0x144>)
 8009068:	6013      	str	r3, [r2, #0]

        static TimerHandle_t tmr = NULL;
        if (tmr == NULL) {
 800906a:	4b4d      	ldr	r3, [pc, #308]	@ (80091a0 <flight_controller_main+0x148>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d10a      	bne.n	8009088 <flight_controller_main+0x30>
        	tmr = xTimerCreate(
 8009072:	4b4c      	ldr	r3, [pc, #304]	@ (80091a4 <flight_controller_main+0x14c>)
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	2300      	movs	r3, #0
 8009078:	2201      	movs	r2, #1
 800907a:	2101      	movs	r1, #1
 800907c:	484a      	ldr	r0, [pc, #296]	@ (80091a8 <flight_controller_main+0x150>)
 800907e:	f00d fd21 	bl	8016ac4 <xTimerCreate>
 8009082:	4603      	mov	r3, r0
 8009084:	4a46      	ldr	r2, [pc, #280]	@ (80091a0 <flight_controller_main+0x148>)
 8009086:	6013      	str	r3, [r2, #0]
                NULL,                             // timer ID used to carry arg
				ctrl_timer_cb                // callback
            );
        }

        if (tmr != NULL) {
 8009088:	4b45      	ldr	r3, [pc, #276]	@ (80091a0 <flight_controller_main+0x148>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d00b      	beq.n	80090a8 <flight_controller_main+0x50>
            xTimerStart(tmr, 0);
 8009090:	4b43      	ldr	r3, [pc, #268]	@ (80091a0 <flight_controller_main+0x148>)
 8009092:	681c      	ldr	r4, [r3, #0]
 8009094:	f00c feb0 	bl	8015df8 <xTaskGetTickCount>
 8009098:	4602      	mov	r2, r0
 800909a:	2300      	movs	r3, #0
 800909c:	9300      	str	r3, [sp, #0]
 800909e:	2300      	movs	r3, #0
 80090a0:	2101      	movs	r1, #1
 80090a2:	4620      	mov	r0, r4
 80090a4:	f00d fd6c 	bl	8016b80 <xTimerGenericCommand>
        }

    /* set 1 */
      for (;;)
      {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80090a8:	f04f 31ff 	mov.w	r1, #4294967295
 80090ac:	2001      	movs	r0, #1
 80090ae:	f00d fb89 	bl	80167c4 <ulTaskNotifyTake>

        len = 1;
 80090b2:	2301      	movs	r3, #1
 80090b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (mpu6500_read(&gs_handle_mpu6500,
 80090b8:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80090bc:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80090c0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80090c4:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 80090c8:	9301      	str	r3, [sp, #4]
 80090ca:	f107 0320 	add.w	r3, r7, #32
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	4603      	mov	r3, r0
 80090d2:	4836      	ldr	r0, [pc, #216]	@ (80091ac <flight_controller_main+0x154>)
 80090d4:	f7fc ff86 	bl	8005fe4 <mpu6500_read>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d006      	beq.n	80090ec <flight_controller_main+0x94>
                    (int16_t (*)[3])&accel_raw, (float (*)[3])&accel,
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                     &len) != 0
                    )
        {
            printf("MPU6500 read error\n");
 80090de:	4834      	ldr	r0, [pc, #208]	@ (80091b0 <flight_controller_main+0x158>)
 80090e0:	f012 f882 	bl	801b1e8 <puts>
            flight_control_loop_disarm_esc(&fcl);
 80090e4:	4833      	ldr	r0, [pc, #204]	@ (80091b4 <flight_controller_main+0x15c>)
 80090e6:	f7f8 fbca 	bl	800187e <flight_control_loop_disarm_esc>
 80090ea:	e052      	b.n	8009192 <flight_controller_main+0x13a>
            //return; // implement some form of recovery if the mpu read fails
        }
        else{
            accel_data.x = G2MS2(accel[0]);
 80090ec:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80090f0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80091b8 <flight_controller_main+0x160>
 80090f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090f8:	edc7 7a02 	vstr	s15, [r7, #8]
            accel_data.y = -G2MS2(accel[1]);
 80090fc:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8009100:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80091b8 <flight_controller_main+0x160>
 8009104:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009108:	eef1 7a67 	vneg.f32	s15, s15
 800910c:	edc7 7a03 	vstr	s15, [r7, #12]
            accel_data.z = -G2MS2(accel[2]);
 8009110:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8009114:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80091b8 <flight_controller_main+0x160>
 8009118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800911c:	eef1 7a67 	vneg.f32	s15, s15
 8009120:	edc7 7a04 	vstr	s15, [r7, #16]
            gyro_data.x = radians(gyro[0]);
 8009124:	edd7 7a08 	vldr	s15, [r7, #32]
 8009128:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80091bc <flight_controller_main+0x164>
 800912c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009130:	edc7 7a05 	vstr	s15, [r7, #20]
            gyro_data.y = -radians(gyro[1]);
 8009134:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8009138:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80091bc <flight_controller_main+0x164>
 800913c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009140:	eef1 7a67 	vneg.f32	s15, s15
 8009144:	edc7 7a06 	vstr	s15, [r7, #24]
            gyro_data.z = -radians(gyro[2]);
 8009148:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800914c:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80091bc <flight_controller_main+0x164>
 8009150:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009154:	eef1 7a67 	vneg.f32	s15, s15
 8009158:	edc7 7a07 	vstr	s15, [r7, #28]
            flight_control_loop_update_imu(&fcl, gyro_data, accel_data);
 800915c:	ed97 5a02 	vldr	s10, [r7, #8]
 8009160:	edd7 5a03 	vldr	s11, [r7, #12]
 8009164:	ed97 6a04 	vldr	s12, [r7, #16]
 8009168:	edd7 6a05 	vldr	s13, [r7, #20]
 800916c:	ed97 7a06 	vldr	s14, [r7, #24]
 8009170:	edd7 7a07 	vldr	s15, [r7, #28]
 8009174:	eef0 1a45 	vmov.f32	s3, s10
 8009178:	eeb0 2a65 	vmov.f32	s4, s11
 800917c:	eef0 2a46 	vmov.f32	s5, s12
 8009180:	eeb0 0a66 	vmov.f32	s0, s13
 8009184:	eef0 0a47 	vmov.f32	s1, s14
 8009188:	eeb0 1a67 	vmov.f32	s2, s15
 800918c:	4809      	ldr	r0, [pc, #36]	@ (80091b4 <flight_controller_main+0x15c>)
 800918e:	f7f8 fec3 	bl	8001f18 <flight_control_loop_update_imu>
        }
        flight_control_loop_tick(&fcl);
 8009192:	4808      	ldr	r0, [pc, #32]	@ (80091b4 <flight_controller_main+0x15c>)
 8009194:	f7f8 fcea 	bl	8001b6c <flight_control_loop_tick>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009198:	e786      	b.n	80090a8 <flight_controller_main+0x50>
 800919a:	bf00      	nop
 800919c:	200016b4 	.word	0x200016b4
 80091a0:	2000434c 	.word	0x2000434c
 80091a4:	08008ef9 	.word	0x08008ef9
 80091a8:	080212e8 	.word	0x080212e8
 80091ac:	20000560 	.word	0x20000560
 80091b0:	080212fc 	.word	0x080212fc
 80091b4:	2000124c 	.word	0x2000124c
 80091b8:	411ce80a 	.word	0x411ce80a
 80091bc:	3c8efa35 	.word	0x3c8efa35

080091c0 <write_motor_main>:
      }
}


static void write_motor_main(void *arg){
 80091c0:	b590      	push	{r4, r7, lr}
 80091c2:	b091      	sub	sp, #68	@ 0x44
 80091c4:	af02      	add	r7, sp, #8
 80091c6:	6078      	str	r0, [r7, #4]
    write_motor_main_h = xTaskGetCurrentTaskHandle();
 80091c8:	f00d f95e 	bl	8016488 <xTaskGetCurrentTaskHandle>
 80091cc:	4603      	mov	r3, r0
 80091ce:	4a54      	ldr	r2, [pc, #336]	@ (8009320 <write_motor_main+0x160>)
 80091d0:	6013      	str	r3, [r2, #0]

    float duty_cycle;
    static TimerHandle_t s_writeMotorTimer = NULL;
    if (s_writeMotorTimer == NULL) {
 80091d2:	4b54      	ldr	r3, [pc, #336]	@ (8009324 <write_motor_main+0x164>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d10a      	bne.n	80091f0 <write_motor_main+0x30>
        s_writeMotorTimer = xTimerCreate(
 80091da:	4b53      	ldr	r3, [pc, #332]	@ (8009328 <write_motor_main+0x168>)
 80091dc:	9300      	str	r3, [sp, #0]
 80091de:	2300      	movs	r3, #0
 80091e0:	2201      	movs	r2, #1
 80091e2:	2102      	movs	r1, #2
 80091e4:	4851      	ldr	r0, [pc, #324]	@ (800932c <write_motor_main+0x16c>)
 80091e6:	f00d fc6d 	bl	8016ac4 <xTimerCreate>
 80091ea:	4603      	mov	r3, r0
 80091ec:	4a4d      	ldr	r2, [pc, #308]	@ (8009324 <write_motor_main+0x164>)
 80091ee:	6013      	str	r3, [r2, #0]
            NULL,                             // timer ID used to carry arg
			write_motor_timer_cb                // callback
        );
    }

    if (s_writeMotorTimer != NULL) {
 80091f0:	4b4c      	ldr	r3, [pc, #304]	@ (8009324 <write_motor_main+0x164>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d00b      	beq.n	8009210 <write_motor_main+0x50>
        xTimerStart(s_writeMotorTimer, 0);
 80091f8:	4b4a      	ldr	r3, [pc, #296]	@ (8009324 <write_motor_main+0x164>)
 80091fa:	681c      	ldr	r4, [r3, #0]
 80091fc:	f00c fdfc 	bl	8015df8 <xTaskGetTickCount>
 8009200:	4602      	mov	r2, r0
 8009202:	2300      	movs	r3, #0
 8009204:	9300      	str	r3, [sp, #0]
 8009206:	2300      	movs	r3, #0
 8009208:	2101      	movs	r1, #1
 800920a:	4620      	mov	r0, r4
 800920c:	f00d fcb8 	bl	8016b80 <xTimerGenericCommand>
    }


    g_motors_throttle_mutex = xSemaphoreCreateMutex();
 8009210:	2001      	movs	r0, #1
 8009212:	f00b fdb0 	bl	8014d76 <xQueueCreateMutex>
 8009216:	4603      	mov	r3, r0
 8009218:	4a45      	ldr	r2, [pc, #276]	@ (8009330 <write_motor_main+0x170>)
 800921a:	6013      	str	r3, [r2, #0]
    //servos_init();
    memset(g_motors_throttle, 0, sizeof(g_motors_throttle));
 800921c:	2210      	movs	r2, #16
 800921e:	2100      	movs	r1, #0
 8009220:	4844      	ldr	r0, [pc, #272]	@ (8009334 <write_motor_main+0x174>)
 8009222:	f012 f967 	bl	801b4f4 <memset>
    xSemaphoreGive(g_motors_throttle_mutex);
 8009226:	4b42      	ldr	r3, [pc, #264]	@ (8009330 <write_motor_main+0x170>)
 8009228:	6818      	ldr	r0, [r3, #0]
 800922a:	2300      	movs	r3, #0
 800922c:	2200      	movs	r2, #0
 800922e:	2100      	movs	r1, #0
 8009230:	f00b fdba 	bl	8014da8 <xQueueGenericSend>

    for (;;)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8009234:	f04f 31ff 	mov.w	r1, #4294967295
 8009238:	2001      	movs	r0, #1
 800923a:	f00d fac3 	bl	80167c4 <ulTaskNotifyTake>

        xSemaphoreTake(g_motors_throttle_mutex, portMAX_DELAY);
 800923e:	4b3c      	ldr	r3, [pc, #240]	@ (8009330 <write_motor_main+0x170>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f04f 31ff 	mov.w	r1, #4294967295
 8009246:	4618      	mov	r0, r3
 8009248:	f00c f830 	bl	80152ac <xQueueSemaphoreTake>
        flight_control_loop_get_motors_throttle(&fcl, g_motors_throttle);
 800924c:	4939      	ldr	r1, [pc, #228]	@ (8009334 <write_motor_main+0x174>)
 800924e:	483a      	ldr	r0, [pc, #232]	@ (8009338 <write_motor_main+0x178>)
 8009250:	f7f8 feae 	bl	8001fb0 <flight_control_loop_get_motors_throttle>
				for(int i=0; i<4; i++){
					g_motors_throttle[i] = target_throttle;
				}
		#endif

        for (size_t i = 0; i < 4; i++) {
 8009254:	2300      	movs	r3, #0
 8009256:	637b      	str	r3, [r7, #52]	@ 0x34
 8009258:	e057      	b.n	800930a <write_motor_main+0x14a>
        	duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, g_motors_throttle[i]);
 800925a:	4a36      	ldr	r2, [pc, #216]	@ (8009334 <write_motor_main+0x174>)
 800925c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800925e:	009b      	lsls	r3, r3, #2
 8009260:	4413      	add	r3, r2
 8009262:	edd3 7a00 	vldr	s15, [r3]
 8009266:	eef0 1a67 	vmov.f32	s3, s15
 800926a:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 800933c <write_motor_main+0x17c>
 800926e:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8009340 <write_motor_main+0x180>
 8009272:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8009344 <write_motor_main+0x184>
 8009276:	f7ff fc9d 	bl	8008bb4 <esc_pwm_throttle_to_duty_cycle>
 800927a:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 800927e:	2300      	movs	r3, #0
 8009280:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009282:	f3ef 8310 	mrs	r3, PRIMASK
 8009286:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8009288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
#define COMPILER_BARRIER() __asm volatile ("" ::: "memory")


__attribute__((always_inline)) static inline crit_state_t enter_critical(void)
{
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800928a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800928c:	b672      	cpsid	i
}
 800928e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009290:	f3bf 8f4f 	dsb	sy
}
 8009294:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009296:	f3bf 8f6f 	isb	sy
}
 800929a:	bf00      	nop
    __disable_irq();                     // CPSID i (atomic)
    __DSB();
    __ISB();
    COMPILER_BARRIER();
    return old;
 800929c:	6a3b      	ldr	r3, [r7, #32]
}

/* Helpers: */
__attribute__((always_inline)) static inline crit_state_t __iBegin_custom(crit_state_t type)
{
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800929e:	61fb      	str	r3, [r7, #28]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 80092a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d001      	beq.n	80092aa <write_motor_main+0xea>
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	e000      	b.n	80092ac <write_motor_main+0xec>
 80092aa:	2300      	movs	r3, #0
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80092ac:	60fb      	str	r3, [r7, #12]
 80092ae:	2301      	movs	r3, #1
 80092b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80092b2:	e00d      	b.n	80092d0 <write_motor_main+0x110>
        	{
        		pwm_set_duty(&esc_motors[i], duty_cycle);
 80092b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092b6:	4613      	mov	r3, r2
 80092b8:	009b      	lsls	r3, r3, #2
 80092ba:	4413      	add	r3, r2
 80092bc:	009b      	lsls	r3, r3, #2
 80092be:	4a22      	ldr	r2, [pc, #136]	@ (8009348 <write_motor_main+0x188>)
 80092c0:	4413      	add	r3, r2
 80092c2:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7ff fc1c 	bl	8008b04 <pwm_set_duty>
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80092cc:	2300      	movs	r3, #0
 80092ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80092d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d1ee      	bne.n	80092b4 <write_motor_main+0xf4>
 80092d6:	f107 030c 	add.w	r3, r7, #12
 80092da:	61bb      	str	r3, [r7, #24]
}

__attribute__((always_inline)) static inline void __iRestore_custom(crit_state_t *sreg)
{
	exit_critical(*sreg);		// restore saved I-bit
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dmb 0xF":::"memory");
 80092e2:	f3bf 8f5f 	dmb	sy
}
 80092e6:	bf00      	nop
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	f383 8810 	msr	PRIMASK, r3
}
 80092f2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 80092f4:	f3bf 8f4f 	dsb	sy
}
 80092f8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80092fa:	f3bf 8f6f 	isb	sy
}
 80092fe:	bf00      	nop
}
 8009300:	bf00      	nop
}
 8009302:	bf00      	nop
        for (size_t i = 0; i < 4; i++) {
 8009304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009306:	3301      	adds	r3, #1
 8009308:	637b      	str	r3, [r7, #52]	@ 0x34
 800930a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930c:	2b03      	cmp	r3, #3
 800930e:	d9a4      	bls.n	800925a <write_motor_main+0x9a>
        	}
        }
        xSemaphoreGive(g_motors_throttle_mutex);
 8009310:	4b07      	ldr	r3, [pc, #28]	@ (8009330 <write_motor_main+0x170>)
 8009312:	6818      	ldr	r0, [r3, #0]
 8009314:	2300      	movs	r3, #0
 8009316:	2200      	movs	r2, #0
 8009318:	2100      	movs	r1, #0
 800931a:	f00b fd45 	bl	8014da8 <xQueueGenericSend>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800931e:	e789      	b.n	8009234 <write_motor_main+0x74>
 8009320:	200016b8 	.word	0x200016b8
 8009324:	20004350 	.word	0x20004350
 8009328:	08008f41 	.word	0x08008f41
 800932c:	08021310 	.word	0x08021310
 8009330:	20001650 	.word	0x20001650
 8009334:	20001654 	.word	0x20001654
 8009338:	2000124c 	.word	0x2000124c
 800933c:	44fa0000 	.word	0x44fa0000
 8009340:	447a0000 	.word	0x447a0000
 8009344:	43c80000 	.word	0x43c80000
 8009348:	20001664 	.word	0x20001664

0800934c <line_buffer_add_char>:
    }
}

static int line_buffer_add_char(char c, char *buf, size_t buf_size, size_t *len)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	607a      	str	r2, [r7, #4]
 8009356:	603b      	str	r3, [r7, #0]
 8009358:	4603      	mov	r3, r0
 800935a:	73fb      	strb	r3, [r7, #15]
    // buf: destination buffer
    // buf_size: total buffer capacity
    // len: pointer to current length (persistent between calls)
    // Returns 1 when a full line (ending with \n\r) is complete, 0 otherwise

    if (*len + 1 >= buf_size) {
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	3301      	adds	r3, #1
 8009362:	687a      	ldr	r2, [r7, #4]
 8009364:	429a      	cmp	r2, r3
 8009366:	d804      	bhi.n	8009372 <line_buffer_add_char+0x26>
        // buffer overflow: reset
        *len = 0;
 8009368:	683b      	ldr	r3, [r7, #0]
 800936a:	2200      	movs	r2, #0
 800936c:	601a      	str	r2, [r3, #0]
        return 0;
 800936e:	2300      	movs	r3, #0
 8009370:	e029      	b.n	80093c6 <line_buffer_add_char+0x7a>
    }

    buf[(*len)++] = c;
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	1c59      	adds	r1, r3, #1
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	6011      	str	r1, [r2, #0]
 800937c:	68ba      	ldr	r2, [r7, #8]
 800937e:	4413      	add	r3, r2
 8009380:	7bfa      	ldrb	r2, [r7, #15]
 8009382:	701a      	strb	r2, [r3, #0]

    // Check for \n\r at the end
    if (*len >= 2) {
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	2b01      	cmp	r3, #1
 800938a:	d91b      	bls.n	80093c4 <line_buffer_add_char+0x78>
    	if(buf[*len - 2] == '\r' && buf[*len - 1] == '\n'){
 800938c:	683b      	ldr	r3, [r7, #0]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	3b02      	subs	r3, #2
 8009392:	68ba      	ldr	r2, [r7, #8]
 8009394:	4413      	add	r3, r2
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b0d      	cmp	r3, #13
 800939a:	d113      	bne.n	80093c4 <line_buffer_add_char+0x78>
 800939c:	683b      	ldr	r3, [r7, #0]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3b01      	subs	r3, #1
 80093a2:	68ba      	ldr	r2, [r7, #8]
 80093a4:	4413      	add	r3, r2
 80093a6:	781b      	ldrb	r3, [r3, #0]
 80093a8:	2b0a      	cmp	r3, #10
 80093aa:	d10b      	bne.n	80093c4 <line_buffer_add_char+0x78>
            buf[*len - 2] = '\0'; // terminate string before \n\r
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	3b02      	subs	r3, #2
 80093b2:	68ba      	ldr	r2, [r7, #8]
 80093b4:	4413      	add	r3, r2
 80093b6:	2200      	movs	r2, #0
 80093b8:	701a      	strb	r2, [r3, #0]
            *len = 0;             // reset for next line
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	2200      	movs	r2, #0
 80093be:	601a      	str	r2, [r3, #0]
            return 1;             // line complete
 80093c0:	2301      	movs	r3, #1
 80093c2:	e000      	b.n	80093c6 <line_buffer_add_char+0x7a>
    	}
    }

    return 0; // line not complete yet
 80093c4:	2300      	movs	r3, #0
}
 80093c6:	4618      	mov	r0, r3
 80093c8:	3714      	adds	r7, #20
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr
	...

080093d4 <rc_control_main>:

static void rc_control_main(void *arg)
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b0f6      	sub	sp, #472	@ 0x1d8
 80093d8:	af0a      	add	r7, sp, #40	@ 0x28
 80093da:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80093de:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80093e2:	6018      	str	r0, [r3, #0]
    uint8_t uart_recv_buffer[64];
    int recv_data;
    char linebuf[256];
    size_t line_len = 0;
 80093e4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80093e8:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80093ec:	2200      	movs	r2, #0
 80093ee:	601a      	str	r2, [r3, #0]

    float target_throttle = 0;
 80093f0:	f04f 0300 	mov.w	r3, #0
 80093f4:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    float temp_target_throttle = 0;
 80093f8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80093fc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8009400:	f04f 0200 	mov.w	r2, #0
 8009404:	601a      	str	r2, [r3, #0]

    coord3D target_attitude = {0};
 8009406:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800940a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800940e:	461a      	mov	r2, r3
 8009410:	2300      	movs	r3, #0
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	6053      	str	r3, [r2, #4]
 8009416:	6093      	str	r3, [r2, #8]
    coord3D temp_target_attitude = {0};
 8009418:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800941c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8009420:	461a      	mov	r2, r3
 8009422:	2300      	movs	r3, #0
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	6053      	str	r3, [r2, #4]
 8009428:	6093      	str	r3, [r2, #8]

    float arm_flag = 0;
 800942a:	f04f 0300 	mov.w	r3, #0
 800942e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    float temp_arm_flag = 0;
 8009432:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009436:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800943a:	f04f 0200 	mov.w	r2, #0
 800943e:	601a      	str	r2, [r3, #0]

    float disarm_flag = 0;
 8009440:	f04f 0300 	mov.w	r3, #0
 8009444:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    float temp_disarm_flag = 0;
 8009448:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800944c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009450:	f04f 0200 	mov.w	r2, #0
 8009454:	601a      	str	r2, [r3, #0]

    int errors = 0;
 8009456:	2300      	movs	r3, #0
 8009458:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    int current_message_corrupted = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    uint16_t crc_calculated;
    unsigned int crc_received = 0;
 8009462:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009466:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800946a:	2200      	movs	r2, #0
 800946c:	601a      	str	r2, [r3, #0]
    float pid_p = 0.0f;
 800946e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009472:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8009476:	f04f 0200 	mov.w	r2, #0
 800947a:	601a      	str	r2, [r3, #0]
    float pid_i = 0.0f;
 800947c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009480:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8009484:	f04f 0200 	mov.w	r2, #0
 8009488:	601a      	str	r2, [r3, #0]
    float pid_d = 0.0f;
 800948a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800948e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8009492:	f04f 0200 	mov.w	r2, #0
 8009496:	601a      	str	r2, [r3, #0]
    float level_p = 0.0f;
 8009498:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800949c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 80094a0:	f04f 0200 	mov.w	r2, #0
 80094a4:	601a      	str	r2, [r3, #0]
    float pid_apply = 0.0f;
 80094a6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80094aa:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	601a      	str	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  current_message_corrupted = 1;
 80094b4:	2301      	movs	r3, #1
 80094b6:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
      while (usart1_data_available_for_read() > 0)
 80094ba:	e087      	b.n	80095cc <rc_control_main+0x1f8>
      {
          recv_data = usart1_recv_data((char*)uart_recv_buffer, sizeof(uart_recv_buffer));
 80094bc:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 80094c0:	2140      	movs	r1, #64	@ 0x40
 80094c2:	4618      	mov	r0, r3
 80094c4:	f001 fc8e 	bl	800ade4 <usart1_recv_data>
 80094c8:	4603      	mov	r3, r0
 80094ca:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
          for(int i=0; i<recv_data; i++){
 80094ce:	2300      	movs	r3, #0
 80094d0:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80094d4:	e074      	b.n	80095c0 <rc_control_main+0x1ec>


			  if (line_buffer_add_char(uart_recv_buffer[i], linebuf, sizeof(linebuf), &line_len)) {
 80094d6:	f507 72a6 	add.w	r2, r7, #332	@ 0x14c
 80094da:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80094de:	4413      	add	r3, r2
 80094e0:	7818      	ldrb	r0, [r3, #0]
 80094e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80094e6:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 80094ea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80094ee:	f7ff ff2d 	bl	800934c <line_buffer_add_char>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d05e      	beq.n	80095b6 <rc_control_main+0x1e2>

				  int temp_str_len = strlen(linebuf);
 80094f8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7f6 fec7 	bl	8000290 <strlen>
 8009502:	4603      	mov	r3, r0
 8009504:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
				  temp_str_len -= 6;
 8009508:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800950c:	3b06      	subs	r3, #6
 800950e:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
				  crc_calculated = crc16_ccitt_init();
 8009512:	f7f8 f84d 	bl	80015b0 <crc16_ccitt_init>
 8009516:	4603      	mov	r3, r0
 8009518:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e
				  crc_calculated = crc16_ccitt_add_arr(crc_calculated, (uint8_t*)linebuf, temp_str_len);
 800951c:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8009520:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8009524:	f8b7 318e 	ldrh.w	r3, [r7, #398]	@ 0x18e
 8009528:	4618      	mov	r0, r3
 800952a:	f7f8 f87d 	bl	8001628 <crc16_ccitt_add_arr>
 800952e:	4603      	mov	r3, r0
 8009530:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e

				  if (sscanf(linebuf, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%x",
 8009534:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8009538:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800953c:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8009540:	f107 0320 	add.w	r3, r7, #32
 8009544:	9309      	str	r3, [sp, #36]	@ 0x24
 8009546:	f107 030c 	add.w	r3, r7, #12
 800954a:	9308      	str	r3, [sp, #32]
 800954c:	f107 0310 	add.w	r3, r7, #16
 8009550:	9307      	str	r3, [sp, #28]
 8009552:	f107 0314 	add.w	r3, r7, #20
 8009556:	9306      	str	r3, [sp, #24]
 8009558:	f107 0318 	add.w	r3, r7, #24
 800955c:	9305      	str	r3, [sp, #20]
 800955e:	f107 031c 	add.w	r3, r7, #28
 8009562:	9304      	str	r3, [sp, #16]
 8009564:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009568:	9303      	str	r3, [sp, #12]
 800956a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800956e:	9302      	str	r3, [sp, #8]
 8009570:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8009574:	3308      	adds	r3, #8
 8009576:	9301      	str	r3, [sp, #4]
 8009578:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800957c:	3304      	adds	r3, #4
 800957e:	9300      	str	r3, [sp, #0]
 8009580:	460b      	mov	r3, r1
 8009582:	499b      	ldr	r1, [pc, #620]	@ (80097f0 <rc_control_main+0x41c>)
 8009584:	f011 fe5a 	bl	801b23c <siscanf>
 8009588:	4603      	mov	r3, r0
 800958a:	2b0c      	cmp	r3, #12
 800958c:	d103      	bne.n	8009596 <rc_control_main+0x1c2>
						  &level_p,
						  &pid_apply,
						  &crc_received

						  ) == 12) {
					  current_message_corrupted = 0;
 800958e:	2300      	movs	r3, #0
 8009590:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8009594:	e002      	b.n	800959c <rc_control_main+0x1c8>
					  //printf("%s\n", linebuf);

				  } else {
					  current_message_corrupted = 1;
 8009596:	2301      	movs	r3, #1
 8009598:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
//					  printf("%s\n", linebuf);
				  }
				  if(crc_received != (unsigned int)crc_calculated){
 800959c:	f8b7 218e 	ldrh.w	r2, [r7, #398]	@ 0x18e
 80095a0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80095a4:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d003      	beq.n	80095b6 <rc_control_main+0x1e2>
					  current_message_corrupted = 1;
 80095ae:	2301      	movs	r3, #1
 80095b0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
					  continue;
 80095b4:	bf00      	nop
          for(int i=0; i<recv_data; i++){
 80095b6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80095ba:	3301      	adds	r3, #1
 80095bc:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80095c0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80095c4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80095c8:	429a      	cmp	r2, r3
 80095ca:	db84      	blt.n	80094d6 <rc_control_main+0x102>
      while (usart1_data_available_for_read() > 0)
 80095cc:	f001 fc5e 	bl	800ae8c <usart1_data_available_for_read>
 80095d0:	4603      	mov	r3, r0
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f47f af72 	bne.w	80094bc <rc_control_main+0xe8>
			  }
          }
      }


      if(current_message_corrupted == 0){
 80095d8:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f040 80a1 	bne.w	8009724 <rc_control_main+0x350>
    	  errors = 0;
 80095e2:	2300      	movs	r3, #0
 80095e4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

          target_attitude = temp_target_attitude;
 80095e8:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80095ec:	f5a3 71bc 	sub.w	r1, r3, #376	@ 0x178
 80095f0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80095f4:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 80095f8:	460b      	mov	r3, r1
 80095fa:	ca07      	ldmia	r2, {r0, r1, r2}
 80095fc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          arm_flag = (temp_arm_flag);
 8009600:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009604:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
          disarm_flag = (temp_disarm_flag);
 800960e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009612:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
          target_throttle = temp_target_throttle;
 800961c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009620:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
          if(pid_apply > 0.5f){
 800962a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800962e:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8009632:	edd3 7a00 	vldr	s15, [r3]
 8009636:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800963a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800963e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009642:	dd6f      	ble.n	8009724 <rc_control_main+0x350>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8009644:	4b6b      	ldr	r3, [pc, #428]	@ (80097f4 <rc_control_main+0x420>)
 8009646:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800964a:	f04f 31ff 	mov.w	r1, #4294967295
 800964e:	4618      	mov	r0, r3
 8009650:	f00b fe2c 	bl	80152ac <xQueueSemaphoreTake>
#endif
	fcl.rate_controller.pid_pitch.Kp = pid_p;
 8009654:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009658:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a65      	ldr	r2, [pc, #404]	@ (80097f4 <rc_control_main+0x420>)
 8009660:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	fcl.rate_controller.pid_pitch.Ki = pid_i;
 8009664:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009668:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a61      	ldr	r2, [pc, #388]	@ (80097f4 <rc_control_main+0x420>)
 8009670:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
	fcl.rate_controller.pid_pitch.Kd = pid_d;
 8009674:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009678:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4a5d      	ldr	r2, [pc, #372]	@ (80097f4 <rc_control_main+0x420>)
 8009680:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8

	fcl.rate_controller.pid_roll.Kp = pid_p;
 8009684:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009688:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a59      	ldr	r2, [pc, #356]	@ (80097f4 <rc_control_main+0x420>)
 8009690:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
	fcl.rate_controller.pid_roll.Ki = pid_i;
 8009694:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009698:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a55      	ldr	r2, [pc, #340]	@ (80097f4 <rc_control_main+0x420>)
 80096a0:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	fcl.rate_controller.pid_roll.Kd = pid_d;
 80096a4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80096a8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a51      	ldr	r2, [pc, #324]	@ (80097f4 <rc_control_main+0x420>)
 80096b0:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c

	fcl.rate_controller.pid_yaw.Kp = pid_p;
 80096b4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80096b8:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a4d      	ldr	r2, [pc, #308]	@ (80097f4 <rc_control_main+0x420>)
 80096c0:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
	fcl.rate_controller.pid_yaw.Ki = pid_i;
 80096c4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80096c8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	4a49      	ldr	r2, [pc, #292]	@ (80097f4 <rc_control_main+0x420>)
 80096d0:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
	fcl.rate_controller.pid_yaw.Kd = pid_d;
 80096d4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80096d8:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	4a45      	ldr	r2, [pc, #276]	@ (80097f4 <rc_control_main+0x420>)
 80096e0:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 80096e4:	4b43      	ldr	r3, [pc, #268]	@ (80097f4 <rc_control_main+0x420>)
 80096e6:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 80096ea:	2300      	movs	r3, #0
 80096ec:	2200      	movs	r2, #0
 80096ee:	2100      	movs	r1, #0
 80096f0:	f00b fb5a 	bl	8014da8 <xQueueGenericSend>
#endif

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 80096f4:	4b3f      	ldr	r3, [pc, #252]	@ (80097f4 <rc_control_main+0x420>)
 80096f6:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 80096fa:	f04f 31ff 	mov.w	r1, #4294967295
 80096fe:	4618      	mov	r0, r3
 8009700:	f00b fdd4 	bl	80152ac <xQueueSemaphoreTake>
#endif
	fcl.attitude_controller.rate_gain = level_p;
 8009704:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009708:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a39      	ldr	r2, [pc, #228]	@ (80097f4 <rc_control_main+0x420>)
 8009710:	f8c2 32cc 	str.w	r3, [r2, #716]	@ 0x2cc
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 8009714:	4b37      	ldr	r3, [pc, #220]	@ (80097f4 <rc_control_main+0x420>)
 8009716:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 800971a:	2300      	movs	r3, #0
 800971c:	2200      	movs	r2, #0
 800971e:	2100      	movs	r1, #0
 8009720:	f00b fb42 	bl	8014da8 <xQueueGenericSend>
#endif
          }
      }

      errors += current_message_corrupted;
 8009724:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8009728:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 800972c:	4413      	add	r3, r2
 800972e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

      if (errors >= (RC_CONTROLLER_HZ / 2.0f)){
 8009732:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8009736:	ee07 3a90 	vmov	s15, r3
 800973a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800973e:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 80097f8 <rc_control_main+0x424>
 8009742:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800974a:	db20      	blt.n	800978e <rc_control_main+0x3ba>
    	  target_attitude.x = 0.0f;
 800974c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8009750:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8009754:	f04f 0200 	mov.w	r2, #0
 8009758:	601a      	str	r2, [r3, #0]
    	  target_attitude.y = 0.0f;
 800975a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800975e:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8009762:	f04f 0200 	mov.w	r2, #0
 8009766:	605a      	str	r2, [r3, #4]
    	  target_attitude.z = 0.0f;
 8009768:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800976c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8009770:	f04f 0200 	mov.w	r2, #0
 8009774:	609a      	str	r2, [r3, #8]
    	  target_throttle = 0.0f;
 8009776:	f04f 0300 	mov.w	r3, #0
 800977a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    	  disarm_flag = 1.0f;
 800977e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8009782:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    	  arm_flag = 0.0f;
 8009786:	f04f 0300 	mov.w	r3, #0
 800978a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      }


      if (arm_flag > 0.5f){
 800978e:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8009792:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8009796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800979a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979e:	dd02      	ble.n	80097a6 <rc_control_main+0x3d2>
    	  flight_control_loop_arm_esc(&fcl);
 80097a0:	4814      	ldr	r0, [pc, #80]	@ (80097f4 <rc_control_main+0x420>)
 80097a2:	f7f8 f84d 	bl	8001840 <flight_control_loop_arm_esc>
      }

      if (disarm_flag > 0.5f){
 80097a6:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 80097aa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80097ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80097b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097b6:	dd02      	ble.n	80097be <rc_control_main+0x3ea>
    	  flight_control_loop_disarm_esc(&fcl);
 80097b8:	480e      	ldr	r0, [pc, #56]	@ (80097f4 <rc_control_main+0x420>)
 80097ba:	f7f8 f860 	bl	800187e <flight_control_loop_disarm_esc>
      }

      flight_control_loop_update_rc_control(&fcl, target_attitude, target_throttle);
 80097be:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 80097c2:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 80097c6:	edd3 6a00 	vldr	s13, [r3]
 80097ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80097ce:	edd3 7a02 	vldr	s15, [r3, #8]
 80097d2:	edd7 1a6b 	vldr	s3, [r7, #428]	@ 0x1ac
 80097d6:	eeb0 0a66 	vmov.f32	s0, s13
 80097da:	eef0 0a47 	vmov.f32	s1, s14
 80097de:	eeb0 1a67 	vmov.f32	s2, s15
 80097e2:	4804      	ldr	r0, [pc, #16]	@ (80097f4 <rc_control_main+0x420>)
 80097e4:	f7f8 faf8 	bl	8001dd8 <flight_control_loop_update_rc_control>

      vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(RC_CONTROLLER_HZ)));
 80097e8:	200a      	movs	r0, #10
 80097ea:	f00c f9b3 	bl	8015b54 <vTaskDelay>
	  current_message_corrupted = 1;
 80097ee:	e661      	b.n	80094b4 <rc_control_main+0xe0>
 80097f0:	08021320 	.word	0x08021320
 80097f4:	2000124c 	.word	0x2000124c
 80097f8:	42480000 	.word	0x42480000

080097fc <print_telemetry_data>:
  }
}


static void print_telemetry_data(void *arg){
 80097fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009800:	b0aa      	sub	sp, #168	@ 0xa8
 8009802:	af06      	add	r7, sp, #24
 8009804:	6078      	str	r0, [r7, #4]
    // Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
    coord3D raw_accel, raw_gyro;
	quaternion body_frame_estimated_q;
    float local_motors_throttle[4];
	coord3D target_attitude = { 0 };
 8009806:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800980a:	2200      	movs	r2, #0
 800980c:	601a      	str	r2, [r3, #0]
 800980e:	605a      	str	r2, [r3, #4]
 8009810:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 8009812:	f04f 0300 	mov.w	r3, #0
 8009816:	633b      	str	r3, [r7, #48]	@ 0x30

    for (;;)
    {
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreTake(fcl.imu_mutex, portMAX_DELAY);
 8009818:	4bb3      	ldr	r3, [pc, #716]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 800981a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 800981e:	f04f 31ff 	mov.w	r1, #4294967295
 8009822:	4618      	mov	r0, r3
 8009824:	f00b fd42 	bl	80152ac <xQueueSemaphoreTake>
    #endif
        imu_get_raw_accel_data(&(fcl.imu), &raw_accel);
 8009828:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800982c:	4619      	mov	r1, r3
 800982e:	48ae      	ldr	r0, [pc, #696]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 8009830:	f7f9 fe40 	bl	80034b4 <imu_get_raw_accel_data>
        imu_get_raw_gyro_data(&(fcl.imu), &raw_gyro);
 8009834:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009838:	4619      	mov	r1, r3
 800983a:	48ab      	ldr	r0, [pc, #684]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 800983c:	f7f9 fe4d 	bl	80034da <imu_get_raw_gyro_data>
        imu_get_estimated_data(&(fcl.imu), &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 8009840:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8009844:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8009848:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 800984c:	48a6      	ldr	r0, [pc, #664]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 800984e:	f7f9 fe05 	bl	800345c <imu_get_estimated_data>
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreGive(fcl.imu_mutex);
 8009852:	4ba5      	ldr	r3, [pc, #660]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 8009854:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8009858:	2300      	movs	r3, #0
 800985a:	2200      	movs	r2, #0
 800985c:	2100      	movs	r1, #0
 800985e:	f00b faa3 	bl	8014da8 <xQueueGenericSend>
    #endif

        flight_control_loop_get_motors_throttle(&fcl, local_motors_throttle);
 8009862:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009866:	4619      	mov	r1, r3
 8009868:	489f      	ldr	r0, [pc, #636]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 800986a:	f7f8 fba1 	bl	8001fb0 <flight_control_loop_get_motors_throttle>
        angles3D angles = quat2angle(&(body_frame_estimated_q));
 800986e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8009872:	4618      	mov	r0, r3
 8009874:	f7f9 f852 	bl	800291c <quat2angle>
 8009878:	eef0 6a40 	vmov.f32	s13, s0
 800987c:	eeb0 7a60 	vmov.f32	s14, s1
 8009880:	eef0 7a41 	vmov.f32	s15, s2
 8009884:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8009888:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 800988c:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        printf("%.3f;%.3f;%.3f;", degrees(angles.x), degrees(angles.y), degrees(angles.z));
 8009890:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8009894:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8009aec <print_telemetry_data+0x2f0>
 8009898:	ee67 7a87 	vmul.f32	s15, s15, s14
 800989c:	ee17 0a90 	vmov	r0, s15
 80098a0:	f7f6 fe62 	bl	8000568 <__aeabi_f2d>
 80098a4:	4680      	mov	r8, r0
 80098a6:	4689      	mov	r9, r1
 80098a8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80098ac:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 8009aec <print_telemetry_data+0x2f0>
 80098b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098b4:	ee17 0a90 	vmov	r0, s15
 80098b8:	f7f6 fe56 	bl	8000568 <__aeabi_f2d>
 80098bc:	4604      	mov	r4, r0
 80098be:	460d      	mov	r5, r1
 80098c0:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80098c4:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 8009aec <print_telemetry_data+0x2f0>
 80098c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80098cc:	ee17 0a90 	vmov	r0, s15
 80098d0:	f7f6 fe4a 	bl	8000568 <__aeabi_f2d>
 80098d4:	4602      	mov	r2, r0
 80098d6:	460b      	mov	r3, r1
 80098d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80098dc:	e9cd 4500 	strd	r4, r5, [sp]
 80098e0:	4642      	mov	r2, r8
 80098e2:	464b      	mov	r3, r9
 80098e4:	4882      	ldr	r0, [pc, #520]	@ (8009af0 <print_telemetry_data+0x2f4>)
 80098e6:	f011 fc0f 	bl	801b108 <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_accel.x, body_frame_accel.y, body_frame_accel.z);
 80098ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7f6 fe3a 	bl	8000568 <__aeabi_f2d>
 80098f4:	4680      	mov	r8, r0
 80098f6:	4689      	mov	r9, r1
 80098f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80098fc:	4618      	mov	r0, r3
 80098fe:	f7f6 fe33 	bl	8000568 <__aeabi_f2d>
 8009902:	4604      	mov	r4, r0
 8009904:	460d      	mov	r5, r1
 8009906:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800990a:	4618      	mov	r0, r3
 800990c:	f7f6 fe2c 	bl	8000568 <__aeabi_f2d>
 8009910:	4602      	mov	r2, r0
 8009912:	460b      	mov	r3, r1
 8009914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009918:	e9cd 4500 	strd	r4, r5, [sp]
 800991c:	4642      	mov	r2, r8
 800991e:	464b      	mov	r3, r9
 8009920:	4873      	ldr	r0, [pc, #460]	@ (8009af0 <print_telemetry_data+0x2f4>)
 8009922:	f011 fbf1 	bl	801b108 <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_gyro.x, body_frame_gyro.y, body_frame_gyro.z);
 8009926:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009928:	4618      	mov	r0, r3
 800992a:	f7f6 fe1d 	bl	8000568 <__aeabi_f2d>
 800992e:	4680      	mov	r8, r0
 8009930:	4689      	mov	r9, r1
 8009932:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009934:	4618      	mov	r0, r3
 8009936:	f7f6 fe17 	bl	8000568 <__aeabi_f2d>
 800993a:	4604      	mov	r4, r0
 800993c:	460d      	mov	r5, r1
 800993e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009942:	4618      	mov	r0, r3
 8009944:	f7f6 fe10 	bl	8000568 <__aeabi_f2d>
 8009948:	4602      	mov	r2, r0
 800994a:	460b      	mov	r3, r1
 800994c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009950:	e9cd 4500 	strd	r4, r5, [sp]
 8009954:	4642      	mov	r2, r8
 8009956:	464b      	mov	r3, r9
 8009958:	4865      	ldr	r0, [pc, #404]	@ (8009af0 <print_telemetry_data+0x2f4>)
 800995a:	f011 fbd5 	bl	801b108 <iprintf>
//        printf("%.3f;%.3f;%.3f;", raw_accel.x, raw_accel.y, raw_accel.z);
//        printf("%.3f;%.3f;%.3f;", raw_gyro.x, raw_gyro.y, raw_gyro.z);
        printf("%.3f;%.3f;%.3f;%.3f;", local_motors_throttle[0], local_motors_throttle[1], local_motors_throttle[2], local_motors_throttle[3]);
 800995e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009960:	4618      	mov	r0, r3
 8009962:	f7f6 fe01 	bl	8000568 <__aeabi_f2d>
 8009966:	4682      	mov	sl, r0
 8009968:	468b      	mov	fp, r1
 800996a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800996c:	4618      	mov	r0, r3
 800996e:	f7f6 fdfb 	bl	8000568 <__aeabi_f2d>
 8009972:	4604      	mov	r4, r0
 8009974:	460d      	mov	r5, r1
 8009976:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009978:	4618      	mov	r0, r3
 800997a:	f7f6 fdf5 	bl	8000568 <__aeabi_f2d>
 800997e:	4680      	mov	r8, r0
 8009980:	4689      	mov	r9, r1
 8009982:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009984:	4618      	mov	r0, r3
 8009986:	f7f6 fdef 	bl	8000568 <__aeabi_f2d>
 800998a:	4602      	mov	r2, r0
 800998c:	460b      	mov	r3, r1
 800998e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009992:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8009996:	e9cd 4500 	strd	r4, r5, [sp]
 800999a:	4652      	mov	r2, sl
 800999c:	465b      	mov	r3, fp
 800999e:	4855      	ldr	r0, [pc, #340]	@ (8009af4 <print_telemetry_data+0x2f8>)
 80099a0:	f011 fbb2 	bl	801b108 <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rc_attitude_control_mutex, portMAX_DELAY);
 80099a4:	4b50      	ldr	r3, [pc, #320]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 80099a6:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 80099aa:	f04f 31ff 	mov.w	r1, #4294967295
 80099ae:	4618      	mov	r0, r3
 80099b0:	f00b fc7c 	bl	80152ac <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 80099b4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80099b8:	f103 0008 	add.w	r0, r3, #8
 80099bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80099c0:	1d1a      	adds	r2, r3, #4
 80099c2:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80099c6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80099ca:	9300      	str	r3, [sp, #0]
 80099cc:	4603      	mov	r3, r0
 80099ce:	484a      	ldr	r0, [pc, #296]	@ (8009af8 <print_telemetry_data+0x2fc>)
 80099d0:	f7fb f880 	bl	8004ad4 <rc_attitude_control_get_processed>
		&(target_attitude.y),
		&(target_attitude.z),
		&target_throttle
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rc_attitude_control_mutex);
 80099d4:	4b44      	ldr	r3, [pc, #272]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 80099d6:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 80099da:	2300      	movs	r3, #0
 80099dc:	2200      	movs	r2, #0
 80099de:	2100      	movs	r1, #0
 80099e0:	f00b f9e2 	bl	8014da8 <xQueueGenericSend>
#endif
	//	printf("%.3f;%.3f;%.3f;", target_attitude.x, target_attitude.y, target_attitude.z);
	printf("%.3f;", target_throttle);
 80099e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099e6:	4618      	mov	r0, r3
 80099e8:	f7f6 fdbe 	bl	8000568 <__aeabi_f2d>
 80099ec:	4602      	mov	r2, r0
 80099ee:	460b      	mov	r3, r1
 80099f0:	4842      	ldr	r0, [pc, #264]	@ (8009afc <print_telemetry_data+0x300>)
 80099f2:	f011 fb89 	bl	801b108 <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 80099f6:	4b3c      	ldr	r3, [pc, #240]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 80099f8:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 80099fc:	f04f 31ff 	mov.w	r1, #4294967295
 8009a00:	4618      	mov	r0, r3
 8009a02:	f00b fc53 	bl	80152ac <xQueueSemaphoreTake>
#endif
	float target_roll_rate = 0.0f;
 8009a06:	f04f 0300 	mov.w	r3, #0
 8009a0a:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 8009a0c:	f04f 0300 	mov.w	r3, #0
 8009a10:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 8009a12:	f04f 0300 	mov.w	r3, #0
 8009a16:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 8009a18:	f107 0318 	add.w	r3, r7, #24
 8009a1c:	f107 021c 	add.w	r2, r7, #28
 8009a20:	f107 0120 	add.w	r1, r7, #32
 8009a24:	4836      	ldr	r0, [pc, #216]	@ (8009b00 <print_telemetry_data+0x304>)
 8009a26:	f7f7 fd9d 	bl	8001564 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 8009a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 8009a2c:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 8009a30:	2300      	movs	r3, #0
 8009a32:	2200      	movs	r2, #0
 8009a34:	2100      	movs	r1, #0
 8009a36:	f00b f9b7 	bl	8014da8 <xQueueGenericSend>
#endif
//	printf("%.3f;%.3f;%.3f;", target_roll_rate, target_pitch_rate, target_yaw_rate);


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8009a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 8009a3c:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8009a40:	f04f 31ff 	mov.w	r1, #4294967295
 8009a44:	4618      	mov	r0, r3
 8009a46:	f00b fc31 	bl	80152ac <xQueueSemaphoreTake>
#endif
	float pid_roll_output = 0.0f;
 8009a4a:	f04f 0300 	mov.w	r3, #0
 8009a4e:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 8009a50:	f04f 0300 	mov.w	r3, #0
 8009a54:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 8009a56:	f04f 0300 	mov.w	r3, #0
 8009a5a:	60fb      	str	r3, [r7, #12]
	// Get PID outputs
	rate_controller_get_pid_outputs(
 8009a5c:	f107 030c 	add.w	r3, r7, #12
 8009a60:	f107 0210 	add.w	r2, r7, #16
 8009a64:	f107 0114 	add.w	r1, r7, #20
 8009a68:	4826      	ldr	r0, [pc, #152]	@ (8009b04 <print_telemetry_data+0x308>)
 8009a6a:	f7fa fd95 	bl	8004598 <rate_controller_get_pid_outputs>
		&pid_roll_output,
		&pid_pitch_output,
		&pid_yaw_output
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 8009a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8009ae8 <print_telemetry_data+0x2ec>)
 8009a70:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8009a74:	2300      	movs	r3, #0
 8009a76:	2200      	movs	r2, #0
 8009a78:	2100      	movs	r1, #0
 8009a7a:	f00b f995 	bl	8014da8 <xQueueGenericSend>
#endif
	printf("%.3f;%.3f;%.3f;", degrees(pid_roll_output), degrees(pid_pitch_output), degrees(pid_yaw_output));
 8009a7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8009a82:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8009aec <print_telemetry_data+0x2f0>
 8009a86:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009a8a:	ee17 0a90 	vmov	r0, s15
 8009a8e:	f7f6 fd6b 	bl	8000568 <__aeabi_f2d>
 8009a92:	4680      	mov	r8, r0
 8009a94:	4689      	mov	r9, r1
 8009a96:	edd7 7a04 	vldr	s15, [r7, #16]
 8009a9a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8009aec <print_telemetry_data+0x2f0>
 8009a9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009aa2:	ee17 0a90 	vmov	r0, s15
 8009aa6:	f7f6 fd5f 	bl	8000568 <__aeabi_f2d>
 8009aaa:	4604      	mov	r4, r0
 8009aac:	460d      	mov	r5, r1
 8009aae:	edd7 7a03 	vldr	s15, [r7, #12]
 8009ab2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8009aec <print_telemetry_data+0x2f0>
 8009ab6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009aba:	ee17 0a90 	vmov	r0, s15
 8009abe:	f7f6 fd53 	bl	8000568 <__aeabi_f2d>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009aca:	e9cd 4500 	strd	r4, r5, [sp]
 8009ace:	4642      	mov	r2, r8
 8009ad0:	464b      	mov	r3, r9
 8009ad2:	4807      	ldr	r0, [pc, #28]	@ (8009af0 <print_telemetry_data+0x2f4>)
 8009ad4:	f011 fb18 	bl	801b108 <iprintf>
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)write_h) * sizeof(StackType_t)));
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)rc_h)     * sizeof(StackType_t)));
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)telem_h)  * sizeof(StackType_t)));


    printf("\n");
 8009ad8:	200a      	movs	r0, #10
 8009ada:	f011 fb27 	bl	801b12c <putchar>
    vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(TELEMETRY_TASK_HZ)));
 8009ade:	2032      	movs	r0, #50	@ 0x32
 8009ae0:	f00c f838 	bl	8015b54 <vTaskDelay>
    {
 8009ae4:	bf00      	nop
 8009ae6:	e697      	b.n	8009818 <print_telemetry_data+0x1c>
 8009ae8:	2000124c 	.word	0x2000124c
 8009aec:	42652ee1 	.word	0x42652ee1
 8009af0:	08021344 	.word	0x08021344
 8009af4:	08021354 	.word	0x08021354
 8009af8:	2000153c 	.word	0x2000153c
 8009afc:	0802136c 	.word	0x0802136c
 8009b00:	20001508 	.word	0x20001508
 8009b04:	20001390 	.word	0x20001390

08009b08 <fp_cli_func>:

#include "fp_cli.h"
#include "usb_device.h"
#include "usbd_cdc_if.h"
char fp_cli_read_buffer[128];
static void fp_cli_func(void *arg){
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b084      	sub	sp, #16
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
	size_t read_bytes = 0;
 8009b10:	2300      	movs	r3, #0
 8009b12:	60fb      	str	r3, [r7, #12]
	//CDC_Transmit_FS((uint8_t*)err_header, sizeof(err_header) - 1);
	fp_cli_example_minimal_init();
 8009b14:	f7f8 fbee 	bl	80022f4 <fp_cli_example_minimal_init>
	//lwshellr_t lwshell_input_ex(lwshell_t* lwobj, const void* in_data, size_t len);
	for(;;){
		read_bytes = CDC_recv_data(fp_cli_read_buffer, sizeof(fp_cli_read_buffer)-1);
 8009b18:	217f      	movs	r1, #127	@ 0x7f
 8009b1a:	4807      	ldr	r0, [pc, #28]	@ (8009b38 <fp_cli_func+0x30>)
 8009b1c:	f00e f93e 	bl	8017d9c <CDC_recv_data>
 8009b20:	60f8      	str	r0, [r7, #12]
		lwshell_input_ex(&lwshell_cli, fp_cli_read_buffer, read_bytes);
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	4904      	ldr	r1, [pc, #16]	@ (8009b38 <fp_cli_func+0x30>)
 8009b26:	4805      	ldr	r0, [pc, #20]	@ (8009b3c <fp_cli_func+0x34>)
 8009b28:	f7fb fa48 	bl	8004fbc <lwshell_input_ex>
		vTaskDelay(pdMS_TO_TICKS(100));
 8009b2c:	2064      	movs	r0, #100	@ 0x64
 8009b2e:	f00c f811 	bl	8015b54 <vTaskDelay>
		read_bytes = CDC_recv_data(fp_cli_read_buffer, sizeof(fp_cli_read_buffer)-1);
 8009b32:	bf00      	nop
 8009b34:	e7f0      	b.n	8009b18 <fp_cli_func+0x10>
 8009b36:	bf00      	nop
 8009b38:	200042cc 	.word	0x200042cc
 8009b3c:	20000338 	.word	0x20000338

08009b40 <app_init>:
	}

}


void app_init(){
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b08a      	sub	sp, #40	@ 0x28
 8009b44:	af00      	add	r7, sp, #0
    init_imu();
 8009b46:	f7ff fa1f 	bl	8008f88 <init_imu>
    flight_control_loop_init(&fcl);
 8009b4a:	483a      	ldr	r0, [pc, #232]	@ (8009c34 <app_init+0xf4>)
 8009b4c:	f7f7 fed6 	bl	80018fc <flight_control_loop_init>
    flight_control_loop_disarm_esc(&fcl);
 8009b50:	4838      	ldr	r0, [pc, #224]	@ (8009c34 <app_init+0xf4>)
 8009b52:	f7f7 fe94 	bl	800187e <flight_control_loop_disarm_esc>

    float duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, 0.0f);
 8009b56:	eddf 1a38 	vldr	s3, [pc, #224]	@ 8009c38 <app_init+0xf8>
 8009b5a:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8009c3c <app_init+0xfc>
 8009b5e:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8009c40 <app_init+0x100>
 8009b62:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 8009c44 <app_init+0x104>
 8009b66:	f7ff f825 	bl	8008bb4 <esc_pwm_throttle_to_duty_cycle>
 8009b6a:	ed87 0a08 	vstr	s0, [r7, #32]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8009b72:	f3ef 8310 	mrs	r3, PRIMASK
 8009b76:	61bb      	str	r3, [r7, #24]
  return(result);
 8009b78:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009b7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009b7c:	b672      	cpsid	i
}
 8009b7e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009b80:	f3bf 8f4f 	dsb	sy
}
 8009b84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009b86:	f3bf 8f6f 	isb	sy
}
 8009b8a:	bf00      	nop
    return old;
 8009b8c:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009b8e:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8009b90:	69fb      	ldr	r3, [r7, #28]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d001      	beq.n	8009b9a <app_init+0x5a>
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	e000      	b.n	8009b9c <app_init+0x5c>
 8009b9a:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009b9c:	603b      	str	r3, [r7, #0]
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ba2:	e029      	b.n	8009bf8 <app_init+0xb8>
	{
		pwm_init(&esc_motors[0], MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 8009ba4:	edd7 0a08 	vldr	s1, [r7, #32]
 8009ba8:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8009c44 <app_init+0x104>
 8009bac:	4b26      	ldr	r3, [pc, #152]	@ (8009c48 <app_init+0x108>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	4926      	ldr	r1, [pc, #152]	@ (8009c4c <app_init+0x10c>)
 8009bb2:	4827      	ldr	r0, [pc, #156]	@ (8009c50 <app_init+0x110>)
 8009bb4:	f7fe fea8 	bl	8008908 <pwm_init>
		pwm_init(&esc_motors[1], MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 8009bb8:	edd7 0a08 	vldr	s1, [r7, #32]
 8009bbc:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8009c44 <app_init+0x104>
 8009bc0:	4b21      	ldr	r3, [pc, #132]	@ (8009c48 <app_init+0x108>)
 8009bc2:	2204      	movs	r2, #4
 8009bc4:	4921      	ldr	r1, [pc, #132]	@ (8009c4c <app_init+0x10c>)
 8009bc6:	4823      	ldr	r0, [pc, #140]	@ (8009c54 <app_init+0x114>)
 8009bc8:	f7fe fe9e 	bl	8008908 <pwm_init>
		pwm_init(&esc_motors[2], MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 8009bcc:	edd7 0a08 	vldr	s1, [r7, #32]
 8009bd0:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8009c44 <app_init+0x104>
 8009bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8009c48 <app_init+0x108>)
 8009bd6:	2208      	movs	r2, #8
 8009bd8:	491c      	ldr	r1, [pc, #112]	@ (8009c4c <app_init+0x10c>)
 8009bda:	481f      	ldr	r0, [pc, #124]	@ (8009c58 <app_init+0x118>)
 8009bdc:	f7fe fe94 	bl	8008908 <pwm_init>
		pwm_init(&esc_motors[3], MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 8009be0:	edd7 0a08 	vldr	s1, [r7, #32]
 8009be4:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 8009c44 <app_init+0x104>
 8009be8:	4b17      	ldr	r3, [pc, #92]	@ (8009c48 <app_init+0x108>)
 8009bea:	220c      	movs	r2, #12
 8009bec:	4917      	ldr	r1, [pc, #92]	@ (8009c4c <app_init+0x10c>)
 8009bee:	481b      	ldr	r0, [pc, #108]	@ (8009c5c <app_init+0x11c>)
 8009bf0:	f7fe fe8a 	bl	8008908 <pwm_init>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d1d2      	bne.n	8009ba4 <app_init+0x64>
 8009bfe:	463b      	mov	r3, r7
 8009c00:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 8009c08:	f3bf 8f5f 	dmb	sy
}
 8009c0c:	bf00      	nop
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f383 8810 	msr	PRIMASK, r3
}
 8009c18:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009c1a:	f3bf 8f4f 	dsb	sy
}
 8009c1e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009c20:	f3bf 8f6f 	isb	sy
}
 8009c24:	bf00      	nop
}
 8009c26:	bf00      	nop
}
 8009c28:	bf00      	nop
	}
}
 8009c2a:	bf00      	nop
 8009c2c:	3728      	adds	r7, #40	@ 0x28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	2000124c 	.word	0x2000124c
 8009c38:	00000000 	.word	0x00000000
 8009c3c:	44fa0000 	.word	0x44fa0000
 8009c40:	447a0000 	.word	0x447a0000
 8009c44:	43c80000 	.word	0x43c80000
 8009c48:	0501bd00 	.word	0x0501bd00
 8009c4c:	200043f8 	.word	0x200043f8
 8009c50:	20001664 	.word	0x20001664
 8009c54:	20001678 	.word	0x20001678
 8009c58:	2000168c 	.word	0x2000168c
 8009c5c:	200016a0 	.word	0x200016a0

08009c60 <app_main_start>:


void app_main_start(void *argument)
{
 8009c60:	b580      	push	{r7, lr}
 8009c62:	b0b4      	sub	sp, #208	@ 0xd0
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
	app_init();
 8009c68:	f7ff ff6a 	bl	8009b40 <app_init>
    //   original 13  -> normal
    //   original 5   -> below normal
    //
    // If you need finer spacing, use osPriorityHigh1..7, osPriorityAboveNormal1..7 (if available).

    flight_attr = (osThreadAttr_t){
 8009c6c:	4b81      	ldr	r3, [pc, #516]	@ (8009e74 <app_main_start+0x214>)
 8009c6e:	4618      	mov	r0, r3
 8009c70:	2324      	movs	r3, #36	@ 0x24
 8009c72:	461a      	mov	r2, r3
 8009c74:	2100      	movs	r1, #0
 8009c76:	f011 fc3d 	bl	801b4f4 <memset>
 8009c7a:	4b7e      	ldr	r3, [pc, #504]	@ (8009e74 <app_main_start+0x214>)
 8009c7c:	4a7e      	ldr	r2, [pc, #504]	@ (8009e78 <app_main_start+0x218>)
 8009c7e:	601a      	str	r2, [r3, #0]
 8009c80:	4b7c      	ldr	r3, [pc, #496]	@ (8009e74 <app_main_start+0x214>)
 8009c82:	4a7e      	ldr	r2, [pc, #504]	@ (8009e7c <app_main_start+0x21c>)
 8009c84:	609a      	str	r2, [r3, #8]
 8009c86:	4b7b      	ldr	r3, [pc, #492]	@ (8009e74 <app_main_start+0x214>)
 8009c88:	22a8      	movs	r2, #168	@ 0xa8
 8009c8a:	60da      	str	r2, [r3, #12]
 8009c8c:	4b79      	ldr	r3, [pc, #484]	@ (8009e74 <app_main_start+0x214>)
 8009c8e:	4a7c      	ldr	r2, [pc, #496]	@ (8009e80 <app_main_start+0x220>)
 8009c90:	611a      	str	r2, [r3, #16]
 8009c92:	4b78      	ldr	r3, [pc, #480]	@ (8009e74 <app_main_start+0x214>)
 8009c94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009c98:	615a      	str	r2, [r3, #20]
 8009c9a:	4b76      	ldr	r3, [pc, #472]	@ (8009e74 <app_main_start+0x214>)
 8009c9c:	2230      	movs	r2, #48	@ 0x30
 8009c9e:	619a      	str	r2, [r3, #24]
        .stack_mem  = flight_stack,
        .stack_size = sizeof(flight_stack),
		.cb_mem = &flight_h_taskControlBlock,
		.cb_size = sizeof(flight_h_taskControlBlock)
    };
    flight_h = osThreadNew(flight_controller_main, NULL, &flight_attr);
 8009ca0:	4a74      	ldr	r2, [pc, #464]	@ (8009e74 <app_main_start+0x214>)
 8009ca2:	2100      	movs	r1, #0
 8009ca4:	4877      	ldr	r0, [pc, #476]	@ (8009e84 <app_main_start+0x224>)
 8009ca6:	f00a fd71 	bl	801478c <osThreadNew>
 8009caa:	4603      	mov	r3, r0
 8009cac:	4a76      	ldr	r2, [pc, #472]	@ (8009e88 <app_main_start+0x228>)
 8009cae:	6013      	str	r3, [r2, #0]
    configASSERT(flight_h != NULL);
 8009cb0:	4b75      	ldr	r3, [pc, #468]	@ (8009e88 <app_main_start+0x228>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d10c      	bne.n	8009cd2 <app_main_start+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009ccc:	bf00      	nop
 8009cce:	bf00      	nop
 8009cd0:	e7fd      	b.n	8009cce <app_main_start+0x6e>

    write_attr = (osThreadAttr_t){
 8009cd2:	4b6e      	ldr	r3, [pc, #440]	@ (8009e8c <app_main_start+0x22c>)
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	2324      	movs	r3, #36	@ 0x24
 8009cd8:	461a      	mov	r2, r3
 8009cda:	2100      	movs	r1, #0
 8009cdc:	f011 fc0a 	bl	801b4f4 <memset>
 8009ce0:	4b6a      	ldr	r3, [pc, #424]	@ (8009e8c <app_main_start+0x22c>)
 8009ce2:	4a6b      	ldr	r2, [pc, #428]	@ (8009e90 <app_main_start+0x230>)
 8009ce4:	601a      	str	r2, [r3, #0]
 8009ce6:	4b69      	ldr	r3, [pc, #420]	@ (8009e8c <app_main_start+0x22c>)
 8009ce8:	4a6a      	ldr	r2, [pc, #424]	@ (8009e94 <app_main_start+0x234>)
 8009cea:	609a      	str	r2, [r3, #8]
 8009cec:	4b67      	ldr	r3, [pc, #412]	@ (8009e8c <app_main_start+0x22c>)
 8009cee:	22a8      	movs	r2, #168	@ 0xa8
 8009cf0:	60da      	str	r2, [r3, #12]
 8009cf2:	4b66      	ldr	r3, [pc, #408]	@ (8009e8c <app_main_start+0x22c>)
 8009cf4:	4a68      	ldr	r2, [pc, #416]	@ (8009e98 <app_main_start+0x238>)
 8009cf6:	611a      	str	r2, [r3, #16]
 8009cf8:	4b64      	ldr	r3, [pc, #400]	@ (8009e8c <app_main_start+0x22c>)
 8009cfa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009cfe:	615a      	str	r2, [r3, #20]
 8009d00:	4b62      	ldr	r3, [pc, #392]	@ (8009e8c <app_main_start+0x22c>)
 8009d02:	2220      	movs	r2, #32
 8009d04:	619a      	str	r2, [r3, #24]
        .stack_mem  = write_stack,
        .stack_size = sizeof(write_stack),
		.cb_mem = &write_h_taskControlBlock,
		.cb_size = sizeof(write_h_taskControlBlock)
    };
    write_h = osThreadNew(write_motor_main, NULL, &write_attr);
 8009d06:	4a61      	ldr	r2, [pc, #388]	@ (8009e8c <app_main_start+0x22c>)
 8009d08:	2100      	movs	r1, #0
 8009d0a:	4864      	ldr	r0, [pc, #400]	@ (8009e9c <app_main_start+0x23c>)
 8009d0c:	f00a fd3e 	bl	801478c <osThreadNew>
 8009d10:	4603      	mov	r3, r0
 8009d12:	4a63      	ldr	r2, [pc, #396]	@ (8009ea0 <app_main_start+0x240>)
 8009d14:	6013      	str	r3, [r2, #0]
    configASSERT(write_h != NULL);
 8009d16:	4b62      	ldr	r3, [pc, #392]	@ (8009ea0 <app_main_start+0x240>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d10c      	bne.n	8009d38 <app_main_start+0xd8>
	__asm volatile
 8009d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
}
 8009d32:	bf00      	nop
 8009d34:	bf00      	nop
 8009d36:	e7fd      	b.n	8009d34 <app_main_start+0xd4>

    rc_attr = (osThreadAttr_t){
 8009d38:	4b5a      	ldr	r3, [pc, #360]	@ (8009ea4 <app_main_start+0x244>)
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	2324      	movs	r3, #36	@ 0x24
 8009d3e:	461a      	mov	r2, r3
 8009d40:	2100      	movs	r1, #0
 8009d42:	f011 fbd7 	bl	801b4f4 <memset>
 8009d46:	4b57      	ldr	r3, [pc, #348]	@ (8009ea4 <app_main_start+0x244>)
 8009d48:	4a57      	ldr	r2, [pc, #348]	@ (8009ea8 <app_main_start+0x248>)
 8009d4a:	601a      	str	r2, [r3, #0]
 8009d4c:	4b55      	ldr	r3, [pc, #340]	@ (8009ea4 <app_main_start+0x244>)
 8009d4e:	4a57      	ldr	r2, [pc, #348]	@ (8009eac <app_main_start+0x24c>)
 8009d50:	609a      	str	r2, [r3, #8]
 8009d52:	4b54      	ldr	r3, [pc, #336]	@ (8009ea4 <app_main_start+0x244>)
 8009d54:	22a8      	movs	r2, #168	@ 0xa8
 8009d56:	60da      	str	r2, [r3, #12]
 8009d58:	4b52      	ldr	r3, [pc, #328]	@ (8009ea4 <app_main_start+0x244>)
 8009d5a:	4a55      	ldr	r2, [pc, #340]	@ (8009eb0 <app_main_start+0x250>)
 8009d5c:	611a      	str	r2, [r3, #16]
 8009d5e:	4b51      	ldr	r3, [pc, #324]	@ (8009ea4 <app_main_start+0x244>)
 8009d60:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009d64:	615a      	str	r2, [r3, #20]
 8009d66:	4b4f      	ldr	r3, [pc, #316]	@ (8009ea4 <app_main_start+0x244>)
 8009d68:	2218      	movs	r2, #24
 8009d6a:	619a      	str	r2, [r3, #24]
        .stack_mem  = rc_stack,
        .stack_size = sizeof(rc_stack),
		.cb_mem = &rc_h_taskControlBlock,
		.cb_size = sizeof(rc_h_taskControlBlock)
    };
    rc_h = osThreadNew(rc_control_main, NULL, &rc_attr);
 8009d6c:	4a4d      	ldr	r2, [pc, #308]	@ (8009ea4 <app_main_start+0x244>)
 8009d6e:	2100      	movs	r1, #0
 8009d70:	4850      	ldr	r0, [pc, #320]	@ (8009eb4 <app_main_start+0x254>)
 8009d72:	f00a fd0b 	bl	801478c <osThreadNew>
 8009d76:	4603      	mov	r3, r0
 8009d78:	4a4f      	ldr	r2, [pc, #316]	@ (8009eb8 <app_main_start+0x258>)
 8009d7a:	6013      	str	r3, [r2, #0]
    configASSERT(rc_h != NULL);
 8009d7c:	4b4e      	ldr	r3, [pc, #312]	@ (8009eb8 <app_main_start+0x258>)
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d10c      	bne.n	8009d9e <app_main_start+0x13e>
	__asm volatile
 8009d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
}
 8009d98:	bf00      	nop
 8009d9a:	bf00      	nop
 8009d9c:	e7fd      	b.n	8009d9a <app_main_start+0x13a>

    telem_attr = (osThreadAttr_t){
 8009d9e:	4b47      	ldr	r3, [pc, #284]	@ (8009ebc <app_main_start+0x25c>)
 8009da0:	4618      	mov	r0, r3
 8009da2:	2324      	movs	r3, #36	@ 0x24
 8009da4:	461a      	mov	r2, r3
 8009da6:	2100      	movs	r1, #0
 8009da8:	f011 fba4 	bl	801b4f4 <memset>
 8009dac:	4b43      	ldr	r3, [pc, #268]	@ (8009ebc <app_main_start+0x25c>)
 8009dae:	4a44      	ldr	r2, [pc, #272]	@ (8009ec0 <app_main_start+0x260>)
 8009db0:	601a      	str	r2, [r3, #0]
 8009db2:	4b42      	ldr	r3, [pc, #264]	@ (8009ebc <app_main_start+0x25c>)
 8009db4:	4a43      	ldr	r2, [pc, #268]	@ (8009ec4 <app_main_start+0x264>)
 8009db6:	609a      	str	r2, [r3, #8]
 8009db8:	4b40      	ldr	r3, [pc, #256]	@ (8009ebc <app_main_start+0x25c>)
 8009dba:	22a8      	movs	r2, #168	@ 0xa8
 8009dbc:	60da      	str	r2, [r3, #12]
 8009dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8009ebc <app_main_start+0x25c>)
 8009dc0:	4a41      	ldr	r2, [pc, #260]	@ (8009ec8 <app_main_start+0x268>)
 8009dc2:	611a      	str	r2, [r3, #16]
 8009dc4:	4b3d      	ldr	r3, [pc, #244]	@ (8009ebc <app_main_start+0x25c>)
 8009dc6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009dca:	615a      	str	r2, [r3, #20]
 8009dcc:	4b3b      	ldr	r3, [pc, #236]	@ (8009ebc <app_main_start+0x25c>)
 8009dce:	2210      	movs	r2, #16
 8009dd0:	619a      	str	r2, [r3, #24]
        .stack_mem  = telem_stack,
        .stack_size = sizeof(telem_stack),
		.cb_mem = &telem_h_taskControlBlock,
		.cb_size = sizeof(telem_h_taskControlBlock)
    };
    telem_h = osThreadNew(print_telemetry_data, NULL, &telem_attr);
 8009dd2:	4a3a      	ldr	r2, [pc, #232]	@ (8009ebc <app_main_start+0x25c>)
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	483d      	ldr	r0, [pc, #244]	@ (8009ecc <app_main_start+0x26c>)
 8009dd8:	f00a fcd8 	bl	801478c <osThreadNew>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	4a3c      	ldr	r2, [pc, #240]	@ (8009ed0 <app_main_start+0x270>)
 8009de0:	6013      	str	r3, [r2, #0]
    configASSERT(telem_h != NULL);
 8009de2:	4b3b      	ldr	r3, [pc, #236]	@ (8009ed0 <app_main_start+0x270>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d10c      	bne.n	8009e04 <app_main_start+0x1a4>
	__asm volatile
 8009dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dee:	f383 8811 	msr	BASEPRI, r3
 8009df2:	f3bf 8f6f 	isb	sy
 8009df6:	f3bf 8f4f 	dsb	sy
 8009dfa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
}
 8009dfe:	bf00      	nop
 8009e00:	bf00      	nop
 8009e02:	e7fd      	b.n	8009e00 <app_main_start+0x1a0>


    fp_cli_attr = (osThreadAttr_t){
 8009e04:	4b33      	ldr	r3, [pc, #204]	@ (8009ed4 <app_main_start+0x274>)
 8009e06:	4618      	mov	r0, r3
 8009e08:	2324      	movs	r3, #36	@ 0x24
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	2100      	movs	r1, #0
 8009e0e:	f011 fb71 	bl	801b4f4 <memset>
 8009e12:	4b30      	ldr	r3, [pc, #192]	@ (8009ed4 <app_main_start+0x274>)
 8009e14:	4a30      	ldr	r2, [pc, #192]	@ (8009ed8 <app_main_start+0x278>)
 8009e16:	601a      	str	r2, [r3, #0]
 8009e18:	4b2e      	ldr	r3, [pc, #184]	@ (8009ed4 <app_main_start+0x274>)
 8009e1a:	4a30      	ldr	r2, [pc, #192]	@ (8009edc <app_main_start+0x27c>)
 8009e1c:	609a      	str	r2, [r3, #8]
 8009e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8009ed4 <app_main_start+0x274>)
 8009e20:	22a8      	movs	r2, #168	@ 0xa8
 8009e22:	60da      	str	r2, [r3, #12]
 8009e24:	4b2b      	ldr	r3, [pc, #172]	@ (8009ed4 <app_main_start+0x274>)
 8009e26:	4a2e      	ldr	r2, [pc, #184]	@ (8009ee0 <app_main_start+0x280>)
 8009e28:	611a      	str	r2, [r3, #16]
 8009e2a:	4b2a      	ldr	r3, [pc, #168]	@ (8009ed4 <app_main_start+0x274>)
 8009e2c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e30:	615a      	str	r2, [r3, #20]
 8009e32:	4b28      	ldr	r3, [pc, #160]	@ (8009ed4 <app_main_start+0x274>)
 8009e34:	2210      	movs	r2, #16
 8009e36:	619a      	str	r2, [r3, #24]
        .stack_mem  = fp_cli_stack,
        .stack_size = sizeof(fp_cli_stack),
		.cb_mem = &fp_cli_h_taskControlBlock,
		.cb_size = sizeof(fp_cli_h_taskControlBlock)
    };
    fp_cli_h = osThreadNew(fp_cli_func, NULL, &fp_cli_attr);
 8009e38:	4a26      	ldr	r2, [pc, #152]	@ (8009ed4 <app_main_start+0x274>)
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	4829      	ldr	r0, [pc, #164]	@ (8009ee4 <app_main_start+0x284>)
 8009e3e:	f00a fca5 	bl	801478c <osThreadNew>
 8009e42:	4603      	mov	r3, r0
 8009e44:	4a28      	ldr	r2, [pc, #160]	@ (8009ee8 <app_main_start+0x288>)
 8009e46:	6013      	str	r3, [r2, #0]
    configASSERT(fp_cli_h != NULL);
 8009e48:	4b27      	ldr	r3, [pc, #156]	@ (8009ee8 <app_main_start+0x288>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d10c      	bne.n	8009e6a <app_main_start+0x20a>
	__asm volatile
 8009e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e54:	f383 8811 	msr	BASEPRI, r3
 8009e58:	f3bf 8f6f 	isb	sy
 8009e5c:	f3bf 8f4f 	dsb	sy
 8009e60:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop
 8009e68:	e7fd      	b.n	8009e66 <app_main_start+0x206>

}
 8009e6a:	bf00      	nop
 8009e6c:	37d0      	adds	r7, #208	@ 0xd0
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}
 8009e72:	bf00      	nop
 8009e74:	20003ebc 	.word	0x20003ebc
 8009e78:	08021374 	.word	0x08021374
 8009e7c:	20003f70 	.word	0x20003f70
 8009e80:	200016bc 	.word	0x200016bc
 8009e84:	08009059 	.word	0x08009059
 8009e88:	200042b8 	.word	0x200042b8
 8009e8c:	20003ee0 	.word	0x20003ee0
 8009e90:	0802138c 	.word	0x0802138c
 8009e94:	20004018 	.word	0x20004018
 8009e98:	20001ebc 	.word	0x20001ebc
 8009e9c:	080091c1 	.word	0x080091c1
 8009ea0:	200042bc 	.word	0x200042bc
 8009ea4:	20003f04 	.word	0x20003f04
 8009ea8:	080213a0 	.word	0x080213a0
 8009eac:	200040c0 	.word	0x200040c0
 8009eb0:	200026bc 	.word	0x200026bc
 8009eb4:	080093d5 	.word	0x080093d5
 8009eb8:	200042c0 	.word	0x200042c0
 8009ebc:	20003f28 	.word	0x20003f28
 8009ec0:	080213b0 	.word	0x080213b0
 8009ec4:	20004168 	.word	0x20004168
 8009ec8:	20002ebc 	.word	0x20002ebc
 8009ecc:	080097fd 	.word	0x080097fd
 8009ed0:	200042c4 	.word	0x200042c4
 8009ed4:	20003f4c 	.word	0x20003f4c
 8009ed8:	080213c8 	.word	0x080213c8
 8009edc:	20004210 	.word	0x20004210
 8009ee0:	200036bc 	.word	0x200036bc
 8009ee4:	08009b09 	.word	0x08009b09
 8009ee8:	200042c8 	.word	0x200042c8

08009eec <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8009ef0:	4b17      	ldr	r3, [pc, #92]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009ef2:	4a18      	ldr	r2, [pc, #96]	@ (8009f54 <MX_SPI1_Init+0x68>)
 8009ef4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009ef6:	4b16      	ldr	r3, [pc, #88]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009ef8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8009efc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8009efe:	4b14      	ldr	r3, [pc, #80]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8009f04:	4b12      	ldr	r3, [pc, #72]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8009f0a:	4b11      	ldr	r3, [pc, #68]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009f0c:	2202      	movs	r2, #2
 8009f0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8009f10:	4b0f      	ldr	r3, [pc, #60]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009f12:	2201      	movs	r2, #1
 8009f14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8009f16:	4b0e      	ldr	r3, [pc, #56]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009f18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009f1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009f20:	2220      	movs	r2, #32
 8009f22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8009f24:	4b0a      	ldr	r3, [pc, #40]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009f26:	2200      	movs	r2, #0
 8009f28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009f2a:	4b09      	ldr	r3, [pc, #36]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f30:	4b07      	ldr	r3, [pc, #28]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009f32:	2200      	movs	r2, #0
 8009f34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8009f36:	4b06      	ldr	r3, [pc, #24]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009f38:	220a      	movs	r2, #10
 8009f3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009f3c:	4804      	ldr	r0, [pc, #16]	@ (8009f50 <MX_SPI1_Init+0x64>)
 8009f3e:	f003 ffbd 	bl	800debc <HAL_SPI_Init>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d001      	beq.n	8009f4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009f48:	f7fe ffd0 	bl	8008eec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009f4c:	bf00      	nop
 8009f4e:	bd80      	pop	{r7, pc}
 8009f50:	20004354 	.word	0x20004354
 8009f54:	40013000 	.word	0x40013000

08009f58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009f58:	b580      	push	{r7, lr}
 8009f5a:	b08a      	sub	sp, #40	@ 0x28
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f60:	f107 0314 	add.w	r3, r7, #20
 8009f64:	2200      	movs	r2, #0
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	605a      	str	r2, [r3, #4]
 8009f6a:	609a      	str	r2, [r3, #8]
 8009f6c:	60da      	str	r2, [r3, #12]
 8009f6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a19      	ldr	r2, [pc, #100]	@ (8009fdc <HAL_SPI_MspInit+0x84>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d12b      	bne.n	8009fd2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	613b      	str	r3, [r7, #16]
 8009f7e:	4b18      	ldr	r3, [pc, #96]	@ (8009fe0 <HAL_SPI_MspInit+0x88>)
 8009f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f82:	4a17      	ldr	r2, [pc, #92]	@ (8009fe0 <HAL_SPI_MspInit+0x88>)
 8009f84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f8a:	4b15      	ldr	r3, [pc, #84]	@ (8009fe0 <HAL_SPI_MspInit+0x88>)
 8009f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f8e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009f92:	613b      	str	r3, [r7, #16]
 8009f94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f96:	2300      	movs	r3, #0
 8009f98:	60fb      	str	r3, [r7, #12]
 8009f9a:	4b11      	ldr	r3, [pc, #68]	@ (8009fe0 <HAL_SPI_MspInit+0x88>)
 8009f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f9e:	4a10      	ldr	r2, [pc, #64]	@ (8009fe0 <HAL_SPI_MspInit+0x88>)
 8009fa0:	f043 0301 	orr.w	r3, r3, #1
 8009fa4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009fa6:	4b0e      	ldr	r3, [pc, #56]	@ (8009fe0 <HAL_SPI_MspInit+0x88>)
 8009fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009faa:	f003 0301 	and.w	r3, r3, #1
 8009fae:	60fb      	str	r3, [r7, #12]
 8009fb0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8009fb2:	23e0      	movs	r3, #224	@ 0xe0
 8009fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fb6:	2302      	movs	r3, #2
 8009fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fba:	2300      	movs	r3, #0
 8009fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8009fc2:	2305      	movs	r3, #5
 8009fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fc6:	f107 0314 	add.w	r3, r7, #20
 8009fca:	4619      	mov	r1, r3
 8009fcc:	4805      	ldr	r0, [pc, #20]	@ (8009fe4 <HAL_SPI_MspInit+0x8c>)
 8009fce:	f001 fda7 	bl	800bb20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8009fd2:	bf00      	nop
 8009fd4:	3728      	adds	r7, #40	@ 0x28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	40013000 	.word	0x40013000
 8009fe0:	40023800 	.word	0x40023800
 8009fe4:	40020000 	.word	0x40020000

08009fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b082      	sub	sp, #8
 8009fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009fee:	2300      	movs	r3, #0
 8009ff0:	607b      	str	r3, [r7, #4]
 8009ff2:	4b12      	ldr	r3, [pc, #72]	@ (800a03c <HAL_MspInit+0x54>)
 8009ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ff6:	4a11      	ldr	r2, [pc, #68]	@ (800a03c <HAL_MspInit+0x54>)
 8009ff8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009ffc:	6453      	str	r3, [r2, #68]	@ 0x44
 8009ffe:	4b0f      	ldr	r3, [pc, #60]	@ (800a03c <HAL_MspInit+0x54>)
 800a000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a002:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a006:	607b      	str	r3, [r7, #4]
 800a008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a00a:	2300      	movs	r3, #0
 800a00c:	603b      	str	r3, [r7, #0]
 800a00e:	4b0b      	ldr	r3, [pc, #44]	@ (800a03c <HAL_MspInit+0x54>)
 800a010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a012:	4a0a      	ldr	r2, [pc, #40]	@ (800a03c <HAL_MspInit+0x54>)
 800a014:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a018:	6413      	str	r3, [r2, #64]	@ 0x40
 800a01a:	4b08      	ldr	r3, [pc, #32]	@ (800a03c <HAL_MspInit+0x54>)
 800a01c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a01e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800a022:	603b      	str	r3, [r7, #0]
 800a024:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a026:	2200      	movs	r2, #0
 800a028:	210f      	movs	r1, #15
 800a02a:	f06f 0001 	mvn.w	r0, #1
 800a02e:	f001 f8df 	bl	800b1f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a032:	bf00      	nop
 800a034:	3708      	adds	r7, #8
 800a036:	46bd      	mov	sp, r7
 800a038:	bd80      	pop	{r7, pc}
 800a03a:	bf00      	nop
 800a03c:	40023800 	.word	0x40023800

0800a040 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08c      	sub	sp, #48	@ 0x30
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800a048:	2300      	movs	r3, #0
 800a04a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800a04c:	2300      	movs	r3, #0
 800a04e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800a050:	2300      	movs	r3, #0
 800a052:	60bb      	str	r3, [r7, #8]
 800a054:	4b2f      	ldr	r3, [pc, #188]	@ (800a114 <HAL_InitTick+0xd4>)
 800a056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a058:	4a2e      	ldr	r2, [pc, #184]	@ (800a114 <HAL_InitTick+0xd4>)
 800a05a:	f043 0301 	orr.w	r3, r3, #1
 800a05e:	6453      	str	r3, [r2, #68]	@ 0x44
 800a060:	4b2c      	ldr	r3, [pc, #176]	@ (800a114 <HAL_InitTick+0xd4>)
 800a062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a064:	f003 0301 	and.w	r3, r3, #1
 800a068:	60bb      	str	r3, [r7, #8]
 800a06a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800a06c:	f107 020c 	add.w	r2, r7, #12
 800a070:	f107 0310 	add.w	r3, r7, #16
 800a074:	4611      	mov	r1, r2
 800a076:	4618      	mov	r0, r3
 800a078:	f003 feee 	bl	800de58 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800a07c:	f003 fed8 	bl	800de30 <HAL_RCC_GetPCLK2Freq>
 800a080:	4603      	mov	r3, r0
 800a082:	005b      	lsls	r3, r3, #1
 800a084:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800a086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a088:	4a23      	ldr	r2, [pc, #140]	@ (800a118 <HAL_InitTick+0xd8>)
 800a08a:	fba2 2303 	umull	r2, r3, r2, r3
 800a08e:	0c9b      	lsrs	r3, r3, #18
 800a090:	3b01      	subs	r3, #1
 800a092:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800a094:	4b21      	ldr	r3, [pc, #132]	@ (800a11c <HAL_InitTick+0xdc>)
 800a096:	4a22      	ldr	r2, [pc, #136]	@ (800a120 <HAL_InitTick+0xe0>)
 800a098:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800a09a:	4b20      	ldr	r3, [pc, #128]	@ (800a11c <HAL_InitTick+0xdc>)
 800a09c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a0a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800a0a2:	4a1e      	ldr	r2, [pc, #120]	@ (800a11c <HAL_InitTick+0xdc>)
 800a0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800a0a8:	4b1c      	ldr	r3, [pc, #112]	@ (800a11c <HAL_InitTick+0xdc>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a0ae:	4b1b      	ldr	r3, [pc, #108]	@ (800a11c <HAL_InitTick+0xdc>)
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a0b4:	4b19      	ldr	r3, [pc, #100]	@ (800a11c <HAL_InitTick+0xdc>)
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800a0ba:	4818      	ldr	r0, [pc, #96]	@ (800a11c <HAL_InitTick+0xdc>)
 800a0bc:	f004 fcd0 	bl	800ea60 <HAL_TIM_Base_Init>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800a0c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d11b      	bne.n	800a106 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800a0ce:	4813      	ldr	r0, [pc, #76]	@ (800a11c <HAL_InitTick+0xdc>)
 800a0d0:	f004 fd7e 	bl	800ebd0 <HAL_TIM_Base_Start_IT>
 800a0d4:	4603      	mov	r3, r0
 800a0d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800a0da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d111      	bne.n	800a106 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800a0e2:	2019      	movs	r0, #25
 800a0e4:	f001 f8a0 	bl	800b228 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2b0f      	cmp	r3, #15
 800a0ec:	d808      	bhi.n	800a100 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	6879      	ldr	r1, [r7, #4]
 800a0f2:	2019      	movs	r0, #25
 800a0f4:	f001 f87c 	bl	800b1f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800a0f8:	4a0a      	ldr	r2, [pc, #40]	@ (800a124 <HAL_InitTick+0xe4>)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6013      	str	r3, [r2, #0]
 800a0fe:	e002      	b.n	800a106 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 800a100:	2301      	movs	r3, #1
 800a102:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800a106:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3730      	adds	r7, #48	@ 0x30
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	40023800 	.word	0x40023800
 800a118:	431bde83 	.word	0x431bde83
 800a11c:	200043ac 	.word	0x200043ac
 800a120:	40010000 	.word	0x40010000
 800a124:	20000058 	.word	0x20000058

0800a128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800a128:	b480      	push	{r7}
 800a12a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800a12c:	bf00      	nop
 800a12e:	e7fd      	b.n	800a12c <NMI_Handler+0x4>

0800a130 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800a130:	b480      	push	{r7}
 800a132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800a134:	bf00      	nop
 800a136:	e7fd      	b.n	800a134 <HardFault_Handler+0x4>

0800a138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800a138:	b480      	push	{r7}
 800a13a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800a13c:	bf00      	nop
 800a13e:	e7fd      	b.n	800a13c <MemManage_Handler+0x4>

0800a140 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800a140:	b480      	push	{r7}
 800a142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800a144:	bf00      	nop
 800a146:	e7fd      	b.n	800a144 <BusFault_Handler+0x4>

0800a148 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800a148:	b480      	push	{r7}
 800a14a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800a14c:	bf00      	nop
 800a14e:	e7fd      	b.n	800a14c <UsageFault_Handler+0x4>

0800a150 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800a150:	b480      	push	{r7}
 800a152:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800a154:	bf00      	nop
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
	...

0800a160 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800a164:	4802      	ldr	r0, [pc, #8]	@ (800a170 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800a166:	f004 ff23 	bl	800efb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800a16a:	bf00      	nop
 800a16c:	bd80      	pop	{r7, pc}
 800a16e:	bf00      	nop
 800a170:	200043ac 	.word	0x200043ac

0800a174 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800a174:	b580      	push	{r7, lr}
 800a176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800a178:	4802      	ldr	r0, [pc, #8]	@ (800a184 <TIM4_IRQHandler+0x10>)
 800a17a:	f004 ff19 	bl	800efb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800a17e:	bf00      	nop
 800a180:	bd80      	pop	{r7, pc}
 800a182:	bf00      	nop
 800a184:	20004440 	.word	0x20004440

0800a188 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b082      	sub	sp, #8
 800a18c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800a18e:	480e      	ldr	r0, [pc, #56]	@ (800a1c8 <USART1_IRQHandler+0x40>)
 800a190:	f005 fe74 	bl	800fe7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 800a194:	4b0c      	ldr	r3, [pc, #48]	@ (800a1c8 <USART1_IRQHandler+0x40>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	f003 0310 	and.w	r3, r3, #16
 800a19e:	2b10      	cmp	r3, #16
 800a1a0:	d10d      	bne.n	800a1be <USART1_IRQHandler+0x36>
  {
      __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	607b      	str	r3, [r7, #4]
 800a1a6:	4b08      	ldr	r3, [pc, #32]	@ (800a1c8 <USART1_IRQHandler+0x40>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	607b      	str	r3, [r7, #4]
 800a1ae:	4b06      	ldr	r3, [pc, #24]	@ (800a1c8 <USART1_IRQHandler+0x40>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	685b      	ldr	r3, [r3, #4]
 800a1b4:	607b      	str	r3, [r7, #4]
 800a1b6:	687b      	ldr	r3, [r7, #4]
      HAL_UART_IDLECallback(&huart1);
 800a1b8:	4803      	ldr	r0, [pc, #12]	@ (800a1c8 <USART1_IRQHandler+0x40>)
 800a1ba:	f000 fc0d 	bl	800a9d8 <HAL_UART_IDLECallback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 800a1be:	bf00      	nop
 800a1c0:	3708      	adds	r7, #8
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}
 800a1c6:	bf00      	nop
 800a1c8:	20005530 	.word	0x20005530

0800a1cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 800a1cc:	b580      	push	{r7, lr}
 800a1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800a1d0:	4802      	ldr	r0, [pc, #8]	@ (800a1dc <DMA2_Stream2_IRQHandler+0x10>)
 800a1d2:	f001 fa3b 	bl	800b64c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800a1d6:	bf00      	nop
 800a1d8:	bd80      	pop	{r7, pc}
 800a1da:	bf00      	nop
 800a1dc:	20005578 	.word	0x20005578

0800a1e0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800a1e4:	4802      	ldr	r0, [pc, #8]	@ (800a1f0 <OTG_FS_IRQHandler+0x10>)
 800a1e6:	f002 f890 	bl	800c30a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800a1ea:	bf00      	nop
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	2000bb14 	.word	0x2000bb14

0800a1f4 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800a1f8:	4802      	ldr	r0, [pc, #8]	@ (800a204 <DMA2_Stream7_IRQHandler+0x10>)
 800a1fa:	f001 fa27 	bl	800b64c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800a1fe:	bf00      	nop
 800a200:	bd80      	pop	{r7, pc}
 800a202:	bf00      	nop
 800a204:	200055d8 	.word	0x200055d8

0800a208 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800a208:	b480      	push	{r7}
 800a20a:	af00      	add	r7, sp, #0
  return 1;
 800a20c:	2301      	movs	r3, #1
}
 800a20e:	4618      	mov	r0, r3
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr

0800a218 <_kill>:

int _kill(int pid, int sig)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b082      	sub	sp, #8
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
 800a220:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800a222:	f011 fa29 	bl	801b678 <__errno>
 800a226:	4603      	mov	r3, r0
 800a228:	2216      	movs	r2, #22
 800a22a:	601a      	str	r2, [r3, #0]
  return -1;
 800a22c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a230:	4618      	mov	r0, r3
 800a232:	3708      	adds	r7, #8
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}

0800a238 <_exit>:

void _exit (int status)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b082      	sub	sp, #8
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800a240:	f04f 31ff 	mov.w	r1, #4294967295
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff ffe7 	bl	800a218 <_kill>
  while (1) {}    /* Make sure we hang here */
 800a24a:	bf00      	nop
 800a24c:	e7fd      	b.n	800a24a <_exit+0x12>

0800a24e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b086      	sub	sp, #24
 800a252:	af00      	add	r7, sp, #0
 800a254:	60f8      	str	r0, [r7, #12]
 800a256:	60b9      	str	r1, [r7, #8]
 800a258:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a25a:	2300      	movs	r3, #0
 800a25c:	617b      	str	r3, [r7, #20]
 800a25e:	e00a      	b.n	800a276 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800a260:	f3af 8000 	nop.w
 800a264:	4601      	mov	r1, r0
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	1c5a      	adds	r2, r3, #1
 800a26a:	60ba      	str	r2, [r7, #8]
 800a26c:	b2ca      	uxtb	r2, r1
 800a26e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	3301      	adds	r3, #1
 800a274:	617b      	str	r3, [r7, #20]
 800a276:	697a      	ldr	r2, [r7, #20]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	429a      	cmp	r2, r3
 800a27c:	dbf0      	blt.n	800a260 <_read+0x12>
  }

  return len;
 800a27e:	687b      	ldr	r3, [r7, #4]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3718      	adds	r7, #24
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <_close>:
  }
  return len;
}

int _close(int file)
{
 800a288:	b480      	push	{r7}
 800a28a:	b083      	sub	sp, #12
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800a290:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a294:	4618      	mov	r0, r3
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b083      	sub	sp, #12
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800a2aa:	683b      	ldr	r3, [r7, #0]
 800a2ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a2b0:	605a      	str	r2, [r3, #4]
  return 0;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	370c      	adds	r7, #12
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <_isatty>:

int _isatty(int file)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800a2c8:	2301      	movs	r3, #1
}
 800a2ca:	4618      	mov	r0, r3
 800a2cc:	370c      	adds	r7, #12
 800a2ce:	46bd      	mov	sp, r7
 800a2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d4:	4770      	bx	lr

0800a2d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800a2d6:	b480      	push	{r7}
 800a2d8:	b085      	sub	sp, #20
 800a2da:	af00      	add	r7, sp, #0
 800a2dc:	60f8      	str	r0, [r7, #12]
 800a2de:	60b9      	str	r1, [r7, #8]
 800a2e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800a2e2:	2300      	movs	r3, #0
}
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	3714      	adds	r7, #20
 800a2e8:	46bd      	mov	sp, r7
 800a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ee:	4770      	bx	lr

0800a2f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b086      	sub	sp, #24
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800a2f8:	4a14      	ldr	r2, [pc, #80]	@ (800a34c <_sbrk+0x5c>)
 800a2fa:	4b15      	ldr	r3, [pc, #84]	@ (800a350 <_sbrk+0x60>)
 800a2fc:	1ad3      	subs	r3, r2, r3
 800a2fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800a300:	697b      	ldr	r3, [r7, #20]
 800a302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800a304:	4b13      	ldr	r3, [pc, #76]	@ (800a354 <_sbrk+0x64>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d102      	bne.n	800a312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800a30c:	4b11      	ldr	r3, [pc, #68]	@ (800a354 <_sbrk+0x64>)
 800a30e:	4a12      	ldr	r2, [pc, #72]	@ (800a358 <_sbrk+0x68>)
 800a310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800a312:	4b10      	ldr	r3, [pc, #64]	@ (800a354 <_sbrk+0x64>)
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	4413      	add	r3, r2
 800a31a:	693a      	ldr	r2, [r7, #16]
 800a31c:	429a      	cmp	r2, r3
 800a31e:	d207      	bcs.n	800a330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800a320:	f011 f9aa 	bl	801b678 <__errno>
 800a324:	4603      	mov	r3, r0
 800a326:	220c      	movs	r2, #12
 800a328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800a32a:	f04f 33ff 	mov.w	r3, #4294967295
 800a32e:	e009      	b.n	800a344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800a330:	4b08      	ldr	r3, [pc, #32]	@ (800a354 <_sbrk+0x64>)
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800a336:	4b07      	ldr	r3, [pc, #28]	@ (800a354 <_sbrk+0x64>)
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	4413      	add	r3, r2
 800a33e:	4a05      	ldr	r2, [pc, #20]	@ (800a354 <_sbrk+0x64>)
 800a340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800a342:	68fb      	ldr	r3, [r7, #12]
}
 800a344:	4618      	mov	r0, r3
 800a346:	3718      	adds	r7, #24
 800a348:	46bd      	mov	sp, r7
 800a34a:	bd80      	pop	{r7, pc}
 800a34c:	20020000 	.word	0x20020000
 800a350:	00000400 	.word	0x00000400
 800a354:	200043f4 	.word	0x200043f4
 800a358:	2000c368 	.word	0x2000c368

0800a35c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800a35c:	b480      	push	{r7}
 800a35e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800a360:	4b06      	ldr	r3, [pc, #24]	@ (800a37c <SystemInit+0x20>)
 800a362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a366:	4a05      	ldr	r2, [pc, #20]	@ (800a37c <SystemInit+0x20>)
 800a368:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a36c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800a370:	bf00      	nop
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	e000ed00 	.word	0xe000ed00

0800a380 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b08e      	sub	sp, #56	@ 0x38
 800a384:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a386:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a38a:	2200      	movs	r2, #0
 800a38c:	601a      	str	r2, [r3, #0]
 800a38e:	605a      	str	r2, [r3, #4]
 800a390:	609a      	str	r2, [r3, #8]
 800a392:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a394:	f107 0320 	add.w	r3, r7, #32
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800a39e:	1d3b      	adds	r3, r7, #4
 800a3a0:	2200      	movs	r2, #0
 800a3a2:	601a      	str	r2, [r3, #0]
 800a3a4:	605a      	str	r2, [r3, #4]
 800a3a6:	609a      	str	r2, [r3, #8]
 800a3a8:	60da      	str	r2, [r3, #12]
 800a3aa:	611a      	str	r2, [r3, #16]
 800a3ac:	615a      	str	r2, [r3, #20]
 800a3ae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a3b0:	4b3d      	ldr	r3, [pc, #244]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a3b2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800a3b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a3b8:	4b3b      	ldr	r3, [pc, #236]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a3ba:	2200      	movs	r2, #0
 800a3bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a3be:	4b3a      	ldr	r3, [pc, #232]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800a3c4:	4b38      	ldr	r3, [pc, #224]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a3ca:	4b37      	ldr	r3, [pc, #220]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a3d0:	4b35      	ldr	r3, [pc, #212]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a3d2:	2280      	movs	r2, #128	@ 0x80
 800a3d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a3d6:	4834      	ldr	r0, [pc, #208]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a3d8:	f004 fb42 	bl	800ea60 <HAL_TIM_Base_Init>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d001      	beq.n	800a3e6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800a3e2:	f7fe fd83 	bl	8008eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a3e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a3ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a3ec:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800a3f0:	4619      	mov	r1, r3
 800a3f2:	482d      	ldr	r0, [pc, #180]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a3f4:	f004 ff8e 	bl	800f314 <HAL_TIM_ConfigClockSource>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d001      	beq.n	800a402 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800a3fe:	f7fe fd75 	bl	8008eec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800a402:	4829      	ldr	r0, [pc, #164]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a404:	f004 fc54 	bl	800ecb0 <HAL_TIM_PWM_Init>
 800a408:	4603      	mov	r3, r0
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d001      	beq.n	800a412 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800a40e:	f7fe fd6d 	bl	8008eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a412:	2300      	movs	r3, #0
 800a414:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a416:	2300      	movs	r3, #0
 800a418:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a41a:	f107 0320 	add.w	r3, r7, #32
 800a41e:	4619      	mov	r1, r3
 800a420:	4821      	ldr	r0, [pc, #132]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a422:	f005 fb83 	bl	800fb2c <HAL_TIMEx_MasterConfigSynchronization>
 800a426:	4603      	mov	r3, r0
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d001      	beq.n	800a430 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800a42c:	f7fe fd5e 	bl	8008eec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800a430:	2360      	movs	r3, #96	@ 0x60
 800a432:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800a434:	2300      	movs	r3, #0
 800a436:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800a438:	2300      	movs	r3, #0
 800a43a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800a43c:	2300      	movs	r3, #0
 800a43e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800a440:	1d3b      	adds	r3, r7, #4
 800a442:	2200      	movs	r2, #0
 800a444:	4619      	mov	r1, r3
 800a446:	4818      	ldr	r0, [pc, #96]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a448:	f004 fea2 	bl	800f190 <HAL_TIM_PWM_ConfigChannel>
 800a44c:	4603      	mov	r3, r0
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d001      	beq.n	800a456 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800a452:	f7fe fd4b 	bl	8008eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800a456:	1d3b      	adds	r3, r7, #4
 800a458:	2204      	movs	r2, #4
 800a45a:	4619      	mov	r1, r3
 800a45c:	4812      	ldr	r0, [pc, #72]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a45e:	f004 fe97 	bl	800f190 <HAL_TIM_PWM_ConfigChannel>
 800a462:	4603      	mov	r3, r0
 800a464:	2b00      	cmp	r3, #0
 800a466:	d001      	beq.n	800a46c <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 800a468:	f7fe fd40 	bl	8008eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800a46c:	1d3b      	adds	r3, r7, #4
 800a46e:	2208      	movs	r2, #8
 800a470:	4619      	mov	r1, r3
 800a472:	480d      	ldr	r0, [pc, #52]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a474:	f004 fe8c 	bl	800f190 <HAL_TIM_PWM_ConfigChannel>
 800a478:	4603      	mov	r3, r0
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d001      	beq.n	800a482 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 800a47e:	f7fe fd35 	bl	8008eec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800a482:	1d3b      	adds	r3, r7, #4
 800a484:	220c      	movs	r2, #12
 800a486:	4619      	mov	r1, r3
 800a488:	4807      	ldr	r0, [pc, #28]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a48a:	f004 fe81 	bl	800f190 <HAL_TIM_PWM_ConfigChannel>
 800a48e:	4603      	mov	r3, r0
 800a490:	2b00      	cmp	r3, #0
 800a492:	d001      	beq.n	800a498 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 800a494:	f7fe fd2a 	bl	8008eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800a498:	4803      	ldr	r0, [pc, #12]	@ (800a4a8 <MX_TIM2_Init+0x128>)
 800a49a:	f000 f897 	bl	800a5cc <HAL_TIM_MspPostInit>

}
 800a49e:	bf00      	nop
 800a4a0:	3738      	adds	r7, #56	@ 0x38
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	200043f8 	.word	0x200043f8

0800a4ac <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a4b2:	f107 0308 	add.w	r3, r7, #8
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	601a      	str	r2, [r3, #0]
 800a4ba:	605a      	str	r2, [r3, #4]
 800a4bc:	609a      	str	r2, [r3, #8]
 800a4be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a4c0:	463b      	mov	r3, r7
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	601a      	str	r2, [r3, #0]
 800a4c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800a4c8:	4b20      	ldr	r3, [pc, #128]	@ (800a54c <MX_TIM4_Init+0xa0>)
 800a4ca:	4a21      	ldr	r2, [pc, #132]	@ (800a550 <MX_TIM4_Init+0xa4>)
 800a4cc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800a4ce:	4b1f      	ldr	r3, [pc, #124]	@ (800a54c <MX_TIM4_Init+0xa0>)
 800a4d0:	2253      	movs	r2, #83	@ 0x53
 800a4d2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a4d4:	4b1d      	ldr	r3, [pc, #116]	@ (800a54c <MX_TIM4_Init+0xa0>)
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800a4da:	4b1c      	ldr	r3, [pc, #112]	@ (800a54c <MX_TIM4_Init+0xa0>)
 800a4dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800a4e0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a4e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a54c <MX_TIM4_Init+0xa0>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800a4e8:	4b18      	ldr	r3, [pc, #96]	@ (800a54c <MX_TIM4_Init+0xa0>)
 800a4ea:	2200      	movs	r2, #0
 800a4ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800a4ee:	4817      	ldr	r0, [pc, #92]	@ (800a54c <MX_TIM4_Init+0xa0>)
 800a4f0:	f004 fab6 	bl	800ea60 <HAL_TIM_Base_Init>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d001      	beq.n	800a4fe <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800a4fa:	f7fe fcf7 	bl	8008eec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a4fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800a502:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800a504:	f107 0308 	add.w	r3, r7, #8
 800a508:	4619      	mov	r1, r3
 800a50a:	4810      	ldr	r0, [pc, #64]	@ (800a54c <MX_TIM4_Init+0xa0>)
 800a50c:	f004 ff02 	bl	800f314 <HAL_TIM_ConfigClockSource>
 800a510:	4603      	mov	r3, r0
 800a512:	2b00      	cmp	r3, #0
 800a514:	d001      	beq.n	800a51a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 800a516:	f7fe fce9 	bl	8008eec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800a51a:	2300      	movs	r3, #0
 800a51c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a51e:	2300      	movs	r3, #0
 800a520:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800a522:	463b      	mov	r3, r7
 800a524:	4619      	mov	r1, r3
 800a526:	4809      	ldr	r0, [pc, #36]	@ (800a54c <MX_TIM4_Init+0xa0>)
 800a528:	f005 fb00 	bl	800fb2c <HAL_TIMEx_MasterConfigSynchronization>
 800a52c:	4603      	mov	r3, r0
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d001      	beq.n	800a536 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800a532:	f7fe fcdb 	bl	8008eec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 800a536:	4805      	ldr	r0, [pc, #20]	@ (800a54c <MX_TIM4_Init+0xa0>)
 800a538:	f004 fb4a 	bl	800ebd0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 800a53c:	4803      	ldr	r0, [pc, #12]	@ (800a54c <MX_TIM4_Init+0xa0>)
 800a53e:	f004 fadf 	bl	800eb00 <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 800a542:	bf00      	nop
 800a544:	3718      	adds	r7, #24
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20004440 	.word	0x20004440
 800a550:	40000800 	.word	0x40000800

0800a554 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a564:	d10e      	bne.n	800a584 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800a566:	2300      	movs	r3, #0
 800a568:	60fb      	str	r3, [r7, #12]
 800a56a:	4b16      	ldr	r3, [pc, #88]	@ (800a5c4 <HAL_TIM_Base_MspInit+0x70>)
 800a56c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a56e:	4a15      	ldr	r2, [pc, #84]	@ (800a5c4 <HAL_TIM_Base_MspInit+0x70>)
 800a570:	f043 0301 	orr.w	r3, r3, #1
 800a574:	6413      	str	r3, [r2, #64]	@ 0x40
 800a576:	4b13      	ldr	r3, [pc, #76]	@ (800a5c4 <HAL_TIM_Base_MspInit+0x70>)
 800a578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a57a:	f003 0301 	and.w	r3, r3, #1
 800a57e:	60fb      	str	r3, [r7, #12]
 800a580:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800a582:	e01a      	b.n	800a5ba <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	4a0f      	ldr	r2, [pc, #60]	@ (800a5c8 <HAL_TIM_Base_MspInit+0x74>)
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d115      	bne.n	800a5ba <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800a58e:	2300      	movs	r3, #0
 800a590:	60bb      	str	r3, [r7, #8]
 800a592:	4b0c      	ldr	r3, [pc, #48]	@ (800a5c4 <HAL_TIM_Base_MspInit+0x70>)
 800a594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a596:	4a0b      	ldr	r2, [pc, #44]	@ (800a5c4 <HAL_TIM_Base_MspInit+0x70>)
 800a598:	f043 0304 	orr.w	r3, r3, #4
 800a59c:	6413      	str	r3, [r2, #64]	@ 0x40
 800a59e:	4b09      	ldr	r3, [pc, #36]	@ (800a5c4 <HAL_TIM_Base_MspInit+0x70>)
 800a5a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5a2:	f003 0304 	and.w	r3, r3, #4
 800a5a6:	60bb      	str	r3, [r7, #8]
 800a5a8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	2105      	movs	r1, #5
 800a5ae:	201e      	movs	r0, #30
 800a5b0:	f000 fe1e 	bl	800b1f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800a5b4:	201e      	movs	r0, #30
 800a5b6:	f000 fe37 	bl	800b228 <HAL_NVIC_EnableIRQ>
}
 800a5ba:	bf00      	nop
 800a5bc:	3710      	adds	r7, #16
 800a5be:	46bd      	mov	sp, r7
 800a5c0:	bd80      	pop	{r7, pc}
 800a5c2:	bf00      	nop
 800a5c4:	40023800 	.word	0x40023800
 800a5c8:	40000800 	.word	0x40000800

0800a5cc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08a      	sub	sp, #40	@ 0x28
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5d4:	f107 0314 	add.w	r3, r7, #20
 800a5d8:	2200      	movs	r2, #0
 800a5da:	601a      	str	r2, [r3, #0]
 800a5dc:	605a      	str	r2, [r3, #4]
 800a5de:	609a      	str	r2, [r3, #8]
 800a5e0:	60da      	str	r2, [r3, #12]
 800a5e2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5ec:	d13c      	bne.n	800a668 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	613b      	str	r3, [r7, #16]
 800a5f2:	4b1f      	ldr	r3, [pc, #124]	@ (800a670 <HAL_TIM_MspPostInit+0xa4>)
 800a5f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5f6:	4a1e      	ldr	r2, [pc, #120]	@ (800a670 <HAL_TIM_MspPostInit+0xa4>)
 800a5f8:	f043 0301 	orr.w	r3, r3, #1
 800a5fc:	6313      	str	r3, [r2, #48]	@ 0x30
 800a5fe:	4b1c      	ldr	r3, [pc, #112]	@ (800a670 <HAL_TIM_MspPostInit+0xa4>)
 800a600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a602:	f003 0301 	and.w	r3, r3, #1
 800a606:	613b      	str	r3, [r7, #16]
 800a608:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
 800a60e:	4b18      	ldr	r3, [pc, #96]	@ (800a670 <HAL_TIM_MspPostInit+0xa4>)
 800a610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a612:	4a17      	ldr	r2, [pc, #92]	@ (800a670 <HAL_TIM_MspPostInit+0xa4>)
 800a614:	f043 0302 	orr.w	r3, r3, #2
 800a618:	6313      	str	r3, [r2, #48]	@ 0x30
 800a61a:	4b15      	ldr	r3, [pc, #84]	@ (800a670 <HAL_TIM_MspPostInit+0xa4>)
 800a61c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a61e:	f003 0302 	and.w	r3, r3, #2
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 800a626:	f248 030c 	movw	r3, #32780	@ 0x800c
 800a62a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a62c:	2302      	movs	r3, #2
 800a62e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a630:	2300      	movs	r3, #0
 800a632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800a634:	2301      	movs	r3, #1
 800a636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a638:	2301      	movs	r3, #1
 800a63a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a63c:	f107 0314 	add.w	r3, r7, #20
 800a640:	4619      	mov	r1, r3
 800a642:	480c      	ldr	r0, [pc, #48]	@ (800a674 <HAL_TIM_MspPostInit+0xa8>)
 800a644:	f001 fa6c 	bl	800bb20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800a648:	2308      	movs	r3, #8
 800a64a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a64c:	2302      	movs	r3, #2
 800a64e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a650:	2300      	movs	r3, #0
 800a652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800a654:	2301      	movs	r3, #1
 800a656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800a658:	2301      	movs	r3, #1
 800a65a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a65c:	f107 0314 	add.w	r3, r7, #20
 800a660:	4619      	mov	r1, r3
 800a662:	4805      	ldr	r0, [pc, #20]	@ (800a678 <HAL_TIM_MspPostInit+0xac>)
 800a664:	f001 fa5c 	bl	800bb20 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800a668:	bf00      	nop
 800a66a:	3728      	adds	r7, #40	@ 0x28
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	40023800 	.word	0x40023800
 800a674:	40020000 	.word	0x40020000
 800a678:	40020400 	.word	0x40020400

0800a67c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b082      	sub	sp, #8
 800a680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
	ring_buffer_init(&usart1_tx_ring_buffer, usart1_tx_buffer, USART1_TX_BUFFER_SIZE);
 800a682:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a686:	4929      	ldr	r1, [pc, #164]	@ (800a72c <MX_USART1_UART_Init+0xb0>)
 800a688:	4829      	ldr	r0, [pc, #164]	@ (800a730 <MX_USART1_UART_Init+0xb4>)
 800a68a:	f7fd fef7 	bl	800847c <ring_buffer_init>
	ring_buffer_init(&usart1_rx_ring_buffer, usart1_rx_buffer, USART1_RX_BUFFER_SIZE);
 800a68e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a692:	4928      	ldr	r1, [pc, #160]	@ (800a734 <MX_USART1_UART_Init+0xb8>)
 800a694:	4828      	ldr	r0, [pc, #160]	@ (800a738 <MX_USART1_UART_Init+0xbc>)
 800a696:	f7fd fef1 	bl	800847c <ring_buffer_init>
	usart1_last_tx_size = 0;
 800a69a:	4b28      	ldr	r3, [pc, #160]	@ (800a73c <MX_USART1_UART_Init+0xc0>)
 800a69c:	2200      	movs	r2, #0
 800a69e:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 800a6a0:	4b27      	ldr	r3, [pc, #156]	@ (800a740 <MX_USART1_UART_Init+0xc4>)
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a6a6:	4b27      	ldr	r3, [pc, #156]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a6a8:	4a27      	ldr	r2, [pc, #156]	@ (800a748 <MX_USART1_UART_Init+0xcc>)
 800a6aa:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a6ac:	4b25      	ldr	r3, [pc, #148]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a6ae:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800a6b2:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a6b4:	4b23      	ldr	r3, [pc, #140]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a6ba:	4b22      	ldr	r3, [pc, #136]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a6bc:	2200      	movs	r2, #0
 800a6be:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a6c0:	4b20      	ldr	r3, [pc, #128]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a6c6:	4b1f      	ldr	r3, [pc, #124]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a6c8:	220c      	movs	r2, #12
 800a6ca:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a6cc:	4b1d      	ldr	r3, [pc, #116]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 800a6d2:	4b1c      	ldr	r3, [pc, #112]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a6d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800a6d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a6da:	481a      	ldr	r0, [pc, #104]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a6dc:	f005 fab6 	bl	800fc4c <HAL_UART_Init>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d001      	beq.n	800a6ea <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 800a6e6:	f7fe fc01 	bl	8008eec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  uint16_t rx_buffer_remaining_free = (uint16_t)ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 800a6ea:	4813      	ldr	r0, [pc, #76]	@ (800a738 <MX_USART1_UART_Init+0xbc>)
 800a6ec:	f7fd ff1d 	bl	800852a <ring_buffer_linear_free_space>
 800a6f0:	4603      	mov	r3, r0
 800a6f2:	80fb      	strh	r3, [r7, #6]
  uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 800a6f4:	4810      	ldr	r0, [pc, #64]	@ (800a738 <MX_USART1_UART_Init+0xbc>)
 800a6f6:	f7fd ff5a 	bl	80085ae <ring_buffer_write_ptr>
 800a6fa:	6038      	str	r0, [r7, #0]
//   usart1_last_rx_len = rx_buffer_remaining_free;
//   HAL_UART_Receive_DMA(&huart1, write_ptr, rx_buffer_remaining_free);

  HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 800a6fc:	2280      	movs	r2, #128	@ 0x80
 800a6fe:	4913      	ldr	r1, [pc, #76]	@ (800a74c <MX_USART1_UART_Init+0xd0>)
 800a700:	4810      	ldr	r0, [pc, #64]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a702:	f005 fb95 	bl	800fe30 <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 800a706:	4b0e      	ldr	r3, [pc, #56]	@ (800a740 <MX_USART1_UART_Init+0xc4>)
 800a708:	2280      	movs	r2, #128	@ 0x80
 800a70a:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 800a70c:	4b10      	ldr	r3, [pc, #64]	@ (800a750 <MX_USART1_UART_Init+0xd4>)
 800a70e:	2200      	movs	r2, #0
 800a710:	801a      	strh	r2, [r3, #0]

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 800a712:	4b0c      	ldr	r3, [pc, #48]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	68da      	ldr	r2, [r3, #12]
 800a718:	4b0a      	ldr	r3, [pc, #40]	@ (800a744 <MX_USART1_UART_Init+0xc8>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f042 0210 	orr.w	r2, r2, #16
 800a720:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 800a722:	bf00      	nop
 800a724:	3708      	adds	r7, #8
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
 800a72a:	bf00      	nop
 800a72c:	20004c88 	.word	0x20004c88
 800a730:	20005488 	.word	0x20005488
 800a734:	20004488 	.word	0x20004488
 800a738:	20005498 	.word	0x20005498
 800a73c:	200054a8 	.word	0x200054a8
 800a740:	200054aa 	.word	0x200054aa
 800a744:	20005530 	.word	0x20005530
 800a748:	40011000 	.word	0x40011000
 800a74c:	200054ac 	.word	0x200054ac
 800a750:	2000552c 	.word	0x2000552c

0800a754 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b08a      	sub	sp, #40	@ 0x28
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a75c:	f107 0314 	add.w	r3, r7, #20
 800a760:	2200      	movs	r2, #0
 800a762:	601a      	str	r2, [r3, #0]
 800a764:	605a      	str	r2, [r3, #4]
 800a766:	609a      	str	r2, [r3, #8]
 800a768:	60da      	str	r2, [r3, #12]
 800a76a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a4c      	ldr	r2, [pc, #304]	@ (800a8a4 <HAL_UART_MspInit+0x150>)
 800a772:	4293      	cmp	r3, r2
 800a774:	f040 8092 	bne.w	800a89c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800a778:	2300      	movs	r3, #0
 800a77a:	613b      	str	r3, [r7, #16]
 800a77c:	4b4a      	ldr	r3, [pc, #296]	@ (800a8a8 <HAL_UART_MspInit+0x154>)
 800a77e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a780:	4a49      	ldr	r2, [pc, #292]	@ (800a8a8 <HAL_UART_MspInit+0x154>)
 800a782:	f043 0310 	orr.w	r3, r3, #16
 800a786:	6453      	str	r3, [r2, #68]	@ 0x44
 800a788:	4b47      	ldr	r3, [pc, #284]	@ (800a8a8 <HAL_UART_MspInit+0x154>)
 800a78a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a78c:	f003 0310 	and.w	r3, r3, #16
 800a790:	613b      	str	r3, [r7, #16]
 800a792:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a794:	2300      	movs	r3, #0
 800a796:	60fb      	str	r3, [r7, #12]
 800a798:	4b43      	ldr	r3, [pc, #268]	@ (800a8a8 <HAL_UART_MspInit+0x154>)
 800a79a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a79c:	4a42      	ldr	r2, [pc, #264]	@ (800a8a8 <HAL_UART_MspInit+0x154>)
 800a79e:	f043 0301 	orr.w	r3, r3, #1
 800a7a2:	6313      	str	r3, [r2, #48]	@ 0x30
 800a7a4:	4b40      	ldr	r3, [pc, #256]	@ (800a8a8 <HAL_UART_MspInit+0x154>)
 800a7a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	60fb      	str	r3, [r7, #12]
 800a7ae:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a7b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800a7b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7b6:	2302      	movs	r3, #2
 800a7b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7be:	2303      	movs	r3, #3
 800a7c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a7c2:	2307      	movs	r3, #7
 800a7c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a7c6:	f107 0314 	add.w	r3, r7, #20
 800a7ca:	4619      	mov	r1, r3
 800a7cc:	4837      	ldr	r0, [pc, #220]	@ (800a8ac <HAL_UART_MspInit+0x158>)
 800a7ce:	f001 f9a7 	bl	800bb20 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 800a7d2:	4b37      	ldr	r3, [pc, #220]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a7d4:	4a37      	ldr	r2, [pc, #220]	@ (800a8b4 <HAL_UART_MspInit+0x160>)
 800a7d6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800a7d8:	4b35      	ldr	r3, [pc, #212]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a7da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a7de:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a7e0:	4b33      	ldr	r3, [pc, #204]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a7e6:	4b32      	ldr	r3, [pc, #200]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a7ec:	4b30      	ldr	r3, [pc, #192]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a7ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a7f2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a7f4:	4b2e      	ldr	r3, [pc, #184]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a7fa:	4b2d      	ldr	r3, [pc, #180]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800a800:	4b2b      	ldr	r3, [pc, #172]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a802:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a806:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800a808:	4b29      	ldr	r3, [pc, #164]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a80a:	2200      	movs	r2, #0
 800a80c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a80e:	4b28      	ldr	r3, [pc, #160]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a810:	2200      	movs	r2, #0
 800a812:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800a814:	4826      	ldr	r0, [pc, #152]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a816:	f000 fd23 	bl	800b260 <HAL_DMA_Init>
 800a81a:	4603      	mov	r3, r0
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d001      	beq.n	800a824 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800a820:	f7fe fb64 	bl	8008eec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	4a22      	ldr	r2, [pc, #136]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a828:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a82a:	4a21      	ldr	r2, [pc, #132]	@ (800a8b0 <HAL_UART_MspInit+0x15c>)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a830:	4b21      	ldr	r3, [pc, #132]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a832:	4a22      	ldr	r2, [pc, #136]	@ (800a8bc <HAL_UART_MspInit+0x168>)
 800a834:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a836:	4b20      	ldr	r3, [pc, #128]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a838:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a83c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a83e:	4b1e      	ldr	r3, [pc, #120]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a840:	2240      	movs	r2, #64	@ 0x40
 800a842:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a844:	4b1c      	ldr	r3, [pc, #112]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a846:	2200      	movs	r2, #0
 800a848:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a84a:	4b1b      	ldr	r3, [pc, #108]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a84c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a850:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a852:	4b19      	ldr	r3, [pc, #100]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a854:	2200      	movs	r2, #0
 800a856:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a858:	4b17      	ldr	r3, [pc, #92]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a85a:	2200      	movs	r2, #0
 800a85c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a85e:	4b16      	ldr	r3, [pc, #88]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a860:	2200      	movs	r2, #0
 800a862:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a864:	4b14      	ldr	r3, [pc, #80]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a866:	2200      	movs	r2, #0
 800a868:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a86a:	4b13      	ldr	r3, [pc, #76]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a86c:	2200      	movs	r2, #0
 800a86e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a870:	4811      	ldr	r0, [pc, #68]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a872:	f000 fcf5 	bl	800b260 <HAL_DMA_Init>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d001      	beq.n	800a880 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800a87c:	f7fe fb36 	bl	8008eec <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	4a0d      	ldr	r2, [pc, #52]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a884:	639a      	str	r2, [r3, #56]	@ 0x38
 800a886:	4a0c      	ldr	r2, [pc, #48]	@ (800a8b8 <HAL_UART_MspInit+0x164>)
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a88c:	2200      	movs	r2, #0
 800a88e:	2105      	movs	r1, #5
 800a890:	2025      	movs	r0, #37	@ 0x25
 800a892:	f000 fcad 	bl	800b1f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a896:	2025      	movs	r0, #37	@ 0x25
 800a898:	f000 fcc6 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a89c:	bf00      	nop
 800a89e:	3728      	adds	r7, #40	@ 0x28
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	40011000 	.word	0x40011000
 800a8a8:	40023800 	.word	0x40023800
 800a8ac:	40020000 	.word	0x40020000
 800a8b0:	20005578 	.word	0x20005578
 800a8b4:	40026440 	.word	0x40026440
 800a8b8:	200055d8 	.word	0x200055d8
 800a8bc:	400264b8 	.word	0x400264b8

0800a8c0 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800a8c0:	b580      	push	{r7, lr}
 800a8c2:	b082      	sub	sp, #8
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	4a15      	ldr	r2, [pc, #84]	@ (800a924 <HAL_UART_MspDeInit+0x64>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d123      	bne.n	800a91a <HAL_UART_MspDeInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800a8d2:	4b15      	ldr	r3, [pc, #84]	@ (800a928 <HAL_UART_MspDeInit+0x68>)
 800a8d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8d6:	4a14      	ldr	r2, [pc, #80]	@ (800a928 <HAL_UART_MspDeInit+0x68>)
 800a8d8:	f023 0310 	bic.w	r3, r3, #16
 800a8dc:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800a8de:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a8e2:	4812      	ldr	r0, [pc, #72]	@ (800a92c <HAL_UART_MspDeInit+0x6c>)
 800a8e4:	f001 fab8 	bl	800be58 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fd65 	bl	800b3bc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 fd60 	bl	800b3bc <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800a8fc:	2025      	movs	r0, #37	@ 0x25
 800a8fe:	f000 fca1 	bl	800b244 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */
	usart1_last_tx_size = 0;
 800a902:	4b0b      	ldr	r3, [pc, #44]	@ (800a930 <HAL_UART_MspDeInit+0x70>)
 800a904:	2200      	movs	r2, #0
 800a906:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 800a908:	4b0a      	ldr	r3, [pc, #40]	@ (800a934 <HAL_UART_MspDeInit+0x74>)
 800a90a:	2200      	movs	r2, #0
 800a90c:	801a      	strh	r2, [r3, #0]
	ring_buffer_clear(&usart1_tx_ring_buffer);
 800a90e:	480a      	ldr	r0, [pc, #40]	@ (800a938 <HAL_UART_MspDeInit+0x78>)
 800a910:	f7fd ff41 	bl	8008796 <ring_buffer_clear>
	ring_buffer_clear(&usart1_rx_ring_buffer);
 800a914:	4809      	ldr	r0, [pc, #36]	@ (800a93c <HAL_UART_MspDeInit+0x7c>)
 800a916:	f7fd ff3e 	bl	8008796 <ring_buffer_clear>
  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800a91a:	bf00      	nop
 800a91c:	3708      	adds	r7, #8
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}
 800a922:	bf00      	nop
 800a924:	40011000 	.word	0x40011000
 800a928:	40023800 	.word	0x40023800
 800a92c:	40020000 	.word	0x40020000
 800a930:	200054a8 	.word	0x200054a8
 800a934:	200054aa 	.word	0x200054aa
 800a938:	20005488 	.word	0x20005488
 800a93c:	20005498 	.word	0x20005498

0800a940 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b086      	sub	sp, #24
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	4a19      	ldr	r2, [pc, #100]	@ (800a9b4 <HAL_UART_TxCpltCallback+0x74>)
 800a94e:	4293      	cmp	r3, r2
 800a950:	d12b      	bne.n	800a9aa <HAL_UART_TxCpltCallback+0x6a>
    {

    	if(huart1.gState == HAL_UART_STATE_READY)
 800a952:	4b19      	ldr	r3, [pc, #100]	@ (800a9b8 <HAL_UART_TxCpltCallback+0x78>)
 800a954:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a958:	b2db      	uxtb	r3, r3
 800a95a:	2b20      	cmp	r3, #32
 800a95c:	d125      	bne.n	800a9aa <HAL_UART_TxCpltCallback+0x6a>
    	{
			// Advance tail for previously sent chunk
			ring_buffer_advance_tail(&usart1_tx_ring_buffer, usart1_last_tx_size);
 800a95e:	4b17      	ldr	r3, [pc, #92]	@ (800a9bc <HAL_UART_TxCpltCallback+0x7c>)
 800a960:	881b      	ldrh	r3, [r3, #0]
 800a962:	b29b      	uxth	r3, r3
 800a964:	4619      	mov	r1, r3
 800a966:	4816      	ldr	r0, [pc, #88]	@ (800a9c0 <HAL_UART_TxCpltCallback+0x80>)
 800a968:	f7fd fef5 	bl	8008756 <ring_buffer_advance_tail>

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 800a96c:	4814      	ldr	r0, [pc, #80]	@ (800a9c0 <HAL_UART_TxCpltCallback+0x80>)
 800a96e:	f7fd fe03 	bl	8008578 <ring_buffer_linear_used_space>
 800a972:	6178      	str	r0, [r7, #20]
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 800a974:	697b      	ldr	r3, [r7, #20]
 800a976:	2b80      	cmp	r3, #128	@ 0x80
 800a978:	bf28      	it	cs
 800a97a:	2380      	movcs	r3, #128	@ 0x80
 800a97c:	827b      	strh	r3, [r7, #18]
			uint8_t *next_chunk = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 800a97e:	4810      	ldr	r0, [pc, #64]	@ (800a9c0 <HAL_UART_TxCpltCallback+0x80>)
 800a980:	f7fd fe24 	bl	80085cc <ring_buffer_read_ptr>
 800a984:	60f8      	str	r0, [r7, #12]
			usart1_last_tx_size = frame_size;
 800a986:	4a0d      	ldr	r2, [pc, #52]	@ (800a9bc <HAL_UART_TxCpltCallback+0x7c>)
 800a988:	8a7b      	ldrh	r3, [r7, #18]
 800a98a:	8013      	strh	r3, [r2, #0]

			if (frame_size > 0)
 800a98c:	8a7b      	ldrh	r3, [r7, #18]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d00b      	beq.n	800a9aa <HAL_UART_TxCpltCallback+0x6a>
			{
		        if (HAL_UART_Transmit_DMA(huart, next_chunk, frame_size) != HAL_OK) {
 800a992:	8a7b      	ldrh	r3, [r7, #18]
 800a994:	461a      	mov	r2, r3
 800a996:	68f9      	ldr	r1, [r7, #12]
 800a998:	6878      	ldr	r0, [r7, #4]
 800a99a:	f005 f9d9 	bl	800fd50 <HAL_UART_Transmit_DMA>
 800a99e:	4603      	mov	r3, r0
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d002      	beq.n	800a9aa <HAL_UART_TxCpltCallback+0x6a>
		            usart1_last_tx_size = 0;
 800a9a4:	4b05      	ldr	r3, [pc, #20]	@ (800a9bc <HAL_UART_TxCpltCallback+0x7c>)
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit_IT(huart, next_chunk, frame_size);
				// Do NOT advance tail here. Advance it next time, after TX completes.
			}
    	}
    }
}
 800a9aa:	bf00      	nop
 800a9ac:	3718      	adds	r7, #24
 800a9ae:	46bd      	mov	sp, r7
 800a9b0:	bd80      	pop	{r7, pc}
 800a9b2:	bf00      	nop
 800a9b4:	40011000 	.word	0x40011000
 800a9b8:	20005530 	.word	0x20005530
 800a9bc:	200054a8 	.word	0x200054a8
 800a9c0:	20005488 	.word	0x20005488

0800a9c4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
    }
}
 800a9cc:	bf00      	nop
 800a9ce:	370c      	adds	r7, #12
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr

0800a9d8 <HAL_UART_IDLECallback>:




void HAL_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1){
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a26      	ldr	r2, [pc, #152]	@ (800aa80 <HAL_UART_IDLECallback+0xa8>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d147      	bne.n	800aa7a <HAL_UART_IDLECallback+0xa2>

    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx));
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800a9f6:	617b      	str	r3, [r7, #20]

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 800a9f8:	4b22      	ldr	r3, [pc, #136]	@ (800aa84 <HAL_UART_IDLECallback+0xac>)
 800a9fa:	881b      	ldrh	r3, [r3, #0]
 800a9fc:	b29b      	uxth	r3, r3
 800a9fe:	461a      	mov	r2, r3
 800aa00:	697b      	ldr	r3, [r7, #20]
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d038      	beq.n	800aa78 <HAL_UART_IDLECallback+0xa0>

    if (dma_pos > usart1_dma_last_pos) {
 800aa06:	4b1f      	ldr	r3, [pc, #124]	@ (800aa84 <HAL_UART_IDLECallback+0xac>)
 800aa08:	881b      	ldrh	r3, [r3, #0]
 800aa0a:	b29b      	uxth	r3, r3
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	4293      	cmp	r3, r2
 800aa12:	dd12      	ble.n	800aa3a <HAL_UART_IDLECallback+0x62>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 800aa14:	4b1b      	ldr	r3, [pc, #108]	@ (800aa84 <HAL_UART_IDLECallback+0xac>)
 800aa16:	881b      	ldrh	r3, [r3, #0]
 800aa18:	b29b      	uxth	r3, r3
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	697b      	ldr	r3, [r7, #20]
 800aa1e:	1a9b      	subs	r3, r3, r2
 800aa20:	60fb      	str	r3, [r7, #12]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 800aa22:	4b18      	ldr	r3, [pc, #96]	@ (800aa84 <HAL_UART_IDLECallback+0xac>)
 800aa24:	881b      	ldrh	r3, [r3, #0]
 800aa26:	b29b      	uxth	r3, r3
 800aa28:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800aa2a:	4b17      	ldr	r3, [pc, #92]	@ (800aa88 <HAL_UART_IDLECallback+0xb0>)
 800aa2c:	4413      	add	r3, r2
 800aa2e:	68fa      	ldr	r2, [r7, #12]
 800aa30:	4619      	mov	r1, r3
 800aa32:	4816      	ldr	r0, [pc, #88]	@ (800aa8c <HAL_UART_IDLECallback+0xb4>)
 800aa34:	f7fd fdd9 	bl	80085ea <ring_buffer_enqueue_arr>
 800aa38:	e019      	b.n	800aa6e <HAL_UART_IDLECallback+0x96>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 800aa3a:	4b12      	ldr	r3, [pc, #72]	@ (800aa84 <HAL_UART_IDLECallback+0xac>)
 800aa3c:	881b      	ldrh	r3, [r3, #0]
 800aa3e:	b29b      	uxth	r3, r3
 800aa40:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800aa44:	613b      	str	r3, [r7, #16]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 800aa46:	4b0f      	ldr	r3, [pc, #60]	@ (800aa84 <HAL_UART_IDLECallback+0xac>)
 800aa48:	881b      	ldrh	r3, [r3, #0]
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800aa4e:	4b0e      	ldr	r3, [pc, #56]	@ (800aa88 <HAL_UART_IDLECallback+0xb0>)
 800aa50:	4413      	add	r3, r2
 800aa52:	693a      	ldr	r2, [r7, #16]
 800aa54:	4619      	mov	r1, r3
 800aa56:	480d      	ldr	r0, [pc, #52]	@ (800aa8c <HAL_UART_IDLECallback+0xb4>)
 800aa58:	f7fd fdc7 	bl	80085ea <ring_buffer_enqueue_arr>
        if (dma_pos) {
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d005      	beq.n	800aa6e <HAL_UART_IDLECallback+0x96>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800aa62:	697b      	ldr	r3, [r7, #20]
 800aa64:	461a      	mov	r2, r3
 800aa66:	4908      	ldr	r1, [pc, #32]	@ (800aa88 <HAL_UART_IDLECallback+0xb0>)
 800aa68:	4808      	ldr	r0, [pc, #32]	@ (800aa8c <HAL_UART_IDLECallback+0xb4>)
 800aa6a:	f7fd fdbe 	bl	80085ea <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	b29a      	uxth	r2, r3
 800aa72:	4b04      	ldr	r3, [pc, #16]	@ (800aa84 <HAL_UART_IDLECallback+0xac>)
 800aa74:	801a      	strh	r2, [r3, #0]
 800aa76:	e000      	b.n	800aa7a <HAL_UART_IDLECallback+0xa2>
    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 800aa78:	bf00      	nop
    }
}
 800aa7a:	3718      	adds	r7, #24
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	40011000 	.word	0x40011000
 800aa84:	2000552c 	.word	0x2000552c
 800aa88:	200054ac 	.word	0x200054ac
 800aa8c:	20005498 	.word	0x20005498

0800aa90 <usart1_read_dma_buffer>:


void usart1_read_dma_buffer()
{
 800aa90:	b580      	push	{r7, lr}
 800aa92:	b08c      	sub	sp, #48	@ 0x30
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	2300      	movs	r3, #0
 800aa98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800aa9a:	f3ef 8310 	mrs	r3, PRIMASK
 800aa9e:	61bb      	str	r3, [r7, #24]
  return(result);
 800aaa0:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800aaa2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aaa4:	b672      	cpsid	i
}
 800aaa6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aaa8:	f3bf 8f4f 	dsb	sy
}
 800aaac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aaae:	f3bf 8f6f 	isb	sy
}
 800aab2:	bf00      	nop
    return old;
 800aab4:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800aab6:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800aab8:	69fb      	ldr	r3, [r7, #28]
 800aaba:	2b01      	cmp	r3, #1
 800aabc:	d001      	beq.n	800aac2 <usart1_read_dma_buffer+0x32>
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	e000      	b.n	800aac4 <usart1_read_dma_buffer+0x34>
 800aac2:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800aac4:	603b      	str	r3, [r7, #0]
 800aac6:	2301      	movs	r3, #1
 800aac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaca:	e049      	b.n	800ab60 <usart1_read_dma_buffer+0xd0>
	{
    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx));
 800aacc:	4b33      	ldr	r3, [pc, #204]	@ (800ab9c <usart1_read_dma_buffer+0x10c>)
 800aace:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	685b      	ldr	r3, [r3, #4]
 800aad4:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800aad8:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 800aada:	4b31      	ldr	r3, [pc, #196]	@ (800aba0 <usart1_read_dma_buffer+0x110>)
 800aadc:	881b      	ldrh	r3, [r3, #0]
 800aade:	b29b      	uxth	r3, r3
 800aae0:	461a      	mov	r2, r3
 800aae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d101      	bne.n	800aaec <usart1_read_dma_buffer+0x5c>
 800aae8:	2300      	movs	r3, #0
 800aaea:	e03d      	b.n	800ab68 <usart1_read_dma_buffer+0xd8>

    if (dma_pos > usart1_dma_last_pos) {
 800aaec:	4b2c      	ldr	r3, [pc, #176]	@ (800aba0 <usart1_read_dma_buffer+0x110>)
 800aaee:	881b      	ldrh	r3, [r3, #0]
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	461a      	mov	r2, r3
 800aaf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf6:	4293      	cmp	r3, r2
 800aaf8:	dd12      	ble.n	800ab20 <usart1_read_dma_buffer+0x90>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 800aafa:	4b29      	ldr	r3, [pc, #164]	@ (800aba0 <usart1_read_dma_buffer+0x110>)
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	b29b      	uxth	r3, r3
 800ab00:	461a      	mov	r2, r3
 800ab02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab04:	1a9b      	subs	r3, r3, r2
 800ab06:	623b      	str	r3, [r7, #32]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 800ab08:	4b25      	ldr	r3, [pc, #148]	@ (800aba0 <usart1_read_dma_buffer+0x110>)
 800ab0a:	881b      	ldrh	r3, [r3, #0]
 800ab0c:	b29b      	uxth	r3, r3
 800ab0e:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800ab10:	4b24      	ldr	r3, [pc, #144]	@ (800aba4 <usart1_read_dma_buffer+0x114>)
 800ab12:	4413      	add	r3, r2
 800ab14:	6a3a      	ldr	r2, [r7, #32]
 800ab16:	4619      	mov	r1, r3
 800ab18:	4823      	ldr	r0, [pc, #140]	@ (800aba8 <usart1_read_dma_buffer+0x118>)
 800ab1a:	f7fd fd66 	bl	80085ea <ring_buffer_enqueue_arr>
 800ab1e:	e019      	b.n	800ab54 <usart1_read_dma_buffer+0xc4>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 800ab20:	4b1f      	ldr	r3, [pc, #124]	@ (800aba0 <usart1_read_dma_buffer+0x110>)
 800ab22:	881b      	ldrh	r3, [r3, #0]
 800ab24:	b29b      	uxth	r3, r3
 800ab26:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800ab2a:	627b      	str	r3, [r7, #36]	@ 0x24
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 800ab2c:	4b1c      	ldr	r3, [pc, #112]	@ (800aba0 <usart1_read_dma_buffer+0x110>)
 800ab2e:	881b      	ldrh	r3, [r3, #0]
 800ab30:	b29b      	uxth	r3, r3
 800ab32:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800ab34:	4b1b      	ldr	r3, [pc, #108]	@ (800aba4 <usart1_read_dma_buffer+0x114>)
 800ab36:	4413      	add	r3, r2
 800ab38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ab3a:	4619      	mov	r1, r3
 800ab3c:	481a      	ldr	r0, [pc, #104]	@ (800aba8 <usart1_read_dma_buffer+0x118>)
 800ab3e:	f7fd fd54 	bl	80085ea <ring_buffer_enqueue_arr>
        if (dma_pos) {
 800ab42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d005      	beq.n	800ab54 <usart1_read_dma_buffer+0xc4>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800ab48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab4a:	461a      	mov	r2, r3
 800ab4c:	4915      	ldr	r1, [pc, #84]	@ (800aba4 <usart1_read_dma_buffer+0x114>)
 800ab4e:	4816      	ldr	r0, [pc, #88]	@ (800aba8 <usart1_read_dma_buffer+0x118>)
 800ab50:	f7fd fd4b 	bl	80085ea <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 800ab54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	4b11      	ldr	r3, [pc, #68]	@ (800aba0 <usart1_read_dma_buffer+0x110>)
 800ab5a:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ab60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d1b2      	bne.n	800aacc <usart1_read_dma_buffer+0x3c>
 800ab66:	2301      	movs	r3, #1
 800ab68:	463a      	mov	r2, r7
 800ab6a:	60fa      	str	r2, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	6812      	ldr	r2, [r2, #0]
 800ab70:	60ba      	str	r2, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800ab72:	f3bf 8f5f 	dmb	sy
}
 800ab76:	bf00      	nop
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	f382 8810 	msr	PRIMASK, r2
}
 800ab82:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800ab84:	f3bf 8f4f 	dsb	sy
}
 800ab88:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ab8a:	f3bf 8f6f 	isb	sy
}
 800ab8e:	bf00      	nop
}
 800ab90:	bf00      	nop
}
 800ab92:	bf00      	nop
 800ab94:	2b01      	cmp	r3, #1
	}
}
 800ab96:	3730      	adds	r7, #48	@ 0x30
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	20005530 	.word	0x20005530
 800aba0:	2000552c 	.word	0x2000552c
 800aba4:	200054ac 	.word	0x200054ac
 800aba8:	20005498 	.word	0x20005498

0800abac <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a04      	ldr	r2, [pc, #16]	@ (800abcc <HAL_UART_ErrorCallback+0x20>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d101      	bne.n	800abc2 <HAL_UART_ErrorCallback+0x16>
    {
        // Handle TX/RX recovery here
        //usart1_recover();
        usart1_restart();
 800abbe:	f000 f877 	bl	800acb0 <usart1_restart>
    }
}
 800abc2:	bf00      	nop
 800abc4:	3708      	adds	r7, #8
 800abc6:	46bd      	mov	sp, r7
 800abc8:	bd80      	pop	{r7, pc}
 800abca:	bf00      	nop
 800abcc:	40011000 	.word	0x40011000

0800abd0 <usart1_start_tx_if_idle>:


void usart1_start_tx_if_idle(int force_state)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08e      	sub	sp, #56	@ 0x38
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	2300      	movs	r3, #0
 800abda:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800abdc:	f3ef 8310 	mrs	r3, PRIMASK
 800abe0:	623b      	str	r3, [r7, #32]
  return(result);
 800abe2:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800abe4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800abe6:	b672      	cpsid	i
}
 800abe8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800abea:	f3bf 8f4f 	dsb	sy
}
 800abee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800abf0:	f3bf 8f6f 	isb	sy
}
 800abf4:	bf00      	nop
    return old;
 800abf6:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800abf8:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800abfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d001      	beq.n	800ac04 <usart1_start_tx_if_idle+0x34>
 800ac00:	69bb      	ldr	r3, [r7, #24]
 800ac02:	e000      	b.n	800ac06 <usart1_start_tx_if_idle+0x36>
 800ac04:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800ac06:	60bb      	str	r3, [r7, #8]
 800ac08:	2301      	movs	r3, #1
 800ac0a:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac0c:	e02c      	b.n	800ac68 <usart1_start_tx_if_idle+0x98>
	{
		if (((huart1.gState == HAL_UART_STATE_READY) || force_state != 0) && ring_buffer_used_space(&usart1_tx_ring_buffer) > 0)
 800ac0e:	4b25      	ldr	r3, [pc, #148]	@ (800aca4 <usart1_start_tx_if_idle+0xd4>)
 800ac10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	2b20      	cmp	r3, #32
 800ac18:	d002      	beq.n	800ac20 <usart1_start_tx_if_idle+0x50>
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d021      	beq.n	800ac64 <usart1_start_tx_if_idle+0x94>
 800ac20:	4821      	ldr	r0, [pc, #132]	@ (800aca8 <usart1_start_tx_if_idle+0xd8>)
 800ac22:	f7fd fc69 	bl	80084f8 <ring_buffer_used_space>
 800ac26:	4603      	mov	r3, r0
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d01b      	beq.n	800ac64 <usart1_start_tx_if_idle+0x94>
		{

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 800ac2c:	481e      	ldr	r0, [pc, #120]	@ (800aca8 <usart1_start_tx_if_idle+0xd8>)
 800ac2e:	f7fd fca3 	bl	8008578 <ring_buffer_linear_used_space>
 800ac32:	6338      	str	r0, [r7, #48]	@ 0x30
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 800ac34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac36:	2b80      	cmp	r3, #128	@ 0x80
 800ac38:	bf28      	it	cs
 800ac3a:	2380      	movcs	r3, #128	@ 0x80
 800ac3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			uint8_t *data = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 800ac3e:	481a      	ldr	r0, [pc, #104]	@ (800aca8 <usart1_start_tx_if_idle+0xd8>)
 800ac40:	f7fd fcc4 	bl	80085cc <ring_buffer_read_ptr>
 800ac44:	62b8      	str	r0, [r7, #40]	@ 0x28

			usart1_last_tx_size = frame_size;
 800ac46:	4a19      	ldr	r2, [pc, #100]	@ (800acac <usart1_start_tx_if_idle+0xdc>)
 800ac48:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ac4a:	8013      	strh	r3, [r2, #0]

			//EXIT_CRITICAL();
			if (HAL_UART_Transmit_DMA(&huart1, data, frame_size) != HAL_OK) {
 800ac4c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ac4e:	461a      	mov	r2, r3
 800ac50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ac52:	4814      	ldr	r0, [pc, #80]	@ (800aca4 <usart1_start_tx_if_idle+0xd4>)
 800ac54:	f005 f87c 	bl	800fd50 <HAL_UART_Transmit_DMA>
 800ac58:	4603      	mov	r3, r0
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d002      	beq.n	800ac64 <usart1_start_tx_if_idle+0x94>
				//ENTER_CRITICAL();
				usart1_last_tx_size = 0;
 800ac5e:	4b13      	ldr	r3, [pc, #76]	@ (800acac <usart1_start_tx_if_idle+0xdc>)
 800ac60:	2200      	movs	r2, #0
 800ac62:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800ac64:	2300      	movs	r3, #0
 800ac66:	637b      	str	r3, [r7, #52]	@ 0x34
 800ac68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1cf      	bne.n	800ac0e <usart1_start_tx_if_idle+0x3e>
 800ac6e:	f107 0308 	add.w	r3, r7, #8
 800ac72:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	681b      	ldr	r3, [r3, #0]
 800ac78:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800ac7a:	f3bf 8f5f 	dmb	sy
}
 800ac7e:	bf00      	nop
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f383 8810 	msr	PRIMASK, r3
}
 800ac8a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800ac8c:	f3bf 8f4f 	dsb	sy
}
 800ac90:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ac92:	f3bf 8f6f 	isb	sy
}
 800ac96:	bf00      	nop
}
 800ac98:	bf00      	nop
}
 800ac9a:	bf00      	nop
		else
		{
			//EXIT_CRITICAL();
		}
	}
}
 800ac9c:	bf00      	nop
 800ac9e:	3738      	adds	r7, #56	@ 0x38
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20005530 	.word	0x20005530
 800aca8:	20005488 	.word	0x20005488
 800acac:	200054a8 	.word	0x200054a8

0800acb0 <usart1_restart>:
  usart1_dma_last_pos = 0;
}


void usart1_restart(void)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
    // 1. Deinit UART (also unlinks DMA internally)
    HAL_UART_DeInit(&huart1);
 800acb6:	481b      	ldr	r0, [pc, #108]	@ (800ad24 <usart1_restart+0x74>)
 800acb8:	f005 f818 	bl	800fcec <HAL_UART_DeInit>

    // 2. Deinit DMA streams manually
    HAL_DMA_DeInit(huart1.hdmarx);
 800acbc:	4b19      	ldr	r3, [pc, #100]	@ (800ad24 <usart1_restart+0x74>)
 800acbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acc0:	4618      	mov	r0, r3
 800acc2:	f000 fb7b 	bl	800b3bc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart1.hdmatx);
 800acc6:	4b17      	ldr	r3, [pc, #92]	@ (800ad24 <usart1_restart+0x74>)
 800acc8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acca:	4618      	mov	r0, r3
 800accc:	f000 fb76 	bl	800b3bc <HAL_DMA_DeInit>

    // 3. Reset USART1 peripheral
    __HAL_RCC_USART1_FORCE_RESET();
 800acd0:	4b15      	ldr	r3, [pc, #84]	@ (800ad28 <usart1_restart+0x78>)
 800acd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acd4:	4a14      	ldr	r2, [pc, #80]	@ (800ad28 <usart1_restart+0x78>)
 800acd6:	f043 0310 	orr.w	r3, r3, #16
 800acda:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_USART1_RELEASE_RESET();
 800acdc:	4b12      	ldr	r3, [pc, #72]	@ (800ad28 <usart1_restart+0x78>)
 800acde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ace0:	4a11      	ldr	r2, [pc, #68]	@ (800ad28 <usart1_restart+0x78>)
 800ace2:	f023 0310 	bic.w	r3, r3, #16
 800ace6:	6253      	str	r3, [r2, #36]	@ 0x24

    // 4. Reinit USART1 and DMA
    MX_USART1_UART_Init();  // Reinitializes UART and links DMA
 800ace8:	f7ff fcc8 	bl	800a67c <MX_USART1_UART_Init>
    //MX_DMA_Init();          // Only needed if you have a custom DMA init function

    // 5. Restart RX DMA if needed
    uint16_t space = ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 800acec:	480f      	ldr	r0, [pc, #60]	@ (800ad2c <usart1_restart+0x7c>)
 800acee:	f7fd fc1c 	bl	800852a <ring_buffer_linear_free_space>
 800acf2:	4603      	mov	r3, r0
 800acf4:	80fb      	strh	r3, [r7, #6]
    uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 800acf6:	480d      	ldr	r0, [pc, #52]	@ (800ad2c <usart1_restart+0x7c>)
 800acf8:	f7fd fc59 	bl	80085ae <ring_buffer_write_ptr>
 800acfc:	6038      	str	r0, [r7, #0]
    // usart1_last_rx_len = space;
    // HAL_UART_Receive_DMA(&huart1, write_ptr, space);

      HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 800acfe:	2280      	movs	r2, #128	@ 0x80
 800ad00:	490b      	ldr	r1, [pc, #44]	@ (800ad30 <usart1_restart+0x80>)
 800ad02:	4808      	ldr	r0, [pc, #32]	@ (800ad24 <usart1_restart+0x74>)
 800ad04:	f005 f894 	bl	800fe30 <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 800ad08:	4b0a      	ldr	r3, [pc, #40]	@ (800ad34 <usart1_restart+0x84>)
 800ad0a:	2280      	movs	r2, #128	@ 0x80
 800ad0c:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 800ad0e:	4b0a      	ldr	r3, [pc, #40]	@ (800ad38 <usart1_restart+0x88>)
 800ad10:	2200      	movs	r2, #0
 800ad12:	801a      	strh	r2, [r3, #0]

    usart1_start_tx_if_idle(1);
 800ad14:	2001      	movs	r0, #1
 800ad16:	f7ff ff5b 	bl	800abd0 <usart1_start_tx_if_idle>
}
 800ad1a:	bf00      	nop
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	20005530 	.word	0x20005530
 800ad28:	40023800 	.word	0x40023800
 800ad2c:	20005498 	.word	0x20005498
 800ad30:	200054ac 	.word	0x200054ac
 800ad34:	200054aa 	.word	0x200054aa
 800ad38:	2000552c 	.word	0x2000552c

0800ad3c <usart1_send_data>:




size_t usart1_send_data(char* data, size_t len)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b08c      	sub	sp, #48	@ 0x30
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
    if (data == NULL || len == 0) {
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d002      	beq.n	800ad52 <usart1_send_data+0x16>
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d101      	bne.n	800ad56 <usart1_send_data+0x1a>
        return 0;
 800ad52:	2300      	movs	r3, #0
 800ad54:	e040      	b.n	800add8 <usart1_send_data+0x9c>
 800ad56:	2300      	movs	r3, #0
 800ad58:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ad5a:	f3ef 8310 	mrs	r3, PRIMASK
 800ad5e:	623b      	str	r3, [r7, #32]
  return(result);
 800ad60:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800ad62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ad64:	b672      	cpsid	i
}
 800ad66:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800ad68:	f3bf 8f4f 	dsb	sy
}
 800ad6c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ad6e:	f3bf 8f6f 	isb	sy
}
 800ad72:	bf00      	nop
    return old;
 800ad74:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800ad76:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800ad78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d001      	beq.n	800ad82 <usart1_send_data+0x46>
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	e000      	b.n	800ad84 <usart1_send_data+0x48>
 800ad82:	2300      	movs	r3, #0
    }
    size_t bytes_written;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800ad84:	60bb      	str	r3, [r7, #8]
 800ad86:	2301      	movs	r3, #1
 800ad88:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad8a:	e007      	b.n	800ad9c <usart1_send_data+0x60>
    {
        // Try to enqueue data
    	bytes_written = ring_buffer_enqueue_arr(&usart1_tx_ring_buffer, (uint8_t*)data, len);
 800ad8c:	683a      	ldr	r2, [r7, #0]
 800ad8e:	6879      	ldr	r1, [r7, #4]
 800ad90:	4813      	ldr	r0, [pc, #76]	@ (800ade0 <usart1_send_data+0xa4>)
 800ad92:	f7fd fc2a 	bl	80085ea <ring_buffer_enqueue_arr>
 800ad96:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800ad98:	2300      	movs	r3, #0
 800ad9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d1f4      	bne.n	800ad8c <usart1_send_data+0x50>
 800ada2:	f107 0308 	add.w	r3, r7, #8
 800ada6:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800adae:	f3bf 8f5f 	dmb	sy
}
 800adb2:	bf00      	nop
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	f383 8810 	msr	PRIMASK, r3
}
 800adbe:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800adc0:	f3bf 8f4f 	dsb	sy
}
 800adc4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800adc6:	f3bf 8f6f 	isb	sy
}
 800adca:	bf00      	nop
}
 800adcc:	bf00      	nop
}
 800adce:	bf00      	nop
    }

    usart1_start_tx_if_idle(0);
 800add0:	2000      	movs	r0, #0
 800add2:	f7ff fefd 	bl	800abd0 <usart1_start_tx_if_idle>

    return bytes_written;
 800add6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800add8:	4618      	mov	r0, r3
 800adda:	3730      	adds	r7, #48	@ 0x30
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	20005488 	.word	0x20005488

0800ade4 <usart1_recv_data>:

size_t usart1_recv_data(char* out_buf, size_t max_len)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b08c      	sub	sp, #48	@ 0x30
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
    if (out_buf == NULL || max_len == 0) {
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d002      	beq.n	800adfa <usart1_recv_data+0x16>
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d101      	bne.n	800adfe <usart1_recv_data+0x1a>
        return 0;
 800adfa:	2300      	movs	r3, #0
 800adfc:	e03f      	b.n	800ae7e <usart1_recv_data+0x9a>
 800adfe:	2300      	movs	r3, #0
 800ae00:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ae02:	f3ef 8310 	mrs	r3, PRIMASK
 800ae06:	623b      	str	r3, [r7, #32]
  return(result);
 800ae08:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800ae0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800ae0c:	b672      	cpsid	i
}
 800ae0e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800ae10:	f3bf 8f4f 	dsb	sy
}
 800ae14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ae16:	f3bf 8f6f 	isb	sy
}
 800ae1a:	bf00      	nop
    return old;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800ae1e:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800ae20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d001      	beq.n	800ae2a <usart1_recv_data+0x46>
 800ae26:	69bb      	ldr	r3, [r7, #24]
 800ae28:	e000      	b.n	800ae2c <usart1_recv_data+0x48>
 800ae2a:	2300      	movs	r3, #0
    }
    size_t bytes_read;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800ae2c:	60bb      	str	r3, [r7, #8]
 800ae2e:	2301      	movs	r3, #1
 800ae30:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae32:	e009      	b.n	800ae48 <usart1_recv_data+0x64>
    {
        usart1_read_dma_buffer();
 800ae34:	f7ff fe2c 	bl	800aa90 <usart1_read_dma_buffer>
    	bytes_read = ring_buffer_dequeue_arr(&usart1_rx_ring_buffer, (uint8_t*)out_buf, max_len);
 800ae38:	683a      	ldr	r2, [r7, #0]
 800ae3a:	6879      	ldr	r1, [r7, #4]
 800ae3c:	4812      	ldr	r0, [pc, #72]	@ (800ae88 <usart1_recv_data+0xa4>)
 800ae3e:	f7fd fc2e 	bl	800869e <ring_buffer_dequeue_arr>
 800ae42:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800ae44:	2300      	movs	r3, #0
 800ae46:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1f2      	bne.n	800ae34 <usart1_recv_data+0x50>
 800ae4e:	f107 0308 	add.w	r3, r7, #8
 800ae52:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800ae5a:	f3bf 8f5f 	dmb	sy
}
 800ae5e:	bf00      	nop
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f383 8810 	msr	PRIMASK, r3
}
 800ae6a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800ae6c:	f3bf 8f4f 	dsb	sy
}
 800ae70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ae72:	f3bf 8f6f 	isb	sy
}
 800ae76:	bf00      	nop
}
 800ae78:	bf00      	nop
}
 800ae7a:	bf00      	nop
    }

    return bytes_read;
 800ae7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3730      	adds	r7, #48	@ 0x30
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	20005498 	.word	0x20005498

0800ae8c <usart1_data_available_for_read>:

size_t usart1_data_available_for_read()
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08a      	sub	sp, #40	@ 0x28
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	2300      	movs	r3, #0
 800ae94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800ae96:	f3ef 8310 	mrs	r3, PRIMASK
 800ae9a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ae9c:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800ae9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800aea0:	b672      	cpsid	i
}
 800aea2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aea4:	f3bf 8f4f 	dsb	sy
}
 800aea8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800aeaa:	f3bf 8f6f 	isb	sy
}
 800aeae:	bf00      	nop
    return old;
 800aeb0:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800aeb2:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800aeb4:	69fb      	ldr	r3, [r7, #28]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d001      	beq.n	800aebe <usart1_data_available_for_read+0x32>
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	e000      	b.n	800aec0 <usart1_data_available_for_read+0x34>
 800aebe:	2300      	movs	r3, #0
	size_t used;

    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800aec0:	603b      	str	r3, [r7, #0]
 800aec2:	2301      	movs	r3, #1
 800aec4:	623b      	str	r3, [r7, #32]
 800aec6:	e007      	b.n	800aed8 <usart1_data_available_for_read+0x4c>
    {
        usart1_read_dma_buffer();
 800aec8:	f7ff fde2 	bl	800aa90 <usart1_read_dma_buffer>
    	used = ring_buffer_used_space(&usart1_rx_ring_buffer);
 800aecc:	4811      	ldr	r0, [pc, #68]	@ (800af14 <usart1_data_available_for_read+0x88>)
 800aece:	f7fd fb13 	bl	80084f8 <ring_buffer_used_space>
 800aed2:	6278      	str	r0, [r7, #36]	@ 0x24
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800aed4:	2300      	movs	r3, #0
 800aed6:	623b      	str	r3, [r7, #32]
 800aed8:	6a3b      	ldr	r3, [r7, #32]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d1f4      	bne.n	800aec8 <usart1_data_available_for_read+0x3c>
 800aede:	463b      	mov	r3, r7
 800aee0:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800aee8:	f3bf 8f5f 	dmb	sy
}
 800aeec:	bf00      	nop
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f383 8810 	msr	PRIMASK, r3
}
 800aef8:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800aefa:	f3bf 8f4f 	dsb	sy
}
 800aefe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800af00:	f3bf 8f6f 	isb	sy
}
 800af04:	bf00      	nop
}
 800af06:	bf00      	nop
}
 800af08:	bf00      	nop
    }

    return used;
 800af0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3728      	adds	r7, #40	@ 0x28
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}
 800af14:	20005498 	.word	0x20005498

0800af18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800af18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800af50 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800af1c:	f7ff fa1e 	bl	800a35c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800af20:	480c      	ldr	r0, [pc, #48]	@ (800af54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800af22:	490d      	ldr	r1, [pc, #52]	@ (800af58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800af24:	4a0d      	ldr	r2, [pc, #52]	@ (800af5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 800af26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800af28:	e002      	b.n	800af30 <LoopCopyDataInit>

0800af2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800af2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800af2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800af2e:	3304      	adds	r3, #4

0800af30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800af30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800af32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800af34:	d3f9      	bcc.n	800af2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800af36:	4a0a      	ldr	r2, [pc, #40]	@ (800af60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800af38:	4c0a      	ldr	r4, [pc, #40]	@ (800af64 <LoopFillZerobss+0x22>)
  movs r3, #0
 800af3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800af3c:	e001      	b.n	800af42 <LoopFillZerobss>

0800af3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800af3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800af40:	3204      	adds	r2, #4

0800af42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800af42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800af44:	d3fb      	bcc.n	800af3e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800af46:	f010 fb9d 	bl	801b684 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800af4a:	f7fd ff35 	bl	8008db8 <main>
  bx  lr    
 800af4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800af50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800af54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800af58:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 800af5c:	08021d24 	.word	0x08021d24
  ldr r2, =_sbss
 800af60:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 800af64:	2000c364 	.word	0x2000c364

0800af68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800af68:	e7fe      	b.n	800af68 <ADC_IRQHandler>
	...

0800af6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800af6c:	b580      	push	{r7, lr}
 800af6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800af70:	4b0e      	ldr	r3, [pc, #56]	@ (800afac <HAL_Init+0x40>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a0d      	ldr	r2, [pc, #52]	@ (800afac <HAL_Init+0x40>)
 800af76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800af7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800af7c:	4b0b      	ldr	r3, [pc, #44]	@ (800afac <HAL_Init+0x40>)
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	4a0a      	ldr	r2, [pc, #40]	@ (800afac <HAL_Init+0x40>)
 800af82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800af86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800af88:	4b08      	ldr	r3, [pc, #32]	@ (800afac <HAL_Init+0x40>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	4a07      	ldr	r2, [pc, #28]	@ (800afac <HAL_Init+0x40>)
 800af8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800af92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800af94:	2003      	movs	r0, #3
 800af96:	f000 f920 	bl	800b1da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800af9a:	200f      	movs	r0, #15
 800af9c:	f7ff f850 	bl	800a040 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800afa0:	f7ff f822 	bl	8009fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800afa4:	2300      	movs	r3, #0
}
 800afa6:	4618      	mov	r0, r3
 800afa8:	bd80      	pop	{r7, pc}
 800afaa:	bf00      	nop
 800afac:	40023c00 	.word	0x40023c00

0800afb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800afb0:	b480      	push	{r7}
 800afb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800afb4:	4b06      	ldr	r3, [pc, #24]	@ (800afd0 <HAL_IncTick+0x20>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	461a      	mov	r2, r3
 800afba:	4b06      	ldr	r3, [pc, #24]	@ (800afd4 <HAL_IncTick+0x24>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	4413      	add	r3, r2
 800afc0:	4a04      	ldr	r2, [pc, #16]	@ (800afd4 <HAL_IncTick+0x24>)
 800afc2:	6013      	str	r3, [r2, #0]
}
 800afc4:	bf00      	nop
 800afc6:	46bd      	mov	sp, r7
 800afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	2000005c 	.word	0x2000005c
 800afd4:	20005638 	.word	0x20005638

0800afd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800afd8:	b480      	push	{r7}
 800afda:	af00      	add	r7, sp, #0
  return uwTick;
 800afdc:	4b03      	ldr	r3, [pc, #12]	@ (800afec <HAL_GetTick+0x14>)
 800afde:	681b      	ldr	r3, [r3, #0]
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
 800afea:	bf00      	nop
 800afec:	20005638 	.word	0x20005638

0800aff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800aff8:	f7ff ffee 	bl	800afd8 <HAL_GetTick>
 800affc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b008:	d005      	beq.n	800b016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b00a:	4b0a      	ldr	r3, [pc, #40]	@ (800b034 <HAL_Delay+0x44>)
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	461a      	mov	r2, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	4413      	add	r3, r2
 800b014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800b016:	bf00      	nop
 800b018:	f7ff ffde 	bl	800afd8 <HAL_GetTick>
 800b01c:	4602      	mov	r2, r0
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	1ad3      	subs	r3, r2, r3
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	429a      	cmp	r2, r3
 800b026:	d8f7      	bhi.n	800b018 <HAL_Delay+0x28>
  {
  }
}
 800b028:	bf00      	nop
 800b02a:	bf00      	nop
 800b02c:	3710      	adds	r7, #16
 800b02e:	46bd      	mov	sp, r7
 800b030:	bd80      	pop	{r7, pc}
 800b032:	bf00      	nop
 800b034:	2000005c 	.word	0x2000005c

0800b038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b038:	b480      	push	{r7}
 800b03a:	b085      	sub	sp, #20
 800b03c:	af00      	add	r7, sp, #0
 800b03e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	f003 0307 	and.w	r3, r3, #7
 800b046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b048:	4b0c      	ldr	r3, [pc, #48]	@ (800b07c <__NVIC_SetPriorityGrouping+0x44>)
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800b054:	4013      	ands	r3, r2
 800b056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b05c:	68bb      	ldr	r3, [r7, #8]
 800b05e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800b064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b06a:	4a04      	ldr	r2, [pc, #16]	@ (800b07c <__NVIC_SetPriorityGrouping+0x44>)
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	60d3      	str	r3, [r2, #12]
}
 800b070:	bf00      	nop
 800b072:	3714      	adds	r7, #20
 800b074:	46bd      	mov	sp, r7
 800b076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b07a:	4770      	bx	lr
 800b07c:	e000ed00 	.word	0xe000ed00

0800b080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b080:	b480      	push	{r7}
 800b082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b084:	4b04      	ldr	r3, [pc, #16]	@ (800b098 <__NVIC_GetPriorityGrouping+0x18>)
 800b086:	68db      	ldr	r3, [r3, #12]
 800b088:	0a1b      	lsrs	r3, r3, #8
 800b08a:	f003 0307 	and.w	r3, r3, #7
}
 800b08e:	4618      	mov	r0, r3
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr
 800b098:	e000ed00 	.word	0xe000ed00

0800b09c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	db0b      	blt.n	800b0c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0ae:	79fb      	ldrb	r3, [r7, #7]
 800b0b0:	f003 021f 	and.w	r2, r3, #31
 800b0b4:	4907      	ldr	r1, [pc, #28]	@ (800b0d4 <__NVIC_EnableIRQ+0x38>)
 800b0b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0ba:	095b      	lsrs	r3, r3, #5
 800b0bc:	2001      	movs	r0, #1
 800b0be:	fa00 f202 	lsl.w	r2, r0, r2
 800b0c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b0c6:	bf00      	nop
 800b0c8:	370c      	adds	r7, #12
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	e000e100 	.word	0xe000e100

0800b0d8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b083      	sub	sp, #12
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	4603      	mov	r3, r0
 800b0e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b0e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	db12      	blt.n	800b110 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b0ea:	79fb      	ldrb	r3, [r7, #7]
 800b0ec:	f003 021f 	and.w	r2, r3, #31
 800b0f0:	490a      	ldr	r1, [pc, #40]	@ (800b11c <__NVIC_DisableIRQ+0x44>)
 800b0f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0f6:	095b      	lsrs	r3, r3, #5
 800b0f8:	2001      	movs	r0, #1
 800b0fa:	fa00 f202 	lsl.w	r2, r0, r2
 800b0fe:	3320      	adds	r3, #32
 800b100:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800b104:	f3bf 8f4f 	dsb	sy
}
 800b108:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800b10a:	f3bf 8f6f 	isb	sy
}
 800b10e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800b110:	bf00      	nop
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr
 800b11c:	e000e100 	.word	0xe000e100

0800b120 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	4603      	mov	r3, r0
 800b128:	6039      	str	r1, [r7, #0]
 800b12a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b12c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b130:	2b00      	cmp	r3, #0
 800b132:	db0a      	blt.n	800b14a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b134:	683b      	ldr	r3, [r7, #0]
 800b136:	b2da      	uxtb	r2, r3
 800b138:	490c      	ldr	r1, [pc, #48]	@ (800b16c <__NVIC_SetPriority+0x4c>)
 800b13a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b13e:	0112      	lsls	r2, r2, #4
 800b140:	b2d2      	uxtb	r2, r2
 800b142:	440b      	add	r3, r1
 800b144:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b148:	e00a      	b.n	800b160 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	b2da      	uxtb	r2, r3
 800b14e:	4908      	ldr	r1, [pc, #32]	@ (800b170 <__NVIC_SetPriority+0x50>)
 800b150:	79fb      	ldrb	r3, [r7, #7]
 800b152:	f003 030f 	and.w	r3, r3, #15
 800b156:	3b04      	subs	r3, #4
 800b158:	0112      	lsls	r2, r2, #4
 800b15a:	b2d2      	uxtb	r2, r2
 800b15c:	440b      	add	r3, r1
 800b15e:	761a      	strb	r2, [r3, #24]
}
 800b160:	bf00      	nop
 800b162:	370c      	adds	r7, #12
 800b164:	46bd      	mov	sp, r7
 800b166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16a:	4770      	bx	lr
 800b16c:	e000e100 	.word	0xe000e100
 800b170:	e000ed00 	.word	0xe000ed00

0800b174 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b174:	b480      	push	{r7}
 800b176:	b089      	sub	sp, #36	@ 0x24
 800b178:	af00      	add	r7, sp, #0
 800b17a:	60f8      	str	r0, [r7, #12]
 800b17c:	60b9      	str	r1, [r7, #8]
 800b17e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	f003 0307 	and.w	r3, r3, #7
 800b186:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	f1c3 0307 	rsb	r3, r3, #7
 800b18e:	2b04      	cmp	r3, #4
 800b190:	bf28      	it	cs
 800b192:	2304      	movcs	r3, #4
 800b194:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	3304      	adds	r3, #4
 800b19a:	2b06      	cmp	r3, #6
 800b19c:	d902      	bls.n	800b1a4 <NVIC_EncodePriority+0x30>
 800b19e:	69fb      	ldr	r3, [r7, #28]
 800b1a0:	3b03      	subs	r3, #3
 800b1a2:	e000      	b.n	800b1a6 <NVIC_EncodePriority+0x32>
 800b1a4:	2300      	movs	r3, #0
 800b1a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1a8:	f04f 32ff 	mov.w	r2, #4294967295
 800b1ac:	69bb      	ldr	r3, [r7, #24]
 800b1ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b1b2:	43da      	mvns	r2, r3
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	401a      	ands	r2, r3
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b1bc:	f04f 31ff 	mov.w	r1, #4294967295
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	fa01 f303 	lsl.w	r3, r1, r3
 800b1c6:	43d9      	mvns	r1, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b1cc:	4313      	orrs	r3, r2
         );
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3724      	adds	r7, #36	@ 0x24
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d8:	4770      	bx	lr

0800b1da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b1da:	b580      	push	{r7, lr}
 800b1dc:	b082      	sub	sp, #8
 800b1de:	af00      	add	r7, sp, #0
 800b1e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f7ff ff28 	bl	800b038 <__NVIC_SetPriorityGrouping>
}
 800b1e8:	bf00      	nop
 800b1ea:	3708      	adds	r7, #8
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	bd80      	pop	{r7, pc}

0800b1f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b086      	sub	sp, #24
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
 800b1fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b1fe:	2300      	movs	r3, #0
 800b200:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b202:	f7ff ff3d 	bl	800b080 <__NVIC_GetPriorityGrouping>
 800b206:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b208:	687a      	ldr	r2, [r7, #4]
 800b20a:	68b9      	ldr	r1, [r7, #8]
 800b20c:	6978      	ldr	r0, [r7, #20]
 800b20e:	f7ff ffb1 	bl	800b174 <NVIC_EncodePriority>
 800b212:	4602      	mov	r2, r0
 800b214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b218:	4611      	mov	r1, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f7ff ff80 	bl	800b120 <__NVIC_SetPriority>
}
 800b220:	bf00      	nop
 800b222:	3718      	adds	r7, #24
 800b224:	46bd      	mov	sp, r7
 800b226:	bd80      	pop	{r7, pc}

0800b228 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b082      	sub	sp, #8
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	4603      	mov	r3, r0
 800b230:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b236:	4618      	mov	r0, r3
 800b238:	f7ff ff30 	bl	800b09c <__NVIC_EnableIRQ>
}
 800b23c:	bf00      	nop
 800b23e:	3708      	adds	r7, #8
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b082      	sub	sp, #8
 800b248:	af00      	add	r7, sp, #0
 800b24a:	4603      	mov	r3, r0
 800b24c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b24e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b252:	4618      	mov	r0, r3
 800b254:	f7ff ff40 	bl	800b0d8 <__NVIC_DisableIRQ>
}
 800b258:	bf00      	nop
 800b25a:	3708      	adds	r7, #8
 800b25c:	46bd      	mov	sp, r7
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b086      	sub	sp, #24
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b268:	2300      	movs	r3, #0
 800b26a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b26c:	f7ff feb4 	bl	800afd8 <HAL_GetTick>
 800b270:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d101      	bne.n	800b27c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	e099      	b.n	800b3b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	2202      	movs	r2, #2
 800b280:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f022 0201 	bic.w	r2, r2, #1
 800b29a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b29c:	e00f      	b.n	800b2be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b29e:	f7ff fe9b 	bl	800afd8 <HAL_GetTick>
 800b2a2:	4602      	mov	r2, r0
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	1ad3      	subs	r3, r2, r3
 800b2a8:	2b05      	cmp	r3, #5
 800b2aa:	d908      	bls.n	800b2be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2220      	movs	r2, #32
 800b2b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2203      	movs	r2, #3
 800b2b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800b2ba:	2303      	movs	r3, #3
 800b2bc:	e078      	b.n	800b3b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0301 	and.w	r3, r3, #1
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d1e8      	bne.n	800b29e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b2d4:	697a      	ldr	r2, [r7, #20]
 800b2d6:	4b38      	ldr	r3, [pc, #224]	@ (800b3b8 <HAL_DMA_Init+0x158>)
 800b2d8:	4013      	ands	r3, r2
 800b2da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	685a      	ldr	r2, [r3, #4]
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	689b      	ldr	r3, [r3, #8]
 800b2e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b2ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	691b      	ldr	r3, [r3, #16]
 800b2f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b2f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	699b      	ldr	r3, [r3, #24]
 800b2fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b302:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6a1b      	ldr	r3, [r3, #32]
 800b308:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	4313      	orrs	r3, r2
 800b30e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b314:	2b04      	cmp	r3, #4
 800b316:	d107      	bne.n	800b328 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b320:	4313      	orrs	r3, r2
 800b322:	697a      	ldr	r2, [r7, #20]
 800b324:	4313      	orrs	r3, r2
 800b326:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	697a      	ldr	r2, [r7, #20]
 800b32e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	695b      	ldr	r3, [r3, #20]
 800b336:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	f023 0307 	bic.w	r3, r3, #7
 800b33e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b344:	697a      	ldr	r2, [r7, #20]
 800b346:	4313      	orrs	r3, r2
 800b348:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b34e:	2b04      	cmp	r3, #4
 800b350:	d117      	bne.n	800b382 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b356:	697a      	ldr	r2, [r7, #20]
 800b358:	4313      	orrs	r3, r2
 800b35a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00e      	beq.n	800b382 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f000 fb5f 	bl	800ba28 <DMA_CheckFifoParam>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d008      	beq.n	800b382 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2240      	movs	r2, #64	@ 0x40
 800b374:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800b37e:	2301      	movs	r3, #1
 800b380:	e016      	b.n	800b3b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b38a:	6878      	ldr	r0, [r7, #4]
 800b38c:	f000 fb16 	bl	800b9bc <DMA_CalcBaseAndBitshift>
 800b390:	4603      	mov	r3, r0
 800b392:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b398:	223f      	movs	r2, #63	@ 0x3f
 800b39a:	409a      	lsls	r2, r3
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2200      	movs	r2, #0
 800b3a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	2201      	movs	r2, #1
 800b3aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800b3ae:	2300      	movs	r3, #0
}
 800b3b0:	4618      	mov	r0, r3
 800b3b2:	3718      	adds	r7, #24
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}
 800b3b8:	f010803f 	.word	0xf010803f

0800b3bc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800b3ca:	2301      	movs	r3, #1
 800b3cc:	e050      	b.n	800b470 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b3d4:	b2db      	uxtb	r3, r3
 800b3d6:	2b02      	cmp	r3, #2
 800b3d8:	d101      	bne.n	800b3de <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800b3da:	2302      	movs	r3, #2
 800b3dc:	e048      	b.n	800b470 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	f022 0201 	bic.w	r2, r2, #1
 800b3ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2200      	movs	r2, #0
 800b404:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	2200      	movs	r2, #0
 800b40c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	2200      	movs	r2, #0
 800b414:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	2221      	movs	r2, #33	@ 0x21
 800b41c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b41e:	6878      	ldr	r0, [r7, #4]
 800b420:	f000 facc 	bl	800b9bc <DMA_CalcBaseAndBitshift>
 800b424:	4603      	mov	r3, r0
 800b426:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	2200      	movs	r2, #0
 800b432:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2200      	movs	r2, #0
 800b43e:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2200      	movs	r2, #0
 800b444:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b450:	223f      	movs	r2, #63	@ 0x3f
 800b452:	409a      	lsls	r2, r3
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2200      	movs	r2, #0
 800b46a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800b46e:	2300      	movs	r3, #0
}
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b478:	b580      	push	{r7, lr}
 800b47a:	b086      	sub	sp, #24
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	60f8      	str	r0, [r7, #12]
 800b480:	60b9      	str	r1, [r7, #8]
 800b482:	607a      	str	r2, [r7, #4]
 800b484:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b486:	2300      	movs	r3, #0
 800b488:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b48e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b496:	2b01      	cmp	r3, #1
 800b498:	d101      	bne.n	800b49e <HAL_DMA_Start_IT+0x26>
 800b49a:	2302      	movs	r3, #2
 800b49c:	e040      	b.n	800b520 <HAL_DMA_Start_IT+0xa8>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	2201      	movs	r2, #1
 800b4a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b4ac:	b2db      	uxtb	r3, r3
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d12f      	bne.n	800b512 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	2202      	movs	r2, #2
 800b4b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	68b9      	ldr	r1, [r7, #8]
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f000 fa4a 	bl	800b960 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4d0:	223f      	movs	r2, #63	@ 0x3f
 800b4d2:	409a      	lsls	r2, r3
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	681a      	ldr	r2, [r3, #0]
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	f042 0216 	orr.w	r2, r2, #22
 800b4e6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d007      	beq.n	800b500 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681a      	ldr	r2, [r3, #0]
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f042 0208 	orr.w	r2, r2, #8
 800b4fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	681a      	ldr	r2, [r3, #0]
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f042 0201 	orr.w	r2, r2, #1
 800b50e:	601a      	str	r2, [r3, #0]
 800b510:	e005      	b.n	800b51e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	2200      	movs	r2, #0
 800b516:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b51a:	2302      	movs	r3, #2
 800b51c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b520:	4618      	mov	r0, r3
 800b522:	3718      	adds	r7, #24
 800b524:	46bd      	mov	sp, r7
 800b526:	bd80      	pop	{r7, pc}

0800b528 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b084      	sub	sp, #16
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b534:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800b536:	f7ff fd4f 	bl	800afd8 <HAL_GetTick>
 800b53a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b542:	b2db      	uxtb	r3, r3
 800b544:	2b02      	cmp	r3, #2
 800b546:	d008      	beq.n	800b55a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	2280      	movs	r2, #128	@ 0x80
 800b54c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800b556:	2301      	movs	r3, #1
 800b558:	e052      	b.n	800b600 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	681a      	ldr	r2, [r3, #0]
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	f022 0216 	bic.w	r2, r2, #22
 800b568:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	695a      	ldr	r2, [r3, #20]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b578:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d103      	bne.n	800b58a <HAL_DMA_Abort+0x62>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b586:	2b00      	cmp	r3, #0
 800b588:	d007      	beq.n	800b59a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	681a      	ldr	r2, [r3, #0]
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	f022 0208 	bic.w	r2, r2, #8
 800b598:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f022 0201 	bic.w	r2, r2, #1
 800b5a8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b5aa:	e013      	b.n	800b5d4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b5ac:	f7ff fd14 	bl	800afd8 <HAL_GetTick>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	1ad3      	subs	r3, r2, r3
 800b5b6:	2b05      	cmp	r3, #5
 800b5b8:	d90c      	bls.n	800b5d4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	2220      	movs	r2, #32
 800b5be:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2203      	movs	r2, #3
 800b5c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800b5d0:	2303      	movs	r3, #3
 800b5d2:	e015      	b.n	800b600 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d1e4      	bne.n	800b5ac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5e6:	223f      	movs	r2, #63	@ 0x3f
 800b5e8:	409a      	lsls	r2, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b616:	b2db      	uxtb	r3, r3
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d004      	beq.n	800b626 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2280      	movs	r2, #128	@ 0x80
 800b620:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800b622:	2301      	movs	r3, #1
 800b624:	e00c      	b.n	800b640 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	2205      	movs	r2, #5
 800b62a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	681b      	ldr	r3, [r3, #0]
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	f022 0201 	bic.w	r2, r2, #1
 800b63c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	370c      	adds	r7, #12
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b654:	2300      	movs	r3, #0
 800b656:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b658:	4b8e      	ldr	r3, [pc, #568]	@ (800b894 <HAL_DMA_IRQHandler+0x248>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a8e      	ldr	r2, [pc, #568]	@ (800b898 <HAL_DMA_IRQHandler+0x24c>)
 800b65e:	fba2 2303 	umull	r2, r3, r2, r3
 800b662:	0a9b      	lsrs	r3, r3, #10
 800b664:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b66a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b66c:	693b      	ldr	r3, [r7, #16]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b676:	2208      	movs	r2, #8
 800b678:	409a      	lsls	r2, r3
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4013      	ands	r3, r2
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d01a      	beq.n	800b6b8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0304 	and.w	r3, r3, #4
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d013      	beq.n	800b6b8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f022 0204 	bic.w	r2, r2, #4
 800b69e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6a4:	2208      	movs	r2, #8
 800b6a6:	409a      	lsls	r2, r3
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6b0:	f043 0201 	orr.w	r2, r3, #1
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6bc:	2201      	movs	r2, #1
 800b6be:	409a      	lsls	r2, r3
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	4013      	ands	r3, r2
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d012      	beq.n	800b6ee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	695b      	ldr	r3, [r3, #20]
 800b6ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d00b      	beq.n	800b6ee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6da:	2201      	movs	r2, #1
 800b6dc:	409a      	lsls	r2, r3
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b6e6:	f043 0202 	orr.w	r2, r3, #2
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b6f2:	2204      	movs	r2, #4
 800b6f4:	409a      	lsls	r2, r3
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	4013      	ands	r3, r2
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d012      	beq.n	800b724 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f003 0302 	and.w	r3, r3, #2
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d00b      	beq.n	800b724 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b710:	2204      	movs	r2, #4
 800b712:	409a      	lsls	r2, r3
 800b714:	693b      	ldr	r3, [r7, #16]
 800b716:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b71c:	f043 0204 	orr.w	r2, r3, #4
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b728:	2210      	movs	r2, #16
 800b72a:	409a      	lsls	r2, r3
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	4013      	ands	r3, r2
 800b730:	2b00      	cmp	r3, #0
 800b732:	d043      	beq.n	800b7bc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f003 0308 	and.w	r3, r3, #8
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d03c      	beq.n	800b7bc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b746:	2210      	movs	r2, #16
 800b748:	409a      	lsls	r2, r3
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d018      	beq.n	800b78e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b766:	2b00      	cmp	r3, #0
 800b768:	d108      	bne.n	800b77c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d024      	beq.n	800b7bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b776:	6878      	ldr	r0, [r7, #4]
 800b778:	4798      	blx	r3
 800b77a:	e01f      	b.n	800b7bc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b780:	2b00      	cmp	r3, #0
 800b782:	d01b      	beq.n	800b7bc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b788:	6878      	ldr	r0, [r7, #4]
 800b78a:	4798      	blx	r3
 800b78c:	e016      	b.n	800b7bc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d107      	bne.n	800b7ac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	f022 0208 	bic.w	r2, r2, #8
 800b7aa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d003      	beq.n	800b7bc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7b8:	6878      	ldr	r0, [r7, #4]
 800b7ba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7c0:	2220      	movs	r2, #32
 800b7c2:	409a      	lsls	r2, r3
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	4013      	ands	r3, r2
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	f000 808f 	beq.w	800b8ec <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 0310 	and.w	r3, r3, #16
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	f000 8087 	beq.w	800b8ec <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7e2:	2220      	movs	r2, #32
 800b7e4:	409a      	lsls	r2, r3
 800b7e6:	693b      	ldr	r3, [r7, #16]
 800b7e8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	2b05      	cmp	r3, #5
 800b7f4:	d136      	bne.n	800b864 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681a      	ldr	r2, [r3, #0]
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f022 0216 	bic.w	r2, r2, #22
 800b804:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	695a      	ldr	r2, [r3, #20]
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b814:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d103      	bne.n	800b826 <HAL_DMA_IRQHandler+0x1da>
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b822:	2b00      	cmp	r3, #0
 800b824:	d007      	beq.n	800b836 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	f022 0208 	bic.w	r2, r2, #8
 800b834:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b83a:	223f      	movs	r2, #63	@ 0x3f
 800b83c:	409a      	lsls	r2, r3
 800b83e:	693b      	ldr	r3, [r7, #16]
 800b840:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	2201      	movs	r2, #1
 800b846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b856:	2b00      	cmp	r3, #0
 800b858:	d07e      	beq.n	800b958 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b85e:	6878      	ldr	r0, [r7, #4]
 800b860:	4798      	blx	r3
        }
        return;
 800b862:	e079      	b.n	800b958 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d01d      	beq.n	800b8ae <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d10d      	bne.n	800b89c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b884:	2b00      	cmp	r3, #0
 800b886:	d031      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	4798      	blx	r3
 800b890:	e02c      	b.n	800b8ec <HAL_DMA_IRQHandler+0x2a0>
 800b892:	bf00      	nop
 800b894:	20000054 	.word	0x20000054
 800b898:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d023      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8a8:	6878      	ldr	r0, [r7, #4]
 800b8aa:	4798      	blx	r3
 800b8ac:	e01e      	b.n	800b8ec <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d10f      	bne.n	800b8dc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	681a      	ldr	r2, [r3, #0]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f022 0210 	bic.w	r2, r2, #16
 800b8ca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2200      	movs	r2, #0
 800b8d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d003      	beq.n	800b8ec <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d032      	beq.n	800b95a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b8f8:	f003 0301 	and.w	r3, r3, #1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d022      	beq.n	800b946 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	2205      	movs	r2, #5
 800b904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	681a      	ldr	r2, [r3, #0]
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	f022 0201 	bic.w	r2, r2, #1
 800b916:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b918:	68bb      	ldr	r3, [r7, #8]
 800b91a:	3301      	adds	r3, #1
 800b91c:	60bb      	str	r3, [r7, #8]
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	429a      	cmp	r2, r3
 800b922:	d307      	bcc.n	800b934 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f003 0301 	and.w	r3, r3, #1
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d1f2      	bne.n	800b918 <HAL_DMA_IRQHandler+0x2cc>
 800b932:	e000      	b.n	800b936 <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b934:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2201      	movs	r2, #1
 800b93a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d005      	beq.n	800b95a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	4798      	blx	r3
 800b956:	e000      	b.n	800b95a <HAL_DMA_IRQHandler+0x30e>
        return;
 800b958:	bf00      	nop
    }
  }
}
 800b95a:	3718      	adds	r7, #24
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	60f8      	str	r0, [r7, #12]
 800b968:	60b9      	str	r1, [r7, #8]
 800b96a:	607a      	str	r2, [r7, #4]
 800b96c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	681a      	ldr	r2, [r3, #0]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b97c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	683a      	ldr	r2, [r7, #0]
 800b984:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	689b      	ldr	r3, [r3, #8]
 800b98a:	2b40      	cmp	r3, #64	@ 0x40
 800b98c:	d108      	bne.n	800b9a0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68ba      	ldr	r2, [r7, #8]
 800b99c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b99e:	e007      	b.n	800b9b0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	68ba      	ldr	r2, [r7, #8]
 800b9a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	687a      	ldr	r2, [r7, #4]
 800b9ae:	60da      	str	r2, [r3, #12]
}
 800b9b0:	bf00      	nop
 800b9b2:	3714      	adds	r7, #20
 800b9b4:	46bd      	mov	sp, r7
 800b9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ba:	4770      	bx	lr

0800b9bc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b9bc:	b480      	push	{r7}
 800b9be:	b085      	sub	sp, #20
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	b2db      	uxtb	r3, r3
 800b9ca:	3b10      	subs	r3, #16
 800b9cc:	4a14      	ldr	r2, [pc, #80]	@ (800ba20 <DMA_CalcBaseAndBitshift+0x64>)
 800b9ce:	fba2 2303 	umull	r2, r3, r2, r3
 800b9d2:	091b      	lsrs	r3, r3, #4
 800b9d4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b9d6:	4a13      	ldr	r2, [pc, #76]	@ (800ba24 <DMA_CalcBaseAndBitshift+0x68>)
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	4413      	add	r3, r2
 800b9dc:	781b      	ldrb	r3, [r3, #0]
 800b9de:	461a      	mov	r2, r3
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	2b03      	cmp	r3, #3
 800b9e8:	d909      	bls.n	800b9fe <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800b9f2:	f023 0303 	bic.w	r3, r3, #3
 800b9f6:	1d1a      	adds	r2, r3, #4
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	659a      	str	r2, [r3, #88]	@ 0x58
 800b9fc:	e007      	b.n	800ba0e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800ba06:	f023 0303 	bic.w	r3, r3, #3
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr
 800ba1e:	bf00      	nop
 800ba20:	aaaaaaab 	.word	0xaaaaaaab
 800ba24:	080214ac 	.word	0x080214ac

0800ba28 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ba30:	2300      	movs	r3, #0
 800ba32:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba38:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	699b      	ldr	r3, [r3, #24]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d11f      	bne.n	800ba82 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	2b03      	cmp	r3, #3
 800ba46:	d856      	bhi.n	800baf6 <DMA_CheckFifoParam+0xce>
 800ba48:	a201      	add	r2, pc, #4	@ (adr r2, 800ba50 <DMA_CheckFifoParam+0x28>)
 800ba4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba4e:	bf00      	nop
 800ba50:	0800ba61 	.word	0x0800ba61
 800ba54:	0800ba73 	.word	0x0800ba73
 800ba58:	0800ba61 	.word	0x0800ba61
 800ba5c:	0800baf7 	.word	0x0800baf7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba64:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d046      	beq.n	800bafa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ba6c:	2301      	movs	r3, #1
 800ba6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba70:	e043      	b.n	800bafa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba76:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800ba7a:	d140      	bne.n	800bafe <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ba7c:	2301      	movs	r3, #1
 800ba7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ba80:	e03d      	b.n	800bafe <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	699b      	ldr	r3, [r3, #24]
 800ba86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ba8a:	d121      	bne.n	800bad0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	2b03      	cmp	r3, #3
 800ba90:	d837      	bhi.n	800bb02 <DMA_CheckFifoParam+0xda>
 800ba92:	a201      	add	r2, pc, #4	@ (adr r2, 800ba98 <DMA_CheckFifoParam+0x70>)
 800ba94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba98:	0800baa9 	.word	0x0800baa9
 800ba9c:	0800baaf 	.word	0x0800baaf
 800baa0:	0800baa9 	.word	0x0800baa9
 800baa4:	0800bac1 	.word	0x0800bac1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	73fb      	strb	r3, [r7, #15]
      break;
 800baac:	e030      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d025      	beq.n	800bb06 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800baba:	2301      	movs	r3, #1
 800babc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800babe:	e022      	b.n	800bb06 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800bac8:	d11f      	bne.n	800bb0a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800baca:	2301      	movs	r3, #1
 800bacc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bace:	e01c      	b.n	800bb0a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b02      	cmp	r3, #2
 800bad4:	d903      	bls.n	800bade <DMA_CheckFifoParam+0xb6>
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	2b03      	cmp	r3, #3
 800bada:	d003      	beq.n	800bae4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800badc:	e018      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bade:	2301      	movs	r3, #1
 800bae0:	73fb      	strb	r3, [r7, #15]
      break;
 800bae2:	e015      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800baec:	2b00      	cmp	r3, #0
 800baee:	d00e      	beq.n	800bb0e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	73fb      	strb	r3, [r7, #15]
      break;
 800baf4:	e00b      	b.n	800bb0e <DMA_CheckFifoParam+0xe6>
      break;
 800baf6:	bf00      	nop
 800baf8:	e00a      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
      break;
 800bafa:	bf00      	nop
 800bafc:	e008      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
      break;
 800bafe:	bf00      	nop
 800bb00:	e006      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
      break;
 800bb02:	bf00      	nop
 800bb04:	e004      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
      break;
 800bb06:	bf00      	nop
 800bb08:	e002      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
      break;   
 800bb0a:	bf00      	nop
 800bb0c:	e000      	b.n	800bb10 <DMA_CheckFifoParam+0xe8>
      break;
 800bb0e:	bf00      	nop
    }
  } 
  
  return status; 
 800bb10:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop

0800bb20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bb20:	b480      	push	{r7}
 800bb22:	b089      	sub	sp, #36	@ 0x24
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
 800bb28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bb2a:	2300      	movs	r3, #0
 800bb2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bb2e:	2300      	movs	r3, #0
 800bb30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bb32:	2300      	movs	r3, #0
 800bb34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bb36:	2300      	movs	r3, #0
 800bb38:	61fb      	str	r3, [r7, #28]
 800bb3a:	e16b      	b.n	800be14 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bb3c:	2201      	movs	r2, #1
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	fa02 f303 	lsl.w	r3, r2, r3
 800bb44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	697a      	ldr	r2, [r7, #20]
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bb50:	693a      	ldr	r2, [r7, #16]
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	429a      	cmp	r2, r3
 800bb56:	f040 815a 	bne.w	800be0e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	685b      	ldr	r3, [r3, #4]
 800bb5e:	f003 0303 	and.w	r3, r3, #3
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d005      	beq.n	800bb72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bb66:	683b      	ldr	r3, [r7, #0]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	d130      	bne.n	800bbd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	689b      	ldr	r3, [r3, #8]
 800bb76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bb78:	69fb      	ldr	r3, [r7, #28]
 800bb7a:	005b      	lsls	r3, r3, #1
 800bb7c:	2203      	movs	r2, #3
 800bb7e:	fa02 f303 	lsl.w	r3, r2, r3
 800bb82:	43db      	mvns	r3, r3
 800bb84:	69ba      	ldr	r2, [r7, #24]
 800bb86:	4013      	ands	r3, r2
 800bb88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bb8a:	683b      	ldr	r3, [r7, #0]
 800bb8c:	68da      	ldr	r2, [r3, #12]
 800bb8e:	69fb      	ldr	r3, [r7, #28]
 800bb90:	005b      	lsls	r3, r3, #1
 800bb92:	fa02 f303 	lsl.w	r3, r2, r3
 800bb96:	69ba      	ldr	r2, [r7, #24]
 800bb98:	4313      	orrs	r3, r2
 800bb9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	69ba      	ldr	r2, [r7, #24]
 800bba0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	685b      	ldr	r3, [r3, #4]
 800bba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bba8:	2201      	movs	r2, #1
 800bbaa:	69fb      	ldr	r3, [r7, #28]
 800bbac:	fa02 f303 	lsl.w	r3, r2, r3
 800bbb0:	43db      	mvns	r3, r3
 800bbb2:	69ba      	ldr	r2, [r7, #24]
 800bbb4:	4013      	ands	r3, r2
 800bbb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bbb8:	683b      	ldr	r3, [r7, #0]
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	091b      	lsrs	r3, r3, #4
 800bbbe:	f003 0201 	and.w	r2, r3, #1
 800bbc2:	69fb      	ldr	r3, [r7, #28]
 800bbc4:	fa02 f303 	lsl.w	r3, r2, r3
 800bbc8:	69ba      	ldr	r2, [r7, #24]
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	69ba      	ldr	r2, [r7, #24]
 800bbd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	685b      	ldr	r3, [r3, #4]
 800bbd8:	f003 0303 	and.w	r3, r3, #3
 800bbdc:	2b03      	cmp	r3, #3
 800bbde:	d017      	beq.n	800bc10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	68db      	ldr	r3, [r3, #12]
 800bbe4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	005b      	lsls	r3, r3, #1
 800bbea:	2203      	movs	r2, #3
 800bbec:	fa02 f303 	lsl.w	r3, r2, r3
 800bbf0:	43db      	mvns	r3, r3
 800bbf2:	69ba      	ldr	r2, [r7, #24]
 800bbf4:	4013      	ands	r3, r2
 800bbf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	689a      	ldr	r2, [r3, #8]
 800bbfc:	69fb      	ldr	r3, [r7, #28]
 800bbfe:	005b      	lsls	r3, r3, #1
 800bc00:	fa02 f303 	lsl.w	r3, r2, r3
 800bc04:	69ba      	ldr	r2, [r7, #24]
 800bc06:	4313      	orrs	r3, r2
 800bc08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	69ba      	ldr	r2, [r7, #24]
 800bc0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	685b      	ldr	r3, [r3, #4]
 800bc14:	f003 0303 	and.w	r3, r3, #3
 800bc18:	2b02      	cmp	r3, #2
 800bc1a:	d123      	bne.n	800bc64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bc1c:	69fb      	ldr	r3, [r7, #28]
 800bc1e:	08da      	lsrs	r2, r3, #3
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	3208      	adds	r2, #8
 800bc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bc2a:	69fb      	ldr	r3, [r7, #28]
 800bc2c:	f003 0307 	and.w	r3, r3, #7
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	220f      	movs	r2, #15
 800bc34:	fa02 f303 	lsl.w	r3, r2, r3
 800bc38:	43db      	mvns	r3, r3
 800bc3a:	69ba      	ldr	r2, [r7, #24]
 800bc3c:	4013      	ands	r3, r2
 800bc3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	691a      	ldr	r2, [r3, #16]
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	f003 0307 	and.w	r3, r3, #7
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	fa02 f303 	lsl.w	r3, r2, r3
 800bc50:	69ba      	ldr	r2, [r7, #24]
 800bc52:	4313      	orrs	r3, r2
 800bc54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	08da      	lsrs	r2, r3, #3
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	3208      	adds	r2, #8
 800bc5e:	69b9      	ldr	r1, [r7, #24]
 800bc60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bc6a:	69fb      	ldr	r3, [r7, #28]
 800bc6c:	005b      	lsls	r3, r3, #1
 800bc6e:	2203      	movs	r2, #3
 800bc70:	fa02 f303 	lsl.w	r3, r2, r3
 800bc74:	43db      	mvns	r3, r3
 800bc76:	69ba      	ldr	r2, [r7, #24]
 800bc78:	4013      	ands	r3, r2
 800bc7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	685b      	ldr	r3, [r3, #4]
 800bc80:	f003 0203 	and.w	r2, r3, #3
 800bc84:	69fb      	ldr	r3, [r7, #28]
 800bc86:	005b      	lsls	r3, r3, #1
 800bc88:	fa02 f303 	lsl.w	r3, r2, r3
 800bc8c:	69ba      	ldr	r2, [r7, #24]
 800bc8e:	4313      	orrs	r3, r2
 800bc90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	69ba      	ldr	r2, [r7, #24]
 800bc96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	685b      	ldr	r3, [r3, #4]
 800bc9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	f000 80b4 	beq.w	800be0e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bca6:	2300      	movs	r3, #0
 800bca8:	60fb      	str	r3, [r7, #12]
 800bcaa:	4b60      	ldr	r3, [pc, #384]	@ (800be2c <HAL_GPIO_Init+0x30c>)
 800bcac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcae:	4a5f      	ldr	r2, [pc, #380]	@ (800be2c <HAL_GPIO_Init+0x30c>)
 800bcb0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bcb4:	6453      	str	r3, [r2, #68]	@ 0x44
 800bcb6:	4b5d      	ldr	r3, [pc, #372]	@ (800be2c <HAL_GPIO_Init+0x30c>)
 800bcb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bcbe:	60fb      	str	r3, [r7, #12]
 800bcc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800bcc2:	4a5b      	ldr	r2, [pc, #364]	@ (800be30 <HAL_GPIO_Init+0x310>)
 800bcc4:	69fb      	ldr	r3, [r7, #28]
 800bcc6:	089b      	lsrs	r3, r3, #2
 800bcc8:	3302      	adds	r3, #2
 800bcca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800bcd0:	69fb      	ldr	r3, [r7, #28]
 800bcd2:	f003 0303 	and.w	r3, r3, #3
 800bcd6:	009b      	lsls	r3, r3, #2
 800bcd8:	220f      	movs	r2, #15
 800bcda:	fa02 f303 	lsl.w	r3, r2, r3
 800bcde:	43db      	mvns	r3, r3
 800bce0:	69ba      	ldr	r2, [r7, #24]
 800bce2:	4013      	ands	r3, r2
 800bce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	4a52      	ldr	r2, [pc, #328]	@ (800be34 <HAL_GPIO_Init+0x314>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d02b      	beq.n	800bd46 <HAL_GPIO_Init+0x226>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	4a51      	ldr	r2, [pc, #324]	@ (800be38 <HAL_GPIO_Init+0x318>)
 800bcf2:	4293      	cmp	r3, r2
 800bcf4:	d025      	beq.n	800bd42 <HAL_GPIO_Init+0x222>
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	4a50      	ldr	r2, [pc, #320]	@ (800be3c <HAL_GPIO_Init+0x31c>)
 800bcfa:	4293      	cmp	r3, r2
 800bcfc:	d01f      	beq.n	800bd3e <HAL_GPIO_Init+0x21e>
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a4f      	ldr	r2, [pc, #316]	@ (800be40 <HAL_GPIO_Init+0x320>)
 800bd02:	4293      	cmp	r3, r2
 800bd04:	d019      	beq.n	800bd3a <HAL_GPIO_Init+0x21a>
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	4a4e      	ldr	r2, [pc, #312]	@ (800be44 <HAL_GPIO_Init+0x324>)
 800bd0a:	4293      	cmp	r3, r2
 800bd0c:	d013      	beq.n	800bd36 <HAL_GPIO_Init+0x216>
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	4a4d      	ldr	r2, [pc, #308]	@ (800be48 <HAL_GPIO_Init+0x328>)
 800bd12:	4293      	cmp	r3, r2
 800bd14:	d00d      	beq.n	800bd32 <HAL_GPIO_Init+0x212>
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	4a4c      	ldr	r2, [pc, #304]	@ (800be4c <HAL_GPIO_Init+0x32c>)
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d007      	beq.n	800bd2e <HAL_GPIO_Init+0x20e>
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	4a4b      	ldr	r2, [pc, #300]	@ (800be50 <HAL_GPIO_Init+0x330>)
 800bd22:	4293      	cmp	r3, r2
 800bd24:	d101      	bne.n	800bd2a <HAL_GPIO_Init+0x20a>
 800bd26:	2307      	movs	r3, #7
 800bd28:	e00e      	b.n	800bd48 <HAL_GPIO_Init+0x228>
 800bd2a:	2308      	movs	r3, #8
 800bd2c:	e00c      	b.n	800bd48 <HAL_GPIO_Init+0x228>
 800bd2e:	2306      	movs	r3, #6
 800bd30:	e00a      	b.n	800bd48 <HAL_GPIO_Init+0x228>
 800bd32:	2305      	movs	r3, #5
 800bd34:	e008      	b.n	800bd48 <HAL_GPIO_Init+0x228>
 800bd36:	2304      	movs	r3, #4
 800bd38:	e006      	b.n	800bd48 <HAL_GPIO_Init+0x228>
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	e004      	b.n	800bd48 <HAL_GPIO_Init+0x228>
 800bd3e:	2302      	movs	r3, #2
 800bd40:	e002      	b.n	800bd48 <HAL_GPIO_Init+0x228>
 800bd42:	2301      	movs	r3, #1
 800bd44:	e000      	b.n	800bd48 <HAL_GPIO_Init+0x228>
 800bd46:	2300      	movs	r3, #0
 800bd48:	69fa      	ldr	r2, [r7, #28]
 800bd4a:	f002 0203 	and.w	r2, r2, #3
 800bd4e:	0092      	lsls	r2, r2, #2
 800bd50:	4093      	lsls	r3, r2
 800bd52:	69ba      	ldr	r2, [r7, #24]
 800bd54:	4313      	orrs	r3, r2
 800bd56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bd58:	4935      	ldr	r1, [pc, #212]	@ (800be30 <HAL_GPIO_Init+0x310>)
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	089b      	lsrs	r3, r3, #2
 800bd5e:	3302      	adds	r3, #2
 800bd60:	69ba      	ldr	r2, [r7, #24]
 800bd62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bd66:	4b3b      	ldr	r3, [pc, #236]	@ (800be54 <HAL_GPIO_Init+0x334>)
 800bd68:	689b      	ldr	r3, [r3, #8]
 800bd6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	43db      	mvns	r3, r3
 800bd70:	69ba      	ldr	r2, [r7, #24]
 800bd72:	4013      	ands	r3, r2
 800bd74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800bd82:	69ba      	ldr	r2, [r7, #24]
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	4313      	orrs	r3, r2
 800bd88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bd8a:	4a32      	ldr	r2, [pc, #200]	@ (800be54 <HAL_GPIO_Init+0x334>)
 800bd8c:	69bb      	ldr	r3, [r7, #24]
 800bd8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bd90:	4b30      	ldr	r3, [pc, #192]	@ (800be54 <HAL_GPIO_Init+0x334>)
 800bd92:	68db      	ldr	r3, [r3, #12]
 800bd94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bd96:	693b      	ldr	r3, [r7, #16]
 800bd98:	43db      	mvns	r3, r3
 800bd9a:	69ba      	ldr	r2, [r7, #24]
 800bd9c:	4013      	ands	r3, r2
 800bd9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bda0:	683b      	ldr	r3, [r7, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d003      	beq.n	800bdb4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800bdac:	69ba      	ldr	r2, [r7, #24]
 800bdae:	693b      	ldr	r3, [r7, #16]
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bdb4:	4a27      	ldr	r2, [pc, #156]	@ (800be54 <HAL_GPIO_Init+0x334>)
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800bdba:	4b26      	ldr	r3, [pc, #152]	@ (800be54 <HAL_GPIO_Init+0x334>)
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bdc0:	693b      	ldr	r3, [r7, #16]
 800bdc2:	43db      	mvns	r3, r3
 800bdc4:	69ba      	ldr	r2, [r7, #24]
 800bdc6:	4013      	ands	r3, r2
 800bdc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	685b      	ldr	r3, [r3, #4]
 800bdce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d003      	beq.n	800bdde <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800bdd6:	69ba      	ldr	r2, [r7, #24]
 800bdd8:	693b      	ldr	r3, [r7, #16]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bdde:	4a1d      	ldr	r2, [pc, #116]	@ (800be54 <HAL_GPIO_Init+0x334>)
 800bde0:	69bb      	ldr	r3, [r7, #24]
 800bde2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bde4:	4b1b      	ldr	r3, [pc, #108]	@ (800be54 <HAL_GPIO_Init+0x334>)
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	43db      	mvns	r3, r3
 800bdee:	69ba      	ldr	r2, [r7, #24]
 800bdf0:	4013      	ands	r3, r2
 800bdf2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	685b      	ldr	r3, [r3, #4]
 800bdf8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d003      	beq.n	800be08 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	4313      	orrs	r3, r2
 800be06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800be08:	4a12      	ldr	r2, [pc, #72]	@ (800be54 <HAL_GPIO_Init+0x334>)
 800be0a:	69bb      	ldr	r3, [r7, #24]
 800be0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800be0e:	69fb      	ldr	r3, [r7, #28]
 800be10:	3301      	adds	r3, #1
 800be12:	61fb      	str	r3, [r7, #28]
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	2b0f      	cmp	r3, #15
 800be18:	f67f ae90 	bls.w	800bb3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800be1c:	bf00      	nop
 800be1e:	bf00      	nop
 800be20:	3724      	adds	r7, #36	@ 0x24
 800be22:	46bd      	mov	sp, r7
 800be24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be28:	4770      	bx	lr
 800be2a:	bf00      	nop
 800be2c:	40023800 	.word	0x40023800
 800be30:	40013800 	.word	0x40013800
 800be34:	40020000 	.word	0x40020000
 800be38:	40020400 	.word	0x40020400
 800be3c:	40020800 	.word	0x40020800
 800be40:	40020c00 	.word	0x40020c00
 800be44:	40021000 	.word	0x40021000
 800be48:	40021400 	.word	0x40021400
 800be4c:	40021800 	.word	0x40021800
 800be50:	40021c00 	.word	0x40021c00
 800be54:	40013c00 	.word	0x40013c00

0800be58 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800be58:	b480      	push	{r7}
 800be5a:	b087      	sub	sp, #28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
 800be60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800be62:	2300      	movs	r3, #0
 800be64:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800be66:	2300      	movs	r3, #0
 800be68:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800be6a:	2300      	movs	r3, #0
 800be6c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800be6e:	2300      	movs	r3, #0
 800be70:	617b      	str	r3, [r7, #20]
 800be72:	e0cd      	b.n	800c010 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800be74:	2201      	movs	r2, #1
 800be76:	697b      	ldr	r3, [r7, #20]
 800be78:	fa02 f303 	lsl.w	r3, r2, r3
 800be7c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800be7e:	683a      	ldr	r2, [r7, #0]
 800be80:	693b      	ldr	r3, [r7, #16]
 800be82:	4013      	ands	r3, r2
 800be84:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	f040 80bd 	bne.w	800c00a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800be90:	4a65      	ldr	r2, [pc, #404]	@ (800c028 <HAL_GPIO_DeInit+0x1d0>)
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	089b      	lsrs	r3, r3, #2
 800be96:	3302      	adds	r3, #2
 800be98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be9c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	f003 0303 	and.w	r3, r3, #3
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	220f      	movs	r2, #15
 800bea8:	fa02 f303 	lsl.w	r3, r2, r3
 800beac:	68ba      	ldr	r2, [r7, #8]
 800beae:	4013      	ands	r3, r2
 800beb0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	4a5d      	ldr	r2, [pc, #372]	@ (800c02c <HAL_GPIO_DeInit+0x1d4>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d02b      	beq.n	800bf12 <HAL_GPIO_DeInit+0xba>
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	4a5c      	ldr	r2, [pc, #368]	@ (800c030 <HAL_GPIO_DeInit+0x1d8>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d025      	beq.n	800bf0e <HAL_GPIO_DeInit+0xb6>
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	4a5b      	ldr	r2, [pc, #364]	@ (800c034 <HAL_GPIO_DeInit+0x1dc>)
 800bec6:	4293      	cmp	r3, r2
 800bec8:	d01f      	beq.n	800bf0a <HAL_GPIO_DeInit+0xb2>
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	4a5a      	ldr	r2, [pc, #360]	@ (800c038 <HAL_GPIO_DeInit+0x1e0>)
 800bece:	4293      	cmp	r3, r2
 800bed0:	d019      	beq.n	800bf06 <HAL_GPIO_DeInit+0xae>
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	4a59      	ldr	r2, [pc, #356]	@ (800c03c <HAL_GPIO_DeInit+0x1e4>)
 800bed6:	4293      	cmp	r3, r2
 800bed8:	d013      	beq.n	800bf02 <HAL_GPIO_DeInit+0xaa>
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	4a58      	ldr	r2, [pc, #352]	@ (800c040 <HAL_GPIO_DeInit+0x1e8>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d00d      	beq.n	800befe <HAL_GPIO_DeInit+0xa6>
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	4a57      	ldr	r2, [pc, #348]	@ (800c044 <HAL_GPIO_DeInit+0x1ec>)
 800bee6:	4293      	cmp	r3, r2
 800bee8:	d007      	beq.n	800befa <HAL_GPIO_DeInit+0xa2>
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4a56      	ldr	r2, [pc, #344]	@ (800c048 <HAL_GPIO_DeInit+0x1f0>)
 800beee:	4293      	cmp	r3, r2
 800bef0:	d101      	bne.n	800bef6 <HAL_GPIO_DeInit+0x9e>
 800bef2:	2307      	movs	r3, #7
 800bef4:	e00e      	b.n	800bf14 <HAL_GPIO_DeInit+0xbc>
 800bef6:	2308      	movs	r3, #8
 800bef8:	e00c      	b.n	800bf14 <HAL_GPIO_DeInit+0xbc>
 800befa:	2306      	movs	r3, #6
 800befc:	e00a      	b.n	800bf14 <HAL_GPIO_DeInit+0xbc>
 800befe:	2305      	movs	r3, #5
 800bf00:	e008      	b.n	800bf14 <HAL_GPIO_DeInit+0xbc>
 800bf02:	2304      	movs	r3, #4
 800bf04:	e006      	b.n	800bf14 <HAL_GPIO_DeInit+0xbc>
 800bf06:	2303      	movs	r3, #3
 800bf08:	e004      	b.n	800bf14 <HAL_GPIO_DeInit+0xbc>
 800bf0a:	2302      	movs	r3, #2
 800bf0c:	e002      	b.n	800bf14 <HAL_GPIO_DeInit+0xbc>
 800bf0e:	2301      	movs	r3, #1
 800bf10:	e000      	b.n	800bf14 <HAL_GPIO_DeInit+0xbc>
 800bf12:	2300      	movs	r3, #0
 800bf14:	697a      	ldr	r2, [r7, #20]
 800bf16:	f002 0203 	and.w	r2, r2, #3
 800bf1a:	0092      	lsls	r2, r2, #2
 800bf1c:	4093      	lsls	r3, r2
 800bf1e:	68ba      	ldr	r2, [r7, #8]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d132      	bne.n	800bf8a <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800bf24:	4b49      	ldr	r3, [pc, #292]	@ (800c04c <HAL_GPIO_DeInit+0x1f4>)
 800bf26:	681a      	ldr	r2, [r3, #0]
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	43db      	mvns	r3, r3
 800bf2c:	4947      	ldr	r1, [pc, #284]	@ (800c04c <HAL_GPIO_DeInit+0x1f4>)
 800bf2e:	4013      	ands	r3, r2
 800bf30:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800bf32:	4b46      	ldr	r3, [pc, #280]	@ (800c04c <HAL_GPIO_DeInit+0x1f4>)
 800bf34:	685a      	ldr	r2, [r3, #4]
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	43db      	mvns	r3, r3
 800bf3a:	4944      	ldr	r1, [pc, #272]	@ (800c04c <HAL_GPIO_DeInit+0x1f4>)
 800bf3c:	4013      	ands	r3, r2
 800bf3e:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800bf40:	4b42      	ldr	r3, [pc, #264]	@ (800c04c <HAL_GPIO_DeInit+0x1f4>)
 800bf42:	68da      	ldr	r2, [r3, #12]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	43db      	mvns	r3, r3
 800bf48:	4940      	ldr	r1, [pc, #256]	@ (800c04c <HAL_GPIO_DeInit+0x1f4>)
 800bf4a:	4013      	ands	r3, r2
 800bf4c:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800bf4e:	4b3f      	ldr	r3, [pc, #252]	@ (800c04c <HAL_GPIO_DeInit+0x1f4>)
 800bf50:	689a      	ldr	r2, [r3, #8]
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	43db      	mvns	r3, r3
 800bf56:	493d      	ldr	r1, [pc, #244]	@ (800c04c <HAL_GPIO_DeInit+0x1f4>)
 800bf58:	4013      	ands	r3, r2
 800bf5a:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800bf5c:	697b      	ldr	r3, [r7, #20]
 800bf5e:	f003 0303 	and.w	r3, r3, #3
 800bf62:	009b      	lsls	r3, r3, #2
 800bf64:	220f      	movs	r2, #15
 800bf66:	fa02 f303 	lsl.w	r3, r2, r3
 800bf6a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800bf6c:	4a2e      	ldr	r2, [pc, #184]	@ (800c028 <HAL_GPIO_DeInit+0x1d0>)
 800bf6e:	697b      	ldr	r3, [r7, #20]
 800bf70:	089b      	lsrs	r3, r3, #2
 800bf72:	3302      	adds	r3, #2
 800bf74:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	43da      	mvns	r2, r3
 800bf7c:	482a      	ldr	r0, [pc, #168]	@ (800c028 <HAL_GPIO_DeInit+0x1d0>)
 800bf7e:	697b      	ldr	r3, [r7, #20]
 800bf80:	089b      	lsrs	r3, r3, #2
 800bf82:	400a      	ands	r2, r1
 800bf84:	3302      	adds	r3, #2
 800bf86:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681a      	ldr	r2, [r3, #0]
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	005b      	lsls	r3, r3, #1
 800bf92:	2103      	movs	r1, #3
 800bf94:	fa01 f303 	lsl.w	r3, r1, r3
 800bf98:	43db      	mvns	r3, r3
 800bf9a:	401a      	ands	r2, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	08da      	lsrs	r2, r3, #3
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	3208      	adds	r2, #8
 800bfa8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	f003 0307 	and.w	r3, r3, #7
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	220f      	movs	r2, #15
 800bfb6:	fa02 f303 	lsl.w	r3, r2, r3
 800bfba:	43db      	mvns	r3, r3
 800bfbc:	697a      	ldr	r2, [r7, #20]
 800bfbe:	08d2      	lsrs	r2, r2, #3
 800bfc0:	4019      	ands	r1, r3
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	3208      	adds	r2, #8
 800bfc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	68da      	ldr	r2, [r3, #12]
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	2103      	movs	r1, #3
 800bfd4:	fa01 f303 	lsl.w	r3, r1, r3
 800bfd8:	43db      	mvns	r3, r3
 800bfda:	401a      	ands	r2, r3
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	685a      	ldr	r2, [r3, #4]
 800bfe4:	2101      	movs	r1, #1
 800bfe6:	697b      	ldr	r3, [r7, #20]
 800bfe8:	fa01 f303 	lsl.w	r3, r1, r3
 800bfec:	43db      	mvns	r3, r3
 800bfee:	401a      	ands	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	689a      	ldr	r2, [r3, #8]
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	005b      	lsls	r3, r3, #1
 800bffc:	2103      	movs	r1, #3
 800bffe:	fa01 f303 	lsl.w	r3, r1, r3
 800c002:	43db      	mvns	r3, r3
 800c004:	401a      	ands	r2, r3
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	3301      	adds	r3, #1
 800c00e:	617b      	str	r3, [r7, #20]
 800c010:	697b      	ldr	r3, [r7, #20]
 800c012:	2b0f      	cmp	r3, #15
 800c014:	f67f af2e 	bls.w	800be74 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800c018:	bf00      	nop
 800c01a:	bf00      	nop
 800c01c:	371c      	adds	r7, #28
 800c01e:	46bd      	mov	sp, r7
 800c020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c024:	4770      	bx	lr
 800c026:	bf00      	nop
 800c028:	40013800 	.word	0x40013800
 800c02c:	40020000 	.word	0x40020000
 800c030:	40020400 	.word	0x40020400
 800c034:	40020800 	.word	0x40020800
 800c038:	40020c00 	.word	0x40020c00
 800c03c:	40021000 	.word	0x40021000
 800c040:	40021400 	.word	0x40021400
 800c044:	40021800 	.word	0x40021800
 800c048:	40021c00 	.word	0x40021c00
 800c04c:	40013c00 	.word	0x40013c00

0800c050 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c050:	b480      	push	{r7}
 800c052:	b083      	sub	sp, #12
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
 800c058:	460b      	mov	r3, r1
 800c05a:	807b      	strh	r3, [r7, #2]
 800c05c:	4613      	mov	r3, r2
 800c05e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c060:	787b      	ldrb	r3, [r7, #1]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d003      	beq.n	800c06e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c066:	887a      	ldrh	r2, [r7, #2]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c06c:	e003      	b.n	800c076 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c06e:	887b      	ldrh	r3, [r7, #2]
 800c070:	041a      	lsls	r2, r3, #16
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	619a      	str	r2, [r3, #24]
}
 800c076:	bf00      	nop
 800c078:	370c      	adds	r7, #12
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b086      	sub	sp, #24
 800c086:	af02      	add	r7, sp, #8
 800c088:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d101      	bne.n	800c094 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	e101      	b.n	800c298 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d106      	bne.n	800c0b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f00b fffe 	bl	80180b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2203      	movs	r2, #3
 800c0b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c0c2:	d102      	bne.n	800c0ca <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f005 f8cb 	bl	801126a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6818      	ldr	r0, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	7c1a      	ldrb	r2, [r3, #16]
 800c0dc:	f88d 2000 	strb.w	r2, [sp]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c0e4:	f004 ffaa 	bl	801103c <USB_CoreInit>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d005      	beq.n	800c0fa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e0ce      	b.n	800c298 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2100      	movs	r1, #0
 800c100:	4618      	mov	r0, r3
 800c102:	f005 f8c3 	bl	801128c <USB_SetCurrentMode>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d005      	beq.n	800c118 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2202      	movs	r2, #2
 800c110:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c114:	2301      	movs	r3, #1
 800c116:	e0bf      	b.n	800c298 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c118:	2300      	movs	r3, #0
 800c11a:	73fb      	strb	r3, [r7, #15]
 800c11c:	e04a      	b.n	800c1b4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c11e:	7bfa      	ldrb	r2, [r7, #15]
 800c120:	6879      	ldr	r1, [r7, #4]
 800c122:	4613      	mov	r3, r2
 800c124:	00db      	lsls	r3, r3, #3
 800c126:	4413      	add	r3, r2
 800c128:	009b      	lsls	r3, r3, #2
 800c12a:	440b      	add	r3, r1
 800c12c:	3315      	adds	r3, #21
 800c12e:	2201      	movs	r2, #1
 800c130:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c132:	7bfa      	ldrb	r2, [r7, #15]
 800c134:	6879      	ldr	r1, [r7, #4]
 800c136:	4613      	mov	r3, r2
 800c138:	00db      	lsls	r3, r3, #3
 800c13a:	4413      	add	r3, r2
 800c13c:	009b      	lsls	r3, r3, #2
 800c13e:	440b      	add	r3, r1
 800c140:	3314      	adds	r3, #20
 800c142:	7bfa      	ldrb	r2, [r7, #15]
 800c144:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800c146:	7bfa      	ldrb	r2, [r7, #15]
 800c148:	7bfb      	ldrb	r3, [r7, #15]
 800c14a:	b298      	uxth	r0, r3
 800c14c:	6879      	ldr	r1, [r7, #4]
 800c14e:	4613      	mov	r3, r2
 800c150:	00db      	lsls	r3, r3, #3
 800c152:	4413      	add	r3, r2
 800c154:	009b      	lsls	r3, r3, #2
 800c156:	440b      	add	r3, r1
 800c158:	332e      	adds	r3, #46	@ 0x2e
 800c15a:	4602      	mov	r2, r0
 800c15c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c15e:	7bfa      	ldrb	r2, [r7, #15]
 800c160:	6879      	ldr	r1, [r7, #4]
 800c162:	4613      	mov	r3, r2
 800c164:	00db      	lsls	r3, r3, #3
 800c166:	4413      	add	r3, r2
 800c168:	009b      	lsls	r3, r3, #2
 800c16a:	440b      	add	r3, r1
 800c16c:	3318      	adds	r3, #24
 800c16e:	2200      	movs	r2, #0
 800c170:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c172:	7bfa      	ldrb	r2, [r7, #15]
 800c174:	6879      	ldr	r1, [r7, #4]
 800c176:	4613      	mov	r3, r2
 800c178:	00db      	lsls	r3, r3, #3
 800c17a:	4413      	add	r3, r2
 800c17c:	009b      	lsls	r3, r3, #2
 800c17e:	440b      	add	r3, r1
 800c180:	331c      	adds	r3, #28
 800c182:	2200      	movs	r2, #0
 800c184:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c186:	7bfa      	ldrb	r2, [r7, #15]
 800c188:	6879      	ldr	r1, [r7, #4]
 800c18a:	4613      	mov	r3, r2
 800c18c:	00db      	lsls	r3, r3, #3
 800c18e:	4413      	add	r3, r2
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	440b      	add	r3, r1
 800c194:	3320      	adds	r3, #32
 800c196:	2200      	movs	r2, #0
 800c198:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c19a:	7bfa      	ldrb	r2, [r7, #15]
 800c19c:	6879      	ldr	r1, [r7, #4]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	00db      	lsls	r3, r3, #3
 800c1a2:	4413      	add	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	440b      	add	r3, r1
 800c1a8:	3324      	adds	r3, #36	@ 0x24
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1ae:	7bfb      	ldrb	r3, [r7, #15]
 800c1b0:	3301      	adds	r3, #1
 800c1b2:	73fb      	strb	r3, [r7, #15]
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	791b      	ldrb	r3, [r3, #4]
 800c1b8:	7bfa      	ldrb	r2, [r7, #15]
 800c1ba:	429a      	cmp	r2, r3
 800c1bc:	d3af      	bcc.n	800c11e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c1be:	2300      	movs	r3, #0
 800c1c0:	73fb      	strb	r3, [r7, #15]
 800c1c2:	e044      	b.n	800c24e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c1c4:	7bfa      	ldrb	r2, [r7, #15]
 800c1c6:	6879      	ldr	r1, [r7, #4]
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	00db      	lsls	r3, r3, #3
 800c1cc:	4413      	add	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	440b      	add	r3, r1
 800c1d2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c1da:	7bfa      	ldrb	r2, [r7, #15]
 800c1dc:	6879      	ldr	r1, [r7, #4]
 800c1de:	4613      	mov	r3, r2
 800c1e0:	00db      	lsls	r3, r3, #3
 800c1e2:	4413      	add	r3, r2
 800c1e4:	009b      	lsls	r3, r3, #2
 800c1e6:	440b      	add	r3, r1
 800c1e8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800c1ec:	7bfa      	ldrb	r2, [r7, #15]
 800c1ee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c1f0:	7bfa      	ldrb	r2, [r7, #15]
 800c1f2:	6879      	ldr	r1, [r7, #4]
 800c1f4:	4613      	mov	r3, r2
 800c1f6:	00db      	lsls	r3, r3, #3
 800c1f8:	4413      	add	r3, r2
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	440b      	add	r3, r1
 800c1fe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c202:	2200      	movs	r2, #0
 800c204:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c206:	7bfa      	ldrb	r2, [r7, #15]
 800c208:	6879      	ldr	r1, [r7, #4]
 800c20a:	4613      	mov	r3, r2
 800c20c:	00db      	lsls	r3, r3, #3
 800c20e:	4413      	add	r3, r2
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	440b      	add	r3, r1
 800c214:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800c218:	2200      	movs	r2, #0
 800c21a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c21c:	7bfa      	ldrb	r2, [r7, #15]
 800c21e:	6879      	ldr	r1, [r7, #4]
 800c220:	4613      	mov	r3, r2
 800c222:	00db      	lsls	r3, r3, #3
 800c224:	4413      	add	r3, r2
 800c226:	009b      	lsls	r3, r3, #2
 800c228:	440b      	add	r3, r1
 800c22a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c22e:	2200      	movs	r2, #0
 800c230:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c232:	7bfa      	ldrb	r2, [r7, #15]
 800c234:	6879      	ldr	r1, [r7, #4]
 800c236:	4613      	mov	r3, r2
 800c238:	00db      	lsls	r3, r3, #3
 800c23a:	4413      	add	r3, r2
 800c23c:	009b      	lsls	r3, r3, #2
 800c23e:	440b      	add	r3, r1
 800c240:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800c244:	2200      	movs	r2, #0
 800c246:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c248:	7bfb      	ldrb	r3, [r7, #15]
 800c24a:	3301      	adds	r3, #1
 800c24c:	73fb      	strb	r3, [r7, #15]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	791b      	ldrb	r3, [r3, #4]
 800c252:	7bfa      	ldrb	r2, [r7, #15]
 800c254:	429a      	cmp	r2, r3
 800c256:	d3b5      	bcc.n	800c1c4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	6818      	ldr	r0, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	7c1a      	ldrb	r2, [r3, #16]
 800c260:	f88d 2000 	strb.w	r2, [sp]
 800c264:	3304      	adds	r3, #4
 800c266:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c268:	f005 f85c 	bl	8011324 <USB_DevInit>
 800c26c:	4603      	mov	r3, r0
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d005      	beq.n	800c27e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	2202      	movs	r2, #2
 800c276:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800c27a:	2301      	movs	r3, #1
 800c27c:	e00c      	b.n	800c298 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	2200      	movs	r2, #0
 800c282:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2201      	movs	r2, #1
 800c288:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4618      	mov	r0, r3
 800c292:	f006 f8a6 	bl	80123e2 <USB_DevDisconnect>

  return HAL_OK;
 800c296:	2300      	movs	r3, #0
}
 800c298:	4618      	mov	r0, r3
 800c29a:	3710      	adds	r7, #16
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd80      	pop	{r7, pc}

0800c2a0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c2b4:	2b01      	cmp	r3, #1
 800c2b6:	d101      	bne.n	800c2bc <HAL_PCD_Start+0x1c>
 800c2b8:	2302      	movs	r3, #2
 800c2ba:	e022      	b.n	800c302 <HAL_PCD_Start+0x62>
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	2201      	movs	r2, #1
 800c2c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c2c4:	68fb      	ldr	r3, [r7, #12]
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d009      	beq.n	800c2e4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d105      	bne.n	800c2e4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c2dc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f004 ffad 	bl	8011248 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f006 f854 	bl	80123a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2200      	movs	r2, #0
 800c2fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c300:	2300      	movs	r3, #0
}
 800c302:	4618      	mov	r0, r3
 800c304:	3710      	adds	r7, #16
 800c306:	46bd      	mov	sp, r7
 800c308:	bd80      	pop	{r7, pc}

0800c30a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800c30a:	b590      	push	{r4, r7, lr}
 800c30c:	b08d      	sub	sp, #52	@ 0x34
 800c30e:	af00      	add	r7, sp, #0
 800c310:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c318:	6a3b      	ldr	r3, [r7, #32]
 800c31a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	4618      	mov	r0, r3
 800c322:	f006 f912 	bl	801254a <USB_GetMode>
 800c326:	4603      	mov	r3, r0
 800c328:	2b00      	cmp	r3, #0
 800c32a:	f040 848c 	bne.w	800cc46 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	4618      	mov	r0, r3
 800c334:	f006 f876 	bl	8012424 <USB_ReadInterrupts>
 800c338:	4603      	mov	r3, r0
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	f000 8482 	beq.w	800cc44 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c346:	689b      	ldr	r3, [r3, #8]
 800c348:	0a1b      	lsrs	r3, r3, #8
 800c34a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	4618      	mov	r0, r3
 800c35a:	f006 f863 	bl	8012424 <USB_ReadInterrupts>
 800c35e:	4603      	mov	r3, r0
 800c360:	f003 0302 	and.w	r3, r3, #2
 800c364:	2b02      	cmp	r3, #2
 800c366:	d107      	bne.n	800c378 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	681b      	ldr	r3, [r3, #0]
 800c36c:	695a      	ldr	r2, [r3, #20]
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	f002 0202 	and.w	r2, r2, #2
 800c376:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	4618      	mov	r0, r3
 800c37e:	f006 f851 	bl	8012424 <USB_ReadInterrupts>
 800c382:	4603      	mov	r3, r0
 800c384:	f003 0310 	and.w	r3, r3, #16
 800c388:	2b10      	cmp	r3, #16
 800c38a:	d161      	bne.n	800c450 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	699a      	ldr	r2, [r3, #24]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f022 0210 	bic.w	r2, r2, #16
 800c39a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800c39c:	6a3b      	ldr	r3, [r7, #32]
 800c39e:	6a1b      	ldr	r3, [r3, #32]
 800c3a0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800c3a2:	69bb      	ldr	r3, [r7, #24]
 800c3a4:	f003 020f 	and.w	r2, r3, #15
 800c3a8:	4613      	mov	r3, r2
 800c3aa:	00db      	lsls	r3, r3, #3
 800c3ac:	4413      	add	r3, r2
 800c3ae:	009b      	lsls	r3, r3, #2
 800c3b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c3b4:	687a      	ldr	r2, [r7, #4]
 800c3b6:	4413      	add	r3, r2
 800c3b8:	3304      	adds	r3, #4
 800c3ba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c3c2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c3c6:	d124      	bne.n	800c412 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800c3c8:	69ba      	ldr	r2, [r7, #24]
 800c3ca:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800c3ce:	4013      	ands	r3, r2
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d035      	beq.n	800c440 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800c3d8:	69bb      	ldr	r3, [r7, #24]
 800c3da:	091b      	lsrs	r3, r3, #4
 800c3dc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800c3de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3e2:	b29b      	uxth	r3, r3
 800c3e4:	461a      	mov	r2, r3
 800c3e6:	6a38      	ldr	r0, [r7, #32]
 800c3e8:	f005 fe88 	bl	80120fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c3ec:	697b      	ldr	r3, [r7, #20]
 800c3ee:	68da      	ldr	r2, [r3, #12]
 800c3f0:	69bb      	ldr	r3, [r7, #24]
 800c3f2:	091b      	lsrs	r3, r3, #4
 800c3f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c3f8:	441a      	add	r2, r3
 800c3fa:	697b      	ldr	r3, [r7, #20]
 800c3fc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	695a      	ldr	r2, [r3, #20]
 800c402:	69bb      	ldr	r3, [r7, #24]
 800c404:	091b      	lsrs	r3, r3, #4
 800c406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c40a:	441a      	add	r2, r3
 800c40c:	697b      	ldr	r3, [r7, #20]
 800c40e:	615a      	str	r2, [r3, #20]
 800c410:	e016      	b.n	800c440 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800c412:	69bb      	ldr	r3, [r7, #24]
 800c414:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800c418:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800c41c:	d110      	bne.n	800c440 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c424:	2208      	movs	r2, #8
 800c426:	4619      	mov	r1, r3
 800c428:	6a38      	ldr	r0, [r7, #32]
 800c42a:	f005 fe67 	bl	80120fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	695a      	ldr	r2, [r3, #20]
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	091b      	lsrs	r3, r3, #4
 800c436:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800c43a:	441a      	add	r2, r3
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	699a      	ldr	r2, [r3, #24]
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f042 0210 	orr.w	r2, r2, #16
 800c44e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	4618      	mov	r0, r3
 800c456:	f005 ffe5 	bl	8012424 <USB_ReadInterrupts>
 800c45a:	4603      	mov	r3, r0
 800c45c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c460:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800c464:	f040 80a7 	bne.w	800c5b6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800c468:	2300      	movs	r3, #0
 800c46a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	4618      	mov	r0, r3
 800c472:	f005 ffea 	bl	801244a <USB_ReadDevAllOutEpInterrupt>
 800c476:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800c478:	e099      	b.n	800c5ae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800c47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b00      	cmp	r3, #0
 800c482:	f000 808e 	beq.w	800c5a2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c48c:	b2d2      	uxtb	r2, r2
 800c48e:	4611      	mov	r1, r2
 800c490:	4618      	mov	r0, r3
 800c492:	f006 f80e 	bl	80124b2 <USB_ReadDevOutEPInterrupt>
 800c496:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	f003 0301 	and.w	r3, r3, #1
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d00c      	beq.n	800c4bc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800c4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4a4:	015a      	lsls	r2, r3, #5
 800c4a6:	69fb      	ldr	r3, [r7, #28]
 800c4a8:	4413      	add	r3, r2
 800c4aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800c4b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	f000 fea4 	bl	800d204 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	f003 0308 	and.w	r3, r3, #8
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d00c      	beq.n	800c4e0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800c4c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c8:	015a      	lsls	r2, r3, #5
 800c4ca:	69fb      	ldr	r3, [r7, #28]
 800c4cc:	4413      	add	r3, r2
 800c4ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	2308      	movs	r3, #8
 800c4d6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800c4d8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c4da:	6878      	ldr	r0, [r7, #4]
 800c4dc:	f000 ff7a 	bl	800d3d4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	f003 0310 	and.w	r3, r3, #16
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d008      	beq.n	800c4fc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800c4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ec:	015a      	lsls	r2, r3, #5
 800c4ee:	69fb      	ldr	r3, [r7, #28]
 800c4f0:	4413      	add	r3, r2
 800c4f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4f6:	461a      	mov	r2, r3
 800c4f8:	2310      	movs	r3, #16
 800c4fa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800c4fc:	693b      	ldr	r3, [r7, #16]
 800c4fe:	f003 0302 	and.w	r3, r3, #2
 800c502:	2b00      	cmp	r3, #0
 800c504:	d030      	beq.n	800c568 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800c506:	6a3b      	ldr	r3, [r7, #32]
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c50e:	2b80      	cmp	r3, #128	@ 0x80
 800c510:	d109      	bne.n	800c526 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c518:	685b      	ldr	r3, [r3, #4]
 800c51a:	69fa      	ldr	r2, [r7, #28]
 800c51c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c520:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800c524:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800c526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c528:	4613      	mov	r3, r2
 800c52a:	00db      	lsls	r3, r3, #3
 800c52c:	4413      	add	r3, r2
 800c52e:	009b      	lsls	r3, r3, #2
 800c530:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c534:	687a      	ldr	r2, [r7, #4]
 800c536:	4413      	add	r3, r2
 800c538:	3304      	adds	r3, #4
 800c53a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	78db      	ldrb	r3, [r3, #3]
 800c540:	2b01      	cmp	r3, #1
 800c542:	d108      	bne.n	800c556 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800c544:	697b      	ldr	r3, [r7, #20]
 800c546:	2200      	movs	r2, #0
 800c548:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800c54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c54c:	b2db      	uxtb	r3, r3
 800c54e:	4619      	mov	r1, r3
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f00b feb3 	bl	80182bc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800c556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c558:	015a      	lsls	r2, r3, #5
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	4413      	add	r3, r2
 800c55e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c562:	461a      	mov	r2, r3
 800c564:	2302      	movs	r3, #2
 800c566:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	f003 0320 	and.w	r3, r3, #32
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d008      	beq.n	800c584 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800c572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c574:	015a      	lsls	r2, r3, #5
 800c576:	69fb      	ldr	r3, [r7, #28]
 800c578:	4413      	add	r3, r2
 800c57a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c57e:	461a      	mov	r2, r3
 800c580:	2320      	movs	r3, #32
 800c582:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d009      	beq.n	800c5a2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c590:	015a      	lsls	r2, r3, #5
 800c592:	69fb      	ldr	r3, [r7, #28]
 800c594:	4413      	add	r3, r2
 800c596:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c59a:	461a      	mov	r2, r3
 800c59c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c5a0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800c5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c5a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5aa:	085b      	lsrs	r3, r3, #1
 800c5ac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	f47f af62 	bne.w	800c47a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f005 ff32 	bl	8012424 <USB_ReadInterrupts>
 800c5c0:	4603      	mov	r3, r0
 800c5c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c5c6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800c5ca:	f040 80db 	bne.w	800c784 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f005 ff53 	bl	801247e <USB_ReadDevAllInEpInterrupt>
 800c5d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800c5da:	2300      	movs	r3, #0
 800c5dc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800c5de:	e0cd      	b.n	800c77c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800c5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5e2:	f003 0301 	and.w	r3, r3, #1
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	f000 80c2 	beq.w	800c770 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c5f2:	b2d2      	uxtb	r2, r2
 800c5f4:	4611      	mov	r1, r2
 800c5f6:	4618      	mov	r0, r3
 800c5f8:	f005 ff79 	bl	80124ee <USB_ReadDevInEPInterrupt>
 800c5fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800c5fe:	693b      	ldr	r3, [r7, #16]
 800c600:	f003 0301 	and.w	r3, r3, #1
 800c604:	2b00      	cmp	r3, #0
 800c606:	d057      	beq.n	800c6b8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c60a:	f003 030f 	and.w	r3, r3, #15
 800c60e:	2201      	movs	r2, #1
 800c610:	fa02 f303 	lsl.w	r3, r2, r3
 800c614:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c616:	69fb      	ldr	r3, [r7, #28]
 800c618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c61c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	43db      	mvns	r3, r3
 800c622:	69f9      	ldr	r1, [r7, #28]
 800c624:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c628:	4013      	ands	r3, r2
 800c62a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800c62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c62e:	015a      	lsls	r2, r3, #5
 800c630:	69fb      	ldr	r3, [r7, #28]
 800c632:	4413      	add	r3, r2
 800c634:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c638:	461a      	mov	r2, r3
 800c63a:	2301      	movs	r3, #1
 800c63c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	799b      	ldrb	r3, [r3, #6]
 800c642:	2b01      	cmp	r3, #1
 800c644:	d132      	bne.n	800c6ac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800c646:	6879      	ldr	r1, [r7, #4]
 800c648:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c64a:	4613      	mov	r3, r2
 800c64c:	00db      	lsls	r3, r3, #3
 800c64e:	4413      	add	r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	440b      	add	r3, r1
 800c654:	3320      	adds	r3, #32
 800c656:	6819      	ldr	r1, [r3, #0]
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c65c:	4613      	mov	r3, r2
 800c65e:	00db      	lsls	r3, r3, #3
 800c660:	4413      	add	r3, r2
 800c662:	009b      	lsls	r3, r3, #2
 800c664:	4403      	add	r3, r0
 800c666:	331c      	adds	r3, #28
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	4419      	add	r1, r3
 800c66c:	6878      	ldr	r0, [r7, #4]
 800c66e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c670:	4613      	mov	r3, r2
 800c672:	00db      	lsls	r3, r3, #3
 800c674:	4413      	add	r3, r2
 800c676:	009b      	lsls	r3, r3, #2
 800c678:	4403      	add	r3, r0
 800c67a:	3320      	adds	r3, #32
 800c67c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800c67e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c680:	2b00      	cmp	r3, #0
 800c682:	d113      	bne.n	800c6ac <HAL_PCD_IRQHandler+0x3a2>
 800c684:	6879      	ldr	r1, [r7, #4]
 800c686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c688:	4613      	mov	r3, r2
 800c68a:	00db      	lsls	r3, r3, #3
 800c68c:	4413      	add	r3, r2
 800c68e:	009b      	lsls	r3, r3, #2
 800c690:	440b      	add	r3, r1
 800c692:	3324      	adds	r3, #36	@ 0x24
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d108      	bne.n	800c6ac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6818      	ldr	r0, [r3, #0]
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c6a4:	461a      	mov	r2, r3
 800c6a6:	2101      	movs	r1, #1
 800c6a8:	f005 ff80 	bl	80125ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800c6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ae:	b2db      	uxtb	r3, r3
 800c6b0:	4619      	mov	r1, r3
 800c6b2:	6878      	ldr	r0, [r7, #4]
 800c6b4:	f00b fd7d 	bl	80181b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	f003 0308 	and.w	r3, r3, #8
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d008      	beq.n	800c6d4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c4:	015a      	lsls	r2, r3, #5
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6ce:	461a      	mov	r2, r3
 800c6d0:	2308      	movs	r3, #8
 800c6d2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800c6d4:	693b      	ldr	r3, [r7, #16]
 800c6d6:	f003 0310 	and.w	r3, r3, #16
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d008      	beq.n	800c6f0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800c6de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6e0:	015a      	lsls	r2, r3, #5
 800c6e2:	69fb      	ldr	r3, [r7, #28]
 800c6e4:	4413      	add	r3, r2
 800c6e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c6ea:	461a      	mov	r2, r3
 800c6ec:	2310      	movs	r3, #16
 800c6ee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800c6f0:	693b      	ldr	r3, [r7, #16]
 800c6f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d008      	beq.n	800c70c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800c6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6fc:	015a      	lsls	r2, r3, #5
 800c6fe:	69fb      	ldr	r3, [r7, #28]
 800c700:	4413      	add	r3, r2
 800c702:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c706:	461a      	mov	r2, r3
 800c708:	2340      	movs	r3, #64	@ 0x40
 800c70a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800c70c:	693b      	ldr	r3, [r7, #16]
 800c70e:	f003 0302 	and.w	r3, r3, #2
 800c712:	2b00      	cmp	r3, #0
 800c714:	d023      	beq.n	800c75e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800c716:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c718:	6a38      	ldr	r0, [r7, #32]
 800c71a:	f004 ff67 	bl	80115ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800c71e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c720:	4613      	mov	r3, r2
 800c722:	00db      	lsls	r3, r3, #3
 800c724:	4413      	add	r3, r2
 800c726:	009b      	lsls	r3, r3, #2
 800c728:	3310      	adds	r3, #16
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	4413      	add	r3, r2
 800c72e:	3304      	adds	r3, #4
 800c730:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	78db      	ldrb	r3, [r3, #3]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d108      	bne.n	800c74c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	2200      	movs	r2, #0
 800c73e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800c740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c742:	b2db      	uxtb	r3, r3
 800c744:	4619      	mov	r1, r3
 800c746:	6878      	ldr	r0, [r7, #4]
 800c748:	f00b fdca 	bl	80182e0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800c74c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c74e:	015a      	lsls	r2, r3, #5
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	4413      	add	r3, r2
 800c754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c758:	461a      	mov	r2, r3
 800c75a:	2302      	movs	r3, #2
 800c75c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c764:	2b00      	cmp	r3, #0
 800c766:	d003      	beq.n	800c770 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800c768:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c76a:	6878      	ldr	r0, [r7, #4]
 800c76c:	f000 fcbd 	bl	800d0ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800c770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c772:	3301      	adds	r3, #1
 800c774:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800c776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c778:	085b      	lsrs	r3, r3, #1
 800c77a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800c77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c77e:	2b00      	cmp	r3, #0
 800c780:	f47f af2e 	bne.w	800c5e0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	4618      	mov	r0, r3
 800c78a:	f005 fe4b 	bl	8012424 <USB_ReadInterrupts>
 800c78e:	4603      	mov	r3, r0
 800c790:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c794:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c798:	d122      	bne.n	800c7e0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7a0:	685b      	ldr	r3, [r3, #4]
 800c7a2:	69fa      	ldr	r2, [r7, #28]
 800c7a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c7a8:	f023 0301 	bic.w	r3, r3, #1
 800c7ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d108      	bne.n	800c7ca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800c7c0:	2100      	movs	r1, #0
 800c7c2:	6878      	ldr	r0, [r7, #4]
 800c7c4:	f000 fea4 	bl	800d510 <HAL_PCDEx_LPM_Callback>
 800c7c8:	e002      	b.n	800c7d0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f00b fd68 	bl	80182a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	681b      	ldr	r3, [r3, #0]
 800c7d4:	695a      	ldr	r2, [r3, #20]
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	681b      	ldr	r3, [r3, #0]
 800c7da:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800c7de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	f005 fe1d 	bl	8012424 <USB_ReadInterrupts>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c7f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c7f4:	d112      	bne.n	800c81c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7fc:	689b      	ldr	r3, [r3, #8]
 800c7fe:	f003 0301 	and.w	r3, r3, #1
 800c802:	2b01      	cmp	r3, #1
 800c804:	d102      	bne.n	800c80c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f00b fd24 	bl	8018254 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	695a      	ldr	r2, [r3, #20]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c81a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	4618      	mov	r0, r3
 800c822:	f005 fdff 	bl	8012424 <USB_ReadInterrupts>
 800c826:	4603      	mov	r3, r0
 800c828:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c82c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c830:	f040 80b7 	bne.w	800c9a2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c83a:	685b      	ldr	r3, [r3, #4]
 800c83c:	69fa      	ldr	r2, [r7, #28]
 800c83e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c842:	f023 0301 	bic.w	r3, r3, #1
 800c846:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	2110      	movs	r1, #16
 800c84e:	4618      	mov	r0, r3
 800c850:	f004 fecc 	bl	80115ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c854:	2300      	movs	r3, #0
 800c856:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c858:	e046      	b.n	800c8e8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c85a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c85c:	015a      	lsls	r2, r3, #5
 800c85e:	69fb      	ldr	r3, [r7, #28]
 800c860:	4413      	add	r3, r2
 800c862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c866:	461a      	mov	r2, r3
 800c868:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c86c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c870:	015a      	lsls	r2, r3, #5
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	4413      	add	r3, r2
 800c876:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c87e:	0151      	lsls	r1, r2, #5
 800c880:	69fa      	ldr	r2, [r7, #28]
 800c882:	440a      	add	r2, r1
 800c884:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c888:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c88c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c88e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c890:	015a      	lsls	r2, r3, #5
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	4413      	add	r3, r2
 800c896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c89a:	461a      	mov	r2, r3
 800c89c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c8a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8a4:	015a      	lsls	r2, r3, #5
 800c8a6:	69fb      	ldr	r3, [r7, #28]
 800c8a8:	4413      	add	r3, r2
 800c8aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8b2:	0151      	lsls	r1, r2, #5
 800c8b4:	69fa      	ldr	r2, [r7, #28]
 800c8b6:	440a      	add	r2, r1
 800c8b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c8bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c8c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c8c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8c4:	015a      	lsls	r2, r3, #5
 800c8c6:	69fb      	ldr	r3, [r7, #28]
 800c8c8:	4413      	add	r3, r2
 800c8ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c8d2:	0151      	lsls	r1, r2, #5
 800c8d4:	69fa      	ldr	r2, [r7, #28]
 800c8d6:	440a      	add	r2, r1
 800c8d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c8dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c8e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c8e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8e4:	3301      	adds	r3, #1
 800c8e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	791b      	ldrb	r3, [r3, #4]
 800c8ec:	461a      	mov	r2, r3
 800c8ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d3b2      	bcc.n	800c85a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c8f4:	69fb      	ldr	r3, [r7, #28]
 800c8f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c8fa:	69db      	ldr	r3, [r3, #28]
 800c8fc:	69fa      	ldr	r2, [r7, #28]
 800c8fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c902:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c906:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	7bdb      	ldrb	r3, [r3, #15]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d016      	beq.n	800c93e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c916:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c91a:	69fa      	ldr	r2, [r7, #28]
 800c91c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c920:	f043 030b 	orr.w	r3, r3, #11
 800c924:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c928:	69fb      	ldr	r3, [r7, #28]
 800c92a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c92e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c930:	69fa      	ldr	r2, [r7, #28]
 800c932:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c936:	f043 030b 	orr.w	r3, r3, #11
 800c93a:	6453      	str	r3, [r2, #68]	@ 0x44
 800c93c:	e015      	b.n	800c96a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c944:	695b      	ldr	r3, [r3, #20]
 800c946:	69fa      	ldr	r2, [r7, #28]
 800c948:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c94c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c950:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800c954:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c956:	69fb      	ldr	r3, [r7, #28]
 800c958:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	69fa      	ldr	r2, [r7, #28]
 800c960:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c964:	f043 030b 	orr.w	r3, r3, #11
 800c968:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	69fa      	ldr	r2, [r7, #28]
 800c974:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c978:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c97c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	6818      	ldr	r0, [r3, #0]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c98c:	461a      	mov	r2, r3
 800c98e:	f005 fe0d 	bl	80125ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	695a      	ldr	r2, [r3, #20]
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c9a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f005 fd3c 	bl	8012424 <USB_ReadInterrupts>
 800c9ac:	4603      	mov	r3, r0
 800c9ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c9b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c9b6:	d123      	bne.n	800ca00 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	4618      	mov	r0, r3
 800c9be:	f005 fdd2 	bl	8012566 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f004 fe89 	bl	80116de <USB_GetDevSpeed>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681c      	ldr	r4, [r3, #0]
 800c9d8:	f001 fa0a 	bl	800ddf0 <HAL_RCC_GetHCLKFreq>
 800c9dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	4620      	mov	r0, r4
 800c9e6:	f004 fb8d 	bl	8011104 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f00b fc09 	bl	8018202 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	695a      	ldr	r2, [r3, #20]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c9fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	4618      	mov	r0, r3
 800ca06:	f005 fd0d 	bl	8012424 <USB_ReadInterrupts>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	f003 0308 	and.w	r3, r3, #8
 800ca10:	2b08      	cmp	r3, #8
 800ca12:	d10a      	bne.n	800ca2a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f00b fbe6 	bl	80181e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	695a      	ldr	r2, [r3, #20]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f002 0208 	and.w	r2, r2, #8
 800ca28:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f005 fcf8 	bl	8012424 <USB_ReadInterrupts>
 800ca34:	4603      	mov	r3, r0
 800ca36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ca3a:	2b80      	cmp	r3, #128	@ 0x80
 800ca3c:	d123      	bne.n	800ca86 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800ca3e:	6a3b      	ldr	r3, [r7, #32]
 800ca40:	699b      	ldr	r3, [r3, #24]
 800ca42:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800ca46:	6a3b      	ldr	r3, [r7, #32]
 800ca48:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ca4a:	2301      	movs	r3, #1
 800ca4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca4e:	e014      	b.n	800ca7a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800ca50:	6879      	ldr	r1, [r7, #4]
 800ca52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca54:	4613      	mov	r3, r2
 800ca56:	00db      	lsls	r3, r3, #3
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800ca62:	781b      	ldrb	r3, [r3, #0]
 800ca64:	2b01      	cmp	r3, #1
 800ca66:	d105      	bne.n	800ca74 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800ca68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6a:	b2db      	uxtb	r3, r3
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	6878      	ldr	r0, [r7, #4]
 800ca70:	f000 fb0a 	bl	800d088 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ca74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca76:	3301      	adds	r3, #1
 800ca78:	627b      	str	r3, [r7, #36]	@ 0x24
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	791b      	ldrb	r3, [r3, #4]
 800ca7e:	461a      	mov	r2, r3
 800ca80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca82:	4293      	cmp	r3, r2
 800ca84:	d3e4      	bcc.n	800ca50 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f005 fcca 	bl	8012424 <USB_ReadInterrupts>
 800ca90:	4603      	mov	r3, r0
 800ca92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ca96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ca9a:	d13c      	bne.n	800cb16 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800ca9c:	2301      	movs	r3, #1
 800ca9e:	627b      	str	r3, [r7, #36]	@ 0x24
 800caa0:	e02b      	b.n	800cafa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800caa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa4:	015a      	lsls	r2, r3, #5
 800caa6:	69fb      	ldr	r3, [r7, #28]
 800caa8:	4413      	add	r3, r2
 800caaa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800cab2:	6879      	ldr	r1, [r7, #4]
 800cab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cab6:	4613      	mov	r3, r2
 800cab8:	00db      	lsls	r3, r3, #3
 800caba:	4413      	add	r3, r2
 800cabc:	009b      	lsls	r3, r3, #2
 800cabe:	440b      	add	r3, r1
 800cac0:	3318      	adds	r3, #24
 800cac2:	781b      	ldrb	r3, [r3, #0]
 800cac4:	2b01      	cmp	r3, #1
 800cac6:	d115      	bne.n	800caf4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800cac8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800caca:	2b00      	cmp	r3, #0
 800cacc:	da12      	bge.n	800caf4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800cace:	6879      	ldr	r1, [r7, #4]
 800cad0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cad2:	4613      	mov	r3, r2
 800cad4:	00db      	lsls	r3, r3, #3
 800cad6:	4413      	add	r3, r2
 800cad8:	009b      	lsls	r3, r3, #2
 800cada:	440b      	add	r3, r1
 800cadc:	3317      	adds	r3, #23
 800cade:	2201      	movs	r2, #1
 800cae0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800cae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cae4:	b2db      	uxtb	r3, r3
 800cae6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800caea:	b2db      	uxtb	r3, r3
 800caec:	4619      	mov	r1, r3
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 faca 	bl	800d088 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800caf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caf6:	3301      	adds	r3, #1
 800caf8:	627b      	str	r3, [r7, #36]	@ 0x24
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	791b      	ldrb	r3, [r3, #4]
 800cafe:	461a      	mov	r2, r3
 800cb00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb02:	4293      	cmp	r3, r2
 800cb04:	d3cd      	bcc.n	800caa2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	695a      	ldr	r2, [r3, #20]
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800cb14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	f005 fc82 	bl	8012424 <USB_ReadInterrupts>
 800cb20:	4603      	mov	r3, r0
 800cb22:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800cb26:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cb2a:	d156      	bne.n	800cbda <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb30:	e045      	b.n	800cbbe <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800cb32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb34:	015a      	lsls	r2, r3, #5
 800cb36:	69fb      	ldr	r3, [r7, #28]
 800cb38:	4413      	add	r3, r2
 800cb3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800cb42:	6879      	ldr	r1, [r7, #4]
 800cb44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb46:	4613      	mov	r3, r2
 800cb48:	00db      	lsls	r3, r3, #3
 800cb4a:	4413      	add	r3, r2
 800cb4c:	009b      	lsls	r3, r3, #2
 800cb4e:	440b      	add	r3, r1
 800cb50:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800cb54:	781b      	ldrb	r3, [r3, #0]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d12e      	bne.n	800cbb8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800cb5a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	da2b      	bge.n	800cbb8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800cb6c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d121      	bne.n	800cbb8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800cb74:	6879      	ldr	r1, [r7, #4]
 800cb76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb78:	4613      	mov	r3, r2
 800cb7a:	00db      	lsls	r3, r3, #3
 800cb7c:	4413      	add	r3, r2
 800cb7e:	009b      	lsls	r3, r3, #2
 800cb80:	440b      	add	r3, r1
 800cb82:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800cb86:	2201      	movs	r2, #1
 800cb88:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800cb8a:	6a3b      	ldr	r3, [r7, #32]
 800cb8c:	699b      	ldr	r3, [r3, #24]
 800cb8e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800cb92:	6a3b      	ldr	r3, [r7, #32]
 800cb94:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800cb96:	6a3b      	ldr	r3, [r7, #32]
 800cb98:	695b      	ldr	r3, [r3, #20]
 800cb9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10a      	bne.n	800cbb8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800cba2:	69fb      	ldr	r3, [r7, #28]
 800cba4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800cba8:	685b      	ldr	r3, [r3, #4]
 800cbaa:	69fa      	ldr	r2, [r7, #28]
 800cbac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800cbb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800cbb4:	6053      	str	r3, [r2, #4]
            break;
 800cbb6:	e008      	b.n	800cbca <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbba:	3301      	adds	r3, #1
 800cbbc:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	791b      	ldrb	r3, [r3, #4]
 800cbc2:	461a      	mov	r2, r3
 800cbc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbc6:	4293      	cmp	r3, r2
 800cbc8:	d3b3      	bcc.n	800cb32 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	695a      	ldr	r2, [r3, #20]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800cbd8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	4618      	mov	r0, r3
 800cbe0:	f005 fc20 	bl	8012424 <USB_ReadInterrupts>
 800cbe4:	4603      	mov	r3, r0
 800cbe6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800cbea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cbee:	d10a      	bne.n	800cc06 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f00b fb87 	bl	8018304 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	695a      	ldr	r2, [r3, #20]
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800cc04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	f005 fc0a 	bl	8012424 <USB_ReadInterrupts>
 800cc10:	4603      	mov	r3, r0
 800cc12:	f003 0304 	and.w	r3, r3, #4
 800cc16:	2b04      	cmp	r3, #4
 800cc18:	d115      	bne.n	800cc46 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	681b      	ldr	r3, [r3, #0]
 800cc1e:	685b      	ldr	r3, [r3, #4]
 800cc20:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800cc22:	69bb      	ldr	r3, [r7, #24]
 800cc24:	f003 0304 	and.w	r3, r3, #4
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d002      	beq.n	800cc32 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f00b fb77 	bl	8018320 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	6859      	ldr	r1, [r3, #4]
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	69ba      	ldr	r2, [r7, #24]
 800cc3e:	430a      	orrs	r2, r1
 800cc40:	605a      	str	r2, [r3, #4]
 800cc42:	e000      	b.n	800cc46 <HAL_PCD_IRQHandler+0x93c>
      return;
 800cc44:	bf00      	nop
    }
  }
}
 800cc46:	3734      	adds	r7, #52	@ 0x34
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd90      	pop	{r4, r7, pc}

0800cc4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
 800cc54:	460b      	mov	r3, r1
 800cc56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cc5e:	2b01      	cmp	r3, #1
 800cc60:	d101      	bne.n	800cc66 <HAL_PCD_SetAddress+0x1a>
 800cc62:	2302      	movs	r3, #2
 800cc64:	e012      	b.n	800cc8c <HAL_PCD_SetAddress+0x40>
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2201      	movs	r2, #1
 800cc6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	78fa      	ldrb	r2, [r7, #3]
 800cc72:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	78fa      	ldrb	r2, [r7, #3]
 800cc7a:	4611      	mov	r1, r2
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	f005 fb69 	bl	8012354 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	2200      	movs	r2, #0
 800cc86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	3708      	adds	r7, #8
 800cc90:	46bd      	mov	sp, r7
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	4608      	mov	r0, r1
 800cc9e:	4611      	mov	r1, r2
 800cca0:	461a      	mov	r2, r3
 800cca2:	4603      	mov	r3, r0
 800cca4:	70fb      	strb	r3, [r7, #3]
 800cca6:	460b      	mov	r3, r1
 800cca8:	803b      	strh	r3, [r7, #0]
 800ccaa:	4613      	mov	r3, r2
 800ccac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800ccae:	2300      	movs	r3, #0
 800ccb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ccb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	da0f      	bge.n	800ccda <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ccba:	78fb      	ldrb	r3, [r7, #3]
 800ccbc:	f003 020f 	and.w	r2, r3, #15
 800ccc0:	4613      	mov	r3, r2
 800ccc2:	00db      	lsls	r3, r3, #3
 800ccc4:	4413      	add	r3, r2
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	3310      	adds	r3, #16
 800ccca:	687a      	ldr	r2, [r7, #4]
 800cccc:	4413      	add	r3, r2
 800ccce:	3304      	adds	r3, #4
 800ccd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2201      	movs	r2, #1
 800ccd6:	705a      	strb	r2, [r3, #1]
 800ccd8:	e00f      	b.n	800ccfa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ccda:	78fb      	ldrb	r3, [r7, #3]
 800ccdc:	f003 020f 	and.w	r2, r3, #15
 800cce0:	4613      	mov	r3, r2
 800cce2:	00db      	lsls	r3, r3, #3
 800cce4:	4413      	add	r3, r2
 800cce6:	009b      	lsls	r3, r3, #2
 800cce8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ccec:	687a      	ldr	r2, [r7, #4]
 800ccee:	4413      	add	r3, r2
 800ccf0:	3304      	adds	r3, #4
 800ccf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	2200      	movs	r2, #0
 800ccf8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ccfa:	78fb      	ldrb	r3, [r7, #3]
 800ccfc:	f003 030f 	and.w	r3, r3, #15
 800cd00:	b2da      	uxtb	r2, r3
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800cd06:	883b      	ldrh	r3, [r7, #0]
 800cd08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	78ba      	ldrb	r2, [r7, #2]
 800cd14:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	785b      	ldrb	r3, [r3, #1]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d004      	beq.n	800cd28 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	781b      	ldrb	r3, [r3, #0]
 800cd22:	461a      	mov	r2, r3
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800cd28:	78bb      	ldrb	r3, [r7, #2]
 800cd2a:	2b02      	cmp	r3, #2
 800cd2c:	d102      	bne.n	800cd34 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	2200      	movs	r2, #0
 800cd32:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d101      	bne.n	800cd42 <HAL_PCD_EP_Open+0xae>
 800cd3e:	2302      	movs	r3, #2
 800cd40:	e00e      	b.n	800cd60 <HAL_PCD_EP_Open+0xcc>
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2201      	movs	r2, #1
 800cd46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	68f9      	ldr	r1, [r7, #12]
 800cd50:	4618      	mov	r0, r3
 800cd52:	f004 fce9 	bl	8011728 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2200      	movs	r2, #0
 800cd5a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800cd5e:	7afb      	ldrb	r3, [r7, #11]
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	3710      	adds	r7, #16
 800cd64:	46bd      	mov	sp, r7
 800cd66:	bd80      	pop	{r7, pc}

0800cd68 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
 800cd6e:	6078      	str	r0, [r7, #4]
 800cd70:	460b      	mov	r3, r1
 800cd72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cd74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	da0f      	bge.n	800cd9c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cd7c:	78fb      	ldrb	r3, [r7, #3]
 800cd7e:	f003 020f 	and.w	r2, r3, #15
 800cd82:	4613      	mov	r3, r2
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	4413      	add	r3, r2
 800cd88:	009b      	lsls	r3, r3, #2
 800cd8a:	3310      	adds	r3, #16
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	4413      	add	r3, r2
 800cd90:	3304      	adds	r3, #4
 800cd92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cd94:	68fb      	ldr	r3, [r7, #12]
 800cd96:	2201      	movs	r2, #1
 800cd98:	705a      	strb	r2, [r3, #1]
 800cd9a:	e00f      	b.n	800cdbc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800cd9c:	78fb      	ldrb	r3, [r7, #3]
 800cd9e:	f003 020f 	and.w	r2, r3, #15
 800cda2:	4613      	mov	r3, r2
 800cda4:	00db      	lsls	r3, r3, #3
 800cda6:	4413      	add	r3, r2
 800cda8:	009b      	lsls	r3, r3, #2
 800cdaa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	4413      	add	r3, r2
 800cdb2:	3304      	adds	r3, #4
 800cdb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	2200      	movs	r2, #0
 800cdba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800cdbc:	78fb      	ldrb	r3, [r7, #3]
 800cdbe:	f003 030f 	and.w	r3, r3, #15
 800cdc2:	b2da      	uxtb	r2, r3
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d101      	bne.n	800cdd6 <HAL_PCD_EP_Close+0x6e>
 800cdd2:	2302      	movs	r3, #2
 800cdd4:	e00e      	b.n	800cdf4 <HAL_PCD_EP_Close+0x8c>
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2201      	movs	r2, #1
 800cdda:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	68f9      	ldr	r1, [r7, #12]
 800cde4:	4618      	mov	r0, r3
 800cde6:	f004 fd27 	bl	8011838 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	2200      	movs	r2, #0
 800cdee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	3710      	adds	r7, #16
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	bd80      	pop	{r7, pc}

0800cdfc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b086      	sub	sp, #24
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	607a      	str	r2, [r7, #4]
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	460b      	mov	r3, r1
 800ce0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ce0c:	7afb      	ldrb	r3, [r7, #11]
 800ce0e:	f003 020f 	and.w	r2, r3, #15
 800ce12:	4613      	mov	r3, r2
 800ce14:	00db      	lsls	r3, r3, #3
 800ce16:	4413      	add	r3, r2
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800ce1e:	68fa      	ldr	r2, [r7, #12]
 800ce20:	4413      	add	r3, r2
 800ce22:	3304      	adds	r3, #4
 800ce24:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	687a      	ldr	r2, [r7, #4]
 800ce2a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	683a      	ldr	r2, [r7, #0]
 800ce30:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	2200      	movs	r2, #0
 800ce36:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ce3e:	7afb      	ldrb	r3, [r7, #11]
 800ce40:	f003 030f 	and.w	r3, r3, #15
 800ce44:	b2da      	uxtb	r2, r3
 800ce46:	697b      	ldr	r3, [r7, #20]
 800ce48:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	799b      	ldrb	r3, [r3, #6]
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d102      	bne.n	800ce58 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ce52:	687a      	ldr	r2, [r7, #4]
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6818      	ldr	r0, [r3, #0]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	799b      	ldrb	r3, [r3, #6]
 800ce60:	461a      	mov	r2, r3
 800ce62:	6979      	ldr	r1, [r7, #20]
 800ce64:	f004 fdc4 	bl	80119f0 <USB_EPStartXfer>

  return HAL_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3718      	adds	r7, #24
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	bd80      	pop	{r7, pc}

0800ce72 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800ce72:	b480      	push	{r7}
 800ce74:	b083      	sub	sp, #12
 800ce76:	af00      	add	r7, sp, #0
 800ce78:	6078      	str	r0, [r7, #4]
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800ce7e:	78fb      	ldrb	r3, [r7, #3]
 800ce80:	f003 020f 	and.w	r2, r3, #15
 800ce84:	6879      	ldr	r1, [r7, #4]
 800ce86:	4613      	mov	r3, r2
 800ce88:	00db      	lsls	r3, r3, #3
 800ce8a:	4413      	add	r3, r2
 800ce8c:	009b      	lsls	r3, r3, #2
 800ce8e:	440b      	add	r3, r1
 800ce90:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800ce94:	681b      	ldr	r3, [r3, #0]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	370c      	adds	r7, #12
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cea0:	4770      	bx	lr

0800cea2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b086      	sub	sp, #24
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	60f8      	str	r0, [r7, #12]
 800ceaa:	607a      	str	r2, [r7, #4]
 800ceac:	603b      	str	r3, [r7, #0]
 800ceae:	460b      	mov	r3, r1
 800ceb0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ceb2:	7afb      	ldrb	r3, [r7, #11]
 800ceb4:	f003 020f 	and.w	r2, r3, #15
 800ceb8:	4613      	mov	r3, r2
 800ceba:	00db      	lsls	r3, r3, #3
 800cebc:	4413      	add	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	3310      	adds	r3, #16
 800cec2:	68fa      	ldr	r2, [r7, #12]
 800cec4:	4413      	add	r3, r2
 800cec6:	3304      	adds	r3, #4
 800cec8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ceca:	697b      	ldr	r3, [r7, #20]
 800cecc:	687a      	ldr	r2, [r7, #4]
 800cece:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ced0:	697b      	ldr	r3, [r7, #20]
 800ced2:	683a      	ldr	r2, [r7, #0]
 800ced4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ced6:	697b      	ldr	r3, [r7, #20]
 800ced8:	2200      	movs	r2, #0
 800ceda:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800cedc:	697b      	ldr	r3, [r7, #20]
 800cede:	2201      	movs	r2, #1
 800cee0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cee2:	7afb      	ldrb	r3, [r7, #11]
 800cee4:	f003 030f 	and.w	r3, r3, #15
 800cee8:	b2da      	uxtb	r2, r3
 800ceea:	697b      	ldr	r3, [r7, #20]
 800ceec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ceee:	68fb      	ldr	r3, [r7, #12]
 800cef0:	799b      	ldrb	r3, [r3, #6]
 800cef2:	2b01      	cmp	r3, #1
 800cef4:	d102      	bne.n	800cefc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800cef6:	687a      	ldr	r2, [r7, #4]
 800cef8:	697b      	ldr	r3, [r7, #20]
 800cefa:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	6818      	ldr	r0, [r3, #0]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	799b      	ldrb	r3, [r3, #6]
 800cf04:	461a      	mov	r2, r3
 800cf06:	6979      	ldr	r1, [r7, #20]
 800cf08:	f004 fd72 	bl	80119f0 <USB_EPStartXfer>

  return HAL_OK;
 800cf0c:	2300      	movs	r3, #0
}
 800cf0e:	4618      	mov	r0, r3
 800cf10:	3718      	adds	r7, #24
 800cf12:	46bd      	mov	sp, r7
 800cf14:	bd80      	pop	{r7, pc}

0800cf16 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cf16:	b580      	push	{r7, lr}
 800cf18:	b084      	sub	sp, #16
 800cf1a:	af00      	add	r7, sp, #0
 800cf1c:	6078      	str	r0, [r7, #4]
 800cf1e:	460b      	mov	r3, r1
 800cf20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800cf22:	78fb      	ldrb	r3, [r7, #3]
 800cf24:	f003 030f 	and.w	r3, r3, #15
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	7912      	ldrb	r2, [r2, #4]
 800cf2c:	4293      	cmp	r3, r2
 800cf2e:	d901      	bls.n	800cf34 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800cf30:	2301      	movs	r3, #1
 800cf32:	e04f      	b.n	800cfd4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cf34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	da0f      	bge.n	800cf5c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cf3c:	78fb      	ldrb	r3, [r7, #3]
 800cf3e:	f003 020f 	and.w	r2, r3, #15
 800cf42:	4613      	mov	r3, r2
 800cf44:	00db      	lsls	r3, r3, #3
 800cf46:	4413      	add	r3, r2
 800cf48:	009b      	lsls	r3, r3, #2
 800cf4a:	3310      	adds	r3, #16
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	4413      	add	r3, r2
 800cf50:	3304      	adds	r3, #4
 800cf52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2201      	movs	r2, #1
 800cf58:	705a      	strb	r2, [r3, #1]
 800cf5a:	e00d      	b.n	800cf78 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800cf5c:	78fa      	ldrb	r2, [r7, #3]
 800cf5e:	4613      	mov	r3, r2
 800cf60:	00db      	lsls	r3, r3, #3
 800cf62:	4413      	add	r3, r2
 800cf64:	009b      	lsls	r3, r3, #2
 800cf66:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	4413      	add	r3, r2
 800cf6e:	3304      	adds	r3, #4
 800cf70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	2200      	movs	r2, #0
 800cf76:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	2201      	movs	r2, #1
 800cf7c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800cf7e:	78fb      	ldrb	r3, [r7, #3]
 800cf80:	f003 030f 	and.w	r3, r3, #15
 800cf84:	b2da      	uxtb	r2, r3
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800cf90:	2b01      	cmp	r3, #1
 800cf92:	d101      	bne.n	800cf98 <HAL_PCD_EP_SetStall+0x82>
 800cf94:	2302      	movs	r3, #2
 800cf96:	e01d      	b.n	800cfd4 <HAL_PCD_EP_SetStall+0xbe>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	68f9      	ldr	r1, [r7, #12]
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	f005 f900 	bl	80121ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800cfac:	78fb      	ldrb	r3, [r7, #3]
 800cfae:	f003 030f 	and.w	r3, r3, #15
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d109      	bne.n	800cfca <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6818      	ldr	r0, [r3, #0]
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	7999      	ldrb	r1, [r3, #6]
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	f005 faf1 	bl	80125ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2200      	movs	r2, #0
 800cfce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800cfd2:	2300      	movs	r3, #0
}
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	3710      	adds	r7, #16
 800cfd8:	46bd      	mov	sp, r7
 800cfda:	bd80      	pop	{r7, pc}

0800cfdc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800cfe8:	78fb      	ldrb	r3, [r7, #3]
 800cfea:	f003 030f 	and.w	r3, r3, #15
 800cfee:	687a      	ldr	r2, [r7, #4]
 800cff0:	7912      	ldrb	r2, [r2, #4]
 800cff2:	4293      	cmp	r3, r2
 800cff4:	d901      	bls.n	800cffa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800cff6:	2301      	movs	r3, #1
 800cff8:	e042      	b.n	800d080 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800cffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	da0f      	bge.n	800d022 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d002:	78fb      	ldrb	r3, [r7, #3]
 800d004:	f003 020f 	and.w	r2, r3, #15
 800d008:	4613      	mov	r3, r2
 800d00a:	00db      	lsls	r3, r3, #3
 800d00c:	4413      	add	r3, r2
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	3310      	adds	r3, #16
 800d012:	687a      	ldr	r2, [r7, #4]
 800d014:	4413      	add	r3, r2
 800d016:	3304      	adds	r3, #4
 800d018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2201      	movs	r2, #1
 800d01e:	705a      	strb	r2, [r3, #1]
 800d020:	e00f      	b.n	800d042 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d022:	78fb      	ldrb	r3, [r7, #3]
 800d024:	f003 020f 	and.w	r2, r3, #15
 800d028:	4613      	mov	r3, r2
 800d02a:	00db      	lsls	r3, r3, #3
 800d02c:	4413      	add	r3, r2
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d034:	687a      	ldr	r2, [r7, #4]
 800d036:	4413      	add	r3, r2
 800d038:	3304      	adds	r3, #4
 800d03a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	2200      	movs	r2, #0
 800d040:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	2200      	movs	r2, #0
 800d046:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d048:	78fb      	ldrb	r3, [r7, #3]
 800d04a:	f003 030f 	and.w	r3, r3, #15
 800d04e:	b2da      	uxtb	r2, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d101      	bne.n	800d062 <HAL_PCD_EP_ClrStall+0x86>
 800d05e:	2302      	movs	r3, #2
 800d060:	e00e      	b.n	800d080 <HAL_PCD_EP_ClrStall+0xa4>
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2201      	movs	r2, #1
 800d066:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	68f9      	ldr	r1, [r7, #12]
 800d070:	4618      	mov	r0, r3
 800d072:	f005 f909 	bl	8012288 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	2200      	movs	r2, #0
 800d07a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800d07e:	2300      	movs	r3, #0
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	460b      	mov	r3, r1
 800d092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800d094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	da0c      	bge.n	800d0b6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d09c:	78fb      	ldrb	r3, [r7, #3]
 800d09e:	f003 020f 	and.w	r2, r3, #15
 800d0a2:	4613      	mov	r3, r2
 800d0a4:	00db      	lsls	r3, r3, #3
 800d0a6:	4413      	add	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	3310      	adds	r3, #16
 800d0ac:	687a      	ldr	r2, [r7, #4]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	3304      	adds	r3, #4
 800d0b2:	60fb      	str	r3, [r7, #12]
 800d0b4:	e00c      	b.n	800d0d0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d0b6:	78fb      	ldrb	r3, [r7, #3]
 800d0b8:	f003 020f 	and.w	r2, r3, #15
 800d0bc:	4613      	mov	r3, r2
 800d0be:	00db      	lsls	r3, r3, #3
 800d0c0:	4413      	add	r3, r2
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d0c8:	687a      	ldr	r2, [r7, #4]
 800d0ca:	4413      	add	r3, r2
 800d0cc:	3304      	adds	r3, #4
 800d0ce:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	68f9      	ldr	r1, [r7, #12]
 800d0d6:	4618      	mov	r0, r3
 800d0d8:	f004 ff28 	bl	8011f2c <USB_EPStopXfer>
 800d0dc:	4603      	mov	r3, r0
 800d0de:	72fb      	strb	r3, [r7, #11]

  return ret;
 800d0e0:	7afb      	ldrb	r3, [r7, #11]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}

0800d0ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d0ea:	b580      	push	{r7, lr}
 800d0ec:	b08a      	sub	sp, #40	@ 0x28
 800d0ee:	af02      	add	r7, sp, #8
 800d0f0:	6078      	str	r0, [r7, #4]
 800d0f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800d0fe:	683a      	ldr	r2, [r7, #0]
 800d100:	4613      	mov	r3, r2
 800d102:	00db      	lsls	r3, r3, #3
 800d104:	4413      	add	r3, r2
 800d106:	009b      	lsls	r3, r3, #2
 800d108:	3310      	adds	r3, #16
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	4413      	add	r3, r2
 800d10e:	3304      	adds	r3, #4
 800d110:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	695a      	ldr	r2, [r3, #20]
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	691b      	ldr	r3, [r3, #16]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d901      	bls.n	800d122 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800d11e:	2301      	movs	r3, #1
 800d120:	e06b      	b.n	800d1fa <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	691a      	ldr	r2, [r3, #16]
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	695b      	ldr	r3, [r3, #20]
 800d12a:	1ad3      	subs	r3, r2, r3
 800d12c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	689b      	ldr	r3, [r3, #8]
 800d132:	69fa      	ldr	r2, [r7, #28]
 800d134:	429a      	cmp	r2, r3
 800d136:	d902      	bls.n	800d13e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800d13e:	69fb      	ldr	r3, [r7, #28]
 800d140:	3303      	adds	r3, #3
 800d142:	089b      	lsrs	r3, r3, #2
 800d144:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d146:	e02a      	b.n	800d19e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	691a      	ldr	r2, [r3, #16]
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	695b      	ldr	r3, [r3, #20]
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	689b      	ldr	r3, [r3, #8]
 800d158:	69fa      	ldr	r2, [r7, #28]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d902      	bls.n	800d164 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	3303      	adds	r3, #3
 800d168:	089b      	lsrs	r3, r3, #2
 800d16a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	68d9      	ldr	r1, [r3, #12]
 800d170:	683b      	ldr	r3, [r7, #0]
 800d172:	b2da      	uxtb	r2, r3
 800d174:	69fb      	ldr	r3, [r7, #28]
 800d176:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800d17c:	9300      	str	r3, [sp, #0]
 800d17e:	4603      	mov	r3, r0
 800d180:	6978      	ldr	r0, [r7, #20]
 800d182:	f004 ff7d 	bl	8012080 <USB_WritePacket>

    ep->xfer_buff  += len;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	68da      	ldr	r2, [r3, #12]
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	441a      	add	r2, r3
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	695a      	ldr	r2, [r3, #20]
 800d196:	69fb      	ldr	r3, [r7, #28]
 800d198:	441a      	add	r2, r3
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	015a      	lsls	r2, r3, #5
 800d1a2:	693b      	ldr	r3, [r7, #16]
 800d1a4:	4413      	add	r3, r2
 800d1a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800d1aa:	699b      	ldr	r3, [r3, #24]
 800d1ac:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d1ae:	69ba      	ldr	r2, [r7, #24]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d809      	bhi.n	800d1c8 <PCD_WriteEmptyTxFifo+0xde>
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	695a      	ldr	r2, [r3, #20]
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d203      	bcs.n	800d1c8 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	691b      	ldr	r3, [r3, #16]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d1bf      	bne.n	800d148 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	691a      	ldr	r2, [r3, #16]
 800d1cc:	68fb      	ldr	r3, [r7, #12]
 800d1ce:	695b      	ldr	r3, [r3, #20]
 800d1d0:	429a      	cmp	r2, r3
 800d1d2:	d811      	bhi.n	800d1f8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	f003 030f 	and.w	r3, r3, #15
 800d1da:	2201      	movs	r2, #1
 800d1dc:	fa02 f303 	lsl.w	r3, r2, r3
 800d1e0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800d1e2:	693b      	ldr	r3, [r7, #16]
 800d1e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800d1e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	43db      	mvns	r3, r3
 800d1ee:	6939      	ldr	r1, [r7, #16]
 800d1f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800d1f4:	4013      	ands	r3, r2
 800d1f6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3720      	adds	r7, #32
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}
	...

0800d204 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b088      	sub	sp, #32
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d214:	69fb      	ldr	r3, [r7, #28]
 800d216:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d218:	69fb      	ldr	r3, [r7, #28]
 800d21a:	333c      	adds	r3, #60	@ 0x3c
 800d21c:	3304      	adds	r3, #4
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	015a      	lsls	r2, r3, #5
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	4413      	add	r3, r2
 800d22a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d22e:	689b      	ldr	r3, [r3, #8]
 800d230:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	799b      	ldrb	r3, [r3, #6]
 800d236:	2b01      	cmp	r3, #1
 800d238:	d17b      	bne.n	800d332 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800d23a:	693b      	ldr	r3, [r7, #16]
 800d23c:	f003 0308 	and.w	r3, r3, #8
 800d240:	2b00      	cmp	r3, #0
 800d242:	d015      	beq.n	800d270 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	4a61      	ldr	r2, [pc, #388]	@ (800d3cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d248:	4293      	cmp	r3, r2
 800d24a:	f240 80b9 	bls.w	800d3c0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d24e:	693b      	ldr	r3, [r7, #16]
 800d250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d254:	2b00      	cmp	r3, #0
 800d256:	f000 80b3 	beq.w	800d3c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d25a:	683b      	ldr	r3, [r7, #0]
 800d25c:	015a      	lsls	r2, r3, #5
 800d25e:	69bb      	ldr	r3, [r7, #24]
 800d260:	4413      	add	r3, r2
 800d262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d266:	461a      	mov	r2, r3
 800d268:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d26c:	6093      	str	r3, [r2, #8]
 800d26e:	e0a7      	b.n	800d3c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800d270:	693b      	ldr	r3, [r7, #16]
 800d272:	f003 0320 	and.w	r3, r3, #32
 800d276:	2b00      	cmp	r3, #0
 800d278:	d009      	beq.n	800d28e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d27a:	683b      	ldr	r3, [r7, #0]
 800d27c:	015a      	lsls	r2, r3, #5
 800d27e:	69bb      	ldr	r3, [r7, #24]
 800d280:	4413      	add	r3, r2
 800d282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d286:	461a      	mov	r2, r3
 800d288:	2320      	movs	r3, #32
 800d28a:	6093      	str	r3, [r2, #8]
 800d28c:	e098      	b.n	800d3c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800d294:	2b00      	cmp	r3, #0
 800d296:	f040 8093 	bne.w	800d3c0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	4a4b      	ldr	r2, [pc, #300]	@ (800d3cc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d90f      	bls.n	800d2c2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d00a      	beq.n	800d2c2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d2ac:	683b      	ldr	r3, [r7, #0]
 800d2ae:	015a      	lsls	r2, r3, #5
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	4413      	add	r3, r2
 800d2b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2b8:	461a      	mov	r2, r3
 800d2ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d2be:	6093      	str	r3, [r2, #8]
 800d2c0:	e07e      	b.n	800d3c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	00db      	lsls	r3, r3, #3
 800d2c8:	4413      	add	r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	4413      	add	r3, r2
 800d2d4:	3304      	adds	r3, #4
 800d2d6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	6a1a      	ldr	r2, [r3, #32]
 800d2dc:	683b      	ldr	r3, [r7, #0]
 800d2de:	0159      	lsls	r1, r3, #5
 800d2e0:	69bb      	ldr	r3, [r7, #24]
 800d2e2:	440b      	add	r3, r1
 800d2e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2ee:	1ad2      	subs	r2, r2, r3
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800d2f4:	683b      	ldr	r3, [r7, #0]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d114      	bne.n	800d324 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	691b      	ldr	r3, [r3, #16]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d109      	bne.n	800d316 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	6818      	ldr	r0, [r3, #0]
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d30c:	461a      	mov	r2, r3
 800d30e:	2101      	movs	r1, #1
 800d310:	f005 f94c 	bl	80125ac <USB_EP0_OutStart>
 800d314:	e006      	b.n	800d324 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	68da      	ldr	r2, [r3, #12]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	695b      	ldr	r3, [r3, #20]
 800d31e:	441a      	add	r2, r3
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	b2db      	uxtb	r3, r3
 800d328:	4619      	mov	r1, r3
 800d32a:	6878      	ldr	r0, [r7, #4]
 800d32c:	f00a ff26 	bl	801817c <HAL_PCD_DataOutStageCallback>
 800d330:	e046      	b.n	800d3c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	4a26      	ldr	r2, [pc, #152]	@ (800d3d0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800d336:	4293      	cmp	r3, r2
 800d338:	d124      	bne.n	800d384 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d340:	2b00      	cmp	r3, #0
 800d342:	d00a      	beq.n	800d35a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	015a      	lsls	r2, r3, #5
 800d348:	69bb      	ldr	r3, [r7, #24]
 800d34a:	4413      	add	r3, r2
 800d34c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d350:	461a      	mov	r2, r3
 800d352:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d356:	6093      	str	r3, [r2, #8]
 800d358:	e032      	b.n	800d3c0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800d35a:	693b      	ldr	r3, [r7, #16]
 800d35c:	f003 0320 	and.w	r3, r3, #32
 800d360:	2b00      	cmp	r3, #0
 800d362:	d008      	beq.n	800d376 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	015a      	lsls	r2, r3, #5
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	4413      	add	r3, r2
 800d36c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d370:	461a      	mov	r2, r3
 800d372:	2320      	movs	r3, #32
 800d374:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d376:	683b      	ldr	r3, [r7, #0]
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	4619      	mov	r1, r3
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f00a fefd 	bl	801817c <HAL_PCD_DataOutStageCallback>
 800d382:	e01d      	b.n	800d3c0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d114      	bne.n	800d3b4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800d38a:	6879      	ldr	r1, [r7, #4]
 800d38c:	683a      	ldr	r2, [r7, #0]
 800d38e:	4613      	mov	r3, r2
 800d390:	00db      	lsls	r3, r3, #3
 800d392:	4413      	add	r3, r2
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	440b      	add	r3, r1
 800d398:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d108      	bne.n	800d3b4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	6818      	ldr	r0, [r3, #0]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d3ac:	461a      	mov	r2, r3
 800d3ae:	2100      	movs	r1, #0
 800d3b0:	f005 f8fc 	bl	80125ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	b2db      	uxtb	r3, r3
 800d3b8:	4619      	mov	r1, r3
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f00a fede 	bl	801817c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800d3c0:	2300      	movs	r3, #0
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3720      	adds	r7, #32
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	4f54300a 	.word	0x4f54300a
 800d3d0:	4f54310a 	.word	0x4f54310a

0800d3d4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b086      	sub	sp, #24
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	681b      	ldr	r3, [r3, #0]
 800d3e2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3e4:	697b      	ldr	r3, [r7, #20]
 800d3e6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	333c      	adds	r3, #60	@ 0x3c
 800d3ec:	3304      	adds	r3, #4
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	015a      	lsls	r2, r3, #5
 800d3f6:	693b      	ldr	r3, [r7, #16]
 800d3f8:	4413      	add	r3, r2
 800d3fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	4a15      	ldr	r2, [pc, #84]	@ (800d45c <PCD_EP_OutSetupPacket_int+0x88>)
 800d406:	4293      	cmp	r3, r2
 800d408:	d90e      	bls.n	800d428 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800d410:	2b00      	cmp	r3, #0
 800d412:	d009      	beq.n	800d428 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	015a      	lsls	r2, r3, #5
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	4413      	add	r3, r2
 800d41c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800d420:	461a      	mov	r2, r3
 800d422:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d426:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800d428:	6878      	ldr	r0, [r7, #4]
 800d42a:	f00a fe95 	bl	8018158 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	4a0a      	ldr	r2, [pc, #40]	@ (800d45c <PCD_EP_OutSetupPacket_int+0x88>)
 800d432:	4293      	cmp	r3, r2
 800d434:	d90c      	bls.n	800d450 <PCD_EP_OutSetupPacket_int+0x7c>
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	799b      	ldrb	r3, [r3, #6]
 800d43a:	2b01      	cmp	r3, #1
 800d43c:	d108      	bne.n	800d450 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	6818      	ldr	r0, [r3, #0]
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d448:	461a      	mov	r2, r3
 800d44a:	2101      	movs	r1, #1
 800d44c:	f005 f8ae 	bl	80125ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800d450:	2300      	movs	r3, #0
}
 800d452:	4618      	mov	r0, r3
 800d454:	3718      	adds	r7, #24
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	4f54300a 	.word	0x4f54300a

0800d460 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800d460:	b480      	push	{r7}
 800d462:	b085      	sub	sp, #20
 800d464:	af00      	add	r7, sp, #0
 800d466:	6078      	str	r0, [r7, #4]
 800d468:	460b      	mov	r3, r1
 800d46a:	70fb      	strb	r3, [r7, #3]
 800d46c:	4613      	mov	r3, r2
 800d46e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d476:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800d478:	78fb      	ldrb	r3, [r7, #3]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d107      	bne.n	800d48e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800d47e:	883b      	ldrh	r3, [r7, #0]
 800d480:	0419      	lsls	r1, r3, #16
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	430a      	orrs	r2, r1
 800d48a:	629a      	str	r2, [r3, #40]	@ 0x28
 800d48c:	e028      	b.n	800d4e0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d494:	0c1b      	lsrs	r3, r3, #16
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	4413      	add	r3, r2
 800d49a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d49c:	2300      	movs	r3, #0
 800d49e:	73fb      	strb	r3, [r7, #15]
 800d4a0:	e00d      	b.n	800d4be <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681a      	ldr	r2, [r3, #0]
 800d4a6:	7bfb      	ldrb	r3, [r7, #15]
 800d4a8:	3340      	adds	r3, #64	@ 0x40
 800d4aa:	009b      	lsls	r3, r3, #2
 800d4ac:	4413      	add	r3, r2
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	0c1b      	lsrs	r3, r3, #16
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	4413      	add	r3, r2
 800d4b6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800d4b8:	7bfb      	ldrb	r3, [r7, #15]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	73fb      	strb	r3, [r7, #15]
 800d4be:	7bfa      	ldrb	r2, [r7, #15]
 800d4c0:	78fb      	ldrb	r3, [r7, #3]
 800d4c2:	3b01      	subs	r3, #1
 800d4c4:	429a      	cmp	r2, r3
 800d4c6:	d3ec      	bcc.n	800d4a2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800d4c8:	883b      	ldrh	r3, [r7, #0]
 800d4ca:	0418      	lsls	r0, r3, #16
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	6819      	ldr	r1, [r3, #0]
 800d4d0:	78fb      	ldrb	r3, [r7, #3]
 800d4d2:	3b01      	subs	r3, #1
 800d4d4:	68ba      	ldr	r2, [r7, #8]
 800d4d6:	4302      	orrs	r2, r0
 800d4d8:	3340      	adds	r3, #64	@ 0x40
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	440b      	add	r3, r1
 800d4de:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800d4e0:	2300      	movs	r3, #0
}
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	3714      	adds	r7, #20
 800d4e6:	46bd      	mov	sp, r7
 800d4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ec:	4770      	bx	lr

0800d4ee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800d4ee:	b480      	push	{r7}
 800d4f0:	b083      	sub	sp, #12
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6078      	str	r0, [r7, #4]
 800d4f6:	460b      	mov	r3, r1
 800d4f8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	887a      	ldrh	r2, [r7, #2]
 800d500:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800d502:	2300      	movs	r3, #0
}
 800d504:	4618      	mov	r0, r3
 800d506:	370c      	adds	r7, #12
 800d508:	46bd      	mov	sp, r7
 800d50a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50e:	4770      	bx	lr

0800d510 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800d510:	b480      	push	{r7}
 800d512:	b083      	sub	sp, #12
 800d514:	af00      	add	r7, sp, #0
 800d516:	6078      	str	r0, [r7, #4]
 800d518:	460b      	mov	r3, r1
 800d51a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800d51c:	bf00      	nop
 800d51e:	370c      	adds	r7, #12
 800d520:	46bd      	mov	sp, r7
 800d522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d526:	4770      	bx	lr

0800d528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800d528:	b580      	push	{r7, lr}
 800d52a:	b086      	sub	sp, #24
 800d52c:	af00      	add	r7, sp, #0
 800d52e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	2b00      	cmp	r3, #0
 800d534:	d101      	bne.n	800d53a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800d536:	2301      	movs	r3, #1
 800d538:	e267      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	f003 0301 	and.w	r3, r3, #1
 800d542:	2b00      	cmp	r3, #0
 800d544:	d075      	beq.n	800d632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800d546:	4b88      	ldr	r3, [pc, #544]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d548:	689b      	ldr	r3, [r3, #8]
 800d54a:	f003 030c 	and.w	r3, r3, #12
 800d54e:	2b04      	cmp	r3, #4
 800d550:	d00c      	beq.n	800d56c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d552:	4b85      	ldr	r3, [pc, #532]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d554:	689b      	ldr	r3, [r3, #8]
 800d556:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800d55a:	2b08      	cmp	r3, #8
 800d55c:	d112      	bne.n	800d584 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800d55e:	4b82      	ldr	r3, [pc, #520]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d566:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800d56a:	d10b      	bne.n	800d584 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d56c:	4b7e      	ldr	r3, [pc, #504]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d574:	2b00      	cmp	r3, #0
 800d576:	d05b      	beq.n	800d630 <HAL_RCC_OscConfig+0x108>
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	685b      	ldr	r3, [r3, #4]
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d157      	bne.n	800d630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800d580:	2301      	movs	r3, #1
 800d582:	e242      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d58c:	d106      	bne.n	800d59c <HAL_RCC_OscConfig+0x74>
 800d58e:	4b76      	ldr	r3, [pc, #472]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	4a75      	ldr	r2, [pc, #468]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d598:	6013      	str	r3, [r2, #0]
 800d59a:	e01d      	b.n	800d5d8 <HAL_RCC_OscConfig+0xb0>
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d5a4:	d10c      	bne.n	800d5c0 <HAL_RCC_OscConfig+0x98>
 800d5a6:	4b70      	ldr	r3, [pc, #448]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	4a6f      	ldr	r2, [pc, #444]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d5ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800d5b0:	6013      	str	r3, [r2, #0]
 800d5b2:	4b6d      	ldr	r3, [pc, #436]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	4a6c      	ldr	r2, [pc, #432]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d5b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d5bc:	6013      	str	r3, [r2, #0]
 800d5be:	e00b      	b.n	800d5d8 <HAL_RCC_OscConfig+0xb0>
 800d5c0:	4b69      	ldr	r3, [pc, #420]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	4a68      	ldr	r2, [pc, #416]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d5c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d5ca:	6013      	str	r3, [r2, #0]
 800d5cc:	4b66      	ldr	r3, [pc, #408]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	4a65      	ldr	r2, [pc, #404]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d5d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d5d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	685b      	ldr	r3, [r3, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d013      	beq.n	800d608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d5e0:	f7fd fcfa 	bl	800afd8 <HAL_GetTick>
 800d5e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d5e6:	e008      	b.n	800d5fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d5e8:	f7fd fcf6 	bl	800afd8 <HAL_GetTick>
 800d5ec:	4602      	mov	r2, r0
 800d5ee:	693b      	ldr	r3, [r7, #16]
 800d5f0:	1ad3      	subs	r3, r2, r3
 800d5f2:	2b64      	cmp	r3, #100	@ 0x64
 800d5f4:	d901      	bls.n	800d5fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800d5f6:	2303      	movs	r3, #3
 800d5f8:	e207      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d5fa:	4b5b      	ldr	r3, [pc, #364]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d602:	2b00      	cmp	r3, #0
 800d604:	d0f0      	beq.n	800d5e8 <HAL_RCC_OscConfig+0xc0>
 800d606:	e014      	b.n	800d632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d608:	f7fd fce6 	bl	800afd8 <HAL_GetTick>
 800d60c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d60e:	e008      	b.n	800d622 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800d610:	f7fd fce2 	bl	800afd8 <HAL_GetTick>
 800d614:	4602      	mov	r2, r0
 800d616:	693b      	ldr	r3, [r7, #16]
 800d618:	1ad3      	subs	r3, r2, r3
 800d61a:	2b64      	cmp	r3, #100	@ 0x64
 800d61c:	d901      	bls.n	800d622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800d61e:	2303      	movs	r3, #3
 800d620:	e1f3      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800d622:	4b51      	ldr	r3, [pc, #324]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d1f0      	bne.n	800d610 <HAL_RCC_OscConfig+0xe8>
 800d62e:	e000      	b.n	800d632 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800d630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	f003 0302 	and.w	r3, r3, #2
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d063      	beq.n	800d706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800d63e:	4b4a      	ldr	r3, [pc, #296]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d640:	689b      	ldr	r3, [r3, #8]
 800d642:	f003 030c 	and.w	r3, r3, #12
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00b      	beq.n	800d662 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d64a:	4b47      	ldr	r3, [pc, #284]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d64c:	689b      	ldr	r3, [r3, #8]
 800d64e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800d652:	2b08      	cmp	r3, #8
 800d654:	d11c      	bne.n	800d690 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800d656:	4b44      	ldr	r3, [pc, #272]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d658:	685b      	ldr	r3, [r3, #4]
 800d65a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d116      	bne.n	800d690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d662:	4b41      	ldr	r3, [pc, #260]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	f003 0302 	and.w	r3, r3, #2
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d005      	beq.n	800d67a <HAL_RCC_OscConfig+0x152>
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	2b01      	cmp	r3, #1
 800d674:	d001      	beq.n	800d67a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800d676:	2301      	movs	r3, #1
 800d678:	e1c7      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d67a:	4b3b      	ldr	r3, [pc, #236]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	691b      	ldr	r3, [r3, #16]
 800d686:	00db      	lsls	r3, r3, #3
 800d688:	4937      	ldr	r1, [pc, #220]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d68a:	4313      	orrs	r3, r2
 800d68c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800d68e:	e03a      	b.n	800d706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	68db      	ldr	r3, [r3, #12]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d020      	beq.n	800d6da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800d698:	4b34      	ldr	r3, [pc, #208]	@ (800d76c <HAL_RCC_OscConfig+0x244>)
 800d69a:	2201      	movs	r2, #1
 800d69c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d69e:	f7fd fc9b 	bl	800afd8 <HAL_GetTick>
 800d6a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d6a4:	e008      	b.n	800d6b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d6a6:	f7fd fc97 	bl	800afd8 <HAL_GetTick>
 800d6aa:	4602      	mov	r2, r0
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	1ad3      	subs	r3, r2, r3
 800d6b0:	2b02      	cmp	r3, #2
 800d6b2:	d901      	bls.n	800d6b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800d6b4:	2303      	movs	r3, #3
 800d6b6:	e1a8      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d6b8:	4b2b      	ldr	r3, [pc, #172]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	f003 0302 	and.w	r3, r3, #2
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d0f0      	beq.n	800d6a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800d6c4:	4b28      	ldr	r3, [pc, #160]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	691b      	ldr	r3, [r3, #16]
 800d6d0:	00db      	lsls	r3, r3, #3
 800d6d2:	4925      	ldr	r1, [pc, #148]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d6d4:	4313      	orrs	r3, r2
 800d6d6:	600b      	str	r3, [r1, #0]
 800d6d8:	e015      	b.n	800d706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800d6da:	4b24      	ldr	r3, [pc, #144]	@ (800d76c <HAL_RCC_OscConfig+0x244>)
 800d6dc:	2200      	movs	r2, #0
 800d6de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d6e0:	f7fd fc7a 	bl	800afd8 <HAL_GetTick>
 800d6e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d6e6:	e008      	b.n	800d6fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800d6e8:	f7fd fc76 	bl	800afd8 <HAL_GetTick>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	1ad3      	subs	r3, r2, r3
 800d6f2:	2b02      	cmp	r3, #2
 800d6f4:	d901      	bls.n	800d6fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800d6f6:	2303      	movs	r3, #3
 800d6f8:	e187      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800d6fa:	4b1b      	ldr	r3, [pc, #108]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	f003 0302 	and.w	r3, r3, #2
 800d702:	2b00      	cmp	r3, #0
 800d704:	d1f0      	bne.n	800d6e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	f003 0308 	and.w	r3, r3, #8
 800d70e:	2b00      	cmp	r3, #0
 800d710:	d036      	beq.n	800d780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	695b      	ldr	r3, [r3, #20]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d016      	beq.n	800d748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800d71a:	4b15      	ldr	r3, [pc, #84]	@ (800d770 <HAL_RCC_OscConfig+0x248>)
 800d71c:	2201      	movs	r2, #1
 800d71e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d720:	f7fd fc5a 	bl	800afd8 <HAL_GetTick>
 800d724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d726:	e008      	b.n	800d73a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d728:	f7fd fc56 	bl	800afd8 <HAL_GetTick>
 800d72c:	4602      	mov	r2, r0
 800d72e:	693b      	ldr	r3, [r7, #16]
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	2b02      	cmp	r3, #2
 800d734:	d901      	bls.n	800d73a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800d736:	2303      	movs	r3, #3
 800d738:	e167      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800d73a:	4b0b      	ldr	r3, [pc, #44]	@ (800d768 <HAL_RCC_OscConfig+0x240>)
 800d73c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d73e:	f003 0302 	and.w	r3, r3, #2
 800d742:	2b00      	cmp	r3, #0
 800d744:	d0f0      	beq.n	800d728 <HAL_RCC_OscConfig+0x200>
 800d746:	e01b      	b.n	800d780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800d748:	4b09      	ldr	r3, [pc, #36]	@ (800d770 <HAL_RCC_OscConfig+0x248>)
 800d74a:	2200      	movs	r2, #0
 800d74c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d74e:	f7fd fc43 	bl	800afd8 <HAL_GetTick>
 800d752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d754:	e00e      	b.n	800d774 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800d756:	f7fd fc3f 	bl	800afd8 <HAL_GetTick>
 800d75a:	4602      	mov	r2, r0
 800d75c:	693b      	ldr	r3, [r7, #16]
 800d75e:	1ad3      	subs	r3, r2, r3
 800d760:	2b02      	cmp	r3, #2
 800d762:	d907      	bls.n	800d774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800d764:	2303      	movs	r3, #3
 800d766:	e150      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
 800d768:	40023800 	.word	0x40023800
 800d76c:	42470000 	.word	0x42470000
 800d770:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800d774:	4b88      	ldr	r3, [pc, #544]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d778:	f003 0302 	and.w	r3, r3, #2
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d1ea      	bne.n	800d756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	f003 0304 	and.w	r3, r3, #4
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f000 8097 	beq.w	800d8bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800d78e:	2300      	movs	r3, #0
 800d790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800d792:	4b81      	ldr	r3, [pc, #516]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d796:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d10f      	bne.n	800d7be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60bb      	str	r3, [r7, #8]
 800d7a2:	4b7d      	ldr	r3, [pc, #500]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d7a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7a6:	4a7c      	ldr	r2, [pc, #496]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d7a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800d7ac:	6413      	str	r3, [r2, #64]	@ 0x40
 800d7ae:	4b7a      	ldr	r3, [pc, #488]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d7b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d7b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800d7b6:	60bb      	str	r3, [r7, #8]
 800d7b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d7ba:	2301      	movs	r3, #1
 800d7bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d7be:	4b77      	ldr	r3, [pc, #476]	@ (800d99c <HAL_RCC_OscConfig+0x474>)
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d118      	bne.n	800d7fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800d7ca:	4b74      	ldr	r3, [pc, #464]	@ (800d99c <HAL_RCC_OscConfig+0x474>)
 800d7cc:	681b      	ldr	r3, [r3, #0]
 800d7ce:	4a73      	ldr	r2, [pc, #460]	@ (800d99c <HAL_RCC_OscConfig+0x474>)
 800d7d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d7d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800d7d6:	f7fd fbff 	bl	800afd8 <HAL_GetTick>
 800d7da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d7dc:	e008      	b.n	800d7f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d7de:	f7fd fbfb 	bl	800afd8 <HAL_GetTick>
 800d7e2:	4602      	mov	r2, r0
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	1ad3      	subs	r3, r2, r3
 800d7e8:	2b02      	cmp	r3, #2
 800d7ea:	d901      	bls.n	800d7f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800d7ec:	2303      	movs	r3, #3
 800d7ee:	e10c      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800d7f0:	4b6a      	ldr	r3, [pc, #424]	@ (800d99c <HAL_RCC_OscConfig+0x474>)
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d0f0      	beq.n	800d7de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	689b      	ldr	r3, [r3, #8]
 800d800:	2b01      	cmp	r3, #1
 800d802:	d106      	bne.n	800d812 <HAL_RCC_OscConfig+0x2ea>
 800d804:	4b64      	ldr	r3, [pc, #400]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d806:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d808:	4a63      	ldr	r2, [pc, #396]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d80a:	f043 0301 	orr.w	r3, r3, #1
 800d80e:	6713      	str	r3, [r2, #112]	@ 0x70
 800d810:	e01c      	b.n	800d84c <HAL_RCC_OscConfig+0x324>
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	689b      	ldr	r3, [r3, #8]
 800d816:	2b05      	cmp	r3, #5
 800d818:	d10c      	bne.n	800d834 <HAL_RCC_OscConfig+0x30c>
 800d81a:	4b5f      	ldr	r3, [pc, #380]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d81c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d81e:	4a5e      	ldr	r2, [pc, #376]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d820:	f043 0304 	orr.w	r3, r3, #4
 800d824:	6713      	str	r3, [r2, #112]	@ 0x70
 800d826:	4b5c      	ldr	r3, [pc, #368]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d828:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d82a:	4a5b      	ldr	r2, [pc, #364]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d82c:	f043 0301 	orr.w	r3, r3, #1
 800d830:	6713      	str	r3, [r2, #112]	@ 0x70
 800d832:	e00b      	b.n	800d84c <HAL_RCC_OscConfig+0x324>
 800d834:	4b58      	ldr	r3, [pc, #352]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d836:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d838:	4a57      	ldr	r2, [pc, #348]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d83a:	f023 0301 	bic.w	r3, r3, #1
 800d83e:	6713      	str	r3, [r2, #112]	@ 0x70
 800d840:	4b55      	ldr	r3, [pc, #340]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d844:	4a54      	ldr	r2, [pc, #336]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d846:	f023 0304 	bic.w	r3, r3, #4
 800d84a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	689b      	ldr	r3, [r3, #8]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d015      	beq.n	800d880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d854:	f7fd fbc0 	bl	800afd8 <HAL_GetTick>
 800d858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d85a:	e00a      	b.n	800d872 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d85c:	f7fd fbbc 	bl	800afd8 <HAL_GetTick>
 800d860:	4602      	mov	r2, r0
 800d862:	693b      	ldr	r3, [r7, #16]
 800d864:	1ad3      	subs	r3, r2, r3
 800d866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d901      	bls.n	800d872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800d86e:	2303      	movs	r3, #3
 800d870:	e0cb      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d872:	4b49      	ldr	r3, [pc, #292]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d876:	f003 0302 	and.w	r3, r3, #2
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d0ee      	beq.n	800d85c <HAL_RCC_OscConfig+0x334>
 800d87e:	e014      	b.n	800d8aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d880:	f7fd fbaa 	bl	800afd8 <HAL_GetTick>
 800d884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d886:	e00a      	b.n	800d89e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d888:	f7fd fba6 	bl	800afd8 <HAL_GetTick>
 800d88c:	4602      	mov	r2, r0
 800d88e:	693b      	ldr	r3, [r7, #16]
 800d890:	1ad3      	subs	r3, r2, r3
 800d892:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d896:	4293      	cmp	r3, r2
 800d898:	d901      	bls.n	800d89e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800d89a:	2303      	movs	r3, #3
 800d89c:	e0b5      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d89e:	4b3e      	ldr	r3, [pc, #248]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d8a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d8a2:	f003 0302 	and.w	r3, r3, #2
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d1ee      	bne.n	800d888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d8aa:	7dfb      	ldrb	r3, [r7, #23]
 800d8ac:	2b01      	cmp	r3, #1
 800d8ae:	d105      	bne.n	800d8bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d8b0:	4b39      	ldr	r3, [pc, #228]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d8b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d8b4:	4a38      	ldr	r2, [pc, #224]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d8b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d8ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	699b      	ldr	r3, [r3, #24]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	f000 80a1 	beq.w	800da08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d8c6:	4b34      	ldr	r3, [pc, #208]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d8c8:	689b      	ldr	r3, [r3, #8]
 800d8ca:	f003 030c 	and.w	r3, r3, #12
 800d8ce:	2b08      	cmp	r3, #8
 800d8d0:	d05c      	beq.n	800d98c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	699b      	ldr	r3, [r3, #24]
 800d8d6:	2b02      	cmp	r3, #2
 800d8d8:	d141      	bne.n	800d95e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d8da:	4b31      	ldr	r3, [pc, #196]	@ (800d9a0 <HAL_RCC_OscConfig+0x478>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d8e0:	f7fd fb7a 	bl	800afd8 <HAL_GetTick>
 800d8e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d8e6:	e008      	b.n	800d8fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d8e8:	f7fd fb76 	bl	800afd8 <HAL_GetTick>
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	693b      	ldr	r3, [r7, #16]
 800d8f0:	1ad3      	subs	r3, r2, r3
 800d8f2:	2b02      	cmp	r3, #2
 800d8f4:	d901      	bls.n	800d8fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	e087      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d8fa:	4b27      	ldr	r3, [pc, #156]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d902:	2b00      	cmp	r3, #0
 800d904:	d1f0      	bne.n	800d8e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	69da      	ldr	r2, [r3, #28]
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	6a1b      	ldr	r3, [r3, #32]
 800d90e:	431a      	orrs	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d914:	019b      	lsls	r3, r3, #6
 800d916:	431a      	orrs	r2, r3
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d91c:	085b      	lsrs	r3, r3, #1
 800d91e:	3b01      	subs	r3, #1
 800d920:	041b      	lsls	r3, r3, #16
 800d922:	431a      	orrs	r2, r3
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d928:	061b      	lsls	r3, r3, #24
 800d92a:	491b      	ldr	r1, [pc, #108]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d92c:	4313      	orrs	r3, r2
 800d92e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d930:	4b1b      	ldr	r3, [pc, #108]	@ (800d9a0 <HAL_RCC_OscConfig+0x478>)
 800d932:	2201      	movs	r2, #1
 800d934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d936:	f7fd fb4f 	bl	800afd8 <HAL_GetTick>
 800d93a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d93c:	e008      	b.n	800d950 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d93e:	f7fd fb4b 	bl	800afd8 <HAL_GetTick>
 800d942:	4602      	mov	r2, r0
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	1ad3      	subs	r3, r2, r3
 800d948:	2b02      	cmp	r3, #2
 800d94a:	d901      	bls.n	800d950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d94c:	2303      	movs	r3, #3
 800d94e:	e05c      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d950:	4b11      	ldr	r3, [pc, #68]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d958:	2b00      	cmp	r3, #0
 800d95a:	d0f0      	beq.n	800d93e <HAL_RCC_OscConfig+0x416>
 800d95c:	e054      	b.n	800da08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d95e:	4b10      	ldr	r3, [pc, #64]	@ (800d9a0 <HAL_RCC_OscConfig+0x478>)
 800d960:	2200      	movs	r2, #0
 800d962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d964:	f7fd fb38 	bl	800afd8 <HAL_GetTick>
 800d968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d96a:	e008      	b.n	800d97e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d96c:	f7fd fb34 	bl	800afd8 <HAL_GetTick>
 800d970:	4602      	mov	r2, r0
 800d972:	693b      	ldr	r3, [r7, #16]
 800d974:	1ad3      	subs	r3, r2, r3
 800d976:	2b02      	cmp	r3, #2
 800d978:	d901      	bls.n	800d97e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800d97a:	2303      	movs	r3, #3
 800d97c:	e045      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d97e:	4b06      	ldr	r3, [pc, #24]	@ (800d998 <HAL_RCC_OscConfig+0x470>)
 800d980:	681b      	ldr	r3, [r3, #0]
 800d982:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d986:	2b00      	cmp	r3, #0
 800d988:	d1f0      	bne.n	800d96c <HAL_RCC_OscConfig+0x444>
 800d98a:	e03d      	b.n	800da08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	699b      	ldr	r3, [r3, #24]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d107      	bne.n	800d9a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800d994:	2301      	movs	r3, #1
 800d996:	e038      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
 800d998:	40023800 	.word	0x40023800
 800d99c:	40007000 	.word	0x40007000
 800d9a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d9a4:	4b1b      	ldr	r3, [pc, #108]	@ (800da14 <HAL_RCC_OscConfig+0x4ec>)
 800d9a6:	685b      	ldr	r3, [r3, #4]
 800d9a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	699b      	ldr	r3, [r3, #24]
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d028      	beq.n	800da04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d121      	bne.n	800da04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d9ca:	429a      	cmp	r2, r3
 800d9cc:	d11a      	bne.n	800da04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d9ce:	68fa      	ldr	r2, [r7, #12]
 800d9d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800d9d4:	4013      	ands	r3, r2
 800d9d6:	687a      	ldr	r2, [r7, #4]
 800d9d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d9da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d111      	bne.n	800da04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9ea:	085b      	lsrs	r3, r3, #1
 800d9ec:	3b01      	subs	r3, #1
 800d9ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d107      	bne.n	800da04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800da00:	429a      	cmp	r2, r3
 800da02:	d001      	beq.n	800da08 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800da04:	2301      	movs	r3, #1
 800da06:	e000      	b.n	800da0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800da08:	2300      	movs	r3, #0
}
 800da0a:	4618      	mov	r0, r3
 800da0c:	3718      	adds	r7, #24
 800da0e:	46bd      	mov	sp, r7
 800da10:	bd80      	pop	{r7, pc}
 800da12:	bf00      	nop
 800da14:	40023800 	.word	0x40023800

0800da18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d101      	bne.n	800da2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800da28:	2301      	movs	r3, #1
 800da2a:	e0cc      	b.n	800dbc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800da2c:	4b68      	ldr	r3, [pc, #416]	@ (800dbd0 <HAL_RCC_ClockConfig+0x1b8>)
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	f003 0307 	and.w	r3, r3, #7
 800da34:	683a      	ldr	r2, [r7, #0]
 800da36:	429a      	cmp	r2, r3
 800da38:	d90c      	bls.n	800da54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800da3a:	4b65      	ldr	r3, [pc, #404]	@ (800dbd0 <HAL_RCC_ClockConfig+0x1b8>)
 800da3c:	683a      	ldr	r2, [r7, #0]
 800da3e:	b2d2      	uxtb	r2, r2
 800da40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800da42:	4b63      	ldr	r3, [pc, #396]	@ (800dbd0 <HAL_RCC_ClockConfig+0x1b8>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	f003 0307 	and.w	r3, r3, #7
 800da4a:	683a      	ldr	r2, [r7, #0]
 800da4c:	429a      	cmp	r2, r3
 800da4e:	d001      	beq.n	800da54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800da50:	2301      	movs	r3, #1
 800da52:	e0b8      	b.n	800dbc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	f003 0302 	and.w	r3, r3, #2
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d020      	beq.n	800daa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f003 0304 	and.w	r3, r3, #4
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d005      	beq.n	800da78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800da6c:	4b59      	ldr	r3, [pc, #356]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	4a58      	ldr	r2, [pc, #352]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800da72:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800da76:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	f003 0308 	and.w	r3, r3, #8
 800da80:	2b00      	cmp	r3, #0
 800da82:	d005      	beq.n	800da90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800da84:	4b53      	ldr	r3, [pc, #332]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800da86:	689b      	ldr	r3, [r3, #8]
 800da88:	4a52      	ldr	r2, [pc, #328]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800da8a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800da8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800da90:	4b50      	ldr	r3, [pc, #320]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	689b      	ldr	r3, [r3, #8]
 800da9c:	494d      	ldr	r1, [pc, #308]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800da9e:	4313      	orrs	r3, r2
 800daa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	f003 0301 	and.w	r3, r3, #1
 800daaa:	2b00      	cmp	r3, #0
 800daac:	d044      	beq.n	800db38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d107      	bne.n	800dac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dab6:	4b47      	ldr	r3, [pc, #284]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d119      	bne.n	800daf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dac2:	2301      	movs	r3, #1
 800dac4:	e07f      	b.n	800dbc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	685b      	ldr	r3, [r3, #4]
 800daca:	2b02      	cmp	r3, #2
 800dacc:	d003      	beq.n	800dad6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800dad2:	2b03      	cmp	r3, #3
 800dad4:	d107      	bne.n	800dae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800dad6:	4b3f      	ldr	r3, [pc, #252]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d109      	bne.n	800daf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800dae2:	2301      	movs	r3, #1
 800dae4:	e06f      	b.n	800dbc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dae6:	4b3b      	ldr	r3, [pc, #236]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f003 0302 	and.w	r3, r3, #2
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d101      	bne.n	800daf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800daf2:	2301      	movs	r3, #1
 800daf4:	e067      	b.n	800dbc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800daf6:	4b37      	ldr	r3, [pc, #220]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800daf8:	689b      	ldr	r3, [r3, #8]
 800dafa:	f023 0203 	bic.w	r2, r3, #3
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	685b      	ldr	r3, [r3, #4]
 800db02:	4934      	ldr	r1, [pc, #208]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800db04:	4313      	orrs	r3, r2
 800db06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800db08:	f7fd fa66 	bl	800afd8 <HAL_GetTick>
 800db0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db0e:	e00a      	b.n	800db26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800db10:	f7fd fa62 	bl	800afd8 <HAL_GetTick>
 800db14:	4602      	mov	r2, r0
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800db1e:	4293      	cmp	r3, r2
 800db20:	d901      	bls.n	800db26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800db22:	2303      	movs	r3, #3
 800db24:	e04f      	b.n	800dbc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800db26:	4b2b      	ldr	r3, [pc, #172]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800db28:	689b      	ldr	r3, [r3, #8]
 800db2a:	f003 020c 	and.w	r2, r3, #12
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	009b      	lsls	r3, r3, #2
 800db34:	429a      	cmp	r2, r3
 800db36:	d1eb      	bne.n	800db10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800db38:	4b25      	ldr	r3, [pc, #148]	@ (800dbd0 <HAL_RCC_ClockConfig+0x1b8>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	f003 0307 	and.w	r3, r3, #7
 800db40:	683a      	ldr	r2, [r7, #0]
 800db42:	429a      	cmp	r2, r3
 800db44:	d20c      	bcs.n	800db60 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800db46:	4b22      	ldr	r3, [pc, #136]	@ (800dbd0 <HAL_RCC_ClockConfig+0x1b8>)
 800db48:	683a      	ldr	r2, [r7, #0]
 800db4a:	b2d2      	uxtb	r2, r2
 800db4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800db4e:	4b20      	ldr	r3, [pc, #128]	@ (800dbd0 <HAL_RCC_ClockConfig+0x1b8>)
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f003 0307 	and.w	r3, r3, #7
 800db56:	683a      	ldr	r2, [r7, #0]
 800db58:	429a      	cmp	r2, r3
 800db5a:	d001      	beq.n	800db60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800db5c:	2301      	movs	r3, #1
 800db5e:	e032      	b.n	800dbc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	f003 0304 	and.w	r3, r3, #4
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d008      	beq.n	800db7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800db6c:	4b19      	ldr	r3, [pc, #100]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800db6e:	689b      	ldr	r3, [r3, #8]
 800db70:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	68db      	ldr	r3, [r3, #12]
 800db78:	4916      	ldr	r1, [pc, #88]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800db7a:	4313      	orrs	r3, r2
 800db7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	f003 0308 	and.w	r3, r3, #8
 800db86:	2b00      	cmp	r3, #0
 800db88:	d009      	beq.n	800db9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800db8a:	4b12      	ldr	r3, [pc, #72]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800db8c:	689b      	ldr	r3, [r3, #8]
 800db8e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	691b      	ldr	r3, [r3, #16]
 800db96:	00db      	lsls	r3, r3, #3
 800db98:	490e      	ldr	r1, [pc, #56]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800db9a:	4313      	orrs	r3, r2
 800db9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800db9e:	f000 f821 	bl	800dbe4 <HAL_RCC_GetSysClockFreq>
 800dba2:	4602      	mov	r2, r0
 800dba4:	4b0b      	ldr	r3, [pc, #44]	@ (800dbd4 <HAL_RCC_ClockConfig+0x1bc>)
 800dba6:	689b      	ldr	r3, [r3, #8]
 800dba8:	091b      	lsrs	r3, r3, #4
 800dbaa:	f003 030f 	and.w	r3, r3, #15
 800dbae:	490a      	ldr	r1, [pc, #40]	@ (800dbd8 <HAL_RCC_ClockConfig+0x1c0>)
 800dbb0:	5ccb      	ldrb	r3, [r1, r3]
 800dbb2:	fa22 f303 	lsr.w	r3, r2, r3
 800dbb6:	4a09      	ldr	r2, [pc, #36]	@ (800dbdc <HAL_RCC_ClockConfig+0x1c4>)
 800dbb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800dbba:	4b09      	ldr	r3, [pc, #36]	@ (800dbe0 <HAL_RCC_ClockConfig+0x1c8>)
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	f7fc fa3e 	bl	800a040 <HAL_InitTick>

  return HAL_OK;
 800dbc4:	2300      	movs	r3, #0
}
 800dbc6:	4618      	mov	r0, r3
 800dbc8:	3710      	adds	r7, #16
 800dbca:	46bd      	mov	sp, r7
 800dbcc:	bd80      	pop	{r7, pc}
 800dbce:	bf00      	nop
 800dbd0:	40023c00 	.word	0x40023c00
 800dbd4:	40023800 	.word	0x40023800
 800dbd8:	08021494 	.word	0x08021494
 800dbdc:	20000054 	.word	0x20000054
 800dbe0:	20000058 	.word	0x20000058

0800dbe4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800dbe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dbe8:	b094      	sub	sp, #80	@ 0x50
 800dbea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800dbec:	2300      	movs	r3, #0
 800dbee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800dbf0:	2300      	movs	r3, #0
 800dbf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800dbf4:	2300      	movs	r3, #0
 800dbf6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800dbf8:	2300      	movs	r3, #0
 800dbfa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800dbfc:	4b79      	ldr	r3, [pc, #484]	@ (800dde4 <HAL_RCC_GetSysClockFreq+0x200>)
 800dbfe:	689b      	ldr	r3, [r3, #8]
 800dc00:	f003 030c 	and.w	r3, r3, #12
 800dc04:	2b08      	cmp	r3, #8
 800dc06:	d00d      	beq.n	800dc24 <HAL_RCC_GetSysClockFreq+0x40>
 800dc08:	2b08      	cmp	r3, #8
 800dc0a:	f200 80e1 	bhi.w	800ddd0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d002      	beq.n	800dc18 <HAL_RCC_GetSysClockFreq+0x34>
 800dc12:	2b04      	cmp	r3, #4
 800dc14:	d003      	beq.n	800dc1e <HAL_RCC_GetSysClockFreq+0x3a>
 800dc16:	e0db      	b.n	800ddd0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800dc18:	4b73      	ldr	r3, [pc, #460]	@ (800dde8 <HAL_RCC_GetSysClockFreq+0x204>)
 800dc1a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800dc1c:	e0db      	b.n	800ddd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800dc1e:	4b73      	ldr	r3, [pc, #460]	@ (800ddec <HAL_RCC_GetSysClockFreq+0x208>)
 800dc20:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800dc22:	e0d8      	b.n	800ddd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800dc24:	4b6f      	ldr	r3, [pc, #444]	@ (800dde4 <HAL_RCC_GetSysClockFreq+0x200>)
 800dc26:	685b      	ldr	r3, [r3, #4]
 800dc28:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800dc2c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800dc2e:	4b6d      	ldr	r3, [pc, #436]	@ (800dde4 <HAL_RCC_GetSysClockFreq+0x200>)
 800dc30:	685b      	ldr	r3, [r3, #4]
 800dc32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d063      	beq.n	800dd02 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dc3a:	4b6a      	ldr	r3, [pc, #424]	@ (800dde4 <HAL_RCC_GetSysClockFreq+0x200>)
 800dc3c:	685b      	ldr	r3, [r3, #4]
 800dc3e:	099b      	lsrs	r3, r3, #6
 800dc40:	2200      	movs	r2, #0
 800dc42:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc44:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800dc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc4c:	633b      	str	r3, [r7, #48]	@ 0x30
 800dc4e:	2300      	movs	r3, #0
 800dc50:	637b      	str	r3, [r7, #52]	@ 0x34
 800dc52:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800dc56:	4622      	mov	r2, r4
 800dc58:	462b      	mov	r3, r5
 800dc5a:	f04f 0000 	mov.w	r0, #0
 800dc5e:	f04f 0100 	mov.w	r1, #0
 800dc62:	0159      	lsls	r1, r3, #5
 800dc64:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dc68:	0150      	lsls	r0, r2, #5
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	460b      	mov	r3, r1
 800dc6e:	4621      	mov	r1, r4
 800dc70:	1a51      	subs	r1, r2, r1
 800dc72:	6139      	str	r1, [r7, #16]
 800dc74:	4629      	mov	r1, r5
 800dc76:	eb63 0301 	sbc.w	r3, r3, r1
 800dc7a:	617b      	str	r3, [r7, #20]
 800dc7c:	f04f 0200 	mov.w	r2, #0
 800dc80:	f04f 0300 	mov.w	r3, #0
 800dc84:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800dc88:	4659      	mov	r1, fp
 800dc8a:	018b      	lsls	r3, r1, #6
 800dc8c:	4651      	mov	r1, sl
 800dc8e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800dc92:	4651      	mov	r1, sl
 800dc94:	018a      	lsls	r2, r1, #6
 800dc96:	4651      	mov	r1, sl
 800dc98:	ebb2 0801 	subs.w	r8, r2, r1
 800dc9c:	4659      	mov	r1, fp
 800dc9e:	eb63 0901 	sbc.w	r9, r3, r1
 800dca2:	f04f 0200 	mov.w	r2, #0
 800dca6:	f04f 0300 	mov.w	r3, #0
 800dcaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dcae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dcb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dcb6:	4690      	mov	r8, r2
 800dcb8:	4699      	mov	r9, r3
 800dcba:	4623      	mov	r3, r4
 800dcbc:	eb18 0303 	adds.w	r3, r8, r3
 800dcc0:	60bb      	str	r3, [r7, #8]
 800dcc2:	462b      	mov	r3, r5
 800dcc4:	eb49 0303 	adc.w	r3, r9, r3
 800dcc8:	60fb      	str	r3, [r7, #12]
 800dcca:	f04f 0200 	mov.w	r2, #0
 800dcce:	f04f 0300 	mov.w	r3, #0
 800dcd2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800dcd6:	4629      	mov	r1, r5
 800dcd8:	024b      	lsls	r3, r1, #9
 800dcda:	4621      	mov	r1, r4
 800dcdc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800dce0:	4621      	mov	r1, r4
 800dce2:	024a      	lsls	r2, r1, #9
 800dce4:	4610      	mov	r0, r2
 800dce6:	4619      	mov	r1, r3
 800dce8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcea:	2200      	movs	r2, #0
 800dcec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800dcee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dcf0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800dcf4:	f7f2 ffd8 	bl	8000ca8 <__aeabi_uldivmod>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	460b      	mov	r3, r1
 800dcfc:	4613      	mov	r3, r2
 800dcfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dd00:	e058      	b.n	800ddb4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800dd02:	4b38      	ldr	r3, [pc, #224]	@ (800dde4 <HAL_RCC_GetSysClockFreq+0x200>)
 800dd04:	685b      	ldr	r3, [r3, #4]
 800dd06:	099b      	lsrs	r3, r3, #6
 800dd08:	2200      	movs	r2, #0
 800dd0a:	4618      	mov	r0, r3
 800dd0c:	4611      	mov	r1, r2
 800dd0e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800dd12:	623b      	str	r3, [r7, #32]
 800dd14:	2300      	movs	r3, #0
 800dd16:	627b      	str	r3, [r7, #36]	@ 0x24
 800dd18:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800dd1c:	4642      	mov	r2, r8
 800dd1e:	464b      	mov	r3, r9
 800dd20:	f04f 0000 	mov.w	r0, #0
 800dd24:	f04f 0100 	mov.w	r1, #0
 800dd28:	0159      	lsls	r1, r3, #5
 800dd2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800dd2e:	0150      	lsls	r0, r2, #5
 800dd30:	4602      	mov	r2, r0
 800dd32:	460b      	mov	r3, r1
 800dd34:	4641      	mov	r1, r8
 800dd36:	ebb2 0a01 	subs.w	sl, r2, r1
 800dd3a:	4649      	mov	r1, r9
 800dd3c:	eb63 0b01 	sbc.w	fp, r3, r1
 800dd40:	f04f 0200 	mov.w	r2, #0
 800dd44:	f04f 0300 	mov.w	r3, #0
 800dd48:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800dd4c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800dd50:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800dd54:	ebb2 040a 	subs.w	r4, r2, sl
 800dd58:	eb63 050b 	sbc.w	r5, r3, fp
 800dd5c:	f04f 0200 	mov.w	r2, #0
 800dd60:	f04f 0300 	mov.w	r3, #0
 800dd64:	00eb      	lsls	r3, r5, #3
 800dd66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dd6a:	00e2      	lsls	r2, r4, #3
 800dd6c:	4614      	mov	r4, r2
 800dd6e:	461d      	mov	r5, r3
 800dd70:	4643      	mov	r3, r8
 800dd72:	18e3      	adds	r3, r4, r3
 800dd74:	603b      	str	r3, [r7, #0]
 800dd76:	464b      	mov	r3, r9
 800dd78:	eb45 0303 	adc.w	r3, r5, r3
 800dd7c:	607b      	str	r3, [r7, #4]
 800dd7e:	f04f 0200 	mov.w	r2, #0
 800dd82:	f04f 0300 	mov.w	r3, #0
 800dd86:	e9d7 4500 	ldrd	r4, r5, [r7]
 800dd8a:	4629      	mov	r1, r5
 800dd8c:	028b      	lsls	r3, r1, #10
 800dd8e:	4621      	mov	r1, r4
 800dd90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800dd94:	4621      	mov	r1, r4
 800dd96:	028a      	lsls	r2, r1, #10
 800dd98:	4610      	mov	r0, r2
 800dd9a:	4619      	mov	r1, r3
 800dd9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dd9e:	2200      	movs	r2, #0
 800dda0:	61bb      	str	r3, [r7, #24]
 800dda2:	61fa      	str	r2, [r7, #28]
 800dda4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800dda8:	f7f2 ff7e 	bl	8000ca8 <__aeabi_uldivmod>
 800ddac:	4602      	mov	r2, r0
 800ddae:	460b      	mov	r3, r1
 800ddb0:	4613      	mov	r3, r2
 800ddb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800ddb4:	4b0b      	ldr	r3, [pc, #44]	@ (800dde4 <HAL_RCC_GetSysClockFreq+0x200>)
 800ddb6:	685b      	ldr	r3, [r3, #4]
 800ddb8:	0c1b      	lsrs	r3, r3, #16
 800ddba:	f003 0303 	and.w	r3, r3, #3
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	005b      	lsls	r3, r3, #1
 800ddc2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800ddc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ddc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ddc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddcc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ddce:	e002      	b.n	800ddd6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800ddd0:	4b05      	ldr	r3, [pc, #20]	@ (800dde8 <HAL_RCC_GetSysClockFreq+0x204>)
 800ddd2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800ddd4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ddd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3750      	adds	r7, #80	@ 0x50
 800dddc:	46bd      	mov	sp, r7
 800ddde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dde2:	bf00      	nop
 800dde4:	40023800 	.word	0x40023800
 800dde8:	00f42400 	.word	0x00f42400
 800ddec:	007a1200 	.word	0x007a1200

0800ddf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ddf4:	4b03      	ldr	r3, [pc, #12]	@ (800de04 <HAL_RCC_GetHCLKFreq+0x14>)
 800ddf6:	681b      	ldr	r3, [r3, #0]
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	46bd      	mov	sp, r7
 800ddfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de00:	4770      	bx	lr
 800de02:	bf00      	nop
 800de04:	20000054 	.word	0x20000054

0800de08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800de0c:	f7ff fff0 	bl	800ddf0 <HAL_RCC_GetHCLKFreq>
 800de10:	4602      	mov	r2, r0
 800de12:	4b05      	ldr	r3, [pc, #20]	@ (800de28 <HAL_RCC_GetPCLK1Freq+0x20>)
 800de14:	689b      	ldr	r3, [r3, #8]
 800de16:	0a9b      	lsrs	r3, r3, #10
 800de18:	f003 0307 	and.w	r3, r3, #7
 800de1c:	4903      	ldr	r1, [pc, #12]	@ (800de2c <HAL_RCC_GetPCLK1Freq+0x24>)
 800de1e:	5ccb      	ldrb	r3, [r1, r3]
 800de20:	fa22 f303 	lsr.w	r3, r2, r3
}
 800de24:	4618      	mov	r0, r3
 800de26:	bd80      	pop	{r7, pc}
 800de28:	40023800 	.word	0x40023800
 800de2c:	080214a4 	.word	0x080214a4

0800de30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800de30:	b580      	push	{r7, lr}
 800de32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800de34:	f7ff ffdc 	bl	800ddf0 <HAL_RCC_GetHCLKFreq>
 800de38:	4602      	mov	r2, r0
 800de3a:	4b05      	ldr	r3, [pc, #20]	@ (800de50 <HAL_RCC_GetPCLK2Freq+0x20>)
 800de3c:	689b      	ldr	r3, [r3, #8]
 800de3e:	0b5b      	lsrs	r3, r3, #13
 800de40:	f003 0307 	and.w	r3, r3, #7
 800de44:	4903      	ldr	r1, [pc, #12]	@ (800de54 <HAL_RCC_GetPCLK2Freq+0x24>)
 800de46:	5ccb      	ldrb	r3, [r1, r3]
 800de48:	fa22 f303 	lsr.w	r3, r2, r3
}
 800de4c:	4618      	mov	r0, r3
 800de4e:	bd80      	pop	{r7, pc}
 800de50:	40023800 	.word	0x40023800
 800de54:	080214a4 	.word	0x080214a4

0800de58 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800de58:	b480      	push	{r7}
 800de5a:	b083      	sub	sp, #12
 800de5c:	af00      	add	r7, sp, #0
 800de5e:	6078      	str	r0, [r7, #4]
 800de60:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	220f      	movs	r2, #15
 800de66:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800de68:	4b12      	ldr	r3, [pc, #72]	@ (800deb4 <HAL_RCC_GetClockConfig+0x5c>)
 800de6a:	689b      	ldr	r3, [r3, #8]
 800de6c:	f003 0203 	and.w	r2, r3, #3
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800de74:	4b0f      	ldr	r3, [pc, #60]	@ (800deb4 <HAL_RCC_GetClockConfig+0x5c>)
 800de76:	689b      	ldr	r3, [r3, #8]
 800de78:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800de80:	4b0c      	ldr	r3, [pc, #48]	@ (800deb4 <HAL_RCC_GetClockConfig+0x5c>)
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800de8c:	4b09      	ldr	r3, [pc, #36]	@ (800deb4 <HAL_RCC_GetClockConfig+0x5c>)
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	08db      	lsrs	r3, r3, #3
 800de92:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800de9a:	4b07      	ldr	r3, [pc, #28]	@ (800deb8 <HAL_RCC_GetClockConfig+0x60>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	f003 0207 	and.w	r2, r3, #7
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	601a      	str	r2, [r3, #0]
}
 800dea6:	bf00      	nop
 800dea8:	370c      	adds	r7, #12
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	40023800 	.word	0x40023800
 800deb8:	40023c00 	.word	0x40023c00

0800debc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b082      	sub	sp, #8
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2b00      	cmp	r3, #0
 800dec8:	d101      	bne.n	800dece <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800deca:	2301      	movs	r3, #1
 800decc:	e07b      	b.n	800dfc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d108      	bne.n	800dee8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	685b      	ldr	r3, [r3, #4]
 800deda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dede:	d009      	beq.n	800def4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2200      	movs	r2, #0
 800dee4:	61da      	str	r2, [r3, #28]
 800dee6:	e005      	b.n	800def4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	2200      	movs	r2, #0
 800deec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	2200      	movs	r2, #0
 800def2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	2200      	movs	r2, #0
 800def8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800df00:	b2db      	uxtb	r3, r3
 800df02:	2b00      	cmp	r3, #0
 800df04:	d106      	bne.n	800df14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2200      	movs	r2, #0
 800df0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f7fc f822 	bl	8009f58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	2202      	movs	r2, #2
 800df18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	681a      	ldr	r2, [r3, #0]
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800df2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	685b      	ldr	r3, [r3, #4]
 800df30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800df3c:	431a      	orrs	r2, r3
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	68db      	ldr	r3, [r3, #12]
 800df42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800df46:	431a      	orrs	r2, r3
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	691b      	ldr	r3, [r3, #16]
 800df4c:	f003 0302 	and.w	r3, r3, #2
 800df50:	431a      	orrs	r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	695b      	ldr	r3, [r3, #20]
 800df56:	f003 0301 	and.w	r3, r3, #1
 800df5a:	431a      	orrs	r2, r3
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	699b      	ldr	r3, [r3, #24]
 800df60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800df64:	431a      	orrs	r2, r3
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	69db      	ldr	r3, [r3, #28]
 800df6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800df6e:	431a      	orrs	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6a1b      	ldr	r3, [r3, #32]
 800df74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df78:	ea42 0103 	orr.w	r1, r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800df80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	430a      	orrs	r2, r1
 800df8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	699b      	ldr	r3, [r3, #24]
 800df90:	0c1b      	lsrs	r3, r3, #16
 800df92:	f003 0104 	and.w	r1, r3, #4
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df9a:	f003 0210 	and.w	r2, r3, #16
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	430a      	orrs	r2, r1
 800dfa4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	69da      	ldr	r2, [r3, #28]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800dfb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800dfc4:	2300      	movs	r3, #0
}
 800dfc6:	4618      	mov	r0, r3
 800dfc8:	3708      	adds	r7, #8
 800dfca:	46bd      	mov	sp, r7
 800dfcc:	bd80      	pop	{r7, pc}

0800dfce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dfce:	b580      	push	{r7, lr}
 800dfd0:	b088      	sub	sp, #32
 800dfd2:	af00      	add	r7, sp, #0
 800dfd4:	60f8      	str	r0, [r7, #12]
 800dfd6:	60b9      	str	r1, [r7, #8]
 800dfd8:	603b      	str	r3, [r7, #0]
 800dfda:	4613      	mov	r3, r2
 800dfdc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dfde:	f7fc fffb 	bl	800afd8 <HAL_GetTick>
 800dfe2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800dfe4:	88fb      	ldrh	r3, [r7, #6]
 800dfe6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dfe8:	68fb      	ldr	r3, [r7, #12]
 800dfea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d001      	beq.n	800dff8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800dff4:	2302      	movs	r3, #2
 800dff6:	e12a      	b.n	800e24e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d002      	beq.n	800e004 <HAL_SPI_Transmit+0x36>
 800dffe:	88fb      	ldrh	r3, [r7, #6]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d101      	bne.n	800e008 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800e004:	2301      	movs	r3, #1
 800e006:	e122      	b.n	800e24e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e00e:	2b01      	cmp	r3, #1
 800e010:	d101      	bne.n	800e016 <HAL_SPI_Transmit+0x48>
 800e012:	2302      	movs	r3, #2
 800e014:	e11b      	b.n	800e24e <HAL_SPI_Transmit+0x280>
 800e016:	68fb      	ldr	r3, [r7, #12]
 800e018:	2201      	movs	r2, #1
 800e01a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	2203      	movs	r2, #3
 800e022:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2200      	movs	r2, #0
 800e02a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	68ba      	ldr	r2, [r7, #8]
 800e030:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	88fa      	ldrh	r2, [r7, #6]
 800e036:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	88fa      	ldrh	r2, [r7, #6]
 800e03c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	2200      	movs	r2, #0
 800e042:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2200      	movs	r2, #0
 800e048:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	2200      	movs	r2, #0
 800e04e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800e050:	68fb      	ldr	r3, [r7, #12]
 800e052:	2200      	movs	r2, #0
 800e054:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	2200      	movs	r2, #0
 800e05a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	689b      	ldr	r3, [r3, #8]
 800e060:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e064:	d10f      	bne.n	800e086 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	681a      	ldr	r2, [r3, #0]
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e074:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	681a      	ldr	r2, [r3, #0]
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e084:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e086:	68fb      	ldr	r3, [r7, #12]
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e090:	2b40      	cmp	r3, #64	@ 0x40
 800e092:	d007      	beq.n	800e0a4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	681a      	ldr	r2, [r3, #0]
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e0a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	68db      	ldr	r3, [r3, #12]
 800e0a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e0ac:	d152      	bne.n	800e154 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	685b      	ldr	r3, [r3, #4]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d002      	beq.n	800e0bc <HAL_SPI_Transmit+0xee>
 800e0b6:	8b7b      	ldrh	r3, [r7, #26]
 800e0b8:	2b01      	cmp	r3, #1
 800e0ba:	d145      	bne.n	800e148 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0c0:	881a      	ldrh	r2, [r3, #0]
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0cc:	1c9a      	adds	r2, r3, #2
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e0d6:	b29b      	uxth	r3, r3
 800e0d8:	3b01      	subs	r3, #1
 800e0da:	b29a      	uxth	r2, r3
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800e0e0:	e032      	b.n	800e148 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	689b      	ldr	r3, [r3, #8]
 800e0e8:	f003 0302 	and.w	r3, r3, #2
 800e0ec:	2b02      	cmp	r3, #2
 800e0ee:	d112      	bne.n	800e116 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e0f4:	881a      	ldrh	r2, [r3, #0]
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e100:	1c9a      	adds	r2, r3, #2
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	3b01      	subs	r3, #1
 800e10e:	b29a      	uxth	r2, r3
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	86da      	strh	r2, [r3, #54]	@ 0x36
 800e114:	e018      	b.n	800e148 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e116:	f7fc ff5f 	bl	800afd8 <HAL_GetTick>
 800e11a:	4602      	mov	r2, r0
 800e11c:	69fb      	ldr	r3, [r7, #28]
 800e11e:	1ad3      	subs	r3, r2, r3
 800e120:	683a      	ldr	r2, [r7, #0]
 800e122:	429a      	cmp	r2, r3
 800e124:	d803      	bhi.n	800e12e <HAL_SPI_Transmit+0x160>
 800e126:	683b      	ldr	r3, [r7, #0]
 800e128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e12c:	d102      	bne.n	800e134 <HAL_SPI_Transmit+0x166>
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	2b00      	cmp	r3, #0
 800e132:	d109      	bne.n	800e148 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	2201      	movs	r2, #1
 800e138:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	2200      	movs	r2, #0
 800e140:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800e144:	2303      	movs	r3, #3
 800e146:	e082      	b.n	800e24e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e14c:	b29b      	uxth	r3, r3
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d1c7      	bne.n	800e0e2 <HAL_SPI_Transmit+0x114>
 800e152:	e053      	b.n	800e1fc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	685b      	ldr	r3, [r3, #4]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d002      	beq.n	800e162 <HAL_SPI_Transmit+0x194>
 800e15c:	8b7b      	ldrh	r3, [r7, #26]
 800e15e:	2b01      	cmp	r3, #1
 800e160:	d147      	bne.n	800e1f2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	330c      	adds	r3, #12
 800e16c:	7812      	ldrb	r2, [r2, #0]
 800e16e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e174:	1c5a      	adds	r2, r3, #1
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e17e:	b29b      	uxth	r3, r3
 800e180:	3b01      	subs	r3, #1
 800e182:	b29a      	uxth	r2, r3
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800e188:	e033      	b.n	800e1f2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800e18a:	68fb      	ldr	r3, [r7, #12]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	689b      	ldr	r3, [r3, #8]
 800e190:	f003 0302 	and.w	r3, r3, #2
 800e194:	2b02      	cmp	r3, #2
 800e196:	d113      	bne.n	800e1c0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	330c      	adds	r3, #12
 800e1a2:	7812      	ldrb	r2, [r2, #0]
 800e1a4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1aa:	1c5a      	adds	r2, r3, #1
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e1b4:	b29b      	uxth	r3, r3
 800e1b6:	3b01      	subs	r3, #1
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	86da      	strh	r2, [r3, #54]	@ 0x36
 800e1be:	e018      	b.n	800e1f2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1c0:	f7fc ff0a 	bl	800afd8 <HAL_GetTick>
 800e1c4:	4602      	mov	r2, r0
 800e1c6:	69fb      	ldr	r3, [r7, #28]
 800e1c8:	1ad3      	subs	r3, r2, r3
 800e1ca:	683a      	ldr	r2, [r7, #0]
 800e1cc:	429a      	cmp	r2, r3
 800e1ce:	d803      	bhi.n	800e1d8 <HAL_SPI_Transmit+0x20a>
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1d6:	d102      	bne.n	800e1de <HAL_SPI_Transmit+0x210>
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d109      	bne.n	800e1f2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800e1ee:	2303      	movs	r3, #3
 800e1f0:	e02d      	b.n	800e24e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e1f6:	b29b      	uxth	r3, r3
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d1c6      	bne.n	800e18a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e1fc:	69fa      	ldr	r2, [r7, #28]
 800e1fe:	6839      	ldr	r1, [r7, #0]
 800e200:	68f8      	ldr	r0, [r7, #12]
 800e202:	f000 fbd9 	bl	800e9b8 <SPI_EndRxTxTransaction>
 800e206:	4603      	mov	r3, r0
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d002      	beq.n	800e212 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e20c:	68fb      	ldr	r3, [r7, #12]
 800e20e:	2220      	movs	r2, #32
 800e210:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	689b      	ldr	r3, [r3, #8]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d10a      	bne.n	800e230 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e21a:	2300      	movs	r3, #0
 800e21c:	617b      	str	r3, [r7, #20]
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	681b      	ldr	r3, [r3, #0]
 800e222:	68db      	ldr	r3, [r3, #12]
 800e224:	617b      	str	r3, [r7, #20]
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	617b      	str	r3, [r7, #20]
 800e22e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2201      	movs	r2, #1
 800e234:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	2200      	movs	r2, #0
 800e23c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e244:	2b00      	cmp	r3, #0
 800e246:	d001      	beq.n	800e24c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800e248:	2301      	movs	r3, #1
 800e24a:	e000      	b.n	800e24e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800e24c:	2300      	movs	r3, #0
  }
}
 800e24e:	4618      	mov	r0, r3
 800e250:	3720      	adds	r7, #32
 800e252:	46bd      	mov	sp, r7
 800e254:	bd80      	pop	{r7, pc}

0800e256 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e256:	b580      	push	{r7, lr}
 800e258:	b088      	sub	sp, #32
 800e25a:	af02      	add	r7, sp, #8
 800e25c:	60f8      	str	r0, [r7, #12]
 800e25e:	60b9      	str	r1, [r7, #8]
 800e260:	603b      	str	r3, [r7, #0]
 800e262:	4613      	mov	r3, r2
 800e264:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	2b01      	cmp	r3, #1
 800e270:	d001      	beq.n	800e276 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800e272:	2302      	movs	r3, #2
 800e274:	e104      	b.n	800e480 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e27e:	d112      	bne.n	800e2a6 <HAL_SPI_Receive+0x50>
 800e280:	68fb      	ldr	r3, [r7, #12]
 800e282:	689b      	ldr	r3, [r3, #8]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d10e      	bne.n	800e2a6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2204      	movs	r2, #4
 800e28c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800e290:	88fa      	ldrh	r2, [r7, #6]
 800e292:	683b      	ldr	r3, [r7, #0]
 800e294:	9300      	str	r3, [sp, #0]
 800e296:	4613      	mov	r3, r2
 800e298:	68ba      	ldr	r2, [r7, #8]
 800e29a:	68b9      	ldr	r1, [r7, #8]
 800e29c:	68f8      	ldr	r0, [r7, #12]
 800e29e:	f000 f8f3 	bl	800e488 <HAL_SPI_TransmitReceive>
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	e0ec      	b.n	800e480 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e2a6:	f7fc fe97 	bl	800afd8 <HAL_GetTick>
 800e2aa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d002      	beq.n	800e2b8 <HAL_SPI_Receive+0x62>
 800e2b2:	88fb      	ldrh	r3, [r7, #6]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d101      	bne.n	800e2bc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800e2b8:	2301      	movs	r3, #1
 800e2ba:	e0e1      	b.n	800e480 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e2c2:	2b01      	cmp	r3, #1
 800e2c4:	d101      	bne.n	800e2ca <HAL_SPI_Receive+0x74>
 800e2c6:	2302      	movs	r3, #2
 800e2c8:	e0da      	b.n	800e480 <HAL_SPI_Receive+0x22a>
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2204      	movs	r2, #4
 800e2d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2200      	movs	r2, #0
 800e2de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	68ba      	ldr	r2, [r7, #8]
 800e2e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	88fa      	ldrh	r2, [r7, #6]
 800e2ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	88fa      	ldrh	r2, [r7, #6]
 800e2f0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2200      	movs	r2, #0
 800e302:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2200      	movs	r2, #0
 800e308:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	2200      	movs	r2, #0
 800e30e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e310:	68fb      	ldr	r3, [r7, #12]
 800e312:	689b      	ldr	r3, [r3, #8]
 800e314:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e318:	d10f      	bne.n	800e33a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	681a      	ldr	r2, [r3, #0]
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e328:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800e338:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e344:	2b40      	cmp	r3, #64	@ 0x40
 800e346:	d007      	beq.n	800e358 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	681a      	ldr	r2, [r3, #0]
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e356:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	68db      	ldr	r3, [r3, #12]
 800e35c:	2b00      	cmp	r3, #0
 800e35e:	d170      	bne.n	800e442 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800e360:	e035      	b.n	800e3ce <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	689b      	ldr	r3, [r3, #8]
 800e368:	f003 0301 	and.w	r3, r3, #1
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d115      	bne.n	800e39c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800e370:	68fb      	ldr	r3, [r7, #12]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f103 020c 	add.w	r2, r3, #12
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e37c:	7812      	ldrb	r2, [r2, #0]
 800e37e:	b2d2      	uxtb	r2, r2
 800e380:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e382:	68fb      	ldr	r3, [r7, #12]
 800e384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e386:	1c5a      	adds	r2, r3, #1
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e390:	b29b      	uxth	r3, r3
 800e392:	3b01      	subs	r3, #1
 800e394:	b29a      	uxth	r2, r3
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e39a:	e018      	b.n	800e3ce <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e39c:	f7fc fe1c 	bl	800afd8 <HAL_GetTick>
 800e3a0:	4602      	mov	r2, r0
 800e3a2:	697b      	ldr	r3, [r7, #20]
 800e3a4:	1ad3      	subs	r3, r2, r3
 800e3a6:	683a      	ldr	r2, [r7, #0]
 800e3a8:	429a      	cmp	r2, r3
 800e3aa:	d803      	bhi.n	800e3b4 <HAL_SPI_Receive+0x15e>
 800e3ac:	683b      	ldr	r3, [r7, #0]
 800e3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3b2:	d102      	bne.n	800e3ba <HAL_SPI_Receive+0x164>
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d109      	bne.n	800e3ce <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2201      	movs	r2, #1
 800e3be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2200      	movs	r2, #0
 800e3c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800e3ca:	2303      	movs	r3, #3
 800e3cc:	e058      	b.n	800e480 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e3d2:	b29b      	uxth	r3, r3
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	d1c4      	bne.n	800e362 <HAL_SPI_Receive+0x10c>
 800e3d8:	e038      	b.n	800e44c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	689b      	ldr	r3, [r3, #8]
 800e3e0:	f003 0301 	and.w	r3, r3, #1
 800e3e4:	2b01      	cmp	r3, #1
 800e3e6:	d113      	bne.n	800e410 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	68da      	ldr	r2, [r3, #12]
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3f2:	b292      	uxth	r2, r2
 800e3f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3fa:	1c9a      	adds	r2, r3, #2
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e404:	b29b      	uxth	r3, r3
 800e406:	3b01      	subs	r3, #1
 800e408:	b29a      	uxth	r2, r3
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800e40e:	e018      	b.n	800e442 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e410:	f7fc fde2 	bl	800afd8 <HAL_GetTick>
 800e414:	4602      	mov	r2, r0
 800e416:	697b      	ldr	r3, [r7, #20]
 800e418:	1ad3      	subs	r3, r2, r3
 800e41a:	683a      	ldr	r2, [r7, #0]
 800e41c:	429a      	cmp	r2, r3
 800e41e:	d803      	bhi.n	800e428 <HAL_SPI_Receive+0x1d2>
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e426:	d102      	bne.n	800e42e <HAL_SPI_Receive+0x1d8>
 800e428:	683b      	ldr	r3, [r7, #0]
 800e42a:	2b00      	cmp	r3, #0
 800e42c:	d109      	bne.n	800e442 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	2201      	movs	r2, #1
 800e432:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	2200      	movs	r2, #0
 800e43a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800e43e:	2303      	movs	r3, #3
 800e440:	e01e      	b.n	800e480 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e446:	b29b      	uxth	r3, r3
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d1c6      	bne.n	800e3da <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e44c:	697a      	ldr	r2, [r7, #20]
 800e44e:	6839      	ldr	r1, [r7, #0]
 800e450:	68f8      	ldr	r0, [r7, #12]
 800e452:	f000 fa4b 	bl	800e8ec <SPI_EndRxTransaction>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d002      	beq.n	800e462 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e45c:	68fb      	ldr	r3, [r7, #12]
 800e45e:	2220      	movs	r2, #32
 800e460:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2201      	movs	r2, #1
 800e466:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	2200      	movs	r2, #0
 800e46e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e476:	2b00      	cmp	r3, #0
 800e478:	d001      	beq.n	800e47e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800e47a:	2301      	movs	r3, #1
 800e47c:	e000      	b.n	800e480 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800e47e:	2300      	movs	r3, #0
  }
}
 800e480:	4618      	mov	r0, r3
 800e482:	3718      	adds	r7, #24
 800e484:	46bd      	mov	sp, r7
 800e486:	bd80      	pop	{r7, pc}

0800e488 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800e488:	b580      	push	{r7, lr}
 800e48a:	b08a      	sub	sp, #40	@ 0x28
 800e48c:	af00      	add	r7, sp, #0
 800e48e:	60f8      	str	r0, [r7, #12]
 800e490:	60b9      	str	r1, [r7, #8]
 800e492:	607a      	str	r2, [r7, #4]
 800e494:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800e496:	2301      	movs	r3, #1
 800e498:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800e49a:	f7fc fd9d 	bl	800afd8 <HAL_GetTick>
 800e49e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e4a6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	685b      	ldr	r3, [r3, #4]
 800e4ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800e4ae:	887b      	ldrh	r3, [r7, #2]
 800e4b0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800e4b2:	7ffb      	ldrb	r3, [r7, #31]
 800e4b4:	2b01      	cmp	r3, #1
 800e4b6:	d00c      	beq.n	800e4d2 <HAL_SPI_TransmitReceive+0x4a>
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e4be:	d106      	bne.n	800e4ce <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	689b      	ldr	r3, [r3, #8]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d102      	bne.n	800e4ce <HAL_SPI_TransmitReceive+0x46>
 800e4c8:	7ffb      	ldrb	r3, [r7, #31]
 800e4ca:	2b04      	cmp	r3, #4
 800e4cc:	d001      	beq.n	800e4d2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800e4ce:	2302      	movs	r3, #2
 800e4d0:	e17f      	b.n	800e7d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d005      	beq.n	800e4e4 <HAL_SPI_TransmitReceive+0x5c>
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d002      	beq.n	800e4e4 <HAL_SPI_TransmitReceive+0x5c>
 800e4de:	887b      	ldrh	r3, [r7, #2]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d101      	bne.n	800e4e8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	e174      	b.n	800e7d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d101      	bne.n	800e4f6 <HAL_SPI_TransmitReceive+0x6e>
 800e4f2:	2302      	movs	r3, #2
 800e4f4:	e16d      	b.n	800e7d2 <HAL_SPI_TransmitReceive+0x34a>
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	2201      	movs	r2, #1
 800e4fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e504:	b2db      	uxtb	r3, r3
 800e506:	2b04      	cmp	r3, #4
 800e508:	d003      	beq.n	800e512 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800e50a:	68fb      	ldr	r3, [r7, #12]
 800e50c:	2205      	movs	r2, #5
 800e50e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800e512:	68fb      	ldr	r3, [r7, #12]
 800e514:	2200      	movs	r2, #0
 800e516:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800e518:	68fb      	ldr	r3, [r7, #12]
 800e51a:	687a      	ldr	r2, [r7, #4]
 800e51c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	887a      	ldrh	r2, [r7, #2]
 800e522:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	887a      	ldrh	r2, [r7, #2]
 800e528:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	68ba      	ldr	r2, [r7, #8]
 800e52e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800e530:	68fb      	ldr	r3, [r7, #12]
 800e532:	887a      	ldrh	r2, [r7, #2]
 800e534:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	887a      	ldrh	r2, [r7, #2]
 800e53a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2200      	movs	r2, #0
 800e540:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	2200      	movs	r2, #0
 800e546:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e552:	2b40      	cmp	r3, #64	@ 0x40
 800e554:	d007      	beq.n	800e566 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800e556:	68fb      	ldr	r3, [r7, #12]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	681a      	ldr	r2, [r3, #0]
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800e564:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	68db      	ldr	r3, [r3, #12]
 800e56a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e56e:	d17e      	bne.n	800e66e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e570:	68fb      	ldr	r3, [r7, #12]
 800e572:	685b      	ldr	r3, [r3, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d002      	beq.n	800e57e <HAL_SPI_TransmitReceive+0xf6>
 800e578:	8afb      	ldrh	r3, [r7, #22]
 800e57a:	2b01      	cmp	r3, #1
 800e57c:	d16c      	bne.n	800e658 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e582:	881a      	ldrh	r2, [r3, #0]
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800e58a:	68fb      	ldr	r3, [r7, #12]
 800e58c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e58e:	1c9a      	adds	r2, r3, #2
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e598:	b29b      	uxth	r3, r3
 800e59a:	3b01      	subs	r3, #1
 800e59c:	b29a      	uxth	r2, r3
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e5a2:	e059      	b.n	800e658 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	689b      	ldr	r3, [r3, #8]
 800e5aa:	f003 0302 	and.w	r3, r3, #2
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d11b      	bne.n	800e5ea <HAL_SPI_TransmitReceive+0x162>
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e5b6:	b29b      	uxth	r3, r3
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d016      	beq.n	800e5ea <HAL_SPI_TransmitReceive+0x162>
 800e5bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e5be:	2b01      	cmp	r3, #1
 800e5c0:	d113      	bne.n	800e5ea <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5c6:	881a      	ldrh	r2, [r3, #0]
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e5d2:	1c9a      	adds	r2, r3, #2
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e5dc:	b29b      	uxth	r3, r3
 800e5de:	3b01      	subs	r3, #1
 800e5e0:	b29a      	uxth	r2, r3
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	689b      	ldr	r3, [r3, #8]
 800e5f0:	f003 0301 	and.w	r3, r3, #1
 800e5f4:	2b01      	cmp	r3, #1
 800e5f6:	d119      	bne.n	800e62c <HAL_SPI_TransmitReceive+0x1a4>
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d014      	beq.n	800e62c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68da      	ldr	r2, [r3, #12]
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e60c:	b292      	uxth	r2, r2
 800e60e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e614:	1c9a      	adds	r2, r3, #2
 800e616:	68fb      	ldr	r3, [r7, #12]
 800e618:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e61e:	b29b      	uxth	r3, r3
 800e620:	3b01      	subs	r3, #1
 800e622:	b29a      	uxth	r2, r3
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e628:	2301      	movs	r3, #1
 800e62a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800e62c:	f7fc fcd4 	bl	800afd8 <HAL_GetTick>
 800e630:	4602      	mov	r2, r0
 800e632:	6a3b      	ldr	r3, [r7, #32]
 800e634:	1ad3      	subs	r3, r2, r3
 800e636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e638:	429a      	cmp	r2, r3
 800e63a:	d80d      	bhi.n	800e658 <HAL_SPI_TransmitReceive+0x1d0>
 800e63c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e63e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e642:	d009      	beq.n	800e658 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	2201      	movs	r2, #1
 800e648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2200      	movs	r2, #0
 800e650:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800e654:	2303      	movs	r3, #3
 800e656:	e0bc      	b.n	800e7d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e65c:	b29b      	uxth	r3, r3
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d1a0      	bne.n	800e5a4 <HAL_SPI_TransmitReceive+0x11c>
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e666:	b29b      	uxth	r3, r3
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d19b      	bne.n	800e5a4 <HAL_SPI_TransmitReceive+0x11c>
 800e66c:	e082      	b.n	800e774 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	685b      	ldr	r3, [r3, #4]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d002      	beq.n	800e67c <HAL_SPI_TransmitReceive+0x1f4>
 800e676:	8afb      	ldrh	r3, [r7, #22]
 800e678:	2b01      	cmp	r3, #1
 800e67a:	d171      	bne.n	800e760 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	330c      	adds	r3, #12
 800e686:	7812      	ldrb	r2, [r2, #0]
 800e688:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e68e:	1c5a      	adds	r2, r3, #1
 800e690:	68fb      	ldr	r3, [r7, #12]
 800e692:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800e694:	68fb      	ldr	r3, [r7, #12]
 800e696:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e698:	b29b      	uxth	r3, r3
 800e69a:	3b01      	subs	r3, #1
 800e69c:	b29a      	uxth	r2, r3
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e6a2:	e05d      	b.n	800e760 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	681b      	ldr	r3, [r3, #0]
 800e6a8:	689b      	ldr	r3, [r3, #8]
 800e6aa:	f003 0302 	and.w	r3, r3, #2
 800e6ae:	2b02      	cmp	r3, #2
 800e6b0:	d11c      	bne.n	800e6ec <HAL_SPI_TransmitReceive+0x264>
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e6b6:	b29b      	uxth	r3, r3
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d017      	beq.n	800e6ec <HAL_SPI_TransmitReceive+0x264>
 800e6bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e6be:	2b01      	cmp	r3, #1
 800e6c0:	d114      	bne.n	800e6ec <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	330c      	adds	r3, #12
 800e6cc:	7812      	ldrb	r2, [r2, #0]
 800e6ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e6d4:	1c5a      	adds	r2, r3, #1
 800e6d6:	68fb      	ldr	r3, [r7, #12]
 800e6d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800e6da:	68fb      	ldr	r3, [r7, #12]
 800e6dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e6de:	b29b      	uxth	r3, r3
 800e6e0:	3b01      	subs	r3, #1
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	689b      	ldr	r3, [r3, #8]
 800e6f2:	f003 0301 	and.w	r3, r3, #1
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d119      	bne.n	800e72e <HAL_SPI_TransmitReceive+0x2a6>
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e6fe:	b29b      	uxth	r3, r3
 800e700:	2b00      	cmp	r3, #0
 800e702:	d014      	beq.n	800e72e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	68da      	ldr	r2, [r3, #12]
 800e70a:	68fb      	ldr	r3, [r7, #12]
 800e70c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e70e:	b2d2      	uxtb	r2, r2
 800e710:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e716:	1c5a      	adds	r2, r3, #1
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e720:	b29b      	uxth	r3, r3
 800e722:	3b01      	subs	r3, #1
 800e724:	b29a      	uxth	r2, r3
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800e72a:	2301      	movs	r3, #1
 800e72c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800e72e:	f7fc fc53 	bl	800afd8 <HAL_GetTick>
 800e732:	4602      	mov	r2, r0
 800e734:	6a3b      	ldr	r3, [r7, #32]
 800e736:	1ad3      	subs	r3, r2, r3
 800e738:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e73a:	429a      	cmp	r2, r3
 800e73c:	d803      	bhi.n	800e746 <HAL_SPI_TransmitReceive+0x2be>
 800e73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e740:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e744:	d102      	bne.n	800e74c <HAL_SPI_TransmitReceive+0x2c4>
 800e746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d109      	bne.n	800e760 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2201      	movs	r2, #1
 800e750:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	2200      	movs	r2, #0
 800e758:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800e75c:	2303      	movs	r3, #3
 800e75e:	e038      	b.n	800e7d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800e764:	b29b      	uxth	r3, r3
 800e766:	2b00      	cmp	r3, #0
 800e768:	d19c      	bne.n	800e6a4 <HAL_SPI_TransmitReceive+0x21c>
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800e76e:	b29b      	uxth	r3, r3
 800e770:	2b00      	cmp	r3, #0
 800e772:	d197      	bne.n	800e6a4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800e774:	6a3a      	ldr	r2, [r7, #32]
 800e776:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800e778:	68f8      	ldr	r0, [r7, #12]
 800e77a:	f000 f91d 	bl	800e9b8 <SPI_EndRxTxTransaction>
 800e77e:	4603      	mov	r3, r0
 800e780:	2b00      	cmp	r3, #0
 800e782:	d008      	beq.n	800e796 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	2220      	movs	r2, #32
 800e788:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	2200      	movs	r2, #0
 800e78e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	e01d      	b.n	800e7d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800e796:	68fb      	ldr	r3, [r7, #12]
 800e798:	689b      	ldr	r3, [r3, #8]
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d10a      	bne.n	800e7b4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e79e:	2300      	movs	r3, #0
 800e7a0:	613b      	str	r3, [r7, #16]
 800e7a2:	68fb      	ldr	r3, [r7, #12]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	68db      	ldr	r3, [r3, #12]
 800e7a8:	613b      	str	r3, [r7, #16]
 800e7aa:	68fb      	ldr	r3, [r7, #12]
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	613b      	str	r3, [r7, #16]
 800e7b2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	2200      	movs	r2, #0
 800e7c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d001      	beq.n	800e7d0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800e7cc:	2301      	movs	r3, #1
 800e7ce:	e000      	b.n	800e7d2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800e7d0:	2300      	movs	r3, #0
  }
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3728      	adds	r7, #40	@ 0x28
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}
	...

0800e7dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b088      	sub	sp, #32
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	60b9      	str	r1, [r7, #8]
 800e7e6:	603b      	str	r3, [r7, #0]
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800e7ec:	f7fc fbf4 	bl	800afd8 <HAL_GetTick>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7f4:	1a9b      	subs	r3, r3, r2
 800e7f6:	683a      	ldr	r2, [r7, #0]
 800e7f8:	4413      	add	r3, r2
 800e7fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800e7fc:	f7fc fbec 	bl	800afd8 <HAL_GetTick>
 800e800:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800e802:	4b39      	ldr	r3, [pc, #228]	@ (800e8e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	015b      	lsls	r3, r3, #5
 800e808:	0d1b      	lsrs	r3, r3, #20
 800e80a:	69fa      	ldr	r2, [r7, #28]
 800e80c:	fb02 f303 	mul.w	r3, r2, r3
 800e810:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e812:	e054      	b.n	800e8be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e81a:	d050      	beq.n	800e8be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e81c:	f7fc fbdc 	bl	800afd8 <HAL_GetTick>
 800e820:	4602      	mov	r2, r0
 800e822:	69bb      	ldr	r3, [r7, #24]
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	69fa      	ldr	r2, [r7, #28]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d902      	bls.n	800e832 <SPI_WaitFlagStateUntilTimeout+0x56>
 800e82c:	69fb      	ldr	r3, [r7, #28]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d13d      	bne.n	800e8ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	685a      	ldr	r2, [r3, #4]
 800e838:	68fb      	ldr	r3, [r7, #12]
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e840:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e842:	68fb      	ldr	r3, [r7, #12]
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e84a:	d111      	bne.n	800e870 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	689b      	ldr	r3, [r3, #8]
 800e850:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e854:	d004      	beq.n	800e860 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e856:	68fb      	ldr	r3, [r7, #12]
 800e858:	689b      	ldr	r3, [r3, #8]
 800e85a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e85e:	d107      	bne.n	800e870 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	681a      	ldr	r2, [r3, #0]
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	681b      	ldr	r3, [r3, #0]
 800e86a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e86e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e874:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e878:	d10f      	bne.n	800e89a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	681a      	ldr	r2, [r3, #0]
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e888:	601a      	str	r2, [r3, #0]
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	681a      	ldr	r2, [r3, #0]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	2201      	movs	r2, #1
 800e89e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	2200      	movs	r2, #0
 800e8a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800e8aa:	2303      	movs	r3, #3
 800e8ac:	e017      	b.n	800e8de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d101      	bne.n	800e8b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e8b8:	697b      	ldr	r3, [r7, #20]
 800e8ba:	3b01      	subs	r3, #1
 800e8bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	689a      	ldr	r2, [r3, #8]
 800e8c4:	68bb      	ldr	r3, [r7, #8]
 800e8c6:	4013      	ands	r3, r2
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	bf0c      	ite	eq
 800e8ce:	2301      	moveq	r3, #1
 800e8d0:	2300      	movne	r3, #0
 800e8d2:	b2db      	uxtb	r3, r3
 800e8d4:	461a      	mov	r2, r3
 800e8d6:	79fb      	ldrb	r3, [r7, #7]
 800e8d8:	429a      	cmp	r2, r3
 800e8da:	d19b      	bne.n	800e814 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e8dc:	2300      	movs	r3, #0
}
 800e8de:	4618      	mov	r0, r3
 800e8e0:	3720      	adds	r7, #32
 800e8e2:	46bd      	mov	sp, r7
 800e8e4:	bd80      	pop	{r7, pc}
 800e8e6:	bf00      	nop
 800e8e8:	20000054 	.word	0x20000054

0800e8ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b086      	sub	sp, #24
 800e8f0:	af02      	add	r7, sp, #8
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	685b      	ldr	r3, [r3, #4]
 800e8fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e900:	d111      	bne.n	800e926 <SPI_EndRxTransaction+0x3a>
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	689b      	ldr	r3, [r3, #8]
 800e906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e90a:	d004      	beq.n	800e916 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	689b      	ldr	r3, [r3, #8]
 800e910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e914:	d107      	bne.n	800e926 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	681a      	ldr	r2, [r3, #0]
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e924:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	685b      	ldr	r3, [r3, #4]
 800e92a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e92e:	d12a      	bne.n	800e986 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	689b      	ldr	r3, [r3, #8]
 800e934:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e938:	d012      	beq.n	800e960 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	68bb      	ldr	r3, [r7, #8]
 800e940:	2200      	movs	r2, #0
 800e942:	2180      	movs	r1, #128	@ 0x80
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f7ff ff49 	bl	800e7dc <SPI_WaitFlagStateUntilTimeout>
 800e94a:	4603      	mov	r3, r0
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d02d      	beq.n	800e9ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e954:	f043 0220 	orr.w	r2, r3, #32
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800e95c:	2303      	movs	r3, #3
 800e95e:	e026      	b.n	800e9ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	9300      	str	r3, [sp, #0]
 800e964:	68bb      	ldr	r3, [r7, #8]
 800e966:	2200      	movs	r2, #0
 800e968:	2101      	movs	r1, #1
 800e96a:	68f8      	ldr	r0, [r7, #12]
 800e96c:	f7ff ff36 	bl	800e7dc <SPI_WaitFlagStateUntilTimeout>
 800e970:	4603      	mov	r3, r0
 800e972:	2b00      	cmp	r3, #0
 800e974:	d01a      	beq.n	800e9ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e97a:	f043 0220 	orr.w	r2, r3, #32
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800e982:	2303      	movs	r3, #3
 800e984:	e013      	b.n	800e9ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	9300      	str	r3, [sp, #0]
 800e98a:	68bb      	ldr	r3, [r7, #8]
 800e98c:	2200      	movs	r2, #0
 800e98e:	2101      	movs	r1, #1
 800e990:	68f8      	ldr	r0, [r7, #12]
 800e992:	f7ff ff23 	bl	800e7dc <SPI_WaitFlagStateUntilTimeout>
 800e996:	4603      	mov	r3, r0
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d007      	beq.n	800e9ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e99c:	68fb      	ldr	r3, [r7, #12]
 800e99e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9a0:	f043 0220 	orr.w	r2, r3, #32
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800e9a8:	2303      	movs	r3, #3
 800e9aa:	e000      	b.n	800e9ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e9ac:	2300      	movs	r3, #0
}
 800e9ae:	4618      	mov	r0, r3
 800e9b0:	3710      	adds	r7, #16
 800e9b2:	46bd      	mov	sp, r7
 800e9b4:	bd80      	pop	{r7, pc}
	...

0800e9b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e9b8:	b580      	push	{r7, lr}
 800e9ba:	b088      	sub	sp, #32
 800e9bc:	af02      	add	r7, sp, #8
 800e9be:	60f8      	str	r0, [r7, #12]
 800e9c0:	60b9      	str	r1, [r7, #8]
 800e9c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	9300      	str	r3, [sp, #0]
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	2201      	movs	r2, #1
 800e9cc:	2102      	movs	r1, #2
 800e9ce:	68f8      	ldr	r0, [r7, #12]
 800e9d0:	f7ff ff04 	bl	800e7dc <SPI_WaitFlagStateUntilTimeout>
 800e9d4:	4603      	mov	r3, r0
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d007      	beq.n	800e9ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e9de:	f043 0220 	orr.w	r2, r3, #32
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800e9e6:	2303      	movs	r3, #3
 800e9e8:	e032      	b.n	800ea50 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e9ea:	4b1b      	ldr	r3, [pc, #108]	@ (800ea58 <SPI_EndRxTxTransaction+0xa0>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	4a1b      	ldr	r2, [pc, #108]	@ (800ea5c <SPI_EndRxTxTransaction+0xa4>)
 800e9f0:	fba2 2303 	umull	r2, r3, r2, r3
 800e9f4:	0d5b      	lsrs	r3, r3, #21
 800e9f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e9fa:	fb02 f303 	mul.w	r3, r2, r3
 800e9fe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	685b      	ldr	r3, [r3, #4]
 800ea04:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ea08:	d112      	bne.n	800ea30 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	68bb      	ldr	r3, [r7, #8]
 800ea10:	2200      	movs	r2, #0
 800ea12:	2180      	movs	r1, #128	@ 0x80
 800ea14:	68f8      	ldr	r0, [r7, #12]
 800ea16:	f7ff fee1 	bl	800e7dc <SPI_WaitFlagStateUntilTimeout>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d016      	beq.n	800ea4e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ea24:	f043 0220 	orr.w	r2, r3, #32
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800ea2c:	2303      	movs	r3, #3
 800ea2e:	e00f      	b.n	800ea50 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00a      	beq.n	800ea4c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800ea36:	697b      	ldr	r3, [r7, #20]
 800ea38:	3b01      	subs	r3, #1
 800ea3a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	689b      	ldr	r3, [r3, #8]
 800ea42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ea46:	2b80      	cmp	r3, #128	@ 0x80
 800ea48:	d0f2      	beq.n	800ea30 <SPI_EndRxTxTransaction+0x78>
 800ea4a:	e000      	b.n	800ea4e <SPI_EndRxTxTransaction+0x96>
        break;
 800ea4c:	bf00      	nop
  }

  return HAL_OK;
 800ea4e:	2300      	movs	r3, #0
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3718      	adds	r7, #24
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	20000054 	.word	0x20000054
 800ea5c:	165e9f81 	.word	0x165e9f81

0800ea60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b082      	sub	sp, #8
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d101      	bne.n	800ea72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ea6e:	2301      	movs	r3, #1
 800ea70:	e041      	b.n	800eaf6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ea78:	b2db      	uxtb	r3, r3
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d106      	bne.n	800ea8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2200      	movs	r2, #0
 800ea82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f7fb fd64 	bl	800a554 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2202      	movs	r2, #2
 800ea90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	681a      	ldr	r2, [r3, #0]
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	3304      	adds	r3, #4
 800ea9c:	4619      	mov	r1, r3
 800ea9e:	4610      	mov	r0, r2
 800eaa0:	f000 fd28 	bl	800f4f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2201      	movs	r2, #1
 800eab0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2201      	movs	r2, #1
 800eab8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eabc:	687b      	ldr	r3, [r7, #4]
 800eabe:	2201      	movs	r2, #1
 800eac0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2201      	movs	r2, #1
 800eac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2201      	movs	r2, #1
 800ead0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2201      	movs	r2, #1
 800ead8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2201      	movs	r2, #1
 800eae0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2201      	movs	r2, #1
 800eae8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2201      	movs	r2, #1
 800eaf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3708      	adds	r7, #8
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}
	...

0800eb00 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800eb00:	b480      	push	{r7}
 800eb02:	b085      	sub	sp, #20
 800eb04:	af00      	add	r7, sp, #0
 800eb06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800eb0e:	b2db      	uxtb	r3, r3
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d001      	beq.n	800eb18 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800eb14:	2301      	movs	r3, #1
 800eb16:	e046      	b.n	800eba6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2202      	movs	r2, #2
 800eb1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	4a23      	ldr	r2, [pc, #140]	@ (800ebb4 <HAL_TIM_Base_Start+0xb4>)
 800eb26:	4293      	cmp	r3, r2
 800eb28:	d022      	beq.n	800eb70 <HAL_TIM_Base_Start+0x70>
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb32:	d01d      	beq.n	800eb70 <HAL_TIM_Base_Start+0x70>
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	4a1f      	ldr	r2, [pc, #124]	@ (800ebb8 <HAL_TIM_Base_Start+0xb8>)
 800eb3a:	4293      	cmp	r3, r2
 800eb3c:	d018      	beq.n	800eb70 <HAL_TIM_Base_Start+0x70>
 800eb3e:	687b      	ldr	r3, [r7, #4]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	4a1e      	ldr	r2, [pc, #120]	@ (800ebbc <HAL_TIM_Base_Start+0xbc>)
 800eb44:	4293      	cmp	r3, r2
 800eb46:	d013      	beq.n	800eb70 <HAL_TIM_Base_Start+0x70>
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	4a1c      	ldr	r2, [pc, #112]	@ (800ebc0 <HAL_TIM_Base_Start+0xc0>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d00e      	beq.n	800eb70 <HAL_TIM_Base_Start+0x70>
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	4a1b      	ldr	r2, [pc, #108]	@ (800ebc4 <HAL_TIM_Base_Start+0xc4>)
 800eb58:	4293      	cmp	r3, r2
 800eb5a:	d009      	beq.n	800eb70 <HAL_TIM_Base_Start+0x70>
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	4a19      	ldr	r2, [pc, #100]	@ (800ebc8 <HAL_TIM_Base_Start+0xc8>)
 800eb62:	4293      	cmp	r3, r2
 800eb64:	d004      	beq.n	800eb70 <HAL_TIM_Base_Start+0x70>
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4a18      	ldr	r2, [pc, #96]	@ (800ebcc <HAL_TIM_Base_Start+0xcc>)
 800eb6c:	4293      	cmp	r3, r2
 800eb6e:	d111      	bne.n	800eb94 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	689b      	ldr	r3, [r3, #8]
 800eb76:	f003 0307 	and.w	r3, r3, #7
 800eb7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	2b06      	cmp	r3, #6
 800eb80:	d010      	beq.n	800eba4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f042 0201 	orr.w	r2, r2, #1
 800eb90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800eb92:	e007      	b.n	800eba4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	681a      	ldr	r2, [r3, #0]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	f042 0201 	orr.w	r2, r2, #1
 800eba2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800eba4:	2300      	movs	r3, #0
}
 800eba6:	4618      	mov	r0, r3
 800eba8:	3714      	adds	r7, #20
 800ebaa:	46bd      	mov	sp, r7
 800ebac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb0:	4770      	bx	lr
 800ebb2:	bf00      	nop
 800ebb4:	40010000 	.word	0x40010000
 800ebb8:	40000400 	.word	0x40000400
 800ebbc:	40000800 	.word	0x40000800
 800ebc0:	40000c00 	.word	0x40000c00
 800ebc4:	40010400 	.word	0x40010400
 800ebc8:	40014000 	.word	0x40014000
 800ebcc:	40001800 	.word	0x40001800

0800ebd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ebd0:	b480      	push	{r7}
 800ebd2:	b085      	sub	sp, #20
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ebde:	b2db      	uxtb	r3, r3
 800ebe0:	2b01      	cmp	r3, #1
 800ebe2:	d001      	beq.n	800ebe8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ebe4:	2301      	movs	r3, #1
 800ebe6:	e04e      	b.n	800ec86 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2202      	movs	r2, #2
 800ebec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	68da      	ldr	r2, [r3, #12]
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	681b      	ldr	r3, [r3, #0]
 800ebfa:	f042 0201 	orr.w	r2, r2, #1
 800ebfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	4a23      	ldr	r2, [pc, #140]	@ (800ec94 <HAL_TIM_Base_Start_IT+0xc4>)
 800ec06:	4293      	cmp	r3, r2
 800ec08:	d022      	beq.n	800ec50 <HAL_TIM_Base_Start_IT+0x80>
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec12:	d01d      	beq.n	800ec50 <HAL_TIM_Base_Start_IT+0x80>
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	4a1f      	ldr	r2, [pc, #124]	@ (800ec98 <HAL_TIM_Base_Start_IT+0xc8>)
 800ec1a:	4293      	cmp	r3, r2
 800ec1c:	d018      	beq.n	800ec50 <HAL_TIM_Base_Start_IT+0x80>
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	4a1e      	ldr	r2, [pc, #120]	@ (800ec9c <HAL_TIM_Base_Start_IT+0xcc>)
 800ec24:	4293      	cmp	r3, r2
 800ec26:	d013      	beq.n	800ec50 <HAL_TIM_Base_Start_IT+0x80>
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	4a1c      	ldr	r2, [pc, #112]	@ (800eca0 <HAL_TIM_Base_Start_IT+0xd0>)
 800ec2e:	4293      	cmp	r3, r2
 800ec30:	d00e      	beq.n	800ec50 <HAL_TIM_Base_Start_IT+0x80>
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	4a1b      	ldr	r2, [pc, #108]	@ (800eca4 <HAL_TIM_Base_Start_IT+0xd4>)
 800ec38:	4293      	cmp	r3, r2
 800ec3a:	d009      	beq.n	800ec50 <HAL_TIM_Base_Start_IT+0x80>
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	4a19      	ldr	r2, [pc, #100]	@ (800eca8 <HAL_TIM_Base_Start_IT+0xd8>)
 800ec42:	4293      	cmp	r3, r2
 800ec44:	d004      	beq.n	800ec50 <HAL_TIM_Base_Start_IT+0x80>
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	4a18      	ldr	r2, [pc, #96]	@ (800ecac <HAL_TIM_Base_Start_IT+0xdc>)
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	d111      	bne.n	800ec74 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	689b      	ldr	r3, [r3, #8]
 800ec56:	f003 0307 	and.w	r3, r3, #7
 800ec5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2b06      	cmp	r3, #6
 800ec60:	d010      	beq.n	800ec84 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	681a      	ldr	r2, [r3, #0]
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f042 0201 	orr.w	r2, r2, #1
 800ec70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ec72:	e007      	b.n	800ec84 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	681a      	ldr	r2, [r3, #0]
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	f042 0201 	orr.w	r2, r2, #1
 800ec82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ec84:	2300      	movs	r3, #0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3714      	adds	r7, #20
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec90:	4770      	bx	lr
 800ec92:	bf00      	nop
 800ec94:	40010000 	.word	0x40010000
 800ec98:	40000400 	.word	0x40000400
 800ec9c:	40000800 	.word	0x40000800
 800eca0:	40000c00 	.word	0x40000c00
 800eca4:	40010400 	.word	0x40010400
 800eca8:	40014000 	.word	0x40014000
 800ecac:	40001800 	.word	0x40001800

0800ecb0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d101      	bne.n	800ecc2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	e041      	b.n	800ed46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d106      	bne.n	800ecdc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f000 f88d 	bl	800edf6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	2202      	movs	r2, #2
 800ece0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	681a      	ldr	r2, [r3, #0]
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	3304      	adds	r3, #4
 800ecec:	4619      	mov	r1, r3
 800ecee:	4610      	mov	r0, r2
 800ecf0:	f000 fc00 	bl	800f4f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	2201      	movs	r2, #1
 800ed00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	2201      	movs	r2, #1
 800ed08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	2201      	movs	r2, #1
 800ed10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	2201      	movs	r2, #1
 800ed18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	2201      	movs	r2, #1
 800ed20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	2201      	movs	r2, #1
 800ed28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	2201      	movs	r2, #1
 800ed30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	2201      	movs	r2, #1
 800ed38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2201      	movs	r2, #1
 800ed40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ed44:	2300      	movs	r3, #0
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3708      	adds	r7, #8
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}

0800ed4e <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800ed4e:	b580      	push	{r7, lr}
 800ed50:	b082      	sub	sp, #8
 800ed52:	af00      	add	r7, sp, #0
 800ed54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	2202      	movs	r2, #2
 800ed5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	6a1a      	ldr	r2, [r3, #32]
 800ed64:	f241 1311 	movw	r3, #4369	@ 0x1111
 800ed68:	4013      	ands	r3, r2
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d10f      	bne.n	800ed8e <HAL_TIM_PWM_DeInit+0x40>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	6a1a      	ldr	r2, [r3, #32]
 800ed74:	f240 4344 	movw	r3, #1092	@ 0x444
 800ed78:	4013      	ands	r3, r2
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d107      	bne.n	800ed8e <HAL_TIM_PWM_DeInit+0x40>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	681a      	ldr	r2, [r3, #0]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	f022 0201 	bic.w	r2, r2, #1
 800ed8c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 f83b 	bl	800ee0a <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	2200      	movs	r2, #0
 800ed98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	2200      	movs	r2, #0
 800eda0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2200      	movs	r2, #0
 800eda8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2200      	movs	r2, #0
 800edb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	2200      	movs	r2, #0
 800edb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2200      	movs	r2, #0
 800edc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2200      	movs	r2, #0
 800edd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	2200      	movs	r2, #0
 800edd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2200      	movs	r2, #0
 800ede0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	2200      	movs	r2, #0
 800ede8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800edec:	2300      	movs	r3, #0
}
 800edee:	4618      	mov	r0, r3
 800edf0:	3708      	adds	r7, #8
 800edf2:	46bd      	mov	sp, r7
 800edf4:	bd80      	pop	{r7, pc}

0800edf6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800edf6:	b480      	push	{r7}
 800edf8:	b083      	sub	sp, #12
 800edfa:	af00      	add	r7, sp, #0
 800edfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800edfe:	bf00      	nop
 800ee00:	370c      	adds	r7, #12
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr

0800ee0a <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800ee0a:	b480      	push	{r7}
 800ee0c:	b083      	sub	sp, #12
 800ee0e:	af00      	add	r7, sp, #0
 800ee10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800ee12:	bf00      	nop
 800ee14:	370c      	adds	r7, #12
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
	...

0800ee20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	2b00      	cmp	r3, #0
 800ee2e:	d109      	bne.n	800ee44 <HAL_TIM_PWM_Start+0x24>
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ee36:	b2db      	uxtb	r3, r3
 800ee38:	2b01      	cmp	r3, #1
 800ee3a:	bf14      	ite	ne
 800ee3c:	2301      	movne	r3, #1
 800ee3e:	2300      	moveq	r3, #0
 800ee40:	b2db      	uxtb	r3, r3
 800ee42:	e022      	b.n	800ee8a <HAL_TIM_PWM_Start+0x6a>
 800ee44:	683b      	ldr	r3, [r7, #0]
 800ee46:	2b04      	cmp	r3, #4
 800ee48:	d109      	bne.n	800ee5e <HAL_TIM_PWM_Start+0x3e>
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	2b01      	cmp	r3, #1
 800ee54:	bf14      	ite	ne
 800ee56:	2301      	movne	r3, #1
 800ee58:	2300      	moveq	r3, #0
 800ee5a:	b2db      	uxtb	r3, r3
 800ee5c:	e015      	b.n	800ee8a <HAL_TIM_PWM_Start+0x6a>
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	2b08      	cmp	r3, #8
 800ee62:	d109      	bne.n	800ee78 <HAL_TIM_PWM_Start+0x58>
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ee6a:	b2db      	uxtb	r3, r3
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	bf14      	ite	ne
 800ee70:	2301      	movne	r3, #1
 800ee72:	2300      	moveq	r3, #0
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	e008      	b.n	800ee8a <HAL_TIM_PWM_Start+0x6a>
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ee7e:	b2db      	uxtb	r3, r3
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	bf14      	ite	ne
 800ee84:	2301      	movne	r3, #1
 800ee86:	2300      	moveq	r3, #0
 800ee88:	b2db      	uxtb	r3, r3
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d001      	beq.n	800ee92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ee8e:	2301      	movs	r3, #1
 800ee90:	e07c      	b.n	800ef8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ee92:	683b      	ldr	r3, [r7, #0]
 800ee94:	2b00      	cmp	r3, #0
 800ee96:	d104      	bne.n	800eea2 <HAL_TIM_PWM_Start+0x82>
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2202      	movs	r2, #2
 800ee9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800eea0:	e013      	b.n	800eeca <HAL_TIM_PWM_Start+0xaa>
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	2b04      	cmp	r3, #4
 800eea6:	d104      	bne.n	800eeb2 <HAL_TIM_PWM_Start+0x92>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2202      	movs	r2, #2
 800eeac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800eeb0:	e00b      	b.n	800eeca <HAL_TIM_PWM_Start+0xaa>
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2b08      	cmp	r3, #8
 800eeb6:	d104      	bne.n	800eec2 <HAL_TIM_PWM_Start+0xa2>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	2202      	movs	r2, #2
 800eebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800eec0:	e003      	b.n	800eeca <HAL_TIM_PWM_Start+0xaa>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	2202      	movs	r2, #2
 800eec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	2201      	movs	r2, #1
 800eed0:	6839      	ldr	r1, [r7, #0]
 800eed2:	4618      	mov	r0, r3
 800eed4:	f000 fe04 	bl	800fae0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	681b      	ldr	r3, [r3, #0]
 800eedc:	4a2d      	ldr	r2, [pc, #180]	@ (800ef94 <HAL_TIM_PWM_Start+0x174>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d004      	beq.n	800eeec <HAL_TIM_PWM_Start+0xcc>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	4a2c      	ldr	r2, [pc, #176]	@ (800ef98 <HAL_TIM_PWM_Start+0x178>)
 800eee8:	4293      	cmp	r3, r2
 800eeea:	d101      	bne.n	800eef0 <HAL_TIM_PWM_Start+0xd0>
 800eeec:	2301      	movs	r3, #1
 800eeee:	e000      	b.n	800eef2 <HAL_TIM_PWM_Start+0xd2>
 800eef0:	2300      	movs	r3, #0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d007      	beq.n	800ef06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ef04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ef06:	687b      	ldr	r3, [r7, #4]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	4a22      	ldr	r2, [pc, #136]	@ (800ef94 <HAL_TIM_PWM_Start+0x174>)
 800ef0c:	4293      	cmp	r3, r2
 800ef0e:	d022      	beq.n	800ef56 <HAL_TIM_PWM_Start+0x136>
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	681b      	ldr	r3, [r3, #0]
 800ef14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ef18:	d01d      	beq.n	800ef56 <HAL_TIM_PWM_Start+0x136>
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ef9c <HAL_TIM_PWM_Start+0x17c>)
 800ef20:	4293      	cmp	r3, r2
 800ef22:	d018      	beq.n	800ef56 <HAL_TIM_PWM_Start+0x136>
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	4a1d      	ldr	r2, [pc, #116]	@ (800efa0 <HAL_TIM_PWM_Start+0x180>)
 800ef2a:	4293      	cmp	r3, r2
 800ef2c:	d013      	beq.n	800ef56 <HAL_TIM_PWM_Start+0x136>
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	4a1c      	ldr	r2, [pc, #112]	@ (800efa4 <HAL_TIM_PWM_Start+0x184>)
 800ef34:	4293      	cmp	r3, r2
 800ef36:	d00e      	beq.n	800ef56 <HAL_TIM_PWM_Start+0x136>
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	4a16      	ldr	r2, [pc, #88]	@ (800ef98 <HAL_TIM_PWM_Start+0x178>)
 800ef3e:	4293      	cmp	r3, r2
 800ef40:	d009      	beq.n	800ef56 <HAL_TIM_PWM_Start+0x136>
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	4a18      	ldr	r2, [pc, #96]	@ (800efa8 <HAL_TIM_PWM_Start+0x188>)
 800ef48:	4293      	cmp	r3, r2
 800ef4a:	d004      	beq.n	800ef56 <HAL_TIM_PWM_Start+0x136>
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	4a16      	ldr	r2, [pc, #88]	@ (800efac <HAL_TIM_PWM_Start+0x18c>)
 800ef52:	4293      	cmp	r3, r2
 800ef54:	d111      	bne.n	800ef7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	689b      	ldr	r3, [r3, #8]
 800ef5c:	f003 0307 	and.w	r3, r3, #7
 800ef60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	2b06      	cmp	r3, #6
 800ef66:	d010      	beq.n	800ef8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f042 0201 	orr.w	r2, r2, #1
 800ef76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef78:	e007      	b.n	800ef8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	681a      	ldr	r2, [r3, #0]
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	f042 0201 	orr.w	r2, r2, #1
 800ef88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ef8a:	2300      	movs	r3, #0
}
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	3710      	adds	r7, #16
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}
 800ef94:	40010000 	.word	0x40010000
 800ef98:	40010400 	.word	0x40010400
 800ef9c:	40000400 	.word	0x40000400
 800efa0:	40000800 	.word	0x40000800
 800efa4:	40000c00 	.word	0x40000c00
 800efa8:	40014000 	.word	0x40014000
 800efac:	40001800 	.word	0x40001800

0800efb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b084      	sub	sp, #16
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	68db      	ldr	r3, [r3, #12]
 800efbe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	691b      	ldr	r3, [r3, #16]
 800efc6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800efc8:	68bb      	ldr	r3, [r7, #8]
 800efca:	f003 0302 	and.w	r3, r3, #2
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d020      	beq.n	800f014 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f003 0302 	and.w	r3, r3, #2
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d01b      	beq.n	800f014 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	f06f 0202 	mvn.w	r2, #2
 800efe4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	2201      	movs	r2, #1
 800efea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	699b      	ldr	r3, [r3, #24]
 800eff2:	f003 0303 	and.w	r3, r3, #3
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d003      	beq.n	800f002 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fa5b 	bl	800f4b6 <HAL_TIM_IC_CaptureCallback>
 800f000:	e005      	b.n	800f00e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 fa4d 	bl	800f4a2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f000 fa5e 	bl	800f4ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	2200      	movs	r2, #0
 800f012:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800f014:	68bb      	ldr	r3, [r7, #8]
 800f016:	f003 0304 	and.w	r3, r3, #4
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d020      	beq.n	800f060 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	f003 0304 	and.w	r3, r3, #4
 800f024:	2b00      	cmp	r3, #0
 800f026:	d01b      	beq.n	800f060 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	681b      	ldr	r3, [r3, #0]
 800f02c:	f06f 0204 	mvn.w	r2, #4
 800f030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2202      	movs	r2, #2
 800f036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	699b      	ldr	r3, [r3, #24]
 800f03e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f042:	2b00      	cmp	r3, #0
 800f044:	d003      	beq.n	800f04e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 fa35 	bl	800f4b6 <HAL_TIM_IC_CaptureCallback>
 800f04c:	e005      	b.n	800f05a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 fa27 	bl	800f4a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f000 fa38 	bl	800f4ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	2200      	movs	r2, #0
 800f05e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800f060:	68bb      	ldr	r3, [r7, #8]
 800f062:	f003 0308 	and.w	r3, r3, #8
 800f066:	2b00      	cmp	r3, #0
 800f068:	d020      	beq.n	800f0ac <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	f003 0308 	and.w	r3, r3, #8
 800f070:	2b00      	cmp	r3, #0
 800f072:	d01b      	beq.n	800f0ac <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	681b      	ldr	r3, [r3, #0]
 800f078:	f06f 0208 	mvn.w	r2, #8
 800f07c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	2204      	movs	r2, #4
 800f082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	69db      	ldr	r3, [r3, #28]
 800f08a:	f003 0303 	and.w	r3, r3, #3
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d003      	beq.n	800f09a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f092:	6878      	ldr	r0, [r7, #4]
 800f094:	f000 fa0f 	bl	800f4b6 <HAL_TIM_IC_CaptureCallback>
 800f098:	e005      	b.n	800f0a6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f09a:	6878      	ldr	r0, [r7, #4]
 800f09c:	f000 fa01 	bl	800f4a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 fa12 	bl	800f4ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	2200      	movs	r2, #0
 800f0aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800f0ac:	68bb      	ldr	r3, [r7, #8]
 800f0ae:	f003 0310 	and.w	r3, r3, #16
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d020      	beq.n	800f0f8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	f003 0310 	and.w	r3, r3, #16
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d01b      	beq.n	800f0f8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	f06f 0210 	mvn.w	r2, #16
 800f0c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	2208      	movs	r2, #8
 800f0ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	69db      	ldr	r3, [r3, #28]
 800f0d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d003      	beq.n	800f0e6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0de:	6878      	ldr	r0, [r7, #4]
 800f0e0:	f000 f9e9 	bl	800f4b6 <HAL_TIM_IC_CaptureCallback>
 800f0e4:	e005      	b.n	800f0f2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0e6:	6878      	ldr	r0, [r7, #4]
 800f0e8:	f000 f9db 	bl	800f4a2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0ec:	6878      	ldr	r0, [r7, #4]
 800f0ee:	f000 f9ec 	bl	800f4ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800f0f8:	68bb      	ldr	r3, [r7, #8]
 800f0fa:	f003 0301 	and.w	r3, r3, #1
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d00c      	beq.n	800f11c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800f102:	68fb      	ldr	r3, [r7, #12]
 800f104:	f003 0301 	and.w	r3, r3, #1
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d007      	beq.n	800f11c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	f06f 0201 	mvn.w	r2, #1
 800f114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f116:	6878      	ldr	r0, [r7, #4]
 800f118:	f7f9 fed6 	bl	8008ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f122:	2b00      	cmp	r3, #0
 800f124:	d00c      	beq.n	800f140 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d007      	beq.n	800f140 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800f138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f000 fd7c 	bl	800fc38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00c      	beq.n	800f164 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f150:	2b00      	cmp	r3, #0
 800f152:	d007      	beq.n	800f164 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f15c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f15e:	6878      	ldr	r0, [r7, #4]
 800f160:	f000 f9bd 	bl	800f4de <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	f003 0320 	and.w	r3, r3, #32
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d00c      	beq.n	800f188 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	f003 0320 	and.w	r3, r3, #32
 800f174:	2b00      	cmp	r3, #0
 800f176:	d007      	beq.n	800f188 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	681b      	ldr	r3, [r3, #0]
 800f17c:	f06f 0220 	mvn.w	r2, #32
 800f180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f182:	6878      	ldr	r0, [r7, #4]
 800f184:	f000 fd4e 	bl	800fc24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f188:	bf00      	nop
 800f18a:	3710      	adds	r7, #16
 800f18c:	46bd      	mov	sp, r7
 800f18e:	bd80      	pop	{r7, pc}

0800f190 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f190:	b580      	push	{r7, lr}
 800f192:	b086      	sub	sp, #24
 800f194:	af00      	add	r7, sp, #0
 800f196:	60f8      	str	r0, [r7, #12]
 800f198:	60b9      	str	r1, [r7, #8]
 800f19a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f19c:	2300      	movs	r3, #0
 800f19e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f1a6:	2b01      	cmp	r3, #1
 800f1a8:	d101      	bne.n	800f1ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800f1aa:	2302      	movs	r3, #2
 800f1ac:	e0ae      	b.n	800f30c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2201      	movs	r2, #1
 800f1b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	2b0c      	cmp	r3, #12
 800f1ba:	f200 809f 	bhi.w	800f2fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800f1be:	a201      	add	r2, pc, #4	@ (adr r2, 800f1c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800f1c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1c4:	0800f1f9 	.word	0x0800f1f9
 800f1c8:	0800f2fd 	.word	0x0800f2fd
 800f1cc:	0800f2fd 	.word	0x0800f2fd
 800f1d0:	0800f2fd 	.word	0x0800f2fd
 800f1d4:	0800f239 	.word	0x0800f239
 800f1d8:	0800f2fd 	.word	0x0800f2fd
 800f1dc:	0800f2fd 	.word	0x0800f2fd
 800f1e0:	0800f2fd 	.word	0x0800f2fd
 800f1e4:	0800f27b 	.word	0x0800f27b
 800f1e8:	0800f2fd 	.word	0x0800f2fd
 800f1ec:	0800f2fd 	.word	0x0800f2fd
 800f1f0:	0800f2fd 	.word	0x0800f2fd
 800f1f4:	0800f2bb 	.word	0x0800f2bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	681b      	ldr	r3, [r3, #0]
 800f1fc:	68b9      	ldr	r1, [r7, #8]
 800f1fe:	4618      	mov	r0, r3
 800f200:	f000 fa24 	bl	800f64c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	699a      	ldr	r2, [r3, #24]
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	681b      	ldr	r3, [r3, #0]
 800f20e:	f042 0208 	orr.w	r2, r2, #8
 800f212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f214:	68fb      	ldr	r3, [r7, #12]
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	699a      	ldr	r2, [r3, #24]
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	f022 0204 	bic.w	r2, r2, #4
 800f222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	681b      	ldr	r3, [r3, #0]
 800f228:	6999      	ldr	r1, [r3, #24]
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	691a      	ldr	r2, [r3, #16]
 800f22e:	68fb      	ldr	r3, [r7, #12]
 800f230:	681b      	ldr	r3, [r3, #0]
 800f232:	430a      	orrs	r2, r1
 800f234:	619a      	str	r2, [r3, #24]
      break;
 800f236:	e064      	b.n	800f302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	68b9      	ldr	r1, [r7, #8]
 800f23e:	4618      	mov	r0, r3
 800f240:	f000 fa74 	bl	800f72c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f244:	68fb      	ldr	r3, [r7, #12]
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	699a      	ldr	r2, [r3, #24]
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f252:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	699a      	ldr	r2, [r3, #24]
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f262:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	6999      	ldr	r1, [r3, #24]
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	691b      	ldr	r3, [r3, #16]
 800f26e:	021a      	lsls	r2, r3, #8
 800f270:	68fb      	ldr	r3, [r7, #12]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	430a      	orrs	r2, r1
 800f276:	619a      	str	r2, [r3, #24]
      break;
 800f278:	e043      	b.n	800f302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	681b      	ldr	r3, [r3, #0]
 800f27e:	68b9      	ldr	r1, [r7, #8]
 800f280:	4618      	mov	r0, r3
 800f282:	f000 fac9 	bl	800f818 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	69da      	ldr	r2, [r3, #28]
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	681b      	ldr	r3, [r3, #0]
 800f290:	f042 0208 	orr.w	r2, r2, #8
 800f294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	69da      	ldr	r2, [r3, #28]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	f022 0204 	bic.w	r2, r2, #4
 800f2a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	69d9      	ldr	r1, [r3, #28]
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	691a      	ldr	r2, [r3, #16]
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	430a      	orrs	r2, r1
 800f2b6:	61da      	str	r2, [r3, #28]
      break;
 800f2b8:	e023      	b.n	800f302 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	681b      	ldr	r3, [r3, #0]
 800f2be:	68b9      	ldr	r1, [r7, #8]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	f000 fb1d 	bl	800f900 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	681b      	ldr	r3, [r3, #0]
 800f2ca:	69da      	ldr	r2, [r3, #28]
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	681b      	ldr	r3, [r3, #0]
 800f2d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800f2d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	69da      	ldr	r2, [r3, #28]
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	681b      	ldr	r3, [r3, #0]
 800f2e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800f2e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	69d9      	ldr	r1, [r3, #28]
 800f2ec:	68bb      	ldr	r3, [r7, #8]
 800f2ee:	691b      	ldr	r3, [r3, #16]
 800f2f0:	021a      	lsls	r2, r3, #8
 800f2f2:	68fb      	ldr	r3, [r7, #12]
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	430a      	orrs	r2, r1
 800f2f8:	61da      	str	r2, [r3, #28]
      break;
 800f2fa:	e002      	b.n	800f302 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800f2fc:	2301      	movs	r3, #1
 800f2fe:	75fb      	strb	r3, [r7, #23]
      break;
 800f300:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	2200      	movs	r2, #0
 800f306:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f30a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f30c:	4618      	mov	r0, r3
 800f30e:	3718      	adds	r7, #24
 800f310:	46bd      	mov	sp, r7
 800f312:	bd80      	pop	{r7, pc}

0800f314 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b084      	sub	sp, #16
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800f31e:	2300      	movs	r3, #0
 800f320:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d101      	bne.n	800f330 <HAL_TIM_ConfigClockSource+0x1c>
 800f32c:	2302      	movs	r3, #2
 800f32e:	e0b4      	b.n	800f49a <HAL_TIM_ConfigClockSource+0x186>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	2201      	movs	r2, #1
 800f334:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	2202      	movs	r2, #2
 800f33c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	689b      	ldr	r3, [r3, #8]
 800f346:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800f348:	68bb      	ldr	r3, [r7, #8]
 800f34a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800f34e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f356:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	68ba      	ldr	r2, [r7, #8]
 800f35e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f360:	683b      	ldr	r3, [r7, #0]
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f368:	d03e      	beq.n	800f3e8 <HAL_TIM_ConfigClockSource+0xd4>
 800f36a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800f36e:	f200 8087 	bhi.w	800f480 <HAL_TIM_ConfigClockSource+0x16c>
 800f372:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f376:	f000 8086 	beq.w	800f486 <HAL_TIM_ConfigClockSource+0x172>
 800f37a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800f37e:	d87f      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x16c>
 800f380:	2b70      	cmp	r3, #112	@ 0x70
 800f382:	d01a      	beq.n	800f3ba <HAL_TIM_ConfigClockSource+0xa6>
 800f384:	2b70      	cmp	r3, #112	@ 0x70
 800f386:	d87b      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x16c>
 800f388:	2b60      	cmp	r3, #96	@ 0x60
 800f38a:	d050      	beq.n	800f42e <HAL_TIM_ConfigClockSource+0x11a>
 800f38c:	2b60      	cmp	r3, #96	@ 0x60
 800f38e:	d877      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x16c>
 800f390:	2b50      	cmp	r3, #80	@ 0x50
 800f392:	d03c      	beq.n	800f40e <HAL_TIM_ConfigClockSource+0xfa>
 800f394:	2b50      	cmp	r3, #80	@ 0x50
 800f396:	d873      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x16c>
 800f398:	2b40      	cmp	r3, #64	@ 0x40
 800f39a:	d058      	beq.n	800f44e <HAL_TIM_ConfigClockSource+0x13a>
 800f39c:	2b40      	cmp	r3, #64	@ 0x40
 800f39e:	d86f      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x16c>
 800f3a0:	2b30      	cmp	r3, #48	@ 0x30
 800f3a2:	d064      	beq.n	800f46e <HAL_TIM_ConfigClockSource+0x15a>
 800f3a4:	2b30      	cmp	r3, #48	@ 0x30
 800f3a6:	d86b      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x16c>
 800f3a8:	2b20      	cmp	r3, #32
 800f3aa:	d060      	beq.n	800f46e <HAL_TIM_ConfigClockSource+0x15a>
 800f3ac:	2b20      	cmp	r3, #32
 800f3ae:	d867      	bhi.n	800f480 <HAL_TIM_ConfigClockSource+0x16c>
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d05c      	beq.n	800f46e <HAL_TIM_ConfigClockSource+0x15a>
 800f3b4:	2b10      	cmp	r3, #16
 800f3b6:	d05a      	beq.n	800f46e <HAL_TIM_ConfigClockSource+0x15a>
 800f3b8:	e062      	b.n	800f480 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f3c6:	683b      	ldr	r3, [r7, #0]
 800f3c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f3ca:	f000 fb69 	bl	800faa0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	689b      	ldr	r3, [r3, #8]
 800f3d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f3d6:	68bb      	ldr	r3, [r7, #8]
 800f3d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800f3dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	68ba      	ldr	r2, [r7, #8]
 800f3e4:	609a      	str	r2, [r3, #8]
      break;
 800f3e6:	e04f      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800f3f8:	f000 fb52 	bl	800faa0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	689a      	ldr	r2, [r3, #8]
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800f40a:	609a      	str	r2, [r3, #8]
      break;
 800f40c:	e03c      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f416:	683b      	ldr	r3, [r7, #0]
 800f418:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f41a:	461a      	mov	r2, r3
 800f41c:	f000 fac6 	bl	800f9ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	2150      	movs	r1, #80	@ 0x50
 800f426:	4618      	mov	r0, r3
 800f428:	f000 fb1f 	bl	800fa6a <TIM_ITRx_SetConfig>
      break;
 800f42c:	e02c      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f43a:	461a      	mov	r2, r3
 800f43c:	f000 fae5 	bl	800fa0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2160      	movs	r1, #96	@ 0x60
 800f446:	4618      	mov	r0, r3
 800f448:	f000 fb0f 	bl	800fa6a <TIM_ITRx_SetConfig>
      break;
 800f44c:	e01c      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800f452:	683b      	ldr	r3, [r7, #0]
 800f454:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f45a:	461a      	mov	r2, r3
 800f45c:	f000 faa6 	bl	800f9ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	681b      	ldr	r3, [r3, #0]
 800f464:	2140      	movs	r1, #64	@ 0x40
 800f466:	4618      	mov	r0, r3
 800f468:	f000 faff 	bl	800fa6a <TIM_ITRx_SetConfig>
      break;
 800f46c:	e00c      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681a      	ldr	r2, [r3, #0]
 800f472:	683b      	ldr	r3, [r7, #0]
 800f474:	681b      	ldr	r3, [r3, #0]
 800f476:	4619      	mov	r1, r3
 800f478:	4610      	mov	r0, r2
 800f47a:	f000 faf6 	bl	800fa6a <TIM_ITRx_SetConfig>
      break;
 800f47e:	e003      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800f480:	2301      	movs	r3, #1
 800f482:	73fb      	strb	r3, [r7, #15]
      break;
 800f484:	e000      	b.n	800f488 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800f486:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2201      	movs	r2, #1
 800f48c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2200      	movs	r2, #0
 800f494:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800f498:	7bfb      	ldrb	r3, [r7, #15]
}
 800f49a:	4618      	mov	r0, r3
 800f49c:	3710      	adds	r7, #16
 800f49e:	46bd      	mov	sp, r7
 800f4a0:	bd80      	pop	{r7, pc}

0800f4a2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f4a2:	b480      	push	{r7}
 800f4a4:	b083      	sub	sp, #12
 800f4a6:	af00      	add	r7, sp, #0
 800f4a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f4aa:	bf00      	nop
 800f4ac:	370c      	adds	r7, #12
 800f4ae:	46bd      	mov	sp, r7
 800f4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b4:	4770      	bx	lr

0800f4b6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f4b6:	b480      	push	{r7}
 800f4b8:	b083      	sub	sp, #12
 800f4ba:	af00      	add	r7, sp, #0
 800f4bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f4be:	bf00      	nop
 800f4c0:	370c      	adds	r7, #12
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4c8:	4770      	bx	lr

0800f4ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f4ca:	b480      	push	{r7}
 800f4cc:	b083      	sub	sp, #12
 800f4ce:	af00      	add	r7, sp, #0
 800f4d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f4d2:	bf00      	nop
 800f4d4:	370c      	adds	r7, #12
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr

0800f4de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f4de:	b480      	push	{r7}
 800f4e0:	b083      	sub	sp, #12
 800f4e2:	af00      	add	r7, sp, #0
 800f4e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f4e6:	bf00      	nop
 800f4e8:	370c      	adds	r7, #12
 800f4ea:	46bd      	mov	sp, r7
 800f4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f0:	4770      	bx	lr
	...

0800f4f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b085      	sub	sp, #20
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	4a46      	ldr	r2, [pc, #280]	@ (800f620 <TIM_Base_SetConfig+0x12c>)
 800f508:	4293      	cmp	r3, r2
 800f50a:	d013      	beq.n	800f534 <TIM_Base_SetConfig+0x40>
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f512:	d00f      	beq.n	800f534 <TIM_Base_SetConfig+0x40>
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	4a43      	ldr	r2, [pc, #268]	@ (800f624 <TIM_Base_SetConfig+0x130>)
 800f518:	4293      	cmp	r3, r2
 800f51a:	d00b      	beq.n	800f534 <TIM_Base_SetConfig+0x40>
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	4a42      	ldr	r2, [pc, #264]	@ (800f628 <TIM_Base_SetConfig+0x134>)
 800f520:	4293      	cmp	r3, r2
 800f522:	d007      	beq.n	800f534 <TIM_Base_SetConfig+0x40>
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	4a41      	ldr	r2, [pc, #260]	@ (800f62c <TIM_Base_SetConfig+0x138>)
 800f528:	4293      	cmp	r3, r2
 800f52a:	d003      	beq.n	800f534 <TIM_Base_SetConfig+0x40>
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	4a40      	ldr	r2, [pc, #256]	@ (800f630 <TIM_Base_SetConfig+0x13c>)
 800f530:	4293      	cmp	r3, r2
 800f532:	d108      	bne.n	800f546 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f534:	68fb      	ldr	r3, [r7, #12]
 800f536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f53a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f53c:	683b      	ldr	r3, [r7, #0]
 800f53e:	685b      	ldr	r3, [r3, #4]
 800f540:	68fa      	ldr	r2, [r7, #12]
 800f542:	4313      	orrs	r3, r2
 800f544:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4a35      	ldr	r2, [pc, #212]	@ (800f620 <TIM_Base_SetConfig+0x12c>)
 800f54a:	4293      	cmp	r3, r2
 800f54c:	d02b      	beq.n	800f5a6 <TIM_Base_SetConfig+0xb2>
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f554:	d027      	beq.n	800f5a6 <TIM_Base_SetConfig+0xb2>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4a32      	ldr	r2, [pc, #200]	@ (800f624 <TIM_Base_SetConfig+0x130>)
 800f55a:	4293      	cmp	r3, r2
 800f55c:	d023      	beq.n	800f5a6 <TIM_Base_SetConfig+0xb2>
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	4a31      	ldr	r2, [pc, #196]	@ (800f628 <TIM_Base_SetConfig+0x134>)
 800f562:	4293      	cmp	r3, r2
 800f564:	d01f      	beq.n	800f5a6 <TIM_Base_SetConfig+0xb2>
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a30      	ldr	r2, [pc, #192]	@ (800f62c <TIM_Base_SetConfig+0x138>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d01b      	beq.n	800f5a6 <TIM_Base_SetConfig+0xb2>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4a2f      	ldr	r2, [pc, #188]	@ (800f630 <TIM_Base_SetConfig+0x13c>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d017      	beq.n	800f5a6 <TIM_Base_SetConfig+0xb2>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4a2e      	ldr	r2, [pc, #184]	@ (800f634 <TIM_Base_SetConfig+0x140>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d013      	beq.n	800f5a6 <TIM_Base_SetConfig+0xb2>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4a2d      	ldr	r2, [pc, #180]	@ (800f638 <TIM_Base_SetConfig+0x144>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d00f      	beq.n	800f5a6 <TIM_Base_SetConfig+0xb2>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4a2c      	ldr	r2, [pc, #176]	@ (800f63c <TIM_Base_SetConfig+0x148>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d00b      	beq.n	800f5a6 <TIM_Base_SetConfig+0xb2>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4a2b      	ldr	r2, [pc, #172]	@ (800f640 <TIM_Base_SetConfig+0x14c>)
 800f592:	4293      	cmp	r3, r2
 800f594:	d007      	beq.n	800f5a6 <TIM_Base_SetConfig+0xb2>
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	4a2a      	ldr	r2, [pc, #168]	@ (800f644 <TIM_Base_SetConfig+0x150>)
 800f59a:	4293      	cmp	r3, r2
 800f59c:	d003      	beq.n	800f5a6 <TIM_Base_SetConfig+0xb2>
 800f59e:	687b      	ldr	r3, [r7, #4]
 800f5a0:	4a29      	ldr	r2, [pc, #164]	@ (800f648 <TIM_Base_SetConfig+0x154>)
 800f5a2:	4293      	cmp	r3, r2
 800f5a4:	d108      	bne.n	800f5b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f5ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	4313      	orrs	r3, r2
 800f5b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f5b8:	68fb      	ldr	r3, [r7, #12]
 800f5ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800f5be:	683b      	ldr	r3, [r7, #0]
 800f5c0:	695b      	ldr	r3, [r3, #20]
 800f5c2:	4313      	orrs	r3, r2
 800f5c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	68fa      	ldr	r2, [r7, #12]
 800f5ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f5cc:	683b      	ldr	r3, [r7, #0]
 800f5ce:	689a      	ldr	r2, [r3, #8]
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f5d4:	683b      	ldr	r3, [r7, #0]
 800f5d6:	681a      	ldr	r2, [r3, #0]
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	4a10      	ldr	r2, [pc, #64]	@ (800f620 <TIM_Base_SetConfig+0x12c>)
 800f5e0:	4293      	cmp	r3, r2
 800f5e2:	d003      	beq.n	800f5ec <TIM_Base_SetConfig+0xf8>
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	4a12      	ldr	r2, [pc, #72]	@ (800f630 <TIM_Base_SetConfig+0x13c>)
 800f5e8:	4293      	cmp	r3, r2
 800f5ea:	d103      	bne.n	800f5f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	691a      	ldr	r2, [r3, #16]
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	2201      	movs	r2, #1
 800f5f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	691b      	ldr	r3, [r3, #16]
 800f5fe:	f003 0301 	and.w	r3, r3, #1
 800f602:	2b01      	cmp	r3, #1
 800f604:	d105      	bne.n	800f612 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	691b      	ldr	r3, [r3, #16]
 800f60a:	f023 0201 	bic.w	r2, r3, #1
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	611a      	str	r2, [r3, #16]
  }
}
 800f612:	bf00      	nop
 800f614:	3714      	adds	r7, #20
 800f616:	46bd      	mov	sp, r7
 800f618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	40010000 	.word	0x40010000
 800f624:	40000400 	.word	0x40000400
 800f628:	40000800 	.word	0x40000800
 800f62c:	40000c00 	.word	0x40000c00
 800f630:	40010400 	.word	0x40010400
 800f634:	40014000 	.word	0x40014000
 800f638:	40014400 	.word	0x40014400
 800f63c:	40014800 	.word	0x40014800
 800f640:	40001800 	.word	0x40001800
 800f644:	40001c00 	.word	0x40001c00
 800f648:	40002000 	.word	0x40002000

0800f64c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f64c:	b480      	push	{r7}
 800f64e:	b087      	sub	sp, #28
 800f650:	af00      	add	r7, sp, #0
 800f652:	6078      	str	r0, [r7, #4]
 800f654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6a1b      	ldr	r3, [r3, #32]
 800f65a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	6a1b      	ldr	r3, [r3, #32]
 800f660:	f023 0201 	bic.w	r2, r3, #1
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	685b      	ldr	r3, [r3, #4]
 800f66c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	699b      	ldr	r3, [r3, #24]
 800f672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f67a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f023 0303 	bic.w	r3, r3, #3
 800f682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f684:	683b      	ldr	r3, [r7, #0]
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	68fa      	ldr	r2, [r7, #12]
 800f68a:	4313      	orrs	r3, r2
 800f68c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f68e:	697b      	ldr	r3, [r7, #20]
 800f690:	f023 0302 	bic.w	r3, r3, #2
 800f694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f696:	683b      	ldr	r3, [r7, #0]
 800f698:	689b      	ldr	r3, [r3, #8]
 800f69a:	697a      	ldr	r2, [r7, #20]
 800f69c:	4313      	orrs	r3, r2
 800f69e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	4a20      	ldr	r2, [pc, #128]	@ (800f724 <TIM_OC1_SetConfig+0xd8>)
 800f6a4:	4293      	cmp	r3, r2
 800f6a6:	d003      	beq.n	800f6b0 <TIM_OC1_SetConfig+0x64>
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	4a1f      	ldr	r2, [pc, #124]	@ (800f728 <TIM_OC1_SetConfig+0xdc>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d10c      	bne.n	800f6ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	f023 0308 	bic.w	r3, r3, #8
 800f6b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	68db      	ldr	r3, [r3, #12]
 800f6bc:	697a      	ldr	r2, [r7, #20]
 800f6be:	4313      	orrs	r3, r2
 800f6c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f6c2:	697b      	ldr	r3, [r7, #20]
 800f6c4:	f023 0304 	bic.w	r3, r3, #4
 800f6c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	4a15      	ldr	r2, [pc, #84]	@ (800f724 <TIM_OC1_SetConfig+0xd8>)
 800f6ce:	4293      	cmp	r3, r2
 800f6d0:	d003      	beq.n	800f6da <TIM_OC1_SetConfig+0x8e>
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	4a14      	ldr	r2, [pc, #80]	@ (800f728 <TIM_OC1_SetConfig+0xdc>)
 800f6d6:	4293      	cmp	r3, r2
 800f6d8:	d111      	bne.n	800f6fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f6da:	693b      	ldr	r3, [r7, #16]
 800f6dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f6e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f6e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	695b      	ldr	r3, [r3, #20]
 800f6ee:	693a      	ldr	r2, [r7, #16]
 800f6f0:	4313      	orrs	r3, r2
 800f6f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f6f4:	683b      	ldr	r3, [r7, #0]
 800f6f6:	699b      	ldr	r3, [r3, #24]
 800f6f8:	693a      	ldr	r2, [r7, #16]
 800f6fa:	4313      	orrs	r3, r2
 800f6fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	693a      	ldr	r2, [r7, #16]
 800f702:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f70a:	683b      	ldr	r3, [r7, #0]
 800f70c:	685a      	ldr	r2, [r3, #4]
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	697a      	ldr	r2, [r7, #20]
 800f716:	621a      	str	r2, [r3, #32]
}
 800f718:	bf00      	nop
 800f71a:	371c      	adds	r7, #28
 800f71c:	46bd      	mov	sp, r7
 800f71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f722:	4770      	bx	lr
 800f724:	40010000 	.word	0x40010000
 800f728:	40010400 	.word	0x40010400

0800f72c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f72c:	b480      	push	{r7}
 800f72e:	b087      	sub	sp, #28
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]
 800f734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	6a1b      	ldr	r3, [r3, #32]
 800f73a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	6a1b      	ldr	r3, [r3, #32]
 800f740:	f023 0210 	bic.w	r2, r3, #16
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	685b      	ldr	r3, [r3, #4]
 800f74c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	699b      	ldr	r3, [r3, #24]
 800f752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f754:	68fb      	ldr	r3, [r7, #12]
 800f756:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f75a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	021b      	lsls	r3, r3, #8
 800f76a:	68fa      	ldr	r2, [r7, #12]
 800f76c:	4313      	orrs	r3, r2
 800f76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f770:	697b      	ldr	r3, [r7, #20]
 800f772:	f023 0320 	bic.w	r3, r3, #32
 800f776:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	689b      	ldr	r3, [r3, #8]
 800f77c:	011b      	lsls	r3, r3, #4
 800f77e:	697a      	ldr	r2, [r7, #20]
 800f780:	4313      	orrs	r3, r2
 800f782:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	4a22      	ldr	r2, [pc, #136]	@ (800f810 <TIM_OC2_SetConfig+0xe4>)
 800f788:	4293      	cmp	r3, r2
 800f78a:	d003      	beq.n	800f794 <TIM_OC2_SetConfig+0x68>
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	4a21      	ldr	r2, [pc, #132]	@ (800f814 <TIM_OC2_SetConfig+0xe8>)
 800f790:	4293      	cmp	r3, r2
 800f792:	d10d      	bne.n	800f7b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f79a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	011b      	lsls	r3, r3, #4
 800f7a2:	697a      	ldr	r2, [r7, #20]
 800f7a4:	4313      	orrs	r3, r2
 800f7a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f7a8:	697b      	ldr	r3, [r7, #20]
 800f7aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f7ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	4a17      	ldr	r2, [pc, #92]	@ (800f810 <TIM_OC2_SetConfig+0xe4>)
 800f7b4:	4293      	cmp	r3, r2
 800f7b6:	d003      	beq.n	800f7c0 <TIM_OC2_SetConfig+0x94>
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	4a16      	ldr	r2, [pc, #88]	@ (800f814 <TIM_OC2_SetConfig+0xe8>)
 800f7bc:	4293      	cmp	r3, r2
 800f7be:	d113      	bne.n	800f7e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f7c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f7c8:	693b      	ldr	r3, [r7, #16]
 800f7ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f7ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	695b      	ldr	r3, [r3, #20]
 800f7d4:	009b      	lsls	r3, r3, #2
 800f7d6:	693a      	ldr	r2, [r7, #16]
 800f7d8:	4313      	orrs	r3, r2
 800f7da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	699b      	ldr	r3, [r3, #24]
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	693a      	ldr	r2, [r7, #16]
 800f7e4:	4313      	orrs	r3, r2
 800f7e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	693a      	ldr	r2, [r7, #16]
 800f7ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	68fa      	ldr	r2, [r7, #12]
 800f7f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f7f4:	683b      	ldr	r3, [r7, #0]
 800f7f6:	685a      	ldr	r2, [r3, #4]
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	697a      	ldr	r2, [r7, #20]
 800f800:	621a      	str	r2, [r3, #32]
}
 800f802:	bf00      	nop
 800f804:	371c      	adds	r7, #28
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr
 800f80e:	bf00      	nop
 800f810:	40010000 	.word	0x40010000
 800f814:	40010400 	.word	0x40010400

0800f818 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f818:	b480      	push	{r7}
 800f81a:	b087      	sub	sp, #28
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
 800f820:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	6a1b      	ldr	r3, [r3, #32]
 800f826:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	6a1b      	ldr	r3, [r3, #32]
 800f82c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	685b      	ldr	r3, [r3, #4]
 800f838:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	69db      	ldr	r3, [r3, #28]
 800f83e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f846:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f023 0303 	bic.w	r3, r3, #3
 800f84e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	68fa      	ldr	r2, [r7, #12]
 800f856:	4313      	orrs	r3, r2
 800f858:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f860:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f862:	683b      	ldr	r3, [r7, #0]
 800f864:	689b      	ldr	r3, [r3, #8]
 800f866:	021b      	lsls	r3, r3, #8
 800f868:	697a      	ldr	r2, [r7, #20]
 800f86a:	4313      	orrs	r3, r2
 800f86c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	4a21      	ldr	r2, [pc, #132]	@ (800f8f8 <TIM_OC3_SetConfig+0xe0>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d003      	beq.n	800f87e <TIM_OC3_SetConfig+0x66>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	4a20      	ldr	r2, [pc, #128]	@ (800f8fc <TIM_OC3_SetConfig+0xe4>)
 800f87a:	4293      	cmp	r3, r2
 800f87c:	d10d      	bne.n	800f89a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f87e:	697b      	ldr	r3, [r7, #20]
 800f880:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f884:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	68db      	ldr	r3, [r3, #12]
 800f88a:	021b      	lsls	r3, r3, #8
 800f88c:	697a      	ldr	r2, [r7, #20]
 800f88e:	4313      	orrs	r3, r2
 800f890:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f892:	697b      	ldr	r3, [r7, #20]
 800f894:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f898:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	4a16      	ldr	r2, [pc, #88]	@ (800f8f8 <TIM_OC3_SetConfig+0xe0>)
 800f89e:	4293      	cmp	r3, r2
 800f8a0:	d003      	beq.n	800f8aa <TIM_OC3_SetConfig+0x92>
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	4a15      	ldr	r2, [pc, #84]	@ (800f8fc <TIM_OC3_SetConfig+0xe4>)
 800f8a6:	4293      	cmp	r3, r2
 800f8a8:	d113      	bne.n	800f8d2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f8aa:	693b      	ldr	r3, [r7, #16]
 800f8ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f8b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f8b2:	693b      	ldr	r3, [r7, #16]
 800f8b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f8b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f8ba:	683b      	ldr	r3, [r7, #0]
 800f8bc:	695b      	ldr	r3, [r3, #20]
 800f8be:	011b      	lsls	r3, r3, #4
 800f8c0:	693a      	ldr	r2, [r7, #16]
 800f8c2:	4313      	orrs	r3, r2
 800f8c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f8c6:	683b      	ldr	r3, [r7, #0]
 800f8c8:	699b      	ldr	r3, [r3, #24]
 800f8ca:	011b      	lsls	r3, r3, #4
 800f8cc:	693a      	ldr	r2, [r7, #16]
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	693a      	ldr	r2, [r7, #16]
 800f8d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	68fa      	ldr	r2, [r7, #12]
 800f8dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	685a      	ldr	r2, [r3, #4]
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	697a      	ldr	r2, [r7, #20]
 800f8ea:	621a      	str	r2, [r3, #32]
}
 800f8ec:	bf00      	nop
 800f8ee:	371c      	adds	r7, #28
 800f8f0:	46bd      	mov	sp, r7
 800f8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f6:	4770      	bx	lr
 800f8f8:	40010000 	.word	0x40010000
 800f8fc:	40010400 	.word	0x40010400

0800f900 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f900:	b480      	push	{r7}
 800f902:	b087      	sub	sp, #28
 800f904:	af00      	add	r7, sp, #0
 800f906:	6078      	str	r0, [r7, #4]
 800f908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6a1b      	ldr	r3, [r3, #32]
 800f90e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	6a1b      	ldr	r3, [r3, #32]
 800f914:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	685b      	ldr	r3, [r3, #4]
 800f920:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	69db      	ldr	r3, [r3, #28]
 800f926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f92e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f936:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f938:	683b      	ldr	r3, [r7, #0]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	021b      	lsls	r3, r3, #8
 800f93e:	68fa      	ldr	r2, [r7, #12]
 800f940:	4313      	orrs	r3, r2
 800f942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f94a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	689b      	ldr	r3, [r3, #8]
 800f950:	031b      	lsls	r3, r3, #12
 800f952:	693a      	ldr	r2, [r7, #16]
 800f954:	4313      	orrs	r3, r2
 800f956:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	4a12      	ldr	r2, [pc, #72]	@ (800f9a4 <TIM_OC4_SetConfig+0xa4>)
 800f95c:	4293      	cmp	r3, r2
 800f95e:	d003      	beq.n	800f968 <TIM_OC4_SetConfig+0x68>
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	4a11      	ldr	r2, [pc, #68]	@ (800f9a8 <TIM_OC4_SetConfig+0xa8>)
 800f964:	4293      	cmp	r3, r2
 800f966:	d109      	bne.n	800f97c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f96e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	695b      	ldr	r3, [r3, #20]
 800f974:	019b      	lsls	r3, r3, #6
 800f976:	697a      	ldr	r2, [r7, #20]
 800f978:	4313      	orrs	r3, r2
 800f97a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	697a      	ldr	r2, [r7, #20]
 800f980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	685a      	ldr	r2, [r3, #4]
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	693a      	ldr	r2, [r7, #16]
 800f994:	621a      	str	r2, [r3, #32]
}
 800f996:	bf00      	nop
 800f998:	371c      	adds	r7, #28
 800f99a:	46bd      	mov	sp, r7
 800f99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a0:	4770      	bx	lr
 800f9a2:	bf00      	nop
 800f9a4:	40010000 	.word	0x40010000
 800f9a8:	40010400 	.word	0x40010400

0800f9ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f9ac:	b480      	push	{r7}
 800f9ae:	b087      	sub	sp, #28
 800f9b0:	af00      	add	r7, sp, #0
 800f9b2:	60f8      	str	r0, [r7, #12]
 800f9b4:	60b9      	str	r1, [r7, #8]
 800f9b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	6a1b      	ldr	r3, [r3, #32]
 800f9bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	6a1b      	ldr	r3, [r3, #32]
 800f9c2:	f023 0201 	bic.w	r2, r3, #1
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f9ca:	68fb      	ldr	r3, [r7, #12]
 800f9cc:	699b      	ldr	r3, [r3, #24]
 800f9ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f9d0:	693b      	ldr	r3, [r7, #16]
 800f9d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f9d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	011b      	lsls	r3, r3, #4
 800f9dc:	693a      	ldr	r2, [r7, #16]
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	f023 030a 	bic.w	r3, r3, #10
 800f9e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f9ea:	697a      	ldr	r2, [r7, #20]
 800f9ec:	68bb      	ldr	r3, [r7, #8]
 800f9ee:	4313      	orrs	r3, r2
 800f9f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	693a      	ldr	r2, [r7, #16]
 800f9f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f9f8:	68fb      	ldr	r3, [r7, #12]
 800f9fa:	697a      	ldr	r2, [r7, #20]
 800f9fc:	621a      	str	r2, [r3, #32]
}
 800f9fe:	bf00      	nop
 800fa00:	371c      	adds	r7, #28
 800fa02:	46bd      	mov	sp, r7
 800fa04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa08:	4770      	bx	lr

0800fa0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800fa0a:	b480      	push	{r7}
 800fa0c:	b087      	sub	sp, #28
 800fa0e:	af00      	add	r7, sp, #0
 800fa10:	60f8      	str	r0, [r7, #12]
 800fa12:	60b9      	str	r1, [r7, #8]
 800fa14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800fa16:	68fb      	ldr	r3, [r7, #12]
 800fa18:	6a1b      	ldr	r3, [r3, #32]
 800fa1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6a1b      	ldr	r3, [r3, #32]
 800fa20:	f023 0210 	bic.w	r2, r3, #16
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	699b      	ldr	r3, [r3, #24]
 800fa2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800fa2e:	693b      	ldr	r3, [r7, #16]
 800fa30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800fa34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	031b      	lsls	r3, r3, #12
 800fa3a:	693a      	ldr	r2, [r7, #16]
 800fa3c:	4313      	orrs	r3, r2
 800fa3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800fa46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800fa48:	68bb      	ldr	r3, [r7, #8]
 800fa4a:	011b      	lsls	r3, r3, #4
 800fa4c:	697a      	ldr	r2, [r7, #20]
 800fa4e:	4313      	orrs	r3, r2
 800fa50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	693a      	ldr	r2, [r7, #16]
 800fa56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800fa58:	68fb      	ldr	r3, [r7, #12]
 800fa5a:	697a      	ldr	r2, [r7, #20]
 800fa5c:	621a      	str	r2, [r3, #32]
}
 800fa5e:	bf00      	nop
 800fa60:	371c      	adds	r7, #28
 800fa62:	46bd      	mov	sp, r7
 800fa64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa68:	4770      	bx	lr

0800fa6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800fa6a:	b480      	push	{r7}
 800fa6c:	b085      	sub	sp, #20
 800fa6e:	af00      	add	r7, sp, #0
 800fa70:	6078      	str	r0, [r7, #4]
 800fa72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	689b      	ldr	r3, [r3, #8]
 800fa78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fa80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800fa82:	683a      	ldr	r2, [r7, #0]
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	4313      	orrs	r3, r2
 800fa88:	f043 0307 	orr.w	r3, r3, #7
 800fa8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	68fa      	ldr	r2, [r7, #12]
 800fa92:	609a      	str	r2, [r3, #8]
}
 800fa94:	bf00      	nop
 800fa96:	3714      	adds	r7, #20
 800fa98:	46bd      	mov	sp, r7
 800fa9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9e:	4770      	bx	lr

0800faa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800faa0:	b480      	push	{r7}
 800faa2:	b087      	sub	sp, #28
 800faa4:	af00      	add	r7, sp, #0
 800faa6:	60f8      	str	r0, [r7, #12]
 800faa8:	60b9      	str	r1, [r7, #8]
 800faaa:	607a      	str	r2, [r7, #4]
 800faac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	689b      	ldr	r3, [r3, #8]
 800fab2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800faba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800fabc:	683b      	ldr	r3, [r7, #0]
 800fabe:	021a      	lsls	r2, r3, #8
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	431a      	orrs	r2, r3
 800fac4:	68bb      	ldr	r3, [r7, #8]
 800fac6:	4313      	orrs	r3, r2
 800fac8:	697a      	ldr	r2, [r7, #20]
 800faca:	4313      	orrs	r3, r2
 800facc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	697a      	ldr	r2, [r7, #20]
 800fad2:	609a      	str	r2, [r3, #8]
}
 800fad4:	bf00      	nop
 800fad6:	371c      	adds	r7, #28
 800fad8:	46bd      	mov	sp, r7
 800fada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fade:	4770      	bx	lr

0800fae0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b087      	sub	sp, #28
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800faec:	68bb      	ldr	r3, [r7, #8]
 800faee:	f003 031f 	and.w	r3, r3, #31
 800faf2:	2201      	movs	r2, #1
 800faf4:	fa02 f303 	lsl.w	r3, r2, r3
 800faf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fafa:	68fb      	ldr	r3, [r7, #12]
 800fafc:	6a1a      	ldr	r2, [r3, #32]
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	43db      	mvns	r3, r3
 800fb02:	401a      	ands	r2, r3
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	6a1a      	ldr	r2, [r3, #32]
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	f003 031f 	and.w	r3, r3, #31
 800fb12:	6879      	ldr	r1, [r7, #4]
 800fb14:	fa01 f303 	lsl.w	r3, r1, r3
 800fb18:	431a      	orrs	r2, r3
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	621a      	str	r2, [r3, #32]
}
 800fb1e:	bf00      	nop
 800fb20:	371c      	adds	r7, #28
 800fb22:	46bd      	mov	sp, r7
 800fb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb28:	4770      	bx	lr
	...

0800fb2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fb2c:	b480      	push	{r7}
 800fb2e:	b085      	sub	sp, #20
 800fb30:	af00      	add	r7, sp, #0
 800fb32:	6078      	str	r0, [r7, #4]
 800fb34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800fb3c:	2b01      	cmp	r3, #1
 800fb3e:	d101      	bne.n	800fb44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fb40:	2302      	movs	r3, #2
 800fb42:	e05a      	b.n	800fbfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	2201      	movs	r2, #1
 800fb48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	2202      	movs	r2, #2
 800fb50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	685b      	ldr	r3, [r3, #4]
 800fb5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	689b      	ldr	r3, [r3, #8]
 800fb62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800fb6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	68fa      	ldr	r2, [r7, #12]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	681b      	ldr	r3, [r3, #0]
 800fb7a:	68fa      	ldr	r2, [r7, #12]
 800fb7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	681b      	ldr	r3, [r3, #0]
 800fb82:	4a21      	ldr	r2, [pc, #132]	@ (800fc08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800fb84:	4293      	cmp	r3, r2
 800fb86:	d022      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	681b      	ldr	r3, [r3, #0]
 800fb8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fb90:	d01d      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	681b      	ldr	r3, [r3, #0]
 800fb96:	4a1d      	ldr	r2, [pc, #116]	@ (800fc0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800fb98:	4293      	cmp	r3, r2
 800fb9a:	d018      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	681b      	ldr	r3, [r3, #0]
 800fba0:	4a1b      	ldr	r2, [pc, #108]	@ (800fc10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800fba2:	4293      	cmp	r3, r2
 800fba4:	d013      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a1a      	ldr	r2, [pc, #104]	@ (800fc14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d00e      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4a18      	ldr	r2, [pc, #96]	@ (800fc18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d009      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbba:	687b      	ldr	r3, [r7, #4]
 800fbbc:	681b      	ldr	r3, [r3, #0]
 800fbbe:	4a17      	ldr	r2, [pc, #92]	@ (800fc1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800fbc0:	4293      	cmp	r3, r2
 800fbc2:	d004      	beq.n	800fbce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	4a15      	ldr	r2, [pc, #84]	@ (800fc20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800fbca:	4293      	cmp	r3, r2
 800fbcc:	d10c      	bne.n	800fbe8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fbd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fbd6:	683b      	ldr	r3, [r7, #0]
 800fbd8:	685b      	ldr	r3, [r3, #4]
 800fbda:	68ba      	ldr	r2, [r7, #8]
 800fbdc:	4313      	orrs	r3, r2
 800fbde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	681b      	ldr	r3, [r3, #0]
 800fbe4:	68ba      	ldr	r2, [r7, #8]
 800fbe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fbe8:	687b      	ldr	r3, [r7, #4]
 800fbea:	2201      	movs	r2, #1
 800fbec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800fbf8:	2300      	movs	r3, #0
}
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	3714      	adds	r7, #20
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc04:	4770      	bx	lr
 800fc06:	bf00      	nop
 800fc08:	40010000 	.word	0x40010000
 800fc0c:	40000400 	.word	0x40000400
 800fc10:	40000800 	.word	0x40000800
 800fc14:	40000c00 	.word	0x40000c00
 800fc18:	40010400 	.word	0x40010400
 800fc1c:	40014000 	.word	0x40014000
 800fc20:	40001800 	.word	0x40001800

0800fc24 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc24:	b480      	push	{r7}
 800fc26:	b083      	sub	sp, #12
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc2c:	bf00      	nop
 800fc2e:	370c      	adds	r7, #12
 800fc30:	46bd      	mov	sp, r7
 800fc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc36:	4770      	bx	lr

0800fc38 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc38:	b480      	push	{r7}
 800fc3a:	b083      	sub	sp, #12
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc40:	bf00      	nop
 800fc42:	370c      	adds	r7, #12
 800fc44:	46bd      	mov	sp, r7
 800fc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc4a:	4770      	bx	lr

0800fc4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b082      	sub	sp, #8
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	2b00      	cmp	r3, #0
 800fc58:	d101      	bne.n	800fc5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fc5a:	2301      	movs	r3, #1
 800fc5c:	e042      	b.n	800fce4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fc64:	b2db      	uxtb	r3, r3
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d106      	bne.n	800fc78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f7fa fd6e 	bl	800a754 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	2224      	movs	r2, #36	@ 0x24
 800fc7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	68da      	ldr	r2, [r3, #12]
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fc8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f000 ff5f 	bl	8010b54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	691a      	ldr	r2, [r3, #16]
 800fc9c:	687b      	ldr	r3, [r7, #4]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800fca4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	695a      	ldr	r2, [r3, #20]
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800fcb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	68da      	ldr	r2, [r3, #12]
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800fcc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	2200      	movs	r2, #0
 800fcca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	2220      	movs	r2, #32
 800fcd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2220      	movs	r2, #32
 800fcd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	2200      	movs	r2, #0
 800fce0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800fce2:	2300      	movs	r3, #0
}
 800fce4:	4618      	mov	r0, r3
 800fce6:	3708      	adds	r7, #8
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d101      	bne.n	800fcfe <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800fcfa:	2301      	movs	r3, #1
 800fcfc:	e024      	b.n	800fd48 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2224      	movs	r2, #36	@ 0x24
 800fd02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	68da      	ldr	r2, [r3, #12]
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800fd14:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800fd16:	6878      	ldr	r0, [r7, #4]
 800fd18:	f7fa fdd2 	bl	800a8c0 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd1c:	687b      	ldr	r3, [r7, #4]
 800fd1e:	2200      	movs	r2, #0
 800fd20:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	2200      	movs	r2, #0
 800fd26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	2200      	movs	r2, #0
 800fd36:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	2200      	movs	r2, #0
 800fd42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800fd46:	2300      	movs	r3, #0
}
 800fd48:	4618      	mov	r0, r3
 800fd4a:	3708      	adds	r7, #8
 800fd4c:	46bd      	mov	sp, r7
 800fd4e:	bd80      	pop	{r7, pc}

0800fd50 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fd50:	b580      	push	{r7, lr}
 800fd52:	b08c      	sub	sp, #48	@ 0x30
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	60f8      	str	r0, [r7, #12]
 800fd58:	60b9      	str	r1, [r7, #8]
 800fd5a:	4613      	mov	r3, r2
 800fd5c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fd64:	b2db      	uxtb	r3, r3
 800fd66:	2b20      	cmp	r3, #32
 800fd68:	d156      	bne.n	800fe18 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd6a:	68bb      	ldr	r3, [r7, #8]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d002      	beq.n	800fd76 <HAL_UART_Transmit_DMA+0x26>
 800fd70:	88fb      	ldrh	r3, [r7, #6]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d101      	bne.n	800fd7a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800fd76:	2301      	movs	r3, #1
 800fd78:	e04f      	b.n	800fe1a <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800fd7a:	68ba      	ldr	r2, [r7, #8]
 800fd7c:	68fb      	ldr	r3, [r7, #12]
 800fd7e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800fd80:	68fb      	ldr	r3, [r7, #12]
 800fd82:	88fa      	ldrh	r2, [r7, #6]
 800fd84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	88fa      	ldrh	r2, [r7, #6]
 800fd8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fd92:	68fb      	ldr	r3, [r7, #12]
 800fd94:	2221      	movs	r2, #33	@ 0x21
 800fd96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fd9a:	68fb      	ldr	r3, [r7, #12]
 800fd9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fd9e:	4a21      	ldr	r2, [pc, #132]	@ (800fe24 <HAL_UART_Transmit_DMA+0xd4>)
 800fda0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800fda2:	68fb      	ldr	r3, [r7, #12]
 800fda4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fda6:	4a20      	ldr	r2, [pc, #128]	@ (800fe28 <HAL_UART_Transmit_DMA+0xd8>)
 800fda8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fdaa:	68fb      	ldr	r3, [r7, #12]
 800fdac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdae:	4a1f      	ldr	r2, [pc, #124]	@ (800fe2c <HAL_UART_Transmit_DMA+0xdc>)
 800fdb0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800fdba:	f107 0308 	add.w	r3, r7, #8
 800fdbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800fdc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800fdc6:	6819      	ldr	r1, [r3, #0]
 800fdc8:	68fb      	ldr	r3, [r7, #12]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	3304      	adds	r3, #4
 800fdce:	461a      	mov	r2, r3
 800fdd0:	88fb      	ldrh	r3, [r7, #6]
 800fdd2:	f7fb fb51 	bl	800b478 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800fdde:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	3314      	adds	r3, #20
 800fde6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fde8:	69bb      	ldr	r3, [r7, #24]
 800fdea:	e853 3f00 	ldrex	r3, [r3]
 800fdee:	617b      	str	r3, [r7, #20]
   return(result);
 800fdf0:	697b      	ldr	r3, [r7, #20]
 800fdf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fdf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800fdf8:	68fb      	ldr	r3, [r7, #12]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	3314      	adds	r3, #20
 800fdfe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe00:	627a      	str	r2, [r7, #36]	@ 0x24
 800fe02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe04:	6a39      	ldr	r1, [r7, #32]
 800fe06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe08:	e841 2300 	strex	r3, r2, [r1]
 800fe0c:	61fb      	str	r3, [r7, #28]
   return(result);
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d1e5      	bne.n	800fde0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800fe14:	2300      	movs	r3, #0
 800fe16:	e000      	b.n	800fe1a <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800fe18:	2302      	movs	r3, #2
  }
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	3730      	adds	r7, #48	@ 0x30
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	bd80      	pop	{r7, pc}
 800fe22:	bf00      	nop
 800fe24:	080103e1 	.word	0x080103e1
 800fe28:	0801047b 	.word	0x0801047b
 800fe2c:	080105ff 	.word	0x080105ff

0800fe30 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b084      	sub	sp, #16
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	60f8      	str	r0, [r7, #12]
 800fe38:	60b9      	str	r1, [r7, #8]
 800fe3a:	4613      	mov	r3, r2
 800fe3c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fe3e:	68fb      	ldr	r3, [r7, #12]
 800fe40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe44:	b2db      	uxtb	r3, r3
 800fe46:	2b20      	cmp	r3, #32
 800fe48:	d112      	bne.n	800fe70 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe4a:	68bb      	ldr	r3, [r7, #8]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d002      	beq.n	800fe56 <HAL_UART_Receive_DMA+0x26>
 800fe50:	88fb      	ldrh	r3, [r7, #6]
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d101      	bne.n	800fe5a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800fe56:	2301      	movs	r3, #1
 800fe58:	e00b      	b.n	800fe72 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	2200      	movs	r2, #0
 800fe5e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800fe60:	88fb      	ldrh	r3, [r7, #6]
 800fe62:	461a      	mov	r2, r3
 800fe64:	68b9      	ldr	r1, [r7, #8]
 800fe66:	68f8      	ldr	r0, [r7, #12]
 800fe68:	f000 fc14 	bl	8010694 <UART_Start_Receive_DMA>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	e000      	b.n	800fe72 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800fe70:	2302      	movs	r3, #2
  }
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3710      	adds	r7, #16
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
	...

0800fe7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b0ba      	sub	sp, #232	@ 0xe8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	681b      	ldr	r3, [r3, #0]
 800fe8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	681b      	ldr	r3, [r3, #0]
 800fe92:	68db      	ldr	r3, [r3, #12]
 800fe94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	695b      	ldr	r3, [r3, #20]
 800fe9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800fea2:	2300      	movs	r3, #0
 800fea4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800fea8:	2300      	movs	r3, #0
 800feaa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800feae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800feb2:	f003 030f 	and.w	r3, r3, #15
 800feb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800feba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d10f      	bne.n	800fee2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800fec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fec6:	f003 0320 	and.w	r3, r3, #32
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d009      	beq.n	800fee2 <HAL_UART_IRQHandler+0x66>
 800fece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fed2:	f003 0320 	and.w	r3, r3, #32
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d003      	beq.n	800fee2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800feda:	6878      	ldr	r0, [r7, #4]
 800fedc:	f000 fd7b 	bl	80109d6 <UART_Receive_IT>
      return;
 800fee0:	e25b      	b.n	801039a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800fee2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	f000 80de 	beq.w	80100a8 <HAL_UART_IRQHandler+0x22c>
 800feec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800fef0:	f003 0301 	and.w	r3, r3, #1
 800fef4:	2b00      	cmp	r3, #0
 800fef6:	d106      	bne.n	800ff06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800fef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fefc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	f000 80d1 	beq.w	80100a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ff06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff0a:	f003 0301 	and.w	r3, r3, #1
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d00b      	beq.n	800ff2a <HAL_UART_IRQHandler+0xae>
 800ff12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d005      	beq.n	800ff2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ff1e:	687b      	ldr	r3, [r7, #4]
 800ff20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff22:	f043 0201 	orr.w	r2, r3, #1
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ff2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff2e:	f003 0304 	and.w	r3, r3, #4
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d00b      	beq.n	800ff4e <HAL_UART_IRQHandler+0xd2>
 800ff36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff3a:	f003 0301 	and.w	r3, r3, #1
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d005      	beq.n	800ff4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff46:	f043 0202 	orr.w	r2, r3, #2
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ff4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff52:	f003 0302 	and.w	r3, r3, #2
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d00b      	beq.n	800ff72 <HAL_UART_IRQHandler+0xf6>
 800ff5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff5e:	f003 0301 	and.w	r3, r3, #1
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d005      	beq.n	800ff72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff6a:	f043 0204 	orr.w	r2, r3, #4
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ff72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ff76:	f003 0308 	and.w	r3, r3, #8
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d011      	beq.n	800ffa2 <HAL_UART_IRQHandler+0x126>
 800ff7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ff82:	f003 0320 	and.w	r3, r3, #32
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d105      	bne.n	800ff96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ff8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800ff8e:	f003 0301 	and.w	r3, r3, #1
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d005      	beq.n	800ffa2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ff9a:	f043 0208 	orr.w	r2, r3, #8
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	f000 81f2 	beq.w	8010390 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ffac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ffb0:	f003 0320 	and.w	r3, r3, #32
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d008      	beq.n	800ffca <HAL_UART_IRQHandler+0x14e>
 800ffb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800ffbc:	f003 0320 	and.w	r3, r3, #32
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d002      	beq.n	800ffca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f000 fd06 	bl	80109d6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	695b      	ldr	r3, [r3, #20]
 800ffd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ffd4:	2b40      	cmp	r3, #64	@ 0x40
 800ffd6:	bf0c      	ite	eq
 800ffd8:	2301      	moveq	r3, #1
 800ffda:	2300      	movne	r3, #0
 800ffdc:	b2db      	uxtb	r3, r3
 800ffde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ffe6:	f003 0308 	and.w	r3, r3, #8
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d103      	bne.n	800fff6 <HAL_UART_IRQHandler+0x17a>
 800ffee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d04f      	beq.n	8010096 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f000 fc0e 	bl	8010818 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	681b      	ldr	r3, [r3, #0]
 8010000:	695b      	ldr	r3, [r3, #20]
 8010002:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010006:	2b40      	cmp	r3, #64	@ 0x40
 8010008:	d141      	bne.n	801008e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	681b      	ldr	r3, [r3, #0]
 801000e:	3314      	adds	r3, #20
 8010010:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010014:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8010018:	e853 3f00 	ldrex	r3, [r3]
 801001c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8010020:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8010024:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010028:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	3314      	adds	r3, #20
 8010032:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8010036:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 801003a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801003e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8010042:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8010046:	e841 2300 	strex	r3, r2, [r1]
 801004a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 801004e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8010052:	2b00      	cmp	r3, #0
 8010054:	d1d9      	bne.n	801000a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801005a:	2b00      	cmp	r3, #0
 801005c:	d013      	beq.n	8010086 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010062:	4a7e      	ldr	r2, [pc, #504]	@ (801025c <HAL_UART_IRQHandler+0x3e0>)
 8010064:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801006a:	4618      	mov	r0, r3
 801006c:	f7fb facc 	bl	800b608 <HAL_DMA_Abort_IT>
 8010070:	4603      	mov	r3, r0
 8010072:	2b00      	cmp	r3, #0
 8010074:	d016      	beq.n	80100a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801007a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801007c:	687a      	ldr	r2, [r7, #4]
 801007e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8010080:	4610      	mov	r0, r2
 8010082:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010084:	e00e      	b.n	80100a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010086:	6878      	ldr	r0, [r7, #4]
 8010088:	f7fa fd90 	bl	800abac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801008c:	e00a      	b.n	80100a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801008e:	6878      	ldr	r0, [r7, #4]
 8010090:	f7fa fd8c 	bl	800abac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010094:	e006      	b.n	80100a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010096:	6878      	ldr	r0, [r7, #4]
 8010098:	f7fa fd88 	bl	800abac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2200      	movs	r2, #0
 80100a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80100a2:	e175      	b.n	8010390 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100a4:	bf00      	nop
    return;
 80100a6:	e173      	b.n	8010390 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80100ac:	2b01      	cmp	r3, #1
 80100ae:	f040 814f 	bne.w	8010350 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80100b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80100b6:	f003 0310 	and.w	r3, r3, #16
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	f000 8148 	beq.w	8010350 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80100c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80100c4:	f003 0310 	and.w	r3, r3, #16
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	f000 8141 	beq.w	8010350 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80100ce:	2300      	movs	r3, #0
 80100d0:	60bb      	str	r3, [r7, #8]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	681b      	ldr	r3, [r3, #0]
 80100d6:	681b      	ldr	r3, [r3, #0]
 80100d8:	60bb      	str	r3, [r7, #8]
 80100da:	687b      	ldr	r3, [r7, #4]
 80100dc:	681b      	ldr	r3, [r3, #0]
 80100de:	685b      	ldr	r3, [r3, #4]
 80100e0:	60bb      	str	r3, [r7, #8]
 80100e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	681b      	ldr	r3, [r3, #0]
 80100e8:	695b      	ldr	r3, [r3, #20]
 80100ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80100ee:	2b40      	cmp	r3, #64	@ 0x40
 80100f0:	f040 80b6 	bne.w	8010260 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80100f8:	681b      	ldr	r3, [r3, #0]
 80100fa:	685b      	ldr	r3, [r3, #4]
 80100fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8010100:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8010104:	2b00      	cmp	r3, #0
 8010106:	f000 8145 	beq.w	8010394 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 801010e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8010112:	429a      	cmp	r2, r3
 8010114:	f080 813e 	bcs.w	8010394 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 801011e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010124:	69db      	ldr	r3, [r3, #28]
 8010126:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801012a:	f000 8088 	beq.w	801023e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801012e:	687b      	ldr	r3, [r7, #4]
 8010130:	681b      	ldr	r3, [r3, #0]
 8010132:	330c      	adds	r3, #12
 8010134:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010138:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801013c:	e853 3f00 	ldrex	r3, [r3]
 8010140:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8010144:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8010148:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801014c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	330c      	adds	r3, #12
 8010156:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 801015a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 801015e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010162:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8010166:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801016a:	e841 2300 	strex	r3, r2, [r1]
 801016e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8010172:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8010176:	2b00      	cmp	r3, #0
 8010178:	d1d9      	bne.n	801012e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	3314      	adds	r3, #20
 8010180:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010182:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8010184:	e853 3f00 	ldrex	r3, [r3]
 8010188:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801018a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801018c:	f023 0301 	bic.w	r3, r3, #1
 8010190:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	3314      	adds	r3, #20
 801019a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801019e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80101a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80101a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80101aa:	e841 2300 	strex	r3, r2, [r1]
 80101ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80101b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d1e1      	bne.n	801017a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	3314      	adds	r3, #20
 80101bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80101c0:	e853 3f00 	ldrex	r3, [r3]
 80101c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80101c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80101c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80101cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	3314      	adds	r3, #20
 80101d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80101da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80101dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80101e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80101e2:	e841 2300 	strex	r3, r2, [r1]
 80101e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80101e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d1e3      	bne.n	80101b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2220      	movs	r2, #32
 80101f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	2200      	movs	r2, #0
 80101fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	330c      	adds	r3, #12
 8010202:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010204:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010206:	e853 3f00 	ldrex	r3, [r3]
 801020a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801020c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801020e:	f023 0310 	bic.w	r3, r3, #16
 8010212:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	330c      	adds	r3, #12
 801021c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8010220:	65ba      	str	r2, [r7, #88]	@ 0x58
 8010222:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010224:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010226:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010228:	e841 2300 	strex	r3, r2, [r1]
 801022c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801022e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010230:	2b00      	cmp	r3, #0
 8010232:	d1e3      	bne.n	80101fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010238:	4618      	mov	r0, r3
 801023a:	f7fb f975 	bl	800b528 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	2202      	movs	r2, #2
 8010242:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 801024c:	b29b      	uxth	r3, r3
 801024e:	1ad3      	subs	r3, r2, r3
 8010250:	b29b      	uxth	r3, r3
 8010252:	4619      	mov	r1, r3
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f000 f8b7 	bl	80103c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801025a:	e09b      	b.n	8010394 <HAL_UART_IRQHandler+0x518>
 801025c:	080108df 	.word	0x080108df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010268:	b29b      	uxth	r3, r3
 801026a:	1ad3      	subs	r3, r2, r3
 801026c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010274:	b29b      	uxth	r3, r3
 8010276:	2b00      	cmp	r3, #0
 8010278:	f000 808e 	beq.w	8010398 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 801027c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010280:	2b00      	cmp	r3, #0
 8010282:	f000 8089 	beq.w	8010398 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	330c      	adds	r3, #12
 801028c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801028e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010290:	e853 3f00 	ldrex	r3, [r3]
 8010294:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8010296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010298:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801029c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	330c      	adds	r3, #12
 80102a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80102aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80102ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80102b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80102b2:	e841 2300 	strex	r3, r2, [r1]
 80102b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80102b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d1e3      	bne.n	8010286 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	3314      	adds	r3, #20
 80102c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c8:	e853 3f00 	ldrex	r3, [r3]
 80102cc:	623b      	str	r3, [r7, #32]
   return(result);
 80102ce:	6a3b      	ldr	r3, [r7, #32]
 80102d0:	f023 0301 	bic.w	r3, r3, #1
 80102d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	3314      	adds	r3, #20
 80102de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80102e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80102e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80102e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80102ea:	e841 2300 	strex	r3, r2, [r1]
 80102ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80102f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d1e3      	bne.n	80102be <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	2220      	movs	r2, #32
 80102fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102fe:	687b      	ldr	r3, [r7, #4]
 8010300:	2200      	movs	r2, #0
 8010302:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	330c      	adds	r3, #12
 801030a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801030c:	693b      	ldr	r3, [r7, #16]
 801030e:	e853 3f00 	ldrex	r3, [r3]
 8010312:	60fb      	str	r3, [r7, #12]
   return(result);
 8010314:	68fb      	ldr	r3, [r7, #12]
 8010316:	f023 0310 	bic.w	r3, r3, #16
 801031a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	330c      	adds	r3, #12
 8010324:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8010328:	61fa      	str	r2, [r7, #28]
 801032a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801032c:	69b9      	ldr	r1, [r7, #24]
 801032e:	69fa      	ldr	r2, [r7, #28]
 8010330:	e841 2300 	strex	r3, r2, [r1]
 8010334:	617b      	str	r3, [r7, #20]
   return(result);
 8010336:	697b      	ldr	r3, [r7, #20]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d1e3      	bne.n	8010304 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	2202      	movs	r2, #2
 8010340:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8010342:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8010346:	4619      	mov	r1, r3
 8010348:	6878      	ldr	r0, [r7, #4]
 801034a:	f000 f83d 	bl	80103c8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 801034e:	e023      	b.n	8010398 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8010350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010354:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010358:	2b00      	cmp	r3, #0
 801035a:	d009      	beq.n	8010370 <HAL_UART_IRQHandler+0x4f4>
 801035c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010364:	2b00      	cmp	r3, #0
 8010366:	d003      	beq.n	8010370 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 facc 	bl	8010906 <UART_Transmit_IT>
    return;
 801036e:	e014      	b.n	801039a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8010370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8010374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010378:	2b00      	cmp	r3, #0
 801037a:	d00e      	beq.n	801039a <HAL_UART_IRQHandler+0x51e>
 801037c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8010380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010384:	2b00      	cmp	r3, #0
 8010386:	d008      	beq.n	801039a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 fb0c 	bl	80109a6 <UART_EndTransmit_IT>
    return;
 801038e:	e004      	b.n	801039a <HAL_UART_IRQHandler+0x51e>
    return;
 8010390:	bf00      	nop
 8010392:	e002      	b.n	801039a <HAL_UART_IRQHandler+0x51e>
      return;
 8010394:	bf00      	nop
 8010396:	e000      	b.n	801039a <HAL_UART_IRQHandler+0x51e>
      return;
 8010398:	bf00      	nop
  }
}
 801039a:	37e8      	adds	r7, #232	@ 0xe8
 801039c:	46bd      	mov	sp, r7
 801039e:	bd80      	pop	{r7, pc}

080103a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80103a0:	b480      	push	{r7}
 80103a2:	b083      	sub	sp, #12
 80103a4:	af00      	add	r7, sp, #0
 80103a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80103a8:	bf00      	nop
 80103aa:	370c      	adds	r7, #12
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr

080103b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80103b4:	b480      	push	{r7}
 80103b6:	b083      	sub	sp, #12
 80103b8:	af00      	add	r7, sp, #0
 80103ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80103bc:	bf00      	nop
 80103be:	370c      	adds	r7, #12
 80103c0:	46bd      	mov	sp, r7
 80103c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c6:	4770      	bx	lr

080103c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80103c8:	b480      	push	{r7}
 80103ca:	b083      	sub	sp, #12
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
 80103d0:	460b      	mov	r3, r1
 80103d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80103d4:	bf00      	nop
 80103d6:	370c      	adds	r7, #12
 80103d8:	46bd      	mov	sp, r7
 80103da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103de:	4770      	bx	lr

080103e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80103e0:	b580      	push	{r7, lr}
 80103e2:	b090      	sub	sp, #64	@ 0x40
 80103e4:	af00      	add	r7, sp, #0
 80103e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	681b      	ldr	r3, [r3, #0]
 80103f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d137      	bne.n	801046c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80103fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80103fe:	2200      	movs	r2, #0
 8010400:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8010402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010404:	681b      	ldr	r3, [r3, #0]
 8010406:	3314      	adds	r3, #20
 8010408:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801040a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801040c:	e853 3f00 	ldrex	r3, [r3]
 8010410:	623b      	str	r3, [r7, #32]
   return(result);
 8010412:	6a3b      	ldr	r3, [r7, #32]
 8010414:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8010418:	63bb      	str	r3, [r7, #56]	@ 0x38
 801041a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	3314      	adds	r3, #20
 8010420:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010422:	633a      	str	r2, [r7, #48]	@ 0x30
 8010424:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010426:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010428:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801042a:	e841 2300 	strex	r3, r2, [r1]
 801042e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8010430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010432:	2b00      	cmp	r3, #0
 8010434:	d1e5      	bne.n	8010402 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010436:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	330c      	adds	r3, #12
 801043c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	e853 3f00 	ldrex	r3, [r3]
 8010444:	60fb      	str	r3, [r7, #12]
   return(result);
 8010446:	68fb      	ldr	r3, [r7, #12]
 8010448:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801044c:	637b      	str	r3, [r7, #52]	@ 0x34
 801044e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010450:	681b      	ldr	r3, [r3, #0]
 8010452:	330c      	adds	r3, #12
 8010454:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010456:	61fa      	str	r2, [r7, #28]
 8010458:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801045a:	69b9      	ldr	r1, [r7, #24]
 801045c:	69fa      	ldr	r2, [r7, #28]
 801045e:	e841 2300 	strex	r3, r2, [r1]
 8010462:	617b      	str	r3, [r7, #20]
   return(result);
 8010464:	697b      	ldr	r3, [r7, #20]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d1e5      	bne.n	8010436 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801046a:	e002      	b.n	8010472 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 801046c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801046e:	f7fa fa67 	bl	800a940 <HAL_UART_TxCpltCallback>
}
 8010472:	bf00      	nop
 8010474:	3740      	adds	r7, #64	@ 0x40
 8010476:	46bd      	mov	sp, r7
 8010478:	bd80      	pop	{r7, pc}

0801047a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801047a:	b580      	push	{r7, lr}
 801047c:	b084      	sub	sp, #16
 801047e:	af00      	add	r7, sp, #0
 8010480:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010486:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8010488:	68f8      	ldr	r0, [r7, #12]
 801048a:	f7ff ff89 	bl	80103a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801048e:	bf00      	nop
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}

08010496 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010496:	b580      	push	{r7, lr}
 8010498:	b09c      	sub	sp, #112	@ 0x70
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80104a2:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d172      	bne.n	8010598 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80104b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104b4:	2200      	movs	r2, #0
 80104b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80104b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	330c      	adds	r3, #12
 80104be:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104c2:	e853 3f00 	ldrex	r3, [r3]
 80104c6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80104c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80104ca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80104ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80104d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	330c      	adds	r3, #12
 80104d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80104d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80104da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80104de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80104e0:	e841 2300 	strex	r3, r2, [r1]
 80104e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80104e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d1e5      	bne.n	80104b8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80104ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	3314      	adds	r3, #20
 80104f2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80104f6:	e853 3f00 	ldrex	r3, [r3]
 80104fa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80104fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80104fe:	f023 0301 	bic.w	r3, r3, #1
 8010502:	667b      	str	r3, [r7, #100]	@ 0x64
 8010504:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	3314      	adds	r3, #20
 801050a:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801050c:	647a      	str	r2, [r7, #68]	@ 0x44
 801050e:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010510:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8010512:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010514:	e841 2300 	strex	r3, r2, [r1]
 8010518:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801051a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801051c:	2b00      	cmp	r3, #0
 801051e:	d1e5      	bne.n	80104ec <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010520:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	3314      	adds	r3, #20
 8010526:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801052a:	e853 3f00 	ldrex	r3, [r3]
 801052e:	623b      	str	r3, [r7, #32]
   return(result);
 8010530:	6a3b      	ldr	r3, [r7, #32]
 8010532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010536:	663b      	str	r3, [r7, #96]	@ 0x60
 8010538:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	3314      	adds	r3, #20
 801053e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8010540:	633a      	str	r2, [r7, #48]	@ 0x30
 8010542:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010544:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8010548:	e841 2300 	strex	r3, r2, [r1]
 801054c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801054e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010550:	2b00      	cmp	r3, #0
 8010552:	d1e5      	bne.n	8010520 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010556:	2220      	movs	r2, #32
 8010558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801055c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801055e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010560:	2b01      	cmp	r3, #1
 8010562:	d119      	bne.n	8010598 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010564:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	330c      	adds	r3, #12
 801056a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801056c:	693b      	ldr	r3, [r7, #16]
 801056e:	e853 3f00 	ldrex	r3, [r3]
 8010572:	60fb      	str	r3, [r7, #12]
   return(result);
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	f023 0310 	bic.w	r3, r3, #16
 801057a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801057c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	330c      	adds	r3, #12
 8010582:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8010584:	61fa      	str	r2, [r7, #28]
 8010586:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010588:	69b9      	ldr	r1, [r7, #24]
 801058a:	69fa      	ldr	r2, [r7, #28]
 801058c:	e841 2300 	strex	r3, r2, [r1]
 8010590:	617b      	str	r3, [r7, #20]
   return(result);
 8010592:	697b      	ldr	r3, [r7, #20]
 8010594:	2b00      	cmp	r3, #0
 8010596:	d1e5      	bne.n	8010564 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010598:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801059a:	2200      	movs	r2, #0
 801059c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801059e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80105a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105a2:	2b01      	cmp	r3, #1
 80105a4:	d106      	bne.n	80105b4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80105a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80105a8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80105aa:	4619      	mov	r1, r3
 80105ac:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80105ae:	f7ff ff0b 	bl	80103c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80105b2:	e002      	b.n	80105ba <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80105b4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80105b6:	f7fa fa05 	bl	800a9c4 <HAL_UART_RxCpltCallback>
}
 80105ba:	bf00      	nop
 80105bc:	3770      	adds	r7, #112	@ 0x70
 80105be:	46bd      	mov	sp, r7
 80105c0:	bd80      	pop	{r7, pc}

080105c2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80105c2:	b580      	push	{r7, lr}
 80105c4:	b084      	sub	sp, #16
 80105c6:	af00      	add	r7, sp, #0
 80105c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80105ca:	687b      	ldr	r3, [r7, #4]
 80105cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80105ce:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	2201      	movs	r2, #1
 80105d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80105da:	2b01      	cmp	r3, #1
 80105dc:	d108      	bne.n	80105f0 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80105e2:	085b      	lsrs	r3, r3, #1
 80105e4:	b29b      	uxth	r3, r3
 80105e6:	4619      	mov	r1, r3
 80105e8:	68f8      	ldr	r0, [r7, #12]
 80105ea:	f7ff feed 	bl	80103c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80105ee:	e002      	b.n	80105f6 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80105f0:	68f8      	ldr	r0, [r7, #12]
 80105f2:	f7ff fedf 	bl	80103b4 <HAL_UART_RxHalfCpltCallback>
}
 80105f6:	bf00      	nop
 80105f8:	3710      	adds	r7, #16
 80105fa:	46bd      	mov	sp, r7
 80105fc:	bd80      	pop	{r7, pc}

080105fe <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80105fe:	b580      	push	{r7, lr}
 8010600:	b084      	sub	sp, #16
 8010602:	af00      	add	r7, sp, #0
 8010604:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8010606:	2300      	movs	r3, #0
 8010608:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801060e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	695b      	ldr	r3, [r3, #20]
 8010616:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801061a:	2b80      	cmp	r3, #128	@ 0x80
 801061c:	bf0c      	ite	eq
 801061e:	2301      	moveq	r3, #1
 8010620:	2300      	movne	r3, #0
 8010622:	b2db      	uxtb	r3, r3
 8010624:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801062c:	b2db      	uxtb	r3, r3
 801062e:	2b21      	cmp	r3, #33	@ 0x21
 8010630:	d108      	bne.n	8010644 <UART_DMAError+0x46>
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d005      	beq.n	8010644 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8010638:	68bb      	ldr	r3, [r7, #8]
 801063a:	2200      	movs	r2, #0
 801063c:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 801063e:	68b8      	ldr	r0, [r7, #8]
 8010640:	f000 f8c2 	bl	80107c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8010644:	68bb      	ldr	r3, [r7, #8]
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	695b      	ldr	r3, [r3, #20]
 801064a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801064e:	2b40      	cmp	r3, #64	@ 0x40
 8010650:	bf0c      	ite	eq
 8010652:	2301      	moveq	r3, #1
 8010654:	2300      	movne	r3, #0
 8010656:	b2db      	uxtb	r3, r3
 8010658:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8010660:	b2db      	uxtb	r3, r3
 8010662:	2b22      	cmp	r3, #34	@ 0x22
 8010664:	d108      	bne.n	8010678 <UART_DMAError+0x7a>
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d005      	beq.n	8010678 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 801066c:	68bb      	ldr	r3, [r7, #8]
 801066e:	2200      	movs	r2, #0
 8010670:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8010672:	68b8      	ldr	r0, [r7, #8]
 8010674:	f000 f8d0 	bl	8010818 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010678:	68bb      	ldr	r3, [r7, #8]
 801067a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801067c:	f043 0210 	orr.w	r2, r3, #16
 8010680:	68bb      	ldr	r3, [r7, #8]
 8010682:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010684:	68b8      	ldr	r0, [r7, #8]
 8010686:	f7fa fa91 	bl	800abac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801068a:	bf00      	nop
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
	...

08010694 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b098      	sub	sp, #96	@ 0x60
 8010698:	af00      	add	r7, sp, #0
 801069a:	60f8      	str	r0, [r7, #12]
 801069c:	60b9      	str	r1, [r7, #8]
 801069e:	4613      	mov	r3, r2
 80106a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80106a2:	68ba      	ldr	r2, [r7, #8]
 80106a4:	68fb      	ldr	r3, [r7, #12]
 80106a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	88fa      	ldrh	r2, [r7, #6]
 80106ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	2200      	movs	r2, #0
 80106b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	2222      	movs	r2, #34	@ 0x22
 80106b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106c0:	4a3e      	ldr	r2, [pc, #248]	@ (80107bc <UART_Start_Receive_DMA+0x128>)
 80106c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106c8:	4a3d      	ldr	r2, [pc, #244]	@ (80107c0 <UART_Start_Receive_DMA+0x12c>)
 80106ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80106cc:	68fb      	ldr	r3, [r7, #12]
 80106ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106d0:	4a3c      	ldr	r2, [pc, #240]	@ (80107c4 <UART_Start_Receive_DMA+0x130>)
 80106d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80106d8:	2200      	movs	r2, #0
 80106da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80106dc:	f107 0308 	add.w	r3, r7, #8
 80106e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	3304      	adds	r3, #4
 80106ec:	4619      	mov	r1, r3
 80106ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80106f0:	681a      	ldr	r2, [r3, #0]
 80106f2:	88fb      	ldrh	r3, [r7, #6]
 80106f4:	f7fa fec0 	bl	800b478 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80106f8:	2300      	movs	r3, #0
 80106fa:	613b      	str	r3, [r7, #16]
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	681b      	ldr	r3, [r3, #0]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	613b      	str	r3, [r7, #16]
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	613b      	str	r3, [r7, #16]
 801070c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	691b      	ldr	r3, [r3, #16]
 8010712:	2b00      	cmp	r3, #0
 8010714:	d019      	beq.n	801074a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010716:	68fb      	ldr	r3, [r7, #12]
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	330c      	adds	r3, #12
 801071c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801071e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010720:	e853 3f00 	ldrex	r3, [r3]
 8010724:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8010726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010728:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801072c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	681b      	ldr	r3, [r3, #0]
 8010732:	330c      	adds	r3, #12
 8010734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8010736:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8010738:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801073a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 801073c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 801073e:	e841 2300 	strex	r3, r2, [r1]
 8010742:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8010744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010746:	2b00      	cmp	r3, #0
 8010748:	d1e5      	bne.n	8010716 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	3314      	adds	r3, #20
 8010750:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010754:	e853 3f00 	ldrex	r3, [r3]
 8010758:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801075a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801075c:	f043 0301 	orr.w	r3, r3, #1
 8010760:	657b      	str	r3, [r7, #84]	@ 0x54
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	681b      	ldr	r3, [r3, #0]
 8010766:	3314      	adds	r3, #20
 8010768:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801076a:	63ba      	str	r2, [r7, #56]	@ 0x38
 801076c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801076e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8010770:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010772:	e841 2300 	strex	r3, r2, [r1]
 8010776:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801077a:	2b00      	cmp	r3, #0
 801077c:	d1e5      	bne.n	801074a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	681b      	ldr	r3, [r3, #0]
 8010782:	3314      	adds	r3, #20
 8010784:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010786:	69bb      	ldr	r3, [r7, #24]
 8010788:	e853 3f00 	ldrex	r3, [r3]
 801078c:	617b      	str	r3, [r7, #20]
   return(result);
 801078e:	697b      	ldr	r3, [r7, #20]
 8010790:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010794:	653b      	str	r3, [r7, #80]	@ 0x50
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	681b      	ldr	r3, [r3, #0]
 801079a:	3314      	adds	r3, #20
 801079c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801079e:	627a      	str	r2, [r7, #36]	@ 0x24
 80107a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107a2:	6a39      	ldr	r1, [r7, #32]
 80107a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80107a6:	e841 2300 	strex	r3, r2, [r1]
 80107aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80107ac:	69fb      	ldr	r3, [r7, #28]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d1e5      	bne.n	801077e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80107b2:	2300      	movs	r3, #0
}
 80107b4:	4618      	mov	r0, r3
 80107b6:	3760      	adds	r7, #96	@ 0x60
 80107b8:	46bd      	mov	sp, r7
 80107ba:	bd80      	pop	{r7, pc}
 80107bc:	08010497 	.word	0x08010497
 80107c0:	080105c3 	.word	0x080105c3
 80107c4:	080105ff 	.word	0x080105ff

080107c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80107c8:	b480      	push	{r7}
 80107ca:	b089      	sub	sp, #36	@ 0x24
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	330c      	adds	r3, #12
 80107d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	e853 3f00 	ldrex	r3, [r3]
 80107de:	60bb      	str	r3, [r7, #8]
   return(result);
 80107e0:	68bb      	ldr	r3, [r7, #8]
 80107e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80107e6:	61fb      	str	r3, [r7, #28]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	681b      	ldr	r3, [r3, #0]
 80107ec:	330c      	adds	r3, #12
 80107ee:	69fa      	ldr	r2, [r7, #28]
 80107f0:	61ba      	str	r2, [r7, #24]
 80107f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107f4:	6979      	ldr	r1, [r7, #20]
 80107f6:	69ba      	ldr	r2, [r7, #24]
 80107f8:	e841 2300 	strex	r3, r2, [r1]
 80107fc:	613b      	str	r3, [r7, #16]
   return(result);
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d1e5      	bne.n	80107d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	2220      	movs	r2, #32
 8010808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 801080c:	bf00      	nop
 801080e:	3724      	adds	r7, #36	@ 0x24
 8010810:	46bd      	mov	sp, r7
 8010812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010816:	4770      	bx	lr

08010818 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010818:	b480      	push	{r7}
 801081a:	b095      	sub	sp, #84	@ 0x54
 801081c:	af00      	add	r7, sp, #0
 801081e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	330c      	adds	r3, #12
 8010826:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801082a:	e853 3f00 	ldrex	r3, [r3]
 801082e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010830:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010832:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8010836:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	330c      	adds	r3, #12
 801083e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010840:	643a      	str	r2, [r7, #64]	@ 0x40
 8010842:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010844:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8010846:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010848:	e841 2300 	strex	r3, r2, [r1]
 801084c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801084e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010850:	2b00      	cmp	r3, #0
 8010852:	d1e5      	bne.n	8010820 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	681b      	ldr	r3, [r3, #0]
 8010858:	3314      	adds	r3, #20
 801085a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801085c:	6a3b      	ldr	r3, [r7, #32]
 801085e:	e853 3f00 	ldrex	r3, [r3]
 8010862:	61fb      	str	r3, [r7, #28]
   return(result);
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	f023 0301 	bic.w	r3, r3, #1
 801086a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	681b      	ldr	r3, [r3, #0]
 8010870:	3314      	adds	r3, #20
 8010872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010874:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010876:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801087a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801087c:	e841 2300 	strex	r3, r2, [r1]
 8010880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8010882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010884:	2b00      	cmp	r3, #0
 8010886:	d1e5      	bne.n	8010854 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801088c:	2b01      	cmp	r3, #1
 801088e:	d119      	bne.n	80108c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	681b      	ldr	r3, [r3, #0]
 8010894:	330c      	adds	r3, #12
 8010896:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	e853 3f00 	ldrex	r3, [r3]
 801089e:	60bb      	str	r3, [r7, #8]
   return(result);
 80108a0:	68bb      	ldr	r3, [r7, #8]
 80108a2:	f023 0310 	bic.w	r3, r3, #16
 80108a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	330c      	adds	r3, #12
 80108ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80108b0:	61ba      	str	r2, [r7, #24]
 80108b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108b4:	6979      	ldr	r1, [r7, #20]
 80108b6:	69ba      	ldr	r2, [r7, #24]
 80108b8:	e841 2300 	strex	r3, r2, [r1]
 80108bc:	613b      	str	r3, [r7, #16]
   return(result);
 80108be:	693b      	ldr	r3, [r7, #16]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d1e5      	bne.n	8010890 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	2220      	movs	r2, #32
 80108c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2200      	movs	r2, #0
 80108d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80108d2:	bf00      	nop
 80108d4:	3754      	adds	r7, #84	@ 0x54
 80108d6:	46bd      	mov	sp, r7
 80108d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108dc:	4770      	bx	lr

080108de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80108de:	b580      	push	{r7, lr}
 80108e0:	b084      	sub	sp, #16
 80108e2:	af00      	add	r7, sp, #0
 80108e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	2200      	movs	r2, #0
 80108f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	2200      	movs	r2, #0
 80108f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80108f8:	68f8      	ldr	r0, [r7, #12]
 80108fa:	f7fa f957 	bl	800abac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80108fe:	bf00      	nop
 8010900:	3710      	adds	r7, #16
 8010902:	46bd      	mov	sp, r7
 8010904:	bd80      	pop	{r7, pc}

08010906 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8010906:	b480      	push	{r7}
 8010908:	b085      	sub	sp, #20
 801090a:	af00      	add	r7, sp, #0
 801090c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8010914:	b2db      	uxtb	r3, r3
 8010916:	2b21      	cmp	r3, #33	@ 0x21
 8010918:	d13e      	bne.n	8010998 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	689b      	ldr	r3, [r3, #8]
 801091e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010922:	d114      	bne.n	801094e <UART_Transmit_IT+0x48>
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	691b      	ldr	r3, [r3, #16]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d110      	bne.n	801094e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6a1b      	ldr	r3, [r3, #32]
 8010930:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	881b      	ldrh	r3, [r3, #0]
 8010936:	461a      	mov	r2, r3
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010940:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	6a1b      	ldr	r3, [r3, #32]
 8010946:	1c9a      	adds	r2, r3, #2
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	621a      	str	r2, [r3, #32]
 801094c:	e008      	b.n	8010960 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	6a1b      	ldr	r3, [r3, #32]
 8010952:	1c59      	adds	r1, r3, #1
 8010954:	687a      	ldr	r2, [r7, #4]
 8010956:	6211      	str	r1, [r2, #32]
 8010958:	781a      	ldrb	r2, [r3, #0]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8010964:	b29b      	uxth	r3, r3
 8010966:	3b01      	subs	r3, #1
 8010968:	b29b      	uxth	r3, r3
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	4619      	mov	r1, r3
 801096e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8010970:	2b00      	cmp	r3, #0
 8010972:	d10f      	bne.n	8010994 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	681b      	ldr	r3, [r3, #0]
 8010978:	68da      	ldr	r2, [r3, #12]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	681b      	ldr	r3, [r3, #0]
 801097e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8010982:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	681b      	ldr	r3, [r3, #0]
 8010988:	68da      	ldr	r2, [r3, #12]
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	681b      	ldr	r3, [r3, #0]
 801098e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8010992:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8010994:	2300      	movs	r3, #0
 8010996:	e000      	b.n	801099a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010998:	2302      	movs	r3, #2
  }
}
 801099a:	4618      	mov	r0, r3
 801099c:	3714      	adds	r7, #20
 801099e:	46bd      	mov	sp, r7
 80109a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a4:	4770      	bx	lr

080109a6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80109a6:	b580      	push	{r7, lr}
 80109a8:	b082      	sub	sp, #8
 80109aa:	af00      	add	r7, sp, #0
 80109ac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	68da      	ldr	r2, [r3, #12]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	681b      	ldr	r3, [r3, #0]
 80109b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80109bc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2220      	movs	r2, #32
 80109c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7f9 ffba 	bl	800a940 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80109cc:	2300      	movs	r3, #0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}

080109d6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80109d6:	b580      	push	{r7, lr}
 80109d8:	b08c      	sub	sp, #48	@ 0x30
 80109da:	af00      	add	r7, sp, #0
 80109dc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80109e4:	b2db      	uxtb	r3, r3
 80109e6:	2b22      	cmp	r3, #34	@ 0x22
 80109e8:	f040 80ae 	bne.w	8010b48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	689b      	ldr	r3, [r3, #8]
 80109f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80109f4:	d117      	bne.n	8010a26 <UART_Receive_IT+0x50>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	691b      	ldr	r3, [r3, #16]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d113      	bne.n	8010a26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80109fe:	2300      	movs	r3, #0
 8010a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a06:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	685b      	ldr	r3, [r3, #4]
 8010a0e:	b29b      	uxth	r3, r3
 8010a10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a14:	b29a      	uxth	r2, r3
 8010a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a1e:	1c9a      	adds	r2, r3, #2
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	629a      	str	r2, [r3, #40]	@ 0x28
 8010a24:	e026      	b.n	8010a74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8010a2c:	2300      	movs	r3, #0
 8010a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	689b      	ldr	r3, [r3, #8]
 8010a34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010a38:	d007      	beq.n	8010a4a <UART_Receive_IT+0x74>
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	689b      	ldr	r3, [r3, #8]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	d10a      	bne.n	8010a58 <UART_Receive_IT+0x82>
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	691b      	ldr	r3, [r3, #16]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d106      	bne.n	8010a58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	681b      	ldr	r3, [r3, #0]
 8010a4e:	685b      	ldr	r3, [r3, #4]
 8010a50:	b2da      	uxtb	r2, r3
 8010a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a54:	701a      	strb	r2, [r3, #0]
 8010a56:	e008      	b.n	8010a6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	681b      	ldr	r3, [r3, #0]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	b2db      	uxtb	r3, r3
 8010a60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010a64:	b2da      	uxtb	r2, r3
 8010a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010a6e:	1c5a      	adds	r2, r3, #1
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	3b01      	subs	r3, #1
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	687a      	ldr	r2, [r7, #4]
 8010a80:	4619      	mov	r1, r3
 8010a82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d15d      	bne.n	8010b44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	681b      	ldr	r3, [r3, #0]
 8010a8c:	68da      	ldr	r2, [r3, #12]
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681b      	ldr	r3, [r3, #0]
 8010a92:	f022 0220 	bic.w	r2, r2, #32
 8010a96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	68da      	ldr	r2, [r3, #12]
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8010aa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	695a      	ldr	r2, [r3, #20]
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	f022 0201 	bic.w	r2, r2, #1
 8010ab6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	2220      	movs	r2, #32
 8010abc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010ac6:	687b      	ldr	r3, [r7, #4]
 8010ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010aca:	2b01      	cmp	r3, #1
 8010acc:	d135      	bne.n	8010b3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	330c      	adds	r3, #12
 8010ada:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010adc:	697b      	ldr	r3, [r7, #20]
 8010ade:	e853 3f00 	ldrex	r3, [r3]
 8010ae2:	613b      	str	r3, [r7, #16]
   return(result);
 8010ae4:	693b      	ldr	r3, [r7, #16]
 8010ae6:	f023 0310 	bic.w	r3, r3, #16
 8010aea:	627b      	str	r3, [r7, #36]	@ 0x24
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	681b      	ldr	r3, [r3, #0]
 8010af0:	330c      	adds	r3, #12
 8010af2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010af4:	623a      	str	r2, [r7, #32]
 8010af6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010af8:	69f9      	ldr	r1, [r7, #28]
 8010afa:	6a3a      	ldr	r2, [r7, #32]
 8010afc:	e841 2300 	strex	r3, r2, [r1]
 8010b00:	61bb      	str	r3, [r7, #24]
   return(result);
 8010b02:	69bb      	ldr	r3, [r7, #24]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d1e5      	bne.n	8010ad4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	f003 0310 	and.w	r3, r3, #16
 8010b12:	2b10      	cmp	r3, #16
 8010b14:	d10a      	bne.n	8010b2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8010b16:	2300      	movs	r3, #0
 8010b18:	60fb      	str	r3, [r7, #12]
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	60fb      	str	r3, [r7, #12]
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	685b      	ldr	r3, [r3, #4]
 8010b28:	60fb      	str	r3, [r7, #12]
 8010b2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010b30:	4619      	mov	r1, r3
 8010b32:	6878      	ldr	r0, [r7, #4]
 8010b34:	f7ff fc48 	bl	80103c8 <HAL_UARTEx_RxEventCallback>
 8010b38:	e002      	b.n	8010b40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f7f9 ff42 	bl	800a9c4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010b40:	2300      	movs	r3, #0
 8010b42:	e002      	b.n	8010b4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8010b44:	2300      	movs	r3, #0
 8010b46:	e000      	b.n	8010b4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8010b48:	2302      	movs	r3, #2
  }
}
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	3730      	adds	r7, #48	@ 0x30
 8010b4e:	46bd      	mov	sp, r7
 8010b50:	bd80      	pop	{r7, pc}
	...

08010b54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010b54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b58:	b0c0      	sub	sp, #256	@ 0x100
 8010b5a:	af00      	add	r7, sp, #0
 8010b5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010b64:	681b      	ldr	r3, [r3, #0]
 8010b66:	691b      	ldr	r3, [r3, #16]
 8010b68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010b70:	68d9      	ldr	r1, [r3, #12]
 8010b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010b76:	681a      	ldr	r2, [r3, #0]
 8010b78:	ea40 0301 	orr.w	r3, r0, r1
 8010b7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010b82:	689a      	ldr	r2, [r3, #8]
 8010b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010b88:	691b      	ldr	r3, [r3, #16]
 8010b8a:	431a      	orrs	r2, r3
 8010b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010b90:	695b      	ldr	r3, [r3, #20]
 8010b92:	431a      	orrs	r2, r3
 8010b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010b98:	69db      	ldr	r3, [r3, #28]
 8010b9a:	4313      	orrs	r3, r2
 8010b9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010ba4:	681b      	ldr	r3, [r3, #0]
 8010ba6:	68db      	ldr	r3, [r3, #12]
 8010ba8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010bac:	f021 010c 	bic.w	r1, r1, #12
 8010bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010bb4:	681a      	ldr	r2, [r3, #0]
 8010bb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8010bba:	430b      	orrs	r3, r1
 8010bbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8010bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	695b      	ldr	r3, [r3, #20]
 8010bc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8010bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010bce:	6999      	ldr	r1, [r3, #24]
 8010bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010bd4:	681a      	ldr	r2, [r3, #0]
 8010bd6:	ea40 0301 	orr.w	r3, r0, r1
 8010bda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8010bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010be0:	681a      	ldr	r2, [r3, #0]
 8010be2:	4b8f      	ldr	r3, [pc, #572]	@ (8010e20 <UART_SetConfig+0x2cc>)
 8010be4:	429a      	cmp	r2, r3
 8010be6:	d005      	beq.n	8010bf4 <UART_SetConfig+0xa0>
 8010be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010bec:	681a      	ldr	r2, [r3, #0]
 8010bee:	4b8d      	ldr	r3, [pc, #564]	@ (8010e24 <UART_SetConfig+0x2d0>)
 8010bf0:	429a      	cmp	r2, r3
 8010bf2:	d104      	bne.n	8010bfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8010bf4:	f7fd f91c 	bl	800de30 <HAL_RCC_GetPCLK2Freq>
 8010bf8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8010bfc:	e003      	b.n	8010c06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8010bfe:	f7fd f903 	bl	800de08 <HAL_RCC_GetPCLK1Freq>
 8010c02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010c0a:	69db      	ldr	r3, [r3, #28]
 8010c0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8010c10:	f040 810c 	bne.w	8010e2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8010c14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010c18:	2200      	movs	r2, #0
 8010c1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010c1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8010c22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8010c26:	4622      	mov	r2, r4
 8010c28:	462b      	mov	r3, r5
 8010c2a:	1891      	adds	r1, r2, r2
 8010c2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8010c2e:	415b      	adcs	r3, r3
 8010c30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8010c32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8010c36:	4621      	mov	r1, r4
 8010c38:	eb12 0801 	adds.w	r8, r2, r1
 8010c3c:	4629      	mov	r1, r5
 8010c3e:	eb43 0901 	adc.w	r9, r3, r1
 8010c42:	f04f 0200 	mov.w	r2, #0
 8010c46:	f04f 0300 	mov.w	r3, #0
 8010c4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010c4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010c52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010c56:	4690      	mov	r8, r2
 8010c58:	4699      	mov	r9, r3
 8010c5a:	4623      	mov	r3, r4
 8010c5c:	eb18 0303 	adds.w	r3, r8, r3
 8010c60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010c64:	462b      	mov	r3, r5
 8010c66:	eb49 0303 	adc.w	r3, r9, r3
 8010c6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010c72:	685b      	ldr	r3, [r3, #4]
 8010c74:	2200      	movs	r2, #0
 8010c76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010c7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8010c7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8010c82:	460b      	mov	r3, r1
 8010c84:	18db      	adds	r3, r3, r3
 8010c86:	653b      	str	r3, [r7, #80]	@ 0x50
 8010c88:	4613      	mov	r3, r2
 8010c8a:	eb42 0303 	adc.w	r3, r2, r3
 8010c8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8010c90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8010c94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8010c98:	f7f0 f806 	bl	8000ca8 <__aeabi_uldivmod>
 8010c9c:	4602      	mov	r2, r0
 8010c9e:	460b      	mov	r3, r1
 8010ca0:	4b61      	ldr	r3, [pc, #388]	@ (8010e28 <UART_SetConfig+0x2d4>)
 8010ca2:	fba3 2302 	umull	r2, r3, r3, r2
 8010ca6:	095b      	lsrs	r3, r3, #5
 8010ca8:	011c      	lsls	r4, r3, #4
 8010caa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010cae:	2200      	movs	r2, #0
 8010cb0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010cb4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8010cb8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8010cbc:	4642      	mov	r2, r8
 8010cbe:	464b      	mov	r3, r9
 8010cc0:	1891      	adds	r1, r2, r2
 8010cc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8010cc4:	415b      	adcs	r3, r3
 8010cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010cc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8010ccc:	4641      	mov	r1, r8
 8010cce:	eb12 0a01 	adds.w	sl, r2, r1
 8010cd2:	4649      	mov	r1, r9
 8010cd4:	eb43 0b01 	adc.w	fp, r3, r1
 8010cd8:	f04f 0200 	mov.w	r2, #0
 8010cdc:	f04f 0300 	mov.w	r3, #0
 8010ce0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8010ce4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8010ce8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8010cec:	4692      	mov	sl, r2
 8010cee:	469b      	mov	fp, r3
 8010cf0:	4643      	mov	r3, r8
 8010cf2:	eb1a 0303 	adds.w	r3, sl, r3
 8010cf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010cfa:	464b      	mov	r3, r9
 8010cfc:	eb4b 0303 	adc.w	r3, fp, r3
 8010d00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	2200      	movs	r2, #0
 8010d0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010d10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8010d14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010d18:	460b      	mov	r3, r1
 8010d1a:	18db      	adds	r3, r3, r3
 8010d1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8010d1e:	4613      	mov	r3, r2
 8010d20:	eb42 0303 	adc.w	r3, r2, r3
 8010d24:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010d2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010d2e:	f7ef ffbb 	bl	8000ca8 <__aeabi_uldivmod>
 8010d32:	4602      	mov	r2, r0
 8010d34:	460b      	mov	r3, r1
 8010d36:	4611      	mov	r1, r2
 8010d38:	4b3b      	ldr	r3, [pc, #236]	@ (8010e28 <UART_SetConfig+0x2d4>)
 8010d3a:	fba3 2301 	umull	r2, r3, r3, r1
 8010d3e:	095b      	lsrs	r3, r3, #5
 8010d40:	2264      	movs	r2, #100	@ 0x64
 8010d42:	fb02 f303 	mul.w	r3, r2, r3
 8010d46:	1acb      	subs	r3, r1, r3
 8010d48:	00db      	lsls	r3, r3, #3
 8010d4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8010d4e:	4b36      	ldr	r3, [pc, #216]	@ (8010e28 <UART_SetConfig+0x2d4>)
 8010d50:	fba3 2302 	umull	r2, r3, r3, r2
 8010d54:	095b      	lsrs	r3, r3, #5
 8010d56:	005b      	lsls	r3, r3, #1
 8010d58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010d5c:	441c      	add	r4, r3
 8010d5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010d62:	2200      	movs	r2, #0
 8010d64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010d68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8010d6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8010d70:	4642      	mov	r2, r8
 8010d72:	464b      	mov	r3, r9
 8010d74:	1891      	adds	r1, r2, r2
 8010d76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8010d78:	415b      	adcs	r3, r3
 8010d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010d7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8010d80:	4641      	mov	r1, r8
 8010d82:	1851      	adds	r1, r2, r1
 8010d84:	6339      	str	r1, [r7, #48]	@ 0x30
 8010d86:	4649      	mov	r1, r9
 8010d88:	414b      	adcs	r3, r1
 8010d8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8010d8c:	f04f 0200 	mov.w	r2, #0
 8010d90:	f04f 0300 	mov.w	r3, #0
 8010d94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8010d98:	4659      	mov	r1, fp
 8010d9a:	00cb      	lsls	r3, r1, #3
 8010d9c:	4651      	mov	r1, sl
 8010d9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010da2:	4651      	mov	r1, sl
 8010da4:	00ca      	lsls	r2, r1, #3
 8010da6:	4610      	mov	r0, r2
 8010da8:	4619      	mov	r1, r3
 8010daa:	4603      	mov	r3, r0
 8010dac:	4642      	mov	r2, r8
 8010dae:	189b      	adds	r3, r3, r2
 8010db0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8010db4:	464b      	mov	r3, r9
 8010db6:	460a      	mov	r2, r1
 8010db8:	eb42 0303 	adc.w	r3, r2, r3
 8010dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8010dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010dc4:	685b      	ldr	r3, [r3, #4]
 8010dc6:	2200      	movs	r2, #0
 8010dc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8010dcc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8010dd0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8010dd4:	460b      	mov	r3, r1
 8010dd6:	18db      	adds	r3, r3, r3
 8010dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010dda:	4613      	mov	r3, r2
 8010ddc:	eb42 0303 	adc.w	r3, r2, r3
 8010de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010de2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8010de6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8010dea:	f7ef ff5d 	bl	8000ca8 <__aeabi_uldivmod>
 8010dee:	4602      	mov	r2, r0
 8010df0:	460b      	mov	r3, r1
 8010df2:	4b0d      	ldr	r3, [pc, #52]	@ (8010e28 <UART_SetConfig+0x2d4>)
 8010df4:	fba3 1302 	umull	r1, r3, r3, r2
 8010df8:	095b      	lsrs	r3, r3, #5
 8010dfa:	2164      	movs	r1, #100	@ 0x64
 8010dfc:	fb01 f303 	mul.w	r3, r1, r3
 8010e00:	1ad3      	subs	r3, r2, r3
 8010e02:	00db      	lsls	r3, r3, #3
 8010e04:	3332      	adds	r3, #50	@ 0x32
 8010e06:	4a08      	ldr	r2, [pc, #32]	@ (8010e28 <UART_SetConfig+0x2d4>)
 8010e08:	fba2 2303 	umull	r2, r3, r2, r3
 8010e0c:	095b      	lsrs	r3, r3, #5
 8010e0e:	f003 0207 	and.w	r2, r3, #7
 8010e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e16:	681b      	ldr	r3, [r3, #0]
 8010e18:	4422      	add	r2, r4
 8010e1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010e1c:	e106      	b.n	801102c <UART_SetConfig+0x4d8>
 8010e1e:	bf00      	nop
 8010e20:	40011000 	.word	0x40011000
 8010e24:	40011400 	.word	0x40011400
 8010e28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010e2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010e30:	2200      	movs	r2, #0
 8010e32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8010e36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010e3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8010e3e:	4642      	mov	r2, r8
 8010e40:	464b      	mov	r3, r9
 8010e42:	1891      	adds	r1, r2, r2
 8010e44:	6239      	str	r1, [r7, #32]
 8010e46:	415b      	adcs	r3, r3
 8010e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010e4e:	4641      	mov	r1, r8
 8010e50:	1854      	adds	r4, r2, r1
 8010e52:	4649      	mov	r1, r9
 8010e54:	eb43 0501 	adc.w	r5, r3, r1
 8010e58:	f04f 0200 	mov.w	r2, #0
 8010e5c:	f04f 0300 	mov.w	r3, #0
 8010e60:	00eb      	lsls	r3, r5, #3
 8010e62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010e66:	00e2      	lsls	r2, r4, #3
 8010e68:	4614      	mov	r4, r2
 8010e6a:	461d      	mov	r5, r3
 8010e6c:	4643      	mov	r3, r8
 8010e6e:	18e3      	adds	r3, r4, r3
 8010e70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8010e74:	464b      	mov	r3, r9
 8010e76:	eb45 0303 	adc.w	r3, r5, r3
 8010e7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	2200      	movs	r2, #0
 8010e86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010e8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010e8e:	f04f 0200 	mov.w	r2, #0
 8010e92:	f04f 0300 	mov.w	r3, #0
 8010e96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010e9a:	4629      	mov	r1, r5
 8010e9c:	008b      	lsls	r3, r1, #2
 8010e9e:	4621      	mov	r1, r4
 8010ea0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010ea4:	4621      	mov	r1, r4
 8010ea6:	008a      	lsls	r2, r1, #2
 8010ea8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010eac:	f7ef fefc 	bl	8000ca8 <__aeabi_uldivmod>
 8010eb0:	4602      	mov	r2, r0
 8010eb2:	460b      	mov	r3, r1
 8010eb4:	4b60      	ldr	r3, [pc, #384]	@ (8011038 <UART_SetConfig+0x4e4>)
 8010eb6:	fba3 2302 	umull	r2, r3, r3, r2
 8010eba:	095b      	lsrs	r3, r3, #5
 8010ebc:	011c      	lsls	r4, r3, #4
 8010ebe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010ec2:	2200      	movs	r2, #0
 8010ec4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8010ec8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8010ecc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8010ed0:	4642      	mov	r2, r8
 8010ed2:	464b      	mov	r3, r9
 8010ed4:	1891      	adds	r1, r2, r2
 8010ed6:	61b9      	str	r1, [r7, #24]
 8010ed8:	415b      	adcs	r3, r3
 8010eda:	61fb      	str	r3, [r7, #28]
 8010edc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010ee0:	4641      	mov	r1, r8
 8010ee2:	1851      	adds	r1, r2, r1
 8010ee4:	6139      	str	r1, [r7, #16]
 8010ee6:	4649      	mov	r1, r9
 8010ee8:	414b      	adcs	r3, r1
 8010eea:	617b      	str	r3, [r7, #20]
 8010eec:	f04f 0200 	mov.w	r2, #0
 8010ef0:	f04f 0300 	mov.w	r3, #0
 8010ef4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010ef8:	4659      	mov	r1, fp
 8010efa:	00cb      	lsls	r3, r1, #3
 8010efc:	4651      	mov	r1, sl
 8010efe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010f02:	4651      	mov	r1, sl
 8010f04:	00ca      	lsls	r2, r1, #3
 8010f06:	4610      	mov	r0, r2
 8010f08:	4619      	mov	r1, r3
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	4642      	mov	r2, r8
 8010f0e:	189b      	adds	r3, r3, r2
 8010f10:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8010f14:	464b      	mov	r3, r9
 8010f16:	460a      	mov	r2, r1
 8010f18:	eb42 0303 	adc.w	r3, r2, r3
 8010f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010f24:	685b      	ldr	r3, [r3, #4]
 8010f26:	2200      	movs	r2, #0
 8010f28:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010f2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010f2c:	f04f 0200 	mov.w	r2, #0
 8010f30:	f04f 0300 	mov.w	r3, #0
 8010f34:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010f38:	4649      	mov	r1, r9
 8010f3a:	008b      	lsls	r3, r1, #2
 8010f3c:	4641      	mov	r1, r8
 8010f3e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010f42:	4641      	mov	r1, r8
 8010f44:	008a      	lsls	r2, r1, #2
 8010f46:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010f4a:	f7ef fead 	bl	8000ca8 <__aeabi_uldivmod>
 8010f4e:	4602      	mov	r2, r0
 8010f50:	460b      	mov	r3, r1
 8010f52:	4611      	mov	r1, r2
 8010f54:	4b38      	ldr	r3, [pc, #224]	@ (8011038 <UART_SetConfig+0x4e4>)
 8010f56:	fba3 2301 	umull	r2, r3, r3, r1
 8010f5a:	095b      	lsrs	r3, r3, #5
 8010f5c:	2264      	movs	r2, #100	@ 0x64
 8010f5e:	fb02 f303 	mul.w	r3, r2, r3
 8010f62:	1acb      	subs	r3, r1, r3
 8010f64:	011b      	lsls	r3, r3, #4
 8010f66:	3332      	adds	r3, #50	@ 0x32
 8010f68:	4a33      	ldr	r2, [pc, #204]	@ (8011038 <UART_SetConfig+0x4e4>)
 8010f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8010f6e:	095b      	lsrs	r3, r3, #5
 8010f70:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010f74:	441c      	add	r4, r3
 8010f76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010f7a:	2200      	movs	r2, #0
 8010f7c:	673b      	str	r3, [r7, #112]	@ 0x70
 8010f7e:	677a      	str	r2, [r7, #116]	@ 0x74
 8010f80:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8010f84:	4642      	mov	r2, r8
 8010f86:	464b      	mov	r3, r9
 8010f88:	1891      	adds	r1, r2, r2
 8010f8a:	60b9      	str	r1, [r7, #8]
 8010f8c:	415b      	adcs	r3, r3
 8010f8e:	60fb      	str	r3, [r7, #12]
 8010f90:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8010f94:	4641      	mov	r1, r8
 8010f96:	1851      	adds	r1, r2, r1
 8010f98:	6039      	str	r1, [r7, #0]
 8010f9a:	4649      	mov	r1, r9
 8010f9c:	414b      	adcs	r3, r1
 8010f9e:	607b      	str	r3, [r7, #4]
 8010fa0:	f04f 0200 	mov.w	r2, #0
 8010fa4:	f04f 0300 	mov.w	r3, #0
 8010fa8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010fac:	4659      	mov	r1, fp
 8010fae:	00cb      	lsls	r3, r1, #3
 8010fb0:	4651      	mov	r1, sl
 8010fb2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010fb6:	4651      	mov	r1, sl
 8010fb8:	00ca      	lsls	r2, r1, #3
 8010fba:	4610      	mov	r0, r2
 8010fbc:	4619      	mov	r1, r3
 8010fbe:	4603      	mov	r3, r0
 8010fc0:	4642      	mov	r2, r8
 8010fc2:	189b      	adds	r3, r3, r2
 8010fc4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8010fc6:	464b      	mov	r3, r9
 8010fc8:	460a      	mov	r2, r1
 8010fca:	eb42 0303 	adc.w	r3, r2, r3
 8010fce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8010fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	663b      	str	r3, [r7, #96]	@ 0x60
 8010fda:	667a      	str	r2, [r7, #100]	@ 0x64
 8010fdc:	f04f 0200 	mov.w	r2, #0
 8010fe0:	f04f 0300 	mov.w	r3, #0
 8010fe4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8010fe8:	4649      	mov	r1, r9
 8010fea:	008b      	lsls	r3, r1, #2
 8010fec:	4641      	mov	r1, r8
 8010fee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8010ff2:	4641      	mov	r1, r8
 8010ff4:	008a      	lsls	r2, r1, #2
 8010ff6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8010ffa:	f7ef fe55 	bl	8000ca8 <__aeabi_uldivmod>
 8010ffe:	4602      	mov	r2, r0
 8011000:	460b      	mov	r3, r1
 8011002:	4b0d      	ldr	r3, [pc, #52]	@ (8011038 <UART_SetConfig+0x4e4>)
 8011004:	fba3 1302 	umull	r1, r3, r3, r2
 8011008:	095b      	lsrs	r3, r3, #5
 801100a:	2164      	movs	r1, #100	@ 0x64
 801100c:	fb01 f303 	mul.w	r3, r1, r3
 8011010:	1ad3      	subs	r3, r2, r3
 8011012:	011b      	lsls	r3, r3, #4
 8011014:	3332      	adds	r3, #50	@ 0x32
 8011016:	4a08      	ldr	r2, [pc, #32]	@ (8011038 <UART_SetConfig+0x4e4>)
 8011018:	fba2 2303 	umull	r2, r3, r2, r3
 801101c:	095b      	lsrs	r3, r3, #5
 801101e:	f003 020f 	and.w	r2, r3, #15
 8011022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	4422      	add	r2, r4
 801102a:	609a      	str	r2, [r3, #8]
}
 801102c:	bf00      	nop
 801102e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8011032:	46bd      	mov	sp, r7
 8011034:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011038:	51eb851f 	.word	0x51eb851f

0801103c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 801103c:	b084      	sub	sp, #16
 801103e:	b580      	push	{r7, lr}
 8011040:	b084      	sub	sp, #16
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
 8011046:	f107 001c 	add.w	r0, r7, #28
 801104a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801104e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8011052:	2b01      	cmp	r3, #1
 8011054:	d123      	bne.n	801109e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801105a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011062:	687b      	ldr	r3, [r7, #4]
 8011064:	68db      	ldr	r3, [r3, #12]
 8011066:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 801106a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801106e:	687a      	ldr	r2, [r7, #4]
 8011070:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011072:	687b      	ldr	r3, [r7, #4]
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 801107e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8011082:	2b01      	cmp	r3, #1
 8011084:	d105      	bne.n	8011092 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011086:	687b      	ldr	r3, [r7, #4]
 8011088:	68db      	ldr	r3, [r3, #12]
 801108a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8011092:	6878      	ldr	r0, [r7, #4]
 8011094:	f001 fae8 	bl	8012668 <USB_CoreReset>
 8011098:	4603      	mov	r3, r0
 801109a:	73fb      	strb	r3, [r7, #15]
 801109c:	e01b      	b.n	80110d6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	68db      	ldr	r3, [r3, #12]
 80110a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f001 fadc 	bl	8012668 <USB_CoreReset>
 80110b0:	4603      	mov	r3, r0
 80110b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80110b4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d106      	bne.n	80110ca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80110bc:	687b      	ldr	r3, [r7, #4]
 80110be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110c0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	639a      	str	r2, [r3, #56]	@ 0x38
 80110c8:	e005      	b.n	80110d6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80110ce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80110d2:	687b      	ldr	r3, [r7, #4]
 80110d4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80110d6:	7fbb      	ldrb	r3, [r7, #30]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d10b      	bne.n	80110f4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	689b      	ldr	r3, [r3, #8]
 80110e0:	f043 0206 	orr.w	r2, r3, #6
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80110e8:	687b      	ldr	r3, [r7, #4]
 80110ea:	689b      	ldr	r3, [r3, #8]
 80110ec:	f043 0220 	orr.w	r2, r3, #32
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80110f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80110f6:	4618      	mov	r0, r3
 80110f8:	3710      	adds	r7, #16
 80110fa:	46bd      	mov	sp, r7
 80110fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011100:	b004      	add	sp, #16
 8011102:	4770      	bx	lr

08011104 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011104:	b480      	push	{r7}
 8011106:	b087      	sub	sp, #28
 8011108:	af00      	add	r7, sp, #0
 801110a:	60f8      	str	r0, [r7, #12]
 801110c:	60b9      	str	r1, [r7, #8]
 801110e:	4613      	mov	r3, r2
 8011110:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011112:	79fb      	ldrb	r3, [r7, #7]
 8011114:	2b02      	cmp	r3, #2
 8011116:	d165      	bne.n	80111e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	4a41      	ldr	r2, [pc, #260]	@ (8011220 <USB_SetTurnaroundTime+0x11c>)
 801111c:	4293      	cmp	r3, r2
 801111e:	d906      	bls.n	801112e <USB_SetTurnaroundTime+0x2a>
 8011120:	68bb      	ldr	r3, [r7, #8]
 8011122:	4a40      	ldr	r2, [pc, #256]	@ (8011224 <USB_SetTurnaroundTime+0x120>)
 8011124:	4293      	cmp	r3, r2
 8011126:	d202      	bcs.n	801112e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011128:	230f      	movs	r3, #15
 801112a:	617b      	str	r3, [r7, #20]
 801112c:	e062      	b.n	80111f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	4a3c      	ldr	r2, [pc, #240]	@ (8011224 <USB_SetTurnaroundTime+0x120>)
 8011132:	4293      	cmp	r3, r2
 8011134:	d306      	bcc.n	8011144 <USB_SetTurnaroundTime+0x40>
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	4a3b      	ldr	r2, [pc, #236]	@ (8011228 <USB_SetTurnaroundTime+0x124>)
 801113a:	4293      	cmp	r3, r2
 801113c:	d202      	bcs.n	8011144 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 801113e:	230e      	movs	r3, #14
 8011140:	617b      	str	r3, [r7, #20]
 8011142:	e057      	b.n	80111f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	4a38      	ldr	r2, [pc, #224]	@ (8011228 <USB_SetTurnaroundTime+0x124>)
 8011148:	4293      	cmp	r3, r2
 801114a:	d306      	bcc.n	801115a <USB_SetTurnaroundTime+0x56>
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	4a37      	ldr	r2, [pc, #220]	@ (801122c <USB_SetTurnaroundTime+0x128>)
 8011150:	4293      	cmp	r3, r2
 8011152:	d202      	bcs.n	801115a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011154:	230d      	movs	r3, #13
 8011156:	617b      	str	r3, [r7, #20]
 8011158:	e04c      	b.n	80111f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801115a:	68bb      	ldr	r3, [r7, #8]
 801115c:	4a33      	ldr	r2, [pc, #204]	@ (801122c <USB_SetTurnaroundTime+0x128>)
 801115e:	4293      	cmp	r3, r2
 8011160:	d306      	bcc.n	8011170 <USB_SetTurnaroundTime+0x6c>
 8011162:	68bb      	ldr	r3, [r7, #8]
 8011164:	4a32      	ldr	r2, [pc, #200]	@ (8011230 <USB_SetTurnaroundTime+0x12c>)
 8011166:	4293      	cmp	r3, r2
 8011168:	d802      	bhi.n	8011170 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801116a:	230c      	movs	r3, #12
 801116c:	617b      	str	r3, [r7, #20]
 801116e:	e041      	b.n	80111f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	4a2f      	ldr	r2, [pc, #188]	@ (8011230 <USB_SetTurnaroundTime+0x12c>)
 8011174:	4293      	cmp	r3, r2
 8011176:	d906      	bls.n	8011186 <USB_SetTurnaroundTime+0x82>
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	4a2e      	ldr	r2, [pc, #184]	@ (8011234 <USB_SetTurnaroundTime+0x130>)
 801117c:	4293      	cmp	r3, r2
 801117e:	d802      	bhi.n	8011186 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011180:	230b      	movs	r3, #11
 8011182:	617b      	str	r3, [r7, #20]
 8011184:	e036      	b.n	80111f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011186:	68bb      	ldr	r3, [r7, #8]
 8011188:	4a2a      	ldr	r2, [pc, #168]	@ (8011234 <USB_SetTurnaroundTime+0x130>)
 801118a:	4293      	cmp	r3, r2
 801118c:	d906      	bls.n	801119c <USB_SetTurnaroundTime+0x98>
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	4a29      	ldr	r2, [pc, #164]	@ (8011238 <USB_SetTurnaroundTime+0x134>)
 8011192:	4293      	cmp	r3, r2
 8011194:	d802      	bhi.n	801119c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011196:	230a      	movs	r3, #10
 8011198:	617b      	str	r3, [r7, #20]
 801119a:	e02b      	b.n	80111f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	4a26      	ldr	r2, [pc, #152]	@ (8011238 <USB_SetTurnaroundTime+0x134>)
 80111a0:	4293      	cmp	r3, r2
 80111a2:	d906      	bls.n	80111b2 <USB_SetTurnaroundTime+0xae>
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	4a25      	ldr	r2, [pc, #148]	@ (801123c <USB_SetTurnaroundTime+0x138>)
 80111a8:	4293      	cmp	r3, r2
 80111aa:	d202      	bcs.n	80111b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80111ac:	2309      	movs	r3, #9
 80111ae:	617b      	str	r3, [r7, #20]
 80111b0:	e020      	b.n	80111f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80111b2:	68bb      	ldr	r3, [r7, #8]
 80111b4:	4a21      	ldr	r2, [pc, #132]	@ (801123c <USB_SetTurnaroundTime+0x138>)
 80111b6:	4293      	cmp	r3, r2
 80111b8:	d306      	bcc.n	80111c8 <USB_SetTurnaroundTime+0xc4>
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	4a20      	ldr	r2, [pc, #128]	@ (8011240 <USB_SetTurnaroundTime+0x13c>)
 80111be:	4293      	cmp	r3, r2
 80111c0:	d802      	bhi.n	80111c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80111c2:	2308      	movs	r3, #8
 80111c4:	617b      	str	r3, [r7, #20]
 80111c6:	e015      	b.n	80111f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80111c8:	68bb      	ldr	r3, [r7, #8]
 80111ca:	4a1d      	ldr	r2, [pc, #116]	@ (8011240 <USB_SetTurnaroundTime+0x13c>)
 80111cc:	4293      	cmp	r3, r2
 80111ce:	d906      	bls.n	80111de <USB_SetTurnaroundTime+0xda>
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	4a1c      	ldr	r2, [pc, #112]	@ (8011244 <USB_SetTurnaroundTime+0x140>)
 80111d4:	4293      	cmp	r3, r2
 80111d6:	d202      	bcs.n	80111de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80111d8:	2307      	movs	r3, #7
 80111da:	617b      	str	r3, [r7, #20]
 80111dc:	e00a      	b.n	80111f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80111de:	2306      	movs	r3, #6
 80111e0:	617b      	str	r3, [r7, #20]
 80111e2:	e007      	b.n	80111f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80111e4:	79fb      	ldrb	r3, [r7, #7]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d102      	bne.n	80111f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80111ea:	2309      	movs	r3, #9
 80111ec:	617b      	str	r3, [r7, #20]
 80111ee:	e001      	b.n	80111f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80111f0:	2309      	movs	r3, #9
 80111f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	68db      	ldr	r3, [r3, #12]
 80111f8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	68da      	ldr	r2, [r3, #12]
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	029b      	lsls	r3, r3, #10
 8011208:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 801120c:	431a      	orrs	r2, r3
 801120e:	68fb      	ldr	r3, [r7, #12]
 8011210:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011212:	2300      	movs	r3, #0
}
 8011214:	4618      	mov	r0, r3
 8011216:	371c      	adds	r7, #28
 8011218:	46bd      	mov	sp, r7
 801121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801121e:	4770      	bx	lr
 8011220:	00d8acbf 	.word	0x00d8acbf
 8011224:	00e4e1c0 	.word	0x00e4e1c0
 8011228:	00f42400 	.word	0x00f42400
 801122c:	01067380 	.word	0x01067380
 8011230:	011a499f 	.word	0x011a499f
 8011234:	01312cff 	.word	0x01312cff
 8011238:	014ca43f 	.word	0x014ca43f
 801123c:	016e3600 	.word	0x016e3600
 8011240:	01a6ab1f 	.word	0x01a6ab1f
 8011244:	01e84800 	.word	0x01e84800

08011248 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011248:	b480      	push	{r7}
 801124a:	b083      	sub	sp, #12
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	689b      	ldr	r3, [r3, #8]
 8011254:	f043 0201 	orr.w	r2, r3, #1
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801125c:	2300      	movs	r3, #0
}
 801125e:	4618      	mov	r0, r3
 8011260:	370c      	adds	r7, #12
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr

0801126a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801126a:	b480      	push	{r7}
 801126c:	b083      	sub	sp, #12
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	689b      	ldr	r3, [r3, #8]
 8011276:	f023 0201 	bic.w	r2, r3, #1
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 801127e:	2300      	movs	r3, #0
}
 8011280:	4618      	mov	r0, r3
 8011282:	370c      	adds	r7, #12
 8011284:	46bd      	mov	sp, r7
 8011286:	f85d 7b04 	ldr.w	r7, [sp], #4
 801128a:	4770      	bx	lr

0801128c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b084      	sub	sp, #16
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	460b      	mov	r3, r1
 8011296:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8011298:	2300      	movs	r3, #0
 801129a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80112a8:	78fb      	ldrb	r3, [r7, #3]
 80112aa:	2b01      	cmp	r3, #1
 80112ac:	d115      	bne.n	80112da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80112ba:	200a      	movs	r0, #10
 80112bc:	f7f9 fe98 	bl	800aff0 <HAL_Delay>
      ms += 10U;
 80112c0:	68fb      	ldr	r3, [r7, #12]
 80112c2:	330a      	adds	r3, #10
 80112c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80112c6:	6878      	ldr	r0, [r7, #4]
 80112c8:	f001 f93f 	bl	801254a <USB_GetMode>
 80112cc:	4603      	mov	r3, r0
 80112ce:	2b01      	cmp	r3, #1
 80112d0:	d01e      	beq.n	8011310 <USB_SetCurrentMode+0x84>
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	2bc7      	cmp	r3, #199	@ 0xc7
 80112d6:	d9f0      	bls.n	80112ba <USB_SetCurrentMode+0x2e>
 80112d8:	e01a      	b.n	8011310 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80112da:	78fb      	ldrb	r3, [r7, #3]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d115      	bne.n	801130c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	68db      	ldr	r3, [r3, #12]
 80112e4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80112e8:	687b      	ldr	r3, [r7, #4]
 80112ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80112ec:	200a      	movs	r0, #10
 80112ee:	f7f9 fe7f 	bl	800aff0 <HAL_Delay>
      ms += 10U;
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	330a      	adds	r3, #10
 80112f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80112f8:	6878      	ldr	r0, [r7, #4]
 80112fa:	f001 f926 	bl	801254a <USB_GetMode>
 80112fe:	4603      	mov	r3, r0
 8011300:	2b00      	cmp	r3, #0
 8011302:	d005      	beq.n	8011310 <USB_SetCurrentMode+0x84>
 8011304:	68fb      	ldr	r3, [r7, #12]
 8011306:	2bc7      	cmp	r3, #199	@ 0xc7
 8011308:	d9f0      	bls.n	80112ec <USB_SetCurrentMode+0x60>
 801130a:	e001      	b.n	8011310 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 801130c:	2301      	movs	r3, #1
 801130e:	e005      	b.n	801131c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8011310:	68fb      	ldr	r3, [r7, #12]
 8011312:	2bc8      	cmp	r3, #200	@ 0xc8
 8011314:	d101      	bne.n	801131a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8011316:	2301      	movs	r3, #1
 8011318:	e000      	b.n	801131c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801131a:	2300      	movs	r3, #0
}
 801131c:	4618      	mov	r0, r3
 801131e:	3710      	adds	r7, #16
 8011320:	46bd      	mov	sp, r7
 8011322:	bd80      	pop	{r7, pc}

08011324 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011324:	b084      	sub	sp, #16
 8011326:	b580      	push	{r7, lr}
 8011328:	b086      	sub	sp, #24
 801132a:	af00      	add	r7, sp, #0
 801132c:	6078      	str	r0, [r7, #4]
 801132e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8011332:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011336:	2300      	movs	r3, #0
 8011338:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801133e:	2300      	movs	r3, #0
 8011340:	613b      	str	r3, [r7, #16]
 8011342:	e009      	b.n	8011358 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011344:	687a      	ldr	r2, [r7, #4]
 8011346:	693b      	ldr	r3, [r7, #16]
 8011348:	3340      	adds	r3, #64	@ 0x40
 801134a:	009b      	lsls	r3, r3, #2
 801134c:	4413      	add	r3, r2
 801134e:	2200      	movs	r2, #0
 8011350:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011352:	693b      	ldr	r3, [r7, #16]
 8011354:	3301      	adds	r3, #1
 8011356:	613b      	str	r3, [r7, #16]
 8011358:	693b      	ldr	r3, [r7, #16]
 801135a:	2b0e      	cmp	r3, #14
 801135c:	d9f2      	bls.n	8011344 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 801135e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8011362:	2b00      	cmp	r3, #0
 8011364:	d11c      	bne.n	80113a0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011366:	68fb      	ldr	r3, [r7, #12]
 8011368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801136c:	685b      	ldr	r3, [r3, #4]
 801136e:	68fa      	ldr	r2, [r7, #12]
 8011370:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011374:	f043 0302 	orr.w	r3, r3, #2
 8011378:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801137e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801138a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011396:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	639a      	str	r2, [r3, #56]	@ 0x38
 801139e:	e00b      	b.n	80113b8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80113b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80113be:	461a      	mov	r2, r3
 80113c0:	2300      	movs	r3, #0
 80113c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80113c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80113c8:	2b01      	cmp	r3, #1
 80113ca:	d10d      	bne.n	80113e8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80113cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d104      	bne.n	80113de <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80113d4:	2100      	movs	r1, #0
 80113d6:	6878      	ldr	r0, [r7, #4]
 80113d8:	f000 f968 	bl	80116ac <USB_SetDevSpeed>
 80113dc:	e008      	b.n	80113f0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80113de:	2101      	movs	r1, #1
 80113e0:	6878      	ldr	r0, [r7, #4]
 80113e2:	f000 f963 	bl	80116ac <USB_SetDevSpeed>
 80113e6:	e003      	b.n	80113f0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80113e8:	2103      	movs	r1, #3
 80113ea:	6878      	ldr	r0, [r7, #4]
 80113ec:	f000 f95e 	bl	80116ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80113f0:	2110      	movs	r1, #16
 80113f2:	6878      	ldr	r0, [r7, #4]
 80113f4:	f000 f8fa 	bl	80115ec <USB_FlushTxFifo>
 80113f8:	4603      	mov	r3, r0
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d001      	beq.n	8011402 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80113fe:	2301      	movs	r3, #1
 8011400:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011402:	6878      	ldr	r0, [r7, #4]
 8011404:	f000 f924 	bl	8011650 <USB_FlushRxFifo>
 8011408:	4603      	mov	r3, r0
 801140a:	2b00      	cmp	r3, #0
 801140c:	d001      	beq.n	8011412 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 801140e:	2301      	movs	r3, #1
 8011410:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011412:	68fb      	ldr	r3, [r7, #12]
 8011414:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011418:	461a      	mov	r2, r3
 801141a:	2300      	movs	r3, #0
 801141c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 801141e:	68fb      	ldr	r3, [r7, #12]
 8011420:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011424:	461a      	mov	r2, r3
 8011426:	2300      	movs	r3, #0
 8011428:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011430:	461a      	mov	r2, r3
 8011432:	2300      	movs	r3, #0
 8011434:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011436:	2300      	movs	r3, #0
 8011438:	613b      	str	r3, [r7, #16]
 801143a:	e043      	b.n	80114c4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801143c:	693b      	ldr	r3, [r7, #16]
 801143e:	015a      	lsls	r2, r3, #5
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	4413      	add	r3, r2
 8011444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801144e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011452:	d118      	bne.n	8011486 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	2b00      	cmp	r3, #0
 8011458:	d10a      	bne.n	8011470 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801145a:	693b      	ldr	r3, [r7, #16]
 801145c:	015a      	lsls	r2, r3, #5
 801145e:	68fb      	ldr	r3, [r7, #12]
 8011460:	4413      	add	r3, r2
 8011462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011466:	461a      	mov	r2, r3
 8011468:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 801146c:	6013      	str	r3, [r2, #0]
 801146e:	e013      	b.n	8011498 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	015a      	lsls	r2, r3, #5
 8011474:	68fb      	ldr	r3, [r7, #12]
 8011476:	4413      	add	r3, r2
 8011478:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801147c:	461a      	mov	r2, r3
 801147e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8011482:	6013      	str	r3, [r2, #0]
 8011484:	e008      	b.n	8011498 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	015a      	lsls	r2, r3, #5
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	4413      	add	r3, r2
 801148e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011492:	461a      	mov	r2, r3
 8011494:	2300      	movs	r3, #0
 8011496:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011498:	693b      	ldr	r3, [r7, #16]
 801149a:	015a      	lsls	r2, r3, #5
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	4413      	add	r3, r2
 80114a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114a4:	461a      	mov	r2, r3
 80114a6:	2300      	movs	r3, #0
 80114a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80114aa:	693b      	ldr	r3, [r7, #16]
 80114ac:	015a      	lsls	r2, r3, #5
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	4413      	add	r3, r2
 80114b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114b6:	461a      	mov	r2, r3
 80114b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80114bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	3301      	adds	r3, #1
 80114c2:	613b      	str	r3, [r7, #16]
 80114c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80114c8:	461a      	mov	r2, r3
 80114ca:	693b      	ldr	r3, [r7, #16]
 80114cc:	4293      	cmp	r3, r2
 80114ce:	d3b5      	bcc.n	801143c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80114d0:	2300      	movs	r3, #0
 80114d2:	613b      	str	r3, [r7, #16]
 80114d4:	e043      	b.n	801155e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80114d6:	693b      	ldr	r3, [r7, #16]
 80114d8:	015a      	lsls	r2, r3, #5
 80114da:	68fb      	ldr	r3, [r7, #12]
 80114dc:	4413      	add	r3, r2
 80114de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80114e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80114ec:	d118      	bne.n	8011520 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80114ee:	693b      	ldr	r3, [r7, #16]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d10a      	bne.n	801150a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80114f4:	693b      	ldr	r3, [r7, #16]
 80114f6:	015a      	lsls	r2, r3, #5
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	4413      	add	r3, r2
 80114fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011500:	461a      	mov	r2, r3
 8011502:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8011506:	6013      	str	r3, [r2, #0]
 8011508:	e013      	b.n	8011532 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	015a      	lsls	r2, r3, #5
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	4413      	add	r3, r2
 8011512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011516:	461a      	mov	r2, r3
 8011518:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 801151c:	6013      	str	r3, [r2, #0]
 801151e:	e008      	b.n	8011532 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011520:	693b      	ldr	r3, [r7, #16]
 8011522:	015a      	lsls	r2, r3, #5
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	4413      	add	r3, r2
 8011528:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801152c:	461a      	mov	r2, r3
 801152e:	2300      	movs	r3, #0
 8011530:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8011532:	693b      	ldr	r3, [r7, #16]
 8011534:	015a      	lsls	r2, r3, #5
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	4413      	add	r3, r2
 801153a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801153e:	461a      	mov	r2, r3
 8011540:	2300      	movs	r3, #0
 8011542:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	015a      	lsls	r2, r3, #5
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	4413      	add	r3, r2
 801154c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011550:	461a      	mov	r2, r3
 8011552:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8011556:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011558:	693b      	ldr	r3, [r7, #16]
 801155a:	3301      	adds	r3, #1
 801155c:	613b      	str	r3, [r7, #16]
 801155e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8011562:	461a      	mov	r2, r3
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	4293      	cmp	r3, r2
 8011568:	d3b5      	bcc.n	80114d6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011570:	691b      	ldr	r3, [r3, #16]
 8011572:	68fa      	ldr	r2, [r7, #12]
 8011574:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801157c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2200      	movs	r2, #0
 8011582:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 801158a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801158c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8011590:	2b00      	cmp	r3, #0
 8011592:	d105      	bne.n	80115a0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8011594:	687b      	ldr	r3, [r7, #4]
 8011596:	699b      	ldr	r3, [r3, #24]
 8011598:	f043 0210 	orr.w	r2, r3, #16
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	699a      	ldr	r2, [r3, #24]
 80115a4:	4b10      	ldr	r3, [pc, #64]	@ (80115e8 <USB_DevInit+0x2c4>)
 80115a6:	4313      	orrs	r3, r2
 80115a8:	687a      	ldr	r2, [r7, #4]
 80115aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80115ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d005      	beq.n	80115c0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	699b      	ldr	r3, [r3, #24]
 80115b8:	f043 0208 	orr.w	r2, r3, #8
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80115c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80115c4:	2b01      	cmp	r3, #1
 80115c6:	d107      	bne.n	80115d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	699b      	ldr	r3, [r3, #24]
 80115cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80115d0:	f043 0304 	orr.w	r3, r3, #4
 80115d4:	687a      	ldr	r2, [r7, #4]
 80115d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80115d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3718      	adds	r7, #24
 80115de:	46bd      	mov	sp, r7
 80115e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80115e4:	b004      	add	sp, #16
 80115e6:	4770      	bx	lr
 80115e8:	803c3800 	.word	0x803c3800

080115ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80115ec:	b480      	push	{r7}
 80115ee:	b085      	sub	sp, #20
 80115f0:	af00      	add	r7, sp, #0
 80115f2:	6078      	str	r0, [r7, #4]
 80115f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80115f6:	2300      	movs	r3, #0
 80115f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	3301      	adds	r3, #1
 80115fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011606:	d901      	bls.n	801160c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8011608:	2303      	movs	r3, #3
 801160a:	e01b      	b.n	8011644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801160c:	687b      	ldr	r3, [r7, #4]
 801160e:	691b      	ldr	r3, [r3, #16]
 8011610:	2b00      	cmp	r3, #0
 8011612:	daf2      	bge.n	80115fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8011614:	2300      	movs	r3, #0
 8011616:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	019b      	lsls	r3, r3, #6
 801161c:	f043 0220 	orr.w	r2, r3, #32
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	3301      	adds	r3, #1
 8011628:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011630:	d901      	bls.n	8011636 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8011632:	2303      	movs	r3, #3
 8011634:	e006      	b.n	8011644 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	691b      	ldr	r3, [r3, #16]
 801163a:	f003 0320 	and.w	r3, r3, #32
 801163e:	2b20      	cmp	r3, #32
 8011640:	d0f0      	beq.n	8011624 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8011642:	2300      	movs	r3, #0
}
 8011644:	4618      	mov	r0, r3
 8011646:	3714      	adds	r7, #20
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8011650:	b480      	push	{r7}
 8011652:	b085      	sub	sp, #20
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011658:	2300      	movs	r3, #0
 801165a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	3301      	adds	r3, #1
 8011660:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011668:	d901      	bls.n	801166e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 801166a:	2303      	movs	r3, #3
 801166c:	e018      	b.n	80116a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	691b      	ldr	r3, [r3, #16]
 8011672:	2b00      	cmp	r3, #0
 8011674:	daf2      	bge.n	801165c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8011676:	2300      	movs	r3, #0
 8011678:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	2210      	movs	r2, #16
 801167e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	3301      	adds	r3, #1
 8011684:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 801168c:	d901      	bls.n	8011692 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801168e:	2303      	movs	r3, #3
 8011690:	e006      	b.n	80116a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	691b      	ldr	r3, [r3, #16]
 8011696:	f003 0310 	and.w	r3, r3, #16
 801169a:	2b10      	cmp	r3, #16
 801169c:	d0f0      	beq.n	8011680 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801169e:	2300      	movs	r3, #0
}
 80116a0:	4618      	mov	r0, r3
 80116a2:	3714      	adds	r7, #20
 80116a4:	46bd      	mov	sp, r7
 80116a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116aa:	4770      	bx	lr

080116ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80116ac:	b480      	push	{r7}
 80116ae:	b085      	sub	sp, #20
 80116b0:	af00      	add	r7, sp, #0
 80116b2:	6078      	str	r0, [r7, #4]
 80116b4:	460b      	mov	r3, r1
 80116b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116c2:	681a      	ldr	r2, [r3, #0]
 80116c4:	78fb      	ldrb	r3, [r7, #3]
 80116c6:	68f9      	ldr	r1, [r7, #12]
 80116c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80116cc:	4313      	orrs	r3, r2
 80116ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80116d0:	2300      	movs	r3, #0
}
 80116d2:	4618      	mov	r0, r3
 80116d4:	3714      	adds	r7, #20
 80116d6:	46bd      	mov	sp, r7
 80116d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116dc:	4770      	bx	lr

080116de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80116de:	b480      	push	{r7}
 80116e0:	b087      	sub	sp, #28
 80116e2:	af00      	add	r7, sp, #0
 80116e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80116f0:	689b      	ldr	r3, [r3, #8]
 80116f2:	f003 0306 	and.w	r3, r3, #6
 80116f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2b00      	cmp	r3, #0
 80116fc:	d102      	bne.n	8011704 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80116fe:	2300      	movs	r3, #0
 8011700:	75fb      	strb	r3, [r7, #23]
 8011702:	e00a      	b.n	801171a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2b02      	cmp	r3, #2
 8011708:	d002      	beq.n	8011710 <USB_GetDevSpeed+0x32>
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2b06      	cmp	r3, #6
 801170e:	d102      	bne.n	8011716 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8011710:	2302      	movs	r3, #2
 8011712:	75fb      	strb	r3, [r7, #23]
 8011714:	e001      	b.n	801171a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8011716:	230f      	movs	r3, #15
 8011718:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 801171a:	7dfb      	ldrb	r3, [r7, #23]
}
 801171c:	4618      	mov	r0, r3
 801171e:	371c      	adds	r7, #28
 8011720:	46bd      	mov	sp, r7
 8011722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011726:	4770      	bx	lr

08011728 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011728:	b480      	push	{r7}
 801172a:	b085      	sub	sp, #20
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011736:	683b      	ldr	r3, [r7, #0]
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	785b      	ldrb	r3, [r3, #1]
 8011740:	2b01      	cmp	r3, #1
 8011742:	d13a      	bne.n	80117ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801174a:	69da      	ldr	r2, [r3, #28]
 801174c:	683b      	ldr	r3, [r7, #0]
 801174e:	781b      	ldrb	r3, [r3, #0]
 8011750:	f003 030f 	and.w	r3, r3, #15
 8011754:	2101      	movs	r1, #1
 8011756:	fa01 f303 	lsl.w	r3, r1, r3
 801175a:	b29b      	uxth	r3, r3
 801175c:	68f9      	ldr	r1, [r7, #12]
 801175e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011762:	4313      	orrs	r3, r2
 8011764:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	015a      	lsls	r2, r3, #5
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	4413      	add	r3, r2
 801176e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011778:	2b00      	cmp	r3, #0
 801177a:	d155      	bne.n	8011828 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801177c:	68bb      	ldr	r3, [r7, #8]
 801177e:	015a      	lsls	r2, r3, #5
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	4413      	add	r3, r2
 8011784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011788:	681a      	ldr	r2, [r3, #0]
 801178a:	683b      	ldr	r3, [r7, #0]
 801178c:	689b      	ldr	r3, [r3, #8]
 801178e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8011792:	683b      	ldr	r3, [r7, #0]
 8011794:	791b      	ldrb	r3, [r3, #4]
 8011796:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8011798:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	059b      	lsls	r3, r3, #22
 801179e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80117a0:	4313      	orrs	r3, r2
 80117a2:	68ba      	ldr	r2, [r7, #8]
 80117a4:	0151      	lsls	r1, r2, #5
 80117a6:	68fa      	ldr	r2, [r7, #12]
 80117a8:	440a      	add	r2, r1
 80117aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80117ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80117b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80117b6:	6013      	str	r3, [r2, #0]
 80117b8:	e036      	b.n	8011828 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80117c0:	69da      	ldr	r2, [r3, #28]
 80117c2:	683b      	ldr	r3, [r7, #0]
 80117c4:	781b      	ldrb	r3, [r3, #0]
 80117c6:	f003 030f 	and.w	r3, r3, #15
 80117ca:	2101      	movs	r1, #1
 80117cc:	fa01 f303 	lsl.w	r3, r1, r3
 80117d0:	041b      	lsls	r3, r3, #16
 80117d2:	68f9      	ldr	r1, [r7, #12]
 80117d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80117d8:	4313      	orrs	r3, r2
 80117da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80117dc:	68bb      	ldr	r3, [r7, #8]
 80117de:	015a      	lsls	r2, r3, #5
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	4413      	add	r3, r2
 80117e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80117e8:	681b      	ldr	r3, [r3, #0]
 80117ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d11a      	bne.n	8011828 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	015a      	lsls	r2, r3, #5
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	4413      	add	r3, r2
 80117fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80117fe:	681a      	ldr	r2, [r3, #0]
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	689b      	ldr	r3, [r3, #8]
 8011804:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8011808:	683b      	ldr	r3, [r7, #0]
 801180a:	791b      	ldrb	r3, [r3, #4]
 801180c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 801180e:	430b      	orrs	r3, r1
 8011810:	4313      	orrs	r3, r2
 8011812:	68ba      	ldr	r2, [r7, #8]
 8011814:	0151      	lsls	r1, r2, #5
 8011816:	68fa      	ldr	r2, [r7, #12]
 8011818:	440a      	add	r2, r1
 801181a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801181e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011822:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8011826:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011828:	2300      	movs	r3, #0
}
 801182a:	4618      	mov	r0, r3
 801182c:	3714      	adds	r7, #20
 801182e:	46bd      	mov	sp, r7
 8011830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011834:	4770      	bx	lr
	...

08011838 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011838:	b480      	push	{r7}
 801183a:	b085      	sub	sp, #20
 801183c:	af00      	add	r7, sp, #0
 801183e:	6078      	str	r0, [r7, #4]
 8011840:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011846:	683b      	ldr	r3, [r7, #0]
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 801184c:	683b      	ldr	r3, [r7, #0]
 801184e:	785b      	ldrb	r3, [r3, #1]
 8011850:	2b01      	cmp	r3, #1
 8011852:	d161      	bne.n	8011918 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011854:	68bb      	ldr	r3, [r7, #8]
 8011856:	015a      	lsls	r2, r3, #5
 8011858:	68fb      	ldr	r3, [r7, #12]
 801185a:	4413      	add	r3, r2
 801185c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011866:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801186a:	d11f      	bne.n	80118ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	015a      	lsls	r2, r3, #5
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	4413      	add	r3, r2
 8011874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011878:	681b      	ldr	r3, [r3, #0]
 801187a:	68ba      	ldr	r2, [r7, #8]
 801187c:	0151      	lsls	r1, r2, #5
 801187e:	68fa      	ldr	r2, [r7, #12]
 8011880:	440a      	add	r2, r1
 8011882:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011886:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801188a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	015a      	lsls	r2, r3, #5
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	4413      	add	r3, r2
 8011894:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	68ba      	ldr	r2, [r7, #8]
 801189c:	0151      	lsls	r1, r2, #5
 801189e:	68fa      	ldr	r2, [r7, #12]
 80118a0:	440a      	add	r2, r1
 80118a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80118a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80118aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	f003 030f 	and.w	r3, r3, #15
 80118bc:	2101      	movs	r1, #1
 80118be:	fa01 f303 	lsl.w	r3, r1, r3
 80118c2:	b29b      	uxth	r3, r3
 80118c4:	43db      	mvns	r3, r3
 80118c6:	68f9      	ldr	r1, [r7, #12]
 80118c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80118cc:	4013      	ands	r3, r2
 80118ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80118d6:	69da      	ldr	r2, [r3, #28]
 80118d8:	683b      	ldr	r3, [r7, #0]
 80118da:	781b      	ldrb	r3, [r3, #0]
 80118dc:	f003 030f 	and.w	r3, r3, #15
 80118e0:	2101      	movs	r1, #1
 80118e2:	fa01 f303 	lsl.w	r3, r1, r3
 80118e6:	b29b      	uxth	r3, r3
 80118e8:	43db      	mvns	r3, r3
 80118ea:	68f9      	ldr	r1, [r7, #12]
 80118ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80118f0:	4013      	ands	r3, r2
 80118f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	015a      	lsls	r2, r3, #5
 80118f8:	68fb      	ldr	r3, [r7, #12]
 80118fa:	4413      	add	r3, r2
 80118fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011900:	681a      	ldr	r2, [r3, #0]
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	0159      	lsls	r1, r3, #5
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	440b      	add	r3, r1
 801190a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801190e:	4619      	mov	r1, r3
 8011910:	4b35      	ldr	r3, [pc, #212]	@ (80119e8 <USB_DeactivateEndpoint+0x1b0>)
 8011912:	4013      	ands	r3, r2
 8011914:	600b      	str	r3, [r1, #0]
 8011916:	e060      	b.n	80119da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011918:	68bb      	ldr	r3, [r7, #8]
 801191a:	015a      	lsls	r2, r3, #5
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	4413      	add	r3, r2
 8011920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801192a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801192e:	d11f      	bne.n	8011970 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	015a      	lsls	r2, r3, #5
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	4413      	add	r3, r2
 8011938:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801193c:	681b      	ldr	r3, [r3, #0]
 801193e:	68ba      	ldr	r2, [r7, #8]
 8011940:	0151      	lsls	r1, r2, #5
 8011942:	68fa      	ldr	r2, [r7, #12]
 8011944:	440a      	add	r2, r1
 8011946:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801194a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801194e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011950:	68bb      	ldr	r3, [r7, #8]
 8011952:	015a      	lsls	r2, r3, #5
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	4413      	add	r3, r2
 8011958:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	68ba      	ldr	r2, [r7, #8]
 8011960:	0151      	lsls	r1, r2, #5
 8011962:	68fa      	ldr	r2, [r7, #12]
 8011964:	440a      	add	r2, r1
 8011966:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801196a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801196e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011978:	683b      	ldr	r3, [r7, #0]
 801197a:	781b      	ldrb	r3, [r3, #0]
 801197c:	f003 030f 	and.w	r3, r3, #15
 8011980:	2101      	movs	r1, #1
 8011982:	fa01 f303 	lsl.w	r3, r1, r3
 8011986:	041b      	lsls	r3, r3, #16
 8011988:	43db      	mvns	r3, r3
 801198a:	68f9      	ldr	r1, [r7, #12]
 801198c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011990:	4013      	ands	r3, r2
 8011992:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011994:	68fb      	ldr	r3, [r7, #12]
 8011996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801199a:	69da      	ldr	r2, [r3, #28]
 801199c:	683b      	ldr	r3, [r7, #0]
 801199e:	781b      	ldrb	r3, [r3, #0]
 80119a0:	f003 030f 	and.w	r3, r3, #15
 80119a4:	2101      	movs	r1, #1
 80119a6:	fa01 f303 	lsl.w	r3, r1, r3
 80119aa:	041b      	lsls	r3, r3, #16
 80119ac:	43db      	mvns	r3, r3
 80119ae:	68f9      	ldr	r1, [r7, #12]
 80119b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80119b4:	4013      	ands	r3, r2
 80119b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	015a      	lsls	r2, r3, #5
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	4413      	add	r3, r2
 80119c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	68bb      	ldr	r3, [r7, #8]
 80119c8:	0159      	lsls	r1, r3, #5
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	440b      	add	r3, r1
 80119ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80119d2:	4619      	mov	r1, r3
 80119d4:	4b05      	ldr	r3, [pc, #20]	@ (80119ec <USB_DeactivateEndpoint+0x1b4>)
 80119d6:	4013      	ands	r3, r2
 80119d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80119da:	2300      	movs	r3, #0
}
 80119dc:	4618      	mov	r0, r3
 80119de:	3714      	adds	r7, #20
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr
 80119e8:	ec337800 	.word	0xec337800
 80119ec:	eff37800 	.word	0xeff37800

080119f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b08a      	sub	sp, #40	@ 0x28
 80119f4:	af02      	add	r7, sp, #8
 80119f6:	60f8      	str	r0, [r7, #12]
 80119f8:	60b9      	str	r1, [r7, #8]
 80119fa:	4613      	mov	r3, r2
 80119fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80119fe:	68fb      	ldr	r3, [r7, #12]
 8011a00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8011a02:	68bb      	ldr	r3, [r7, #8]
 8011a04:	781b      	ldrb	r3, [r3, #0]
 8011a06:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	785b      	ldrb	r3, [r3, #1]
 8011a0c:	2b01      	cmp	r3, #1
 8011a0e:	f040 817f 	bne.w	8011d10 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8011a12:	68bb      	ldr	r3, [r7, #8]
 8011a14:	691b      	ldr	r3, [r3, #16]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d132      	bne.n	8011a80 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011a1a:	69bb      	ldr	r3, [r7, #24]
 8011a1c:	015a      	lsls	r2, r3, #5
 8011a1e:	69fb      	ldr	r3, [r7, #28]
 8011a20:	4413      	add	r3, r2
 8011a22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a26:	691b      	ldr	r3, [r3, #16]
 8011a28:	69ba      	ldr	r2, [r7, #24]
 8011a2a:	0151      	lsls	r1, r2, #5
 8011a2c:	69fa      	ldr	r2, [r7, #28]
 8011a2e:	440a      	add	r2, r1
 8011a30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011a34:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8011a38:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8011a3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011a3e:	69bb      	ldr	r3, [r7, #24]
 8011a40:	015a      	lsls	r2, r3, #5
 8011a42:	69fb      	ldr	r3, [r7, #28]
 8011a44:	4413      	add	r3, r2
 8011a46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a4a:	691b      	ldr	r3, [r3, #16]
 8011a4c:	69ba      	ldr	r2, [r7, #24]
 8011a4e:	0151      	lsls	r1, r2, #5
 8011a50:	69fa      	ldr	r2, [r7, #28]
 8011a52:	440a      	add	r2, r1
 8011a54:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011a58:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011a5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a5e:	69bb      	ldr	r3, [r7, #24]
 8011a60:	015a      	lsls	r2, r3, #5
 8011a62:	69fb      	ldr	r3, [r7, #28]
 8011a64:	4413      	add	r3, r2
 8011a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a6a:	691b      	ldr	r3, [r3, #16]
 8011a6c:	69ba      	ldr	r2, [r7, #24]
 8011a6e:	0151      	lsls	r1, r2, #5
 8011a70:	69fa      	ldr	r2, [r7, #28]
 8011a72:	440a      	add	r2, r1
 8011a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011a78:	0cdb      	lsrs	r3, r3, #19
 8011a7a:	04db      	lsls	r3, r3, #19
 8011a7c:	6113      	str	r3, [r2, #16]
 8011a7e:	e097      	b.n	8011bb0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011a80:	69bb      	ldr	r3, [r7, #24]
 8011a82:	015a      	lsls	r2, r3, #5
 8011a84:	69fb      	ldr	r3, [r7, #28]
 8011a86:	4413      	add	r3, r2
 8011a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a8c:	691b      	ldr	r3, [r3, #16]
 8011a8e:	69ba      	ldr	r2, [r7, #24]
 8011a90:	0151      	lsls	r1, r2, #5
 8011a92:	69fa      	ldr	r2, [r7, #28]
 8011a94:	440a      	add	r2, r1
 8011a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011a9a:	0cdb      	lsrs	r3, r3, #19
 8011a9c:	04db      	lsls	r3, r3, #19
 8011a9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011aa0:	69bb      	ldr	r3, [r7, #24]
 8011aa2:	015a      	lsls	r2, r3, #5
 8011aa4:	69fb      	ldr	r3, [r7, #28]
 8011aa6:	4413      	add	r3, r2
 8011aa8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011aac:	691b      	ldr	r3, [r3, #16]
 8011aae:	69ba      	ldr	r2, [r7, #24]
 8011ab0:	0151      	lsls	r1, r2, #5
 8011ab2:	69fa      	ldr	r2, [r7, #28]
 8011ab4:	440a      	add	r2, r1
 8011ab6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011aba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8011abe:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8011ac2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8011ac4:	69bb      	ldr	r3, [r7, #24]
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d11a      	bne.n	8011b00 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8011aca:	68bb      	ldr	r3, [r7, #8]
 8011acc:	691a      	ldr	r2, [r3, #16]
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	689b      	ldr	r3, [r3, #8]
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	d903      	bls.n	8011ade <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8011ad6:	68bb      	ldr	r3, [r7, #8]
 8011ad8:	689a      	ldr	r2, [r3, #8]
 8011ada:	68bb      	ldr	r3, [r7, #8]
 8011adc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011ade:	69bb      	ldr	r3, [r7, #24]
 8011ae0:	015a      	lsls	r2, r3, #5
 8011ae2:	69fb      	ldr	r3, [r7, #28]
 8011ae4:	4413      	add	r3, r2
 8011ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011aea:	691b      	ldr	r3, [r3, #16]
 8011aec:	69ba      	ldr	r2, [r7, #24]
 8011aee:	0151      	lsls	r1, r2, #5
 8011af0:	69fa      	ldr	r2, [r7, #28]
 8011af2:	440a      	add	r2, r1
 8011af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011af8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011afc:	6113      	str	r3, [r2, #16]
 8011afe:	e044      	b.n	8011b8a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	691a      	ldr	r2, [r3, #16]
 8011b04:	68bb      	ldr	r3, [r7, #8]
 8011b06:	689b      	ldr	r3, [r3, #8]
 8011b08:	4413      	add	r3, r2
 8011b0a:	1e5a      	subs	r2, r3, #1
 8011b0c:	68bb      	ldr	r3, [r7, #8]
 8011b0e:	689b      	ldr	r3, [r3, #8]
 8011b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8011b14:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8011b16:	69bb      	ldr	r3, [r7, #24]
 8011b18:	015a      	lsls	r2, r3, #5
 8011b1a:	69fb      	ldr	r3, [r7, #28]
 8011b1c:	4413      	add	r3, r2
 8011b1e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b22:	691a      	ldr	r2, [r3, #16]
 8011b24:	8afb      	ldrh	r3, [r7, #22]
 8011b26:	04d9      	lsls	r1, r3, #19
 8011b28:	4ba4      	ldr	r3, [pc, #656]	@ (8011dbc <USB_EPStartXfer+0x3cc>)
 8011b2a:	400b      	ands	r3, r1
 8011b2c:	69b9      	ldr	r1, [r7, #24]
 8011b2e:	0148      	lsls	r0, r1, #5
 8011b30:	69f9      	ldr	r1, [r7, #28]
 8011b32:	4401      	add	r1, r0
 8011b34:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011b38:	4313      	orrs	r3, r2
 8011b3a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8011b3c:	68bb      	ldr	r3, [r7, #8]
 8011b3e:	791b      	ldrb	r3, [r3, #4]
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	d122      	bne.n	8011b8a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8011b44:	69bb      	ldr	r3, [r7, #24]
 8011b46:	015a      	lsls	r2, r3, #5
 8011b48:	69fb      	ldr	r3, [r7, #28]
 8011b4a:	4413      	add	r3, r2
 8011b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b50:	691b      	ldr	r3, [r3, #16]
 8011b52:	69ba      	ldr	r2, [r7, #24]
 8011b54:	0151      	lsls	r1, r2, #5
 8011b56:	69fa      	ldr	r2, [r7, #28]
 8011b58:	440a      	add	r2, r1
 8011b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011b5e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8011b62:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8011b64:	69bb      	ldr	r3, [r7, #24]
 8011b66:	015a      	lsls	r2, r3, #5
 8011b68:	69fb      	ldr	r3, [r7, #28]
 8011b6a:	4413      	add	r3, r2
 8011b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b70:	691a      	ldr	r2, [r3, #16]
 8011b72:	8afb      	ldrh	r3, [r7, #22]
 8011b74:	075b      	lsls	r3, r3, #29
 8011b76:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8011b7a:	69b9      	ldr	r1, [r7, #24]
 8011b7c:	0148      	lsls	r0, r1, #5
 8011b7e:	69f9      	ldr	r1, [r7, #28]
 8011b80:	4401      	add	r1, r0
 8011b82:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011b86:	4313      	orrs	r3, r2
 8011b88:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011b8a:	69bb      	ldr	r3, [r7, #24]
 8011b8c:	015a      	lsls	r2, r3, #5
 8011b8e:	69fb      	ldr	r3, [r7, #28]
 8011b90:	4413      	add	r3, r2
 8011b92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011b96:	691a      	ldr	r2, [r3, #16]
 8011b98:	68bb      	ldr	r3, [r7, #8]
 8011b9a:	691b      	ldr	r3, [r3, #16]
 8011b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011ba0:	69b9      	ldr	r1, [r7, #24]
 8011ba2:	0148      	lsls	r0, r1, #5
 8011ba4:	69f9      	ldr	r1, [r7, #28]
 8011ba6:	4401      	add	r1, r0
 8011ba8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011bac:	4313      	orrs	r3, r2
 8011bae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011bb0:	79fb      	ldrb	r3, [r7, #7]
 8011bb2:	2b01      	cmp	r3, #1
 8011bb4:	d14b      	bne.n	8011c4e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8011bb6:	68bb      	ldr	r3, [r7, #8]
 8011bb8:	69db      	ldr	r3, [r3, #28]
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d009      	beq.n	8011bd2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8011bbe:	69bb      	ldr	r3, [r7, #24]
 8011bc0:	015a      	lsls	r2, r3, #5
 8011bc2:	69fb      	ldr	r3, [r7, #28]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011bca:	461a      	mov	r2, r3
 8011bcc:	68bb      	ldr	r3, [r7, #8]
 8011bce:	69db      	ldr	r3, [r3, #28]
 8011bd0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8011bd2:	68bb      	ldr	r3, [r7, #8]
 8011bd4:	791b      	ldrb	r3, [r3, #4]
 8011bd6:	2b01      	cmp	r3, #1
 8011bd8:	d128      	bne.n	8011c2c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011bda:	69fb      	ldr	r3, [r7, #28]
 8011bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011be0:	689b      	ldr	r3, [r3, #8]
 8011be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d110      	bne.n	8011c0c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011bea:	69bb      	ldr	r3, [r7, #24]
 8011bec:	015a      	lsls	r2, r3, #5
 8011bee:	69fb      	ldr	r3, [r7, #28]
 8011bf0:	4413      	add	r3, r2
 8011bf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	69ba      	ldr	r2, [r7, #24]
 8011bfa:	0151      	lsls	r1, r2, #5
 8011bfc:	69fa      	ldr	r2, [r7, #28]
 8011bfe:	440a      	add	r2, r1
 8011c00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c04:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011c08:	6013      	str	r3, [r2, #0]
 8011c0a:	e00f      	b.n	8011c2c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011c0c:	69bb      	ldr	r3, [r7, #24]
 8011c0e:	015a      	lsls	r2, r3, #5
 8011c10:	69fb      	ldr	r3, [r7, #28]
 8011c12:	4413      	add	r3, r2
 8011c14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c18:	681b      	ldr	r3, [r3, #0]
 8011c1a:	69ba      	ldr	r2, [r7, #24]
 8011c1c:	0151      	lsls	r1, r2, #5
 8011c1e:	69fa      	ldr	r2, [r7, #28]
 8011c20:	440a      	add	r2, r1
 8011c22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011c2a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011c2c:	69bb      	ldr	r3, [r7, #24]
 8011c2e:	015a      	lsls	r2, r3, #5
 8011c30:	69fb      	ldr	r3, [r7, #28]
 8011c32:	4413      	add	r3, r2
 8011c34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	69ba      	ldr	r2, [r7, #24]
 8011c3c:	0151      	lsls	r1, r2, #5
 8011c3e:	69fa      	ldr	r2, [r7, #28]
 8011c40:	440a      	add	r2, r1
 8011c42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c46:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011c4a:	6013      	str	r3, [r2, #0]
 8011c4c:	e166      	b.n	8011f1c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011c4e:	69bb      	ldr	r3, [r7, #24]
 8011c50:	015a      	lsls	r2, r3, #5
 8011c52:	69fb      	ldr	r3, [r7, #28]
 8011c54:	4413      	add	r3, r2
 8011c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	69ba      	ldr	r2, [r7, #24]
 8011c5e:	0151      	lsls	r1, r2, #5
 8011c60:	69fa      	ldr	r2, [r7, #28]
 8011c62:	440a      	add	r2, r1
 8011c64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011c68:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011c6c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	791b      	ldrb	r3, [r3, #4]
 8011c72:	2b01      	cmp	r3, #1
 8011c74:	d015      	beq.n	8011ca2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8011c76:	68bb      	ldr	r3, [r7, #8]
 8011c78:	691b      	ldr	r3, [r3, #16]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	f000 814e 	beq.w	8011f1c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011c80:	69fb      	ldr	r3, [r7, #28]
 8011c82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011c88:	68bb      	ldr	r3, [r7, #8]
 8011c8a:	781b      	ldrb	r3, [r3, #0]
 8011c8c:	f003 030f 	and.w	r3, r3, #15
 8011c90:	2101      	movs	r1, #1
 8011c92:	fa01 f303 	lsl.w	r3, r1, r3
 8011c96:	69f9      	ldr	r1, [r7, #28]
 8011c98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011c9c:	4313      	orrs	r3, r2
 8011c9e:	634b      	str	r3, [r1, #52]	@ 0x34
 8011ca0:	e13c      	b.n	8011f1c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011ca2:	69fb      	ldr	r3, [r7, #28]
 8011ca4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011ca8:	689b      	ldr	r3, [r3, #8]
 8011caa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d110      	bne.n	8011cd4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8011cb2:	69bb      	ldr	r3, [r7, #24]
 8011cb4:	015a      	lsls	r2, r3, #5
 8011cb6:	69fb      	ldr	r3, [r7, #28]
 8011cb8:	4413      	add	r3, r2
 8011cba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011cbe:	681b      	ldr	r3, [r3, #0]
 8011cc0:	69ba      	ldr	r2, [r7, #24]
 8011cc2:	0151      	lsls	r1, r2, #5
 8011cc4:	69fa      	ldr	r2, [r7, #28]
 8011cc6:	440a      	add	r2, r1
 8011cc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ccc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011cd0:	6013      	str	r3, [r2, #0]
 8011cd2:	e00f      	b.n	8011cf4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8011cd4:	69bb      	ldr	r3, [r7, #24]
 8011cd6:	015a      	lsls	r2, r3, #5
 8011cd8:	69fb      	ldr	r3, [r7, #28]
 8011cda:	4413      	add	r3, r2
 8011cdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	69ba      	ldr	r2, [r7, #24]
 8011ce4:	0151      	lsls	r1, r2, #5
 8011ce6:	69fa      	ldr	r2, [r7, #28]
 8011ce8:	440a      	add	r2, r1
 8011cea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011cee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011cf2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	68d9      	ldr	r1, [r3, #12]
 8011cf8:	68bb      	ldr	r3, [r7, #8]
 8011cfa:	781a      	ldrb	r2, [r3, #0]
 8011cfc:	68bb      	ldr	r3, [r7, #8]
 8011cfe:	691b      	ldr	r3, [r3, #16]
 8011d00:	b298      	uxth	r0, r3
 8011d02:	79fb      	ldrb	r3, [r7, #7]
 8011d04:	9300      	str	r3, [sp, #0]
 8011d06:	4603      	mov	r3, r0
 8011d08:	68f8      	ldr	r0, [r7, #12]
 8011d0a:	f000 f9b9 	bl	8012080 <USB_WritePacket>
 8011d0e:	e105      	b.n	8011f1c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8011d10:	69bb      	ldr	r3, [r7, #24]
 8011d12:	015a      	lsls	r2, r3, #5
 8011d14:	69fb      	ldr	r3, [r7, #28]
 8011d16:	4413      	add	r3, r2
 8011d18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d1c:	691b      	ldr	r3, [r3, #16]
 8011d1e:	69ba      	ldr	r2, [r7, #24]
 8011d20:	0151      	lsls	r1, r2, #5
 8011d22:	69fa      	ldr	r2, [r7, #28]
 8011d24:	440a      	add	r2, r1
 8011d26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d2a:	0cdb      	lsrs	r3, r3, #19
 8011d2c:	04db      	lsls	r3, r3, #19
 8011d2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011d30:	69bb      	ldr	r3, [r7, #24]
 8011d32:	015a      	lsls	r2, r3, #5
 8011d34:	69fb      	ldr	r3, [r7, #28]
 8011d36:	4413      	add	r3, r2
 8011d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d3c:	691b      	ldr	r3, [r3, #16]
 8011d3e:	69ba      	ldr	r2, [r7, #24]
 8011d40:	0151      	lsls	r1, r2, #5
 8011d42:	69fa      	ldr	r2, [r7, #28]
 8011d44:	440a      	add	r2, r1
 8011d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011d4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8011d4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8011d52:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8011d54:	69bb      	ldr	r3, [r7, #24]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d132      	bne.n	8011dc0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8011d5a:	68bb      	ldr	r3, [r7, #8]
 8011d5c:	691b      	ldr	r3, [r3, #16]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d003      	beq.n	8011d6a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8011d62:	68bb      	ldr	r3, [r7, #8]
 8011d64:	689a      	ldr	r2, [r3, #8]
 8011d66:	68bb      	ldr	r3, [r7, #8]
 8011d68:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011d6a:	68bb      	ldr	r3, [r7, #8]
 8011d6c:	689a      	ldr	r2, [r3, #8]
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8011d72:	69bb      	ldr	r3, [r7, #24]
 8011d74:	015a      	lsls	r2, r3, #5
 8011d76:	69fb      	ldr	r3, [r7, #28]
 8011d78:	4413      	add	r3, r2
 8011d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011d7e:	691a      	ldr	r2, [r3, #16]
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	6a1b      	ldr	r3, [r3, #32]
 8011d84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011d88:	69b9      	ldr	r1, [r7, #24]
 8011d8a:	0148      	lsls	r0, r1, #5
 8011d8c:	69f9      	ldr	r1, [r7, #28]
 8011d8e:	4401      	add	r1, r0
 8011d90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011d94:	4313      	orrs	r3, r2
 8011d96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011d98:	69bb      	ldr	r3, [r7, #24]
 8011d9a:	015a      	lsls	r2, r3, #5
 8011d9c:	69fb      	ldr	r3, [r7, #28]
 8011d9e:	4413      	add	r3, r2
 8011da0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011da4:	691b      	ldr	r3, [r3, #16]
 8011da6:	69ba      	ldr	r2, [r7, #24]
 8011da8:	0151      	lsls	r1, r2, #5
 8011daa:	69fa      	ldr	r2, [r7, #28]
 8011dac:	440a      	add	r2, r1
 8011dae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011db2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011db6:	6113      	str	r3, [r2, #16]
 8011db8:	e062      	b.n	8011e80 <USB_EPStartXfer+0x490>
 8011dba:	bf00      	nop
 8011dbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8011dc0:	68bb      	ldr	r3, [r7, #8]
 8011dc2:	691b      	ldr	r3, [r3, #16]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d123      	bne.n	8011e10 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8011dc8:	69bb      	ldr	r3, [r7, #24]
 8011dca:	015a      	lsls	r2, r3, #5
 8011dcc:	69fb      	ldr	r3, [r7, #28]
 8011dce:	4413      	add	r3, r2
 8011dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dd4:	691a      	ldr	r2, [r3, #16]
 8011dd6:	68bb      	ldr	r3, [r7, #8]
 8011dd8:	689b      	ldr	r3, [r3, #8]
 8011dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011dde:	69b9      	ldr	r1, [r7, #24]
 8011de0:	0148      	lsls	r0, r1, #5
 8011de2:	69f9      	ldr	r1, [r7, #28]
 8011de4:	4401      	add	r1, r0
 8011de6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011dea:	4313      	orrs	r3, r2
 8011dec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011dee:	69bb      	ldr	r3, [r7, #24]
 8011df0:	015a      	lsls	r2, r3, #5
 8011df2:	69fb      	ldr	r3, [r7, #28]
 8011df4:	4413      	add	r3, r2
 8011df6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dfa:	691b      	ldr	r3, [r3, #16]
 8011dfc:	69ba      	ldr	r2, [r7, #24]
 8011dfe:	0151      	lsls	r1, r2, #5
 8011e00:	69fa      	ldr	r2, [r7, #28]
 8011e02:	440a      	add	r2, r1
 8011e04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011e08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011e0c:	6113      	str	r3, [r2, #16]
 8011e0e:	e037      	b.n	8011e80 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	691a      	ldr	r2, [r3, #16]
 8011e14:	68bb      	ldr	r3, [r7, #8]
 8011e16:	689b      	ldr	r3, [r3, #8]
 8011e18:	4413      	add	r3, r2
 8011e1a:	1e5a      	subs	r2, r3, #1
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	689b      	ldr	r3, [r3, #8]
 8011e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8011e24:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8011e26:	68bb      	ldr	r3, [r7, #8]
 8011e28:	689b      	ldr	r3, [r3, #8]
 8011e2a:	8afa      	ldrh	r2, [r7, #22]
 8011e2c:	fb03 f202 	mul.w	r2, r3, r2
 8011e30:	68bb      	ldr	r3, [r7, #8]
 8011e32:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8011e34:	69bb      	ldr	r3, [r7, #24]
 8011e36:	015a      	lsls	r2, r3, #5
 8011e38:	69fb      	ldr	r3, [r7, #28]
 8011e3a:	4413      	add	r3, r2
 8011e3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e40:	691a      	ldr	r2, [r3, #16]
 8011e42:	8afb      	ldrh	r3, [r7, #22]
 8011e44:	04d9      	lsls	r1, r3, #19
 8011e46:	4b38      	ldr	r3, [pc, #224]	@ (8011f28 <USB_EPStartXfer+0x538>)
 8011e48:	400b      	ands	r3, r1
 8011e4a:	69b9      	ldr	r1, [r7, #24]
 8011e4c:	0148      	lsls	r0, r1, #5
 8011e4e:	69f9      	ldr	r1, [r7, #28]
 8011e50:	4401      	add	r1, r0
 8011e52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011e56:	4313      	orrs	r3, r2
 8011e58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011e5a:	69bb      	ldr	r3, [r7, #24]
 8011e5c:	015a      	lsls	r2, r3, #5
 8011e5e:	69fb      	ldr	r3, [r7, #28]
 8011e60:	4413      	add	r3, r2
 8011e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e66:	691a      	ldr	r2, [r3, #16]
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	6a1b      	ldr	r3, [r3, #32]
 8011e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011e70:	69b9      	ldr	r1, [r7, #24]
 8011e72:	0148      	lsls	r0, r1, #5
 8011e74:	69f9      	ldr	r1, [r7, #28]
 8011e76:	4401      	add	r1, r0
 8011e78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011e7c:	4313      	orrs	r3, r2
 8011e7e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8011e80:	79fb      	ldrb	r3, [r7, #7]
 8011e82:	2b01      	cmp	r3, #1
 8011e84:	d10d      	bne.n	8011ea2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8011e86:	68bb      	ldr	r3, [r7, #8]
 8011e88:	68db      	ldr	r3, [r3, #12]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d009      	beq.n	8011ea2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011e8e:	68bb      	ldr	r3, [r7, #8]
 8011e90:	68d9      	ldr	r1, [r3, #12]
 8011e92:	69bb      	ldr	r3, [r7, #24]
 8011e94:	015a      	lsls	r2, r3, #5
 8011e96:	69fb      	ldr	r3, [r7, #28]
 8011e98:	4413      	add	r3, r2
 8011e9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e9e:	460a      	mov	r2, r1
 8011ea0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8011ea2:	68bb      	ldr	r3, [r7, #8]
 8011ea4:	791b      	ldrb	r3, [r3, #4]
 8011ea6:	2b01      	cmp	r3, #1
 8011ea8:	d128      	bne.n	8011efc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011eaa:	69fb      	ldr	r3, [r7, #28]
 8011eac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011eb0:	689b      	ldr	r3, [r3, #8]
 8011eb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d110      	bne.n	8011edc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8011eba:	69bb      	ldr	r3, [r7, #24]
 8011ebc:	015a      	lsls	r2, r3, #5
 8011ebe:	69fb      	ldr	r3, [r7, #28]
 8011ec0:	4413      	add	r3, r2
 8011ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	69ba      	ldr	r2, [r7, #24]
 8011eca:	0151      	lsls	r1, r2, #5
 8011ecc:	69fa      	ldr	r2, [r7, #28]
 8011ece:	440a      	add	r2, r1
 8011ed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011ed4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8011ed8:	6013      	str	r3, [r2, #0]
 8011eda:	e00f      	b.n	8011efc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8011edc:	69bb      	ldr	r3, [r7, #24]
 8011ede:	015a      	lsls	r2, r3, #5
 8011ee0:	69fb      	ldr	r3, [r7, #28]
 8011ee2:	4413      	add	r3, r2
 8011ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011ee8:	681b      	ldr	r3, [r3, #0]
 8011eea:	69ba      	ldr	r2, [r7, #24]
 8011eec:	0151      	lsls	r1, r2, #5
 8011eee:	69fa      	ldr	r2, [r7, #28]
 8011ef0:	440a      	add	r2, r1
 8011ef2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011efa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8011efc:	69bb      	ldr	r3, [r7, #24]
 8011efe:	015a      	lsls	r2, r3, #5
 8011f00:	69fb      	ldr	r3, [r7, #28]
 8011f02:	4413      	add	r3, r2
 8011f04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	69ba      	ldr	r2, [r7, #24]
 8011f0c:	0151      	lsls	r1, r2, #5
 8011f0e:	69fa      	ldr	r2, [r7, #28]
 8011f10:	440a      	add	r2, r1
 8011f12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011f16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011f1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011f1c:	2300      	movs	r3, #0
}
 8011f1e:	4618      	mov	r0, r3
 8011f20:	3720      	adds	r7, #32
 8011f22:	46bd      	mov	sp, r7
 8011f24:	bd80      	pop	{r7, pc}
 8011f26:	bf00      	nop
 8011f28:	1ff80000 	.word	0x1ff80000

08011f2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011f2c:	b480      	push	{r7}
 8011f2e:	b087      	sub	sp, #28
 8011f30:	af00      	add	r7, sp, #0
 8011f32:	6078      	str	r0, [r7, #4]
 8011f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8011f36:	2300      	movs	r3, #0
 8011f38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8011f42:	683b      	ldr	r3, [r7, #0]
 8011f44:	785b      	ldrb	r3, [r3, #1]
 8011f46:	2b01      	cmp	r3, #1
 8011f48:	d14a      	bne.n	8011fe0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	781b      	ldrb	r3, [r3, #0]
 8011f4e:	015a      	lsls	r2, r3, #5
 8011f50:	693b      	ldr	r3, [r7, #16]
 8011f52:	4413      	add	r3, r2
 8011f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011f62:	f040 8086 	bne.w	8012072 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8011f66:	683b      	ldr	r3, [r7, #0]
 8011f68:	781b      	ldrb	r3, [r3, #0]
 8011f6a:	015a      	lsls	r2, r3, #5
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	4413      	add	r3, r2
 8011f70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	683a      	ldr	r2, [r7, #0]
 8011f78:	7812      	ldrb	r2, [r2, #0]
 8011f7a:	0151      	lsls	r1, r2, #5
 8011f7c:	693a      	ldr	r2, [r7, #16]
 8011f7e:	440a      	add	r2, r1
 8011f80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011f84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011f88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011f8a:	683b      	ldr	r3, [r7, #0]
 8011f8c:	781b      	ldrb	r3, [r3, #0]
 8011f8e:	015a      	lsls	r2, r3, #5
 8011f90:	693b      	ldr	r3, [r7, #16]
 8011f92:	4413      	add	r3, r2
 8011f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	683a      	ldr	r2, [r7, #0]
 8011f9c:	7812      	ldrb	r2, [r2, #0]
 8011f9e:	0151      	lsls	r1, r2, #5
 8011fa0:	693a      	ldr	r2, [r7, #16]
 8011fa2:	440a      	add	r2, r1
 8011fa4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011fa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011fac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	3301      	adds	r3, #1
 8011fb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011fb4:	68fb      	ldr	r3, [r7, #12]
 8011fb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d902      	bls.n	8011fc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8011fbe:	2301      	movs	r3, #1
 8011fc0:	75fb      	strb	r3, [r7, #23]
          break;
 8011fc2:	e056      	b.n	8012072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8011fc4:	683b      	ldr	r3, [r7, #0]
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	015a      	lsls	r2, r3, #5
 8011fca:	693b      	ldr	r3, [r7, #16]
 8011fcc:	4413      	add	r3, r2
 8011fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011fdc:	d0e7      	beq.n	8011fae <USB_EPStopXfer+0x82>
 8011fde:	e048      	b.n	8012072 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	015a      	lsls	r2, r3, #5
 8011fe6:	693b      	ldr	r3, [r7, #16]
 8011fe8:	4413      	add	r3, r2
 8011fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011ff8:	d13b      	bne.n	8012072 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8011ffa:	683b      	ldr	r3, [r7, #0]
 8011ffc:	781b      	ldrb	r3, [r3, #0]
 8011ffe:	015a      	lsls	r2, r3, #5
 8012000:	693b      	ldr	r3, [r7, #16]
 8012002:	4413      	add	r3, r2
 8012004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	683a      	ldr	r2, [r7, #0]
 801200c:	7812      	ldrb	r2, [r2, #0]
 801200e:	0151      	lsls	r1, r2, #5
 8012010:	693a      	ldr	r2, [r7, #16]
 8012012:	440a      	add	r2, r1
 8012014:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012018:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 801201c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801201e:	683b      	ldr	r3, [r7, #0]
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	015a      	lsls	r2, r3, #5
 8012024:	693b      	ldr	r3, [r7, #16]
 8012026:	4413      	add	r3, r2
 8012028:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	683a      	ldr	r2, [r7, #0]
 8012030:	7812      	ldrb	r2, [r2, #0]
 8012032:	0151      	lsls	r1, r2, #5
 8012034:	693a      	ldr	r2, [r7, #16]
 8012036:	440a      	add	r2, r1
 8012038:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801203c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8012040:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8012042:	68fb      	ldr	r3, [r7, #12]
 8012044:	3301      	adds	r3, #1
 8012046:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	f242 7210 	movw	r2, #10000	@ 0x2710
 801204e:	4293      	cmp	r3, r2
 8012050:	d902      	bls.n	8012058 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8012052:	2301      	movs	r3, #1
 8012054:	75fb      	strb	r3, [r7, #23]
          break;
 8012056:	e00c      	b.n	8012072 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	015a      	lsls	r2, r3, #5
 801205e:	693b      	ldr	r3, [r7, #16]
 8012060:	4413      	add	r3, r2
 8012062:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012066:	681b      	ldr	r3, [r3, #0]
 8012068:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801206c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8012070:	d0e7      	beq.n	8012042 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8012072:	7dfb      	ldrb	r3, [r7, #23]
}
 8012074:	4618      	mov	r0, r3
 8012076:	371c      	adds	r7, #28
 8012078:	46bd      	mov	sp, r7
 801207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801207e:	4770      	bx	lr

08012080 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012080:	b480      	push	{r7}
 8012082:	b089      	sub	sp, #36	@ 0x24
 8012084:	af00      	add	r7, sp, #0
 8012086:	60f8      	str	r0, [r7, #12]
 8012088:	60b9      	str	r1, [r7, #8]
 801208a:	4611      	mov	r1, r2
 801208c:	461a      	mov	r2, r3
 801208e:	460b      	mov	r3, r1
 8012090:	71fb      	strb	r3, [r7, #7]
 8012092:	4613      	mov	r3, r2
 8012094:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012096:	68fb      	ldr	r3, [r7, #12]
 8012098:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 801209a:	68bb      	ldr	r3, [r7, #8]
 801209c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 801209e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d123      	bne.n	80120ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80120a6:	88bb      	ldrh	r3, [r7, #4]
 80120a8:	3303      	adds	r3, #3
 80120aa:	089b      	lsrs	r3, r3, #2
 80120ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80120ae:	2300      	movs	r3, #0
 80120b0:	61bb      	str	r3, [r7, #24]
 80120b2:	e018      	b.n	80120e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80120b4:	79fb      	ldrb	r3, [r7, #7]
 80120b6:	031a      	lsls	r2, r3, #12
 80120b8:	697b      	ldr	r3, [r7, #20]
 80120ba:	4413      	add	r3, r2
 80120bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80120c0:	461a      	mov	r2, r3
 80120c2:	69fb      	ldr	r3, [r7, #28]
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	3301      	adds	r3, #1
 80120cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80120ce:	69fb      	ldr	r3, [r7, #28]
 80120d0:	3301      	adds	r3, #1
 80120d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80120d4:	69fb      	ldr	r3, [r7, #28]
 80120d6:	3301      	adds	r3, #1
 80120d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80120da:	69fb      	ldr	r3, [r7, #28]
 80120dc:	3301      	adds	r3, #1
 80120de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	3301      	adds	r3, #1
 80120e4:	61bb      	str	r3, [r7, #24]
 80120e6:	69ba      	ldr	r2, [r7, #24]
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d3e2      	bcc.n	80120b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80120ee:	2300      	movs	r3, #0
}
 80120f0:	4618      	mov	r0, r3
 80120f2:	3724      	adds	r7, #36	@ 0x24
 80120f4:	46bd      	mov	sp, r7
 80120f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120fa:	4770      	bx	lr

080120fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80120fc:	b480      	push	{r7}
 80120fe:	b08b      	sub	sp, #44	@ 0x2c
 8012100:	af00      	add	r7, sp, #0
 8012102:	60f8      	str	r0, [r7, #12]
 8012104:	60b9      	str	r1, [r7, #8]
 8012106:	4613      	mov	r3, r2
 8012108:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801210a:	68fb      	ldr	r3, [r7, #12]
 801210c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8012112:	88fb      	ldrh	r3, [r7, #6]
 8012114:	089b      	lsrs	r3, r3, #2
 8012116:	b29b      	uxth	r3, r3
 8012118:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801211a:	88fb      	ldrh	r3, [r7, #6]
 801211c:	f003 0303 	and.w	r3, r3, #3
 8012120:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8012122:	2300      	movs	r3, #0
 8012124:	623b      	str	r3, [r7, #32]
 8012126:	e014      	b.n	8012152 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012128:	69bb      	ldr	r3, [r7, #24]
 801212a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801212e:	681a      	ldr	r2, [r3, #0]
 8012130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012132:	601a      	str	r2, [r3, #0]
    pDest++;
 8012134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012136:	3301      	adds	r3, #1
 8012138:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801213c:	3301      	adds	r3, #1
 801213e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012142:	3301      	adds	r3, #1
 8012144:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8012146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012148:	3301      	adds	r3, #1
 801214a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 801214c:	6a3b      	ldr	r3, [r7, #32]
 801214e:	3301      	adds	r3, #1
 8012150:	623b      	str	r3, [r7, #32]
 8012152:	6a3a      	ldr	r2, [r7, #32]
 8012154:	697b      	ldr	r3, [r7, #20]
 8012156:	429a      	cmp	r2, r3
 8012158:	d3e6      	bcc.n	8012128 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801215a:	8bfb      	ldrh	r3, [r7, #30]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d01e      	beq.n	801219e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8012160:	2300      	movs	r3, #0
 8012162:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8012164:	69bb      	ldr	r3, [r7, #24]
 8012166:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801216a:	461a      	mov	r2, r3
 801216c:	f107 0310 	add.w	r3, r7, #16
 8012170:	6812      	ldr	r2, [r2, #0]
 8012172:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8012174:	693a      	ldr	r2, [r7, #16]
 8012176:	6a3b      	ldr	r3, [r7, #32]
 8012178:	b2db      	uxtb	r3, r3
 801217a:	00db      	lsls	r3, r3, #3
 801217c:	fa22 f303 	lsr.w	r3, r2, r3
 8012180:	b2da      	uxtb	r2, r3
 8012182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012184:	701a      	strb	r2, [r3, #0]
      i++;
 8012186:	6a3b      	ldr	r3, [r7, #32]
 8012188:	3301      	adds	r3, #1
 801218a:	623b      	str	r3, [r7, #32]
      pDest++;
 801218c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801218e:	3301      	adds	r3, #1
 8012190:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8012192:	8bfb      	ldrh	r3, [r7, #30]
 8012194:	3b01      	subs	r3, #1
 8012196:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8012198:	8bfb      	ldrh	r3, [r7, #30]
 801219a:	2b00      	cmp	r3, #0
 801219c:	d1ea      	bne.n	8012174 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 801219e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80121a0:	4618      	mov	r0, r3
 80121a2:	372c      	adds	r7, #44	@ 0x2c
 80121a4:	46bd      	mov	sp, r7
 80121a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121aa:	4770      	bx	lr

080121ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80121ac:	b480      	push	{r7}
 80121ae:	b085      	sub	sp, #20
 80121b0:	af00      	add	r7, sp, #0
 80121b2:	6078      	str	r0, [r7, #4]
 80121b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	781b      	ldrb	r3, [r3, #0]
 80121be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80121c0:	683b      	ldr	r3, [r7, #0]
 80121c2:	785b      	ldrb	r3, [r3, #1]
 80121c4:	2b01      	cmp	r3, #1
 80121c6:	d12c      	bne.n	8012222 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	015a      	lsls	r2, r3, #5
 80121cc:	68fb      	ldr	r3, [r7, #12]
 80121ce:	4413      	add	r3, r2
 80121d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	db12      	blt.n	8012200 <USB_EPSetStall+0x54>
 80121da:	68bb      	ldr	r3, [r7, #8]
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d00f      	beq.n	8012200 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80121e0:	68bb      	ldr	r3, [r7, #8]
 80121e2:	015a      	lsls	r2, r3, #5
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	4413      	add	r3, r2
 80121e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	68ba      	ldr	r2, [r7, #8]
 80121f0:	0151      	lsls	r1, r2, #5
 80121f2:	68fa      	ldr	r2, [r7, #12]
 80121f4:	440a      	add	r2, r1
 80121f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80121fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80121fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012200:	68bb      	ldr	r3, [r7, #8]
 8012202:	015a      	lsls	r2, r3, #5
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	4413      	add	r3, r2
 8012208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	68ba      	ldr	r2, [r7, #8]
 8012210:	0151      	lsls	r1, r2, #5
 8012212:	68fa      	ldr	r2, [r7, #12]
 8012214:	440a      	add	r2, r1
 8012216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801221a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801221e:	6013      	str	r3, [r2, #0]
 8012220:	e02b      	b.n	801227a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012222:	68bb      	ldr	r3, [r7, #8]
 8012224:	015a      	lsls	r2, r3, #5
 8012226:	68fb      	ldr	r3, [r7, #12]
 8012228:	4413      	add	r3, r2
 801222a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2b00      	cmp	r3, #0
 8012232:	db12      	blt.n	801225a <USB_EPSetStall+0xae>
 8012234:	68bb      	ldr	r3, [r7, #8]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d00f      	beq.n	801225a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	015a      	lsls	r2, r3, #5
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	4413      	add	r3, r2
 8012242:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012246:	681b      	ldr	r3, [r3, #0]
 8012248:	68ba      	ldr	r2, [r7, #8]
 801224a:	0151      	lsls	r1, r2, #5
 801224c:	68fa      	ldr	r2, [r7, #12]
 801224e:	440a      	add	r2, r1
 8012250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012254:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8012258:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801225a:	68bb      	ldr	r3, [r7, #8]
 801225c:	015a      	lsls	r2, r3, #5
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	4413      	add	r3, r2
 8012262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	68ba      	ldr	r2, [r7, #8]
 801226a:	0151      	lsls	r1, r2, #5
 801226c:	68fa      	ldr	r2, [r7, #12]
 801226e:	440a      	add	r2, r1
 8012270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012274:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012278:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801227a:	2300      	movs	r3, #0
}
 801227c:	4618      	mov	r0, r3
 801227e:	3714      	adds	r7, #20
 8012280:	46bd      	mov	sp, r7
 8012282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012286:	4770      	bx	lr

08012288 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8012288:	b480      	push	{r7}
 801228a:	b085      	sub	sp, #20
 801228c:	af00      	add	r7, sp, #0
 801228e:	6078      	str	r0, [r7, #4]
 8012290:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	781b      	ldrb	r3, [r3, #0]
 801229a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	785b      	ldrb	r3, [r3, #1]
 80122a0:	2b01      	cmp	r3, #1
 80122a2:	d128      	bne.n	80122f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80122a4:	68bb      	ldr	r3, [r7, #8]
 80122a6:	015a      	lsls	r2, r3, #5
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	4413      	add	r3, r2
 80122ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	68ba      	ldr	r2, [r7, #8]
 80122b4:	0151      	lsls	r1, r2, #5
 80122b6:	68fa      	ldr	r2, [r7, #12]
 80122b8:	440a      	add	r2, r1
 80122ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80122be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80122c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80122c4:	683b      	ldr	r3, [r7, #0]
 80122c6:	791b      	ldrb	r3, [r3, #4]
 80122c8:	2b03      	cmp	r3, #3
 80122ca:	d003      	beq.n	80122d4 <USB_EPClearStall+0x4c>
 80122cc:	683b      	ldr	r3, [r7, #0]
 80122ce:	791b      	ldrb	r3, [r3, #4]
 80122d0:	2b02      	cmp	r3, #2
 80122d2:	d138      	bne.n	8012346 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80122d4:	68bb      	ldr	r3, [r7, #8]
 80122d6:	015a      	lsls	r2, r3, #5
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	4413      	add	r3, r2
 80122dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80122e0:	681b      	ldr	r3, [r3, #0]
 80122e2:	68ba      	ldr	r2, [r7, #8]
 80122e4:	0151      	lsls	r1, r2, #5
 80122e6:	68fa      	ldr	r2, [r7, #12]
 80122e8:	440a      	add	r2, r1
 80122ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80122ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80122f2:	6013      	str	r3, [r2, #0]
 80122f4:	e027      	b.n	8012346 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80122f6:	68bb      	ldr	r3, [r7, #8]
 80122f8:	015a      	lsls	r2, r3, #5
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	4413      	add	r3, r2
 80122fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	68ba      	ldr	r2, [r7, #8]
 8012306:	0151      	lsls	r1, r2, #5
 8012308:	68fa      	ldr	r2, [r7, #12]
 801230a:	440a      	add	r2, r1
 801230c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012310:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8012314:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012316:	683b      	ldr	r3, [r7, #0]
 8012318:	791b      	ldrb	r3, [r3, #4]
 801231a:	2b03      	cmp	r3, #3
 801231c:	d003      	beq.n	8012326 <USB_EPClearStall+0x9e>
 801231e:	683b      	ldr	r3, [r7, #0]
 8012320:	791b      	ldrb	r3, [r3, #4]
 8012322:	2b02      	cmp	r3, #2
 8012324:	d10f      	bne.n	8012346 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012326:	68bb      	ldr	r3, [r7, #8]
 8012328:	015a      	lsls	r2, r3, #5
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	4413      	add	r3, r2
 801232e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	68ba      	ldr	r2, [r7, #8]
 8012336:	0151      	lsls	r1, r2, #5
 8012338:	68fa      	ldr	r2, [r7, #12]
 801233a:	440a      	add	r2, r1
 801233c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012340:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012344:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012346:	2300      	movs	r3, #0
}
 8012348:	4618      	mov	r0, r3
 801234a:	3714      	adds	r7, #20
 801234c:	46bd      	mov	sp, r7
 801234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012352:	4770      	bx	lr

08012354 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012354:	b480      	push	{r7}
 8012356:	b085      	sub	sp, #20
 8012358:	af00      	add	r7, sp, #0
 801235a:	6078      	str	r0, [r7, #4]
 801235c:	460b      	mov	r3, r1
 801235e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012364:	68fb      	ldr	r3, [r7, #12]
 8012366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	68fa      	ldr	r2, [r7, #12]
 801236e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012372:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8012376:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012378:	68fb      	ldr	r3, [r7, #12]
 801237a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801237e:	681a      	ldr	r2, [r3, #0]
 8012380:	78fb      	ldrb	r3, [r7, #3]
 8012382:	011b      	lsls	r3, r3, #4
 8012384:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8012388:	68f9      	ldr	r1, [r7, #12]
 801238a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801238e:	4313      	orrs	r3, r2
 8012390:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012392:	2300      	movs	r3, #0
}
 8012394:	4618      	mov	r0, r3
 8012396:	3714      	adds	r7, #20
 8012398:	46bd      	mov	sp, r7
 801239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239e:	4770      	bx	lr

080123a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80123a0:	b480      	push	{r7}
 80123a2:	b085      	sub	sp, #20
 80123a4:	af00      	add	r7, sp, #0
 80123a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	68fa      	ldr	r2, [r7, #12]
 80123b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80123ba:	f023 0303 	bic.w	r3, r3, #3
 80123be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80123c6:	685b      	ldr	r3, [r3, #4]
 80123c8:	68fa      	ldr	r2, [r7, #12]
 80123ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80123ce:	f023 0302 	bic.w	r3, r3, #2
 80123d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80123d4:	2300      	movs	r3, #0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3714      	adds	r7, #20
 80123da:	46bd      	mov	sp, r7
 80123dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123e0:	4770      	bx	lr

080123e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80123e2:	b480      	push	{r7}
 80123e4:	b085      	sub	sp, #20
 80123e6:	af00      	add	r7, sp, #0
 80123e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80123ea:	687b      	ldr	r3, [r7, #4]
 80123ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	68fa      	ldr	r2, [r7, #12]
 80123f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80123fc:	f023 0303 	bic.w	r3, r3, #3
 8012400:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012402:	68fb      	ldr	r3, [r7, #12]
 8012404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012408:	685b      	ldr	r3, [r3, #4]
 801240a:	68fa      	ldr	r2, [r7, #12]
 801240c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012410:	f043 0302 	orr.w	r3, r3, #2
 8012414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8012416:	2300      	movs	r3, #0
}
 8012418:	4618      	mov	r0, r3
 801241a:	3714      	adds	r7, #20
 801241c:	46bd      	mov	sp, r7
 801241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012422:	4770      	bx	lr

08012424 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8012424:	b480      	push	{r7}
 8012426:	b085      	sub	sp, #20
 8012428:	af00      	add	r7, sp, #0
 801242a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	695b      	ldr	r3, [r3, #20]
 8012430:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	699b      	ldr	r3, [r3, #24]
 8012436:	68fa      	ldr	r2, [r7, #12]
 8012438:	4013      	ands	r3, r2
 801243a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 801243c:	68fb      	ldr	r3, [r7, #12]
}
 801243e:	4618      	mov	r0, r3
 8012440:	3714      	adds	r7, #20
 8012442:	46bd      	mov	sp, r7
 8012444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012448:	4770      	bx	lr

0801244a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801244a:	b480      	push	{r7}
 801244c:	b085      	sub	sp, #20
 801244e:	af00      	add	r7, sp, #0
 8012450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801245c:	699b      	ldr	r3, [r3, #24]
 801245e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012466:	69db      	ldr	r3, [r3, #28]
 8012468:	68ba      	ldr	r2, [r7, #8]
 801246a:	4013      	ands	r3, r2
 801246c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	0c1b      	lsrs	r3, r3, #16
}
 8012472:	4618      	mov	r0, r3
 8012474:	3714      	adds	r7, #20
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr

0801247e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 801247e:	b480      	push	{r7}
 8012480:	b085      	sub	sp, #20
 8012482:	af00      	add	r7, sp, #0
 8012484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012490:	699b      	ldr	r3, [r3, #24]
 8012492:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801249a:	69db      	ldr	r3, [r3, #28]
 801249c:	68ba      	ldr	r2, [r7, #8]
 801249e:	4013      	ands	r3, r2
 80124a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80124a2:	68bb      	ldr	r3, [r7, #8]
 80124a4:	b29b      	uxth	r3, r3
}
 80124a6:	4618      	mov	r0, r3
 80124a8:	3714      	adds	r7, #20
 80124aa:	46bd      	mov	sp, r7
 80124ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124b0:	4770      	bx	lr

080124b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80124b2:	b480      	push	{r7}
 80124b4:	b085      	sub	sp, #20
 80124b6:	af00      	add	r7, sp, #0
 80124b8:	6078      	str	r0, [r7, #4]
 80124ba:	460b      	mov	r3, r1
 80124bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80124c2:	78fb      	ldrb	r3, [r7, #3]
 80124c4:	015a      	lsls	r2, r3, #5
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	4413      	add	r3, r2
 80124ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80124ce:	689b      	ldr	r3, [r3, #8]
 80124d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80124d2:	68fb      	ldr	r3, [r7, #12]
 80124d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80124d8:	695b      	ldr	r3, [r3, #20]
 80124da:	68ba      	ldr	r2, [r7, #8]
 80124dc:	4013      	ands	r3, r2
 80124de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80124e0:	68bb      	ldr	r3, [r7, #8]
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3714      	adds	r7, #20
 80124e6:	46bd      	mov	sp, r7
 80124e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124ec:	4770      	bx	lr

080124ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80124ee:	b480      	push	{r7}
 80124f0:	b087      	sub	sp, #28
 80124f2:	af00      	add	r7, sp, #0
 80124f4:	6078      	str	r0, [r7, #4]
 80124f6:	460b      	mov	r3, r1
 80124f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80124fe:	697b      	ldr	r3, [r7, #20]
 8012500:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012504:	691b      	ldr	r3, [r3, #16]
 8012506:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012508:	697b      	ldr	r3, [r7, #20]
 801250a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801250e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012510:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012512:	78fb      	ldrb	r3, [r7, #3]
 8012514:	f003 030f 	and.w	r3, r3, #15
 8012518:	68fa      	ldr	r2, [r7, #12]
 801251a:	fa22 f303 	lsr.w	r3, r2, r3
 801251e:	01db      	lsls	r3, r3, #7
 8012520:	b2db      	uxtb	r3, r3
 8012522:	693a      	ldr	r2, [r7, #16]
 8012524:	4313      	orrs	r3, r2
 8012526:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012528:	78fb      	ldrb	r3, [r7, #3]
 801252a:	015a      	lsls	r2, r3, #5
 801252c:	697b      	ldr	r3, [r7, #20]
 801252e:	4413      	add	r3, r2
 8012530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012534:	689b      	ldr	r3, [r3, #8]
 8012536:	693a      	ldr	r2, [r7, #16]
 8012538:	4013      	ands	r3, r2
 801253a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 801253c:	68bb      	ldr	r3, [r7, #8]
}
 801253e:	4618      	mov	r0, r3
 8012540:	371c      	adds	r7, #28
 8012542:	46bd      	mov	sp, r7
 8012544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012548:	4770      	bx	lr

0801254a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 801254a:	b480      	push	{r7}
 801254c:	b083      	sub	sp, #12
 801254e:	af00      	add	r7, sp, #0
 8012550:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	695b      	ldr	r3, [r3, #20]
 8012556:	f003 0301 	and.w	r3, r3, #1
}
 801255a:	4618      	mov	r0, r3
 801255c:	370c      	adds	r7, #12
 801255e:	46bd      	mov	sp, r7
 8012560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012564:	4770      	bx	lr

08012566 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8012566:	b480      	push	{r7}
 8012568:	b085      	sub	sp, #20
 801256a:	af00      	add	r7, sp, #0
 801256c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	68fa      	ldr	r2, [r7, #12]
 801257c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8012580:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8012584:	f023 0307 	bic.w	r3, r3, #7
 8012588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8012590:	685b      	ldr	r3, [r3, #4]
 8012592:	68fa      	ldr	r2, [r7, #12]
 8012594:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8012598:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801259c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801259e:	2300      	movs	r3, #0
}
 80125a0:	4618      	mov	r0, r3
 80125a2:	3714      	adds	r7, #20
 80125a4:	46bd      	mov	sp, r7
 80125a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125aa:	4770      	bx	lr

080125ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80125ac:	b480      	push	{r7}
 80125ae:	b087      	sub	sp, #28
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	60f8      	str	r0, [r7, #12]
 80125b4:	460b      	mov	r3, r1
 80125b6:	607a      	str	r2, [r7, #4]
 80125b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80125be:	68fb      	ldr	r3, [r7, #12]
 80125c0:	333c      	adds	r3, #60	@ 0x3c
 80125c2:	3304      	adds	r3, #4
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80125c8:	693b      	ldr	r3, [r7, #16]
 80125ca:	4a26      	ldr	r2, [pc, #152]	@ (8012664 <USB_EP0_OutStart+0xb8>)
 80125cc:	4293      	cmp	r3, r2
 80125ce:	d90a      	bls.n	80125e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80125d0:	697b      	ldr	r3, [r7, #20]
 80125d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80125dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80125e0:	d101      	bne.n	80125e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80125e2:	2300      	movs	r3, #0
 80125e4:	e037      	b.n	8012656 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80125e6:	697b      	ldr	r3, [r7, #20]
 80125e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80125ec:	461a      	mov	r2, r3
 80125ee:	2300      	movs	r3, #0
 80125f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80125f2:	697b      	ldr	r3, [r7, #20]
 80125f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80125f8:	691b      	ldr	r3, [r3, #16]
 80125fa:	697a      	ldr	r2, [r7, #20]
 80125fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012600:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8012604:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8012606:	697b      	ldr	r3, [r7, #20]
 8012608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801260c:	691b      	ldr	r3, [r3, #16]
 801260e:	697a      	ldr	r2, [r7, #20]
 8012610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012614:	f043 0318 	orr.w	r3, r3, #24
 8012618:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012620:	691b      	ldr	r3, [r3, #16]
 8012622:	697a      	ldr	r2, [r7, #20]
 8012624:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8012628:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 801262c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801262e:	7afb      	ldrb	r3, [r7, #11]
 8012630:	2b01      	cmp	r3, #1
 8012632:	d10f      	bne.n	8012654 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8012634:	697b      	ldr	r3, [r7, #20]
 8012636:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801263a:	461a      	mov	r2, r3
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8012640:	697b      	ldr	r3, [r7, #20]
 8012642:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	697a      	ldr	r2, [r7, #20]
 801264a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801264e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8012652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012654:	2300      	movs	r3, #0
}
 8012656:	4618      	mov	r0, r3
 8012658:	371c      	adds	r7, #28
 801265a:	46bd      	mov	sp, r7
 801265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012660:	4770      	bx	lr
 8012662:	bf00      	nop
 8012664:	4f54300a 	.word	0x4f54300a

08012668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8012668:	b480      	push	{r7}
 801266a:	b085      	sub	sp, #20
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012670:	2300      	movs	r3, #0
 8012672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	3301      	adds	r3, #1
 8012678:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8012680:	d901      	bls.n	8012686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8012682:	2303      	movs	r3, #3
 8012684:	e01b      	b.n	80126be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	691b      	ldr	r3, [r3, #16]
 801268a:	2b00      	cmp	r3, #0
 801268c:	daf2      	bge.n	8012674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801268e:	2300      	movs	r3, #0
 8012690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	691b      	ldr	r3, [r3, #16]
 8012696:	f043 0201 	orr.w	r2, r3, #1
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801269e:	68fb      	ldr	r3, [r7, #12]
 80126a0:	3301      	adds	r3, #1
 80126a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80126aa:	d901      	bls.n	80126b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80126ac:	2303      	movs	r3, #3
 80126ae:	e006      	b.n	80126be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	691b      	ldr	r3, [r3, #16]
 80126b4:	f003 0301 	and.w	r3, r3, #1
 80126b8:	2b01      	cmp	r3, #1
 80126ba:	d0f0      	beq.n	801269e <USB_CoreReset+0x36>

  return HAL_OK;
 80126bc:	2300      	movs	r3, #0
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3714      	adds	r7, #20
 80126c2:	46bd      	mov	sp, r7
 80126c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126c8:	4770      	bx	lr
	...

080126cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b084      	sub	sp, #16
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	460b      	mov	r3, r1
 80126d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80126d8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80126dc:	f005 ffb8 	bl	8018650 <USBD_static_malloc>
 80126e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d109      	bne.n	80126fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	32b0      	adds	r2, #176	@ 0xb0
 80126f2:	2100      	movs	r1, #0
 80126f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80126f8:	2302      	movs	r3, #2
 80126fa:	e0d4      	b.n	80128a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80126fc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8012700:	2100      	movs	r1, #0
 8012702:	68f8      	ldr	r0, [r7, #12]
 8012704:	f008 fef6 	bl	801b4f4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8012708:	687b      	ldr	r3, [r7, #4]
 801270a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	32b0      	adds	r2, #176	@ 0xb0
 8012712:	68f9      	ldr	r1, [r7, #12]
 8012714:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	32b0      	adds	r2, #176	@ 0xb0
 8012722:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	7c1b      	ldrb	r3, [r3, #16]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d138      	bne.n	80127a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8012734:	4b5e      	ldr	r3, [pc, #376]	@ (80128b0 <USBD_CDC_Init+0x1e4>)
 8012736:	7819      	ldrb	r1, [r3, #0]
 8012738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801273c:	2202      	movs	r2, #2
 801273e:	6878      	ldr	r0, [r7, #4]
 8012740:	f005 fe63 	bl	801840a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8012744:	4b5a      	ldr	r3, [pc, #360]	@ (80128b0 <USBD_CDC_Init+0x1e4>)
 8012746:	781b      	ldrb	r3, [r3, #0]
 8012748:	f003 020f 	and.w	r2, r3, #15
 801274c:	6879      	ldr	r1, [r7, #4]
 801274e:	4613      	mov	r3, r2
 8012750:	009b      	lsls	r3, r3, #2
 8012752:	4413      	add	r3, r2
 8012754:	009b      	lsls	r3, r3, #2
 8012756:	440b      	add	r3, r1
 8012758:	3324      	adds	r3, #36	@ 0x24
 801275a:	2201      	movs	r2, #1
 801275c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801275e:	4b55      	ldr	r3, [pc, #340]	@ (80128b4 <USBD_CDC_Init+0x1e8>)
 8012760:	7819      	ldrb	r1, [r3, #0]
 8012762:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012766:	2202      	movs	r2, #2
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f005 fe4e 	bl	801840a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801276e:	4b51      	ldr	r3, [pc, #324]	@ (80128b4 <USBD_CDC_Init+0x1e8>)
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	f003 020f 	and.w	r2, r3, #15
 8012776:	6879      	ldr	r1, [r7, #4]
 8012778:	4613      	mov	r3, r2
 801277a:	009b      	lsls	r3, r3, #2
 801277c:	4413      	add	r3, r2
 801277e:	009b      	lsls	r3, r3, #2
 8012780:	440b      	add	r3, r1
 8012782:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012786:	2201      	movs	r2, #1
 8012788:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 801278a:	4b4b      	ldr	r3, [pc, #300]	@ (80128b8 <USBD_CDC_Init+0x1ec>)
 801278c:	781b      	ldrb	r3, [r3, #0]
 801278e:	f003 020f 	and.w	r2, r3, #15
 8012792:	6879      	ldr	r1, [r7, #4]
 8012794:	4613      	mov	r3, r2
 8012796:	009b      	lsls	r3, r3, #2
 8012798:	4413      	add	r3, r2
 801279a:	009b      	lsls	r3, r3, #2
 801279c:	440b      	add	r3, r1
 801279e:	3326      	adds	r3, #38	@ 0x26
 80127a0:	2210      	movs	r2, #16
 80127a2:	801a      	strh	r2, [r3, #0]
 80127a4:	e035      	b.n	8012812 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80127a6:	4b42      	ldr	r3, [pc, #264]	@ (80128b0 <USBD_CDC_Init+0x1e4>)
 80127a8:	7819      	ldrb	r1, [r3, #0]
 80127aa:	2340      	movs	r3, #64	@ 0x40
 80127ac:	2202      	movs	r2, #2
 80127ae:	6878      	ldr	r0, [r7, #4]
 80127b0:	f005 fe2b 	bl	801840a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80127b4:	4b3e      	ldr	r3, [pc, #248]	@ (80128b0 <USBD_CDC_Init+0x1e4>)
 80127b6:	781b      	ldrb	r3, [r3, #0]
 80127b8:	f003 020f 	and.w	r2, r3, #15
 80127bc:	6879      	ldr	r1, [r7, #4]
 80127be:	4613      	mov	r3, r2
 80127c0:	009b      	lsls	r3, r3, #2
 80127c2:	4413      	add	r3, r2
 80127c4:	009b      	lsls	r3, r3, #2
 80127c6:	440b      	add	r3, r1
 80127c8:	3324      	adds	r3, #36	@ 0x24
 80127ca:	2201      	movs	r2, #1
 80127cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80127ce:	4b39      	ldr	r3, [pc, #228]	@ (80128b4 <USBD_CDC_Init+0x1e8>)
 80127d0:	7819      	ldrb	r1, [r3, #0]
 80127d2:	2340      	movs	r3, #64	@ 0x40
 80127d4:	2202      	movs	r2, #2
 80127d6:	6878      	ldr	r0, [r7, #4]
 80127d8:	f005 fe17 	bl	801840a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80127dc:	4b35      	ldr	r3, [pc, #212]	@ (80128b4 <USBD_CDC_Init+0x1e8>)
 80127de:	781b      	ldrb	r3, [r3, #0]
 80127e0:	f003 020f 	and.w	r2, r3, #15
 80127e4:	6879      	ldr	r1, [r7, #4]
 80127e6:	4613      	mov	r3, r2
 80127e8:	009b      	lsls	r3, r3, #2
 80127ea:	4413      	add	r3, r2
 80127ec:	009b      	lsls	r3, r3, #2
 80127ee:	440b      	add	r3, r1
 80127f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80127f4:	2201      	movs	r2, #1
 80127f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80127f8:	4b2f      	ldr	r3, [pc, #188]	@ (80128b8 <USBD_CDC_Init+0x1ec>)
 80127fa:	781b      	ldrb	r3, [r3, #0]
 80127fc:	f003 020f 	and.w	r2, r3, #15
 8012800:	6879      	ldr	r1, [r7, #4]
 8012802:	4613      	mov	r3, r2
 8012804:	009b      	lsls	r3, r3, #2
 8012806:	4413      	add	r3, r2
 8012808:	009b      	lsls	r3, r3, #2
 801280a:	440b      	add	r3, r1
 801280c:	3326      	adds	r3, #38	@ 0x26
 801280e:	2210      	movs	r2, #16
 8012810:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8012812:	4b29      	ldr	r3, [pc, #164]	@ (80128b8 <USBD_CDC_Init+0x1ec>)
 8012814:	7819      	ldrb	r1, [r3, #0]
 8012816:	2308      	movs	r3, #8
 8012818:	2203      	movs	r2, #3
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f005 fdf5 	bl	801840a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012820:	4b25      	ldr	r3, [pc, #148]	@ (80128b8 <USBD_CDC_Init+0x1ec>)
 8012822:	781b      	ldrb	r3, [r3, #0]
 8012824:	f003 020f 	and.w	r2, r3, #15
 8012828:	6879      	ldr	r1, [r7, #4]
 801282a:	4613      	mov	r3, r2
 801282c:	009b      	lsls	r3, r3, #2
 801282e:	4413      	add	r3, r2
 8012830:	009b      	lsls	r3, r3, #2
 8012832:	440b      	add	r3, r1
 8012834:	3324      	adds	r3, #36	@ 0x24
 8012836:	2201      	movs	r2, #1
 8012838:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801283a:	68fb      	ldr	r3, [r7, #12]
 801283c:	2200      	movs	r2, #0
 801283e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012848:	687a      	ldr	r2, [r7, #4]
 801284a:	33b0      	adds	r3, #176	@ 0xb0
 801284c:	009b      	lsls	r3, r3, #2
 801284e:	4413      	add	r3, r2
 8012850:	685b      	ldr	r3, [r3, #4]
 8012852:	681b      	ldr	r3, [r3, #0]
 8012854:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	2200      	movs	r2, #0
 801285a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	2200      	movs	r2, #0
 8012862:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 801286c:	2b00      	cmp	r3, #0
 801286e:	d101      	bne.n	8012874 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012870:	2302      	movs	r3, #2
 8012872:	e018      	b.n	80128a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	7c1b      	ldrb	r3, [r3, #16]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d10a      	bne.n	8012892 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801287c:	4b0d      	ldr	r3, [pc, #52]	@ (80128b4 <USBD_CDC_Init+0x1e8>)
 801287e:	7819      	ldrb	r1, [r3, #0]
 8012880:	68fb      	ldr	r3, [r7, #12]
 8012882:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012886:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801288a:	6878      	ldr	r0, [r7, #4]
 801288c:	f005 feac 	bl	80185e8 <USBD_LL_PrepareReceive>
 8012890:	e008      	b.n	80128a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012892:	4b08      	ldr	r3, [pc, #32]	@ (80128b4 <USBD_CDC_Init+0x1e8>)
 8012894:	7819      	ldrb	r1, [r3, #0]
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801289c:	2340      	movs	r3, #64	@ 0x40
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f005 fea2 	bl	80185e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80128a4:	2300      	movs	r3, #0
}
 80128a6:	4618      	mov	r0, r3
 80128a8:	3710      	adds	r7, #16
 80128aa:	46bd      	mov	sp, r7
 80128ac:	bd80      	pop	{r7, pc}
 80128ae:	bf00      	nop
 80128b0:	200000e7 	.word	0x200000e7
 80128b4:	200000e8 	.word	0x200000e8
 80128b8:	200000e9 	.word	0x200000e9

080128bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	460b      	mov	r3, r1
 80128c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80128c8:	4b3a      	ldr	r3, [pc, #232]	@ (80129b4 <USBD_CDC_DeInit+0xf8>)
 80128ca:	781b      	ldrb	r3, [r3, #0]
 80128cc:	4619      	mov	r1, r3
 80128ce:	6878      	ldr	r0, [r7, #4]
 80128d0:	f005 fdc1 	bl	8018456 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80128d4:	4b37      	ldr	r3, [pc, #220]	@ (80129b4 <USBD_CDC_DeInit+0xf8>)
 80128d6:	781b      	ldrb	r3, [r3, #0]
 80128d8:	f003 020f 	and.w	r2, r3, #15
 80128dc:	6879      	ldr	r1, [r7, #4]
 80128de:	4613      	mov	r3, r2
 80128e0:	009b      	lsls	r3, r3, #2
 80128e2:	4413      	add	r3, r2
 80128e4:	009b      	lsls	r3, r3, #2
 80128e6:	440b      	add	r3, r1
 80128e8:	3324      	adds	r3, #36	@ 0x24
 80128ea:	2200      	movs	r2, #0
 80128ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80128ee:	4b32      	ldr	r3, [pc, #200]	@ (80129b8 <USBD_CDC_DeInit+0xfc>)
 80128f0:	781b      	ldrb	r3, [r3, #0]
 80128f2:	4619      	mov	r1, r3
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f005 fdae 	bl	8018456 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80128fa:	4b2f      	ldr	r3, [pc, #188]	@ (80129b8 <USBD_CDC_DeInit+0xfc>)
 80128fc:	781b      	ldrb	r3, [r3, #0]
 80128fe:	f003 020f 	and.w	r2, r3, #15
 8012902:	6879      	ldr	r1, [r7, #4]
 8012904:	4613      	mov	r3, r2
 8012906:	009b      	lsls	r3, r3, #2
 8012908:	4413      	add	r3, r2
 801290a:	009b      	lsls	r3, r3, #2
 801290c:	440b      	add	r3, r1
 801290e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8012912:	2200      	movs	r2, #0
 8012914:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8012916:	4b29      	ldr	r3, [pc, #164]	@ (80129bc <USBD_CDC_DeInit+0x100>)
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	4619      	mov	r1, r3
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f005 fd9a 	bl	8018456 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8012922:	4b26      	ldr	r3, [pc, #152]	@ (80129bc <USBD_CDC_DeInit+0x100>)
 8012924:	781b      	ldrb	r3, [r3, #0]
 8012926:	f003 020f 	and.w	r2, r3, #15
 801292a:	6879      	ldr	r1, [r7, #4]
 801292c:	4613      	mov	r3, r2
 801292e:	009b      	lsls	r3, r3, #2
 8012930:	4413      	add	r3, r2
 8012932:	009b      	lsls	r3, r3, #2
 8012934:	440b      	add	r3, r1
 8012936:	3324      	adds	r3, #36	@ 0x24
 8012938:	2200      	movs	r2, #0
 801293a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801293c:	4b1f      	ldr	r3, [pc, #124]	@ (80129bc <USBD_CDC_DeInit+0x100>)
 801293e:	781b      	ldrb	r3, [r3, #0]
 8012940:	f003 020f 	and.w	r2, r3, #15
 8012944:	6879      	ldr	r1, [r7, #4]
 8012946:	4613      	mov	r3, r2
 8012948:	009b      	lsls	r3, r3, #2
 801294a:	4413      	add	r3, r2
 801294c:	009b      	lsls	r3, r3, #2
 801294e:	440b      	add	r3, r1
 8012950:	3326      	adds	r3, #38	@ 0x26
 8012952:	2200      	movs	r2, #0
 8012954:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	32b0      	adds	r2, #176	@ 0xb0
 8012960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d01f      	beq.n	80129a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801296e:	687a      	ldr	r2, [r7, #4]
 8012970:	33b0      	adds	r3, #176	@ 0xb0
 8012972:	009b      	lsls	r3, r3, #2
 8012974:	4413      	add	r3, r2
 8012976:	685b      	ldr	r3, [r3, #4]
 8012978:	685b      	ldr	r3, [r3, #4]
 801297a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	32b0      	adds	r2, #176	@ 0xb0
 8012986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801298a:	4618      	mov	r0, r3
 801298c:	f005 fe6e 	bl	801866c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	32b0      	adds	r2, #176	@ 0xb0
 801299a:	2100      	movs	r1, #0
 801299c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	2200      	movs	r2, #0
 80129a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80129a8:	2300      	movs	r3, #0
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3708      	adds	r7, #8
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
 80129b2:	bf00      	nop
 80129b4:	200000e7 	.word	0x200000e7
 80129b8:	200000e8 	.word	0x200000e8
 80129bc:	200000e9 	.word	0x200000e9

080129c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80129c0:	b580      	push	{r7, lr}
 80129c2:	b086      	sub	sp, #24
 80129c4:	af00      	add	r7, sp, #0
 80129c6:	6078      	str	r0, [r7, #4]
 80129c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	32b0      	adds	r2, #176	@ 0xb0
 80129d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80129d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80129da:	2300      	movs	r3, #0
 80129dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80129de:	2300      	movs	r3, #0
 80129e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80129e2:	2300      	movs	r3, #0
 80129e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80129e6:	693b      	ldr	r3, [r7, #16]
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d101      	bne.n	80129f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80129ec:	2303      	movs	r3, #3
 80129ee:	e0bf      	b.n	8012b70 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80129f0:	683b      	ldr	r3, [r7, #0]
 80129f2:	781b      	ldrb	r3, [r3, #0]
 80129f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d050      	beq.n	8012a9e <USBD_CDC_Setup+0xde>
 80129fc:	2b20      	cmp	r3, #32
 80129fe:	f040 80af 	bne.w	8012b60 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8012a02:	683b      	ldr	r3, [r7, #0]
 8012a04:	88db      	ldrh	r3, [r3, #6]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d03a      	beq.n	8012a80 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	781b      	ldrb	r3, [r3, #0]
 8012a0e:	b25b      	sxtb	r3, r3
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	da1b      	bge.n	8012a4c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012a1a:	687a      	ldr	r2, [r7, #4]
 8012a1c:	33b0      	adds	r3, #176	@ 0xb0
 8012a1e:	009b      	lsls	r3, r3, #2
 8012a20:	4413      	add	r3, r2
 8012a22:	685b      	ldr	r3, [r3, #4]
 8012a24:	689b      	ldr	r3, [r3, #8]
 8012a26:	683a      	ldr	r2, [r7, #0]
 8012a28:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012a2a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012a2c:	683a      	ldr	r2, [r7, #0]
 8012a2e:	88d2      	ldrh	r2, [r2, #6]
 8012a30:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8012a32:	683b      	ldr	r3, [r7, #0]
 8012a34:	88db      	ldrh	r3, [r3, #6]
 8012a36:	2b07      	cmp	r3, #7
 8012a38:	bf28      	it	cs
 8012a3a:	2307      	movcs	r3, #7
 8012a3c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012a3e:	693b      	ldr	r3, [r7, #16]
 8012a40:	89fa      	ldrh	r2, [r7, #14]
 8012a42:	4619      	mov	r1, r3
 8012a44:	6878      	ldr	r0, [r7, #4]
 8012a46:	f001 fd93 	bl	8014570 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012a4a:	e090      	b.n	8012b6e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012a4c:	683b      	ldr	r3, [r7, #0]
 8012a4e:	785a      	ldrb	r2, [r3, #1]
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8012a56:	683b      	ldr	r3, [r7, #0]
 8012a58:	88db      	ldrh	r3, [r3, #6]
 8012a5a:	2b3f      	cmp	r3, #63	@ 0x3f
 8012a5c:	d803      	bhi.n	8012a66 <USBD_CDC_Setup+0xa6>
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	88db      	ldrh	r3, [r3, #6]
 8012a62:	b2da      	uxtb	r2, r3
 8012a64:	e000      	b.n	8012a68 <USBD_CDC_Setup+0xa8>
 8012a66:	2240      	movs	r2, #64	@ 0x40
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012a6e:	6939      	ldr	r1, [r7, #16]
 8012a70:	693b      	ldr	r3, [r7, #16]
 8012a72:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8012a76:	461a      	mov	r2, r3
 8012a78:	6878      	ldr	r0, [r7, #4]
 8012a7a:	f001 fda5 	bl	80145c8 <USBD_CtlPrepareRx>
      break;
 8012a7e:	e076      	b.n	8012b6e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012a86:	687a      	ldr	r2, [r7, #4]
 8012a88:	33b0      	adds	r3, #176	@ 0xb0
 8012a8a:	009b      	lsls	r3, r3, #2
 8012a8c:	4413      	add	r3, r2
 8012a8e:	685b      	ldr	r3, [r3, #4]
 8012a90:	689b      	ldr	r3, [r3, #8]
 8012a92:	683a      	ldr	r2, [r7, #0]
 8012a94:	7850      	ldrb	r0, [r2, #1]
 8012a96:	2200      	movs	r2, #0
 8012a98:	6839      	ldr	r1, [r7, #0]
 8012a9a:	4798      	blx	r3
      break;
 8012a9c:	e067      	b.n	8012b6e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012a9e:	683b      	ldr	r3, [r7, #0]
 8012aa0:	785b      	ldrb	r3, [r3, #1]
 8012aa2:	2b0b      	cmp	r3, #11
 8012aa4:	d851      	bhi.n	8012b4a <USBD_CDC_Setup+0x18a>
 8012aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8012aac <USBD_CDC_Setup+0xec>)
 8012aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012aac:	08012add 	.word	0x08012add
 8012ab0:	08012b59 	.word	0x08012b59
 8012ab4:	08012b4b 	.word	0x08012b4b
 8012ab8:	08012b4b 	.word	0x08012b4b
 8012abc:	08012b4b 	.word	0x08012b4b
 8012ac0:	08012b4b 	.word	0x08012b4b
 8012ac4:	08012b4b 	.word	0x08012b4b
 8012ac8:	08012b4b 	.word	0x08012b4b
 8012acc:	08012b4b 	.word	0x08012b4b
 8012ad0:	08012b4b 	.word	0x08012b4b
 8012ad4:	08012b07 	.word	0x08012b07
 8012ad8:	08012b31 	.word	0x08012b31
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ae2:	b2db      	uxtb	r3, r3
 8012ae4:	2b03      	cmp	r3, #3
 8012ae6:	d107      	bne.n	8012af8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8012ae8:	f107 030a 	add.w	r3, r7, #10
 8012aec:	2202      	movs	r2, #2
 8012aee:	4619      	mov	r1, r3
 8012af0:	6878      	ldr	r0, [r7, #4]
 8012af2:	f001 fd3d 	bl	8014570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012af6:	e032      	b.n	8012b5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012af8:	6839      	ldr	r1, [r7, #0]
 8012afa:	6878      	ldr	r0, [r7, #4]
 8012afc:	f001 fcbb 	bl	8014476 <USBD_CtlError>
            ret = USBD_FAIL;
 8012b00:	2303      	movs	r3, #3
 8012b02:	75fb      	strb	r3, [r7, #23]
          break;
 8012b04:	e02b      	b.n	8012b5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b0c:	b2db      	uxtb	r3, r3
 8012b0e:	2b03      	cmp	r3, #3
 8012b10:	d107      	bne.n	8012b22 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8012b12:	f107 030d 	add.w	r3, r7, #13
 8012b16:	2201      	movs	r2, #1
 8012b18:	4619      	mov	r1, r3
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f001 fd28 	bl	8014570 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012b20:	e01d      	b.n	8012b5e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8012b22:	6839      	ldr	r1, [r7, #0]
 8012b24:	6878      	ldr	r0, [r7, #4]
 8012b26:	f001 fca6 	bl	8014476 <USBD_CtlError>
            ret = USBD_FAIL;
 8012b2a:	2303      	movs	r3, #3
 8012b2c:	75fb      	strb	r3, [r7, #23]
          break;
 8012b2e:	e016      	b.n	8012b5e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	2b03      	cmp	r3, #3
 8012b3a:	d00f      	beq.n	8012b5c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012b3c:	6839      	ldr	r1, [r7, #0]
 8012b3e:	6878      	ldr	r0, [r7, #4]
 8012b40:	f001 fc99 	bl	8014476 <USBD_CtlError>
            ret = USBD_FAIL;
 8012b44:	2303      	movs	r3, #3
 8012b46:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012b48:	e008      	b.n	8012b5c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012b4a:	6839      	ldr	r1, [r7, #0]
 8012b4c:	6878      	ldr	r0, [r7, #4]
 8012b4e:	f001 fc92 	bl	8014476 <USBD_CtlError>
          ret = USBD_FAIL;
 8012b52:	2303      	movs	r3, #3
 8012b54:	75fb      	strb	r3, [r7, #23]
          break;
 8012b56:	e002      	b.n	8012b5e <USBD_CDC_Setup+0x19e>
          break;
 8012b58:	bf00      	nop
 8012b5a:	e008      	b.n	8012b6e <USBD_CDC_Setup+0x1ae>
          break;
 8012b5c:	bf00      	nop
      }
      break;
 8012b5e:	e006      	b.n	8012b6e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012b60:	6839      	ldr	r1, [r7, #0]
 8012b62:	6878      	ldr	r0, [r7, #4]
 8012b64:	f001 fc87 	bl	8014476 <USBD_CtlError>
      ret = USBD_FAIL;
 8012b68:	2303      	movs	r3, #3
 8012b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8012b6c:	bf00      	nop
  }

  return (uint8_t)ret;
 8012b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	3718      	adds	r7, #24
 8012b74:	46bd      	mov	sp, r7
 8012b76:	bd80      	pop	{r7, pc}

08012b78 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b084      	sub	sp, #16
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
 8012b80:	460b      	mov	r3, r1
 8012b82:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012b8a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012b92:	687b      	ldr	r3, [r7, #4]
 8012b94:	32b0      	adds	r2, #176	@ 0xb0
 8012b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d101      	bne.n	8012ba2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012b9e:	2303      	movs	r3, #3
 8012ba0:	e065      	b.n	8012c6e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	32b0      	adds	r2, #176	@ 0xb0
 8012bac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012bb0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012bb2:	78fb      	ldrb	r3, [r7, #3]
 8012bb4:	f003 020f 	and.w	r2, r3, #15
 8012bb8:	6879      	ldr	r1, [r7, #4]
 8012bba:	4613      	mov	r3, r2
 8012bbc:	009b      	lsls	r3, r3, #2
 8012bbe:	4413      	add	r3, r2
 8012bc0:	009b      	lsls	r3, r3, #2
 8012bc2:	440b      	add	r3, r1
 8012bc4:	3318      	adds	r3, #24
 8012bc6:	681b      	ldr	r3, [r3, #0]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d02f      	beq.n	8012c2c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8012bcc:	78fb      	ldrb	r3, [r7, #3]
 8012bce:	f003 020f 	and.w	r2, r3, #15
 8012bd2:	6879      	ldr	r1, [r7, #4]
 8012bd4:	4613      	mov	r3, r2
 8012bd6:	009b      	lsls	r3, r3, #2
 8012bd8:	4413      	add	r3, r2
 8012bda:	009b      	lsls	r3, r3, #2
 8012bdc:	440b      	add	r3, r1
 8012bde:	3318      	adds	r3, #24
 8012be0:	681a      	ldr	r2, [r3, #0]
 8012be2:	78fb      	ldrb	r3, [r7, #3]
 8012be4:	f003 010f 	and.w	r1, r3, #15
 8012be8:	68f8      	ldr	r0, [r7, #12]
 8012bea:	460b      	mov	r3, r1
 8012bec:	00db      	lsls	r3, r3, #3
 8012bee:	440b      	add	r3, r1
 8012bf0:	009b      	lsls	r3, r3, #2
 8012bf2:	4403      	add	r3, r0
 8012bf4:	331c      	adds	r3, #28
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	fbb2 f1f3 	udiv	r1, r2, r3
 8012bfc:	fb01 f303 	mul.w	r3, r1, r3
 8012c00:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d112      	bne.n	8012c2c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8012c06:	78fb      	ldrb	r3, [r7, #3]
 8012c08:	f003 020f 	and.w	r2, r3, #15
 8012c0c:	6879      	ldr	r1, [r7, #4]
 8012c0e:	4613      	mov	r3, r2
 8012c10:	009b      	lsls	r3, r3, #2
 8012c12:	4413      	add	r3, r2
 8012c14:	009b      	lsls	r3, r3, #2
 8012c16:	440b      	add	r3, r1
 8012c18:	3318      	adds	r3, #24
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012c1e:	78f9      	ldrb	r1, [r7, #3]
 8012c20:	2300      	movs	r3, #0
 8012c22:	2200      	movs	r2, #0
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f005 fcbe 	bl	80185a6 <USBD_LL_Transmit>
 8012c2a:	e01f      	b.n	8012c6c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012c2c:	68bb      	ldr	r3, [r7, #8]
 8012c2e:	2200      	movs	r2, #0
 8012c30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012c3a:	687a      	ldr	r2, [r7, #4]
 8012c3c:	33b0      	adds	r3, #176	@ 0xb0
 8012c3e:	009b      	lsls	r3, r3, #2
 8012c40:	4413      	add	r3, r2
 8012c42:	685b      	ldr	r3, [r3, #4]
 8012c44:	691b      	ldr	r3, [r3, #16]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d010      	beq.n	8012c6c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012c4a:	687b      	ldr	r3, [r7, #4]
 8012c4c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012c50:	687a      	ldr	r2, [r7, #4]
 8012c52:	33b0      	adds	r3, #176	@ 0xb0
 8012c54:	009b      	lsls	r3, r3, #2
 8012c56:	4413      	add	r3, r2
 8012c58:	685b      	ldr	r3, [r3, #4]
 8012c5a:	691b      	ldr	r3, [r3, #16]
 8012c5c:	68ba      	ldr	r2, [r7, #8]
 8012c5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8012c62:	68ba      	ldr	r2, [r7, #8]
 8012c64:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012c68:	78fa      	ldrb	r2, [r7, #3]
 8012c6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012c6c:	2300      	movs	r3, #0
}
 8012c6e:	4618      	mov	r0, r3
 8012c70:	3710      	adds	r7, #16
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}

08012c76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012c76:	b580      	push	{r7, lr}
 8012c78:	b084      	sub	sp, #16
 8012c7a:	af00      	add	r7, sp, #0
 8012c7c:	6078      	str	r0, [r7, #4]
 8012c7e:	460b      	mov	r3, r1
 8012c80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	32b0      	adds	r2, #176	@ 0xb0
 8012c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c90:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	32b0      	adds	r2, #176	@ 0xb0
 8012c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d101      	bne.n	8012ca8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8012ca4:	2303      	movs	r3, #3
 8012ca6:	e01a      	b.n	8012cde <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012ca8:	78fb      	ldrb	r3, [r7, #3]
 8012caa:	4619      	mov	r1, r3
 8012cac:	6878      	ldr	r0, [r7, #4]
 8012cae:	f005 fcbc 	bl	801862a <USBD_LL_GetRxDataSize>
 8012cb2:	4602      	mov	r2, r0
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012cc0:	687a      	ldr	r2, [r7, #4]
 8012cc2:	33b0      	adds	r3, #176	@ 0xb0
 8012cc4:	009b      	lsls	r3, r3, #2
 8012cc6:	4413      	add	r3, r2
 8012cc8:	685b      	ldr	r3, [r3, #4]
 8012cca:	68db      	ldr	r3, [r3, #12]
 8012ccc:	68fa      	ldr	r2, [r7, #12]
 8012cce:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8012cd2:	68fa      	ldr	r2, [r7, #12]
 8012cd4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8012cd8:	4611      	mov	r1, r2
 8012cda:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8012cdc:	2300      	movs	r3, #0
}
 8012cde:	4618      	mov	r0, r3
 8012ce0:	3710      	adds	r7, #16
 8012ce2:	46bd      	mov	sp, r7
 8012ce4:	bd80      	pop	{r7, pc}

08012ce6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8012ce6:	b580      	push	{r7, lr}
 8012ce8:	b084      	sub	sp, #16
 8012cea:	af00      	add	r7, sp, #0
 8012cec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012cf4:	687b      	ldr	r3, [r7, #4]
 8012cf6:	32b0      	adds	r2, #176	@ 0xb0
 8012cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012cfc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012cfe:	68fb      	ldr	r3, [r7, #12]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d101      	bne.n	8012d08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8012d04:	2303      	movs	r3, #3
 8012d06:	e024      	b.n	8012d52 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d0e:	687a      	ldr	r2, [r7, #4]
 8012d10:	33b0      	adds	r3, #176	@ 0xb0
 8012d12:	009b      	lsls	r3, r3, #2
 8012d14:	4413      	add	r3, r2
 8012d16:	685b      	ldr	r3, [r3, #4]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	d019      	beq.n	8012d50 <USBD_CDC_EP0_RxReady+0x6a>
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8012d22:	2bff      	cmp	r3, #255	@ 0xff
 8012d24:	d014      	beq.n	8012d50 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012d2c:	687a      	ldr	r2, [r7, #4]
 8012d2e:	33b0      	adds	r3, #176	@ 0xb0
 8012d30:	009b      	lsls	r3, r3, #2
 8012d32:	4413      	add	r3, r2
 8012d34:	685b      	ldr	r3, [r3, #4]
 8012d36:	689b      	ldr	r3, [r3, #8]
 8012d38:	68fa      	ldr	r2, [r7, #12]
 8012d3a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8012d3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8012d40:	68fa      	ldr	r2, [r7, #12]
 8012d42:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8012d46:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	22ff      	movs	r2, #255	@ 0xff
 8012d4c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8012d50:	2300      	movs	r3, #0
}
 8012d52:	4618      	mov	r0, r3
 8012d54:	3710      	adds	r7, #16
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
	...

08012d5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012d5c:	b580      	push	{r7, lr}
 8012d5e:	b086      	sub	sp, #24
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012d64:	2182      	movs	r1, #130	@ 0x82
 8012d66:	4818      	ldr	r0, [pc, #96]	@ (8012dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012d68:	f000 fd4f 	bl	801380a <USBD_GetEpDesc>
 8012d6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012d6e:	2101      	movs	r1, #1
 8012d70:	4815      	ldr	r0, [pc, #84]	@ (8012dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012d72:	f000 fd4a 	bl	801380a <USBD_GetEpDesc>
 8012d76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012d78:	2181      	movs	r1, #129	@ 0x81
 8012d7a:	4813      	ldr	r0, [pc, #76]	@ (8012dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012d7c:	f000 fd45 	bl	801380a <USBD_GetEpDesc>
 8012d80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d002      	beq.n	8012d8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	2210      	movs	r2, #16
 8012d8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012d8e:	693b      	ldr	r3, [r7, #16]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d006      	beq.n	8012da2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012d94:	693b      	ldr	r3, [r7, #16]
 8012d96:	2200      	movs	r2, #0
 8012d98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012d9c:	711a      	strb	r2, [r3, #4]
 8012d9e:	2200      	movs	r2, #0
 8012da0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d006      	beq.n	8012db6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	2200      	movs	r2, #0
 8012dac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012db0:	711a      	strb	r2, [r3, #4]
 8012db2:	2200      	movs	r2, #0
 8012db4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	2243      	movs	r2, #67	@ 0x43
 8012dba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012dbc:	4b02      	ldr	r3, [pc, #8]	@ (8012dc8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8012dbe:	4618      	mov	r0, r3
 8012dc0:	3718      	adds	r7, #24
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	bf00      	nop
 8012dc8:	200000a4 	.word	0x200000a4

08012dcc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b086      	sub	sp, #24
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012dd4:	2182      	movs	r1, #130	@ 0x82
 8012dd6:	4818      	ldr	r0, [pc, #96]	@ (8012e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012dd8:	f000 fd17 	bl	801380a <USBD_GetEpDesc>
 8012ddc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012dde:	2101      	movs	r1, #1
 8012de0:	4815      	ldr	r0, [pc, #84]	@ (8012e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012de2:	f000 fd12 	bl	801380a <USBD_GetEpDesc>
 8012de6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012de8:	2181      	movs	r1, #129	@ 0x81
 8012dea:	4813      	ldr	r0, [pc, #76]	@ (8012e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8012dec:	f000 fd0d 	bl	801380a <USBD_GetEpDesc>
 8012df0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012df2:	697b      	ldr	r3, [r7, #20]
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d002      	beq.n	8012dfe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8012df8:	697b      	ldr	r3, [r7, #20]
 8012dfa:	2210      	movs	r2, #16
 8012dfc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012dfe:	693b      	ldr	r3, [r7, #16]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d006      	beq.n	8012e12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012e04:	693b      	ldr	r3, [r7, #16]
 8012e06:	2200      	movs	r2, #0
 8012e08:	711a      	strb	r2, [r3, #4]
 8012e0a:	2200      	movs	r2, #0
 8012e0c:	f042 0202 	orr.w	r2, r2, #2
 8012e10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012e12:	68fb      	ldr	r3, [r7, #12]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d006      	beq.n	8012e26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012e18:	68fb      	ldr	r3, [r7, #12]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	711a      	strb	r2, [r3, #4]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	f042 0202 	orr.w	r2, r2, #2
 8012e24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	2243      	movs	r2, #67	@ 0x43
 8012e2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012e2c:	4b02      	ldr	r3, [pc, #8]	@ (8012e38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3718      	adds	r7, #24
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	200000a4 	.word	0x200000a4

08012e3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012e3c:	b580      	push	{r7, lr}
 8012e3e:	b086      	sub	sp, #24
 8012e40:	af00      	add	r7, sp, #0
 8012e42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8012e44:	2182      	movs	r1, #130	@ 0x82
 8012e46:	4818      	ldr	r0, [pc, #96]	@ (8012ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012e48:	f000 fcdf 	bl	801380a <USBD_GetEpDesc>
 8012e4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012e4e:	2101      	movs	r1, #1
 8012e50:	4815      	ldr	r0, [pc, #84]	@ (8012ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012e52:	f000 fcda 	bl	801380a <USBD_GetEpDesc>
 8012e56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012e58:	2181      	movs	r1, #129	@ 0x81
 8012e5a:	4813      	ldr	r0, [pc, #76]	@ (8012ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012e5c:	f000 fcd5 	bl	801380a <USBD_GetEpDesc>
 8012e60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8012e62:	697b      	ldr	r3, [r7, #20]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d002      	beq.n	8012e6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012e68:	697b      	ldr	r3, [r7, #20]
 8012e6a:	2210      	movs	r2, #16
 8012e6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012e6e:	693b      	ldr	r3, [r7, #16]
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d006      	beq.n	8012e82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012e74:	693b      	ldr	r3, [r7, #16]
 8012e76:	2200      	movs	r2, #0
 8012e78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012e7c:	711a      	strb	r2, [r3, #4]
 8012e7e:	2200      	movs	r2, #0
 8012e80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8012e82:	68fb      	ldr	r3, [r7, #12]
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	d006      	beq.n	8012e96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	2200      	movs	r2, #0
 8012e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012e90:	711a      	strb	r2, [r3, #4]
 8012e92:	2200      	movs	r2, #0
 8012e94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	2243      	movs	r2, #67	@ 0x43
 8012e9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012e9c:	4b02      	ldr	r3, [pc, #8]	@ (8012ea8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	3718      	adds	r7, #24
 8012ea2:	46bd      	mov	sp, r7
 8012ea4:	bd80      	pop	{r7, pc}
 8012ea6:	bf00      	nop
 8012ea8:	200000a4 	.word	0x200000a4

08012eac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b083      	sub	sp, #12
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	220a      	movs	r2, #10
 8012eb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8012eba:	4b03      	ldr	r3, [pc, #12]	@ (8012ec8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	370c      	adds	r7, #12
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec6:	4770      	bx	lr
 8012ec8:	20000060 	.word	0x20000060

08012ecc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8012ecc:	b480      	push	{r7}
 8012ece:	b083      	sub	sp, #12
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	6078      	str	r0, [r7, #4]
 8012ed4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8012ed6:	683b      	ldr	r3, [r7, #0]
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d101      	bne.n	8012ee0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8012edc:	2303      	movs	r3, #3
 8012ede:	e009      	b.n	8012ef4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012ee6:	687a      	ldr	r2, [r7, #4]
 8012ee8:	33b0      	adds	r3, #176	@ 0xb0
 8012eea:	009b      	lsls	r3, r3, #2
 8012eec:	4413      	add	r3, r2
 8012eee:	683a      	ldr	r2, [r7, #0]
 8012ef0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8012ef2:	2300      	movs	r3, #0
}
 8012ef4:	4618      	mov	r0, r3
 8012ef6:	370c      	adds	r7, #12
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efe:	4770      	bx	lr

08012f00 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8012f00:	b480      	push	{r7}
 8012f02:	b087      	sub	sp, #28
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	60f8      	str	r0, [r7, #12]
 8012f08:	60b9      	str	r1, [r7, #8]
 8012f0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f0c:	68fb      	ldr	r3, [r7, #12]
 8012f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	32b0      	adds	r2, #176	@ 0xb0
 8012f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f1a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012f1c:	697b      	ldr	r3, [r7, #20]
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d101      	bne.n	8012f26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012f22:	2303      	movs	r3, #3
 8012f24:	e008      	b.n	8012f38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8012f26:	697b      	ldr	r3, [r7, #20]
 8012f28:	68ba      	ldr	r2, [r7, #8]
 8012f2a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012f2e:	697b      	ldr	r3, [r7, #20]
 8012f30:	687a      	ldr	r2, [r7, #4]
 8012f32:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8012f36:	2300      	movs	r3, #0
}
 8012f38:	4618      	mov	r0, r3
 8012f3a:	371c      	adds	r7, #28
 8012f3c:	46bd      	mov	sp, r7
 8012f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f42:	4770      	bx	lr

08012f44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8012f44:	b480      	push	{r7}
 8012f46:	b085      	sub	sp, #20
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
 8012f4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	32b0      	adds	r2, #176	@ 0xb0
 8012f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d101      	bne.n	8012f68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8012f64:	2303      	movs	r3, #3
 8012f66:	e004      	b.n	8012f72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	683a      	ldr	r2, [r7, #0]
 8012f6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012f70:	2300      	movs	r3, #0
}
 8012f72:	4618      	mov	r0, r3
 8012f74:	3714      	adds	r7, #20
 8012f76:	46bd      	mov	sp, r7
 8012f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7c:	4770      	bx	lr
	...

08012f80 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8012f80:	b580      	push	{r7, lr}
 8012f82:	b084      	sub	sp, #16
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	32b0      	adds	r2, #176	@ 0xb0
 8012f92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012f96:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8012f98:	2301      	movs	r3, #1
 8012f9a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012f9c:	68bb      	ldr	r3, [r7, #8]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d101      	bne.n	8012fa6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8012fa2:	2303      	movs	r3, #3
 8012fa4:	e025      	b.n	8012ff2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8012fa6:	68bb      	ldr	r3, [r7, #8]
 8012fa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d11f      	bne.n	8012ff0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	2201      	movs	r2, #1
 8012fb4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8012fb8:	4b10      	ldr	r3, [pc, #64]	@ (8012ffc <USBD_CDC_TransmitPacket+0x7c>)
 8012fba:	781b      	ldrb	r3, [r3, #0]
 8012fbc:	f003 020f 	and.w	r2, r3, #15
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 8012fc6:	6878      	ldr	r0, [r7, #4]
 8012fc8:	4613      	mov	r3, r2
 8012fca:	009b      	lsls	r3, r3, #2
 8012fcc:	4413      	add	r3, r2
 8012fce:	009b      	lsls	r3, r3, #2
 8012fd0:	4403      	add	r3, r0
 8012fd2:	3318      	adds	r3, #24
 8012fd4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8012fd6:	4b09      	ldr	r3, [pc, #36]	@ (8012ffc <USBD_CDC_TransmitPacket+0x7c>)
 8012fd8:	7819      	ldrb	r1, [r3, #0]
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8012fe6:	6878      	ldr	r0, [r7, #4]
 8012fe8:	f005 fadd 	bl	80185a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8012fec:	2300      	movs	r3, #0
 8012fee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8012ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3710      	adds	r7, #16
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	200000e7 	.word	0x200000e7

08013000 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	32b0      	adds	r2, #176	@ 0xb0
 8013012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013016:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	32b0      	adds	r2, #176	@ 0xb0
 8013022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d101      	bne.n	801302e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 801302a:	2303      	movs	r3, #3
 801302c:	e018      	b.n	8013060 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	7c1b      	ldrb	r3, [r3, #16]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d10a      	bne.n	801304c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8013036:	4b0c      	ldr	r3, [pc, #48]	@ (8013068 <USBD_CDC_ReceivePacket+0x68>)
 8013038:	7819      	ldrb	r1, [r3, #0]
 801303a:	68fb      	ldr	r3, [r7, #12]
 801303c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013040:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f005 facf 	bl	80185e8 <USBD_LL_PrepareReceive>
 801304a:	e008      	b.n	801305e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801304c:	4b06      	ldr	r3, [pc, #24]	@ (8013068 <USBD_CDC_ReceivePacket+0x68>)
 801304e:	7819      	ldrb	r1, [r3, #0]
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8013056:	2340      	movs	r3, #64	@ 0x40
 8013058:	6878      	ldr	r0, [r7, #4]
 801305a:	f005 fac5 	bl	80185e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801305e:	2300      	movs	r3, #0
}
 8013060:	4618      	mov	r0, r3
 8013062:	3710      	adds	r7, #16
 8013064:	46bd      	mov	sp, r7
 8013066:	bd80      	pop	{r7, pc}
 8013068:	200000e8 	.word	0x200000e8

0801306c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b086      	sub	sp, #24
 8013070:	af00      	add	r7, sp, #0
 8013072:	60f8      	str	r0, [r7, #12]
 8013074:	60b9      	str	r1, [r7, #8]
 8013076:	4613      	mov	r3, r2
 8013078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d101      	bne.n	8013084 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8013080:	2303      	movs	r3, #3
 8013082:	e01f      	b.n	80130c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8013084:	68fb      	ldr	r3, [r7, #12]
 8013086:	2200      	movs	r2, #0
 8013088:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	2200      	movs	r2, #0
 8013090:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	2200      	movs	r2, #0
 8013098:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	2b00      	cmp	r3, #0
 80130a0:	d003      	beq.n	80130aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80130a2:	68fb      	ldr	r3, [r7, #12]
 80130a4:	68ba      	ldr	r2, [r7, #8]
 80130a6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	2201      	movs	r2, #1
 80130ae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	79fa      	ldrb	r2, [r7, #7]
 80130b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80130b8:	68f8      	ldr	r0, [r7, #12]
 80130ba:	f005 f93f 	bl	801833c <USBD_LL_Init>
 80130be:	4603      	mov	r3, r0
 80130c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80130c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80130c4:	4618      	mov	r0, r3
 80130c6:	3718      	adds	r7, #24
 80130c8:	46bd      	mov	sp, r7
 80130ca:	bd80      	pop	{r7, pc}

080130cc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80130cc:	b580      	push	{r7, lr}
 80130ce:	b084      	sub	sp, #16
 80130d0:	af00      	add	r7, sp, #0
 80130d2:	6078      	str	r0, [r7, #4]
 80130d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80130d6:	2300      	movs	r3, #0
 80130d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80130da:	683b      	ldr	r3, [r7, #0]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	d101      	bne.n	80130e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80130e0:	2303      	movs	r3, #3
 80130e2:	e025      	b.n	8013130 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80130e4:	687b      	ldr	r3, [r7, #4]
 80130e6:	683a      	ldr	r2, [r7, #0]
 80130e8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	32ae      	adds	r2, #174	@ 0xae
 80130f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80130fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130fc:	2b00      	cmp	r3, #0
 80130fe:	d00f      	beq.n	8013120 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	32ae      	adds	r2, #174	@ 0xae
 801310a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801310e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013110:	f107 020e 	add.w	r2, r7, #14
 8013114:	4610      	mov	r0, r2
 8013116:	4798      	blx	r3
 8013118:	4602      	mov	r2, r0
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8013126:	1c5a      	adds	r2, r3, #1
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 801312e:	2300      	movs	r3, #0
}
 8013130:	4618      	mov	r0, r3
 8013132:	3710      	adds	r7, #16
 8013134:	46bd      	mov	sp, r7
 8013136:	bd80      	pop	{r7, pc}

08013138 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013138:	b580      	push	{r7, lr}
 801313a:	b082      	sub	sp, #8
 801313c:	af00      	add	r7, sp, #0
 801313e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8013140:	6878      	ldr	r0, [r7, #4]
 8013142:	f005 f947 	bl	80183d4 <USBD_LL_Start>
 8013146:	4603      	mov	r3, r0
}
 8013148:	4618      	mov	r0, r3
 801314a:	3708      	adds	r7, #8
 801314c:	46bd      	mov	sp, r7
 801314e:	bd80      	pop	{r7, pc}

08013150 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8013150:	b480      	push	{r7}
 8013152:	b083      	sub	sp, #12
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013158:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801315a:	4618      	mov	r0, r3
 801315c:	370c      	adds	r7, #12
 801315e:	46bd      	mov	sp, r7
 8013160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013164:	4770      	bx	lr

08013166 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013166:	b580      	push	{r7, lr}
 8013168:	b084      	sub	sp, #16
 801316a:	af00      	add	r7, sp, #0
 801316c:	6078      	str	r0, [r7, #4]
 801316e:	460b      	mov	r3, r1
 8013170:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8013172:	2300      	movs	r3, #0
 8013174:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801317c:	2b00      	cmp	r3, #0
 801317e:	d009      	beq.n	8013194 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	78fa      	ldrb	r2, [r7, #3]
 801318a:	4611      	mov	r1, r2
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	4798      	blx	r3
 8013190:	4603      	mov	r3, r0
 8013192:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8013194:	7bfb      	ldrb	r3, [r7, #15]
}
 8013196:	4618      	mov	r0, r3
 8013198:	3710      	adds	r7, #16
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}

0801319e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801319e:	b580      	push	{r7, lr}
 80131a0:	b084      	sub	sp, #16
 80131a2:	af00      	add	r7, sp, #0
 80131a4:	6078      	str	r0, [r7, #4]
 80131a6:	460b      	mov	r3, r1
 80131a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80131aa:	2300      	movs	r3, #0
 80131ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80131b4:	685b      	ldr	r3, [r3, #4]
 80131b6:	78fa      	ldrb	r2, [r7, #3]
 80131b8:	4611      	mov	r1, r2
 80131ba:	6878      	ldr	r0, [r7, #4]
 80131bc:	4798      	blx	r3
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d001      	beq.n	80131c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80131c4:	2303      	movs	r3, #3
 80131c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80131c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80131ca:	4618      	mov	r0, r3
 80131cc:	3710      	adds	r7, #16
 80131ce:	46bd      	mov	sp, r7
 80131d0:	bd80      	pop	{r7, pc}

080131d2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80131d2:	b580      	push	{r7, lr}
 80131d4:	b084      	sub	sp, #16
 80131d6:	af00      	add	r7, sp, #0
 80131d8:	6078      	str	r0, [r7, #4]
 80131da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80131e2:	6839      	ldr	r1, [r7, #0]
 80131e4:	4618      	mov	r0, r3
 80131e6:	f001 f90c 	bl	8014402 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	2201      	movs	r2, #1
 80131ee:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 80131f8:	461a      	mov	r2, r3
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8013206:	f003 031f 	and.w	r3, r3, #31
 801320a:	2b02      	cmp	r3, #2
 801320c:	d01a      	beq.n	8013244 <USBD_LL_SetupStage+0x72>
 801320e:	2b02      	cmp	r3, #2
 8013210:	d822      	bhi.n	8013258 <USBD_LL_SetupStage+0x86>
 8013212:	2b00      	cmp	r3, #0
 8013214:	d002      	beq.n	801321c <USBD_LL_SetupStage+0x4a>
 8013216:	2b01      	cmp	r3, #1
 8013218:	d00a      	beq.n	8013230 <USBD_LL_SetupStage+0x5e>
 801321a:	e01d      	b.n	8013258 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 801321c:	687b      	ldr	r3, [r7, #4]
 801321e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013222:	4619      	mov	r1, r3
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f000 fb63 	bl	80138f0 <USBD_StdDevReq>
 801322a:	4603      	mov	r3, r0
 801322c:	73fb      	strb	r3, [r7, #15]
      break;
 801322e:	e020      	b.n	8013272 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8013236:	4619      	mov	r1, r3
 8013238:	6878      	ldr	r0, [r7, #4]
 801323a:	f000 fbcb 	bl	80139d4 <USBD_StdItfReq>
 801323e:	4603      	mov	r3, r0
 8013240:	73fb      	strb	r3, [r7, #15]
      break;
 8013242:	e016      	b.n	8013272 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801324a:	4619      	mov	r1, r3
 801324c:	6878      	ldr	r0, [r7, #4]
 801324e:	f000 fc2d 	bl	8013aac <USBD_StdEPReq>
 8013252:	4603      	mov	r3, r0
 8013254:	73fb      	strb	r3, [r7, #15]
      break;
 8013256:	e00c      	b.n	8013272 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801325e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8013262:	b2db      	uxtb	r3, r3
 8013264:	4619      	mov	r1, r3
 8013266:	6878      	ldr	r0, [r7, #4]
 8013268:	f005 f914 	bl	8018494 <USBD_LL_StallEP>
 801326c:	4603      	mov	r3, r0
 801326e:	73fb      	strb	r3, [r7, #15]
      break;
 8013270:	bf00      	nop
  }

  return ret;
 8013272:	7bfb      	ldrb	r3, [r7, #15]
}
 8013274:	4618      	mov	r0, r3
 8013276:	3710      	adds	r7, #16
 8013278:	46bd      	mov	sp, r7
 801327a:	bd80      	pop	{r7, pc}

0801327c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801327c:	b580      	push	{r7, lr}
 801327e:	b086      	sub	sp, #24
 8013280:	af00      	add	r7, sp, #0
 8013282:	60f8      	str	r0, [r7, #12]
 8013284:	460b      	mov	r3, r1
 8013286:	607a      	str	r2, [r7, #4]
 8013288:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801328a:	2300      	movs	r3, #0
 801328c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801328e:	7afb      	ldrb	r3, [r7, #11]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d16e      	bne.n	8013372 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801329a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80132a2:	2b03      	cmp	r3, #3
 80132a4:	f040 8098 	bne.w	80133d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	689a      	ldr	r2, [r3, #8]
 80132ac:	693b      	ldr	r3, [r7, #16]
 80132ae:	68db      	ldr	r3, [r3, #12]
 80132b0:	429a      	cmp	r2, r3
 80132b2:	d913      	bls.n	80132dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	689a      	ldr	r2, [r3, #8]
 80132b8:	693b      	ldr	r3, [r7, #16]
 80132ba:	68db      	ldr	r3, [r3, #12]
 80132bc:	1ad2      	subs	r2, r2, r3
 80132be:	693b      	ldr	r3, [r7, #16]
 80132c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	68da      	ldr	r2, [r3, #12]
 80132c6:	693b      	ldr	r3, [r7, #16]
 80132c8:	689b      	ldr	r3, [r3, #8]
 80132ca:	4293      	cmp	r3, r2
 80132cc:	bf28      	it	cs
 80132ce:	4613      	movcs	r3, r2
 80132d0:	461a      	mov	r2, r3
 80132d2:	6879      	ldr	r1, [r7, #4]
 80132d4:	68f8      	ldr	r0, [r7, #12]
 80132d6:	f001 f994 	bl	8014602 <USBD_CtlContinueRx>
 80132da:	e07d      	b.n	80133d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80132dc:	68fb      	ldr	r3, [r7, #12]
 80132de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80132e2:	f003 031f 	and.w	r3, r3, #31
 80132e6:	2b02      	cmp	r3, #2
 80132e8:	d014      	beq.n	8013314 <USBD_LL_DataOutStage+0x98>
 80132ea:	2b02      	cmp	r3, #2
 80132ec:	d81d      	bhi.n	801332a <USBD_LL_DataOutStage+0xae>
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d002      	beq.n	80132f8 <USBD_LL_DataOutStage+0x7c>
 80132f2:	2b01      	cmp	r3, #1
 80132f4:	d003      	beq.n	80132fe <USBD_LL_DataOutStage+0x82>
 80132f6:	e018      	b.n	801332a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80132f8:	2300      	movs	r3, #0
 80132fa:	75bb      	strb	r3, [r7, #22]
            break;
 80132fc:	e018      	b.n	8013330 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80132fe:	68fb      	ldr	r3, [r7, #12]
 8013300:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8013304:	b2db      	uxtb	r3, r3
 8013306:	4619      	mov	r1, r3
 8013308:	68f8      	ldr	r0, [r7, #12]
 801330a:	f000 fa64 	bl	80137d6 <USBD_CoreFindIF>
 801330e:	4603      	mov	r3, r0
 8013310:	75bb      	strb	r3, [r7, #22]
            break;
 8013312:	e00d      	b.n	8013330 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 801331a:	b2db      	uxtb	r3, r3
 801331c:	4619      	mov	r1, r3
 801331e:	68f8      	ldr	r0, [r7, #12]
 8013320:	f000 fa66 	bl	80137f0 <USBD_CoreFindEP>
 8013324:	4603      	mov	r3, r0
 8013326:	75bb      	strb	r3, [r7, #22]
            break;
 8013328:	e002      	b.n	8013330 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 801332a:	2300      	movs	r3, #0
 801332c:	75bb      	strb	r3, [r7, #22]
            break;
 801332e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8013330:	7dbb      	ldrb	r3, [r7, #22]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d119      	bne.n	801336a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801333c:	b2db      	uxtb	r3, r3
 801333e:	2b03      	cmp	r3, #3
 8013340:	d113      	bne.n	801336a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8013342:	7dba      	ldrb	r2, [r7, #22]
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	32ae      	adds	r2, #174	@ 0xae
 8013348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801334c:	691b      	ldr	r3, [r3, #16]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d00b      	beq.n	801336a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8013352:	7dba      	ldrb	r2, [r7, #22]
 8013354:	68fb      	ldr	r3, [r7, #12]
 8013356:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801335a:	7dba      	ldrb	r2, [r7, #22]
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	32ae      	adds	r2, #174	@ 0xae
 8013360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013364:	691b      	ldr	r3, [r3, #16]
 8013366:	68f8      	ldr	r0, [r7, #12]
 8013368:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801336a:	68f8      	ldr	r0, [r7, #12]
 801336c:	f001 f95a 	bl	8014624 <USBD_CtlSendStatus>
 8013370:	e032      	b.n	80133d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8013372:	7afb      	ldrb	r3, [r7, #11]
 8013374:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013378:	b2db      	uxtb	r3, r3
 801337a:	4619      	mov	r1, r3
 801337c:	68f8      	ldr	r0, [r7, #12]
 801337e:	f000 fa37 	bl	80137f0 <USBD_CoreFindEP>
 8013382:	4603      	mov	r3, r0
 8013384:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013386:	7dbb      	ldrb	r3, [r7, #22]
 8013388:	2bff      	cmp	r3, #255	@ 0xff
 801338a:	d025      	beq.n	80133d8 <USBD_LL_DataOutStage+0x15c>
 801338c:	7dbb      	ldrb	r3, [r7, #22]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d122      	bne.n	80133d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013398:	b2db      	uxtb	r3, r3
 801339a:	2b03      	cmp	r3, #3
 801339c:	d117      	bne.n	80133ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801339e:	7dba      	ldrb	r2, [r7, #22]
 80133a0:	68fb      	ldr	r3, [r7, #12]
 80133a2:	32ae      	adds	r2, #174	@ 0xae
 80133a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133a8:	699b      	ldr	r3, [r3, #24]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d00f      	beq.n	80133ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80133ae:	7dba      	ldrb	r2, [r7, #22]
 80133b0:	68fb      	ldr	r3, [r7, #12]
 80133b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80133b6:	7dba      	ldrb	r2, [r7, #22]
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	32ae      	adds	r2, #174	@ 0xae
 80133bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133c0:	699b      	ldr	r3, [r3, #24]
 80133c2:	7afa      	ldrb	r2, [r7, #11]
 80133c4:	4611      	mov	r1, r2
 80133c6:	68f8      	ldr	r0, [r7, #12]
 80133c8:	4798      	blx	r3
 80133ca:	4603      	mov	r3, r0
 80133cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80133ce:	7dfb      	ldrb	r3, [r7, #23]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d001      	beq.n	80133d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80133d4:	7dfb      	ldrb	r3, [r7, #23]
 80133d6:	e000      	b.n	80133da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80133d8:	2300      	movs	r3, #0
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3718      	adds	r7, #24
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}

080133e2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80133e2:	b580      	push	{r7, lr}
 80133e4:	b086      	sub	sp, #24
 80133e6:	af00      	add	r7, sp, #0
 80133e8:	60f8      	str	r0, [r7, #12]
 80133ea:	460b      	mov	r3, r1
 80133ec:	607a      	str	r2, [r7, #4]
 80133ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80133f0:	7afb      	ldrb	r3, [r7, #11]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d16f      	bne.n	80134d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80133f6:	68fb      	ldr	r3, [r7, #12]
 80133f8:	3314      	adds	r3, #20
 80133fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80133fc:	68fb      	ldr	r3, [r7, #12]
 80133fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8013402:	2b02      	cmp	r3, #2
 8013404:	d15a      	bne.n	80134bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	689a      	ldr	r2, [r3, #8]
 801340a:	693b      	ldr	r3, [r7, #16]
 801340c:	68db      	ldr	r3, [r3, #12]
 801340e:	429a      	cmp	r2, r3
 8013410:	d914      	bls.n	801343c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	689a      	ldr	r2, [r3, #8]
 8013416:	693b      	ldr	r3, [r7, #16]
 8013418:	68db      	ldr	r3, [r3, #12]
 801341a:	1ad2      	subs	r2, r2, r3
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	689b      	ldr	r3, [r3, #8]
 8013424:	461a      	mov	r2, r3
 8013426:	6879      	ldr	r1, [r7, #4]
 8013428:	68f8      	ldr	r0, [r7, #12]
 801342a:	f001 f8bc 	bl	80145a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801342e:	2300      	movs	r3, #0
 8013430:	2200      	movs	r2, #0
 8013432:	2100      	movs	r1, #0
 8013434:	68f8      	ldr	r0, [r7, #12]
 8013436:	f005 f8d7 	bl	80185e8 <USBD_LL_PrepareReceive>
 801343a:	e03f      	b.n	80134bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	68da      	ldr	r2, [r3, #12]
 8013440:	693b      	ldr	r3, [r7, #16]
 8013442:	689b      	ldr	r3, [r3, #8]
 8013444:	429a      	cmp	r2, r3
 8013446:	d11c      	bne.n	8013482 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8013448:	693b      	ldr	r3, [r7, #16]
 801344a:	685a      	ldr	r2, [r3, #4]
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8013450:	429a      	cmp	r2, r3
 8013452:	d316      	bcc.n	8013482 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	685a      	ldr	r2, [r3, #4]
 8013458:	68fb      	ldr	r3, [r7, #12]
 801345a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801345e:	429a      	cmp	r2, r3
 8013460:	d20f      	bcs.n	8013482 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8013462:	2200      	movs	r2, #0
 8013464:	2100      	movs	r1, #0
 8013466:	68f8      	ldr	r0, [r7, #12]
 8013468:	f001 f89d 	bl	80145a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	2200      	movs	r2, #0
 8013470:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013474:	2300      	movs	r3, #0
 8013476:	2200      	movs	r2, #0
 8013478:	2100      	movs	r1, #0
 801347a:	68f8      	ldr	r0, [r7, #12]
 801347c:	f005 f8b4 	bl	80185e8 <USBD_LL_PrepareReceive>
 8013480:	e01c      	b.n	80134bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013488:	b2db      	uxtb	r3, r3
 801348a:	2b03      	cmp	r3, #3
 801348c:	d10f      	bne.n	80134ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013494:	68db      	ldr	r3, [r3, #12]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d009      	beq.n	80134ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	2200      	movs	r2, #0
 801349e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80134a8:	68db      	ldr	r3, [r3, #12]
 80134aa:	68f8      	ldr	r0, [r7, #12]
 80134ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80134ae:	2180      	movs	r1, #128	@ 0x80
 80134b0:	68f8      	ldr	r0, [r7, #12]
 80134b2:	f004 ffef 	bl	8018494 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80134b6:	68f8      	ldr	r0, [r7, #12]
 80134b8:	f001 f8c7 	bl	801464a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 80134bc:	68fb      	ldr	r3, [r7, #12]
 80134be:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d03a      	beq.n	801353c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80134c6:	68f8      	ldr	r0, [r7, #12]
 80134c8:	f7ff fe42 	bl	8013150 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80134cc:	68fb      	ldr	r3, [r7, #12]
 80134ce:	2200      	movs	r2, #0
 80134d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80134d4:	e032      	b.n	801353c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80134d6:	7afb      	ldrb	r3, [r7, #11]
 80134d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80134dc:	b2db      	uxtb	r3, r3
 80134de:	4619      	mov	r1, r3
 80134e0:	68f8      	ldr	r0, [r7, #12]
 80134e2:	f000 f985 	bl	80137f0 <USBD_CoreFindEP>
 80134e6:	4603      	mov	r3, r0
 80134e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80134ea:	7dfb      	ldrb	r3, [r7, #23]
 80134ec:	2bff      	cmp	r3, #255	@ 0xff
 80134ee:	d025      	beq.n	801353c <USBD_LL_DataInStage+0x15a>
 80134f0:	7dfb      	ldrb	r3, [r7, #23]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d122      	bne.n	801353c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80134fc:	b2db      	uxtb	r3, r3
 80134fe:	2b03      	cmp	r3, #3
 8013500:	d11c      	bne.n	801353c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8013502:	7dfa      	ldrb	r2, [r7, #23]
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	32ae      	adds	r2, #174	@ 0xae
 8013508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801350c:	695b      	ldr	r3, [r3, #20]
 801350e:	2b00      	cmp	r3, #0
 8013510:	d014      	beq.n	801353c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8013512:	7dfa      	ldrb	r2, [r7, #23]
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801351a:	7dfa      	ldrb	r2, [r7, #23]
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	32ae      	adds	r2, #174	@ 0xae
 8013520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013524:	695b      	ldr	r3, [r3, #20]
 8013526:	7afa      	ldrb	r2, [r7, #11]
 8013528:	4611      	mov	r1, r2
 801352a:	68f8      	ldr	r0, [r7, #12]
 801352c:	4798      	blx	r3
 801352e:	4603      	mov	r3, r0
 8013530:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8013532:	7dbb      	ldrb	r3, [r7, #22]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d001      	beq.n	801353c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8013538:	7dbb      	ldrb	r3, [r7, #22]
 801353a:	e000      	b.n	801353e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801353c:	2300      	movs	r3, #0
}
 801353e:	4618      	mov	r0, r3
 8013540:	3718      	adds	r7, #24
 8013542:	46bd      	mov	sp, r7
 8013544:	bd80      	pop	{r7, pc}

08013546 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8013546:	b580      	push	{r7, lr}
 8013548:	b084      	sub	sp, #16
 801354a:	af00      	add	r7, sp, #0
 801354c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801354e:	2300      	movs	r3, #0
 8013550:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2201      	movs	r2, #1
 8013556:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	2200      	movs	r2, #0
 801355e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2200      	movs	r2, #0
 8013566:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2200      	movs	r2, #0
 801356c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2200      	movs	r2, #0
 8013574:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801357e:	2b00      	cmp	r3, #0
 8013580:	d014      	beq.n	80135ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013588:	685b      	ldr	r3, [r3, #4]
 801358a:	2b00      	cmp	r3, #0
 801358c:	d00e      	beq.n	80135ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	687a      	ldr	r2, [r7, #4]
 8013598:	6852      	ldr	r2, [r2, #4]
 801359a:	b2d2      	uxtb	r2, r2
 801359c:	4611      	mov	r1, r2
 801359e:	6878      	ldr	r0, [r7, #4]
 80135a0:	4798      	blx	r3
 80135a2:	4603      	mov	r3, r0
 80135a4:	2b00      	cmp	r3, #0
 80135a6:	d001      	beq.n	80135ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80135a8:	2303      	movs	r3, #3
 80135aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80135ac:	2340      	movs	r3, #64	@ 0x40
 80135ae:	2200      	movs	r2, #0
 80135b0:	2100      	movs	r1, #0
 80135b2:	6878      	ldr	r0, [r7, #4]
 80135b4:	f004 ff29 	bl	801840a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	2201      	movs	r2, #1
 80135bc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	2240      	movs	r2, #64	@ 0x40
 80135c4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80135c8:	2340      	movs	r3, #64	@ 0x40
 80135ca:	2200      	movs	r2, #0
 80135cc:	2180      	movs	r1, #128	@ 0x80
 80135ce:	6878      	ldr	r0, [r7, #4]
 80135d0:	f004 ff1b 	bl	801840a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	2201      	movs	r2, #1
 80135d8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	2240      	movs	r2, #64	@ 0x40
 80135de:	621a      	str	r2, [r3, #32]

  return ret;
 80135e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80135e2:	4618      	mov	r0, r3
 80135e4:	3710      	adds	r7, #16
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}

080135ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80135ea:	b480      	push	{r7}
 80135ec:	b083      	sub	sp, #12
 80135ee:	af00      	add	r7, sp, #0
 80135f0:	6078      	str	r0, [r7, #4]
 80135f2:	460b      	mov	r3, r1
 80135f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	78fa      	ldrb	r2, [r7, #3]
 80135fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80135fc:	2300      	movs	r3, #0
}
 80135fe:	4618      	mov	r0, r3
 8013600:	370c      	adds	r7, #12
 8013602:	46bd      	mov	sp, r7
 8013604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013608:	4770      	bx	lr

0801360a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801360a:	b480      	push	{r7}
 801360c:	b083      	sub	sp, #12
 801360e:	af00      	add	r7, sp, #0
 8013610:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013618:	b2db      	uxtb	r3, r3
 801361a:	2b04      	cmp	r3, #4
 801361c:	d006      	beq.n	801362c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013624:	b2da      	uxtb	r2, r3
 8013626:	687b      	ldr	r3, [r7, #4]
 8013628:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	2204      	movs	r2, #4
 8013630:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8013634:	2300      	movs	r3, #0
}
 8013636:	4618      	mov	r0, r3
 8013638:	370c      	adds	r7, #12
 801363a:	46bd      	mov	sp, r7
 801363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013640:	4770      	bx	lr

08013642 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8013642:	b480      	push	{r7}
 8013644:	b083      	sub	sp, #12
 8013646:	af00      	add	r7, sp, #0
 8013648:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013650:	b2db      	uxtb	r3, r3
 8013652:	2b04      	cmp	r3, #4
 8013654:	d106      	bne.n	8013664 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801365c:	b2da      	uxtb	r2, r3
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8013664:	2300      	movs	r3, #0
}
 8013666:	4618      	mov	r0, r3
 8013668:	370c      	adds	r7, #12
 801366a:	46bd      	mov	sp, r7
 801366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013670:	4770      	bx	lr

08013672 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8013672:	b580      	push	{r7, lr}
 8013674:	b082      	sub	sp, #8
 8013676:	af00      	add	r7, sp, #0
 8013678:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013680:	b2db      	uxtb	r3, r3
 8013682:	2b03      	cmp	r3, #3
 8013684:	d110      	bne.n	80136a8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8013686:	687b      	ldr	r3, [r7, #4]
 8013688:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801368c:	2b00      	cmp	r3, #0
 801368e:	d00b      	beq.n	80136a8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013696:	69db      	ldr	r3, [r3, #28]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d005      	beq.n	80136a8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801369c:	687b      	ldr	r3, [r7, #4]
 801369e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80136a2:	69db      	ldr	r3, [r3, #28]
 80136a4:	6878      	ldr	r0, [r7, #4]
 80136a6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80136a8:	2300      	movs	r3, #0
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3708      	adds	r7, #8
 80136ae:	46bd      	mov	sp, r7
 80136b0:	bd80      	pop	{r7, pc}

080136b2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80136b2:	b580      	push	{r7, lr}
 80136b4:	b082      	sub	sp, #8
 80136b6:	af00      	add	r7, sp, #0
 80136b8:	6078      	str	r0, [r7, #4]
 80136ba:	460b      	mov	r3, r1
 80136bc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	32ae      	adds	r2, #174	@ 0xae
 80136c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d101      	bne.n	80136d4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80136d0:	2303      	movs	r3, #3
 80136d2:	e01c      	b.n	801370e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80136da:	b2db      	uxtb	r3, r3
 80136dc:	2b03      	cmp	r3, #3
 80136de:	d115      	bne.n	801370c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136e6:	687b      	ldr	r3, [r7, #4]
 80136e8:	32ae      	adds	r2, #174	@ 0xae
 80136ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80136ee:	6a1b      	ldr	r3, [r3, #32]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00b      	beq.n	801370c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	32ae      	adds	r2, #174	@ 0xae
 80136fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013702:	6a1b      	ldr	r3, [r3, #32]
 8013704:	78fa      	ldrb	r2, [r7, #3]
 8013706:	4611      	mov	r1, r2
 8013708:	6878      	ldr	r0, [r7, #4]
 801370a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801370c:	2300      	movs	r3, #0
}
 801370e:	4618      	mov	r0, r3
 8013710:	3708      	adds	r7, #8
 8013712:	46bd      	mov	sp, r7
 8013714:	bd80      	pop	{r7, pc}

08013716 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8013716:	b580      	push	{r7, lr}
 8013718:	b082      	sub	sp, #8
 801371a:	af00      	add	r7, sp, #0
 801371c:	6078      	str	r0, [r7, #4]
 801371e:	460b      	mov	r3, r1
 8013720:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8013722:	687b      	ldr	r3, [r7, #4]
 8013724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	32ae      	adds	r2, #174	@ 0xae
 801372c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d101      	bne.n	8013738 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8013734:	2303      	movs	r3, #3
 8013736:	e01c      	b.n	8013772 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801373e:	b2db      	uxtb	r3, r3
 8013740:	2b03      	cmp	r3, #3
 8013742:	d115      	bne.n	8013770 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	32ae      	adds	r2, #174	@ 0xae
 801374e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013754:	2b00      	cmp	r3, #0
 8013756:	d00b      	beq.n	8013770 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	32ae      	adds	r2, #174	@ 0xae
 8013762:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013768:	78fa      	ldrb	r2, [r7, #3]
 801376a:	4611      	mov	r1, r2
 801376c:	6878      	ldr	r0, [r7, #4]
 801376e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8013770:	2300      	movs	r3, #0
}
 8013772:	4618      	mov	r0, r3
 8013774:	3708      	adds	r7, #8
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}

0801377a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801377a:	b480      	push	{r7}
 801377c:	b083      	sub	sp, #12
 801377e:	af00      	add	r7, sp, #0
 8013780:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013782:	2300      	movs	r3, #0
}
 8013784:	4618      	mov	r0, r3
 8013786:	370c      	adds	r7, #12
 8013788:	46bd      	mov	sp, r7
 801378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378e:	4770      	bx	lr

08013790 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8013790:	b580      	push	{r7, lr}
 8013792:	b084      	sub	sp, #16
 8013794:	af00      	add	r7, sp, #0
 8013796:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8013798:	2300      	movs	r3, #0
 801379a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	2201      	movs	r2, #1
 80137a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d00e      	beq.n	80137cc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80137b4:	685b      	ldr	r3, [r3, #4]
 80137b6:	687a      	ldr	r2, [r7, #4]
 80137b8:	6852      	ldr	r2, [r2, #4]
 80137ba:	b2d2      	uxtb	r2, r2
 80137bc:	4611      	mov	r1, r2
 80137be:	6878      	ldr	r0, [r7, #4]
 80137c0:	4798      	blx	r3
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d001      	beq.n	80137cc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80137c8:	2303      	movs	r3, #3
 80137ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80137cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80137ce:	4618      	mov	r0, r3
 80137d0:	3710      	adds	r7, #16
 80137d2:	46bd      	mov	sp, r7
 80137d4:	bd80      	pop	{r7, pc}

080137d6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80137d6:	b480      	push	{r7}
 80137d8:	b083      	sub	sp, #12
 80137da:	af00      	add	r7, sp, #0
 80137dc:	6078      	str	r0, [r7, #4]
 80137de:	460b      	mov	r3, r1
 80137e0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80137e2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80137e4:	4618      	mov	r0, r3
 80137e6:	370c      	adds	r7, #12
 80137e8:	46bd      	mov	sp, r7
 80137ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137ee:	4770      	bx	lr

080137f0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80137f0:	b480      	push	{r7}
 80137f2:	b083      	sub	sp, #12
 80137f4:	af00      	add	r7, sp, #0
 80137f6:	6078      	str	r0, [r7, #4]
 80137f8:	460b      	mov	r3, r1
 80137fa:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80137fc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80137fe:	4618      	mov	r0, r3
 8013800:	370c      	adds	r7, #12
 8013802:	46bd      	mov	sp, r7
 8013804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013808:	4770      	bx	lr

0801380a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801380a:	b580      	push	{r7, lr}
 801380c:	b086      	sub	sp, #24
 801380e:	af00      	add	r7, sp, #0
 8013810:	6078      	str	r0, [r7, #4]
 8013812:	460b      	mov	r3, r1
 8013814:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801381a:	687b      	ldr	r3, [r7, #4]
 801381c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801381e:	2300      	movs	r3, #0
 8013820:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8013822:	68fb      	ldr	r3, [r7, #12]
 8013824:	885b      	ldrh	r3, [r3, #2]
 8013826:	b29b      	uxth	r3, r3
 8013828:	68fa      	ldr	r2, [r7, #12]
 801382a:	7812      	ldrb	r2, [r2, #0]
 801382c:	4293      	cmp	r3, r2
 801382e:	d91f      	bls.n	8013870 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	781b      	ldrb	r3, [r3, #0]
 8013834:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8013836:	e013      	b.n	8013860 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8013838:	f107 030a 	add.w	r3, r7, #10
 801383c:	4619      	mov	r1, r3
 801383e:	6978      	ldr	r0, [r7, #20]
 8013840:	f000 f81b 	bl	801387a <USBD_GetNextDesc>
 8013844:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	785b      	ldrb	r3, [r3, #1]
 801384a:	2b05      	cmp	r3, #5
 801384c:	d108      	bne.n	8013860 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801384e:	697b      	ldr	r3, [r7, #20]
 8013850:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8013852:	693b      	ldr	r3, [r7, #16]
 8013854:	789b      	ldrb	r3, [r3, #2]
 8013856:	78fa      	ldrb	r2, [r7, #3]
 8013858:	429a      	cmp	r2, r3
 801385a:	d008      	beq.n	801386e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801385c:	2300      	movs	r3, #0
 801385e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	885b      	ldrh	r3, [r3, #2]
 8013864:	b29a      	uxth	r2, r3
 8013866:	897b      	ldrh	r3, [r7, #10]
 8013868:	429a      	cmp	r2, r3
 801386a:	d8e5      	bhi.n	8013838 <USBD_GetEpDesc+0x2e>
 801386c:	e000      	b.n	8013870 <USBD_GetEpDesc+0x66>
          break;
 801386e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8013870:	693b      	ldr	r3, [r7, #16]
}
 8013872:	4618      	mov	r0, r3
 8013874:	3718      	adds	r7, #24
 8013876:	46bd      	mov	sp, r7
 8013878:	bd80      	pop	{r7, pc}

0801387a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801387a:	b480      	push	{r7}
 801387c:	b085      	sub	sp, #20
 801387e:	af00      	add	r7, sp, #0
 8013880:	6078      	str	r0, [r7, #4]
 8013882:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8013888:	683b      	ldr	r3, [r7, #0]
 801388a:	881b      	ldrh	r3, [r3, #0]
 801388c:	68fa      	ldr	r2, [r7, #12]
 801388e:	7812      	ldrb	r2, [r2, #0]
 8013890:	4413      	add	r3, r2
 8013892:	b29a      	uxth	r2, r3
 8013894:	683b      	ldr	r3, [r7, #0]
 8013896:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	781b      	ldrb	r3, [r3, #0]
 801389c:	461a      	mov	r2, r3
 801389e:	687b      	ldr	r3, [r7, #4]
 80138a0:	4413      	add	r3, r2
 80138a2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80138a4:	68fb      	ldr	r3, [r7, #12]
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	3714      	adds	r7, #20
 80138aa:	46bd      	mov	sp, r7
 80138ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138b0:	4770      	bx	lr

080138b2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80138b2:	b480      	push	{r7}
 80138b4:	b087      	sub	sp, #28
 80138b6:	af00      	add	r7, sp, #0
 80138b8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80138be:	697b      	ldr	r3, [r7, #20]
 80138c0:	781b      	ldrb	r3, [r3, #0]
 80138c2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80138c4:	697b      	ldr	r3, [r7, #20]
 80138c6:	3301      	adds	r3, #1
 80138c8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80138ca:	697b      	ldr	r3, [r7, #20]
 80138cc:	781b      	ldrb	r3, [r3, #0]
 80138ce:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80138d0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80138d4:	021b      	lsls	r3, r3, #8
 80138d6:	b21a      	sxth	r2, r3
 80138d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80138dc:	4313      	orrs	r3, r2
 80138de:	b21b      	sxth	r3, r3
 80138e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80138e2:	89fb      	ldrh	r3, [r7, #14]
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	371c      	adds	r7, #28
 80138e8:	46bd      	mov	sp, r7
 80138ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ee:	4770      	bx	lr

080138f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138f0:	b580      	push	{r7, lr}
 80138f2:	b084      	sub	sp, #16
 80138f4:	af00      	add	r7, sp, #0
 80138f6:	6078      	str	r0, [r7, #4]
 80138f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80138fa:	2300      	movs	r3, #0
 80138fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80138fe:	683b      	ldr	r3, [r7, #0]
 8013900:	781b      	ldrb	r3, [r3, #0]
 8013902:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013906:	2b40      	cmp	r3, #64	@ 0x40
 8013908:	d005      	beq.n	8013916 <USBD_StdDevReq+0x26>
 801390a:	2b40      	cmp	r3, #64	@ 0x40
 801390c:	d857      	bhi.n	80139be <USBD_StdDevReq+0xce>
 801390e:	2b00      	cmp	r3, #0
 8013910:	d00f      	beq.n	8013932 <USBD_StdDevReq+0x42>
 8013912:	2b20      	cmp	r3, #32
 8013914:	d153      	bne.n	80139be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	32ae      	adds	r2, #174	@ 0xae
 8013920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013924:	689b      	ldr	r3, [r3, #8]
 8013926:	6839      	ldr	r1, [r7, #0]
 8013928:	6878      	ldr	r0, [r7, #4]
 801392a:	4798      	blx	r3
 801392c:	4603      	mov	r3, r0
 801392e:	73fb      	strb	r3, [r7, #15]
      break;
 8013930:	e04a      	b.n	80139c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	785b      	ldrb	r3, [r3, #1]
 8013936:	2b09      	cmp	r3, #9
 8013938:	d83b      	bhi.n	80139b2 <USBD_StdDevReq+0xc2>
 801393a:	a201      	add	r2, pc, #4	@ (adr r2, 8013940 <USBD_StdDevReq+0x50>)
 801393c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013940:	08013995 	.word	0x08013995
 8013944:	080139a9 	.word	0x080139a9
 8013948:	080139b3 	.word	0x080139b3
 801394c:	0801399f 	.word	0x0801399f
 8013950:	080139b3 	.word	0x080139b3
 8013954:	08013973 	.word	0x08013973
 8013958:	08013969 	.word	0x08013969
 801395c:	080139b3 	.word	0x080139b3
 8013960:	0801398b 	.word	0x0801398b
 8013964:	0801397d 	.word	0x0801397d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8013968:	6839      	ldr	r1, [r7, #0]
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f000 fa3c 	bl	8013de8 <USBD_GetDescriptor>
          break;
 8013970:	e024      	b.n	80139bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8013972:	6839      	ldr	r1, [r7, #0]
 8013974:	6878      	ldr	r0, [r7, #4]
 8013976:	f000 fba1 	bl	80140bc <USBD_SetAddress>
          break;
 801397a:	e01f      	b.n	80139bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801397c:	6839      	ldr	r1, [r7, #0]
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f000 fbe0 	bl	8014144 <USBD_SetConfig>
 8013984:	4603      	mov	r3, r0
 8013986:	73fb      	strb	r3, [r7, #15]
          break;
 8013988:	e018      	b.n	80139bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801398a:	6839      	ldr	r1, [r7, #0]
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f000 fc83 	bl	8014298 <USBD_GetConfig>
          break;
 8013992:	e013      	b.n	80139bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8013994:	6839      	ldr	r1, [r7, #0]
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f000 fcb4 	bl	8014304 <USBD_GetStatus>
          break;
 801399c:	e00e      	b.n	80139bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801399e:	6839      	ldr	r1, [r7, #0]
 80139a0:	6878      	ldr	r0, [r7, #4]
 80139a2:	f000 fce3 	bl	801436c <USBD_SetFeature>
          break;
 80139a6:	e009      	b.n	80139bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80139a8:	6839      	ldr	r1, [r7, #0]
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f000 fd07 	bl	80143be <USBD_ClrFeature>
          break;
 80139b0:	e004      	b.n	80139bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80139b2:	6839      	ldr	r1, [r7, #0]
 80139b4:	6878      	ldr	r0, [r7, #4]
 80139b6:	f000 fd5e 	bl	8014476 <USBD_CtlError>
          break;
 80139ba:	bf00      	nop
      }
      break;
 80139bc:	e004      	b.n	80139c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80139be:	6839      	ldr	r1, [r7, #0]
 80139c0:	6878      	ldr	r0, [r7, #4]
 80139c2:	f000 fd58 	bl	8014476 <USBD_CtlError>
      break;
 80139c6:	bf00      	nop
  }

  return ret;
 80139c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80139ca:	4618      	mov	r0, r3
 80139cc:	3710      	adds	r7, #16
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd80      	pop	{r7, pc}
 80139d2:	bf00      	nop

080139d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af00      	add	r7, sp, #0
 80139da:	6078      	str	r0, [r7, #4]
 80139dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80139de:	2300      	movs	r3, #0
 80139e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	781b      	ldrb	r3, [r3, #0]
 80139e6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80139ea:	2b40      	cmp	r3, #64	@ 0x40
 80139ec:	d005      	beq.n	80139fa <USBD_StdItfReq+0x26>
 80139ee:	2b40      	cmp	r3, #64	@ 0x40
 80139f0:	d852      	bhi.n	8013a98 <USBD_StdItfReq+0xc4>
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d001      	beq.n	80139fa <USBD_StdItfReq+0x26>
 80139f6:	2b20      	cmp	r3, #32
 80139f8:	d14e      	bne.n	8013a98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a00:	b2db      	uxtb	r3, r3
 8013a02:	3b01      	subs	r3, #1
 8013a04:	2b02      	cmp	r3, #2
 8013a06:	d840      	bhi.n	8013a8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013a08:	683b      	ldr	r3, [r7, #0]
 8013a0a:	889b      	ldrh	r3, [r3, #4]
 8013a0c:	b2db      	uxtb	r3, r3
 8013a0e:	2b01      	cmp	r3, #1
 8013a10:	d836      	bhi.n	8013a80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8013a12:	683b      	ldr	r3, [r7, #0]
 8013a14:	889b      	ldrh	r3, [r3, #4]
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	4619      	mov	r1, r3
 8013a1a:	6878      	ldr	r0, [r7, #4]
 8013a1c:	f7ff fedb 	bl	80137d6 <USBD_CoreFindIF>
 8013a20:	4603      	mov	r3, r0
 8013a22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013a24:	7bbb      	ldrb	r3, [r7, #14]
 8013a26:	2bff      	cmp	r3, #255	@ 0xff
 8013a28:	d01d      	beq.n	8013a66 <USBD_StdItfReq+0x92>
 8013a2a:	7bbb      	ldrb	r3, [r7, #14]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d11a      	bne.n	8013a66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013a30:	7bba      	ldrb	r2, [r7, #14]
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	32ae      	adds	r2, #174	@ 0xae
 8013a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a3a:	689b      	ldr	r3, [r3, #8]
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d00f      	beq.n	8013a60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8013a40:	7bba      	ldrb	r2, [r7, #14]
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013a48:	7bba      	ldrb	r2, [r7, #14]
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	32ae      	adds	r2, #174	@ 0xae
 8013a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a52:	689b      	ldr	r3, [r3, #8]
 8013a54:	6839      	ldr	r1, [r7, #0]
 8013a56:	6878      	ldr	r0, [r7, #4]
 8013a58:	4798      	blx	r3
 8013a5a:	4603      	mov	r3, r0
 8013a5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013a5e:	e004      	b.n	8013a6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8013a60:	2303      	movs	r3, #3
 8013a62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8013a64:	e001      	b.n	8013a6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8013a66:	2303      	movs	r3, #3
 8013a68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	88db      	ldrh	r3, [r3, #6]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d110      	bne.n	8013a94 <USBD_StdItfReq+0xc0>
 8013a72:	7bfb      	ldrb	r3, [r7, #15]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d10d      	bne.n	8013a94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8013a78:	6878      	ldr	r0, [r7, #4]
 8013a7a:	f000 fdd3 	bl	8014624 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8013a7e:	e009      	b.n	8013a94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8013a80:	6839      	ldr	r1, [r7, #0]
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f000 fcf7 	bl	8014476 <USBD_CtlError>
          break;
 8013a88:	e004      	b.n	8013a94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8013a8a:	6839      	ldr	r1, [r7, #0]
 8013a8c:	6878      	ldr	r0, [r7, #4]
 8013a8e:	f000 fcf2 	bl	8014476 <USBD_CtlError>
          break;
 8013a92:	e000      	b.n	8013a96 <USBD_StdItfReq+0xc2>
          break;
 8013a94:	bf00      	nop
      }
      break;
 8013a96:	e004      	b.n	8013aa2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013a98:	6839      	ldr	r1, [r7, #0]
 8013a9a:	6878      	ldr	r0, [r7, #4]
 8013a9c:	f000 fceb 	bl	8014476 <USBD_CtlError>
      break;
 8013aa0:	bf00      	nop
  }

  return ret;
 8013aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8013aa4:	4618      	mov	r0, r3
 8013aa6:	3710      	adds	r7, #16
 8013aa8:	46bd      	mov	sp, r7
 8013aaa:	bd80      	pop	{r7, pc}

08013aac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b084      	sub	sp, #16
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	6078      	str	r0, [r7, #4]
 8013ab4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8013ab6:	2300      	movs	r3, #0
 8013ab8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013aba:	683b      	ldr	r3, [r7, #0]
 8013abc:	889b      	ldrh	r3, [r3, #4]
 8013abe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013ac0:	683b      	ldr	r3, [r7, #0]
 8013ac2:	781b      	ldrb	r3, [r3, #0]
 8013ac4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013ac8:	2b40      	cmp	r3, #64	@ 0x40
 8013aca:	d007      	beq.n	8013adc <USBD_StdEPReq+0x30>
 8013acc:	2b40      	cmp	r3, #64	@ 0x40
 8013ace:	f200 817f 	bhi.w	8013dd0 <USBD_StdEPReq+0x324>
 8013ad2:	2b00      	cmp	r3, #0
 8013ad4:	d02a      	beq.n	8013b2c <USBD_StdEPReq+0x80>
 8013ad6:	2b20      	cmp	r3, #32
 8013ad8:	f040 817a 	bne.w	8013dd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013adc:	7bbb      	ldrb	r3, [r7, #14]
 8013ade:	4619      	mov	r1, r3
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7ff fe85 	bl	80137f0 <USBD_CoreFindEP>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013aea:	7b7b      	ldrb	r3, [r7, #13]
 8013aec:	2bff      	cmp	r3, #255	@ 0xff
 8013aee:	f000 8174 	beq.w	8013dda <USBD_StdEPReq+0x32e>
 8013af2:	7b7b      	ldrb	r3, [r7, #13]
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	f040 8170 	bne.w	8013dda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013afa:	7b7a      	ldrb	r2, [r7, #13]
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8013b02:	7b7a      	ldrb	r2, [r7, #13]
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	32ae      	adds	r2, #174	@ 0xae
 8013b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b0c:	689b      	ldr	r3, [r3, #8]
 8013b0e:	2b00      	cmp	r3, #0
 8013b10:	f000 8163 	beq.w	8013dda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8013b14:	7b7a      	ldrb	r2, [r7, #13]
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	32ae      	adds	r2, #174	@ 0xae
 8013b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013b1e:	689b      	ldr	r3, [r3, #8]
 8013b20:	6839      	ldr	r1, [r7, #0]
 8013b22:	6878      	ldr	r0, [r7, #4]
 8013b24:	4798      	blx	r3
 8013b26:	4603      	mov	r3, r0
 8013b28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013b2a:	e156      	b.n	8013dda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013b2c:	683b      	ldr	r3, [r7, #0]
 8013b2e:	785b      	ldrb	r3, [r3, #1]
 8013b30:	2b03      	cmp	r3, #3
 8013b32:	d008      	beq.n	8013b46 <USBD_StdEPReq+0x9a>
 8013b34:	2b03      	cmp	r3, #3
 8013b36:	f300 8145 	bgt.w	8013dc4 <USBD_StdEPReq+0x318>
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f000 809b 	beq.w	8013c76 <USBD_StdEPReq+0x1ca>
 8013b40:	2b01      	cmp	r3, #1
 8013b42:	d03c      	beq.n	8013bbe <USBD_StdEPReq+0x112>
 8013b44:	e13e      	b.n	8013dc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b4c:	b2db      	uxtb	r3, r3
 8013b4e:	2b02      	cmp	r3, #2
 8013b50:	d002      	beq.n	8013b58 <USBD_StdEPReq+0xac>
 8013b52:	2b03      	cmp	r3, #3
 8013b54:	d016      	beq.n	8013b84 <USBD_StdEPReq+0xd8>
 8013b56:	e02c      	b.n	8013bb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013b58:	7bbb      	ldrb	r3, [r7, #14]
 8013b5a:	2b00      	cmp	r3, #0
 8013b5c:	d00d      	beq.n	8013b7a <USBD_StdEPReq+0xce>
 8013b5e:	7bbb      	ldrb	r3, [r7, #14]
 8013b60:	2b80      	cmp	r3, #128	@ 0x80
 8013b62:	d00a      	beq.n	8013b7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013b64:	7bbb      	ldrb	r3, [r7, #14]
 8013b66:	4619      	mov	r1, r3
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f004 fc93 	bl	8018494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013b6e:	2180      	movs	r1, #128	@ 0x80
 8013b70:	6878      	ldr	r0, [r7, #4]
 8013b72:	f004 fc8f 	bl	8018494 <USBD_LL_StallEP>
 8013b76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013b78:	e020      	b.n	8013bbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8013b7a:	6839      	ldr	r1, [r7, #0]
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	f000 fc7a 	bl	8014476 <USBD_CtlError>
              break;
 8013b82:	e01b      	b.n	8013bbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013b84:	683b      	ldr	r3, [r7, #0]
 8013b86:	885b      	ldrh	r3, [r3, #2]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d10e      	bne.n	8013baa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8013b8c:	7bbb      	ldrb	r3, [r7, #14]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d00b      	beq.n	8013baa <USBD_StdEPReq+0xfe>
 8013b92:	7bbb      	ldrb	r3, [r7, #14]
 8013b94:	2b80      	cmp	r3, #128	@ 0x80
 8013b96:	d008      	beq.n	8013baa <USBD_StdEPReq+0xfe>
 8013b98:	683b      	ldr	r3, [r7, #0]
 8013b9a:	88db      	ldrh	r3, [r3, #6]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d104      	bne.n	8013baa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013ba0:	7bbb      	ldrb	r3, [r7, #14]
 8013ba2:	4619      	mov	r1, r3
 8013ba4:	6878      	ldr	r0, [r7, #4]
 8013ba6:	f004 fc75 	bl	8018494 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013baa:	6878      	ldr	r0, [r7, #4]
 8013bac:	f000 fd3a 	bl	8014624 <USBD_CtlSendStatus>

              break;
 8013bb0:	e004      	b.n	8013bbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8013bb2:	6839      	ldr	r1, [r7, #0]
 8013bb4:	6878      	ldr	r0, [r7, #4]
 8013bb6:	f000 fc5e 	bl	8014476 <USBD_CtlError>
              break;
 8013bba:	bf00      	nop
          }
          break;
 8013bbc:	e107      	b.n	8013dce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013bc4:	b2db      	uxtb	r3, r3
 8013bc6:	2b02      	cmp	r3, #2
 8013bc8:	d002      	beq.n	8013bd0 <USBD_StdEPReq+0x124>
 8013bca:	2b03      	cmp	r3, #3
 8013bcc:	d016      	beq.n	8013bfc <USBD_StdEPReq+0x150>
 8013bce:	e04b      	b.n	8013c68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013bd0:	7bbb      	ldrb	r3, [r7, #14]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	d00d      	beq.n	8013bf2 <USBD_StdEPReq+0x146>
 8013bd6:	7bbb      	ldrb	r3, [r7, #14]
 8013bd8:	2b80      	cmp	r3, #128	@ 0x80
 8013bda:	d00a      	beq.n	8013bf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013bdc:	7bbb      	ldrb	r3, [r7, #14]
 8013bde:	4619      	mov	r1, r3
 8013be0:	6878      	ldr	r0, [r7, #4]
 8013be2:	f004 fc57 	bl	8018494 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8013be6:	2180      	movs	r1, #128	@ 0x80
 8013be8:	6878      	ldr	r0, [r7, #4]
 8013bea:	f004 fc53 	bl	8018494 <USBD_LL_StallEP>
 8013bee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013bf0:	e040      	b.n	8013c74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8013bf2:	6839      	ldr	r1, [r7, #0]
 8013bf4:	6878      	ldr	r0, [r7, #4]
 8013bf6:	f000 fc3e 	bl	8014476 <USBD_CtlError>
              break;
 8013bfa:	e03b      	b.n	8013c74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	885b      	ldrh	r3, [r3, #2]
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d136      	bne.n	8013c72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8013c04:	7bbb      	ldrb	r3, [r7, #14]
 8013c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d004      	beq.n	8013c18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013c0e:	7bbb      	ldrb	r3, [r7, #14]
 8013c10:	4619      	mov	r1, r3
 8013c12:	6878      	ldr	r0, [r7, #4]
 8013c14:	f004 fc5d 	bl	80184d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f000 fd03 	bl	8014624 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013c1e:	7bbb      	ldrb	r3, [r7, #14]
 8013c20:	4619      	mov	r1, r3
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	f7ff fde4 	bl	80137f0 <USBD_CoreFindEP>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013c2c:	7b7b      	ldrb	r3, [r7, #13]
 8013c2e:	2bff      	cmp	r3, #255	@ 0xff
 8013c30:	d01f      	beq.n	8013c72 <USBD_StdEPReq+0x1c6>
 8013c32:	7b7b      	ldrb	r3, [r7, #13]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d11c      	bne.n	8013c72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8013c38:	7b7a      	ldrb	r2, [r7, #13]
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8013c40:	7b7a      	ldrb	r2, [r7, #13]
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	32ae      	adds	r2, #174	@ 0xae
 8013c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c4a:	689b      	ldr	r3, [r3, #8]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d010      	beq.n	8013c72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8013c50:	7b7a      	ldrb	r2, [r7, #13]
 8013c52:	687b      	ldr	r3, [r7, #4]
 8013c54:	32ae      	adds	r2, #174	@ 0xae
 8013c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013c5a:	689b      	ldr	r3, [r3, #8]
 8013c5c:	6839      	ldr	r1, [r7, #0]
 8013c5e:	6878      	ldr	r0, [r7, #4]
 8013c60:	4798      	blx	r3
 8013c62:	4603      	mov	r3, r0
 8013c64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8013c66:	e004      	b.n	8013c72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8013c68:	6839      	ldr	r1, [r7, #0]
 8013c6a:	6878      	ldr	r0, [r7, #4]
 8013c6c:	f000 fc03 	bl	8014476 <USBD_CtlError>
              break;
 8013c70:	e000      	b.n	8013c74 <USBD_StdEPReq+0x1c8>
              break;
 8013c72:	bf00      	nop
          }
          break;
 8013c74:	e0ab      	b.n	8013dce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8013c76:	687b      	ldr	r3, [r7, #4]
 8013c78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013c7c:	b2db      	uxtb	r3, r3
 8013c7e:	2b02      	cmp	r3, #2
 8013c80:	d002      	beq.n	8013c88 <USBD_StdEPReq+0x1dc>
 8013c82:	2b03      	cmp	r3, #3
 8013c84:	d032      	beq.n	8013cec <USBD_StdEPReq+0x240>
 8013c86:	e097      	b.n	8013db8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013c88:	7bbb      	ldrb	r3, [r7, #14]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d007      	beq.n	8013c9e <USBD_StdEPReq+0x1f2>
 8013c8e:	7bbb      	ldrb	r3, [r7, #14]
 8013c90:	2b80      	cmp	r3, #128	@ 0x80
 8013c92:	d004      	beq.n	8013c9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8013c94:	6839      	ldr	r1, [r7, #0]
 8013c96:	6878      	ldr	r0, [r7, #4]
 8013c98:	f000 fbed 	bl	8014476 <USBD_CtlError>
                break;
 8013c9c:	e091      	b.n	8013dc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013c9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	da0b      	bge.n	8013cbe <USBD_StdEPReq+0x212>
 8013ca6:	7bbb      	ldrb	r3, [r7, #14]
 8013ca8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013cac:	4613      	mov	r3, r2
 8013cae:	009b      	lsls	r3, r3, #2
 8013cb0:	4413      	add	r3, r2
 8013cb2:	009b      	lsls	r3, r3, #2
 8013cb4:	3310      	adds	r3, #16
 8013cb6:	687a      	ldr	r2, [r7, #4]
 8013cb8:	4413      	add	r3, r2
 8013cba:	3304      	adds	r3, #4
 8013cbc:	e00b      	b.n	8013cd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013cbe:	7bbb      	ldrb	r3, [r7, #14]
 8013cc0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013cc4:	4613      	mov	r3, r2
 8013cc6:	009b      	lsls	r3, r3, #2
 8013cc8:	4413      	add	r3, r2
 8013cca:	009b      	lsls	r3, r3, #2
 8013ccc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013cd0:	687a      	ldr	r2, [r7, #4]
 8013cd2:	4413      	add	r3, r2
 8013cd4:	3304      	adds	r3, #4
 8013cd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013cd8:	68bb      	ldr	r3, [r7, #8]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013cde:	68bb      	ldr	r3, [r7, #8]
 8013ce0:	2202      	movs	r2, #2
 8013ce2:	4619      	mov	r1, r3
 8013ce4:	6878      	ldr	r0, [r7, #4]
 8013ce6:	f000 fc43 	bl	8014570 <USBD_CtlSendData>
              break;
 8013cea:	e06a      	b.n	8013dc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	da11      	bge.n	8013d18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8013cf4:	7bbb      	ldrb	r3, [r7, #14]
 8013cf6:	f003 020f 	and.w	r2, r3, #15
 8013cfa:	6879      	ldr	r1, [r7, #4]
 8013cfc:	4613      	mov	r3, r2
 8013cfe:	009b      	lsls	r3, r3, #2
 8013d00:	4413      	add	r3, r2
 8013d02:	009b      	lsls	r3, r3, #2
 8013d04:	440b      	add	r3, r1
 8013d06:	3324      	adds	r3, #36	@ 0x24
 8013d08:	881b      	ldrh	r3, [r3, #0]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d117      	bne.n	8013d3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013d0e:	6839      	ldr	r1, [r7, #0]
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f000 fbb0 	bl	8014476 <USBD_CtlError>
                  break;
 8013d16:	e054      	b.n	8013dc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013d18:	7bbb      	ldrb	r3, [r7, #14]
 8013d1a:	f003 020f 	and.w	r2, r3, #15
 8013d1e:	6879      	ldr	r1, [r7, #4]
 8013d20:	4613      	mov	r3, r2
 8013d22:	009b      	lsls	r3, r3, #2
 8013d24:	4413      	add	r3, r2
 8013d26:	009b      	lsls	r3, r3, #2
 8013d28:	440b      	add	r3, r1
 8013d2a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013d2e:	881b      	ldrh	r3, [r3, #0]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d104      	bne.n	8013d3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013d34:	6839      	ldr	r1, [r7, #0]
 8013d36:	6878      	ldr	r0, [r7, #4]
 8013d38:	f000 fb9d 	bl	8014476 <USBD_CtlError>
                  break;
 8013d3c:	e041      	b.n	8013dc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	da0b      	bge.n	8013d5e <USBD_StdEPReq+0x2b2>
 8013d46:	7bbb      	ldrb	r3, [r7, #14]
 8013d48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013d4c:	4613      	mov	r3, r2
 8013d4e:	009b      	lsls	r3, r3, #2
 8013d50:	4413      	add	r3, r2
 8013d52:	009b      	lsls	r3, r3, #2
 8013d54:	3310      	adds	r3, #16
 8013d56:	687a      	ldr	r2, [r7, #4]
 8013d58:	4413      	add	r3, r2
 8013d5a:	3304      	adds	r3, #4
 8013d5c:	e00b      	b.n	8013d76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013d5e:	7bbb      	ldrb	r3, [r7, #14]
 8013d60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013d64:	4613      	mov	r3, r2
 8013d66:	009b      	lsls	r3, r3, #2
 8013d68:	4413      	add	r3, r2
 8013d6a:	009b      	lsls	r3, r3, #2
 8013d6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013d70:	687a      	ldr	r2, [r7, #4]
 8013d72:	4413      	add	r3, r2
 8013d74:	3304      	adds	r3, #4
 8013d76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8013d78:	7bbb      	ldrb	r3, [r7, #14]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d002      	beq.n	8013d84 <USBD_StdEPReq+0x2d8>
 8013d7e:	7bbb      	ldrb	r3, [r7, #14]
 8013d80:	2b80      	cmp	r3, #128	@ 0x80
 8013d82:	d103      	bne.n	8013d8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	2200      	movs	r2, #0
 8013d88:	601a      	str	r2, [r3, #0]
 8013d8a:	e00e      	b.n	8013daa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8013d8c:	7bbb      	ldrb	r3, [r7, #14]
 8013d8e:	4619      	mov	r1, r3
 8013d90:	6878      	ldr	r0, [r7, #4]
 8013d92:	f004 fbbd 	bl	8018510 <USBD_LL_IsStallEP>
 8013d96:	4603      	mov	r3, r0
 8013d98:	2b00      	cmp	r3, #0
 8013d9a:	d003      	beq.n	8013da4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013d9c:	68bb      	ldr	r3, [r7, #8]
 8013d9e:	2201      	movs	r2, #1
 8013da0:	601a      	str	r2, [r3, #0]
 8013da2:	e002      	b.n	8013daa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8013da4:	68bb      	ldr	r3, [r7, #8]
 8013da6:	2200      	movs	r2, #0
 8013da8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013daa:	68bb      	ldr	r3, [r7, #8]
 8013dac:	2202      	movs	r2, #2
 8013dae:	4619      	mov	r1, r3
 8013db0:	6878      	ldr	r0, [r7, #4]
 8013db2:	f000 fbdd 	bl	8014570 <USBD_CtlSendData>
              break;
 8013db6:	e004      	b.n	8013dc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013db8:	6839      	ldr	r1, [r7, #0]
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f000 fb5b 	bl	8014476 <USBD_CtlError>
              break;
 8013dc0:	bf00      	nop
          }
          break;
 8013dc2:	e004      	b.n	8013dce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8013dc4:	6839      	ldr	r1, [r7, #0]
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f000 fb55 	bl	8014476 <USBD_CtlError>
          break;
 8013dcc:	bf00      	nop
      }
      break;
 8013dce:	e005      	b.n	8013ddc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013dd0:	6839      	ldr	r1, [r7, #0]
 8013dd2:	6878      	ldr	r0, [r7, #4]
 8013dd4:	f000 fb4f 	bl	8014476 <USBD_CtlError>
      break;
 8013dd8:	e000      	b.n	8013ddc <USBD_StdEPReq+0x330>
      break;
 8013dda:	bf00      	nop
  }

  return ret;
 8013ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3710      	adds	r7, #16
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
	...

08013de8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b084      	sub	sp, #16
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
 8013df0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8013df2:	2300      	movs	r3, #0
 8013df4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8013df6:	2300      	movs	r3, #0
 8013df8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013dfe:	683b      	ldr	r3, [r7, #0]
 8013e00:	885b      	ldrh	r3, [r3, #2]
 8013e02:	0a1b      	lsrs	r3, r3, #8
 8013e04:	b29b      	uxth	r3, r3
 8013e06:	3b01      	subs	r3, #1
 8013e08:	2b06      	cmp	r3, #6
 8013e0a:	f200 8128 	bhi.w	801405e <USBD_GetDescriptor+0x276>
 8013e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8013e14 <USBD_GetDescriptor+0x2c>)
 8013e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e14:	08013e31 	.word	0x08013e31
 8013e18:	08013e49 	.word	0x08013e49
 8013e1c:	08013e89 	.word	0x08013e89
 8013e20:	0801405f 	.word	0x0801405f
 8013e24:	0801405f 	.word	0x0801405f
 8013e28:	08013fff 	.word	0x08013fff
 8013e2c:	0801402b 	.word	0x0801402b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	687a      	ldr	r2, [r7, #4]
 8013e3a:	7c12      	ldrb	r2, [r2, #16]
 8013e3c:	f107 0108 	add.w	r1, r7, #8
 8013e40:	4610      	mov	r0, r2
 8013e42:	4798      	blx	r3
 8013e44:	60f8      	str	r0, [r7, #12]
      break;
 8013e46:	e112      	b.n	801406e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	7c1b      	ldrb	r3, [r3, #16]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	d10d      	bne.n	8013e6c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013e58:	f107 0208 	add.w	r2, r7, #8
 8013e5c:	4610      	mov	r0, r2
 8013e5e:	4798      	blx	r3
 8013e60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013e62:	68fb      	ldr	r3, [r7, #12]
 8013e64:	3301      	adds	r3, #1
 8013e66:	2202      	movs	r2, #2
 8013e68:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8013e6a:	e100      	b.n	801406e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013e74:	f107 0208 	add.w	r2, r7, #8
 8013e78:	4610      	mov	r0, r2
 8013e7a:	4798      	blx	r3
 8013e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	3301      	adds	r3, #1
 8013e82:	2202      	movs	r2, #2
 8013e84:	701a      	strb	r2, [r3, #0]
      break;
 8013e86:	e0f2      	b.n	801406e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	885b      	ldrh	r3, [r3, #2]
 8013e8c:	b2db      	uxtb	r3, r3
 8013e8e:	2b05      	cmp	r3, #5
 8013e90:	f200 80ac 	bhi.w	8013fec <USBD_GetDescriptor+0x204>
 8013e94:	a201      	add	r2, pc, #4	@ (adr r2, 8013e9c <USBD_GetDescriptor+0xb4>)
 8013e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e9a:	bf00      	nop
 8013e9c:	08013eb5 	.word	0x08013eb5
 8013ea0:	08013ee9 	.word	0x08013ee9
 8013ea4:	08013f1d 	.word	0x08013f1d
 8013ea8:	08013f51 	.word	0x08013f51
 8013eac:	08013f85 	.word	0x08013f85
 8013eb0:	08013fb9 	.word	0x08013fb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013eba:	685b      	ldr	r3, [r3, #4]
 8013ebc:	2b00      	cmp	r3, #0
 8013ebe:	d00b      	beq.n	8013ed8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013ec6:	685b      	ldr	r3, [r3, #4]
 8013ec8:	687a      	ldr	r2, [r7, #4]
 8013eca:	7c12      	ldrb	r2, [r2, #16]
 8013ecc:	f107 0108 	add.w	r1, r7, #8
 8013ed0:	4610      	mov	r0, r2
 8013ed2:	4798      	blx	r3
 8013ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013ed6:	e091      	b.n	8013ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013ed8:	6839      	ldr	r1, [r7, #0]
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f000 facb 	bl	8014476 <USBD_CtlError>
            err++;
 8013ee0:	7afb      	ldrb	r3, [r7, #11]
 8013ee2:	3301      	adds	r3, #1
 8013ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8013ee6:	e089      	b.n	8013ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013ee8:	687b      	ldr	r3, [r7, #4]
 8013eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013eee:	689b      	ldr	r3, [r3, #8]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	d00b      	beq.n	8013f0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8013ef4:	687b      	ldr	r3, [r7, #4]
 8013ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013efa:	689b      	ldr	r3, [r3, #8]
 8013efc:	687a      	ldr	r2, [r7, #4]
 8013efe:	7c12      	ldrb	r2, [r2, #16]
 8013f00:	f107 0108 	add.w	r1, r7, #8
 8013f04:	4610      	mov	r0, r2
 8013f06:	4798      	blx	r3
 8013f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f0a:	e077      	b.n	8013ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013f0c:	6839      	ldr	r1, [r7, #0]
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f000 fab1 	bl	8014476 <USBD_CtlError>
            err++;
 8013f14:	7afb      	ldrb	r3, [r7, #11]
 8013f16:	3301      	adds	r3, #1
 8013f18:	72fb      	strb	r3, [r7, #11]
          break;
 8013f1a:	e06f      	b.n	8013ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	2b00      	cmp	r3, #0
 8013f26:	d00b      	beq.n	8013f40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f2e:	68db      	ldr	r3, [r3, #12]
 8013f30:	687a      	ldr	r2, [r7, #4]
 8013f32:	7c12      	ldrb	r2, [r2, #16]
 8013f34:	f107 0108 	add.w	r1, r7, #8
 8013f38:	4610      	mov	r0, r2
 8013f3a:	4798      	blx	r3
 8013f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f3e:	e05d      	b.n	8013ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013f40:	6839      	ldr	r1, [r7, #0]
 8013f42:	6878      	ldr	r0, [r7, #4]
 8013f44:	f000 fa97 	bl	8014476 <USBD_CtlError>
            err++;
 8013f48:	7afb      	ldrb	r3, [r7, #11]
 8013f4a:	3301      	adds	r3, #1
 8013f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8013f4e:	e055      	b.n	8013ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f56:	691b      	ldr	r3, [r3, #16]
 8013f58:	2b00      	cmp	r3, #0
 8013f5a:	d00b      	beq.n	8013f74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f62:	691b      	ldr	r3, [r3, #16]
 8013f64:	687a      	ldr	r2, [r7, #4]
 8013f66:	7c12      	ldrb	r2, [r2, #16]
 8013f68:	f107 0108 	add.w	r1, r7, #8
 8013f6c:	4610      	mov	r0, r2
 8013f6e:	4798      	blx	r3
 8013f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013f72:	e043      	b.n	8013ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013f74:	6839      	ldr	r1, [r7, #0]
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f000 fa7d 	bl	8014476 <USBD_CtlError>
            err++;
 8013f7c:	7afb      	ldrb	r3, [r7, #11]
 8013f7e:	3301      	adds	r3, #1
 8013f80:	72fb      	strb	r3, [r7, #11]
          break;
 8013f82:	e03b      	b.n	8013ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f8a:	695b      	ldr	r3, [r3, #20]
 8013f8c:	2b00      	cmp	r3, #0
 8013f8e:	d00b      	beq.n	8013fa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013f96:	695b      	ldr	r3, [r3, #20]
 8013f98:	687a      	ldr	r2, [r7, #4]
 8013f9a:	7c12      	ldrb	r2, [r2, #16]
 8013f9c:	f107 0108 	add.w	r1, r7, #8
 8013fa0:	4610      	mov	r0, r2
 8013fa2:	4798      	blx	r3
 8013fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013fa6:	e029      	b.n	8013ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013fa8:	6839      	ldr	r1, [r7, #0]
 8013faa:	6878      	ldr	r0, [r7, #4]
 8013fac:	f000 fa63 	bl	8014476 <USBD_CtlError>
            err++;
 8013fb0:	7afb      	ldrb	r3, [r7, #11]
 8013fb2:	3301      	adds	r3, #1
 8013fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8013fb6:	e021      	b.n	8013ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013fbe:	699b      	ldr	r3, [r3, #24]
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d00b      	beq.n	8013fdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013fca:	699b      	ldr	r3, [r3, #24]
 8013fcc:	687a      	ldr	r2, [r7, #4]
 8013fce:	7c12      	ldrb	r2, [r2, #16]
 8013fd0:	f107 0108 	add.w	r1, r7, #8
 8013fd4:	4610      	mov	r0, r2
 8013fd6:	4798      	blx	r3
 8013fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013fda:	e00f      	b.n	8013ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013fdc:	6839      	ldr	r1, [r7, #0]
 8013fde:	6878      	ldr	r0, [r7, #4]
 8013fe0:	f000 fa49 	bl	8014476 <USBD_CtlError>
            err++;
 8013fe4:	7afb      	ldrb	r3, [r7, #11]
 8013fe6:	3301      	adds	r3, #1
 8013fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8013fea:	e007      	b.n	8013ffc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013fec:	6839      	ldr	r1, [r7, #0]
 8013fee:	6878      	ldr	r0, [r7, #4]
 8013ff0:	f000 fa41 	bl	8014476 <USBD_CtlError>
          err++;
 8013ff4:	7afb      	ldrb	r3, [r7, #11]
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013ffa:	bf00      	nop
      }
      break;
 8013ffc:	e037      	b.n	801406e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	7c1b      	ldrb	r3, [r3, #16]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d109      	bne.n	801401a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801400c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801400e:	f107 0208 	add.w	r2, r7, #8
 8014012:	4610      	mov	r0, r2
 8014014:	4798      	blx	r3
 8014016:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014018:	e029      	b.n	801406e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801401a:	6839      	ldr	r1, [r7, #0]
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f000 fa2a 	bl	8014476 <USBD_CtlError>
        err++;
 8014022:	7afb      	ldrb	r3, [r7, #11]
 8014024:	3301      	adds	r3, #1
 8014026:	72fb      	strb	r3, [r7, #11]
      break;
 8014028:	e021      	b.n	801406e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	7c1b      	ldrb	r3, [r3, #16]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d10d      	bne.n	801404e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8014038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801403a:	f107 0208 	add.w	r2, r7, #8
 801403e:	4610      	mov	r0, r2
 8014040:	4798      	blx	r3
 8014042:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014044:	68fb      	ldr	r3, [r7, #12]
 8014046:	3301      	adds	r3, #1
 8014048:	2207      	movs	r2, #7
 801404a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801404c:	e00f      	b.n	801406e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 801404e:	6839      	ldr	r1, [r7, #0]
 8014050:	6878      	ldr	r0, [r7, #4]
 8014052:	f000 fa10 	bl	8014476 <USBD_CtlError>
        err++;
 8014056:	7afb      	ldrb	r3, [r7, #11]
 8014058:	3301      	adds	r3, #1
 801405a:	72fb      	strb	r3, [r7, #11]
      break;
 801405c:	e007      	b.n	801406e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801405e:	6839      	ldr	r1, [r7, #0]
 8014060:	6878      	ldr	r0, [r7, #4]
 8014062:	f000 fa08 	bl	8014476 <USBD_CtlError>
      err++;
 8014066:	7afb      	ldrb	r3, [r7, #11]
 8014068:	3301      	adds	r3, #1
 801406a:	72fb      	strb	r3, [r7, #11]
      break;
 801406c:	bf00      	nop
  }

  if (err != 0U)
 801406e:	7afb      	ldrb	r3, [r7, #11]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d11e      	bne.n	80140b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	88db      	ldrh	r3, [r3, #6]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d016      	beq.n	80140aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 801407c:	893b      	ldrh	r3, [r7, #8]
 801407e:	2b00      	cmp	r3, #0
 8014080:	d00e      	beq.n	80140a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	88da      	ldrh	r2, [r3, #6]
 8014086:	893b      	ldrh	r3, [r7, #8]
 8014088:	4293      	cmp	r3, r2
 801408a:	bf28      	it	cs
 801408c:	4613      	movcs	r3, r2
 801408e:	b29b      	uxth	r3, r3
 8014090:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014092:	893b      	ldrh	r3, [r7, #8]
 8014094:	461a      	mov	r2, r3
 8014096:	68f9      	ldr	r1, [r7, #12]
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f000 fa69 	bl	8014570 <USBD_CtlSendData>
 801409e:	e009      	b.n	80140b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80140a0:	6839      	ldr	r1, [r7, #0]
 80140a2:	6878      	ldr	r0, [r7, #4]
 80140a4:	f000 f9e7 	bl	8014476 <USBD_CtlError>
 80140a8:	e004      	b.n	80140b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80140aa:	6878      	ldr	r0, [r7, #4]
 80140ac:	f000 faba 	bl	8014624 <USBD_CtlSendStatus>
 80140b0:	e000      	b.n	80140b4 <USBD_GetDescriptor+0x2cc>
    return;
 80140b2:	bf00      	nop
  }
}
 80140b4:	3710      	adds	r7, #16
 80140b6:	46bd      	mov	sp, r7
 80140b8:	bd80      	pop	{r7, pc}
 80140ba:	bf00      	nop

080140bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b084      	sub	sp, #16
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
 80140c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80140c6:	683b      	ldr	r3, [r7, #0]
 80140c8:	889b      	ldrh	r3, [r3, #4]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d131      	bne.n	8014132 <USBD_SetAddress+0x76>
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	88db      	ldrh	r3, [r3, #6]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d12d      	bne.n	8014132 <USBD_SetAddress+0x76>
 80140d6:	683b      	ldr	r3, [r7, #0]
 80140d8:	885b      	ldrh	r3, [r3, #2]
 80140da:	2b7f      	cmp	r3, #127	@ 0x7f
 80140dc:	d829      	bhi.n	8014132 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	885b      	ldrh	r3, [r3, #2]
 80140e2:	b2db      	uxtb	r3, r3
 80140e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80140e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140ea:	687b      	ldr	r3, [r7, #4]
 80140ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80140f0:	b2db      	uxtb	r3, r3
 80140f2:	2b03      	cmp	r3, #3
 80140f4:	d104      	bne.n	8014100 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80140f6:	6839      	ldr	r1, [r7, #0]
 80140f8:	6878      	ldr	r0, [r7, #4]
 80140fa:	f000 f9bc 	bl	8014476 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140fe:	e01d      	b.n	801413c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	7bfa      	ldrb	r2, [r7, #15]
 8014104:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014108:	7bfb      	ldrb	r3, [r7, #15]
 801410a:	4619      	mov	r1, r3
 801410c:	6878      	ldr	r0, [r7, #4]
 801410e:	f004 fa2b 	bl	8018568 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8014112:	6878      	ldr	r0, [r7, #4]
 8014114:	f000 fa86 	bl	8014624 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014118:	7bfb      	ldrb	r3, [r7, #15]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d004      	beq.n	8014128 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801411e:	687b      	ldr	r3, [r7, #4]
 8014120:	2202      	movs	r2, #2
 8014122:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014126:	e009      	b.n	801413c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014128:	687b      	ldr	r3, [r7, #4]
 801412a:	2201      	movs	r2, #1
 801412c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014130:	e004      	b.n	801413c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014132:	6839      	ldr	r1, [r7, #0]
 8014134:	6878      	ldr	r0, [r7, #4]
 8014136:	f000 f99e 	bl	8014476 <USBD_CtlError>
  }
}
 801413a:	bf00      	nop
 801413c:	bf00      	nop
 801413e:	3710      	adds	r7, #16
 8014140:	46bd      	mov	sp, r7
 8014142:	bd80      	pop	{r7, pc}

08014144 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014144:	b580      	push	{r7, lr}
 8014146:	b084      	sub	sp, #16
 8014148:	af00      	add	r7, sp, #0
 801414a:	6078      	str	r0, [r7, #4]
 801414c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801414e:	2300      	movs	r3, #0
 8014150:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014152:	683b      	ldr	r3, [r7, #0]
 8014154:	885b      	ldrh	r3, [r3, #2]
 8014156:	b2da      	uxtb	r2, r3
 8014158:	4b4e      	ldr	r3, [pc, #312]	@ (8014294 <USBD_SetConfig+0x150>)
 801415a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 801415c:	4b4d      	ldr	r3, [pc, #308]	@ (8014294 <USBD_SetConfig+0x150>)
 801415e:	781b      	ldrb	r3, [r3, #0]
 8014160:	2b01      	cmp	r3, #1
 8014162:	d905      	bls.n	8014170 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8014164:	6839      	ldr	r1, [r7, #0]
 8014166:	6878      	ldr	r0, [r7, #4]
 8014168:	f000 f985 	bl	8014476 <USBD_CtlError>
    return USBD_FAIL;
 801416c:	2303      	movs	r3, #3
 801416e:	e08c      	b.n	801428a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014176:	b2db      	uxtb	r3, r3
 8014178:	2b02      	cmp	r3, #2
 801417a:	d002      	beq.n	8014182 <USBD_SetConfig+0x3e>
 801417c:	2b03      	cmp	r3, #3
 801417e:	d029      	beq.n	80141d4 <USBD_SetConfig+0x90>
 8014180:	e075      	b.n	801426e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8014182:	4b44      	ldr	r3, [pc, #272]	@ (8014294 <USBD_SetConfig+0x150>)
 8014184:	781b      	ldrb	r3, [r3, #0]
 8014186:	2b00      	cmp	r3, #0
 8014188:	d020      	beq.n	80141cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801418a:	4b42      	ldr	r3, [pc, #264]	@ (8014294 <USBD_SetConfig+0x150>)
 801418c:	781b      	ldrb	r3, [r3, #0]
 801418e:	461a      	mov	r2, r3
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014194:	4b3f      	ldr	r3, [pc, #252]	@ (8014294 <USBD_SetConfig+0x150>)
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	4619      	mov	r1, r3
 801419a:	6878      	ldr	r0, [r7, #4]
 801419c:	f7fe ffe3 	bl	8013166 <USBD_SetClassConfig>
 80141a0:	4603      	mov	r3, r0
 80141a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80141a4:	7bfb      	ldrb	r3, [r7, #15]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d008      	beq.n	80141bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80141aa:	6839      	ldr	r1, [r7, #0]
 80141ac:	6878      	ldr	r0, [r7, #4]
 80141ae:	f000 f962 	bl	8014476 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	2202      	movs	r2, #2
 80141b6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80141ba:	e065      	b.n	8014288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80141bc:	6878      	ldr	r0, [r7, #4]
 80141be:	f000 fa31 	bl	8014624 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	2203      	movs	r2, #3
 80141c6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80141ca:	e05d      	b.n	8014288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80141cc:	6878      	ldr	r0, [r7, #4]
 80141ce:	f000 fa29 	bl	8014624 <USBD_CtlSendStatus>
      break;
 80141d2:	e059      	b.n	8014288 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80141d4:	4b2f      	ldr	r3, [pc, #188]	@ (8014294 <USBD_SetConfig+0x150>)
 80141d6:	781b      	ldrb	r3, [r3, #0]
 80141d8:	2b00      	cmp	r3, #0
 80141da:	d112      	bne.n	8014202 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	2202      	movs	r2, #2
 80141e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80141e4:	4b2b      	ldr	r3, [pc, #172]	@ (8014294 <USBD_SetConfig+0x150>)
 80141e6:	781b      	ldrb	r3, [r3, #0]
 80141e8:	461a      	mov	r2, r3
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80141ee:	4b29      	ldr	r3, [pc, #164]	@ (8014294 <USBD_SetConfig+0x150>)
 80141f0:	781b      	ldrb	r3, [r3, #0]
 80141f2:	4619      	mov	r1, r3
 80141f4:	6878      	ldr	r0, [r7, #4]
 80141f6:	f7fe ffd2 	bl	801319e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80141fa:	6878      	ldr	r0, [r7, #4]
 80141fc:	f000 fa12 	bl	8014624 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8014200:	e042      	b.n	8014288 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8014202:	4b24      	ldr	r3, [pc, #144]	@ (8014294 <USBD_SetConfig+0x150>)
 8014204:	781b      	ldrb	r3, [r3, #0]
 8014206:	461a      	mov	r2, r3
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	685b      	ldr	r3, [r3, #4]
 801420c:	429a      	cmp	r2, r3
 801420e:	d02a      	beq.n	8014266 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	685b      	ldr	r3, [r3, #4]
 8014214:	b2db      	uxtb	r3, r3
 8014216:	4619      	mov	r1, r3
 8014218:	6878      	ldr	r0, [r7, #4]
 801421a:	f7fe ffc0 	bl	801319e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 801421e:	4b1d      	ldr	r3, [pc, #116]	@ (8014294 <USBD_SetConfig+0x150>)
 8014220:	781b      	ldrb	r3, [r3, #0]
 8014222:	461a      	mov	r2, r3
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8014228:	4b1a      	ldr	r3, [pc, #104]	@ (8014294 <USBD_SetConfig+0x150>)
 801422a:	781b      	ldrb	r3, [r3, #0]
 801422c:	4619      	mov	r1, r3
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f7fe ff99 	bl	8013166 <USBD_SetClassConfig>
 8014234:	4603      	mov	r3, r0
 8014236:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8014238:	7bfb      	ldrb	r3, [r7, #15]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d00f      	beq.n	801425e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 801423e:	6839      	ldr	r1, [r7, #0]
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f000 f918 	bl	8014476 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	685b      	ldr	r3, [r3, #4]
 801424a:	b2db      	uxtb	r3, r3
 801424c:	4619      	mov	r1, r3
 801424e:	6878      	ldr	r0, [r7, #4]
 8014250:	f7fe ffa5 	bl	801319e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	2202      	movs	r2, #2
 8014258:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 801425c:	e014      	b.n	8014288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801425e:	6878      	ldr	r0, [r7, #4]
 8014260:	f000 f9e0 	bl	8014624 <USBD_CtlSendStatus>
      break;
 8014264:	e010      	b.n	8014288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8014266:	6878      	ldr	r0, [r7, #4]
 8014268:	f000 f9dc 	bl	8014624 <USBD_CtlSendStatus>
      break;
 801426c:	e00c      	b.n	8014288 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801426e:	6839      	ldr	r1, [r7, #0]
 8014270:	6878      	ldr	r0, [r7, #4]
 8014272:	f000 f900 	bl	8014476 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8014276:	4b07      	ldr	r3, [pc, #28]	@ (8014294 <USBD_SetConfig+0x150>)
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	4619      	mov	r1, r3
 801427c:	6878      	ldr	r0, [r7, #4]
 801427e:	f7fe ff8e 	bl	801319e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8014282:	2303      	movs	r3, #3
 8014284:	73fb      	strb	r3, [r7, #15]
      break;
 8014286:	bf00      	nop
  }

  return ret;
 8014288:	7bfb      	ldrb	r3, [r7, #15]
}
 801428a:	4618      	mov	r0, r3
 801428c:	3710      	adds	r7, #16
 801428e:	46bd      	mov	sp, r7
 8014290:	bd80      	pop	{r7, pc}
 8014292:	bf00      	nop
 8014294:	2000563c 	.word	0x2000563c

08014298 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014298:	b580      	push	{r7, lr}
 801429a:	b082      	sub	sp, #8
 801429c:	af00      	add	r7, sp, #0
 801429e:	6078      	str	r0, [r7, #4]
 80142a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	88db      	ldrh	r3, [r3, #6]
 80142a6:	2b01      	cmp	r3, #1
 80142a8:	d004      	beq.n	80142b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80142aa:	6839      	ldr	r1, [r7, #0]
 80142ac:	6878      	ldr	r0, [r7, #4]
 80142ae:	f000 f8e2 	bl	8014476 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80142b2:	e023      	b.n	80142fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80142ba:	b2db      	uxtb	r3, r3
 80142bc:	2b02      	cmp	r3, #2
 80142be:	dc02      	bgt.n	80142c6 <USBD_GetConfig+0x2e>
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	dc03      	bgt.n	80142cc <USBD_GetConfig+0x34>
 80142c4:	e015      	b.n	80142f2 <USBD_GetConfig+0x5a>
 80142c6:	2b03      	cmp	r3, #3
 80142c8:	d00b      	beq.n	80142e2 <USBD_GetConfig+0x4a>
 80142ca:	e012      	b.n	80142f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	2200      	movs	r2, #0
 80142d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	3308      	adds	r3, #8
 80142d6:	2201      	movs	r2, #1
 80142d8:	4619      	mov	r1, r3
 80142da:	6878      	ldr	r0, [r7, #4]
 80142dc:	f000 f948 	bl	8014570 <USBD_CtlSendData>
        break;
 80142e0:	e00c      	b.n	80142fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	3304      	adds	r3, #4
 80142e6:	2201      	movs	r2, #1
 80142e8:	4619      	mov	r1, r3
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f000 f940 	bl	8014570 <USBD_CtlSendData>
        break;
 80142f0:	e004      	b.n	80142fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80142f2:	6839      	ldr	r1, [r7, #0]
 80142f4:	6878      	ldr	r0, [r7, #4]
 80142f6:	f000 f8be 	bl	8014476 <USBD_CtlError>
        break;
 80142fa:	bf00      	nop
}
 80142fc:	bf00      	nop
 80142fe:	3708      	adds	r7, #8
 8014300:	46bd      	mov	sp, r7
 8014302:	bd80      	pop	{r7, pc}

08014304 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014304:	b580      	push	{r7, lr}
 8014306:	b082      	sub	sp, #8
 8014308:	af00      	add	r7, sp, #0
 801430a:	6078      	str	r0, [r7, #4]
 801430c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8014314:	b2db      	uxtb	r3, r3
 8014316:	3b01      	subs	r3, #1
 8014318:	2b02      	cmp	r3, #2
 801431a:	d81e      	bhi.n	801435a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 801431c:	683b      	ldr	r3, [r7, #0]
 801431e:	88db      	ldrh	r3, [r3, #6]
 8014320:	2b02      	cmp	r3, #2
 8014322:	d004      	beq.n	801432e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8014324:	6839      	ldr	r1, [r7, #0]
 8014326:	6878      	ldr	r0, [r7, #4]
 8014328:	f000 f8a5 	bl	8014476 <USBD_CtlError>
        break;
 801432c:	e01a      	b.n	8014364 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	2201      	movs	r2, #1
 8014332:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801433a:	2b00      	cmp	r3, #0
 801433c:	d005      	beq.n	801434a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	68db      	ldr	r3, [r3, #12]
 8014342:	f043 0202 	orr.w	r2, r3, #2
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	330c      	adds	r3, #12
 801434e:	2202      	movs	r2, #2
 8014350:	4619      	mov	r1, r3
 8014352:	6878      	ldr	r0, [r7, #4]
 8014354:	f000 f90c 	bl	8014570 <USBD_CtlSendData>
      break;
 8014358:	e004      	b.n	8014364 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801435a:	6839      	ldr	r1, [r7, #0]
 801435c:	6878      	ldr	r0, [r7, #4]
 801435e:	f000 f88a 	bl	8014476 <USBD_CtlError>
      break;
 8014362:	bf00      	nop
  }
}
 8014364:	bf00      	nop
 8014366:	3708      	adds	r7, #8
 8014368:	46bd      	mov	sp, r7
 801436a:	bd80      	pop	{r7, pc}

0801436c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b082      	sub	sp, #8
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
 8014374:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014376:	683b      	ldr	r3, [r7, #0]
 8014378:	885b      	ldrh	r3, [r3, #2]
 801437a:	2b01      	cmp	r3, #1
 801437c:	d107      	bne.n	801438e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	2201      	movs	r2, #1
 8014382:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8014386:	6878      	ldr	r0, [r7, #4]
 8014388:	f000 f94c 	bl	8014624 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801438c:	e013      	b.n	80143b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	885b      	ldrh	r3, [r3, #2]
 8014392:	2b02      	cmp	r3, #2
 8014394:	d10b      	bne.n	80143ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8014396:	683b      	ldr	r3, [r7, #0]
 8014398:	889b      	ldrh	r3, [r3, #4]
 801439a:	0a1b      	lsrs	r3, r3, #8
 801439c:	b29b      	uxth	r3, r3
 801439e:	b2da      	uxtb	r2, r3
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80143a6:	6878      	ldr	r0, [r7, #4]
 80143a8:	f000 f93c 	bl	8014624 <USBD_CtlSendStatus>
}
 80143ac:	e003      	b.n	80143b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80143ae:	6839      	ldr	r1, [r7, #0]
 80143b0:	6878      	ldr	r0, [r7, #4]
 80143b2:	f000 f860 	bl	8014476 <USBD_CtlError>
}
 80143b6:	bf00      	nop
 80143b8:	3708      	adds	r7, #8
 80143ba:	46bd      	mov	sp, r7
 80143bc:	bd80      	pop	{r7, pc}

080143be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80143be:	b580      	push	{r7, lr}
 80143c0:	b082      	sub	sp, #8
 80143c2:	af00      	add	r7, sp, #0
 80143c4:	6078      	str	r0, [r7, #4]
 80143c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80143ce:	b2db      	uxtb	r3, r3
 80143d0:	3b01      	subs	r3, #1
 80143d2:	2b02      	cmp	r3, #2
 80143d4:	d80b      	bhi.n	80143ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80143d6:	683b      	ldr	r3, [r7, #0]
 80143d8:	885b      	ldrh	r3, [r3, #2]
 80143da:	2b01      	cmp	r3, #1
 80143dc:	d10c      	bne.n	80143f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	2200      	movs	r2, #0
 80143e2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80143e6:	6878      	ldr	r0, [r7, #4]
 80143e8:	f000 f91c 	bl	8014624 <USBD_CtlSendStatus>
      }
      break;
 80143ec:	e004      	b.n	80143f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80143ee:	6839      	ldr	r1, [r7, #0]
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f000 f840 	bl	8014476 <USBD_CtlError>
      break;
 80143f6:	e000      	b.n	80143fa <USBD_ClrFeature+0x3c>
      break;
 80143f8:	bf00      	nop
  }
}
 80143fa:	bf00      	nop
 80143fc:	3708      	adds	r7, #8
 80143fe:	46bd      	mov	sp, r7
 8014400:	bd80      	pop	{r7, pc}

08014402 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014402:	b580      	push	{r7, lr}
 8014404:	b084      	sub	sp, #16
 8014406:	af00      	add	r7, sp, #0
 8014408:	6078      	str	r0, [r7, #4]
 801440a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	781a      	ldrb	r2, [r3, #0]
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8014418:	68fb      	ldr	r3, [r7, #12]
 801441a:	3301      	adds	r3, #1
 801441c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 801441e:	68fb      	ldr	r3, [r7, #12]
 8014420:	781a      	ldrb	r2, [r3, #0]
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	3301      	adds	r3, #1
 801442a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 801442c:	68f8      	ldr	r0, [r7, #12]
 801442e:	f7ff fa40 	bl	80138b2 <SWAPBYTE>
 8014432:	4603      	mov	r3, r0
 8014434:	461a      	mov	r2, r3
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801443a:	68fb      	ldr	r3, [r7, #12]
 801443c:	3301      	adds	r3, #1
 801443e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8014440:	68fb      	ldr	r3, [r7, #12]
 8014442:	3301      	adds	r3, #1
 8014444:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8014446:	68f8      	ldr	r0, [r7, #12]
 8014448:	f7ff fa33 	bl	80138b2 <SWAPBYTE>
 801444c:	4603      	mov	r3, r0
 801444e:	461a      	mov	r2, r3
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8014454:	68fb      	ldr	r3, [r7, #12]
 8014456:	3301      	adds	r3, #1
 8014458:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801445a:	68fb      	ldr	r3, [r7, #12]
 801445c:	3301      	adds	r3, #1
 801445e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8014460:	68f8      	ldr	r0, [r7, #12]
 8014462:	f7ff fa26 	bl	80138b2 <SWAPBYTE>
 8014466:	4603      	mov	r3, r0
 8014468:	461a      	mov	r2, r3
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	80da      	strh	r2, [r3, #6]
}
 801446e:	bf00      	nop
 8014470:	3710      	adds	r7, #16
 8014472:	46bd      	mov	sp, r7
 8014474:	bd80      	pop	{r7, pc}

08014476 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014476:	b580      	push	{r7, lr}
 8014478:	b082      	sub	sp, #8
 801447a:	af00      	add	r7, sp, #0
 801447c:	6078      	str	r0, [r7, #4]
 801447e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8014480:	2180      	movs	r1, #128	@ 0x80
 8014482:	6878      	ldr	r0, [r7, #4]
 8014484:	f004 f806 	bl	8018494 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8014488:	2100      	movs	r1, #0
 801448a:	6878      	ldr	r0, [r7, #4]
 801448c:	f004 f802 	bl	8018494 <USBD_LL_StallEP>
}
 8014490:	bf00      	nop
 8014492:	3708      	adds	r7, #8
 8014494:	46bd      	mov	sp, r7
 8014496:	bd80      	pop	{r7, pc}

08014498 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014498:	b580      	push	{r7, lr}
 801449a:	b086      	sub	sp, #24
 801449c:	af00      	add	r7, sp, #0
 801449e:	60f8      	str	r0, [r7, #12]
 80144a0:	60b9      	str	r1, [r7, #8]
 80144a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80144a4:	2300      	movs	r3, #0
 80144a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80144a8:	68fb      	ldr	r3, [r7, #12]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d042      	beq.n	8014534 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80144ae:	68fb      	ldr	r3, [r7, #12]
 80144b0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80144b2:	6938      	ldr	r0, [r7, #16]
 80144b4:	f000 f842 	bl	801453c <USBD_GetLen>
 80144b8:	4603      	mov	r3, r0
 80144ba:	3301      	adds	r3, #1
 80144bc:	005b      	lsls	r3, r3, #1
 80144be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80144c2:	d808      	bhi.n	80144d6 <USBD_GetString+0x3e>
 80144c4:	6938      	ldr	r0, [r7, #16]
 80144c6:	f000 f839 	bl	801453c <USBD_GetLen>
 80144ca:	4603      	mov	r3, r0
 80144cc:	3301      	adds	r3, #1
 80144ce:	b29b      	uxth	r3, r3
 80144d0:	005b      	lsls	r3, r3, #1
 80144d2:	b29a      	uxth	r2, r3
 80144d4:	e001      	b.n	80144da <USBD_GetString+0x42>
 80144d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80144da:	687b      	ldr	r3, [r7, #4]
 80144dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80144de:	7dfb      	ldrb	r3, [r7, #23]
 80144e0:	68ba      	ldr	r2, [r7, #8]
 80144e2:	4413      	add	r3, r2
 80144e4:	687a      	ldr	r2, [r7, #4]
 80144e6:	7812      	ldrb	r2, [r2, #0]
 80144e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80144ea:	7dfb      	ldrb	r3, [r7, #23]
 80144ec:	3301      	adds	r3, #1
 80144ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80144f0:	7dfb      	ldrb	r3, [r7, #23]
 80144f2:	68ba      	ldr	r2, [r7, #8]
 80144f4:	4413      	add	r3, r2
 80144f6:	2203      	movs	r2, #3
 80144f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80144fa:	7dfb      	ldrb	r3, [r7, #23]
 80144fc:	3301      	adds	r3, #1
 80144fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8014500:	e013      	b.n	801452a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8014502:	7dfb      	ldrb	r3, [r7, #23]
 8014504:	68ba      	ldr	r2, [r7, #8]
 8014506:	4413      	add	r3, r2
 8014508:	693a      	ldr	r2, [r7, #16]
 801450a:	7812      	ldrb	r2, [r2, #0]
 801450c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801450e:	693b      	ldr	r3, [r7, #16]
 8014510:	3301      	adds	r3, #1
 8014512:	613b      	str	r3, [r7, #16]
    idx++;
 8014514:	7dfb      	ldrb	r3, [r7, #23]
 8014516:	3301      	adds	r3, #1
 8014518:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801451a:	7dfb      	ldrb	r3, [r7, #23]
 801451c:	68ba      	ldr	r2, [r7, #8]
 801451e:	4413      	add	r3, r2
 8014520:	2200      	movs	r2, #0
 8014522:	701a      	strb	r2, [r3, #0]
    idx++;
 8014524:	7dfb      	ldrb	r3, [r7, #23]
 8014526:	3301      	adds	r3, #1
 8014528:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801452a:	693b      	ldr	r3, [r7, #16]
 801452c:	781b      	ldrb	r3, [r3, #0]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d1e7      	bne.n	8014502 <USBD_GetString+0x6a>
 8014532:	e000      	b.n	8014536 <USBD_GetString+0x9e>
    return;
 8014534:	bf00      	nop
  }
}
 8014536:	3718      	adds	r7, #24
 8014538:	46bd      	mov	sp, r7
 801453a:	bd80      	pop	{r7, pc}

0801453c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 801453c:	b480      	push	{r7}
 801453e:	b085      	sub	sp, #20
 8014540:	af00      	add	r7, sp, #0
 8014542:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8014544:	2300      	movs	r3, #0
 8014546:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 801454c:	e005      	b.n	801455a <USBD_GetLen+0x1e>
  {
    len++;
 801454e:	7bfb      	ldrb	r3, [r7, #15]
 8014550:	3301      	adds	r3, #1
 8014552:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8014554:	68bb      	ldr	r3, [r7, #8]
 8014556:	3301      	adds	r3, #1
 8014558:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	781b      	ldrb	r3, [r3, #0]
 801455e:	2b00      	cmp	r3, #0
 8014560:	d1f5      	bne.n	801454e <USBD_GetLen+0x12>
  }

  return len;
 8014562:	7bfb      	ldrb	r3, [r7, #15]
}
 8014564:	4618      	mov	r0, r3
 8014566:	3714      	adds	r7, #20
 8014568:	46bd      	mov	sp, r7
 801456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801456e:	4770      	bx	lr

08014570 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8014570:	b580      	push	{r7, lr}
 8014572:	b084      	sub	sp, #16
 8014574:	af00      	add	r7, sp, #0
 8014576:	60f8      	str	r0, [r7, #12]
 8014578:	60b9      	str	r1, [r7, #8]
 801457a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2202      	movs	r2, #2
 8014580:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	687a      	ldr	r2, [r7, #4]
 8014588:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	68ba      	ldr	r2, [r7, #8]
 8014594:	2100      	movs	r1, #0
 8014596:	68f8      	ldr	r0, [r7, #12]
 8014598:	f004 f805 	bl	80185a6 <USBD_LL_Transmit>

  return USBD_OK;
 801459c:	2300      	movs	r3, #0
}
 801459e:	4618      	mov	r0, r3
 80145a0:	3710      	adds	r7, #16
 80145a2:	46bd      	mov	sp, r7
 80145a4:	bd80      	pop	{r7, pc}

080145a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80145a6:	b580      	push	{r7, lr}
 80145a8:	b084      	sub	sp, #16
 80145aa:	af00      	add	r7, sp, #0
 80145ac:	60f8      	str	r0, [r7, #12]
 80145ae:	60b9      	str	r1, [r7, #8]
 80145b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	68ba      	ldr	r2, [r7, #8]
 80145b6:	2100      	movs	r1, #0
 80145b8:	68f8      	ldr	r0, [r7, #12]
 80145ba:	f003 fff4 	bl	80185a6 <USBD_LL_Transmit>

  return USBD_OK;
 80145be:	2300      	movs	r3, #0
}
 80145c0:	4618      	mov	r0, r3
 80145c2:	3710      	adds	r7, #16
 80145c4:	46bd      	mov	sp, r7
 80145c6:	bd80      	pop	{r7, pc}

080145c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80145c8:	b580      	push	{r7, lr}
 80145ca:	b084      	sub	sp, #16
 80145cc:	af00      	add	r7, sp, #0
 80145ce:	60f8      	str	r0, [r7, #12]
 80145d0:	60b9      	str	r1, [r7, #8]
 80145d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	2203      	movs	r2, #3
 80145d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	687a      	ldr	r2, [r7, #4]
 80145e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	687a      	ldr	r2, [r7, #4]
 80145e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	68ba      	ldr	r2, [r7, #8]
 80145f0:	2100      	movs	r1, #0
 80145f2:	68f8      	ldr	r0, [r7, #12]
 80145f4:	f003 fff8 	bl	80185e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80145f8:	2300      	movs	r3, #0
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3710      	adds	r7, #16
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}

08014602 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8014602:	b580      	push	{r7, lr}
 8014604:	b084      	sub	sp, #16
 8014606:	af00      	add	r7, sp, #0
 8014608:	60f8      	str	r0, [r7, #12]
 801460a:	60b9      	str	r1, [r7, #8]
 801460c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	68ba      	ldr	r2, [r7, #8]
 8014612:	2100      	movs	r1, #0
 8014614:	68f8      	ldr	r0, [r7, #12]
 8014616:	f003 ffe7 	bl	80185e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801461a:	2300      	movs	r3, #0
}
 801461c:	4618      	mov	r0, r3
 801461e:	3710      	adds	r7, #16
 8014620:	46bd      	mov	sp, r7
 8014622:	bd80      	pop	{r7, pc}

08014624 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	b082      	sub	sp, #8
 8014628:	af00      	add	r7, sp, #0
 801462a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801462c:	687b      	ldr	r3, [r7, #4]
 801462e:	2204      	movs	r2, #4
 8014630:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8014634:	2300      	movs	r3, #0
 8014636:	2200      	movs	r2, #0
 8014638:	2100      	movs	r1, #0
 801463a:	6878      	ldr	r0, [r7, #4]
 801463c:	f003 ffb3 	bl	80185a6 <USBD_LL_Transmit>

  return USBD_OK;
 8014640:	2300      	movs	r3, #0
}
 8014642:	4618      	mov	r0, r3
 8014644:	3708      	adds	r7, #8
 8014646:	46bd      	mov	sp, r7
 8014648:	bd80      	pop	{r7, pc}

0801464a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801464a:	b580      	push	{r7, lr}
 801464c:	b082      	sub	sp, #8
 801464e:	af00      	add	r7, sp, #0
 8014650:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	2205      	movs	r2, #5
 8014656:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801465a:	2300      	movs	r3, #0
 801465c:	2200      	movs	r2, #0
 801465e:	2100      	movs	r1, #0
 8014660:	6878      	ldr	r0, [r7, #4]
 8014662:	f003 ffc1 	bl	80185e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8014666:	2300      	movs	r3, #0
}
 8014668:	4618      	mov	r0, r3
 801466a:	3708      	adds	r7, #8
 801466c:	46bd      	mov	sp, r7
 801466e:	bd80      	pop	{r7, pc}

08014670 <__NVIC_SetPriority>:
{
 8014670:	b480      	push	{r7}
 8014672:	b083      	sub	sp, #12
 8014674:	af00      	add	r7, sp, #0
 8014676:	4603      	mov	r3, r0
 8014678:	6039      	str	r1, [r7, #0]
 801467a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801467c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014680:	2b00      	cmp	r3, #0
 8014682:	db0a      	blt.n	801469a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014684:	683b      	ldr	r3, [r7, #0]
 8014686:	b2da      	uxtb	r2, r3
 8014688:	490c      	ldr	r1, [pc, #48]	@ (80146bc <__NVIC_SetPriority+0x4c>)
 801468a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801468e:	0112      	lsls	r2, r2, #4
 8014690:	b2d2      	uxtb	r2, r2
 8014692:	440b      	add	r3, r1
 8014694:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8014698:	e00a      	b.n	80146b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801469a:	683b      	ldr	r3, [r7, #0]
 801469c:	b2da      	uxtb	r2, r3
 801469e:	4908      	ldr	r1, [pc, #32]	@ (80146c0 <__NVIC_SetPriority+0x50>)
 80146a0:	79fb      	ldrb	r3, [r7, #7]
 80146a2:	f003 030f 	and.w	r3, r3, #15
 80146a6:	3b04      	subs	r3, #4
 80146a8:	0112      	lsls	r2, r2, #4
 80146aa:	b2d2      	uxtb	r2, r2
 80146ac:	440b      	add	r3, r1
 80146ae:	761a      	strb	r2, [r3, #24]
}
 80146b0:	bf00      	nop
 80146b2:	370c      	adds	r7, #12
 80146b4:	46bd      	mov	sp, r7
 80146b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ba:	4770      	bx	lr
 80146bc:	e000e100 	.word	0xe000e100
 80146c0:	e000ed00 	.word	0xe000ed00

080146c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80146c4:	b580      	push	{r7, lr}
 80146c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80146c8:	4b05      	ldr	r3, [pc, #20]	@ (80146e0 <SysTick_Handler+0x1c>)
 80146ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80146cc:	f001 feec 	bl	80164a8 <xTaskGetSchedulerState>
 80146d0:	4603      	mov	r3, r0
 80146d2:	2b01      	cmp	r3, #1
 80146d4:	d001      	beq.n	80146da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80146d6:	f002 ff27 	bl	8017528 <xPortSysTickHandler>
  }
}
 80146da:	bf00      	nop
 80146dc:	bd80      	pop	{r7, pc}
 80146de:	bf00      	nop
 80146e0:	e000e010 	.word	0xe000e010

080146e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80146e4:	b580      	push	{r7, lr}
 80146e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80146e8:	2100      	movs	r1, #0
 80146ea:	f06f 0004 	mvn.w	r0, #4
 80146ee:	f7ff ffbf 	bl	8014670 <__NVIC_SetPriority>
#endif
}
 80146f2:	bf00      	nop
 80146f4:	bd80      	pop	{r7, pc}
	...

080146f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80146f8:	b480      	push	{r7}
 80146fa:	b083      	sub	sp, #12
 80146fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80146fe:	f3ef 8305 	mrs	r3, IPSR
 8014702:	603b      	str	r3, [r7, #0]
  return(result);
 8014704:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014706:	2b00      	cmp	r3, #0
 8014708:	d003      	beq.n	8014712 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 801470a:	f06f 0305 	mvn.w	r3, #5
 801470e:	607b      	str	r3, [r7, #4]
 8014710:	e00c      	b.n	801472c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8014712:	4b0a      	ldr	r3, [pc, #40]	@ (801473c <osKernelInitialize+0x44>)
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	2b00      	cmp	r3, #0
 8014718:	d105      	bne.n	8014726 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 801471a:	4b08      	ldr	r3, [pc, #32]	@ (801473c <osKernelInitialize+0x44>)
 801471c:	2201      	movs	r2, #1
 801471e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8014720:	2300      	movs	r3, #0
 8014722:	607b      	str	r3, [r7, #4]
 8014724:	e002      	b.n	801472c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8014726:	f04f 33ff 	mov.w	r3, #4294967295
 801472a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801472c:	687b      	ldr	r3, [r7, #4]
}
 801472e:	4618      	mov	r0, r3
 8014730:	370c      	adds	r7, #12
 8014732:	46bd      	mov	sp, r7
 8014734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014738:	4770      	bx	lr
 801473a:	bf00      	nop
 801473c:	20005640 	.word	0x20005640

08014740 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014746:	f3ef 8305 	mrs	r3, IPSR
 801474a:	603b      	str	r3, [r7, #0]
  return(result);
 801474c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801474e:	2b00      	cmp	r3, #0
 8014750:	d003      	beq.n	801475a <osKernelStart+0x1a>
    stat = osErrorISR;
 8014752:	f06f 0305 	mvn.w	r3, #5
 8014756:	607b      	str	r3, [r7, #4]
 8014758:	e010      	b.n	801477c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 801475a:	4b0b      	ldr	r3, [pc, #44]	@ (8014788 <osKernelStart+0x48>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b01      	cmp	r3, #1
 8014760:	d109      	bne.n	8014776 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8014762:	f7ff ffbf 	bl	80146e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8014766:	4b08      	ldr	r3, [pc, #32]	@ (8014788 <osKernelStart+0x48>)
 8014768:	2202      	movs	r2, #2
 801476a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 801476c:	f001 fa28 	bl	8015bc0 <vTaskStartScheduler>
      stat = osOK;
 8014770:	2300      	movs	r3, #0
 8014772:	607b      	str	r3, [r7, #4]
 8014774:	e002      	b.n	801477c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8014776:	f04f 33ff 	mov.w	r3, #4294967295
 801477a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 801477c:	687b      	ldr	r3, [r7, #4]
}
 801477e:	4618      	mov	r0, r3
 8014780:	3708      	adds	r7, #8
 8014782:	46bd      	mov	sp, r7
 8014784:	bd80      	pop	{r7, pc}
 8014786:	bf00      	nop
 8014788:	20005640 	.word	0x20005640

0801478c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 801478c:	b580      	push	{r7, lr}
 801478e:	b08e      	sub	sp, #56	@ 0x38
 8014790:	af04      	add	r7, sp, #16
 8014792:	60f8      	str	r0, [r7, #12]
 8014794:	60b9      	str	r1, [r7, #8]
 8014796:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8014798:	2300      	movs	r3, #0
 801479a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801479c:	f3ef 8305 	mrs	r3, IPSR
 80147a0:	617b      	str	r3, [r7, #20]
  return(result);
 80147a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80147a4:	2b00      	cmp	r3, #0
 80147a6:	d17e      	bne.n	80148a6 <osThreadNew+0x11a>
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d07b      	beq.n	80148a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80147ae:	2380      	movs	r3, #128	@ 0x80
 80147b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80147b2:	2318      	movs	r3, #24
 80147b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80147b6:	2300      	movs	r3, #0
 80147b8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80147ba:	f04f 33ff 	mov.w	r3, #4294967295
 80147be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d045      	beq.n	8014852 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80147c6:	687b      	ldr	r3, [r7, #4]
 80147c8:	681b      	ldr	r3, [r3, #0]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d002      	beq.n	80147d4 <osThreadNew+0x48>
        name = attr->name;
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	699b      	ldr	r3, [r3, #24]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d002      	beq.n	80147e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	699b      	ldr	r3, [r3, #24]
 80147e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80147e2:	69fb      	ldr	r3, [r7, #28]
 80147e4:	2b00      	cmp	r3, #0
 80147e6:	d008      	beq.n	80147fa <osThreadNew+0x6e>
 80147e8:	69fb      	ldr	r3, [r7, #28]
 80147ea:	2b38      	cmp	r3, #56	@ 0x38
 80147ec:	d805      	bhi.n	80147fa <osThreadNew+0x6e>
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	685b      	ldr	r3, [r3, #4]
 80147f2:	f003 0301 	and.w	r3, r3, #1
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d001      	beq.n	80147fe <osThreadNew+0x72>
        return (NULL);
 80147fa:	2300      	movs	r3, #0
 80147fc:	e054      	b.n	80148a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	695b      	ldr	r3, [r3, #20]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d003      	beq.n	801480e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	695b      	ldr	r3, [r3, #20]
 801480a:	089b      	lsrs	r3, r3, #2
 801480c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	689b      	ldr	r3, [r3, #8]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d00e      	beq.n	8014834 <osThreadNew+0xa8>
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	68db      	ldr	r3, [r3, #12]
 801481a:	2ba7      	cmp	r3, #167	@ 0xa7
 801481c:	d90a      	bls.n	8014834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8014822:	2b00      	cmp	r3, #0
 8014824:	d006      	beq.n	8014834 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	695b      	ldr	r3, [r3, #20]
 801482a:	2b00      	cmp	r3, #0
 801482c:	d002      	beq.n	8014834 <osThreadNew+0xa8>
        mem = 1;
 801482e:	2301      	movs	r3, #1
 8014830:	61bb      	str	r3, [r7, #24]
 8014832:	e010      	b.n	8014856 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	689b      	ldr	r3, [r3, #8]
 8014838:	2b00      	cmp	r3, #0
 801483a:	d10c      	bne.n	8014856 <osThreadNew+0xca>
 801483c:	687b      	ldr	r3, [r7, #4]
 801483e:	68db      	ldr	r3, [r3, #12]
 8014840:	2b00      	cmp	r3, #0
 8014842:	d108      	bne.n	8014856 <osThreadNew+0xca>
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	691b      	ldr	r3, [r3, #16]
 8014848:	2b00      	cmp	r3, #0
 801484a:	d104      	bne.n	8014856 <osThreadNew+0xca>
          mem = 0;
 801484c:	2300      	movs	r3, #0
 801484e:	61bb      	str	r3, [r7, #24]
 8014850:	e001      	b.n	8014856 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8014852:	2300      	movs	r3, #0
 8014854:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8014856:	69bb      	ldr	r3, [r7, #24]
 8014858:	2b01      	cmp	r3, #1
 801485a:	d110      	bne.n	801487e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8014860:	687a      	ldr	r2, [r7, #4]
 8014862:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8014864:	9202      	str	r2, [sp, #8]
 8014866:	9301      	str	r3, [sp, #4]
 8014868:	69fb      	ldr	r3, [r7, #28]
 801486a:	9300      	str	r3, [sp, #0]
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	6a3a      	ldr	r2, [r7, #32]
 8014870:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014872:	68f8      	ldr	r0, [r7, #12]
 8014874:	f000 ffb0 	bl	80157d8 <xTaskCreateStatic>
 8014878:	4603      	mov	r3, r0
 801487a:	613b      	str	r3, [r7, #16]
 801487c:	e013      	b.n	80148a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801487e:	69bb      	ldr	r3, [r7, #24]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d110      	bne.n	80148a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8014884:	6a3b      	ldr	r3, [r7, #32]
 8014886:	b29a      	uxth	r2, r3
 8014888:	f107 0310 	add.w	r3, r7, #16
 801488c:	9301      	str	r3, [sp, #4]
 801488e:	69fb      	ldr	r3, [r7, #28]
 8014890:	9300      	str	r3, [sp, #0]
 8014892:	68bb      	ldr	r3, [r7, #8]
 8014894:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014896:	68f8      	ldr	r0, [r7, #12]
 8014898:	f000 fffe 	bl	8015898 <xTaskCreate>
 801489c:	4603      	mov	r3, r0
 801489e:	2b01      	cmp	r3, #1
 80148a0:	d001      	beq.n	80148a6 <osThreadNew+0x11a>
            hTask = NULL;
 80148a2:	2300      	movs	r3, #0
 80148a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80148a6:	693b      	ldr	r3, [r7, #16]
}
 80148a8:	4618      	mov	r0, r3
 80148aa:	3728      	adds	r7, #40	@ 0x28
 80148ac:	46bd      	mov	sp, r7
 80148ae:	bd80      	pop	{r7, pc}

080148b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80148b8:	f3ef 8305 	mrs	r3, IPSR
 80148bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80148be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d003      	beq.n	80148cc <osDelay+0x1c>
    stat = osErrorISR;
 80148c4:	f06f 0305 	mvn.w	r3, #5
 80148c8:	60fb      	str	r3, [r7, #12]
 80148ca:	e007      	b.n	80148dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80148cc:	2300      	movs	r3, #0
 80148ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d002      	beq.n	80148dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80148d6:	6878      	ldr	r0, [r7, #4]
 80148d8:	f001 f93c 	bl	8015b54 <vTaskDelay>
    }
  }

  return (stat);
 80148dc:	68fb      	ldr	r3, [r7, #12]
}
 80148de:	4618      	mov	r0, r3
 80148e0:	3710      	adds	r7, #16
 80148e2:	46bd      	mov	sp, r7
 80148e4:	bd80      	pop	{r7, pc}
	...

080148e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80148e8:	b480      	push	{r7}
 80148ea:	b085      	sub	sp, #20
 80148ec:	af00      	add	r7, sp, #0
 80148ee:	60f8      	str	r0, [r7, #12]
 80148f0:	60b9      	str	r1, [r7, #8]
 80148f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	4a07      	ldr	r2, [pc, #28]	@ (8014914 <vApplicationGetIdleTaskMemory+0x2c>)
 80148f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80148fa:	68bb      	ldr	r3, [r7, #8]
 80148fc:	4a06      	ldr	r2, [pc, #24]	@ (8014918 <vApplicationGetIdleTaskMemory+0x30>)
 80148fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2280      	movs	r2, #128	@ 0x80
 8014904:	601a      	str	r2, [r3, #0]
}
 8014906:	bf00      	nop
 8014908:	3714      	adds	r7, #20
 801490a:	46bd      	mov	sp, r7
 801490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014910:	4770      	bx	lr
 8014912:	bf00      	nop
 8014914:	20005644 	.word	0x20005644
 8014918:	200056ec 	.word	0x200056ec

0801491c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801491c:	b480      	push	{r7}
 801491e:	b085      	sub	sp, #20
 8014920:	af00      	add	r7, sp, #0
 8014922:	60f8      	str	r0, [r7, #12]
 8014924:	60b9      	str	r1, [r7, #8]
 8014926:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	4a07      	ldr	r2, [pc, #28]	@ (8014948 <vApplicationGetTimerTaskMemory+0x2c>)
 801492c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801492e:	68bb      	ldr	r3, [r7, #8]
 8014930:	4a06      	ldr	r2, [pc, #24]	@ (801494c <vApplicationGetTimerTaskMemory+0x30>)
 8014932:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801493a:	601a      	str	r2, [r3, #0]
}
 801493c:	bf00      	nop
 801493e:	3714      	adds	r7, #20
 8014940:	46bd      	mov	sp, r7
 8014942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014946:	4770      	bx	lr
 8014948:	200058ec 	.word	0x200058ec
 801494c:	20005994 	.word	0x20005994

08014950 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8014950:	b480      	push	{r7}
 8014952:	b083      	sub	sp, #12
 8014954:	af00      	add	r7, sp, #0
 8014956:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	f103 0208 	add.w	r2, r3, #8
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8014962:	687b      	ldr	r3, [r7, #4]
 8014964:	f04f 32ff 	mov.w	r2, #4294967295
 8014968:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	f103 0208 	add.w	r2, r3, #8
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	f103 0208 	add.w	r2, r3, #8
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	2200      	movs	r2, #0
 8014982:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8014984:	bf00      	nop
 8014986:	370c      	adds	r7, #12
 8014988:	46bd      	mov	sp, r7
 801498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498e:	4770      	bx	lr

08014990 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8014990:	b480      	push	{r7}
 8014992:	b083      	sub	sp, #12
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2200      	movs	r2, #0
 801499c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801499e:	bf00      	nop
 80149a0:	370c      	adds	r7, #12
 80149a2:	46bd      	mov	sp, r7
 80149a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149a8:	4770      	bx	lr

080149aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80149aa:	b480      	push	{r7}
 80149ac:	b085      	sub	sp, #20
 80149ae:	af00      	add	r7, sp, #0
 80149b0:	6078      	str	r0, [r7, #4]
 80149b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	685b      	ldr	r3, [r3, #4]
 80149b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	68fa      	ldr	r2, [r7, #12]
 80149be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	689a      	ldr	r2, [r3, #8]
 80149c4:	683b      	ldr	r3, [r7, #0]
 80149c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80149c8:	68fb      	ldr	r3, [r7, #12]
 80149ca:	689b      	ldr	r3, [r3, #8]
 80149cc:	683a      	ldr	r2, [r7, #0]
 80149ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	683a      	ldr	r2, [r7, #0]
 80149d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80149d6:	683b      	ldr	r3, [r7, #0]
 80149d8:	687a      	ldr	r2, [r7, #4]
 80149da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80149dc:	687b      	ldr	r3, [r7, #4]
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	1c5a      	adds	r2, r3, #1
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	601a      	str	r2, [r3, #0]
}
 80149e6:	bf00      	nop
 80149e8:	3714      	adds	r7, #20
 80149ea:	46bd      	mov	sp, r7
 80149ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f0:	4770      	bx	lr

080149f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80149f2:	b480      	push	{r7}
 80149f4:	b085      	sub	sp, #20
 80149f6:	af00      	add	r7, sp, #0
 80149f8:	6078      	str	r0, [r7, #4]
 80149fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80149fc:	683b      	ldr	r3, [r7, #0]
 80149fe:	681b      	ldr	r3, [r3, #0]
 8014a00:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8014a02:	68bb      	ldr	r3, [r7, #8]
 8014a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014a08:	d103      	bne.n	8014a12 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	691b      	ldr	r3, [r3, #16]
 8014a0e:	60fb      	str	r3, [r7, #12]
 8014a10:	e00c      	b.n	8014a2c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8014a12:	687b      	ldr	r3, [r7, #4]
 8014a14:	3308      	adds	r3, #8
 8014a16:	60fb      	str	r3, [r7, #12]
 8014a18:	e002      	b.n	8014a20 <vListInsert+0x2e>
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	685b      	ldr	r3, [r3, #4]
 8014a1e:	60fb      	str	r3, [r7, #12]
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	685b      	ldr	r3, [r3, #4]
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	68ba      	ldr	r2, [r7, #8]
 8014a28:	429a      	cmp	r2, r3
 8014a2a:	d2f6      	bcs.n	8014a1a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014a2c:	68fb      	ldr	r3, [r7, #12]
 8014a2e:	685a      	ldr	r2, [r3, #4]
 8014a30:	683b      	ldr	r3, [r7, #0]
 8014a32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8014a34:	683b      	ldr	r3, [r7, #0]
 8014a36:	685b      	ldr	r3, [r3, #4]
 8014a38:	683a      	ldr	r2, [r7, #0]
 8014a3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	68fa      	ldr	r2, [r7, #12]
 8014a40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8014a42:	68fb      	ldr	r3, [r7, #12]
 8014a44:	683a      	ldr	r2, [r7, #0]
 8014a46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	687a      	ldr	r2, [r7, #4]
 8014a4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	681b      	ldr	r3, [r3, #0]
 8014a52:	1c5a      	adds	r2, r3, #1
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	601a      	str	r2, [r3, #0]
}
 8014a58:	bf00      	nop
 8014a5a:	3714      	adds	r7, #20
 8014a5c:	46bd      	mov	sp, r7
 8014a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a62:	4770      	bx	lr

08014a64 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8014a64:	b480      	push	{r7}
 8014a66:	b085      	sub	sp, #20
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	691b      	ldr	r3, [r3, #16]
 8014a70:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	685b      	ldr	r3, [r3, #4]
 8014a76:	687a      	ldr	r2, [r7, #4]
 8014a78:	6892      	ldr	r2, [r2, #8]
 8014a7a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	689b      	ldr	r3, [r3, #8]
 8014a80:	687a      	ldr	r2, [r7, #4]
 8014a82:	6852      	ldr	r2, [r2, #4]
 8014a84:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d103      	bne.n	8014a98 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	689a      	ldr	r2, [r3, #8]
 8014a94:	68fb      	ldr	r3, [r7, #12]
 8014a96:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2200      	movs	r2, #0
 8014a9c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	681b      	ldr	r3, [r3, #0]
 8014aa2:	1e5a      	subs	r2, r3, #1
 8014aa4:	68fb      	ldr	r3, [r7, #12]
 8014aa6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	681b      	ldr	r3, [r3, #0]
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3714      	adds	r7, #20
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ab6:	4770      	bx	lr

08014ab8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014ab8:	b580      	push	{r7, lr}
 8014aba:	b084      	sub	sp, #16
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
 8014ac0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d10b      	bne.n	8014ae4 <xQueueGenericReset+0x2c>
	__asm volatile
 8014acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ad0:	f383 8811 	msr	BASEPRI, r3
 8014ad4:	f3bf 8f6f 	isb	sy
 8014ad8:	f3bf 8f4f 	dsb	sy
 8014adc:	60bb      	str	r3, [r7, #8]
}
 8014ade:	bf00      	nop
 8014ae0:	bf00      	nop
 8014ae2:	e7fd      	b.n	8014ae0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8014ae4:	f002 fc90 	bl	8017408 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014af0:	68f9      	ldr	r1, [r7, #12]
 8014af2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014af4:	fb01 f303 	mul.w	r3, r1, r3
 8014af8:	441a      	add	r2, r3
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014afe:	68fb      	ldr	r3, [r7, #12]
 8014b00:	2200      	movs	r2, #0
 8014b02:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	681a      	ldr	r2, [r3, #0]
 8014b08:	68fb      	ldr	r3, [r7, #12]
 8014b0a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	681a      	ldr	r2, [r3, #0]
 8014b10:	68fb      	ldr	r3, [r7, #12]
 8014b12:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014b14:	3b01      	subs	r3, #1
 8014b16:	68f9      	ldr	r1, [r7, #12]
 8014b18:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014b1a:	fb01 f303 	mul.w	r3, r1, r3
 8014b1e:	441a      	add	r2, r3
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	22ff      	movs	r2, #255	@ 0xff
 8014b28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	22ff      	movs	r2, #255	@ 0xff
 8014b30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d114      	bne.n	8014b64 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	691b      	ldr	r3, [r3, #16]
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d01a      	beq.n	8014b78 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014b42:	68fb      	ldr	r3, [r7, #12]
 8014b44:	3310      	adds	r3, #16
 8014b46:	4618      	mov	r0, r3
 8014b48:	f001 fad8 	bl	80160fc <xTaskRemoveFromEventList>
 8014b4c:	4603      	mov	r3, r0
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d012      	beq.n	8014b78 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8014b52:	4b0d      	ldr	r3, [pc, #52]	@ (8014b88 <xQueueGenericReset+0xd0>)
 8014b54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014b58:	601a      	str	r2, [r3, #0]
 8014b5a:	f3bf 8f4f 	dsb	sy
 8014b5e:	f3bf 8f6f 	isb	sy
 8014b62:	e009      	b.n	8014b78 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8014b64:	68fb      	ldr	r3, [r7, #12]
 8014b66:	3310      	adds	r3, #16
 8014b68:	4618      	mov	r0, r3
 8014b6a:	f7ff fef1 	bl	8014950 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8014b6e:	68fb      	ldr	r3, [r7, #12]
 8014b70:	3324      	adds	r3, #36	@ 0x24
 8014b72:	4618      	mov	r0, r3
 8014b74:	f7ff feec 	bl	8014950 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8014b78:	f002 fc78 	bl	801746c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8014b7c:	2301      	movs	r3, #1
}
 8014b7e:	4618      	mov	r0, r3
 8014b80:	3710      	adds	r7, #16
 8014b82:	46bd      	mov	sp, r7
 8014b84:	bd80      	pop	{r7, pc}
 8014b86:	bf00      	nop
 8014b88:	e000ed04 	.word	0xe000ed04

08014b8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8014b8c:	b580      	push	{r7, lr}
 8014b8e:	b08e      	sub	sp, #56	@ 0x38
 8014b90:	af02      	add	r7, sp, #8
 8014b92:	60f8      	str	r0, [r7, #12]
 8014b94:	60b9      	str	r1, [r7, #8]
 8014b96:	607a      	str	r2, [r7, #4]
 8014b98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d10b      	bne.n	8014bb8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8014ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ba4:	f383 8811 	msr	BASEPRI, r3
 8014ba8:	f3bf 8f6f 	isb	sy
 8014bac:	f3bf 8f4f 	dsb	sy
 8014bb0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014bb2:	bf00      	nop
 8014bb4:	bf00      	nop
 8014bb6:	e7fd      	b.n	8014bb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014bb8:	683b      	ldr	r3, [r7, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d10b      	bne.n	8014bd6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8014bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bc2:	f383 8811 	msr	BASEPRI, r3
 8014bc6:	f3bf 8f6f 	isb	sy
 8014bca:	f3bf 8f4f 	dsb	sy
 8014bce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014bd0:	bf00      	nop
 8014bd2:	bf00      	nop
 8014bd4:	e7fd      	b.n	8014bd2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d002      	beq.n	8014be2 <xQueueGenericCreateStatic+0x56>
 8014bdc:	68bb      	ldr	r3, [r7, #8]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d001      	beq.n	8014be6 <xQueueGenericCreateStatic+0x5a>
 8014be2:	2301      	movs	r3, #1
 8014be4:	e000      	b.n	8014be8 <xQueueGenericCreateStatic+0x5c>
 8014be6:	2300      	movs	r3, #0
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	d10b      	bne.n	8014c04 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8014bec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014bf0:	f383 8811 	msr	BASEPRI, r3
 8014bf4:	f3bf 8f6f 	isb	sy
 8014bf8:	f3bf 8f4f 	dsb	sy
 8014bfc:	623b      	str	r3, [r7, #32]
}
 8014bfe:	bf00      	nop
 8014c00:	bf00      	nop
 8014c02:	e7fd      	b.n	8014c00 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	2b00      	cmp	r3, #0
 8014c08:	d102      	bne.n	8014c10 <xQueueGenericCreateStatic+0x84>
 8014c0a:	68bb      	ldr	r3, [r7, #8]
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	d101      	bne.n	8014c14 <xQueueGenericCreateStatic+0x88>
 8014c10:	2301      	movs	r3, #1
 8014c12:	e000      	b.n	8014c16 <xQueueGenericCreateStatic+0x8a>
 8014c14:	2300      	movs	r3, #0
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d10b      	bne.n	8014c32 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8014c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c1e:	f383 8811 	msr	BASEPRI, r3
 8014c22:	f3bf 8f6f 	isb	sy
 8014c26:	f3bf 8f4f 	dsb	sy
 8014c2a:	61fb      	str	r3, [r7, #28]
}
 8014c2c:	bf00      	nop
 8014c2e:	bf00      	nop
 8014c30:	e7fd      	b.n	8014c2e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8014c32:	2350      	movs	r3, #80	@ 0x50
 8014c34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	2b50      	cmp	r3, #80	@ 0x50
 8014c3a:	d00b      	beq.n	8014c54 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8014c3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c40:	f383 8811 	msr	BASEPRI, r3
 8014c44:	f3bf 8f6f 	isb	sy
 8014c48:	f3bf 8f4f 	dsb	sy
 8014c4c:	61bb      	str	r3, [r7, #24]
}
 8014c4e:	bf00      	nop
 8014c50:	bf00      	nop
 8014c52:	e7fd      	b.n	8014c50 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8014c54:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014c56:	683b      	ldr	r3, [r7, #0]
 8014c58:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8014c5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c5c:	2b00      	cmp	r3, #0
 8014c5e:	d00d      	beq.n	8014c7c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8014c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c62:	2201      	movs	r2, #1
 8014c64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014c68:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8014c6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c6e:	9300      	str	r3, [sp, #0]
 8014c70:	4613      	mov	r3, r2
 8014c72:	687a      	ldr	r2, [r7, #4]
 8014c74:	68b9      	ldr	r1, [r7, #8]
 8014c76:	68f8      	ldr	r0, [r7, #12]
 8014c78:	f000 f840 	bl	8014cfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014c7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8014c7e:	4618      	mov	r0, r3
 8014c80:	3730      	adds	r7, #48	@ 0x30
 8014c82:	46bd      	mov	sp, r7
 8014c84:	bd80      	pop	{r7, pc}

08014c86 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8014c86:	b580      	push	{r7, lr}
 8014c88:	b08a      	sub	sp, #40	@ 0x28
 8014c8a:	af02      	add	r7, sp, #8
 8014c8c:	60f8      	str	r0, [r7, #12]
 8014c8e:	60b9      	str	r1, [r7, #8]
 8014c90:	4613      	mov	r3, r2
 8014c92:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d10b      	bne.n	8014cb2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8014c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014c9e:	f383 8811 	msr	BASEPRI, r3
 8014ca2:	f3bf 8f6f 	isb	sy
 8014ca6:	f3bf 8f4f 	dsb	sy
 8014caa:	613b      	str	r3, [r7, #16]
}
 8014cac:	bf00      	nop
 8014cae:	bf00      	nop
 8014cb0:	e7fd      	b.n	8014cae <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	68ba      	ldr	r2, [r7, #8]
 8014cb6:	fb02 f303 	mul.w	r3, r2, r3
 8014cba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014cbc:	69fb      	ldr	r3, [r7, #28]
 8014cbe:	3350      	adds	r3, #80	@ 0x50
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	f002 fcc3 	bl	801764c <pvPortMalloc>
 8014cc6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014cc8:	69bb      	ldr	r3, [r7, #24]
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d011      	beq.n	8014cf2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014cce:	69bb      	ldr	r3, [r7, #24]
 8014cd0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014cd2:	697b      	ldr	r3, [r7, #20]
 8014cd4:	3350      	adds	r3, #80	@ 0x50
 8014cd6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	2200      	movs	r2, #0
 8014cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014ce0:	79fa      	ldrb	r2, [r7, #7]
 8014ce2:	69bb      	ldr	r3, [r7, #24]
 8014ce4:	9300      	str	r3, [sp, #0]
 8014ce6:	4613      	mov	r3, r2
 8014ce8:	697a      	ldr	r2, [r7, #20]
 8014cea:	68b9      	ldr	r1, [r7, #8]
 8014cec:	68f8      	ldr	r0, [r7, #12]
 8014cee:	f000 f805 	bl	8014cfc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8014cf2:	69bb      	ldr	r3, [r7, #24]
	}
 8014cf4:	4618      	mov	r0, r3
 8014cf6:	3720      	adds	r7, #32
 8014cf8:	46bd      	mov	sp, r7
 8014cfa:	bd80      	pop	{r7, pc}

08014cfc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b084      	sub	sp, #16
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	60f8      	str	r0, [r7, #12]
 8014d04:	60b9      	str	r1, [r7, #8]
 8014d06:	607a      	str	r2, [r7, #4]
 8014d08:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014d0a:	68bb      	ldr	r3, [r7, #8]
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d103      	bne.n	8014d18 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014d10:	69bb      	ldr	r3, [r7, #24]
 8014d12:	69ba      	ldr	r2, [r7, #24]
 8014d14:	601a      	str	r2, [r3, #0]
 8014d16:	e002      	b.n	8014d1e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014d18:	69bb      	ldr	r3, [r7, #24]
 8014d1a:	687a      	ldr	r2, [r7, #4]
 8014d1c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014d1e:	69bb      	ldr	r3, [r7, #24]
 8014d20:	68fa      	ldr	r2, [r7, #12]
 8014d22:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8014d24:	69bb      	ldr	r3, [r7, #24]
 8014d26:	68ba      	ldr	r2, [r7, #8]
 8014d28:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014d2a:	2101      	movs	r1, #1
 8014d2c:	69b8      	ldr	r0, [r7, #24]
 8014d2e:	f7ff fec3 	bl	8014ab8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8014d32:	69bb      	ldr	r3, [r7, #24]
 8014d34:	78fa      	ldrb	r2, [r7, #3]
 8014d36:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8014d3a:	bf00      	nop
 8014d3c:	3710      	adds	r7, #16
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}

08014d42 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8014d42:	b580      	push	{r7, lr}
 8014d44:	b082      	sub	sp, #8
 8014d46:	af00      	add	r7, sp, #0
 8014d48:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	2b00      	cmp	r3, #0
 8014d4e:	d00e      	beq.n	8014d6e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	2200      	movs	r2, #0
 8014d54:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	2200      	movs	r2, #0
 8014d5a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	2200      	movs	r2, #0
 8014d60:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8014d62:	2300      	movs	r3, #0
 8014d64:	2200      	movs	r2, #0
 8014d66:	2100      	movs	r1, #0
 8014d68:	6878      	ldr	r0, [r7, #4]
 8014d6a:	f000 f81d 	bl	8014da8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8014d6e:	bf00      	nop
 8014d70:	3708      	adds	r7, #8
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}

08014d76 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8014d76:	b580      	push	{r7, lr}
 8014d78:	b086      	sub	sp, #24
 8014d7a:	af00      	add	r7, sp, #0
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8014d80:	2301      	movs	r3, #1
 8014d82:	617b      	str	r3, [r7, #20]
 8014d84:	2300      	movs	r3, #0
 8014d86:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8014d88:	79fb      	ldrb	r3, [r7, #7]
 8014d8a:	461a      	mov	r2, r3
 8014d8c:	6939      	ldr	r1, [r7, #16]
 8014d8e:	6978      	ldr	r0, [r7, #20]
 8014d90:	f7ff ff79 	bl	8014c86 <xQueueGenericCreate>
 8014d94:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8014d96:	68f8      	ldr	r0, [r7, #12]
 8014d98:	f7ff ffd3 	bl	8014d42 <prvInitialiseMutex>

		return xNewQueue;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
	}
 8014d9e:	4618      	mov	r0, r3
 8014da0:	3718      	adds	r7, #24
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd80      	pop	{r7, pc}
	...

08014da8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b08e      	sub	sp, #56	@ 0x38
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	60f8      	str	r0, [r7, #12]
 8014db0:	60b9      	str	r1, [r7, #8]
 8014db2:	607a      	str	r2, [r7, #4]
 8014db4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8014db6:	2300      	movs	r3, #0
 8014db8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014dba:	68fb      	ldr	r3, [r7, #12]
 8014dbc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014dc0:	2b00      	cmp	r3, #0
 8014dc2:	d10b      	bne.n	8014ddc <xQueueGenericSend+0x34>
	__asm volatile
 8014dc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014dc8:	f383 8811 	msr	BASEPRI, r3
 8014dcc:	f3bf 8f6f 	isb	sy
 8014dd0:	f3bf 8f4f 	dsb	sy
 8014dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014dd6:	bf00      	nop
 8014dd8:	bf00      	nop
 8014dda:	e7fd      	b.n	8014dd8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014ddc:	68bb      	ldr	r3, [r7, #8]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d103      	bne.n	8014dea <xQueueGenericSend+0x42>
 8014de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d101      	bne.n	8014dee <xQueueGenericSend+0x46>
 8014dea:	2301      	movs	r3, #1
 8014dec:	e000      	b.n	8014df0 <xQueueGenericSend+0x48>
 8014dee:	2300      	movs	r3, #0
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d10b      	bne.n	8014e0c <xQueueGenericSend+0x64>
	__asm volatile
 8014df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014df8:	f383 8811 	msr	BASEPRI, r3
 8014dfc:	f3bf 8f6f 	isb	sy
 8014e00:	f3bf 8f4f 	dsb	sy
 8014e04:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014e06:	bf00      	nop
 8014e08:	bf00      	nop
 8014e0a:	e7fd      	b.n	8014e08 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014e0c:	683b      	ldr	r3, [r7, #0]
 8014e0e:	2b02      	cmp	r3, #2
 8014e10:	d103      	bne.n	8014e1a <xQueueGenericSend+0x72>
 8014e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e16:	2b01      	cmp	r3, #1
 8014e18:	d101      	bne.n	8014e1e <xQueueGenericSend+0x76>
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	e000      	b.n	8014e20 <xQueueGenericSend+0x78>
 8014e1e:	2300      	movs	r3, #0
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d10b      	bne.n	8014e3c <xQueueGenericSend+0x94>
	__asm volatile
 8014e24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e28:	f383 8811 	msr	BASEPRI, r3
 8014e2c:	f3bf 8f6f 	isb	sy
 8014e30:	f3bf 8f4f 	dsb	sy
 8014e34:	623b      	str	r3, [r7, #32]
}
 8014e36:	bf00      	nop
 8014e38:	bf00      	nop
 8014e3a:	e7fd      	b.n	8014e38 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014e3c:	f001 fb34 	bl	80164a8 <xTaskGetSchedulerState>
 8014e40:	4603      	mov	r3, r0
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	d102      	bne.n	8014e4c <xQueueGenericSend+0xa4>
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2b00      	cmp	r3, #0
 8014e4a:	d101      	bne.n	8014e50 <xQueueGenericSend+0xa8>
 8014e4c:	2301      	movs	r3, #1
 8014e4e:	e000      	b.n	8014e52 <xQueueGenericSend+0xaa>
 8014e50:	2300      	movs	r3, #0
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d10b      	bne.n	8014e6e <xQueueGenericSend+0xc6>
	__asm volatile
 8014e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014e5a:	f383 8811 	msr	BASEPRI, r3
 8014e5e:	f3bf 8f6f 	isb	sy
 8014e62:	f3bf 8f4f 	dsb	sy
 8014e66:	61fb      	str	r3, [r7, #28]
}
 8014e68:	bf00      	nop
 8014e6a:	bf00      	nop
 8014e6c:	e7fd      	b.n	8014e6a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014e6e:	f002 facb 	bl	8017408 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8014e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e7a:	429a      	cmp	r2, r3
 8014e7c:	d302      	bcc.n	8014e84 <xQueueGenericSend+0xdc>
 8014e7e:	683b      	ldr	r3, [r7, #0]
 8014e80:	2b02      	cmp	r3, #2
 8014e82:	d129      	bne.n	8014ed8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8014e84:	683a      	ldr	r2, [r7, #0]
 8014e86:	68b9      	ldr	r1, [r7, #8]
 8014e88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014e8a:	f000 fb37 	bl	80154fc <prvCopyDataToQueue>
 8014e8e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d010      	beq.n	8014eba <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014e9a:	3324      	adds	r3, #36	@ 0x24
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f001 f92d 	bl	80160fc <xTaskRemoveFromEventList>
 8014ea2:	4603      	mov	r3, r0
 8014ea4:	2b00      	cmp	r3, #0
 8014ea6:	d013      	beq.n	8014ed0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8014fa8 <xQueueGenericSend+0x200>)
 8014eaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014eae:	601a      	str	r2, [r3, #0]
 8014eb0:	f3bf 8f4f 	dsb	sy
 8014eb4:	f3bf 8f6f 	isb	sy
 8014eb8:	e00a      	b.n	8014ed0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d007      	beq.n	8014ed0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014ec0:	4b39      	ldr	r3, [pc, #228]	@ (8014fa8 <xQueueGenericSend+0x200>)
 8014ec2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ec6:	601a      	str	r2, [r3, #0]
 8014ec8:	f3bf 8f4f 	dsb	sy
 8014ecc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014ed0:	f002 facc 	bl	801746c <vPortExitCritical>
				return pdPASS;
 8014ed4:	2301      	movs	r3, #1
 8014ed6:	e063      	b.n	8014fa0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d103      	bne.n	8014ee6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014ede:	f002 fac5 	bl	801746c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8014ee2:	2300      	movs	r3, #0
 8014ee4:	e05c      	b.n	8014fa0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d106      	bne.n	8014efa <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014eec:	f107 0314 	add.w	r3, r7, #20
 8014ef0:	4618      	mov	r0, r3
 8014ef2:	f001 f967 	bl	80161c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014efa:	f002 fab7 	bl	801746c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014efe:	f000 fecf 	bl	8015ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014f02:	f002 fa81 	bl	8017408 <vPortEnterCritical>
 8014f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f08:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014f0c:	b25b      	sxtb	r3, r3
 8014f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f12:	d103      	bne.n	8014f1c <xQueueGenericSend+0x174>
 8014f14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f16:	2200      	movs	r2, #0
 8014f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f1e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014f22:	b25b      	sxtb	r3, r3
 8014f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f28:	d103      	bne.n	8014f32 <xQueueGenericSend+0x18a>
 8014f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014f32:	f002 fa9b 	bl	801746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014f36:	1d3a      	adds	r2, r7, #4
 8014f38:	f107 0314 	add.w	r3, r7, #20
 8014f3c:	4611      	mov	r1, r2
 8014f3e:	4618      	mov	r0, r3
 8014f40:	f001 f956 	bl	80161f0 <xTaskCheckForTimeOut>
 8014f44:	4603      	mov	r3, r0
 8014f46:	2b00      	cmp	r3, #0
 8014f48:	d124      	bne.n	8014f94 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8014f4a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f4c:	f000 fbce 	bl	80156ec <prvIsQueueFull>
 8014f50:	4603      	mov	r3, r0
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d018      	beq.n	8014f88 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8014f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014f58:	3310      	adds	r3, #16
 8014f5a:	687a      	ldr	r2, [r7, #4]
 8014f5c:	4611      	mov	r1, r2
 8014f5e:	4618      	mov	r0, r3
 8014f60:	f001 f87a 	bl	8016058 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8014f64:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f66:	f000 fb59 	bl	801561c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8014f6a:	f000 fea7 	bl	8015cbc <xTaskResumeAll>
 8014f6e:	4603      	mov	r3, r0
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	f47f af7c 	bne.w	8014e6e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8014f76:	4b0c      	ldr	r3, [pc, #48]	@ (8014fa8 <xQueueGenericSend+0x200>)
 8014f78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014f7c:	601a      	str	r2, [r3, #0]
 8014f7e:	f3bf 8f4f 	dsb	sy
 8014f82:	f3bf 8f6f 	isb	sy
 8014f86:	e772      	b.n	8014e6e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8014f88:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f8a:	f000 fb47 	bl	801561c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014f8e:	f000 fe95 	bl	8015cbc <xTaskResumeAll>
 8014f92:	e76c      	b.n	8014e6e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8014f94:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8014f96:	f000 fb41 	bl	801561c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014f9a:	f000 fe8f 	bl	8015cbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014f9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014fa0:	4618      	mov	r0, r3
 8014fa2:	3738      	adds	r7, #56	@ 0x38
 8014fa4:	46bd      	mov	sp, r7
 8014fa6:	bd80      	pop	{r7, pc}
 8014fa8:	e000ed04 	.word	0xe000ed04

08014fac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014fac:	b580      	push	{r7, lr}
 8014fae:	b090      	sub	sp, #64	@ 0x40
 8014fb0:	af00      	add	r7, sp, #0
 8014fb2:	60f8      	str	r0, [r7, #12]
 8014fb4:	60b9      	str	r1, [r7, #8]
 8014fb6:	607a      	str	r2, [r7, #4]
 8014fb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014fba:	68fb      	ldr	r3, [r7, #12]
 8014fbc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8014fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fc0:	2b00      	cmp	r3, #0
 8014fc2:	d10b      	bne.n	8014fdc <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8014fc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014fc8:	f383 8811 	msr	BASEPRI, r3
 8014fcc:	f3bf 8f6f 	isb	sy
 8014fd0:	f3bf 8f4f 	dsb	sy
 8014fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8014fd6:	bf00      	nop
 8014fd8:	bf00      	nop
 8014fda:	e7fd      	b.n	8014fd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014fdc:	68bb      	ldr	r3, [r7, #8]
 8014fde:	2b00      	cmp	r3, #0
 8014fe0:	d103      	bne.n	8014fea <xQueueGenericSendFromISR+0x3e>
 8014fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014fe6:	2b00      	cmp	r3, #0
 8014fe8:	d101      	bne.n	8014fee <xQueueGenericSendFromISR+0x42>
 8014fea:	2301      	movs	r3, #1
 8014fec:	e000      	b.n	8014ff0 <xQueueGenericSendFromISR+0x44>
 8014fee:	2300      	movs	r3, #0
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d10b      	bne.n	801500c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8014ff4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014ff8:	f383 8811 	msr	BASEPRI, r3
 8014ffc:	f3bf 8f6f 	isb	sy
 8015000:	f3bf 8f4f 	dsb	sy
 8015004:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8015006:	bf00      	nop
 8015008:	bf00      	nop
 801500a:	e7fd      	b.n	8015008 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801500c:	683b      	ldr	r3, [r7, #0]
 801500e:	2b02      	cmp	r3, #2
 8015010:	d103      	bne.n	801501a <xQueueGenericSendFromISR+0x6e>
 8015012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015016:	2b01      	cmp	r3, #1
 8015018:	d101      	bne.n	801501e <xQueueGenericSendFromISR+0x72>
 801501a:	2301      	movs	r3, #1
 801501c:	e000      	b.n	8015020 <xQueueGenericSendFromISR+0x74>
 801501e:	2300      	movs	r3, #0
 8015020:	2b00      	cmp	r3, #0
 8015022:	d10b      	bne.n	801503c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8015024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015028:	f383 8811 	msr	BASEPRI, r3
 801502c:	f3bf 8f6f 	isb	sy
 8015030:	f3bf 8f4f 	dsb	sy
 8015034:	623b      	str	r3, [r7, #32]
}
 8015036:	bf00      	nop
 8015038:	bf00      	nop
 801503a:	e7fd      	b.n	8015038 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801503c:	f002 fac4 	bl	80175c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8015040:	f3ef 8211 	mrs	r2, BASEPRI
 8015044:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015048:	f383 8811 	msr	BASEPRI, r3
 801504c:	f3bf 8f6f 	isb	sy
 8015050:	f3bf 8f4f 	dsb	sy
 8015054:	61fa      	str	r2, [r7, #28]
 8015056:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8015058:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801505a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801505c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801505e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015060:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015064:	429a      	cmp	r2, r3
 8015066:	d302      	bcc.n	801506e <xQueueGenericSendFromISR+0xc2>
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	2b02      	cmp	r3, #2
 801506c:	d12f      	bne.n	80150ce <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 801506e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015070:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015074:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015078:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801507a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801507c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801507e:	683a      	ldr	r2, [r7, #0]
 8015080:	68b9      	ldr	r1, [r7, #8]
 8015082:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015084:	f000 fa3a 	bl	80154fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8015088:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 801508c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015090:	d112      	bne.n	80150b8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015092:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015094:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015096:	2b00      	cmp	r3, #0
 8015098:	d016      	beq.n	80150c8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801509a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801509c:	3324      	adds	r3, #36	@ 0x24
 801509e:	4618      	mov	r0, r3
 80150a0:	f001 f82c 	bl	80160fc <xTaskRemoveFromEventList>
 80150a4:	4603      	mov	r3, r0
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d00e      	beq.n	80150c8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	2b00      	cmp	r3, #0
 80150ae:	d00b      	beq.n	80150c8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80150b0:	687b      	ldr	r3, [r7, #4]
 80150b2:	2201      	movs	r2, #1
 80150b4:	601a      	str	r2, [r3, #0]
 80150b6:	e007      	b.n	80150c8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80150b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80150bc:	3301      	adds	r3, #1
 80150be:	b2db      	uxtb	r3, r3
 80150c0:	b25a      	sxtb	r2, r3
 80150c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80150c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80150c8:	2301      	movs	r3, #1
 80150ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80150cc:	e001      	b.n	80150d2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80150ce:	2300      	movs	r3, #0
 80150d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80150d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80150d4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80150d6:	697b      	ldr	r3, [r7, #20]
 80150d8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80150dc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80150de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	3740      	adds	r7, #64	@ 0x40
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}

080150e8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80150e8:	b580      	push	{r7, lr}
 80150ea:	b08c      	sub	sp, #48	@ 0x30
 80150ec:	af00      	add	r7, sp, #0
 80150ee:	60f8      	str	r0, [r7, #12]
 80150f0:	60b9      	str	r1, [r7, #8]
 80150f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80150f4:	2300      	movs	r3, #0
 80150f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80150fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d10b      	bne.n	801511a <xQueueReceive+0x32>
	__asm volatile
 8015102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015106:	f383 8811 	msr	BASEPRI, r3
 801510a:	f3bf 8f6f 	isb	sy
 801510e:	f3bf 8f4f 	dsb	sy
 8015112:	623b      	str	r3, [r7, #32]
}
 8015114:	bf00      	nop
 8015116:	bf00      	nop
 8015118:	e7fd      	b.n	8015116 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801511a:	68bb      	ldr	r3, [r7, #8]
 801511c:	2b00      	cmp	r3, #0
 801511e:	d103      	bne.n	8015128 <xQueueReceive+0x40>
 8015120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015124:	2b00      	cmp	r3, #0
 8015126:	d101      	bne.n	801512c <xQueueReceive+0x44>
 8015128:	2301      	movs	r3, #1
 801512a:	e000      	b.n	801512e <xQueueReceive+0x46>
 801512c:	2300      	movs	r3, #0
 801512e:	2b00      	cmp	r3, #0
 8015130:	d10b      	bne.n	801514a <xQueueReceive+0x62>
	__asm volatile
 8015132:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015136:	f383 8811 	msr	BASEPRI, r3
 801513a:	f3bf 8f6f 	isb	sy
 801513e:	f3bf 8f4f 	dsb	sy
 8015142:	61fb      	str	r3, [r7, #28]
}
 8015144:	bf00      	nop
 8015146:	bf00      	nop
 8015148:	e7fd      	b.n	8015146 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801514a:	f001 f9ad 	bl	80164a8 <xTaskGetSchedulerState>
 801514e:	4603      	mov	r3, r0
 8015150:	2b00      	cmp	r3, #0
 8015152:	d102      	bne.n	801515a <xQueueReceive+0x72>
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d101      	bne.n	801515e <xQueueReceive+0x76>
 801515a:	2301      	movs	r3, #1
 801515c:	e000      	b.n	8015160 <xQueueReceive+0x78>
 801515e:	2300      	movs	r3, #0
 8015160:	2b00      	cmp	r3, #0
 8015162:	d10b      	bne.n	801517c <xQueueReceive+0x94>
	__asm volatile
 8015164:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015168:	f383 8811 	msr	BASEPRI, r3
 801516c:	f3bf 8f6f 	isb	sy
 8015170:	f3bf 8f4f 	dsb	sy
 8015174:	61bb      	str	r3, [r7, #24]
}
 8015176:	bf00      	nop
 8015178:	bf00      	nop
 801517a:	e7fd      	b.n	8015178 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801517c:	f002 f944 	bl	8017408 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8015180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015184:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8015186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015188:	2b00      	cmp	r3, #0
 801518a:	d01f      	beq.n	80151cc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801518c:	68b9      	ldr	r1, [r7, #8]
 801518e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015190:	f000 fa1e 	bl	80155d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8015194:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015196:	1e5a      	subs	r2, r3, #1
 8015198:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801519a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801519c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801519e:	691b      	ldr	r3, [r3, #16]
 80151a0:	2b00      	cmp	r3, #0
 80151a2:	d00f      	beq.n	80151c4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80151a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151a6:	3310      	adds	r3, #16
 80151a8:	4618      	mov	r0, r3
 80151aa:	f000 ffa7 	bl	80160fc <xTaskRemoveFromEventList>
 80151ae:	4603      	mov	r3, r0
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d007      	beq.n	80151c4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80151b4:	4b3c      	ldr	r3, [pc, #240]	@ (80152a8 <xQueueReceive+0x1c0>)
 80151b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80151ba:	601a      	str	r2, [r3, #0]
 80151bc:	f3bf 8f4f 	dsb	sy
 80151c0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80151c4:	f002 f952 	bl	801746c <vPortExitCritical>
				return pdPASS;
 80151c8:	2301      	movs	r3, #1
 80151ca:	e069      	b.n	80152a0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d103      	bne.n	80151da <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80151d2:	f002 f94b 	bl	801746c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80151d6:	2300      	movs	r3, #0
 80151d8:	e062      	b.n	80152a0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80151da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d106      	bne.n	80151ee <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80151e0:	f107 0310 	add.w	r3, r7, #16
 80151e4:	4618      	mov	r0, r3
 80151e6:	f000 ffed 	bl	80161c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80151ea:	2301      	movs	r3, #1
 80151ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80151ee:	f002 f93d 	bl	801746c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80151f2:	f000 fd55 	bl	8015ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80151f6:	f002 f907 	bl	8017408 <vPortEnterCritical>
 80151fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80151fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015200:	b25b      	sxtb	r3, r3
 8015202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015206:	d103      	bne.n	8015210 <xQueueReceive+0x128>
 8015208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801520a:	2200      	movs	r2, #0
 801520c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015212:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8015216:	b25b      	sxtb	r3, r3
 8015218:	f1b3 3fff 	cmp.w	r3, #4294967295
 801521c:	d103      	bne.n	8015226 <xQueueReceive+0x13e>
 801521e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015220:	2200      	movs	r2, #0
 8015222:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015226:	f002 f921 	bl	801746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801522a:	1d3a      	adds	r2, r7, #4
 801522c:	f107 0310 	add.w	r3, r7, #16
 8015230:	4611      	mov	r1, r2
 8015232:	4618      	mov	r0, r3
 8015234:	f000 ffdc 	bl	80161f0 <xTaskCheckForTimeOut>
 8015238:	4603      	mov	r3, r0
 801523a:	2b00      	cmp	r3, #0
 801523c:	d123      	bne.n	8015286 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801523e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015240:	f000 fa3e 	bl	80156c0 <prvIsQueueEmpty>
 8015244:	4603      	mov	r3, r0
 8015246:	2b00      	cmp	r3, #0
 8015248:	d017      	beq.n	801527a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801524a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801524c:	3324      	adds	r3, #36	@ 0x24
 801524e:	687a      	ldr	r2, [r7, #4]
 8015250:	4611      	mov	r1, r2
 8015252:	4618      	mov	r0, r3
 8015254:	f000 ff00 	bl	8016058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801525a:	f000 f9df 	bl	801561c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801525e:	f000 fd2d 	bl	8015cbc <xTaskResumeAll>
 8015262:	4603      	mov	r3, r0
 8015264:	2b00      	cmp	r3, #0
 8015266:	d189      	bne.n	801517c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8015268:	4b0f      	ldr	r3, [pc, #60]	@ (80152a8 <xQueueReceive+0x1c0>)
 801526a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801526e:	601a      	str	r2, [r3, #0]
 8015270:	f3bf 8f4f 	dsb	sy
 8015274:	f3bf 8f6f 	isb	sy
 8015278:	e780      	b.n	801517c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801527a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801527c:	f000 f9ce 	bl	801561c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8015280:	f000 fd1c 	bl	8015cbc <xTaskResumeAll>
 8015284:	e77a      	b.n	801517c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8015286:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015288:	f000 f9c8 	bl	801561c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801528c:	f000 fd16 	bl	8015cbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8015290:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8015292:	f000 fa15 	bl	80156c0 <prvIsQueueEmpty>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	f43f af6f 	beq.w	801517c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801529e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80152a0:	4618      	mov	r0, r3
 80152a2:	3730      	adds	r7, #48	@ 0x30
 80152a4:	46bd      	mov	sp, r7
 80152a6:	bd80      	pop	{r7, pc}
 80152a8:	e000ed04 	.word	0xe000ed04

080152ac <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80152ac:	b580      	push	{r7, lr}
 80152ae:	b08e      	sub	sp, #56	@ 0x38
 80152b0:	af00      	add	r7, sp, #0
 80152b2:	6078      	str	r0, [r7, #4]
 80152b4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80152b6:	2300      	movs	r3, #0
 80152b8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80152be:	2300      	movs	r3, #0
 80152c0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80152c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d10b      	bne.n	80152e0 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80152c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152cc:	f383 8811 	msr	BASEPRI, r3
 80152d0:	f3bf 8f6f 	isb	sy
 80152d4:	f3bf 8f4f 	dsb	sy
 80152d8:	623b      	str	r3, [r7, #32]
}
 80152da:	bf00      	nop
 80152dc:	bf00      	nop
 80152de:	e7fd      	b.n	80152dc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80152e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80152e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152e4:	2b00      	cmp	r3, #0
 80152e6:	d00b      	beq.n	8015300 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80152e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152ec:	f383 8811 	msr	BASEPRI, r3
 80152f0:	f3bf 8f6f 	isb	sy
 80152f4:	f3bf 8f4f 	dsb	sy
 80152f8:	61fb      	str	r3, [r7, #28]
}
 80152fa:	bf00      	nop
 80152fc:	bf00      	nop
 80152fe:	e7fd      	b.n	80152fc <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8015300:	f001 f8d2 	bl	80164a8 <xTaskGetSchedulerState>
 8015304:	4603      	mov	r3, r0
 8015306:	2b00      	cmp	r3, #0
 8015308:	d102      	bne.n	8015310 <xQueueSemaphoreTake+0x64>
 801530a:	683b      	ldr	r3, [r7, #0]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d101      	bne.n	8015314 <xQueueSemaphoreTake+0x68>
 8015310:	2301      	movs	r3, #1
 8015312:	e000      	b.n	8015316 <xQueueSemaphoreTake+0x6a>
 8015314:	2300      	movs	r3, #0
 8015316:	2b00      	cmp	r3, #0
 8015318:	d10b      	bne.n	8015332 <xQueueSemaphoreTake+0x86>
	__asm volatile
 801531a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801531e:	f383 8811 	msr	BASEPRI, r3
 8015322:	f3bf 8f6f 	isb	sy
 8015326:	f3bf 8f4f 	dsb	sy
 801532a:	61bb      	str	r3, [r7, #24]
}
 801532c:	bf00      	nop
 801532e:	bf00      	nop
 8015330:	e7fd      	b.n	801532e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8015332:	f002 f869 	bl	8017408 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8015336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801533a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801533c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801533e:	2b00      	cmp	r3, #0
 8015340:	d024      	beq.n	801538c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8015342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015344:	1e5a      	subs	r2, r3, #1
 8015346:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015348:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801534a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d104      	bne.n	801535c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8015352:	f001 fa23 	bl	801679c <pvTaskIncrementMutexHeldCount>
 8015356:	4602      	mov	r2, r0
 8015358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801535a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801535c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801535e:	691b      	ldr	r3, [r3, #16]
 8015360:	2b00      	cmp	r3, #0
 8015362:	d00f      	beq.n	8015384 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015366:	3310      	adds	r3, #16
 8015368:	4618      	mov	r0, r3
 801536a:	f000 fec7 	bl	80160fc <xTaskRemoveFromEventList>
 801536e:	4603      	mov	r3, r0
 8015370:	2b00      	cmp	r3, #0
 8015372:	d007      	beq.n	8015384 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8015374:	4b54      	ldr	r3, [pc, #336]	@ (80154c8 <xQueueSemaphoreTake+0x21c>)
 8015376:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801537a:	601a      	str	r2, [r3, #0]
 801537c:	f3bf 8f4f 	dsb	sy
 8015380:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8015384:	f002 f872 	bl	801746c <vPortExitCritical>
				return pdPASS;
 8015388:	2301      	movs	r3, #1
 801538a:	e098      	b.n	80154be <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801538c:	683b      	ldr	r3, [r7, #0]
 801538e:	2b00      	cmp	r3, #0
 8015390:	d112      	bne.n	80153b8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8015392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015394:	2b00      	cmp	r3, #0
 8015396:	d00b      	beq.n	80153b0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8015398:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801539c:	f383 8811 	msr	BASEPRI, r3
 80153a0:	f3bf 8f6f 	isb	sy
 80153a4:	f3bf 8f4f 	dsb	sy
 80153a8:	617b      	str	r3, [r7, #20]
}
 80153aa:	bf00      	nop
 80153ac:	bf00      	nop
 80153ae:	e7fd      	b.n	80153ac <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80153b0:	f002 f85c 	bl	801746c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80153b4:	2300      	movs	r3, #0
 80153b6:	e082      	b.n	80154be <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80153b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d106      	bne.n	80153cc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80153be:	f107 030c 	add.w	r3, r7, #12
 80153c2:	4618      	mov	r0, r3
 80153c4:	f000 fefe 	bl	80161c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80153c8:	2301      	movs	r3, #1
 80153ca:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80153cc:	f002 f84e 	bl	801746c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80153d0:	f000 fc66 	bl	8015ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80153d4:	f002 f818 	bl	8017408 <vPortEnterCritical>
 80153d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80153de:	b25b      	sxtb	r3, r3
 80153e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153e4:	d103      	bne.n	80153ee <xQueueSemaphoreTake+0x142>
 80153e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153e8:	2200      	movs	r2, #0
 80153ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80153ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80153f4:	b25b      	sxtb	r3, r3
 80153f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153fa:	d103      	bne.n	8015404 <xQueueSemaphoreTake+0x158>
 80153fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80153fe:	2200      	movs	r2, #0
 8015400:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8015404:	f002 f832 	bl	801746c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8015408:	463a      	mov	r2, r7
 801540a:	f107 030c 	add.w	r3, r7, #12
 801540e:	4611      	mov	r1, r2
 8015410:	4618      	mov	r0, r3
 8015412:	f000 feed 	bl	80161f0 <xTaskCheckForTimeOut>
 8015416:	4603      	mov	r3, r0
 8015418:	2b00      	cmp	r3, #0
 801541a:	d132      	bne.n	8015482 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801541c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801541e:	f000 f94f 	bl	80156c0 <prvIsQueueEmpty>
 8015422:	4603      	mov	r3, r0
 8015424:	2b00      	cmp	r3, #0
 8015426:	d026      	beq.n	8015476 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8015428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801542a:	681b      	ldr	r3, [r3, #0]
 801542c:	2b00      	cmp	r3, #0
 801542e:	d109      	bne.n	8015444 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8015430:	f001 ffea 	bl	8017408 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015436:	689b      	ldr	r3, [r3, #8]
 8015438:	4618      	mov	r0, r3
 801543a:	f001 f853 	bl	80164e4 <xTaskPriorityInherit>
 801543e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8015440:	f002 f814 	bl	801746c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8015444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015446:	3324      	adds	r3, #36	@ 0x24
 8015448:	683a      	ldr	r2, [r7, #0]
 801544a:	4611      	mov	r1, r2
 801544c:	4618      	mov	r0, r3
 801544e:	f000 fe03 	bl	8016058 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8015452:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015454:	f000 f8e2 	bl	801561c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8015458:	f000 fc30 	bl	8015cbc <xTaskResumeAll>
 801545c:	4603      	mov	r3, r0
 801545e:	2b00      	cmp	r3, #0
 8015460:	f47f af67 	bne.w	8015332 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8015464:	4b18      	ldr	r3, [pc, #96]	@ (80154c8 <xQueueSemaphoreTake+0x21c>)
 8015466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801546a:	601a      	str	r2, [r3, #0]
 801546c:	f3bf 8f4f 	dsb	sy
 8015470:	f3bf 8f6f 	isb	sy
 8015474:	e75d      	b.n	8015332 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8015476:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015478:	f000 f8d0 	bl	801561c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801547c:	f000 fc1e 	bl	8015cbc <xTaskResumeAll>
 8015480:	e757      	b.n	8015332 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8015482:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8015484:	f000 f8ca 	bl	801561c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8015488:	f000 fc18 	bl	8015cbc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801548c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801548e:	f000 f917 	bl	80156c0 <prvIsQueueEmpty>
 8015492:	4603      	mov	r3, r0
 8015494:	2b00      	cmp	r3, #0
 8015496:	f43f af4c 	beq.w	8015332 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801549a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801549c:	2b00      	cmp	r3, #0
 801549e:	d00d      	beq.n	80154bc <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80154a0:	f001 ffb2 	bl	8017408 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80154a4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80154a6:	f000 f811 	bl	80154cc <prvGetDisinheritPriorityAfterTimeout>
 80154aa:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80154ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80154ae:	689b      	ldr	r3, [r3, #8]
 80154b0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80154b2:	4618      	mov	r0, r3
 80154b4:	f001 f8ee 	bl	8016694 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80154b8:	f001 ffd8 	bl	801746c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80154bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80154be:	4618      	mov	r0, r3
 80154c0:	3738      	adds	r7, #56	@ 0x38
 80154c2:	46bd      	mov	sp, r7
 80154c4:	bd80      	pop	{r7, pc}
 80154c6:	bf00      	nop
 80154c8:	e000ed04 	.word	0xe000ed04

080154cc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80154cc:	b480      	push	{r7}
 80154ce:	b085      	sub	sp, #20
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d006      	beq.n	80154ea <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80154e0:	681b      	ldr	r3, [r3, #0]
 80154e2:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80154e6:	60fb      	str	r3, [r7, #12]
 80154e8:	e001      	b.n	80154ee <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80154ea:	2300      	movs	r3, #0
 80154ec:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80154ee:	68fb      	ldr	r3, [r7, #12]
	}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3714      	adds	r7, #20
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr

080154fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80154fc:	b580      	push	{r7, lr}
 80154fe:	b086      	sub	sp, #24
 8015500:	af00      	add	r7, sp, #0
 8015502:	60f8      	str	r0, [r7, #12]
 8015504:	60b9      	str	r1, [r7, #8]
 8015506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8015508:	2300      	movs	r3, #0
 801550a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801550c:	68fb      	ldr	r3, [r7, #12]
 801550e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015510:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8015512:	68fb      	ldr	r3, [r7, #12]
 8015514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015516:	2b00      	cmp	r3, #0
 8015518:	d10d      	bne.n	8015536 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801551a:	68fb      	ldr	r3, [r7, #12]
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	2b00      	cmp	r3, #0
 8015520:	d14d      	bne.n	80155be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8015522:	68fb      	ldr	r3, [r7, #12]
 8015524:	689b      	ldr	r3, [r3, #8]
 8015526:	4618      	mov	r0, r3
 8015528:	f001 f844 	bl	80165b4 <xTaskPriorityDisinherit>
 801552c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	2200      	movs	r2, #0
 8015532:	609a      	str	r2, [r3, #8]
 8015534:	e043      	b.n	80155be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d119      	bne.n	8015570 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	6858      	ldr	r0, [r3, #4]
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015544:	461a      	mov	r2, r3
 8015546:	68b9      	ldr	r1, [r7, #8]
 8015548:	f006 f8c3 	bl	801b6d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801554c:	68fb      	ldr	r3, [r7, #12]
 801554e:	685a      	ldr	r2, [r3, #4]
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015554:	441a      	add	r2, r3
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	685a      	ldr	r2, [r3, #4]
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	689b      	ldr	r3, [r3, #8]
 8015562:	429a      	cmp	r2, r3
 8015564:	d32b      	bcc.n	80155be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	681a      	ldr	r2, [r3, #0]
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	605a      	str	r2, [r3, #4]
 801556e:	e026      	b.n	80155be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	68d8      	ldr	r0, [r3, #12]
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015578:	461a      	mov	r2, r3
 801557a:	68b9      	ldr	r1, [r7, #8]
 801557c:	f006 f8a9 	bl	801b6d2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8015580:	68fb      	ldr	r3, [r7, #12]
 8015582:	68da      	ldr	r2, [r3, #12]
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015588:	425b      	negs	r3, r3
 801558a:	441a      	add	r2, r3
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8015590:	68fb      	ldr	r3, [r7, #12]
 8015592:	68da      	ldr	r2, [r3, #12]
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	429a      	cmp	r2, r3
 801559a:	d207      	bcs.n	80155ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	689a      	ldr	r2, [r3, #8]
 80155a0:	68fb      	ldr	r3, [r7, #12]
 80155a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155a4:	425b      	negs	r3, r3
 80155a6:	441a      	add	r2, r3
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	2b02      	cmp	r3, #2
 80155b0:	d105      	bne.n	80155be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80155b2:	693b      	ldr	r3, [r7, #16]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d002      	beq.n	80155be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80155b8:	693b      	ldr	r3, [r7, #16]
 80155ba:	3b01      	subs	r3, #1
 80155bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80155be:	693b      	ldr	r3, [r7, #16]
 80155c0:	1c5a      	adds	r2, r3, #1
 80155c2:	68fb      	ldr	r3, [r7, #12]
 80155c4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80155c6:	697b      	ldr	r3, [r7, #20]
}
 80155c8:	4618      	mov	r0, r3
 80155ca:	3718      	adds	r7, #24
 80155cc:	46bd      	mov	sp, r7
 80155ce:	bd80      	pop	{r7, pc}

080155d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
 80155d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d018      	beq.n	8015614 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	68da      	ldr	r2, [r3, #12]
 80155e6:	687b      	ldr	r3, [r7, #4]
 80155e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80155ea:	441a      	add	r2, r3
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	68da      	ldr	r2, [r3, #12]
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	689b      	ldr	r3, [r3, #8]
 80155f8:	429a      	cmp	r2, r3
 80155fa:	d303      	bcc.n	8015604 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80155fc:	687b      	ldr	r3, [r7, #4]
 80155fe:	681a      	ldr	r2, [r3, #0]
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	68d9      	ldr	r1, [r3, #12]
 8015608:	687b      	ldr	r3, [r7, #4]
 801560a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801560c:	461a      	mov	r2, r3
 801560e:	6838      	ldr	r0, [r7, #0]
 8015610:	f006 f85f 	bl	801b6d2 <memcpy>
	}
}
 8015614:	bf00      	nop
 8015616:	3708      	adds	r7, #8
 8015618:	46bd      	mov	sp, r7
 801561a:	bd80      	pop	{r7, pc}

0801561c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801561c:	b580      	push	{r7, lr}
 801561e:	b084      	sub	sp, #16
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8015624:	f001 fef0 	bl	8017408 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801562e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015630:	e011      	b.n	8015656 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015636:	2b00      	cmp	r3, #0
 8015638:	d012      	beq.n	8015660 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	3324      	adds	r3, #36	@ 0x24
 801563e:	4618      	mov	r0, r3
 8015640:	f000 fd5c 	bl	80160fc <xTaskRemoveFromEventList>
 8015644:	4603      	mov	r3, r0
 8015646:	2b00      	cmp	r3, #0
 8015648:	d001      	beq.n	801564e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801564a:	f000 fe35 	bl	80162b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801564e:	7bfb      	ldrb	r3, [r7, #15]
 8015650:	3b01      	subs	r3, #1
 8015652:	b2db      	uxtb	r3, r3
 8015654:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8015656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801565a:	2b00      	cmp	r3, #0
 801565c:	dce9      	bgt.n	8015632 <prvUnlockQueue+0x16>
 801565e:	e000      	b.n	8015662 <prvUnlockQueue+0x46>
					break;
 8015660:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	22ff      	movs	r2, #255	@ 0xff
 8015666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801566a:	f001 feff 	bl	801746c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801566e:	f001 fecb 	bl	8017408 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8015678:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801567a:	e011      	b.n	80156a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	691b      	ldr	r3, [r3, #16]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d012      	beq.n	80156aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	3310      	adds	r3, #16
 8015688:	4618      	mov	r0, r3
 801568a:	f000 fd37 	bl	80160fc <xTaskRemoveFromEventList>
 801568e:	4603      	mov	r3, r0
 8015690:	2b00      	cmp	r3, #0
 8015692:	d001      	beq.n	8015698 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8015694:	f000 fe10 	bl	80162b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8015698:	7bbb      	ldrb	r3, [r7, #14]
 801569a:	3b01      	subs	r3, #1
 801569c:	b2db      	uxtb	r3, r3
 801569e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80156a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	dce9      	bgt.n	801567c <prvUnlockQueue+0x60>
 80156a8:	e000      	b.n	80156ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80156aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	22ff      	movs	r2, #255	@ 0xff
 80156b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80156b4:	f001 feda 	bl	801746c <vPortExitCritical>
}
 80156b8:	bf00      	nop
 80156ba:	3710      	adds	r7, #16
 80156bc:	46bd      	mov	sp, r7
 80156be:	bd80      	pop	{r7, pc}

080156c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b084      	sub	sp, #16
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80156c8:	f001 fe9e 	bl	8017408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80156d0:	2b00      	cmp	r3, #0
 80156d2:	d102      	bne.n	80156da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80156d4:	2301      	movs	r3, #1
 80156d6:	60fb      	str	r3, [r7, #12]
 80156d8:	e001      	b.n	80156de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80156da:	2300      	movs	r3, #0
 80156dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80156de:	f001 fec5 	bl	801746c <vPortExitCritical>

	return xReturn;
 80156e2:	68fb      	ldr	r3, [r7, #12]
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	3710      	adds	r7, #16
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}

080156ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b084      	sub	sp, #16
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80156f4:	f001 fe88 	bl	8017408 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80156f8:	687b      	ldr	r3, [r7, #4]
 80156fa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015700:	429a      	cmp	r2, r3
 8015702:	d102      	bne.n	801570a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8015704:	2301      	movs	r3, #1
 8015706:	60fb      	str	r3, [r7, #12]
 8015708:	e001      	b.n	801570e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801570a:	2300      	movs	r3, #0
 801570c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801570e:	f001 fead 	bl	801746c <vPortExitCritical>

	return xReturn;
 8015712:	68fb      	ldr	r3, [r7, #12]
}
 8015714:	4618      	mov	r0, r3
 8015716:	3710      	adds	r7, #16
 8015718:	46bd      	mov	sp, r7
 801571a:	bd80      	pop	{r7, pc}

0801571c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801571c:	b480      	push	{r7}
 801571e:	b085      	sub	sp, #20
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]
 8015724:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015726:	2300      	movs	r3, #0
 8015728:	60fb      	str	r3, [r7, #12]
 801572a:	e014      	b.n	8015756 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801572c:	4a0f      	ldr	r2, [pc, #60]	@ (801576c <vQueueAddToRegistry+0x50>)
 801572e:	68fb      	ldr	r3, [r7, #12]
 8015730:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8015734:	2b00      	cmp	r3, #0
 8015736:	d10b      	bne.n	8015750 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8015738:	490c      	ldr	r1, [pc, #48]	@ (801576c <vQueueAddToRegistry+0x50>)
 801573a:	68fb      	ldr	r3, [r7, #12]
 801573c:	683a      	ldr	r2, [r7, #0]
 801573e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8015742:	4a0a      	ldr	r2, [pc, #40]	@ (801576c <vQueueAddToRegistry+0x50>)
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	00db      	lsls	r3, r3, #3
 8015748:	4413      	add	r3, r2
 801574a:	687a      	ldr	r2, [r7, #4]
 801574c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801574e:	e006      	b.n	801575e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	3301      	adds	r3, #1
 8015754:	60fb      	str	r3, [r7, #12]
 8015756:	68fb      	ldr	r3, [r7, #12]
 8015758:	2b07      	cmp	r3, #7
 801575a:	d9e7      	bls.n	801572c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801575c:	bf00      	nop
 801575e:	bf00      	nop
 8015760:	3714      	adds	r7, #20
 8015762:	46bd      	mov	sp, r7
 8015764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015768:	4770      	bx	lr
 801576a:	bf00      	nop
 801576c:	20005d94 	.word	0x20005d94

08015770 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015770:	b580      	push	{r7, lr}
 8015772:	b086      	sub	sp, #24
 8015774:	af00      	add	r7, sp, #0
 8015776:	60f8      	str	r0, [r7, #12]
 8015778:	60b9      	str	r1, [r7, #8]
 801577a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801577c:	68fb      	ldr	r3, [r7, #12]
 801577e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8015780:	f001 fe42 	bl	8017408 <vPortEnterCritical>
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801578a:	b25b      	sxtb	r3, r3
 801578c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015790:	d103      	bne.n	801579a <vQueueWaitForMessageRestricted+0x2a>
 8015792:	697b      	ldr	r3, [r7, #20]
 8015794:	2200      	movs	r2, #0
 8015796:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801579a:	697b      	ldr	r3, [r7, #20]
 801579c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80157a0:	b25b      	sxtb	r3, r3
 80157a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80157a6:	d103      	bne.n	80157b0 <vQueueWaitForMessageRestricted+0x40>
 80157a8:	697b      	ldr	r3, [r7, #20]
 80157aa:	2200      	movs	r2, #0
 80157ac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80157b0:	f001 fe5c 	bl	801746c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80157b4:	697b      	ldr	r3, [r7, #20]
 80157b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80157b8:	2b00      	cmp	r3, #0
 80157ba:	d106      	bne.n	80157ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80157bc:	697b      	ldr	r3, [r7, #20]
 80157be:	3324      	adds	r3, #36	@ 0x24
 80157c0:	687a      	ldr	r2, [r7, #4]
 80157c2:	68b9      	ldr	r1, [r7, #8]
 80157c4:	4618      	mov	r0, r3
 80157c6:	f000 fc6d 	bl	80160a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80157ca:	6978      	ldr	r0, [r7, #20]
 80157cc:	f7ff ff26 	bl	801561c <prvUnlockQueue>
	}
 80157d0:	bf00      	nop
 80157d2:	3718      	adds	r7, #24
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b08e      	sub	sp, #56	@ 0x38
 80157dc:	af04      	add	r7, sp, #16
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	60b9      	str	r1, [r7, #8]
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80157e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d10b      	bne.n	8015804 <xTaskCreateStatic+0x2c>
	__asm volatile
 80157ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157f0:	f383 8811 	msr	BASEPRI, r3
 80157f4:	f3bf 8f6f 	isb	sy
 80157f8:	f3bf 8f4f 	dsb	sy
 80157fc:	623b      	str	r3, [r7, #32]
}
 80157fe:	bf00      	nop
 8015800:	bf00      	nop
 8015802:	e7fd      	b.n	8015800 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8015804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015806:	2b00      	cmp	r3, #0
 8015808:	d10b      	bne.n	8015822 <xTaskCreateStatic+0x4a>
	__asm volatile
 801580a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801580e:	f383 8811 	msr	BASEPRI, r3
 8015812:	f3bf 8f6f 	isb	sy
 8015816:	f3bf 8f4f 	dsb	sy
 801581a:	61fb      	str	r3, [r7, #28]
}
 801581c:	bf00      	nop
 801581e:	bf00      	nop
 8015820:	e7fd      	b.n	801581e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8015822:	23a8      	movs	r3, #168	@ 0xa8
 8015824:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8015826:	693b      	ldr	r3, [r7, #16]
 8015828:	2ba8      	cmp	r3, #168	@ 0xa8
 801582a:	d00b      	beq.n	8015844 <xTaskCreateStatic+0x6c>
	__asm volatile
 801582c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015830:	f383 8811 	msr	BASEPRI, r3
 8015834:	f3bf 8f6f 	isb	sy
 8015838:	f3bf 8f4f 	dsb	sy
 801583c:	61bb      	str	r3, [r7, #24]
}
 801583e:	bf00      	nop
 8015840:	bf00      	nop
 8015842:	e7fd      	b.n	8015840 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8015844:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8015846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015848:	2b00      	cmp	r3, #0
 801584a:	d01e      	beq.n	801588a <xTaskCreateStatic+0xb2>
 801584c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801584e:	2b00      	cmp	r3, #0
 8015850:	d01b      	beq.n	801588a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8015852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015854:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8015856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015858:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801585a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801585e:	2202      	movs	r2, #2
 8015860:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8015864:	2300      	movs	r3, #0
 8015866:	9303      	str	r3, [sp, #12]
 8015868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801586a:	9302      	str	r3, [sp, #8]
 801586c:	f107 0314 	add.w	r3, r7, #20
 8015870:	9301      	str	r3, [sp, #4]
 8015872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015874:	9300      	str	r3, [sp, #0]
 8015876:	683b      	ldr	r3, [r7, #0]
 8015878:	687a      	ldr	r2, [r7, #4]
 801587a:	68b9      	ldr	r1, [r7, #8]
 801587c:	68f8      	ldr	r0, [r7, #12]
 801587e:	f000 f851 	bl	8015924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015882:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8015884:	f000 f8f6 	bl	8015a74 <prvAddNewTaskToReadyList>
 8015888:	e001      	b.n	801588e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 801588a:	2300      	movs	r3, #0
 801588c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 801588e:	697b      	ldr	r3, [r7, #20]
	}
 8015890:	4618      	mov	r0, r3
 8015892:	3728      	adds	r7, #40	@ 0x28
 8015894:	46bd      	mov	sp, r7
 8015896:	bd80      	pop	{r7, pc}

08015898 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015898:	b580      	push	{r7, lr}
 801589a:	b08c      	sub	sp, #48	@ 0x30
 801589c:	af04      	add	r7, sp, #16
 801589e:	60f8      	str	r0, [r7, #12]
 80158a0:	60b9      	str	r1, [r7, #8]
 80158a2:	603b      	str	r3, [r7, #0]
 80158a4:	4613      	mov	r3, r2
 80158a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80158a8:	88fb      	ldrh	r3, [r7, #6]
 80158aa:	009b      	lsls	r3, r3, #2
 80158ac:	4618      	mov	r0, r3
 80158ae:	f001 fecd 	bl	801764c <pvPortMalloc>
 80158b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80158b4:	697b      	ldr	r3, [r7, #20]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d00e      	beq.n	80158d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80158ba:	20a8      	movs	r0, #168	@ 0xa8
 80158bc:	f001 fec6 	bl	801764c <pvPortMalloc>
 80158c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80158c2:	69fb      	ldr	r3, [r7, #28]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d003      	beq.n	80158d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80158c8:	69fb      	ldr	r3, [r7, #28]
 80158ca:	697a      	ldr	r2, [r7, #20]
 80158cc:	631a      	str	r2, [r3, #48]	@ 0x30
 80158ce:	e005      	b.n	80158dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80158d0:	6978      	ldr	r0, [r7, #20]
 80158d2:	f001 ff89 	bl	80177e8 <vPortFree>
 80158d6:	e001      	b.n	80158dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80158d8:	2300      	movs	r3, #0
 80158da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80158dc:	69fb      	ldr	r3, [r7, #28]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d017      	beq.n	8015912 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80158e2:	69fb      	ldr	r3, [r7, #28]
 80158e4:	2200      	movs	r2, #0
 80158e6:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80158ea:	88fa      	ldrh	r2, [r7, #6]
 80158ec:	2300      	movs	r3, #0
 80158ee:	9303      	str	r3, [sp, #12]
 80158f0:	69fb      	ldr	r3, [r7, #28]
 80158f2:	9302      	str	r3, [sp, #8]
 80158f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80158f6:	9301      	str	r3, [sp, #4]
 80158f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158fa:	9300      	str	r3, [sp, #0]
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	68b9      	ldr	r1, [r7, #8]
 8015900:	68f8      	ldr	r0, [r7, #12]
 8015902:	f000 f80f 	bl	8015924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8015906:	69f8      	ldr	r0, [r7, #28]
 8015908:	f000 f8b4 	bl	8015a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801590c:	2301      	movs	r3, #1
 801590e:	61bb      	str	r3, [r7, #24]
 8015910:	e002      	b.n	8015918 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8015912:	f04f 33ff 	mov.w	r3, #4294967295
 8015916:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015918:	69bb      	ldr	r3, [r7, #24]
	}
 801591a:	4618      	mov	r0, r3
 801591c:	3720      	adds	r7, #32
 801591e:	46bd      	mov	sp, r7
 8015920:	bd80      	pop	{r7, pc}
	...

08015924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8015924:	b580      	push	{r7, lr}
 8015926:	b088      	sub	sp, #32
 8015928:	af00      	add	r7, sp, #0
 801592a:	60f8      	str	r0, [r7, #12]
 801592c:	60b9      	str	r1, [r7, #8]
 801592e:	607a      	str	r2, [r7, #4]
 8015930:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8015932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015934:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	009b      	lsls	r3, r3, #2
 801593a:	461a      	mov	r2, r3
 801593c:	21a5      	movs	r1, #165	@ 0xa5
 801593e:	f005 fdd9 	bl	801b4f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8015942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015944:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801594c:	3b01      	subs	r3, #1
 801594e:	009b      	lsls	r3, r3, #2
 8015950:	4413      	add	r3, r2
 8015952:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8015954:	69bb      	ldr	r3, [r7, #24]
 8015956:	f023 0307 	bic.w	r3, r3, #7
 801595a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801595c:	69bb      	ldr	r3, [r7, #24]
 801595e:	f003 0307 	and.w	r3, r3, #7
 8015962:	2b00      	cmp	r3, #0
 8015964:	d00b      	beq.n	801597e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8015966:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801596a:	f383 8811 	msr	BASEPRI, r3
 801596e:	f3bf 8f6f 	isb	sy
 8015972:	f3bf 8f4f 	dsb	sy
 8015976:	617b      	str	r3, [r7, #20]
}
 8015978:	bf00      	nop
 801597a:	bf00      	nop
 801597c:	e7fd      	b.n	801597a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	2b00      	cmp	r3, #0
 8015982:	d01f      	beq.n	80159c4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015984:	2300      	movs	r3, #0
 8015986:	61fb      	str	r3, [r7, #28]
 8015988:	e012      	b.n	80159b0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801598a:	68ba      	ldr	r2, [r7, #8]
 801598c:	69fb      	ldr	r3, [r7, #28]
 801598e:	4413      	add	r3, r2
 8015990:	7819      	ldrb	r1, [r3, #0]
 8015992:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015994:	69fb      	ldr	r3, [r7, #28]
 8015996:	4413      	add	r3, r2
 8015998:	3334      	adds	r3, #52	@ 0x34
 801599a:	460a      	mov	r2, r1
 801599c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801599e:	68ba      	ldr	r2, [r7, #8]
 80159a0:	69fb      	ldr	r3, [r7, #28]
 80159a2:	4413      	add	r3, r2
 80159a4:	781b      	ldrb	r3, [r3, #0]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d006      	beq.n	80159b8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80159aa:	69fb      	ldr	r3, [r7, #28]
 80159ac:	3301      	adds	r3, #1
 80159ae:	61fb      	str	r3, [r7, #28]
 80159b0:	69fb      	ldr	r3, [r7, #28]
 80159b2:	2b0f      	cmp	r3, #15
 80159b4:	d9e9      	bls.n	801598a <prvInitialiseNewTask+0x66>
 80159b6:	e000      	b.n	80159ba <prvInitialiseNewTask+0x96>
			{
				break;
 80159b8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80159ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159bc:	2200      	movs	r2, #0
 80159be:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80159c2:	e003      	b.n	80159cc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80159c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159c6:	2200      	movs	r2, #0
 80159c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80159cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80159ce:	2b37      	cmp	r3, #55	@ 0x37
 80159d0:	d901      	bls.n	80159d6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80159d2:	2337      	movs	r3, #55	@ 0x37
 80159d4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80159d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80159da:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80159dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80159e0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80159e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159e4:	2200      	movs	r2, #0
 80159e6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80159e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159ea:	3304      	adds	r3, #4
 80159ec:	4618      	mov	r0, r3
 80159ee:	f7fe ffcf 	bl	8014990 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80159f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159f4:	3318      	adds	r3, #24
 80159f6:	4618      	mov	r0, r3
 80159f8:	f7fe ffca 	bl	8014990 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80159fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80159fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015a00:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015a02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015a04:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a0a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015a10:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8015a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a14:	2200      	movs	r2, #0
 8015a16:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a1c:	2200      	movs	r2, #0
 8015a1e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8015a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a24:	3354      	adds	r3, #84	@ 0x54
 8015a26:	224c      	movs	r2, #76	@ 0x4c
 8015a28:	2100      	movs	r1, #0
 8015a2a:	4618      	mov	r0, r3
 8015a2c:	f005 fd62 	bl	801b4f4 <memset>
 8015a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a32:	4a0d      	ldr	r2, [pc, #52]	@ (8015a68 <prvInitialiseNewTask+0x144>)
 8015a34:	659a      	str	r2, [r3, #88]	@ 0x58
 8015a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a38:	4a0c      	ldr	r2, [pc, #48]	@ (8015a6c <prvInitialiseNewTask+0x148>)
 8015a3a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8015a3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8015a70 <prvInitialiseNewTask+0x14c>)
 8015a40:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8015a42:	683a      	ldr	r2, [r7, #0]
 8015a44:	68f9      	ldr	r1, [r7, #12]
 8015a46:	69b8      	ldr	r0, [r7, #24]
 8015a48:	f001 fbaa 	bl	80171a0 <pxPortInitialiseStack>
 8015a4c:	4602      	mov	r2, r0
 8015a4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015a50:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8015a52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d002      	beq.n	8015a5e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8015a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015a5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015a5e:	bf00      	nop
 8015a60:	3720      	adds	r7, #32
 8015a62:	46bd      	mov	sp, r7
 8015a64:	bd80      	pop	{r7, pc}
 8015a66:	bf00      	nop
 8015a68:	2000c218 	.word	0x2000c218
 8015a6c:	2000c280 	.word	0x2000c280
 8015a70:	2000c2e8 	.word	0x2000c2e8

08015a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8015a74:	b580      	push	{r7, lr}
 8015a76:	b082      	sub	sp, #8
 8015a78:	af00      	add	r7, sp, #0
 8015a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8015a7c:	f001 fcc4 	bl	8017408 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8015a80:	4b2d      	ldr	r3, [pc, #180]	@ (8015b38 <prvAddNewTaskToReadyList+0xc4>)
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	3301      	adds	r3, #1
 8015a86:	4a2c      	ldr	r2, [pc, #176]	@ (8015b38 <prvAddNewTaskToReadyList+0xc4>)
 8015a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8015a8a:	4b2c      	ldr	r3, [pc, #176]	@ (8015b3c <prvAddNewTaskToReadyList+0xc8>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d109      	bne.n	8015aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8015a92:	4a2a      	ldr	r2, [pc, #168]	@ (8015b3c <prvAddNewTaskToReadyList+0xc8>)
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015a98:	4b27      	ldr	r3, [pc, #156]	@ (8015b38 <prvAddNewTaskToReadyList+0xc4>)
 8015a9a:	681b      	ldr	r3, [r3, #0]
 8015a9c:	2b01      	cmp	r3, #1
 8015a9e:	d110      	bne.n	8015ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015aa0:	f000 fc2e 	bl	8016300 <prvInitialiseTaskLists>
 8015aa4:	e00d      	b.n	8015ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8015aa6:	4b26      	ldr	r3, [pc, #152]	@ (8015b40 <prvAddNewTaskToReadyList+0xcc>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d109      	bne.n	8015ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015aae:	4b23      	ldr	r3, [pc, #140]	@ (8015b3c <prvAddNewTaskToReadyList+0xc8>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ab8:	429a      	cmp	r2, r3
 8015aba:	d802      	bhi.n	8015ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015abc:	4a1f      	ldr	r2, [pc, #124]	@ (8015b3c <prvAddNewTaskToReadyList+0xc8>)
 8015abe:	687b      	ldr	r3, [r7, #4]
 8015ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8015ac2:	4b20      	ldr	r3, [pc, #128]	@ (8015b44 <prvAddNewTaskToReadyList+0xd0>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
 8015ac6:	3301      	adds	r3, #1
 8015ac8:	4a1e      	ldr	r2, [pc, #120]	@ (8015b44 <prvAddNewTaskToReadyList+0xd0>)
 8015aca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015acc:	4b1d      	ldr	r3, [pc, #116]	@ (8015b44 <prvAddNewTaskToReadyList+0xd0>)
 8015ace:	681a      	ldr	r2, [r3, #0]
 8015ad0:	687b      	ldr	r3, [r7, #4]
 8015ad2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8015b48 <prvAddNewTaskToReadyList+0xd4>)
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	429a      	cmp	r2, r3
 8015ade:	d903      	bls.n	8015ae8 <prvAddNewTaskToReadyList+0x74>
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ae4:	4a18      	ldr	r2, [pc, #96]	@ (8015b48 <prvAddNewTaskToReadyList+0xd4>)
 8015ae6:	6013      	str	r3, [r2, #0]
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015aec:	4613      	mov	r3, r2
 8015aee:	009b      	lsls	r3, r3, #2
 8015af0:	4413      	add	r3, r2
 8015af2:	009b      	lsls	r3, r3, #2
 8015af4:	4a15      	ldr	r2, [pc, #84]	@ (8015b4c <prvAddNewTaskToReadyList+0xd8>)
 8015af6:	441a      	add	r2, r3
 8015af8:	687b      	ldr	r3, [r7, #4]
 8015afa:	3304      	adds	r3, #4
 8015afc:	4619      	mov	r1, r3
 8015afe:	4610      	mov	r0, r2
 8015b00:	f7fe ff53 	bl	80149aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8015b04:	f001 fcb2 	bl	801746c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015b08:	4b0d      	ldr	r3, [pc, #52]	@ (8015b40 <prvAddNewTaskToReadyList+0xcc>)
 8015b0a:	681b      	ldr	r3, [r3, #0]
 8015b0c:	2b00      	cmp	r3, #0
 8015b0e:	d00e      	beq.n	8015b2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015b10:	4b0a      	ldr	r3, [pc, #40]	@ (8015b3c <prvAddNewTaskToReadyList+0xc8>)
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b1a:	429a      	cmp	r2, r3
 8015b1c:	d207      	bcs.n	8015b2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015b1e:	4b0c      	ldr	r3, [pc, #48]	@ (8015b50 <prvAddNewTaskToReadyList+0xdc>)
 8015b20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015b24:	601a      	str	r2, [r3, #0]
 8015b26:	f3bf 8f4f 	dsb	sy
 8015b2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015b2e:	bf00      	nop
 8015b30:	3708      	adds	r7, #8
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	bf00      	nop
 8015b38:	200062a8 	.word	0x200062a8
 8015b3c:	20005dd4 	.word	0x20005dd4
 8015b40:	200062b4 	.word	0x200062b4
 8015b44:	200062c4 	.word	0x200062c4
 8015b48:	200062b0 	.word	0x200062b0
 8015b4c:	20005dd8 	.word	0x20005dd8
 8015b50:	e000ed04 	.word	0xe000ed04

08015b54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8015b54:	b580      	push	{r7, lr}
 8015b56:	b084      	sub	sp, #16
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8015b5c:	2300      	movs	r3, #0
 8015b5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	d018      	beq.n	8015b98 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8015b66:	4b14      	ldr	r3, [pc, #80]	@ (8015bb8 <vTaskDelay+0x64>)
 8015b68:	681b      	ldr	r3, [r3, #0]
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d00b      	beq.n	8015b86 <vTaskDelay+0x32>
	__asm volatile
 8015b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b72:	f383 8811 	msr	BASEPRI, r3
 8015b76:	f3bf 8f6f 	isb	sy
 8015b7a:	f3bf 8f4f 	dsb	sy
 8015b7e:	60bb      	str	r3, [r7, #8]
}
 8015b80:	bf00      	nop
 8015b82:	bf00      	nop
 8015b84:	e7fd      	b.n	8015b82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8015b86:	f000 f88b 	bl	8015ca0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8015b8a:	2100      	movs	r1, #0
 8015b8c:	6878      	ldr	r0, [r7, #4]
 8015b8e:	f000 fefb 	bl	8016988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8015b92:	f000 f893 	bl	8015cbc <xTaskResumeAll>
 8015b96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015b98:	68fb      	ldr	r3, [r7, #12]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d107      	bne.n	8015bae <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8015b9e:	4b07      	ldr	r3, [pc, #28]	@ (8015bbc <vTaskDelay+0x68>)
 8015ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015ba4:	601a      	str	r2, [r3, #0]
 8015ba6:	f3bf 8f4f 	dsb	sy
 8015baa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015bae:	bf00      	nop
 8015bb0:	3710      	adds	r7, #16
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	200062d0 	.word	0x200062d0
 8015bbc:	e000ed04 	.word	0xe000ed04

08015bc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015bc0:	b580      	push	{r7, lr}
 8015bc2:	b08a      	sub	sp, #40	@ 0x28
 8015bc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015bce:	463a      	mov	r2, r7
 8015bd0:	1d39      	adds	r1, r7, #4
 8015bd2:	f107 0308 	add.w	r3, r7, #8
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f7fe fe86 	bl	80148e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015bdc:	6839      	ldr	r1, [r7, #0]
 8015bde:	687b      	ldr	r3, [r7, #4]
 8015be0:	68ba      	ldr	r2, [r7, #8]
 8015be2:	9202      	str	r2, [sp, #8]
 8015be4:	9301      	str	r3, [sp, #4]
 8015be6:	2300      	movs	r3, #0
 8015be8:	9300      	str	r3, [sp, #0]
 8015bea:	2300      	movs	r3, #0
 8015bec:	460a      	mov	r2, r1
 8015bee:	4924      	ldr	r1, [pc, #144]	@ (8015c80 <vTaskStartScheduler+0xc0>)
 8015bf0:	4824      	ldr	r0, [pc, #144]	@ (8015c84 <vTaskStartScheduler+0xc4>)
 8015bf2:	f7ff fdf1 	bl	80157d8 <xTaskCreateStatic>
 8015bf6:	4603      	mov	r3, r0
 8015bf8:	4a23      	ldr	r2, [pc, #140]	@ (8015c88 <vTaskStartScheduler+0xc8>)
 8015bfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015bfc:	4b22      	ldr	r3, [pc, #136]	@ (8015c88 <vTaskStartScheduler+0xc8>)
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	2b00      	cmp	r3, #0
 8015c02:	d002      	beq.n	8015c0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8015c04:	2301      	movs	r3, #1
 8015c06:	617b      	str	r3, [r7, #20]
 8015c08:	e001      	b.n	8015c0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015c0a:	2300      	movs	r3, #0
 8015c0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015c0e:	697b      	ldr	r3, [r7, #20]
 8015c10:	2b01      	cmp	r3, #1
 8015c12:	d102      	bne.n	8015c1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8015c14:	f000 ff0c 	bl	8016a30 <xTimerCreateTimerTask>
 8015c18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015c1a:	697b      	ldr	r3, [r7, #20]
 8015c1c:	2b01      	cmp	r3, #1
 8015c1e:	d11b      	bne.n	8015c58 <vTaskStartScheduler+0x98>
	__asm volatile
 8015c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c24:	f383 8811 	msr	BASEPRI, r3
 8015c28:	f3bf 8f6f 	isb	sy
 8015c2c:	f3bf 8f4f 	dsb	sy
 8015c30:	613b      	str	r3, [r7, #16]
}
 8015c32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015c34:	4b15      	ldr	r3, [pc, #84]	@ (8015c8c <vTaskStartScheduler+0xcc>)
 8015c36:	681b      	ldr	r3, [r3, #0]
 8015c38:	3354      	adds	r3, #84	@ 0x54
 8015c3a:	4a15      	ldr	r2, [pc, #84]	@ (8015c90 <vTaskStartScheduler+0xd0>)
 8015c3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8015c3e:	4b15      	ldr	r3, [pc, #84]	@ (8015c94 <vTaskStartScheduler+0xd4>)
 8015c40:	f04f 32ff 	mov.w	r2, #4294967295
 8015c44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8015c46:	4b14      	ldr	r3, [pc, #80]	@ (8015c98 <vTaskStartScheduler+0xd8>)
 8015c48:	2201      	movs	r2, #1
 8015c4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8015c4c:	4b13      	ldr	r3, [pc, #76]	@ (8015c9c <vTaskStartScheduler+0xdc>)
 8015c4e:	2200      	movs	r2, #0
 8015c50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8015c52:	f001 fb35 	bl	80172c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8015c56:	e00f      	b.n	8015c78 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8015c58:	697b      	ldr	r3, [r7, #20]
 8015c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c5e:	d10b      	bne.n	8015c78 <vTaskStartScheduler+0xb8>
	__asm volatile
 8015c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015c64:	f383 8811 	msr	BASEPRI, r3
 8015c68:	f3bf 8f6f 	isb	sy
 8015c6c:	f3bf 8f4f 	dsb	sy
 8015c70:	60fb      	str	r3, [r7, #12]
}
 8015c72:	bf00      	nop
 8015c74:	bf00      	nop
 8015c76:	e7fd      	b.n	8015c74 <vTaskStartScheduler+0xb4>
}
 8015c78:	bf00      	nop
 8015c7a:	3718      	adds	r7, #24
 8015c7c:	46bd      	mov	sp, r7
 8015c7e:	bd80      	pop	{r7, pc}
 8015c80:	080213d4 	.word	0x080213d4
 8015c84:	080162d1 	.word	0x080162d1
 8015c88:	200062cc 	.word	0x200062cc
 8015c8c:	20005dd4 	.word	0x20005dd4
 8015c90:	20000160 	.word	0x20000160
 8015c94:	200062c8 	.word	0x200062c8
 8015c98:	200062b4 	.word	0x200062b4
 8015c9c:	200062ac 	.word	0x200062ac

08015ca0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015ca0:	b480      	push	{r7}
 8015ca2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8015ca4:	4b04      	ldr	r3, [pc, #16]	@ (8015cb8 <vTaskSuspendAll+0x18>)
 8015ca6:	681b      	ldr	r3, [r3, #0]
 8015ca8:	3301      	adds	r3, #1
 8015caa:	4a03      	ldr	r2, [pc, #12]	@ (8015cb8 <vTaskSuspendAll+0x18>)
 8015cac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015cae:	bf00      	nop
 8015cb0:	46bd      	mov	sp, r7
 8015cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cb6:	4770      	bx	lr
 8015cb8:	200062d0 	.word	0x200062d0

08015cbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015cbc:	b580      	push	{r7, lr}
 8015cbe:	b084      	sub	sp, #16
 8015cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8015cc2:	2300      	movs	r3, #0
 8015cc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015cca:	4b42      	ldr	r3, [pc, #264]	@ (8015dd4 <xTaskResumeAll+0x118>)
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d10b      	bne.n	8015cea <xTaskResumeAll+0x2e>
	__asm volatile
 8015cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015cd6:	f383 8811 	msr	BASEPRI, r3
 8015cda:	f3bf 8f6f 	isb	sy
 8015cde:	f3bf 8f4f 	dsb	sy
 8015ce2:	603b      	str	r3, [r7, #0]
}
 8015ce4:	bf00      	nop
 8015ce6:	bf00      	nop
 8015ce8:	e7fd      	b.n	8015ce6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015cea:	f001 fb8d 	bl	8017408 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015cee:	4b39      	ldr	r3, [pc, #228]	@ (8015dd4 <xTaskResumeAll+0x118>)
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	3b01      	subs	r3, #1
 8015cf4:	4a37      	ldr	r2, [pc, #220]	@ (8015dd4 <xTaskResumeAll+0x118>)
 8015cf6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015cf8:	4b36      	ldr	r3, [pc, #216]	@ (8015dd4 <xTaskResumeAll+0x118>)
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d162      	bne.n	8015dc6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015d00:	4b35      	ldr	r3, [pc, #212]	@ (8015dd8 <xTaskResumeAll+0x11c>)
 8015d02:	681b      	ldr	r3, [r3, #0]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d05e      	beq.n	8015dc6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015d08:	e02f      	b.n	8015d6a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015d0a:	4b34      	ldr	r3, [pc, #208]	@ (8015ddc <xTaskResumeAll+0x120>)
 8015d0c:	68db      	ldr	r3, [r3, #12]
 8015d0e:	68db      	ldr	r3, [r3, #12]
 8015d10:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015d12:	68fb      	ldr	r3, [r7, #12]
 8015d14:	3318      	adds	r3, #24
 8015d16:	4618      	mov	r0, r3
 8015d18:	f7fe fea4 	bl	8014a64 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	3304      	adds	r3, #4
 8015d20:	4618      	mov	r0, r3
 8015d22:	f7fe fe9f 	bl	8014a64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d2a:	4b2d      	ldr	r3, [pc, #180]	@ (8015de0 <xTaskResumeAll+0x124>)
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	429a      	cmp	r2, r3
 8015d30:	d903      	bls.n	8015d3a <xTaskResumeAll+0x7e>
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d36:	4a2a      	ldr	r2, [pc, #168]	@ (8015de0 <xTaskResumeAll+0x124>)
 8015d38:	6013      	str	r3, [r2, #0]
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d3e:	4613      	mov	r3, r2
 8015d40:	009b      	lsls	r3, r3, #2
 8015d42:	4413      	add	r3, r2
 8015d44:	009b      	lsls	r3, r3, #2
 8015d46:	4a27      	ldr	r2, [pc, #156]	@ (8015de4 <xTaskResumeAll+0x128>)
 8015d48:	441a      	add	r2, r3
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	3304      	adds	r3, #4
 8015d4e:	4619      	mov	r1, r3
 8015d50:	4610      	mov	r0, r2
 8015d52:	f7fe fe2a 	bl	80149aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d5a:	4b23      	ldr	r3, [pc, #140]	@ (8015de8 <xTaskResumeAll+0x12c>)
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d302      	bcc.n	8015d6a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8015d64:	4b21      	ldr	r3, [pc, #132]	@ (8015dec <xTaskResumeAll+0x130>)
 8015d66:	2201      	movs	r2, #1
 8015d68:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8015ddc <xTaskResumeAll+0x120>)
 8015d6c:	681b      	ldr	r3, [r3, #0]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d1cb      	bne.n	8015d0a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8015d72:	68fb      	ldr	r3, [r7, #12]
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d001      	beq.n	8015d7c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8015d78:	f000 fb66 	bl	8016448 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8015d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8015df0 <xTaskResumeAll+0x134>)
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d010      	beq.n	8015daa <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8015d88:	f000 f846 	bl	8015e18 <xTaskIncrementTick>
 8015d8c:	4603      	mov	r3, r0
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d002      	beq.n	8015d98 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8015d92:	4b16      	ldr	r3, [pc, #88]	@ (8015dec <xTaskResumeAll+0x130>)
 8015d94:	2201      	movs	r2, #1
 8015d96:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	3b01      	subs	r3, #1
 8015d9c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015d9e:	687b      	ldr	r3, [r7, #4]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d1f1      	bne.n	8015d88 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8015da4:	4b12      	ldr	r3, [pc, #72]	@ (8015df0 <xTaskResumeAll+0x134>)
 8015da6:	2200      	movs	r2, #0
 8015da8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015daa:	4b10      	ldr	r3, [pc, #64]	@ (8015dec <xTaskResumeAll+0x130>)
 8015dac:	681b      	ldr	r3, [r3, #0]
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d009      	beq.n	8015dc6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8015db2:	2301      	movs	r3, #1
 8015db4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8015db6:	4b0f      	ldr	r3, [pc, #60]	@ (8015df4 <xTaskResumeAll+0x138>)
 8015db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015dbc:	601a      	str	r2, [r3, #0]
 8015dbe:	f3bf 8f4f 	dsb	sy
 8015dc2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015dc6:	f001 fb51 	bl	801746c <vPortExitCritical>

	return xAlreadyYielded;
 8015dca:	68bb      	ldr	r3, [r7, #8]
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3710      	adds	r7, #16
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}
 8015dd4:	200062d0 	.word	0x200062d0
 8015dd8:	200062a8 	.word	0x200062a8
 8015ddc:	20006268 	.word	0x20006268
 8015de0:	200062b0 	.word	0x200062b0
 8015de4:	20005dd8 	.word	0x20005dd8
 8015de8:	20005dd4 	.word	0x20005dd4
 8015dec:	200062bc 	.word	0x200062bc
 8015df0:	200062b8 	.word	0x200062b8
 8015df4:	e000ed04 	.word	0xe000ed04

08015df8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015df8:	b480      	push	{r7}
 8015dfa:	b083      	sub	sp, #12
 8015dfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015dfe:	4b05      	ldr	r3, [pc, #20]	@ (8015e14 <xTaskGetTickCount+0x1c>)
 8015e00:	681b      	ldr	r3, [r3, #0]
 8015e02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8015e04:	687b      	ldr	r3, [r7, #4]
}
 8015e06:	4618      	mov	r0, r3
 8015e08:	370c      	adds	r7, #12
 8015e0a:	46bd      	mov	sp, r7
 8015e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e10:	4770      	bx	lr
 8015e12:	bf00      	nop
 8015e14:	200062ac 	.word	0x200062ac

08015e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015e18:	b580      	push	{r7, lr}
 8015e1a:	b086      	sub	sp, #24
 8015e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015e1e:	2300      	movs	r3, #0
 8015e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015e22:	4b4f      	ldr	r3, [pc, #316]	@ (8015f60 <xTaskIncrementTick+0x148>)
 8015e24:	681b      	ldr	r3, [r3, #0]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	f040 8090 	bne.w	8015f4c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015e2c:	4b4d      	ldr	r3, [pc, #308]	@ (8015f64 <xTaskIncrementTick+0x14c>)
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	3301      	adds	r3, #1
 8015e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8015e34:	4a4b      	ldr	r2, [pc, #300]	@ (8015f64 <xTaskIncrementTick+0x14c>)
 8015e36:	693b      	ldr	r3, [r7, #16]
 8015e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	2b00      	cmp	r3, #0
 8015e3e:	d121      	bne.n	8015e84 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8015e40:	4b49      	ldr	r3, [pc, #292]	@ (8015f68 <xTaskIncrementTick+0x150>)
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d00b      	beq.n	8015e62 <xTaskIncrementTick+0x4a>
	__asm volatile
 8015e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e4e:	f383 8811 	msr	BASEPRI, r3
 8015e52:	f3bf 8f6f 	isb	sy
 8015e56:	f3bf 8f4f 	dsb	sy
 8015e5a:	603b      	str	r3, [r7, #0]
}
 8015e5c:	bf00      	nop
 8015e5e:	bf00      	nop
 8015e60:	e7fd      	b.n	8015e5e <xTaskIncrementTick+0x46>
 8015e62:	4b41      	ldr	r3, [pc, #260]	@ (8015f68 <xTaskIncrementTick+0x150>)
 8015e64:	681b      	ldr	r3, [r3, #0]
 8015e66:	60fb      	str	r3, [r7, #12]
 8015e68:	4b40      	ldr	r3, [pc, #256]	@ (8015f6c <xTaskIncrementTick+0x154>)
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	4a3e      	ldr	r2, [pc, #248]	@ (8015f68 <xTaskIncrementTick+0x150>)
 8015e6e:	6013      	str	r3, [r2, #0]
 8015e70:	4a3e      	ldr	r2, [pc, #248]	@ (8015f6c <xTaskIncrementTick+0x154>)
 8015e72:	68fb      	ldr	r3, [r7, #12]
 8015e74:	6013      	str	r3, [r2, #0]
 8015e76:	4b3e      	ldr	r3, [pc, #248]	@ (8015f70 <xTaskIncrementTick+0x158>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	3301      	adds	r3, #1
 8015e7c:	4a3c      	ldr	r2, [pc, #240]	@ (8015f70 <xTaskIncrementTick+0x158>)
 8015e7e:	6013      	str	r3, [r2, #0]
 8015e80:	f000 fae2 	bl	8016448 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8015e84:	4b3b      	ldr	r3, [pc, #236]	@ (8015f74 <xTaskIncrementTick+0x15c>)
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	693a      	ldr	r2, [r7, #16]
 8015e8a:	429a      	cmp	r2, r3
 8015e8c:	d349      	bcc.n	8015f22 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015e8e:	4b36      	ldr	r3, [pc, #216]	@ (8015f68 <xTaskIncrementTick+0x150>)
 8015e90:	681b      	ldr	r3, [r3, #0]
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d104      	bne.n	8015ea2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015e98:	4b36      	ldr	r3, [pc, #216]	@ (8015f74 <xTaskIncrementTick+0x15c>)
 8015e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8015e9e:	601a      	str	r2, [r3, #0]
					break;
 8015ea0:	e03f      	b.n	8015f22 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015ea2:	4b31      	ldr	r3, [pc, #196]	@ (8015f68 <xTaskIncrementTick+0x150>)
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	68db      	ldr	r3, [r3, #12]
 8015ea8:	68db      	ldr	r3, [r3, #12]
 8015eaa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015eac:	68bb      	ldr	r3, [r7, #8]
 8015eae:	685b      	ldr	r3, [r3, #4]
 8015eb0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8015eb2:	693a      	ldr	r2, [r7, #16]
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	429a      	cmp	r2, r3
 8015eb8:	d203      	bcs.n	8015ec2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015eba:	4a2e      	ldr	r2, [pc, #184]	@ (8015f74 <xTaskIncrementTick+0x15c>)
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015ec0:	e02f      	b.n	8015f22 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015ec2:	68bb      	ldr	r3, [r7, #8]
 8015ec4:	3304      	adds	r3, #4
 8015ec6:	4618      	mov	r0, r3
 8015ec8:	f7fe fdcc 	bl	8014a64 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d004      	beq.n	8015ede <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8015ed4:	68bb      	ldr	r3, [r7, #8]
 8015ed6:	3318      	adds	r3, #24
 8015ed8:	4618      	mov	r0, r3
 8015eda:	f7fe fdc3 	bl	8014a64 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015ede:	68bb      	ldr	r3, [r7, #8]
 8015ee0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ee2:	4b25      	ldr	r3, [pc, #148]	@ (8015f78 <xTaskIncrementTick+0x160>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	429a      	cmp	r2, r3
 8015ee8:	d903      	bls.n	8015ef2 <xTaskIncrementTick+0xda>
 8015eea:	68bb      	ldr	r3, [r7, #8]
 8015eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015eee:	4a22      	ldr	r2, [pc, #136]	@ (8015f78 <xTaskIncrementTick+0x160>)
 8015ef0:	6013      	str	r3, [r2, #0]
 8015ef2:	68bb      	ldr	r3, [r7, #8]
 8015ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ef6:	4613      	mov	r3, r2
 8015ef8:	009b      	lsls	r3, r3, #2
 8015efa:	4413      	add	r3, r2
 8015efc:	009b      	lsls	r3, r3, #2
 8015efe:	4a1f      	ldr	r2, [pc, #124]	@ (8015f7c <xTaskIncrementTick+0x164>)
 8015f00:	441a      	add	r2, r3
 8015f02:	68bb      	ldr	r3, [r7, #8]
 8015f04:	3304      	adds	r3, #4
 8015f06:	4619      	mov	r1, r3
 8015f08:	4610      	mov	r0, r2
 8015f0a:	f7fe fd4e 	bl	80149aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015f0e:	68bb      	ldr	r3, [r7, #8]
 8015f10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f12:	4b1b      	ldr	r3, [pc, #108]	@ (8015f80 <xTaskIncrementTick+0x168>)
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015f18:	429a      	cmp	r2, r3
 8015f1a:	d3b8      	bcc.n	8015e8e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015f1c:	2301      	movs	r3, #1
 8015f1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015f20:	e7b5      	b.n	8015e8e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8015f22:	4b17      	ldr	r3, [pc, #92]	@ (8015f80 <xTaskIncrementTick+0x168>)
 8015f24:	681b      	ldr	r3, [r3, #0]
 8015f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015f28:	4914      	ldr	r1, [pc, #80]	@ (8015f7c <xTaskIncrementTick+0x164>)
 8015f2a:	4613      	mov	r3, r2
 8015f2c:	009b      	lsls	r3, r3, #2
 8015f2e:	4413      	add	r3, r2
 8015f30:	009b      	lsls	r3, r3, #2
 8015f32:	440b      	add	r3, r1
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	2b01      	cmp	r3, #1
 8015f38:	d901      	bls.n	8015f3e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8015f3a:	2301      	movs	r3, #1
 8015f3c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8015f3e:	4b11      	ldr	r3, [pc, #68]	@ (8015f84 <xTaskIncrementTick+0x16c>)
 8015f40:	681b      	ldr	r3, [r3, #0]
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d007      	beq.n	8015f56 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8015f46:	2301      	movs	r3, #1
 8015f48:	617b      	str	r3, [r7, #20]
 8015f4a:	e004      	b.n	8015f56 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8015f88 <xTaskIncrementTick+0x170>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	3301      	adds	r3, #1
 8015f52:	4a0d      	ldr	r2, [pc, #52]	@ (8015f88 <xTaskIncrementTick+0x170>)
 8015f54:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015f56:	697b      	ldr	r3, [r7, #20]
}
 8015f58:	4618      	mov	r0, r3
 8015f5a:	3718      	adds	r7, #24
 8015f5c:	46bd      	mov	sp, r7
 8015f5e:	bd80      	pop	{r7, pc}
 8015f60:	200062d0 	.word	0x200062d0
 8015f64:	200062ac 	.word	0x200062ac
 8015f68:	20006260 	.word	0x20006260
 8015f6c:	20006264 	.word	0x20006264
 8015f70:	200062c0 	.word	0x200062c0
 8015f74:	200062c8 	.word	0x200062c8
 8015f78:	200062b0 	.word	0x200062b0
 8015f7c:	20005dd8 	.word	0x20005dd8
 8015f80:	20005dd4 	.word	0x20005dd4
 8015f84:	200062bc 	.word	0x200062bc
 8015f88:	200062b8 	.word	0x200062b8

08015f8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015f8c:	b480      	push	{r7}
 8015f8e:	b085      	sub	sp, #20
 8015f90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8015f92:	4b2b      	ldr	r3, [pc, #172]	@ (8016040 <vTaskSwitchContext+0xb4>)
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d003      	beq.n	8015fa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015f9a:	4b2a      	ldr	r3, [pc, #168]	@ (8016044 <vTaskSwitchContext+0xb8>)
 8015f9c:	2201      	movs	r2, #1
 8015f9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015fa0:	e047      	b.n	8016032 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8015fa2:	4b28      	ldr	r3, [pc, #160]	@ (8016044 <vTaskSwitchContext+0xb8>)
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015fa8:	4b27      	ldr	r3, [pc, #156]	@ (8016048 <vTaskSwitchContext+0xbc>)
 8015faa:	681b      	ldr	r3, [r3, #0]
 8015fac:	60fb      	str	r3, [r7, #12]
 8015fae:	e011      	b.n	8015fd4 <vTaskSwitchContext+0x48>
 8015fb0:	68fb      	ldr	r3, [r7, #12]
 8015fb2:	2b00      	cmp	r3, #0
 8015fb4:	d10b      	bne.n	8015fce <vTaskSwitchContext+0x42>
	__asm volatile
 8015fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fba:	f383 8811 	msr	BASEPRI, r3
 8015fbe:	f3bf 8f6f 	isb	sy
 8015fc2:	f3bf 8f4f 	dsb	sy
 8015fc6:	607b      	str	r3, [r7, #4]
}
 8015fc8:	bf00      	nop
 8015fca:	bf00      	nop
 8015fcc:	e7fd      	b.n	8015fca <vTaskSwitchContext+0x3e>
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	3b01      	subs	r3, #1
 8015fd2:	60fb      	str	r3, [r7, #12]
 8015fd4:	491d      	ldr	r1, [pc, #116]	@ (801604c <vTaskSwitchContext+0xc0>)
 8015fd6:	68fa      	ldr	r2, [r7, #12]
 8015fd8:	4613      	mov	r3, r2
 8015fda:	009b      	lsls	r3, r3, #2
 8015fdc:	4413      	add	r3, r2
 8015fde:	009b      	lsls	r3, r3, #2
 8015fe0:	440b      	add	r3, r1
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	d0e3      	beq.n	8015fb0 <vTaskSwitchContext+0x24>
 8015fe8:	68fa      	ldr	r2, [r7, #12]
 8015fea:	4613      	mov	r3, r2
 8015fec:	009b      	lsls	r3, r3, #2
 8015fee:	4413      	add	r3, r2
 8015ff0:	009b      	lsls	r3, r3, #2
 8015ff2:	4a16      	ldr	r2, [pc, #88]	@ (801604c <vTaskSwitchContext+0xc0>)
 8015ff4:	4413      	add	r3, r2
 8015ff6:	60bb      	str	r3, [r7, #8]
 8015ff8:	68bb      	ldr	r3, [r7, #8]
 8015ffa:	685b      	ldr	r3, [r3, #4]
 8015ffc:	685a      	ldr	r2, [r3, #4]
 8015ffe:	68bb      	ldr	r3, [r7, #8]
 8016000:	605a      	str	r2, [r3, #4]
 8016002:	68bb      	ldr	r3, [r7, #8]
 8016004:	685a      	ldr	r2, [r3, #4]
 8016006:	68bb      	ldr	r3, [r7, #8]
 8016008:	3308      	adds	r3, #8
 801600a:	429a      	cmp	r2, r3
 801600c:	d104      	bne.n	8016018 <vTaskSwitchContext+0x8c>
 801600e:	68bb      	ldr	r3, [r7, #8]
 8016010:	685b      	ldr	r3, [r3, #4]
 8016012:	685a      	ldr	r2, [r3, #4]
 8016014:	68bb      	ldr	r3, [r7, #8]
 8016016:	605a      	str	r2, [r3, #4]
 8016018:	68bb      	ldr	r3, [r7, #8]
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	68db      	ldr	r3, [r3, #12]
 801601e:	4a0c      	ldr	r2, [pc, #48]	@ (8016050 <vTaskSwitchContext+0xc4>)
 8016020:	6013      	str	r3, [r2, #0]
 8016022:	4a09      	ldr	r2, [pc, #36]	@ (8016048 <vTaskSwitchContext+0xbc>)
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8016028:	4b09      	ldr	r3, [pc, #36]	@ (8016050 <vTaskSwitchContext+0xc4>)
 801602a:	681b      	ldr	r3, [r3, #0]
 801602c:	3354      	adds	r3, #84	@ 0x54
 801602e:	4a09      	ldr	r2, [pc, #36]	@ (8016054 <vTaskSwitchContext+0xc8>)
 8016030:	6013      	str	r3, [r2, #0]
}
 8016032:	bf00      	nop
 8016034:	3714      	adds	r7, #20
 8016036:	46bd      	mov	sp, r7
 8016038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603c:	4770      	bx	lr
 801603e:	bf00      	nop
 8016040:	200062d0 	.word	0x200062d0
 8016044:	200062bc 	.word	0x200062bc
 8016048:	200062b0 	.word	0x200062b0
 801604c:	20005dd8 	.word	0x20005dd8
 8016050:	20005dd4 	.word	0x20005dd4
 8016054:	20000160 	.word	0x20000160

08016058 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d10b      	bne.n	8016080 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8016068:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801606c:	f383 8811 	msr	BASEPRI, r3
 8016070:	f3bf 8f6f 	isb	sy
 8016074:	f3bf 8f4f 	dsb	sy
 8016078:	60fb      	str	r3, [r7, #12]
}
 801607a:	bf00      	nop
 801607c:	bf00      	nop
 801607e:	e7fd      	b.n	801607c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8016080:	4b07      	ldr	r3, [pc, #28]	@ (80160a0 <vTaskPlaceOnEventList+0x48>)
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	3318      	adds	r3, #24
 8016086:	4619      	mov	r1, r3
 8016088:	6878      	ldr	r0, [r7, #4]
 801608a:	f7fe fcb2 	bl	80149f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801608e:	2101      	movs	r1, #1
 8016090:	6838      	ldr	r0, [r7, #0]
 8016092:	f000 fc79 	bl	8016988 <prvAddCurrentTaskToDelayedList>
}
 8016096:	bf00      	nop
 8016098:	3710      	adds	r7, #16
 801609a:	46bd      	mov	sp, r7
 801609c:	bd80      	pop	{r7, pc}
 801609e:	bf00      	nop
 80160a0:	20005dd4 	.word	0x20005dd4

080160a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b086      	sub	sp, #24
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	60f8      	str	r0, [r7, #12]
 80160ac:	60b9      	str	r1, [r7, #8]
 80160ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80160b0:	68fb      	ldr	r3, [r7, #12]
 80160b2:	2b00      	cmp	r3, #0
 80160b4:	d10b      	bne.n	80160ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80160b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80160ba:	f383 8811 	msr	BASEPRI, r3
 80160be:	f3bf 8f6f 	isb	sy
 80160c2:	f3bf 8f4f 	dsb	sy
 80160c6:	617b      	str	r3, [r7, #20]
}
 80160c8:	bf00      	nop
 80160ca:	bf00      	nop
 80160cc:	e7fd      	b.n	80160ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80160ce:	4b0a      	ldr	r3, [pc, #40]	@ (80160f8 <vTaskPlaceOnEventListRestricted+0x54>)
 80160d0:	681b      	ldr	r3, [r3, #0]
 80160d2:	3318      	adds	r3, #24
 80160d4:	4619      	mov	r1, r3
 80160d6:	68f8      	ldr	r0, [r7, #12]
 80160d8:	f7fe fc67 	bl	80149aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2b00      	cmp	r3, #0
 80160e0:	d002      	beq.n	80160e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80160e2:	f04f 33ff 	mov.w	r3, #4294967295
 80160e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80160e8:	6879      	ldr	r1, [r7, #4]
 80160ea:	68b8      	ldr	r0, [r7, #8]
 80160ec:	f000 fc4c 	bl	8016988 <prvAddCurrentTaskToDelayedList>
	}
 80160f0:	bf00      	nop
 80160f2:	3718      	adds	r7, #24
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}
 80160f8:	20005dd4 	.word	0x20005dd4

080160fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b086      	sub	sp, #24
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016104:	687b      	ldr	r3, [r7, #4]
 8016106:	68db      	ldr	r3, [r3, #12]
 8016108:	68db      	ldr	r3, [r3, #12]
 801610a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801610c:	693b      	ldr	r3, [r7, #16]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d10b      	bne.n	801612a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8016112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016116:	f383 8811 	msr	BASEPRI, r3
 801611a:	f3bf 8f6f 	isb	sy
 801611e:	f3bf 8f4f 	dsb	sy
 8016122:	60fb      	str	r3, [r7, #12]
}
 8016124:	bf00      	nop
 8016126:	bf00      	nop
 8016128:	e7fd      	b.n	8016126 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801612a:	693b      	ldr	r3, [r7, #16]
 801612c:	3318      	adds	r3, #24
 801612e:	4618      	mov	r0, r3
 8016130:	f7fe fc98 	bl	8014a64 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016134:	4b1d      	ldr	r3, [pc, #116]	@ (80161ac <xTaskRemoveFromEventList+0xb0>)
 8016136:	681b      	ldr	r3, [r3, #0]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d11d      	bne.n	8016178 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801613c:	693b      	ldr	r3, [r7, #16]
 801613e:	3304      	adds	r3, #4
 8016140:	4618      	mov	r0, r3
 8016142:	f7fe fc8f 	bl	8014a64 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8016146:	693b      	ldr	r3, [r7, #16]
 8016148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801614a:	4b19      	ldr	r3, [pc, #100]	@ (80161b0 <xTaskRemoveFromEventList+0xb4>)
 801614c:	681b      	ldr	r3, [r3, #0]
 801614e:	429a      	cmp	r2, r3
 8016150:	d903      	bls.n	801615a <xTaskRemoveFromEventList+0x5e>
 8016152:	693b      	ldr	r3, [r7, #16]
 8016154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016156:	4a16      	ldr	r2, [pc, #88]	@ (80161b0 <xTaskRemoveFromEventList+0xb4>)
 8016158:	6013      	str	r3, [r2, #0]
 801615a:	693b      	ldr	r3, [r7, #16]
 801615c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801615e:	4613      	mov	r3, r2
 8016160:	009b      	lsls	r3, r3, #2
 8016162:	4413      	add	r3, r2
 8016164:	009b      	lsls	r3, r3, #2
 8016166:	4a13      	ldr	r2, [pc, #76]	@ (80161b4 <xTaskRemoveFromEventList+0xb8>)
 8016168:	441a      	add	r2, r3
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	3304      	adds	r3, #4
 801616e:	4619      	mov	r1, r3
 8016170:	4610      	mov	r0, r2
 8016172:	f7fe fc1a 	bl	80149aa <vListInsertEnd>
 8016176:	e005      	b.n	8016184 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8016178:	693b      	ldr	r3, [r7, #16]
 801617a:	3318      	adds	r3, #24
 801617c:	4619      	mov	r1, r3
 801617e:	480e      	ldr	r0, [pc, #56]	@ (80161b8 <xTaskRemoveFromEventList+0xbc>)
 8016180:	f7fe fc13 	bl	80149aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8016184:	693b      	ldr	r3, [r7, #16]
 8016186:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016188:	4b0c      	ldr	r3, [pc, #48]	@ (80161bc <xTaskRemoveFromEventList+0xc0>)
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801618e:	429a      	cmp	r2, r3
 8016190:	d905      	bls.n	801619e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8016192:	2301      	movs	r3, #1
 8016194:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8016196:	4b0a      	ldr	r3, [pc, #40]	@ (80161c0 <xTaskRemoveFromEventList+0xc4>)
 8016198:	2201      	movs	r2, #1
 801619a:	601a      	str	r2, [r3, #0]
 801619c:	e001      	b.n	80161a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 801619e:	2300      	movs	r3, #0
 80161a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80161a2:	697b      	ldr	r3, [r7, #20]
}
 80161a4:	4618      	mov	r0, r3
 80161a6:	3718      	adds	r7, #24
 80161a8:	46bd      	mov	sp, r7
 80161aa:	bd80      	pop	{r7, pc}
 80161ac:	200062d0 	.word	0x200062d0
 80161b0:	200062b0 	.word	0x200062b0
 80161b4:	20005dd8 	.word	0x20005dd8
 80161b8:	20006268 	.word	0x20006268
 80161bc:	20005dd4 	.word	0x20005dd4
 80161c0:	200062bc 	.word	0x200062bc

080161c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80161c4:	b480      	push	{r7}
 80161c6:	b083      	sub	sp, #12
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80161cc:	4b06      	ldr	r3, [pc, #24]	@ (80161e8 <vTaskInternalSetTimeOutState+0x24>)
 80161ce:	681a      	ldr	r2, [r3, #0]
 80161d0:	687b      	ldr	r3, [r7, #4]
 80161d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80161d4:	4b05      	ldr	r3, [pc, #20]	@ (80161ec <vTaskInternalSetTimeOutState+0x28>)
 80161d6:	681a      	ldr	r2, [r3, #0]
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	605a      	str	r2, [r3, #4]
}
 80161dc:	bf00      	nop
 80161de:	370c      	adds	r7, #12
 80161e0:	46bd      	mov	sp, r7
 80161e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161e6:	4770      	bx	lr
 80161e8:	200062c0 	.word	0x200062c0
 80161ec:	200062ac 	.word	0x200062ac

080161f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80161f0:	b580      	push	{r7, lr}
 80161f2:	b088      	sub	sp, #32
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
 80161f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d10b      	bne.n	8016218 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8016200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016204:	f383 8811 	msr	BASEPRI, r3
 8016208:	f3bf 8f6f 	isb	sy
 801620c:	f3bf 8f4f 	dsb	sy
 8016210:	613b      	str	r3, [r7, #16]
}
 8016212:	bf00      	nop
 8016214:	bf00      	nop
 8016216:	e7fd      	b.n	8016214 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8016218:	683b      	ldr	r3, [r7, #0]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d10b      	bne.n	8016236 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 801621e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016222:	f383 8811 	msr	BASEPRI, r3
 8016226:	f3bf 8f6f 	isb	sy
 801622a:	f3bf 8f4f 	dsb	sy
 801622e:	60fb      	str	r3, [r7, #12]
}
 8016230:	bf00      	nop
 8016232:	bf00      	nop
 8016234:	e7fd      	b.n	8016232 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8016236:	f001 f8e7 	bl	8017408 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801623a:	4b1d      	ldr	r3, [pc, #116]	@ (80162b0 <xTaskCheckForTimeOut+0xc0>)
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	685b      	ldr	r3, [r3, #4]
 8016244:	69ba      	ldr	r2, [r7, #24]
 8016246:	1ad3      	subs	r3, r2, r3
 8016248:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801624a:	683b      	ldr	r3, [r7, #0]
 801624c:	681b      	ldr	r3, [r3, #0]
 801624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016252:	d102      	bne.n	801625a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8016254:	2300      	movs	r3, #0
 8016256:	61fb      	str	r3, [r7, #28]
 8016258:	e023      	b.n	80162a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	681a      	ldr	r2, [r3, #0]
 801625e:	4b15      	ldr	r3, [pc, #84]	@ (80162b4 <xTaskCheckForTimeOut+0xc4>)
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	429a      	cmp	r2, r3
 8016264:	d007      	beq.n	8016276 <xTaskCheckForTimeOut+0x86>
 8016266:	687b      	ldr	r3, [r7, #4]
 8016268:	685b      	ldr	r3, [r3, #4]
 801626a:	69ba      	ldr	r2, [r7, #24]
 801626c:	429a      	cmp	r2, r3
 801626e:	d302      	bcc.n	8016276 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8016270:	2301      	movs	r3, #1
 8016272:	61fb      	str	r3, [r7, #28]
 8016274:	e015      	b.n	80162a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8016276:	683b      	ldr	r3, [r7, #0]
 8016278:	681b      	ldr	r3, [r3, #0]
 801627a:	697a      	ldr	r2, [r7, #20]
 801627c:	429a      	cmp	r2, r3
 801627e:	d20b      	bcs.n	8016298 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8016280:	683b      	ldr	r3, [r7, #0]
 8016282:	681a      	ldr	r2, [r3, #0]
 8016284:	697b      	ldr	r3, [r7, #20]
 8016286:	1ad2      	subs	r2, r2, r3
 8016288:	683b      	ldr	r3, [r7, #0]
 801628a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801628c:	6878      	ldr	r0, [r7, #4]
 801628e:	f7ff ff99 	bl	80161c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8016292:	2300      	movs	r3, #0
 8016294:	61fb      	str	r3, [r7, #28]
 8016296:	e004      	b.n	80162a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8016298:	683b      	ldr	r3, [r7, #0]
 801629a:	2200      	movs	r2, #0
 801629c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801629e:	2301      	movs	r3, #1
 80162a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80162a2:	f001 f8e3 	bl	801746c <vPortExitCritical>

	return xReturn;
 80162a6:	69fb      	ldr	r3, [r7, #28]
}
 80162a8:	4618      	mov	r0, r3
 80162aa:	3720      	adds	r7, #32
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}
 80162b0:	200062ac 	.word	0x200062ac
 80162b4:	200062c0 	.word	0x200062c0

080162b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80162b8:	b480      	push	{r7}
 80162ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80162bc:	4b03      	ldr	r3, [pc, #12]	@ (80162cc <vTaskMissedYield+0x14>)
 80162be:	2201      	movs	r2, #1
 80162c0:	601a      	str	r2, [r3, #0]
}
 80162c2:	bf00      	nop
 80162c4:	46bd      	mov	sp, r7
 80162c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ca:	4770      	bx	lr
 80162cc:	200062bc 	.word	0x200062bc

080162d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80162d0:	b580      	push	{r7, lr}
 80162d2:	b082      	sub	sp, #8
 80162d4:	af00      	add	r7, sp, #0
 80162d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80162d8:	f000 f852 	bl	8016380 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80162dc:	4b06      	ldr	r3, [pc, #24]	@ (80162f8 <prvIdleTask+0x28>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	2b01      	cmp	r3, #1
 80162e2:	d9f9      	bls.n	80162d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80162e4:	4b05      	ldr	r3, [pc, #20]	@ (80162fc <prvIdleTask+0x2c>)
 80162e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80162ea:	601a      	str	r2, [r3, #0]
 80162ec:	f3bf 8f4f 	dsb	sy
 80162f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80162f4:	e7f0      	b.n	80162d8 <prvIdleTask+0x8>
 80162f6:	bf00      	nop
 80162f8:	20005dd8 	.word	0x20005dd8
 80162fc:	e000ed04 	.word	0xe000ed04

08016300 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8016300:	b580      	push	{r7, lr}
 8016302:	b082      	sub	sp, #8
 8016304:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016306:	2300      	movs	r3, #0
 8016308:	607b      	str	r3, [r7, #4]
 801630a:	e00c      	b.n	8016326 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801630c:	687a      	ldr	r2, [r7, #4]
 801630e:	4613      	mov	r3, r2
 8016310:	009b      	lsls	r3, r3, #2
 8016312:	4413      	add	r3, r2
 8016314:	009b      	lsls	r3, r3, #2
 8016316:	4a12      	ldr	r2, [pc, #72]	@ (8016360 <prvInitialiseTaskLists+0x60>)
 8016318:	4413      	add	r3, r2
 801631a:	4618      	mov	r0, r3
 801631c:	f7fe fb18 	bl	8014950 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	3301      	adds	r3, #1
 8016324:	607b      	str	r3, [r7, #4]
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2b37      	cmp	r3, #55	@ 0x37
 801632a:	d9ef      	bls.n	801630c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801632c:	480d      	ldr	r0, [pc, #52]	@ (8016364 <prvInitialiseTaskLists+0x64>)
 801632e:	f7fe fb0f 	bl	8014950 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8016332:	480d      	ldr	r0, [pc, #52]	@ (8016368 <prvInitialiseTaskLists+0x68>)
 8016334:	f7fe fb0c 	bl	8014950 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8016338:	480c      	ldr	r0, [pc, #48]	@ (801636c <prvInitialiseTaskLists+0x6c>)
 801633a:	f7fe fb09 	bl	8014950 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801633e:	480c      	ldr	r0, [pc, #48]	@ (8016370 <prvInitialiseTaskLists+0x70>)
 8016340:	f7fe fb06 	bl	8014950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8016344:	480b      	ldr	r0, [pc, #44]	@ (8016374 <prvInitialiseTaskLists+0x74>)
 8016346:	f7fe fb03 	bl	8014950 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801634a:	4b0b      	ldr	r3, [pc, #44]	@ (8016378 <prvInitialiseTaskLists+0x78>)
 801634c:	4a05      	ldr	r2, [pc, #20]	@ (8016364 <prvInitialiseTaskLists+0x64>)
 801634e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8016350:	4b0a      	ldr	r3, [pc, #40]	@ (801637c <prvInitialiseTaskLists+0x7c>)
 8016352:	4a05      	ldr	r2, [pc, #20]	@ (8016368 <prvInitialiseTaskLists+0x68>)
 8016354:	601a      	str	r2, [r3, #0]
}
 8016356:	bf00      	nop
 8016358:	3708      	adds	r7, #8
 801635a:	46bd      	mov	sp, r7
 801635c:	bd80      	pop	{r7, pc}
 801635e:	bf00      	nop
 8016360:	20005dd8 	.word	0x20005dd8
 8016364:	20006238 	.word	0x20006238
 8016368:	2000624c 	.word	0x2000624c
 801636c:	20006268 	.word	0x20006268
 8016370:	2000627c 	.word	0x2000627c
 8016374:	20006294 	.word	0x20006294
 8016378:	20006260 	.word	0x20006260
 801637c:	20006264 	.word	0x20006264

08016380 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8016380:	b580      	push	{r7, lr}
 8016382:	b082      	sub	sp, #8
 8016384:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8016386:	e019      	b.n	80163bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8016388:	f001 f83e 	bl	8017408 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801638c:	4b10      	ldr	r3, [pc, #64]	@ (80163d0 <prvCheckTasksWaitingTermination+0x50>)
 801638e:	68db      	ldr	r3, [r3, #12]
 8016390:	68db      	ldr	r3, [r3, #12]
 8016392:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8016394:	687b      	ldr	r3, [r7, #4]
 8016396:	3304      	adds	r3, #4
 8016398:	4618      	mov	r0, r3
 801639a:	f7fe fb63 	bl	8014a64 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801639e:	4b0d      	ldr	r3, [pc, #52]	@ (80163d4 <prvCheckTasksWaitingTermination+0x54>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	3b01      	subs	r3, #1
 80163a4:	4a0b      	ldr	r2, [pc, #44]	@ (80163d4 <prvCheckTasksWaitingTermination+0x54>)
 80163a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80163a8:	4b0b      	ldr	r3, [pc, #44]	@ (80163d8 <prvCheckTasksWaitingTermination+0x58>)
 80163aa:	681b      	ldr	r3, [r3, #0]
 80163ac:	3b01      	subs	r3, #1
 80163ae:	4a0a      	ldr	r2, [pc, #40]	@ (80163d8 <prvCheckTasksWaitingTermination+0x58>)
 80163b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80163b2:	f001 f85b 	bl	801746c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80163b6:	6878      	ldr	r0, [r7, #4]
 80163b8:	f000 f810 	bl	80163dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80163bc:	4b06      	ldr	r3, [pc, #24]	@ (80163d8 <prvCheckTasksWaitingTermination+0x58>)
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d1e1      	bne.n	8016388 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80163c4:	bf00      	nop
 80163c6:	bf00      	nop
 80163c8:	3708      	adds	r7, #8
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}
 80163ce:	bf00      	nop
 80163d0:	2000627c 	.word	0x2000627c
 80163d4:	200062a8 	.word	0x200062a8
 80163d8:	20006290 	.word	0x20006290

080163dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b084      	sub	sp, #16
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	3354      	adds	r3, #84	@ 0x54
 80163e8:	4618      	mov	r0, r3
 80163ea:	f005 f8b1 	bl	801b550 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80163ee:	687b      	ldr	r3, [r7, #4]
 80163f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d108      	bne.n	801640a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80163fc:	4618      	mov	r0, r3
 80163fe:	f001 f9f3 	bl	80177e8 <vPortFree>
				vPortFree( pxTCB );
 8016402:	6878      	ldr	r0, [r7, #4]
 8016404:	f001 f9f0 	bl	80177e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8016408:	e019      	b.n	801643e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016410:	2b01      	cmp	r3, #1
 8016412:	d103      	bne.n	801641c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8016414:	6878      	ldr	r0, [r7, #4]
 8016416:	f001 f9e7 	bl	80177e8 <vPortFree>
	}
 801641a:	e010      	b.n	801643e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8016422:	2b02      	cmp	r3, #2
 8016424:	d00b      	beq.n	801643e <prvDeleteTCB+0x62>
	__asm volatile
 8016426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801642a:	f383 8811 	msr	BASEPRI, r3
 801642e:	f3bf 8f6f 	isb	sy
 8016432:	f3bf 8f4f 	dsb	sy
 8016436:	60fb      	str	r3, [r7, #12]
}
 8016438:	bf00      	nop
 801643a:	bf00      	nop
 801643c:	e7fd      	b.n	801643a <prvDeleteTCB+0x5e>
	}
 801643e:	bf00      	nop
 8016440:	3710      	adds	r7, #16
 8016442:	46bd      	mov	sp, r7
 8016444:	bd80      	pop	{r7, pc}
	...

08016448 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8016448:	b480      	push	{r7}
 801644a:	b083      	sub	sp, #12
 801644c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801644e:	4b0c      	ldr	r3, [pc, #48]	@ (8016480 <prvResetNextTaskUnblockTime+0x38>)
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	681b      	ldr	r3, [r3, #0]
 8016454:	2b00      	cmp	r3, #0
 8016456:	d104      	bne.n	8016462 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8016458:	4b0a      	ldr	r3, [pc, #40]	@ (8016484 <prvResetNextTaskUnblockTime+0x3c>)
 801645a:	f04f 32ff 	mov.w	r2, #4294967295
 801645e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8016460:	e008      	b.n	8016474 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016462:	4b07      	ldr	r3, [pc, #28]	@ (8016480 <prvResetNextTaskUnblockTime+0x38>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	68db      	ldr	r3, [r3, #12]
 8016468:	68db      	ldr	r3, [r3, #12]
 801646a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	685b      	ldr	r3, [r3, #4]
 8016470:	4a04      	ldr	r2, [pc, #16]	@ (8016484 <prvResetNextTaskUnblockTime+0x3c>)
 8016472:	6013      	str	r3, [r2, #0]
}
 8016474:	bf00      	nop
 8016476:	370c      	adds	r7, #12
 8016478:	46bd      	mov	sp, r7
 801647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801647e:	4770      	bx	lr
 8016480:	20006260 	.word	0x20006260
 8016484:	200062c8 	.word	0x200062c8

08016488 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8016488:	b480      	push	{r7}
 801648a:	b083      	sub	sp, #12
 801648c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 801648e:	4b05      	ldr	r3, [pc, #20]	@ (80164a4 <xTaskGetCurrentTaskHandle+0x1c>)
 8016490:	681b      	ldr	r3, [r3, #0]
 8016492:	607b      	str	r3, [r7, #4]

		return xReturn;
 8016494:	687b      	ldr	r3, [r7, #4]
	}
 8016496:	4618      	mov	r0, r3
 8016498:	370c      	adds	r7, #12
 801649a:	46bd      	mov	sp, r7
 801649c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164a0:	4770      	bx	lr
 80164a2:	bf00      	nop
 80164a4:	20005dd4 	.word	0x20005dd4

080164a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80164a8:	b480      	push	{r7}
 80164aa:	b083      	sub	sp, #12
 80164ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80164ae:	4b0b      	ldr	r3, [pc, #44]	@ (80164dc <xTaskGetSchedulerState+0x34>)
 80164b0:	681b      	ldr	r3, [r3, #0]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d102      	bne.n	80164bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80164b6:	2301      	movs	r3, #1
 80164b8:	607b      	str	r3, [r7, #4]
 80164ba:	e008      	b.n	80164ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80164bc:	4b08      	ldr	r3, [pc, #32]	@ (80164e0 <xTaskGetSchedulerState+0x38>)
 80164be:	681b      	ldr	r3, [r3, #0]
 80164c0:	2b00      	cmp	r3, #0
 80164c2:	d102      	bne.n	80164ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80164c4:	2302      	movs	r3, #2
 80164c6:	607b      	str	r3, [r7, #4]
 80164c8:	e001      	b.n	80164ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80164ca:	2300      	movs	r3, #0
 80164cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80164ce:	687b      	ldr	r3, [r7, #4]
	}
 80164d0:	4618      	mov	r0, r3
 80164d2:	370c      	adds	r7, #12
 80164d4:	46bd      	mov	sp, r7
 80164d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164da:	4770      	bx	lr
 80164dc:	200062b4 	.word	0x200062b4
 80164e0:	200062d0 	.word	0x200062d0

080164e4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b084      	sub	sp, #16
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80164f0:	2300      	movs	r3, #0
 80164f2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d051      	beq.n	801659e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80164fa:	68bb      	ldr	r3, [r7, #8]
 80164fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80164fe:	4b2a      	ldr	r3, [pc, #168]	@ (80165a8 <xTaskPriorityInherit+0xc4>)
 8016500:	681b      	ldr	r3, [r3, #0]
 8016502:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016504:	429a      	cmp	r2, r3
 8016506:	d241      	bcs.n	801658c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016508:	68bb      	ldr	r3, [r7, #8]
 801650a:	699b      	ldr	r3, [r3, #24]
 801650c:	2b00      	cmp	r3, #0
 801650e:	db06      	blt.n	801651e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016510:	4b25      	ldr	r3, [pc, #148]	@ (80165a8 <xTaskPriorityInherit+0xc4>)
 8016512:	681b      	ldr	r3, [r3, #0]
 8016514:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016516:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 801651a:	68bb      	ldr	r3, [r7, #8]
 801651c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801651e:	68bb      	ldr	r3, [r7, #8]
 8016520:	6959      	ldr	r1, [r3, #20]
 8016522:	68bb      	ldr	r3, [r7, #8]
 8016524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016526:	4613      	mov	r3, r2
 8016528:	009b      	lsls	r3, r3, #2
 801652a:	4413      	add	r3, r2
 801652c:	009b      	lsls	r3, r3, #2
 801652e:	4a1f      	ldr	r2, [pc, #124]	@ (80165ac <xTaskPriorityInherit+0xc8>)
 8016530:	4413      	add	r3, r2
 8016532:	4299      	cmp	r1, r3
 8016534:	d122      	bne.n	801657c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016536:	68bb      	ldr	r3, [r7, #8]
 8016538:	3304      	adds	r3, #4
 801653a:	4618      	mov	r0, r3
 801653c:	f7fe fa92 	bl	8014a64 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8016540:	4b19      	ldr	r3, [pc, #100]	@ (80165a8 <xTaskPriorityInherit+0xc4>)
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016546:	68bb      	ldr	r3, [r7, #8]
 8016548:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801654a:	68bb      	ldr	r3, [r7, #8]
 801654c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801654e:	4b18      	ldr	r3, [pc, #96]	@ (80165b0 <xTaskPriorityInherit+0xcc>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	429a      	cmp	r2, r3
 8016554:	d903      	bls.n	801655e <xTaskPriorityInherit+0x7a>
 8016556:	68bb      	ldr	r3, [r7, #8]
 8016558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801655a:	4a15      	ldr	r2, [pc, #84]	@ (80165b0 <xTaskPriorityInherit+0xcc>)
 801655c:	6013      	str	r3, [r2, #0]
 801655e:	68bb      	ldr	r3, [r7, #8]
 8016560:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016562:	4613      	mov	r3, r2
 8016564:	009b      	lsls	r3, r3, #2
 8016566:	4413      	add	r3, r2
 8016568:	009b      	lsls	r3, r3, #2
 801656a:	4a10      	ldr	r2, [pc, #64]	@ (80165ac <xTaskPriorityInherit+0xc8>)
 801656c:	441a      	add	r2, r3
 801656e:	68bb      	ldr	r3, [r7, #8]
 8016570:	3304      	adds	r3, #4
 8016572:	4619      	mov	r1, r3
 8016574:	4610      	mov	r0, r2
 8016576:	f7fe fa18 	bl	80149aa <vListInsertEnd>
 801657a:	e004      	b.n	8016586 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801657c:	4b0a      	ldr	r3, [pc, #40]	@ (80165a8 <xTaskPriorityInherit+0xc4>)
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016582:	68bb      	ldr	r3, [r7, #8]
 8016584:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8016586:	2301      	movs	r3, #1
 8016588:	60fb      	str	r3, [r7, #12]
 801658a:	e008      	b.n	801659e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016590:	4b05      	ldr	r3, [pc, #20]	@ (80165a8 <xTaskPriorityInherit+0xc4>)
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016596:	429a      	cmp	r2, r3
 8016598:	d201      	bcs.n	801659e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801659a:	2301      	movs	r3, #1
 801659c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801659e:	68fb      	ldr	r3, [r7, #12]
	}
 80165a0:	4618      	mov	r0, r3
 80165a2:	3710      	adds	r7, #16
 80165a4:	46bd      	mov	sp, r7
 80165a6:	bd80      	pop	{r7, pc}
 80165a8:	20005dd4 	.word	0x20005dd4
 80165ac:	20005dd8 	.word	0x20005dd8
 80165b0:	200062b0 	.word	0x200062b0

080165b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80165b4:	b580      	push	{r7, lr}
 80165b6:	b086      	sub	sp, #24
 80165b8:	af00      	add	r7, sp, #0
 80165ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80165c0:	2300      	movs	r3, #0
 80165c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80165c4:	687b      	ldr	r3, [r7, #4]
 80165c6:	2b00      	cmp	r3, #0
 80165c8:	d058      	beq.n	801667c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80165ca:	4b2f      	ldr	r3, [pc, #188]	@ (8016688 <xTaskPriorityDisinherit+0xd4>)
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	693a      	ldr	r2, [r7, #16]
 80165d0:	429a      	cmp	r2, r3
 80165d2:	d00b      	beq.n	80165ec <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80165d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165d8:	f383 8811 	msr	BASEPRI, r3
 80165dc:	f3bf 8f6f 	isb	sy
 80165e0:	f3bf 8f4f 	dsb	sy
 80165e4:	60fb      	str	r3, [r7, #12]
}
 80165e6:	bf00      	nop
 80165e8:	bf00      	nop
 80165ea:	e7fd      	b.n	80165e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80165ec:	693b      	ldr	r3, [r7, #16]
 80165ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d10b      	bne.n	801660c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80165f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80165f8:	f383 8811 	msr	BASEPRI, r3
 80165fc:	f3bf 8f6f 	isb	sy
 8016600:	f3bf 8f4f 	dsb	sy
 8016604:	60bb      	str	r3, [r7, #8]
}
 8016606:	bf00      	nop
 8016608:	bf00      	nop
 801660a:	e7fd      	b.n	8016608 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 801660c:	693b      	ldr	r3, [r7, #16]
 801660e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016610:	1e5a      	subs	r2, r3, #1
 8016612:	693b      	ldr	r3, [r7, #16]
 8016614:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8016616:	693b      	ldr	r3, [r7, #16]
 8016618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801661a:	693b      	ldr	r3, [r7, #16]
 801661c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801661e:	429a      	cmp	r2, r3
 8016620:	d02c      	beq.n	801667c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8016622:	693b      	ldr	r3, [r7, #16]
 8016624:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016626:	2b00      	cmp	r3, #0
 8016628:	d128      	bne.n	801667c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801662a:	693b      	ldr	r3, [r7, #16]
 801662c:	3304      	adds	r3, #4
 801662e:	4618      	mov	r0, r3
 8016630:	f7fe fa18 	bl	8014a64 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8016634:	693b      	ldr	r3, [r7, #16]
 8016636:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016638:	693b      	ldr	r3, [r7, #16]
 801663a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801663c:	693b      	ldr	r3, [r7, #16]
 801663e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016640:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016644:	693b      	ldr	r3, [r7, #16]
 8016646:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8016648:	693b      	ldr	r3, [r7, #16]
 801664a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801664c:	4b0f      	ldr	r3, [pc, #60]	@ (801668c <xTaskPriorityDisinherit+0xd8>)
 801664e:	681b      	ldr	r3, [r3, #0]
 8016650:	429a      	cmp	r2, r3
 8016652:	d903      	bls.n	801665c <xTaskPriorityDisinherit+0xa8>
 8016654:	693b      	ldr	r3, [r7, #16]
 8016656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016658:	4a0c      	ldr	r2, [pc, #48]	@ (801668c <xTaskPriorityDisinherit+0xd8>)
 801665a:	6013      	str	r3, [r2, #0]
 801665c:	693b      	ldr	r3, [r7, #16]
 801665e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016660:	4613      	mov	r3, r2
 8016662:	009b      	lsls	r3, r3, #2
 8016664:	4413      	add	r3, r2
 8016666:	009b      	lsls	r3, r3, #2
 8016668:	4a09      	ldr	r2, [pc, #36]	@ (8016690 <xTaskPriorityDisinherit+0xdc>)
 801666a:	441a      	add	r2, r3
 801666c:	693b      	ldr	r3, [r7, #16]
 801666e:	3304      	adds	r3, #4
 8016670:	4619      	mov	r1, r3
 8016672:	4610      	mov	r0, r2
 8016674:	f7fe f999 	bl	80149aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8016678:	2301      	movs	r3, #1
 801667a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801667c:	697b      	ldr	r3, [r7, #20]
	}
 801667e:	4618      	mov	r0, r3
 8016680:	3718      	adds	r7, #24
 8016682:	46bd      	mov	sp, r7
 8016684:	bd80      	pop	{r7, pc}
 8016686:	bf00      	nop
 8016688:	20005dd4 	.word	0x20005dd4
 801668c:	200062b0 	.word	0x200062b0
 8016690:	20005dd8 	.word	0x20005dd8

08016694 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8016694:	b580      	push	{r7, lr}
 8016696:	b088      	sub	sp, #32
 8016698:	af00      	add	r7, sp, #0
 801669a:	6078      	str	r0, [r7, #4]
 801669c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80166a2:	2301      	movs	r3, #1
 80166a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d06c      	beq.n	8016786 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80166ac:	69bb      	ldr	r3, [r7, #24]
 80166ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80166b0:	2b00      	cmp	r3, #0
 80166b2:	d10b      	bne.n	80166cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80166b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166b8:	f383 8811 	msr	BASEPRI, r3
 80166bc:	f3bf 8f6f 	isb	sy
 80166c0:	f3bf 8f4f 	dsb	sy
 80166c4:	60fb      	str	r3, [r7, #12]
}
 80166c6:	bf00      	nop
 80166c8:	bf00      	nop
 80166ca:	e7fd      	b.n	80166c8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80166cc:	69bb      	ldr	r3, [r7, #24]
 80166ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80166d0:	683a      	ldr	r2, [r7, #0]
 80166d2:	429a      	cmp	r2, r3
 80166d4:	d902      	bls.n	80166dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	61fb      	str	r3, [r7, #28]
 80166da:	e002      	b.n	80166e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80166dc:	69bb      	ldr	r3, [r7, #24]
 80166de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80166e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80166e2:	69bb      	ldr	r3, [r7, #24]
 80166e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80166e6:	69fa      	ldr	r2, [r7, #28]
 80166e8:	429a      	cmp	r2, r3
 80166ea:	d04c      	beq.n	8016786 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80166ec:	69bb      	ldr	r3, [r7, #24]
 80166ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80166f0:	697a      	ldr	r2, [r7, #20]
 80166f2:	429a      	cmp	r2, r3
 80166f4:	d147      	bne.n	8016786 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80166f6:	4b26      	ldr	r3, [pc, #152]	@ (8016790 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	69ba      	ldr	r2, [r7, #24]
 80166fc:	429a      	cmp	r2, r3
 80166fe:	d10b      	bne.n	8016718 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8016700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016704:	f383 8811 	msr	BASEPRI, r3
 8016708:	f3bf 8f6f 	isb	sy
 801670c:	f3bf 8f4f 	dsb	sy
 8016710:	60bb      	str	r3, [r7, #8]
}
 8016712:	bf00      	nop
 8016714:	bf00      	nop
 8016716:	e7fd      	b.n	8016714 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8016718:	69bb      	ldr	r3, [r7, #24]
 801671a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801671c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801671e:	69bb      	ldr	r3, [r7, #24]
 8016720:	69fa      	ldr	r2, [r7, #28]
 8016722:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8016724:	69bb      	ldr	r3, [r7, #24]
 8016726:	699b      	ldr	r3, [r3, #24]
 8016728:	2b00      	cmp	r3, #0
 801672a:	db04      	blt.n	8016736 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801672c:	69fb      	ldr	r3, [r7, #28]
 801672e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8016732:	69bb      	ldr	r3, [r7, #24]
 8016734:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8016736:	69bb      	ldr	r3, [r7, #24]
 8016738:	6959      	ldr	r1, [r3, #20]
 801673a:	693a      	ldr	r2, [r7, #16]
 801673c:	4613      	mov	r3, r2
 801673e:	009b      	lsls	r3, r3, #2
 8016740:	4413      	add	r3, r2
 8016742:	009b      	lsls	r3, r3, #2
 8016744:	4a13      	ldr	r2, [pc, #76]	@ (8016794 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016746:	4413      	add	r3, r2
 8016748:	4299      	cmp	r1, r3
 801674a:	d11c      	bne.n	8016786 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801674c:	69bb      	ldr	r3, [r7, #24]
 801674e:	3304      	adds	r3, #4
 8016750:	4618      	mov	r0, r3
 8016752:	f7fe f987 	bl	8014a64 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8016756:	69bb      	ldr	r3, [r7, #24]
 8016758:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801675a:	4b0f      	ldr	r3, [pc, #60]	@ (8016798 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	429a      	cmp	r2, r3
 8016760:	d903      	bls.n	801676a <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8016762:	69bb      	ldr	r3, [r7, #24]
 8016764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016766:	4a0c      	ldr	r2, [pc, #48]	@ (8016798 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8016768:	6013      	str	r3, [r2, #0]
 801676a:	69bb      	ldr	r3, [r7, #24]
 801676c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801676e:	4613      	mov	r3, r2
 8016770:	009b      	lsls	r3, r3, #2
 8016772:	4413      	add	r3, r2
 8016774:	009b      	lsls	r3, r3, #2
 8016776:	4a07      	ldr	r2, [pc, #28]	@ (8016794 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8016778:	441a      	add	r2, r3
 801677a:	69bb      	ldr	r3, [r7, #24]
 801677c:	3304      	adds	r3, #4
 801677e:	4619      	mov	r1, r3
 8016780:	4610      	mov	r0, r2
 8016782:	f7fe f912 	bl	80149aa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8016786:	bf00      	nop
 8016788:	3720      	adds	r7, #32
 801678a:	46bd      	mov	sp, r7
 801678c:	bd80      	pop	{r7, pc}
 801678e:	bf00      	nop
 8016790:	20005dd4 	.word	0x20005dd4
 8016794:	20005dd8 	.word	0x20005dd8
 8016798:	200062b0 	.word	0x200062b0

0801679c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801679c:	b480      	push	{r7}
 801679e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80167a0:	4b07      	ldr	r3, [pc, #28]	@ (80167c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	d004      	beq.n	80167b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80167a8:	4b05      	ldr	r3, [pc, #20]	@ (80167c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80167aa:	681b      	ldr	r3, [r3, #0]
 80167ac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80167ae:	3201      	adds	r2, #1
 80167b0:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 80167b2:	4b03      	ldr	r3, [pc, #12]	@ (80167c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80167b4:	681b      	ldr	r3, [r3, #0]
	}
 80167b6:	4618      	mov	r0, r3
 80167b8:	46bd      	mov	sp, r7
 80167ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167be:	4770      	bx	lr
 80167c0:	20005dd4 	.word	0x20005dd4

080167c4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 80167c4:	b580      	push	{r7, lr}
 80167c6:	b084      	sub	sp, #16
 80167c8:	af00      	add	r7, sp, #0
 80167ca:	6078      	str	r0, [r7, #4]
 80167cc:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 80167ce:	f000 fe1b 	bl	8017408 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 80167d2:	4b20      	ldr	r3, [pc, #128]	@ (8016854 <ulTaskNotifyTake+0x90>)
 80167d4:	681b      	ldr	r3, [r3, #0]
 80167d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80167da:	2b00      	cmp	r3, #0
 80167dc:	d113      	bne.n	8016806 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80167de:	4b1d      	ldr	r3, [pc, #116]	@ (8016854 <ulTaskNotifyTake+0x90>)
 80167e0:	681b      	ldr	r3, [r3, #0]
 80167e2:	2201      	movs	r2, #1
 80167e4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 80167e8:	683b      	ldr	r3, [r7, #0]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d00b      	beq.n	8016806 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80167ee:	2101      	movs	r1, #1
 80167f0:	6838      	ldr	r0, [r7, #0]
 80167f2:	f000 f8c9 	bl	8016988 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80167f6:	4b18      	ldr	r3, [pc, #96]	@ (8016858 <ulTaskNotifyTake+0x94>)
 80167f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80167fc:	601a      	str	r2, [r3, #0]
 80167fe:	f3bf 8f4f 	dsb	sy
 8016802:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8016806:	f000 fe31 	bl	801746c <vPortExitCritical>

		taskENTER_CRITICAL();
 801680a:	f000 fdfd 	bl	8017408 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 801680e:	4b11      	ldr	r3, [pc, #68]	@ (8016854 <ulTaskNotifyTake+0x90>)
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016816:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	2b00      	cmp	r3, #0
 801681c:	d00e      	beq.n	801683c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 801681e:	687b      	ldr	r3, [r7, #4]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d005      	beq.n	8016830 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8016824:	4b0b      	ldr	r3, [pc, #44]	@ (8016854 <ulTaskNotifyTake+0x90>)
 8016826:	681b      	ldr	r3, [r3, #0]
 8016828:	2200      	movs	r2, #0
 801682a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 801682e:	e005      	b.n	801683c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8016830:	4b08      	ldr	r3, [pc, #32]	@ (8016854 <ulTaskNotifyTake+0x90>)
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	68fa      	ldr	r2, [r7, #12]
 8016836:	3a01      	subs	r2, #1
 8016838:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801683c:	4b05      	ldr	r3, [pc, #20]	@ (8016854 <ulTaskNotifyTake+0x90>)
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	2200      	movs	r2, #0
 8016842:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8016846:	f000 fe11 	bl	801746c <vPortExitCritical>

		return ulReturn;
 801684a:	68fb      	ldr	r3, [r7, #12]
	}
 801684c:	4618      	mov	r0, r3
 801684e:	3710      	adds	r7, #16
 8016850:	46bd      	mov	sp, r7
 8016852:	bd80      	pop	{r7, pc}
 8016854:	20005dd4 	.word	0x20005dd4
 8016858:	e000ed04 	.word	0xe000ed04

0801685c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801685c:	b580      	push	{r7, lr}
 801685e:	b08a      	sub	sp, #40	@ 0x28
 8016860:	af00      	add	r7, sp, #0
 8016862:	6078      	str	r0, [r7, #4]
 8016864:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8016866:	687b      	ldr	r3, [r7, #4]
 8016868:	2b00      	cmp	r3, #0
 801686a:	d10b      	bne.n	8016884 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 801686c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016870:	f383 8811 	msr	BASEPRI, r3
 8016874:	f3bf 8f6f 	isb	sy
 8016878:	f3bf 8f4f 	dsb	sy
 801687c:	61bb      	str	r3, [r7, #24]
}
 801687e:	bf00      	nop
 8016880:	bf00      	nop
 8016882:	e7fd      	b.n	8016880 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8016884:	f000 fea0 	bl	80175c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8016888:	687b      	ldr	r3, [r7, #4]
 801688a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 801688c:	f3ef 8211 	mrs	r2, BASEPRI
 8016890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016894:	f383 8811 	msr	BASEPRI, r3
 8016898:	f3bf 8f6f 	isb	sy
 801689c:	f3bf 8f4f 	dsb	sy
 80168a0:	617a      	str	r2, [r7, #20]
 80168a2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80168a4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80168a6:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80168a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168aa:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 80168ae:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80168b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168b2:	2202      	movs	r2, #2
 80168b4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 80168b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80168be:	1c5a      	adds	r2, r3, #1
 80168c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168c2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80168c6:	7ffb      	ldrb	r3, [r7, #31]
 80168c8:	2b01      	cmp	r3, #1
 80168ca:	d147      	bne.n	801695c <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80168cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80168d0:	2b00      	cmp	r3, #0
 80168d2:	d00b      	beq.n	80168ec <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 80168d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80168d8:	f383 8811 	msr	BASEPRI, r3
 80168dc:	f3bf 8f6f 	isb	sy
 80168e0:	f3bf 8f4f 	dsb	sy
 80168e4:	60fb      	str	r3, [r7, #12]
}
 80168e6:	bf00      	nop
 80168e8:	bf00      	nop
 80168ea:	e7fd      	b.n	80168e8 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80168ec:	4b20      	ldr	r3, [pc, #128]	@ (8016970 <vTaskNotifyGiveFromISR+0x114>)
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d11d      	bne.n	8016930 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80168f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168f6:	3304      	adds	r3, #4
 80168f8:	4618      	mov	r0, r3
 80168fa:	f7fe f8b3 	bl	8014a64 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80168fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016902:	4b1c      	ldr	r3, [pc, #112]	@ (8016974 <vTaskNotifyGiveFromISR+0x118>)
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	429a      	cmp	r2, r3
 8016908:	d903      	bls.n	8016912 <vTaskNotifyGiveFromISR+0xb6>
 801690a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801690c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801690e:	4a19      	ldr	r2, [pc, #100]	@ (8016974 <vTaskNotifyGiveFromISR+0x118>)
 8016910:	6013      	str	r3, [r2, #0]
 8016912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016916:	4613      	mov	r3, r2
 8016918:	009b      	lsls	r3, r3, #2
 801691a:	4413      	add	r3, r2
 801691c:	009b      	lsls	r3, r3, #2
 801691e:	4a16      	ldr	r2, [pc, #88]	@ (8016978 <vTaskNotifyGiveFromISR+0x11c>)
 8016920:	441a      	add	r2, r3
 8016922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016924:	3304      	adds	r3, #4
 8016926:	4619      	mov	r1, r3
 8016928:	4610      	mov	r0, r2
 801692a:	f7fe f83e 	bl	80149aa <vListInsertEnd>
 801692e:	e005      	b.n	801693c <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8016930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016932:	3318      	adds	r3, #24
 8016934:	4619      	mov	r1, r3
 8016936:	4811      	ldr	r0, [pc, #68]	@ (801697c <vTaskNotifyGiveFromISR+0x120>)
 8016938:	f7fe f837 	bl	80149aa <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 801693c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801693e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016940:	4b0f      	ldr	r3, [pc, #60]	@ (8016980 <vTaskNotifyGiveFromISR+0x124>)
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016946:	429a      	cmp	r2, r3
 8016948:	d908      	bls.n	801695c <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 801694a:	683b      	ldr	r3, [r7, #0]
 801694c:	2b00      	cmp	r3, #0
 801694e:	d002      	beq.n	8016956 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8016950:	683b      	ldr	r3, [r7, #0]
 8016952:	2201      	movs	r2, #1
 8016954:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8016956:	4b0b      	ldr	r3, [pc, #44]	@ (8016984 <vTaskNotifyGiveFromISR+0x128>)
 8016958:	2201      	movs	r2, #1
 801695a:	601a      	str	r2, [r3, #0]
 801695c:	6a3b      	ldr	r3, [r7, #32]
 801695e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 8016960:	68bb      	ldr	r3, [r7, #8]
 8016962:	f383 8811 	msr	BASEPRI, r3
}
 8016966:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8016968:	bf00      	nop
 801696a:	3728      	adds	r7, #40	@ 0x28
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}
 8016970:	200062d0 	.word	0x200062d0
 8016974:	200062b0 	.word	0x200062b0
 8016978:	20005dd8 	.word	0x20005dd8
 801697c:	20006268 	.word	0x20006268
 8016980:	20005dd4 	.word	0x20005dd4
 8016984:	200062bc 	.word	0x200062bc

08016988 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b084      	sub	sp, #16
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8016992:	4b21      	ldr	r3, [pc, #132]	@ (8016a18 <prvAddCurrentTaskToDelayedList+0x90>)
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016998:	4b20      	ldr	r3, [pc, #128]	@ (8016a1c <prvAddCurrentTaskToDelayedList+0x94>)
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	3304      	adds	r3, #4
 801699e:	4618      	mov	r0, r3
 80169a0:	f7fe f860 	bl	8014a64 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80169a4:	687b      	ldr	r3, [r7, #4]
 80169a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80169aa:	d10a      	bne.n	80169c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80169ac:	683b      	ldr	r3, [r7, #0]
 80169ae:	2b00      	cmp	r3, #0
 80169b0:	d007      	beq.n	80169c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80169b2:	4b1a      	ldr	r3, [pc, #104]	@ (8016a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	3304      	adds	r3, #4
 80169b8:	4619      	mov	r1, r3
 80169ba:	4819      	ldr	r0, [pc, #100]	@ (8016a20 <prvAddCurrentTaskToDelayedList+0x98>)
 80169bc:	f7fd fff5 	bl	80149aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80169c0:	e026      	b.n	8016a10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80169c2:	68fa      	ldr	r2, [r7, #12]
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	4413      	add	r3, r2
 80169c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80169ca:	4b14      	ldr	r3, [pc, #80]	@ (8016a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80169cc:	681b      	ldr	r3, [r3, #0]
 80169ce:	68ba      	ldr	r2, [r7, #8]
 80169d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80169d2:	68ba      	ldr	r2, [r7, #8]
 80169d4:	68fb      	ldr	r3, [r7, #12]
 80169d6:	429a      	cmp	r2, r3
 80169d8:	d209      	bcs.n	80169ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80169da:	4b12      	ldr	r3, [pc, #72]	@ (8016a24 <prvAddCurrentTaskToDelayedList+0x9c>)
 80169dc:	681a      	ldr	r2, [r3, #0]
 80169de:	4b0f      	ldr	r3, [pc, #60]	@ (8016a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80169e0:	681b      	ldr	r3, [r3, #0]
 80169e2:	3304      	adds	r3, #4
 80169e4:	4619      	mov	r1, r3
 80169e6:	4610      	mov	r0, r2
 80169e8:	f7fe f803 	bl	80149f2 <vListInsert>
}
 80169ec:	e010      	b.n	8016a10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80169ee:	4b0e      	ldr	r3, [pc, #56]	@ (8016a28 <prvAddCurrentTaskToDelayedList+0xa0>)
 80169f0:	681a      	ldr	r2, [r3, #0]
 80169f2:	4b0a      	ldr	r3, [pc, #40]	@ (8016a1c <prvAddCurrentTaskToDelayedList+0x94>)
 80169f4:	681b      	ldr	r3, [r3, #0]
 80169f6:	3304      	adds	r3, #4
 80169f8:	4619      	mov	r1, r3
 80169fa:	4610      	mov	r0, r2
 80169fc:	f7fd fff9 	bl	80149f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016a00:	4b0a      	ldr	r3, [pc, #40]	@ (8016a2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	68ba      	ldr	r2, [r7, #8]
 8016a06:	429a      	cmp	r2, r3
 8016a08:	d202      	bcs.n	8016a10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016a0a:	4a08      	ldr	r2, [pc, #32]	@ (8016a2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8016a0c:	68bb      	ldr	r3, [r7, #8]
 8016a0e:	6013      	str	r3, [r2, #0]
}
 8016a10:	bf00      	nop
 8016a12:	3710      	adds	r7, #16
 8016a14:	46bd      	mov	sp, r7
 8016a16:	bd80      	pop	{r7, pc}
 8016a18:	200062ac 	.word	0x200062ac
 8016a1c:	20005dd4 	.word	0x20005dd4
 8016a20:	20006294 	.word	0x20006294
 8016a24:	20006264 	.word	0x20006264
 8016a28:	20006260 	.word	0x20006260
 8016a2c:	200062c8 	.word	0x200062c8

08016a30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b08a      	sub	sp, #40	@ 0x28
 8016a34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8016a36:	2300      	movs	r3, #0
 8016a38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8016a3a:	f000 fb71 	bl	8017120 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8016a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8016ab4 <xTimerCreateTimerTask+0x84>)
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	2b00      	cmp	r3, #0
 8016a44:	d021      	beq.n	8016a8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8016a46:	2300      	movs	r3, #0
 8016a48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8016a4a:	2300      	movs	r3, #0
 8016a4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8016a4e:	1d3a      	adds	r2, r7, #4
 8016a50:	f107 0108 	add.w	r1, r7, #8
 8016a54:	f107 030c 	add.w	r3, r7, #12
 8016a58:	4618      	mov	r0, r3
 8016a5a:	f7fd ff5f 	bl	801491c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8016a5e:	6879      	ldr	r1, [r7, #4]
 8016a60:	68bb      	ldr	r3, [r7, #8]
 8016a62:	68fa      	ldr	r2, [r7, #12]
 8016a64:	9202      	str	r2, [sp, #8]
 8016a66:	9301      	str	r3, [sp, #4]
 8016a68:	2302      	movs	r3, #2
 8016a6a:	9300      	str	r3, [sp, #0]
 8016a6c:	2300      	movs	r3, #0
 8016a6e:	460a      	mov	r2, r1
 8016a70:	4911      	ldr	r1, [pc, #68]	@ (8016ab8 <xTimerCreateTimerTask+0x88>)
 8016a72:	4812      	ldr	r0, [pc, #72]	@ (8016abc <xTimerCreateTimerTask+0x8c>)
 8016a74:	f7fe feb0 	bl	80157d8 <xTaskCreateStatic>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	4a11      	ldr	r2, [pc, #68]	@ (8016ac0 <xTimerCreateTimerTask+0x90>)
 8016a7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8016a7e:	4b10      	ldr	r3, [pc, #64]	@ (8016ac0 <xTimerCreateTimerTask+0x90>)
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d001      	beq.n	8016a8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8016a86:	2301      	movs	r3, #1
 8016a88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8016a8a:	697b      	ldr	r3, [r7, #20]
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d10b      	bne.n	8016aa8 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8016a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a94:	f383 8811 	msr	BASEPRI, r3
 8016a98:	f3bf 8f6f 	isb	sy
 8016a9c:	f3bf 8f4f 	dsb	sy
 8016aa0:	613b      	str	r3, [r7, #16]
}
 8016aa2:	bf00      	nop
 8016aa4:	bf00      	nop
 8016aa6:	e7fd      	b.n	8016aa4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8016aa8:	697b      	ldr	r3, [r7, #20]
}
 8016aaa:	4618      	mov	r0, r3
 8016aac:	3718      	adds	r7, #24
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}
 8016ab2:	bf00      	nop
 8016ab4:	20006304 	.word	0x20006304
 8016ab8:	080213dc 	.word	0x080213dc
 8016abc:	08016cb9 	.word	0x08016cb9
 8016ac0:	20006308 	.word	0x20006308

08016ac4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8016ac4:	b580      	push	{r7, lr}
 8016ac6:	b088      	sub	sp, #32
 8016ac8:	af02      	add	r7, sp, #8
 8016aca:	60f8      	str	r0, [r7, #12]
 8016acc:	60b9      	str	r1, [r7, #8]
 8016ace:	607a      	str	r2, [r7, #4]
 8016ad0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8016ad2:	202c      	movs	r0, #44	@ 0x2c
 8016ad4:	f000 fdba 	bl	801764c <pvPortMalloc>
 8016ad8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8016ada:	697b      	ldr	r3, [r7, #20]
 8016adc:	2b00      	cmp	r3, #0
 8016ade:	d00d      	beq.n	8016afc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8016ae0:	697b      	ldr	r3, [r7, #20]
 8016ae2:	2200      	movs	r2, #0
 8016ae4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8016ae8:	697b      	ldr	r3, [r7, #20]
 8016aea:	9301      	str	r3, [sp, #4]
 8016aec:	6a3b      	ldr	r3, [r7, #32]
 8016aee:	9300      	str	r3, [sp, #0]
 8016af0:	683b      	ldr	r3, [r7, #0]
 8016af2:	687a      	ldr	r2, [r7, #4]
 8016af4:	68b9      	ldr	r1, [r7, #8]
 8016af6:	68f8      	ldr	r0, [r7, #12]
 8016af8:	f000 f805 	bl	8016b06 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8016afc:	697b      	ldr	r3, [r7, #20]
	}
 8016afe:	4618      	mov	r0, r3
 8016b00:	3718      	adds	r7, #24
 8016b02:	46bd      	mov	sp, r7
 8016b04:	bd80      	pop	{r7, pc}

08016b06 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8016b06:	b580      	push	{r7, lr}
 8016b08:	b086      	sub	sp, #24
 8016b0a:	af00      	add	r7, sp, #0
 8016b0c:	60f8      	str	r0, [r7, #12]
 8016b0e:	60b9      	str	r1, [r7, #8]
 8016b10:	607a      	str	r2, [r7, #4]
 8016b12:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8016b14:	68bb      	ldr	r3, [r7, #8]
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d10b      	bne.n	8016b32 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8016b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b1e:	f383 8811 	msr	BASEPRI, r3
 8016b22:	f3bf 8f6f 	isb	sy
 8016b26:	f3bf 8f4f 	dsb	sy
 8016b2a:	617b      	str	r3, [r7, #20]
}
 8016b2c:	bf00      	nop
 8016b2e:	bf00      	nop
 8016b30:	e7fd      	b.n	8016b2e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8016b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d01e      	beq.n	8016b76 <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8016b38:	f000 faf2 	bl	8017120 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8016b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b3e:	68fa      	ldr	r2, [r7, #12]
 8016b40:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8016b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b44:	68ba      	ldr	r2, [r7, #8]
 8016b46:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8016b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b4a:	683a      	ldr	r2, [r7, #0]
 8016b4c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8016b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b50:	6a3a      	ldr	r2, [r7, #32]
 8016b52:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8016b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b56:	3304      	adds	r3, #4
 8016b58:	4618      	mov	r0, r3
 8016b5a:	f7fd ff19 	bl	8014990 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	2b00      	cmp	r3, #0
 8016b62:	d008      	beq.n	8016b76 <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8016b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016b6a:	f043 0304 	orr.w	r3, r3, #4
 8016b6e:	b2da      	uxtb	r2, r3
 8016b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8016b76:	bf00      	nop
 8016b78:	3718      	adds	r7, #24
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bd80      	pop	{r7, pc}
	...

08016b80 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b08a      	sub	sp, #40	@ 0x28
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	60f8      	str	r0, [r7, #12]
 8016b88:	60b9      	str	r1, [r7, #8]
 8016b8a:	607a      	str	r2, [r7, #4]
 8016b8c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8016b8e:	2300      	movs	r3, #0
 8016b90:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8016b92:	68fb      	ldr	r3, [r7, #12]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d10b      	bne.n	8016bb0 <xTimerGenericCommand+0x30>
	__asm volatile
 8016b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b9c:	f383 8811 	msr	BASEPRI, r3
 8016ba0:	f3bf 8f6f 	isb	sy
 8016ba4:	f3bf 8f4f 	dsb	sy
 8016ba8:	623b      	str	r3, [r7, #32]
}
 8016baa:	bf00      	nop
 8016bac:	bf00      	nop
 8016bae:	e7fd      	b.n	8016bac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016bb0:	4b19      	ldr	r3, [pc, #100]	@ (8016c18 <xTimerGenericCommand+0x98>)
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	2b00      	cmp	r3, #0
 8016bb6:	d02a      	beq.n	8016c0e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016bb8:	68bb      	ldr	r3, [r7, #8]
 8016bba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8016bc4:	68bb      	ldr	r3, [r7, #8]
 8016bc6:	2b05      	cmp	r3, #5
 8016bc8:	dc18      	bgt.n	8016bfc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016bca:	f7ff fc6d 	bl	80164a8 <xTaskGetSchedulerState>
 8016bce:	4603      	mov	r3, r0
 8016bd0:	2b02      	cmp	r3, #2
 8016bd2:	d109      	bne.n	8016be8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8016bd4:	4b10      	ldr	r3, [pc, #64]	@ (8016c18 <xTimerGenericCommand+0x98>)
 8016bd6:	6818      	ldr	r0, [r3, #0]
 8016bd8:	f107 0110 	add.w	r1, r7, #16
 8016bdc:	2300      	movs	r3, #0
 8016bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016be0:	f7fe f8e2 	bl	8014da8 <xQueueGenericSend>
 8016be4:	6278      	str	r0, [r7, #36]	@ 0x24
 8016be6:	e012      	b.n	8016c0e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016be8:	4b0b      	ldr	r3, [pc, #44]	@ (8016c18 <xTimerGenericCommand+0x98>)
 8016bea:	6818      	ldr	r0, [r3, #0]
 8016bec:	f107 0110 	add.w	r1, r7, #16
 8016bf0:	2300      	movs	r3, #0
 8016bf2:	2200      	movs	r2, #0
 8016bf4:	f7fe f8d8 	bl	8014da8 <xQueueGenericSend>
 8016bf8:	6278      	str	r0, [r7, #36]	@ 0x24
 8016bfa:	e008      	b.n	8016c0e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016bfc:	4b06      	ldr	r3, [pc, #24]	@ (8016c18 <xTimerGenericCommand+0x98>)
 8016bfe:	6818      	ldr	r0, [r3, #0]
 8016c00:	f107 0110 	add.w	r1, r7, #16
 8016c04:	2300      	movs	r3, #0
 8016c06:	683a      	ldr	r2, [r7, #0]
 8016c08:	f7fe f9d0 	bl	8014fac <xQueueGenericSendFromISR>
 8016c0c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016c0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016c10:	4618      	mov	r0, r3
 8016c12:	3728      	adds	r7, #40	@ 0x28
 8016c14:	46bd      	mov	sp, r7
 8016c16:	bd80      	pop	{r7, pc}
 8016c18:	20006304 	.word	0x20006304

08016c1c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016c1c:	b580      	push	{r7, lr}
 8016c1e:	b088      	sub	sp, #32
 8016c20:	af02      	add	r7, sp, #8
 8016c22:	6078      	str	r0, [r7, #4]
 8016c24:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8016c26:	4b23      	ldr	r3, [pc, #140]	@ (8016cb4 <prvProcessExpiredTimer+0x98>)
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	68db      	ldr	r3, [r3, #12]
 8016c2c:	68db      	ldr	r3, [r3, #12]
 8016c2e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016c30:	697b      	ldr	r3, [r7, #20]
 8016c32:	3304      	adds	r3, #4
 8016c34:	4618      	mov	r0, r3
 8016c36:	f7fd ff15 	bl	8014a64 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016c3a:	697b      	ldr	r3, [r7, #20]
 8016c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016c40:	f003 0304 	and.w	r3, r3, #4
 8016c44:	2b00      	cmp	r3, #0
 8016c46:	d023      	beq.n	8016c90 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8016c48:	697b      	ldr	r3, [r7, #20]
 8016c4a:	699a      	ldr	r2, [r3, #24]
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	18d1      	adds	r1, r2, r3
 8016c50:	687b      	ldr	r3, [r7, #4]
 8016c52:	683a      	ldr	r2, [r7, #0]
 8016c54:	6978      	ldr	r0, [r7, #20]
 8016c56:	f000 f8d5 	bl	8016e04 <prvInsertTimerInActiveList>
 8016c5a:	4603      	mov	r3, r0
 8016c5c:	2b00      	cmp	r3, #0
 8016c5e:	d020      	beq.n	8016ca2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016c60:	2300      	movs	r3, #0
 8016c62:	9300      	str	r3, [sp, #0]
 8016c64:	2300      	movs	r3, #0
 8016c66:	687a      	ldr	r2, [r7, #4]
 8016c68:	2100      	movs	r1, #0
 8016c6a:	6978      	ldr	r0, [r7, #20]
 8016c6c:	f7ff ff88 	bl	8016b80 <xTimerGenericCommand>
 8016c70:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8016c72:	693b      	ldr	r3, [r7, #16]
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d114      	bne.n	8016ca2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8016c78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c7c:	f383 8811 	msr	BASEPRI, r3
 8016c80:	f3bf 8f6f 	isb	sy
 8016c84:	f3bf 8f4f 	dsb	sy
 8016c88:	60fb      	str	r3, [r7, #12]
}
 8016c8a:	bf00      	nop
 8016c8c:	bf00      	nop
 8016c8e:	e7fd      	b.n	8016c8c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016c90:	697b      	ldr	r3, [r7, #20]
 8016c92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016c96:	f023 0301 	bic.w	r3, r3, #1
 8016c9a:	b2da      	uxtb	r2, r3
 8016c9c:	697b      	ldr	r3, [r7, #20]
 8016c9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016ca2:	697b      	ldr	r3, [r7, #20]
 8016ca4:	6a1b      	ldr	r3, [r3, #32]
 8016ca6:	6978      	ldr	r0, [r7, #20]
 8016ca8:	4798      	blx	r3
}
 8016caa:	bf00      	nop
 8016cac:	3718      	adds	r7, #24
 8016cae:	46bd      	mov	sp, r7
 8016cb0:	bd80      	pop	{r7, pc}
 8016cb2:	bf00      	nop
 8016cb4:	200062fc 	.word	0x200062fc

08016cb8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016cb8:	b580      	push	{r7, lr}
 8016cba:	b084      	sub	sp, #16
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016cc0:	f107 0308 	add.w	r3, r7, #8
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f000 f859 	bl	8016d7c <prvGetNextExpireTime>
 8016cca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016ccc:	68bb      	ldr	r3, [r7, #8]
 8016cce:	4619      	mov	r1, r3
 8016cd0:	68f8      	ldr	r0, [r7, #12]
 8016cd2:	f000 f805 	bl	8016ce0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8016cd6:	f000 f8d7 	bl	8016e88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016cda:	bf00      	nop
 8016cdc:	e7f0      	b.n	8016cc0 <prvTimerTask+0x8>
	...

08016ce0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016ce0:	b580      	push	{r7, lr}
 8016ce2:	b084      	sub	sp, #16
 8016ce4:	af00      	add	r7, sp, #0
 8016ce6:	6078      	str	r0, [r7, #4]
 8016ce8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8016cea:	f7fe ffd9 	bl	8015ca0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016cee:	f107 0308 	add.w	r3, r7, #8
 8016cf2:	4618      	mov	r0, r3
 8016cf4:	f000 f866 	bl	8016dc4 <prvSampleTimeNow>
 8016cf8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8016cfa:	68bb      	ldr	r3, [r7, #8]
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d130      	bne.n	8016d62 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016d00:	683b      	ldr	r3, [r7, #0]
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d10a      	bne.n	8016d1c <prvProcessTimerOrBlockTask+0x3c>
 8016d06:	687a      	ldr	r2, [r7, #4]
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	429a      	cmp	r2, r3
 8016d0c:	d806      	bhi.n	8016d1c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016d0e:	f7fe ffd5 	bl	8015cbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8016d12:	68f9      	ldr	r1, [r7, #12]
 8016d14:	6878      	ldr	r0, [r7, #4]
 8016d16:	f7ff ff81 	bl	8016c1c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8016d1a:	e024      	b.n	8016d66 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016d1c:	683b      	ldr	r3, [r7, #0]
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d008      	beq.n	8016d34 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8016d22:	4b13      	ldr	r3, [pc, #76]	@ (8016d70 <prvProcessTimerOrBlockTask+0x90>)
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	681b      	ldr	r3, [r3, #0]
 8016d28:	2b00      	cmp	r3, #0
 8016d2a:	d101      	bne.n	8016d30 <prvProcessTimerOrBlockTask+0x50>
 8016d2c:	2301      	movs	r3, #1
 8016d2e:	e000      	b.n	8016d32 <prvProcessTimerOrBlockTask+0x52>
 8016d30:	2300      	movs	r3, #0
 8016d32:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8016d34:	4b0f      	ldr	r3, [pc, #60]	@ (8016d74 <prvProcessTimerOrBlockTask+0x94>)
 8016d36:	6818      	ldr	r0, [r3, #0]
 8016d38:	687a      	ldr	r2, [r7, #4]
 8016d3a:	68fb      	ldr	r3, [r7, #12]
 8016d3c:	1ad3      	subs	r3, r2, r3
 8016d3e:	683a      	ldr	r2, [r7, #0]
 8016d40:	4619      	mov	r1, r3
 8016d42:	f7fe fd15 	bl	8015770 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8016d46:	f7fe ffb9 	bl	8015cbc <xTaskResumeAll>
 8016d4a:	4603      	mov	r3, r0
 8016d4c:	2b00      	cmp	r3, #0
 8016d4e:	d10a      	bne.n	8016d66 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8016d50:	4b09      	ldr	r3, [pc, #36]	@ (8016d78 <prvProcessTimerOrBlockTask+0x98>)
 8016d52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016d56:	601a      	str	r2, [r3, #0]
 8016d58:	f3bf 8f4f 	dsb	sy
 8016d5c:	f3bf 8f6f 	isb	sy
}
 8016d60:	e001      	b.n	8016d66 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8016d62:	f7fe ffab 	bl	8015cbc <xTaskResumeAll>
}
 8016d66:	bf00      	nop
 8016d68:	3710      	adds	r7, #16
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}
 8016d6e:	bf00      	nop
 8016d70:	20006300 	.word	0x20006300
 8016d74:	20006304 	.word	0x20006304
 8016d78:	e000ed04 	.word	0xe000ed04

08016d7c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8016d7c:	b480      	push	{r7}
 8016d7e:	b085      	sub	sp, #20
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8016d84:	4b0e      	ldr	r3, [pc, #56]	@ (8016dc0 <prvGetNextExpireTime+0x44>)
 8016d86:	681b      	ldr	r3, [r3, #0]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d101      	bne.n	8016d92 <prvGetNextExpireTime+0x16>
 8016d8e:	2201      	movs	r2, #1
 8016d90:	e000      	b.n	8016d94 <prvGetNextExpireTime+0x18>
 8016d92:	2200      	movs	r2, #0
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	681b      	ldr	r3, [r3, #0]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d105      	bne.n	8016dac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016da0:	4b07      	ldr	r3, [pc, #28]	@ (8016dc0 <prvGetNextExpireTime+0x44>)
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	68db      	ldr	r3, [r3, #12]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	60fb      	str	r3, [r7, #12]
 8016daa:	e001      	b.n	8016db0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016dac:	2300      	movs	r3, #0
 8016dae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016db0:	68fb      	ldr	r3, [r7, #12]
}
 8016db2:	4618      	mov	r0, r3
 8016db4:	3714      	adds	r7, #20
 8016db6:	46bd      	mov	sp, r7
 8016db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dbc:	4770      	bx	lr
 8016dbe:	bf00      	nop
 8016dc0:	200062fc 	.word	0x200062fc

08016dc4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b084      	sub	sp, #16
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016dcc:	f7ff f814 	bl	8015df8 <xTaskGetTickCount>
 8016dd0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8016dd2:	4b0b      	ldr	r3, [pc, #44]	@ (8016e00 <prvSampleTimeNow+0x3c>)
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	68fa      	ldr	r2, [r7, #12]
 8016dd8:	429a      	cmp	r2, r3
 8016dda:	d205      	bcs.n	8016de8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016ddc:	f000 f93a 	bl	8017054 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	2201      	movs	r2, #1
 8016de4:	601a      	str	r2, [r3, #0]
 8016de6:	e002      	b.n	8016dee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	2200      	movs	r2, #0
 8016dec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016dee:	4a04      	ldr	r2, [pc, #16]	@ (8016e00 <prvSampleTimeNow+0x3c>)
 8016df0:	68fb      	ldr	r3, [r7, #12]
 8016df2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016df4:	68fb      	ldr	r3, [r7, #12]
}
 8016df6:	4618      	mov	r0, r3
 8016df8:	3710      	adds	r7, #16
 8016dfa:	46bd      	mov	sp, r7
 8016dfc:	bd80      	pop	{r7, pc}
 8016dfe:	bf00      	nop
 8016e00:	2000630c 	.word	0x2000630c

08016e04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b086      	sub	sp, #24
 8016e08:	af00      	add	r7, sp, #0
 8016e0a:	60f8      	str	r0, [r7, #12]
 8016e0c:	60b9      	str	r1, [r7, #8]
 8016e0e:	607a      	str	r2, [r7, #4]
 8016e10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8016e12:	2300      	movs	r3, #0
 8016e14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016e16:	68fb      	ldr	r3, [r7, #12]
 8016e18:	68ba      	ldr	r2, [r7, #8]
 8016e1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016e1c:	68fb      	ldr	r3, [r7, #12]
 8016e1e:	68fa      	ldr	r2, [r7, #12]
 8016e20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8016e22:	68ba      	ldr	r2, [r7, #8]
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	429a      	cmp	r2, r3
 8016e28:	d812      	bhi.n	8016e50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016e2a:	687a      	ldr	r2, [r7, #4]
 8016e2c:	683b      	ldr	r3, [r7, #0]
 8016e2e:	1ad2      	subs	r2, r2, r3
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	699b      	ldr	r3, [r3, #24]
 8016e34:	429a      	cmp	r2, r3
 8016e36:	d302      	bcc.n	8016e3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016e38:	2301      	movs	r3, #1
 8016e3a:	617b      	str	r3, [r7, #20]
 8016e3c:	e01b      	b.n	8016e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8016e3e:	4b10      	ldr	r3, [pc, #64]	@ (8016e80 <prvInsertTimerInActiveList+0x7c>)
 8016e40:	681a      	ldr	r2, [r3, #0]
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	3304      	adds	r3, #4
 8016e46:	4619      	mov	r1, r3
 8016e48:	4610      	mov	r0, r2
 8016e4a:	f7fd fdd2 	bl	80149f2 <vListInsert>
 8016e4e:	e012      	b.n	8016e76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8016e50:	687a      	ldr	r2, [r7, #4]
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	429a      	cmp	r2, r3
 8016e56:	d206      	bcs.n	8016e66 <prvInsertTimerInActiveList+0x62>
 8016e58:	68ba      	ldr	r2, [r7, #8]
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	429a      	cmp	r2, r3
 8016e5e:	d302      	bcc.n	8016e66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8016e60:	2301      	movs	r3, #1
 8016e62:	617b      	str	r3, [r7, #20]
 8016e64:	e007      	b.n	8016e76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016e66:	4b07      	ldr	r3, [pc, #28]	@ (8016e84 <prvInsertTimerInActiveList+0x80>)
 8016e68:	681a      	ldr	r2, [r3, #0]
 8016e6a:	68fb      	ldr	r3, [r7, #12]
 8016e6c:	3304      	adds	r3, #4
 8016e6e:	4619      	mov	r1, r3
 8016e70:	4610      	mov	r0, r2
 8016e72:	f7fd fdbe 	bl	80149f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8016e76:	697b      	ldr	r3, [r7, #20]
}
 8016e78:	4618      	mov	r0, r3
 8016e7a:	3718      	adds	r7, #24
 8016e7c:	46bd      	mov	sp, r7
 8016e7e:	bd80      	pop	{r7, pc}
 8016e80:	20006300 	.word	0x20006300
 8016e84:	200062fc 	.word	0x200062fc

08016e88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8016e88:	b580      	push	{r7, lr}
 8016e8a:	b08e      	sub	sp, #56	@ 0x38
 8016e8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016e8e:	e0ce      	b.n	801702e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	da19      	bge.n	8016eca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8016e96:	1d3b      	adds	r3, r7, #4
 8016e98:	3304      	adds	r3, #4
 8016e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016e9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016e9e:	2b00      	cmp	r3, #0
 8016ea0:	d10b      	bne.n	8016eba <prvProcessReceivedCommands+0x32>
	__asm volatile
 8016ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ea6:	f383 8811 	msr	BASEPRI, r3
 8016eaa:	f3bf 8f6f 	isb	sy
 8016eae:	f3bf 8f4f 	dsb	sy
 8016eb2:	61fb      	str	r3, [r7, #28]
}
 8016eb4:	bf00      	nop
 8016eb6:	bf00      	nop
 8016eb8:	e7fd      	b.n	8016eb6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016ec0:	6850      	ldr	r0, [r2, #4]
 8016ec2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016ec4:	6892      	ldr	r2, [r2, #8]
 8016ec6:	4611      	mov	r1, r2
 8016ec8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	f2c0 80ae 	blt.w	801702e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8016ed2:	68fb      	ldr	r3, [r7, #12]
 8016ed4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ed8:	695b      	ldr	r3, [r3, #20]
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d004      	beq.n	8016ee8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ee0:	3304      	adds	r3, #4
 8016ee2:	4618      	mov	r0, r3
 8016ee4:	f7fd fdbe 	bl	8014a64 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016ee8:	463b      	mov	r3, r7
 8016eea:	4618      	mov	r0, r3
 8016eec:	f7ff ff6a 	bl	8016dc4 <prvSampleTimeNow>
 8016ef0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8016ef2:	687b      	ldr	r3, [r7, #4]
 8016ef4:	2b09      	cmp	r3, #9
 8016ef6:	f200 8097 	bhi.w	8017028 <prvProcessReceivedCommands+0x1a0>
 8016efa:	a201      	add	r2, pc, #4	@ (adr r2, 8016f00 <prvProcessReceivedCommands+0x78>)
 8016efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f00:	08016f29 	.word	0x08016f29
 8016f04:	08016f29 	.word	0x08016f29
 8016f08:	08016f29 	.word	0x08016f29
 8016f0c:	08016f9f 	.word	0x08016f9f
 8016f10:	08016fb3 	.word	0x08016fb3
 8016f14:	08016fff 	.word	0x08016fff
 8016f18:	08016f29 	.word	0x08016f29
 8016f1c:	08016f29 	.word	0x08016f29
 8016f20:	08016f9f 	.word	0x08016f9f
 8016f24:	08016fb3 	.word	0x08016fb3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016f2e:	f043 0301 	orr.w	r3, r3, #1
 8016f32:	b2da      	uxtb	r2, r3
 8016f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016f3a:	68ba      	ldr	r2, [r7, #8]
 8016f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f3e:	699b      	ldr	r3, [r3, #24]
 8016f40:	18d1      	adds	r1, r2, r3
 8016f42:	68bb      	ldr	r3, [r7, #8]
 8016f44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f48:	f7ff ff5c 	bl	8016e04 <prvInsertTimerInActiveList>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d06c      	beq.n	801702c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8016f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f54:	6a1b      	ldr	r3, [r3, #32]
 8016f56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8016f5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016f60:	f003 0304 	and.w	r3, r3, #4
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d061      	beq.n	801702c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8016f68:	68ba      	ldr	r2, [r7, #8]
 8016f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016f6c:	699b      	ldr	r3, [r3, #24]
 8016f6e:	441a      	add	r2, r3
 8016f70:	2300      	movs	r3, #0
 8016f72:	9300      	str	r3, [sp, #0]
 8016f74:	2300      	movs	r3, #0
 8016f76:	2100      	movs	r1, #0
 8016f78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016f7a:	f7ff fe01 	bl	8016b80 <xTimerGenericCommand>
 8016f7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8016f80:	6a3b      	ldr	r3, [r7, #32]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d152      	bne.n	801702c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8016f86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f8a:	f383 8811 	msr	BASEPRI, r3
 8016f8e:	f3bf 8f6f 	isb	sy
 8016f92:	f3bf 8f4f 	dsb	sy
 8016f96:	61bb      	str	r3, [r7, #24]
}
 8016f98:	bf00      	nop
 8016f9a:	bf00      	nop
 8016f9c:	e7fd      	b.n	8016f9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fa0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016fa4:	f023 0301 	bic.w	r3, r3, #1
 8016fa8:	b2da      	uxtb	r2, r3
 8016faa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8016fb0:	e03d      	b.n	801702e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016fb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016fb8:	f043 0301 	orr.w	r3, r3, #1
 8016fbc:	b2da      	uxtb	r2, r3
 8016fbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8016fc4:	68ba      	ldr	r2, [r7, #8]
 8016fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fcc:	699b      	ldr	r3, [r3, #24]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d10b      	bne.n	8016fea <prvProcessReceivedCommands+0x162>
	__asm volatile
 8016fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016fd6:	f383 8811 	msr	BASEPRI, r3
 8016fda:	f3bf 8f6f 	isb	sy
 8016fde:	f3bf 8f4f 	dsb	sy
 8016fe2:	617b      	str	r3, [r7, #20]
}
 8016fe4:	bf00      	nop
 8016fe6:	bf00      	nop
 8016fe8:	e7fd      	b.n	8016fe6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fec:	699a      	ldr	r2, [r3, #24]
 8016fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ff0:	18d1      	adds	r1, r2, r3
 8016ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ff6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016ff8:	f7ff ff04 	bl	8016e04 <prvInsertTimerInActiveList>
					break;
 8016ffc:	e017      	b.n	801702e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017000:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017004:	f003 0302 	and.w	r3, r3, #2
 8017008:	2b00      	cmp	r3, #0
 801700a:	d103      	bne.n	8017014 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 801700c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801700e:	f000 fbeb 	bl	80177e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8017012:	e00c      	b.n	801702e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8017014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017016:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801701a:	f023 0301 	bic.w	r3, r3, #1
 801701e:	b2da      	uxtb	r2, r3
 8017020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017022:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8017026:	e002      	b.n	801702e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8017028:	bf00      	nop
 801702a:	e000      	b.n	801702e <prvProcessReceivedCommands+0x1a6>
					break;
 801702c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801702e:	4b08      	ldr	r3, [pc, #32]	@ (8017050 <prvProcessReceivedCommands+0x1c8>)
 8017030:	681b      	ldr	r3, [r3, #0]
 8017032:	1d39      	adds	r1, r7, #4
 8017034:	2200      	movs	r2, #0
 8017036:	4618      	mov	r0, r3
 8017038:	f7fe f856 	bl	80150e8 <xQueueReceive>
 801703c:	4603      	mov	r3, r0
 801703e:	2b00      	cmp	r3, #0
 8017040:	f47f af26 	bne.w	8016e90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8017044:	bf00      	nop
 8017046:	bf00      	nop
 8017048:	3730      	adds	r7, #48	@ 0x30
 801704a:	46bd      	mov	sp, r7
 801704c:	bd80      	pop	{r7, pc}
 801704e:	bf00      	nop
 8017050:	20006304 	.word	0x20006304

08017054 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8017054:	b580      	push	{r7, lr}
 8017056:	b088      	sub	sp, #32
 8017058:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801705a:	e049      	b.n	80170f0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801705c:	4b2e      	ldr	r3, [pc, #184]	@ (8017118 <prvSwitchTimerLists+0xc4>)
 801705e:	681b      	ldr	r3, [r3, #0]
 8017060:	68db      	ldr	r3, [r3, #12]
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8017066:	4b2c      	ldr	r3, [pc, #176]	@ (8017118 <prvSwitchTimerLists+0xc4>)
 8017068:	681b      	ldr	r3, [r3, #0]
 801706a:	68db      	ldr	r3, [r3, #12]
 801706c:	68db      	ldr	r3, [r3, #12]
 801706e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8017070:	68fb      	ldr	r3, [r7, #12]
 8017072:	3304      	adds	r3, #4
 8017074:	4618      	mov	r0, r3
 8017076:	f7fd fcf5 	bl	8014a64 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801707a:	68fb      	ldr	r3, [r7, #12]
 801707c:	6a1b      	ldr	r3, [r3, #32]
 801707e:	68f8      	ldr	r0, [r7, #12]
 8017080:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8017088:	f003 0304 	and.w	r3, r3, #4
 801708c:	2b00      	cmp	r3, #0
 801708e:	d02f      	beq.n	80170f0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8017090:	68fb      	ldr	r3, [r7, #12]
 8017092:	699b      	ldr	r3, [r3, #24]
 8017094:	693a      	ldr	r2, [r7, #16]
 8017096:	4413      	add	r3, r2
 8017098:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801709a:	68ba      	ldr	r2, [r7, #8]
 801709c:	693b      	ldr	r3, [r7, #16]
 801709e:	429a      	cmp	r2, r3
 80170a0:	d90e      	bls.n	80170c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80170a2:	68fb      	ldr	r3, [r7, #12]
 80170a4:	68ba      	ldr	r2, [r7, #8]
 80170a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	68fa      	ldr	r2, [r7, #12]
 80170ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80170ae:	4b1a      	ldr	r3, [pc, #104]	@ (8017118 <prvSwitchTimerLists+0xc4>)
 80170b0:	681a      	ldr	r2, [r3, #0]
 80170b2:	68fb      	ldr	r3, [r7, #12]
 80170b4:	3304      	adds	r3, #4
 80170b6:	4619      	mov	r1, r3
 80170b8:	4610      	mov	r0, r2
 80170ba:	f7fd fc9a 	bl	80149f2 <vListInsert>
 80170be:	e017      	b.n	80170f0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80170c0:	2300      	movs	r3, #0
 80170c2:	9300      	str	r3, [sp, #0]
 80170c4:	2300      	movs	r3, #0
 80170c6:	693a      	ldr	r2, [r7, #16]
 80170c8:	2100      	movs	r1, #0
 80170ca:	68f8      	ldr	r0, [r7, #12]
 80170cc:	f7ff fd58 	bl	8016b80 <xTimerGenericCommand>
 80170d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d10b      	bne.n	80170f0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80170d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80170dc:	f383 8811 	msr	BASEPRI, r3
 80170e0:	f3bf 8f6f 	isb	sy
 80170e4:	f3bf 8f4f 	dsb	sy
 80170e8:	603b      	str	r3, [r7, #0]
}
 80170ea:	bf00      	nop
 80170ec:	bf00      	nop
 80170ee:	e7fd      	b.n	80170ec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80170f0:	4b09      	ldr	r3, [pc, #36]	@ (8017118 <prvSwitchTimerLists+0xc4>)
 80170f2:	681b      	ldr	r3, [r3, #0]
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d1b0      	bne.n	801705c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80170fa:	4b07      	ldr	r3, [pc, #28]	@ (8017118 <prvSwitchTimerLists+0xc4>)
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8017100:	4b06      	ldr	r3, [pc, #24]	@ (801711c <prvSwitchTimerLists+0xc8>)
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	4a04      	ldr	r2, [pc, #16]	@ (8017118 <prvSwitchTimerLists+0xc4>)
 8017106:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8017108:	4a04      	ldr	r2, [pc, #16]	@ (801711c <prvSwitchTimerLists+0xc8>)
 801710a:	697b      	ldr	r3, [r7, #20]
 801710c:	6013      	str	r3, [r2, #0]
}
 801710e:	bf00      	nop
 8017110:	3718      	adds	r7, #24
 8017112:	46bd      	mov	sp, r7
 8017114:	bd80      	pop	{r7, pc}
 8017116:	bf00      	nop
 8017118:	200062fc 	.word	0x200062fc
 801711c:	20006300 	.word	0x20006300

08017120 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8017120:	b580      	push	{r7, lr}
 8017122:	b082      	sub	sp, #8
 8017124:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8017126:	f000 f96f 	bl	8017408 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801712a:	4b15      	ldr	r3, [pc, #84]	@ (8017180 <prvCheckForValidListAndQueue+0x60>)
 801712c:	681b      	ldr	r3, [r3, #0]
 801712e:	2b00      	cmp	r3, #0
 8017130:	d120      	bne.n	8017174 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8017132:	4814      	ldr	r0, [pc, #80]	@ (8017184 <prvCheckForValidListAndQueue+0x64>)
 8017134:	f7fd fc0c 	bl	8014950 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8017138:	4813      	ldr	r0, [pc, #76]	@ (8017188 <prvCheckForValidListAndQueue+0x68>)
 801713a:	f7fd fc09 	bl	8014950 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801713e:	4b13      	ldr	r3, [pc, #76]	@ (801718c <prvCheckForValidListAndQueue+0x6c>)
 8017140:	4a10      	ldr	r2, [pc, #64]	@ (8017184 <prvCheckForValidListAndQueue+0x64>)
 8017142:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8017144:	4b12      	ldr	r3, [pc, #72]	@ (8017190 <prvCheckForValidListAndQueue+0x70>)
 8017146:	4a10      	ldr	r2, [pc, #64]	@ (8017188 <prvCheckForValidListAndQueue+0x68>)
 8017148:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801714a:	2300      	movs	r3, #0
 801714c:	9300      	str	r3, [sp, #0]
 801714e:	4b11      	ldr	r3, [pc, #68]	@ (8017194 <prvCheckForValidListAndQueue+0x74>)
 8017150:	4a11      	ldr	r2, [pc, #68]	@ (8017198 <prvCheckForValidListAndQueue+0x78>)
 8017152:	2110      	movs	r1, #16
 8017154:	200a      	movs	r0, #10
 8017156:	f7fd fd19 	bl	8014b8c <xQueueGenericCreateStatic>
 801715a:	4603      	mov	r3, r0
 801715c:	4a08      	ldr	r2, [pc, #32]	@ (8017180 <prvCheckForValidListAndQueue+0x60>)
 801715e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8017160:	4b07      	ldr	r3, [pc, #28]	@ (8017180 <prvCheckForValidListAndQueue+0x60>)
 8017162:	681b      	ldr	r3, [r3, #0]
 8017164:	2b00      	cmp	r3, #0
 8017166:	d005      	beq.n	8017174 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8017168:	4b05      	ldr	r3, [pc, #20]	@ (8017180 <prvCheckForValidListAndQueue+0x60>)
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	490b      	ldr	r1, [pc, #44]	@ (801719c <prvCheckForValidListAndQueue+0x7c>)
 801716e:	4618      	mov	r0, r3
 8017170:	f7fe fad4 	bl	801571c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8017174:	f000 f97a 	bl	801746c <vPortExitCritical>
}
 8017178:	bf00      	nop
 801717a:	46bd      	mov	sp, r7
 801717c:	bd80      	pop	{r7, pc}
 801717e:	bf00      	nop
 8017180:	20006304 	.word	0x20006304
 8017184:	200062d4 	.word	0x200062d4
 8017188:	200062e8 	.word	0x200062e8
 801718c:	200062fc 	.word	0x200062fc
 8017190:	20006300 	.word	0x20006300
 8017194:	200063b0 	.word	0x200063b0
 8017198:	20006310 	.word	0x20006310
 801719c:	080213e4 	.word	0x080213e4

080171a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80171a0:	b480      	push	{r7}
 80171a2:	b085      	sub	sp, #20
 80171a4:	af00      	add	r7, sp, #0
 80171a6:	60f8      	str	r0, [r7, #12]
 80171a8:	60b9      	str	r1, [r7, #8]
 80171aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80171ac:	68fb      	ldr	r3, [r7, #12]
 80171ae:	3b04      	subs	r3, #4
 80171b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80171b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	3b04      	subs	r3, #4
 80171be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80171c0:	68bb      	ldr	r3, [r7, #8]
 80171c2:	f023 0201 	bic.w	r2, r3, #1
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80171ca:	68fb      	ldr	r3, [r7, #12]
 80171cc:	3b04      	subs	r3, #4
 80171ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80171d0:	4a0c      	ldr	r2, [pc, #48]	@ (8017204 <pxPortInitialiseStack+0x64>)
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	3b14      	subs	r3, #20
 80171da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80171dc:	687a      	ldr	r2, [r7, #4]
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	3b04      	subs	r3, #4
 80171e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	f06f 0202 	mvn.w	r2, #2
 80171ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	3b20      	subs	r3, #32
 80171f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80171f6:	68fb      	ldr	r3, [r7, #12]
}
 80171f8:	4618      	mov	r0, r3
 80171fa:	3714      	adds	r7, #20
 80171fc:	46bd      	mov	sp, r7
 80171fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017202:	4770      	bx	lr
 8017204:	08017209 	.word	0x08017209

08017208 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8017208:	b480      	push	{r7}
 801720a:	b085      	sub	sp, #20
 801720c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801720e:	2300      	movs	r3, #0
 8017210:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8017212:	4b13      	ldr	r3, [pc, #76]	@ (8017260 <prvTaskExitError+0x58>)
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	f1b3 3fff 	cmp.w	r3, #4294967295
 801721a:	d00b      	beq.n	8017234 <prvTaskExitError+0x2c>
	__asm volatile
 801721c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017220:	f383 8811 	msr	BASEPRI, r3
 8017224:	f3bf 8f6f 	isb	sy
 8017228:	f3bf 8f4f 	dsb	sy
 801722c:	60fb      	str	r3, [r7, #12]
}
 801722e:	bf00      	nop
 8017230:	bf00      	nop
 8017232:	e7fd      	b.n	8017230 <prvTaskExitError+0x28>
	__asm volatile
 8017234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017238:	f383 8811 	msr	BASEPRI, r3
 801723c:	f3bf 8f6f 	isb	sy
 8017240:	f3bf 8f4f 	dsb	sy
 8017244:	60bb      	str	r3, [r7, #8]
}
 8017246:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8017248:	bf00      	nop
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	2b00      	cmp	r3, #0
 801724e:	d0fc      	beq.n	801724a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8017250:	bf00      	nop
 8017252:	bf00      	nop
 8017254:	3714      	adds	r7, #20
 8017256:	46bd      	mov	sp, r7
 8017258:	f85d 7b04 	ldr.w	r7, [sp], #4
 801725c:	4770      	bx	lr
 801725e:	bf00      	nop
 8017260:	200000ec 	.word	0x200000ec
	...

08017270 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8017270:	4b07      	ldr	r3, [pc, #28]	@ (8017290 <pxCurrentTCBConst2>)
 8017272:	6819      	ldr	r1, [r3, #0]
 8017274:	6808      	ldr	r0, [r1, #0]
 8017276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801727a:	f380 8809 	msr	PSP, r0
 801727e:	f3bf 8f6f 	isb	sy
 8017282:	f04f 0000 	mov.w	r0, #0
 8017286:	f380 8811 	msr	BASEPRI, r0
 801728a:	4770      	bx	lr
 801728c:	f3af 8000 	nop.w

08017290 <pxCurrentTCBConst2>:
 8017290:	20005dd4 	.word	0x20005dd4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8017294:	bf00      	nop
 8017296:	bf00      	nop

08017298 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8017298:	4808      	ldr	r0, [pc, #32]	@ (80172bc <prvPortStartFirstTask+0x24>)
 801729a:	6800      	ldr	r0, [r0, #0]
 801729c:	6800      	ldr	r0, [r0, #0]
 801729e:	f380 8808 	msr	MSP, r0
 80172a2:	f04f 0000 	mov.w	r0, #0
 80172a6:	f380 8814 	msr	CONTROL, r0
 80172aa:	b662      	cpsie	i
 80172ac:	b661      	cpsie	f
 80172ae:	f3bf 8f4f 	dsb	sy
 80172b2:	f3bf 8f6f 	isb	sy
 80172b6:	df00      	svc	0
 80172b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80172ba:	bf00      	nop
 80172bc:	e000ed08 	.word	0xe000ed08

080172c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	b086      	sub	sp, #24
 80172c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80172c6:	4b47      	ldr	r3, [pc, #284]	@ (80173e4 <xPortStartScheduler+0x124>)
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	4a47      	ldr	r2, [pc, #284]	@ (80173e8 <xPortStartScheduler+0x128>)
 80172cc:	4293      	cmp	r3, r2
 80172ce:	d10b      	bne.n	80172e8 <xPortStartScheduler+0x28>
	__asm volatile
 80172d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172d4:	f383 8811 	msr	BASEPRI, r3
 80172d8:	f3bf 8f6f 	isb	sy
 80172dc:	f3bf 8f4f 	dsb	sy
 80172e0:	60fb      	str	r3, [r7, #12]
}
 80172e2:	bf00      	nop
 80172e4:	bf00      	nop
 80172e6:	e7fd      	b.n	80172e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80172e8:	4b3e      	ldr	r3, [pc, #248]	@ (80173e4 <xPortStartScheduler+0x124>)
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	4a3f      	ldr	r2, [pc, #252]	@ (80173ec <xPortStartScheduler+0x12c>)
 80172ee:	4293      	cmp	r3, r2
 80172f0:	d10b      	bne.n	801730a <xPortStartScheduler+0x4a>
	__asm volatile
 80172f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80172f6:	f383 8811 	msr	BASEPRI, r3
 80172fa:	f3bf 8f6f 	isb	sy
 80172fe:	f3bf 8f4f 	dsb	sy
 8017302:	613b      	str	r3, [r7, #16]
}
 8017304:	bf00      	nop
 8017306:	bf00      	nop
 8017308:	e7fd      	b.n	8017306 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801730a:	4b39      	ldr	r3, [pc, #228]	@ (80173f0 <xPortStartScheduler+0x130>)
 801730c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801730e:	697b      	ldr	r3, [r7, #20]
 8017310:	781b      	ldrb	r3, [r3, #0]
 8017312:	b2db      	uxtb	r3, r3
 8017314:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8017316:	697b      	ldr	r3, [r7, #20]
 8017318:	22ff      	movs	r2, #255	@ 0xff
 801731a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801731c:	697b      	ldr	r3, [r7, #20]
 801731e:	781b      	ldrb	r3, [r3, #0]
 8017320:	b2db      	uxtb	r3, r3
 8017322:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8017324:	78fb      	ldrb	r3, [r7, #3]
 8017326:	b2db      	uxtb	r3, r3
 8017328:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801732c:	b2da      	uxtb	r2, r3
 801732e:	4b31      	ldr	r3, [pc, #196]	@ (80173f4 <xPortStartScheduler+0x134>)
 8017330:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8017332:	4b31      	ldr	r3, [pc, #196]	@ (80173f8 <xPortStartScheduler+0x138>)
 8017334:	2207      	movs	r2, #7
 8017336:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8017338:	e009      	b.n	801734e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801733a:	4b2f      	ldr	r3, [pc, #188]	@ (80173f8 <xPortStartScheduler+0x138>)
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	3b01      	subs	r3, #1
 8017340:	4a2d      	ldr	r2, [pc, #180]	@ (80173f8 <xPortStartScheduler+0x138>)
 8017342:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8017344:	78fb      	ldrb	r3, [r7, #3]
 8017346:	b2db      	uxtb	r3, r3
 8017348:	005b      	lsls	r3, r3, #1
 801734a:	b2db      	uxtb	r3, r3
 801734c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801734e:	78fb      	ldrb	r3, [r7, #3]
 8017350:	b2db      	uxtb	r3, r3
 8017352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017356:	2b80      	cmp	r3, #128	@ 0x80
 8017358:	d0ef      	beq.n	801733a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801735a:	4b27      	ldr	r3, [pc, #156]	@ (80173f8 <xPortStartScheduler+0x138>)
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	f1c3 0307 	rsb	r3, r3, #7
 8017362:	2b04      	cmp	r3, #4
 8017364:	d00b      	beq.n	801737e <xPortStartScheduler+0xbe>
	__asm volatile
 8017366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801736a:	f383 8811 	msr	BASEPRI, r3
 801736e:	f3bf 8f6f 	isb	sy
 8017372:	f3bf 8f4f 	dsb	sy
 8017376:	60bb      	str	r3, [r7, #8]
}
 8017378:	bf00      	nop
 801737a:	bf00      	nop
 801737c:	e7fd      	b.n	801737a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801737e:	4b1e      	ldr	r3, [pc, #120]	@ (80173f8 <xPortStartScheduler+0x138>)
 8017380:	681b      	ldr	r3, [r3, #0]
 8017382:	021b      	lsls	r3, r3, #8
 8017384:	4a1c      	ldr	r2, [pc, #112]	@ (80173f8 <xPortStartScheduler+0x138>)
 8017386:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8017388:	4b1b      	ldr	r3, [pc, #108]	@ (80173f8 <xPortStartScheduler+0x138>)
 801738a:	681b      	ldr	r3, [r3, #0]
 801738c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8017390:	4a19      	ldr	r2, [pc, #100]	@ (80173f8 <xPortStartScheduler+0x138>)
 8017392:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	b2da      	uxtb	r2, r3
 8017398:	697b      	ldr	r3, [r7, #20]
 801739a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801739c:	4b17      	ldr	r3, [pc, #92]	@ (80173fc <xPortStartScheduler+0x13c>)
 801739e:	681b      	ldr	r3, [r3, #0]
 80173a0:	4a16      	ldr	r2, [pc, #88]	@ (80173fc <xPortStartScheduler+0x13c>)
 80173a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80173a6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80173a8:	4b14      	ldr	r3, [pc, #80]	@ (80173fc <xPortStartScheduler+0x13c>)
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	4a13      	ldr	r2, [pc, #76]	@ (80173fc <xPortStartScheduler+0x13c>)
 80173ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80173b2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80173b4:	f000 f8da 	bl	801756c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80173b8:	4b11      	ldr	r3, [pc, #68]	@ (8017400 <xPortStartScheduler+0x140>)
 80173ba:	2200      	movs	r2, #0
 80173bc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80173be:	f000 f8f9 	bl	80175b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80173c2:	4b10      	ldr	r3, [pc, #64]	@ (8017404 <xPortStartScheduler+0x144>)
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	4a0f      	ldr	r2, [pc, #60]	@ (8017404 <xPortStartScheduler+0x144>)
 80173c8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80173cc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80173ce:	f7ff ff63 	bl	8017298 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80173d2:	f7fe fddb 	bl	8015f8c <vTaskSwitchContext>
	prvTaskExitError();
 80173d6:	f7ff ff17 	bl	8017208 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80173da:	2300      	movs	r3, #0
}
 80173dc:	4618      	mov	r0, r3
 80173de:	3718      	adds	r7, #24
 80173e0:	46bd      	mov	sp, r7
 80173e2:	bd80      	pop	{r7, pc}
 80173e4:	e000ed00 	.word	0xe000ed00
 80173e8:	410fc271 	.word	0x410fc271
 80173ec:	410fc270 	.word	0x410fc270
 80173f0:	e000e400 	.word	0xe000e400
 80173f4:	20006400 	.word	0x20006400
 80173f8:	20006404 	.word	0x20006404
 80173fc:	e000ed20 	.word	0xe000ed20
 8017400:	200000ec 	.word	0x200000ec
 8017404:	e000ef34 	.word	0xe000ef34

08017408 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8017408:	b480      	push	{r7}
 801740a:	b083      	sub	sp, #12
 801740c:	af00      	add	r7, sp, #0
	__asm volatile
 801740e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017412:	f383 8811 	msr	BASEPRI, r3
 8017416:	f3bf 8f6f 	isb	sy
 801741a:	f3bf 8f4f 	dsb	sy
 801741e:	607b      	str	r3, [r7, #4]
}
 8017420:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8017422:	4b10      	ldr	r3, [pc, #64]	@ (8017464 <vPortEnterCritical+0x5c>)
 8017424:	681b      	ldr	r3, [r3, #0]
 8017426:	3301      	adds	r3, #1
 8017428:	4a0e      	ldr	r2, [pc, #56]	@ (8017464 <vPortEnterCritical+0x5c>)
 801742a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801742c:	4b0d      	ldr	r3, [pc, #52]	@ (8017464 <vPortEnterCritical+0x5c>)
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	2b01      	cmp	r3, #1
 8017432:	d110      	bne.n	8017456 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8017434:	4b0c      	ldr	r3, [pc, #48]	@ (8017468 <vPortEnterCritical+0x60>)
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	b2db      	uxtb	r3, r3
 801743a:	2b00      	cmp	r3, #0
 801743c:	d00b      	beq.n	8017456 <vPortEnterCritical+0x4e>
	__asm volatile
 801743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017442:	f383 8811 	msr	BASEPRI, r3
 8017446:	f3bf 8f6f 	isb	sy
 801744a:	f3bf 8f4f 	dsb	sy
 801744e:	603b      	str	r3, [r7, #0]
}
 8017450:	bf00      	nop
 8017452:	bf00      	nop
 8017454:	e7fd      	b.n	8017452 <vPortEnterCritical+0x4a>
	}
}
 8017456:	bf00      	nop
 8017458:	370c      	adds	r7, #12
 801745a:	46bd      	mov	sp, r7
 801745c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017460:	4770      	bx	lr
 8017462:	bf00      	nop
 8017464:	200000ec 	.word	0x200000ec
 8017468:	e000ed04 	.word	0xe000ed04

0801746c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801746c:	b480      	push	{r7}
 801746e:	b083      	sub	sp, #12
 8017470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8017472:	4b12      	ldr	r3, [pc, #72]	@ (80174bc <vPortExitCritical+0x50>)
 8017474:	681b      	ldr	r3, [r3, #0]
 8017476:	2b00      	cmp	r3, #0
 8017478:	d10b      	bne.n	8017492 <vPortExitCritical+0x26>
	__asm volatile
 801747a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801747e:	f383 8811 	msr	BASEPRI, r3
 8017482:	f3bf 8f6f 	isb	sy
 8017486:	f3bf 8f4f 	dsb	sy
 801748a:	607b      	str	r3, [r7, #4]
}
 801748c:	bf00      	nop
 801748e:	bf00      	nop
 8017490:	e7fd      	b.n	801748e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8017492:	4b0a      	ldr	r3, [pc, #40]	@ (80174bc <vPortExitCritical+0x50>)
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	3b01      	subs	r3, #1
 8017498:	4a08      	ldr	r2, [pc, #32]	@ (80174bc <vPortExitCritical+0x50>)
 801749a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801749c:	4b07      	ldr	r3, [pc, #28]	@ (80174bc <vPortExitCritical+0x50>)
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	2b00      	cmp	r3, #0
 80174a2:	d105      	bne.n	80174b0 <vPortExitCritical+0x44>
 80174a4:	2300      	movs	r3, #0
 80174a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80174a8:	683b      	ldr	r3, [r7, #0]
 80174aa:	f383 8811 	msr	BASEPRI, r3
}
 80174ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80174b0:	bf00      	nop
 80174b2:	370c      	adds	r7, #12
 80174b4:	46bd      	mov	sp, r7
 80174b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ba:	4770      	bx	lr
 80174bc:	200000ec 	.word	0x200000ec

080174c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80174c0:	f3ef 8009 	mrs	r0, PSP
 80174c4:	f3bf 8f6f 	isb	sy
 80174c8:	4b15      	ldr	r3, [pc, #84]	@ (8017520 <pxCurrentTCBConst>)
 80174ca:	681a      	ldr	r2, [r3, #0]
 80174cc:	f01e 0f10 	tst.w	lr, #16
 80174d0:	bf08      	it	eq
 80174d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80174d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174da:	6010      	str	r0, [r2, #0]
 80174dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80174e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80174e4:	f380 8811 	msr	BASEPRI, r0
 80174e8:	f3bf 8f4f 	dsb	sy
 80174ec:	f3bf 8f6f 	isb	sy
 80174f0:	f7fe fd4c 	bl	8015f8c <vTaskSwitchContext>
 80174f4:	f04f 0000 	mov.w	r0, #0
 80174f8:	f380 8811 	msr	BASEPRI, r0
 80174fc:	bc09      	pop	{r0, r3}
 80174fe:	6819      	ldr	r1, [r3, #0]
 8017500:	6808      	ldr	r0, [r1, #0]
 8017502:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017506:	f01e 0f10 	tst.w	lr, #16
 801750a:	bf08      	it	eq
 801750c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8017510:	f380 8809 	msr	PSP, r0
 8017514:	f3bf 8f6f 	isb	sy
 8017518:	4770      	bx	lr
 801751a:	bf00      	nop
 801751c:	f3af 8000 	nop.w

08017520 <pxCurrentTCBConst>:
 8017520:	20005dd4 	.word	0x20005dd4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8017524:	bf00      	nop
 8017526:	bf00      	nop

08017528 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b082      	sub	sp, #8
 801752c:	af00      	add	r7, sp, #0
	__asm volatile
 801752e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017532:	f383 8811 	msr	BASEPRI, r3
 8017536:	f3bf 8f6f 	isb	sy
 801753a:	f3bf 8f4f 	dsb	sy
 801753e:	607b      	str	r3, [r7, #4]
}
 8017540:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8017542:	f7fe fc69 	bl	8015e18 <xTaskIncrementTick>
 8017546:	4603      	mov	r3, r0
 8017548:	2b00      	cmp	r3, #0
 801754a:	d003      	beq.n	8017554 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801754c:	4b06      	ldr	r3, [pc, #24]	@ (8017568 <xPortSysTickHandler+0x40>)
 801754e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017552:	601a      	str	r2, [r3, #0]
 8017554:	2300      	movs	r3, #0
 8017556:	603b      	str	r3, [r7, #0]
	__asm volatile
 8017558:	683b      	ldr	r3, [r7, #0]
 801755a:	f383 8811 	msr	BASEPRI, r3
}
 801755e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8017560:	bf00      	nop
 8017562:	3708      	adds	r7, #8
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}
 8017568:	e000ed04 	.word	0xe000ed04

0801756c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801756c:	b480      	push	{r7}
 801756e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8017570:	4b0b      	ldr	r3, [pc, #44]	@ (80175a0 <vPortSetupTimerInterrupt+0x34>)
 8017572:	2200      	movs	r2, #0
 8017574:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8017576:	4b0b      	ldr	r3, [pc, #44]	@ (80175a4 <vPortSetupTimerInterrupt+0x38>)
 8017578:	2200      	movs	r2, #0
 801757a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801757c:	4b0a      	ldr	r3, [pc, #40]	@ (80175a8 <vPortSetupTimerInterrupt+0x3c>)
 801757e:	681b      	ldr	r3, [r3, #0]
 8017580:	4a0a      	ldr	r2, [pc, #40]	@ (80175ac <vPortSetupTimerInterrupt+0x40>)
 8017582:	fba2 2303 	umull	r2, r3, r2, r3
 8017586:	099b      	lsrs	r3, r3, #6
 8017588:	4a09      	ldr	r2, [pc, #36]	@ (80175b0 <vPortSetupTimerInterrupt+0x44>)
 801758a:	3b01      	subs	r3, #1
 801758c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801758e:	4b04      	ldr	r3, [pc, #16]	@ (80175a0 <vPortSetupTimerInterrupt+0x34>)
 8017590:	2207      	movs	r2, #7
 8017592:	601a      	str	r2, [r3, #0]
}
 8017594:	bf00      	nop
 8017596:	46bd      	mov	sp, r7
 8017598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801759c:	4770      	bx	lr
 801759e:	bf00      	nop
 80175a0:	e000e010 	.word	0xe000e010
 80175a4:	e000e018 	.word	0xe000e018
 80175a8:	20000054 	.word	0x20000054
 80175ac:	10624dd3 	.word	0x10624dd3
 80175b0:	e000e014 	.word	0xe000e014

080175b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80175b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80175c4 <vPortEnableVFP+0x10>
 80175b8:	6801      	ldr	r1, [r0, #0]
 80175ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80175be:	6001      	str	r1, [r0, #0]
 80175c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80175c2:	bf00      	nop
 80175c4:	e000ed88 	.word	0xe000ed88

080175c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80175c8:	b480      	push	{r7}
 80175ca:	b085      	sub	sp, #20
 80175cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80175ce:	f3ef 8305 	mrs	r3, IPSR
 80175d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80175d4:	68fb      	ldr	r3, [r7, #12]
 80175d6:	2b0f      	cmp	r3, #15
 80175d8:	d915      	bls.n	8017606 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80175da:	4a18      	ldr	r2, [pc, #96]	@ (801763c <vPortValidateInterruptPriority+0x74>)
 80175dc:	68fb      	ldr	r3, [r7, #12]
 80175de:	4413      	add	r3, r2
 80175e0:	781b      	ldrb	r3, [r3, #0]
 80175e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80175e4:	4b16      	ldr	r3, [pc, #88]	@ (8017640 <vPortValidateInterruptPriority+0x78>)
 80175e6:	781b      	ldrb	r3, [r3, #0]
 80175e8:	7afa      	ldrb	r2, [r7, #11]
 80175ea:	429a      	cmp	r2, r3
 80175ec:	d20b      	bcs.n	8017606 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80175ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80175f2:	f383 8811 	msr	BASEPRI, r3
 80175f6:	f3bf 8f6f 	isb	sy
 80175fa:	f3bf 8f4f 	dsb	sy
 80175fe:	607b      	str	r3, [r7, #4]
}
 8017600:	bf00      	nop
 8017602:	bf00      	nop
 8017604:	e7fd      	b.n	8017602 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8017606:	4b0f      	ldr	r3, [pc, #60]	@ (8017644 <vPortValidateInterruptPriority+0x7c>)
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801760e:	4b0e      	ldr	r3, [pc, #56]	@ (8017648 <vPortValidateInterruptPriority+0x80>)
 8017610:	681b      	ldr	r3, [r3, #0]
 8017612:	429a      	cmp	r2, r3
 8017614:	d90b      	bls.n	801762e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8017616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801761a:	f383 8811 	msr	BASEPRI, r3
 801761e:	f3bf 8f6f 	isb	sy
 8017622:	f3bf 8f4f 	dsb	sy
 8017626:	603b      	str	r3, [r7, #0]
}
 8017628:	bf00      	nop
 801762a:	bf00      	nop
 801762c:	e7fd      	b.n	801762a <vPortValidateInterruptPriority+0x62>
	}
 801762e:	bf00      	nop
 8017630:	3714      	adds	r7, #20
 8017632:	46bd      	mov	sp, r7
 8017634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017638:	4770      	bx	lr
 801763a:	bf00      	nop
 801763c:	e000e3f0 	.word	0xe000e3f0
 8017640:	20006400 	.word	0x20006400
 8017644:	e000ed0c 	.word	0xe000ed0c
 8017648:	20006404 	.word	0x20006404

0801764c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801764c:	b580      	push	{r7, lr}
 801764e:	b08a      	sub	sp, #40	@ 0x28
 8017650:	af00      	add	r7, sp, #0
 8017652:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8017654:	2300      	movs	r3, #0
 8017656:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8017658:	f7fe fb22 	bl	8015ca0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801765c:	4b5c      	ldr	r3, [pc, #368]	@ (80177d0 <pvPortMalloc+0x184>)
 801765e:	681b      	ldr	r3, [r3, #0]
 8017660:	2b00      	cmp	r3, #0
 8017662:	d101      	bne.n	8017668 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8017664:	f000 f924 	bl	80178b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8017668:	4b5a      	ldr	r3, [pc, #360]	@ (80177d4 <pvPortMalloc+0x188>)
 801766a:	681a      	ldr	r2, [r3, #0]
 801766c:	687b      	ldr	r3, [r7, #4]
 801766e:	4013      	ands	r3, r2
 8017670:	2b00      	cmp	r3, #0
 8017672:	f040 8095 	bne.w	80177a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	2b00      	cmp	r3, #0
 801767a:	d01e      	beq.n	80176ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801767c:	2208      	movs	r2, #8
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	4413      	add	r3, r2
 8017682:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8017684:	687b      	ldr	r3, [r7, #4]
 8017686:	f003 0307 	and.w	r3, r3, #7
 801768a:	2b00      	cmp	r3, #0
 801768c:	d015      	beq.n	80176ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f023 0307 	bic.w	r3, r3, #7
 8017694:	3308      	adds	r3, #8
 8017696:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	f003 0307 	and.w	r3, r3, #7
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d00b      	beq.n	80176ba <pvPortMalloc+0x6e>
	__asm volatile
 80176a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80176a6:	f383 8811 	msr	BASEPRI, r3
 80176aa:	f3bf 8f6f 	isb	sy
 80176ae:	f3bf 8f4f 	dsb	sy
 80176b2:	617b      	str	r3, [r7, #20]
}
 80176b4:	bf00      	nop
 80176b6:	bf00      	nop
 80176b8:	e7fd      	b.n	80176b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d06f      	beq.n	80177a0 <pvPortMalloc+0x154>
 80176c0:	4b45      	ldr	r3, [pc, #276]	@ (80177d8 <pvPortMalloc+0x18c>)
 80176c2:	681b      	ldr	r3, [r3, #0]
 80176c4:	687a      	ldr	r2, [r7, #4]
 80176c6:	429a      	cmp	r2, r3
 80176c8:	d86a      	bhi.n	80177a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80176ca:	4b44      	ldr	r3, [pc, #272]	@ (80177dc <pvPortMalloc+0x190>)
 80176cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80176ce:	4b43      	ldr	r3, [pc, #268]	@ (80177dc <pvPortMalloc+0x190>)
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80176d4:	e004      	b.n	80176e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80176d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80176da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80176e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176e2:	685b      	ldr	r3, [r3, #4]
 80176e4:	687a      	ldr	r2, [r7, #4]
 80176e6:	429a      	cmp	r2, r3
 80176e8:	d903      	bls.n	80176f2 <pvPortMalloc+0xa6>
 80176ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80176ec:	681b      	ldr	r3, [r3, #0]
 80176ee:	2b00      	cmp	r3, #0
 80176f0:	d1f1      	bne.n	80176d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80176f2:	4b37      	ldr	r3, [pc, #220]	@ (80177d0 <pvPortMalloc+0x184>)
 80176f4:	681b      	ldr	r3, [r3, #0]
 80176f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80176f8:	429a      	cmp	r2, r3
 80176fa:	d051      	beq.n	80177a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80176fc:	6a3b      	ldr	r3, [r7, #32]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	2208      	movs	r2, #8
 8017702:	4413      	add	r3, r2
 8017704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8017706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017708:	681a      	ldr	r2, [r3, #0]
 801770a:	6a3b      	ldr	r3, [r7, #32]
 801770c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801770e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017710:	685a      	ldr	r2, [r3, #4]
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	1ad2      	subs	r2, r2, r3
 8017716:	2308      	movs	r3, #8
 8017718:	005b      	lsls	r3, r3, #1
 801771a:	429a      	cmp	r2, r3
 801771c:	d920      	bls.n	8017760 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801771e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	4413      	add	r3, r2
 8017724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8017726:	69bb      	ldr	r3, [r7, #24]
 8017728:	f003 0307 	and.w	r3, r3, #7
 801772c:	2b00      	cmp	r3, #0
 801772e:	d00b      	beq.n	8017748 <pvPortMalloc+0xfc>
	__asm volatile
 8017730:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8017734:	f383 8811 	msr	BASEPRI, r3
 8017738:	f3bf 8f6f 	isb	sy
 801773c:	f3bf 8f4f 	dsb	sy
 8017740:	613b      	str	r3, [r7, #16]
}
 8017742:	bf00      	nop
 8017744:	bf00      	nop
 8017746:	e7fd      	b.n	8017744 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8017748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801774a:	685a      	ldr	r2, [r3, #4]
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	1ad2      	subs	r2, r2, r3
 8017750:	69bb      	ldr	r3, [r7, #24]
 8017752:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8017754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017756:	687a      	ldr	r2, [r7, #4]
 8017758:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801775a:	69b8      	ldr	r0, [r7, #24]
 801775c:	f000 f90a 	bl	8017974 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8017760:	4b1d      	ldr	r3, [pc, #116]	@ (80177d8 <pvPortMalloc+0x18c>)
 8017762:	681a      	ldr	r2, [r3, #0]
 8017764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017766:	685b      	ldr	r3, [r3, #4]
 8017768:	1ad3      	subs	r3, r2, r3
 801776a:	4a1b      	ldr	r2, [pc, #108]	@ (80177d8 <pvPortMalloc+0x18c>)
 801776c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801776e:	4b1a      	ldr	r3, [pc, #104]	@ (80177d8 <pvPortMalloc+0x18c>)
 8017770:	681a      	ldr	r2, [r3, #0]
 8017772:	4b1b      	ldr	r3, [pc, #108]	@ (80177e0 <pvPortMalloc+0x194>)
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	429a      	cmp	r2, r3
 8017778:	d203      	bcs.n	8017782 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801777a:	4b17      	ldr	r3, [pc, #92]	@ (80177d8 <pvPortMalloc+0x18c>)
 801777c:	681b      	ldr	r3, [r3, #0]
 801777e:	4a18      	ldr	r2, [pc, #96]	@ (80177e0 <pvPortMalloc+0x194>)
 8017780:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8017782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017784:	685a      	ldr	r2, [r3, #4]
 8017786:	4b13      	ldr	r3, [pc, #76]	@ (80177d4 <pvPortMalloc+0x188>)
 8017788:	681b      	ldr	r3, [r3, #0]
 801778a:	431a      	orrs	r2, r3
 801778c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801778e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8017790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017792:	2200      	movs	r2, #0
 8017794:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8017796:	4b13      	ldr	r3, [pc, #76]	@ (80177e4 <pvPortMalloc+0x198>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	3301      	adds	r3, #1
 801779c:	4a11      	ldr	r2, [pc, #68]	@ (80177e4 <pvPortMalloc+0x198>)
 801779e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80177a0:	f7fe fa8c 	bl	8015cbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80177a4:	69fb      	ldr	r3, [r7, #28]
 80177a6:	f003 0307 	and.w	r3, r3, #7
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	d00b      	beq.n	80177c6 <pvPortMalloc+0x17a>
	__asm volatile
 80177ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80177b2:	f383 8811 	msr	BASEPRI, r3
 80177b6:	f3bf 8f6f 	isb	sy
 80177ba:	f3bf 8f4f 	dsb	sy
 80177be:	60fb      	str	r3, [r7, #12]
}
 80177c0:	bf00      	nop
 80177c2:	bf00      	nop
 80177c4:	e7fd      	b.n	80177c2 <pvPortMalloc+0x176>
	return pvReturn;
 80177c6:	69fb      	ldr	r3, [r7, #28]
}
 80177c8:	4618      	mov	r0, r3
 80177ca:	3728      	adds	r7, #40	@ 0x28
 80177cc:	46bd      	mov	sp, r7
 80177ce:	bd80      	pop	{r7, pc}
 80177d0:	2000a010 	.word	0x2000a010
 80177d4:	2000a024 	.word	0x2000a024
 80177d8:	2000a014 	.word	0x2000a014
 80177dc:	2000a008 	.word	0x2000a008
 80177e0:	2000a018 	.word	0x2000a018
 80177e4:	2000a01c 	.word	0x2000a01c

080177e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80177e8:	b580      	push	{r7, lr}
 80177ea:	b086      	sub	sp, #24
 80177ec:	af00      	add	r7, sp, #0
 80177ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80177f4:	687b      	ldr	r3, [r7, #4]
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	d04f      	beq.n	801789a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80177fa:	2308      	movs	r3, #8
 80177fc:	425b      	negs	r3, r3
 80177fe:	697a      	ldr	r2, [r7, #20]
 8017800:	4413      	add	r3, r2
 8017802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8017804:	697b      	ldr	r3, [r7, #20]
 8017806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8017808:	693b      	ldr	r3, [r7, #16]
 801780a:	685a      	ldr	r2, [r3, #4]
 801780c:	4b25      	ldr	r3, [pc, #148]	@ (80178a4 <vPortFree+0xbc>)
 801780e:	681b      	ldr	r3, [r3, #0]
 8017810:	4013      	ands	r3, r2
 8017812:	2b00      	cmp	r3, #0
 8017814:	d10b      	bne.n	801782e <vPortFree+0x46>
	__asm volatile
 8017816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801781a:	f383 8811 	msr	BASEPRI, r3
 801781e:	f3bf 8f6f 	isb	sy
 8017822:	f3bf 8f4f 	dsb	sy
 8017826:	60fb      	str	r3, [r7, #12]
}
 8017828:	bf00      	nop
 801782a:	bf00      	nop
 801782c:	e7fd      	b.n	801782a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801782e:	693b      	ldr	r3, [r7, #16]
 8017830:	681b      	ldr	r3, [r3, #0]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d00b      	beq.n	801784e <vPortFree+0x66>
	__asm volatile
 8017836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801783a:	f383 8811 	msr	BASEPRI, r3
 801783e:	f3bf 8f6f 	isb	sy
 8017842:	f3bf 8f4f 	dsb	sy
 8017846:	60bb      	str	r3, [r7, #8]
}
 8017848:	bf00      	nop
 801784a:	bf00      	nop
 801784c:	e7fd      	b.n	801784a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801784e:	693b      	ldr	r3, [r7, #16]
 8017850:	685a      	ldr	r2, [r3, #4]
 8017852:	4b14      	ldr	r3, [pc, #80]	@ (80178a4 <vPortFree+0xbc>)
 8017854:	681b      	ldr	r3, [r3, #0]
 8017856:	4013      	ands	r3, r2
 8017858:	2b00      	cmp	r3, #0
 801785a:	d01e      	beq.n	801789a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	2b00      	cmp	r3, #0
 8017862:	d11a      	bne.n	801789a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8017864:	693b      	ldr	r3, [r7, #16]
 8017866:	685a      	ldr	r2, [r3, #4]
 8017868:	4b0e      	ldr	r3, [pc, #56]	@ (80178a4 <vPortFree+0xbc>)
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	43db      	mvns	r3, r3
 801786e:	401a      	ands	r2, r3
 8017870:	693b      	ldr	r3, [r7, #16]
 8017872:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8017874:	f7fe fa14 	bl	8015ca0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8017878:	693b      	ldr	r3, [r7, #16]
 801787a:	685a      	ldr	r2, [r3, #4]
 801787c:	4b0a      	ldr	r3, [pc, #40]	@ (80178a8 <vPortFree+0xc0>)
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	4413      	add	r3, r2
 8017882:	4a09      	ldr	r2, [pc, #36]	@ (80178a8 <vPortFree+0xc0>)
 8017884:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8017886:	6938      	ldr	r0, [r7, #16]
 8017888:	f000 f874 	bl	8017974 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801788c:	4b07      	ldr	r3, [pc, #28]	@ (80178ac <vPortFree+0xc4>)
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	3301      	adds	r3, #1
 8017892:	4a06      	ldr	r2, [pc, #24]	@ (80178ac <vPortFree+0xc4>)
 8017894:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8017896:	f7fe fa11 	bl	8015cbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801789a:	bf00      	nop
 801789c:	3718      	adds	r7, #24
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}
 80178a2:	bf00      	nop
 80178a4:	2000a024 	.word	0x2000a024
 80178a8:	2000a014 	.word	0x2000a014
 80178ac:	2000a020 	.word	0x2000a020

080178b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80178b0:	b480      	push	{r7}
 80178b2:	b085      	sub	sp, #20
 80178b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80178b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80178ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80178bc:	4b27      	ldr	r3, [pc, #156]	@ (801795c <prvHeapInit+0xac>)
 80178be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	f003 0307 	and.w	r3, r3, #7
 80178c6:	2b00      	cmp	r3, #0
 80178c8:	d00c      	beq.n	80178e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80178ca:	68fb      	ldr	r3, [r7, #12]
 80178cc:	3307      	adds	r3, #7
 80178ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80178d0:	68fb      	ldr	r3, [r7, #12]
 80178d2:	f023 0307 	bic.w	r3, r3, #7
 80178d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80178d8:	68ba      	ldr	r2, [r7, #8]
 80178da:	68fb      	ldr	r3, [r7, #12]
 80178dc:	1ad3      	subs	r3, r2, r3
 80178de:	4a1f      	ldr	r2, [pc, #124]	@ (801795c <prvHeapInit+0xac>)
 80178e0:	4413      	add	r3, r2
 80178e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80178e8:	4a1d      	ldr	r2, [pc, #116]	@ (8017960 <prvHeapInit+0xb0>)
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80178ee:	4b1c      	ldr	r3, [pc, #112]	@ (8017960 <prvHeapInit+0xb0>)
 80178f0:	2200      	movs	r2, #0
 80178f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	68ba      	ldr	r2, [r7, #8]
 80178f8:	4413      	add	r3, r2
 80178fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80178fc:	2208      	movs	r2, #8
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	1a9b      	subs	r3, r3, r2
 8017902:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017904:	68fb      	ldr	r3, [r7, #12]
 8017906:	f023 0307 	bic.w	r3, r3, #7
 801790a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801790c:	68fb      	ldr	r3, [r7, #12]
 801790e:	4a15      	ldr	r2, [pc, #84]	@ (8017964 <prvHeapInit+0xb4>)
 8017910:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017912:	4b14      	ldr	r3, [pc, #80]	@ (8017964 <prvHeapInit+0xb4>)
 8017914:	681b      	ldr	r3, [r3, #0]
 8017916:	2200      	movs	r2, #0
 8017918:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801791a:	4b12      	ldr	r3, [pc, #72]	@ (8017964 <prvHeapInit+0xb4>)
 801791c:	681b      	ldr	r3, [r3, #0]
 801791e:	2200      	movs	r2, #0
 8017920:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017926:	683b      	ldr	r3, [r7, #0]
 8017928:	68fa      	ldr	r2, [r7, #12]
 801792a:	1ad2      	subs	r2, r2, r3
 801792c:	683b      	ldr	r3, [r7, #0]
 801792e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017930:	4b0c      	ldr	r3, [pc, #48]	@ (8017964 <prvHeapInit+0xb4>)
 8017932:	681a      	ldr	r2, [r3, #0]
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017938:	683b      	ldr	r3, [r7, #0]
 801793a:	685b      	ldr	r3, [r3, #4]
 801793c:	4a0a      	ldr	r2, [pc, #40]	@ (8017968 <prvHeapInit+0xb8>)
 801793e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017940:	683b      	ldr	r3, [r7, #0]
 8017942:	685b      	ldr	r3, [r3, #4]
 8017944:	4a09      	ldr	r2, [pc, #36]	@ (801796c <prvHeapInit+0xbc>)
 8017946:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8017948:	4b09      	ldr	r3, [pc, #36]	@ (8017970 <prvHeapInit+0xc0>)
 801794a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801794e:	601a      	str	r2, [r3, #0]
}
 8017950:	bf00      	nop
 8017952:	3714      	adds	r7, #20
 8017954:	46bd      	mov	sp, r7
 8017956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801795a:	4770      	bx	lr
 801795c:	20006408 	.word	0x20006408
 8017960:	2000a008 	.word	0x2000a008
 8017964:	2000a010 	.word	0x2000a010
 8017968:	2000a018 	.word	0x2000a018
 801796c:	2000a014 	.word	0x2000a014
 8017970:	2000a024 	.word	0x2000a024

08017974 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8017974:	b480      	push	{r7}
 8017976:	b085      	sub	sp, #20
 8017978:	af00      	add	r7, sp, #0
 801797a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801797c:	4b28      	ldr	r3, [pc, #160]	@ (8017a20 <prvInsertBlockIntoFreeList+0xac>)
 801797e:	60fb      	str	r3, [r7, #12]
 8017980:	e002      	b.n	8017988 <prvInsertBlockIntoFreeList+0x14>
 8017982:	68fb      	ldr	r3, [r7, #12]
 8017984:	681b      	ldr	r3, [r3, #0]
 8017986:	60fb      	str	r3, [r7, #12]
 8017988:	68fb      	ldr	r3, [r7, #12]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	687a      	ldr	r2, [r7, #4]
 801798e:	429a      	cmp	r2, r3
 8017990:	d8f7      	bhi.n	8017982 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8017992:	68fb      	ldr	r3, [r7, #12]
 8017994:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8017996:	68fb      	ldr	r3, [r7, #12]
 8017998:	685b      	ldr	r3, [r3, #4]
 801799a:	68ba      	ldr	r2, [r7, #8]
 801799c:	4413      	add	r3, r2
 801799e:	687a      	ldr	r2, [r7, #4]
 80179a0:	429a      	cmp	r2, r3
 80179a2:	d108      	bne.n	80179b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80179a4:	68fb      	ldr	r3, [r7, #12]
 80179a6:	685a      	ldr	r2, [r3, #4]
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	685b      	ldr	r3, [r3, #4]
 80179ac:	441a      	add	r2, r3
 80179ae:	68fb      	ldr	r3, [r7, #12]
 80179b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	685b      	ldr	r3, [r3, #4]
 80179be:	68ba      	ldr	r2, [r7, #8]
 80179c0:	441a      	add	r2, r3
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	681b      	ldr	r3, [r3, #0]
 80179c6:	429a      	cmp	r2, r3
 80179c8:	d118      	bne.n	80179fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80179ca:	68fb      	ldr	r3, [r7, #12]
 80179cc:	681a      	ldr	r2, [r3, #0]
 80179ce:	4b15      	ldr	r3, [pc, #84]	@ (8017a24 <prvInsertBlockIntoFreeList+0xb0>)
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	429a      	cmp	r2, r3
 80179d4:	d00d      	beq.n	80179f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	685a      	ldr	r2, [r3, #4]
 80179da:	68fb      	ldr	r3, [r7, #12]
 80179dc:	681b      	ldr	r3, [r3, #0]
 80179de:	685b      	ldr	r3, [r3, #4]
 80179e0:	441a      	add	r2, r3
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80179e6:	68fb      	ldr	r3, [r7, #12]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	681a      	ldr	r2, [r3, #0]
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	601a      	str	r2, [r3, #0]
 80179f0:	e008      	b.n	8017a04 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80179f2:	4b0c      	ldr	r3, [pc, #48]	@ (8017a24 <prvInsertBlockIntoFreeList+0xb0>)
 80179f4:	681a      	ldr	r2, [r3, #0]
 80179f6:	687b      	ldr	r3, [r7, #4]
 80179f8:	601a      	str	r2, [r3, #0]
 80179fa:	e003      	b.n	8017a04 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	681a      	ldr	r2, [r3, #0]
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017a04:	68fa      	ldr	r2, [r7, #12]
 8017a06:	687b      	ldr	r3, [r7, #4]
 8017a08:	429a      	cmp	r2, r3
 8017a0a:	d002      	beq.n	8017a12 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8017a0c:	68fb      	ldr	r3, [r7, #12]
 8017a0e:	687a      	ldr	r2, [r7, #4]
 8017a10:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017a12:	bf00      	nop
 8017a14:	3714      	adds	r7, #20
 8017a16:	46bd      	mov	sp, r7
 8017a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a1c:	4770      	bx	lr
 8017a1e:	bf00      	nop
 8017a20:	2000a008 	.word	0x2000a008
 8017a24:	2000a010 	.word	0x2000a010

08017a28 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017a28:	b580      	push	{r7, lr}
 8017a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017a2c:	2200      	movs	r2, #0
 8017a2e:	4912      	ldr	r1, [pc, #72]	@ (8017a78 <MX_USB_DEVICE_Init+0x50>)
 8017a30:	4812      	ldr	r0, [pc, #72]	@ (8017a7c <MX_USB_DEVICE_Init+0x54>)
 8017a32:	f7fb fb1b 	bl	801306c <USBD_Init>
 8017a36:	4603      	mov	r3, r0
 8017a38:	2b00      	cmp	r3, #0
 8017a3a:	d001      	beq.n	8017a40 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017a3c:	f7f1 fa56 	bl	8008eec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017a40:	490f      	ldr	r1, [pc, #60]	@ (8017a80 <MX_USB_DEVICE_Init+0x58>)
 8017a42:	480e      	ldr	r0, [pc, #56]	@ (8017a7c <MX_USB_DEVICE_Init+0x54>)
 8017a44:	f7fb fb42 	bl	80130cc <USBD_RegisterClass>
 8017a48:	4603      	mov	r3, r0
 8017a4a:	2b00      	cmp	r3, #0
 8017a4c:	d001      	beq.n	8017a52 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017a4e:	f7f1 fa4d 	bl	8008eec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017a52:	490c      	ldr	r1, [pc, #48]	@ (8017a84 <MX_USB_DEVICE_Init+0x5c>)
 8017a54:	4809      	ldr	r0, [pc, #36]	@ (8017a7c <MX_USB_DEVICE_Init+0x54>)
 8017a56:	f7fb fa39 	bl	8012ecc <USBD_CDC_RegisterInterface>
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d001      	beq.n	8017a64 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017a60:	f7f1 fa44 	bl	8008eec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017a64:	4805      	ldr	r0, [pc, #20]	@ (8017a7c <MX_USB_DEVICE_Init+0x54>)
 8017a66:	f7fb fb67 	bl	8013138 <USBD_Start>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	2b00      	cmp	r3, #0
 8017a6e:	d001      	beq.n	8017a74 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017a70:	f7f1 fa3c 	bl	8008eec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017a74:	bf00      	nop
 8017a76:	bd80      	pop	{r7, pc}
 8017a78:	20000104 	.word	0x20000104
 8017a7c:	2000a028 	.word	0x2000a028
 8017a80:	2000006c 	.word	0x2000006c
 8017a84:	200000f0 	.word	0x200000f0

08017a88 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017a88:	b580      	push	{r7, lr}
 8017a8a:	b08a      	sub	sp, #40	@ 0x28
 8017a8c:	af00      	add	r7, sp, #0
 8017a8e:	2300      	movs	r3, #0
 8017a90:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017a92:	f3ef 8310 	mrs	r3, PRIMASK
 8017a96:	61fb      	str	r3, [r7, #28]
  return(result);
 8017a98:	69fb      	ldr	r3, [r7, #28]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8017a9a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8017a9c:	b672      	cpsid	i
}
 8017a9e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8017aa0:	f3bf 8f4f 	dsb	sy
}
 8017aa4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017aa6:	f3bf 8f6f 	isb	sy
}
 8017aaa:	bf00      	nop
    return old;
 8017aac:	69bb      	ldr	r3, [r7, #24]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8017aae:	617b      	str	r3, [r7, #20]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8017ab0:	6a3b      	ldr	r3, [r7, #32]
 8017ab2:	2b01      	cmp	r3, #1
 8017ab4:	d001      	beq.n	8017aba <CDC_Init_FS+0x32>
 8017ab6:	697b      	ldr	r3, [r7, #20]
 8017ab8:	e000      	b.n	8017abc <CDC_Init_FS+0x34>
 8017aba:	2300      	movs	r3, #0
  /* USER CODE BEGIN 3 */
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8017abc:	607b      	str	r3, [r7, #4]
 8017abe:	2301      	movs	r3, #1
 8017ac0:	627b      	str	r3, [r7, #36]	@ 0x24
 8017ac2:	e007      	b.n	8017ad4 <CDC_Init_FS+0x4c>
	{
		ring_buffer_init(&rx_ringbuffer, rx_buffer, RX_BUFFER_SIZE);
 8017ac4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8017ac8:	4917      	ldr	r1, [pc, #92]	@ (8017b28 <CDC_Init_FS+0xa0>)
 8017aca:	4818      	ldr	r0, [pc, #96]	@ (8017b2c <CDC_Init_FS+0xa4>)
 8017acc:	f7f0 fcd6 	bl	800847c <ring_buffer_init>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8017ad0:	2300      	movs	r3, #0
 8017ad2:	627b      	str	r3, [r7, #36]	@ 0x24
 8017ad4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ad6:	2b00      	cmp	r3, #0
 8017ad8:	d1f4      	bne.n	8017ac4 <CDC_Init_FS+0x3c>
 8017ada:	1d3b      	adds	r3, r7, #4
 8017adc:	613b      	str	r3, [r7, #16]
	exit_critical(*sreg);		// restore saved I-bit
 8017ade:	693b      	ldr	r3, [r7, #16]
 8017ae0:	681b      	ldr	r3, [r3, #0]
 8017ae2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8017ae4:	f3bf 8f5f 	dmb	sy
}
 8017ae8:	bf00      	nop
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017aee:	68bb      	ldr	r3, [r7, #8]
 8017af0:	f383 8810 	msr	PRIMASK, r3
}
 8017af4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8017af6:	f3bf 8f4f 	dsb	sy
}
 8017afa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017afc:	f3bf 8f6f 	isb	sy
}
 8017b00:	bf00      	nop
}
 8017b02:	bf00      	nop
}
 8017b04:	bf00      	nop
	}


  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017b06:	2200      	movs	r2, #0
 8017b08:	4909      	ldr	r1, [pc, #36]	@ (8017b30 <CDC_Init_FS+0xa8>)
 8017b0a:	480a      	ldr	r0, [pc, #40]	@ (8017b34 <CDC_Init_FS+0xac>)
 8017b0c:	f7fb f9f8 	bl	8012f00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017b10:	4909      	ldr	r1, [pc, #36]	@ (8017b38 <CDC_Init_FS+0xb0>)
 8017b12:	4808      	ldr	r0, [pc, #32]	@ (8017b34 <CDC_Init_FS+0xac>)
 8017b14:	f7fb fa16 	bl	8012f44 <USBD_CDC_SetRxBuffer>

  // Arm the first OUT transfer so the host can send data
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017b18:	4806      	ldr	r0, [pc, #24]	@ (8017b34 <CDC_Init_FS+0xac>)
 8017b1a:	f7fb fa71 	bl	8013000 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8017b1e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017b20:	4618      	mov	r0, r3
 8017b22:	3728      	adds	r7, #40	@ 0x28
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}
 8017b28:	2000b304 	.word	0x2000b304
 8017b2c:	2000b704 	.word	0x2000b704
 8017b30:	2000ab04 	.word	0x2000ab04
 8017b34:	2000a028 	.word	0x2000a028
 8017b38:	2000a304 	.word	0x2000a304

08017b3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017b3c:	b580      	push	{r7, lr}
 8017b3e:	b08a      	sub	sp, #40	@ 0x28
 8017b40:	af00      	add	r7, sp, #0
 8017b42:	2300      	movs	r3, #0
 8017b44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017b46:	f3ef 8310 	mrs	r3, PRIMASK
 8017b4a:	61fb      	str	r3, [r7, #28]
  return(result);
 8017b4c:	69fb      	ldr	r3, [r7, #28]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8017b4e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 8017b50:	b672      	cpsid	i
}
 8017b52:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8017b54:	f3bf 8f4f 	dsb	sy
}
 8017b58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017b5a:	f3bf 8f6f 	isb	sy
}
 8017b5e:	bf00      	nop
    return old;
 8017b60:	69bb      	ldr	r3, [r7, #24]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8017b62:	617b      	str	r3, [r7, #20]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8017b64:	6a3b      	ldr	r3, [r7, #32]
 8017b66:	2b01      	cmp	r3, #1
 8017b68:	d001      	beq.n	8017b6e <CDC_DeInit_FS+0x32>
 8017b6a:	697b      	ldr	r3, [r7, #20]
 8017b6c:	e000      	b.n	8017b70 <CDC_DeInit_FS+0x34>
 8017b6e:	2300      	movs	r3, #0
  /* USER CODE BEGIN 4 */
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8017b70:	607b      	str	r3, [r7, #4]
 8017b72:	2301      	movs	r3, #1
 8017b74:	627b      	str	r3, [r7, #36]	@ 0x24
 8017b76:	e004      	b.n	8017b82 <CDC_DeInit_FS+0x46>
	{
		ring_buffer_clear(&rx_ringbuffer);
 8017b78:	4811      	ldr	r0, [pc, #68]	@ (8017bc0 <CDC_DeInit_FS+0x84>)
 8017b7a:	f7f0 fe0c 	bl	8008796 <ring_buffer_clear>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8017b7e:	2300      	movs	r3, #0
 8017b80:	627b      	str	r3, [r7, #36]	@ 0x24
 8017b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d1f7      	bne.n	8017b78 <CDC_DeInit_FS+0x3c>
 8017b88:	1d3b      	adds	r3, r7, #4
 8017b8a:	613b      	str	r3, [r7, #16]
	exit_critical(*sreg);		// restore saved I-bit
 8017b8c:	693b      	ldr	r3, [r7, #16]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8017b92:	f3bf 8f5f 	dmb	sy
}
 8017b96:	bf00      	nop
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017b9c:	68bb      	ldr	r3, [r7, #8]
 8017b9e:	f383 8810 	msr	PRIMASK, r3
}
 8017ba2:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8017ba4:	f3bf 8f4f 	dsb	sy
}
 8017ba8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017baa:	f3bf 8f6f 	isb	sy
}
 8017bae:	bf00      	nop
}
 8017bb0:	bf00      	nop
}
 8017bb2:	bf00      	nop
	}

  return (USBD_OK);
 8017bb4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	3728      	adds	r7, #40	@ 0x28
 8017bba:	46bd      	mov	sp, r7
 8017bbc:	bd80      	pop	{r7, pc}
 8017bbe:	bf00      	nop
 8017bc0:	2000b704 	.word	0x2000b704

08017bc4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017bc4:	b480      	push	{r7}
 8017bc6:	b083      	sub	sp, #12
 8017bc8:	af00      	add	r7, sp, #0
 8017bca:	4603      	mov	r3, r0
 8017bcc:	6039      	str	r1, [r7, #0]
 8017bce:	71fb      	strb	r3, [r7, #7]
 8017bd0:	4613      	mov	r3, r2
 8017bd2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017bd4:	79fb      	ldrb	r3, [r7, #7]
 8017bd6:	2b23      	cmp	r3, #35	@ 0x23
 8017bd8:	d84a      	bhi.n	8017c70 <CDC_Control_FS+0xac>
 8017bda:	a201      	add	r2, pc, #4	@ (adr r2, 8017be0 <CDC_Control_FS+0x1c>)
 8017bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017be0:	08017c71 	.word	0x08017c71
 8017be4:	08017c71 	.word	0x08017c71
 8017be8:	08017c71 	.word	0x08017c71
 8017bec:	08017c71 	.word	0x08017c71
 8017bf0:	08017c71 	.word	0x08017c71
 8017bf4:	08017c71 	.word	0x08017c71
 8017bf8:	08017c71 	.word	0x08017c71
 8017bfc:	08017c71 	.word	0x08017c71
 8017c00:	08017c71 	.word	0x08017c71
 8017c04:	08017c71 	.word	0x08017c71
 8017c08:	08017c71 	.word	0x08017c71
 8017c0c:	08017c71 	.word	0x08017c71
 8017c10:	08017c71 	.word	0x08017c71
 8017c14:	08017c71 	.word	0x08017c71
 8017c18:	08017c71 	.word	0x08017c71
 8017c1c:	08017c71 	.word	0x08017c71
 8017c20:	08017c71 	.word	0x08017c71
 8017c24:	08017c71 	.word	0x08017c71
 8017c28:	08017c71 	.word	0x08017c71
 8017c2c:	08017c71 	.word	0x08017c71
 8017c30:	08017c71 	.word	0x08017c71
 8017c34:	08017c71 	.word	0x08017c71
 8017c38:	08017c71 	.word	0x08017c71
 8017c3c:	08017c71 	.word	0x08017c71
 8017c40:	08017c71 	.word	0x08017c71
 8017c44:	08017c71 	.word	0x08017c71
 8017c48:	08017c71 	.word	0x08017c71
 8017c4c:	08017c71 	.word	0x08017c71
 8017c50:	08017c71 	.word	0x08017c71
 8017c54:	08017c71 	.word	0x08017c71
 8017c58:	08017c71 	.word	0x08017c71
 8017c5c:	08017c71 	.word	0x08017c71
 8017c60:	08017c71 	.word	0x08017c71
 8017c64:	08017c71 	.word	0x08017c71
 8017c68:	08017c71 	.word	0x08017c71
 8017c6c:	08017c71 	.word	0x08017c71
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017c70:	bf00      	nop
  }

  return (USBD_OK);
 8017c72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017c74:	4618      	mov	r0, r3
 8017c76:	370c      	adds	r7, #12
 8017c78:	46bd      	mov	sp, r7
 8017c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c7e:	4770      	bx	lr

08017c80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	b08c      	sub	sp, #48	@ 0x30
 8017c84:	af00      	add	r7, sp, #0
 8017c86:	6078      	str	r0, [r7, #4]
 8017c88:	6039      	str	r1, [r7, #0]
 8017c8a:	2300      	movs	r3, #0
 8017c8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8017c92:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8017c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8017c96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8017c98:	b672      	cpsid	i
}
 8017c9a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8017c9c:	f3bf 8f4f 	dsb	sy
}
 8017ca0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017ca2:	f3bf 8f6f 	isb	sy
}
 8017ca6:	bf00      	nop
    return old;
 8017ca8:	6a3b      	ldr	r3, [r7, #32]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8017caa:	61fb      	str	r3, [r7, #28]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8017cac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017cae:	2b01      	cmp	r3, #1
 8017cb0:	d001      	beq.n	8017cb6 <CDC_Receive_FS+0x36>
 8017cb2:	69fb      	ldr	r3, [r7, #28]
 8017cb4:	e000      	b.n	8017cb8 <CDC_Receive_FS+0x38>
 8017cb6:	2300      	movs	r3, #0
  /* USER CODE BEGIN 6 */
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8017cb8:	60fb      	str	r3, [r7, #12]
 8017cba:	2301      	movs	r3, #1
 8017cbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017cbe:	e008      	b.n	8017cd2 <CDC_Receive_FS+0x52>
	{
		ring_buffer_enqueue_arr(&rx_ringbuffer, Buf, *Len);
 8017cc0:	683b      	ldr	r3, [r7, #0]
 8017cc2:	681b      	ldr	r3, [r3, #0]
 8017cc4:	461a      	mov	r2, r3
 8017cc6:	6879      	ldr	r1, [r7, #4]
 8017cc8:	4815      	ldr	r0, [pc, #84]	@ (8017d20 <CDC_Receive_FS+0xa0>)
 8017cca:	f7f0 fc8e 	bl	80085ea <ring_buffer_enqueue_arr>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8017cce:	2300      	movs	r3, #0
 8017cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8017cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017cd4:	2b00      	cmp	r3, #0
 8017cd6:	d1f3      	bne.n	8017cc0 <CDC_Receive_FS+0x40>
 8017cd8:	f107 030c 	add.w	r3, r7, #12
 8017cdc:	61bb      	str	r3, [r7, #24]
	exit_critical(*sreg);		// restore saved I-bit
 8017cde:	69bb      	ldr	r3, [r7, #24]
 8017ce0:	681b      	ldr	r3, [r3, #0]
 8017ce2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dmb 0xF":::"memory");
 8017ce4:	f3bf 8f5f 	dmb	sy
}
 8017ce8:	bf00      	nop
 8017cea:	697b      	ldr	r3, [r7, #20]
 8017cec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017cee:	693b      	ldr	r3, [r7, #16]
 8017cf0:	f383 8810 	msr	PRIMASK, r3
}
 8017cf4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8017cf6:	f3bf 8f4f 	dsb	sy
}
 8017cfa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017cfc:	f3bf 8f6f 	isb	sy
}
 8017d00:	bf00      	nop
}
 8017d02:	bf00      	nop
}
 8017d04:	bf00      	nop
	}

	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017d06:	4907      	ldr	r1, [pc, #28]	@ (8017d24 <CDC_Receive_FS+0xa4>)
 8017d08:	4807      	ldr	r0, [pc, #28]	@ (8017d28 <CDC_Receive_FS+0xa8>)
 8017d0a:	f7fb f91b 	bl	8012f44 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017d0e:	4806      	ldr	r0, [pc, #24]	@ (8017d28 <CDC_Receive_FS+0xa8>)
 8017d10:	f7fb f976 	bl	8013000 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017d14:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017d16:	4618      	mov	r0, r3
 8017d18:	3730      	adds	r7, #48	@ 0x30
 8017d1a:	46bd      	mov	sp, r7
 8017d1c:	bd80      	pop	{r7, pc}
 8017d1e:	bf00      	nop
 8017d20:	2000b704 	.word	0x2000b704
 8017d24:	2000a304 	.word	0x2000a304
 8017d28:	2000a028 	.word	0x2000a028

08017d2c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8017d2c:	b580      	push	{r7, lr}
 8017d2e:	b084      	sub	sp, #16
 8017d30:	af00      	add	r7, sp, #0
 8017d32:	6078      	str	r0, [r7, #4]
 8017d34:	460b      	mov	r3, r1
 8017d36:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8017d38:	2300      	movs	r3, #0
 8017d3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8017d3c:	4b0d      	ldr	r3, [pc, #52]	@ (8017d74 <CDC_Transmit_FS+0x48>)
 8017d3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8017d42:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8017d44:	68bb      	ldr	r3, [r7, #8]
 8017d46:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8017d4a:	2b00      	cmp	r3, #0
 8017d4c:	d001      	beq.n	8017d52 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8017d4e:	2301      	movs	r3, #1
 8017d50:	e00b      	b.n	8017d6a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8017d52:	887b      	ldrh	r3, [r7, #2]
 8017d54:	461a      	mov	r2, r3
 8017d56:	6879      	ldr	r1, [r7, #4]
 8017d58:	4806      	ldr	r0, [pc, #24]	@ (8017d74 <CDC_Transmit_FS+0x48>)
 8017d5a:	f7fb f8d1 	bl	8012f00 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8017d5e:	4805      	ldr	r0, [pc, #20]	@ (8017d74 <CDC_Transmit_FS+0x48>)
 8017d60:	f7fb f90e 	bl	8012f80 <USBD_CDC_TransmitPacket>
 8017d64:	4603      	mov	r3, r0
 8017d66:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8017d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8017d6a:	4618      	mov	r0, r3
 8017d6c:	3710      	adds	r7, #16
 8017d6e:	46bd      	mov	sp, r7
 8017d70:	bd80      	pop	{r7, pc}
 8017d72:	bf00      	nop
 8017d74:	2000a028 	.word	0x2000a028

08017d78 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017d78:	b480      	push	{r7}
 8017d7a:	b087      	sub	sp, #28
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	60f8      	str	r0, [r7, #12]
 8017d80:	60b9      	str	r1, [r7, #8]
 8017d82:	4613      	mov	r3, r2
 8017d84:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017d86:	2300      	movs	r3, #0
 8017d88:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017d8a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017d8e:	4618      	mov	r0, r3
 8017d90:	371c      	adds	r7, #28
 8017d92:	46bd      	mov	sp, r7
 8017d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d98:	4770      	bx	lr
	...

08017d9c <CDC_recv_data>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

size_t CDC_recv_data(char* out_buf, size_t max_len)
{
 8017d9c:	b580      	push	{r7, lr}
 8017d9e:	b08c      	sub	sp, #48	@ 0x30
 8017da0:	af00      	add	r7, sp, #0
 8017da2:	6078      	str	r0, [r7, #4]
 8017da4:	6039      	str	r1, [r7, #0]
    if (out_buf == NULL || max_len == 0) {
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d002      	beq.n	8017db2 <CDC_recv_data+0x16>
 8017dac:	683b      	ldr	r3, [r7, #0]
 8017dae:	2b00      	cmp	r3, #0
 8017db0:	d101      	bne.n	8017db6 <CDC_recv_data+0x1a>
        return 0;
 8017db2:	2300      	movs	r3, #0
 8017db4:	e03f      	b.n	8017e36 <CDC_recv_data+0x9a>
 8017db6:	2300      	movs	r3, #0
 8017db8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8017dba:	f3ef 8310 	mrs	r3, PRIMASK
 8017dbe:	623b      	str	r3, [r7, #32]
  return(result);
 8017dc0:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8017dc2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8017dc4:	b672      	cpsid	i
}
 8017dc6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8017dc8:	f3bf 8f4f 	dsb	sy
}
 8017dcc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017dce:	f3bf 8f6f 	isb	sy
}
 8017dd2:	bf00      	nop
    return old;
 8017dd4:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8017dd6:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8017dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017dda:	2b01      	cmp	r3, #1
 8017ddc:	d001      	beq.n	8017de2 <CDC_recv_data+0x46>
 8017dde:	69bb      	ldr	r3, [r7, #24]
 8017de0:	e000      	b.n	8017de4 <CDC_recv_data+0x48>
 8017de2:	2300      	movs	r3, #0
    }
    size_t bytes_read;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8017de4:	60bb      	str	r3, [r7, #8]
 8017de6:	2301      	movs	r3, #1
 8017de8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017dea:	e009      	b.n	8017e00 <CDC_recv_data+0x64>
    {
        usart1_read_dma_buffer();
 8017dec:	f7f2 fe50 	bl	800aa90 <usart1_read_dma_buffer>
    	bytes_read = ring_buffer_dequeue_arr(&rx_ringbuffer, (uint8_t*)out_buf, max_len);
 8017df0:	683a      	ldr	r2, [r7, #0]
 8017df2:	6879      	ldr	r1, [r7, #4]
 8017df4:	4812      	ldr	r0, [pc, #72]	@ (8017e40 <CDC_recv_data+0xa4>)
 8017df6:	f7f0 fc52 	bl	800869e <ring_buffer_dequeue_arr>
 8017dfa:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8017e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d1f2      	bne.n	8017dec <CDC_recv_data+0x50>
 8017e06:	f107 0308 	add.w	r3, r7, #8
 8017e0a:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 8017e0c:	697b      	ldr	r3, [r7, #20]
 8017e0e:	681b      	ldr	r3, [r3, #0]
 8017e10:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 8017e12:	f3bf 8f5f 	dmb	sy
}
 8017e16:	bf00      	nop
 8017e18:	693b      	ldr	r3, [r7, #16]
 8017e1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8017e1c:	68fb      	ldr	r3, [r7, #12]
 8017e1e:	f383 8810 	msr	PRIMASK, r3
}
 8017e22:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8017e24:	f3bf 8f4f 	dsb	sy
}
 8017e28:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8017e2a:	f3bf 8f6f 	isb	sy
}
 8017e2e:	bf00      	nop
}
 8017e30:	bf00      	nop
}
 8017e32:	bf00      	nop
    }

    return bytes_read;
 8017e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8017e36:	4618      	mov	r0, r3
 8017e38:	3730      	adds	r7, #48	@ 0x30
 8017e3a:	46bd      	mov	sp, r7
 8017e3c:	bd80      	pop	{r7, pc}
 8017e3e:	bf00      	nop
 8017e40:	2000b704 	.word	0x2000b704

08017e44 <usb_printf>:
    return used;
}
#include "stdarg.h"
char usb_printf_buffer[512];
void usb_printf(const char *fmt, ...)
{
 8017e44:	b40f      	push	{r0, r1, r2, r3}
 8017e46:	b580      	push	{r7, lr}
 8017e48:	b082      	sub	sp, #8
 8017e4a:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8017e4c:	f107 0314 	add.w	r3, r7, #20
 8017e50:	607b      	str	r3, [r7, #4]
    vsnprintf(usb_printf_buffer, sizeof(usb_printf_buffer), fmt, args);
 8017e52:	687b      	ldr	r3, [r7, #4]
 8017e54:	693a      	ldr	r2, [r7, #16]
 8017e56:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8017e5a:	480c      	ldr	r0, [pc, #48]	@ (8017e8c <usb_printf+0x48>)
 8017e5c:	f003 fa8e 	bl	801b37c <vsniprintf>
    va_end(args);

    // wait until previous transmission is done
    while (CDC_Transmit_FS((uint8_t*)usb_printf_buffer, strlen(usb_printf_buffer)) == USBD_BUSY)
 8017e60:	bf00      	nop
 8017e62:	480a      	ldr	r0, [pc, #40]	@ (8017e8c <usb_printf+0x48>)
 8017e64:	f7e8 fa14 	bl	8000290 <strlen>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	b29b      	uxth	r3, r3
 8017e6c:	4619      	mov	r1, r3
 8017e6e:	4807      	ldr	r0, [pc, #28]	@ (8017e8c <usb_printf+0x48>)
 8017e70:	f7ff ff5c 	bl	8017d2c <CDC_Transmit_FS>
 8017e74:	4603      	mov	r3, r0
 8017e76:	2b01      	cmp	r3, #1
 8017e78:	d0f3      	beq.n	8017e62 <usb_printf+0x1e>
        ;  // simple blocking retry
}
 8017e7a:	bf00      	nop
 8017e7c:	bf00      	nop
 8017e7e:	3708      	adds	r7, #8
 8017e80:	46bd      	mov	sp, r7
 8017e82:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8017e86:	b004      	add	sp, #16
 8017e88:	4770      	bx	lr
 8017e8a:	bf00      	nop
 8017e8c:	2000b714 	.word	0x2000b714

08017e90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017e90:	b480      	push	{r7}
 8017e92:	b083      	sub	sp, #12
 8017e94:	af00      	add	r7, sp, #0
 8017e96:	4603      	mov	r3, r0
 8017e98:	6039      	str	r1, [r7, #0]
 8017e9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017e9c:	683b      	ldr	r3, [r7, #0]
 8017e9e:	2212      	movs	r2, #18
 8017ea0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017ea2:	4b03      	ldr	r3, [pc, #12]	@ (8017eb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	370c      	adds	r7, #12
 8017ea8:	46bd      	mov	sp, r7
 8017eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eae:	4770      	bx	lr
 8017eb0:	20000120 	.word	0x20000120

08017eb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017eb4:	b480      	push	{r7}
 8017eb6:	b083      	sub	sp, #12
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	4603      	mov	r3, r0
 8017ebc:	6039      	str	r1, [r7, #0]
 8017ebe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017ec0:	683b      	ldr	r3, [r7, #0]
 8017ec2:	2204      	movs	r2, #4
 8017ec4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017ec6:	4b03      	ldr	r3, [pc, #12]	@ (8017ed4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017ec8:	4618      	mov	r0, r3
 8017eca:	370c      	adds	r7, #12
 8017ecc:	46bd      	mov	sp, r7
 8017ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ed2:	4770      	bx	lr
 8017ed4:	20000134 	.word	0x20000134

08017ed8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ed8:	b580      	push	{r7, lr}
 8017eda:	b082      	sub	sp, #8
 8017edc:	af00      	add	r7, sp, #0
 8017ede:	4603      	mov	r3, r0
 8017ee0:	6039      	str	r1, [r7, #0]
 8017ee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017ee4:	79fb      	ldrb	r3, [r7, #7]
 8017ee6:	2b00      	cmp	r3, #0
 8017ee8:	d105      	bne.n	8017ef6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017eea:	683a      	ldr	r2, [r7, #0]
 8017eec:	4907      	ldr	r1, [pc, #28]	@ (8017f0c <USBD_FS_ProductStrDescriptor+0x34>)
 8017eee:	4808      	ldr	r0, [pc, #32]	@ (8017f10 <USBD_FS_ProductStrDescriptor+0x38>)
 8017ef0:	f7fc fad2 	bl	8014498 <USBD_GetString>
 8017ef4:	e004      	b.n	8017f00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017ef6:	683a      	ldr	r2, [r7, #0]
 8017ef8:	4904      	ldr	r1, [pc, #16]	@ (8017f0c <USBD_FS_ProductStrDescriptor+0x34>)
 8017efa:	4805      	ldr	r0, [pc, #20]	@ (8017f10 <USBD_FS_ProductStrDescriptor+0x38>)
 8017efc:	f7fc facc 	bl	8014498 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017f00:	4b02      	ldr	r3, [pc, #8]	@ (8017f0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017f02:	4618      	mov	r0, r3
 8017f04:	3708      	adds	r7, #8
 8017f06:	46bd      	mov	sp, r7
 8017f08:	bd80      	pop	{r7, pc}
 8017f0a:	bf00      	nop
 8017f0c:	2000b914 	.word	0x2000b914
 8017f10:	080213ec 	.word	0x080213ec

08017f14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f14:	b580      	push	{r7, lr}
 8017f16:	b082      	sub	sp, #8
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	4603      	mov	r3, r0
 8017f1c:	6039      	str	r1, [r7, #0]
 8017f1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017f20:	683a      	ldr	r2, [r7, #0]
 8017f22:	4904      	ldr	r1, [pc, #16]	@ (8017f34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017f24:	4804      	ldr	r0, [pc, #16]	@ (8017f38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017f26:	f7fc fab7 	bl	8014498 <USBD_GetString>
  return USBD_StrDesc;
 8017f2a:	4b02      	ldr	r3, [pc, #8]	@ (8017f34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017f2c:	4618      	mov	r0, r3
 8017f2e:	3708      	adds	r7, #8
 8017f30:	46bd      	mov	sp, r7
 8017f32:	bd80      	pop	{r7, pc}
 8017f34:	2000b914 	.word	0x2000b914
 8017f38:	08021404 	.word	0x08021404

08017f3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f3c:	b580      	push	{r7, lr}
 8017f3e:	b082      	sub	sp, #8
 8017f40:	af00      	add	r7, sp, #0
 8017f42:	4603      	mov	r3, r0
 8017f44:	6039      	str	r1, [r7, #0]
 8017f46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017f48:	683b      	ldr	r3, [r7, #0]
 8017f4a:	221a      	movs	r2, #26
 8017f4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017f4e:	f000 f843 	bl	8017fd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017f52:	4b02      	ldr	r3, [pc, #8]	@ (8017f5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017f54:	4618      	mov	r0, r3
 8017f56:	3708      	adds	r7, #8
 8017f58:	46bd      	mov	sp, r7
 8017f5a:	bd80      	pop	{r7, pc}
 8017f5c:	20000138 	.word	0x20000138

08017f60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b082      	sub	sp, #8
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	4603      	mov	r3, r0
 8017f68:	6039      	str	r1, [r7, #0]
 8017f6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017f6c:	79fb      	ldrb	r3, [r7, #7]
 8017f6e:	2b00      	cmp	r3, #0
 8017f70:	d105      	bne.n	8017f7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017f72:	683a      	ldr	r2, [r7, #0]
 8017f74:	4907      	ldr	r1, [pc, #28]	@ (8017f94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017f76:	4808      	ldr	r0, [pc, #32]	@ (8017f98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017f78:	f7fc fa8e 	bl	8014498 <USBD_GetString>
 8017f7c:	e004      	b.n	8017f88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017f7e:	683a      	ldr	r2, [r7, #0]
 8017f80:	4904      	ldr	r1, [pc, #16]	@ (8017f94 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017f82:	4805      	ldr	r0, [pc, #20]	@ (8017f98 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017f84:	f7fc fa88 	bl	8014498 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017f88:	4b02      	ldr	r3, [pc, #8]	@ (8017f94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017f8a:	4618      	mov	r0, r3
 8017f8c:	3708      	adds	r7, #8
 8017f8e:	46bd      	mov	sp, r7
 8017f90:	bd80      	pop	{r7, pc}
 8017f92:	bf00      	nop
 8017f94:	2000b914 	.word	0x2000b914
 8017f98:	08021418 	.word	0x08021418

08017f9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017f9c:	b580      	push	{r7, lr}
 8017f9e:	b082      	sub	sp, #8
 8017fa0:	af00      	add	r7, sp, #0
 8017fa2:	4603      	mov	r3, r0
 8017fa4:	6039      	str	r1, [r7, #0]
 8017fa6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017fa8:	79fb      	ldrb	r3, [r7, #7]
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d105      	bne.n	8017fba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017fae:	683a      	ldr	r2, [r7, #0]
 8017fb0:	4907      	ldr	r1, [pc, #28]	@ (8017fd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017fb2:	4808      	ldr	r0, [pc, #32]	@ (8017fd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017fb4:	f7fc fa70 	bl	8014498 <USBD_GetString>
 8017fb8:	e004      	b.n	8017fc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017fba:	683a      	ldr	r2, [r7, #0]
 8017fbc:	4904      	ldr	r1, [pc, #16]	@ (8017fd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017fbe:	4805      	ldr	r0, [pc, #20]	@ (8017fd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017fc0:	f7fc fa6a 	bl	8014498 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017fc4:	4b02      	ldr	r3, [pc, #8]	@ (8017fd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017fc6:	4618      	mov	r0, r3
 8017fc8:	3708      	adds	r7, #8
 8017fca:	46bd      	mov	sp, r7
 8017fcc:	bd80      	pop	{r7, pc}
 8017fce:	bf00      	nop
 8017fd0:	2000b914 	.word	0x2000b914
 8017fd4:	08021424 	.word	0x08021424

08017fd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017fd8:	b580      	push	{r7, lr}
 8017fda:	b084      	sub	sp, #16
 8017fdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017fde:	4b0f      	ldr	r3, [pc, #60]	@ (801801c <Get_SerialNum+0x44>)
 8017fe0:	681b      	ldr	r3, [r3, #0]
 8017fe2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017fe4:	4b0e      	ldr	r3, [pc, #56]	@ (8018020 <Get_SerialNum+0x48>)
 8017fe6:	681b      	ldr	r3, [r3, #0]
 8017fe8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017fea:	4b0e      	ldr	r3, [pc, #56]	@ (8018024 <Get_SerialNum+0x4c>)
 8017fec:	681b      	ldr	r3, [r3, #0]
 8017fee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017ff0:	68fa      	ldr	r2, [r7, #12]
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	4413      	add	r3, r2
 8017ff6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017ff8:	68fb      	ldr	r3, [r7, #12]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d009      	beq.n	8018012 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017ffe:	2208      	movs	r2, #8
 8018000:	4909      	ldr	r1, [pc, #36]	@ (8018028 <Get_SerialNum+0x50>)
 8018002:	68f8      	ldr	r0, [r7, #12]
 8018004:	f000 f814 	bl	8018030 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018008:	2204      	movs	r2, #4
 801800a:	4908      	ldr	r1, [pc, #32]	@ (801802c <Get_SerialNum+0x54>)
 801800c:	68b8      	ldr	r0, [r7, #8]
 801800e:	f000 f80f 	bl	8018030 <IntToUnicode>
  }
}
 8018012:	bf00      	nop
 8018014:	3710      	adds	r7, #16
 8018016:	46bd      	mov	sp, r7
 8018018:	bd80      	pop	{r7, pc}
 801801a:	bf00      	nop
 801801c:	1fff7a10 	.word	0x1fff7a10
 8018020:	1fff7a14 	.word	0x1fff7a14
 8018024:	1fff7a18 	.word	0x1fff7a18
 8018028:	2000013a 	.word	0x2000013a
 801802c:	2000014a 	.word	0x2000014a

08018030 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018030:	b480      	push	{r7}
 8018032:	b087      	sub	sp, #28
 8018034:	af00      	add	r7, sp, #0
 8018036:	60f8      	str	r0, [r7, #12]
 8018038:	60b9      	str	r1, [r7, #8]
 801803a:	4613      	mov	r3, r2
 801803c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801803e:	2300      	movs	r3, #0
 8018040:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018042:	2300      	movs	r3, #0
 8018044:	75fb      	strb	r3, [r7, #23]
 8018046:	e027      	b.n	8018098 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018048:	68fb      	ldr	r3, [r7, #12]
 801804a:	0f1b      	lsrs	r3, r3, #28
 801804c:	2b09      	cmp	r3, #9
 801804e:	d80b      	bhi.n	8018068 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018050:	68fb      	ldr	r3, [r7, #12]
 8018052:	0f1b      	lsrs	r3, r3, #28
 8018054:	b2da      	uxtb	r2, r3
 8018056:	7dfb      	ldrb	r3, [r7, #23]
 8018058:	005b      	lsls	r3, r3, #1
 801805a:	4619      	mov	r1, r3
 801805c:	68bb      	ldr	r3, [r7, #8]
 801805e:	440b      	add	r3, r1
 8018060:	3230      	adds	r2, #48	@ 0x30
 8018062:	b2d2      	uxtb	r2, r2
 8018064:	701a      	strb	r2, [r3, #0]
 8018066:	e00a      	b.n	801807e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	0f1b      	lsrs	r3, r3, #28
 801806c:	b2da      	uxtb	r2, r3
 801806e:	7dfb      	ldrb	r3, [r7, #23]
 8018070:	005b      	lsls	r3, r3, #1
 8018072:	4619      	mov	r1, r3
 8018074:	68bb      	ldr	r3, [r7, #8]
 8018076:	440b      	add	r3, r1
 8018078:	3237      	adds	r2, #55	@ 0x37
 801807a:	b2d2      	uxtb	r2, r2
 801807c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	011b      	lsls	r3, r3, #4
 8018082:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018084:	7dfb      	ldrb	r3, [r7, #23]
 8018086:	005b      	lsls	r3, r3, #1
 8018088:	3301      	adds	r3, #1
 801808a:	68ba      	ldr	r2, [r7, #8]
 801808c:	4413      	add	r3, r2
 801808e:	2200      	movs	r2, #0
 8018090:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018092:	7dfb      	ldrb	r3, [r7, #23]
 8018094:	3301      	adds	r3, #1
 8018096:	75fb      	strb	r3, [r7, #23]
 8018098:	7dfa      	ldrb	r2, [r7, #23]
 801809a:	79fb      	ldrb	r3, [r7, #7]
 801809c:	429a      	cmp	r2, r3
 801809e:	d3d3      	bcc.n	8018048 <IntToUnicode+0x18>
  }
}
 80180a0:	bf00      	nop
 80180a2:	bf00      	nop
 80180a4:	371c      	adds	r7, #28
 80180a6:	46bd      	mov	sp, r7
 80180a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180ac:	4770      	bx	lr
	...

080180b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80180b0:	b580      	push	{r7, lr}
 80180b2:	b08a      	sub	sp, #40	@ 0x28
 80180b4:	af00      	add	r7, sp, #0
 80180b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80180b8:	f107 0314 	add.w	r3, r7, #20
 80180bc:	2200      	movs	r2, #0
 80180be:	601a      	str	r2, [r3, #0]
 80180c0:	605a      	str	r2, [r3, #4]
 80180c2:	609a      	str	r2, [r3, #8]
 80180c4:	60da      	str	r2, [r3, #12]
 80180c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80180d0:	d13a      	bne.n	8018148 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80180d2:	2300      	movs	r3, #0
 80180d4:	613b      	str	r3, [r7, #16]
 80180d6:	4b1e      	ldr	r3, [pc, #120]	@ (8018150 <HAL_PCD_MspInit+0xa0>)
 80180d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80180da:	4a1d      	ldr	r2, [pc, #116]	@ (8018150 <HAL_PCD_MspInit+0xa0>)
 80180dc:	f043 0301 	orr.w	r3, r3, #1
 80180e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80180e2:	4b1b      	ldr	r3, [pc, #108]	@ (8018150 <HAL_PCD_MspInit+0xa0>)
 80180e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80180e6:	f003 0301 	and.w	r3, r3, #1
 80180ea:	613b      	str	r3, [r7, #16]
 80180ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80180ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80180f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80180f4:	2302      	movs	r3, #2
 80180f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80180f8:	2300      	movs	r3, #0
 80180fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80180fc:	2303      	movs	r3, #3
 80180fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8018100:	230a      	movs	r3, #10
 8018102:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018104:	f107 0314 	add.w	r3, r7, #20
 8018108:	4619      	mov	r1, r3
 801810a:	4812      	ldr	r0, [pc, #72]	@ (8018154 <HAL_PCD_MspInit+0xa4>)
 801810c:	f7f3 fd08 	bl	800bb20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018110:	4b0f      	ldr	r3, [pc, #60]	@ (8018150 <HAL_PCD_MspInit+0xa0>)
 8018112:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018114:	4a0e      	ldr	r2, [pc, #56]	@ (8018150 <HAL_PCD_MspInit+0xa0>)
 8018116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801811a:	6353      	str	r3, [r2, #52]	@ 0x34
 801811c:	2300      	movs	r3, #0
 801811e:	60fb      	str	r3, [r7, #12]
 8018120:	4b0b      	ldr	r3, [pc, #44]	@ (8018150 <HAL_PCD_MspInit+0xa0>)
 8018122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018124:	4a0a      	ldr	r2, [pc, #40]	@ (8018150 <HAL_PCD_MspInit+0xa0>)
 8018126:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801812a:	6453      	str	r3, [r2, #68]	@ 0x44
 801812c:	4b08      	ldr	r3, [pc, #32]	@ (8018150 <HAL_PCD_MspInit+0xa0>)
 801812e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018130:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018134:	60fb      	str	r3, [r7, #12]
 8018136:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8018138:	2200      	movs	r2, #0
 801813a:	2105      	movs	r1, #5
 801813c:	2043      	movs	r0, #67	@ 0x43
 801813e:	f7f3 f857 	bl	800b1f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018142:	2043      	movs	r0, #67	@ 0x43
 8018144:	f7f3 f870 	bl	800b228 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018148:	bf00      	nop
 801814a:	3728      	adds	r7, #40	@ 0x28
 801814c:	46bd      	mov	sp, r7
 801814e:	bd80      	pop	{r7, pc}
 8018150:	40023800 	.word	0x40023800
 8018154:	40020000 	.word	0x40020000

08018158 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018158:	b580      	push	{r7, lr}
 801815a:	b082      	sub	sp, #8
 801815c:	af00      	add	r7, sp, #0
 801815e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801816c:	4619      	mov	r1, r3
 801816e:	4610      	mov	r0, r2
 8018170:	f7fb f82f 	bl	80131d2 <USBD_LL_SetupStage>
}
 8018174:	bf00      	nop
 8018176:	3708      	adds	r7, #8
 8018178:	46bd      	mov	sp, r7
 801817a:	bd80      	pop	{r7, pc}

0801817c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801817c:	b580      	push	{r7, lr}
 801817e:	b082      	sub	sp, #8
 8018180:	af00      	add	r7, sp, #0
 8018182:	6078      	str	r0, [r7, #4]
 8018184:	460b      	mov	r3, r1
 8018186:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801818e:	78fa      	ldrb	r2, [r7, #3]
 8018190:	6879      	ldr	r1, [r7, #4]
 8018192:	4613      	mov	r3, r2
 8018194:	00db      	lsls	r3, r3, #3
 8018196:	4413      	add	r3, r2
 8018198:	009b      	lsls	r3, r3, #2
 801819a:	440b      	add	r3, r1
 801819c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80181a0:	681a      	ldr	r2, [r3, #0]
 80181a2:	78fb      	ldrb	r3, [r7, #3]
 80181a4:	4619      	mov	r1, r3
 80181a6:	f7fb f869 	bl	801327c <USBD_LL_DataOutStage>
}
 80181aa:	bf00      	nop
 80181ac:	3708      	adds	r7, #8
 80181ae:	46bd      	mov	sp, r7
 80181b0:	bd80      	pop	{r7, pc}

080181b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181b2:	b580      	push	{r7, lr}
 80181b4:	b082      	sub	sp, #8
 80181b6:	af00      	add	r7, sp, #0
 80181b8:	6078      	str	r0, [r7, #4]
 80181ba:	460b      	mov	r3, r1
 80181bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80181c4:	78fa      	ldrb	r2, [r7, #3]
 80181c6:	6879      	ldr	r1, [r7, #4]
 80181c8:	4613      	mov	r3, r2
 80181ca:	00db      	lsls	r3, r3, #3
 80181cc:	4413      	add	r3, r2
 80181ce:	009b      	lsls	r3, r3, #2
 80181d0:	440b      	add	r3, r1
 80181d2:	3320      	adds	r3, #32
 80181d4:	681a      	ldr	r2, [r3, #0]
 80181d6:	78fb      	ldrb	r3, [r7, #3]
 80181d8:	4619      	mov	r1, r3
 80181da:	f7fb f902 	bl	80133e2 <USBD_LL_DataInStage>
}
 80181de:	bf00      	nop
 80181e0:	3708      	adds	r7, #8
 80181e2:	46bd      	mov	sp, r7
 80181e4:	bd80      	pop	{r7, pc}

080181e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80181e6:	b580      	push	{r7, lr}
 80181e8:	b082      	sub	sp, #8
 80181ea:	af00      	add	r7, sp, #0
 80181ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80181f4:	4618      	mov	r0, r3
 80181f6:	f7fb fa3c 	bl	8013672 <USBD_LL_SOF>
}
 80181fa:	bf00      	nop
 80181fc:	3708      	adds	r7, #8
 80181fe:	46bd      	mov	sp, r7
 8018200:	bd80      	pop	{r7, pc}

08018202 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018202:	b580      	push	{r7, lr}
 8018204:	b084      	sub	sp, #16
 8018206:	af00      	add	r7, sp, #0
 8018208:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801820a:	2301      	movs	r3, #1
 801820c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801820e:	687b      	ldr	r3, [r7, #4]
 8018210:	79db      	ldrb	r3, [r3, #7]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d102      	bne.n	801821c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018216:	2300      	movs	r3, #0
 8018218:	73fb      	strb	r3, [r7, #15]
 801821a:	e008      	b.n	801822e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801821c:	687b      	ldr	r3, [r7, #4]
 801821e:	79db      	ldrb	r3, [r3, #7]
 8018220:	2b02      	cmp	r3, #2
 8018222:	d102      	bne.n	801822a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018224:	2301      	movs	r3, #1
 8018226:	73fb      	strb	r3, [r7, #15]
 8018228:	e001      	b.n	801822e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801822a:	f7f0 fe5f 	bl	8008eec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801822e:	687b      	ldr	r3, [r7, #4]
 8018230:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018234:	7bfa      	ldrb	r2, [r7, #15]
 8018236:	4611      	mov	r1, r2
 8018238:	4618      	mov	r0, r3
 801823a:	f7fb f9d6 	bl	80135ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801823e:	687b      	ldr	r3, [r7, #4]
 8018240:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018244:	4618      	mov	r0, r3
 8018246:	f7fb f97e 	bl	8013546 <USBD_LL_Reset>
}
 801824a:	bf00      	nop
 801824c:	3710      	adds	r7, #16
 801824e:	46bd      	mov	sp, r7
 8018250:	bd80      	pop	{r7, pc}
	...

08018254 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018254:	b580      	push	{r7, lr}
 8018256:	b082      	sub	sp, #8
 8018258:	af00      	add	r7, sp, #0
 801825a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801825c:	687b      	ldr	r3, [r7, #4]
 801825e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018262:	4618      	mov	r0, r3
 8018264:	f7fb f9d1 	bl	801360a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	681b      	ldr	r3, [r3, #0]
 801826c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8018270:	681b      	ldr	r3, [r3, #0]
 8018272:	687a      	ldr	r2, [r7, #4]
 8018274:	6812      	ldr	r2, [r2, #0]
 8018276:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801827a:	f043 0301 	orr.w	r3, r3, #1
 801827e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	7adb      	ldrb	r3, [r3, #11]
 8018284:	2b00      	cmp	r3, #0
 8018286:	d005      	beq.n	8018294 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018288:	4b04      	ldr	r3, [pc, #16]	@ (801829c <HAL_PCD_SuspendCallback+0x48>)
 801828a:	691b      	ldr	r3, [r3, #16]
 801828c:	4a03      	ldr	r2, [pc, #12]	@ (801829c <HAL_PCD_SuspendCallback+0x48>)
 801828e:	f043 0306 	orr.w	r3, r3, #6
 8018292:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018294:	bf00      	nop
 8018296:	3708      	adds	r7, #8
 8018298:	46bd      	mov	sp, r7
 801829a:	bd80      	pop	{r7, pc}
 801829c:	e000ed00 	.word	0xe000ed00

080182a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182a0:	b580      	push	{r7, lr}
 80182a2:	b082      	sub	sp, #8
 80182a4:	af00      	add	r7, sp, #0
 80182a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80182ae:	4618      	mov	r0, r3
 80182b0:	f7fb f9c7 	bl	8013642 <USBD_LL_Resume>
}
 80182b4:	bf00      	nop
 80182b6:	3708      	adds	r7, #8
 80182b8:	46bd      	mov	sp, r7
 80182ba:	bd80      	pop	{r7, pc}

080182bc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182bc:	b580      	push	{r7, lr}
 80182be:	b082      	sub	sp, #8
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	6078      	str	r0, [r7, #4]
 80182c4:	460b      	mov	r3, r1
 80182c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80182ce:	78fa      	ldrb	r2, [r7, #3]
 80182d0:	4611      	mov	r1, r2
 80182d2:	4618      	mov	r0, r3
 80182d4:	f7fb fa1f 	bl	8013716 <USBD_LL_IsoOUTIncomplete>
}
 80182d8:	bf00      	nop
 80182da:	3708      	adds	r7, #8
 80182dc:	46bd      	mov	sp, r7
 80182de:	bd80      	pop	{r7, pc}

080182e0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80182e0:	b580      	push	{r7, lr}
 80182e2:	b082      	sub	sp, #8
 80182e4:	af00      	add	r7, sp, #0
 80182e6:	6078      	str	r0, [r7, #4]
 80182e8:	460b      	mov	r3, r1
 80182ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80182f2:	78fa      	ldrb	r2, [r7, #3]
 80182f4:	4611      	mov	r1, r2
 80182f6:	4618      	mov	r0, r3
 80182f8:	f7fb f9db 	bl	80136b2 <USBD_LL_IsoINIncomplete>
}
 80182fc:	bf00      	nop
 80182fe:	3708      	adds	r7, #8
 8018300:	46bd      	mov	sp, r7
 8018302:	bd80      	pop	{r7, pc}

08018304 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b082      	sub	sp, #8
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8018312:	4618      	mov	r0, r3
 8018314:	f7fb fa31 	bl	801377a <USBD_LL_DevConnected>
}
 8018318:	bf00      	nop
 801831a:	3708      	adds	r7, #8
 801831c:	46bd      	mov	sp, r7
 801831e:	bd80      	pop	{r7, pc}

08018320 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018320:	b580      	push	{r7, lr}
 8018322:	b082      	sub	sp, #8
 8018324:	af00      	add	r7, sp, #0
 8018326:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801832e:	4618      	mov	r0, r3
 8018330:	f7fb fa2e 	bl	8013790 <USBD_LL_DevDisconnected>
}
 8018334:	bf00      	nop
 8018336:	3708      	adds	r7, #8
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}

0801833c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b082      	sub	sp, #8
 8018340:	af00      	add	r7, sp, #0
 8018342:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018344:	687b      	ldr	r3, [r7, #4]
 8018346:	781b      	ldrb	r3, [r3, #0]
 8018348:	2b00      	cmp	r3, #0
 801834a:	d13c      	bne.n	80183c6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801834c:	4a20      	ldr	r2, [pc, #128]	@ (80183d0 <USBD_LL_Init+0x94>)
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8018354:	687b      	ldr	r3, [r7, #4]
 8018356:	4a1e      	ldr	r2, [pc, #120]	@ (80183d0 <USBD_LL_Init+0x94>)
 8018358:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801835c:	4b1c      	ldr	r3, [pc, #112]	@ (80183d0 <USBD_LL_Init+0x94>)
 801835e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8018362:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018364:	4b1a      	ldr	r3, [pc, #104]	@ (80183d0 <USBD_LL_Init+0x94>)
 8018366:	2204      	movs	r2, #4
 8018368:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801836a:	4b19      	ldr	r3, [pc, #100]	@ (80183d0 <USBD_LL_Init+0x94>)
 801836c:	2202      	movs	r2, #2
 801836e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8018370:	4b17      	ldr	r3, [pc, #92]	@ (80183d0 <USBD_LL_Init+0x94>)
 8018372:	2200      	movs	r2, #0
 8018374:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018376:	4b16      	ldr	r3, [pc, #88]	@ (80183d0 <USBD_LL_Init+0x94>)
 8018378:	2202      	movs	r2, #2
 801837a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801837c:	4b14      	ldr	r3, [pc, #80]	@ (80183d0 <USBD_LL_Init+0x94>)
 801837e:	2200      	movs	r2, #0
 8018380:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8018382:	4b13      	ldr	r3, [pc, #76]	@ (80183d0 <USBD_LL_Init+0x94>)
 8018384:	2200      	movs	r2, #0
 8018386:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018388:	4b11      	ldr	r3, [pc, #68]	@ (80183d0 <USBD_LL_Init+0x94>)
 801838a:	2200      	movs	r2, #0
 801838c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801838e:	4b10      	ldr	r3, [pc, #64]	@ (80183d0 <USBD_LL_Init+0x94>)
 8018390:	2200      	movs	r2, #0
 8018392:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018394:	4b0e      	ldr	r3, [pc, #56]	@ (80183d0 <USBD_LL_Init+0x94>)
 8018396:	2200      	movs	r2, #0
 8018398:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801839a:	480d      	ldr	r0, [pc, #52]	@ (80183d0 <USBD_LL_Init+0x94>)
 801839c:	f7f3 fe71 	bl	800c082 <HAL_PCD_Init>
 80183a0:	4603      	mov	r3, r0
 80183a2:	2b00      	cmp	r3, #0
 80183a4:	d001      	beq.n	80183aa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80183a6:	f7f0 fda1 	bl	8008eec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80183aa:	2180      	movs	r1, #128	@ 0x80
 80183ac:	4808      	ldr	r0, [pc, #32]	@ (80183d0 <USBD_LL_Init+0x94>)
 80183ae:	f7f5 f89e 	bl	800d4ee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80183b2:	2240      	movs	r2, #64	@ 0x40
 80183b4:	2100      	movs	r1, #0
 80183b6:	4806      	ldr	r0, [pc, #24]	@ (80183d0 <USBD_LL_Init+0x94>)
 80183b8:	f7f5 f852 	bl	800d460 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80183bc:	2280      	movs	r2, #128	@ 0x80
 80183be:	2101      	movs	r1, #1
 80183c0:	4803      	ldr	r0, [pc, #12]	@ (80183d0 <USBD_LL_Init+0x94>)
 80183c2:	f7f5 f84d 	bl	800d460 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80183c6:	2300      	movs	r3, #0
}
 80183c8:	4618      	mov	r0, r3
 80183ca:	3708      	adds	r7, #8
 80183cc:	46bd      	mov	sp, r7
 80183ce:	bd80      	pop	{r7, pc}
 80183d0:	2000bb14 	.word	0x2000bb14

080183d4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80183d4:	b580      	push	{r7, lr}
 80183d6:	b084      	sub	sp, #16
 80183d8:	af00      	add	r7, sp, #0
 80183da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80183dc:	2300      	movs	r3, #0
 80183de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183e0:	2300      	movs	r3, #0
 80183e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80183ea:	4618      	mov	r0, r3
 80183ec:	f7f3 ff58 	bl	800c2a0 <HAL_PCD_Start>
 80183f0:	4603      	mov	r3, r0
 80183f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80183f4:	7bfb      	ldrb	r3, [r7, #15]
 80183f6:	4618      	mov	r0, r3
 80183f8:	f000 f942 	bl	8018680 <USBD_Get_USB_Status>
 80183fc:	4603      	mov	r3, r0
 80183fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018400:	7bbb      	ldrb	r3, [r7, #14]
}
 8018402:	4618      	mov	r0, r3
 8018404:	3710      	adds	r7, #16
 8018406:	46bd      	mov	sp, r7
 8018408:	bd80      	pop	{r7, pc}

0801840a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801840a:	b580      	push	{r7, lr}
 801840c:	b084      	sub	sp, #16
 801840e:	af00      	add	r7, sp, #0
 8018410:	6078      	str	r0, [r7, #4]
 8018412:	4608      	mov	r0, r1
 8018414:	4611      	mov	r1, r2
 8018416:	461a      	mov	r2, r3
 8018418:	4603      	mov	r3, r0
 801841a:	70fb      	strb	r3, [r7, #3]
 801841c:	460b      	mov	r3, r1
 801841e:	70bb      	strb	r3, [r7, #2]
 8018420:	4613      	mov	r3, r2
 8018422:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018424:	2300      	movs	r3, #0
 8018426:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018428:	2300      	movs	r3, #0
 801842a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018432:	78bb      	ldrb	r3, [r7, #2]
 8018434:	883a      	ldrh	r2, [r7, #0]
 8018436:	78f9      	ldrb	r1, [r7, #3]
 8018438:	f7f4 fc2c 	bl	800cc94 <HAL_PCD_EP_Open>
 801843c:	4603      	mov	r3, r0
 801843e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018440:	7bfb      	ldrb	r3, [r7, #15]
 8018442:	4618      	mov	r0, r3
 8018444:	f000 f91c 	bl	8018680 <USBD_Get_USB_Status>
 8018448:	4603      	mov	r3, r0
 801844a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801844c:	7bbb      	ldrb	r3, [r7, #14]
}
 801844e:	4618      	mov	r0, r3
 8018450:	3710      	adds	r7, #16
 8018452:	46bd      	mov	sp, r7
 8018454:	bd80      	pop	{r7, pc}

08018456 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018456:	b580      	push	{r7, lr}
 8018458:	b084      	sub	sp, #16
 801845a:	af00      	add	r7, sp, #0
 801845c:	6078      	str	r0, [r7, #4]
 801845e:	460b      	mov	r3, r1
 8018460:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018462:	2300      	movs	r3, #0
 8018464:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018466:	2300      	movs	r3, #0
 8018468:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801846a:	687b      	ldr	r3, [r7, #4]
 801846c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018470:	78fa      	ldrb	r2, [r7, #3]
 8018472:	4611      	mov	r1, r2
 8018474:	4618      	mov	r0, r3
 8018476:	f7f4 fc77 	bl	800cd68 <HAL_PCD_EP_Close>
 801847a:	4603      	mov	r3, r0
 801847c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801847e:	7bfb      	ldrb	r3, [r7, #15]
 8018480:	4618      	mov	r0, r3
 8018482:	f000 f8fd 	bl	8018680 <USBD_Get_USB_Status>
 8018486:	4603      	mov	r3, r0
 8018488:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801848a:	7bbb      	ldrb	r3, [r7, #14]
}
 801848c:	4618      	mov	r0, r3
 801848e:	3710      	adds	r7, #16
 8018490:	46bd      	mov	sp, r7
 8018492:	bd80      	pop	{r7, pc}

08018494 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018494:	b580      	push	{r7, lr}
 8018496:	b084      	sub	sp, #16
 8018498:	af00      	add	r7, sp, #0
 801849a:	6078      	str	r0, [r7, #4]
 801849c:	460b      	mov	r3, r1
 801849e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184a0:	2300      	movs	r3, #0
 80184a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184a4:	2300      	movs	r3, #0
 80184a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80184a8:	687b      	ldr	r3, [r7, #4]
 80184aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80184ae:	78fa      	ldrb	r2, [r7, #3]
 80184b0:	4611      	mov	r1, r2
 80184b2:	4618      	mov	r0, r3
 80184b4:	f7f4 fd2f 	bl	800cf16 <HAL_PCD_EP_SetStall>
 80184b8:	4603      	mov	r3, r0
 80184ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184bc:	7bfb      	ldrb	r3, [r7, #15]
 80184be:	4618      	mov	r0, r3
 80184c0:	f000 f8de 	bl	8018680 <USBD_Get_USB_Status>
 80184c4:	4603      	mov	r3, r0
 80184c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80184c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80184ca:	4618      	mov	r0, r3
 80184cc:	3710      	adds	r7, #16
 80184ce:	46bd      	mov	sp, r7
 80184d0:	bd80      	pop	{r7, pc}

080184d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80184d2:	b580      	push	{r7, lr}
 80184d4:	b084      	sub	sp, #16
 80184d6:	af00      	add	r7, sp, #0
 80184d8:	6078      	str	r0, [r7, #4]
 80184da:	460b      	mov	r3, r1
 80184dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80184de:	2300      	movs	r3, #0
 80184e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80184e2:	2300      	movs	r3, #0
 80184e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80184e6:	687b      	ldr	r3, [r7, #4]
 80184e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80184ec:	78fa      	ldrb	r2, [r7, #3]
 80184ee:	4611      	mov	r1, r2
 80184f0:	4618      	mov	r0, r3
 80184f2:	f7f4 fd73 	bl	800cfdc <HAL_PCD_EP_ClrStall>
 80184f6:	4603      	mov	r3, r0
 80184f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80184fa:	7bfb      	ldrb	r3, [r7, #15]
 80184fc:	4618      	mov	r0, r3
 80184fe:	f000 f8bf 	bl	8018680 <USBD_Get_USB_Status>
 8018502:	4603      	mov	r3, r0
 8018504:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8018506:	7bbb      	ldrb	r3, [r7, #14]
}
 8018508:	4618      	mov	r0, r3
 801850a:	3710      	adds	r7, #16
 801850c:	46bd      	mov	sp, r7
 801850e:	bd80      	pop	{r7, pc}

08018510 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018510:	b480      	push	{r7}
 8018512:	b085      	sub	sp, #20
 8018514:	af00      	add	r7, sp, #0
 8018516:	6078      	str	r0, [r7, #4]
 8018518:	460b      	mov	r3, r1
 801851a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018522:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8018524:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8018528:	2b00      	cmp	r3, #0
 801852a:	da0b      	bge.n	8018544 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801852c:	78fb      	ldrb	r3, [r7, #3]
 801852e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8018532:	68f9      	ldr	r1, [r7, #12]
 8018534:	4613      	mov	r3, r2
 8018536:	00db      	lsls	r3, r3, #3
 8018538:	4413      	add	r3, r2
 801853a:	009b      	lsls	r3, r3, #2
 801853c:	440b      	add	r3, r1
 801853e:	3316      	adds	r3, #22
 8018540:	781b      	ldrb	r3, [r3, #0]
 8018542:	e00b      	b.n	801855c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8018544:	78fb      	ldrb	r3, [r7, #3]
 8018546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801854a:	68f9      	ldr	r1, [r7, #12]
 801854c:	4613      	mov	r3, r2
 801854e:	00db      	lsls	r3, r3, #3
 8018550:	4413      	add	r3, r2
 8018552:	009b      	lsls	r3, r3, #2
 8018554:	440b      	add	r3, r1
 8018556:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801855a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801855c:	4618      	mov	r0, r3
 801855e:	3714      	adds	r7, #20
 8018560:	46bd      	mov	sp, r7
 8018562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018566:	4770      	bx	lr

08018568 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018568:	b580      	push	{r7, lr}
 801856a:	b084      	sub	sp, #16
 801856c:	af00      	add	r7, sp, #0
 801856e:	6078      	str	r0, [r7, #4]
 8018570:	460b      	mov	r3, r1
 8018572:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018574:	2300      	movs	r3, #0
 8018576:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018578:	2300      	movs	r3, #0
 801857a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8018582:	78fa      	ldrb	r2, [r7, #3]
 8018584:	4611      	mov	r1, r2
 8018586:	4618      	mov	r0, r3
 8018588:	f7f4 fb60 	bl	800cc4c <HAL_PCD_SetAddress>
 801858c:	4603      	mov	r3, r0
 801858e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018590:	7bfb      	ldrb	r3, [r7, #15]
 8018592:	4618      	mov	r0, r3
 8018594:	f000 f874 	bl	8018680 <USBD_Get_USB_Status>
 8018598:	4603      	mov	r3, r0
 801859a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801859c:	7bbb      	ldrb	r3, [r7, #14]
}
 801859e:	4618      	mov	r0, r3
 80185a0:	3710      	adds	r7, #16
 80185a2:	46bd      	mov	sp, r7
 80185a4:	bd80      	pop	{r7, pc}

080185a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80185a6:	b580      	push	{r7, lr}
 80185a8:	b086      	sub	sp, #24
 80185aa:	af00      	add	r7, sp, #0
 80185ac:	60f8      	str	r0, [r7, #12]
 80185ae:	607a      	str	r2, [r7, #4]
 80185b0:	603b      	str	r3, [r7, #0]
 80185b2:	460b      	mov	r3, r1
 80185b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185b6:	2300      	movs	r3, #0
 80185b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185ba:	2300      	movs	r3, #0
 80185bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80185be:	68fb      	ldr	r3, [r7, #12]
 80185c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80185c4:	7af9      	ldrb	r1, [r7, #11]
 80185c6:	683b      	ldr	r3, [r7, #0]
 80185c8:	687a      	ldr	r2, [r7, #4]
 80185ca:	f7f4 fc6a 	bl	800cea2 <HAL_PCD_EP_Transmit>
 80185ce:	4603      	mov	r3, r0
 80185d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80185d2:	7dfb      	ldrb	r3, [r7, #23]
 80185d4:	4618      	mov	r0, r3
 80185d6:	f000 f853 	bl	8018680 <USBD_Get_USB_Status>
 80185da:	4603      	mov	r3, r0
 80185dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80185de:	7dbb      	ldrb	r3, [r7, #22]
}
 80185e0:	4618      	mov	r0, r3
 80185e2:	3718      	adds	r7, #24
 80185e4:	46bd      	mov	sp, r7
 80185e6:	bd80      	pop	{r7, pc}

080185e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80185e8:	b580      	push	{r7, lr}
 80185ea:	b086      	sub	sp, #24
 80185ec:	af00      	add	r7, sp, #0
 80185ee:	60f8      	str	r0, [r7, #12]
 80185f0:	607a      	str	r2, [r7, #4]
 80185f2:	603b      	str	r3, [r7, #0]
 80185f4:	460b      	mov	r3, r1
 80185f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80185f8:	2300      	movs	r3, #0
 80185fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80185fc:	2300      	movs	r3, #0
 80185fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8018606:	7af9      	ldrb	r1, [r7, #11]
 8018608:	683b      	ldr	r3, [r7, #0]
 801860a:	687a      	ldr	r2, [r7, #4]
 801860c:	f7f4 fbf6 	bl	800cdfc <HAL_PCD_EP_Receive>
 8018610:	4603      	mov	r3, r0
 8018612:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018614:	7dfb      	ldrb	r3, [r7, #23]
 8018616:	4618      	mov	r0, r3
 8018618:	f000 f832 	bl	8018680 <USBD_Get_USB_Status>
 801861c:	4603      	mov	r3, r0
 801861e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8018620:	7dbb      	ldrb	r3, [r7, #22]
}
 8018622:	4618      	mov	r0, r3
 8018624:	3718      	adds	r7, #24
 8018626:	46bd      	mov	sp, r7
 8018628:	bd80      	pop	{r7, pc}

0801862a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801862a:	b580      	push	{r7, lr}
 801862c:	b082      	sub	sp, #8
 801862e:	af00      	add	r7, sp, #0
 8018630:	6078      	str	r0, [r7, #4]
 8018632:	460b      	mov	r3, r1
 8018634:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801863c:	78fa      	ldrb	r2, [r7, #3]
 801863e:	4611      	mov	r1, r2
 8018640:	4618      	mov	r0, r3
 8018642:	f7f4 fc16 	bl	800ce72 <HAL_PCD_EP_GetRxCount>
 8018646:	4603      	mov	r3, r0
}
 8018648:	4618      	mov	r0, r3
 801864a:	3708      	adds	r7, #8
 801864c:	46bd      	mov	sp, r7
 801864e:	bd80      	pop	{r7, pc}

08018650 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8018650:	b480      	push	{r7}
 8018652:	b083      	sub	sp, #12
 8018654:	af00      	add	r7, sp, #0
 8018656:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8018658:	4b03      	ldr	r3, [pc, #12]	@ (8018668 <USBD_static_malloc+0x18>)
}
 801865a:	4618      	mov	r0, r3
 801865c:	370c      	adds	r7, #12
 801865e:	46bd      	mov	sp, r7
 8018660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018664:	4770      	bx	lr
 8018666:	bf00      	nop
 8018668:	2000bff8 	.word	0x2000bff8

0801866c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801866c:	b480      	push	{r7}
 801866e:	b083      	sub	sp, #12
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]

}
 8018674:	bf00      	nop
 8018676:	370c      	adds	r7, #12
 8018678:	46bd      	mov	sp, r7
 801867a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867e:	4770      	bx	lr

08018680 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8018680:	b480      	push	{r7}
 8018682:	b085      	sub	sp, #20
 8018684:	af00      	add	r7, sp, #0
 8018686:	4603      	mov	r3, r0
 8018688:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801868a:	2300      	movs	r3, #0
 801868c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801868e:	79fb      	ldrb	r3, [r7, #7]
 8018690:	2b03      	cmp	r3, #3
 8018692:	d817      	bhi.n	80186c4 <USBD_Get_USB_Status+0x44>
 8018694:	a201      	add	r2, pc, #4	@ (adr r2, 801869c <USBD_Get_USB_Status+0x1c>)
 8018696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801869a:	bf00      	nop
 801869c:	080186ad 	.word	0x080186ad
 80186a0:	080186b3 	.word	0x080186b3
 80186a4:	080186b9 	.word	0x080186b9
 80186a8:	080186bf 	.word	0x080186bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80186ac:	2300      	movs	r3, #0
 80186ae:	73fb      	strb	r3, [r7, #15]
    break;
 80186b0:	e00b      	b.n	80186ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80186b2:	2303      	movs	r3, #3
 80186b4:	73fb      	strb	r3, [r7, #15]
    break;
 80186b6:	e008      	b.n	80186ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80186b8:	2301      	movs	r3, #1
 80186ba:	73fb      	strb	r3, [r7, #15]
    break;
 80186bc:	e005      	b.n	80186ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80186be:	2303      	movs	r3, #3
 80186c0:	73fb      	strb	r3, [r7, #15]
    break;
 80186c2:	e002      	b.n	80186ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80186c4:	2303      	movs	r3, #3
 80186c6:	73fb      	strb	r3, [r7, #15]
    break;
 80186c8:	bf00      	nop
  }
  return usb_status;
 80186ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80186cc:	4618      	mov	r0, r3
 80186ce:	3714      	adds	r7, #20
 80186d0:	46bd      	mov	sp, r7
 80186d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d6:	4770      	bx	lr

080186d8 <acosf>:
 80186d8:	b508      	push	{r3, lr}
 80186da:	ed2d 8b02 	vpush	{d8}
 80186de:	eeb0 8a40 	vmov.f32	s16, s0
 80186e2:	f000 faef 	bl	8018cc4 <__ieee754_acosf>
 80186e6:	eeb4 8a48 	vcmp.f32	s16, s16
 80186ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80186ee:	eef0 8a40 	vmov.f32	s17, s0
 80186f2:	d615      	bvs.n	8018720 <acosf+0x48>
 80186f4:	eeb0 0a48 	vmov.f32	s0, s16
 80186f8:	f000 f9d6 	bl	8018aa8 <fabsf>
 80186fc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018700:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8018704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018708:	dd0a      	ble.n	8018720 <acosf+0x48>
 801870a:	f002 ffb5 	bl	801b678 <__errno>
 801870e:	ecbd 8b02 	vpop	{d8}
 8018712:	2321      	movs	r3, #33	@ 0x21
 8018714:	6003      	str	r3, [r0, #0]
 8018716:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801871a:	4804      	ldr	r0, [pc, #16]	@ (801872c <acosf+0x54>)
 801871c:	f000 ba28 	b.w	8018b70 <nanf>
 8018720:	eeb0 0a68 	vmov.f32	s0, s17
 8018724:	ecbd 8b02 	vpop	{d8}
 8018728:	bd08      	pop	{r3, pc}
 801872a:	bf00      	nop
 801872c:	08021537 	.word	0x08021537

08018730 <asinf>:
 8018730:	b508      	push	{r3, lr}
 8018732:	ed2d 8b02 	vpush	{d8}
 8018736:	eeb0 8a40 	vmov.f32	s16, s0
 801873a:	f000 fbb9 	bl	8018eb0 <__ieee754_asinf>
 801873e:	eeb4 8a48 	vcmp.f32	s16, s16
 8018742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018746:	eef0 8a40 	vmov.f32	s17, s0
 801874a:	d615      	bvs.n	8018778 <asinf+0x48>
 801874c:	eeb0 0a48 	vmov.f32	s0, s16
 8018750:	f000 f9aa 	bl	8018aa8 <fabsf>
 8018754:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018758:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801875c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018760:	dd0a      	ble.n	8018778 <asinf+0x48>
 8018762:	f002 ff89 	bl	801b678 <__errno>
 8018766:	ecbd 8b02 	vpop	{d8}
 801876a:	2321      	movs	r3, #33	@ 0x21
 801876c:	6003      	str	r3, [r0, #0]
 801876e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8018772:	4804      	ldr	r0, [pc, #16]	@ (8018784 <asinf+0x54>)
 8018774:	f000 b9fc 	b.w	8018b70 <nanf>
 8018778:	eeb0 0a68 	vmov.f32	s0, s17
 801877c:	ecbd 8b02 	vpop	{d8}
 8018780:	bd08      	pop	{r3, pc}
 8018782:	bf00      	nop
 8018784:	08021537 	.word	0x08021537

08018788 <atan2f>:
 8018788:	f000 bc76 	b.w	8019078 <__ieee754_atan2f>

0801878c <powf>:
 801878c:	b508      	push	{r3, lr}
 801878e:	ed2d 8b04 	vpush	{d8-d9}
 8018792:	eeb0 8a60 	vmov.f32	s16, s1
 8018796:	eeb0 9a40 	vmov.f32	s18, s0
 801879a:	f000 fd0d 	bl	80191b8 <__ieee754_powf>
 801879e:	eeb4 8a48 	vcmp.f32	s16, s16
 80187a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187a6:	eef0 8a40 	vmov.f32	s17, s0
 80187aa:	d63e      	bvs.n	801882a <powf+0x9e>
 80187ac:	eeb5 9a40 	vcmp.f32	s18, #0.0
 80187b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187b4:	d112      	bne.n	80187dc <powf+0x50>
 80187b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80187ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187be:	d039      	beq.n	8018834 <powf+0xa8>
 80187c0:	eeb0 0a48 	vmov.f32	s0, s16
 80187c4:	f000 f9be 	bl	8018b44 <finitef>
 80187c8:	b378      	cbz	r0, 801882a <powf+0x9e>
 80187ca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80187ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187d2:	d52a      	bpl.n	801882a <powf+0x9e>
 80187d4:	f002 ff50 	bl	801b678 <__errno>
 80187d8:	2322      	movs	r3, #34	@ 0x22
 80187da:	e014      	b.n	8018806 <powf+0x7a>
 80187dc:	f000 f9b2 	bl	8018b44 <finitef>
 80187e0:	b998      	cbnz	r0, 801880a <powf+0x7e>
 80187e2:	eeb0 0a49 	vmov.f32	s0, s18
 80187e6:	f000 f9ad 	bl	8018b44 <finitef>
 80187ea:	b170      	cbz	r0, 801880a <powf+0x7e>
 80187ec:	eeb0 0a48 	vmov.f32	s0, s16
 80187f0:	f000 f9a8 	bl	8018b44 <finitef>
 80187f4:	b148      	cbz	r0, 801880a <powf+0x7e>
 80187f6:	eef4 8a68 	vcmp.f32	s17, s17
 80187fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187fe:	d7e9      	bvc.n	80187d4 <powf+0x48>
 8018800:	f002 ff3a 	bl	801b678 <__errno>
 8018804:	2321      	movs	r3, #33	@ 0x21
 8018806:	6003      	str	r3, [r0, #0]
 8018808:	e00f      	b.n	801882a <powf+0x9e>
 801880a:	eef5 8a40 	vcmp.f32	s17, #0.0
 801880e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018812:	d10a      	bne.n	801882a <powf+0x9e>
 8018814:	eeb0 0a49 	vmov.f32	s0, s18
 8018818:	f000 f994 	bl	8018b44 <finitef>
 801881c:	b128      	cbz	r0, 801882a <powf+0x9e>
 801881e:	eeb0 0a48 	vmov.f32	s0, s16
 8018822:	f000 f98f 	bl	8018b44 <finitef>
 8018826:	2800      	cmp	r0, #0
 8018828:	d1d4      	bne.n	80187d4 <powf+0x48>
 801882a:	eeb0 0a68 	vmov.f32	s0, s17
 801882e:	ecbd 8b04 	vpop	{d8-d9}
 8018832:	bd08      	pop	{r3, pc}
 8018834:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8018838:	e7f7      	b.n	801882a <powf+0x9e>
	...

0801883c <sqrtf>:
 801883c:	b508      	push	{r3, lr}
 801883e:	ed2d 8b02 	vpush	{d8}
 8018842:	eeb0 8a40 	vmov.f32	s16, s0
 8018846:	f000 f999 	bl	8018b7c <__ieee754_sqrtf>
 801884a:	eeb4 8a48 	vcmp.f32	s16, s16
 801884e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018852:	d60c      	bvs.n	801886e <sqrtf+0x32>
 8018854:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8018874 <sqrtf+0x38>
 8018858:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801885c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018860:	d505      	bpl.n	801886e <sqrtf+0x32>
 8018862:	f002 ff09 	bl	801b678 <__errno>
 8018866:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801886a:	2321      	movs	r3, #33	@ 0x21
 801886c:	6003      	str	r3, [r0, #0]
 801886e:	ecbd 8b02 	vpop	{d8}
 8018872:	bd08      	pop	{r3, pc}
 8018874:	00000000 	.word	0x00000000

08018878 <atanf>:
 8018878:	b538      	push	{r3, r4, r5, lr}
 801887a:	ee10 5a10 	vmov	r5, s0
 801887e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8018882:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8018886:	eef0 7a40 	vmov.f32	s15, s0
 801888a:	d310      	bcc.n	80188ae <atanf+0x36>
 801888c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8018890:	d904      	bls.n	801889c <atanf+0x24>
 8018892:	ee70 7a00 	vadd.f32	s15, s0, s0
 8018896:	eeb0 0a67 	vmov.f32	s0, s15
 801889a:	bd38      	pop	{r3, r4, r5, pc}
 801889c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80189d4 <atanf+0x15c>
 80188a0:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80189d8 <atanf+0x160>
 80188a4:	2d00      	cmp	r5, #0
 80188a6:	bfc8      	it	gt
 80188a8:	eef0 7a47 	vmovgt.f32	s15, s14
 80188ac:	e7f3      	b.n	8018896 <atanf+0x1e>
 80188ae:	4b4b      	ldr	r3, [pc, #300]	@ (80189dc <atanf+0x164>)
 80188b0:	429c      	cmp	r4, r3
 80188b2:	d810      	bhi.n	80188d6 <atanf+0x5e>
 80188b4:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 80188b8:	d20a      	bcs.n	80188d0 <atanf+0x58>
 80188ba:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80189e0 <atanf+0x168>
 80188be:	ee30 7a07 	vadd.f32	s14, s0, s14
 80188c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80188c6:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80188ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80188ce:	dce2      	bgt.n	8018896 <atanf+0x1e>
 80188d0:	f04f 33ff 	mov.w	r3, #4294967295
 80188d4:	e013      	b.n	80188fe <atanf+0x86>
 80188d6:	f000 f8e7 	bl	8018aa8 <fabsf>
 80188da:	4b42      	ldr	r3, [pc, #264]	@ (80189e4 <atanf+0x16c>)
 80188dc:	429c      	cmp	r4, r3
 80188de:	d84f      	bhi.n	8018980 <atanf+0x108>
 80188e0:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80188e4:	429c      	cmp	r4, r3
 80188e6:	d841      	bhi.n	801896c <atanf+0xf4>
 80188e8:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80188ec:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80188f0:	eea0 7a27 	vfma.f32	s14, s0, s15
 80188f4:	2300      	movs	r3, #0
 80188f6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80188fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80188fe:	1c5a      	adds	r2, r3, #1
 8018900:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8018904:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80189e8 <atanf+0x170>
 8018908:	eddf 5a38 	vldr	s11, [pc, #224]	@ 80189ec <atanf+0x174>
 801890c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 80189f0 <atanf+0x178>
 8018910:	ee66 6a06 	vmul.f32	s13, s12, s12
 8018914:	eee6 5a87 	vfma.f32	s11, s13, s14
 8018918:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 80189f4 <atanf+0x17c>
 801891c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8018920:	eddf 5a35 	vldr	s11, [pc, #212]	@ 80189f8 <atanf+0x180>
 8018924:	eee7 5a26 	vfma.f32	s11, s14, s13
 8018928:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 80189fc <atanf+0x184>
 801892c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8018930:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8018a00 <atanf+0x188>
 8018934:	eee7 5a26 	vfma.f32	s11, s14, s13
 8018938:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8018a04 <atanf+0x18c>
 801893c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8018940:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8018a08 <atanf+0x190>
 8018944:	eea5 7a26 	vfma.f32	s14, s10, s13
 8018948:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8018a0c <atanf+0x194>
 801894c:	eea7 5a26 	vfma.f32	s10, s14, s13
 8018950:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8018a10 <atanf+0x198>
 8018954:	eea5 7a26 	vfma.f32	s14, s10, s13
 8018958:	ee27 7a26 	vmul.f32	s14, s14, s13
 801895c:	eea5 7a86 	vfma.f32	s14, s11, s12
 8018960:	ee27 7a87 	vmul.f32	s14, s15, s14
 8018964:	d121      	bne.n	80189aa <atanf+0x132>
 8018966:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801896a:	e794      	b.n	8018896 <atanf+0x1e>
 801896c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8018970:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018974:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018978:	2301      	movs	r3, #1
 801897a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801897e:	e7be      	b.n	80188fe <atanf+0x86>
 8018980:	4b24      	ldr	r3, [pc, #144]	@ (8018a14 <atanf+0x19c>)
 8018982:	429c      	cmp	r4, r3
 8018984:	d80b      	bhi.n	801899e <atanf+0x126>
 8018986:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801898a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801898e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8018992:	2302      	movs	r3, #2
 8018994:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018998:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801899c:	e7af      	b.n	80188fe <atanf+0x86>
 801899e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80189a2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80189a6:	2303      	movs	r3, #3
 80189a8:	e7a9      	b.n	80188fe <atanf+0x86>
 80189aa:	4a1b      	ldr	r2, [pc, #108]	@ (8018a18 <atanf+0x1a0>)
 80189ac:	491b      	ldr	r1, [pc, #108]	@ (8018a1c <atanf+0x1a4>)
 80189ae:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80189b2:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80189b6:	edd3 6a00 	vldr	s13, [r3]
 80189ba:	ee37 7a66 	vsub.f32	s14, s14, s13
 80189be:	2d00      	cmp	r5, #0
 80189c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80189c4:	edd2 7a00 	vldr	s15, [r2]
 80189c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80189cc:	bfb8      	it	lt
 80189ce:	eef1 7a67 	vneglt.f32	s15, s15
 80189d2:	e760      	b.n	8018896 <atanf+0x1e>
 80189d4:	bfc90fdb 	.word	0xbfc90fdb
 80189d8:	3fc90fdb 	.word	0x3fc90fdb
 80189dc:	3edfffff 	.word	0x3edfffff
 80189e0:	7149f2ca 	.word	0x7149f2ca
 80189e4:	3f97ffff 	.word	0x3f97ffff
 80189e8:	3c8569d7 	.word	0x3c8569d7
 80189ec:	3d4bda59 	.word	0x3d4bda59
 80189f0:	bd6ef16b 	.word	0xbd6ef16b
 80189f4:	3d886b35 	.word	0x3d886b35
 80189f8:	3dba2e6e 	.word	0x3dba2e6e
 80189fc:	3e124925 	.word	0x3e124925
 8018a00:	3eaaaaab 	.word	0x3eaaaaab
 8018a04:	bd15a221 	.word	0xbd15a221
 8018a08:	bd9d8795 	.word	0xbd9d8795
 8018a0c:	bde38e38 	.word	0xbde38e38
 8018a10:	be4ccccd 	.word	0xbe4ccccd
 8018a14:	401bffff 	.word	0x401bffff
 8018a18:	080216b4 	.word	0x080216b4
 8018a1c:	080216a4 	.word	0x080216a4

08018a20 <cosf>:
 8018a20:	ee10 3a10 	vmov	r3, s0
 8018a24:	b507      	push	{r0, r1, r2, lr}
 8018a26:	4a1e      	ldr	r2, [pc, #120]	@ (8018aa0 <cosf+0x80>)
 8018a28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018a2c:	4293      	cmp	r3, r2
 8018a2e:	d806      	bhi.n	8018a3e <cosf+0x1e>
 8018a30:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8018aa4 <cosf+0x84>
 8018a34:	b003      	add	sp, #12
 8018a36:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a3a:	f000 b8a3 	b.w	8018b84 <__kernel_cosf>
 8018a3e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018a42:	d304      	bcc.n	8018a4e <cosf+0x2e>
 8018a44:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018a48:	b003      	add	sp, #12
 8018a4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8018a4e:	4668      	mov	r0, sp
 8018a50:	f000 fe80 	bl	8019754 <__ieee754_rem_pio2f>
 8018a54:	f000 0003 	and.w	r0, r0, #3
 8018a58:	2801      	cmp	r0, #1
 8018a5a:	d009      	beq.n	8018a70 <cosf+0x50>
 8018a5c:	2802      	cmp	r0, #2
 8018a5e:	d010      	beq.n	8018a82 <cosf+0x62>
 8018a60:	b9b0      	cbnz	r0, 8018a90 <cosf+0x70>
 8018a62:	eddd 0a01 	vldr	s1, [sp, #4]
 8018a66:	ed9d 0a00 	vldr	s0, [sp]
 8018a6a:	f000 f88b 	bl	8018b84 <__kernel_cosf>
 8018a6e:	e7eb      	b.n	8018a48 <cosf+0x28>
 8018a70:	eddd 0a01 	vldr	s1, [sp, #4]
 8018a74:	ed9d 0a00 	vldr	s0, [sp]
 8018a78:	f000 f8dc 	bl	8018c34 <__kernel_sinf>
 8018a7c:	eeb1 0a40 	vneg.f32	s0, s0
 8018a80:	e7e2      	b.n	8018a48 <cosf+0x28>
 8018a82:	eddd 0a01 	vldr	s1, [sp, #4]
 8018a86:	ed9d 0a00 	vldr	s0, [sp]
 8018a8a:	f000 f87b 	bl	8018b84 <__kernel_cosf>
 8018a8e:	e7f5      	b.n	8018a7c <cosf+0x5c>
 8018a90:	eddd 0a01 	vldr	s1, [sp, #4]
 8018a94:	ed9d 0a00 	vldr	s0, [sp]
 8018a98:	2001      	movs	r0, #1
 8018a9a:	f000 f8cb 	bl	8018c34 <__kernel_sinf>
 8018a9e:	e7d3      	b.n	8018a48 <cosf+0x28>
 8018aa0:	3f490fd8 	.word	0x3f490fd8
 8018aa4:	00000000 	.word	0x00000000

08018aa8 <fabsf>:
 8018aa8:	ee10 3a10 	vmov	r3, s0
 8018aac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018ab0:	ee00 3a10 	vmov	s0, r3
 8018ab4:	4770      	bx	lr
	...

08018ab8 <sinf>:
 8018ab8:	ee10 3a10 	vmov	r3, s0
 8018abc:	b507      	push	{r0, r1, r2, lr}
 8018abe:	4a1f      	ldr	r2, [pc, #124]	@ (8018b3c <sinf+0x84>)
 8018ac0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018ac4:	4293      	cmp	r3, r2
 8018ac6:	d807      	bhi.n	8018ad8 <sinf+0x20>
 8018ac8:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8018b40 <sinf+0x88>
 8018acc:	2000      	movs	r0, #0
 8018ace:	b003      	add	sp, #12
 8018ad0:	f85d eb04 	ldr.w	lr, [sp], #4
 8018ad4:	f000 b8ae 	b.w	8018c34 <__kernel_sinf>
 8018ad8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018adc:	d304      	bcc.n	8018ae8 <sinf+0x30>
 8018ade:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018ae2:	b003      	add	sp, #12
 8018ae4:	f85d fb04 	ldr.w	pc, [sp], #4
 8018ae8:	4668      	mov	r0, sp
 8018aea:	f000 fe33 	bl	8019754 <__ieee754_rem_pio2f>
 8018aee:	f000 0003 	and.w	r0, r0, #3
 8018af2:	2801      	cmp	r0, #1
 8018af4:	d00a      	beq.n	8018b0c <sinf+0x54>
 8018af6:	2802      	cmp	r0, #2
 8018af8:	d00f      	beq.n	8018b1a <sinf+0x62>
 8018afa:	b9c0      	cbnz	r0, 8018b2e <sinf+0x76>
 8018afc:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b00:	ed9d 0a00 	vldr	s0, [sp]
 8018b04:	2001      	movs	r0, #1
 8018b06:	f000 f895 	bl	8018c34 <__kernel_sinf>
 8018b0a:	e7ea      	b.n	8018ae2 <sinf+0x2a>
 8018b0c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b10:	ed9d 0a00 	vldr	s0, [sp]
 8018b14:	f000 f836 	bl	8018b84 <__kernel_cosf>
 8018b18:	e7e3      	b.n	8018ae2 <sinf+0x2a>
 8018b1a:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b1e:	ed9d 0a00 	vldr	s0, [sp]
 8018b22:	2001      	movs	r0, #1
 8018b24:	f000 f886 	bl	8018c34 <__kernel_sinf>
 8018b28:	eeb1 0a40 	vneg.f32	s0, s0
 8018b2c:	e7d9      	b.n	8018ae2 <sinf+0x2a>
 8018b2e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018b32:	ed9d 0a00 	vldr	s0, [sp]
 8018b36:	f000 f825 	bl	8018b84 <__kernel_cosf>
 8018b3a:	e7f5      	b.n	8018b28 <sinf+0x70>
 8018b3c:	3f490fd8 	.word	0x3f490fd8
 8018b40:	00000000 	.word	0x00000000

08018b44 <finitef>:
 8018b44:	ee10 3a10 	vmov	r3, s0
 8018b48:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8018b4c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8018b50:	bfac      	ite	ge
 8018b52:	2000      	movge	r0, #0
 8018b54:	2001      	movlt	r0, #1
 8018b56:	4770      	bx	lr

08018b58 <copysignf>:
 8018b58:	ee10 2a10 	vmov	r2, s0
 8018b5c:	ee10 3a90 	vmov	r3, s1
 8018b60:	f362 031e 	bfi	r3, r2, #0, #31
 8018b64:	ee00 3a90 	vmov	s1, r3
 8018b68:	eeb0 0a60 	vmov.f32	s0, s1
 8018b6c:	4770      	bx	lr
	...

08018b70 <nanf>:
 8018b70:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018b78 <nanf+0x8>
 8018b74:	4770      	bx	lr
 8018b76:	bf00      	nop
 8018b78:	7fc00000 	.word	0x7fc00000

08018b7c <__ieee754_sqrtf>:
 8018b7c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018b80:	4770      	bx	lr
	...

08018b84 <__kernel_cosf>:
 8018b84:	ee10 3a10 	vmov	r3, s0
 8018b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018b8c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8018b90:	eef0 6a40 	vmov.f32	s13, s0
 8018b94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018b98:	d204      	bcs.n	8018ba4 <__kernel_cosf+0x20>
 8018b9a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8018b9e:	ee17 2a90 	vmov	r2, s15
 8018ba2:	b342      	cbz	r2, 8018bf6 <__kernel_cosf+0x72>
 8018ba4:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018ba8:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8018c14 <__kernel_cosf+0x90>
 8018bac:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8018c18 <__kernel_cosf+0x94>
 8018bb0:	4a1a      	ldr	r2, [pc, #104]	@ (8018c1c <__kernel_cosf+0x98>)
 8018bb2:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018bb6:	4293      	cmp	r3, r2
 8018bb8:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018c20 <__kernel_cosf+0x9c>
 8018bbc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018bc0:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8018c24 <__kernel_cosf+0xa0>
 8018bc4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018bc8:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8018c28 <__kernel_cosf+0xa4>
 8018bcc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018bd0:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8018c2c <__kernel_cosf+0xa8>
 8018bd4:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018bd8:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8018bdc:	ee26 6a07 	vmul.f32	s12, s12, s14
 8018be0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018be4:	eee7 0a06 	vfma.f32	s1, s14, s12
 8018be8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018bec:	d804      	bhi.n	8018bf8 <__kernel_cosf+0x74>
 8018bee:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8018bf2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018bf6:	4770      	bx	lr
 8018bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8018c30 <__kernel_cosf+0xac>)
 8018bfa:	4293      	cmp	r3, r2
 8018bfc:	bf9a      	itte	ls
 8018bfe:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8018c02:	ee07 3a10 	vmovls	s14, r3
 8018c06:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8018c0a:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018c0e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c12:	e7ec      	b.n	8018bee <__kernel_cosf+0x6a>
 8018c14:	ad47d74e 	.word	0xad47d74e
 8018c18:	310f74f6 	.word	0x310f74f6
 8018c1c:	3e999999 	.word	0x3e999999
 8018c20:	b493f27c 	.word	0xb493f27c
 8018c24:	37d00d01 	.word	0x37d00d01
 8018c28:	bab60b61 	.word	0xbab60b61
 8018c2c:	3d2aaaab 	.word	0x3d2aaaab
 8018c30:	3f480000 	.word	0x3f480000

08018c34 <__kernel_sinf>:
 8018c34:	ee10 3a10 	vmov	r3, s0
 8018c38:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018c3c:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8018c40:	d204      	bcs.n	8018c4c <__kernel_sinf+0x18>
 8018c42:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8018c46:	ee17 3a90 	vmov	r3, s15
 8018c4a:	b35b      	cbz	r3, 8018ca4 <__kernel_sinf+0x70>
 8018c4c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8018c50:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8018ca8 <__kernel_sinf+0x74>
 8018c54:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8018cac <__kernel_sinf+0x78>
 8018c58:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c5c:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8018cb0 <__kernel_sinf+0x7c>
 8018c60:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018c64:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8018cb4 <__kernel_sinf+0x80>
 8018c68:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018c6c:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8018cb8 <__kernel_sinf+0x84>
 8018c70:	ee60 6a07 	vmul.f32	s13, s0, s14
 8018c74:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018c78:	b930      	cbnz	r0, 8018c88 <__kernel_sinf+0x54>
 8018c7a:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8018cbc <__kernel_sinf+0x88>
 8018c7e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8018c82:	eea6 0a26 	vfma.f32	s0, s12, s13
 8018c86:	4770      	bx	lr
 8018c88:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018c8c:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018c90:	eee0 7a86 	vfma.f32	s15, s1, s12
 8018c94:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8018c98:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8018cc0 <__kernel_sinf+0x8c>
 8018c9c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018ca0:	ee30 0a60 	vsub.f32	s0, s0, s1
 8018ca4:	4770      	bx	lr
 8018ca6:	bf00      	nop
 8018ca8:	2f2ec9d3 	.word	0x2f2ec9d3
 8018cac:	b2d72f34 	.word	0xb2d72f34
 8018cb0:	3638ef1b 	.word	0x3638ef1b
 8018cb4:	b9500d01 	.word	0xb9500d01
 8018cb8:	3c088889 	.word	0x3c088889
 8018cbc:	be2aaaab 	.word	0xbe2aaaab
 8018cc0:	3e2aaaab 	.word	0x3e2aaaab

08018cc4 <__ieee754_acosf>:
 8018cc4:	b508      	push	{r3, lr}
 8018cc6:	ee10 3a10 	vmov	r3, s0
 8018cca:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8018cce:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8018cd2:	ed2d 8b0c 	vpush	{d8-d13}
 8018cd6:	d10a      	bne.n	8018cee <__ieee754_acosf+0x2a>
 8018cd8:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8018e6c <__ieee754_acosf+0x1a8>
 8018cdc:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8018e70 <__ieee754_acosf+0x1ac>
 8018ce0:	2b00      	cmp	r3, #0
 8018ce2:	bfc8      	it	gt
 8018ce4:	eeb0 0a67 	vmovgt.f32	s0, s15
 8018ce8:	ecbd 8b0c 	vpop	{d8-d13}
 8018cec:	bd08      	pop	{r3, pc}
 8018cee:	d904      	bls.n	8018cfa <__ieee754_acosf+0x36>
 8018cf0:	ee30 8a40 	vsub.f32	s16, s0, s0
 8018cf4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018cf8:	e7f6      	b.n	8018ce8 <__ieee754_acosf+0x24>
 8018cfa:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8018cfe:	d23c      	bcs.n	8018d7a <__ieee754_acosf+0xb6>
 8018d00:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 8018d04:	f240 80af 	bls.w	8018e66 <__ieee754_acosf+0x1a2>
 8018d08:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018d0c:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8018e74 <__ieee754_acosf+0x1b0>
 8018d10:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018e78 <__ieee754_acosf+0x1b4>
 8018d14:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8018e7c <__ieee754_acosf+0x1b8>
 8018d18:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018d1c:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8018e80 <__ieee754_acosf+0x1bc>
 8018d20:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018d24:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8018e84 <__ieee754_acosf+0x1c0>
 8018d28:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018d2c:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8018e88 <__ieee754_acosf+0x1c4>
 8018d30:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018d34:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018e8c <__ieee754_acosf+0x1c8>
 8018d38:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018d3c:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8018e90 <__ieee754_acosf+0x1cc>
 8018d40:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8018d44:	eddf 6a53 	vldr	s13, [pc, #332]	@ 8018e94 <__ieee754_acosf+0x1d0>
 8018d48:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018d4c:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8018e98 <__ieee754_acosf+0x1d4>
 8018d50:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8018d54:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8018d58:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018d5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018d60:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8018e9c <__ieee754_acosf+0x1d8>
 8018d64:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8018d68:	eee0 7a46 	vfms.f32	s15, s0, s12
 8018d6c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018d70:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8018ea0 <__ieee754_acosf+0x1dc>
 8018d74:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018d78:	e7b6      	b.n	8018ce8 <__ieee754_acosf+0x24>
 8018d7a:	2b00      	cmp	r3, #0
 8018d7c:	eddf da3d 	vldr	s27, [pc, #244]	@ 8018e74 <__ieee754_acosf+0x1b0>
 8018d80:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8018e78 <__ieee754_acosf+0x1b4>
 8018d84:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8018e80 <__ieee754_acosf+0x1bc>
 8018d88:	eddf ba3e 	vldr	s23, [pc, #248]	@ 8018e84 <__ieee754_acosf+0x1c0>
 8018d8c:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8018e88 <__ieee754_acosf+0x1c4>
 8018d90:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8018e8c <__ieee754_acosf+0x1c8>
 8018d94:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8018e90 <__ieee754_acosf+0x1cc>
 8018d98:	eddf aa38 	vldr	s21, [pc, #224]	@ 8018e7c <__ieee754_acosf+0x1b8>
 8018d9c:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 8018e94 <__ieee754_acosf+0x1d0>
 8018da0:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8018e98 <__ieee754_acosf+0x1d4>
 8018da4:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8018da8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018dac:	da28      	bge.n	8018e00 <__ieee754_acosf+0x13c>
 8018dae:	ee30 8a09 	vadd.f32	s16, s0, s18
 8018db2:	ee28 0a27 	vmul.f32	s0, s16, s15
 8018db6:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8018dba:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8018dbe:	eeac ca80 	vfma.f32	s24, s25, s0
 8018dc2:	eeaa aa80 	vfma.f32	s20, s21, s0
 8018dc6:	eeec ba00 	vfma.f32	s23, s24, s0
 8018dca:	eeea 9a00 	vfma.f32	s19, s20, s0
 8018dce:	eeab ba80 	vfma.f32	s22, s23, s0
 8018dd2:	eea9 9a80 	vfma.f32	s18, s19, s0
 8018dd6:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8018dda:	ee68 8a80 	vmul.f32	s17, s17, s0
 8018dde:	f7ff fecd 	bl	8018b7c <__ieee754_sqrtf>
 8018de2:	ee88 7a89 	vdiv.f32	s14, s17, s18
 8018de6:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8018ea4 <__ieee754_acosf+0x1e0>
 8018dea:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018dee:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8018df2:	ee77 7a80 	vadd.f32	s15, s15, s0
 8018df6:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8018ea8 <__ieee754_acosf+0x1e4>
 8018dfa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018dfe:	e773      	b.n	8018ce8 <__ieee754_acosf+0x24>
 8018e00:	ee39 8a40 	vsub.f32	s16, s18, s0
 8018e04:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018e08:	eeb0 0a48 	vmov.f32	s0, s16
 8018e0c:	f7ff feb6 	bl	8018b7c <__ieee754_sqrtf>
 8018e10:	eee8 ca2d 	vfma.f32	s25, s16, s27
 8018e14:	eee8 aa0d 	vfma.f32	s21, s16, s26
 8018e18:	eeac ca88 	vfma.f32	s24, s25, s16
 8018e1c:	eeaa aa88 	vfma.f32	s20, s21, s16
 8018e20:	eeec ba08 	vfma.f32	s23, s24, s16
 8018e24:	ee10 3a10 	vmov	r3, s0
 8018e28:	eeab ba88 	vfma.f32	s22, s23, s16
 8018e2c:	f36f 030b 	bfc	r3, #0, #12
 8018e30:	eeea 9a08 	vfma.f32	s19, s20, s16
 8018e34:	ee07 3a90 	vmov	s15, r3
 8018e38:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8018e3c:	eeb0 6a48 	vmov.f32	s12, s16
 8018e40:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8018e44:	eea9 9a88 	vfma.f32	s18, s19, s16
 8018e48:	ee70 6a27 	vadd.f32	s13, s0, s15
 8018e4c:	ee68 8a88 	vmul.f32	s17, s17, s16
 8018e50:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8018e54:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8018e58:	eea0 7a26 	vfma.f32	s14, s0, s13
 8018e5c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8018e60:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018e64:	e740      	b.n	8018ce8 <__ieee754_acosf+0x24>
 8018e66:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8018eac <__ieee754_acosf+0x1e8>
 8018e6a:	e73d      	b.n	8018ce8 <__ieee754_acosf+0x24>
 8018e6c:	40490fdb 	.word	0x40490fdb
 8018e70:	00000000 	.word	0x00000000
 8018e74:	3811ef08 	.word	0x3811ef08
 8018e78:	3a4f7f04 	.word	0x3a4f7f04
 8018e7c:	bf303361 	.word	0xbf303361
 8018e80:	bd241146 	.word	0xbd241146
 8018e84:	3e4e0aa8 	.word	0x3e4e0aa8
 8018e88:	bea6b090 	.word	0xbea6b090
 8018e8c:	3e2aaaab 	.word	0x3e2aaaab
 8018e90:	3d9dc62e 	.word	0x3d9dc62e
 8018e94:	4001572d 	.word	0x4001572d
 8018e98:	c019d139 	.word	0xc019d139
 8018e9c:	33a22168 	.word	0x33a22168
 8018ea0:	3fc90fda 	.word	0x3fc90fda
 8018ea4:	b3a22168 	.word	0xb3a22168
 8018ea8:	40490fda 	.word	0x40490fda
 8018eac:	3fc90fdb 	.word	0x3fc90fdb

08018eb0 <__ieee754_asinf>:
 8018eb0:	b538      	push	{r3, r4, r5, lr}
 8018eb2:	ee10 5a10 	vmov	r5, s0
 8018eb6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8018eba:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8018ebe:	ed2d 8b04 	vpush	{d8-d9}
 8018ec2:	d10c      	bne.n	8018ede <__ieee754_asinf+0x2e>
 8018ec4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019038 <__ieee754_asinf+0x188>
 8018ec8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 801903c <__ieee754_asinf+0x18c>
 8018ecc:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018ed0:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018ed4:	eeb0 0a67 	vmov.f32	s0, s15
 8018ed8:	ecbd 8b04 	vpop	{d8-d9}
 8018edc:	bd38      	pop	{r3, r4, r5, pc}
 8018ede:	d904      	bls.n	8018eea <__ieee754_asinf+0x3a>
 8018ee0:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018ee4:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018ee8:	e7f6      	b.n	8018ed8 <__ieee754_asinf+0x28>
 8018eea:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8018eee:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8018ef2:	d20b      	bcs.n	8018f0c <__ieee754_asinf+0x5c>
 8018ef4:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8018ef8:	d252      	bcs.n	8018fa0 <__ieee754_asinf+0xf0>
 8018efa:	eddf 7a51 	vldr	s15, [pc, #324]	@ 8019040 <__ieee754_asinf+0x190>
 8018efe:	ee70 7a27 	vadd.f32	s15, s0, s15
 8018f02:	eef4 7ae8 	vcmpe.f32	s15, s17
 8018f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018f0a:	dce5      	bgt.n	8018ed8 <__ieee754_asinf+0x28>
 8018f0c:	f7ff fdcc 	bl	8018aa8 <fabsf>
 8018f10:	ee38 8ac0 	vsub.f32	s16, s17, s0
 8018f14:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018f18:	ee28 8a27 	vmul.f32	s16, s16, s15
 8018f1c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8019044 <__ieee754_asinf+0x194>
 8018f20:	eddf 7a49 	vldr	s15, [pc, #292]	@ 8019048 <__ieee754_asinf+0x198>
 8018f24:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 801904c <__ieee754_asinf+0x19c>
 8018f28:	eea8 7a27 	vfma.f32	s14, s16, s15
 8018f2c:	eddf 7a48 	vldr	s15, [pc, #288]	@ 8019050 <__ieee754_asinf+0x1a0>
 8018f30:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018f34:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8019054 <__ieee754_asinf+0x1a4>
 8018f38:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018f3c:	eddf 7a46 	vldr	s15, [pc, #280]	@ 8019058 <__ieee754_asinf+0x1a8>
 8018f40:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018f44:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 801905c <__ieee754_asinf+0x1ac>
 8018f48:	eea7 9a88 	vfma.f32	s18, s15, s16
 8018f4c:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8019060 <__ieee754_asinf+0x1b0>
 8018f50:	eee8 7a07 	vfma.f32	s15, s16, s14
 8018f54:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8019064 <__ieee754_asinf+0x1b4>
 8018f58:	eea7 7a88 	vfma.f32	s14, s15, s16
 8018f5c:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8019068 <__ieee754_asinf+0x1b8>
 8018f60:	eee7 7a08 	vfma.f32	s15, s14, s16
 8018f64:	eeb0 0a48 	vmov.f32	s0, s16
 8018f68:	eee7 8a88 	vfma.f32	s17, s15, s16
 8018f6c:	f7ff fe06 	bl	8018b7c <__ieee754_sqrtf>
 8018f70:	4b3e      	ldr	r3, [pc, #248]	@ (801906c <__ieee754_asinf+0x1bc>)
 8018f72:	ee29 9a08 	vmul.f32	s18, s18, s16
 8018f76:	429c      	cmp	r4, r3
 8018f78:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8018f7c:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018f80:	d93d      	bls.n	8018ffe <__ieee754_asinf+0x14e>
 8018f82:	eea0 0a06 	vfma.f32	s0, s0, s12
 8018f86:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8019070 <__ieee754_asinf+0x1c0>
 8018f8a:	eee0 7a26 	vfma.f32	s15, s0, s13
 8018f8e:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 801903c <__ieee754_asinf+0x18c>
 8018f92:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018f96:	2d00      	cmp	r5, #0
 8018f98:	bfd8      	it	le
 8018f9a:	eeb1 0a40 	vnegle.f32	s0, s0
 8018f9e:	e79b      	b.n	8018ed8 <__ieee754_asinf+0x28>
 8018fa0:	ee60 7a00 	vmul.f32	s15, s0, s0
 8018fa4:	eddf 6a28 	vldr	s13, [pc, #160]	@ 8019048 <__ieee754_asinf+0x198>
 8018fa8:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8019044 <__ieee754_asinf+0x194>
 8018fac:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 801905c <__ieee754_asinf+0x1ac>
 8018fb0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8018fb4:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8019050 <__ieee754_asinf+0x1a0>
 8018fb8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018fbc:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8019054 <__ieee754_asinf+0x1a4>
 8018fc0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018fc4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8019058 <__ieee754_asinf+0x1a8>
 8018fc8:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018fcc:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 801904c <__ieee754_asinf+0x19c>
 8018fd0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8018fd4:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8019060 <__ieee754_asinf+0x1b0>
 8018fd8:	eee7 6a86 	vfma.f32	s13, s15, s12
 8018fdc:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 8019064 <__ieee754_asinf+0x1b4>
 8018fe0:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8018fe4:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8019068 <__ieee754_asinf+0x1b8>
 8018fe8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018fec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018ff0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 8018ff4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8018ff8:	eea0 0a27 	vfma.f32	s0, s0, s15
 8018ffc:	e76c      	b.n	8018ed8 <__ieee754_asinf+0x28>
 8018ffe:	ee10 3a10 	vmov	r3, s0
 8019002:	f36f 030b 	bfc	r3, #0, #12
 8019006:	ee07 3a10 	vmov	s14, r3
 801900a:	eea7 8a47 	vfms.f32	s16, s14, s14
 801900e:	ee70 5a00 	vadd.f32	s11, s0, s0
 8019012:	ee30 0a07 	vadd.f32	s0, s0, s14
 8019016:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8019038 <__ieee754_asinf+0x188>
 801901a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 801901e:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8019074 <__ieee754_asinf+0x1c4>
 8019022:	eee5 7a66 	vfms.f32	s15, s10, s13
 8019026:	eed5 7a86 	vfnms.f32	s15, s11, s12
 801902a:	eeb0 6a40 	vmov.f32	s12, s0
 801902e:	eea7 6a66 	vfms.f32	s12, s14, s13
 8019032:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8019036:	e7ac      	b.n	8018f92 <__ieee754_asinf+0xe2>
 8019038:	b33bbd2e 	.word	0xb33bbd2e
 801903c:	3fc90fdb 	.word	0x3fc90fdb
 8019040:	7149f2ca 	.word	0x7149f2ca
 8019044:	3a4f7f04 	.word	0x3a4f7f04
 8019048:	3811ef08 	.word	0x3811ef08
 801904c:	3e2aaaab 	.word	0x3e2aaaab
 8019050:	bd241146 	.word	0xbd241146
 8019054:	3e4e0aa8 	.word	0x3e4e0aa8
 8019058:	bea6b090 	.word	0xbea6b090
 801905c:	3d9dc62e 	.word	0x3d9dc62e
 8019060:	bf303361 	.word	0xbf303361
 8019064:	4001572d 	.word	0x4001572d
 8019068:	c019d139 	.word	0xc019d139
 801906c:	3f799999 	.word	0x3f799999
 8019070:	333bbd2e 	.word	0x333bbd2e
 8019074:	3f490fdb 	.word	0x3f490fdb

08019078 <__ieee754_atan2f>:
 8019078:	ee10 2a90 	vmov	r2, s1
 801907c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8019080:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8019084:	b510      	push	{r4, lr}
 8019086:	eef0 7a40 	vmov.f32	s15, s0
 801908a:	d806      	bhi.n	801909a <__ieee754_atan2f+0x22>
 801908c:	ee10 0a10 	vmov	r0, s0
 8019090:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8019094:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019098:	d904      	bls.n	80190a4 <__ieee754_atan2f+0x2c>
 801909a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 801909e:	eeb0 0a67 	vmov.f32	s0, s15
 80190a2:	bd10      	pop	{r4, pc}
 80190a4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 80190a8:	d103      	bne.n	80190b2 <__ieee754_atan2f+0x3a>
 80190aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80190ae:	f7ff bbe3 	b.w	8018878 <atanf>
 80190b2:	1794      	asrs	r4, r2, #30
 80190b4:	f004 0402 	and.w	r4, r4, #2
 80190b8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80190bc:	b943      	cbnz	r3, 80190d0 <__ieee754_atan2f+0x58>
 80190be:	2c02      	cmp	r4, #2
 80190c0:	d05e      	beq.n	8019180 <__ieee754_atan2f+0x108>
 80190c2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8019194 <__ieee754_atan2f+0x11c>
 80190c6:	2c03      	cmp	r4, #3
 80190c8:	bf08      	it	eq
 80190ca:	eef0 7a47 	vmoveq.f32	s15, s14
 80190ce:	e7e6      	b.n	801909e <__ieee754_atan2f+0x26>
 80190d0:	b941      	cbnz	r1, 80190e4 <__ieee754_atan2f+0x6c>
 80190d2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8019198 <__ieee754_atan2f+0x120>
 80190d6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 801919c <__ieee754_atan2f+0x124>
 80190da:	2800      	cmp	r0, #0
 80190dc:	bfa8      	it	ge
 80190de:	eef0 7a47 	vmovge.f32	s15, s14
 80190e2:	e7dc      	b.n	801909e <__ieee754_atan2f+0x26>
 80190e4:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80190e8:	d110      	bne.n	801910c <__ieee754_atan2f+0x94>
 80190ea:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80190ee:	f104 34ff 	add.w	r4, r4, #4294967295
 80190f2:	d107      	bne.n	8019104 <__ieee754_atan2f+0x8c>
 80190f4:	2c02      	cmp	r4, #2
 80190f6:	d846      	bhi.n	8019186 <__ieee754_atan2f+0x10e>
 80190f8:	4b29      	ldr	r3, [pc, #164]	@ (80191a0 <__ieee754_atan2f+0x128>)
 80190fa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80190fe:	edd3 7a00 	vldr	s15, [r3]
 8019102:	e7cc      	b.n	801909e <__ieee754_atan2f+0x26>
 8019104:	2c02      	cmp	r4, #2
 8019106:	d841      	bhi.n	801918c <__ieee754_atan2f+0x114>
 8019108:	4b26      	ldr	r3, [pc, #152]	@ (80191a4 <__ieee754_atan2f+0x12c>)
 801910a:	e7f6      	b.n	80190fa <__ieee754_atan2f+0x82>
 801910c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8019110:	d0df      	beq.n	80190d2 <__ieee754_atan2f+0x5a>
 8019112:	1a5b      	subs	r3, r3, r1
 8019114:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8019118:	ea4f 51e3 	mov.w	r1, r3, asr #23
 801911c:	da1a      	bge.n	8019154 <__ieee754_atan2f+0xdc>
 801911e:	2a00      	cmp	r2, #0
 8019120:	da01      	bge.n	8019126 <__ieee754_atan2f+0xae>
 8019122:	313c      	adds	r1, #60	@ 0x3c
 8019124:	db19      	blt.n	801915a <__ieee754_atan2f+0xe2>
 8019126:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 801912a:	f7ff fcbd 	bl	8018aa8 <fabsf>
 801912e:	f7ff fba3 	bl	8018878 <atanf>
 8019132:	eef0 7a40 	vmov.f32	s15, s0
 8019136:	2c01      	cmp	r4, #1
 8019138:	d012      	beq.n	8019160 <__ieee754_atan2f+0xe8>
 801913a:	2c02      	cmp	r4, #2
 801913c:	d017      	beq.n	801916e <__ieee754_atan2f+0xf6>
 801913e:	2c00      	cmp	r4, #0
 8019140:	d0ad      	beq.n	801909e <__ieee754_atan2f+0x26>
 8019142:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 80191a8 <__ieee754_atan2f+0x130>
 8019146:	ee77 7a87 	vadd.f32	s15, s15, s14
 801914a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 80191ac <__ieee754_atan2f+0x134>
 801914e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019152:	e7a4      	b.n	801909e <__ieee754_atan2f+0x26>
 8019154:	eddf 7a11 	vldr	s15, [pc, #68]	@ 801919c <__ieee754_atan2f+0x124>
 8019158:	e7ed      	b.n	8019136 <__ieee754_atan2f+0xbe>
 801915a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 80191b0 <__ieee754_atan2f+0x138>
 801915e:	e7ea      	b.n	8019136 <__ieee754_atan2f+0xbe>
 8019160:	ee17 3a90 	vmov	r3, s15
 8019164:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8019168:	ee07 3a90 	vmov	s15, r3
 801916c:	e797      	b.n	801909e <__ieee754_atan2f+0x26>
 801916e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80191a8 <__ieee754_atan2f+0x130>
 8019172:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019176:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 80191ac <__ieee754_atan2f+0x134>
 801917a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801917e:	e78e      	b.n	801909e <__ieee754_atan2f+0x26>
 8019180:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 80191ac <__ieee754_atan2f+0x134>
 8019184:	e78b      	b.n	801909e <__ieee754_atan2f+0x26>
 8019186:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 80191b4 <__ieee754_atan2f+0x13c>
 801918a:	e788      	b.n	801909e <__ieee754_atan2f+0x26>
 801918c:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80191b0 <__ieee754_atan2f+0x138>
 8019190:	e785      	b.n	801909e <__ieee754_atan2f+0x26>
 8019192:	bf00      	nop
 8019194:	c0490fdb 	.word	0xc0490fdb
 8019198:	bfc90fdb 	.word	0xbfc90fdb
 801919c:	3fc90fdb 	.word	0x3fc90fdb
 80191a0:	080216d0 	.word	0x080216d0
 80191a4:	080216c4 	.word	0x080216c4
 80191a8:	33bbbd2e 	.word	0x33bbbd2e
 80191ac:	40490fdb 	.word	0x40490fdb
 80191b0:	00000000 	.word	0x00000000
 80191b4:	3f490fdb 	.word	0x3f490fdb

080191b8 <__ieee754_powf>:
 80191b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80191bc:	ee10 4a90 	vmov	r4, s1
 80191c0:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 80191c4:	ed2d 8b02 	vpush	{d8}
 80191c8:	ee10 6a10 	vmov	r6, s0
 80191cc:	eeb0 8a40 	vmov.f32	s16, s0
 80191d0:	eef0 8a60 	vmov.f32	s17, s1
 80191d4:	d10c      	bne.n	80191f0 <__ieee754_powf+0x38>
 80191d6:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 80191da:	0076      	lsls	r6, r6, #1
 80191dc:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 80191e0:	f240 8274 	bls.w	80196cc <__ieee754_powf+0x514>
 80191e4:	ee38 0a28 	vadd.f32	s0, s16, s17
 80191e8:	ecbd 8b02 	vpop	{d8}
 80191ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80191f0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 80191f4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 80191f8:	d802      	bhi.n	8019200 <__ieee754_powf+0x48>
 80191fa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80191fe:	d908      	bls.n	8019212 <__ieee754_powf+0x5a>
 8019200:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8019204:	d1ee      	bne.n	80191e4 <__ieee754_powf+0x2c>
 8019206:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801920a:	0064      	lsls	r4, r4, #1
 801920c:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8019210:	e7e6      	b.n	80191e0 <__ieee754_powf+0x28>
 8019212:	2e00      	cmp	r6, #0
 8019214:	da1f      	bge.n	8019256 <__ieee754_powf+0x9e>
 8019216:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 801921a:	f080 8260 	bcs.w	80196de <__ieee754_powf+0x526>
 801921e:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8019222:	d32f      	bcc.n	8019284 <__ieee754_powf+0xcc>
 8019224:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8019228:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801922c:	fa49 f503 	asr.w	r5, r9, r3
 8019230:	fa05 f303 	lsl.w	r3, r5, r3
 8019234:	454b      	cmp	r3, r9
 8019236:	d123      	bne.n	8019280 <__ieee754_powf+0xc8>
 8019238:	f005 0501 	and.w	r5, r5, #1
 801923c:	f1c5 0502 	rsb	r5, r5, #2
 8019240:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8019244:	d11f      	bne.n	8019286 <__ieee754_powf+0xce>
 8019246:	2c00      	cmp	r4, #0
 8019248:	f280 8246 	bge.w	80196d8 <__ieee754_powf+0x520>
 801924c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019250:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8019254:	e7c8      	b.n	80191e8 <__ieee754_powf+0x30>
 8019256:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 801925a:	d111      	bne.n	8019280 <__ieee754_powf+0xc8>
 801925c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8019260:	f000 8234 	beq.w	80196cc <__ieee754_powf+0x514>
 8019264:	d906      	bls.n	8019274 <__ieee754_powf+0xbc>
 8019266:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 801957c <__ieee754_powf+0x3c4>
 801926a:	2c00      	cmp	r4, #0
 801926c:	bfa8      	it	ge
 801926e:	eeb0 0a68 	vmovge.f32	s0, s17
 8019272:	e7b9      	b.n	80191e8 <__ieee754_powf+0x30>
 8019274:	2c00      	cmp	r4, #0
 8019276:	f280 822c 	bge.w	80196d2 <__ieee754_powf+0x51a>
 801927a:	eeb1 0a68 	vneg.f32	s0, s17
 801927e:	e7b3      	b.n	80191e8 <__ieee754_powf+0x30>
 8019280:	2500      	movs	r5, #0
 8019282:	e7dd      	b.n	8019240 <__ieee754_powf+0x88>
 8019284:	2500      	movs	r5, #0
 8019286:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 801928a:	d102      	bne.n	8019292 <__ieee754_powf+0xda>
 801928c:	ee28 0a08 	vmul.f32	s0, s16, s16
 8019290:	e7aa      	b.n	80191e8 <__ieee754_powf+0x30>
 8019292:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8019296:	f040 8227 	bne.w	80196e8 <__ieee754_powf+0x530>
 801929a:	2e00      	cmp	r6, #0
 801929c:	f2c0 8224 	blt.w	80196e8 <__ieee754_powf+0x530>
 80192a0:	eeb0 0a48 	vmov.f32	s0, s16
 80192a4:	ecbd 8b02 	vpop	{d8}
 80192a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192ac:	f7ff bc66 	b.w	8018b7c <__ieee754_sqrtf>
 80192b0:	2d01      	cmp	r5, #1
 80192b2:	d199      	bne.n	80191e8 <__ieee754_powf+0x30>
 80192b4:	eeb1 0a40 	vneg.f32	s0, s0
 80192b8:	e796      	b.n	80191e8 <__ieee754_powf+0x30>
 80192ba:	0ff0      	lsrs	r0, r6, #31
 80192bc:	3801      	subs	r0, #1
 80192be:	ea55 0300 	orrs.w	r3, r5, r0
 80192c2:	d104      	bne.n	80192ce <__ieee754_powf+0x116>
 80192c4:	ee38 8a48 	vsub.f32	s16, s16, s16
 80192c8:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80192cc:	e78c      	b.n	80191e8 <__ieee754_powf+0x30>
 80192ce:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 80192d2:	d96d      	bls.n	80193b0 <__ieee754_powf+0x1f8>
 80192d4:	4baa      	ldr	r3, [pc, #680]	@ (8019580 <__ieee754_powf+0x3c8>)
 80192d6:	4598      	cmp	r8, r3
 80192d8:	d808      	bhi.n	80192ec <__ieee754_powf+0x134>
 80192da:	2c00      	cmp	r4, #0
 80192dc:	da0b      	bge.n	80192f6 <__ieee754_powf+0x13e>
 80192de:	2000      	movs	r0, #0
 80192e0:	ecbd 8b02 	vpop	{d8}
 80192e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192e8:	f000 bbea 	b.w	8019ac0 <__math_oflowf>
 80192ec:	4ba5      	ldr	r3, [pc, #660]	@ (8019584 <__ieee754_powf+0x3cc>)
 80192ee:	4598      	cmp	r8, r3
 80192f0:	d908      	bls.n	8019304 <__ieee754_powf+0x14c>
 80192f2:	2c00      	cmp	r4, #0
 80192f4:	dcf3      	bgt.n	80192de <__ieee754_powf+0x126>
 80192f6:	2000      	movs	r0, #0
 80192f8:	ecbd 8b02 	vpop	{d8}
 80192fc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019300:	f000 bbd8 	b.w	8019ab4 <__math_uflowf>
 8019304:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8019308:	ee30 0a67 	vsub.f32	s0, s0, s15
 801930c:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8019588 <__ieee754_powf+0x3d0>
 8019310:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8019314:	eee0 6a67 	vfms.f32	s13, s0, s15
 8019318:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801931c:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8019320:	ee20 7a00 	vmul.f32	s14, s0, s0
 8019324:	eddf 6a99 	vldr	s13, [pc, #612]	@ 801958c <__ieee754_powf+0x3d4>
 8019328:	ee27 7a27 	vmul.f32	s14, s14, s15
 801932c:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8019590 <__ieee754_powf+0x3d8>
 8019330:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8019334:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8019594 <__ieee754_powf+0x3dc>
 8019338:	eee0 7a07 	vfma.f32	s15, s0, s14
 801933c:	eeb0 7a67 	vmov.f32	s14, s15
 8019340:	eea0 7a26 	vfma.f32	s14, s0, s13
 8019344:	ee17 3a10 	vmov	r3, s14
 8019348:	f36f 030b 	bfc	r3, #0, #12
 801934c:	ee07 3a10 	vmov	s14, r3
 8019350:	eeb0 6a47 	vmov.f32	s12, s14
 8019354:	eea0 6a66 	vfms.f32	s12, s0, s13
 8019358:	ee77 7ac6 	vsub.f32	s15, s15, s12
 801935c:	3d01      	subs	r5, #1
 801935e:	4305      	orrs	r5, r0
 8019360:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019364:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8019368:	f36f 040b 	bfc	r4, #0, #12
 801936c:	bf18      	it	ne
 801936e:	eeb0 8a66 	vmovne.f32	s16, s13
 8019372:	ee06 4a90 	vmov	s13, r4
 8019376:	ee67 0aa8 	vmul.f32	s1, s15, s17
 801937a:	ee38 6ae6 	vsub.f32	s12, s17, s13
 801937e:	ee67 7a26 	vmul.f32	s15, s14, s13
 8019382:	eee6 0a07 	vfma.f32	s1, s12, s14
 8019386:	ee30 7aa7 	vadd.f32	s14, s1, s15
 801938a:	ee17 1a10 	vmov	r1, s14
 801938e:	2900      	cmp	r1, #0
 8019390:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8019394:	f340 80dd 	ble.w	8019552 <__ieee754_powf+0x39a>
 8019398:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 801939c:	f240 80ca 	bls.w	8019534 <__ieee754_powf+0x37c>
 80193a0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80193a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80193a8:	bf4c      	ite	mi
 80193aa:	2001      	movmi	r0, #1
 80193ac:	2000      	movpl	r0, #0
 80193ae:	e797      	b.n	80192e0 <__ieee754_powf+0x128>
 80193b0:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 80193b4:	bf01      	itttt	eq
 80193b6:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8019598 <__ieee754_powf+0x3e0>
 80193ba:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 80193be:	f06f 0317 	mvneq.w	r3, #23
 80193c2:	ee17 7a90 	vmoveq	r7, s15
 80193c6:	ea4f 52e7 	mov.w	r2, r7, asr #23
 80193ca:	bf18      	it	ne
 80193cc:	2300      	movne	r3, #0
 80193ce:	3a7f      	subs	r2, #127	@ 0x7f
 80193d0:	441a      	add	r2, r3
 80193d2:	4b72      	ldr	r3, [pc, #456]	@ (801959c <__ieee754_powf+0x3e4>)
 80193d4:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80193d8:	429f      	cmp	r7, r3
 80193da:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 80193de:	dd06      	ble.n	80193ee <__ieee754_powf+0x236>
 80193e0:	4b6f      	ldr	r3, [pc, #444]	@ (80195a0 <__ieee754_powf+0x3e8>)
 80193e2:	429f      	cmp	r7, r3
 80193e4:	f340 80a4 	ble.w	8019530 <__ieee754_powf+0x378>
 80193e8:	3201      	adds	r2, #1
 80193ea:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 80193ee:	2600      	movs	r6, #0
 80193f0:	4b6c      	ldr	r3, [pc, #432]	@ (80195a4 <__ieee754_powf+0x3ec>)
 80193f2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80193f6:	ee07 1a10 	vmov	s14, r1
 80193fa:	edd3 5a00 	vldr	s11, [r3]
 80193fe:	4b6a      	ldr	r3, [pc, #424]	@ (80195a8 <__ieee754_powf+0x3f0>)
 8019400:	ee75 7a87 	vadd.f32	s15, s11, s14
 8019404:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8019408:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 801940c:	1049      	asrs	r1, r1, #1
 801940e:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8019412:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8019416:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 801941a:	ee37 6a65 	vsub.f32	s12, s14, s11
 801941e:	ee07 1a90 	vmov	s15, r1
 8019422:	ee26 5a24 	vmul.f32	s10, s12, s9
 8019426:	ee77 5ae5 	vsub.f32	s11, s15, s11
 801942a:	ee15 7a10 	vmov	r7, s10
 801942e:	401f      	ands	r7, r3
 8019430:	ee06 7a90 	vmov	s13, r7
 8019434:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8019438:	ee37 7a65 	vsub.f32	s14, s14, s11
 801943c:	ee65 7a05 	vmul.f32	s15, s10, s10
 8019440:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8019444:	eddf 5a59 	vldr	s11, [pc, #356]	@ 80195ac <__ieee754_powf+0x3f4>
 8019448:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 80195b0 <__ieee754_powf+0x3f8>
 801944c:	eee7 5a87 	vfma.f32	s11, s15, s14
 8019450:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 80195b4 <__ieee754_powf+0x3fc>
 8019454:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019458:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8019588 <__ieee754_powf+0x3d0>
 801945c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019460:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80195b8 <__ieee754_powf+0x400>
 8019464:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8019468:	eddf 5a54 	vldr	s11, [pc, #336]	@ 80195bc <__ieee754_powf+0x404>
 801946c:	ee26 6a24 	vmul.f32	s12, s12, s9
 8019470:	eee7 5a27 	vfma.f32	s11, s14, s15
 8019474:	ee35 7a26 	vadd.f32	s14, s10, s13
 8019478:	ee67 4aa7 	vmul.f32	s9, s15, s15
 801947c:	ee27 7a06 	vmul.f32	s14, s14, s12
 8019480:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8019484:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8019488:	eef0 5a67 	vmov.f32	s11, s15
 801948c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8019490:	ee75 5a87 	vadd.f32	s11, s11, s14
 8019494:	ee15 1a90 	vmov	r1, s11
 8019498:	4019      	ands	r1, r3
 801949a:	ee05 1a90 	vmov	s11, r1
 801949e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80194a2:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80194a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80194aa:	ee67 7a85 	vmul.f32	s15, s15, s10
 80194ae:	eee6 7a25 	vfma.f32	s15, s12, s11
 80194b2:	eeb0 6a67 	vmov.f32	s12, s15
 80194b6:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80194ba:	ee16 1a10 	vmov	r1, s12
 80194be:	4019      	ands	r1, r3
 80194c0:	ee06 1a10 	vmov	s12, r1
 80194c4:	eeb0 7a46 	vmov.f32	s14, s12
 80194c8:	eea6 7ae5 	vfms.f32	s14, s13, s11
 80194cc:	493c      	ldr	r1, [pc, #240]	@ (80195c0 <__ieee754_powf+0x408>)
 80194ce:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 80194d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80194d6:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 80195c4 <__ieee754_powf+0x40c>
 80194da:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 80195c8 <__ieee754_powf+0x410>
 80194de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80194e2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80195cc <__ieee754_powf+0x414>
 80194e6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80194ea:	ed91 7a00 	vldr	s14, [r1]
 80194ee:	ee77 7a87 	vadd.f32	s15, s15, s14
 80194f2:	ee07 2a10 	vmov	s14, r2
 80194f6:	4a36      	ldr	r2, [pc, #216]	@ (80195d0 <__ieee754_powf+0x418>)
 80194f8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80194fc:	eeb0 7a67 	vmov.f32	s14, s15
 8019500:	eea6 7a25 	vfma.f32	s14, s12, s11
 8019504:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8019508:	ed92 5a00 	vldr	s10, [r2]
 801950c:	ee37 7a05 	vadd.f32	s14, s14, s10
 8019510:	ee37 7a26 	vadd.f32	s14, s14, s13
 8019514:	ee17 2a10 	vmov	r2, s14
 8019518:	401a      	ands	r2, r3
 801951a:	ee07 2a10 	vmov	s14, r2
 801951e:	ee77 6a66 	vsub.f32	s13, s14, s13
 8019522:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8019526:	eee6 6a65 	vfms.f32	s13, s12, s11
 801952a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801952e:	e715      	b.n	801935c <__ieee754_powf+0x1a4>
 8019530:	2601      	movs	r6, #1
 8019532:	e75d      	b.n	80193f0 <__ieee754_powf+0x238>
 8019534:	d152      	bne.n	80195dc <__ieee754_powf+0x424>
 8019536:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80195d4 <__ieee754_powf+0x41c>
 801953a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801953e:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8019542:	eef4 6ac7 	vcmpe.f32	s13, s14
 8019546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801954a:	f73f af29 	bgt.w	80193a0 <__ieee754_powf+0x1e8>
 801954e:	2386      	movs	r3, #134	@ 0x86
 8019550:	e048      	b.n	80195e4 <__ieee754_powf+0x42c>
 8019552:	4a21      	ldr	r2, [pc, #132]	@ (80195d8 <__ieee754_powf+0x420>)
 8019554:	4293      	cmp	r3, r2
 8019556:	d907      	bls.n	8019568 <__ieee754_powf+0x3b0>
 8019558:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801955c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019560:	bf4c      	ite	mi
 8019562:	2001      	movmi	r0, #1
 8019564:	2000      	movpl	r0, #0
 8019566:	e6c7      	b.n	80192f8 <__ieee754_powf+0x140>
 8019568:	d138      	bne.n	80195dc <__ieee754_powf+0x424>
 801956a:	ee37 7a67 	vsub.f32	s14, s14, s15
 801956e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8019572:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019576:	dbea      	blt.n	801954e <__ieee754_powf+0x396>
 8019578:	e7ee      	b.n	8019558 <__ieee754_powf+0x3a0>
 801957a:	bf00      	nop
 801957c:	00000000 	.word	0x00000000
 8019580:	3f7ffff3 	.word	0x3f7ffff3
 8019584:	3f800007 	.word	0x3f800007
 8019588:	3eaaaaab 	.word	0x3eaaaaab
 801958c:	3fb8aa00 	.word	0x3fb8aa00
 8019590:	3fb8aa3b 	.word	0x3fb8aa3b
 8019594:	36eca570 	.word	0x36eca570
 8019598:	4b800000 	.word	0x4b800000
 801959c:	001cc471 	.word	0x001cc471
 80195a0:	005db3d6 	.word	0x005db3d6
 80195a4:	080216ec 	.word	0x080216ec
 80195a8:	fffff000 	.word	0xfffff000
 80195ac:	3e6c3255 	.word	0x3e6c3255
 80195b0:	3e53f142 	.word	0x3e53f142
 80195b4:	3e8ba305 	.word	0x3e8ba305
 80195b8:	3edb6db7 	.word	0x3edb6db7
 80195bc:	3f19999a 	.word	0x3f19999a
 80195c0:	080216dc 	.word	0x080216dc
 80195c4:	3f76384f 	.word	0x3f76384f
 80195c8:	3f763800 	.word	0x3f763800
 80195cc:	369dc3a0 	.word	0x369dc3a0
 80195d0:	080216e4 	.word	0x080216e4
 80195d4:	3338aa3c 	.word	0x3338aa3c
 80195d8:	43160000 	.word	0x43160000
 80195dc:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 80195e0:	d96f      	bls.n	80196c2 <__ieee754_powf+0x50a>
 80195e2:	15db      	asrs	r3, r3, #23
 80195e4:	3b7e      	subs	r3, #126	@ 0x7e
 80195e6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80195ea:	4118      	asrs	r0, r3
 80195ec:	4408      	add	r0, r1
 80195ee:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80195f2:	4a4e      	ldr	r2, [pc, #312]	@ (801972c <__ieee754_powf+0x574>)
 80195f4:	3b7f      	subs	r3, #127	@ 0x7f
 80195f6:	411a      	asrs	r2, r3
 80195f8:	4002      	ands	r2, r0
 80195fa:	ee07 2a10 	vmov	s14, r2
 80195fe:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8019602:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8019606:	f1c3 0317 	rsb	r3, r3, #23
 801960a:	4118      	asrs	r0, r3
 801960c:	2900      	cmp	r1, #0
 801960e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019612:	bfb8      	it	lt
 8019614:	4240      	neglt	r0, r0
 8019616:	ee77 6aa0 	vadd.f32	s13, s15, s1
 801961a:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8019730 <__ieee754_powf+0x578>
 801961e:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8019734 <__ieee754_powf+0x57c>
 8019622:	ee16 3a90 	vmov	r3, s13
 8019626:	f36f 030b 	bfc	r3, #0, #12
 801962a:	ee06 3a90 	vmov	s13, r3
 801962e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8019632:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019636:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801963a:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8019738 <__ieee754_powf+0x580>
 801963e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8019642:	eee0 7a87 	vfma.f32	s15, s1, s14
 8019646:	eeb0 7a67 	vmov.f32	s14, s15
 801964a:	eea6 7a86 	vfma.f32	s14, s13, s12
 801964e:	eef0 5a47 	vmov.f32	s11, s14
 8019652:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8019656:	ee67 6a07 	vmul.f32	s13, s14, s14
 801965a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 801965e:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 801973c <__ieee754_powf+0x584>
 8019662:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8019740 <__ieee754_powf+0x588>
 8019666:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801966a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8019744 <__ieee754_powf+0x58c>
 801966e:	eee6 5a26 	vfma.f32	s11, s12, s13
 8019672:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8019748 <__ieee754_powf+0x590>
 8019676:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801967a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801974c <__ieee754_powf+0x594>
 801967e:	eee6 5a26 	vfma.f32	s11, s12, s13
 8019682:	eeb0 6a47 	vmov.f32	s12, s14
 8019686:	eea5 6ae6 	vfms.f32	s12, s11, s13
 801968a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 801968e:	ee67 5a06 	vmul.f32	s11, s14, s12
 8019692:	ee36 6a66 	vsub.f32	s12, s12, s13
 8019696:	eee7 7a27 	vfma.f32	s15, s14, s15
 801969a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 801969e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80196a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80196a6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80196aa:	ee10 3a10 	vmov	r3, s0
 80196ae:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80196b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80196b6:	da06      	bge.n	80196c6 <__ieee754_powf+0x50e>
 80196b8:	f000 f97c 	bl	80199b4 <scalbnf>
 80196bc:	ee20 0a08 	vmul.f32	s0, s0, s16
 80196c0:	e592      	b.n	80191e8 <__ieee754_powf+0x30>
 80196c2:	2000      	movs	r0, #0
 80196c4:	e7a7      	b.n	8019616 <__ieee754_powf+0x45e>
 80196c6:	ee00 3a10 	vmov	s0, r3
 80196ca:	e7f7      	b.n	80196bc <__ieee754_powf+0x504>
 80196cc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80196d0:	e58a      	b.n	80191e8 <__ieee754_powf+0x30>
 80196d2:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8019750 <__ieee754_powf+0x598>
 80196d6:	e587      	b.n	80191e8 <__ieee754_powf+0x30>
 80196d8:	eeb0 0a48 	vmov.f32	s0, s16
 80196dc:	e584      	b.n	80191e8 <__ieee754_powf+0x30>
 80196de:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80196e2:	f43f adbb 	beq.w	801925c <__ieee754_powf+0xa4>
 80196e6:	2502      	movs	r5, #2
 80196e8:	eeb0 0a48 	vmov.f32	s0, s16
 80196ec:	f7ff f9dc 	bl	8018aa8 <fabsf>
 80196f0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 80196f4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 80196f8:	4647      	mov	r7, r8
 80196fa:	d003      	beq.n	8019704 <__ieee754_powf+0x54c>
 80196fc:	f1b8 0f00 	cmp.w	r8, #0
 8019700:	f47f addb 	bne.w	80192ba <__ieee754_powf+0x102>
 8019704:	2c00      	cmp	r4, #0
 8019706:	bfbc      	itt	lt
 8019708:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 801970c:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8019710:	2e00      	cmp	r6, #0
 8019712:	f6bf ad69 	bge.w	80191e8 <__ieee754_powf+0x30>
 8019716:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 801971a:	ea58 0805 	orrs.w	r8, r8, r5
 801971e:	f47f adc7 	bne.w	80192b0 <__ieee754_powf+0xf8>
 8019722:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019726:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801972a:	e55d      	b.n	80191e8 <__ieee754_powf+0x30>
 801972c:	ff800000 	.word	0xff800000
 8019730:	3f317218 	.word	0x3f317218
 8019734:	3f317200 	.word	0x3f317200
 8019738:	35bfbe8c 	.word	0x35bfbe8c
 801973c:	b5ddea0e 	.word	0xb5ddea0e
 8019740:	3331bb4c 	.word	0x3331bb4c
 8019744:	388ab355 	.word	0x388ab355
 8019748:	bb360b61 	.word	0xbb360b61
 801974c:	3e2aaaab 	.word	0x3e2aaaab
 8019750:	00000000 	.word	0x00000000

08019754 <__ieee754_rem_pio2f>:
 8019754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019756:	ee10 6a10 	vmov	r6, s0
 801975a:	4b88      	ldr	r3, [pc, #544]	@ (801997c <__ieee754_rem_pio2f+0x228>)
 801975c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8019760:	429d      	cmp	r5, r3
 8019762:	b087      	sub	sp, #28
 8019764:	4604      	mov	r4, r0
 8019766:	d805      	bhi.n	8019774 <__ieee754_rem_pio2f+0x20>
 8019768:	2300      	movs	r3, #0
 801976a:	ed80 0a00 	vstr	s0, [r0]
 801976e:	6043      	str	r3, [r0, #4]
 8019770:	2000      	movs	r0, #0
 8019772:	e022      	b.n	80197ba <__ieee754_rem_pio2f+0x66>
 8019774:	4b82      	ldr	r3, [pc, #520]	@ (8019980 <__ieee754_rem_pio2f+0x22c>)
 8019776:	429d      	cmp	r5, r3
 8019778:	d83a      	bhi.n	80197f0 <__ieee754_rem_pio2f+0x9c>
 801977a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801977e:	2e00      	cmp	r6, #0
 8019780:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8019984 <__ieee754_rem_pio2f+0x230>
 8019784:	4a80      	ldr	r2, [pc, #512]	@ (8019988 <__ieee754_rem_pio2f+0x234>)
 8019786:	f023 030f 	bic.w	r3, r3, #15
 801978a:	dd18      	ble.n	80197be <__ieee754_rem_pio2f+0x6a>
 801978c:	4293      	cmp	r3, r2
 801978e:	ee70 7a47 	vsub.f32	s15, s0, s14
 8019792:	bf09      	itett	eq
 8019794:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 801998c <__ieee754_rem_pio2f+0x238>
 8019798:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8019990 <__ieee754_rem_pio2f+0x23c>
 801979c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8019994 <__ieee754_rem_pio2f+0x240>
 80197a0:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80197a4:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80197a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80197ac:	ed80 7a00 	vstr	s14, [r0]
 80197b0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80197b4:	edc0 7a01 	vstr	s15, [r0, #4]
 80197b8:	2001      	movs	r0, #1
 80197ba:	b007      	add	sp, #28
 80197bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197be:	4293      	cmp	r3, r2
 80197c0:	ee70 7a07 	vadd.f32	s15, s0, s14
 80197c4:	bf09      	itett	eq
 80197c6:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 801998c <__ieee754_rem_pio2f+0x238>
 80197ca:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8019990 <__ieee754_rem_pio2f+0x23c>
 80197ce:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8019994 <__ieee754_rem_pio2f+0x240>
 80197d2:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 80197d6:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80197da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80197de:	ed80 7a00 	vstr	s14, [r0]
 80197e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80197e6:	edc0 7a01 	vstr	s15, [r0, #4]
 80197ea:	f04f 30ff 	mov.w	r0, #4294967295
 80197ee:	e7e4      	b.n	80197ba <__ieee754_rem_pio2f+0x66>
 80197f0:	4b69      	ldr	r3, [pc, #420]	@ (8019998 <__ieee754_rem_pio2f+0x244>)
 80197f2:	429d      	cmp	r5, r3
 80197f4:	d873      	bhi.n	80198de <__ieee754_rem_pio2f+0x18a>
 80197f6:	f7ff f957 	bl	8018aa8 <fabsf>
 80197fa:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 801999c <__ieee754_rem_pio2f+0x248>
 80197fe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019802:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801980a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801980e:	ee17 0a90 	vmov	r0, s15
 8019812:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019984 <__ieee754_rem_pio2f+0x230>
 8019816:	eea7 0a67 	vfms.f32	s0, s14, s15
 801981a:	281f      	cmp	r0, #31
 801981c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8019990 <__ieee754_rem_pio2f+0x23c>
 8019820:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019824:	eeb1 6a47 	vneg.f32	s12, s14
 8019828:	ee70 6a67 	vsub.f32	s13, s0, s15
 801982c:	ee16 1a90 	vmov	r1, s13
 8019830:	dc09      	bgt.n	8019846 <__ieee754_rem_pio2f+0xf2>
 8019832:	4a5b      	ldr	r2, [pc, #364]	@ (80199a0 <__ieee754_rem_pio2f+0x24c>)
 8019834:	1e47      	subs	r7, r0, #1
 8019836:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 801983a:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 801983e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8019842:	4293      	cmp	r3, r2
 8019844:	d107      	bne.n	8019856 <__ieee754_rem_pio2f+0x102>
 8019846:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 801984a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 801984e:	2a08      	cmp	r2, #8
 8019850:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8019854:	dc14      	bgt.n	8019880 <__ieee754_rem_pio2f+0x12c>
 8019856:	6021      	str	r1, [r4, #0]
 8019858:	ed94 7a00 	vldr	s14, [r4]
 801985c:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019860:	2e00      	cmp	r6, #0
 8019862:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019866:	ed84 0a01 	vstr	s0, [r4, #4]
 801986a:	daa6      	bge.n	80197ba <__ieee754_rem_pio2f+0x66>
 801986c:	eeb1 7a47 	vneg.f32	s14, s14
 8019870:	eeb1 0a40 	vneg.f32	s0, s0
 8019874:	ed84 7a00 	vstr	s14, [r4]
 8019878:	ed84 0a01 	vstr	s0, [r4, #4]
 801987c:	4240      	negs	r0, r0
 801987e:	e79c      	b.n	80197ba <__ieee754_rem_pio2f+0x66>
 8019880:	eddf 5a42 	vldr	s11, [pc, #264]	@ 801998c <__ieee754_rem_pio2f+0x238>
 8019884:	eef0 6a40 	vmov.f32	s13, s0
 8019888:	eee6 6a25 	vfma.f32	s13, s12, s11
 801988c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8019890:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019894:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8019994 <__ieee754_rem_pio2f+0x240>
 8019898:	eed7 7a25 	vfnms.f32	s15, s14, s11
 801989c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80198a0:	ee15 2a90 	vmov	r2, s11
 80198a4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80198a8:	1a5b      	subs	r3, r3, r1
 80198aa:	2b19      	cmp	r3, #25
 80198ac:	dc04      	bgt.n	80198b8 <__ieee754_rem_pio2f+0x164>
 80198ae:	edc4 5a00 	vstr	s11, [r4]
 80198b2:	eeb0 0a66 	vmov.f32	s0, s13
 80198b6:	e7cf      	b.n	8019858 <__ieee754_rem_pio2f+0x104>
 80198b8:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80199a4 <__ieee754_rem_pio2f+0x250>
 80198bc:	eeb0 0a66 	vmov.f32	s0, s13
 80198c0:	eea6 0a25 	vfma.f32	s0, s12, s11
 80198c4:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80198c8:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80199a8 <__ieee754_rem_pio2f+0x254>
 80198cc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80198d0:	eed7 7a26 	vfnms.f32	s15, s14, s13
 80198d4:	ee30 7a67 	vsub.f32	s14, s0, s15
 80198d8:	ed84 7a00 	vstr	s14, [r4]
 80198dc:	e7bc      	b.n	8019858 <__ieee754_rem_pio2f+0x104>
 80198de:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 80198e2:	d306      	bcc.n	80198f2 <__ieee754_rem_pio2f+0x19e>
 80198e4:	ee70 7a40 	vsub.f32	s15, s0, s0
 80198e8:	edc0 7a01 	vstr	s15, [r0, #4]
 80198ec:	edc0 7a00 	vstr	s15, [r0]
 80198f0:	e73e      	b.n	8019770 <__ieee754_rem_pio2f+0x1c>
 80198f2:	15ea      	asrs	r2, r5, #23
 80198f4:	3a86      	subs	r2, #134	@ 0x86
 80198f6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80198fa:	ee07 3a90 	vmov	s15, r3
 80198fe:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019902:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80199ac <__ieee754_rem_pio2f+0x258>
 8019906:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801990a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801990e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019912:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019916:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801991a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801991e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019922:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019926:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801992a:	eef5 7a40 	vcmp.f32	s15, #0.0
 801992e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019932:	edcd 7a05 	vstr	s15, [sp, #20]
 8019936:	d11e      	bne.n	8019976 <__ieee754_rem_pio2f+0x222>
 8019938:	eeb5 7a40 	vcmp.f32	s14, #0.0
 801993c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019940:	bf0c      	ite	eq
 8019942:	2301      	moveq	r3, #1
 8019944:	2302      	movne	r3, #2
 8019946:	491a      	ldr	r1, [pc, #104]	@ (80199b0 <__ieee754_rem_pio2f+0x25c>)
 8019948:	9101      	str	r1, [sp, #4]
 801994a:	2102      	movs	r1, #2
 801994c:	9100      	str	r1, [sp, #0]
 801994e:	a803      	add	r0, sp, #12
 8019950:	4621      	mov	r1, r4
 8019952:	f000 f8bb 	bl	8019acc <__kernel_rem_pio2f>
 8019956:	2e00      	cmp	r6, #0
 8019958:	f6bf af2f 	bge.w	80197ba <__ieee754_rem_pio2f+0x66>
 801995c:	edd4 7a00 	vldr	s15, [r4]
 8019960:	eef1 7a67 	vneg.f32	s15, s15
 8019964:	edc4 7a00 	vstr	s15, [r4]
 8019968:	edd4 7a01 	vldr	s15, [r4, #4]
 801996c:	eef1 7a67 	vneg.f32	s15, s15
 8019970:	edc4 7a01 	vstr	s15, [r4, #4]
 8019974:	e782      	b.n	801987c <__ieee754_rem_pio2f+0x128>
 8019976:	2303      	movs	r3, #3
 8019978:	e7e5      	b.n	8019946 <__ieee754_rem_pio2f+0x1f2>
 801997a:	bf00      	nop
 801997c:	3f490fd8 	.word	0x3f490fd8
 8019980:	4016cbe3 	.word	0x4016cbe3
 8019984:	3fc90f80 	.word	0x3fc90f80
 8019988:	3fc90fd0 	.word	0x3fc90fd0
 801998c:	37354400 	.word	0x37354400
 8019990:	37354443 	.word	0x37354443
 8019994:	2e85a308 	.word	0x2e85a308
 8019998:	43490f80 	.word	0x43490f80
 801999c:	3f22f984 	.word	0x3f22f984
 80199a0:	080216f4 	.word	0x080216f4
 80199a4:	2e85a300 	.word	0x2e85a300
 80199a8:	248d3132 	.word	0x248d3132
 80199ac:	43800000 	.word	0x43800000
 80199b0:	08021774 	.word	0x08021774

080199b4 <scalbnf>:
 80199b4:	ee10 3a10 	vmov	r3, s0
 80199b8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80199bc:	d02b      	beq.n	8019a16 <scalbnf+0x62>
 80199be:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80199c2:	d302      	bcc.n	80199ca <scalbnf+0x16>
 80199c4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80199c8:	4770      	bx	lr
 80199ca:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80199ce:	d123      	bne.n	8019a18 <scalbnf+0x64>
 80199d0:	4b24      	ldr	r3, [pc, #144]	@ (8019a64 <scalbnf+0xb0>)
 80199d2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8019a68 <scalbnf+0xb4>
 80199d6:	4298      	cmp	r0, r3
 80199d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80199dc:	db17      	blt.n	8019a0e <scalbnf+0x5a>
 80199de:	ee10 3a10 	vmov	r3, s0
 80199e2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80199e6:	3a19      	subs	r2, #25
 80199e8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80199ec:	4288      	cmp	r0, r1
 80199ee:	dd15      	ble.n	8019a1c <scalbnf+0x68>
 80199f0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8019a6c <scalbnf+0xb8>
 80199f4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8019a70 <scalbnf+0xbc>
 80199f8:	ee10 3a10 	vmov	r3, s0
 80199fc:	eeb0 7a67 	vmov.f32	s14, s15
 8019a00:	2b00      	cmp	r3, #0
 8019a02:	bfb8      	it	lt
 8019a04:	eef0 7a66 	vmovlt.f32	s15, s13
 8019a08:	ee27 0a87 	vmul.f32	s0, s15, s14
 8019a0c:	4770      	bx	lr
 8019a0e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8019a74 <scalbnf+0xc0>
 8019a12:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019a16:	4770      	bx	lr
 8019a18:	0dd2      	lsrs	r2, r2, #23
 8019a1a:	e7e5      	b.n	80199e8 <scalbnf+0x34>
 8019a1c:	4410      	add	r0, r2
 8019a1e:	28fe      	cmp	r0, #254	@ 0xfe
 8019a20:	dce6      	bgt.n	80199f0 <scalbnf+0x3c>
 8019a22:	2800      	cmp	r0, #0
 8019a24:	dd06      	ble.n	8019a34 <scalbnf+0x80>
 8019a26:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019a2a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019a2e:	ee00 3a10 	vmov	s0, r3
 8019a32:	4770      	bx	lr
 8019a34:	f110 0f16 	cmn.w	r0, #22
 8019a38:	da09      	bge.n	8019a4e <scalbnf+0x9a>
 8019a3a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8019a74 <scalbnf+0xc0>
 8019a3e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8019a78 <scalbnf+0xc4>
 8019a42:	ee10 3a10 	vmov	r3, s0
 8019a46:	eeb0 7a67 	vmov.f32	s14, s15
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	e7d9      	b.n	8019a02 <scalbnf+0x4e>
 8019a4e:	3019      	adds	r0, #25
 8019a50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8019a54:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8019a58:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8019a7c <scalbnf+0xc8>
 8019a5c:	ee07 3a90 	vmov	s15, r3
 8019a60:	e7d7      	b.n	8019a12 <scalbnf+0x5e>
 8019a62:	bf00      	nop
 8019a64:	ffff3cb0 	.word	0xffff3cb0
 8019a68:	4c000000 	.word	0x4c000000
 8019a6c:	7149f2ca 	.word	0x7149f2ca
 8019a70:	f149f2ca 	.word	0xf149f2ca
 8019a74:	0da24260 	.word	0x0da24260
 8019a78:	8da24260 	.word	0x8da24260
 8019a7c:	33000000 	.word	0x33000000

08019a80 <with_errnof>:
 8019a80:	b510      	push	{r4, lr}
 8019a82:	ed2d 8b02 	vpush	{d8}
 8019a86:	eeb0 8a40 	vmov.f32	s16, s0
 8019a8a:	4604      	mov	r4, r0
 8019a8c:	f001 fdf4 	bl	801b678 <__errno>
 8019a90:	eeb0 0a48 	vmov.f32	s0, s16
 8019a94:	ecbd 8b02 	vpop	{d8}
 8019a98:	6004      	str	r4, [r0, #0]
 8019a9a:	bd10      	pop	{r4, pc}

08019a9c <xflowf>:
 8019a9c:	b130      	cbz	r0, 8019aac <xflowf+0x10>
 8019a9e:	eef1 7a40 	vneg.f32	s15, s0
 8019aa2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8019aa6:	2022      	movs	r0, #34	@ 0x22
 8019aa8:	f7ff bfea 	b.w	8019a80 <with_errnof>
 8019aac:	eef0 7a40 	vmov.f32	s15, s0
 8019ab0:	e7f7      	b.n	8019aa2 <xflowf+0x6>
	...

08019ab4 <__math_uflowf>:
 8019ab4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019abc <__math_uflowf+0x8>
 8019ab8:	f7ff bff0 	b.w	8019a9c <xflowf>
 8019abc:	10000000 	.word	0x10000000

08019ac0 <__math_oflowf>:
 8019ac0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8019ac8 <__math_oflowf+0x8>
 8019ac4:	f7ff bfea 	b.w	8019a9c <xflowf>
 8019ac8:	70000000 	.word	0x70000000

08019acc <__kernel_rem_pio2f>:
 8019acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019ad0:	ed2d 8b04 	vpush	{d8-d9}
 8019ad4:	b0d9      	sub	sp, #356	@ 0x164
 8019ad6:	4690      	mov	r8, r2
 8019ad8:	9001      	str	r0, [sp, #4]
 8019ada:	4ab6      	ldr	r2, [pc, #728]	@ (8019db4 <__kernel_rem_pio2f+0x2e8>)
 8019adc:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8019ade:	f118 0f04 	cmn.w	r8, #4
 8019ae2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8019ae6:	460f      	mov	r7, r1
 8019ae8:	f103 3bff 	add.w	fp, r3, #4294967295
 8019aec:	db26      	blt.n	8019b3c <__kernel_rem_pio2f+0x70>
 8019aee:	f1b8 0203 	subs.w	r2, r8, #3
 8019af2:	bf48      	it	mi
 8019af4:	f108 0204 	addmi.w	r2, r8, #4
 8019af8:	10d2      	asrs	r2, r2, #3
 8019afa:	1c55      	adds	r5, r2, #1
 8019afc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8019afe:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 8019dc4 <__kernel_rem_pio2f+0x2f8>
 8019b02:	00e8      	lsls	r0, r5, #3
 8019b04:	eba2 060b 	sub.w	r6, r2, fp
 8019b08:	9002      	str	r0, [sp, #8]
 8019b0a:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8019b0e:	eb0a 0c0b 	add.w	ip, sl, fp
 8019b12:	ac1c      	add	r4, sp, #112	@ 0x70
 8019b14:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8019b18:	2000      	movs	r0, #0
 8019b1a:	4560      	cmp	r0, ip
 8019b1c:	dd10      	ble.n	8019b40 <__kernel_rem_pio2f+0x74>
 8019b1e:	a91c      	add	r1, sp, #112	@ 0x70
 8019b20:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8019b24:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8019b28:	2600      	movs	r6, #0
 8019b2a:	4556      	cmp	r6, sl
 8019b2c:	dc24      	bgt.n	8019b78 <__kernel_rem_pio2f+0xac>
 8019b2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019b32:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8019dc4 <__kernel_rem_pio2f+0x2f8>
 8019b36:	4684      	mov	ip, r0
 8019b38:	2400      	movs	r4, #0
 8019b3a:	e016      	b.n	8019b6a <__kernel_rem_pio2f+0x9e>
 8019b3c:	2200      	movs	r2, #0
 8019b3e:	e7dc      	b.n	8019afa <__kernel_rem_pio2f+0x2e>
 8019b40:	42c6      	cmn	r6, r0
 8019b42:	bf5d      	ittte	pl
 8019b44:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8019b48:	ee07 1a90 	vmovpl	s15, r1
 8019b4c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8019b50:	eef0 7a47 	vmovmi.f32	s15, s14
 8019b54:	ece4 7a01 	vstmia	r4!, {s15}
 8019b58:	3001      	adds	r0, #1
 8019b5a:	e7de      	b.n	8019b1a <__kernel_rem_pio2f+0x4e>
 8019b5c:	ecfe 6a01 	vldmia	lr!, {s13}
 8019b60:	ed3c 7a01 	vldmdb	ip!, {s14}
 8019b64:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019b68:	3401      	adds	r4, #1
 8019b6a:	455c      	cmp	r4, fp
 8019b6c:	ddf6      	ble.n	8019b5c <__kernel_rem_pio2f+0x90>
 8019b6e:	ece9 7a01 	vstmia	r9!, {s15}
 8019b72:	3601      	adds	r6, #1
 8019b74:	3004      	adds	r0, #4
 8019b76:	e7d8      	b.n	8019b2a <__kernel_rem_pio2f+0x5e>
 8019b78:	a908      	add	r1, sp, #32
 8019b7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019b7e:	9104      	str	r1, [sp, #16]
 8019b80:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8019b82:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8019dc0 <__kernel_rem_pio2f+0x2f4>
 8019b86:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8019dbc <__kernel_rem_pio2f+0x2f0>
 8019b8a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8019b8e:	9203      	str	r2, [sp, #12]
 8019b90:	4654      	mov	r4, sl
 8019b92:	00a2      	lsls	r2, r4, #2
 8019b94:	9205      	str	r2, [sp, #20]
 8019b96:	aa58      	add	r2, sp, #352	@ 0x160
 8019b98:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8019b9c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8019ba0:	a944      	add	r1, sp, #272	@ 0x110
 8019ba2:	aa08      	add	r2, sp, #32
 8019ba4:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8019ba8:	4694      	mov	ip, r2
 8019baa:	4626      	mov	r6, r4
 8019bac:	2e00      	cmp	r6, #0
 8019bae:	dc4c      	bgt.n	8019c4a <__kernel_rem_pio2f+0x17e>
 8019bb0:	4628      	mov	r0, r5
 8019bb2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019bb6:	f7ff fefd 	bl	80199b4 <scalbnf>
 8019bba:	eeb0 8a40 	vmov.f32	s16, s0
 8019bbe:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 8019bc2:	ee28 0a00 	vmul.f32	s0, s16, s0
 8019bc6:	f000 f9e9 	bl	8019f9c <floorf>
 8019bca:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8019bce:	eea0 8a67 	vfms.f32	s16, s0, s15
 8019bd2:	2d00      	cmp	r5, #0
 8019bd4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019bd8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019bdc:	ee17 9a90 	vmov	r9, s15
 8019be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019be4:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019be8:	dd41      	ble.n	8019c6e <__kernel_rem_pio2f+0x1a2>
 8019bea:	f104 3cff 	add.w	ip, r4, #4294967295
 8019bee:	a908      	add	r1, sp, #32
 8019bf0:	f1c5 0e08 	rsb	lr, r5, #8
 8019bf4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8019bf8:	fa46 f00e 	asr.w	r0, r6, lr
 8019bfc:	4481      	add	r9, r0
 8019bfe:	fa00 f00e 	lsl.w	r0, r0, lr
 8019c02:	1a36      	subs	r6, r6, r0
 8019c04:	f1c5 0007 	rsb	r0, r5, #7
 8019c08:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 8019c0c:	4106      	asrs	r6, r0
 8019c0e:	2e00      	cmp	r6, #0
 8019c10:	dd3c      	ble.n	8019c8c <__kernel_rem_pio2f+0x1c0>
 8019c12:	f04f 0e00 	mov.w	lr, #0
 8019c16:	f109 0901 	add.w	r9, r9, #1
 8019c1a:	4670      	mov	r0, lr
 8019c1c:	4574      	cmp	r4, lr
 8019c1e:	dc68      	bgt.n	8019cf2 <__kernel_rem_pio2f+0x226>
 8019c20:	2d00      	cmp	r5, #0
 8019c22:	dd03      	ble.n	8019c2c <__kernel_rem_pio2f+0x160>
 8019c24:	2d01      	cmp	r5, #1
 8019c26:	d074      	beq.n	8019d12 <__kernel_rem_pio2f+0x246>
 8019c28:	2d02      	cmp	r5, #2
 8019c2a:	d07d      	beq.n	8019d28 <__kernel_rem_pio2f+0x25c>
 8019c2c:	2e02      	cmp	r6, #2
 8019c2e:	d12d      	bne.n	8019c8c <__kernel_rem_pio2f+0x1c0>
 8019c30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019c34:	ee30 8a48 	vsub.f32	s16, s0, s16
 8019c38:	b340      	cbz	r0, 8019c8c <__kernel_rem_pio2f+0x1c0>
 8019c3a:	4628      	mov	r0, r5
 8019c3c:	9306      	str	r3, [sp, #24]
 8019c3e:	f7ff feb9 	bl	80199b4 <scalbnf>
 8019c42:	9b06      	ldr	r3, [sp, #24]
 8019c44:	ee38 8a40 	vsub.f32	s16, s16, s0
 8019c48:	e020      	b.n	8019c8c <__kernel_rem_pio2f+0x1c0>
 8019c4a:	ee60 7a28 	vmul.f32	s15, s0, s17
 8019c4e:	3e01      	subs	r6, #1
 8019c50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019c58:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8019c5c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019c60:	ecac 0a01 	vstmia	ip!, {s0}
 8019c64:	ed30 0a01 	vldmdb	r0!, {s0}
 8019c68:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019c6c:	e79e      	b.n	8019bac <__kernel_rem_pio2f+0xe0>
 8019c6e:	d105      	bne.n	8019c7c <__kernel_rem_pio2f+0x1b0>
 8019c70:	1e60      	subs	r0, r4, #1
 8019c72:	a908      	add	r1, sp, #32
 8019c74:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8019c78:	11f6      	asrs	r6, r6, #7
 8019c7a:	e7c8      	b.n	8019c0e <__kernel_rem_pio2f+0x142>
 8019c7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019c80:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8019c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c88:	da31      	bge.n	8019cee <__kernel_rem_pio2f+0x222>
 8019c8a:	2600      	movs	r6, #0
 8019c8c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c94:	f040 8098 	bne.w	8019dc8 <__kernel_rem_pio2f+0x2fc>
 8019c98:	1e60      	subs	r0, r4, #1
 8019c9a:	2200      	movs	r2, #0
 8019c9c:	4550      	cmp	r0, sl
 8019c9e:	da4b      	bge.n	8019d38 <__kernel_rem_pio2f+0x26c>
 8019ca0:	2a00      	cmp	r2, #0
 8019ca2:	d065      	beq.n	8019d70 <__kernel_rem_pio2f+0x2a4>
 8019ca4:	3c01      	subs	r4, #1
 8019ca6:	ab08      	add	r3, sp, #32
 8019ca8:	3d08      	subs	r5, #8
 8019caa:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d0f8      	beq.n	8019ca4 <__kernel_rem_pio2f+0x1d8>
 8019cb2:	4628      	mov	r0, r5
 8019cb4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019cb8:	f7ff fe7c 	bl	80199b4 <scalbnf>
 8019cbc:	1c63      	adds	r3, r4, #1
 8019cbe:	aa44      	add	r2, sp, #272	@ 0x110
 8019cc0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8019dc0 <__kernel_rem_pio2f+0x2f4>
 8019cc4:	0099      	lsls	r1, r3, #2
 8019cc6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019cca:	4623      	mov	r3, r4
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	f280 80a9 	bge.w	8019e24 <__kernel_rem_pio2f+0x358>
 8019cd2:	4623      	mov	r3, r4
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	f2c0 80c7 	blt.w	8019e68 <__kernel_rem_pio2f+0x39c>
 8019cda:	aa44      	add	r2, sp, #272	@ 0x110
 8019cdc:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019ce0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8019db8 <__kernel_rem_pio2f+0x2ec>
 8019ce4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8019dc4 <__kernel_rem_pio2f+0x2f8>
 8019ce8:	2000      	movs	r0, #0
 8019cea:	1ae2      	subs	r2, r4, r3
 8019cec:	e0b1      	b.n	8019e52 <__kernel_rem_pio2f+0x386>
 8019cee:	2602      	movs	r6, #2
 8019cf0:	e78f      	b.n	8019c12 <__kernel_rem_pio2f+0x146>
 8019cf2:	f852 1b04 	ldr.w	r1, [r2], #4
 8019cf6:	b948      	cbnz	r0, 8019d0c <__kernel_rem_pio2f+0x240>
 8019cf8:	b121      	cbz	r1, 8019d04 <__kernel_rem_pio2f+0x238>
 8019cfa:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8019cfe:	f842 1c04 	str.w	r1, [r2, #-4]
 8019d02:	2101      	movs	r1, #1
 8019d04:	f10e 0e01 	add.w	lr, lr, #1
 8019d08:	4608      	mov	r0, r1
 8019d0a:	e787      	b.n	8019c1c <__kernel_rem_pio2f+0x150>
 8019d0c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8019d10:	e7f5      	b.n	8019cfe <__kernel_rem_pio2f+0x232>
 8019d12:	f104 3cff 	add.w	ip, r4, #4294967295
 8019d16:	aa08      	add	r2, sp, #32
 8019d18:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019d1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8019d20:	a908      	add	r1, sp, #32
 8019d22:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8019d26:	e781      	b.n	8019c2c <__kernel_rem_pio2f+0x160>
 8019d28:	f104 3cff 	add.w	ip, r4, #4294967295
 8019d2c:	aa08      	add	r2, sp, #32
 8019d2e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8019d32:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019d36:	e7f3      	b.n	8019d20 <__kernel_rem_pio2f+0x254>
 8019d38:	a908      	add	r1, sp, #32
 8019d3a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8019d3e:	3801      	subs	r0, #1
 8019d40:	430a      	orrs	r2, r1
 8019d42:	e7ab      	b.n	8019c9c <__kernel_rem_pio2f+0x1d0>
 8019d44:	3201      	adds	r2, #1
 8019d46:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8019d4a:	2e00      	cmp	r6, #0
 8019d4c:	d0fa      	beq.n	8019d44 <__kernel_rem_pio2f+0x278>
 8019d4e:	9905      	ldr	r1, [sp, #20]
 8019d50:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8019d54:	eb0d 0001 	add.w	r0, sp, r1
 8019d58:	18e6      	adds	r6, r4, r3
 8019d5a:	a91c      	add	r1, sp, #112	@ 0x70
 8019d5c:	f104 0c01 	add.w	ip, r4, #1
 8019d60:	384c      	subs	r0, #76	@ 0x4c
 8019d62:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8019d66:	4422      	add	r2, r4
 8019d68:	4562      	cmp	r2, ip
 8019d6a:	da04      	bge.n	8019d76 <__kernel_rem_pio2f+0x2aa>
 8019d6c:	4614      	mov	r4, r2
 8019d6e:	e710      	b.n	8019b92 <__kernel_rem_pio2f+0xc6>
 8019d70:	9804      	ldr	r0, [sp, #16]
 8019d72:	2201      	movs	r2, #1
 8019d74:	e7e7      	b.n	8019d46 <__kernel_rem_pio2f+0x27a>
 8019d76:	9903      	ldr	r1, [sp, #12]
 8019d78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019d7c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8019d80:	9105      	str	r1, [sp, #20]
 8019d82:	ee07 1a90 	vmov	s15, r1
 8019d86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019d8a:	2400      	movs	r4, #0
 8019d8c:	ece6 7a01 	vstmia	r6!, {s15}
 8019d90:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 8019dc4 <__kernel_rem_pio2f+0x2f8>
 8019d94:	46b1      	mov	r9, r6
 8019d96:	455c      	cmp	r4, fp
 8019d98:	dd04      	ble.n	8019da4 <__kernel_rem_pio2f+0x2d8>
 8019d9a:	ece0 7a01 	vstmia	r0!, {s15}
 8019d9e:	f10c 0c01 	add.w	ip, ip, #1
 8019da2:	e7e1      	b.n	8019d68 <__kernel_rem_pio2f+0x29c>
 8019da4:	ecfe 6a01 	vldmia	lr!, {s13}
 8019da8:	ed39 7a01 	vldmdb	r9!, {s14}
 8019dac:	3401      	adds	r4, #1
 8019dae:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019db2:	e7f0      	b.n	8019d96 <__kernel_rem_pio2f+0x2ca>
 8019db4:	08021ab8 	.word	0x08021ab8
 8019db8:	08021a8c 	.word	0x08021a8c
 8019dbc:	43800000 	.word	0x43800000
 8019dc0:	3b800000 	.word	0x3b800000
 8019dc4:	00000000 	.word	0x00000000
 8019dc8:	9b02      	ldr	r3, [sp, #8]
 8019dca:	eeb0 0a48 	vmov.f32	s0, s16
 8019dce:	eba3 0008 	sub.w	r0, r3, r8
 8019dd2:	f7ff fdef 	bl	80199b4 <scalbnf>
 8019dd6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8019dbc <__kernel_rem_pio2f+0x2f0>
 8019dda:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019dde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019de2:	db19      	blt.n	8019e18 <__kernel_rem_pio2f+0x34c>
 8019de4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8019dc0 <__kernel_rem_pio2f+0x2f4>
 8019de8:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019dec:	aa08      	add	r2, sp, #32
 8019dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019df2:	3508      	adds	r5, #8
 8019df4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019df8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019dfc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019e00:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019e04:	ee10 3a10 	vmov	r3, s0
 8019e08:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019e0c:	ee17 3a90 	vmov	r3, s15
 8019e10:	3401      	adds	r4, #1
 8019e12:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8019e16:	e74c      	b.n	8019cb2 <__kernel_rem_pio2f+0x1e6>
 8019e18:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8019e1c:	aa08      	add	r2, sp, #32
 8019e1e:	ee10 3a10 	vmov	r3, s0
 8019e22:	e7f6      	b.n	8019e12 <__kernel_rem_pio2f+0x346>
 8019e24:	a808      	add	r0, sp, #32
 8019e26:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8019e2a:	9001      	str	r0, [sp, #4]
 8019e2c:	ee07 0a90 	vmov	s15, r0
 8019e30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019e34:	3b01      	subs	r3, #1
 8019e36:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019e3a:	ee20 0a07 	vmul.f32	s0, s0, s14
 8019e3e:	ed62 7a01 	vstmdb	r2!, {s15}
 8019e42:	e743      	b.n	8019ccc <__kernel_rem_pio2f+0x200>
 8019e44:	ecfc 6a01 	vldmia	ip!, {s13}
 8019e48:	ecb5 7a01 	vldmia	r5!, {s14}
 8019e4c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019e50:	3001      	adds	r0, #1
 8019e52:	4550      	cmp	r0, sl
 8019e54:	dc01      	bgt.n	8019e5a <__kernel_rem_pio2f+0x38e>
 8019e56:	4290      	cmp	r0, r2
 8019e58:	ddf4      	ble.n	8019e44 <__kernel_rem_pio2f+0x378>
 8019e5a:	a858      	add	r0, sp, #352	@ 0x160
 8019e5c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8019e60:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8019e64:	3b01      	subs	r3, #1
 8019e66:	e735      	b.n	8019cd4 <__kernel_rem_pio2f+0x208>
 8019e68:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019e6a:	2b02      	cmp	r3, #2
 8019e6c:	dc09      	bgt.n	8019e82 <__kernel_rem_pio2f+0x3b6>
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	dc27      	bgt.n	8019ec2 <__kernel_rem_pio2f+0x3f6>
 8019e72:	d040      	beq.n	8019ef6 <__kernel_rem_pio2f+0x42a>
 8019e74:	f009 0007 	and.w	r0, r9, #7
 8019e78:	b059      	add	sp, #356	@ 0x164
 8019e7a:	ecbd 8b04 	vpop	{d8-d9}
 8019e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e82:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019e84:	2b03      	cmp	r3, #3
 8019e86:	d1f5      	bne.n	8019e74 <__kernel_rem_pio2f+0x3a8>
 8019e88:	aa30      	add	r2, sp, #192	@ 0xc0
 8019e8a:	1f0b      	subs	r3, r1, #4
 8019e8c:	4413      	add	r3, r2
 8019e8e:	461a      	mov	r2, r3
 8019e90:	4620      	mov	r0, r4
 8019e92:	2800      	cmp	r0, #0
 8019e94:	dc50      	bgt.n	8019f38 <__kernel_rem_pio2f+0x46c>
 8019e96:	4622      	mov	r2, r4
 8019e98:	2a01      	cmp	r2, #1
 8019e9a:	dc5d      	bgt.n	8019f58 <__kernel_rem_pio2f+0x48c>
 8019e9c:	ab30      	add	r3, sp, #192	@ 0xc0
 8019e9e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 8019dc4 <__kernel_rem_pio2f+0x2f8>
 8019ea2:	440b      	add	r3, r1
 8019ea4:	2c01      	cmp	r4, #1
 8019ea6:	dc67      	bgt.n	8019f78 <__kernel_rem_pio2f+0x4ac>
 8019ea8:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019eac:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8019eb0:	2e00      	cmp	r6, #0
 8019eb2:	d167      	bne.n	8019f84 <__kernel_rem_pio2f+0x4b8>
 8019eb4:	edc7 6a00 	vstr	s13, [r7]
 8019eb8:	ed87 7a01 	vstr	s14, [r7, #4]
 8019ebc:	edc7 7a02 	vstr	s15, [r7, #8]
 8019ec0:	e7d8      	b.n	8019e74 <__kernel_rem_pio2f+0x3a8>
 8019ec2:	ab30      	add	r3, sp, #192	@ 0xc0
 8019ec4:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 8019dc4 <__kernel_rem_pio2f+0x2f8>
 8019ec8:	440b      	add	r3, r1
 8019eca:	4622      	mov	r2, r4
 8019ecc:	2a00      	cmp	r2, #0
 8019ece:	da24      	bge.n	8019f1a <__kernel_rem_pio2f+0x44e>
 8019ed0:	b34e      	cbz	r6, 8019f26 <__kernel_rem_pio2f+0x45a>
 8019ed2:	eef1 7a47 	vneg.f32	s15, s14
 8019ed6:	edc7 7a00 	vstr	s15, [r7]
 8019eda:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8019ede:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ee2:	aa31      	add	r2, sp, #196	@ 0xc4
 8019ee4:	2301      	movs	r3, #1
 8019ee6:	429c      	cmp	r4, r3
 8019ee8:	da20      	bge.n	8019f2c <__kernel_rem_pio2f+0x460>
 8019eea:	b10e      	cbz	r6, 8019ef0 <__kernel_rem_pio2f+0x424>
 8019eec:	eef1 7a67 	vneg.f32	s15, s15
 8019ef0:	edc7 7a01 	vstr	s15, [r7, #4]
 8019ef4:	e7be      	b.n	8019e74 <__kernel_rem_pio2f+0x3a8>
 8019ef6:	ab30      	add	r3, sp, #192	@ 0xc0
 8019ef8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 8019dc4 <__kernel_rem_pio2f+0x2f8>
 8019efc:	440b      	add	r3, r1
 8019efe:	2c00      	cmp	r4, #0
 8019f00:	da05      	bge.n	8019f0e <__kernel_rem_pio2f+0x442>
 8019f02:	b10e      	cbz	r6, 8019f08 <__kernel_rem_pio2f+0x43c>
 8019f04:	eef1 7a67 	vneg.f32	s15, s15
 8019f08:	edc7 7a00 	vstr	s15, [r7]
 8019f0c:	e7b2      	b.n	8019e74 <__kernel_rem_pio2f+0x3a8>
 8019f0e:	ed33 7a01 	vldmdb	r3!, {s14}
 8019f12:	3c01      	subs	r4, #1
 8019f14:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f18:	e7f1      	b.n	8019efe <__kernel_rem_pio2f+0x432>
 8019f1a:	ed73 7a01 	vldmdb	r3!, {s15}
 8019f1e:	3a01      	subs	r2, #1
 8019f20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019f24:	e7d2      	b.n	8019ecc <__kernel_rem_pio2f+0x400>
 8019f26:	eef0 7a47 	vmov.f32	s15, s14
 8019f2a:	e7d4      	b.n	8019ed6 <__kernel_rem_pio2f+0x40a>
 8019f2c:	ecb2 7a01 	vldmia	r2!, {s14}
 8019f30:	3301      	adds	r3, #1
 8019f32:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f36:	e7d6      	b.n	8019ee6 <__kernel_rem_pio2f+0x41a>
 8019f38:	ed72 7a01 	vldmdb	r2!, {s15}
 8019f3c:	edd2 6a01 	vldr	s13, [r2, #4]
 8019f40:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019f44:	3801      	subs	r0, #1
 8019f46:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f4a:	ed82 7a00 	vstr	s14, [r2]
 8019f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019f52:	edc2 7a01 	vstr	s15, [r2, #4]
 8019f56:	e79c      	b.n	8019e92 <__kernel_rem_pio2f+0x3c6>
 8019f58:	ed73 7a01 	vldmdb	r3!, {s15}
 8019f5c:	edd3 6a01 	vldr	s13, [r3, #4]
 8019f60:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8019f64:	3a01      	subs	r2, #1
 8019f66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019f6a:	ed83 7a00 	vstr	s14, [r3]
 8019f6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8019f72:	edc3 7a01 	vstr	s15, [r3, #4]
 8019f76:	e78f      	b.n	8019e98 <__kernel_rem_pio2f+0x3cc>
 8019f78:	ed33 7a01 	vldmdb	r3!, {s14}
 8019f7c:	3c01      	subs	r4, #1
 8019f7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019f82:	e78f      	b.n	8019ea4 <__kernel_rem_pio2f+0x3d8>
 8019f84:	eef1 6a66 	vneg.f32	s13, s13
 8019f88:	eeb1 7a47 	vneg.f32	s14, s14
 8019f8c:	edc7 6a00 	vstr	s13, [r7]
 8019f90:	ed87 7a01 	vstr	s14, [r7, #4]
 8019f94:	eef1 7a67 	vneg.f32	s15, s15
 8019f98:	e790      	b.n	8019ebc <__kernel_rem_pio2f+0x3f0>
 8019f9a:	bf00      	nop

08019f9c <floorf>:
 8019f9c:	ee10 3a10 	vmov	r3, s0
 8019fa0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8019fa4:	3a7f      	subs	r2, #127	@ 0x7f
 8019fa6:	2a16      	cmp	r2, #22
 8019fa8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019fac:	dc2b      	bgt.n	801a006 <floorf+0x6a>
 8019fae:	2a00      	cmp	r2, #0
 8019fb0:	da12      	bge.n	8019fd8 <floorf+0x3c>
 8019fb2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 801a018 <floorf+0x7c>
 8019fb6:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019fba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019fc2:	dd06      	ble.n	8019fd2 <floorf+0x36>
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	da24      	bge.n	801a012 <floorf+0x76>
 8019fc8:	2900      	cmp	r1, #0
 8019fca:	4b14      	ldr	r3, [pc, #80]	@ (801a01c <floorf+0x80>)
 8019fcc:	bf08      	it	eq
 8019fce:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8019fd2:	ee00 3a10 	vmov	s0, r3
 8019fd6:	4770      	bx	lr
 8019fd8:	4911      	ldr	r1, [pc, #68]	@ (801a020 <floorf+0x84>)
 8019fda:	4111      	asrs	r1, r2
 8019fdc:	420b      	tst	r3, r1
 8019fde:	d0fa      	beq.n	8019fd6 <floorf+0x3a>
 8019fe0:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 801a018 <floorf+0x7c>
 8019fe4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019fe8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019fec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ff0:	ddef      	ble.n	8019fd2 <floorf+0x36>
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	bfbe      	ittt	lt
 8019ff6:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8019ffa:	fa40 f202 	asrlt.w	r2, r0, r2
 8019ffe:	189b      	addlt	r3, r3, r2
 801a000:	ea23 0301 	bic.w	r3, r3, r1
 801a004:	e7e5      	b.n	8019fd2 <floorf+0x36>
 801a006:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801a00a:	d3e4      	bcc.n	8019fd6 <floorf+0x3a>
 801a00c:	ee30 0a00 	vadd.f32	s0, s0, s0
 801a010:	4770      	bx	lr
 801a012:	2300      	movs	r3, #0
 801a014:	e7dd      	b.n	8019fd2 <floorf+0x36>
 801a016:	bf00      	nop
 801a018:	7149f2ca 	.word	0x7149f2ca
 801a01c:	bf800000 	.word	0xbf800000
 801a020:	007fffff 	.word	0x007fffff

0801a024 <__cvt>:
 801a024:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a028:	ec57 6b10 	vmov	r6, r7, d0
 801a02c:	2f00      	cmp	r7, #0
 801a02e:	460c      	mov	r4, r1
 801a030:	4619      	mov	r1, r3
 801a032:	463b      	mov	r3, r7
 801a034:	bfbb      	ittet	lt
 801a036:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801a03a:	461f      	movlt	r7, r3
 801a03c:	2300      	movge	r3, #0
 801a03e:	232d      	movlt	r3, #45	@ 0x2d
 801a040:	700b      	strb	r3, [r1, #0]
 801a042:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a044:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801a048:	4691      	mov	r9, r2
 801a04a:	f023 0820 	bic.w	r8, r3, #32
 801a04e:	bfbc      	itt	lt
 801a050:	4632      	movlt	r2, r6
 801a052:	4616      	movlt	r6, r2
 801a054:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a058:	d005      	beq.n	801a066 <__cvt+0x42>
 801a05a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801a05e:	d100      	bne.n	801a062 <__cvt+0x3e>
 801a060:	3401      	adds	r4, #1
 801a062:	2102      	movs	r1, #2
 801a064:	e000      	b.n	801a068 <__cvt+0x44>
 801a066:	2103      	movs	r1, #3
 801a068:	ab03      	add	r3, sp, #12
 801a06a:	9301      	str	r3, [sp, #4]
 801a06c:	ab02      	add	r3, sp, #8
 801a06e:	9300      	str	r3, [sp, #0]
 801a070:	ec47 6b10 	vmov	d0, r6, r7
 801a074:	4653      	mov	r3, sl
 801a076:	4622      	mov	r2, r4
 801a078:	f001 fbe2 	bl	801b840 <_dtoa_r>
 801a07c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801a080:	4605      	mov	r5, r0
 801a082:	d119      	bne.n	801a0b8 <__cvt+0x94>
 801a084:	f019 0f01 	tst.w	r9, #1
 801a088:	d00e      	beq.n	801a0a8 <__cvt+0x84>
 801a08a:	eb00 0904 	add.w	r9, r0, r4
 801a08e:	2200      	movs	r2, #0
 801a090:	2300      	movs	r3, #0
 801a092:	4630      	mov	r0, r6
 801a094:	4639      	mov	r1, r7
 801a096:	f7e6 fd27 	bl	8000ae8 <__aeabi_dcmpeq>
 801a09a:	b108      	cbz	r0, 801a0a0 <__cvt+0x7c>
 801a09c:	f8cd 900c 	str.w	r9, [sp, #12]
 801a0a0:	2230      	movs	r2, #48	@ 0x30
 801a0a2:	9b03      	ldr	r3, [sp, #12]
 801a0a4:	454b      	cmp	r3, r9
 801a0a6:	d31e      	bcc.n	801a0e6 <__cvt+0xc2>
 801a0a8:	9b03      	ldr	r3, [sp, #12]
 801a0aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a0ac:	1b5b      	subs	r3, r3, r5
 801a0ae:	4628      	mov	r0, r5
 801a0b0:	6013      	str	r3, [r2, #0]
 801a0b2:	b004      	add	sp, #16
 801a0b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801a0bc:	eb00 0904 	add.w	r9, r0, r4
 801a0c0:	d1e5      	bne.n	801a08e <__cvt+0x6a>
 801a0c2:	7803      	ldrb	r3, [r0, #0]
 801a0c4:	2b30      	cmp	r3, #48	@ 0x30
 801a0c6:	d10a      	bne.n	801a0de <__cvt+0xba>
 801a0c8:	2200      	movs	r2, #0
 801a0ca:	2300      	movs	r3, #0
 801a0cc:	4630      	mov	r0, r6
 801a0ce:	4639      	mov	r1, r7
 801a0d0:	f7e6 fd0a 	bl	8000ae8 <__aeabi_dcmpeq>
 801a0d4:	b918      	cbnz	r0, 801a0de <__cvt+0xba>
 801a0d6:	f1c4 0401 	rsb	r4, r4, #1
 801a0da:	f8ca 4000 	str.w	r4, [sl]
 801a0de:	f8da 3000 	ldr.w	r3, [sl]
 801a0e2:	4499      	add	r9, r3
 801a0e4:	e7d3      	b.n	801a08e <__cvt+0x6a>
 801a0e6:	1c59      	adds	r1, r3, #1
 801a0e8:	9103      	str	r1, [sp, #12]
 801a0ea:	701a      	strb	r2, [r3, #0]
 801a0ec:	e7d9      	b.n	801a0a2 <__cvt+0x7e>

0801a0ee <__exponent>:
 801a0ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a0f0:	2900      	cmp	r1, #0
 801a0f2:	bfba      	itte	lt
 801a0f4:	4249      	neglt	r1, r1
 801a0f6:	232d      	movlt	r3, #45	@ 0x2d
 801a0f8:	232b      	movge	r3, #43	@ 0x2b
 801a0fa:	2909      	cmp	r1, #9
 801a0fc:	7002      	strb	r2, [r0, #0]
 801a0fe:	7043      	strb	r3, [r0, #1]
 801a100:	dd29      	ble.n	801a156 <__exponent+0x68>
 801a102:	f10d 0307 	add.w	r3, sp, #7
 801a106:	461d      	mov	r5, r3
 801a108:	270a      	movs	r7, #10
 801a10a:	461a      	mov	r2, r3
 801a10c:	fbb1 f6f7 	udiv	r6, r1, r7
 801a110:	fb07 1416 	mls	r4, r7, r6, r1
 801a114:	3430      	adds	r4, #48	@ 0x30
 801a116:	f802 4c01 	strb.w	r4, [r2, #-1]
 801a11a:	460c      	mov	r4, r1
 801a11c:	2c63      	cmp	r4, #99	@ 0x63
 801a11e:	f103 33ff 	add.w	r3, r3, #4294967295
 801a122:	4631      	mov	r1, r6
 801a124:	dcf1      	bgt.n	801a10a <__exponent+0x1c>
 801a126:	3130      	adds	r1, #48	@ 0x30
 801a128:	1e94      	subs	r4, r2, #2
 801a12a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801a12e:	1c41      	adds	r1, r0, #1
 801a130:	4623      	mov	r3, r4
 801a132:	42ab      	cmp	r3, r5
 801a134:	d30a      	bcc.n	801a14c <__exponent+0x5e>
 801a136:	f10d 0309 	add.w	r3, sp, #9
 801a13a:	1a9b      	subs	r3, r3, r2
 801a13c:	42ac      	cmp	r4, r5
 801a13e:	bf88      	it	hi
 801a140:	2300      	movhi	r3, #0
 801a142:	3302      	adds	r3, #2
 801a144:	4403      	add	r3, r0
 801a146:	1a18      	subs	r0, r3, r0
 801a148:	b003      	add	sp, #12
 801a14a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a14c:	f813 6b01 	ldrb.w	r6, [r3], #1
 801a150:	f801 6f01 	strb.w	r6, [r1, #1]!
 801a154:	e7ed      	b.n	801a132 <__exponent+0x44>
 801a156:	2330      	movs	r3, #48	@ 0x30
 801a158:	3130      	adds	r1, #48	@ 0x30
 801a15a:	7083      	strb	r3, [r0, #2]
 801a15c:	70c1      	strb	r1, [r0, #3]
 801a15e:	1d03      	adds	r3, r0, #4
 801a160:	e7f1      	b.n	801a146 <__exponent+0x58>
	...

0801a164 <_printf_float>:
 801a164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a168:	b08d      	sub	sp, #52	@ 0x34
 801a16a:	460c      	mov	r4, r1
 801a16c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a170:	4616      	mov	r6, r2
 801a172:	461f      	mov	r7, r3
 801a174:	4605      	mov	r5, r0
 801a176:	f001 f9d7 	bl	801b528 <_localeconv_r>
 801a17a:	6803      	ldr	r3, [r0, #0]
 801a17c:	9304      	str	r3, [sp, #16]
 801a17e:	4618      	mov	r0, r3
 801a180:	f7e6 f886 	bl	8000290 <strlen>
 801a184:	2300      	movs	r3, #0
 801a186:	930a      	str	r3, [sp, #40]	@ 0x28
 801a188:	f8d8 3000 	ldr.w	r3, [r8]
 801a18c:	9005      	str	r0, [sp, #20]
 801a18e:	3307      	adds	r3, #7
 801a190:	f023 0307 	bic.w	r3, r3, #7
 801a194:	f103 0208 	add.w	r2, r3, #8
 801a198:	f894 a018 	ldrb.w	sl, [r4, #24]
 801a19c:	f8d4 b000 	ldr.w	fp, [r4]
 801a1a0:	f8c8 2000 	str.w	r2, [r8]
 801a1a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801a1a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801a1ac:	9307      	str	r3, [sp, #28]
 801a1ae:	f8cd 8018 	str.w	r8, [sp, #24]
 801a1b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801a1b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a1ba:	4b9c      	ldr	r3, [pc, #624]	@ (801a42c <_printf_float+0x2c8>)
 801a1bc:	f04f 32ff 	mov.w	r2, #4294967295
 801a1c0:	f7e6 fcc4 	bl	8000b4c <__aeabi_dcmpun>
 801a1c4:	bb70      	cbnz	r0, 801a224 <_printf_float+0xc0>
 801a1c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801a1ca:	4b98      	ldr	r3, [pc, #608]	@ (801a42c <_printf_float+0x2c8>)
 801a1cc:	f04f 32ff 	mov.w	r2, #4294967295
 801a1d0:	f7e6 fc9e 	bl	8000b10 <__aeabi_dcmple>
 801a1d4:	bb30      	cbnz	r0, 801a224 <_printf_float+0xc0>
 801a1d6:	2200      	movs	r2, #0
 801a1d8:	2300      	movs	r3, #0
 801a1da:	4640      	mov	r0, r8
 801a1dc:	4649      	mov	r1, r9
 801a1de:	f7e6 fc8d 	bl	8000afc <__aeabi_dcmplt>
 801a1e2:	b110      	cbz	r0, 801a1ea <_printf_float+0x86>
 801a1e4:	232d      	movs	r3, #45	@ 0x2d
 801a1e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a1ea:	4a91      	ldr	r2, [pc, #580]	@ (801a430 <_printf_float+0x2cc>)
 801a1ec:	4b91      	ldr	r3, [pc, #580]	@ (801a434 <_printf_float+0x2d0>)
 801a1ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801a1f2:	bf8c      	ite	hi
 801a1f4:	4690      	movhi	r8, r2
 801a1f6:	4698      	movls	r8, r3
 801a1f8:	2303      	movs	r3, #3
 801a1fa:	6123      	str	r3, [r4, #16]
 801a1fc:	f02b 0304 	bic.w	r3, fp, #4
 801a200:	6023      	str	r3, [r4, #0]
 801a202:	f04f 0900 	mov.w	r9, #0
 801a206:	9700      	str	r7, [sp, #0]
 801a208:	4633      	mov	r3, r6
 801a20a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801a20c:	4621      	mov	r1, r4
 801a20e:	4628      	mov	r0, r5
 801a210:	f000 fb1e 	bl	801a850 <_printf_common>
 801a214:	3001      	adds	r0, #1
 801a216:	f040 808d 	bne.w	801a334 <_printf_float+0x1d0>
 801a21a:	f04f 30ff 	mov.w	r0, #4294967295
 801a21e:	b00d      	add	sp, #52	@ 0x34
 801a220:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a224:	4642      	mov	r2, r8
 801a226:	464b      	mov	r3, r9
 801a228:	4640      	mov	r0, r8
 801a22a:	4649      	mov	r1, r9
 801a22c:	f7e6 fc8e 	bl	8000b4c <__aeabi_dcmpun>
 801a230:	b140      	cbz	r0, 801a244 <_printf_float+0xe0>
 801a232:	464b      	mov	r3, r9
 801a234:	2b00      	cmp	r3, #0
 801a236:	bfbc      	itt	lt
 801a238:	232d      	movlt	r3, #45	@ 0x2d
 801a23a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801a23e:	4a7e      	ldr	r2, [pc, #504]	@ (801a438 <_printf_float+0x2d4>)
 801a240:	4b7e      	ldr	r3, [pc, #504]	@ (801a43c <_printf_float+0x2d8>)
 801a242:	e7d4      	b.n	801a1ee <_printf_float+0x8a>
 801a244:	6863      	ldr	r3, [r4, #4]
 801a246:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801a24a:	9206      	str	r2, [sp, #24]
 801a24c:	1c5a      	adds	r2, r3, #1
 801a24e:	d13b      	bne.n	801a2c8 <_printf_float+0x164>
 801a250:	2306      	movs	r3, #6
 801a252:	6063      	str	r3, [r4, #4]
 801a254:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801a258:	2300      	movs	r3, #0
 801a25a:	6022      	str	r2, [r4, #0]
 801a25c:	9303      	str	r3, [sp, #12]
 801a25e:	ab0a      	add	r3, sp, #40	@ 0x28
 801a260:	e9cd a301 	strd	sl, r3, [sp, #4]
 801a264:	ab09      	add	r3, sp, #36	@ 0x24
 801a266:	9300      	str	r3, [sp, #0]
 801a268:	6861      	ldr	r1, [r4, #4]
 801a26a:	ec49 8b10 	vmov	d0, r8, r9
 801a26e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801a272:	4628      	mov	r0, r5
 801a274:	f7ff fed6 	bl	801a024 <__cvt>
 801a278:	9b06      	ldr	r3, [sp, #24]
 801a27a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a27c:	2b47      	cmp	r3, #71	@ 0x47
 801a27e:	4680      	mov	r8, r0
 801a280:	d129      	bne.n	801a2d6 <_printf_float+0x172>
 801a282:	1cc8      	adds	r0, r1, #3
 801a284:	db02      	blt.n	801a28c <_printf_float+0x128>
 801a286:	6863      	ldr	r3, [r4, #4]
 801a288:	4299      	cmp	r1, r3
 801a28a:	dd41      	ble.n	801a310 <_printf_float+0x1ac>
 801a28c:	f1aa 0a02 	sub.w	sl, sl, #2
 801a290:	fa5f fa8a 	uxtb.w	sl, sl
 801a294:	3901      	subs	r1, #1
 801a296:	4652      	mov	r2, sl
 801a298:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801a29c:	9109      	str	r1, [sp, #36]	@ 0x24
 801a29e:	f7ff ff26 	bl	801a0ee <__exponent>
 801a2a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a2a4:	1813      	adds	r3, r2, r0
 801a2a6:	2a01      	cmp	r2, #1
 801a2a8:	4681      	mov	r9, r0
 801a2aa:	6123      	str	r3, [r4, #16]
 801a2ac:	dc02      	bgt.n	801a2b4 <_printf_float+0x150>
 801a2ae:	6822      	ldr	r2, [r4, #0]
 801a2b0:	07d2      	lsls	r2, r2, #31
 801a2b2:	d501      	bpl.n	801a2b8 <_printf_float+0x154>
 801a2b4:	3301      	adds	r3, #1
 801a2b6:	6123      	str	r3, [r4, #16]
 801a2b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d0a2      	beq.n	801a206 <_printf_float+0xa2>
 801a2c0:	232d      	movs	r3, #45	@ 0x2d
 801a2c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a2c6:	e79e      	b.n	801a206 <_printf_float+0xa2>
 801a2c8:	9a06      	ldr	r2, [sp, #24]
 801a2ca:	2a47      	cmp	r2, #71	@ 0x47
 801a2cc:	d1c2      	bne.n	801a254 <_printf_float+0xf0>
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	d1c0      	bne.n	801a254 <_printf_float+0xf0>
 801a2d2:	2301      	movs	r3, #1
 801a2d4:	e7bd      	b.n	801a252 <_printf_float+0xee>
 801a2d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a2da:	d9db      	bls.n	801a294 <_printf_float+0x130>
 801a2dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801a2e0:	d118      	bne.n	801a314 <_printf_float+0x1b0>
 801a2e2:	2900      	cmp	r1, #0
 801a2e4:	6863      	ldr	r3, [r4, #4]
 801a2e6:	dd0b      	ble.n	801a300 <_printf_float+0x19c>
 801a2e8:	6121      	str	r1, [r4, #16]
 801a2ea:	b913      	cbnz	r3, 801a2f2 <_printf_float+0x18e>
 801a2ec:	6822      	ldr	r2, [r4, #0]
 801a2ee:	07d0      	lsls	r0, r2, #31
 801a2f0:	d502      	bpl.n	801a2f8 <_printf_float+0x194>
 801a2f2:	3301      	adds	r3, #1
 801a2f4:	440b      	add	r3, r1
 801a2f6:	6123      	str	r3, [r4, #16]
 801a2f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 801a2fa:	f04f 0900 	mov.w	r9, #0
 801a2fe:	e7db      	b.n	801a2b8 <_printf_float+0x154>
 801a300:	b913      	cbnz	r3, 801a308 <_printf_float+0x1a4>
 801a302:	6822      	ldr	r2, [r4, #0]
 801a304:	07d2      	lsls	r2, r2, #31
 801a306:	d501      	bpl.n	801a30c <_printf_float+0x1a8>
 801a308:	3302      	adds	r3, #2
 801a30a:	e7f4      	b.n	801a2f6 <_printf_float+0x192>
 801a30c:	2301      	movs	r3, #1
 801a30e:	e7f2      	b.n	801a2f6 <_printf_float+0x192>
 801a310:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801a314:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a316:	4299      	cmp	r1, r3
 801a318:	db05      	blt.n	801a326 <_printf_float+0x1c2>
 801a31a:	6823      	ldr	r3, [r4, #0]
 801a31c:	6121      	str	r1, [r4, #16]
 801a31e:	07d8      	lsls	r0, r3, #31
 801a320:	d5ea      	bpl.n	801a2f8 <_printf_float+0x194>
 801a322:	1c4b      	adds	r3, r1, #1
 801a324:	e7e7      	b.n	801a2f6 <_printf_float+0x192>
 801a326:	2900      	cmp	r1, #0
 801a328:	bfd4      	ite	le
 801a32a:	f1c1 0202 	rsble	r2, r1, #2
 801a32e:	2201      	movgt	r2, #1
 801a330:	4413      	add	r3, r2
 801a332:	e7e0      	b.n	801a2f6 <_printf_float+0x192>
 801a334:	6823      	ldr	r3, [r4, #0]
 801a336:	055a      	lsls	r2, r3, #21
 801a338:	d407      	bmi.n	801a34a <_printf_float+0x1e6>
 801a33a:	6923      	ldr	r3, [r4, #16]
 801a33c:	4642      	mov	r2, r8
 801a33e:	4631      	mov	r1, r6
 801a340:	4628      	mov	r0, r5
 801a342:	47b8      	blx	r7
 801a344:	3001      	adds	r0, #1
 801a346:	d12b      	bne.n	801a3a0 <_printf_float+0x23c>
 801a348:	e767      	b.n	801a21a <_printf_float+0xb6>
 801a34a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801a34e:	f240 80dd 	bls.w	801a50c <_printf_float+0x3a8>
 801a352:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a356:	2200      	movs	r2, #0
 801a358:	2300      	movs	r3, #0
 801a35a:	f7e6 fbc5 	bl	8000ae8 <__aeabi_dcmpeq>
 801a35e:	2800      	cmp	r0, #0
 801a360:	d033      	beq.n	801a3ca <_printf_float+0x266>
 801a362:	4a37      	ldr	r2, [pc, #220]	@ (801a440 <_printf_float+0x2dc>)
 801a364:	2301      	movs	r3, #1
 801a366:	4631      	mov	r1, r6
 801a368:	4628      	mov	r0, r5
 801a36a:	47b8      	blx	r7
 801a36c:	3001      	adds	r0, #1
 801a36e:	f43f af54 	beq.w	801a21a <_printf_float+0xb6>
 801a372:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801a376:	4543      	cmp	r3, r8
 801a378:	db02      	blt.n	801a380 <_printf_float+0x21c>
 801a37a:	6823      	ldr	r3, [r4, #0]
 801a37c:	07d8      	lsls	r0, r3, #31
 801a37e:	d50f      	bpl.n	801a3a0 <_printf_float+0x23c>
 801a380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a384:	4631      	mov	r1, r6
 801a386:	4628      	mov	r0, r5
 801a388:	47b8      	blx	r7
 801a38a:	3001      	adds	r0, #1
 801a38c:	f43f af45 	beq.w	801a21a <_printf_float+0xb6>
 801a390:	f04f 0900 	mov.w	r9, #0
 801a394:	f108 38ff 	add.w	r8, r8, #4294967295
 801a398:	f104 0a1a 	add.w	sl, r4, #26
 801a39c:	45c8      	cmp	r8, r9
 801a39e:	dc09      	bgt.n	801a3b4 <_printf_float+0x250>
 801a3a0:	6823      	ldr	r3, [r4, #0]
 801a3a2:	079b      	lsls	r3, r3, #30
 801a3a4:	f100 8103 	bmi.w	801a5ae <_printf_float+0x44a>
 801a3a8:	68e0      	ldr	r0, [r4, #12]
 801a3aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a3ac:	4298      	cmp	r0, r3
 801a3ae:	bfb8      	it	lt
 801a3b0:	4618      	movlt	r0, r3
 801a3b2:	e734      	b.n	801a21e <_printf_float+0xba>
 801a3b4:	2301      	movs	r3, #1
 801a3b6:	4652      	mov	r2, sl
 801a3b8:	4631      	mov	r1, r6
 801a3ba:	4628      	mov	r0, r5
 801a3bc:	47b8      	blx	r7
 801a3be:	3001      	adds	r0, #1
 801a3c0:	f43f af2b 	beq.w	801a21a <_printf_float+0xb6>
 801a3c4:	f109 0901 	add.w	r9, r9, #1
 801a3c8:	e7e8      	b.n	801a39c <_printf_float+0x238>
 801a3ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a3cc:	2b00      	cmp	r3, #0
 801a3ce:	dc39      	bgt.n	801a444 <_printf_float+0x2e0>
 801a3d0:	4a1b      	ldr	r2, [pc, #108]	@ (801a440 <_printf_float+0x2dc>)
 801a3d2:	2301      	movs	r3, #1
 801a3d4:	4631      	mov	r1, r6
 801a3d6:	4628      	mov	r0, r5
 801a3d8:	47b8      	blx	r7
 801a3da:	3001      	adds	r0, #1
 801a3dc:	f43f af1d 	beq.w	801a21a <_printf_float+0xb6>
 801a3e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801a3e4:	ea59 0303 	orrs.w	r3, r9, r3
 801a3e8:	d102      	bne.n	801a3f0 <_printf_float+0x28c>
 801a3ea:	6823      	ldr	r3, [r4, #0]
 801a3ec:	07d9      	lsls	r1, r3, #31
 801a3ee:	d5d7      	bpl.n	801a3a0 <_printf_float+0x23c>
 801a3f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a3f4:	4631      	mov	r1, r6
 801a3f6:	4628      	mov	r0, r5
 801a3f8:	47b8      	blx	r7
 801a3fa:	3001      	adds	r0, #1
 801a3fc:	f43f af0d 	beq.w	801a21a <_printf_float+0xb6>
 801a400:	f04f 0a00 	mov.w	sl, #0
 801a404:	f104 0b1a 	add.w	fp, r4, #26
 801a408:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a40a:	425b      	negs	r3, r3
 801a40c:	4553      	cmp	r3, sl
 801a40e:	dc01      	bgt.n	801a414 <_printf_float+0x2b0>
 801a410:	464b      	mov	r3, r9
 801a412:	e793      	b.n	801a33c <_printf_float+0x1d8>
 801a414:	2301      	movs	r3, #1
 801a416:	465a      	mov	r2, fp
 801a418:	4631      	mov	r1, r6
 801a41a:	4628      	mov	r0, r5
 801a41c:	47b8      	blx	r7
 801a41e:	3001      	adds	r0, #1
 801a420:	f43f aefb 	beq.w	801a21a <_printf_float+0xb6>
 801a424:	f10a 0a01 	add.w	sl, sl, #1
 801a428:	e7ee      	b.n	801a408 <_printf_float+0x2a4>
 801a42a:	bf00      	nop
 801a42c:	7fefffff 	.word	0x7fefffff
 801a430:	080214b8 	.word	0x080214b8
 801a434:	080214b4 	.word	0x080214b4
 801a438:	080214c0 	.word	0x080214c0
 801a43c:	080214bc 	.word	0x080214bc
 801a440:	08021636 	.word	0x08021636
 801a444:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a446:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a44a:	4553      	cmp	r3, sl
 801a44c:	bfa8      	it	ge
 801a44e:	4653      	movge	r3, sl
 801a450:	2b00      	cmp	r3, #0
 801a452:	4699      	mov	r9, r3
 801a454:	dc36      	bgt.n	801a4c4 <_printf_float+0x360>
 801a456:	f04f 0b00 	mov.w	fp, #0
 801a45a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a45e:	f104 021a 	add.w	r2, r4, #26
 801a462:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801a464:	9306      	str	r3, [sp, #24]
 801a466:	eba3 0309 	sub.w	r3, r3, r9
 801a46a:	455b      	cmp	r3, fp
 801a46c:	dc31      	bgt.n	801a4d2 <_printf_float+0x36e>
 801a46e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a470:	459a      	cmp	sl, r3
 801a472:	dc3a      	bgt.n	801a4ea <_printf_float+0x386>
 801a474:	6823      	ldr	r3, [r4, #0]
 801a476:	07da      	lsls	r2, r3, #31
 801a478:	d437      	bmi.n	801a4ea <_printf_float+0x386>
 801a47a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a47c:	ebaa 0903 	sub.w	r9, sl, r3
 801a480:	9b06      	ldr	r3, [sp, #24]
 801a482:	ebaa 0303 	sub.w	r3, sl, r3
 801a486:	4599      	cmp	r9, r3
 801a488:	bfa8      	it	ge
 801a48a:	4699      	movge	r9, r3
 801a48c:	f1b9 0f00 	cmp.w	r9, #0
 801a490:	dc33      	bgt.n	801a4fa <_printf_float+0x396>
 801a492:	f04f 0800 	mov.w	r8, #0
 801a496:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801a49a:	f104 0b1a 	add.w	fp, r4, #26
 801a49e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a4a0:	ebaa 0303 	sub.w	r3, sl, r3
 801a4a4:	eba3 0309 	sub.w	r3, r3, r9
 801a4a8:	4543      	cmp	r3, r8
 801a4aa:	f77f af79 	ble.w	801a3a0 <_printf_float+0x23c>
 801a4ae:	2301      	movs	r3, #1
 801a4b0:	465a      	mov	r2, fp
 801a4b2:	4631      	mov	r1, r6
 801a4b4:	4628      	mov	r0, r5
 801a4b6:	47b8      	blx	r7
 801a4b8:	3001      	adds	r0, #1
 801a4ba:	f43f aeae 	beq.w	801a21a <_printf_float+0xb6>
 801a4be:	f108 0801 	add.w	r8, r8, #1
 801a4c2:	e7ec      	b.n	801a49e <_printf_float+0x33a>
 801a4c4:	4642      	mov	r2, r8
 801a4c6:	4631      	mov	r1, r6
 801a4c8:	4628      	mov	r0, r5
 801a4ca:	47b8      	blx	r7
 801a4cc:	3001      	adds	r0, #1
 801a4ce:	d1c2      	bne.n	801a456 <_printf_float+0x2f2>
 801a4d0:	e6a3      	b.n	801a21a <_printf_float+0xb6>
 801a4d2:	2301      	movs	r3, #1
 801a4d4:	4631      	mov	r1, r6
 801a4d6:	4628      	mov	r0, r5
 801a4d8:	9206      	str	r2, [sp, #24]
 801a4da:	47b8      	blx	r7
 801a4dc:	3001      	adds	r0, #1
 801a4de:	f43f ae9c 	beq.w	801a21a <_printf_float+0xb6>
 801a4e2:	9a06      	ldr	r2, [sp, #24]
 801a4e4:	f10b 0b01 	add.w	fp, fp, #1
 801a4e8:	e7bb      	b.n	801a462 <_printf_float+0x2fe>
 801a4ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a4ee:	4631      	mov	r1, r6
 801a4f0:	4628      	mov	r0, r5
 801a4f2:	47b8      	blx	r7
 801a4f4:	3001      	adds	r0, #1
 801a4f6:	d1c0      	bne.n	801a47a <_printf_float+0x316>
 801a4f8:	e68f      	b.n	801a21a <_printf_float+0xb6>
 801a4fa:	9a06      	ldr	r2, [sp, #24]
 801a4fc:	464b      	mov	r3, r9
 801a4fe:	4442      	add	r2, r8
 801a500:	4631      	mov	r1, r6
 801a502:	4628      	mov	r0, r5
 801a504:	47b8      	blx	r7
 801a506:	3001      	adds	r0, #1
 801a508:	d1c3      	bne.n	801a492 <_printf_float+0x32e>
 801a50a:	e686      	b.n	801a21a <_printf_float+0xb6>
 801a50c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801a510:	f1ba 0f01 	cmp.w	sl, #1
 801a514:	dc01      	bgt.n	801a51a <_printf_float+0x3b6>
 801a516:	07db      	lsls	r3, r3, #31
 801a518:	d536      	bpl.n	801a588 <_printf_float+0x424>
 801a51a:	2301      	movs	r3, #1
 801a51c:	4642      	mov	r2, r8
 801a51e:	4631      	mov	r1, r6
 801a520:	4628      	mov	r0, r5
 801a522:	47b8      	blx	r7
 801a524:	3001      	adds	r0, #1
 801a526:	f43f ae78 	beq.w	801a21a <_printf_float+0xb6>
 801a52a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801a52e:	4631      	mov	r1, r6
 801a530:	4628      	mov	r0, r5
 801a532:	47b8      	blx	r7
 801a534:	3001      	adds	r0, #1
 801a536:	f43f ae70 	beq.w	801a21a <_printf_float+0xb6>
 801a53a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801a53e:	2200      	movs	r2, #0
 801a540:	2300      	movs	r3, #0
 801a542:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a546:	f7e6 facf 	bl	8000ae8 <__aeabi_dcmpeq>
 801a54a:	b9c0      	cbnz	r0, 801a57e <_printf_float+0x41a>
 801a54c:	4653      	mov	r3, sl
 801a54e:	f108 0201 	add.w	r2, r8, #1
 801a552:	4631      	mov	r1, r6
 801a554:	4628      	mov	r0, r5
 801a556:	47b8      	blx	r7
 801a558:	3001      	adds	r0, #1
 801a55a:	d10c      	bne.n	801a576 <_printf_float+0x412>
 801a55c:	e65d      	b.n	801a21a <_printf_float+0xb6>
 801a55e:	2301      	movs	r3, #1
 801a560:	465a      	mov	r2, fp
 801a562:	4631      	mov	r1, r6
 801a564:	4628      	mov	r0, r5
 801a566:	47b8      	blx	r7
 801a568:	3001      	adds	r0, #1
 801a56a:	f43f ae56 	beq.w	801a21a <_printf_float+0xb6>
 801a56e:	f108 0801 	add.w	r8, r8, #1
 801a572:	45d0      	cmp	r8, sl
 801a574:	dbf3      	blt.n	801a55e <_printf_float+0x3fa>
 801a576:	464b      	mov	r3, r9
 801a578:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801a57c:	e6df      	b.n	801a33e <_printf_float+0x1da>
 801a57e:	f04f 0800 	mov.w	r8, #0
 801a582:	f104 0b1a 	add.w	fp, r4, #26
 801a586:	e7f4      	b.n	801a572 <_printf_float+0x40e>
 801a588:	2301      	movs	r3, #1
 801a58a:	4642      	mov	r2, r8
 801a58c:	e7e1      	b.n	801a552 <_printf_float+0x3ee>
 801a58e:	2301      	movs	r3, #1
 801a590:	464a      	mov	r2, r9
 801a592:	4631      	mov	r1, r6
 801a594:	4628      	mov	r0, r5
 801a596:	47b8      	blx	r7
 801a598:	3001      	adds	r0, #1
 801a59a:	f43f ae3e 	beq.w	801a21a <_printf_float+0xb6>
 801a59e:	f108 0801 	add.w	r8, r8, #1
 801a5a2:	68e3      	ldr	r3, [r4, #12]
 801a5a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a5a6:	1a5b      	subs	r3, r3, r1
 801a5a8:	4543      	cmp	r3, r8
 801a5aa:	dcf0      	bgt.n	801a58e <_printf_float+0x42a>
 801a5ac:	e6fc      	b.n	801a3a8 <_printf_float+0x244>
 801a5ae:	f04f 0800 	mov.w	r8, #0
 801a5b2:	f104 0919 	add.w	r9, r4, #25
 801a5b6:	e7f4      	b.n	801a5a2 <_printf_float+0x43e>

0801a5b8 <__sfputc_r>:
 801a5b8:	6893      	ldr	r3, [r2, #8]
 801a5ba:	3b01      	subs	r3, #1
 801a5bc:	2b00      	cmp	r3, #0
 801a5be:	b410      	push	{r4}
 801a5c0:	6093      	str	r3, [r2, #8]
 801a5c2:	da08      	bge.n	801a5d6 <__sfputc_r+0x1e>
 801a5c4:	6994      	ldr	r4, [r2, #24]
 801a5c6:	42a3      	cmp	r3, r4
 801a5c8:	db01      	blt.n	801a5ce <__sfputc_r+0x16>
 801a5ca:	290a      	cmp	r1, #10
 801a5cc:	d103      	bne.n	801a5d6 <__sfputc_r+0x1e>
 801a5ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5d2:	f000 bee1 	b.w	801b398 <__swbuf_r>
 801a5d6:	6813      	ldr	r3, [r2, #0]
 801a5d8:	1c58      	adds	r0, r3, #1
 801a5da:	6010      	str	r0, [r2, #0]
 801a5dc:	7019      	strb	r1, [r3, #0]
 801a5de:	4608      	mov	r0, r1
 801a5e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a5e4:	4770      	bx	lr

0801a5e6 <__sfputs_r>:
 801a5e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5e8:	4606      	mov	r6, r0
 801a5ea:	460f      	mov	r7, r1
 801a5ec:	4614      	mov	r4, r2
 801a5ee:	18d5      	adds	r5, r2, r3
 801a5f0:	42ac      	cmp	r4, r5
 801a5f2:	d101      	bne.n	801a5f8 <__sfputs_r+0x12>
 801a5f4:	2000      	movs	r0, #0
 801a5f6:	e007      	b.n	801a608 <__sfputs_r+0x22>
 801a5f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a5fc:	463a      	mov	r2, r7
 801a5fe:	4630      	mov	r0, r6
 801a600:	f7ff ffda 	bl	801a5b8 <__sfputc_r>
 801a604:	1c43      	adds	r3, r0, #1
 801a606:	d1f3      	bne.n	801a5f0 <__sfputs_r+0xa>
 801a608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a60c <_vfiprintf_r>:
 801a60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a610:	460d      	mov	r5, r1
 801a612:	b09d      	sub	sp, #116	@ 0x74
 801a614:	4614      	mov	r4, r2
 801a616:	4698      	mov	r8, r3
 801a618:	4606      	mov	r6, r0
 801a61a:	b118      	cbz	r0, 801a624 <_vfiprintf_r+0x18>
 801a61c:	6a03      	ldr	r3, [r0, #32]
 801a61e:	b90b      	cbnz	r3, 801a624 <_vfiprintf_r+0x18>
 801a620:	f000 fd3c 	bl	801b09c <__sinit>
 801a624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a626:	07d9      	lsls	r1, r3, #31
 801a628:	d405      	bmi.n	801a636 <_vfiprintf_r+0x2a>
 801a62a:	89ab      	ldrh	r3, [r5, #12]
 801a62c:	059a      	lsls	r2, r3, #22
 801a62e:	d402      	bmi.n	801a636 <_vfiprintf_r+0x2a>
 801a630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a632:	f001 f84c 	bl	801b6ce <__retarget_lock_acquire_recursive>
 801a636:	89ab      	ldrh	r3, [r5, #12]
 801a638:	071b      	lsls	r3, r3, #28
 801a63a:	d501      	bpl.n	801a640 <_vfiprintf_r+0x34>
 801a63c:	692b      	ldr	r3, [r5, #16]
 801a63e:	b99b      	cbnz	r3, 801a668 <_vfiprintf_r+0x5c>
 801a640:	4629      	mov	r1, r5
 801a642:	4630      	mov	r0, r6
 801a644:	f000 fee6 	bl	801b414 <__swsetup_r>
 801a648:	b170      	cbz	r0, 801a668 <_vfiprintf_r+0x5c>
 801a64a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a64c:	07dc      	lsls	r4, r3, #31
 801a64e:	d504      	bpl.n	801a65a <_vfiprintf_r+0x4e>
 801a650:	f04f 30ff 	mov.w	r0, #4294967295
 801a654:	b01d      	add	sp, #116	@ 0x74
 801a656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a65a:	89ab      	ldrh	r3, [r5, #12]
 801a65c:	0598      	lsls	r0, r3, #22
 801a65e:	d4f7      	bmi.n	801a650 <_vfiprintf_r+0x44>
 801a660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a662:	f001 f835 	bl	801b6d0 <__retarget_lock_release_recursive>
 801a666:	e7f3      	b.n	801a650 <_vfiprintf_r+0x44>
 801a668:	2300      	movs	r3, #0
 801a66a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a66c:	2320      	movs	r3, #32
 801a66e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a672:	f8cd 800c 	str.w	r8, [sp, #12]
 801a676:	2330      	movs	r3, #48	@ 0x30
 801a678:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801a828 <_vfiprintf_r+0x21c>
 801a67c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a680:	f04f 0901 	mov.w	r9, #1
 801a684:	4623      	mov	r3, r4
 801a686:	469a      	mov	sl, r3
 801a688:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a68c:	b10a      	cbz	r2, 801a692 <_vfiprintf_r+0x86>
 801a68e:	2a25      	cmp	r2, #37	@ 0x25
 801a690:	d1f9      	bne.n	801a686 <_vfiprintf_r+0x7a>
 801a692:	ebba 0b04 	subs.w	fp, sl, r4
 801a696:	d00b      	beq.n	801a6b0 <_vfiprintf_r+0xa4>
 801a698:	465b      	mov	r3, fp
 801a69a:	4622      	mov	r2, r4
 801a69c:	4629      	mov	r1, r5
 801a69e:	4630      	mov	r0, r6
 801a6a0:	f7ff ffa1 	bl	801a5e6 <__sfputs_r>
 801a6a4:	3001      	adds	r0, #1
 801a6a6:	f000 80a7 	beq.w	801a7f8 <_vfiprintf_r+0x1ec>
 801a6aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a6ac:	445a      	add	r2, fp
 801a6ae:	9209      	str	r2, [sp, #36]	@ 0x24
 801a6b0:	f89a 3000 	ldrb.w	r3, [sl]
 801a6b4:	2b00      	cmp	r3, #0
 801a6b6:	f000 809f 	beq.w	801a7f8 <_vfiprintf_r+0x1ec>
 801a6ba:	2300      	movs	r3, #0
 801a6bc:	f04f 32ff 	mov.w	r2, #4294967295
 801a6c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a6c4:	f10a 0a01 	add.w	sl, sl, #1
 801a6c8:	9304      	str	r3, [sp, #16]
 801a6ca:	9307      	str	r3, [sp, #28]
 801a6cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a6d0:	931a      	str	r3, [sp, #104]	@ 0x68
 801a6d2:	4654      	mov	r4, sl
 801a6d4:	2205      	movs	r2, #5
 801a6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a6da:	4853      	ldr	r0, [pc, #332]	@ (801a828 <_vfiprintf_r+0x21c>)
 801a6dc:	f7e5 fd88 	bl	80001f0 <memchr>
 801a6e0:	9a04      	ldr	r2, [sp, #16]
 801a6e2:	b9d8      	cbnz	r0, 801a71c <_vfiprintf_r+0x110>
 801a6e4:	06d1      	lsls	r1, r2, #27
 801a6e6:	bf44      	itt	mi
 801a6e8:	2320      	movmi	r3, #32
 801a6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a6ee:	0713      	lsls	r3, r2, #28
 801a6f0:	bf44      	itt	mi
 801a6f2:	232b      	movmi	r3, #43	@ 0x2b
 801a6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a6f8:	f89a 3000 	ldrb.w	r3, [sl]
 801a6fc:	2b2a      	cmp	r3, #42	@ 0x2a
 801a6fe:	d015      	beq.n	801a72c <_vfiprintf_r+0x120>
 801a700:	9a07      	ldr	r2, [sp, #28]
 801a702:	4654      	mov	r4, sl
 801a704:	2000      	movs	r0, #0
 801a706:	f04f 0c0a 	mov.w	ip, #10
 801a70a:	4621      	mov	r1, r4
 801a70c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a710:	3b30      	subs	r3, #48	@ 0x30
 801a712:	2b09      	cmp	r3, #9
 801a714:	d94b      	bls.n	801a7ae <_vfiprintf_r+0x1a2>
 801a716:	b1b0      	cbz	r0, 801a746 <_vfiprintf_r+0x13a>
 801a718:	9207      	str	r2, [sp, #28]
 801a71a:	e014      	b.n	801a746 <_vfiprintf_r+0x13a>
 801a71c:	eba0 0308 	sub.w	r3, r0, r8
 801a720:	fa09 f303 	lsl.w	r3, r9, r3
 801a724:	4313      	orrs	r3, r2
 801a726:	9304      	str	r3, [sp, #16]
 801a728:	46a2      	mov	sl, r4
 801a72a:	e7d2      	b.n	801a6d2 <_vfiprintf_r+0xc6>
 801a72c:	9b03      	ldr	r3, [sp, #12]
 801a72e:	1d19      	adds	r1, r3, #4
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	9103      	str	r1, [sp, #12]
 801a734:	2b00      	cmp	r3, #0
 801a736:	bfbb      	ittet	lt
 801a738:	425b      	neglt	r3, r3
 801a73a:	f042 0202 	orrlt.w	r2, r2, #2
 801a73e:	9307      	strge	r3, [sp, #28]
 801a740:	9307      	strlt	r3, [sp, #28]
 801a742:	bfb8      	it	lt
 801a744:	9204      	strlt	r2, [sp, #16]
 801a746:	7823      	ldrb	r3, [r4, #0]
 801a748:	2b2e      	cmp	r3, #46	@ 0x2e
 801a74a:	d10a      	bne.n	801a762 <_vfiprintf_r+0x156>
 801a74c:	7863      	ldrb	r3, [r4, #1]
 801a74e:	2b2a      	cmp	r3, #42	@ 0x2a
 801a750:	d132      	bne.n	801a7b8 <_vfiprintf_r+0x1ac>
 801a752:	9b03      	ldr	r3, [sp, #12]
 801a754:	1d1a      	adds	r2, r3, #4
 801a756:	681b      	ldr	r3, [r3, #0]
 801a758:	9203      	str	r2, [sp, #12]
 801a75a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a75e:	3402      	adds	r4, #2
 801a760:	9305      	str	r3, [sp, #20]
 801a762:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801a838 <_vfiprintf_r+0x22c>
 801a766:	7821      	ldrb	r1, [r4, #0]
 801a768:	2203      	movs	r2, #3
 801a76a:	4650      	mov	r0, sl
 801a76c:	f7e5 fd40 	bl	80001f0 <memchr>
 801a770:	b138      	cbz	r0, 801a782 <_vfiprintf_r+0x176>
 801a772:	9b04      	ldr	r3, [sp, #16]
 801a774:	eba0 000a 	sub.w	r0, r0, sl
 801a778:	2240      	movs	r2, #64	@ 0x40
 801a77a:	4082      	lsls	r2, r0
 801a77c:	4313      	orrs	r3, r2
 801a77e:	3401      	adds	r4, #1
 801a780:	9304      	str	r3, [sp, #16]
 801a782:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a786:	4829      	ldr	r0, [pc, #164]	@ (801a82c <_vfiprintf_r+0x220>)
 801a788:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a78c:	2206      	movs	r2, #6
 801a78e:	f7e5 fd2f 	bl	80001f0 <memchr>
 801a792:	2800      	cmp	r0, #0
 801a794:	d03f      	beq.n	801a816 <_vfiprintf_r+0x20a>
 801a796:	4b26      	ldr	r3, [pc, #152]	@ (801a830 <_vfiprintf_r+0x224>)
 801a798:	bb1b      	cbnz	r3, 801a7e2 <_vfiprintf_r+0x1d6>
 801a79a:	9b03      	ldr	r3, [sp, #12]
 801a79c:	3307      	adds	r3, #7
 801a79e:	f023 0307 	bic.w	r3, r3, #7
 801a7a2:	3308      	adds	r3, #8
 801a7a4:	9303      	str	r3, [sp, #12]
 801a7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7a8:	443b      	add	r3, r7
 801a7aa:	9309      	str	r3, [sp, #36]	@ 0x24
 801a7ac:	e76a      	b.n	801a684 <_vfiprintf_r+0x78>
 801a7ae:	fb0c 3202 	mla	r2, ip, r2, r3
 801a7b2:	460c      	mov	r4, r1
 801a7b4:	2001      	movs	r0, #1
 801a7b6:	e7a8      	b.n	801a70a <_vfiprintf_r+0xfe>
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	3401      	adds	r4, #1
 801a7bc:	9305      	str	r3, [sp, #20]
 801a7be:	4619      	mov	r1, r3
 801a7c0:	f04f 0c0a 	mov.w	ip, #10
 801a7c4:	4620      	mov	r0, r4
 801a7c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a7ca:	3a30      	subs	r2, #48	@ 0x30
 801a7cc:	2a09      	cmp	r2, #9
 801a7ce:	d903      	bls.n	801a7d8 <_vfiprintf_r+0x1cc>
 801a7d0:	2b00      	cmp	r3, #0
 801a7d2:	d0c6      	beq.n	801a762 <_vfiprintf_r+0x156>
 801a7d4:	9105      	str	r1, [sp, #20]
 801a7d6:	e7c4      	b.n	801a762 <_vfiprintf_r+0x156>
 801a7d8:	fb0c 2101 	mla	r1, ip, r1, r2
 801a7dc:	4604      	mov	r4, r0
 801a7de:	2301      	movs	r3, #1
 801a7e0:	e7f0      	b.n	801a7c4 <_vfiprintf_r+0x1b8>
 801a7e2:	ab03      	add	r3, sp, #12
 801a7e4:	9300      	str	r3, [sp, #0]
 801a7e6:	462a      	mov	r2, r5
 801a7e8:	4b12      	ldr	r3, [pc, #72]	@ (801a834 <_vfiprintf_r+0x228>)
 801a7ea:	a904      	add	r1, sp, #16
 801a7ec:	4630      	mov	r0, r6
 801a7ee:	f7ff fcb9 	bl	801a164 <_printf_float>
 801a7f2:	4607      	mov	r7, r0
 801a7f4:	1c78      	adds	r0, r7, #1
 801a7f6:	d1d6      	bne.n	801a7a6 <_vfiprintf_r+0x19a>
 801a7f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801a7fa:	07d9      	lsls	r1, r3, #31
 801a7fc:	d405      	bmi.n	801a80a <_vfiprintf_r+0x1fe>
 801a7fe:	89ab      	ldrh	r3, [r5, #12]
 801a800:	059a      	lsls	r2, r3, #22
 801a802:	d402      	bmi.n	801a80a <_vfiprintf_r+0x1fe>
 801a804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801a806:	f000 ff63 	bl	801b6d0 <__retarget_lock_release_recursive>
 801a80a:	89ab      	ldrh	r3, [r5, #12]
 801a80c:	065b      	lsls	r3, r3, #25
 801a80e:	f53f af1f 	bmi.w	801a650 <_vfiprintf_r+0x44>
 801a812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a814:	e71e      	b.n	801a654 <_vfiprintf_r+0x48>
 801a816:	ab03      	add	r3, sp, #12
 801a818:	9300      	str	r3, [sp, #0]
 801a81a:	462a      	mov	r2, r5
 801a81c:	4b05      	ldr	r3, [pc, #20]	@ (801a834 <_vfiprintf_r+0x228>)
 801a81e:	a904      	add	r1, sp, #16
 801a820:	4630      	mov	r0, r6
 801a822:	f000 f883 	bl	801a92c <_printf_i>
 801a826:	e7e4      	b.n	801a7f2 <_vfiprintf_r+0x1e6>
 801a828:	080214c4 	.word	0x080214c4
 801a82c:	080214ce 	.word	0x080214ce
 801a830:	0801a165 	.word	0x0801a165
 801a834:	0801a5e7 	.word	0x0801a5e7
 801a838:	080214ca 	.word	0x080214ca

0801a83c <vfiprintf>:
 801a83c:	4613      	mov	r3, r2
 801a83e:	460a      	mov	r2, r1
 801a840:	4601      	mov	r1, r0
 801a842:	4802      	ldr	r0, [pc, #8]	@ (801a84c <vfiprintf+0x10>)
 801a844:	6800      	ldr	r0, [r0, #0]
 801a846:	f7ff bee1 	b.w	801a60c <_vfiprintf_r>
 801a84a:	bf00      	nop
 801a84c:	20000160 	.word	0x20000160

0801a850 <_printf_common>:
 801a850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a854:	4616      	mov	r6, r2
 801a856:	4698      	mov	r8, r3
 801a858:	688a      	ldr	r2, [r1, #8]
 801a85a:	690b      	ldr	r3, [r1, #16]
 801a85c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801a860:	4293      	cmp	r3, r2
 801a862:	bfb8      	it	lt
 801a864:	4613      	movlt	r3, r2
 801a866:	6033      	str	r3, [r6, #0]
 801a868:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801a86c:	4607      	mov	r7, r0
 801a86e:	460c      	mov	r4, r1
 801a870:	b10a      	cbz	r2, 801a876 <_printf_common+0x26>
 801a872:	3301      	adds	r3, #1
 801a874:	6033      	str	r3, [r6, #0]
 801a876:	6823      	ldr	r3, [r4, #0]
 801a878:	0699      	lsls	r1, r3, #26
 801a87a:	bf42      	ittt	mi
 801a87c:	6833      	ldrmi	r3, [r6, #0]
 801a87e:	3302      	addmi	r3, #2
 801a880:	6033      	strmi	r3, [r6, #0]
 801a882:	6825      	ldr	r5, [r4, #0]
 801a884:	f015 0506 	ands.w	r5, r5, #6
 801a888:	d106      	bne.n	801a898 <_printf_common+0x48>
 801a88a:	f104 0a19 	add.w	sl, r4, #25
 801a88e:	68e3      	ldr	r3, [r4, #12]
 801a890:	6832      	ldr	r2, [r6, #0]
 801a892:	1a9b      	subs	r3, r3, r2
 801a894:	42ab      	cmp	r3, r5
 801a896:	dc26      	bgt.n	801a8e6 <_printf_common+0x96>
 801a898:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801a89c:	6822      	ldr	r2, [r4, #0]
 801a89e:	3b00      	subs	r3, #0
 801a8a0:	bf18      	it	ne
 801a8a2:	2301      	movne	r3, #1
 801a8a4:	0692      	lsls	r2, r2, #26
 801a8a6:	d42b      	bmi.n	801a900 <_printf_common+0xb0>
 801a8a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a8ac:	4641      	mov	r1, r8
 801a8ae:	4638      	mov	r0, r7
 801a8b0:	47c8      	blx	r9
 801a8b2:	3001      	adds	r0, #1
 801a8b4:	d01e      	beq.n	801a8f4 <_printf_common+0xa4>
 801a8b6:	6823      	ldr	r3, [r4, #0]
 801a8b8:	6922      	ldr	r2, [r4, #16]
 801a8ba:	f003 0306 	and.w	r3, r3, #6
 801a8be:	2b04      	cmp	r3, #4
 801a8c0:	bf02      	ittt	eq
 801a8c2:	68e5      	ldreq	r5, [r4, #12]
 801a8c4:	6833      	ldreq	r3, [r6, #0]
 801a8c6:	1aed      	subeq	r5, r5, r3
 801a8c8:	68a3      	ldr	r3, [r4, #8]
 801a8ca:	bf0c      	ite	eq
 801a8cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a8d0:	2500      	movne	r5, #0
 801a8d2:	4293      	cmp	r3, r2
 801a8d4:	bfc4      	itt	gt
 801a8d6:	1a9b      	subgt	r3, r3, r2
 801a8d8:	18ed      	addgt	r5, r5, r3
 801a8da:	2600      	movs	r6, #0
 801a8dc:	341a      	adds	r4, #26
 801a8de:	42b5      	cmp	r5, r6
 801a8e0:	d11a      	bne.n	801a918 <_printf_common+0xc8>
 801a8e2:	2000      	movs	r0, #0
 801a8e4:	e008      	b.n	801a8f8 <_printf_common+0xa8>
 801a8e6:	2301      	movs	r3, #1
 801a8e8:	4652      	mov	r2, sl
 801a8ea:	4641      	mov	r1, r8
 801a8ec:	4638      	mov	r0, r7
 801a8ee:	47c8      	blx	r9
 801a8f0:	3001      	adds	r0, #1
 801a8f2:	d103      	bne.n	801a8fc <_printf_common+0xac>
 801a8f4:	f04f 30ff 	mov.w	r0, #4294967295
 801a8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a8fc:	3501      	adds	r5, #1
 801a8fe:	e7c6      	b.n	801a88e <_printf_common+0x3e>
 801a900:	18e1      	adds	r1, r4, r3
 801a902:	1c5a      	adds	r2, r3, #1
 801a904:	2030      	movs	r0, #48	@ 0x30
 801a906:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a90a:	4422      	add	r2, r4
 801a90c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a910:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a914:	3302      	adds	r3, #2
 801a916:	e7c7      	b.n	801a8a8 <_printf_common+0x58>
 801a918:	2301      	movs	r3, #1
 801a91a:	4622      	mov	r2, r4
 801a91c:	4641      	mov	r1, r8
 801a91e:	4638      	mov	r0, r7
 801a920:	47c8      	blx	r9
 801a922:	3001      	adds	r0, #1
 801a924:	d0e6      	beq.n	801a8f4 <_printf_common+0xa4>
 801a926:	3601      	adds	r6, #1
 801a928:	e7d9      	b.n	801a8de <_printf_common+0x8e>
	...

0801a92c <_printf_i>:
 801a92c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a930:	7e0f      	ldrb	r7, [r1, #24]
 801a932:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a934:	2f78      	cmp	r7, #120	@ 0x78
 801a936:	4691      	mov	r9, r2
 801a938:	4680      	mov	r8, r0
 801a93a:	460c      	mov	r4, r1
 801a93c:	469a      	mov	sl, r3
 801a93e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a942:	d807      	bhi.n	801a954 <_printf_i+0x28>
 801a944:	2f62      	cmp	r7, #98	@ 0x62
 801a946:	d80a      	bhi.n	801a95e <_printf_i+0x32>
 801a948:	2f00      	cmp	r7, #0
 801a94a:	f000 80d1 	beq.w	801aaf0 <_printf_i+0x1c4>
 801a94e:	2f58      	cmp	r7, #88	@ 0x58
 801a950:	f000 80b8 	beq.w	801aac4 <_printf_i+0x198>
 801a954:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a958:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a95c:	e03a      	b.n	801a9d4 <_printf_i+0xa8>
 801a95e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a962:	2b15      	cmp	r3, #21
 801a964:	d8f6      	bhi.n	801a954 <_printf_i+0x28>
 801a966:	a101      	add	r1, pc, #4	@ (adr r1, 801a96c <_printf_i+0x40>)
 801a968:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a96c:	0801a9c5 	.word	0x0801a9c5
 801a970:	0801a9d9 	.word	0x0801a9d9
 801a974:	0801a955 	.word	0x0801a955
 801a978:	0801a955 	.word	0x0801a955
 801a97c:	0801a955 	.word	0x0801a955
 801a980:	0801a955 	.word	0x0801a955
 801a984:	0801a9d9 	.word	0x0801a9d9
 801a988:	0801a955 	.word	0x0801a955
 801a98c:	0801a955 	.word	0x0801a955
 801a990:	0801a955 	.word	0x0801a955
 801a994:	0801a955 	.word	0x0801a955
 801a998:	0801aad7 	.word	0x0801aad7
 801a99c:	0801aa03 	.word	0x0801aa03
 801a9a0:	0801aa91 	.word	0x0801aa91
 801a9a4:	0801a955 	.word	0x0801a955
 801a9a8:	0801a955 	.word	0x0801a955
 801a9ac:	0801aaf9 	.word	0x0801aaf9
 801a9b0:	0801a955 	.word	0x0801a955
 801a9b4:	0801aa03 	.word	0x0801aa03
 801a9b8:	0801a955 	.word	0x0801a955
 801a9bc:	0801a955 	.word	0x0801a955
 801a9c0:	0801aa99 	.word	0x0801aa99
 801a9c4:	6833      	ldr	r3, [r6, #0]
 801a9c6:	1d1a      	adds	r2, r3, #4
 801a9c8:	681b      	ldr	r3, [r3, #0]
 801a9ca:	6032      	str	r2, [r6, #0]
 801a9cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a9d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a9d4:	2301      	movs	r3, #1
 801a9d6:	e09c      	b.n	801ab12 <_printf_i+0x1e6>
 801a9d8:	6833      	ldr	r3, [r6, #0]
 801a9da:	6820      	ldr	r0, [r4, #0]
 801a9dc:	1d19      	adds	r1, r3, #4
 801a9de:	6031      	str	r1, [r6, #0]
 801a9e0:	0606      	lsls	r6, r0, #24
 801a9e2:	d501      	bpl.n	801a9e8 <_printf_i+0xbc>
 801a9e4:	681d      	ldr	r5, [r3, #0]
 801a9e6:	e003      	b.n	801a9f0 <_printf_i+0xc4>
 801a9e8:	0645      	lsls	r5, r0, #25
 801a9ea:	d5fb      	bpl.n	801a9e4 <_printf_i+0xb8>
 801a9ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a9f0:	2d00      	cmp	r5, #0
 801a9f2:	da03      	bge.n	801a9fc <_printf_i+0xd0>
 801a9f4:	232d      	movs	r3, #45	@ 0x2d
 801a9f6:	426d      	negs	r5, r5
 801a9f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a9fc:	4858      	ldr	r0, [pc, #352]	@ (801ab60 <_printf_i+0x234>)
 801a9fe:	230a      	movs	r3, #10
 801aa00:	e011      	b.n	801aa26 <_printf_i+0xfa>
 801aa02:	6821      	ldr	r1, [r4, #0]
 801aa04:	6833      	ldr	r3, [r6, #0]
 801aa06:	0608      	lsls	r0, r1, #24
 801aa08:	f853 5b04 	ldr.w	r5, [r3], #4
 801aa0c:	d402      	bmi.n	801aa14 <_printf_i+0xe8>
 801aa0e:	0649      	lsls	r1, r1, #25
 801aa10:	bf48      	it	mi
 801aa12:	b2ad      	uxthmi	r5, r5
 801aa14:	2f6f      	cmp	r7, #111	@ 0x6f
 801aa16:	4852      	ldr	r0, [pc, #328]	@ (801ab60 <_printf_i+0x234>)
 801aa18:	6033      	str	r3, [r6, #0]
 801aa1a:	bf14      	ite	ne
 801aa1c:	230a      	movne	r3, #10
 801aa1e:	2308      	moveq	r3, #8
 801aa20:	2100      	movs	r1, #0
 801aa22:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801aa26:	6866      	ldr	r6, [r4, #4]
 801aa28:	60a6      	str	r6, [r4, #8]
 801aa2a:	2e00      	cmp	r6, #0
 801aa2c:	db05      	blt.n	801aa3a <_printf_i+0x10e>
 801aa2e:	6821      	ldr	r1, [r4, #0]
 801aa30:	432e      	orrs	r6, r5
 801aa32:	f021 0104 	bic.w	r1, r1, #4
 801aa36:	6021      	str	r1, [r4, #0]
 801aa38:	d04b      	beq.n	801aad2 <_printf_i+0x1a6>
 801aa3a:	4616      	mov	r6, r2
 801aa3c:	fbb5 f1f3 	udiv	r1, r5, r3
 801aa40:	fb03 5711 	mls	r7, r3, r1, r5
 801aa44:	5dc7      	ldrb	r7, [r0, r7]
 801aa46:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801aa4a:	462f      	mov	r7, r5
 801aa4c:	42bb      	cmp	r3, r7
 801aa4e:	460d      	mov	r5, r1
 801aa50:	d9f4      	bls.n	801aa3c <_printf_i+0x110>
 801aa52:	2b08      	cmp	r3, #8
 801aa54:	d10b      	bne.n	801aa6e <_printf_i+0x142>
 801aa56:	6823      	ldr	r3, [r4, #0]
 801aa58:	07df      	lsls	r7, r3, #31
 801aa5a:	d508      	bpl.n	801aa6e <_printf_i+0x142>
 801aa5c:	6923      	ldr	r3, [r4, #16]
 801aa5e:	6861      	ldr	r1, [r4, #4]
 801aa60:	4299      	cmp	r1, r3
 801aa62:	bfde      	ittt	le
 801aa64:	2330      	movle	r3, #48	@ 0x30
 801aa66:	f806 3c01 	strble.w	r3, [r6, #-1]
 801aa6a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801aa6e:	1b92      	subs	r2, r2, r6
 801aa70:	6122      	str	r2, [r4, #16]
 801aa72:	f8cd a000 	str.w	sl, [sp]
 801aa76:	464b      	mov	r3, r9
 801aa78:	aa03      	add	r2, sp, #12
 801aa7a:	4621      	mov	r1, r4
 801aa7c:	4640      	mov	r0, r8
 801aa7e:	f7ff fee7 	bl	801a850 <_printf_common>
 801aa82:	3001      	adds	r0, #1
 801aa84:	d14a      	bne.n	801ab1c <_printf_i+0x1f0>
 801aa86:	f04f 30ff 	mov.w	r0, #4294967295
 801aa8a:	b004      	add	sp, #16
 801aa8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aa90:	6823      	ldr	r3, [r4, #0]
 801aa92:	f043 0320 	orr.w	r3, r3, #32
 801aa96:	6023      	str	r3, [r4, #0]
 801aa98:	4832      	ldr	r0, [pc, #200]	@ (801ab64 <_printf_i+0x238>)
 801aa9a:	2778      	movs	r7, #120	@ 0x78
 801aa9c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801aaa0:	6823      	ldr	r3, [r4, #0]
 801aaa2:	6831      	ldr	r1, [r6, #0]
 801aaa4:	061f      	lsls	r7, r3, #24
 801aaa6:	f851 5b04 	ldr.w	r5, [r1], #4
 801aaaa:	d402      	bmi.n	801aab2 <_printf_i+0x186>
 801aaac:	065f      	lsls	r7, r3, #25
 801aaae:	bf48      	it	mi
 801aab0:	b2ad      	uxthmi	r5, r5
 801aab2:	6031      	str	r1, [r6, #0]
 801aab4:	07d9      	lsls	r1, r3, #31
 801aab6:	bf44      	itt	mi
 801aab8:	f043 0320 	orrmi.w	r3, r3, #32
 801aabc:	6023      	strmi	r3, [r4, #0]
 801aabe:	b11d      	cbz	r5, 801aac8 <_printf_i+0x19c>
 801aac0:	2310      	movs	r3, #16
 801aac2:	e7ad      	b.n	801aa20 <_printf_i+0xf4>
 801aac4:	4826      	ldr	r0, [pc, #152]	@ (801ab60 <_printf_i+0x234>)
 801aac6:	e7e9      	b.n	801aa9c <_printf_i+0x170>
 801aac8:	6823      	ldr	r3, [r4, #0]
 801aaca:	f023 0320 	bic.w	r3, r3, #32
 801aace:	6023      	str	r3, [r4, #0]
 801aad0:	e7f6      	b.n	801aac0 <_printf_i+0x194>
 801aad2:	4616      	mov	r6, r2
 801aad4:	e7bd      	b.n	801aa52 <_printf_i+0x126>
 801aad6:	6833      	ldr	r3, [r6, #0]
 801aad8:	6825      	ldr	r5, [r4, #0]
 801aada:	6961      	ldr	r1, [r4, #20]
 801aadc:	1d18      	adds	r0, r3, #4
 801aade:	6030      	str	r0, [r6, #0]
 801aae0:	062e      	lsls	r6, r5, #24
 801aae2:	681b      	ldr	r3, [r3, #0]
 801aae4:	d501      	bpl.n	801aaea <_printf_i+0x1be>
 801aae6:	6019      	str	r1, [r3, #0]
 801aae8:	e002      	b.n	801aaf0 <_printf_i+0x1c4>
 801aaea:	0668      	lsls	r0, r5, #25
 801aaec:	d5fb      	bpl.n	801aae6 <_printf_i+0x1ba>
 801aaee:	8019      	strh	r1, [r3, #0]
 801aaf0:	2300      	movs	r3, #0
 801aaf2:	6123      	str	r3, [r4, #16]
 801aaf4:	4616      	mov	r6, r2
 801aaf6:	e7bc      	b.n	801aa72 <_printf_i+0x146>
 801aaf8:	6833      	ldr	r3, [r6, #0]
 801aafa:	1d1a      	adds	r2, r3, #4
 801aafc:	6032      	str	r2, [r6, #0]
 801aafe:	681e      	ldr	r6, [r3, #0]
 801ab00:	6862      	ldr	r2, [r4, #4]
 801ab02:	2100      	movs	r1, #0
 801ab04:	4630      	mov	r0, r6
 801ab06:	f7e5 fb73 	bl	80001f0 <memchr>
 801ab0a:	b108      	cbz	r0, 801ab10 <_printf_i+0x1e4>
 801ab0c:	1b80      	subs	r0, r0, r6
 801ab0e:	6060      	str	r0, [r4, #4]
 801ab10:	6863      	ldr	r3, [r4, #4]
 801ab12:	6123      	str	r3, [r4, #16]
 801ab14:	2300      	movs	r3, #0
 801ab16:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801ab1a:	e7aa      	b.n	801aa72 <_printf_i+0x146>
 801ab1c:	6923      	ldr	r3, [r4, #16]
 801ab1e:	4632      	mov	r2, r6
 801ab20:	4649      	mov	r1, r9
 801ab22:	4640      	mov	r0, r8
 801ab24:	47d0      	blx	sl
 801ab26:	3001      	adds	r0, #1
 801ab28:	d0ad      	beq.n	801aa86 <_printf_i+0x15a>
 801ab2a:	6823      	ldr	r3, [r4, #0]
 801ab2c:	079b      	lsls	r3, r3, #30
 801ab2e:	d413      	bmi.n	801ab58 <_printf_i+0x22c>
 801ab30:	68e0      	ldr	r0, [r4, #12]
 801ab32:	9b03      	ldr	r3, [sp, #12]
 801ab34:	4298      	cmp	r0, r3
 801ab36:	bfb8      	it	lt
 801ab38:	4618      	movlt	r0, r3
 801ab3a:	e7a6      	b.n	801aa8a <_printf_i+0x15e>
 801ab3c:	2301      	movs	r3, #1
 801ab3e:	4632      	mov	r2, r6
 801ab40:	4649      	mov	r1, r9
 801ab42:	4640      	mov	r0, r8
 801ab44:	47d0      	blx	sl
 801ab46:	3001      	adds	r0, #1
 801ab48:	d09d      	beq.n	801aa86 <_printf_i+0x15a>
 801ab4a:	3501      	adds	r5, #1
 801ab4c:	68e3      	ldr	r3, [r4, #12]
 801ab4e:	9903      	ldr	r1, [sp, #12]
 801ab50:	1a5b      	subs	r3, r3, r1
 801ab52:	42ab      	cmp	r3, r5
 801ab54:	dcf2      	bgt.n	801ab3c <_printf_i+0x210>
 801ab56:	e7eb      	b.n	801ab30 <_printf_i+0x204>
 801ab58:	2500      	movs	r5, #0
 801ab5a:	f104 0619 	add.w	r6, r4, #25
 801ab5e:	e7f5      	b.n	801ab4c <_printf_i+0x220>
 801ab60:	080214d5 	.word	0x080214d5
 801ab64:	080214e6 	.word	0x080214e6

0801ab68 <_scanf_float>:
 801ab68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab6c:	b087      	sub	sp, #28
 801ab6e:	4691      	mov	r9, r2
 801ab70:	9303      	str	r3, [sp, #12]
 801ab72:	688b      	ldr	r3, [r1, #8]
 801ab74:	1e5a      	subs	r2, r3, #1
 801ab76:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801ab7a:	bf81      	itttt	hi
 801ab7c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801ab80:	eb03 0b05 	addhi.w	fp, r3, r5
 801ab84:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801ab88:	608b      	strhi	r3, [r1, #8]
 801ab8a:	680b      	ldr	r3, [r1, #0]
 801ab8c:	460a      	mov	r2, r1
 801ab8e:	f04f 0500 	mov.w	r5, #0
 801ab92:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801ab96:	f842 3b1c 	str.w	r3, [r2], #28
 801ab9a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801ab9e:	4680      	mov	r8, r0
 801aba0:	460c      	mov	r4, r1
 801aba2:	bf98      	it	ls
 801aba4:	f04f 0b00 	movls.w	fp, #0
 801aba8:	9201      	str	r2, [sp, #4]
 801abaa:	4616      	mov	r6, r2
 801abac:	46aa      	mov	sl, r5
 801abae:	462f      	mov	r7, r5
 801abb0:	9502      	str	r5, [sp, #8]
 801abb2:	68a2      	ldr	r2, [r4, #8]
 801abb4:	b15a      	cbz	r2, 801abce <_scanf_float+0x66>
 801abb6:	f8d9 3000 	ldr.w	r3, [r9]
 801abba:	781b      	ldrb	r3, [r3, #0]
 801abbc:	2b4e      	cmp	r3, #78	@ 0x4e
 801abbe:	d863      	bhi.n	801ac88 <_scanf_float+0x120>
 801abc0:	2b40      	cmp	r3, #64	@ 0x40
 801abc2:	d83b      	bhi.n	801ac3c <_scanf_float+0xd4>
 801abc4:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801abc8:	b2c8      	uxtb	r0, r1
 801abca:	280e      	cmp	r0, #14
 801abcc:	d939      	bls.n	801ac42 <_scanf_float+0xda>
 801abce:	b11f      	cbz	r7, 801abd8 <_scanf_float+0x70>
 801abd0:	6823      	ldr	r3, [r4, #0]
 801abd2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801abd6:	6023      	str	r3, [r4, #0]
 801abd8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801abdc:	f1ba 0f01 	cmp.w	sl, #1
 801abe0:	f200 8114 	bhi.w	801ae0c <_scanf_float+0x2a4>
 801abe4:	9b01      	ldr	r3, [sp, #4]
 801abe6:	429e      	cmp	r6, r3
 801abe8:	f200 8105 	bhi.w	801adf6 <_scanf_float+0x28e>
 801abec:	2001      	movs	r0, #1
 801abee:	b007      	add	sp, #28
 801abf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801abf4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801abf8:	2a0d      	cmp	r2, #13
 801abfa:	d8e8      	bhi.n	801abce <_scanf_float+0x66>
 801abfc:	a101      	add	r1, pc, #4	@ (adr r1, 801ac04 <_scanf_float+0x9c>)
 801abfe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ac02:	bf00      	nop
 801ac04:	0801ad4d 	.word	0x0801ad4d
 801ac08:	0801abcf 	.word	0x0801abcf
 801ac0c:	0801abcf 	.word	0x0801abcf
 801ac10:	0801abcf 	.word	0x0801abcf
 801ac14:	0801ada9 	.word	0x0801ada9
 801ac18:	0801ad83 	.word	0x0801ad83
 801ac1c:	0801abcf 	.word	0x0801abcf
 801ac20:	0801abcf 	.word	0x0801abcf
 801ac24:	0801ad5b 	.word	0x0801ad5b
 801ac28:	0801abcf 	.word	0x0801abcf
 801ac2c:	0801abcf 	.word	0x0801abcf
 801ac30:	0801abcf 	.word	0x0801abcf
 801ac34:	0801abcf 	.word	0x0801abcf
 801ac38:	0801ad17 	.word	0x0801ad17
 801ac3c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801ac40:	e7da      	b.n	801abf8 <_scanf_float+0x90>
 801ac42:	290e      	cmp	r1, #14
 801ac44:	d8c3      	bhi.n	801abce <_scanf_float+0x66>
 801ac46:	a001      	add	r0, pc, #4	@ (adr r0, 801ac4c <_scanf_float+0xe4>)
 801ac48:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ac4c:	0801ad07 	.word	0x0801ad07
 801ac50:	0801abcf 	.word	0x0801abcf
 801ac54:	0801ad07 	.word	0x0801ad07
 801ac58:	0801ad97 	.word	0x0801ad97
 801ac5c:	0801abcf 	.word	0x0801abcf
 801ac60:	0801aca9 	.word	0x0801aca9
 801ac64:	0801aced 	.word	0x0801aced
 801ac68:	0801aced 	.word	0x0801aced
 801ac6c:	0801aced 	.word	0x0801aced
 801ac70:	0801aced 	.word	0x0801aced
 801ac74:	0801aced 	.word	0x0801aced
 801ac78:	0801aced 	.word	0x0801aced
 801ac7c:	0801aced 	.word	0x0801aced
 801ac80:	0801aced 	.word	0x0801aced
 801ac84:	0801aced 	.word	0x0801aced
 801ac88:	2b6e      	cmp	r3, #110	@ 0x6e
 801ac8a:	d809      	bhi.n	801aca0 <_scanf_float+0x138>
 801ac8c:	2b60      	cmp	r3, #96	@ 0x60
 801ac8e:	d8b1      	bhi.n	801abf4 <_scanf_float+0x8c>
 801ac90:	2b54      	cmp	r3, #84	@ 0x54
 801ac92:	d07b      	beq.n	801ad8c <_scanf_float+0x224>
 801ac94:	2b59      	cmp	r3, #89	@ 0x59
 801ac96:	d19a      	bne.n	801abce <_scanf_float+0x66>
 801ac98:	2d07      	cmp	r5, #7
 801ac9a:	d198      	bne.n	801abce <_scanf_float+0x66>
 801ac9c:	2508      	movs	r5, #8
 801ac9e:	e02f      	b.n	801ad00 <_scanf_float+0x198>
 801aca0:	2b74      	cmp	r3, #116	@ 0x74
 801aca2:	d073      	beq.n	801ad8c <_scanf_float+0x224>
 801aca4:	2b79      	cmp	r3, #121	@ 0x79
 801aca6:	e7f6      	b.n	801ac96 <_scanf_float+0x12e>
 801aca8:	6821      	ldr	r1, [r4, #0]
 801acaa:	05c8      	lsls	r0, r1, #23
 801acac:	d51e      	bpl.n	801acec <_scanf_float+0x184>
 801acae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801acb2:	6021      	str	r1, [r4, #0]
 801acb4:	3701      	adds	r7, #1
 801acb6:	f1bb 0f00 	cmp.w	fp, #0
 801acba:	d003      	beq.n	801acc4 <_scanf_float+0x15c>
 801acbc:	3201      	adds	r2, #1
 801acbe:	f10b 3bff 	add.w	fp, fp, #4294967295
 801acc2:	60a2      	str	r2, [r4, #8]
 801acc4:	68a3      	ldr	r3, [r4, #8]
 801acc6:	3b01      	subs	r3, #1
 801acc8:	60a3      	str	r3, [r4, #8]
 801acca:	6923      	ldr	r3, [r4, #16]
 801accc:	3301      	adds	r3, #1
 801acce:	6123      	str	r3, [r4, #16]
 801acd0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801acd4:	3b01      	subs	r3, #1
 801acd6:	2b00      	cmp	r3, #0
 801acd8:	f8c9 3004 	str.w	r3, [r9, #4]
 801acdc:	f340 8082 	ble.w	801ade4 <_scanf_float+0x27c>
 801ace0:	f8d9 3000 	ldr.w	r3, [r9]
 801ace4:	3301      	adds	r3, #1
 801ace6:	f8c9 3000 	str.w	r3, [r9]
 801acea:	e762      	b.n	801abb2 <_scanf_float+0x4a>
 801acec:	eb1a 0105 	adds.w	r1, sl, r5
 801acf0:	f47f af6d 	bne.w	801abce <_scanf_float+0x66>
 801acf4:	6822      	ldr	r2, [r4, #0]
 801acf6:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801acfa:	6022      	str	r2, [r4, #0]
 801acfc:	460d      	mov	r5, r1
 801acfe:	468a      	mov	sl, r1
 801ad00:	f806 3b01 	strb.w	r3, [r6], #1
 801ad04:	e7de      	b.n	801acc4 <_scanf_float+0x15c>
 801ad06:	6822      	ldr	r2, [r4, #0]
 801ad08:	0610      	lsls	r0, r2, #24
 801ad0a:	f57f af60 	bpl.w	801abce <_scanf_float+0x66>
 801ad0e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801ad12:	6022      	str	r2, [r4, #0]
 801ad14:	e7f4      	b.n	801ad00 <_scanf_float+0x198>
 801ad16:	f1ba 0f00 	cmp.w	sl, #0
 801ad1a:	d10c      	bne.n	801ad36 <_scanf_float+0x1ce>
 801ad1c:	b977      	cbnz	r7, 801ad3c <_scanf_float+0x1d4>
 801ad1e:	6822      	ldr	r2, [r4, #0]
 801ad20:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801ad24:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801ad28:	d108      	bne.n	801ad3c <_scanf_float+0x1d4>
 801ad2a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801ad2e:	6022      	str	r2, [r4, #0]
 801ad30:	f04f 0a01 	mov.w	sl, #1
 801ad34:	e7e4      	b.n	801ad00 <_scanf_float+0x198>
 801ad36:	f1ba 0f02 	cmp.w	sl, #2
 801ad3a:	d050      	beq.n	801adde <_scanf_float+0x276>
 801ad3c:	2d01      	cmp	r5, #1
 801ad3e:	d002      	beq.n	801ad46 <_scanf_float+0x1de>
 801ad40:	2d04      	cmp	r5, #4
 801ad42:	f47f af44 	bne.w	801abce <_scanf_float+0x66>
 801ad46:	3501      	adds	r5, #1
 801ad48:	b2ed      	uxtb	r5, r5
 801ad4a:	e7d9      	b.n	801ad00 <_scanf_float+0x198>
 801ad4c:	f1ba 0f01 	cmp.w	sl, #1
 801ad50:	f47f af3d 	bne.w	801abce <_scanf_float+0x66>
 801ad54:	f04f 0a02 	mov.w	sl, #2
 801ad58:	e7d2      	b.n	801ad00 <_scanf_float+0x198>
 801ad5a:	b975      	cbnz	r5, 801ad7a <_scanf_float+0x212>
 801ad5c:	2f00      	cmp	r7, #0
 801ad5e:	f47f af37 	bne.w	801abd0 <_scanf_float+0x68>
 801ad62:	6822      	ldr	r2, [r4, #0]
 801ad64:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801ad68:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801ad6c:	f040 8103 	bne.w	801af76 <_scanf_float+0x40e>
 801ad70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801ad74:	6022      	str	r2, [r4, #0]
 801ad76:	2501      	movs	r5, #1
 801ad78:	e7c2      	b.n	801ad00 <_scanf_float+0x198>
 801ad7a:	2d03      	cmp	r5, #3
 801ad7c:	d0e3      	beq.n	801ad46 <_scanf_float+0x1de>
 801ad7e:	2d05      	cmp	r5, #5
 801ad80:	e7df      	b.n	801ad42 <_scanf_float+0x1da>
 801ad82:	2d02      	cmp	r5, #2
 801ad84:	f47f af23 	bne.w	801abce <_scanf_float+0x66>
 801ad88:	2503      	movs	r5, #3
 801ad8a:	e7b9      	b.n	801ad00 <_scanf_float+0x198>
 801ad8c:	2d06      	cmp	r5, #6
 801ad8e:	f47f af1e 	bne.w	801abce <_scanf_float+0x66>
 801ad92:	2507      	movs	r5, #7
 801ad94:	e7b4      	b.n	801ad00 <_scanf_float+0x198>
 801ad96:	6822      	ldr	r2, [r4, #0]
 801ad98:	0591      	lsls	r1, r2, #22
 801ad9a:	f57f af18 	bpl.w	801abce <_scanf_float+0x66>
 801ad9e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801ada2:	6022      	str	r2, [r4, #0]
 801ada4:	9702      	str	r7, [sp, #8]
 801ada6:	e7ab      	b.n	801ad00 <_scanf_float+0x198>
 801ada8:	6822      	ldr	r2, [r4, #0]
 801adaa:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801adae:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801adb2:	d005      	beq.n	801adc0 <_scanf_float+0x258>
 801adb4:	0550      	lsls	r0, r2, #21
 801adb6:	f57f af0a 	bpl.w	801abce <_scanf_float+0x66>
 801adba:	2f00      	cmp	r7, #0
 801adbc:	f000 80db 	beq.w	801af76 <_scanf_float+0x40e>
 801adc0:	0591      	lsls	r1, r2, #22
 801adc2:	bf58      	it	pl
 801adc4:	9902      	ldrpl	r1, [sp, #8]
 801adc6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801adca:	bf58      	it	pl
 801adcc:	1a79      	subpl	r1, r7, r1
 801adce:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801add2:	bf58      	it	pl
 801add4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801add8:	6022      	str	r2, [r4, #0]
 801adda:	2700      	movs	r7, #0
 801addc:	e790      	b.n	801ad00 <_scanf_float+0x198>
 801adde:	f04f 0a03 	mov.w	sl, #3
 801ade2:	e78d      	b.n	801ad00 <_scanf_float+0x198>
 801ade4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801ade8:	4649      	mov	r1, r9
 801adea:	4640      	mov	r0, r8
 801adec:	4798      	blx	r3
 801adee:	2800      	cmp	r0, #0
 801adf0:	f43f aedf 	beq.w	801abb2 <_scanf_float+0x4a>
 801adf4:	e6eb      	b.n	801abce <_scanf_float+0x66>
 801adf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801adfa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801adfe:	464a      	mov	r2, r9
 801ae00:	4640      	mov	r0, r8
 801ae02:	4798      	blx	r3
 801ae04:	6923      	ldr	r3, [r4, #16]
 801ae06:	3b01      	subs	r3, #1
 801ae08:	6123      	str	r3, [r4, #16]
 801ae0a:	e6eb      	b.n	801abe4 <_scanf_float+0x7c>
 801ae0c:	1e6b      	subs	r3, r5, #1
 801ae0e:	2b06      	cmp	r3, #6
 801ae10:	d824      	bhi.n	801ae5c <_scanf_float+0x2f4>
 801ae12:	2d02      	cmp	r5, #2
 801ae14:	d836      	bhi.n	801ae84 <_scanf_float+0x31c>
 801ae16:	9b01      	ldr	r3, [sp, #4]
 801ae18:	429e      	cmp	r6, r3
 801ae1a:	f67f aee7 	bls.w	801abec <_scanf_float+0x84>
 801ae1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ae22:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ae26:	464a      	mov	r2, r9
 801ae28:	4640      	mov	r0, r8
 801ae2a:	4798      	blx	r3
 801ae2c:	6923      	ldr	r3, [r4, #16]
 801ae2e:	3b01      	subs	r3, #1
 801ae30:	6123      	str	r3, [r4, #16]
 801ae32:	e7f0      	b.n	801ae16 <_scanf_float+0x2ae>
 801ae34:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ae38:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801ae3c:	464a      	mov	r2, r9
 801ae3e:	4640      	mov	r0, r8
 801ae40:	4798      	blx	r3
 801ae42:	6923      	ldr	r3, [r4, #16]
 801ae44:	3b01      	subs	r3, #1
 801ae46:	6123      	str	r3, [r4, #16]
 801ae48:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ae4c:	fa5f fa8a 	uxtb.w	sl, sl
 801ae50:	f1ba 0f02 	cmp.w	sl, #2
 801ae54:	d1ee      	bne.n	801ae34 <_scanf_float+0x2cc>
 801ae56:	3d03      	subs	r5, #3
 801ae58:	b2ed      	uxtb	r5, r5
 801ae5a:	1b76      	subs	r6, r6, r5
 801ae5c:	6823      	ldr	r3, [r4, #0]
 801ae5e:	05da      	lsls	r2, r3, #23
 801ae60:	d530      	bpl.n	801aec4 <_scanf_float+0x35c>
 801ae62:	055b      	lsls	r3, r3, #21
 801ae64:	d511      	bpl.n	801ae8a <_scanf_float+0x322>
 801ae66:	9b01      	ldr	r3, [sp, #4]
 801ae68:	429e      	cmp	r6, r3
 801ae6a:	f67f aebf 	bls.w	801abec <_scanf_float+0x84>
 801ae6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801ae72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801ae76:	464a      	mov	r2, r9
 801ae78:	4640      	mov	r0, r8
 801ae7a:	4798      	blx	r3
 801ae7c:	6923      	ldr	r3, [r4, #16]
 801ae7e:	3b01      	subs	r3, #1
 801ae80:	6123      	str	r3, [r4, #16]
 801ae82:	e7f0      	b.n	801ae66 <_scanf_float+0x2fe>
 801ae84:	46aa      	mov	sl, r5
 801ae86:	46b3      	mov	fp, r6
 801ae88:	e7de      	b.n	801ae48 <_scanf_float+0x2e0>
 801ae8a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801ae8e:	6923      	ldr	r3, [r4, #16]
 801ae90:	2965      	cmp	r1, #101	@ 0x65
 801ae92:	f103 33ff 	add.w	r3, r3, #4294967295
 801ae96:	f106 35ff 	add.w	r5, r6, #4294967295
 801ae9a:	6123      	str	r3, [r4, #16]
 801ae9c:	d00c      	beq.n	801aeb8 <_scanf_float+0x350>
 801ae9e:	2945      	cmp	r1, #69	@ 0x45
 801aea0:	d00a      	beq.n	801aeb8 <_scanf_float+0x350>
 801aea2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801aea6:	464a      	mov	r2, r9
 801aea8:	4640      	mov	r0, r8
 801aeaa:	4798      	blx	r3
 801aeac:	6923      	ldr	r3, [r4, #16]
 801aeae:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801aeb2:	3b01      	subs	r3, #1
 801aeb4:	1eb5      	subs	r5, r6, #2
 801aeb6:	6123      	str	r3, [r4, #16]
 801aeb8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801aebc:	464a      	mov	r2, r9
 801aebe:	4640      	mov	r0, r8
 801aec0:	4798      	blx	r3
 801aec2:	462e      	mov	r6, r5
 801aec4:	6822      	ldr	r2, [r4, #0]
 801aec6:	f012 0210 	ands.w	r2, r2, #16
 801aeca:	d001      	beq.n	801aed0 <_scanf_float+0x368>
 801aecc:	2000      	movs	r0, #0
 801aece:	e68e      	b.n	801abee <_scanf_float+0x86>
 801aed0:	7032      	strb	r2, [r6, #0]
 801aed2:	6823      	ldr	r3, [r4, #0]
 801aed4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801aed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801aedc:	d125      	bne.n	801af2a <_scanf_float+0x3c2>
 801aede:	9b02      	ldr	r3, [sp, #8]
 801aee0:	429f      	cmp	r7, r3
 801aee2:	d00a      	beq.n	801aefa <_scanf_float+0x392>
 801aee4:	1bda      	subs	r2, r3, r7
 801aee6:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801aeea:	429e      	cmp	r6, r3
 801aeec:	bf28      	it	cs
 801aeee:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801aef2:	4922      	ldr	r1, [pc, #136]	@ (801af7c <_scanf_float+0x414>)
 801aef4:	4630      	mov	r0, r6
 801aef6:	f000 f97f 	bl	801b1f8 <siprintf>
 801aefa:	9901      	ldr	r1, [sp, #4]
 801aefc:	2200      	movs	r2, #0
 801aefe:	4640      	mov	r0, r8
 801af00:	f002 fe4a 	bl	801db98 <_strtod_r>
 801af04:	9b03      	ldr	r3, [sp, #12]
 801af06:	6821      	ldr	r1, [r4, #0]
 801af08:	681b      	ldr	r3, [r3, #0]
 801af0a:	f011 0f02 	tst.w	r1, #2
 801af0e:	ec57 6b10 	vmov	r6, r7, d0
 801af12:	f103 0204 	add.w	r2, r3, #4
 801af16:	d015      	beq.n	801af44 <_scanf_float+0x3dc>
 801af18:	9903      	ldr	r1, [sp, #12]
 801af1a:	600a      	str	r2, [r1, #0]
 801af1c:	681b      	ldr	r3, [r3, #0]
 801af1e:	e9c3 6700 	strd	r6, r7, [r3]
 801af22:	68e3      	ldr	r3, [r4, #12]
 801af24:	3301      	adds	r3, #1
 801af26:	60e3      	str	r3, [r4, #12]
 801af28:	e7d0      	b.n	801aecc <_scanf_float+0x364>
 801af2a:	9b04      	ldr	r3, [sp, #16]
 801af2c:	2b00      	cmp	r3, #0
 801af2e:	d0e4      	beq.n	801aefa <_scanf_float+0x392>
 801af30:	9905      	ldr	r1, [sp, #20]
 801af32:	230a      	movs	r3, #10
 801af34:	3101      	adds	r1, #1
 801af36:	4640      	mov	r0, r8
 801af38:	f002 feae 	bl	801dc98 <_strtol_r>
 801af3c:	9b04      	ldr	r3, [sp, #16]
 801af3e:	9e05      	ldr	r6, [sp, #20]
 801af40:	1ac2      	subs	r2, r0, r3
 801af42:	e7d0      	b.n	801aee6 <_scanf_float+0x37e>
 801af44:	f011 0f04 	tst.w	r1, #4
 801af48:	9903      	ldr	r1, [sp, #12]
 801af4a:	600a      	str	r2, [r1, #0]
 801af4c:	d1e6      	bne.n	801af1c <_scanf_float+0x3b4>
 801af4e:	681d      	ldr	r5, [r3, #0]
 801af50:	4632      	mov	r2, r6
 801af52:	463b      	mov	r3, r7
 801af54:	4630      	mov	r0, r6
 801af56:	4639      	mov	r1, r7
 801af58:	f7e5 fdf8 	bl	8000b4c <__aeabi_dcmpun>
 801af5c:	b128      	cbz	r0, 801af6a <_scanf_float+0x402>
 801af5e:	4808      	ldr	r0, [pc, #32]	@ (801af80 <_scanf_float+0x418>)
 801af60:	f7fd fe06 	bl	8018b70 <nanf>
 801af64:	ed85 0a00 	vstr	s0, [r5]
 801af68:	e7db      	b.n	801af22 <_scanf_float+0x3ba>
 801af6a:	4630      	mov	r0, r6
 801af6c:	4639      	mov	r1, r7
 801af6e:	f7e5 fe4b 	bl	8000c08 <__aeabi_d2f>
 801af72:	6028      	str	r0, [r5, #0]
 801af74:	e7d5      	b.n	801af22 <_scanf_float+0x3ba>
 801af76:	2700      	movs	r7, #0
 801af78:	e62e      	b.n	801abd8 <_scanf_float+0x70>
 801af7a:	bf00      	nop
 801af7c:	080214f7 	.word	0x080214f7
 801af80:	08021537 	.word	0x08021537

0801af84 <std>:
 801af84:	2300      	movs	r3, #0
 801af86:	b510      	push	{r4, lr}
 801af88:	4604      	mov	r4, r0
 801af8a:	e9c0 3300 	strd	r3, r3, [r0]
 801af8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801af92:	6083      	str	r3, [r0, #8]
 801af94:	8181      	strh	r1, [r0, #12]
 801af96:	6643      	str	r3, [r0, #100]	@ 0x64
 801af98:	81c2      	strh	r2, [r0, #14]
 801af9a:	6183      	str	r3, [r0, #24]
 801af9c:	4619      	mov	r1, r3
 801af9e:	2208      	movs	r2, #8
 801afa0:	305c      	adds	r0, #92	@ 0x5c
 801afa2:	f000 faa7 	bl	801b4f4 <memset>
 801afa6:	4b0d      	ldr	r3, [pc, #52]	@ (801afdc <std+0x58>)
 801afa8:	6263      	str	r3, [r4, #36]	@ 0x24
 801afaa:	4b0d      	ldr	r3, [pc, #52]	@ (801afe0 <std+0x5c>)
 801afac:	62a3      	str	r3, [r4, #40]	@ 0x28
 801afae:	4b0d      	ldr	r3, [pc, #52]	@ (801afe4 <std+0x60>)
 801afb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801afb2:	4b0d      	ldr	r3, [pc, #52]	@ (801afe8 <std+0x64>)
 801afb4:	6323      	str	r3, [r4, #48]	@ 0x30
 801afb6:	4b0d      	ldr	r3, [pc, #52]	@ (801afec <std+0x68>)
 801afb8:	6224      	str	r4, [r4, #32]
 801afba:	429c      	cmp	r4, r3
 801afbc:	d006      	beq.n	801afcc <std+0x48>
 801afbe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801afc2:	4294      	cmp	r4, r2
 801afc4:	d002      	beq.n	801afcc <std+0x48>
 801afc6:	33d0      	adds	r3, #208	@ 0xd0
 801afc8:	429c      	cmp	r4, r3
 801afca:	d105      	bne.n	801afd8 <std+0x54>
 801afcc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801afd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801afd4:	f000 bb7a 	b.w	801b6cc <__retarget_lock_init_recursive>
 801afd8:	bd10      	pop	{r4, pc}
 801afda:	bf00      	nop
 801afdc:	0801b295 	.word	0x0801b295
 801afe0:	0801b2bb 	.word	0x0801b2bb
 801afe4:	0801b2f3 	.word	0x0801b2f3
 801afe8:	0801b317 	.word	0x0801b317
 801afec:	2000c218 	.word	0x2000c218

0801aff0 <stdio_exit_handler>:
 801aff0:	4a02      	ldr	r2, [pc, #8]	@ (801affc <stdio_exit_handler+0xc>)
 801aff2:	4903      	ldr	r1, [pc, #12]	@ (801b000 <stdio_exit_handler+0x10>)
 801aff4:	4803      	ldr	r0, [pc, #12]	@ (801b004 <stdio_exit_handler+0x14>)
 801aff6:	f000 b869 	b.w	801b0cc <_fwalk_sglue>
 801affa:	bf00      	nop
 801affc:	20000154 	.word	0x20000154
 801b000:	0801e691 	.word	0x0801e691
 801b004:	20000164 	.word	0x20000164

0801b008 <cleanup_stdio>:
 801b008:	6841      	ldr	r1, [r0, #4]
 801b00a:	4b0c      	ldr	r3, [pc, #48]	@ (801b03c <cleanup_stdio+0x34>)
 801b00c:	4299      	cmp	r1, r3
 801b00e:	b510      	push	{r4, lr}
 801b010:	4604      	mov	r4, r0
 801b012:	d001      	beq.n	801b018 <cleanup_stdio+0x10>
 801b014:	f003 fb3c 	bl	801e690 <_fflush_r>
 801b018:	68a1      	ldr	r1, [r4, #8]
 801b01a:	4b09      	ldr	r3, [pc, #36]	@ (801b040 <cleanup_stdio+0x38>)
 801b01c:	4299      	cmp	r1, r3
 801b01e:	d002      	beq.n	801b026 <cleanup_stdio+0x1e>
 801b020:	4620      	mov	r0, r4
 801b022:	f003 fb35 	bl	801e690 <_fflush_r>
 801b026:	68e1      	ldr	r1, [r4, #12]
 801b028:	4b06      	ldr	r3, [pc, #24]	@ (801b044 <cleanup_stdio+0x3c>)
 801b02a:	4299      	cmp	r1, r3
 801b02c:	d004      	beq.n	801b038 <cleanup_stdio+0x30>
 801b02e:	4620      	mov	r0, r4
 801b030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b034:	f003 bb2c 	b.w	801e690 <_fflush_r>
 801b038:	bd10      	pop	{r4, pc}
 801b03a:	bf00      	nop
 801b03c:	2000c218 	.word	0x2000c218
 801b040:	2000c280 	.word	0x2000c280
 801b044:	2000c2e8 	.word	0x2000c2e8

0801b048 <global_stdio_init.part.0>:
 801b048:	b510      	push	{r4, lr}
 801b04a:	4b0b      	ldr	r3, [pc, #44]	@ (801b078 <global_stdio_init.part.0+0x30>)
 801b04c:	4c0b      	ldr	r4, [pc, #44]	@ (801b07c <global_stdio_init.part.0+0x34>)
 801b04e:	4a0c      	ldr	r2, [pc, #48]	@ (801b080 <global_stdio_init.part.0+0x38>)
 801b050:	601a      	str	r2, [r3, #0]
 801b052:	4620      	mov	r0, r4
 801b054:	2200      	movs	r2, #0
 801b056:	2104      	movs	r1, #4
 801b058:	f7ff ff94 	bl	801af84 <std>
 801b05c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801b060:	2201      	movs	r2, #1
 801b062:	2109      	movs	r1, #9
 801b064:	f7ff ff8e 	bl	801af84 <std>
 801b068:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801b06c:	2202      	movs	r2, #2
 801b06e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b072:	2112      	movs	r1, #18
 801b074:	f7ff bf86 	b.w	801af84 <std>
 801b078:	2000c350 	.word	0x2000c350
 801b07c:	2000c218 	.word	0x2000c218
 801b080:	0801aff1 	.word	0x0801aff1

0801b084 <__sfp_lock_acquire>:
 801b084:	4801      	ldr	r0, [pc, #4]	@ (801b08c <__sfp_lock_acquire+0x8>)
 801b086:	f000 bb22 	b.w	801b6ce <__retarget_lock_acquire_recursive>
 801b08a:	bf00      	nop
 801b08c:	2000c359 	.word	0x2000c359

0801b090 <__sfp_lock_release>:
 801b090:	4801      	ldr	r0, [pc, #4]	@ (801b098 <__sfp_lock_release+0x8>)
 801b092:	f000 bb1d 	b.w	801b6d0 <__retarget_lock_release_recursive>
 801b096:	bf00      	nop
 801b098:	2000c359 	.word	0x2000c359

0801b09c <__sinit>:
 801b09c:	b510      	push	{r4, lr}
 801b09e:	4604      	mov	r4, r0
 801b0a0:	f7ff fff0 	bl	801b084 <__sfp_lock_acquire>
 801b0a4:	6a23      	ldr	r3, [r4, #32]
 801b0a6:	b11b      	cbz	r3, 801b0b0 <__sinit+0x14>
 801b0a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b0ac:	f7ff bff0 	b.w	801b090 <__sfp_lock_release>
 801b0b0:	4b04      	ldr	r3, [pc, #16]	@ (801b0c4 <__sinit+0x28>)
 801b0b2:	6223      	str	r3, [r4, #32]
 801b0b4:	4b04      	ldr	r3, [pc, #16]	@ (801b0c8 <__sinit+0x2c>)
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	d1f5      	bne.n	801b0a8 <__sinit+0xc>
 801b0bc:	f7ff ffc4 	bl	801b048 <global_stdio_init.part.0>
 801b0c0:	e7f2      	b.n	801b0a8 <__sinit+0xc>
 801b0c2:	bf00      	nop
 801b0c4:	0801b009 	.word	0x0801b009
 801b0c8:	2000c350 	.word	0x2000c350

0801b0cc <_fwalk_sglue>:
 801b0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b0d0:	4607      	mov	r7, r0
 801b0d2:	4688      	mov	r8, r1
 801b0d4:	4614      	mov	r4, r2
 801b0d6:	2600      	movs	r6, #0
 801b0d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b0dc:	f1b9 0901 	subs.w	r9, r9, #1
 801b0e0:	d505      	bpl.n	801b0ee <_fwalk_sglue+0x22>
 801b0e2:	6824      	ldr	r4, [r4, #0]
 801b0e4:	2c00      	cmp	r4, #0
 801b0e6:	d1f7      	bne.n	801b0d8 <_fwalk_sglue+0xc>
 801b0e8:	4630      	mov	r0, r6
 801b0ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b0ee:	89ab      	ldrh	r3, [r5, #12]
 801b0f0:	2b01      	cmp	r3, #1
 801b0f2:	d907      	bls.n	801b104 <_fwalk_sglue+0x38>
 801b0f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b0f8:	3301      	adds	r3, #1
 801b0fa:	d003      	beq.n	801b104 <_fwalk_sglue+0x38>
 801b0fc:	4629      	mov	r1, r5
 801b0fe:	4638      	mov	r0, r7
 801b100:	47c0      	blx	r8
 801b102:	4306      	orrs	r6, r0
 801b104:	3568      	adds	r5, #104	@ 0x68
 801b106:	e7e9      	b.n	801b0dc <_fwalk_sglue+0x10>

0801b108 <iprintf>:
 801b108:	b40f      	push	{r0, r1, r2, r3}
 801b10a:	b507      	push	{r0, r1, r2, lr}
 801b10c:	4906      	ldr	r1, [pc, #24]	@ (801b128 <iprintf+0x20>)
 801b10e:	ab04      	add	r3, sp, #16
 801b110:	6808      	ldr	r0, [r1, #0]
 801b112:	f853 2b04 	ldr.w	r2, [r3], #4
 801b116:	6881      	ldr	r1, [r0, #8]
 801b118:	9301      	str	r3, [sp, #4]
 801b11a:	f7ff fa77 	bl	801a60c <_vfiprintf_r>
 801b11e:	b003      	add	sp, #12
 801b120:	f85d eb04 	ldr.w	lr, [sp], #4
 801b124:	b004      	add	sp, #16
 801b126:	4770      	bx	lr
 801b128:	20000160 	.word	0x20000160

0801b12c <putchar>:
 801b12c:	4b02      	ldr	r3, [pc, #8]	@ (801b138 <putchar+0xc>)
 801b12e:	4601      	mov	r1, r0
 801b130:	6818      	ldr	r0, [r3, #0]
 801b132:	6882      	ldr	r2, [r0, #8]
 801b134:	f003 bb48 	b.w	801e7c8 <_putc_r>
 801b138:	20000160 	.word	0x20000160

0801b13c <_puts_r>:
 801b13c:	6a03      	ldr	r3, [r0, #32]
 801b13e:	b570      	push	{r4, r5, r6, lr}
 801b140:	6884      	ldr	r4, [r0, #8]
 801b142:	4605      	mov	r5, r0
 801b144:	460e      	mov	r6, r1
 801b146:	b90b      	cbnz	r3, 801b14c <_puts_r+0x10>
 801b148:	f7ff ffa8 	bl	801b09c <__sinit>
 801b14c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b14e:	07db      	lsls	r3, r3, #31
 801b150:	d405      	bmi.n	801b15e <_puts_r+0x22>
 801b152:	89a3      	ldrh	r3, [r4, #12]
 801b154:	0598      	lsls	r0, r3, #22
 801b156:	d402      	bmi.n	801b15e <_puts_r+0x22>
 801b158:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b15a:	f000 fab8 	bl	801b6ce <__retarget_lock_acquire_recursive>
 801b15e:	89a3      	ldrh	r3, [r4, #12]
 801b160:	0719      	lsls	r1, r3, #28
 801b162:	d502      	bpl.n	801b16a <_puts_r+0x2e>
 801b164:	6923      	ldr	r3, [r4, #16]
 801b166:	2b00      	cmp	r3, #0
 801b168:	d135      	bne.n	801b1d6 <_puts_r+0x9a>
 801b16a:	4621      	mov	r1, r4
 801b16c:	4628      	mov	r0, r5
 801b16e:	f000 f951 	bl	801b414 <__swsetup_r>
 801b172:	b380      	cbz	r0, 801b1d6 <_puts_r+0x9a>
 801b174:	f04f 35ff 	mov.w	r5, #4294967295
 801b178:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801b17a:	07da      	lsls	r2, r3, #31
 801b17c:	d405      	bmi.n	801b18a <_puts_r+0x4e>
 801b17e:	89a3      	ldrh	r3, [r4, #12]
 801b180:	059b      	lsls	r3, r3, #22
 801b182:	d402      	bmi.n	801b18a <_puts_r+0x4e>
 801b184:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801b186:	f000 faa3 	bl	801b6d0 <__retarget_lock_release_recursive>
 801b18a:	4628      	mov	r0, r5
 801b18c:	bd70      	pop	{r4, r5, r6, pc}
 801b18e:	2b00      	cmp	r3, #0
 801b190:	da04      	bge.n	801b19c <_puts_r+0x60>
 801b192:	69a2      	ldr	r2, [r4, #24]
 801b194:	429a      	cmp	r2, r3
 801b196:	dc17      	bgt.n	801b1c8 <_puts_r+0x8c>
 801b198:	290a      	cmp	r1, #10
 801b19a:	d015      	beq.n	801b1c8 <_puts_r+0x8c>
 801b19c:	6823      	ldr	r3, [r4, #0]
 801b19e:	1c5a      	adds	r2, r3, #1
 801b1a0:	6022      	str	r2, [r4, #0]
 801b1a2:	7019      	strb	r1, [r3, #0]
 801b1a4:	68a3      	ldr	r3, [r4, #8]
 801b1a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b1aa:	3b01      	subs	r3, #1
 801b1ac:	60a3      	str	r3, [r4, #8]
 801b1ae:	2900      	cmp	r1, #0
 801b1b0:	d1ed      	bne.n	801b18e <_puts_r+0x52>
 801b1b2:	2b00      	cmp	r3, #0
 801b1b4:	da11      	bge.n	801b1da <_puts_r+0x9e>
 801b1b6:	4622      	mov	r2, r4
 801b1b8:	210a      	movs	r1, #10
 801b1ba:	4628      	mov	r0, r5
 801b1bc:	f000 f8ec 	bl	801b398 <__swbuf_r>
 801b1c0:	3001      	adds	r0, #1
 801b1c2:	d0d7      	beq.n	801b174 <_puts_r+0x38>
 801b1c4:	250a      	movs	r5, #10
 801b1c6:	e7d7      	b.n	801b178 <_puts_r+0x3c>
 801b1c8:	4622      	mov	r2, r4
 801b1ca:	4628      	mov	r0, r5
 801b1cc:	f000 f8e4 	bl	801b398 <__swbuf_r>
 801b1d0:	3001      	adds	r0, #1
 801b1d2:	d1e7      	bne.n	801b1a4 <_puts_r+0x68>
 801b1d4:	e7ce      	b.n	801b174 <_puts_r+0x38>
 801b1d6:	3e01      	subs	r6, #1
 801b1d8:	e7e4      	b.n	801b1a4 <_puts_r+0x68>
 801b1da:	6823      	ldr	r3, [r4, #0]
 801b1dc:	1c5a      	adds	r2, r3, #1
 801b1de:	6022      	str	r2, [r4, #0]
 801b1e0:	220a      	movs	r2, #10
 801b1e2:	701a      	strb	r2, [r3, #0]
 801b1e4:	e7ee      	b.n	801b1c4 <_puts_r+0x88>
	...

0801b1e8 <puts>:
 801b1e8:	4b02      	ldr	r3, [pc, #8]	@ (801b1f4 <puts+0xc>)
 801b1ea:	4601      	mov	r1, r0
 801b1ec:	6818      	ldr	r0, [r3, #0]
 801b1ee:	f7ff bfa5 	b.w	801b13c <_puts_r>
 801b1f2:	bf00      	nop
 801b1f4:	20000160 	.word	0x20000160

0801b1f8 <siprintf>:
 801b1f8:	b40e      	push	{r1, r2, r3}
 801b1fa:	b510      	push	{r4, lr}
 801b1fc:	b09d      	sub	sp, #116	@ 0x74
 801b1fe:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b200:	9002      	str	r0, [sp, #8]
 801b202:	9006      	str	r0, [sp, #24]
 801b204:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801b208:	480a      	ldr	r0, [pc, #40]	@ (801b234 <siprintf+0x3c>)
 801b20a:	9107      	str	r1, [sp, #28]
 801b20c:	9104      	str	r1, [sp, #16]
 801b20e:	490a      	ldr	r1, [pc, #40]	@ (801b238 <siprintf+0x40>)
 801b210:	f853 2b04 	ldr.w	r2, [r3], #4
 801b214:	9105      	str	r1, [sp, #20]
 801b216:	2400      	movs	r4, #0
 801b218:	a902      	add	r1, sp, #8
 801b21a:	6800      	ldr	r0, [r0, #0]
 801b21c:	9301      	str	r3, [sp, #4]
 801b21e:	941b      	str	r4, [sp, #108]	@ 0x6c
 801b220:	f002 fd98 	bl	801dd54 <_svfiprintf_r>
 801b224:	9b02      	ldr	r3, [sp, #8]
 801b226:	701c      	strb	r4, [r3, #0]
 801b228:	b01d      	add	sp, #116	@ 0x74
 801b22a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b22e:	b003      	add	sp, #12
 801b230:	4770      	bx	lr
 801b232:	bf00      	nop
 801b234:	20000160 	.word	0x20000160
 801b238:	ffff0208 	.word	0xffff0208

0801b23c <siscanf>:
 801b23c:	b40e      	push	{r1, r2, r3}
 801b23e:	b570      	push	{r4, r5, r6, lr}
 801b240:	b09d      	sub	sp, #116	@ 0x74
 801b242:	ac21      	add	r4, sp, #132	@ 0x84
 801b244:	2500      	movs	r5, #0
 801b246:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801b24a:	f854 6b04 	ldr.w	r6, [r4], #4
 801b24e:	f8ad 2014 	strh.w	r2, [sp, #20]
 801b252:	951b      	str	r5, [sp, #108]	@ 0x6c
 801b254:	9002      	str	r0, [sp, #8]
 801b256:	9006      	str	r0, [sp, #24]
 801b258:	f7e5 f81a 	bl	8000290 <strlen>
 801b25c:	4b0b      	ldr	r3, [pc, #44]	@ (801b28c <siscanf+0x50>)
 801b25e:	9003      	str	r0, [sp, #12]
 801b260:	9007      	str	r0, [sp, #28]
 801b262:	480b      	ldr	r0, [pc, #44]	@ (801b290 <siscanf+0x54>)
 801b264:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b266:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b26a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801b26e:	4632      	mov	r2, r6
 801b270:	4623      	mov	r3, r4
 801b272:	a902      	add	r1, sp, #8
 801b274:	6800      	ldr	r0, [r0, #0]
 801b276:	950f      	str	r5, [sp, #60]	@ 0x3c
 801b278:	9514      	str	r5, [sp, #80]	@ 0x50
 801b27a:	9401      	str	r4, [sp, #4]
 801b27c:	f002 fec0 	bl	801e000 <__ssvfiscanf_r>
 801b280:	b01d      	add	sp, #116	@ 0x74
 801b282:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b286:	b003      	add	sp, #12
 801b288:	4770      	bx	lr
 801b28a:	bf00      	nop
 801b28c:	0801b2b7 	.word	0x0801b2b7
 801b290:	20000160 	.word	0x20000160

0801b294 <__sread>:
 801b294:	b510      	push	{r4, lr}
 801b296:	460c      	mov	r4, r1
 801b298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b29c:	f000 f9c8 	bl	801b630 <_read_r>
 801b2a0:	2800      	cmp	r0, #0
 801b2a2:	bfab      	itete	ge
 801b2a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801b2a6:	89a3      	ldrhlt	r3, [r4, #12]
 801b2a8:	181b      	addge	r3, r3, r0
 801b2aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801b2ae:	bfac      	ite	ge
 801b2b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 801b2b2:	81a3      	strhlt	r3, [r4, #12]
 801b2b4:	bd10      	pop	{r4, pc}

0801b2b6 <__seofread>:
 801b2b6:	2000      	movs	r0, #0
 801b2b8:	4770      	bx	lr

0801b2ba <__swrite>:
 801b2ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b2be:	461f      	mov	r7, r3
 801b2c0:	898b      	ldrh	r3, [r1, #12]
 801b2c2:	05db      	lsls	r3, r3, #23
 801b2c4:	4605      	mov	r5, r0
 801b2c6:	460c      	mov	r4, r1
 801b2c8:	4616      	mov	r6, r2
 801b2ca:	d505      	bpl.n	801b2d8 <__swrite+0x1e>
 801b2cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2d0:	2302      	movs	r3, #2
 801b2d2:	2200      	movs	r2, #0
 801b2d4:	f000 f99a 	bl	801b60c <_lseek_r>
 801b2d8:	89a3      	ldrh	r3, [r4, #12]
 801b2da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2de:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801b2e2:	81a3      	strh	r3, [r4, #12]
 801b2e4:	4632      	mov	r2, r6
 801b2e6:	463b      	mov	r3, r7
 801b2e8:	4628      	mov	r0, r5
 801b2ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b2ee:	f000 b9b1 	b.w	801b654 <_write_r>

0801b2f2 <__sseek>:
 801b2f2:	b510      	push	{r4, lr}
 801b2f4:	460c      	mov	r4, r1
 801b2f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b2fa:	f000 f987 	bl	801b60c <_lseek_r>
 801b2fe:	1c43      	adds	r3, r0, #1
 801b300:	89a3      	ldrh	r3, [r4, #12]
 801b302:	bf15      	itete	ne
 801b304:	6560      	strne	r0, [r4, #84]	@ 0x54
 801b306:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801b30a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801b30e:	81a3      	strheq	r3, [r4, #12]
 801b310:	bf18      	it	ne
 801b312:	81a3      	strhne	r3, [r4, #12]
 801b314:	bd10      	pop	{r4, pc}

0801b316 <__sclose>:
 801b316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b31a:	f000 b909 	b.w	801b530 <_close_r>

0801b31e <_vsniprintf_r>:
 801b31e:	b530      	push	{r4, r5, lr}
 801b320:	4614      	mov	r4, r2
 801b322:	2c00      	cmp	r4, #0
 801b324:	b09b      	sub	sp, #108	@ 0x6c
 801b326:	4605      	mov	r5, r0
 801b328:	461a      	mov	r2, r3
 801b32a:	da05      	bge.n	801b338 <_vsniprintf_r+0x1a>
 801b32c:	238b      	movs	r3, #139	@ 0x8b
 801b32e:	6003      	str	r3, [r0, #0]
 801b330:	f04f 30ff 	mov.w	r0, #4294967295
 801b334:	b01b      	add	sp, #108	@ 0x6c
 801b336:	bd30      	pop	{r4, r5, pc}
 801b338:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801b33c:	f8ad 300c 	strh.w	r3, [sp, #12]
 801b340:	f04f 0300 	mov.w	r3, #0
 801b344:	9319      	str	r3, [sp, #100]	@ 0x64
 801b346:	bf14      	ite	ne
 801b348:	f104 33ff 	addne.w	r3, r4, #4294967295
 801b34c:	4623      	moveq	r3, r4
 801b34e:	9302      	str	r3, [sp, #8]
 801b350:	9305      	str	r3, [sp, #20]
 801b352:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b356:	9100      	str	r1, [sp, #0]
 801b358:	9104      	str	r1, [sp, #16]
 801b35a:	f8ad 300e 	strh.w	r3, [sp, #14]
 801b35e:	4669      	mov	r1, sp
 801b360:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b362:	f002 fcf7 	bl	801dd54 <_svfiprintf_r>
 801b366:	1c43      	adds	r3, r0, #1
 801b368:	bfbc      	itt	lt
 801b36a:	238b      	movlt	r3, #139	@ 0x8b
 801b36c:	602b      	strlt	r3, [r5, #0]
 801b36e:	2c00      	cmp	r4, #0
 801b370:	d0e0      	beq.n	801b334 <_vsniprintf_r+0x16>
 801b372:	9b00      	ldr	r3, [sp, #0]
 801b374:	2200      	movs	r2, #0
 801b376:	701a      	strb	r2, [r3, #0]
 801b378:	e7dc      	b.n	801b334 <_vsniprintf_r+0x16>
	...

0801b37c <vsniprintf>:
 801b37c:	b507      	push	{r0, r1, r2, lr}
 801b37e:	9300      	str	r3, [sp, #0]
 801b380:	4613      	mov	r3, r2
 801b382:	460a      	mov	r2, r1
 801b384:	4601      	mov	r1, r0
 801b386:	4803      	ldr	r0, [pc, #12]	@ (801b394 <vsniprintf+0x18>)
 801b388:	6800      	ldr	r0, [r0, #0]
 801b38a:	f7ff ffc8 	bl	801b31e <_vsniprintf_r>
 801b38e:	b003      	add	sp, #12
 801b390:	f85d fb04 	ldr.w	pc, [sp], #4
 801b394:	20000160 	.word	0x20000160

0801b398 <__swbuf_r>:
 801b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b39a:	460e      	mov	r6, r1
 801b39c:	4614      	mov	r4, r2
 801b39e:	4605      	mov	r5, r0
 801b3a0:	b118      	cbz	r0, 801b3aa <__swbuf_r+0x12>
 801b3a2:	6a03      	ldr	r3, [r0, #32]
 801b3a4:	b90b      	cbnz	r3, 801b3aa <__swbuf_r+0x12>
 801b3a6:	f7ff fe79 	bl	801b09c <__sinit>
 801b3aa:	69a3      	ldr	r3, [r4, #24]
 801b3ac:	60a3      	str	r3, [r4, #8]
 801b3ae:	89a3      	ldrh	r3, [r4, #12]
 801b3b0:	071a      	lsls	r2, r3, #28
 801b3b2:	d501      	bpl.n	801b3b8 <__swbuf_r+0x20>
 801b3b4:	6923      	ldr	r3, [r4, #16]
 801b3b6:	b943      	cbnz	r3, 801b3ca <__swbuf_r+0x32>
 801b3b8:	4621      	mov	r1, r4
 801b3ba:	4628      	mov	r0, r5
 801b3bc:	f000 f82a 	bl	801b414 <__swsetup_r>
 801b3c0:	b118      	cbz	r0, 801b3ca <__swbuf_r+0x32>
 801b3c2:	f04f 37ff 	mov.w	r7, #4294967295
 801b3c6:	4638      	mov	r0, r7
 801b3c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b3ca:	6823      	ldr	r3, [r4, #0]
 801b3cc:	6922      	ldr	r2, [r4, #16]
 801b3ce:	1a98      	subs	r0, r3, r2
 801b3d0:	6963      	ldr	r3, [r4, #20]
 801b3d2:	b2f6      	uxtb	r6, r6
 801b3d4:	4283      	cmp	r3, r0
 801b3d6:	4637      	mov	r7, r6
 801b3d8:	dc05      	bgt.n	801b3e6 <__swbuf_r+0x4e>
 801b3da:	4621      	mov	r1, r4
 801b3dc:	4628      	mov	r0, r5
 801b3de:	f003 f957 	bl	801e690 <_fflush_r>
 801b3e2:	2800      	cmp	r0, #0
 801b3e4:	d1ed      	bne.n	801b3c2 <__swbuf_r+0x2a>
 801b3e6:	68a3      	ldr	r3, [r4, #8]
 801b3e8:	3b01      	subs	r3, #1
 801b3ea:	60a3      	str	r3, [r4, #8]
 801b3ec:	6823      	ldr	r3, [r4, #0]
 801b3ee:	1c5a      	adds	r2, r3, #1
 801b3f0:	6022      	str	r2, [r4, #0]
 801b3f2:	701e      	strb	r6, [r3, #0]
 801b3f4:	6962      	ldr	r2, [r4, #20]
 801b3f6:	1c43      	adds	r3, r0, #1
 801b3f8:	429a      	cmp	r2, r3
 801b3fa:	d004      	beq.n	801b406 <__swbuf_r+0x6e>
 801b3fc:	89a3      	ldrh	r3, [r4, #12]
 801b3fe:	07db      	lsls	r3, r3, #31
 801b400:	d5e1      	bpl.n	801b3c6 <__swbuf_r+0x2e>
 801b402:	2e0a      	cmp	r6, #10
 801b404:	d1df      	bne.n	801b3c6 <__swbuf_r+0x2e>
 801b406:	4621      	mov	r1, r4
 801b408:	4628      	mov	r0, r5
 801b40a:	f003 f941 	bl	801e690 <_fflush_r>
 801b40e:	2800      	cmp	r0, #0
 801b410:	d0d9      	beq.n	801b3c6 <__swbuf_r+0x2e>
 801b412:	e7d6      	b.n	801b3c2 <__swbuf_r+0x2a>

0801b414 <__swsetup_r>:
 801b414:	b538      	push	{r3, r4, r5, lr}
 801b416:	4b29      	ldr	r3, [pc, #164]	@ (801b4bc <__swsetup_r+0xa8>)
 801b418:	4605      	mov	r5, r0
 801b41a:	6818      	ldr	r0, [r3, #0]
 801b41c:	460c      	mov	r4, r1
 801b41e:	b118      	cbz	r0, 801b428 <__swsetup_r+0x14>
 801b420:	6a03      	ldr	r3, [r0, #32]
 801b422:	b90b      	cbnz	r3, 801b428 <__swsetup_r+0x14>
 801b424:	f7ff fe3a 	bl	801b09c <__sinit>
 801b428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b42c:	0719      	lsls	r1, r3, #28
 801b42e:	d422      	bmi.n	801b476 <__swsetup_r+0x62>
 801b430:	06da      	lsls	r2, r3, #27
 801b432:	d407      	bmi.n	801b444 <__swsetup_r+0x30>
 801b434:	2209      	movs	r2, #9
 801b436:	602a      	str	r2, [r5, #0]
 801b438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b43c:	81a3      	strh	r3, [r4, #12]
 801b43e:	f04f 30ff 	mov.w	r0, #4294967295
 801b442:	e033      	b.n	801b4ac <__swsetup_r+0x98>
 801b444:	0758      	lsls	r0, r3, #29
 801b446:	d512      	bpl.n	801b46e <__swsetup_r+0x5a>
 801b448:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b44a:	b141      	cbz	r1, 801b45e <__swsetup_r+0x4a>
 801b44c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801b450:	4299      	cmp	r1, r3
 801b452:	d002      	beq.n	801b45a <__swsetup_r+0x46>
 801b454:	4628      	mov	r0, r5
 801b456:	f000 ffc3 	bl	801c3e0 <_free_r>
 801b45a:	2300      	movs	r3, #0
 801b45c:	6363      	str	r3, [r4, #52]	@ 0x34
 801b45e:	89a3      	ldrh	r3, [r4, #12]
 801b460:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801b464:	81a3      	strh	r3, [r4, #12]
 801b466:	2300      	movs	r3, #0
 801b468:	6063      	str	r3, [r4, #4]
 801b46a:	6923      	ldr	r3, [r4, #16]
 801b46c:	6023      	str	r3, [r4, #0]
 801b46e:	89a3      	ldrh	r3, [r4, #12]
 801b470:	f043 0308 	orr.w	r3, r3, #8
 801b474:	81a3      	strh	r3, [r4, #12]
 801b476:	6923      	ldr	r3, [r4, #16]
 801b478:	b94b      	cbnz	r3, 801b48e <__swsetup_r+0x7a>
 801b47a:	89a3      	ldrh	r3, [r4, #12]
 801b47c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801b480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b484:	d003      	beq.n	801b48e <__swsetup_r+0x7a>
 801b486:	4621      	mov	r1, r4
 801b488:	4628      	mov	r0, r5
 801b48a:	f003 f961 	bl	801e750 <__smakebuf_r>
 801b48e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b492:	f013 0201 	ands.w	r2, r3, #1
 801b496:	d00a      	beq.n	801b4ae <__swsetup_r+0x9a>
 801b498:	2200      	movs	r2, #0
 801b49a:	60a2      	str	r2, [r4, #8]
 801b49c:	6962      	ldr	r2, [r4, #20]
 801b49e:	4252      	negs	r2, r2
 801b4a0:	61a2      	str	r2, [r4, #24]
 801b4a2:	6922      	ldr	r2, [r4, #16]
 801b4a4:	b942      	cbnz	r2, 801b4b8 <__swsetup_r+0xa4>
 801b4a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801b4aa:	d1c5      	bne.n	801b438 <__swsetup_r+0x24>
 801b4ac:	bd38      	pop	{r3, r4, r5, pc}
 801b4ae:	0799      	lsls	r1, r3, #30
 801b4b0:	bf58      	it	pl
 801b4b2:	6962      	ldrpl	r2, [r4, #20]
 801b4b4:	60a2      	str	r2, [r4, #8]
 801b4b6:	e7f4      	b.n	801b4a2 <__swsetup_r+0x8e>
 801b4b8:	2000      	movs	r0, #0
 801b4ba:	e7f7      	b.n	801b4ac <__swsetup_r+0x98>
 801b4bc:	20000160 	.word	0x20000160

0801b4c0 <memmove>:
 801b4c0:	4288      	cmp	r0, r1
 801b4c2:	b510      	push	{r4, lr}
 801b4c4:	eb01 0402 	add.w	r4, r1, r2
 801b4c8:	d902      	bls.n	801b4d0 <memmove+0x10>
 801b4ca:	4284      	cmp	r4, r0
 801b4cc:	4623      	mov	r3, r4
 801b4ce:	d807      	bhi.n	801b4e0 <memmove+0x20>
 801b4d0:	1e43      	subs	r3, r0, #1
 801b4d2:	42a1      	cmp	r1, r4
 801b4d4:	d008      	beq.n	801b4e8 <memmove+0x28>
 801b4d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b4da:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b4de:	e7f8      	b.n	801b4d2 <memmove+0x12>
 801b4e0:	4402      	add	r2, r0
 801b4e2:	4601      	mov	r1, r0
 801b4e4:	428a      	cmp	r2, r1
 801b4e6:	d100      	bne.n	801b4ea <memmove+0x2a>
 801b4e8:	bd10      	pop	{r4, pc}
 801b4ea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b4ee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b4f2:	e7f7      	b.n	801b4e4 <memmove+0x24>

0801b4f4 <memset>:
 801b4f4:	4402      	add	r2, r0
 801b4f6:	4603      	mov	r3, r0
 801b4f8:	4293      	cmp	r3, r2
 801b4fa:	d100      	bne.n	801b4fe <memset+0xa>
 801b4fc:	4770      	bx	lr
 801b4fe:	f803 1b01 	strb.w	r1, [r3], #1
 801b502:	e7f9      	b.n	801b4f8 <memset+0x4>

0801b504 <strncmp>:
 801b504:	b510      	push	{r4, lr}
 801b506:	b16a      	cbz	r2, 801b524 <strncmp+0x20>
 801b508:	3901      	subs	r1, #1
 801b50a:	1884      	adds	r4, r0, r2
 801b50c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b510:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b514:	429a      	cmp	r2, r3
 801b516:	d103      	bne.n	801b520 <strncmp+0x1c>
 801b518:	42a0      	cmp	r0, r4
 801b51a:	d001      	beq.n	801b520 <strncmp+0x1c>
 801b51c:	2a00      	cmp	r2, #0
 801b51e:	d1f5      	bne.n	801b50c <strncmp+0x8>
 801b520:	1ad0      	subs	r0, r2, r3
 801b522:	bd10      	pop	{r4, pc}
 801b524:	4610      	mov	r0, r2
 801b526:	e7fc      	b.n	801b522 <strncmp+0x1e>

0801b528 <_localeconv_r>:
 801b528:	4800      	ldr	r0, [pc, #0]	@ (801b52c <_localeconv_r+0x4>)
 801b52a:	4770      	bx	lr
 801b52c:	200002a0 	.word	0x200002a0

0801b530 <_close_r>:
 801b530:	b538      	push	{r3, r4, r5, lr}
 801b532:	4d06      	ldr	r5, [pc, #24]	@ (801b54c <_close_r+0x1c>)
 801b534:	2300      	movs	r3, #0
 801b536:	4604      	mov	r4, r0
 801b538:	4608      	mov	r0, r1
 801b53a:	602b      	str	r3, [r5, #0]
 801b53c:	f7ee fea4 	bl	800a288 <_close>
 801b540:	1c43      	adds	r3, r0, #1
 801b542:	d102      	bne.n	801b54a <_close_r+0x1a>
 801b544:	682b      	ldr	r3, [r5, #0]
 801b546:	b103      	cbz	r3, 801b54a <_close_r+0x1a>
 801b548:	6023      	str	r3, [r4, #0]
 801b54a:	bd38      	pop	{r3, r4, r5, pc}
 801b54c:	2000c354 	.word	0x2000c354

0801b550 <_reclaim_reent>:
 801b550:	4b2d      	ldr	r3, [pc, #180]	@ (801b608 <_reclaim_reent+0xb8>)
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	4283      	cmp	r3, r0
 801b556:	b570      	push	{r4, r5, r6, lr}
 801b558:	4604      	mov	r4, r0
 801b55a:	d053      	beq.n	801b604 <_reclaim_reent+0xb4>
 801b55c:	69c3      	ldr	r3, [r0, #28]
 801b55e:	b31b      	cbz	r3, 801b5a8 <_reclaim_reent+0x58>
 801b560:	68db      	ldr	r3, [r3, #12]
 801b562:	b163      	cbz	r3, 801b57e <_reclaim_reent+0x2e>
 801b564:	2500      	movs	r5, #0
 801b566:	69e3      	ldr	r3, [r4, #28]
 801b568:	68db      	ldr	r3, [r3, #12]
 801b56a:	5959      	ldr	r1, [r3, r5]
 801b56c:	b9b1      	cbnz	r1, 801b59c <_reclaim_reent+0x4c>
 801b56e:	3504      	adds	r5, #4
 801b570:	2d80      	cmp	r5, #128	@ 0x80
 801b572:	d1f8      	bne.n	801b566 <_reclaim_reent+0x16>
 801b574:	69e3      	ldr	r3, [r4, #28]
 801b576:	4620      	mov	r0, r4
 801b578:	68d9      	ldr	r1, [r3, #12]
 801b57a:	f000 ff31 	bl	801c3e0 <_free_r>
 801b57e:	69e3      	ldr	r3, [r4, #28]
 801b580:	6819      	ldr	r1, [r3, #0]
 801b582:	b111      	cbz	r1, 801b58a <_reclaim_reent+0x3a>
 801b584:	4620      	mov	r0, r4
 801b586:	f000 ff2b 	bl	801c3e0 <_free_r>
 801b58a:	69e3      	ldr	r3, [r4, #28]
 801b58c:	689d      	ldr	r5, [r3, #8]
 801b58e:	b15d      	cbz	r5, 801b5a8 <_reclaim_reent+0x58>
 801b590:	4629      	mov	r1, r5
 801b592:	4620      	mov	r0, r4
 801b594:	682d      	ldr	r5, [r5, #0]
 801b596:	f000 ff23 	bl	801c3e0 <_free_r>
 801b59a:	e7f8      	b.n	801b58e <_reclaim_reent+0x3e>
 801b59c:	680e      	ldr	r6, [r1, #0]
 801b59e:	4620      	mov	r0, r4
 801b5a0:	f000 ff1e 	bl	801c3e0 <_free_r>
 801b5a4:	4631      	mov	r1, r6
 801b5a6:	e7e1      	b.n	801b56c <_reclaim_reent+0x1c>
 801b5a8:	6961      	ldr	r1, [r4, #20]
 801b5aa:	b111      	cbz	r1, 801b5b2 <_reclaim_reent+0x62>
 801b5ac:	4620      	mov	r0, r4
 801b5ae:	f000 ff17 	bl	801c3e0 <_free_r>
 801b5b2:	69e1      	ldr	r1, [r4, #28]
 801b5b4:	b111      	cbz	r1, 801b5bc <_reclaim_reent+0x6c>
 801b5b6:	4620      	mov	r0, r4
 801b5b8:	f000 ff12 	bl	801c3e0 <_free_r>
 801b5bc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801b5be:	b111      	cbz	r1, 801b5c6 <_reclaim_reent+0x76>
 801b5c0:	4620      	mov	r0, r4
 801b5c2:	f000 ff0d 	bl	801c3e0 <_free_r>
 801b5c6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801b5c8:	b111      	cbz	r1, 801b5d0 <_reclaim_reent+0x80>
 801b5ca:	4620      	mov	r0, r4
 801b5cc:	f000 ff08 	bl	801c3e0 <_free_r>
 801b5d0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801b5d2:	b111      	cbz	r1, 801b5da <_reclaim_reent+0x8a>
 801b5d4:	4620      	mov	r0, r4
 801b5d6:	f000 ff03 	bl	801c3e0 <_free_r>
 801b5da:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801b5dc:	b111      	cbz	r1, 801b5e4 <_reclaim_reent+0x94>
 801b5de:	4620      	mov	r0, r4
 801b5e0:	f000 fefe 	bl	801c3e0 <_free_r>
 801b5e4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801b5e6:	b111      	cbz	r1, 801b5ee <_reclaim_reent+0x9e>
 801b5e8:	4620      	mov	r0, r4
 801b5ea:	f000 fef9 	bl	801c3e0 <_free_r>
 801b5ee:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801b5f0:	b111      	cbz	r1, 801b5f8 <_reclaim_reent+0xa8>
 801b5f2:	4620      	mov	r0, r4
 801b5f4:	f000 fef4 	bl	801c3e0 <_free_r>
 801b5f8:	6a23      	ldr	r3, [r4, #32]
 801b5fa:	b11b      	cbz	r3, 801b604 <_reclaim_reent+0xb4>
 801b5fc:	4620      	mov	r0, r4
 801b5fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801b602:	4718      	bx	r3
 801b604:	bd70      	pop	{r4, r5, r6, pc}
 801b606:	bf00      	nop
 801b608:	20000160 	.word	0x20000160

0801b60c <_lseek_r>:
 801b60c:	b538      	push	{r3, r4, r5, lr}
 801b60e:	4d07      	ldr	r5, [pc, #28]	@ (801b62c <_lseek_r+0x20>)
 801b610:	4604      	mov	r4, r0
 801b612:	4608      	mov	r0, r1
 801b614:	4611      	mov	r1, r2
 801b616:	2200      	movs	r2, #0
 801b618:	602a      	str	r2, [r5, #0]
 801b61a:	461a      	mov	r2, r3
 801b61c:	f7ee fe5b 	bl	800a2d6 <_lseek>
 801b620:	1c43      	adds	r3, r0, #1
 801b622:	d102      	bne.n	801b62a <_lseek_r+0x1e>
 801b624:	682b      	ldr	r3, [r5, #0]
 801b626:	b103      	cbz	r3, 801b62a <_lseek_r+0x1e>
 801b628:	6023      	str	r3, [r4, #0]
 801b62a:	bd38      	pop	{r3, r4, r5, pc}
 801b62c:	2000c354 	.word	0x2000c354

0801b630 <_read_r>:
 801b630:	b538      	push	{r3, r4, r5, lr}
 801b632:	4d07      	ldr	r5, [pc, #28]	@ (801b650 <_read_r+0x20>)
 801b634:	4604      	mov	r4, r0
 801b636:	4608      	mov	r0, r1
 801b638:	4611      	mov	r1, r2
 801b63a:	2200      	movs	r2, #0
 801b63c:	602a      	str	r2, [r5, #0]
 801b63e:	461a      	mov	r2, r3
 801b640:	f7ee fe05 	bl	800a24e <_read>
 801b644:	1c43      	adds	r3, r0, #1
 801b646:	d102      	bne.n	801b64e <_read_r+0x1e>
 801b648:	682b      	ldr	r3, [r5, #0]
 801b64a:	b103      	cbz	r3, 801b64e <_read_r+0x1e>
 801b64c:	6023      	str	r3, [r4, #0]
 801b64e:	bd38      	pop	{r3, r4, r5, pc}
 801b650:	2000c354 	.word	0x2000c354

0801b654 <_write_r>:
 801b654:	b538      	push	{r3, r4, r5, lr}
 801b656:	4d07      	ldr	r5, [pc, #28]	@ (801b674 <_write_r+0x20>)
 801b658:	4604      	mov	r4, r0
 801b65a:	4608      	mov	r0, r1
 801b65c:	4611      	mov	r1, r2
 801b65e:	2200      	movs	r2, #0
 801b660:	602a      	str	r2, [r5, #0]
 801b662:	461a      	mov	r2, r3
 801b664:	f7ed fb8a 	bl	8008d7c <_write>
 801b668:	1c43      	adds	r3, r0, #1
 801b66a:	d102      	bne.n	801b672 <_write_r+0x1e>
 801b66c:	682b      	ldr	r3, [r5, #0]
 801b66e:	b103      	cbz	r3, 801b672 <_write_r+0x1e>
 801b670:	6023      	str	r3, [r4, #0]
 801b672:	bd38      	pop	{r3, r4, r5, pc}
 801b674:	2000c354 	.word	0x2000c354

0801b678 <__errno>:
 801b678:	4b01      	ldr	r3, [pc, #4]	@ (801b680 <__errno+0x8>)
 801b67a:	6818      	ldr	r0, [r3, #0]
 801b67c:	4770      	bx	lr
 801b67e:	bf00      	nop
 801b680:	20000160 	.word	0x20000160

0801b684 <__libc_init_array>:
 801b684:	b570      	push	{r4, r5, r6, lr}
 801b686:	4d0d      	ldr	r5, [pc, #52]	@ (801b6bc <__libc_init_array+0x38>)
 801b688:	4c0d      	ldr	r4, [pc, #52]	@ (801b6c0 <__libc_init_array+0x3c>)
 801b68a:	1b64      	subs	r4, r4, r5
 801b68c:	10a4      	asrs	r4, r4, #2
 801b68e:	2600      	movs	r6, #0
 801b690:	42a6      	cmp	r6, r4
 801b692:	d109      	bne.n	801b6a8 <__libc_init_array+0x24>
 801b694:	4d0b      	ldr	r5, [pc, #44]	@ (801b6c4 <__libc_init_array+0x40>)
 801b696:	4c0c      	ldr	r4, [pc, #48]	@ (801b6c8 <__libc_init_array+0x44>)
 801b698:	f003 fdaa 	bl	801f1f0 <_init>
 801b69c:	1b64      	subs	r4, r4, r5
 801b69e:	10a4      	asrs	r4, r4, #2
 801b6a0:	2600      	movs	r6, #0
 801b6a2:	42a6      	cmp	r6, r4
 801b6a4:	d105      	bne.n	801b6b2 <__libc_init_array+0x2e>
 801b6a6:	bd70      	pop	{r4, r5, r6, pc}
 801b6a8:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6ac:	4798      	blx	r3
 801b6ae:	3601      	adds	r6, #1
 801b6b0:	e7ee      	b.n	801b690 <__libc_init_array+0xc>
 801b6b2:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6b6:	4798      	blx	r3
 801b6b8:	3601      	adds	r6, #1
 801b6ba:	e7f2      	b.n	801b6a2 <__libc_init_array+0x1e>
 801b6bc:	08021d1c 	.word	0x08021d1c
 801b6c0:	08021d1c 	.word	0x08021d1c
 801b6c4:	08021d1c 	.word	0x08021d1c
 801b6c8:	08021d20 	.word	0x08021d20

0801b6cc <__retarget_lock_init_recursive>:
 801b6cc:	4770      	bx	lr

0801b6ce <__retarget_lock_acquire_recursive>:
 801b6ce:	4770      	bx	lr

0801b6d0 <__retarget_lock_release_recursive>:
 801b6d0:	4770      	bx	lr

0801b6d2 <memcpy>:
 801b6d2:	440a      	add	r2, r1
 801b6d4:	4291      	cmp	r1, r2
 801b6d6:	f100 33ff 	add.w	r3, r0, #4294967295
 801b6da:	d100      	bne.n	801b6de <memcpy+0xc>
 801b6dc:	4770      	bx	lr
 801b6de:	b510      	push	{r4, lr}
 801b6e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b6e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b6e8:	4291      	cmp	r1, r2
 801b6ea:	d1f9      	bne.n	801b6e0 <memcpy+0xe>
 801b6ec:	bd10      	pop	{r4, pc}
	...

0801b6f0 <__assert_func>:
 801b6f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b6f2:	4614      	mov	r4, r2
 801b6f4:	461a      	mov	r2, r3
 801b6f6:	4b09      	ldr	r3, [pc, #36]	@ (801b71c <__assert_func+0x2c>)
 801b6f8:	681b      	ldr	r3, [r3, #0]
 801b6fa:	4605      	mov	r5, r0
 801b6fc:	68d8      	ldr	r0, [r3, #12]
 801b6fe:	b14c      	cbz	r4, 801b714 <__assert_func+0x24>
 801b700:	4b07      	ldr	r3, [pc, #28]	@ (801b720 <__assert_func+0x30>)
 801b702:	9100      	str	r1, [sp, #0]
 801b704:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b708:	4906      	ldr	r1, [pc, #24]	@ (801b724 <__assert_func+0x34>)
 801b70a:	462b      	mov	r3, r5
 801b70c:	f002 ffe8 	bl	801e6e0 <fiprintf>
 801b710:	f003 f93e 	bl	801e990 <abort>
 801b714:	4b04      	ldr	r3, [pc, #16]	@ (801b728 <__assert_func+0x38>)
 801b716:	461c      	mov	r4, r3
 801b718:	e7f3      	b.n	801b702 <__assert_func+0x12>
 801b71a:	bf00      	nop
 801b71c:	20000160 	.word	0x20000160
 801b720:	080214fc 	.word	0x080214fc
 801b724:	08021509 	.word	0x08021509
 801b728:	08021537 	.word	0x08021537

0801b72c <quorem>:
 801b72c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b730:	6903      	ldr	r3, [r0, #16]
 801b732:	690c      	ldr	r4, [r1, #16]
 801b734:	42a3      	cmp	r3, r4
 801b736:	4607      	mov	r7, r0
 801b738:	db7e      	blt.n	801b838 <quorem+0x10c>
 801b73a:	3c01      	subs	r4, #1
 801b73c:	f101 0814 	add.w	r8, r1, #20
 801b740:	00a3      	lsls	r3, r4, #2
 801b742:	f100 0514 	add.w	r5, r0, #20
 801b746:	9300      	str	r3, [sp, #0]
 801b748:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b74c:	9301      	str	r3, [sp, #4]
 801b74e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b752:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b756:	3301      	adds	r3, #1
 801b758:	429a      	cmp	r2, r3
 801b75a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b75e:	fbb2 f6f3 	udiv	r6, r2, r3
 801b762:	d32e      	bcc.n	801b7c2 <quorem+0x96>
 801b764:	f04f 0a00 	mov.w	sl, #0
 801b768:	46c4      	mov	ip, r8
 801b76a:	46ae      	mov	lr, r5
 801b76c:	46d3      	mov	fp, sl
 801b76e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801b772:	b298      	uxth	r0, r3
 801b774:	fb06 a000 	mla	r0, r6, r0, sl
 801b778:	0c02      	lsrs	r2, r0, #16
 801b77a:	0c1b      	lsrs	r3, r3, #16
 801b77c:	fb06 2303 	mla	r3, r6, r3, r2
 801b780:	f8de 2000 	ldr.w	r2, [lr]
 801b784:	b280      	uxth	r0, r0
 801b786:	b292      	uxth	r2, r2
 801b788:	1a12      	subs	r2, r2, r0
 801b78a:	445a      	add	r2, fp
 801b78c:	f8de 0000 	ldr.w	r0, [lr]
 801b790:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801b794:	b29b      	uxth	r3, r3
 801b796:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801b79a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801b79e:	b292      	uxth	r2, r2
 801b7a0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801b7a4:	45e1      	cmp	r9, ip
 801b7a6:	f84e 2b04 	str.w	r2, [lr], #4
 801b7aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801b7ae:	d2de      	bcs.n	801b76e <quorem+0x42>
 801b7b0:	9b00      	ldr	r3, [sp, #0]
 801b7b2:	58eb      	ldr	r3, [r5, r3]
 801b7b4:	b92b      	cbnz	r3, 801b7c2 <quorem+0x96>
 801b7b6:	9b01      	ldr	r3, [sp, #4]
 801b7b8:	3b04      	subs	r3, #4
 801b7ba:	429d      	cmp	r5, r3
 801b7bc:	461a      	mov	r2, r3
 801b7be:	d32f      	bcc.n	801b820 <quorem+0xf4>
 801b7c0:	613c      	str	r4, [r7, #16]
 801b7c2:	4638      	mov	r0, r7
 801b7c4:	f001 f9c8 	bl	801cb58 <__mcmp>
 801b7c8:	2800      	cmp	r0, #0
 801b7ca:	db25      	blt.n	801b818 <quorem+0xec>
 801b7cc:	4629      	mov	r1, r5
 801b7ce:	2000      	movs	r0, #0
 801b7d0:	f858 2b04 	ldr.w	r2, [r8], #4
 801b7d4:	f8d1 c000 	ldr.w	ip, [r1]
 801b7d8:	fa1f fe82 	uxth.w	lr, r2
 801b7dc:	fa1f f38c 	uxth.w	r3, ip
 801b7e0:	eba3 030e 	sub.w	r3, r3, lr
 801b7e4:	4403      	add	r3, r0
 801b7e6:	0c12      	lsrs	r2, r2, #16
 801b7e8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801b7ec:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801b7f0:	b29b      	uxth	r3, r3
 801b7f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b7f6:	45c1      	cmp	r9, r8
 801b7f8:	f841 3b04 	str.w	r3, [r1], #4
 801b7fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b800:	d2e6      	bcs.n	801b7d0 <quorem+0xa4>
 801b802:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b80a:	b922      	cbnz	r2, 801b816 <quorem+0xea>
 801b80c:	3b04      	subs	r3, #4
 801b80e:	429d      	cmp	r5, r3
 801b810:	461a      	mov	r2, r3
 801b812:	d30b      	bcc.n	801b82c <quorem+0x100>
 801b814:	613c      	str	r4, [r7, #16]
 801b816:	3601      	adds	r6, #1
 801b818:	4630      	mov	r0, r6
 801b81a:	b003      	add	sp, #12
 801b81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b820:	6812      	ldr	r2, [r2, #0]
 801b822:	3b04      	subs	r3, #4
 801b824:	2a00      	cmp	r2, #0
 801b826:	d1cb      	bne.n	801b7c0 <quorem+0x94>
 801b828:	3c01      	subs	r4, #1
 801b82a:	e7c6      	b.n	801b7ba <quorem+0x8e>
 801b82c:	6812      	ldr	r2, [r2, #0]
 801b82e:	3b04      	subs	r3, #4
 801b830:	2a00      	cmp	r2, #0
 801b832:	d1ef      	bne.n	801b814 <quorem+0xe8>
 801b834:	3c01      	subs	r4, #1
 801b836:	e7ea      	b.n	801b80e <quorem+0xe2>
 801b838:	2000      	movs	r0, #0
 801b83a:	e7ee      	b.n	801b81a <quorem+0xee>
 801b83c:	0000      	movs	r0, r0
	...

0801b840 <_dtoa_r>:
 801b840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b844:	69c7      	ldr	r7, [r0, #28]
 801b846:	b097      	sub	sp, #92	@ 0x5c
 801b848:	ed8d 0b04 	vstr	d0, [sp, #16]
 801b84c:	ec55 4b10 	vmov	r4, r5, d0
 801b850:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801b852:	9107      	str	r1, [sp, #28]
 801b854:	4681      	mov	r9, r0
 801b856:	920c      	str	r2, [sp, #48]	@ 0x30
 801b858:	9311      	str	r3, [sp, #68]	@ 0x44
 801b85a:	b97f      	cbnz	r7, 801b87c <_dtoa_r+0x3c>
 801b85c:	2010      	movs	r0, #16
 801b85e:	f000 fe09 	bl	801c474 <malloc>
 801b862:	4602      	mov	r2, r0
 801b864:	f8c9 001c 	str.w	r0, [r9, #28]
 801b868:	b920      	cbnz	r0, 801b874 <_dtoa_r+0x34>
 801b86a:	4ba9      	ldr	r3, [pc, #676]	@ (801bb10 <_dtoa_r+0x2d0>)
 801b86c:	21ef      	movs	r1, #239	@ 0xef
 801b86e:	48a9      	ldr	r0, [pc, #676]	@ (801bb14 <_dtoa_r+0x2d4>)
 801b870:	f7ff ff3e 	bl	801b6f0 <__assert_func>
 801b874:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801b878:	6007      	str	r7, [r0, #0]
 801b87a:	60c7      	str	r7, [r0, #12]
 801b87c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b880:	6819      	ldr	r1, [r3, #0]
 801b882:	b159      	cbz	r1, 801b89c <_dtoa_r+0x5c>
 801b884:	685a      	ldr	r2, [r3, #4]
 801b886:	604a      	str	r2, [r1, #4]
 801b888:	2301      	movs	r3, #1
 801b88a:	4093      	lsls	r3, r2
 801b88c:	608b      	str	r3, [r1, #8]
 801b88e:	4648      	mov	r0, r9
 801b890:	f000 fee6 	bl	801c660 <_Bfree>
 801b894:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801b898:	2200      	movs	r2, #0
 801b89a:	601a      	str	r2, [r3, #0]
 801b89c:	1e2b      	subs	r3, r5, #0
 801b89e:	bfb9      	ittee	lt
 801b8a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801b8a4:	9305      	strlt	r3, [sp, #20]
 801b8a6:	2300      	movge	r3, #0
 801b8a8:	6033      	strge	r3, [r6, #0]
 801b8aa:	9f05      	ldr	r7, [sp, #20]
 801b8ac:	4b9a      	ldr	r3, [pc, #616]	@ (801bb18 <_dtoa_r+0x2d8>)
 801b8ae:	bfbc      	itt	lt
 801b8b0:	2201      	movlt	r2, #1
 801b8b2:	6032      	strlt	r2, [r6, #0]
 801b8b4:	43bb      	bics	r3, r7
 801b8b6:	d112      	bne.n	801b8de <_dtoa_r+0x9e>
 801b8b8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b8ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 801b8be:	6013      	str	r3, [r2, #0]
 801b8c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801b8c4:	4323      	orrs	r3, r4
 801b8c6:	f000 855a 	beq.w	801c37e <_dtoa_r+0xb3e>
 801b8ca:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b8cc:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801bb2c <_dtoa_r+0x2ec>
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	f000 855c 	beq.w	801c38e <_dtoa_r+0xb4e>
 801b8d6:	f10a 0303 	add.w	r3, sl, #3
 801b8da:	f000 bd56 	b.w	801c38a <_dtoa_r+0xb4a>
 801b8de:	ed9d 7b04 	vldr	d7, [sp, #16]
 801b8e2:	2200      	movs	r2, #0
 801b8e4:	ec51 0b17 	vmov	r0, r1, d7
 801b8e8:	2300      	movs	r3, #0
 801b8ea:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801b8ee:	f7e5 f8fb 	bl	8000ae8 <__aeabi_dcmpeq>
 801b8f2:	4680      	mov	r8, r0
 801b8f4:	b158      	cbz	r0, 801b90e <_dtoa_r+0xce>
 801b8f6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801b8f8:	2301      	movs	r3, #1
 801b8fa:	6013      	str	r3, [r2, #0]
 801b8fc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b8fe:	b113      	cbz	r3, 801b906 <_dtoa_r+0xc6>
 801b900:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b902:	4b86      	ldr	r3, [pc, #536]	@ (801bb1c <_dtoa_r+0x2dc>)
 801b904:	6013      	str	r3, [r2, #0]
 801b906:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801bb30 <_dtoa_r+0x2f0>
 801b90a:	f000 bd40 	b.w	801c38e <_dtoa_r+0xb4e>
 801b90e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801b912:	aa14      	add	r2, sp, #80	@ 0x50
 801b914:	a915      	add	r1, sp, #84	@ 0x54
 801b916:	4648      	mov	r0, r9
 801b918:	f001 fa3e 	bl	801cd98 <__d2b>
 801b91c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801b920:	9002      	str	r0, [sp, #8]
 801b922:	2e00      	cmp	r6, #0
 801b924:	d078      	beq.n	801ba18 <_dtoa_r+0x1d8>
 801b926:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b928:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801b92c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b930:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b934:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801b938:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801b93c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801b940:	4619      	mov	r1, r3
 801b942:	2200      	movs	r2, #0
 801b944:	4b76      	ldr	r3, [pc, #472]	@ (801bb20 <_dtoa_r+0x2e0>)
 801b946:	f7e4 fcaf 	bl	80002a8 <__aeabi_dsub>
 801b94a:	a36b      	add	r3, pc, #428	@ (adr r3, 801baf8 <_dtoa_r+0x2b8>)
 801b94c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b950:	f7e4 fe62 	bl	8000618 <__aeabi_dmul>
 801b954:	a36a      	add	r3, pc, #424	@ (adr r3, 801bb00 <_dtoa_r+0x2c0>)
 801b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b95a:	f7e4 fca7 	bl	80002ac <__adddf3>
 801b95e:	4604      	mov	r4, r0
 801b960:	4630      	mov	r0, r6
 801b962:	460d      	mov	r5, r1
 801b964:	f7e4 fdee 	bl	8000544 <__aeabi_i2d>
 801b968:	a367      	add	r3, pc, #412	@ (adr r3, 801bb08 <_dtoa_r+0x2c8>)
 801b96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b96e:	f7e4 fe53 	bl	8000618 <__aeabi_dmul>
 801b972:	4602      	mov	r2, r0
 801b974:	460b      	mov	r3, r1
 801b976:	4620      	mov	r0, r4
 801b978:	4629      	mov	r1, r5
 801b97a:	f7e4 fc97 	bl	80002ac <__adddf3>
 801b97e:	4604      	mov	r4, r0
 801b980:	460d      	mov	r5, r1
 801b982:	f7e5 f8f9 	bl	8000b78 <__aeabi_d2iz>
 801b986:	2200      	movs	r2, #0
 801b988:	4607      	mov	r7, r0
 801b98a:	2300      	movs	r3, #0
 801b98c:	4620      	mov	r0, r4
 801b98e:	4629      	mov	r1, r5
 801b990:	f7e5 f8b4 	bl	8000afc <__aeabi_dcmplt>
 801b994:	b140      	cbz	r0, 801b9a8 <_dtoa_r+0x168>
 801b996:	4638      	mov	r0, r7
 801b998:	f7e4 fdd4 	bl	8000544 <__aeabi_i2d>
 801b99c:	4622      	mov	r2, r4
 801b99e:	462b      	mov	r3, r5
 801b9a0:	f7e5 f8a2 	bl	8000ae8 <__aeabi_dcmpeq>
 801b9a4:	b900      	cbnz	r0, 801b9a8 <_dtoa_r+0x168>
 801b9a6:	3f01      	subs	r7, #1
 801b9a8:	2f16      	cmp	r7, #22
 801b9aa:	d852      	bhi.n	801ba52 <_dtoa_r+0x212>
 801b9ac:	4b5d      	ldr	r3, [pc, #372]	@ (801bb24 <_dtoa_r+0x2e4>)
 801b9ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b9b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801b9ba:	f7e5 f89f 	bl	8000afc <__aeabi_dcmplt>
 801b9be:	2800      	cmp	r0, #0
 801b9c0:	d049      	beq.n	801ba56 <_dtoa_r+0x216>
 801b9c2:	3f01      	subs	r7, #1
 801b9c4:	2300      	movs	r3, #0
 801b9c6:	9310      	str	r3, [sp, #64]	@ 0x40
 801b9c8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b9ca:	1b9b      	subs	r3, r3, r6
 801b9cc:	1e5a      	subs	r2, r3, #1
 801b9ce:	bf45      	ittet	mi
 801b9d0:	f1c3 0301 	rsbmi	r3, r3, #1
 801b9d4:	9300      	strmi	r3, [sp, #0]
 801b9d6:	2300      	movpl	r3, #0
 801b9d8:	2300      	movmi	r3, #0
 801b9da:	9206      	str	r2, [sp, #24]
 801b9dc:	bf54      	ite	pl
 801b9de:	9300      	strpl	r3, [sp, #0]
 801b9e0:	9306      	strmi	r3, [sp, #24]
 801b9e2:	2f00      	cmp	r7, #0
 801b9e4:	db39      	blt.n	801ba5a <_dtoa_r+0x21a>
 801b9e6:	9b06      	ldr	r3, [sp, #24]
 801b9e8:	970d      	str	r7, [sp, #52]	@ 0x34
 801b9ea:	443b      	add	r3, r7
 801b9ec:	9306      	str	r3, [sp, #24]
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	9308      	str	r3, [sp, #32]
 801b9f2:	9b07      	ldr	r3, [sp, #28]
 801b9f4:	2b09      	cmp	r3, #9
 801b9f6:	d863      	bhi.n	801bac0 <_dtoa_r+0x280>
 801b9f8:	2b05      	cmp	r3, #5
 801b9fa:	bfc4      	itt	gt
 801b9fc:	3b04      	subgt	r3, #4
 801b9fe:	9307      	strgt	r3, [sp, #28]
 801ba00:	9b07      	ldr	r3, [sp, #28]
 801ba02:	f1a3 0302 	sub.w	r3, r3, #2
 801ba06:	bfcc      	ite	gt
 801ba08:	2400      	movgt	r4, #0
 801ba0a:	2401      	movle	r4, #1
 801ba0c:	2b03      	cmp	r3, #3
 801ba0e:	d863      	bhi.n	801bad8 <_dtoa_r+0x298>
 801ba10:	e8df f003 	tbb	[pc, r3]
 801ba14:	2b375452 	.word	0x2b375452
 801ba18:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801ba1c:	441e      	add	r6, r3
 801ba1e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801ba22:	2b20      	cmp	r3, #32
 801ba24:	bfc1      	itttt	gt
 801ba26:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801ba2a:	409f      	lslgt	r7, r3
 801ba2c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801ba30:	fa24 f303 	lsrgt.w	r3, r4, r3
 801ba34:	bfd6      	itet	le
 801ba36:	f1c3 0320 	rsble	r3, r3, #32
 801ba3a:	ea47 0003 	orrgt.w	r0, r7, r3
 801ba3e:	fa04 f003 	lslle.w	r0, r4, r3
 801ba42:	f7e4 fd6f 	bl	8000524 <__aeabi_ui2d>
 801ba46:	2201      	movs	r2, #1
 801ba48:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801ba4c:	3e01      	subs	r6, #1
 801ba4e:	9212      	str	r2, [sp, #72]	@ 0x48
 801ba50:	e776      	b.n	801b940 <_dtoa_r+0x100>
 801ba52:	2301      	movs	r3, #1
 801ba54:	e7b7      	b.n	801b9c6 <_dtoa_r+0x186>
 801ba56:	9010      	str	r0, [sp, #64]	@ 0x40
 801ba58:	e7b6      	b.n	801b9c8 <_dtoa_r+0x188>
 801ba5a:	9b00      	ldr	r3, [sp, #0]
 801ba5c:	1bdb      	subs	r3, r3, r7
 801ba5e:	9300      	str	r3, [sp, #0]
 801ba60:	427b      	negs	r3, r7
 801ba62:	9308      	str	r3, [sp, #32]
 801ba64:	2300      	movs	r3, #0
 801ba66:	930d      	str	r3, [sp, #52]	@ 0x34
 801ba68:	e7c3      	b.n	801b9f2 <_dtoa_r+0x1b2>
 801ba6a:	2301      	movs	r3, #1
 801ba6c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ba6e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ba70:	eb07 0b03 	add.w	fp, r7, r3
 801ba74:	f10b 0301 	add.w	r3, fp, #1
 801ba78:	2b01      	cmp	r3, #1
 801ba7a:	9303      	str	r3, [sp, #12]
 801ba7c:	bfb8      	it	lt
 801ba7e:	2301      	movlt	r3, #1
 801ba80:	e006      	b.n	801ba90 <_dtoa_r+0x250>
 801ba82:	2301      	movs	r3, #1
 801ba84:	9309      	str	r3, [sp, #36]	@ 0x24
 801ba86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	dd28      	ble.n	801bade <_dtoa_r+0x29e>
 801ba8c:	469b      	mov	fp, r3
 801ba8e:	9303      	str	r3, [sp, #12]
 801ba90:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801ba94:	2100      	movs	r1, #0
 801ba96:	2204      	movs	r2, #4
 801ba98:	f102 0514 	add.w	r5, r2, #20
 801ba9c:	429d      	cmp	r5, r3
 801ba9e:	d926      	bls.n	801baee <_dtoa_r+0x2ae>
 801baa0:	6041      	str	r1, [r0, #4]
 801baa2:	4648      	mov	r0, r9
 801baa4:	f000 fd9c 	bl	801c5e0 <_Balloc>
 801baa8:	4682      	mov	sl, r0
 801baaa:	2800      	cmp	r0, #0
 801baac:	d142      	bne.n	801bb34 <_dtoa_r+0x2f4>
 801baae:	4b1e      	ldr	r3, [pc, #120]	@ (801bb28 <_dtoa_r+0x2e8>)
 801bab0:	4602      	mov	r2, r0
 801bab2:	f240 11af 	movw	r1, #431	@ 0x1af
 801bab6:	e6da      	b.n	801b86e <_dtoa_r+0x2e>
 801bab8:	2300      	movs	r3, #0
 801baba:	e7e3      	b.n	801ba84 <_dtoa_r+0x244>
 801babc:	2300      	movs	r3, #0
 801babe:	e7d5      	b.n	801ba6c <_dtoa_r+0x22c>
 801bac0:	2401      	movs	r4, #1
 801bac2:	2300      	movs	r3, #0
 801bac4:	9307      	str	r3, [sp, #28]
 801bac6:	9409      	str	r4, [sp, #36]	@ 0x24
 801bac8:	f04f 3bff 	mov.w	fp, #4294967295
 801bacc:	2200      	movs	r2, #0
 801bace:	f8cd b00c 	str.w	fp, [sp, #12]
 801bad2:	2312      	movs	r3, #18
 801bad4:	920c      	str	r2, [sp, #48]	@ 0x30
 801bad6:	e7db      	b.n	801ba90 <_dtoa_r+0x250>
 801bad8:	2301      	movs	r3, #1
 801bada:	9309      	str	r3, [sp, #36]	@ 0x24
 801badc:	e7f4      	b.n	801bac8 <_dtoa_r+0x288>
 801bade:	f04f 0b01 	mov.w	fp, #1
 801bae2:	f8cd b00c 	str.w	fp, [sp, #12]
 801bae6:	465b      	mov	r3, fp
 801bae8:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801baec:	e7d0      	b.n	801ba90 <_dtoa_r+0x250>
 801baee:	3101      	adds	r1, #1
 801baf0:	0052      	lsls	r2, r2, #1
 801baf2:	e7d1      	b.n	801ba98 <_dtoa_r+0x258>
 801baf4:	f3af 8000 	nop.w
 801baf8:	636f4361 	.word	0x636f4361
 801bafc:	3fd287a7 	.word	0x3fd287a7
 801bb00:	8b60c8b3 	.word	0x8b60c8b3
 801bb04:	3fc68a28 	.word	0x3fc68a28
 801bb08:	509f79fb 	.word	0x509f79fb
 801bb0c:	3fd34413 	.word	0x3fd34413
 801bb10:	08021545 	.word	0x08021545
 801bb14:	0802155c 	.word	0x0802155c
 801bb18:	7ff00000 	.word	0x7ff00000
 801bb1c:	08021637 	.word	0x08021637
 801bb20:	3ff80000 	.word	0x3ff80000
 801bb24:	08021af8 	.word	0x08021af8
 801bb28:	080215b4 	.word	0x080215b4
 801bb2c:	08021541 	.word	0x08021541
 801bb30:	08021636 	.word	0x08021636
 801bb34:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801bb38:	6018      	str	r0, [r3, #0]
 801bb3a:	9b03      	ldr	r3, [sp, #12]
 801bb3c:	2b0e      	cmp	r3, #14
 801bb3e:	f200 80a1 	bhi.w	801bc84 <_dtoa_r+0x444>
 801bb42:	2c00      	cmp	r4, #0
 801bb44:	f000 809e 	beq.w	801bc84 <_dtoa_r+0x444>
 801bb48:	2f00      	cmp	r7, #0
 801bb4a:	dd33      	ble.n	801bbb4 <_dtoa_r+0x374>
 801bb4c:	4b9c      	ldr	r3, [pc, #624]	@ (801bdc0 <_dtoa_r+0x580>)
 801bb4e:	f007 020f 	and.w	r2, r7, #15
 801bb52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bb56:	ed93 7b00 	vldr	d7, [r3]
 801bb5a:	05f8      	lsls	r0, r7, #23
 801bb5c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801bb60:	ea4f 1427 	mov.w	r4, r7, asr #4
 801bb64:	d516      	bpl.n	801bb94 <_dtoa_r+0x354>
 801bb66:	4b97      	ldr	r3, [pc, #604]	@ (801bdc4 <_dtoa_r+0x584>)
 801bb68:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801bb6c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801bb70:	f7e4 fe7c 	bl	800086c <__aeabi_ddiv>
 801bb74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bb78:	f004 040f 	and.w	r4, r4, #15
 801bb7c:	2603      	movs	r6, #3
 801bb7e:	4d91      	ldr	r5, [pc, #580]	@ (801bdc4 <_dtoa_r+0x584>)
 801bb80:	b954      	cbnz	r4, 801bb98 <_dtoa_r+0x358>
 801bb82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801bb86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bb8a:	f7e4 fe6f 	bl	800086c <__aeabi_ddiv>
 801bb8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bb92:	e028      	b.n	801bbe6 <_dtoa_r+0x3a6>
 801bb94:	2602      	movs	r6, #2
 801bb96:	e7f2      	b.n	801bb7e <_dtoa_r+0x33e>
 801bb98:	07e1      	lsls	r1, r4, #31
 801bb9a:	d508      	bpl.n	801bbae <_dtoa_r+0x36e>
 801bb9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801bba0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bba4:	f7e4 fd38 	bl	8000618 <__aeabi_dmul>
 801bba8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801bbac:	3601      	adds	r6, #1
 801bbae:	1064      	asrs	r4, r4, #1
 801bbb0:	3508      	adds	r5, #8
 801bbb2:	e7e5      	b.n	801bb80 <_dtoa_r+0x340>
 801bbb4:	f000 80af 	beq.w	801bd16 <_dtoa_r+0x4d6>
 801bbb8:	427c      	negs	r4, r7
 801bbba:	4b81      	ldr	r3, [pc, #516]	@ (801bdc0 <_dtoa_r+0x580>)
 801bbbc:	4d81      	ldr	r5, [pc, #516]	@ (801bdc4 <_dtoa_r+0x584>)
 801bbbe:	f004 020f 	and.w	r2, r4, #15
 801bbc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801bbc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbca:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801bbce:	f7e4 fd23 	bl	8000618 <__aeabi_dmul>
 801bbd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bbd6:	1124      	asrs	r4, r4, #4
 801bbd8:	2300      	movs	r3, #0
 801bbda:	2602      	movs	r6, #2
 801bbdc:	2c00      	cmp	r4, #0
 801bbde:	f040 808f 	bne.w	801bd00 <_dtoa_r+0x4c0>
 801bbe2:	2b00      	cmp	r3, #0
 801bbe4:	d1d3      	bne.n	801bb8e <_dtoa_r+0x34e>
 801bbe6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bbe8:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801bbec:	2b00      	cmp	r3, #0
 801bbee:	f000 8094 	beq.w	801bd1a <_dtoa_r+0x4da>
 801bbf2:	4b75      	ldr	r3, [pc, #468]	@ (801bdc8 <_dtoa_r+0x588>)
 801bbf4:	2200      	movs	r2, #0
 801bbf6:	4620      	mov	r0, r4
 801bbf8:	4629      	mov	r1, r5
 801bbfa:	f7e4 ff7f 	bl	8000afc <__aeabi_dcmplt>
 801bbfe:	2800      	cmp	r0, #0
 801bc00:	f000 808b 	beq.w	801bd1a <_dtoa_r+0x4da>
 801bc04:	9b03      	ldr	r3, [sp, #12]
 801bc06:	2b00      	cmp	r3, #0
 801bc08:	f000 8087 	beq.w	801bd1a <_dtoa_r+0x4da>
 801bc0c:	f1bb 0f00 	cmp.w	fp, #0
 801bc10:	dd34      	ble.n	801bc7c <_dtoa_r+0x43c>
 801bc12:	4620      	mov	r0, r4
 801bc14:	4b6d      	ldr	r3, [pc, #436]	@ (801bdcc <_dtoa_r+0x58c>)
 801bc16:	2200      	movs	r2, #0
 801bc18:	4629      	mov	r1, r5
 801bc1a:	f7e4 fcfd 	bl	8000618 <__aeabi_dmul>
 801bc1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bc22:	f107 38ff 	add.w	r8, r7, #4294967295
 801bc26:	3601      	adds	r6, #1
 801bc28:	465c      	mov	r4, fp
 801bc2a:	4630      	mov	r0, r6
 801bc2c:	f7e4 fc8a 	bl	8000544 <__aeabi_i2d>
 801bc30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bc34:	f7e4 fcf0 	bl	8000618 <__aeabi_dmul>
 801bc38:	4b65      	ldr	r3, [pc, #404]	@ (801bdd0 <_dtoa_r+0x590>)
 801bc3a:	2200      	movs	r2, #0
 801bc3c:	f7e4 fb36 	bl	80002ac <__adddf3>
 801bc40:	4605      	mov	r5, r0
 801bc42:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801bc46:	2c00      	cmp	r4, #0
 801bc48:	d16a      	bne.n	801bd20 <_dtoa_r+0x4e0>
 801bc4a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bc4e:	4b61      	ldr	r3, [pc, #388]	@ (801bdd4 <_dtoa_r+0x594>)
 801bc50:	2200      	movs	r2, #0
 801bc52:	f7e4 fb29 	bl	80002a8 <__aeabi_dsub>
 801bc56:	4602      	mov	r2, r0
 801bc58:	460b      	mov	r3, r1
 801bc5a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801bc5e:	462a      	mov	r2, r5
 801bc60:	4633      	mov	r3, r6
 801bc62:	f7e4 ff69 	bl	8000b38 <__aeabi_dcmpgt>
 801bc66:	2800      	cmp	r0, #0
 801bc68:	f040 8298 	bne.w	801c19c <_dtoa_r+0x95c>
 801bc6c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bc70:	462a      	mov	r2, r5
 801bc72:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801bc76:	f7e4 ff41 	bl	8000afc <__aeabi_dcmplt>
 801bc7a:	bb38      	cbnz	r0, 801bccc <_dtoa_r+0x48c>
 801bc7c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801bc80:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801bc84:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bc86:	2b00      	cmp	r3, #0
 801bc88:	f2c0 8157 	blt.w	801bf3a <_dtoa_r+0x6fa>
 801bc8c:	2f0e      	cmp	r7, #14
 801bc8e:	f300 8154 	bgt.w	801bf3a <_dtoa_r+0x6fa>
 801bc92:	4b4b      	ldr	r3, [pc, #300]	@ (801bdc0 <_dtoa_r+0x580>)
 801bc94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801bc98:	ed93 7b00 	vldr	d7, [r3]
 801bc9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	ed8d 7b00 	vstr	d7, [sp]
 801bca4:	f280 80e5 	bge.w	801be72 <_dtoa_r+0x632>
 801bca8:	9b03      	ldr	r3, [sp, #12]
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	f300 80e1 	bgt.w	801be72 <_dtoa_r+0x632>
 801bcb0:	d10c      	bne.n	801bccc <_dtoa_r+0x48c>
 801bcb2:	4b48      	ldr	r3, [pc, #288]	@ (801bdd4 <_dtoa_r+0x594>)
 801bcb4:	2200      	movs	r2, #0
 801bcb6:	ec51 0b17 	vmov	r0, r1, d7
 801bcba:	f7e4 fcad 	bl	8000618 <__aeabi_dmul>
 801bcbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bcc2:	f7e4 ff2f 	bl	8000b24 <__aeabi_dcmpge>
 801bcc6:	2800      	cmp	r0, #0
 801bcc8:	f000 8266 	beq.w	801c198 <_dtoa_r+0x958>
 801bccc:	2400      	movs	r4, #0
 801bcce:	4625      	mov	r5, r4
 801bcd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bcd2:	4656      	mov	r6, sl
 801bcd4:	ea6f 0803 	mvn.w	r8, r3
 801bcd8:	2700      	movs	r7, #0
 801bcda:	4621      	mov	r1, r4
 801bcdc:	4648      	mov	r0, r9
 801bcde:	f000 fcbf 	bl	801c660 <_Bfree>
 801bce2:	2d00      	cmp	r5, #0
 801bce4:	f000 80bd 	beq.w	801be62 <_dtoa_r+0x622>
 801bce8:	b12f      	cbz	r7, 801bcf6 <_dtoa_r+0x4b6>
 801bcea:	42af      	cmp	r7, r5
 801bcec:	d003      	beq.n	801bcf6 <_dtoa_r+0x4b6>
 801bcee:	4639      	mov	r1, r7
 801bcf0:	4648      	mov	r0, r9
 801bcf2:	f000 fcb5 	bl	801c660 <_Bfree>
 801bcf6:	4629      	mov	r1, r5
 801bcf8:	4648      	mov	r0, r9
 801bcfa:	f000 fcb1 	bl	801c660 <_Bfree>
 801bcfe:	e0b0      	b.n	801be62 <_dtoa_r+0x622>
 801bd00:	07e2      	lsls	r2, r4, #31
 801bd02:	d505      	bpl.n	801bd10 <_dtoa_r+0x4d0>
 801bd04:	e9d5 2300 	ldrd	r2, r3, [r5]
 801bd08:	f7e4 fc86 	bl	8000618 <__aeabi_dmul>
 801bd0c:	3601      	adds	r6, #1
 801bd0e:	2301      	movs	r3, #1
 801bd10:	1064      	asrs	r4, r4, #1
 801bd12:	3508      	adds	r5, #8
 801bd14:	e762      	b.n	801bbdc <_dtoa_r+0x39c>
 801bd16:	2602      	movs	r6, #2
 801bd18:	e765      	b.n	801bbe6 <_dtoa_r+0x3a6>
 801bd1a:	9c03      	ldr	r4, [sp, #12]
 801bd1c:	46b8      	mov	r8, r7
 801bd1e:	e784      	b.n	801bc2a <_dtoa_r+0x3ea>
 801bd20:	4b27      	ldr	r3, [pc, #156]	@ (801bdc0 <_dtoa_r+0x580>)
 801bd22:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801bd24:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801bd28:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801bd2c:	4454      	add	r4, sl
 801bd2e:	2900      	cmp	r1, #0
 801bd30:	d054      	beq.n	801bddc <_dtoa_r+0x59c>
 801bd32:	4929      	ldr	r1, [pc, #164]	@ (801bdd8 <_dtoa_r+0x598>)
 801bd34:	2000      	movs	r0, #0
 801bd36:	f7e4 fd99 	bl	800086c <__aeabi_ddiv>
 801bd3a:	4633      	mov	r3, r6
 801bd3c:	462a      	mov	r2, r5
 801bd3e:	f7e4 fab3 	bl	80002a8 <__aeabi_dsub>
 801bd42:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801bd46:	4656      	mov	r6, sl
 801bd48:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bd4c:	f7e4 ff14 	bl	8000b78 <__aeabi_d2iz>
 801bd50:	4605      	mov	r5, r0
 801bd52:	f7e4 fbf7 	bl	8000544 <__aeabi_i2d>
 801bd56:	4602      	mov	r2, r0
 801bd58:	460b      	mov	r3, r1
 801bd5a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bd5e:	f7e4 faa3 	bl	80002a8 <__aeabi_dsub>
 801bd62:	3530      	adds	r5, #48	@ 0x30
 801bd64:	4602      	mov	r2, r0
 801bd66:	460b      	mov	r3, r1
 801bd68:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801bd6c:	f806 5b01 	strb.w	r5, [r6], #1
 801bd70:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801bd74:	f7e4 fec2 	bl	8000afc <__aeabi_dcmplt>
 801bd78:	2800      	cmp	r0, #0
 801bd7a:	d172      	bne.n	801be62 <_dtoa_r+0x622>
 801bd7c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801bd80:	4911      	ldr	r1, [pc, #68]	@ (801bdc8 <_dtoa_r+0x588>)
 801bd82:	2000      	movs	r0, #0
 801bd84:	f7e4 fa90 	bl	80002a8 <__aeabi_dsub>
 801bd88:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801bd8c:	f7e4 feb6 	bl	8000afc <__aeabi_dcmplt>
 801bd90:	2800      	cmp	r0, #0
 801bd92:	f040 80b4 	bne.w	801befe <_dtoa_r+0x6be>
 801bd96:	42a6      	cmp	r6, r4
 801bd98:	f43f af70 	beq.w	801bc7c <_dtoa_r+0x43c>
 801bd9c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801bda0:	4b0a      	ldr	r3, [pc, #40]	@ (801bdcc <_dtoa_r+0x58c>)
 801bda2:	2200      	movs	r2, #0
 801bda4:	f7e4 fc38 	bl	8000618 <__aeabi_dmul>
 801bda8:	4b08      	ldr	r3, [pc, #32]	@ (801bdcc <_dtoa_r+0x58c>)
 801bdaa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801bdae:	2200      	movs	r2, #0
 801bdb0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bdb4:	f7e4 fc30 	bl	8000618 <__aeabi_dmul>
 801bdb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801bdbc:	e7c4      	b.n	801bd48 <_dtoa_r+0x508>
 801bdbe:	bf00      	nop
 801bdc0:	08021af8 	.word	0x08021af8
 801bdc4:	08021ad0 	.word	0x08021ad0
 801bdc8:	3ff00000 	.word	0x3ff00000
 801bdcc:	40240000 	.word	0x40240000
 801bdd0:	401c0000 	.word	0x401c0000
 801bdd4:	40140000 	.word	0x40140000
 801bdd8:	3fe00000 	.word	0x3fe00000
 801bddc:	4631      	mov	r1, r6
 801bdde:	4628      	mov	r0, r5
 801bde0:	f7e4 fc1a 	bl	8000618 <__aeabi_dmul>
 801bde4:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801bde8:	9413      	str	r4, [sp, #76]	@ 0x4c
 801bdea:	4656      	mov	r6, sl
 801bdec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801bdf0:	f7e4 fec2 	bl	8000b78 <__aeabi_d2iz>
 801bdf4:	4605      	mov	r5, r0
 801bdf6:	f7e4 fba5 	bl	8000544 <__aeabi_i2d>
 801bdfa:	4602      	mov	r2, r0
 801bdfc:	460b      	mov	r3, r1
 801bdfe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801be02:	f7e4 fa51 	bl	80002a8 <__aeabi_dsub>
 801be06:	3530      	adds	r5, #48	@ 0x30
 801be08:	f806 5b01 	strb.w	r5, [r6], #1
 801be0c:	4602      	mov	r2, r0
 801be0e:	460b      	mov	r3, r1
 801be10:	42a6      	cmp	r6, r4
 801be12:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801be16:	f04f 0200 	mov.w	r2, #0
 801be1a:	d124      	bne.n	801be66 <_dtoa_r+0x626>
 801be1c:	4baf      	ldr	r3, [pc, #700]	@ (801c0dc <_dtoa_r+0x89c>)
 801be1e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801be22:	f7e4 fa43 	bl	80002ac <__adddf3>
 801be26:	4602      	mov	r2, r0
 801be28:	460b      	mov	r3, r1
 801be2a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801be2e:	f7e4 fe83 	bl	8000b38 <__aeabi_dcmpgt>
 801be32:	2800      	cmp	r0, #0
 801be34:	d163      	bne.n	801befe <_dtoa_r+0x6be>
 801be36:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801be3a:	49a8      	ldr	r1, [pc, #672]	@ (801c0dc <_dtoa_r+0x89c>)
 801be3c:	2000      	movs	r0, #0
 801be3e:	f7e4 fa33 	bl	80002a8 <__aeabi_dsub>
 801be42:	4602      	mov	r2, r0
 801be44:	460b      	mov	r3, r1
 801be46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801be4a:	f7e4 fe57 	bl	8000afc <__aeabi_dcmplt>
 801be4e:	2800      	cmp	r0, #0
 801be50:	f43f af14 	beq.w	801bc7c <_dtoa_r+0x43c>
 801be54:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801be56:	1e73      	subs	r3, r6, #1
 801be58:	9313      	str	r3, [sp, #76]	@ 0x4c
 801be5a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801be5e:	2b30      	cmp	r3, #48	@ 0x30
 801be60:	d0f8      	beq.n	801be54 <_dtoa_r+0x614>
 801be62:	4647      	mov	r7, r8
 801be64:	e03b      	b.n	801bede <_dtoa_r+0x69e>
 801be66:	4b9e      	ldr	r3, [pc, #632]	@ (801c0e0 <_dtoa_r+0x8a0>)
 801be68:	f7e4 fbd6 	bl	8000618 <__aeabi_dmul>
 801be6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801be70:	e7bc      	b.n	801bdec <_dtoa_r+0x5ac>
 801be72:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801be76:	4656      	mov	r6, sl
 801be78:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be7c:	4620      	mov	r0, r4
 801be7e:	4629      	mov	r1, r5
 801be80:	f7e4 fcf4 	bl	800086c <__aeabi_ddiv>
 801be84:	f7e4 fe78 	bl	8000b78 <__aeabi_d2iz>
 801be88:	4680      	mov	r8, r0
 801be8a:	f7e4 fb5b 	bl	8000544 <__aeabi_i2d>
 801be8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 801be92:	f7e4 fbc1 	bl	8000618 <__aeabi_dmul>
 801be96:	4602      	mov	r2, r0
 801be98:	460b      	mov	r3, r1
 801be9a:	4620      	mov	r0, r4
 801be9c:	4629      	mov	r1, r5
 801be9e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801bea2:	f7e4 fa01 	bl	80002a8 <__aeabi_dsub>
 801bea6:	f806 4b01 	strb.w	r4, [r6], #1
 801beaa:	9d03      	ldr	r5, [sp, #12]
 801beac:	eba6 040a 	sub.w	r4, r6, sl
 801beb0:	42a5      	cmp	r5, r4
 801beb2:	4602      	mov	r2, r0
 801beb4:	460b      	mov	r3, r1
 801beb6:	d133      	bne.n	801bf20 <_dtoa_r+0x6e0>
 801beb8:	f7e4 f9f8 	bl	80002ac <__adddf3>
 801bebc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bec0:	4604      	mov	r4, r0
 801bec2:	460d      	mov	r5, r1
 801bec4:	f7e4 fe38 	bl	8000b38 <__aeabi_dcmpgt>
 801bec8:	b9c0      	cbnz	r0, 801befc <_dtoa_r+0x6bc>
 801beca:	e9dd 2300 	ldrd	r2, r3, [sp]
 801bece:	4620      	mov	r0, r4
 801bed0:	4629      	mov	r1, r5
 801bed2:	f7e4 fe09 	bl	8000ae8 <__aeabi_dcmpeq>
 801bed6:	b110      	cbz	r0, 801bede <_dtoa_r+0x69e>
 801bed8:	f018 0f01 	tst.w	r8, #1
 801bedc:	d10e      	bne.n	801befc <_dtoa_r+0x6bc>
 801bede:	9902      	ldr	r1, [sp, #8]
 801bee0:	4648      	mov	r0, r9
 801bee2:	f000 fbbd 	bl	801c660 <_Bfree>
 801bee6:	2300      	movs	r3, #0
 801bee8:	7033      	strb	r3, [r6, #0]
 801beea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801beec:	3701      	adds	r7, #1
 801beee:	601f      	str	r7, [r3, #0]
 801bef0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801bef2:	2b00      	cmp	r3, #0
 801bef4:	f000 824b 	beq.w	801c38e <_dtoa_r+0xb4e>
 801bef8:	601e      	str	r6, [r3, #0]
 801befa:	e248      	b.n	801c38e <_dtoa_r+0xb4e>
 801befc:	46b8      	mov	r8, r7
 801befe:	4633      	mov	r3, r6
 801bf00:	461e      	mov	r6, r3
 801bf02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801bf06:	2a39      	cmp	r2, #57	@ 0x39
 801bf08:	d106      	bne.n	801bf18 <_dtoa_r+0x6d8>
 801bf0a:	459a      	cmp	sl, r3
 801bf0c:	d1f8      	bne.n	801bf00 <_dtoa_r+0x6c0>
 801bf0e:	2230      	movs	r2, #48	@ 0x30
 801bf10:	f108 0801 	add.w	r8, r8, #1
 801bf14:	f88a 2000 	strb.w	r2, [sl]
 801bf18:	781a      	ldrb	r2, [r3, #0]
 801bf1a:	3201      	adds	r2, #1
 801bf1c:	701a      	strb	r2, [r3, #0]
 801bf1e:	e7a0      	b.n	801be62 <_dtoa_r+0x622>
 801bf20:	4b6f      	ldr	r3, [pc, #444]	@ (801c0e0 <_dtoa_r+0x8a0>)
 801bf22:	2200      	movs	r2, #0
 801bf24:	f7e4 fb78 	bl	8000618 <__aeabi_dmul>
 801bf28:	2200      	movs	r2, #0
 801bf2a:	2300      	movs	r3, #0
 801bf2c:	4604      	mov	r4, r0
 801bf2e:	460d      	mov	r5, r1
 801bf30:	f7e4 fdda 	bl	8000ae8 <__aeabi_dcmpeq>
 801bf34:	2800      	cmp	r0, #0
 801bf36:	d09f      	beq.n	801be78 <_dtoa_r+0x638>
 801bf38:	e7d1      	b.n	801bede <_dtoa_r+0x69e>
 801bf3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801bf3c:	2a00      	cmp	r2, #0
 801bf3e:	f000 80ea 	beq.w	801c116 <_dtoa_r+0x8d6>
 801bf42:	9a07      	ldr	r2, [sp, #28]
 801bf44:	2a01      	cmp	r2, #1
 801bf46:	f300 80cd 	bgt.w	801c0e4 <_dtoa_r+0x8a4>
 801bf4a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bf4c:	2a00      	cmp	r2, #0
 801bf4e:	f000 80c1 	beq.w	801c0d4 <_dtoa_r+0x894>
 801bf52:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801bf56:	9c08      	ldr	r4, [sp, #32]
 801bf58:	9e00      	ldr	r6, [sp, #0]
 801bf5a:	9a00      	ldr	r2, [sp, #0]
 801bf5c:	441a      	add	r2, r3
 801bf5e:	9200      	str	r2, [sp, #0]
 801bf60:	9a06      	ldr	r2, [sp, #24]
 801bf62:	2101      	movs	r1, #1
 801bf64:	441a      	add	r2, r3
 801bf66:	4648      	mov	r0, r9
 801bf68:	9206      	str	r2, [sp, #24]
 801bf6a:	f000 fc77 	bl	801c85c <__i2b>
 801bf6e:	4605      	mov	r5, r0
 801bf70:	b166      	cbz	r6, 801bf8c <_dtoa_r+0x74c>
 801bf72:	9b06      	ldr	r3, [sp, #24]
 801bf74:	2b00      	cmp	r3, #0
 801bf76:	dd09      	ble.n	801bf8c <_dtoa_r+0x74c>
 801bf78:	42b3      	cmp	r3, r6
 801bf7a:	9a00      	ldr	r2, [sp, #0]
 801bf7c:	bfa8      	it	ge
 801bf7e:	4633      	movge	r3, r6
 801bf80:	1ad2      	subs	r2, r2, r3
 801bf82:	9200      	str	r2, [sp, #0]
 801bf84:	9a06      	ldr	r2, [sp, #24]
 801bf86:	1af6      	subs	r6, r6, r3
 801bf88:	1ad3      	subs	r3, r2, r3
 801bf8a:	9306      	str	r3, [sp, #24]
 801bf8c:	9b08      	ldr	r3, [sp, #32]
 801bf8e:	b30b      	cbz	r3, 801bfd4 <_dtoa_r+0x794>
 801bf90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf92:	2b00      	cmp	r3, #0
 801bf94:	f000 80c6 	beq.w	801c124 <_dtoa_r+0x8e4>
 801bf98:	2c00      	cmp	r4, #0
 801bf9a:	f000 80c0 	beq.w	801c11e <_dtoa_r+0x8de>
 801bf9e:	4629      	mov	r1, r5
 801bfa0:	4622      	mov	r2, r4
 801bfa2:	4648      	mov	r0, r9
 801bfa4:	f000 fd12 	bl	801c9cc <__pow5mult>
 801bfa8:	9a02      	ldr	r2, [sp, #8]
 801bfaa:	4601      	mov	r1, r0
 801bfac:	4605      	mov	r5, r0
 801bfae:	4648      	mov	r0, r9
 801bfb0:	f000 fc6a 	bl	801c888 <__multiply>
 801bfb4:	9902      	ldr	r1, [sp, #8]
 801bfb6:	4680      	mov	r8, r0
 801bfb8:	4648      	mov	r0, r9
 801bfba:	f000 fb51 	bl	801c660 <_Bfree>
 801bfbe:	9b08      	ldr	r3, [sp, #32]
 801bfc0:	1b1b      	subs	r3, r3, r4
 801bfc2:	9308      	str	r3, [sp, #32]
 801bfc4:	f000 80b1 	beq.w	801c12a <_dtoa_r+0x8ea>
 801bfc8:	9a08      	ldr	r2, [sp, #32]
 801bfca:	4641      	mov	r1, r8
 801bfcc:	4648      	mov	r0, r9
 801bfce:	f000 fcfd 	bl	801c9cc <__pow5mult>
 801bfd2:	9002      	str	r0, [sp, #8]
 801bfd4:	2101      	movs	r1, #1
 801bfd6:	4648      	mov	r0, r9
 801bfd8:	f000 fc40 	bl	801c85c <__i2b>
 801bfdc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801bfde:	4604      	mov	r4, r0
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	f000 81d8 	beq.w	801c396 <_dtoa_r+0xb56>
 801bfe6:	461a      	mov	r2, r3
 801bfe8:	4601      	mov	r1, r0
 801bfea:	4648      	mov	r0, r9
 801bfec:	f000 fcee 	bl	801c9cc <__pow5mult>
 801bff0:	9b07      	ldr	r3, [sp, #28]
 801bff2:	2b01      	cmp	r3, #1
 801bff4:	4604      	mov	r4, r0
 801bff6:	f300 809f 	bgt.w	801c138 <_dtoa_r+0x8f8>
 801bffa:	9b04      	ldr	r3, [sp, #16]
 801bffc:	2b00      	cmp	r3, #0
 801bffe:	f040 8097 	bne.w	801c130 <_dtoa_r+0x8f0>
 801c002:	9b05      	ldr	r3, [sp, #20]
 801c004:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801c008:	2b00      	cmp	r3, #0
 801c00a:	f040 8093 	bne.w	801c134 <_dtoa_r+0x8f4>
 801c00e:	9b05      	ldr	r3, [sp, #20]
 801c010:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801c014:	0d1b      	lsrs	r3, r3, #20
 801c016:	051b      	lsls	r3, r3, #20
 801c018:	b133      	cbz	r3, 801c028 <_dtoa_r+0x7e8>
 801c01a:	9b00      	ldr	r3, [sp, #0]
 801c01c:	3301      	adds	r3, #1
 801c01e:	9300      	str	r3, [sp, #0]
 801c020:	9b06      	ldr	r3, [sp, #24]
 801c022:	3301      	adds	r3, #1
 801c024:	9306      	str	r3, [sp, #24]
 801c026:	2301      	movs	r3, #1
 801c028:	9308      	str	r3, [sp, #32]
 801c02a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c02c:	2b00      	cmp	r3, #0
 801c02e:	f000 81b8 	beq.w	801c3a2 <_dtoa_r+0xb62>
 801c032:	6923      	ldr	r3, [r4, #16]
 801c034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801c038:	6918      	ldr	r0, [r3, #16]
 801c03a:	f000 fbc3 	bl	801c7c4 <__hi0bits>
 801c03e:	f1c0 0020 	rsb	r0, r0, #32
 801c042:	9b06      	ldr	r3, [sp, #24]
 801c044:	4418      	add	r0, r3
 801c046:	f010 001f 	ands.w	r0, r0, #31
 801c04a:	f000 8082 	beq.w	801c152 <_dtoa_r+0x912>
 801c04e:	f1c0 0320 	rsb	r3, r0, #32
 801c052:	2b04      	cmp	r3, #4
 801c054:	dd73      	ble.n	801c13e <_dtoa_r+0x8fe>
 801c056:	9b00      	ldr	r3, [sp, #0]
 801c058:	f1c0 001c 	rsb	r0, r0, #28
 801c05c:	4403      	add	r3, r0
 801c05e:	9300      	str	r3, [sp, #0]
 801c060:	9b06      	ldr	r3, [sp, #24]
 801c062:	4403      	add	r3, r0
 801c064:	4406      	add	r6, r0
 801c066:	9306      	str	r3, [sp, #24]
 801c068:	9b00      	ldr	r3, [sp, #0]
 801c06a:	2b00      	cmp	r3, #0
 801c06c:	dd05      	ble.n	801c07a <_dtoa_r+0x83a>
 801c06e:	9902      	ldr	r1, [sp, #8]
 801c070:	461a      	mov	r2, r3
 801c072:	4648      	mov	r0, r9
 801c074:	f000 fd04 	bl	801ca80 <__lshift>
 801c078:	9002      	str	r0, [sp, #8]
 801c07a:	9b06      	ldr	r3, [sp, #24]
 801c07c:	2b00      	cmp	r3, #0
 801c07e:	dd05      	ble.n	801c08c <_dtoa_r+0x84c>
 801c080:	4621      	mov	r1, r4
 801c082:	461a      	mov	r2, r3
 801c084:	4648      	mov	r0, r9
 801c086:	f000 fcfb 	bl	801ca80 <__lshift>
 801c08a:	4604      	mov	r4, r0
 801c08c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801c08e:	2b00      	cmp	r3, #0
 801c090:	d061      	beq.n	801c156 <_dtoa_r+0x916>
 801c092:	9802      	ldr	r0, [sp, #8]
 801c094:	4621      	mov	r1, r4
 801c096:	f000 fd5f 	bl	801cb58 <__mcmp>
 801c09a:	2800      	cmp	r0, #0
 801c09c:	da5b      	bge.n	801c156 <_dtoa_r+0x916>
 801c09e:	2300      	movs	r3, #0
 801c0a0:	9902      	ldr	r1, [sp, #8]
 801c0a2:	220a      	movs	r2, #10
 801c0a4:	4648      	mov	r0, r9
 801c0a6:	f000 fafd 	bl	801c6a4 <__multadd>
 801c0aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c0ac:	9002      	str	r0, [sp, #8]
 801c0ae:	f107 38ff 	add.w	r8, r7, #4294967295
 801c0b2:	2b00      	cmp	r3, #0
 801c0b4:	f000 8177 	beq.w	801c3a6 <_dtoa_r+0xb66>
 801c0b8:	4629      	mov	r1, r5
 801c0ba:	2300      	movs	r3, #0
 801c0bc:	220a      	movs	r2, #10
 801c0be:	4648      	mov	r0, r9
 801c0c0:	f000 faf0 	bl	801c6a4 <__multadd>
 801c0c4:	f1bb 0f00 	cmp.w	fp, #0
 801c0c8:	4605      	mov	r5, r0
 801c0ca:	dc6f      	bgt.n	801c1ac <_dtoa_r+0x96c>
 801c0cc:	9b07      	ldr	r3, [sp, #28]
 801c0ce:	2b02      	cmp	r3, #2
 801c0d0:	dc49      	bgt.n	801c166 <_dtoa_r+0x926>
 801c0d2:	e06b      	b.n	801c1ac <_dtoa_r+0x96c>
 801c0d4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801c0d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801c0da:	e73c      	b.n	801bf56 <_dtoa_r+0x716>
 801c0dc:	3fe00000 	.word	0x3fe00000
 801c0e0:	40240000 	.word	0x40240000
 801c0e4:	9b03      	ldr	r3, [sp, #12]
 801c0e6:	1e5c      	subs	r4, r3, #1
 801c0e8:	9b08      	ldr	r3, [sp, #32]
 801c0ea:	42a3      	cmp	r3, r4
 801c0ec:	db09      	blt.n	801c102 <_dtoa_r+0x8c2>
 801c0ee:	1b1c      	subs	r4, r3, r4
 801c0f0:	9b03      	ldr	r3, [sp, #12]
 801c0f2:	2b00      	cmp	r3, #0
 801c0f4:	f6bf af30 	bge.w	801bf58 <_dtoa_r+0x718>
 801c0f8:	9b00      	ldr	r3, [sp, #0]
 801c0fa:	9a03      	ldr	r2, [sp, #12]
 801c0fc:	1a9e      	subs	r6, r3, r2
 801c0fe:	2300      	movs	r3, #0
 801c100:	e72b      	b.n	801bf5a <_dtoa_r+0x71a>
 801c102:	9b08      	ldr	r3, [sp, #32]
 801c104:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801c106:	9408      	str	r4, [sp, #32]
 801c108:	1ae3      	subs	r3, r4, r3
 801c10a:	441a      	add	r2, r3
 801c10c:	9e00      	ldr	r6, [sp, #0]
 801c10e:	9b03      	ldr	r3, [sp, #12]
 801c110:	920d      	str	r2, [sp, #52]	@ 0x34
 801c112:	2400      	movs	r4, #0
 801c114:	e721      	b.n	801bf5a <_dtoa_r+0x71a>
 801c116:	9c08      	ldr	r4, [sp, #32]
 801c118:	9e00      	ldr	r6, [sp, #0]
 801c11a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801c11c:	e728      	b.n	801bf70 <_dtoa_r+0x730>
 801c11e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801c122:	e751      	b.n	801bfc8 <_dtoa_r+0x788>
 801c124:	9a08      	ldr	r2, [sp, #32]
 801c126:	9902      	ldr	r1, [sp, #8]
 801c128:	e750      	b.n	801bfcc <_dtoa_r+0x78c>
 801c12a:	f8cd 8008 	str.w	r8, [sp, #8]
 801c12e:	e751      	b.n	801bfd4 <_dtoa_r+0x794>
 801c130:	2300      	movs	r3, #0
 801c132:	e779      	b.n	801c028 <_dtoa_r+0x7e8>
 801c134:	9b04      	ldr	r3, [sp, #16]
 801c136:	e777      	b.n	801c028 <_dtoa_r+0x7e8>
 801c138:	2300      	movs	r3, #0
 801c13a:	9308      	str	r3, [sp, #32]
 801c13c:	e779      	b.n	801c032 <_dtoa_r+0x7f2>
 801c13e:	d093      	beq.n	801c068 <_dtoa_r+0x828>
 801c140:	9a00      	ldr	r2, [sp, #0]
 801c142:	331c      	adds	r3, #28
 801c144:	441a      	add	r2, r3
 801c146:	9200      	str	r2, [sp, #0]
 801c148:	9a06      	ldr	r2, [sp, #24]
 801c14a:	441a      	add	r2, r3
 801c14c:	441e      	add	r6, r3
 801c14e:	9206      	str	r2, [sp, #24]
 801c150:	e78a      	b.n	801c068 <_dtoa_r+0x828>
 801c152:	4603      	mov	r3, r0
 801c154:	e7f4      	b.n	801c140 <_dtoa_r+0x900>
 801c156:	9b03      	ldr	r3, [sp, #12]
 801c158:	2b00      	cmp	r3, #0
 801c15a:	46b8      	mov	r8, r7
 801c15c:	dc20      	bgt.n	801c1a0 <_dtoa_r+0x960>
 801c15e:	469b      	mov	fp, r3
 801c160:	9b07      	ldr	r3, [sp, #28]
 801c162:	2b02      	cmp	r3, #2
 801c164:	dd1e      	ble.n	801c1a4 <_dtoa_r+0x964>
 801c166:	f1bb 0f00 	cmp.w	fp, #0
 801c16a:	f47f adb1 	bne.w	801bcd0 <_dtoa_r+0x490>
 801c16e:	4621      	mov	r1, r4
 801c170:	465b      	mov	r3, fp
 801c172:	2205      	movs	r2, #5
 801c174:	4648      	mov	r0, r9
 801c176:	f000 fa95 	bl	801c6a4 <__multadd>
 801c17a:	4601      	mov	r1, r0
 801c17c:	4604      	mov	r4, r0
 801c17e:	9802      	ldr	r0, [sp, #8]
 801c180:	f000 fcea 	bl	801cb58 <__mcmp>
 801c184:	2800      	cmp	r0, #0
 801c186:	f77f ada3 	ble.w	801bcd0 <_dtoa_r+0x490>
 801c18a:	4656      	mov	r6, sl
 801c18c:	2331      	movs	r3, #49	@ 0x31
 801c18e:	f806 3b01 	strb.w	r3, [r6], #1
 801c192:	f108 0801 	add.w	r8, r8, #1
 801c196:	e59f      	b.n	801bcd8 <_dtoa_r+0x498>
 801c198:	9c03      	ldr	r4, [sp, #12]
 801c19a:	46b8      	mov	r8, r7
 801c19c:	4625      	mov	r5, r4
 801c19e:	e7f4      	b.n	801c18a <_dtoa_r+0x94a>
 801c1a0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801c1a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	f000 8101 	beq.w	801c3ae <_dtoa_r+0xb6e>
 801c1ac:	2e00      	cmp	r6, #0
 801c1ae:	dd05      	ble.n	801c1bc <_dtoa_r+0x97c>
 801c1b0:	4629      	mov	r1, r5
 801c1b2:	4632      	mov	r2, r6
 801c1b4:	4648      	mov	r0, r9
 801c1b6:	f000 fc63 	bl	801ca80 <__lshift>
 801c1ba:	4605      	mov	r5, r0
 801c1bc:	9b08      	ldr	r3, [sp, #32]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d05c      	beq.n	801c27c <_dtoa_r+0xa3c>
 801c1c2:	6869      	ldr	r1, [r5, #4]
 801c1c4:	4648      	mov	r0, r9
 801c1c6:	f000 fa0b 	bl	801c5e0 <_Balloc>
 801c1ca:	4606      	mov	r6, r0
 801c1cc:	b928      	cbnz	r0, 801c1da <_dtoa_r+0x99a>
 801c1ce:	4b82      	ldr	r3, [pc, #520]	@ (801c3d8 <_dtoa_r+0xb98>)
 801c1d0:	4602      	mov	r2, r0
 801c1d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801c1d6:	f7ff bb4a 	b.w	801b86e <_dtoa_r+0x2e>
 801c1da:	692a      	ldr	r2, [r5, #16]
 801c1dc:	3202      	adds	r2, #2
 801c1de:	0092      	lsls	r2, r2, #2
 801c1e0:	f105 010c 	add.w	r1, r5, #12
 801c1e4:	300c      	adds	r0, #12
 801c1e6:	f7ff fa74 	bl	801b6d2 <memcpy>
 801c1ea:	2201      	movs	r2, #1
 801c1ec:	4631      	mov	r1, r6
 801c1ee:	4648      	mov	r0, r9
 801c1f0:	f000 fc46 	bl	801ca80 <__lshift>
 801c1f4:	f10a 0301 	add.w	r3, sl, #1
 801c1f8:	9300      	str	r3, [sp, #0]
 801c1fa:	eb0a 030b 	add.w	r3, sl, fp
 801c1fe:	9308      	str	r3, [sp, #32]
 801c200:	9b04      	ldr	r3, [sp, #16]
 801c202:	f003 0301 	and.w	r3, r3, #1
 801c206:	462f      	mov	r7, r5
 801c208:	9306      	str	r3, [sp, #24]
 801c20a:	4605      	mov	r5, r0
 801c20c:	9b00      	ldr	r3, [sp, #0]
 801c20e:	9802      	ldr	r0, [sp, #8]
 801c210:	4621      	mov	r1, r4
 801c212:	f103 3bff 	add.w	fp, r3, #4294967295
 801c216:	f7ff fa89 	bl	801b72c <quorem>
 801c21a:	4603      	mov	r3, r0
 801c21c:	3330      	adds	r3, #48	@ 0x30
 801c21e:	9003      	str	r0, [sp, #12]
 801c220:	4639      	mov	r1, r7
 801c222:	9802      	ldr	r0, [sp, #8]
 801c224:	9309      	str	r3, [sp, #36]	@ 0x24
 801c226:	f000 fc97 	bl	801cb58 <__mcmp>
 801c22a:	462a      	mov	r2, r5
 801c22c:	9004      	str	r0, [sp, #16]
 801c22e:	4621      	mov	r1, r4
 801c230:	4648      	mov	r0, r9
 801c232:	f000 fcad 	bl	801cb90 <__mdiff>
 801c236:	68c2      	ldr	r2, [r0, #12]
 801c238:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c23a:	4606      	mov	r6, r0
 801c23c:	bb02      	cbnz	r2, 801c280 <_dtoa_r+0xa40>
 801c23e:	4601      	mov	r1, r0
 801c240:	9802      	ldr	r0, [sp, #8]
 801c242:	f000 fc89 	bl	801cb58 <__mcmp>
 801c246:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c248:	4602      	mov	r2, r0
 801c24a:	4631      	mov	r1, r6
 801c24c:	4648      	mov	r0, r9
 801c24e:	920c      	str	r2, [sp, #48]	@ 0x30
 801c250:	9309      	str	r3, [sp, #36]	@ 0x24
 801c252:	f000 fa05 	bl	801c660 <_Bfree>
 801c256:	9b07      	ldr	r3, [sp, #28]
 801c258:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c25a:	9e00      	ldr	r6, [sp, #0]
 801c25c:	ea42 0103 	orr.w	r1, r2, r3
 801c260:	9b06      	ldr	r3, [sp, #24]
 801c262:	4319      	orrs	r1, r3
 801c264:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c266:	d10d      	bne.n	801c284 <_dtoa_r+0xa44>
 801c268:	2b39      	cmp	r3, #57	@ 0x39
 801c26a:	d027      	beq.n	801c2bc <_dtoa_r+0xa7c>
 801c26c:	9a04      	ldr	r2, [sp, #16]
 801c26e:	2a00      	cmp	r2, #0
 801c270:	dd01      	ble.n	801c276 <_dtoa_r+0xa36>
 801c272:	9b03      	ldr	r3, [sp, #12]
 801c274:	3331      	adds	r3, #49	@ 0x31
 801c276:	f88b 3000 	strb.w	r3, [fp]
 801c27a:	e52e      	b.n	801bcda <_dtoa_r+0x49a>
 801c27c:	4628      	mov	r0, r5
 801c27e:	e7b9      	b.n	801c1f4 <_dtoa_r+0x9b4>
 801c280:	2201      	movs	r2, #1
 801c282:	e7e2      	b.n	801c24a <_dtoa_r+0xa0a>
 801c284:	9904      	ldr	r1, [sp, #16]
 801c286:	2900      	cmp	r1, #0
 801c288:	db04      	blt.n	801c294 <_dtoa_r+0xa54>
 801c28a:	9807      	ldr	r0, [sp, #28]
 801c28c:	4301      	orrs	r1, r0
 801c28e:	9806      	ldr	r0, [sp, #24]
 801c290:	4301      	orrs	r1, r0
 801c292:	d120      	bne.n	801c2d6 <_dtoa_r+0xa96>
 801c294:	2a00      	cmp	r2, #0
 801c296:	ddee      	ble.n	801c276 <_dtoa_r+0xa36>
 801c298:	9902      	ldr	r1, [sp, #8]
 801c29a:	9300      	str	r3, [sp, #0]
 801c29c:	2201      	movs	r2, #1
 801c29e:	4648      	mov	r0, r9
 801c2a0:	f000 fbee 	bl	801ca80 <__lshift>
 801c2a4:	4621      	mov	r1, r4
 801c2a6:	9002      	str	r0, [sp, #8]
 801c2a8:	f000 fc56 	bl	801cb58 <__mcmp>
 801c2ac:	2800      	cmp	r0, #0
 801c2ae:	9b00      	ldr	r3, [sp, #0]
 801c2b0:	dc02      	bgt.n	801c2b8 <_dtoa_r+0xa78>
 801c2b2:	d1e0      	bne.n	801c276 <_dtoa_r+0xa36>
 801c2b4:	07da      	lsls	r2, r3, #31
 801c2b6:	d5de      	bpl.n	801c276 <_dtoa_r+0xa36>
 801c2b8:	2b39      	cmp	r3, #57	@ 0x39
 801c2ba:	d1da      	bne.n	801c272 <_dtoa_r+0xa32>
 801c2bc:	2339      	movs	r3, #57	@ 0x39
 801c2be:	f88b 3000 	strb.w	r3, [fp]
 801c2c2:	4633      	mov	r3, r6
 801c2c4:	461e      	mov	r6, r3
 801c2c6:	3b01      	subs	r3, #1
 801c2c8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801c2cc:	2a39      	cmp	r2, #57	@ 0x39
 801c2ce:	d04e      	beq.n	801c36e <_dtoa_r+0xb2e>
 801c2d0:	3201      	adds	r2, #1
 801c2d2:	701a      	strb	r2, [r3, #0]
 801c2d4:	e501      	b.n	801bcda <_dtoa_r+0x49a>
 801c2d6:	2a00      	cmp	r2, #0
 801c2d8:	dd03      	ble.n	801c2e2 <_dtoa_r+0xaa2>
 801c2da:	2b39      	cmp	r3, #57	@ 0x39
 801c2dc:	d0ee      	beq.n	801c2bc <_dtoa_r+0xa7c>
 801c2de:	3301      	adds	r3, #1
 801c2e0:	e7c9      	b.n	801c276 <_dtoa_r+0xa36>
 801c2e2:	9a00      	ldr	r2, [sp, #0]
 801c2e4:	9908      	ldr	r1, [sp, #32]
 801c2e6:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c2ea:	428a      	cmp	r2, r1
 801c2ec:	d028      	beq.n	801c340 <_dtoa_r+0xb00>
 801c2ee:	9902      	ldr	r1, [sp, #8]
 801c2f0:	2300      	movs	r3, #0
 801c2f2:	220a      	movs	r2, #10
 801c2f4:	4648      	mov	r0, r9
 801c2f6:	f000 f9d5 	bl	801c6a4 <__multadd>
 801c2fa:	42af      	cmp	r7, r5
 801c2fc:	9002      	str	r0, [sp, #8]
 801c2fe:	f04f 0300 	mov.w	r3, #0
 801c302:	f04f 020a 	mov.w	r2, #10
 801c306:	4639      	mov	r1, r7
 801c308:	4648      	mov	r0, r9
 801c30a:	d107      	bne.n	801c31c <_dtoa_r+0xadc>
 801c30c:	f000 f9ca 	bl	801c6a4 <__multadd>
 801c310:	4607      	mov	r7, r0
 801c312:	4605      	mov	r5, r0
 801c314:	9b00      	ldr	r3, [sp, #0]
 801c316:	3301      	adds	r3, #1
 801c318:	9300      	str	r3, [sp, #0]
 801c31a:	e777      	b.n	801c20c <_dtoa_r+0x9cc>
 801c31c:	f000 f9c2 	bl	801c6a4 <__multadd>
 801c320:	4629      	mov	r1, r5
 801c322:	4607      	mov	r7, r0
 801c324:	2300      	movs	r3, #0
 801c326:	220a      	movs	r2, #10
 801c328:	4648      	mov	r0, r9
 801c32a:	f000 f9bb 	bl	801c6a4 <__multadd>
 801c32e:	4605      	mov	r5, r0
 801c330:	e7f0      	b.n	801c314 <_dtoa_r+0xad4>
 801c332:	f1bb 0f00 	cmp.w	fp, #0
 801c336:	bfcc      	ite	gt
 801c338:	465e      	movgt	r6, fp
 801c33a:	2601      	movle	r6, #1
 801c33c:	4456      	add	r6, sl
 801c33e:	2700      	movs	r7, #0
 801c340:	9902      	ldr	r1, [sp, #8]
 801c342:	9300      	str	r3, [sp, #0]
 801c344:	2201      	movs	r2, #1
 801c346:	4648      	mov	r0, r9
 801c348:	f000 fb9a 	bl	801ca80 <__lshift>
 801c34c:	4621      	mov	r1, r4
 801c34e:	9002      	str	r0, [sp, #8]
 801c350:	f000 fc02 	bl	801cb58 <__mcmp>
 801c354:	2800      	cmp	r0, #0
 801c356:	dcb4      	bgt.n	801c2c2 <_dtoa_r+0xa82>
 801c358:	d102      	bne.n	801c360 <_dtoa_r+0xb20>
 801c35a:	9b00      	ldr	r3, [sp, #0]
 801c35c:	07db      	lsls	r3, r3, #31
 801c35e:	d4b0      	bmi.n	801c2c2 <_dtoa_r+0xa82>
 801c360:	4633      	mov	r3, r6
 801c362:	461e      	mov	r6, r3
 801c364:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c368:	2a30      	cmp	r2, #48	@ 0x30
 801c36a:	d0fa      	beq.n	801c362 <_dtoa_r+0xb22>
 801c36c:	e4b5      	b.n	801bcda <_dtoa_r+0x49a>
 801c36e:	459a      	cmp	sl, r3
 801c370:	d1a8      	bne.n	801c2c4 <_dtoa_r+0xa84>
 801c372:	2331      	movs	r3, #49	@ 0x31
 801c374:	f108 0801 	add.w	r8, r8, #1
 801c378:	f88a 3000 	strb.w	r3, [sl]
 801c37c:	e4ad      	b.n	801bcda <_dtoa_r+0x49a>
 801c37e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801c380:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801c3dc <_dtoa_r+0xb9c>
 801c384:	b11b      	cbz	r3, 801c38e <_dtoa_r+0xb4e>
 801c386:	f10a 0308 	add.w	r3, sl, #8
 801c38a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801c38c:	6013      	str	r3, [r2, #0]
 801c38e:	4650      	mov	r0, sl
 801c390:	b017      	add	sp, #92	@ 0x5c
 801c392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c396:	9b07      	ldr	r3, [sp, #28]
 801c398:	2b01      	cmp	r3, #1
 801c39a:	f77f ae2e 	ble.w	801bffa <_dtoa_r+0x7ba>
 801c39e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c3a0:	9308      	str	r3, [sp, #32]
 801c3a2:	2001      	movs	r0, #1
 801c3a4:	e64d      	b.n	801c042 <_dtoa_r+0x802>
 801c3a6:	f1bb 0f00 	cmp.w	fp, #0
 801c3aa:	f77f aed9 	ble.w	801c160 <_dtoa_r+0x920>
 801c3ae:	4656      	mov	r6, sl
 801c3b0:	9802      	ldr	r0, [sp, #8]
 801c3b2:	4621      	mov	r1, r4
 801c3b4:	f7ff f9ba 	bl	801b72c <quorem>
 801c3b8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801c3bc:	f806 3b01 	strb.w	r3, [r6], #1
 801c3c0:	eba6 020a 	sub.w	r2, r6, sl
 801c3c4:	4593      	cmp	fp, r2
 801c3c6:	ddb4      	ble.n	801c332 <_dtoa_r+0xaf2>
 801c3c8:	9902      	ldr	r1, [sp, #8]
 801c3ca:	2300      	movs	r3, #0
 801c3cc:	220a      	movs	r2, #10
 801c3ce:	4648      	mov	r0, r9
 801c3d0:	f000 f968 	bl	801c6a4 <__multadd>
 801c3d4:	9002      	str	r0, [sp, #8]
 801c3d6:	e7eb      	b.n	801c3b0 <_dtoa_r+0xb70>
 801c3d8:	080215b4 	.word	0x080215b4
 801c3dc:	08021538 	.word	0x08021538

0801c3e0 <_free_r>:
 801c3e0:	b538      	push	{r3, r4, r5, lr}
 801c3e2:	4605      	mov	r5, r0
 801c3e4:	2900      	cmp	r1, #0
 801c3e6:	d041      	beq.n	801c46c <_free_r+0x8c>
 801c3e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c3ec:	1f0c      	subs	r4, r1, #4
 801c3ee:	2b00      	cmp	r3, #0
 801c3f0:	bfb8      	it	lt
 801c3f2:	18e4      	addlt	r4, r4, r3
 801c3f4:	f000 f8e8 	bl	801c5c8 <__malloc_lock>
 801c3f8:	4a1d      	ldr	r2, [pc, #116]	@ (801c470 <_free_r+0x90>)
 801c3fa:	6813      	ldr	r3, [r2, #0]
 801c3fc:	b933      	cbnz	r3, 801c40c <_free_r+0x2c>
 801c3fe:	6063      	str	r3, [r4, #4]
 801c400:	6014      	str	r4, [r2, #0]
 801c402:	4628      	mov	r0, r5
 801c404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801c408:	f000 b8e4 	b.w	801c5d4 <__malloc_unlock>
 801c40c:	42a3      	cmp	r3, r4
 801c40e:	d908      	bls.n	801c422 <_free_r+0x42>
 801c410:	6820      	ldr	r0, [r4, #0]
 801c412:	1821      	adds	r1, r4, r0
 801c414:	428b      	cmp	r3, r1
 801c416:	bf01      	itttt	eq
 801c418:	6819      	ldreq	r1, [r3, #0]
 801c41a:	685b      	ldreq	r3, [r3, #4]
 801c41c:	1809      	addeq	r1, r1, r0
 801c41e:	6021      	streq	r1, [r4, #0]
 801c420:	e7ed      	b.n	801c3fe <_free_r+0x1e>
 801c422:	461a      	mov	r2, r3
 801c424:	685b      	ldr	r3, [r3, #4]
 801c426:	b10b      	cbz	r3, 801c42c <_free_r+0x4c>
 801c428:	42a3      	cmp	r3, r4
 801c42a:	d9fa      	bls.n	801c422 <_free_r+0x42>
 801c42c:	6811      	ldr	r1, [r2, #0]
 801c42e:	1850      	adds	r0, r2, r1
 801c430:	42a0      	cmp	r0, r4
 801c432:	d10b      	bne.n	801c44c <_free_r+0x6c>
 801c434:	6820      	ldr	r0, [r4, #0]
 801c436:	4401      	add	r1, r0
 801c438:	1850      	adds	r0, r2, r1
 801c43a:	4283      	cmp	r3, r0
 801c43c:	6011      	str	r1, [r2, #0]
 801c43e:	d1e0      	bne.n	801c402 <_free_r+0x22>
 801c440:	6818      	ldr	r0, [r3, #0]
 801c442:	685b      	ldr	r3, [r3, #4]
 801c444:	6053      	str	r3, [r2, #4]
 801c446:	4408      	add	r0, r1
 801c448:	6010      	str	r0, [r2, #0]
 801c44a:	e7da      	b.n	801c402 <_free_r+0x22>
 801c44c:	d902      	bls.n	801c454 <_free_r+0x74>
 801c44e:	230c      	movs	r3, #12
 801c450:	602b      	str	r3, [r5, #0]
 801c452:	e7d6      	b.n	801c402 <_free_r+0x22>
 801c454:	6820      	ldr	r0, [r4, #0]
 801c456:	1821      	adds	r1, r4, r0
 801c458:	428b      	cmp	r3, r1
 801c45a:	bf04      	itt	eq
 801c45c:	6819      	ldreq	r1, [r3, #0]
 801c45e:	685b      	ldreq	r3, [r3, #4]
 801c460:	6063      	str	r3, [r4, #4]
 801c462:	bf04      	itt	eq
 801c464:	1809      	addeq	r1, r1, r0
 801c466:	6021      	streq	r1, [r4, #0]
 801c468:	6054      	str	r4, [r2, #4]
 801c46a:	e7ca      	b.n	801c402 <_free_r+0x22>
 801c46c:	bd38      	pop	{r3, r4, r5, pc}
 801c46e:	bf00      	nop
 801c470:	2000c360 	.word	0x2000c360

0801c474 <malloc>:
 801c474:	4b02      	ldr	r3, [pc, #8]	@ (801c480 <malloc+0xc>)
 801c476:	4601      	mov	r1, r0
 801c478:	6818      	ldr	r0, [r3, #0]
 801c47a:	f000 b825 	b.w	801c4c8 <_malloc_r>
 801c47e:	bf00      	nop
 801c480:	20000160 	.word	0x20000160

0801c484 <sbrk_aligned>:
 801c484:	b570      	push	{r4, r5, r6, lr}
 801c486:	4e0f      	ldr	r6, [pc, #60]	@ (801c4c4 <sbrk_aligned+0x40>)
 801c488:	460c      	mov	r4, r1
 801c48a:	6831      	ldr	r1, [r6, #0]
 801c48c:	4605      	mov	r5, r0
 801c48e:	b911      	cbnz	r1, 801c496 <sbrk_aligned+0x12>
 801c490:	f002 fa64 	bl	801e95c <_sbrk_r>
 801c494:	6030      	str	r0, [r6, #0]
 801c496:	4621      	mov	r1, r4
 801c498:	4628      	mov	r0, r5
 801c49a:	f002 fa5f 	bl	801e95c <_sbrk_r>
 801c49e:	1c43      	adds	r3, r0, #1
 801c4a0:	d103      	bne.n	801c4aa <sbrk_aligned+0x26>
 801c4a2:	f04f 34ff 	mov.w	r4, #4294967295
 801c4a6:	4620      	mov	r0, r4
 801c4a8:	bd70      	pop	{r4, r5, r6, pc}
 801c4aa:	1cc4      	adds	r4, r0, #3
 801c4ac:	f024 0403 	bic.w	r4, r4, #3
 801c4b0:	42a0      	cmp	r0, r4
 801c4b2:	d0f8      	beq.n	801c4a6 <sbrk_aligned+0x22>
 801c4b4:	1a21      	subs	r1, r4, r0
 801c4b6:	4628      	mov	r0, r5
 801c4b8:	f002 fa50 	bl	801e95c <_sbrk_r>
 801c4bc:	3001      	adds	r0, #1
 801c4be:	d1f2      	bne.n	801c4a6 <sbrk_aligned+0x22>
 801c4c0:	e7ef      	b.n	801c4a2 <sbrk_aligned+0x1e>
 801c4c2:	bf00      	nop
 801c4c4:	2000c35c 	.word	0x2000c35c

0801c4c8 <_malloc_r>:
 801c4c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c4cc:	1ccd      	adds	r5, r1, #3
 801c4ce:	f025 0503 	bic.w	r5, r5, #3
 801c4d2:	3508      	adds	r5, #8
 801c4d4:	2d0c      	cmp	r5, #12
 801c4d6:	bf38      	it	cc
 801c4d8:	250c      	movcc	r5, #12
 801c4da:	2d00      	cmp	r5, #0
 801c4dc:	4606      	mov	r6, r0
 801c4de:	db01      	blt.n	801c4e4 <_malloc_r+0x1c>
 801c4e0:	42a9      	cmp	r1, r5
 801c4e2:	d904      	bls.n	801c4ee <_malloc_r+0x26>
 801c4e4:	230c      	movs	r3, #12
 801c4e6:	6033      	str	r3, [r6, #0]
 801c4e8:	2000      	movs	r0, #0
 801c4ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c4ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c5c4 <_malloc_r+0xfc>
 801c4f2:	f000 f869 	bl	801c5c8 <__malloc_lock>
 801c4f6:	f8d8 3000 	ldr.w	r3, [r8]
 801c4fa:	461c      	mov	r4, r3
 801c4fc:	bb44      	cbnz	r4, 801c550 <_malloc_r+0x88>
 801c4fe:	4629      	mov	r1, r5
 801c500:	4630      	mov	r0, r6
 801c502:	f7ff ffbf 	bl	801c484 <sbrk_aligned>
 801c506:	1c43      	adds	r3, r0, #1
 801c508:	4604      	mov	r4, r0
 801c50a:	d158      	bne.n	801c5be <_malloc_r+0xf6>
 801c50c:	f8d8 4000 	ldr.w	r4, [r8]
 801c510:	4627      	mov	r7, r4
 801c512:	2f00      	cmp	r7, #0
 801c514:	d143      	bne.n	801c59e <_malloc_r+0xd6>
 801c516:	2c00      	cmp	r4, #0
 801c518:	d04b      	beq.n	801c5b2 <_malloc_r+0xea>
 801c51a:	6823      	ldr	r3, [r4, #0]
 801c51c:	4639      	mov	r1, r7
 801c51e:	4630      	mov	r0, r6
 801c520:	eb04 0903 	add.w	r9, r4, r3
 801c524:	f002 fa1a 	bl	801e95c <_sbrk_r>
 801c528:	4581      	cmp	r9, r0
 801c52a:	d142      	bne.n	801c5b2 <_malloc_r+0xea>
 801c52c:	6821      	ldr	r1, [r4, #0]
 801c52e:	1a6d      	subs	r5, r5, r1
 801c530:	4629      	mov	r1, r5
 801c532:	4630      	mov	r0, r6
 801c534:	f7ff ffa6 	bl	801c484 <sbrk_aligned>
 801c538:	3001      	adds	r0, #1
 801c53a:	d03a      	beq.n	801c5b2 <_malloc_r+0xea>
 801c53c:	6823      	ldr	r3, [r4, #0]
 801c53e:	442b      	add	r3, r5
 801c540:	6023      	str	r3, [r4, #0]
 801c542:	f8d8 3000 	ldr.w	r3, [r8]
 801c546:	685a      	ldr	r2, [r3, #4]
 801c548:	bb62      	cbnz	r2, 801c5a4 <_malloc_r+0xdc>
 801c54a:	f8c8 7000 	str.w	r7, [r8]
 801c54e:	e00f      	b.n	801c570 <_malloc_r+0xa8>
 801c550:	6822      	ldr	r2, [r4, #0]
 801c552:	1b52      	subs	r2, r2, r5
 801c554:	d420      	bmi.n	801c598 <_malloc_r+0xd0>
 801c556:	2a0b      	cmp	r2, #11
 801c558:	d917      	bls.n	801c58a <_malloc_r+0xc2>
 801c55a:	1961      	adds	r1, r4, r5
 801c55c:	42a3      	cmp	r3, r4
 801c55e:	6025      	str	r5, [r4, #0]
 801c560:	bf18      	it	ne
 801c562:	6059      	strne	r1, [r3, #4]
 801c564:	6863      	ldr	r3, [r4, #4]
 801c566:	bf08      	it	eq
 801c568:	f8c8 1000 	streq.w	r1, [r8]
 801c56c:	5162      	str	r2, [r4, r5]
 801c56e:	604b      	str	r3, [r1, #4]
 801c570:	4630      	mov	r0, r6
 801c572:	f000 f82f 	bl	801c5d4 <__malloc_unlock>
 801c576:	f104 000b 	add.w	r0, r4, #11
 801c57a:	1d23      	adds	r3, r4, #4
 801c57c:	f020 0007 	bic.w	r0, r0, #7
 801c580:	1ac2      	subs	r2, r0, r3
 801c582:	bf1c      	itt	ne
 801c584:	1a1b      	subne	r3, r3, r0
 801c586:	50a3      	strne	r3, [r4, r2]
 801c588:	e7af      	b.n	801c4ea <_malloc_r+0x22>
 801c58a:	6862      	ldr	r2, [r4, #4]
 801c58c:	42a3      	cmp	r3, r4
 801c58e:	bf0c      	ite	eq
 801c590:	f8c8 2000 	streq.w	r2, [r8]
 801c594:	605a      	strne	r2, [r3, #4]
 801c596:	e7eb      	b.n	801c570 <_malloc_r+0xa8>
 801c598:	4623      	mov	r3, r4
 801c59a:	6864      	ldr	r4, [r4, #4]
 801c59c:	e7ae      	b.n	801c4fc <_malloc_r+0x34>
 801c59e:	463c      	mov	r4, r7
 801c5a0:	687f      	ldr	r7, [r7, #4]
 801c5a2:	e7b6      	b.n	801c512 <_malloc_r+0x4a>
 801c5a4:	461a      	mov	r2, r3
 801c5a6:	685b      	ldr	r3, [r3, #4]
 801c5a8:	42a3      	cmp	r3, r4
 801c5aa:	d1fb      	bne.n	801c5a4 <_malloc_r+0xdc>
 801c5ac:	2300      	movs	r3, #0
 801c5ae:	6053      	str	r3, [r2, #4]
 801c5b0:	e7de      	b.n	801c570 <_malloc_r+0xa8>
 801c5b2:	230c      	movs	r3, #12
 801c5b4:	6033      	str	r3, [r6, #0]
 801c5b6:	4630      	mov	r0, r6
 801c5b8:	f000 f80c 	bl	801c5d4 <__malloc_unlock>
 801c5bc:	e794      	b.n	801c4e8 <_malloc_r+0x20>
 801c5be:	6005      	str	r5, [r0, #0]
 801c5c0:	e7d6      	b.n	801c570 <_malloc_r+0xa8>
 801c5c2:	bf00      	nop
 801c5c4:	2000c360 	.word	0x2000c360

0801c5c8 <__malloc_lock>:
 801c5c8:	4801      	ldr	r0, [pc, #4]	@ (801c5d0 <__malloc_lock+0x8>)
 801c5ca:	f7ff b880 	b.w	801b6ce <__retarget_lock_acquire_recursive>
 801c5ce:	bf00      	nop
 801c5d0:	2000c358 	.word	0x2000c358

0801c5d4 <__malloc_unlock>:
 801c5d4:	4801      	ldr	r0, [pc, #4]	@ (801c5dc <__malloc_unlock+0x8>)
 801c5d6:	f7ff b87b 	b.w	801b6d0 <__retarget_lock_release_recursive>
 801c5da:	bf00      	nop
 801c5dc:	2000c358 	.word	0x2000c358

0801c5e0 <_Balloc>:
 801c5e0:	b570      	push	{r4, r5, r6, lr}
 801c5e2:	69c6      	ldr	r6, [r0, #28]
 801c5e4:	4604      	mov	r4, r0
 801c5e6:	460d      	mov	r5, r1
 801c5e8:	b976      	cbnz	r6, 801c608 <_Balloc+0x28>
 801c5ea:	2010      	movs	r0, #16
 801c5ec:	f7ff ff42 	bl	801c474 <malloc>
 801c5f0:	4602      	mov	r2, r0
 801c5f2:	61e0      	str	r0, [r4, #28]
 801c5f4:	b920      	cbnz	r0, 801c600 <_Balloc+0x20>
 801c5f6:	4b18      	ldr	r3, [pc, #96]	@ (801c658 <_Balloc+0x78>)
 801c5f8:	4818      	ldr	r0, [pc, #96]	@ (801c65c <_Balloc+0x7c>)
 801c5fa:	216b      	movs	r1, #107	@ 0x6b
 801c5fc:	f7ff f878 	bl	801b6f0 <__assert_func>
 801c600:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c604:	6006      	str	r6, [r0, #0]
 801c606:	60c6      	str	r6, [r0, #12]
 801c608:	69e6      	ldr	r6, [r4, #28]
 801c60a:	68f3      	ldr	r3, [r6, #12]
 801c60c:	b183      	cbz	r3, 801c630 <_Balloc+0x50>
 801c60e:	69e3      	ldr	r3, [r4, #28]
 801c610:	68db      	ldr	r3, [r3, #12]
 801c612:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c616:	b9b8      	cbnz	r0, 801c648 <_Balloc+0x68>
 801c618:	2101      	movs	r1, #1
 801c61a:	fa01 f605 	lsl.w	r6, r1, r5
 801c61e:	1d72      	adds	r2, r6, #5
 801c620:	0092      	lsls	r2, r2, #2
 801c622:	4620      	mov	r0, r4
 801c624:	f002 f9bb 	bl	801e99e <_calloc_r>
 801c628:	b160      	cbz	r0, 801c644 <_Balloc+0x64>
 801c62a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c62e:	e00e      	b.n	801c64e <_Balloc+0x6e>
 801c630:	2221      	movs	r2, #33	@ 0x21
 801c632:	2104      	movs	r1, #4
 801c634:	4620      	mov	r0, r4
 801c636:	f002 f9b2 	bl	801e99e <_calloc_r>
 801c63a:	69e3      	ldr	r3, [r4, #28]
 801c63c:	60f0      	str	r0, [r6, #12]
 801c63e:	68db      	ldr	r3, [r3, #12]
 801c640:	2b00      	cmp	r3, #0
 801c642:	d1e4      	bne.n	801c60e <_Balloc+0x2e>
 801c644:	2000      	movs	r0, #0
 801c646:	bd70      	pop	{r4, r5, r6, pc}
 801c648:	6802      	ldr	r2, [r0, #0]
 801c64a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c64e:	2300      	movs	r3, #0
 801c650:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c654:	e7f7      	b.n	801c646 <_Balloc+0x66>
 801c656:	bf00      	nop
 801c658:	08021545 	.word	0x08021545
 801c65c:	080215c5 	.word	0x080215c5

0801c660 <_Bfree>:
 801c660:	b570      	push	{r4, r5, r6, lr}
 801c662:	69c6      	ldr	r6, [r0, #28]
 801c664:	4605      	mov	r5, r0
 801c666:	460c      	mov	r4, r1
 801c668:	b976      	cbnz	r6, 801c688 <_Bfree+0x28>
 801c66a:	2010      	movs	r0, #16
 801c66c:	f7ff ff02 	bl	801c474 <malloc>
 801c670:	4602      	mov	r2, r0
 801c672:	61e8      	str	r0, [r5, #28]
 801c674:	b920      	cbnz	r0, 801c680 <_Bfree+0x20>
 801c676:	4b09      	ldr	r3, [pc, #36]	@ (801c69c <_Bfree+0x3c>)
 801c678:	4809      	ldr	r0, [pc, #36]	@ (801c6a0 <_Bfree+0x40>)
 801c67a:	218f      	movs	r1, #143	@ 0x8f
 801c67c:	f7ff f838 	bl	801b6f0 <__assert_func>
 801c680:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c684:	6006      	str	r6, [r0, #0]
 801c686:	60c6      	str	r6, [r0, #12]
 801c688:	b13c      	cbz	r4, 801c69a <_Bfree+0x3a>
 801c68a:	69eb      	ldr	r3, [r5, #28]
 801c68c:	6862      	ldr	r2, [r4, #4]
 801c68e:	68db      	ldr	r3, [r3, #12]
 801c690:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c694:	6021      	str	r1, [r4, #0]
 801c696:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c69a:	bd70      	pop	{r4, r5, r6, pc}
 801c69c:	08021545 	.word	0x08021545
 801c6a0:	080215c5 	.word	0x080215c5

0801c6a4 <__multadd>:
 801c6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c6a8:	690d      	ldr	r5, [r1, #16]
 801c6aa:	4607      	mov	r7, r0
 801c6ac:	460c      	mov	r4, r1
 801c6ae:	461e      	mov	r6, r3
 801c6b0:	f101 0c14 	add.w	ip, r1, #20
 801c6b4:	2000      	movs	r0, #0
 801c6b6:	f8dc 3000 	ldr.w	r3, [ip]
 801c6ba:	b299      	uxth	r1, r3
 801c6bc:	fb02 6101 	mla	r1, r2, r1, r6
 801c6c0:	0c1e      	lsrs	r6, r3, #16
 801c6c2:	0c0b      	lsrs	r3, r1, #16
 801c6c4:	fb02 3306 	mla	r3, r2, r6, r3
 801c6c8:	b289      	uxth	r1, r1
 801c6ca:	3001      	adds	r0, #1
 801c6cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c6d0:	4285      	cmp	r5, r0
 801c6d2:	f84c 1b04 	str.w	r1, [ip], #4
 801c6d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c6da:	dcec      	bgt.n	801c6b6 <__multadd+0x12>
 801c6dc:	b30e      	cbz	r6, 801c722 <__multadd+0x7e>
 801c6de:	68a3      	ldr	r3, [r4, #8]
 801c6e0:	42ab      	cmp	r3, r5
 801c6e2:	dc19      	bgt.n	801c718 <__multadd+0x74>
 801c6e4:	6861      	ldr	r1, [r4, #4]
 801c6e6:	4638      	mov	r0, r7
 801c6e8:	3101      	adds	r1, #1
 801c6ea:	f7ff ff79 	bl	801c5e0 <_Balloc>
 801c6ee:	4680      	mov	r8, r0
 801c6f0:	b928      	cbnz	r0, 801c6fe <__multadd+0x5a>
 801c6f2:	4602      	mov	r2, r0
 801c6f4:	4b0c      	ldr	r3, [pc, #48]	@ (801c728 <__multadd+0x84>)
 801c6f6:	480d      	ldr	r0, [pc, #52]	@ (801c72c <__multadd+0x88>)
 801c6f8:	21ba      	movs	r1, #186	@ 0xba
 801c6fa:	f7fe fff9 	bl	801b6f0 <__assert_func>
 801c6fe:	6922      	ldr	r2, [r4, #16]
 801c700:	3202      	adds	r2, #2
 801c702:	f104 010c 	add.w	r1, r4, #12
 801c706:	0092      	lsls	r2, r2, #2
 801c708:	300c      	adds	r0, #12
 801c70a:	f7fe ffe2 	bl	801b6d2 <memcpy>
 801c70e:	4621      	mov	r1, r4
 801c710:	4638      	mov	r0, r7
 801c712:	f7ff ffa5 	bl	801c660 <_Bfree>
 801c716:	4644      	mov	r4, r8
 801c718:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c71c:	3501      	adds	r5, #1
 801c71e:	615e      	str	r6, [r3, #20]
 801c720:	6125      	str	r5, [r4, #16]
 801c722:	4620      	mov	r0, r4
 801c724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c728:	080215b4 	.word	0x080215b4
 801c72c:	080215c5 	.word	0x080215c5

0801c730 <__s2b>:
 801c730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c734:	460c      	mov	r4, r1
 801c736:	4615      	mov	r5, r2
 801c738:	461f      	mov	r7, r3
 801c73a:	2209      	movs	r2, #9
 801c73c:	3308      	adds	r3, #8
 801c73e:	4606      	mov	r6, r0
 801c740:	fb93 f3f2 	sdiv	r3, r3, r2
 801c744:	2100      	movs	r1, #0
 801c746:	2201      	movs	r2, #1
 801c748:	429a      	cmp	r2, r3
 801c74a:	db09      	blt.n	801c760 <__s2b+0x30>
 801c74c:	4630      	mov	r0, r6
 801c74e:	f7ff ff47 	bl	801c5e0 <_Balloc>
 801c752:	b940      	cbnz	r0, 801c766 <__s2b+0x36>
 801c754:	4602      	mov	r2, r0
 801c756:	4b19      	ldr	r3, [pc, #100]	@ (801c7bc <__s2b+0x8c>)
 801c758:	4819      	ldr	r0, [pc, #100]	@ (801c7c0 <__s2b+0x90>)
 801c75a:	21d3      	movs	r1, #211	@ 0xd3
 801c75c:	f7fe ffc8 	bl	801b6f0 <__assert_func>
 801c760:	0052      	lsls	r2, r2, #1
 801c762:	3101      	adds	r1, #1
 801c764:	e7f0      	b.n	801c748 <__s2b+0x18>
 801c766:	9b08      	ldr	r3, [sp, #32]
 801c768:	6143      	str	r3, [r0, #20]
 801c76a:	2d09      	cmp	r5, #9
 801c76c:	f04f 0301 	mov.w	r3, #1
 801c770:	6103      	str	r3, [r0, #16]
 801c772:	dd16      	ble.n	801c7a2 <__s2b+0x72>
 801c774:	f104 0909 	add.w	r9, r4, #9
 801c778:	46c8      	mov	r8, r9
 801c77a:	442c      	add	r4, r5
 801c77c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801c780:	4601      	mov	r1, r0
 801c782:	3b30      	subs	r3, #48	@ 0x30
 801c784:	220a      	movs	r2, #10
 801c786:	4630      	mov	r0, r6
 801c788:	f7ff ff8c 	bl	801c6a4 <__multadd>
 801c78c:	45a0      	cmp	r8, r4
 801c78e:	d1f5      	bne.n	801c77c <__s2b+0x4c>
 801c790:	f1a5 0408 	sub.w	r4, r5, #8
 801c794:	444c      	add	r4, r9
 801c796:	1b2d      	subs	r5, r5, r4
 801c798:	1963      	adds	r3, r4, r5
 801c79a:	42bb      	cmp	r3, r7
 801c79c:	db04      	blt.n	801c7a8 <__s2b+0x78>
 801c79e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c7a2:	340a      	adds	r4, #10
 801c7a4:	2509      	movs	r5, #9
 801c7a6:	e7f6      	b.n	801c796 <__s2b+0x66>
 801c7a8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c7ac:	4601      	mov	r1, r0
 801c7ae:	3b30      	subs	r3, #48	@ 0x30
 801c7b0:	220a      	movs	r2, #10
 801c7b2:	4630      	mov	r0, r6
 801c7b4:	f7ff ff76 	bl	801c6a4 <__multadd>
 801c7b8:	e7ee      	b.n	801c798 <__s2b+0x68>
 801c7ba:	bf00      	nop
 801c7bc:	080215b4 	.word	0x080215b4
 801c7c0:	080215c5 	.word	0x080215c5

0801c7c4 <__hi0bits>:
 801c7c4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801c7c8:	4603      	mov	r3, r0
 801c7ca:	bf36      	itet	cc
 801c7cc:	0403      	lslcc	r3, r0, #16
 801c7ce:	2000      	movcs	r0, #0
 801c7d0:	2010      	movcc	r0, #16
 801c7d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c7d6:	bf3c      	itt	cc
 801c7d8:	021b      	lslcc	r3, r3, #8
 801c7da:	3008      	addcc	r0, #8
 801c7dc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c7e0:	bf3c      	itt	cc
 801c7e2:	011b      	lslcc	r3, r3, #4
 801c7e4:	3004      	addcc	r0, #4
 801c7e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801c7ea:	bf3c      	itt	cc
 801c7ec:	009b      	lslcc	r3, r3, #2
 801c7ee:	3002      	addcc	r0, #2
 801c7f0:	2b00      	cmp	r3, #0
 801c7f2:	db05      	blt.n	801c800 <__hi0bits+0x3c>
 801c7f4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801c7f8:	f100 0001 	add.w	r0, r0, #1
 801c7fc:	bf08      	it	eq
 801c7fe:	2020      	moveq	r0, #32
 801c800:	4770      	bx	lr

0801c802 <__lo0bits>:
 801c802:	6803      	ldr	r3, [r0, #0]
 801c804:	4602      	mov	r2, r0
 801c806:	f013 0007 	ands.w	r0, r3, #7
 801c80a:	d00b      	beq.n	801c824 <__lo0bits+0x22>
 801c80c:	07d9      	lsls	r1, r3, #31
 801c80e:	d421      	bmi.n	801c854 <__lo0bits+0x52>
 801c810:	0798      	lsls	r0, r3, #30
 801c812:	bf49      	itett	mi
 801c814:	085b      	lsrmi	r3, r3, #1
 801c816:	089b      	lsrpl	r3, r3, #2
 801c818:	2001      	movmi	r0, #1
 801c81a:	6013      	strmi	r3, [r2, #0]
 801c81c:	bf5c      	itt	pl
 801c81e:	6013      	strpl	r3, [r2, #0]
 801c820:	2002      	movpl	r0, #2
 801c822:	4770      	bx	lr
 801c824:	b299      	uxth	r1, r3
 801c826:	b909      	cbnz	r1, 801c82c <__lo0bits+0x2a>
 801c828:	0c1b      	lsrs	r3, r3, #16
 801c82a:	2010      	movs	r0, #16
 801c82c:	b2d9      	uxtb	r1, r3
 801c82e:	b909      	cbnz	r1, 801c834 <__lo0bits+0x32>
 801c830:	3008      	adds	r0, #8
 801c832:	0a1b      	lsrs	r3, r3, #8
 801c834:	0719      	lsls	r1, r3, #28
 801c836:	bf04      	itt	eq
 801c838:	091b      	lsreq	r3, r3, #4
 801c83a:	3004      	addeq	r0, #4
 801c83c:	0799      	lsls	r1, r3, #30
 801c83e:	bf04      	itt	eq
 801c840:	089b      	lsreq	r3, r3, #2
 801c842:	3002      	addeq	r0, #2
 801c844:	07d9      	lsls	r1, r3, #31
 801c846:	d403      	bmi.n	801c850 <__lo0bits+0x4e>
 801c848:	085b      	lsrs	r3, r3, #1
 801c84a:	f100 0001 	add.w	r0, r0, #1
 801c84e:	d003      	beq.n	801c858 <__lo0bits+0x56>
 801c850:	6013      	str	r3, [r2, #0]
 801c852:	4770      	bx	lr
 801c854:	2000      	movs	r0, #0
 801c856:	4770      	bx	lr
 801c858:	2020      	movs	r0, #32
 801c85a:	4770      	bx	lr

0801c85c <__i2b>:
 801c85c:	b510      	push	{r4, lr}
 801c85e:	460c      	mov	r4, r1
 801c860:	2101      	movs	r1, #1
 801c862:	f7ff febd 	bl	801c5e0 <_Balloc>
 801c866:	4602      	mov	r2, r0
 801c868:	b928      	cbnz	r0, 801c876 <__i2b+0x1a>
 801c86a:	4b05      	ldr	r3, [pc, #20]	@ (801c880 <__i2b+0x24>)
 801c86c:	4805      	ldr	r0, [pc, #20]	@ (801c884 <__i2b+0x28>)
 801c86e:	f240 1145 	movw	r1, #325	@ 0x145
 801c872:	f7fe ff3d 	bl	801b6f0 <__assert_func>
 801c876:	2301      	movs	r3, #1
 801c878:	6144      	str	r4, [r0, #20]
 801c87a:	6103      	str	r3, [r0, #16]
 801c87c:	bd10      	pop	{r4, pc}
 801c87e:	bf00      	nop
 801c880:	080215b4 	.word	0x080215b4
 801c884:	080215c5 	.word	0x080215c5

0801c888 <__multiply>:
 801c888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c88c:	4617      	mov	r7, r2
 801c88e:	690a      	ldr	r2, [r1, #16]
 801c890:	693b      	ldr	r3, [r7, #16]
 801c892:	429a      	cmp	r2, r3
 801c894:	bfa8      	it	ge
 801c896:	463b      	movge	r3, r7
 801c898:	4689      	mov	r9, r1
 801c89a:	bfa4      	itt	ge
 801c89c:	460f      	movge	r7, r1
 801c89e:	4699      	movge	r9, r3
 801c8a0:	693d      	ldr	r5, [r7, #16]
 801c8a2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c8a6:	68bb      	ldr	r3, [r7, #8]
 801c8a8:	6879      	ldr	r1, [r7, #4]
 801c8aa:	eb05 060a 	add.w	r6, r5, sl
 801c8ae:	42b3      	cmp	r3, r6
 801c8b0:	b085      	sub	sp, #20
 801c8b2:	bfb8      	it	lt
 801c8b4:	3101      	addlt	r1, #1
 801c8b6:	f7ff fe93 	bl	801c5e0 <_Balloc>
 801c8ba:	b930      	cbnz	r0, 801c8ca <__multiply+0x42>
 801c8bc:	4602      	mov	r2, r0
 801c8be:	4b41      	ldr	r3, [pc, #260]	@ (801c9c4 <__multiply+0x13c>)
 801c8c0:	4841      	ldr	r0, [pc, #260]	@ (801c9c8 <__multiply+0x140>)
 801c8c2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801c8c6:	f7fe ff13 	bl	801b6f0 <__assert_func>
 801c8ca:	f100 0414 	add.w	r4, r0, #20
 801c8ce:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801c8d2:	4623      	mov	r3, r4
 801c8d4:	2200      	movs	r2, #0
 801c8d6:	4573      	cmp	r3, lr
 801c8d8:	d320      	bcc.n	801c91c <__multiply+0x94>
 801c8da:	f107 0814 	add.w	r8, r7, #20
 801c8de:	f109 0114 	add.w	r1, r9, #20
 801c8e2:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801c8e6:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801c8ea:	9302      	str	r3, [sp, #8]
 801c8ec:	1beb      	subs	r3, r5, r7
 801c8ee:	3b15      	subs	r3, #21
 801c8f0:	f023 0303 	bic.w	r3, r3, #3
 801c8f4:	3304      	adds	r3, #4
 801c8f6:	3715      	adds	r7, #21
 801c8f8:	42bd      	cmp	r5, r7
 801c8fa:	bf38      	it	cc
 801c8fc:	2304      	movcc	r3, #4
 801c8fe:	9301      	str	r3, [sp, #4]
 801c900:	9b02      	ldr	r3, [sp, #8]
 801c902:	9103      	str	r1, [sp, #12]
 801c904:	428b      	cmp	r3, r1
 801c906:	d80c      	bhi.n	801c922 <__multiply+0x9a>
 801c908:	2e00      	cmp	r6, #0
 801c90a:	dd03      	ble.n	801c914 <__multiply+0x8c>
 801c90c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801c910:	2b00      	cmp	r3, #0
 801c912:	d055      	beq.n	801c9c0 <__multiply+0x138>
 801c914:	6106      	str	r6, [r0, #16]
 801c916:	b005      	add	sp, #20
 801c918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c91c:	f843 2b04 	str.w	r2, [r3], #4
 801c920:	e7d9      	b.n	801c8d6 <__multiply+0x4e>
 801c922:	f8b1 a000 	ldrh.w	sl, [r1]
 801c926:	f1ba 0f00 	cmp.w	sl, #0
 801c92a:	d01f      	beq.n	801c96c <__multiply+0xe4>
 801c92c:	46c4      	mov	ip, r8
 801c92e:	46a1      	mov	r9, r4
 801c930:	2700      	movs	r7, #0
 801c932:	f85c 2b04 	ldr.w	r2, [ip], #4
 801c936:	f8d9 3000 	ldr.w	r3, [r9]
 801c93a:	fa1f fb82 	uxth.w	fp, r2
 801c93e:	b29b      	uxth	r3, r3
 801c940:	fb0a 330b 	mla	r3, sl, fp, r3
 801c944:	443b      	add	r3, r7
 801c946:	f8d9 7000 	ldr.w	r7, [r9]
 801c94a:	0c12      	lsrs	r2, r2, #16
 801c94c:	0c3f      	lsrs	r7, r7, #16
 801c94e:	fb0a 7202 	mla	r2, sl, r2, r7
 801c952:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801c956:	b29b      	uxth	r3, r3
 801c958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c95c:	4565      	cmp	r5, ip
 801c95e:	f849 3b04 	str.w	r3, [r9], #4
 801c962:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801c966:	d8e4      	bhi.n	801c932 <__multiply+0xaa>
 801c968:	9b01      	ldr	r3, [sp, #4]
 801c96a:	50e7      	str	r7, [r4, r3]
 801c96c:	9b03      	ldr	r3, [sp, #12]
 801c96e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801c972:	3104      	adds	r1, #4
 801c974:	f1b9 0f00 	cmp.w	r9, #0
 801c978:	d020      	beq.n	801c9bc <__multiply+0x134>
 801c97a:	6823      	ldr	r3, [r4, #0]
 801c97c:	4647      	mov	r7, r8
 801c97e:	46a4      	mov	ip, r4
 801c980:	f04f 0a00 	mov.w	sl, #0
 801c984:	f8b7 b000 	ldrh.w	fp, [r7]
 801c988:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801c98c:	fb09 220b 	mla	r2, r9, fp, r2
 801c990:	4452      	add	r2, sl
 801c992:	b29b      	uxth	r3, r3
 801c994:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c998:	f84c 3b04 	str.w	r3, [ip], #4
 801c99c:	f857 3b04 	ldr.w	r3, [r7], #4
 801c9a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c9a4:	f8bc 3000 	ldrh.w	r3, [ip]
 801c9a8:	fb09 330a 	mla	r3, r9, sl, r3
 801c9ac:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801c9b0:	42bd      	cmp	r5, r7
 801c9b2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801c9b6:	d8e5      	bhi.n	801c984 <__multiply+0xfc>
 801c9b8:	9a01      	ldr	r2, [sp, #4]
 801c9ba:	50a3      	str	r3, [r4, r2]
 801c9bc:	3404      	adds	r4, #4
 801c9be:	e79f      	b.n	801c900 <__multiply+0x78>
 801c9c0:	3e01      	subs	r6, #1
 801c9c2:	e7a1      	b.n	801c908 <__multiply+0x80>
 801c9c4:	080215b4 	.word	0x080215b4
 801c9c8:	080215c5 	.word	0x080215c5

0801c9cc <__pow5mult>:
 801c9cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c9d0:	4615      	mov	r5, r2
 801c9d2:	f012 0203 	ands.w	r2, r2, #3
 801c9d6:	4607      	mov	r7, r0
 801c9d8:	460e      	mov	r6, r1
 801c9da:	d007      	beq.n	801c9ec <__pow5mult+0x20>
 801c9dc:	4c25      	ldr	r4, [pc, #148]	@ (801ca74 <__pow5mult+0xa8>)
 801c9de:	3a01      	subs	r2, #1
 801c9e0:	2300      	movs	r3, #0
 801c9e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c9e6:	f7ff fe5d 	bl	801c6a4 <__multadd>
 801c9ea:	4606      	mov	r6, r0
 801c9ec:	10ad      	asrs	r5, r5, #2
 801c9ee:	d03d      	beq.n	801ca6c <__pow5mult+0xa0>
 801c9f0:	69fc      	ldr	r4, [r7, #28]
 801c9f2:	b97c      	cbnz	r4, 801ca14 <__pow5mult+0x48>
 801c9f4:	2010      	movs	r0, #16
 801c9f6:	f7ff fd3d 	bl	801c474 <malloc>
 801c9fa:	4602      	mov	r2, r0
 801c9fc:	61f8      	str	r0, [r7, #28]
 801c9fe:	b928      	cbnz	r0, 801ca0c <__pow5mult+0x40>
 801ca00:	4b1d      	ldr	r3, [pc, #116]	@ (801ca78 <__pow5mult+0xac>)
 801ca02:	481e      	ldr	r0, [pc, #120]	@ (801ca7c <__pow5mult+0xb0>)
 801ca04:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801ca08:	f7fe fe72 	bl	801b6f0 <__assert_func>
 801ca0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801ca10:	6004      	str	r4, [r0, #0]
 801ca12:	60c4      	str	r4, [r0, #12]
 801ca14:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801ca18:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801ca1c:	b94c      	cbnz	r4, 801ca32 <__pow5mult+0x66>
 801ca1e:	f240 2171 	movw	r1, #625	@ 0x271
 801ca22:	4638      	mov	r0, r7
 801ca24:	f7ff ff1a 	bl	801c85c <__i2b>
 801ca28:	2300      	movs	r3, #0
 801ca2a:	f8c8 0008 	str.w	r0, [r8, #8]
 801ca2e:	4604      	mov	r4, r0
 801ca30:	6003      	str	r3, [r0, #0]
 801ca32:	f04f 0900 	mov.w	r9, #0
 801ca36:	07eb      	lsls	r3, r5, #31
 801ca38:	d50a      	bpl.n	801ca50 <__pow5mult+0x84>
 801ca3a:	4631      	mov	r1, r6
 801ca3c:	4622      	mov	r2, r4
 801ca3e:	4638      	mov	r0, r7
 801ca40:	f7ff ff22 	bl	801c888 <__multiply>
 801ca44:	4631      	mov	r1, r6
 801ca46:	4680      	mov	r8, r0
 801ca48:	4638      	mov	r0, r7
 801ca4a:	f7ff fe09 	bl	801c660 <_Bfree>
 801ca4e:	4646      	mov	r6, r8
 801ca50:	106d      	asrs	r5, r5, #1
 801ca52:	d00b      	beq.n	801ca6c <__pow5mult+0xa0>
 801ca54:	6820      	ldr	r0, [r4, #0]
 801ca56:	b938      	cbnz	r0, 801ca68 <__pow5mult+0x9c>
 801ca58:	4622      	mov	r2, r4
 801ca5a:	4621      	mov	r1, r4
 801ca5c:	4638      	mov	r0, r7
 801ca5e:	f7ff ff13 	bl	801c888 <__multiply>
 801ca62:	6020      	str	r0, [r4, #0]
 801ca64:	f8c0 9000 	str.w	r9, [r0]
 801ca68:	4604      	mov	r4, r0
 801ca6a:	e7e4      	b.n	801ca36 <__pow5mult+0x6a>
 801ca6c:	4630      	mov	r0, r6
 801ca6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca72:	bf00      	nop
 801ca74:	08021ac4 	.word	0x08021ac4
 801ca78:	08021545 	.word	0x08021545
 801ca7c:	080215c5 	.word	0x080215c5

0801ca80 <__lshift>:
 801ca80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ca84:	460c      	mov	r4, r1
 801ca86:	6849      	ldr	r1, [r1, #4]
 801ca88:	6923      	ldr	r3, [r4, #16]
 801ca8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801ca8e:	68a3      	ldr	r3, [r4, #8]
 801ca90:	4607      	mov	r7, r0
 801ca92:	4691      	mov	r9, r2
 801ca94:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801ca98:	f108 0601 	add.w	r6, r8, #1
 801ca9c:	42b3      	cmp	r3, r6
 801ca9e:	db0b      	blt.n	801cab8 <__lshift+0x38>
 801caa0:	4638      	mov	r0, r7
 801caa2:	f7ff fd9d 	bl	801c5e0 <_Balloc>
 801caa6:	4605      	mov	r5, r0
 801caa8:	b948      	cbnz	r0, 801cabe <__lshift+0x3e>
 801caaa:	4602      	mov	r2, r0
 801caac:	4b28      	ldr	r3, [pc, #160]	@ (801cb50 <__lshift+0xd0>)
 801caae:	4829      	ldr	r0, [pc, #164]	@ (801cb54 <__lshift+0xd4>)
 801cab0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801cab4:	f7fe fe1c 	bl	801b6f0 <__assert_func>
 801cab8:	3101      	adds	r1, #1
 801caba:	005b      	lsls	r3, r3, #1
 801cabc:	e7ee      	b.n	801ca9c <__lshift+0x1c>
 801cabe:	2300      	movs	r3, #0
 801cac0:	f100 0114 	add.w	r1, r0, #20
 801cac4:	f100 0210 	add.w	r2, r0, #16
 801cac8:	4618      	mov	r0, r3
 801caca:	4553      	cmp	r3, sl
 801cacc:	db33      	blt.n	801cb36 <__lshift+0xb6>
 801cace:	6920      	ldr	r0, [r4, #16]
 801cad0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801cad4:	f104 0314 	add.w	r3, r4, #20
 801cad8:	f019 091f 	ands.w	r9, r9, #31
 801cadc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801cae0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801cae4:	d02b      	beq.n	801cb3e <__lshift+0xbe>
 801cae6:	f1c9 0e20 	rsb	lr, r9, #32
 801caea:	468a      	mov	sl, r1
 801caec:	2200      	movs	r2, #0
 801caee:	6818      	ldr	r0, [r3, #0]
 801caf0:	fa00 f009 	lsl.w	r0, r0, r9
 801caf4:	4310      	orrs	r0, r2
 801caf6:	f84a 0b04 	str.w	r0, [sl], #4
 801cafa:	f853 2b04 	ldr.w	r2, [r3], #4
 801cafe:	459c      	cmp	ip, r3
 801cb00:	fa22 f20e 	lsr.w	r2, r2, lr
 801cb04:	d8f3      	bhi.n	801caee <__lshift+0x6e>
 801cb06:	ebac 0304 	sub.w	r3, ip, r4
 801cb0a:	3b15      	subs	r3, #21
 801cb0c:	f023 0303 	bic.w	r3, r3, #3
 801cb10:	3304      	adds	r3, #4
 801cb12:	f104 0015 	add.w	r0, r4, #21
 801cb16:	4560      	cmp	r0, ip
 801cb18:	bf88      	it	hi
 801cb1a:	2304      	movhi	r3, #4
 801cb1c:	50ca      	str	r2, [r1, r3]
 801cb1e:	b10a      	cbz	r2, 801cb24 <__lshift+0xa4>
 801cb20:	f108 0602 	add.w	r6, r8, #2
 801cb24:	3e01      	subs	r6, #1
 801cb26:	4638      	mov	r0, r7
 801cb28:	612e      	str	r6, [r5, #16]
 801cb2a:	4621      	mov	r1, r4
 801cb2c:	f7ff fd98 	bl	801c660 <_Bfree>
 801cb30:	4628      	mov	r0, r5
 801cb32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cb36:	f842 0f04 	str.w	r0, [r2, #4]!
 801cb3a:	3301      	adds	r3, #1
 801cb3c:	e7c5      	b.n	801caca <__lshift+0x4a>
 801cb3e:	3904      	subs	r1, #4
 801cb40:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb44:	f841 2f04 	str.w	r2, [r1, #4]!
 801cb48:	459c      	cmp	ip, r3
 801cb4a:	d8f9      	bhi.n	801cb40 <__lshift+0xc0>
 801cb4c:	e7ea      	b.n	801cb24 <__lshift+0xa4>
 801cb4e:	bf00      	nop
 801cb50:	080215b4 	.word	0x080215b4
 801cb54:	080215c5 	.word	0x080215c5

0801cb58 <__mcmp>:
 801cb58:	690a      	ldr	r2, [r1, #16]
 801cb5a:	4603      	mov	r3, r0
 801cb5c:	6900      	ldr	r0, [r0, #16]
 801cb5e:	1a80      	subs	r0, r0, r2
 801cb60:	b530      	push	{r4, r5, lr}
 801cb62:	d10e      	bne.n	801cb82 <__mcmp+0x2a>
 801cb64:	3314      	adds	r3, #20
 801cb66:	3114      	adds	r1, #20
 801cb68:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801cb6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801cb70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801cb74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801cb78:	4295      	cmp	r5, r2
 801cb7a:	d003      	beq.n	801cb84 <__mcmp+0x2c>
 801cb7c:	d205      	bcs.n	801cb8a <__mcmp+0x32>
 801cb7e:	f04f 30ff 	mov.w	r0, #4294967295
 801cb82:	bd30      	pop	{r4, r5, pc}
 801cb84:	42a3      	cmp	r3, r4
 801cb86:	d3f3      	bcc.n	801cb70 <__mcmp+0x18>
 801cb88:	e7fb      	b.n	801cb82 <__mcmp+0x2a>
 801cb8a:	2001      	movs	r0, #1
 801cb8c:	e7f9      	b.n	801cb82 <__mcmp+0x2a>
	...

0801cb90 <__mdiff>:
 801cb90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cb94:	4689      	mov	r9, r1
 801cb96:	4606      	mov	r6, r0
 801cb98:	4611      	mov	r1, r2
 801cb9a:	4648      	mov	r0, r9
 801cb9c:	4614      	mov	r4, r2
 801cb9e:	f7ff ffdb 	bl	801cb58 <__mcmp>
 801cba2:	1e05      	subs	r5, r0, #0
 801cba4:	d112      	bne.n	801cbcc <__mdiff+0x3c>
 801cba6:	4629      	mov	r1, r5
 801cba8:	4630      	mov	r0, r6
 801cbaa:	f7ff fd19 	bl	801c5e0 <_Balloc>
 801cbae:	4602      	mov	r2, r0
 801cbb0:	b928      	cbnz	r0, 801cbbe <__mdiff+0x2e>
 801cbb2:	4b3f      	ldr	r3, [pc, #252]	@ (801ccb0 <__mdiff+0x120>)
 801cbb4:	f240 2137 	movw	r1, #567	@ 0x237
 801cbb8:	483e      	ldr	r0, [pc, #248]	@ (801ccb4 <__mdiff+0x124>)
 801cbba:	f7fe fd99 	bl	801b6f0 <__assert_func>
 801cbbe:	2301      	movs	r3, #1
 801cbc0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801cbc4:	4610      	mov	r0, r2
 801cbc6:	b003      	add	sp, #12
 801cbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbcc:	bfbc      	itt	lt
 801cbce:	464b      	movlt	r3, r9
 801cbd0:	46a1      	movlt	r9, r4
 801cbd2:	4630      	mov	r0, r6
 801cbd4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801cbd8:	bfba      	itte	lt
 801cbda:	461c      	movlt	r4, r3
 801cbdc:	2501      	movlt	r5, #1
 801cbde:	2500      	movge	r5, #0
 801cbe0:	f7ff fcfe 	bl	801c5e0 <_Balloc>
 801cbe4:	4602      	mov	r2, r0
 801cbe6:	b918      	cbnz	r0, 801cbf0 <__mdiff+0x60>
 801cbe8:	4b31      	ldr	r3, [pc, #196]	@ (801ccb0 <__mdiff+0x120>)
 801cbea:	f240 2145 	movw	r1, #581	@ 0x245
 801cbee:	e7e3      	b.n	801cbb8 <__mdiff+0x28>
 801cbf0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801cbf4:	6926      	ldr	r6, [r4, #16]
 801cbf6:	60c5      	str	r5, [r0, #12]
 801cbf8:	f109 0310 	add.w	r3, r9, #16
 801cbfc:	f109 0514 	add.w	r5, r9, #20
 801cc00:	f104 0e14 	add.w	lr, r4, #20
 801cc04:	f100 0b14 	add.w	fp, r0, #20
 801cc08:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801cc0c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801cc10:	9301      	str	r3, [sp, #4]
 801cc12:	46d9      	mov	r9, fp
 801cc14:	f04f 0c00 	mov.w	ip, #0
 801cc18:	9b01      	ldr	r3, [sp, #4]
 801cc1a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801cc1e:	f853 af04 	ldr.w	sl, [r3, #4]!
 801cc22:	9301      	str	r3, [sp, #4]
 801cc24:	fa1f f38a 	uxth.w	r3, sl
 801cc28:	4619      	mov	r1, r3
 801cc2a:	b283      	uxth	r3, r0
 801cc2c:	1acb      	subs	r3, r1, r3
 801cc2e:	0c00      	lsrs	r0, r0, #16
 801cc30:	4463      	add	r3, ip
 801cc32:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801cc36:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801cc3a:	b29b      	uxth	r3, r3
 801cc3c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801cc40:	4576      	cmp	r6, lr
 801cc42:	f849 3b04 	str.w	r3, [r9], #4
 801cc46:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801cc4a:	d8e5      	bhi.n	801cc18 <__mdiff+0x88>
 801cc4c:	1b33      	subs	r3, r6, r4
 801cc4e:	3b15      	subs	r3, #21
 801cc50:	f023 0303 	bic.w	r3, r3, #3
 801cc54:	3415      	adds	r4, #21
 801cc56:	3304      	adds	r3, #4
 801cc58:	42a6      	cmp	r6, r4
 801cc5a:	bf38      	it	cc
 801cc5c:	2304      	movcc	r3, #4
 801cc5e:	441d      	add	r5, r3
 801cc60:	445b      	add	r3, fp
 801cc62:	461e      	mov	r6, r3
 801cc64:	462c      	mov	r4, r5
 801cc66:	4544      	cmp	r4, r8
 801cc68:	d30e      	bcc.n	801cc88 <__mdiff+0xf8>
 801cc6a:	f108 0103 	add.w	r1, r8, #3
 801cc6e:	1b49      	subs	r1, r1, r5
 801cc70:	f021 0103 	bic.w	r1, r1, #3
 801cc74:	3d03      	subs	r5, #3
 801cc76:	45a8      	cmp	r8, r5
 801cc78:	bf38      	it	cc
 801cc7a:	2100      	movcc	r1, #0
 801cc7c:	440b      	add	r3, r1
 801cc7e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cc82:	b191      	cbz	r1, 801ccaa <__mdiff+0x11a>
 801cc84:	6117      	str	r7, [r2, #16]
 801cc86:	e79d      	b.n	801cbc4 <__mdiff+0x34>
 801cc88:	f854 1b04 	ldr.w	r1, [r4], #4
 801cc8c:	46e6      	mov	lr, ip
 801cc8e:	0c08      	lsrs	r0, r1, #16
 801cc90:	fa1c fc81 	uxtah	ip, ip, r1
 801cc94:	4471      	add	r1, lr
 801cc96:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801cc9a:	b289      	uxth	r1, r1
 801cc9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801cca0:	f846 1b04 	str.w	r1, [r6], #4
 801cca4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801cca8:	e7dd      	b.n	801cc66 <__mdiff+0xd6>
 801ccaa:	3f01      	subs	r7, #1
 801ccac:	e7e7      	b.n	801cc7e <__mdiff+0xee>
 801ccae:	bf00      	nop
 801ccb0:	080215b4 	.word	0x080215b4
 801ccb4:	080215c5 	.word	0x080215c5

0801ccb8 <__ulp>:
 801ccb8:	b082      	sub	sp, #8
 801ccba:	ed8d 0b00 	vstr	d0, [sp]
 801ccbe:	9a01      	ldr	r2, [sp, #4]
 801ccc0:	4b0f      	ldr	r3, [pc, #60]	@ (801cd00 <__ulp+0x48>)
 801ccc2:	4013      	ands	r3, r2
 801ccc4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801ccc8:	2b00      	cmp	r3, #0
 801ccca:	dc08      	bgt.n	801ccde <__ulp+0x26>
 801cccc:	425b      	negs	r3, r3
 801ccce:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801ccd2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801ccd6:	da04      	bge.n	801cce2 <__ulp+0x2a>
 801ccd8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801ccdc:	4113      	asrs	r3, r2
 801ccde:	2200      	movs	r2, #0
 801cce0:	e008      	b.n	801ccf4 <__ulp+0x3c>
 801cce2:	f1a2 0314 	sub.w	r3, r2, #20
 801cce6:	2b1e      	cmp	r3, #30
 801cce8:	bfda      	itte	le
 801ccea:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801ccee:	40da      	lsrle	r2, r3
 801ccf0:	2201      	movgt	r2, #1
 801ccf2:	2300      	movs	r3, #0
 801ccf4:	4619      	mov	r1, r3
 801ccf6:	4610      	mov	r0, r2
 801ccf8:	ec41 0b10 	vmov	d0, r0, r1
 801ccfc:	b002      	add	sp, #8
 801ccfe:	4770      	bx	lr
 801cd00:	7ff00000 	.word	0x7ff00000

0801cd04 <__b2d>:
 801cd04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cd08:	6906      	ldr	r6, [r0, #16]
 801cd0a:	f100 0814 	add.w	r8, r0, #20
 801cd0e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801cd12:	1f37      	subs	r7, r6, #4
 801cd14:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801cd18:	4610      	mov	r0, r2
 801cd1a:	f7ff fd53 	bl	801c7c4 <__hi0bits>
 801cd1e:	f1c0 0320 	rsb	r3, r0, #32
 801cd22:	280a      	cmp	r0, #10
 801cd24:	600b      	str	r3, [r1, #0]
 801cd26:	491b      	ldr	r1, [pc, #108]	@ (801cd94 <__b2d+0x90>)
 801cd28:	dc15      	bgt.n	801cd56 <__b2d+0x52>
 801cd2a:	f1c0 0c0b 	rsb	ip, r0, #11
 801cd2e:	fa22 f30c 	lsr.w	r3, r2, ip
 801cd32:	45b8      	cmp	r8, r7
 801cd34:	ea43 0501 	orr.w	r5, r3, r1
 801cd38:	bf34      	ite	cc
 801cd3a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801cd3e:	2300      	movcs	r3, #0
 801cd40:	3015      	adds	r0, #21
 801cd42:	fa02 f000 	lsl.w	r0, r2, r0
 801cd46:	fa23 f30c 	lsr.w	r3, r3, ip
 801cd4a:	4303      	orrs	r3, r0
 801cd4c:	461c      	mov	r4, r3
 801cd4e:	ec45 4b10 	vmov	d0, r4, r5
 801cd52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd56:	45b8      	cmp	r8, r7
 801cd58:	bf3a      	itte	cc
 801cd5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801cd5e:	f1a6 0708 	subcc.w	r7, r6, #8
 801cd62:	2300      	movcs	r3, #0
 801cd64:	380b      	subs	r0, #11
 801cd66:	d012      	beq.n	801cd8e <__b2d+0x8a>
 801cd68:	f1c0 0120 	rsb	r1, r0, #32
 801cd6c:	fa23 f401 	lsr.w	r4, r3, r1
 801cd70:	4082      	lsls	r2, r0
 801cd72:	4322      	orrs	r2, r4
 801cd74:	4547      	cmp	r7, r8
 801cd76:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801cd7a:	bf8c      	ite	hi
 801cd7c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801cd80:	2200      	movls	r2, #0
 801cd82:	4083      	lsls	r3, r0
 801cd84:	40ca      	lsrs	r2, r1
 801cd86:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801cd8a:	4313      	orrs	r3, r2
 801cd8c:	e7de      	b.n	801cd4c <__b2d+0x48>
 801cd8e:	ea42 0501 	orr.w	r5, r2, r1
 801cd92:	e7db      	b.n	801cd4c <__b2d+0x48>
 801cd94:	3ff00000 	.word	0x3ff00000

0801cd98 <__d2b>:
 801cd98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cd9c:	460f      	mov	r7, r1
 801cd9e:	2101      	movs	r1, #1
 801cda0:	ec59 8b10 	vmov	r8, r9, d0
 801cda4:	4616      	mov	r6, r2
 801cda6:	f7ff fc1b 	bl	801c5e0 <_Balloc>
 801cdaa:	4604      	mov	r4, r0
 801cdac:	b930      	cbnz	r0, 801cdbc <__d2b+0x24>
 801cdae:	4602      	mov	r2, r0
 801cdb0:	4b23      	ldr	r3, [pc, #140]	@ (801ce40 <__d2b+0xa8>)
 801cdb2:	4824      	ldr	r0, [pc, #144]	@ (801ce44 <__d2b+0xac>)
 801cdb4:	f240 310f 	movw	r1, #783	@ 0x30f
 801cdb8:	f7fe fc9a 	bl	801b6f0 <__assert_func>
 801cdbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801cdc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cdc4:	b10d      	cbz	r5, 801cdca <__d2b+0x32>
 801cdc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801cdca:	9301      	str	r3, [sp, #4]
 801cdcc:	f1b8 0300 	subs.w	r3, r8, #0
 801cdd0:	d023      	beq.n	801ce1a <__d2b+0x82>
 801cdd2:	4668      	mov	r0, sp
 801cdd4:	9300      	str	r3, [sp, #0]
 801cdd6:	f7ff fd14 	bl	801c802 <__lo0bits>
 801cdda:	e9dd 1200 	ldrd	r1, r2, [sp]
 801cdde:	b1d0      	cbz	r0, 801ce16 <__d2b+0x7e>
 801cde0:	f1c0 0320 	rsb	r3, r0, #32
 801cde4:	fa02 f303 	lsl.w	r3, r2, r3
 801cde8:	430b      	orrs	r3, r1
 801cdea:	40c2      	lsrs	r2, r0
 801cdec:	6163      	str	r3, [r4, #20]
 801cdee:	9201      	str	r2, [sp, #4]
 801cdf0:	9b01      	ldr	r3, [sp, #4]
 801cdf2:	61a3      	str	r3, [r4, #24]
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	bf0c      	ite	eq
 801cdf8:	2201      	moveq	r2, #1
 801cdfa:	2202      	movne	r2, #2
 801cdfc:	6122      	str	r2, [r4, #16]
 801cdfe:	b1a5      	cbz	r5, 801ce2a <__d2b+0x92>
 801ce00:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801ce04:	4405      	add	r5, r0
 801ce06:	603d      	str	r5, [r7, #0]
 801ce08:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801ce0c:	6030      	str	r0, [r6, #0]
 801ce0e:	4620      	mov	r0, r4
 801ce10:	b003      	add	sp, #12
 801ce12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ce16:	6161      	str	r1, [r4, #20]
 801ce18:	e7ea      	b.n	801cdf0 <__d2b+0x58>
 801ce1a:	a801      	add	r0, sp, #4
 801ce1c:	f7ff fcf1 	bl	801c802 <__lo0bits>
 801ce20:	9b01      	ldr	r3, [sp, #4]
 801ce22:	6163      	str	r3, [r4, #20]
 801ce24:	3020      	adds	r0, #32
 801ce26:	2201      	movs	r2, #1
 801ce28:	e7e8      	b.n	801cdfc <__d2b+0x64>
 801ce2a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801ce2e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801ce32:	6038      	str	r0, [r7, #0]
 801ce34:	6918      	ldr	r0, [r3, #16]
 801ce36:	f7ff fcc5 	bl	801c7c4 <__hi0bits>
 801ce3a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801ce3e:	e7e5      	b.n	801ce0c <__d2b+0x74>
 801ce40:	080215b4 	.word	0x080215b4
 801ce44:	080215c5 	.word	0x080215c5

0801ce48 <__ratio>:
 801ce48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ce4c:	b085      	sub	sp, #20
 801ce4e:	e9cd 1000 	strd	r1, r0, [sp]
 801ce52:	a902      	add	r1, sp, #8
 801ce54:	f7ff ff56 	bl	801cd04 <__b2d>
 801ce58:	9800      	ldr	r0, [sp, #0]
 801ce5a:	a903      	add	r1, sp, #12
 801ce5c:	ec55 4b10 	vmov	r4, r5, d0
 801ce60:	f7ff ff50 	bl	801cd04 <__b2d>
 801ce64:	9b01      	ldr	r3, [sp, #4]
 801ce66:	6919      	ldr	r1, [r3, #16]
 801ce68:	9b00      	ldr	r3, [sp, #0]
 801ce6a:	691b      	ldr	r3, [r3, #16]
 801ce6c:	1ac9      	subs	r1, r1, r3
 801ce6e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801ce72:	1a9b      	subs	r3, r3, r2
 801ce74:	ec5b ab10 	vmov	sl, fp, d0
 801ce78:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801ce7c:	2b00      	cmp	r3, #0
 801ce7e:	bfce      	itee	gt
 801ce80:	462a      	movgt	r2, r5
 801ce82:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801ce86:	465a      	movle	r2, fp
 801ce88:	462f      	mov	r7, r5
 801ce8a:	46d9      	mov	r9, fp
 801ce8c:	bfcc      	ite	gt
 801ce8e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801ce92:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801ce96:	464b      	mov	r3, r9
 801ce98:	4652      	mov	r2, sl
 801ce9a:	4620      	mov	r0, r4
 801ce9c:	4639      	mov	r1, r7
 801ce9e:	f7e3 fce5 	bl	800086c <__aeabi_ddiv>
 801cea2:	ec41 0b10 	vmov	d0, r0, r1
 801cea6:	b005      	add	sp, #20
 801cea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ceac <__copybits>:
 801ceac:	3901      	subs	r1, #1
 801ceae:	b570      	push	{r4, r5, r6, lr}
 801ceb0:	1149      	asrs	r1, r1, #5
 801ceb2:	6914      	ldr	r4, [r2, #16]
 801ceb4:	3101      	adds	r1, #1
 801ceb6:	f102 0314 	add.w	r3, r2, #20
 801ceba:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801cebe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801cec2:	1f05      	subs	r5, r0, #4
 801cec4:	42a3      	cmp	r3, r4
 801cec6:	d30c      	bcc.n	801cee2 <__copybits+0x36>
 801cec8:	1aa3      	subs	r3, r4, r2
 801ceca:	3b11      	subs	r3, #17
 801cecc:	f023 0303 	bic.w	r3, r3, #3
 801ced0:	3211      	adds	r2, #17
 801ced2:	42a2      	cmp	r2, r4
 801ced4:	bf88      	it	hi
 801ced6:	2300      	movhi	r3, #0
 801ced8:	4418      	add	r0, r3
 801ceda:	2300      	movs	r3, #0
 801cedc:	4288      	cmp	r0, r1
 801cede:	d305      	bcc.n	801ceec <__copybits+0x40>
 801cee0:	bd70      	pop	{r4, r5, r6, pc}
 801cee2:	f853 6b04 	ldr.w	r6, [r3], #4
 801cee6:	f845 6f04 	str.w	r6, [r5, #4]!
 801ceea:	e7eb      	b.n	801cec4 <__copybits+0x18>
 801ceec:	f840 3b04 	str.w	r3, [r0], #4
 801cef0:	e7f4      	b.n	801cedc <__copybits+0x30>

0801cef2 <__any_on>:
 801cef2:	f100 0214 	add.w	r2, r0, #20
 801cef6:	6900      	ldr	r0, [r0, #16]
 801cef8:	114b      	asrs	r3, r1, #5
 801cefa:	4298      	cmp	r0, r3
 801cefc:	b510      	push	{r4, lr}
 801cefe:	db11      	blt.n	801cf24 <__any_on+0x32>
 801cf00:	dd0a      	ble.n	801cf18 <__any_on+0x26>
 801cf02:	f011 011f 	ands.w	r1, r1, #31
 801cf06:	d007      	beq.n	801cf18 <__any_on+0x26>
 801cf08:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801cf0c:	fa24 f001 	lsr.w	r0, r4, r1
 801cf10:	fa00 f101 	lsl.w	r1, r0, r1
 801cf14:	428c      	cmp	r4, r1
 801cf16:	d10b      	bne.n	801cf30 <__any_on+0x3e>
 801cf18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801cf1c:	4293      	cmp	r3, r2
 801cf1e:	d803      	bhi.n	801cf28 <__any_on+0x36>
 801cf20:	2000      	movs	r0, #0
 801cf22:	bd10      	pop	{r4, pc}
 801cf24:	4603      	mov	r3, r0
 801cf26:	e7f7      	b.n	801cf18 <__any_on+0x26>
 801cf28:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801cf2c:	2900      	cmp	r1, #0
 801cf2e:	d0f5      	beq.n	801cf1c <__any_on+0x2a>
 801cf30:	2001      	movs	r0, #1
 801cf32:	e7f6      	b.n	801cf22 <__any_on+0x30>

0801cf34 <_realloc_r>:
 801cf34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cf38:	4607      	mov	r7, r0
 801cf3a:	4614      	mov	r4, r2
 801cf3c:	460d      	mov	r5, r1
 801cf3e:	b921      	cbnz	r1, 801cf4a <_realloc_r+0x16>
 801cf40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801cf44:	4611      	mov	r1, r2
 801cf46:	f7ff babf 	b.w	801c4c8 <_malloc_r>
 801cf4a:	b92a      	cbnz	r2, 801cf58 <_realloc_r+0x24>
 801cf4c:	f7ff fa48 	bl	801c3e0 <_free_r>
 801cf50:	4625      	mov	r5, r4
 801cf52:	4628      	mov	r0, r5
 801cf54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cf58:	f002 f87f 	bl	801f05a <_malloc_usable_size_r>
 801cf5c:	4284      	cmp	r4, r0
 801cf5e:	4606      	mov	r6, r0
 801cf60:	d802      	bhi.n	801cf68 <_realloc_r+0x34>
 801cf62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cf66:	d8f4      	bhi.n	801cf52 <_realloc_r+0x1e>
 801cf68:	4621      	mov	r1, r4
 801cf6a:	4638      	mov	r0, r7
 801cf6c:	f7ff faac 	bl	801c4c8 <_malloc_r>
 801cf70:	4680      	mov	r8, r0
 801cf72:	b908      	cbnz	r0, 801cf78 <_realloc_r+0x44>
 801cf74:	4645      	mov	r5, r8
 801cf76:	e7ec      	b.n	801cf52 <_realloc_r+0x1e>
 801cf78:	42b4      	cmp	r4, r6
 801cf7a:	4622      	mov	r2, r4
 801cf7c:	4629      	mov	r1, r5
 801cf7e:	bf28      	it	cs
 801cf80:	4632      	movcs	r2, r6
 801cf82:	f7fe fba6 	bl	801b6d2 <memcpy>
 801cf86:	4629      	mov	r1, r5
 801cf88:	4638      	mov	r0, r7
 801cf8a:	f7ff fa29 	bl	801c3e0 <_free_r>
 801cf8e:	e7f1      	b.n	801cf74 <_realloc_r+0x40>

0801cf90 <sulp>:
 801cf90:	b570      	push	{r4, r5, r6, lr}
 801cf92:	4604      	mov	r4, r0
 801cf94:	460d      	mov	r5, r1
 801cf96:	ec45 4b10 	vmov	d0, r4, r5
 801cf9a:	4616      	mov	r6, r2
 801cf9c:	f7ff fe8c 	bl	801ccb8 <__ulp>
 801cfa0:	ec51 0b10 	vmov	r0, r1, d0
 801cfa4:	b17e      	cbz	r6, 801cfc6 <sulp+0x36>
 801cfa6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801cfaa:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	dd09      	ble.n	801cfc6 <sulp+0x36>
 801cfb2:	051b      	lsls	r3, r3, #20
 801cfb4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801cfb8:	2400      	movs	r4, #0
 801cfba:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801cfbe:	4622      	mov	r2, r4
 801cfc0:	462b      	mov	r3, r5
 801cfc2:	f7e3 fb29 	bl	8000618 <__aeabi_dmul>
 801cfc6:	ec41 0b10 	vmov	d0, r0, r1
 801cfca:	bd70      	pop	{r4, r5, r6, pc}
 801cfcc:	0000      	movs	r0, r0
	...

0801cfd0 <_strtod_l>:
 801cfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfd4:	b09f      	sub	sp, #124	@ 0x7c
 801cfd6:	460c      	mov	r4, r1
 801cfd8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801cfda:	2200      	movs	r2, #0
 801cfdc:	921a      	str	r2, [sp, #104]	@ 0x68
 801cfde:	9005      	str	r0, [sp, #20]
 801cfe0:	f04f 0a00 	mov.w	sl, #0
 801cfe4:	f04f 0b00 	mov.w	fp, #0
 801cfe8:	460a      	mov	r2, r1
 801cfea:	9219      	str	r2, [sp, #100]	@ 0x64
 801cfec:	7811      	ldrb	r1, [r2, #0]
 801cfee:	292b      	cmp	r1, #43	@ 0x2b
 801cff0:	d04a      	beq.n	801d088 <_strtod_l+0xb8>
 801cff2:	d838      	bhi.n	801d066 <_strtod_l+0x96>
 801cff4:	290d      	cmp	r1, #13
 801cff6:	d832      	bhi.n	801d05e <_strtod_l+0x8e>
 801cff8:	2908      	cmp	r1, #8
 801cffa:	d832      	bhi.n	801d062 <_strtod_l+0x92>
 801cffc:	2900      	cmp	r1, #0
 801cffe:	d03b      	beq.n	801d078 <_strtod_l+0xa8>
 801d000:	2200      	movs	r2, #0
 801d002:	920e      	str	r2, [sp, #56]	@ 0x38
 801d004:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801d006:	782a      	ldrb	r2, [r5, #0]
 801d008:	2a30      	cmp	r2, #48	@ 0x30
 801d00a:	f040 80b2 	bne.w	801d172 <_strtod_l+0x1a2>
 801d00e:	786a      	ldrb	r2, [r5, #1]
 801d010:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d014:	2a58      	cmp	r2, #88	@ 0x58
 801d016:	d16e      	bne.n	801d0f6 <_strtod_l+0x126>
 801d018:	9302      	str	r3, [sp, #8]
 801d01a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d01c:	9301      	str	r3, [sp, #4]
 801d01e:	ab1a      	add	r3, sp, #104	@ 0x68
 801d020:	9300      	str	r3, [sp, #0]
 801d022:	4a8f      	ldr	r2, [pc, #572]	@ (801d260 <_strtod_l+0x290>)
 801d024:	9805      	ldr	r0, [sp, #20]
 801d026:	ab1b      	add	r3, sp, #108	@ 0x6c
 801d028:	a919      	add	r1, sp, #100	@ 0x64
 801d02a:	f001 fd33 	bl	801ea94 <__gethex>
 801d02e:	f010 060f 	ands.w	r6, r0, #15
 801d032:	4604      	mov	r4, r0
 801d034:	d005      	beq.n	801d042 <_strtod_l+0x72>
 801d036:	2e06      	cmp	r6, #6
 801d038:	d128      	bne.n	801d08c <_strtod_l+0xbc>
 801d03a:	3501      	adds	r5, #1
 801d03c:	2300      	movs	r3, #0
 801d03e:	9519      	str	r5, [sp, #100]	@ 0x64
 801d040:	930e      	str	r3, [sp, #56]	@ 0x38
 801d042:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d044:	2b00      	cmp	r3, #0
 801d046:	f040 858e 	bne.w	801db66 <_strtod_l+0xb96>
 801d04a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d04c:	b1cb      	cbz	r3, 801d082 <_strtod_l+0xb2>
 801d04e:	4652      	mov	r2, sl
 801d050:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801d054:	ec43 2b10 	vmov	d0, r2, r3
 801d058:	b01f      	add	sp, #124	@ 0x7c
 801d05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d05e:	2920      	cmp	r1, #32
 801d060:	d1ce      	bne.n	801d000 <_strtod_l+0x30>
 801d062:	3201      	adds	r2, #1
 801d064:	e7c1      	b.n	801cfea <_strtod_l+0x1a>
 801d066:	292d      	cmp	r1, #45	@ 0x2d
 801d068:	d1ca      	bne.n	801d000 <_strtod_l+0x30>
 801d06a:	2101      	movs	r1, #1
 801d06c:	910e      	str	r1, [sp, #56]	@ 0x38
 801d06e:	1c51      	adds	r1, r2, #1
 801d070:	9119      	str	r1, [sp, #100]	@ 0x64
 801d072:	7852      	ldrb	r2, [r2, #1]
 801d074:	2a00      	cmp	r2, #0
 801d076:	d1c5      	bne.n	801d004 <_strtod_l+0x34>
 801d078:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d07a:	9419      	str	r4, [sp, #100]	@ 0x64
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	f040 8570 	bne.w	801db62 <_strtod_l+0xb92>
 801d082:	4652      	mov	r2, sl
 801d084:	465b      	mov	r3, fp
 801d086:	e7e5      	b.n	801d054 <_strtod_l+0x84>
 801d088:	2100      	movs	r1, #0
 801d08a:	e7ef      	b.n	801d06c <_strtod_l+0x9c>
 801d08c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d08e:	b13a      	cbz	r2, 801d0a0 <_strtod_l+0xd0>
 801d090:	2135      	movs	r1, #53	@ 0x35
 801d092:	a81c      	add	r0, sp, #112	@ 0x70
 801d094:	f7ff ff0a 	bl	801ceac <__copybits>
 801d098:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d09a:	9805      	ldr	r0, [sp, #20]
 801d09c:	f7ff fae0 	bl	801c660 <_Bfree>
 801d0a0:	3e01      	subs	r6, #1
 801d0a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801d0a4:	2e04      	cmp	r6, #4
 801d0a6:	d806      	bhi.n	801d0b6 <_strtod_l+0xe6>
 801d0a8:	e8df f006 	tbb	[pc, r6]
 801d0ac:	201d0314 	.word	0x201d0314
 801d0b0:	14          	.byte	0x14
 801d0b1:	00          	.byte	0x00
 801d0b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801d0b6:	05e1      	lsls	r1, r4, #23
 801d0b8:	bf48      	it	mi
 801d0ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801d0be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d0c2:	0d1b      	lsrs	r3, r3, #20
 801d0c4:	051b      	lsls	r3, r3, #20
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	d1bb      	bne.n	801d042 <_strtod_l+0x72>
 801d0ca:	f7fe fad5 	bl	801b678 <__errno>
 801d0ce:	2322      	movs	r3, #34	@ 0x22
 801d0d0:	6003      	str	r3, [r0, #0]
 801d0d2:	e7b6      	b.n	801d042 <_strtod_l+0x72>
 801d0d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801d0d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801d0dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801d0e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801d0e4:	e7e7      	b.n	801d0b6 <_strtod_l+0xe6>
 801d0e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 801d268 <_strtod_l+0x298>
 801d0ea:	e7e4      	b.n	801d0b6 <_strtod_l+0xe6>
 801d0ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801d0f0:	f04f 3aff 	mov.w	sl, #4294967295
 801d0f4:	e7df      	b.n	801d0b6 <_strtod_l+0xe6>
 801d0f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d0f8:	1c5a      	adds	r2, r3, #1
 801d0fa:	9219      	str	r2, [sp, #100]	@ 0x64
 801d0fc:	785b      	ldrb	r3, [r3, #1]
 801d0fe:	2b30      	cmp	r3, #48	@ 0x30
 801d100:	d0f9      	beq.n	801d0f6 <_strtod_l+0x126>
 801d102:	2b00      	cmp	r3, #0
 801d104:	d09d      	beq.n	801d042 <_strtod_l+0x72>
 801d106:	2301      	movs	r3, #1
 801d108:	2700      	movs	r7, #0
 801d10a:	9308      	str	r3, [sp, #32]
 801d10c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d10e:	930c      	str	r3, [sp, #48]	@ 0x30
 801d110:	970b      	str	r7, [sp, #44]	@ 0x2c
 801d112:	46b9      	mov	r9, r7
 801d114:	220a      	movs	r2, #10
 801d116:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d118:	7805      	ldrb	r5, [r0, #0]
 801d11a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801d11e:	b2d9      	uxtb	r1, r3
 801d120:	2909      	cmp	r1, #9
 801d122:	d928      	bls.n	801d176 <_strtod_l+0x1a6>
 801d124:	494f      	ldr	r1, [pc, #316]	@ (801d264 <_strtod_l+0x294>)
 801d126:	2201      	movs	r2, #1
 801d128:	f7fe f9ec 	bl	801b504 <strncmp>
 801d12c:	2800      	cmp	r0, #0
 801d12e:	d032      	beq.n	801d196 <_strtod_l+0x1c6>
 801d130:	2000      	movs	r0, #0
 801d132:	462a      	mov	r2, r5
 801d134:	900a      	str	r0, [sp, #40]	@ 0x28
 801d136:	464d      	mov	r5, r9
 801d138:	4603      	mov	r3, r0
 801d13a:	2a65      	cmp	r2, #101	@ 0x65
 801d13c:	d001      	beq.n	801d142 <_strtod_l+0x172>
 801d13e:	2a45      	cmp	r2, #69	@ 0x45
 801d140:	d114      	bne.n	801d16c <_strtod_l+0x19c>
 801d142:	b91d      	cbnz	r5, 801d14c <_strtod_l+0x17c>
 801d144:	9a08      	ldr	r2, [sp, #32]
 801d146:	4302      	orrs	r2, r0
 801d148:	d096      	beq.n	801d078 <_strtod_l+0xa8>
 801d14a:	2500      	movs	r5, #0
 801d14c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801d14e:	1c62      	adds	r2, r4, #1
 801d150:	9219      	str	r2, [sp, #100]	@ 0x64
 801d152:	7862      	ldrb	r2, [r4, #1]
 801d154:	2a2b      	cmp	r2, #43	@ 0x2b
 801d156:	d07a      	beq.n	801d24e <_strtod_l+0x27e>
 801d158:	2a2d      	cmp	r2, #45	@ 0x2d
 801d15a:	d07e      	beq.n	801d25a <_strtod_l+0x28a>
 801d15c:	f04f 0c00 	mov.w	ip, #0
 801d160:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801d164:	2909      	cmp	r1, #9
 801d166:	f240 8085 	bls.w	801d274 <_strtod_l+0x2a4>
 801d16a:	9419      	str	r4, [sp, #100]	@ 0x64
 801d16c:	f04f 0800 	mov.w	r8, #0
 801d170:	e0a5      	b.n	801d2be <_strtod_l+0x2ee>
 801d172:	2300      	movs	r3, #0
 801d174:	e7c8      	b.n	801d108 <_strtod_l+0x138>
 801d176:	f1b9 0f08 	cmp.w	r9, #8
 801d17a:	bfd8      	it	le
 801d17c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801d17e:	f100 0001 	add.w	r0, r0, #1
 801d182:	bfda      	itte	le
 801d184:	fb02 3301 	mlale	r3, r2, r1, r3
 801d188:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801d18a:	fb02 3707 	mlagt	r7, r2, r7, r3
 801d18e:	f109 0901 	add.w	r9, r9, #1
 801d192:	9019      	str	r0, [sp, #100]	@ 0x64
 801d194:	e7bf      	b.n	801d116 <_strtod_l+0x146>
 801d196:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d198:	1c5a      	adds	r2, r3, #1
 801d19a:	9219      	str	r2, [sp, #100]	@ 0x64
 801d19c:	785a      	ldrb	r2, [r3, #1]
 801d19e:	f1b9 0f00 	cmp.w	r9, #0
 801d1a2:	d03b      	beq.n	801d21c <_strtod_l+0x24c>
 801d1a4:	900a      	str	r0, [sp, #40]	@ 0x28
 801d1a6:	464d      	mov	r5, r9
 801d1a8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801d1ac:	2b09      	cmp	r3, #9
 801d1ae:	d912      	bls.n	801d1d6 <_strtod_l+0x206>
 801d1b0:	2301      	movs	r3, #1
 801d1b2:	e7c2      	b.n	801d13a <_strtod_l+0x16a>
 801d1b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d1b6:	1c5a      	adds	r2, r3, #1
 801d1b8:	9219      	str	r2, [sp, #100]	@ 0x64
 801d1ba:	785a      	ldrb	r2, [r3, #1]
 801d1bc:	3001      	adds	r0, #1
 801d1be:	2a30      	cmp	r2, #48	@ 0x30
 801d1c0:	d0f8      	beq.n	801d1b4 <_strtod_l+0x1e4>
 801d1c2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801d1c6:	2b08      	cmp	r3, #8
 801d1c8:	f200 84d2 	bhi.w	801db70 <_strtod_l+0xba0>
 801d1cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d1ce:	900a      	str	r0, [sp, #40]	@ 0x28
 801d1d0:	2000      	movs	r0, #0
 801d1d2:	930c      	str	r3, [sp, #48]	@ 0x30
 801d1d4:	4605      	mov	r5, r0
 801d1d6:	3a30      	subs	r2, #48	@ 0x30
 801d1d8:	f100 0301 	add.w	r3, r0, #1
 801d1dc:	d018      	beq.n	801d210 <_strtod_l+0x240>
 801d1de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801d1e0:	4419      	add	r1, r3
 801d1e2:	910a      	str	r1, [sp, #40]	@ 0x28
 801d1e4:	462e      	mov	r6, r5
 801d1e6:	f04f 0e0a 	mov.w	lr, #10
 801d1ea:	1c71      	adds	r1, r6, #1
 801d1ec:	eba1 0c05 	sub.w	ip, r1, r5
 801d1f0:	4563      	cmp	r3, ip
 801d1f2:	dc15      	bgt.n	801d220 <_strtod_l+0x250>
 801d1f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801d1f8:	182b      	adds	r3, r5, r0
 801d1fa:	2b08      	cmp	r3, #8
 801d1fc:	f105 0501 	add.w	r5, r5, #1
 801d200:	4405      	add	r5, r0
 801d202:	dc1a      	bgt.n	801d23a <_strtod_l+0x26a>
 801d204:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d206:	230a      	movs	r3, #10
 801d208:	fb03 2301 	mla	r3, r3, r1, r2
 801d20c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d20e:	2300      	movs	r3, #0
 801d210:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d212:	1c51      	adds	r1, r2, #1
 801d214:	9119      	str	r1, [sp, #100]	@ 0x64
 801d216:	7852      	ldrb	r2, [r2, #1]
 801d218:	4618      	mov	r0, r3
 801d21a:	e7c5      	b.n	801d1a8 <_strtod_l+0x1d8>
 801d21c:	4648      	mov	r0, r9
 801d21e:	e7ce      	b.n	801d1be <_strtod_l+0x1ee>
 801d220:	2e08      	cmp	r6, #8
 801d222:	dc05      	bgt.n	801d230 <_strtod_l+0x260>
 801d224:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801d226:	fb0e f606 	mul.w	r6, lr, r6
 801d22a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801d22c:	460e      	mov	r6, r1
 801d22e:	e7dc      	b.n	801d1ea <_strtod_l+0x21a>
 801d230:	2910      	cmp	r1, #16
 801d232:	bfd8      	it	le
 801d234:	fb0e f707 	mulle.w	r7, lr, r7
 801d238:	e7f8      	b.n	801d22c <_strtod_l+0x25c>
 801d23a:	2b0f      	cmp	r3, #15
 801d23c:	bfdc      	itt	le
 801d23e:	230a      	movle	r3, #10
 801d240:	fb03 2707 	mlale	r7, r3, r7, r2
 801d244:	e7e3      	b.n	801d20e <_strtod_l+0x23e>
 801d246:	2300      	movs	r3, #0
 801d248:	930a      	str	r3, [sp, #40]	@ 0x28
 801d24a:	2301      	movs	r3, #1
 801d24c:	e77a      	b.n	801d144 <_strtod_l+0x174>
 801d24e:	f04f 0c00 	mov.w	ip, #0
 801d252:	1ca2      	adds	r2, r4, #2
 801d254:	9219      	str	r2, [sp, #100]	@ 0x64
 801d256:	78a2      	ldrb	r2, [r4, #2]
 801d258:	e782      	b.n	801d160 <_strtod_l+0x190>
 801d25a:	f04f 0c01 	mov.w	ip, #1
 801d25e:	e7f8      	b.n	801d252 <_strtod_l+0x282>
 801d260:	08021bd4 	.word	0x08021bd4
 801d264:	0802161e 	.word	0x0802161e
 801d268:	7ff00000 	.word	0x7ff00000
 801d26c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d26e:	1c51      	adds	r1, r2, #1
 801d270:	9119      	str	r1, [sp, #100]	@ 0x64
 801d272:	7852      	ldrb	r2, [r2, #1]
 801d274:	2a30      	cmp	r2, #48	@ 0x30
 801d276:	d0f9      	beq.n	801d26c <_strtod_l+0x29c>
 801d278:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801d27c:	2908      	cmp	r1, #8
 801d27e:	f63f af75 	bhi.w	801d16c <_strtod_l+0x19c>
 801d282:	3a30      	subs	r2, #48	@ 0x30
 801d284:	9209      	str	r2, [sp, #36]	@ 0x24
 801d286:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d288:	920f      	str	r2, [sp, #60]	@ 0x3c
 801d28a:	f04f 080a 	mov.w	r8, #10
 801d28e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d290:	1c56      	adds	r6, r2, #1
 801d292:	9619      	str	r6, [sp, #100]	@ 0x64
 801d294:	7852      	ldrb	r2, [r2, #1]
 801d296:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801d29a:	f1be 0f09 	cmp.w	lr, #9
 801d29e:	d939      	bls.n	801d314 <_strtod_l+0x344>
 801d2a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801d2a2:	1a76      	subs	r6, r6, r1
 801d2a4:	2e08      	cmp	r6, #8
 801d2a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801d2aa:	dc03      	bgt.n	801d2b4 <_strtod_l+0x2e4>
 801d2ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d2ae:	4588      	cmp	r8, r1
 801d2b0:	bfa8      	it	ge
 801d2b2:	4688      	movge	r8, r1
 801d2b4:	f1bc 0f00 	cmp.w	ip, #0
 801d2b8:	d001      	beq.n	801d2be <_strtod_l+0x2ee>
 801d2ba:	f1c8 0800 	rsb	r8, r8, #0
 801d2be:	2d00      	cmp	r5, #0
 801d2c0:	d14e      	bne.n	801d360 <_strtod_l+0x390>
 801d2c2:	9908      	ldr	r1, [sp, #32]
 801d2c4:	4308      	orrs	r0, r1
 801d2c6:	f47f aebc 	bne.w	801d042 <_strtod_l+0x72>
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	f47f aed4 	bne.w	801d078 <_strtod_l+0xa8>
 801d2d0:	2a69      	cmp	r2, #105	@ 0x69
 801d2d2:	d028      	beq.n	801d326 <_strtod_l+0x356>
 801d2d4:	dc25      	bgt.n	801d322 <_strtod_l+0x352>
 801d2d6:	2a49      	cmp	r2, #73	@ 0x49
 801d2d8:	d025      	beq.n	801d326 <_strtod_l+0x356>
 801d2da:	2a4e      	cmp	r2, #78	@ 0x4e
 801d2dc:	f47f aecc 	bne.w	801d078 <_strtod_l+0xa8>
 801d2e0:	499a      	ldr	r1, [pc, #616]	@ (801d54c <_strtod_l+0x57c>)
 801d2e2:	a819      	add	r0, sp, #100	@ 0x64
 801d2e4:	f001 fdf8 	bl	801eed8 <__match>
 801d2e8:	2800      	cmp	r0, #0
 801d2ea:	f43f aec5 	beq.w	801d078 <_strtod_l+0xa8>
 801d2ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d2f0:	781b      	ldrb	r3, [r3, #0]
 801d2f2:	2b28      	cmp	r3, #40	@ 0x28
 801d2f4:	d12e      	bne.n	801d354 <_strtod_l+0x384>
 801d2f6:	4996      	ldr	r1, [pc, #600]	@ (801d550 <_strtod_l+0x580>)
 801d2f8:	aa1c      	add	r2, sp, #112	@ 0x70
 801d2fa:	a819      	add	r0, sp, #100	@ 0x64
 801d2fc:	f001 fe00 	bl	801ef00 <__hexnan>
 801d300:	2805      	cmp	r0, #5
 801d302:	d127      	bne.n	801d354 <_strtod_l+0x384>
 801d304:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801d306:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801d30a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801d30e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801d312:	e696      	b.n	801d042 <_strtod_l+0x72>
 801d314:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d316:	fb08 2101 	mla	r1, r8, r1, r2
 801d31a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801d31e:	9209      	str	r2, [sp, #36]	@ 0x24
 801d320:	e7b5      	b.n	801d28e <_strtod_l+0x2be>
 801d322:	2a6e      	cmp	r2, #110	@ 0x6e
 801d324:	e7da      	b.n	801d2dc <_strtod_l+0x30c>
 801d326:	498b      	ldr	r1, [pc, #556]	@ (801d554 <_strtod_l+0x584>)
 801d328:	a819      	add	r0, sp, #100	@ 0x64
 801d32a:	f001 fdd5 	bl	801eed8 <__match>
 801d32e:	2800      	cmp	r0, #0
 801d330:	f43f aea2 	beq.w	801d078 <_strtod_l+0xa8>
 801d334:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d336:	4988      	ldr	r1, [pc, #544]	@ (801d558 <_strtod_l+0x588>)
 801d338:	3b01      	subs	r3, #1
 801d33a:	a819      	add	r0, sp, #100	@ 0x64
 801d33c:	9319      	str	r3, [sp, #100]	@ 0x64
 801d33e:	f001 fdcb 	bl	801eed8 <__match>
 801d342:	b910      	cbnz	r0, 801d34a <_strtod_l+0x37a>
 801d344:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d346:	3301      	adds	r3, #1
 801d348:	9319      	str	r3, [sp, #100]	@ 0x64
 801d34a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 801d568 <_strtod_l+0x598>
 801d34e:	f04f 0a00 	mov.w	sl, #0
 801d352:	e676      	b.n	801d042 <_strtod_l+0x72>
 801d354:	4881      	ldr	r0, [pc, #516]	@ (801d55c <_strtod_l+0x58c>)
 801d356:	f001 fb13 	bl	801e980 <nan>
 801d35a:	ec5b ab10 	vmov	sl, fp, d0
 801d35e:	e670      	b.n	801d042 <_strtod_l+0x72>
 801d360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d362:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d364:	eba8 0303 	sub.w	r3, r8, r3
 801d368:	f1b9 0f00 	cmp.w	r9, #0
 801d36c:	bf08      	it	eq
 801d36e:	46a9      	moveq	r9, r5
 801d370:	2d10      	cmp	r5, #16
 801d372:	9309      	str	r3, [sp, #36]	@ 0x24
 801d374:	462c      	mov	r4, r5
 801d376:	bfa8      	it	ge
 801d378:	2410      	movge	r4, #16
 801d37a:	f7e3 f8d3 	bl	8000524 <__aeabi_ui2d>
 801d37e:	2d09      	cmp	r5, #9
 801d380:	4682      	mov	sl, r0
 801d382:	468b      	mov	fp, r1
 801d384:	dc13      	bgt.n	801d3ae <_strtod_l+0x3de>
 801d386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d388:	2b00      	cmp	r3, #0
 801d38a:	f43f ae5a 	beq.w	801d042 <_strtod_l+0x72>
 801d38e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d390:	dd78      	ble.n	801d484 <_strtod_l+0x4b4>
 801d392:	2b16      	cmp	r3, #22
 801d394:	dc5f      	bgt.n	801d456 <_strtod_l+0x486>
 801d396:	4972      	ldr	r1, [pc, #456]	@ (801d560 <_strtod_l+0x590>)
 801d398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d39c:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3a0:	4652      	mov	r2, sl
 801d3a2:	465b      	mov	r3, fp
 801d3a4:	f7e3 f938 	bl	8000618 <__aeabi_dmul>
 801d3a8:	4682      	mov	sl, r0
 801d3aa:	468b      	mov	fp, r1
 801d3ac:	e649      	b.n	801d042 <_strtod_l+0x72>
 801d3ae:	4b6c      	ldr	r3, [pc, #432]	@ (801d560 <_strtod_l+0x590>)
 801d3b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801d3b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801d3b8:	f7e3 f92e 	bl	8000618 <__aeabi_dmul>
 801d3bc:	4682      	mov	sl, r0
 801d3be:	4638      	mov	r0, r7
 801d3c0:	468b      	mov	fp, r1
 801d3c2:	f7e3 f8af 	bl	8000524 <__aeabi_ui2d>
 801d3c6:	4602      	mov	r2, r0
 801d3c8:	460b      	mov	r3, r1
 801d3ca:	4650      	mov	r0, sl
 801d3cc:	4659      	mov	r1, fp
 801d3ce:	f7e2 ff6d 	bl	80002ac <__adddf3>
 801d3d2:	2d0f      	cmp	r5, #15
 801d3d4:	4682      	mov	sl, r0
 801d3d6:	468b      	mov	fp, r1
 801d3d8:	ddd5      	ble.n	801d386 <_strtod_l+0x3b6>
 801d3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d3dc:	1b2c      	subs	r4, r5, r4
 801d3de:	441c      	add	r4, r3
 801d3e0:	2c00      	cmp	r4, #0
 801d3e2:	f340 8093 	ble.w	801d50c <_strtod_l+0x53c>
 801d3e6:	f014 030f 	ands.w	r3, r4, #15
 801d3ea:	d00a      	beq.n	801d402 <_strtod_l+0x432>
 801d3ec:	495c      	ldr	r1, [pc, #368]	@ (801d560 <_strtod_l+0x590>)
 801d3ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801d3f2:	4652      	mov	r2, sl
 801d3f4:	465b      	mov	r3, fp
 801d3f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d3fa:	f7e3 f90d 	bl	8000618 <__aeabi_dmul>
 801d3fe:	4682      	mov	sl, r0
 801d400:	468b      	mov	fp, r1
 801d402:	f034 040f 	bics.w	r4, r4, #15
 801d406:	d073      	beq.n	801d4f0 <_strtod_l+0x520>
 801d408:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801d40c:	dd49      	ble.n	801d4a2 <_strtod_l+0x4d2>
 801d40e:	2400      	movs	r4, #0
 801d410:	46a0      	mov	r8, r4
 801d412:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d414:	46a1      	mov	r9, r4
 801d416:	9a05      	ldr	r2, [sp, #20]
 801d418:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 801d568 <_strtod_l+0x598>
 801d41c:	2322      	movs	r3, #34	@ 0x22
 801d41e:	6013      	str	r3, [r2, #0]
 801d420:	f04f 0a00 	mov.w	sl, #0
 801d424:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d426:	2b00      	cmp	r3, #0
 801d428:	f43f ae0b 	beq.w	801d042 <_strtod_l+0x72>
 801d42c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d42e:	9805      	ldr	r0, [sp, #20]
 801d430:	f7ff f916 	bl	801c660 <_Bfree>
 801d434:	9805      	ldr	r0, [sp, #20]
 801d436:	4649      	mov	r1, r9
 801d438:	f7ff f912 	bl	801c660 <_Bfree>
 801d43c:	9805      	ldr	r0, [sp, #20]
 801d43e:	4641      	mov	r1, r8
 801d440:	f7ff f90e 	bl	801c660 <_Bfree>
 801d444:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d446:	9805      	ldr	r0, [sp, #20]
 801d448:	f7ff f90a 	bl	801c660 <_Bfree>
 801d44c:	9805      	ldr	r0, [sp, #20]
 801d44e:	4621      	mov	r1, r4
 801d450:	f7ff f906 	bl	801c660 <_Bfree>
 801d454:	e5f5      	b.n	801d042 <_strtod_l+0x72>
 801d456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d458:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801d45c:	4293      	cmp	r3, r2
 801d45e:	dbbc      	blt.n	801d3da <_strtod_l+0x40a>
 801d460:	4c3f      	ldr	r4, [pc, #252]	@ (801d560 <_strtod_l+0x590>)
 801d462:	f1c5 050f 	rsb	r5, r5, #15
 801d466:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801d46a:	4652      	mov	r2, sl
 801d46c:	465b      	mov	r3, fp
 801d46e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d472:	f7e3 f8d1 	bl	8000618 <__aeabi_dmul>
 801d476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d478:	1b5d      	subs	r5, r3, r5
 801d47a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801d47e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801d482:	e78f      	b.n	801d3a4 <_strtod_l+0x3d4>
 801d484:	3316      	adds	r3, #22
 801d486:	dba8      	blt.n	801d3da <_strtod_l+0x40a>
 801d488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d48a:	eba3 0808 	sub.w	r8, r3, r8
 801d48e:	4b34      	ldr	r3, [pc, #208]	@ (801d560 <_strtod_l+0x590>)
 801d490:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801d494:	e9d8 2300 	ldrd	r2, r3, [r8]
 801d498:	4650      	mov	r0, sl
 801d49a:	4659      	mov	r1, fp
 801d49c:	f7e3 f9e6 	bl	800086c <__aeabi_ddiv>
 801d4a0:	e782      	b.n	801d3a8 <_strtod_l+0x3d8>
 801d4a2:	2300      	movs	r3, #0
 801d4a4:	4f2f      	ldr	r7, [pc, #188]	@ (801d564 <_strtod_l+0x594>)
 801d4a6:	1124      	asrs	r4, r4, #4
 801d4a8:	4650      	mov	r0, sl
 801d4aa:	4659      	mov	r1, fp
 801d4ac:	461e      	mov	r6, r3
 801d4ae:	2c01      	cmp	r4, #1
 801d4b0:	dc21      	bgt.n	801d4f6 <_strtod_l+0x526>
 801d4b2:	b10b      	cbz	r3, 801d4b8 <_strtod_l+0x4e8>
 801d4b4:	4682      	mov	sl, r0
 801d4b6:	468b      	mov	fp, r1
 801d4b8:	492a      	ldr	r1, [pc, #168]	@ (801d564 <_strtod_l+0x594>)
 801d4ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801d4be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801d4c2:	4652      	mov	r2, sl
 801d4c4:	465b      	mov	r3, fp
 801d4c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801d4ca:	f7e3 f8a5 	bl	8000618 <__aeabi_dmul>
 801d4ce:	4b26      	ldr	r3, [pc, #152]	@ (801d568 <_strtod_l+0x598>)
 801d4d0:	460a      	mov	r2, r1
 801d4d2:	400b      	ands	r3, r1
 801d4d4:	4925      	ldr	r1, [pc, #148]	@ (801d56c <_strtod_l+0x59c>)
 801d4d6:	428b      	cmp	r3, r1
 801d4d8:	4682      	mov	sl, r0
 801d4da:	d898      	bhi.n	801d40e <_strtod_l+0x43e>
 801d4dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801d4e0:	428b      	cmp	r3, r1
 801d4e2:	bf86      	itte	hi
 801d4e4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 801d570 <_strtod_l+0x5a0>
 801d4e8:	f04f 3aff 	movhi.w	sl, #4294967295
 801d4ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801d4f0:	2300      	movs	r3, #0
 801d4f2:	9308      	str	r3, [sp, #32]
 801d4f4:	e076      	b.n	801d5e4 <_strtod_l+0x614>
 801d4f6:	07e2      	lsls	r2, r4, #31
 801d4f8:	d504      	bpl.n	801d504 <_strtod_l+0x534>
 801d4fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d4fe:	f7e3 f88b 	bl	8000618 <__aeabi_dmul>
 801d502:	2301      	movs	r3, #1
 801d504:	3601      	adds	r6, #1
 801d506:	1064      	asrs	r4, r4, #1
 801d508:	3708      	adds	r7, #8
 801d50a:	e7d0      	b.n	801d4ae <_strtod_l+0x4de>
 801d50c:	d0f0      	beq.n	801d4f0 <_strtod_l+0x520>
 801d50e:	4264      	negs	r4, r4
 801d510:	f014 020f 	ands.w	r2, r4, #15
 801d514:	d00a      	beq.n	801d52c <_strtod_l+0x55c>
 801d516:	4b12      	ldr	r3, [pc, #72]	@ (801d560 <_strtod_l+0x590>)
 801d518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801d51c:	4650      	mov	r0, sl
 801d51e:	4659      	mov	r1, fp
 801d520:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d524:	f7e3 f9a2 	bl	800086c <__aeabi_ddiv>
 801d528:	4682      	mov	sl, r0
 801d52a:	468b      	mov	fp, r1
 801d52c:	1124      	asrs	r4, r4, #4
 801d52e:	d0df      	beq.n	801d4f0 <_strtod_l+0x520>
 801d530:	2c1f      	cmp	r4, #31
 801d532:	dd1f      	ble.n	801d574 <_strtod_l+0x5a4>
 801d534:	2400      	movs	r4, #0
 801d536:	46a0      	mov	r8, r4
 801d538:	940b      	str	r4, [sp, #44]	@ 0x2c
 801d53a:	46a1      	mov	r9, r4
 801d53c:	9a05      	ldr	r2, [sp, #20]
 801d53e:	2322      	movs	r3, #34	@ 0x22
 801d540:	f04f 0a00 	mov.w	sl, #0
 801d544:	f04f 0b00 	mov.w	fp, #0
 801d548:	6013      	str	r3, [r2, #0]
 801d54a:	e76b      	b.n	801d424 <_strtod_l+0x454>
 801d54c:	080214c1 	.word	0x080214c1
 801d550:	08021bc0 	.word	0x08021bc0
 801d554:	080214b9 	.word	0x080214b9
 801d558:	0802153b 	.word	0x0802153b
 801d55c:	08021537 	.word	0x08021537
 801d560:	08021af8 	.word	0x08021af8
 801d564:	08021ad0 	.word	0x08021ad0
 801d568:	7ff00000 	.word	0x7ff00000
 801d56c:	7ca00000 	.word	0x7ca00000
 801d570:	7fefffff 	.word	0x7fefffff
 801d574:	f014 0310 	ands.w	r3, r4, #16
 801d578:	bf18      	it	ne
 801d57a:	236a      	movne	r3, #106	@ 0x6a
 801d57c:	4ea9      	ldr	r6, [pc, #676]	@ (801d824 <_strtod_l+0x854>)
 801d57e:	9308      	str	r3, [sp, #32]
 801d580:	4650      	mov	r0, sl
 801d582:	4659      	mov	r1, fp
 801d584:	2300      	movs	r3, #0
 801d586:	07e7      	lsls	r7, r4, #31
 801d588:	d504      	bpl.n	801d594 <_strtod_l+0x5c4>
 801d58a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801d58e:	f7e3 f843 	bl	8000618 <__aeabi_dmul>
 801d592:	2301      	movs	r3, #1
 801d594:	1064      	asrs	r4, r4, #1
 801d596:	f106 0608 	add.w	r6, r6, #8
 801d59a:	d1f4      	bne.n	801d586 <_strtod_l+0x5b6>
 801d59c:	b10b      	cbz	r3, 801d5a2 <_strtod_l+0x5d2>
 801d59e:	4682      	mov	sl, r0
 801d5a0:	468b      	mov	fp, r1
 801d5a2:	9b08      	ldr	r3, [sp, #32]
 801d5a4:	b1b3      	cbz	r3, 801d5d4 <_strtod_l+0x604>
 801d5a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801d5aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801d5ae:	2b00      	cmp	r3, #0
 801d5b0:	4659      	mov	r1, fp
 801d5b2:	dd0f      	ble.n	801d5d4 <_strtod_l+0x604>
 801d5b4:	2b1f      	cmp	r3, #31
 801d5b6:	dd56      	ble.n	801d666 <_strtod_l+0x696>
 801d5b8:	2b34      	cmp	r3, #52	@ 0x34
 801d5ba:	bfde      	ittt	le
 801d5bc:	f04f 33ff 	movle.w	r3, #4294967295
 801d5c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801d5c4:	4093      	lslle	r3, r2
 801d5c6:	f04f 0a00 	mov.w	sl, #0
 801d5ca:	bfcc      	ite	gt
 801d5cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801d5d0:	ea03 0b01 	andle.w	fp, r3, r1
 801d5d4:	2200      	movs	r2, #0
 801d5d6:	2300      	movs	r3, #0
 801d5d8:	4650      	mov	r0, sl
 801d5da:	4659      	mov	r1, fp
 801d5dc:	f7e3 fa84 	bl	8000ae8 <__aeabi_dcmpeq>
 801d5e0:	2800      	cmp	r0, #0
 801d5e2:	d1a7      	bne.n	801d534 <_strtod_l+0x564>
 801d5e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d5e6:	9300      	str	r3, [sp, #0]
 801d5e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801d5ea:	9805      	ldr	r0, [sp, #20]
 801d5ec:	462b      	mov	r3, r5
 801d5ee:	464a      	mov	r2, r9
 801d5f0:	f7ff f89e 	bl	801c730 <__s2b>
 801d5f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 801d5f6:	2800      	cmp	r0, #0
 801d5f8:	f43f af09 	beq.w	801d40e <_strtod_l+0x43e>
 801d5fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d5fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d600:	2a00      	cmp	r2, #0
 801d602:	eba3 0308 	sub.w	r3, r3, r8
 801d606:	bfa8      	it	ge
 801d608:	2300      	movge	r3, #0
 801d60a:	9312      	str	r3, [sp, #72]	@ 0x48
 801d60c:	2400      	movs	r4, #0
 801d60e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801d612:	9316      	str	r3, [sp, #88]	@ 0x58
 801d614:	46a0      	mov	r8, r4
 801d616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d618:	9805      	ldr	r0, [sp, #20]
 801d61a:	6859      	ldr	r1, [r3, #4]
 801d61c:	f7fe ffe0 	bl	801c5e0 <_Balloc>
 801d620:	4681      	mov	r9, r0
 801d622:	2800      	cmp	r0, #0
 801d624:	f43f aef7 	beq.w	801d416 <_strtod_l+0x446>
 801d628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d62a:	691a      	ldr	r2, [r3, #16]
 801d62c:	3202      	adds	r2, #2
 801d62e:	f103 010c 	add.w	r1, r3, #12
 801d632:	0092      	lsls	r2, r2, #2
 801d634:	300c      	adds	r0, #12
 801d636:	f7fe f84c 	bl	801b6d2 <memcpy>
 801d63a:	ec4b ab10 	vmov	d0, sl, fp
 801d63e:	9805      	ldr	r0, [sp, #20]
 801d640:	aa1c      	add	r2, sp, #112	@ 0x70
 801d642:	a91b      	add	r1, sp, #108	@ 0x6c
 801d644:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801d648:	f7ff fba6 	bl	801cd98 <__d2b>
 801d64c:	901a      	str	r0, [sp, #104]	@ 0x68
 801d64e:	2800      	cmp	r0, #0
 801d650:	f43f aee1 	beq.w	801d416 <_strtod_l+0x446>
 801d654:	9805      	ldr	r0, [sp, #20]
 801d656:	2101      	movs	r1, #1
 801d658:	f7ff f900 	bl	801c85c <__i2b>
 801d65c:	4680      	mov	r8, r0
 801d65e:	b948      	cbnz	r0, 801d674 <_strtod_l+0x6a4>
 801d660:	f04f 0800 	mov.w	r8, #0
 801d664:	e6d7      	b.n	801d416 <_strtod_l+0x446>
 801d666:	f04f 32ff 	mov.w	r2, #4294967295
 801d66a:	fa02 f303 	lsl.w	r3, r2, r3
 801d66e:	ea03 0a0a 	and.w	sl, r3, sl
 801d672:	e7af      	b.n	801d5d4 <_strtod_l+0x604>
 801d674:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801d676:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801d678:	2d00      	cmp	r5, #0
 801d67a:	bfab      	itete	ge
 801d67c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801d67e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801d680:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801d682:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801d684:	bfac      	ite	ge
 801d686:	18ef      	addge	r7, r5, r3
 801d688:	1b5e      	sublt	r6, r3, r5
 801d68a:	9b08      	ldr	r3, [sp, #32]
 801d68c:	1aed      	subs	r5, r5, r3
 801d68e:	4415      	add	r5, r2
 801d690:	4b65      	ldr	r3, [pc, #404]	@ (801d828 <_strtod_l+0x858>)
 801d692:	3d01      	subs	r5, #1
 801d694:	429d      	cmp	r5, r3
 801d696:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801d69a:	da50      	bge.n	801d73e <_strtod_l+0x76e>
 801d69c:	1b5b      	subs	r3, r3, r5
 801d69e:	2b1f      	cmp	r3, #31
 801d6a0:	eba2 0203 	sub.w	r2, r2, r3
 801d6a4:	f04f 0101 	mov.w	r1, #1
 801d6a8:	dc3d      	bgt.n	801d726 <_strtod_l+0x756>
 801d6aa:	fa01 f303 	lsl.w	r3, r1, r3
 801d6ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d6b0:	2300      	movs	r3, #0
 801d6b2:	9310      	str	r3, [sp, #64]	@ 0x40
 801d6b4:	18bd      	adds	r5, r7, r2
 801d6b6:	9b08      	ldr	r3, [sp, #32]
 801d6b8:	42af      	cmp	r7, r5
 801d6ba:	4416      	add	r6, r2
 801d6bc:	441e      	add	r6, r3
 801d6be:	463b      	mov	r3, r7
 801d6c0:	bfa8      	it	ge
 801d6c2:	462b      	movge	r3, r5
 801d6c4:	42b3      	cmp	r3, r6
 801d6c6:	bfa8      	it	ge
 801d6c8:	4633      	movge	r3, r6
 801d6ca:	2b00      	cmp	r3, #0
 801d6cc:	bfc2      	ittt	gt
 801d6ce:	1aed      	subgt	r5, r5, r3
 801d6d0:	1af6      	subgt	r6, r6, r3
 801d6d2:	1aff      	subgt	r7, r7, r3
 801d6d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801d6d6:	2b00      	cmp	r3, #0
 801d6d8:	dd16      	ble.n	801d708 <_strtod_l+0x738>
 801d6da:	4641      	mov	r1, r8
 801d6dc:	9805      	ldr	r0, [sp, #20]
 801d6de:	461a      	mov	r2, r3
 801d6e0:	f7ff f974 	bl	801c9cc <__pow5mult>
 801d6e4:	4680      	mov	r8, r0
 801d6e6:	2800      	cmp	r0, #0
 801d6e8:	d0ba      	beq.n	801d660 <_strtod_l+0x690>
 801d6ea:	4601      	mov	r1, r0
 801d6ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d6ee:	9805      	ldr	r0, [sp, #20]
 801d6f0:	f7ff f8ca 	bl	801c888 <__multiply>
 801d6f4:	900a      	str	r0, [sp, #40]	@ 0x28
 801d6f6:	2800      	cmp	r0, #0
 801d6f8:	f43f ae8d 	beq.w	801d416 <_strtod_l+0x446>
 801d6fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d6fe:	9805      	ldr	r0, [sp, #20]
 801d700:	f7fe ffae 	bl	801c660 <_Bfree>
 801d704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d706:	931a      	str	r3, [sp, #104]	@ 0x68
 801d708:	2d00      	cmp	r5, #0
 801d70a:	dc1d      	bgt.n	801d748 <_strtod_l+0x778>
 801d70c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d70e:	2b00      	cmp	r3, #0
 801d710:	dd23      	ble.n	801d75a <_strtod_l+0x78a>
 801d712:	4649      	mov	r1, r9
 801d714:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d716:	9805      	ldr	r0, [sp, #20]
 801d718:	f7ff f958 	bl	801c9cc <__pow5mult>
 801d71c:	4681      	mov	r9, r0
 801d71e:	b9e0      	cbnz	r0, 801d75a <_strtod_l+0x78a>
 801d720:	f04f 0900 	mov.w	r9, #0
 801d724:	e677      	b.n	801d416 <_strtod_l+0x446>
 801d726:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801d72a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801d72e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801d732:	35e2      	adds	r5, #226	@ 0xe2
 801d734:	fa01 f305 	lsl.w	r3, r1, r5
 801d738:	9310      	str	r3, [sp, #64]	@ 0x40
 801d73a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801d73c:	e7ba      	b.n	801d6b4 <_strtod_l+0x6e4>
 801d73e:	2300      	movs	r3, #0
 801d740:	9310      	str	r3, [sp, #64]	@ 0x40
 801d742:	2301      	movs	r3, #1
 801d744:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d746:	e7b5      	b.n	801d6b4 <_strtod_l+0x6e4>
 801d748:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d74a:	9805      	ldr	r0, [sp, #20]
 801d74c:	462a      	mov	r2, r5
 801d74e:	f7ff f997 	bl	801ca80 <__lshift>
 801d752:	901a      	str	r0, [sp, #104]	@ 0x68
 801d754:	2800      	cmp	r0, #0
 801d756:	d1d9      	bne.n	801d70c <_strtod_l+0x73c>
 801d758:	e65d      	b.n	801d416 <_strtod_l+0x446>
 801d75a:	2e00      	cmp	r6, #0
 801d75c:	dd07      	ble.n	801d76e <_strtod_l+0x79e>
 801d75e:	4649      	mov	r1, r9
 801d760:	9805      	ldr	r0, [sp, #20]
 801d762:	4632      	mov	r2, r6
 801d764:	f7ff f98c 	bl	801ca80 <__lshift>
 801d768:	4681      	mov	r9, r0
 801d76a:	2800      	cmp	r0, #0
 801d76c:	d0d8      	beq.n	801d720 <_strtod_l+0x750>
 801d76e:	2f00      	cmp	r7, #0
 801d770:	dd08      	ble.n	801d784 <_strtod_l+0x7b4>
 801d772:	4641      	mov	r1, r8
 801d774:	9805      	ldr	r0, [sp, #20]
 801d776:	463a      	mov	r2, r7
 801d778:	f7ff f982 	bl	801ca80 <__lshift>
 801d77c:	4680      	mov	r8, r0
 801d77e:	2800      	cmp	r0, #0
 801d780:	f43f ae49 	beq.w	801d416 <_strtod_l+0x446>
 801d784:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d786:	9805      	ldr	r0, [sp, #20]
 801d788:	464a      	mov	r2, r9
 801d78a:	f7ff fa01 	bl	801cb90 <__mdiff>
 801d78e:	4604      	mov	r4, r0
 801d790:	2800      	cmp	r0, #0
 801d792:	f43f ae40 	beq.w	801d416 <_strtod_l+0x446>
 801d796:	68c3      	ldr	r3, [r0, #12]
 801d798:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d79a:	2300      	movs	r3, #0
 801d79c:	60c3      	str	r3, [r0, #12]
 801d79e:	4641      	mov	r1, r8
 801d7a0:	f7ff f9da 	bl	801cb58 <__mcmp>
 801d7a4:	2800      	cmp	r0, #0
 801d7a6:	da45      	bge.n	801d834 <_strtod_l+0x864>
 801d7a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7aa:	ea53 030a 	orrs.w	r3, r3, sl
 801d7ae:	d16b      	bne.n	801d888 <_strtod_l+0x8b8>
 801d7b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d7b4:	2b00      	cmp	r3, #0
 801d7b6:	d167      	bne.n	801d888 <_strtod_l+0x8b8>
 801d7b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d7bc:	0d1b      	lsrs	r3, r3, #20
 801d7be:	051b      	lsls	r3, r3, #20
 801d7c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801d7c4:	d960      	bls.n	801d888 <_strtod_l+0x8b8>
 801d7c6:	6963      	ldr	r3, [r4, #20]
 801d7c8:	b913      	cbnz	r3, 801d7d0 <_strtod_l+0x800>
 801d7ca:	6923      	ldr	r3, [r4, #16]
 801d7cc:	2b01      	cmp	r3, #1
 801d7ce:	dd5b      	ble.n	801d888 <_strtod_l+0x8b8>
 801d7d0:	4621      	mov	r1, r4
 801d7d2:	2201      	movs	r2, #1
 801d7d4:	9805      	ldr	r0, [sp, #20]
 801d7d6:	f7ff f953 	bl	801ca80 <__lshift>
 801d7da:	4641      	mov	r1, r8
 801d7dc:	4604      	mov	r4, r0
 801d7de:	f7ff f9bb 	bl	801cb58 <__mcmp>
 801d7e2:	2800      	cmp	r0, #0
 801d7e4:	dd50      	ble.n	801d888 <_strtod_l+0x8b8>
 801d7e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801d7ea:	9a08      	ldr	r2, [sp, #32]
 801d7ec:	0d1b      	lsrs	r3, r3, #20
 801d7ee:	051b      	lsls	r3, r3, #20
 801d7f0:	2a00      	cmp	r2, #0
 801d7f2:	d06a      	beq.n	801d8ca <_strtod_l+0x8fa>
 801d7f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801d7f8:	d867      	bhi.n	801d8ca <_strtod_l+0x8fa>
 801d7fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801d7fe:	f67f ae9d 	bls.w	801d53c <_strtod_l+0x56c>
 801d802:	4b0a      	ldr	r3, [pc, #40]	@ (801d82c <_strtod_l+0x85c>)
 801d804:	4650      	mov	r0, sl
 801d806:	4659      	mov	r1, fp
 801d808:	2200      	movs	r2, #0
 801d80a:	f7e2 ff05 	bl	8000618 <__aeabi_dmul>
 801d80e:	4b08      	ldr	r3, [pc, #32]	@ (801d830 <_strtod_l+0x860>)
 801d810:	400b      	ands	r3, r1
 801d812:	4682      	mov	sl, r0
 801d814:	468b      	mov	fp, r1
 801d816:	2b00      	cmp	r3, #0
 801d818:	f47f ae08 	bne.w	801d42c <_strtod_l+0x45c>
 801d81c:	9a05      	ldr	r2, [sp, #20]
 801d81e:	2322      	movs	r3, #34	@ 0x22
 801d820:	6013      	str	r3, [r2, #0]
 801d822:	e603      	b.n	801d42c <_strtod_l+0x45c>
 801d824:	08021be8 	.word	0x08021be8
 801d828:	fffffc02 	.word	0xfffffc02
 801d82c:	39500000 	.word	0x39500000
 801d830:	7ff00000 	.word	0x7ff00000
 801d834:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801d838:	d165      	bne.n	801d906 <_strtod_l+0x936>
 801d83a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d83c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801d840:	b35a      	cbz	r2, 801d89a <_strtod_l+0x8ca>
 801d842:	4a9f      	ldr	r2, [pc, #636]	@ (801dac0 <_strtod_l+0xaf0>)
 801d844:	4293      	cmp	r3, r2
 801d846:	d12b      	bne.n	801d8a0 <_strtod_l+0x8d0>
 801d848:	9b08      	ldr	r3, [sp, #32]
 801d84a:	4651      	mov	r1, sl
 801d84c:	b303      	cbz	r3, 801d890 <_strtod_l+0x8c0>
 801d84e:	4b9d      	ldr	r3, [pc, #628]	@ (801dac4 <_strtod_l+0xaf4>)
 801d850:	465a      	mov	r2, fp
 801d852:	4013      	ands	r3, r2
 801d854:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801d858:	f04f 32ff 	mov.w	r2, #4294967295
 801d85c:	d81b      	bhi.n	801d896 <_strtod_l+0x8c6>
 801d85e:	0d1b      	lsrs	r3, r3, #20
 801d860:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801d864:	fa02 f303 	lsl.w	r3, r2, r3
 801d868:	4299      	cmp	r1, r3
 801d86a:	d119      	bne.n	801d8a0 <_strtod_l+0x8d0>
 801d86c:	4b96      	ldr	r3, [pc, #600]	@ (801dac8 <_strtod_l+0xaf8>)
 801d86e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d870:	429a      	cmp	r2, r3
 801d872:	d102      	bne.n	801d87a <_strtod_l+0x8aa>
 801d874:	3101      	adds	r1, #1
 801d876:	f43f adce 	beq.w	801d416 <_strtod_l+0x446>
 801d87a:	4b92      	ldr	r3, [pc, #584]	@ (801dac4 <_strtod_l+0xaf4>)
 801d87c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d87e:	401a      	ands	r2, r3
 801d880:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801d884:	f04f 0a00 	mov.w	sl, #0
 801d888:	9b08      	ldr	r3, [sp, #32]
 801d88a:	2b00      	cmp	r3, #0
 801d88c:	d1b9      	bne.n	801d802 <_strtod_l+0x832>
 801d88e:	e5cd      	b.n	801d42c <_strtod_l+0x45c>
 801d890:	f04f 33ff 	mov.w	r3, #4294967295
 801d894:	e7e8      	b.n	801d868 <_strtod_l+0x898>
 801d896:	4613      	mov	r3, r2
 801d898:	e7e6      	b.n	801d868 <_strtod_l+0x898>
 801d89a:	ea53 030a 	orrs.w	r3, r3, sl
 801d89e:	d0a2      	beq.n	801d7e6 <_strtod_l+0x816>
 801d8a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d8a2:	b1db      	cbz	r3, 801d8dc <_strtod_l+0x90c>
 801d8a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d8a6:	4213      	tst	r3, r2
 801d8a8:	d0ee      	beq.n	801d888 <_strtod_l+0x8b8>
 801d8aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d8ac:	9a08      	ldr	r2, [sp, #32]
 801d8ae:	4650      	mov	r0, sl
 801d8b0:	4659      	mov	r1, fp
 801d8b2:	b1bb      	cbz	r3, 801d8e4 <_strtod_l+0x914>
 801d8b4:	f7ff fb6c 	bl	801cf90 <sulp>
 801d8b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d8bc:	ec53 2b10 	vmov	r2, r3, d0
 801d8c0:	f7e2 fcf4 	bl	80002ac <__adddf3>
 801d8c4:	4682      	mov	sl, r0
 801d8c6:	468b      	mov	fp, r1
 801d8c8:	e7de      	b.n	801d888 <_strtod_l+0x8b8>
 801d8ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801d8ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801d8d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801d8d6:	f04f 3aff 	mov.w	sl, #4294967295
 801d8da:	e7d5      	b.n	801d888 <_strtod_l+0x8b8>
 801d8dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801d8de:	ea13 0f0a 	tst.w	r3, sl
 801d8e2:	e7e1      	b.n	801d8a8 <_strtod_l+0x8d8>
 801d8e4:	f7ff fb54 	bl	801cf90 <sulp>
 801d8e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801d8ec:	ec53 2b10 	vmov	r2, r3, d0
 801d8f0:	f7e2 fcda 	bl	80002a8 <__aeabi_dsub>
 801d8f4:	2200      	movs	r2, #0
 801d8f6:	2300      	movs	r3, #0
 801d8f8:	4682      	mov	sl, r0
 801d8fa:	468b      	mov	fp, r1
 801d8fc:	f7e3 f8f4 	bl	8000ae8 <__aeabi_dcmpeq>
 801d900:	2800      	cmp	r0, #0
 801d902:	d0c1      	beq.n	801d888 <_strtod_l+0x8b8>
 801d904:	e61a      	b.n	801d53c <_strtod_l+0x56c>
 801d906:	4641      	mov	r1, r8
 801d908:	4620      	mov	r0, r4
 801d90a:	f7ff fa9d 	bl	801ce48 <__ratio>
 801d90e:	ec57 6b10 	vmov	r6, r7, d0
 801d912:	2200      	movs	r2, #0
 801d914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801d918:	4630      	mov	r0, r6
 801d91a:	4639      	mov	r1, r7
 801d91c:	f7e3 f8f8 	bl	8000b10 <__aeabi_dcmple>
 801d920:	2800      	cmp	r0, #0
 801d922:	d06f      	beq.n	801da04 <_strtod_l+0xa34>
 801d924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d926:	2b00      	cmp	r3, #0
 801d928:	d17a      	bne.n	801da20 <_strtod_l+0xa50>
 801d92a:	f1ba 0f00 	cmp.w	sl, #0
 801d92e:	d158      	bne.n	801d9e2 <_strtod_l+0xa12>
 801d930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d932:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801d936:	2b00      	cmp	r3, #0
 801d938:	d15a      	bne.n	801d9f0 <_strtod_l+0xa20>
 801d93a:	4b64      	ldr	r3, [pc, #400]	@ (801dacc <_strtod_l+0xafc>)
 801d93c:	2200      	movs	r2, #0
 801d93e:	4630      	mov	r0, r6
 801d940:	4639      	mov	r1, r7
 801d942:	f7e3 f8db 	bl	8000afc <__aeabi_dcmplt>
 801d946:	2800      	cmp	r0, #0
 801d948:	d159      	bne.n	801d9fe <_strtod_l+0xa2e>
 801d94a:	4630      	mov	r0, r6
 801d94c:	4639      	mov	r1, r7
 801d94e:	4b60      	ldr	r3, [pc, #384]	@ (801dad0 <_strtod_l+0xb00>)
 801d950:	2200      	movs	r2, #0
 801d952:	f7e2 fe61 	bl	8000618 <__aeabi_dmul>
 801d956:	4606      	mov	r6, r0
 801d958:	460f      	mov	r7, r1
 801d95a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801d95e:	9606      	str	r6, [sp, #24]
 801d960:	9307      	str	r3, [sp, #28]
 801d962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d966:	4d57      	ldr	r5, [pc, #348]	@ (801dac4 <_strtod_l+0xaf4>)
 801d968:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801d96c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d96e:	401d      	ands	r5, r3
 801d970:	4b58      	ldr	r3, [pc, #352]	@ (801dad4 <_strtod_l+0xb04>)
 801d972:	429d      	cmp	r5, r3
 801d974:	f040 80b2 	bne.w	801dadc <_strtod_l+0xb0c>
 801d978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d97a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801d97e:	ec4b ab10 	vmov	d0, sl, fp
 801d982:	f7ff f999 	bl	801ccb8 <__ulp>
 801d986:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801d98a:	ec51 0b10 	vmov	r0, r1, d0
 801d98e:	f7e2 fe43 	bl	8000618 <__aeabi_dmul>
 801d992:	4652      	mov	r2, sl
 801d994:	465b      	mov	r3, fp
 801d996:	f7e2 fc89 	bl	80002ac <__adddf3>
 801d99a:	460b      	mov	r3, r1
 801d99c:	4949      	ldr	r1, [pc, #292]	@ (801dac4 <_strtod_l+0xaf4>)
 801d99e:	4a4e      	ldr	r2, [pc, #312]	@ (801dad8 <_strtod_l+0xb08>)
 801d9a0:	4019      	ands	r1, r3
 801d9a2:	4291      	cmp	r1, r2
 801d9a4:	4682      	mov	sl, r0
 801d9a6:	d942      	bls.n	801da2e <_strtod_l+0xa5e>
 801d9a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d9aa:	4b47      	ldr	r3, [pc, #284]	@ (801dac8 <_strtod_l+0xaf8>)
 801d9ac:	429a      	cmp	r2, r3
 801d9ae:	d103      	bne.n	801d9b8 <_strtod_l+0x9e8>
 801d9b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d9b2:	3301      	adds	r3, #1
 801d9b4:	f43f ad2f 	beq.w	801d416 <_strtod_l+0x446>
 801d9b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801dac8 <_strtod_l+0xaf8>
 801d9bc:	f04f 3aff 	mov.w	sl, #4294967295
 801d9c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801d9c2:	9805      	ldr	r0, [sp, #20]
 801d9c4:	f7fe fe4c 	bl	801c660 <_Bfree>
 801d9c8:	9805      	ldr	r0, [sp, #20]
 801d9ca:	4649      	mov	r1, r9
 801d9cc:	f7fe fe48 	bl	801c660 <_Bfree>
 801d9d0:	9805      	ldr	r0, [sp, #20]
 801d9d2:	4641      	mov	r1, r8
 801d9d4:	f7fe fe44 	bl	801c660 <_Bfree>
 801d9d8:	9805      	ldr	r0, [sp, #20]
 801d9da:	4621      	mov	r1, r4
 801d9dc:	f7fe fe40 	bl	801c660 <_Bfree>
 801d9e0:	e619      	b.n	801d616 <_strtod_l+0x646>
 801d9e2:	f1ba 0f01 	cmp.w	sl, #1
 801d9e6:	d103      	bne.n	801d9f0 <_strtod_l+0xa20>
 801d9e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	f43f ada6 	beq.w	801d53c <_strtod_l+0x56c>
 801d9f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801daa0 <_strtod_l+0xad0>
 801d9f4:	4f35      	ldr	r7, [pc, #212]	@ (801dacc <_strtod_l+0xafc>)
 801d9f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 801d9fa:	2600      	movs	r6, #0
 801d9fc:	e7b1      	b.n	801d962 <_strtod_l+0x992>
 801d9fe:	4f34      	ldr	r7, [pc, #208]	@ (801dad0 <_strtod_l+0xb00>)
 801da00:	2600      	movs	r6, #0
 801da02:	e7aa      	b.n	801d95a <_strtod_l+0x98a>
 801da04:	4b32      	ldr	r3, [pc, #200]	@ (801dad0 <_strtod_l+0xb00>)
 801da06:	4630      	mov	r0, r6
 801da08:	4639      	mov	r1, r7
 801da0a:	2200      	movs	r2, #0
 801da0c:	f7e2 fe04 	bl	8000618 <__aeabi_dmul>
 801da10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da12:	4606      	mov	r6, r0
 801da14:	460f      	mov	r7, r1
 801da16:	2b00      	cmp	r3, #0
 801da18:	d09f      	beq.n	801d95a <_strtod_l+0x98a>
 801da1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801da1e:	e7a0      	b.n	801d962 <_strtod_l+0x992>
 801da20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801daa8 <_strtod_l+0xad8>
 801da24:	ed8d 7b06 	vstr	d7, [sp, #24]
 801da28:	ec57 6b17 	vmov	r6, r7, d7
 801da2c:	e799      	b.n	801d962 <_strtod_l+0x992>
 801da2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801da32:	9b08      	ldr	r3, [sp, #32]
 801da34:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801da38:	2b00      	cmp	r3, #0
 801da3a:	d1c1      	bne.n	801d9c0 <_strtod_l+0x9f0>
 801da3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801da40:	0d1b      	lsrs	r3, r3, #20
 801da42:	051b      	lsls	r3, r3, #20
 801da44:	429d      	cmp	r5, r3
 801da46:	d1bb      	bne.n	801d9c0 <_strtod_l+0x9f0>
 801da48:	4630      	mov	r0, r6
 801da4a:	4639      	mov	r1, r7
 801da4c:	f7e3 f944 	bl	8000cd8 <__aeabi_d2lz>
 801da50:	f7e2 fdb4 	bl	80005bc <__aeabi_l2d>
 801da54:	4602      	mov	r2, r0
 801da56:	460b      	mov	r3, r1
 801da58:	4630      	mov	r0, r6
 801da5a:	4639      	mov	r1, r7
 801da5c:	f7e2 fc24 	bl	80002a8 <__aeabi_dsub>
 801da60:	460b      	mov	r3, r1
 801da62:	4602      	mov	r2, r0
 801da64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801da68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801da6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801da6e:	ea46 060a 	orr.w	r6, r6, sl
 801da72:	431e      	orrs	r6, r3
 801da74:	d06f      	beq.n	801db56 <_strtod_l+0xb86>
 801da76:	a30e      	add	r3, pc, #56	@ (adr r3, 801dab0 <_strtod_l+0xae0>)
 801da78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da7c:	f7e3 f83e 	bl	8000afc <__aeabi_dcmplt>
 801da80:	2800      	cmp	r0, #0
 801da82:	f47f acd3 	bne.w	801d42c <_strtod_l+0x45c>
 801da86:	a30c      	add	r3, pc, #48	@ (adr r3, 801dab8 <_strtod_l+0xae8>)
 801da88:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801da90:	f7e3 f852 	bl	8000b38 <__aeabi_dcmpgt>
 801da94:	2800      	cmp	r0, #0
 801da96:	d093      	beq.n	801d9c0 <_strtod_l+0x9f0>
 801da98:	e4c8      	b.n	801d42c <_strtod_l+0x45c>
 801da9a:	bf00      	nop
 801da9c:	f3af 8000 	nop.w
 801daa0:	00000000 	.word	0x00000000
 801daa4:	bff00000 	.word	0xbff00000
 801daa8:	00000000 	.word	0x00000000
 801daac:	3ff00000 	.word	0x3ff00000
 801dab0:	94a03595 	.word	0x94a03595
 801dab4:	3fdfffff 	.word	0x3fdfffff
 801dab8:	35afe535 	.word	0x35afe535
 801dabc:	3fe00000 	.word	0x3fe00000
 801dac0:	000fffff 	.word	0x000fffff
 801dac4:	7ff00000 	.word	0x7ff00000
 801dac8:	7fefffff 	.word	0x7fefffff
 801dacc:	3ff00000 	.word	0x3ff00000
 801dad0:	3fe00000 	.word	0x3fe00000
 801dad4:	7fe00000 	.word	0x7fe00000
 801dad8:	7c9fffff 	.word	0x7c9fffff
 801dadc:	9b08      	ldr	r3, [sp, #32]
 801dade:	b323      	cbz	r3, 801db2a <_strtod_l+0xb5a>
 801dae0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801dae4:	d821      	bhi.n	801db2a <_strtod_l+0xb5a>
 801dae6:	a328      	add	r3, pc, #160	@ (adr r3, 801db88 <_strtod_l+0xbb8>)
 801dae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801daec:	4630      	mov	r0, r6
 801daee:	4639      	mov	r1, r7
 801daf0:	f7e3 f80e 	bl	8000b10 <__aeabi_dcmple>
 801daf4:	b1a0      	cbz	r0, 801db20 <_strtod_l+0xb50>
 801daf6:	4639      	mov	r1, r7
 801daf8:	4630      	mov	r0, r6
 801dafa:	f7e3 f865 	bl	8000bc8 <__aeabi_d2uiz>
 801dafe:	2801      	cmp	r0, #1
 801db00:	bf38      	it	cc
 801db02:	2001      	movcc	r0, #1
 801db04:	f7e2 fd0e 	bl	8000524 <__aeabi_ui2d>
 801db08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801db0a:	4606      	mov	r6, r0
 801db0c:	460f      	mov	r7, r1
 801db0e:	b9fb      	cbnz	r3, 801db50 <_strtod_l+0xb80>
 801db10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801db14:	9014      	str	r0, [sp, #80]	@ 0x50
 801db16:	9315      	str	r3, [sp, #84]	@ 0x54
 801db18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801db1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801db20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801db22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801db26:	1b5b      	subs	r3, r3, r5
 801db28:	9311      	str	r3, [sp, #68]	@ 0x44
 801db2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801db2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801db32:	f7ff f8c1 	bl	801ccb8 <__ulp>
 801db36:	4650      	mov	r0, sl
 801db38:	ec53 2b10 	vmov	r2, r3, d0
 801db3c:	4659      	mov	r1, fp
 801db3e:	f7e2 fd6b 	bl	8000618 <__aeabi_dmul>
 801db42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801db46:	f7e2 fbb1 	bl	80002ac <__adddf3>
 801db4a:	4682      	mov	sl, r0
 801db4c:	468b      	mov	fp, r1
 801db4e:	e770      	b.n	801da32 <_strtod_l+0xa62>
 801db50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801db54:	e7e0      	b.n	801db18 <_strtod_l+0xb48>
 801db56:	a30e      	add	r3, pc, #56	@ (adr r3, 801db90 <_strtod_l+0xbc0>)
 801db58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db5c:	f7e2 ffce 	bl	8000afc <__aeabi_dcmplt>
 801db60:	e798      	b.n	801da94 <_strtod_l+0xac4>
 801db62:	2300      	movs	r3, #0
 801db64:	930e      	str	r3, [sp, #56]	@ 0x38
 801db66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801db68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801db6a:	6013      	str	r3, [r2, #0]
 801db6c:	f7ff ba6d 	b.w	801d04a <_strtod_l+0x7a>
 801db70:	2a65      	cmp	r2, #101	@ 0x65
 801db72:	f43f ab68 	beq.w	801d246 <_strtod_l+0x276>
 801db76:	2a45      	cmp	r2, #69	@ 0x45
 801db78:	f43f ab65 	beq.w	801d246 <_strtod_l+0x276>
 801db7c:	2301      	movs	r3, #1
 801db7e:	f7ff bba0 	b.w	801d2c2 <_strtod_l+0x2f2>
 801db82:	bf00      	nop
 801db84:	f3af 8000 	nop.w
 801db88:	ffc00000 	.word	0xffc00000
 801db8c:	41dfffff 	.word	0x41dfffff
 801db90:	94a03595 	.word	0x94a03595
 801db94:	3fcfffff 	.word	0x3fcfffff

0801db98 <_strtod_r>:
 801db98:	4b01      	ldr	r3, [pc, #4]	@ (801dba0 <_strtod_r+0x8>)
 801db9a:	f7ff ba19 	b.w	801cfd0 <_strtod_l>
 801db9e:	bf00      	nop
 801dba0:	200001b0 	.word	0x200001b0

0801dba4 <_strtol_l.isra.0>:
 801dba4:	2b24      	cmp	r3, #36	@ 0x24
 801dba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dbaa:	4686      	mov	lr, r0
 801dbac:	4690      	mov	r8, r2
 801dbae:	d801      	bhi.n	801dbb4 <_strtol_l.isra.0+0x10>
 801dbb0:	2b01      	cmp	r3, #1
 801dbb2:	d106      	bne.n	801dbc2 <_strtol_l.isra.0+0x1e>
 801dbb4:	f7fd fd60 	bl	801b678 <__errno>
 801dbb8:	2316      	movs	r3, #22
 801dbba:	6003      	str	r3, [r0, #0]
 801dbbc:	2000      	movs	r0, #0
 801dbbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbc2:	4834      	ldr	r0, [pc, #208]	@ (801dc94 <_strtol_l.isra.0+0xf0>)
 801dbc4:	460d      	mov	r5, r1
 801dbc6:	462a      	mov	r2, r5
 801dbc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dbcc:	5d06      	ldrb	r6, [r0, r4]
 801dbce:	f016 0608 	ands.w	r6, r6, #8
 801dbd2:	d1f8      	bne.n	801dbc6 <_strtol_l.isra.0+0x22>
 801dbd4:	2c2d      	cmp	r4, #45	@ 0x2d
 801dbd6:	d110      	bne.n	801dbfa <_strtol_l.isra.0+0x56>
 801dbd8:	782c      	ldrb	r4, [r5, #0]
 801dbda:	2601      	movs	r6, #1
 801dbdc:	1c95      	adds	r5, r2, #2
 801dbde:	f033 0210 	bics.w	r2, r3, #16
 801dbe2:	d115      	bne.n	801dc10 <_strtol_l.isra.0+0x6c>
 801dbe4:	2c30      	cmp	r4, #48	@ 0x30
 801dbe6:	d10d      	bne.n	801dc04 <_strtol_l.isra.0+0x60>
 801dbe8:	782a      	ldrb	r2, [r5, #0]
 801dbea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801dbee:	2a58      	cmp	r2, #88	@ 0x58
 801dbf0:	d108      	bne.n	801dc04 <_strtol_l.isra.0+0x60>
 801dbf2:	786c      	ldrb	r4, [r5, #1]
 801dbf4:	3502      	adds	r5, #2
 801dbf6:	2310      	movs	r3, #16
 801dbf8:	e00a      	b.n	801dc10 <_strtol_l.isra.0+0x6c>
 801dbfa:	2c2b      	cmp	r4, #43	@ 0x2b
 801dbfc:	bf04      	itt	eq
 801dbfe:	782c      	ldrbeq	r4, [r5, #0]
 801dc00:	1c95      	addeq	r5, r2, #2
 801dc02:	e7ec      	b.n	801dbde <_strtol_l.isra.0+0x3a>
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	d1f6      	bne.n	801dbf6 <_strtol_l.isra.0+0x52>
 801dc08:	2c30      	cmp	r4, #48	@ 0x30
 801dc0a:	bf14      	ite	ne
 801dc0c:	230a      	movne	r3, #10
 801dc0e:	2308      	moveq	r3, #8
 801dc10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801dc14:	f10c 3cff 	add.w	ip, ip, #4294967295
 801dc18:	2200      	movs	r2, #0
 801dc1a:	fbbc f9f3 	udiv	r9, ip, r3
 801dc1e:	4610      	mov	r0, r2
 801dc20:	fb03 ca19 	mls	sl, r3, r9, ip
 801dc24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801dc28:	2f09      	cmp	r7, #9
 801dc2a:	d80f      	bhi.n	801dc4c <_strtol_l.isra.0+0xa8>
 801dc2c:	463c      	mov	r4, r7
 801dc2e:	42a3      	cmp	r3, r4
 801dc30:	dd1b      	ble.n	801dc6a <_strtol_l.isra.0+0xc6>
 801dc32:	1c57      	adds	r7, r2, #1
 801dc34:	d007      	beq.n	801dc46 <_strtol_l.isra.0+0xa2>
 801dc36:	4581      	cmp	r9, r0
 801dc38:	d314      	bcc.n	801dc64 <_strtol_l.isra.0+0xc0>
 801dc3a:	d101      	bne.n	801dc40 <_strtol_l.isra.0+0x9c>
 801dc3c:	45a2      	cmp	sl, r4
 801dc3e:	db11      	blt.n	801dc64 <_strtol_l.isra.0+0xc0>
 801dc40:	fb00 4003 	mla	r0, r0, r3, r4
 801dc44:	2201      	movs	r2, #1
 801dc46:	f815 4b01 	ldrb.w	r4, [r5], #1
 801dc4a:	e7eb      	b.n	801dc24 <_strtol_l.isra.0+0x80>
 801dc4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801dc50:	2f19      	cmp	r7, #25
 801dc52:	d801      	bhi.n	801dc58 <_strtol_l.isra.0+0xb4>
 801dc54:	3c37      	subs	r4, #55	@ 0x37
 801dc56:	e7ea      	b.n	801dc2e <_strtol_l.isra.0+0x8a>
 801dc58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801dc5c:	2f19      	cmp	r7, #25
 801dc5e:	d804      	bhi.n	801dc6a <_strtol_l.isra.0+0xc6>
 801dc60:	3c57      	subs	r4, #87	@ 0x57
 801dc62:	e7e4      	b.n	801dc2e <_strtol_l.isra.0+0x8a>
 801dc64:	f04f 32ff 	mov.w	r2, #4294967295
 801dc68:	e7ed      	b.n	801dc46 <_strtol_l.isra.0+0xa2>
 801dc6a:	1c53      	adds	r3, r2, #1
 801dc6c:	d108      	bne.n	801dc80 <_strtol_l.isra.0+0xdc>
 801dc6e:	2322      	movs	r3, #34	@ 0x22
 801dc70:	f8ce 3000 	str.w	r3, [lr]
 801dc74:	4660      	mov	r0, ip
 801dc76:	f1b8 0f00 	cmp.w	r8, #0
 801dc7a:	d0a0      	beq.n	801dbbe <_strtol_l.isra.0+0x1a>
 801dc7c:	1e69      	subs	r1, r5, #1
 801dc7e:	e006      	b.n	801dc8e <_strtol_l.isra.0+0xea>
 801dc80:	b106      	cbz	r6, 801dc84 <_strtol_l.isra.0+0xe0>
 801dc82:	4240      	negs	r0, r0
 801dc84:	f1b8 0f00 	cmp.w	r8, #0
 801dc88:	d099      	beq.n	801dbbe <_strtol_l.isra.0+0x1a>
 801dc8a:	2a00      	cmp	r2, #0
 801dc8c:	d1f6      	bne.n	801dc7c <_strtol_l.isra.0+0xd8>
 801dc8e:	f8c8 1000 	str.w	r1, [r8]
 801dc92:	e794      	b.n	801dbbe <_strtol_l.isra.0+0x1a>
 801dc94:	08021c11 	.word	0x08021c11

0801dc98 <_strtol_r>:
 801dc98:	f7ff bf84 	b.w	801dba4 <_strtol_l.isra.0>

0801dc9c <__ssputs_r>:
 801dc9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dca0:	688e      	ldr	r6, [r1, #8]
 801dca2:	461f      	mov	r7, r3
 801dca4:	42be      	cmp	r6, r7
 801dca6:	680b      	ldr	r3, [r1, #0]
 801dca8:	4682      	mov	sl, r0
 801dcaa:	460c      	mov	r4, r1
 801dcac:	4690      	mov	r8, r2
 801dcae:	d82d      	bhi.n	801dd0c <__ssputs_r+0x70>
 801dcb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dcb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801dcb8:	d026      	beq.n	801dd08 <__ssputs_r+0x6c>
 801dcba:	6965      	ldr	r5, [r4, #20]
 801dcbc:	6909      	ldr	r1, [r1, #16]
 801dcbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801dcc2:	eba3 0901 	sub.w	r9, r3, r1
 801dcc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801dcca:	1c7b      	adds	r3, r7, #1
 801dccc:	444b      	add	r3, r9
 801dcce:	106d      	asrs	r5, r5, #1
 801dcd0:	429d      	cmp	r5, r3
 801dcd2:	bf38      	it	cc
 801dcd4:	461d      	movcc	r5, r3
 801dcd6:	0553      	lsls	r3, r2, #21
 801dcd8:	d527      	bpl.n	801dd2a <__ssputs_r+0x8e>
 801dcda:	4629      	mov	r1, r5
 801dcdc:	f7fe fbf4 	bl	801c4c8 <_malloc_r>
 801dce0:	4606      	mov	r6, r0
 801dce2:	b360      	cbz	r0, 801dd3e <__ssputs_r+0xa2>
 801dce4:	6921      	ldr	r1, [r4, #16]
 801dce6:	464a      	mov	r2, r9
 801dce8:	f7fd fcf3 	bl	801b6d2 <memcpy>
 801dcec:	89a3      	ldrh	r3, [r4, #12]
 801dcee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801dcf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dcf6:	81a3      	strh	r3, [r4, #12]
 801dcf8:	6126      	str	r6, [r4, #16]
 801dcfa:	6165      	str	r5, [r4, #20]
 801dcfc:	444e      	add	r6, r9
 801dcfe:	eba5 0509 	sub.w	r5, r5, r9
 801dd02:	6026      	str	r6, [r4, #0]
 801dd04:	60a5      	str	r5, [r4, #8]
 801dd06:	463e      	mov	r6, r7
 801dd08:	42be      	cmp	r6, r7
 801dd0a:	d900      	bls.n	801dd0e <__ssputs_r+0x72>
 801dd0c:	463e      	mov	r6, r7
 801dd0e:	6820      	ldr	r0, [r4, #0]
 801dd10:	4632      	mov	r2, r6
 801dd12:	4641      	mov	r1, r8
 801dd14:	f7fd fbd4 	bl	801b4c0 <memmove>
 801dd18:	68a3      	ldr	r3, [r4, #8]
 801dd1a:	1b9b      	subs	r3, r3, r6
 801dd1c:	60a3      	str	r3, [r4, #8]
 801dd1e:	6823      	ldr	r3, [r4, #0]
 801dd20:	4433      	add	r3, r6
 801dd22:	6023      	str	r3, [r4, #0]
 801dd24:	2000      	movs	r0, #0
 801dd26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd2a:	462a      	mov	r2, r5
 801dd2c:	f7ff f902 	bl	801cf34 <_realloc_r>
 801dd30:	4606      	mov	r6, r0
 801dd32:	2800      	cmp	r0, #0
 801dd34:	d1e0      	bne.n	801dcf8 <__ssputs_r+0x5c>
 801dd36:	6921      	ldr	r1, [r4, #16]
 801dd38:	4650      	mov	r0, sl
 801dd3a:	f7fe fb51 	bl	801c3e0 <_free_r>
 801dd3e:	230c      	movs	r3, #12
 801dd40:	f8ca 3000 	str.w	r3, [sl]
 801dd44:	89a3      	ldrh	r3, [r4, #12]
 801dd46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801dd4a:	81a3      	strh	r3, [r4, #12]
 801dd4c:	f04f 30ff 	mov.w	r0, #4294967295
 801dd50:	e7e9      	b.n	801dd26 <__ssputs_r+0x8a>
	...

0801dd54 <_svfiprintf_r>:
 801dd54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd58:	4698      	mov	r8, r3
 801dd5a:	898b      	ldrh	r3, [r1, #12]
 801dd5c:	061b      	lsls	r3, r3, #24
 801dd5e:	b09d      	sub	sp, #116	@ 0x74
 801dd60:	4607      	mov	r7, r0
 801dd62:	460d      	mov	r5, r1
 801dd64:	4614      	mov	r4, r2
 801dd66:	d510      	bpl.n	801dd8a <_svfiprintf_r+0x36>
 801dd68:	690b      	ldr	r3, [r1, #16]
 801dd6a:	b973      	cbnz	r3, 801dd8a <_svfiprintf_r+0x36>
 801dd6c:	2140      	movs	r1, #64	@ 0x40
 801dd6e:	f7fe fbab 	bl	801c4c8 <_malloc_r>
 801dd72:	6028      	str	r0, [r5, #0]
 801dd74:	6128      	str	r0, [r5, #16]
 801dd76:	b930      	cbnz	r0, 801dd86 <_svfiprintf_r+0x32>
 801dd78:	230c      	movs	r3, #12
 801dd7a:	603b      	str	r3, [r7, #0]
 801dd7c:	f04f 30ff 	mov.w	r0, #4294967295
 801dd80:	b01d      	add	sp, #116	@ 0x74
 801dd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dd86:	2340      	movs	r3, #64	@ 0x40
 801dd88:	616b      	str	r3, [r5, #20]
 801dd8a:	2300      	movs	r3, #0
 801dd8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801dd8e:	2320      	movs	r3, #32
 801dd90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801dd94:	f8cd 800c 	str.w	r8, [sp, #12]
 801dd98:	2330      	movs	r3, #48	@ 0x30
 801dd9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801df38 <_svfiprintf_r+0x1e4>
 801dd9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801dda2:	f04f 0901 	mov.w	r9, #1
 801dda6:	4623      	mov	r3, r4
 801dda8:	469a      	mov	sl, r3
 801ddaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ddae:	b10a      	cbz	r2, 801ddb4 <_svfiprintf_r+0x60>
 801ddb0:	2a25      	cmp	r2, #37	@ 0x25
 801ddb2:	d1f9      	bne.n	801dda8 <_svfiprintf_r+0x54>
 801ddb4:	ebba 0b04 	subs.w	fp, sl, r4
 801ddb8:	d00b      	beq.n	801ddd2 <_svfiprintf_r+0x7e>
 801ddba:	465b      	mov	r3, fp
 801ddbc:	4622      	mov	r2, r4
 801ddbe:	4629      	mov	r1, r5
 801ddc0:	4638      	mov	r0, r7
 801ddc2:	f7ff ff6b 	bl	801dc9c <__ssputs_r>
 801ddc6:	3001      	adds	r0, #1
 801ddc8:	f000 80a7 	beq.w	801df1a <_svfiprintf_r+0x1c6>
 801ddcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ddce:	445a      	add	r2, fp
 801ddd0:	9209      	str	r2, [sp, #36]	@ 0x24
 801ddd2:	f89a 3000 	ldrb.w	r3, [sl]
 801ddd6:	2b00      	cmp	r3, #0
 801ddd8:	f000 809f 	beq.w	801df1a <_svfiprintf_r+0x1c6>
 801dddc:	2300      	movs	r3, #0
 801ddde:	f04f 32ff 	mov.w	r2, #4294967295
 801dde2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801dde6:	f10a 0a01 	add.w	sl, sl, #1
 801ddea:	9304      	str	r3, [sp, #16]
 801ddec:	9307      	str	r3, [sp, #28]
 801ddee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ddf2:	931a      	str	r3, [sp, #104]	@ 0x68
 801ddf4:	4654      	mov	r4, sl
 801ddf6:	2205      	movs	r2, #5
 801ddf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ddfc:	484e      	ldr	r0, [pc, #312]	@ (801df38 <_svfiprintf_r+0x1e4>)
 801ddfe:	f7e2 f9f7 	bl	80001f0 <memchr>
 801de02:	9a04      	ldr	r2, [sp, #16]
 801de04:	b9d8      	cbnz	r0, 801de3e <_svfiprintf_r+0xea>
 801de06:	06d0      	lsls	r0, r2, #27
 801de08:	bf44      	itt	mi
 801de0a:	2320      	movmi	r3, #32
 801de0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801de10:	0711      	lsls	r1, r2, #28
 801de12:	bf44      	itt	mi
 801de14:	232b      	movmi	r3, #43	@ 0x2b
 801de16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801de1a:	f89a 3000 	ldrb.w	r3, [sl]
 801de1e:	2b2a      	cmp	r3, #42	@ 0x2a
 801de20:	d015      	beq.n	801de4e <_svfiprintf_r+0xfa>
 801de22:	9a07      	ldr	r2, [sp, #28]
 801de24:	4654      	mov	r4, sl
 801de26:	2000      	movs	r0, #0
 801de28:	f04f 0c0a 	mov.w	ip, #10
 801de2c:	4621      	mov	r1, r4
 801de2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801de32:	3b30      	subs	r3, #48	@ 0x30
 801de34:	2b09      	cmp	r3, #9
 801de36:	d94b      	bls.n	801ded0 <_svfiprintf_r+0x17c>
 801de38:	b1b0      	cbz	r0, 801de68 <_svfiprintf_r+0x114>
 801de3a:	9207      	str	r2, [sp, #28]
 801de3c:	e014      	b.n	801de68 <_svfiprintf_r+0x114>
 801de3e:	eba0 0308 	sub.w	r3, r0, r8
 801de42:	fa09 f303 	lsl.w	r3, r9, r3
 801de46:	4313      	orrs	r3, r2
 801de48:	9304      	str	r3, [sp, #16]
 801de4a:	46a2      	mov	sl, r4
 801de4c:	e7d2      	b.n	801ddf4 <_svfiprintf_r+0xa0>
 801de4e:	9b03      	ldr	r3, [sp, #12]
 801de50:	1d19      	adds	r1, r3, #4
 801de52:	681b      	ldr	r3, [r3, #0]
 801de54:	9103      	str	r1, [sp, #12]
 801de56:	2b00      	cmp	r3, #0
 801de58:	bfbb      	ittet	lt
 801de5a:	425b      	neglt	r3, r3
 801de5c:	f042 0202 	orrlt.w	r2, r2, #2
 801de60:	9307      	strge	r3, [sp, #28]
 801de62:	9307      	strlt	r3, [sp, #28]
 801de64:	bfb8      	it	lt
 801de66:	9204      	strlt	r2, [sp, #16]
 801de68:	7823      	ldrb	r3, [r4, #0]
 801de6a:	2b2e      	cmp	r3, #46	@ 0x2e
 801de6c:	d10a      	bne.n	801de84 <_svfiprintf_r+0x130>
 801de6e:	7863      	ldrb	r3, [r4, #1]
 801de70:	2b2a      	cmp	r3, #42	@ 0x2a
 801de72:	d132      	bne.n	801deda <_svfiprintf_r+0x186>
 801de74:	9b03      	ldr	r3, [sp, #12]
 801de76:	1d1a      	adds	r2, r3, #4
 801de78:	681b      	ldr	r3, [r3, #0]
 801de7a:	9203      	str	r2, [sp, #12]
 801de7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801de80:	3402      	adds	r4, #2
 801de82:	9305      	str	r3, [sp, #20]
 801de84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801df48 <_svfiprintf_r+0x1f4>
 801de88:	7821      	ldrb	r1, [r4, #0]
 801de8a:	2203      	movs	r2, #3
 801de8c:	4650      	mov	r0, sl
 801de8e:	f7e2 f9af 	bl	80001f0 <memchr>
 801de92:	b138      	cbz	r0, 801dea4 <_svfiprintf_r+0x150>
 801de94:	9b04      	ldr	r3, [sp, #16]
 801de96:	eba0 000a 	sub.w	r0, r0, sl
 801de9a:	2240      	movs	r2, #64	@ 0x40
 801de9c:	4082      	lsls	r2, r0
 801de9e:	4313      	orrs	r3, r2
 801dea0:	3401      	adds	r4, #1
 801dea2:	9304      	str	r3, [sp, #16]
 801dea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801dea8:	4824      	ldr	r0, [pc, #144]	@ (801df3c <_svfiprintf_r+0x1e8>)
 801deaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801deae:	2206      	movs	r2, #6
 801deb0:	f7e2 f99e 	bl	80001f0 <memchr>
 801deb4:	2800      	cmp	r0, #0
 801deb6:	d036      	beq.n	801df26 <_svfiprintf_r+0x1d2>
 801deb8:	4b21      	ldr	r3, [pc, #132]	@ (801df40 <_svfiprintf_r+0x1ec>)
 801deba:	bb1b      	cbnz	r3, 801df04 <_svfiprintf_r+0x1b0>
 801debc:	9b03      	ldr	r3, [sp, #12]
 801debe:	3307      	adds	r3, #7
 801dec0:	f023 0307 	bic.w	r3, r3, #7
 801dec4:	3308      	adds	r3, #8
 801dec6:	9303      	str	r3, [sp, #12]
 801dec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801deca:	4433      	add	r3, r6
 801decc:	9309      	str	r3, [sp, #36]	@ 0x24
 801dece:	e76a      	b.n	801dda6 <_svfiprintf_r+0x52>
 801ded0:	fb0c 3202 	mla	r2, ip, r2, r3
 801ded4:	460c      	mov	r4, r1
 801ded6:	2001      	movs	r0, #1
 801ded8:	e7a8      	b.n	801de2c <_svfiprintf_r+0xd8>
 801deda:	2300      	movs	r3, #0
 801dedc:	3401      	adds	r4, #1
 801dede:	9305      	str	r3, [sp, #20]
 801dee0:	4619      	mov	r1, r3
 801dee2:	f04f 0c0a 	mov.w	ip, #10
 801dee6:	4620      	mov	r0, r4
 801dee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801deec:	3a30      	subs	r2, #48	@ 0x30
 801deee:	2a09      	cmp	r2, #9
 801def0:	d903      	bls.n	801defa <_svfiprintf_r+0x1a6>
 801def2:	2b00      	cmp	r3, #0
 801def4:	d0c6      	beq.n	801de84 <_svfiprintf_r+0x130>
 801def6:	9105      	str	r1, [sp, #20]
 801def8:	e7c4      	b.n	801de84 <_svfiprintf_r+0x130>
 801defa:	fb0c 2101 	mla	r1, ip, r1, r2
 801defe:	4604      	mov	r4, r0
 801df00:	2301      	movs	r3, #1
 801df02:	e7f0      	b.n	801dee6 <_svfiprintf_r+0x192>
 801df04:	ab03      	add	r3, sp, #12
 801df06:	9300      	str	r3, [sp, #0]
 801df08:	462a      	mov	r2, r5
 801df0a:	4b0e      	ldr	r3, [pc, #56]	@ (801df44 <_svfiprintf_r+0x1f0>)
 801df0c:	a904      	add	r1, sp, #16
 801df0e:	4638      	mov	r0, r7
 801df10:	f7fc f928 	bl	801a164 <_printf_float>
 801df14:	1c42      	adds	r2, r0, #1
 801df16:	4606      	mov	r6, r0
 801df18:	d1d6      	bne.n	801dec8 <_svfiprintf_r+0x174>
 801df1a:	89ab      	ldrh	r3, [r5, #12]
 801df1c:	065b      	lsls	r3, r3, #25
 801df1e:	f53f af2d 	bmi.w	801dd7c <_svfiprintf_r+0x28>
 801df22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801df24:	e72c      	b.n	801dd80 <_svfiprintf_r+0x2c>
 801df26:	ab03      	add	r3, sp, #12
 801df28:	9300      	str	r3, [sp, #0]
 801df2a:	462a      	mov	r2, r5
 801df2c:	4b05      	ldr	r3, [pc, #20]	@ (801df44 <_svfiprintf_r+0x1f0>)
 801df2e:	a904      	add	r1, sp, #16
 801df30:	4638      	mov	r0, r7
 801df32:	f7fc fcfb 	bl	801a92c <_printf_i>
 801df36:	e7ed      	b.n	801df14 <_svfiprintf_r+0x1c0>
 801df38:	080214c4 	.word	0x080214c4
 801df3c:	080214ce 	.word	0x080214ce
 801df40:	0801a165 	.word	0x0801a165
 801df44:	0801dc9d 	.word	0x0801dc9d
 801df48:	080214ca 	.word	0x080214ca

0801df4c <_sungetc_r>:
 801df4c:	b538      	push	{r3, r4, r5, lr}
 801df4e:	1c4b      	adds	r3, r1, #1
 801df50:	4614      	mov	r4, r2
 801df52:	d103      	bne.n	801df5c <_sungetc_r+0x10>
 801df54:	f04f 35ff 	mov.w	r5, #4294967295
 801df58:	4628      	mov	r0, r5
 801df5a:	bd38      	pop	{r3, r4, r5, pc}
 801df5c:	8993      	ldrh	r3, [r2, #12]
 801df5e:	f023 0320 	bic.w	r3, r3, #32
 801df62:	8193      	strh	r3, [r2, #12]
 801df64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801df66:	6852      	ldr	r2, [r2, #4]
 801df68:	b2cd      	uxtb	r5, r1
 801df6a:	b18b      	cbz	r3, 801df90 <_sungetc_r+0x44>
 801df6c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801df6e:	4293      	cmp	r3, r2
 801df70:	dd08      	ble.n	801df84 <_sungetc_r+0x38>
 801df72:	6823      	ldr	r3, [r4, #0]
 801df74:	1e5a      	subs	r2, r3, #1
 801df76:	6022      	str	r2, [r4, #0]
 801df78:	f803 5c01 	strb.w	r5, [r3, #-1]
 801df7c:	6863      	ldr	r3, [r4, #4]
 801df7e:	3301      	adds	r3, #1
 801df80:	6063      	str	r3, [r4, #4]
 801df82:	e7e9      	b.n	801df58 <_sungetc_r+0xc>
 801df84:	4621      	mov	r1, r4
 801df86:	f000 fc8c 	bl	801e8a2 <__submore>
 801df8a:	2800      	cmp	r0, #0
 801df8c:	d0f1      	beq.n	801df72 <_sungetc_r+0x26>
 801df8e:	e7e1      	b.n	801df54 <_sungetc_r+0x8>
 801df90:	6921      	ldr	r1, [r4, #16]
 801df92:	6823      	ldr	r3, [r4, #0]
 801df94:	b151      	cbz	r1, 801dfac <_sungetc_r+0x60>
 801df96:	4299      	cmp	r1, r3
 801df98:	d208      	bcs.n	801dfac <_sungetc_r+0x60>
 801df9a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801df9e:	42a9      	cmp	r1, r5
 801dfa0:	d104      	bne.n	801dfac <_sungetc_r+0x60>
 801dfa2:	3b01      	subs	r3, #1
 801dfa4:	3201      	adds	r2, #1
 801dfa6:	6023      	str	r3, [r4, #0]
 801dfa8:	6062      	str	r2, [r4, #4]
 801dfaa:	e7d5      	b.n	801df58 <_sungetc_r+0xc>
 801dfac:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801dfb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dfb4:	6363      	str	r3, [r4, #52]	@ 0x34
 801dfb6:	2303      	movs	r3, #3
 801dfb8:	63a3      	str	r3, [r4, #56]	@ 0x38
 801dfba:	4623      	mov	r3, r4
 801dfbc:	f803 5f46 	strb.w	r5, [r3, #70]!
 801dfc0:	6023      	str	r3, [r4, #0]
 801dfc2:	2301      	movs	r3, #1
 801dfc4:	e7dc      	b.n	801df80 <_sungetc_r+0x34>

0801dfc6 <__ssrefill_r>:
 801dfc6:	b510      	push	{r4, lr}
 801dfc8:	460c      	mov	r4, r1
 801dfca:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801dfcc:	b169      	cbz	r1, 801dfea <__ssrefill_r+0x24>
 801dfce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dfd2:	4299      	cmp	r1, r3
 801dfd4:	d001      	beq.n	801dfda <__ssrefill_r+0x14>
 801dfd6:	f7fe fa03 	bl	801c3e0 <_free_r>
 801dfda:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801dfdc:	6063      	str	r3, [r4, #4]
 801dfde:	2000      	movs	r0, #0
 801dfe0:	6360      	str	r0, [r4, #52]	@ 0x34
 801dfe2:	b113      	cbz	r3, 801dfea <__ssrefill_r+0x24>
 801dfe4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801dfe6:	6023      	str	r3, [r4, #0]
 801dfe8:	bd10      	pop	{r4, pc}
 801dfea:	6923      	ldr	r3, [r4, #16]
 801dfec:	6023      	str	r3, [r4, #0]
 801dfee:	2300      	movs	r3, #0
 801dff0:	6063      	str	r3, [r4, #4]
 801dff2:	89a3      	ldrh	r3, [r4, #12]
 801dff4:	f043 0320 	orr.w	r3, r3, #32
 801dff8:	81a3      	strh	r3, [r4, #12]
 801dffa:	f04f 30ff 	mov.w	r0, #4294967295
 801dffe:	e7f3      	b.n	801dfe8 <__ssrefill_r+0x22>

0801e000 <__ssvfiscanf_r>:
 801e000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e004:	460c      	mov	r4, r1
 801e006:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801e00a:	2100      	movs	r1, #0
 801e00c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801e010:	49a6      	ldr	r1, [pc, #664]	@ (801e2ac <__ssvfiscanf_r+0x2ac>)
 801e012:	91a0      	str	r1, [sp, #640]	@ 0x280
 801e014:	f10d 0804 	add.w	r8, sp, #4
 801e018:	49a5      	ldr	r1, [pc, #660]	@ (801e2b0 <__ssvfiscanf_r+0x2b0>)
 801e01a:	4fa6      	ldr	r7, [pc, #664]	@ (801e2b4 <__ssvfiscanf_r+0x2b4>)
 801e01c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801e020:	4606      	mov	r6, r0
 801e022:	91a1      	str	r1, [sp, #644]	@ 0x284
 801e024:	9300      	str	r3, [sp, #0]
 801e026:	f892 9000 	ldrb.w	r9, [r2]
 801e02a:	f1b9 0f00 	cmp.w	r9, #0
 801e02e:	f000 8158 	beq.w	801e2e2 <__ssvfiscanf_r+0x2e2>
 801e032:	f817 3009 	ldrb.w	r3, [r7, r9]
 801e036:	f013 0308 	ands.w	r3, r3, #8
 801e03a:	f102 0501 	add.w	r5, r2, #1
 801e03e:	d019      	beq.n	801e074 <__ssvfiscanf_r+0x74>
 801e040:	6863      	ldr	r3, [r4, #4]
 801e042:	2b00      	cmp	r3, #0
 801e044:	dd0f      	ble.n	801e066 <__ssvfiscanf_r+0x66>
 801e046:	6823      	ldr	r3, [r4, #0]
 801e048:	781a      	ldrb	r2, [r3, #0]
 801e04a:	5cba      	ldrb	r2, [r7, r2]
 801e04c:	0712      	lsls	r2, r2, #28
 801e04e:	d401      	bmi.n	801e054 <__ssvfiscanf_r+0x54>
 801e050:	462a      	mov	r2, r5
 801e052:	e7e8      	b.n	801e026 <__ssvfiscanf_r+0x26>
 801e054:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801e056:	3201      	adds	r2, #1
 801e058:	9245      	str	r2, [sp, #276]	@ 0x114
 801e05a:	6862      	ldr	r2, [r4, #4]
 801e05c:	3301      	adds	r3, #1
 801e05e:	3a01      	subs	r2, #1
 801e060:	6062      	str	r2, [r4, #4]
 801e062:	6023      	str	r3, [r4, #0]
 801e064:	e7ec      	b.n	801e040 <__ssvfiscanf_r+0x40>
 801e066:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e068:	4621      	mov	r1, r4
 801e06a:	4630      	mov	r0, r6
 801e06c:	4798      	blx	r3
 801e06e:	2800      	cmp	r0, #0
 801e070:	d0e9      	beq.n	801e046 <__ssvfiscanf_r+0x46>
 801e072:	e7ed      	b.n	801e050 <__ssvfiscanf_r+0x50>
 801e074:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801e078:	f040 8085 	bne.w	801e186 <__ssvfiscanf_r+0x186>
 801e07c:	9341      	str	r3, [sp, #260]	@ 0x104
 801e07e:	9343      	str	r3, [sp, #268]	@ 0x10c
 801e080:	7853      	ldrb	r3, [r2, #1]
 801e082:	2b2a      	cmp	r3, #42	@ 0x2a
 801e084:	bf02      	ittt	eq
 801e086:	2310      	moveq	r3, #16
 801e088:	1c95      	addeq	r5, r2, #2
 801e08a:	9341      	streq	r3, [sp, #260]	@ 0x104
 801e08c:	220a      	movs	r2, #10
 801e08e:	46aa      	mov	sl, r5
 801e090:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801e094:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801e098:	2b09      	cmp	r3, #9
 801e09a:	d91e      	bls.n	801e0da <__ssvfiscanf_r+0xda>
 801e09c:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801e2b8 <__ssvfiscanf_r+0x2b8>
 801e0a0:	2203      	movs	r2, #3
 801e0a2:	4658      	mov	r0, fp
 801e0a4:	f7e2 f8a4 	bl	80001f0 <memchr>
 801e0a8:	b138      	cbz	r0, 801e0ba <__ssvfiscanf_r+0xba>
 801e0aa:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801e0ac:	eba0 000b 	sub.w	r0, r0, fp
 801e0b0:	2301      	movs	r3, #1
 801e0b2:	4083      	lsls	r3, r0
 801e0b4:	4313      	orrs	r3, r2
 801e0b6:	9341      	str	r3, [sp, #260]	@ 0x104
 801e0b8:	4655      	mov	r5, sl
 801e0ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 801e0be:	2b78      	cmp	r3, #120	@ 0x78
 801e0c0:	d806      	bhi.n	801e0d0 <__ssvfiscanf_r+0xd0>
 801e0c2:	2b57      	cmp	r3, #87	@ 0x57
 801e0c4:	d810      	bhi.n	801e0e8 <__ssvfiscanf_r+0xe8>
 801e0c6:	2b25      	cmp	r3, #37	@ 0x25
 801e0c8:	d05d      	beq.n	801e186 <__ssvfiscanf_r+0x186>
 801e0ca:	d857      	bhi.n	801e17c <__ssvfiscanf_r+0x17c>
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	d075      	beq.n	801e1bc <__ssvfiscanf_r+0x1bc>
 801e0d0:	2303      	movs	r3, #3
 801e0d2:	9347      	str	r3, [sp, #284]	@ 0x11c
 801e0d4:	230a      	movs	r3, #10
 801e0d6:	9342      	str	r3, [sp, #264]	@ 0x108
 801e0d8:	e088      	b.n	801e1ec <__ssvfiscanf_r+0x1ec>
 801e0da:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801e0dc:	fb02 1103 	mla	r1, r2, r3, r1
 801e0e0:	3930      	subs	r1, #48	@ 0x30
 801e0e2:	9143      	str	r1, [sp, #268]	@ 0x10c
 801e0e4:	4655      	mov	r5, sl
 801e0e6:	e7d2      	b.n	801e08e <__ssvfiscanf_r+0x8e>
 801e0e8:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801e0ec:	2a20      	cmp	r2, #32
 801e0ee:	d8ef      	bhi.n	801e0d0 <__ssvfiscanf_r+0xd0>
 801e0f0:	a101      	add	r1, pc, #4	@ (adr r1, 801e0f8 <__ssvfiscanf_r+0xf8>)
 801e0f2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e0f6:	bf00      	nop
 801e0f8:	0801e1cb 	.word	0x0801e1cb
 801e0fc:	0801e0d1 	.word	0x0801e0d1
 801e100:	0801e0d1 	.word	0x0801e0d1
 801e104:	0801e225 	.word	0x0801e225
 801e108:	0801e0d1 	.word	0x0801e0d1
 801e10c:	0801e0d1 	.word	0x0801e0d1
 801e110:	0801e0d1 	.word	0x0801e0d1
 801e114:	0801e0d1 	.word	0x0801e0d1
 801e118:	0801e0d1 	.word	0x0801e0d1
 801e11c:	0801e0d1 	.word	0x0801e0d1
 801e120:	0801e0d1 	.word	0x0801e0d1
 801e124:	0801e23b 	.word	0x0801e23b
 801e128:	0801e221 	.word	0x0801e221
 801e12c:	0801e183 	.word	0x0801e183
 801e130:	0801e183 	.word	0x0801e183
 801e134:	0801e183 	.word	0x0801e183
 801e138:	0801e0d1 	.word	0x0801e0d1
 801e13c:	0801e1dd 	.word	0x0801e1dd
 801e140:	0801e0d1 	.word	0x0801e0d1
 801e144:	0801e0d1 	.word	0x0801e0d1
 801e148:	0801e0d1 	.word	0x0801e0d1
 801e14c:	0801e0d1 	.word	0x0801e0d1
 801e150:	0801e24b 	.word	0x0801e24b
 801e154:	0801e1e5 	.word	0x0801e1e5
 801e158:	0801e1c3 	.word	0x0801e1c3
 801e15c:	0801e0d1 	.word	0x0801e0d1
 801e160:	0801e0d1 	.word	0x0801e0d1
 801e164:	0801e247 	.word	0x0801e247
 801e168:	0801e0d1 	.word	0x0801e0d1
 801e16c:	0801e221 	.word	0x0801e221
 801e170:	0801e0d1 	.word	0x0801e0d1
 801e174:	0801e0d1 	.word	0x0801e0d1
 801e178:	0801e1cb 	.word	0x0801e1cb
 801e17c:	3b45      	subs	r3, #69	@ 0x45
 801e17e:	2b02      	cmp	r3, #2
 801e180:	d8a6      	bhi.n	801e0d0 <__ssvfiscanf_r+0xd0>
 801e182:	2305      	movs	r3, #5
 801e184:	e031      	b.n	801e1ea <__ssvfiscanf_r+0x1ea>
 801e186:	6863      	ldr	r3, [r4, #4]
 801e188:	2b00      	cmp	r3, #0
 801e18a:	dd0d      	ble.n	801e1a8 <__ssvfiscanf_r+0x1a8>
 801e18c:	6823      	ldr	r3, [r4, #0]
 801e18e:	781a      	ldrb	r2, [r3, #0]
 801e190:	454a      	cmp	r2, r9
 801e192:	f040 80a6 	bne.w	801e2e2 <__ssvfiscanf_r+0x2e2>
 801e196:	3301      	adds	r3, #1
 801e198:	6862      	ldr	r2, [r4, #4]
 801e19a:	6023      	str	r3, [r4, #0]
 801e19c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801e19e:	3a01      	subs	r2, #1
 801e1a0:	3301      	adds	r3, #1
 801e1a2:	6062      	str	r2, [r4, #4]
 801e1a4:	9345      	str	r3, [sp, #276]	@ 0x114
 801e1a6:	e753      	b.n	801e050 <__ssvfiscanf_r+0x50>
 801e1a8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e1aa:	4621      	mov	r1, r4
 801e1ac:	4630      	mov	r0, r6
 801e1ae:	4798      	blx	r3
 801e1b0:	2800      	cmp	r0, #0
 801e1b2:	d0eb      	beq.n	801e18c <__ssvfiscanf_r+0x18c>
 801e1b4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801e1b6:	2800      	cmp	r0, #0
 801e1b8:	f040 808b 	bne.w	801e2d2 <__ssvfiscanf_r+0x2d2>
 801e1bc:	f04f 30ff 	mov.w	r0, #4294967295
 801e1c0:	e08b      	b.n	801e2da <__ssvfiscanf_r+0x2da>
 801e1c2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801e1c4:	f042 0220 	orr.w	r2, r2, #32
 801e1c8:	9241      	str	r2, [sp, #260]	@ 0x104
 801e1ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801e1cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801e1d0:	9241      	str	r2, [sp, #260]	@ 0x104
 801e1d2:	2210      	movs	r2, #16
 801e1d4:	2b6e      	cmp	r3, #110	@ 0x6e
 801e1d6:	9242      	str	r2, [sp, #264]	@ 0x108
 801e1d8:	d902      	bls.n	801e1e0 <__ssvfiscanf_r+0x1e0>
 801e1da:	e005      	b.n	801e1e8 <__ssvfiscanf_r+0x1e8>
 801e1dc:	2300      	movs	r3, #0
 801e1de:	9342      	str	r3, [sp, #264]	@ 0x108
 801e1e0:	2303      	movs	r3, #3
 801e1e2:	e002      	b.n	801e1ea <__ssvfiscanf_r+0x1ea>
 801e1e4:	2308      	movs	r3, #8
 801e1e6:	9342      	str	r3, [sp, #264]	@ 0x108
 801e1e8:	2304      	movs	r3, #4
 801e1ea:	9347      	str	r3, [sp, #284]	@ 0x11c
 801e1ec:	6863      	ldr	r3, [r4, #4]
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	dd39      	ble.n	801e266 <__ssvfiscanf_r+0x266>
 801e1f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801e1f4:	0659      	lsls	r1, r3, #25
 801e1f6:	d404      	bmi.n	801e202 <__ssvfiscanf_r+0x202>
 801e1f8:	6823      	ldr	r3, [r4, #0]
 801e1fa:	781a      	ldrb	r2, [r3, #0]
 801e1fc:	5cba      	ldrb	r2, [r7, r2]
 801e1fe:	0712      	lsls	r2, r2, #28
 801e200:	d438      	bmi.n	801e274 <__ssvfiscanf_r+0x274>
 801e202:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801e204:	2b02      	cmp	r3, #2
 801e206:	dc47      	bgt.n	801e298 <__ssvfiscanf_r+0x298>
 801e208:	466b      	mov	r3, sp
 801e20a:	4622      	mov	r2, r4
 801e20c:	a941      	add	r1, sp, #260	@ 0x104
 801e20e:	4630      	mov	r0, r6
 801e210:	f000 f86c 	bl	801e2ec <_scanf_chars>
 801e214:	2801      	cmp	r0, #1
 801e216:	d064      	beq.n	801e2e2 <__ssvfiscanf_r+0x2e2>
 801e218:	2802      	cmp	r0, #2
 801e21a:	f47f af19 	bne.w	801e050 <__ssvfiscanf_r+0x50>
 801e21e:	e7c9      	b.n	801e1b4 <__ssvfiscanf_r+0x1b4>
 801e220:	220a      	movs	r2, #10
 801e222:	e7d7      	b.n	801e1d4 <__ssvfiscanf_r+0x1d4>
 801e224:	4629      	mov	r1, r5
 801e226:	4640      	mov	r0, r8
 801e228:	f000 fb02 	bl	801e830 <__sccl>
 801e22c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801e22e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e232:	9341      	str	r3, [sp, #260]	@ 0x104
 801e234:	4605      	mov	r5, r0
 801e236:	2301      	movs	r3, #1
 801e238:	e7d7      	b.n	801e1ea <__ssvfiscanf_r+0x1ea>
 801e23a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801e23c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e240:	9341      	str	r3, [sp, #260]	@ 0x104
 801e242:	2300      	movs	r3, #0
 801e244:	e7d1      	b.n	801e1ea <__ssvfiscanf_r+0x1ea>
 801e246:	2302      	movs	r3, #2
 801e248:	e7cf      	b.n	801e1ea <__ssvfiscanf_r+0x1ea>
 801e24a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801e24c:	06c3      	lsls	r3, r0, #27
 801e24e:	f53f aeff 	bmi.w	801e050 <__ssvfiscanf_r+0x50>
 801e252:	9b00      	ldr	r3, [sp, #0]
 801e254:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801e256:	1d19      	adds	r1, r3, #4
 801e258:	9100      	str	r1, [sp, #0]
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	07c0      	lsls	r0, r0, #31
 801e25e:	bf4c      	ite	mi
 801e260:	801a      	strhmi	r2, [r3, #0]
 801e262:	601a      	strpl	r2, [r3, #0]
 801e264:	e6f4      	b.n	801e050 <__ssvfiscanf_r+0x50>
 801e266:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e268:	4621      	mov	r1, r4
 801e26a:	4630      	mov	r0, r6
 801e26c:	4798      	blx	r3
 801e26e:	2800      	cmp	r0, #0
 801e270:	d0bf      	beq.n	801e1f2 <__ssvfiscanf_r+0x1f2>
 801e272:	e79f      	b.n	801e1b4 <__ssvfiscanf_r+0x1b4>
 801e274:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801e276:	3201      	adds	r2, #1
 801e278:	9245      	str	r2, [sp, #276]	@ 0x114
 801e27a:	6862      	ldr	r2, [r4, #4]
 801e27c:	3a01      	subs	r2, #1
 801e27e:	2a00      	cmp	r2, #0
 801e280:	6062      	str	r2, [r4, #4]
 801e282:	dd02      	ble.n	801e28a <__ssvfiscanf_r+0x28a>
 801e284:	3301      	adds	r3, #1
 801e286:	6023      	str	r3, [r4, #0]
 801e288:	e7b6      	b.n	801e1f8 <__ssvfiscanf_r+0x1f8>
 801e28a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801e28c:	4621      	mov	r1, r4
 801e28e:	4630      	mov	r0, r6
 801e290:	4798      	blx	r3
 801e292:	2800      	cmp	r0, #0
 801e294:	d0b0      	beq.n	801e1f8 <__ssvfiscanf_r+0x1f8>
 801e296:	e78d      	b.n	801e1b4 <__ssvfiscanf_r+0x1b4>
 801e298:	2b04      	cmp	r3, #4
 801e29a:	dc0f      	bgt.n	801e2bc <__ssvfiscanf_r+0x2bc>
 801e29c:	466b      	mov	r3, sp
 801e29e:	4622      	mov	r2, r4
 801e2a0:	a941      	add	r1, sp, #260	@ 0x104
 801e2a2:	4630      	mov	r0, r6
 801e2a4:	f000 f87c 	bl	801e3a0 <_scanf_i>
 801e2a8:	e7b4      	b.n	801e214 <__ssvfiscanf_r+0x214>
 801e2aa:	bf00      	nop
 801e2ac:	0801df4d 	.word	0x0801df4d
 801e2b0:	0801dfc7 	.word	0x0801dfc7
 801e2b4:	08021c11 	.word	0x08021c11
 801e2b8:	080214ca 	.word	0x080214ca
 801e2bc:	4b0a      	ldr	r3, [pc, #40]	@ (801e2e8 <__ssvfiscanf_r+0x2e8>)
 801e2be:	2b00      	cmp	r3, #0
 801e2c0:	f43f aec6 	beq.w	801e050 <__ssvfiscanf_r+0x50>
 801e2c4:	466b      	mov	r3, sp
 801e2c6:	4622      	mov	r2, r4
 801e2c8:	a941      	add	r1, sp, #260	@ 0x104
 801e2ca:	4630      	mov	r0, r6
 801e2cc:	f7fc fc4c 	bl	801ab68 <_scanf_float>
 801e2d0:	e7a0      	b.n	801e214 <__ssvfiscanf_r+0x214>
 801e2d2:	89a3      	ldrh	r3, [r4, #12]
 801e2d4:	065b      	lsls	r3, r3, #25
 801e2d6:	f53f af71 	bmi.w	801e1bc <__ssvfiscanf_r+0x1bc>
 801e2da:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801e2de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e2e2:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801e2e4:	e7f9      	b.n	801e2da <__ssvfiscanf_r+0x2da>
 801e2e6:	bf00      	nop
 801e2e8:	0801ab69 	.word	0x0801ab69

0801e2ec <_scanf_chars>:
 801e2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2f0:	4615      	mov	r5, r2
 801e2f2:	688a      	ldr	r2, [r1, #8]
 801e2f4:	4680      	mov	r8, r0
 801e2f6:	460c      	mov	r4, r1
 801e2f8:	b932      	cbnz	r2, 801e308 <_scanf_chars+0x1c>
 801e2fa:	698a      	ldr	r2, [r1, #24]
 801e2fc:	2a00      	cmp	r2, #0
 801e2fe:	bf14      	ite	ne
 801e300:	f04f 32ff 	movne.w	r2, #4294967295
 801e304:	2201      	moveq	r2, #1
 801e306:	608a      	str	r2, [r1, #8]
 801e308:	6822      	ldr	r2, [r4, #0]
 801e30a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801e39c <_scanf_chars+0xb0>
 801e30e:	06d1      	lsls	r1, r2, #27
 801e310:	bf5f      	itttt	pl
 801e312:	681a      	ldrpl	r2, [r3, #0]
 801e314:	1d11      	addpl	r1, r2, #4
 801e316:	6019      	strpl	r1, [r3, #0]
 801e318:	6816      	ldrpl	r6, [r2, #0]
 801e31a:	2700      	movs	r7, #0
 801e31c:	69a0      	ldr	r0, [r4, #24]
 801e31e:	b188      	cbz	r0, 801e344 <_scanf_chars+0x58>
 801e320:	2801      	cmp	r0, #1
 801e322:	d107      	bne.n	801e334 <_scanf_chars+0x48>
 801e324:	682b      	ldr	r3, [r5, #0]
 801e326:	781a      	ldrb	r2, [r3, #0]
 801e328:	6963      	ldr	r3, [r4, #20]
 801e32a:	5c9b      	ldrb	r3, [r3, r2]
 801e32c:	b953      	cbnz	r3, 801e344 <_scanf_chars+0x58>
 801e32e:	2f00      	cmp	r7, #0
 801e330:	d031      	beq.n	801e396 <_scanf_chars+0xaa>
 801e332:	e022      	b.n	801e37a <_scanf_chars+0x8e>
 801e334:	2802      	cmp	r0, #2
 801e336:	d120      	bne.n	801e37a <_scanf_chars+0x8e>
 801e338:	682b      	ldr	r3, [r5, #0]
 801e33a:	781b      	ldrb	r3, [r3, #0]
 801e33c:	f819 3003 	ldrb.w	r3, [r9, r3]
 801e340:	071b      	lsls	r3, r3, #28
 801e342:	d41a      	bmi.n	801e37a <_scanf_chars+0x8e>
 801e344:	6823      	ldr	r3, [r4, #0]
 801e346:	06da      	lsls	r2, r3, #27
 801e348:	bf5e      	ittt	pl
 801e34a:	682b      	ldrpl	r3, [r5, #0]
 801e34c:	781b      	ldrbpl	r3, [r3, #0]
 801e34e:	f806 3b01 	strbpl.w	r3, [r6], #1
 801e352:	682a      	ldr	r2, [r5, #0]
 801e354:	686b      	ldr	r3, [r5, #4]
 801e356:	3201      	adds	r2, #1
 801e358:	602a      	str	r2, [r5, #0]
 801e35a:	68a2      	ldr	r2, [r4, #8]
 801e35c:	3b01      	subs	r3, #1
 801e35e:	3a01      	subs	r2, #1
 801e360:	606b      	str	r3, [r5, #4]
 801e362:	3701      	adds	r7, #1
 801e364:	60a2      	str	r2, [r4, #8]
 801e366:	b142      	cbz	r2, 801e37a <_scanf_chars+0x8e>
 801e368:	2b00      	cmp	r3, #0
 801e36a:	dcd7      	bgt.n	801e31c <_scanf_chars+0x30>
 801e36c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e370:	4629      	mov	r1, r5
 801e372:	4640      	mov	r0, r8
 801e374:	4798      	blx	r3
 801e376:	2800      	cmp	r0, #0
 801e378:	d0d0      	beq.n	801e31c <_scanf_chars+0x30>
 801e37a:	6823      	ldr	r3, [r4, #0]
 801e37c:	f013 0310 	ands.w	r3, r3, #16
 801e380:	d105      	bne.n	801e38e <_scanf_chars+0xa2>
 801e382:	68e2      	ldr	r2, [r4, #12]
 801e384:	3201      	adds	r2, #1
 801e386:	60e2      	str	r2, [r4, #12]
 801e388:	69a2      	ldr	r2, [r4, #24]
 801e38a:	b102      	cbz	r2, 801e38e <_scanf_chars+0xa2>
 801e38c:	7033      	strb	r3, [r6, #0]
 801e38e:	6923      	ldr	r3, [r4, #16]
 801e390:	443b      	add	r3, r7
 801e392:	6123      	str	r3, [r4, #16]
 801e394:	2000      	movs	r0, #0
 801e396:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e39a:	bf00      	nop
 801e39c:	08021c11 	.word	0x08021c11

0801e3a0 <_scanf_i>:
 801e3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e3a4:	4698      	mov	r8, r3
 801e3a6:	4b74      	ldr	r3, [pc, #464]	@ (801e578 <_scanf_i+0x1d8>)
 801e3a8:	460c      	mov	r4, r1
 801e3aa:	4682      	mov	sl, r0
 801e3ac:	4616      	mov	r6, r2
 801e3ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801e3b2:	b087      	sub	sp, #28
 801e3b4:	ab03      	add	r3, sp, #12
 801e3b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801e3ba:	4b70      	ldr	r3, [pc, #448]	@ (801e57c <_scanf_i+0x1dc>)
 801e3bc:	69a1      	ldr	r1, [r4, #24]
 801e3be:	4a70      	ldr	r2, [pc, #448]	@ (801e580 <_scanf_i+0x1e0>)
 801e3c0:	2903      	cmp	r1, #3
 801e3c2:	bf08      	it	eq
 801e3c4:	461a      	moveq	r2, r3
 801e3c6:	68a3      	ldr	r3, [r4, #8]
 801e3c8:	9201      	str	r2, [sp, #4]
 801e3ca:	1e5a      	subs	r2, r3, #1
 801e3cc:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801e3d0:	bf88      	it	hi
 801e3d2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801e3d6:	4627      	mov	r7, r4
 801e3d8:	bf82      	ittt	hi
 801e3da:	eb03 0905 	addhi.w	r9, r3, r5
 801e3de:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801e3e2:	60a3      	strhi	r3, [r4, #8]
 801e3e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 801e3e8:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801e3ec:	bf98      	it	ls
 801e3ee:	f04f 0900 	movls.w	r9, #0
 801e3f2:	6023      	str	r3, [r4, #0]
 801e3f4:	463d      	mov	r5, r7
 801e3f6:	f04f 0b00 	mov.w	fp, #0
 801e3fa:	6831      	ldr	r1, [r6, #0]
 801e3fc:	ab03      	add	r3, sp, #12
 801e3fe:	7809      	ldrb	r1, [r1, #0]
 801e400:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801e404:	2202      	movs	r2, #2
 801e406:	f7e1 fef3 	bl	80001f0 <memchr>
 801e40a:	b328      	cbz	r0, 801e458 <_scanf_i+0xb8>
 801e40c:	f1bb 0f01 	cmp.w	fp, #1
 801e410:	d159      	bne.n	801e4c6 <_scanf_i+0x126>
 801e412:	6862      	ldr	r2, [r4, #4]
 801e414:	b92a      	cbnz	r2, 801e422 <_scanf_i+0x82>
 801e416:	6822      	ldr	r2, [r4, #0]
 801e418:	2108      	movs	r1, #8
 801e41a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801e41e:	6061      	str	r1, [r4, #4]
 801e420:	6022      	str	r2, [r4, #0]
 801e422:	6822      	ldr	r2, [r4, #0]
 801e424:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801e428:	6022      	str	r2, [r4, #0]
 801e42a:	68a2      	ldr	r2, [r4, #8]
 801e42c:	1e51      	subs	r1, r2, #1
 801e42e:	60a1      	str	r1, [r4, #8]
 801e430:	b192      	cbz	r2, 801e458 <_scanf_i+0xb8>
 801e432:	6832      	ldr	r2, [r6, #0]
 801e434:	1c51      	adds	r1, r2, #1
 801e436:	6031      	str	r1, [r6, #0]
 801e438:	7812      	ldrb	r2, [r2, #0]
 801e43a:	f805 2b01 	strb.w	r2, [r5], #1
 801e43e:	6872      	ldr	r2, [r6, #4]
 801e440:	3a01      	subs	r2, #1
 801e442:	2a00      	cmp	r2, #0
 801e444:	6072      	str	r2, [r6, #4]
 801e446:	dc07      	bgt.n	801e458 <_scanf_i+0xb8>
 801e448:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801e44c:	4631      	mov	r1, r6
 801e44e:	4650      	mov	r0, sl
 801e450:	4790      	blx	r2
 801e452:	2800      	cmp	r0, #0
 801e454:	f040 8085 	bne.w	801e562 <_scanf_i+0x1c2>
 801e458:	f10b 0b01 	add.w	fp, fp, #1
 801e45c:	f1bb 0f03 	cmp.w	fp, #3
 801e460:	d1cb      	bne.n	801e3fa <_scanf_i+0x5a>
 801e462:	6863      	ldr	r3, [r4, #4]
 801e464:	b90b      	cbnz	r3, 801e46a <_scanf_i+0xca>
 801e466:	230a      	movs	r3, #10
 801e468:	6063      	str	r3, [r4, #4]
 801e46a:	6863      	ldr	r3, [r4, #4]
 801e46c:	4945      	ldr	r1, [pc, #276]	@ (801e584 <_scanf_i+0x1e4>)
 801e46e:	6960      	ldr	r0, [r4, #20]
 801e470:	1ac9      	subs	r1, r1, r3
 801e472:	f000 f9dd 	bl	801e830 <__sccl>
 801e476:	f04f 0b00 	mov.w	fp, #0
 801e47a:	68a3      	ldr	r3, [r4, #8]
 801e47c:	6822      	ldr	r2, [r4, #0]
 801e47e:	2b00      	cmp	r3, #0
 801e480:	d03d      	beq.n	801e4fe <_scanf_i+0x15e>
 801e482:	6831      	ldr	r1, [r6, #0]
 801e484:	6960      	ldr	r0, [r4, #20]
 801e486:	f891 c000 	ldrb.w	ip, [r1]
 801e48a:	f810 000c 	ldrb.w	r0, [r0, ip]
 801e48e:	2800      	cmp	r0, #0
 801e490:	d035      	beq.n	801e4fe <_scanf_i+0x15e>
 801e492:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801e496:	d124      	bne.n	801e4e2 <_scanf_i+0x142>
 801e498:	0510      	lsls	r0, r2, #20
 801e49a:	d522      	bpl.n	801e4e2 <_scanf_i+0x142>
 801e49c:	f10b 0b01 	add.w	fp, fp, #1
 801e4a0:	f1b9 0f00 	cmp.w	r9, #0
 801e4a4:	d003      	beq.n	801e4ae <_scanf_i+0x10e>
 801e4a6:	3301      	adds	r3, #1
 801e4a8:	f109 39ff 	add.w	r9, r9, #4294967295
 801e4ac:	60a3      	str	r3, [r4, #8]
 801e4ae:	6873      	ldr	r3, [r6, #4]
 801e4b0:	3b01      	subs	r3, #1
 801e4b2:	2b00      	cmp	r3, #0
 801e4b4:	6073      	str	r3, [r6, #4]
 801e4b6:	dd1b      	ble.n	801e4f0 <_scanf_i+0x150>
 801e4b8:	6833      	ldr	r3, [r6, #0]
 801e4ba:	3301      	adds	r3, #1
 801e4bc:	6033      	str	r3, [r6, #0]
 801e4be:	68a3      	ldr	r3, [r4, #8]
 801e4c0:	3b01      	subs	r3, #1
 801e4c2:	60a3      	str	r3, [r4, #8]
 801e4c4:	e7d9      	b.n	801e47a <_scanf_i+0xda>
 801e4c6:	f1bb 0f02 	cmp.w	fp, #2
 801e4ca:	d1ae      	bne.n	801e42a <_scanf_i+0x8a>
 801e4cc:	6822      	ldr	r2, [r4, #0]
 801e4ce:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801e4d2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801e4d6:	d1c4      	bne.n	801e462 <_scanf_i+0xc2>
 801e4d8:	2110      	movs	r1, #16
 801e4da:	6061      	str	r1, [r4, #4]
 801e4dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e4e0:	e7a2      	b.n	801e428 <_scanf_i+0x88>
 801e4e2:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801e4e6:	6022      	str	r2, [r4, #0]
 801e4e8:	780b      	ldrb	r3, [r1, #0]
 801e4ea:	f805 3b01 	strb.w	r3, [r5], #1
 801e4ee:	e7de      	b.n	801e4ae <_scanf_i+0x10e>
 801e4f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e4f4:	4631      	mov	r1, r6
 801e4f6:	4650      	mov	r0, sl
 801e4f8:	4798      	blx	r3
 801e4fa:	2800      	cmp	r0, #0
 801e4fc:	d0df      	beq.n	801e4be <_scanf_i+0x11e>
 801e4fe:	6823      	ldr	r3, [r4, #0]
 801e500:	05d9      	lsls	r1, r3, #23
 801e502:	d50d      	bpl.n	801e520 <_scanf_i+0x180>
 801e504:	42bd      	cmp	r5, r7
 801e506:	d909      	bls.n	801e51c <_scanf_i+0x17c>
 801e508:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801e50c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e510:	4632      	mov	r2, r6
 801e512:	4650      	mov	r0, sl
 801e514:	4798      	blx	r3
 801e516:	f105 39ff 	add.w	r9, r5, #4294967295
 801e51a:	464d      	mov	r5, r9
 801e51c:	42bd      	cmp	r5, r7
 801e51e:	d028      	beq.n	801e572 <_scanf_i+0x1d2>
 801e520:	6822      	ldr	r2, [r4, #0]
 801e522:	f012 0210 	ands.w	r2, r2, #16
 801e526:	d113      	bne.n	801e550 <_scanf_i+0x1b0>
 801e528:	702a      	strb	r2, [r5, #0]
 801e52a:	6863      	ldr	r3, [r4, #4]
 801e52c:	9e01      	ldr	r6, [sp, #4]
 801e52e:	4639      	mov	r1, r7
 801e530:	4650      	mov	r0, sl
 801e532:	47b0      	blx	r6
 801e534:	f8d8 3000 	ldr.w	r3, [r8]
 801e538:	6821      	ldr	r1, [r4, #0]
 801e53a:	1d1a      	adds	r2, r3, #4
 801e53c:	f8c8 2000 	str.w	r2, [r8]
 801e540:	f011 0f20 	tst.w	r1, #32
 801e544:	681b      	ldr	r3, [r3, #0]
 801e546:	d00f      	beq.n	801e568 <_scanf_i+0x1c8>
 801e548:	6018      	str	r0, [r3, #0]
 801e54a:	68e3      	ldr	r3, [r4, #12]
 801e54c:	3301      	adds	r3, #1
 801e54e:	60e3      	str	r3, [r4, #12]
 801e550:	6923      	ldr	r3, [r4, #16]
 801e552:	1bed      	subs	r5, r5, r7
 801e554:	445d      	add	r5, fp
 801e556:	442b      	add	r3, r5
 801e558:	6123      	str	r3, [r4, #16]
 801e55a:	2000      	movs	r0, #0
 801e55c:	b007      	add	sp, #28
 801e55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e562:	f04f 0b00 	mov.w	fp, #0
 801e566:	e7ca      	b.n	801e4fe <_scanf_i+0x15e>
 801e568:	07ca      	lsls	r2, r1, #31
 801e56a:	bf4c      	ite	mi
 801e56c:	8018      	strhmi	r0, [r3, #0]
 801e56e:	6018      	strpl	r0, [r3, #0]
 801e570:	e7eb      	b.n	801e54a <_scanf_i+0x1aa>
 801e572:	2001      	movs	r0, #1
 801e574:	e7f2      	b.n	801e55c <_scanf_i+0x1bc>
 801e576:	bf00      	nop
 801e578:	08021434 	.word	0x08021434
 801e57c:	0801dc99 	.word	0x0801dc99
 801e580:	0801f149 	.word	0x0801f149
 801e584:	08021630 	.word	0x08021630

0801e588 <__sflush_r>:
 801e588:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e58c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e590:	0716      	lsls	r6, r2, #28
 801e592:	4605      	mov	r5, r0
 801e594:	460c      	mov	r4, r1
 801e596:	d454      	bmi.n	801e642 <__sflush_r+0xba>
 801e598:	684b      	ldr	r3, [r1, #4]
 801e59a:	2b00      	cmp	r3, #0
 801e59c:	dc02      	bgt.n	801e5a4 <__sflush_r+0x1c>
 801e59e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e5a0:	2b00      	cmp	r3, #0
 801e5a2:	dd48      	ble.n	801e636 <__sflush_r+0xae>
 801e5a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e5a6:	2e00      	cmp	r6, #0
 801e5a8:	d045      	beq.n	801e636 <__sflush_r+0xae>
 801e5aa:	2300      	movs	r3, #0
 801e5ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e5b0:	682f      	ldr	r7, [r5, #0]
 801e5b2:	6a21      	ldr	r1, [r4, #32]
 801e5b4:	602b      	str	r3, [r5, #0]
 801e5b6:	d030      	beq.n	801e61a <__sflush_r+0x92>
 801e5b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e5ba:	89a3      	ldrh	r3, [r4, #12]
 801e5bc:	0759      	lsls	r1, r3, #29
 801e5be:	d505      	bpl.n	801e5cc <__sflush_r+0x44>
 801e5c0:	6863      	ldr	r3, [r4, #4]
 801e5c2:	1ad2      	subs	r2, r2, r3
 801e5c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e5c6:	b10b      	cbz	r3, 801e5cc <__sflush_r+0x44>
 801e5c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e5ca:	1ad2      	subs	r2, r2, r3
 801e5cc:	2300      	movs	r3, #0
 801e5ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e5d0:	6a21      	ldr	r1, [r4, #32]
 801e5d2:	4628      	mov	r0, r5
 801e5d4:	47b0      	blx	r6
 801e5d6:	1c43      	adds	r3, r0, #1
 801e5d8:	89a3      	ldrh	r3, [r4, #12]
 801e5da:	d106      	bne.n	801e5ea <__sflush_r+0x62>
 801e5dc:	6829      	ldr	r1, [r5, #0]
 801e5de:	291d      	cmp	r1, #29
 801e5e0:	d82b      	bhi.n	801e63a <__sflush_r+0xb2>
 801e5e2:	4a2a      	ldr	r2, [pc, #168]	@ (801e68c <__sflush_r+0x104>)
 801e5e4:	40ca      	lsrs	r2, r1
 801e5e6:	07d6      	lsls	r6, r2, #31
 801e5e8:	d527      	bpl.n	801e63a <__sflush_r+0xb2>
 801e5ea:	2200      	movs	r2, #0
 801e5ec:	6062      	str	r2, [r4, #4]
 801e5ee:	04d9      	lsls	r1, r3, #19
 801e5f0:	6922      	ldr	r2, [r4, #16]
 801e5f2:	6022      	str	r2, [r4, #0]
 801e5f4:	d504      	bpl.n	801e600 <__sflush_r+0x78>
 801e5f6:	1c42      	adds	r2, r0, #1
 801e5f8:	d101      	bne.n	801e5fe <__sflush_r+0x76>
 801e5fa:	682b      	ldr	r3, [r5, #0]
 801e5fc:	b903      	cbnz	r3, 801e600 <__sflush_r+0x78>
 801e5fe:	6560      	str	r0, [r4, #84]	@ 0x54
 801e600:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e602:	602f      	str	r7, [r5, #0]
 801e604:	b1b9      	cbz	r1, 801e636 <__sflush_r+0xae>
 801e606:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e60a:	4299      	cmp	r1, r3
 801e60c:	d002      	beq.n	801e614 <__sflush_r+0x8c>
 801e60e:	4628      	mov	r0, r5
 801e610:	f7fd fee6 	bl	801c3e0 <_free_r>
 801e614:	2300      	movs	r3, #0
 801e616:	6363      	str	r3, [r4, #52]	@ 0x34
 801e618:	e00d      	b.n	801e636 <__sflush_r+0xae>
 801e61a:	2301      	movs	r3, #1
 801e61c:	4628      	mov	r0, r5
 801e61e:	47b0      	blx	r6
 801e620:	4602      	mov	r2, r0
 801e622:	1c50      	adds	r0, r2, #1
 801e624:	d1c9      	bne.n	801e5ba <__sflush_r+0x32>
 801e626:	682b      	ldr	r3, [r5, #0]
 801e628:	2b00      	cmp	r3, #0
 801e62a:	d0c6      	beq.n	801e5ba <__sflush_r+0x32>
 801e62c:	2b1d      	cmp	r3, #29
 801e62e:	d001      	beq.n	801e634 <__sflush_r+0xac>
 801e630:	2b16      	cmp	r3, #22
 801e632:	d11e      	bne.n	801e672 <__sflush_r+0xea>
 801e634:	602f      	str	r7, [r5, #0]
 801e636:	2000      	movs	r0, #0
 801e638:	e022      	b.n	801e680 <__sflush_r+0xf8>
 801e63a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e63e:	b21b      	sxth	r3, r3
 801e640:	e01b      	b.n	801e67a <__sflush_r+0xf2>
 801e642:	690f      	ldr	r7, [r1, #16]
 801e644:	2f00      	cmp	r7, #0
 801e646:	d0f6      	beq.n	801e636 <__sflush_r+0xae>
 801e648:	0793      	lsls	r3, r2, #30
 801e64a:	680e      	ldr	r6, [r1, #0]
 801e64c:	bf08      	it	eq
 801e64e:	694b      	ldreq	r3, [r1, #20]
 801e650:	600f      	str	r7, [r1, #0]
 801e652:	bf18      	it	ne
 801e654:	2300      	movne	r3, #0
 801e656:	eba6 0807 	sub.w	r8, r6, r7
 801e65a:	608b      	str	r3, [r1, #8]
 801e65c:	f1b8 0f00 	cmp.w	r8, #0
 801e660:	dde9      	ble.n	801e636 <__sflush_r+0xae>
 801e662:	6a21      	ldr	r1, [r4, #32]
 801e664:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e666:	4643      	mov	r3, r8
 801e668:	463a      	mov	r2, r7
 801e66a:	4628      	mov	r0, r5
 801e66c:	47b0      	blx	r6
 801e66e:	2800      	cmp	r0, #0
 801e670:	dc08      	bgt.n	801e684 <__sflush_r+0xfc>
 801e672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e676:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e67a:	81a3      	strh	r3, [r4, #12]
 801e67c:	f04f 30ff 	mov.w	r0, #4294967295
 801e680:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e684:	4407      	add	r7, r0
 801e686:	eba8 0800 	sub.w	r8, r8, r0
 801e68a:	e7e7      	b.n	801e65c <__sflush_r+0xd4>
 801e68c:	20400001 	.word	0x20400001

0801e690 <_fflush_r>:
 801e690:	b538      	push	{r3, r4, r5, lr}
 801e692:	690b      	ldr	r3, [r1, #16]
 801e694:	4605      	mov	r5, r0
 801e696:	460c      	mov	r4, r1
 801e698:	b913      	cbnz	r3, 801e6a0 <_fflush_r+0x10>
 801e69a:	2500      	movs	r5, #0
 801e69c:	4628      	mov	r0, r5
 801e69e:	bd38      	pop	{r3, r4, r5, pc}
 801e6a0:	b118      	cbz	r0, 801e6aa <_fflush_r+0x1a>
 801e6a2:	6a03      	ldr	r3, [r0, #32]
 801e6a4:	b90b      	cbnz	r3, 801e6aa <_fflush_r+0x1a>
 801e6a6:	f7fc fcf9 	bl	801b09c <__sinit>
 801e6aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e6ae:	2b00      	cmp	r3, #0
 801e6b0:	d0f3      	beq.n	801e69a <_fflush_r+0xa>
 801e6b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e6b4:	07d0      	lsls	r0, r2, #31
 801e6b6:	d404      	bmi.n	801e6c2 <_fflush_r+0x32>
 801e6b8:	0599      	lsls	r1, r3, #22
 801e6ba:	d402      	bmi.n	801e6c2 <_fflush_r+0x32>
 801e6bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e6be:	f7fd f806 	bl	801b6ce <__retarget_lock_acquire_recursive>
 801e6c2:	4628      	mov	r0, r5
 801e6c4:	4621      	mov	r1, r4
 801e6c6:	f7ff ff5f 	bl	801e588 <__sflush_r>
 801e6ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e6cc:	07da      	lsls	r2, r3, #31
 801e6ce:	4605      	mov	r5, r0
 801e6d0:	d4e4      	bmi.n	801e69c <_fflush_r+0xc>
 801e6d2:	89a3      	ldrh	r3, [r4, #12]
 801e6d4:	059b      	lsls	r3, r3, #22
 801e6d6:	d4e1      	bmi.n	801e69c <_fflush_r+0xc>
 801e6d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e6da:	f7fc fff9 	bl	801b6d0 <__retarget_lock_release_recursive>
 801e6de:	e7dd      	b.n	801e69c <_fflush_r+0xc>

0801e6e0 <fiprintf>:
 801e6e0:	b40e      	push	{r1, r2, r3}
 801e6e2:	b503      	push	{r0, r1, lr}
 801e6e4:	4601      	mov	r1, r0
 801e6e6:	ab03      	add	r3, sp, #12
 801e6e8:	4805      	ldr	r0, [pc, #20]	@ (801e700 <fiprintf+0x20>)
 801e6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 801e6ee:	6800      	ldr	r0, [r0, #0]
 801e6f0:	9301      	str	r3, [sp, #4]
 801e6f2:	f7fb ff8b 	bl	801a60c <_vfiprintf_r>
 801e6f6:	b002      	add	sp, #8
 801e6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801e6fc:	b003      	add	sp, #12
 801e6fe:	4770      	bx	lr
 801e700:	20000160 	.word	0x20000160

0801e704 <__swhatbuf_r>:
 801e704:	b570      	push	{r4, r5, r6, lr}
 801e706:	460c      	mov	r4, r1
 801e708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e70c:	2900      	cmp	r1, #0
 801e70e:	b096      	sub	sp, #88	@ 0x58
 801e710:	4615      	mov	r5, r2
 801e712:	461e      	mov	r6, r3
 801e714:	da0d      	bge.n	801e732 <__swhatbuf_r+0x2e>
 801e716:	89a3      	ldrh	r3, [r4, #12]
 801e718:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801e71c:	f04f 0100 	mov.w	r1, #0
 801e720:	bf14      	ite	ne
 801e722:	2340      	movne	r3, #64	@ 0x40
 801e724:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801e728:	2000      	movs	r0, #0
 801e72a:	6031      	str	r1, [r6, #0]
 801e72c:	602b      	str	r3, [r5, #0]
 801e72e:	b016      	add	sp, #88	@ 0x58
 801e730:	bd70      	pop	{r4, r5, r6, pc}
 801e732:	466a      	mov	r2, sp
 801e734:	f000 f8f0 	bl	801e918 <_fstat_r>
 801e738:	2800      	cmp	r0, #0
 801e73a:	dbec      	blt.n	801e716 <__swhatbuf_r+0x12>
 801e73c:	9901      	ldr	r1, [sp, #4]
 801e73e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801e742:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801e746:	4259      	negs	r1, r3
 801e748:	4159      	adcs	r1, r3
 801e74a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e74e:	e7eb      	b.n	801e728 <__swhatbuf_r+0x24>

0801e750 <__smakebuf_r>:
 801e750:	898b      	ldrh	r3, [r1, #12]
 801e752:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e754:	079d      	lsls	r5, r3, #30
 801e756:	4606      	mov	r6, r0
 801e758:	460c      	mov	r4, r1
 801e75a:	d507      	bpl.n	801e76c <__smakebuf_r+0x1c>
 801e75c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801e760:	6023      	str	r3, [r4, #0]
 801e762:	6123      	str	r3, [r4, #16]
 801e764:	2301      	movs	r3, #1
 801e766:	6163      	str	r3, [r4, #20]
 801e768:	b003      	add	sp, #12
 801e76a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e76c:	ab01      	add	r3, sp, #4
 801e76e:	466a      	mov	r2, sp
 801e770:	f7ff ffc8 	bl	801e704 <__swhatbuf_r>
 801e774:	9f00      	ldr	r7, [sp, #0]
 801e776:	4605      	mov	r5, r0
 801e778:	4639      	mov	r1, r7
 801e77a:	4630      	mov	r0, r6
 801e77c:	f7fd fea4 	bl	801c4c8 <_malloc_r>
 801e780:	b948      	cbnz	r0, 801e796 <__smakebuf_r+0x46>
 801e782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e786:	059a      	lsls	r2, r3, #22
 801e788:	d4ee      	bmi.n	801e768 <__smakebuf_r+0x18>
 801e78a:	f023 0303 	bic.w	r3, r3, #3
 801e78e:	f043 0302 	orr.w	r3, r3, #2
 801e792:	81a3      	strh	r3, [r4, #12]
 801e794:	e7e2      	b.n	801e75c <__smakebuf_r+0xc>
 801e796:	89a3      	ldrh	r3, [r4, #12]
 801e798:	6020      	str	r0, [r4, #0]
 801e79a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801e79e:	81a3      	strh	r3, [r4, #12]
 801e7a0:	9b01      	ldr	r3, [sp, #4]
 801e7a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801e7a6:	b15b      	cbz	r3, 801e7c0 <__smakebuf_r+0x70>
 801e7a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e7ac:	4630      	mov	r0, r6
 801e7ae:	f000 f8c5 	bl	801e93c <_isatty_r>
 801e7b2:	b128      	cbz	r0, 801e7c0 <__smakebuf_r+0x70>
 801e7b4:	89a3      	ldrh	r3, [r4, #12]
 801e7b6:	f023 0303 	bic.w	r3, r3, #3
 801e7ba:	f043 0301 	orr.w	r3, r3, #1
 801e7be:	81a3      	strh	r3, [r4, #12]
 801e7c0:	89a3      	ldrh	r3, [r4, #12]
 801e7c2:	431d      	orrs	r5, r3
 801e7c4:	81a5      	strh	r5, [r4, #12]
 801e7c6:	e7cf      	b.n	801e768 <__smakebuf_r+0x18>

0801e7c8 <_putc_r>:
 801e7c8:	b570      	push	{r4, r5, r6, lr}
 801e7ca:	460d      	mov	r5, r1
 801e7cc:	4614      	mov	r4, r2
 801e7ce:	4606      	mov	r6, r0
 801e7d0:	b118      	cbz	r0, 801e7da <_putc_r+0x12>
 801e7d2:	6a03      	ldr	r3, [r0, #32]
 801e7d4:	b90b      	cbnz	r3, 801e7da <_putc_r+0x12>
 801e7d6:	f7fc fc61 	bl	801b09c <__sinit>
 801e7da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e7dc:	07d8      	lsls	r0, r3, #31
 801e7de:	d405      	bmi.n	801e7ec <_putc_r+0x24>
 801e7e0:	89a3      	ldrh	r3, [r4, #12]
 801e7e2:	0599      	lsls	r1, r3, #22
 801e7e4:	d402      	bmi.n	801e7ec <_putc_r+0x24>
 801e7e6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e7e8:	f7fc ff71 	bl	801b6ce <__retarget_lock_acquire_recursive>
 801e7ec:	68a3      	ldr	r3, [r4, #8]
 801e7ee:	3b01      	subs	r3, #1
 801e7f0:	2b00      	cmp	r3, #0
 801e7f2:	60a3      	str	r3, [r4, #8]
 801e7f4:	da05      	bge.n	801e802 <_putc_r+0x3a>
 801e7f6:	69a2      	ldr	r2, [r4, #24]
 801e7f8:	4293      	cmp	r3, r2
 801e7fa:	db12      	blt.n	801e822 <_putc_r+0x5a>
 801e7fc:	b2eb      	uxtb	r3, r5
 801e7fe:	2b0a      	cmp	r3, #10
 801e800:	d00f      	beq.n	801e822 <_putc_r+0x5a>
 801e802:	6823      	ldr	r3, [r4, #0]
 801e804:	1c5a      	adds	r2, r3, #1
 801e806:	6022      	str	r2, [r4, #0]
 801e808:	701d      	strb	r5, [r3, #0]
 801e80a:	b2ed      	uxtb	r5, r5
 801e80c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e80e:	07da      	lsls	r2, r3, #31
 801e810:	d405      	bmi.n	801e81e <_putc_r+0x56>
 801e812:	89a3      	ldrh	r3, [r4, #12]
 801e814:	059b      	lsls	r3, r3, #22
 801e816:	d402      	bmi.n	801e81e <_putc_r+0x56>
 801e818:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e81a:	f7fc ff59 	bl	801b6d0 <__retarget_lock_release_recursive>
 801e81e:	4628      	mov	r0, r5
 801e820:	bd70      	pop	{r4, r5, r6, pc}
 801e822:	4629      	mov	r1, r5
 801e824:	4622      	mov	r2, r4
 801e826:	4630      	mov	r0, r6
 801e828:	f7fc fdb6 	bl	801b398 <__swbuf_r>
 801e82c:	4605      	mov	r5, r0
 801e82e:	e7ed      	b.n	801e80c <_putc_r+0x44>

0801e830 <__sccl>:
 801e830:	b570      	push	{r4, r5, r6, lr}
 801e832:	780b      	ldrb	r3, [r1, #0]
 801e834:	4604      	mov	r4, r0
 801e836:	2b5e      	cmp	r3, #94	@ 0x5e
 801e838:	bf0b      	itete	eq
 801e83a:	784b      	ldrbeq	r3, [r1, #1]
 801e83c:	1c4a      	addne	r2, r1, #1
 801e83e:	1c8a      	addeq	r2, r1, #2
 801e840:	2100      	movne	r1, #0
 801e842:	bf08      	it	eq
 801e844:	2101      	moveq	r1, #1
 801e846:	3801      	subs	r0, #1
 801e848:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801e84c:	f800 1f01 	strb.w	r1, [r0, #1]!
 801e850:	42a8      	cmp	r0, r5
 801e852:	d1fb      	bne.n	801e84c <__sccl+0x1c>
 801e854:	b90b      	cbnz	r3, 801e85a <__sccl+0x2a>
 801e856:	1e50      	subs	r0, r2, #1
 801e858:	bd70      	pop	{r4, r5, r6, pc}
 801e85a:	f081 0101 	eor.w	r1, r1, #1
 801e85e:	54e1      	strb	r1, [r4, r3]
 801e860:	4610      	mov	r0, r2
 801e862:	4602      	mov	r2, r0
 801e864:	f812 5b01 	ldrb.w	r5, [r2], #1
 801e868:	2d2d      	cmp	r5, #45	@ 0x2d
 801e86a:	d005      	beq.n	801e878 <__sccl+0x48>
 801e86c:	2d5d      	cmp	r5, #93	@ 0x5d
 801e86e:	d016      	beq.n	801e89e <__sccl+0x6e>
 801e870:	2d00      	cmp	r5, #0
 801e872:	d0f1      	beq.n	801e858 <__sccl+0x28>
 801e874:	462b      	mov	r3, r5
 801e876:	e7f2      	b.n	801e85e <__sccl+0x2e>
 801e878:	7846      	ldrb	r6, [r0, #1]
 801e87a:	2e5d      	cmp	r6, #93	@ 0x5d
 801e87c:	d0fa      	beq.n	801e874 <__sccl+0x44>
 801e87e:	42b3      	cmp	r3, r6
 801e880:	dcf8      	bgt.n	801e874 <__sccl+0x44>
 801e882:	3002      	adds	r0, #2
 801e884:	461a      	mov	r2, r3
 801e886:	3201      	adds	r2, #1
 801e888:	4296      	cmp	r6, r2
 801e88a:	54a1      	strb	r1, [r4, r2]
 801e88c:	dcfb      	bgt.n	801e886 <__sccl+0x56>
 801e88e:	1af2      	subs	r2, r6, r3
 801e890:	3a01      	subs	r2, #1
 801e892:	1c5d      	adds	r5, r3, #1
 801e894:	42b3      	cmp	r3, r6
 801e896:	bfa8      	it	ge
 801e898:	2200      	movge	r2, #0
 801e89a:	18ab      	adds	r3, r5, r2
 801e89c:	e7e1      	b.n	801e862 <__sccl+0x32>
 801e89e:	4610      	mov	r0, r2
 801e8a0:	e7da      	b.n	801e858 <__sccl+0x28>

0801e8a2 <__submore>:
 801e8a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e8a6:	460c      	mov	r4, r1
 801e8a8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801e8aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e8ae:	4299      	cmp	r1, r3
 801e8b0:	d11d      	bne.n	801e8ee <__submore+0x4c>
 801e8b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801e8b6:	f7fd fe07 	bl	801c4c8 <_malloc_r>
 801e8ba:	b918      	cbnz	r0, 801e8c4 <__submore+0x22>
 801e8bc:	f04f 30ff 	mov.w	r0, #4294967295
 801e8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e8c8:	63a3      	str	r3, [r4, #56]	@ 0x38
 801e8ca:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801e8ce:	6360      	str	r0, [r4, #52]	@ 0x34
 801e8d0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801e8d4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801e8d8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801e8dc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801e8e0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801e8e4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801e8e8:	6020      	str	r0, [r4, #0]
 801e8ea:	2000      	movs	r0, #0
 801e8ec:	e7e8      	b.n	801e8c0 <__submore+0x1e>
 801e8ee:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801e8f0:	0077      	lsls	r7, r6, #1
 801e8f2:	463a      	mov	r2, r7
 801e8f4:	f7fe fb1e 	bl	801cf34 <_realloc_r>
 801e8f8:	4605      	mov	r5, r0
 801e8fa:	2800      	cmp	r0, #0
 801e8fc:	d0de      	beq.n	801e8bc <__submore+0x1a>
 801e8fe:	eb00 0806 	add.w	r8, r0, r6
 801e902:	4601      	mov	r1, r0
 801e904:	4632      	mov	r2, r6
 801e906:	4640      	mov	r0, r8
 801e908:	f7fc fee3 	bl	801b6d2 <memcpy>
 801e90c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801e910:	f8c4 8000 	str.w	r8, [r4]
 801e914:	e7e9      	b.n	801e8ea <__submore+0x48>
	...

0801e918 <_fstat_r>:
 801e918:	b538      	push	{r3, r4, r5, lr}
 801e91a:	4d07      	ldr	r5, [pc, #28]	@ (801e938 <_fstat_r+0x20>)
 801e91c:	2300      	movs	r3, #0
 801e91e:	4604      	mov	r4, r0
 801e920:	4608      	mov	r0, r1
 801e922:	4611      	mov	r1, r2
 801e924:	602b      	str	r3, [r5, #0]
 801e926:	f7eb fcbb 	bl	800a2a0 <_fstat>
 801e92a:	1c43      	adds	r3, r0, #1
 801e92c:	d102      	bne.n	801e934 <_fstat_r+0x1c>
 801e92e:	682b      	ldr	r3, [r5, #0]
 801e930:	b103      	cbz	r3, 801e934 <_fstat_r+0x1c>
 801e932:	6023      	str	r3, [r4, #0]
 801e934:	bd38      	pop	{r3, r4, r5, pc}
 801e936:	bf00      	nop
 801e938:	2000c354 	.word	0x2000c354

0801e93c <_isatty_r>:
 801e93c:	b538      	push	{r3, r4, r5, lr}
 801e93e:	4d06      	ldr	r5, [pc, #24]	@ (801e958 <_isatty_r+0x1c>)
 801e940:	2300      	movs	r3, #0
 801e942:	4604      	mov	r4, r0
 801e944:	4608      	mov	r0, r1
 801e946:	602b      	str	r3, [r5, #0]
 801e948:	f7eb fcba 	bl	800a2c0 <_isatty>
 801e94c:	1c43      	adds	r3, r0, #1
 801e94e:	d102      	bne.n	801e956 <_isatty_r+0x1a>
 801e950:	682b      	ldr	r3, [r5, #0]
 801e952:	b103      	cbz	r3, 801e956 <_isatty_r+0x1a>
 801e954:	6023      	str	r3, [r4, #0]
 801e956:	bd38      	pop	{r3, r4, r5, pc}
 801e958:	2000c354 	.word	0x2000c354

0801e95c <_sbrk_r>:
 801e95c:	b538      	push	{r3, r4, r5, lr}
 801e95e:	4d06      	ldr	r5, [pc, #24]	@ (801e978 <_sbrk_r+0x1c>)
 801e960:	2300      	movs	r3, #0
 801e962:	4604      	mov	r4, r0
 801e964:	4608      	mov	r0, r1
 801e966:	602b      	str	r3, [r5, #0]
 801e968:	f7eb fcc2 	bl	800a2f0 <_sbrk>
 801e96c:	1c43      	adds	r3, r0, #1
 801e96e:	d102      	bne.n	801e976 <_sbrk_r+0x1a>
 801e970:	682b      	ldr	r3, [r5, #0]
 801e972:	b103      	cbz	r3, 801e976 <_sbrk_r+0x1a>
 801e974:	6023      	str	r3, [r4, #0]
 801e976:	bd38      	pop	{r3, r4, r5, pc}
 801e978:	2000c354 	.word	0x2000c354
 801e97c:	00000000 	.word	0x00000000

0801e980 <nan>:
 801e980:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801e988 <nan+0x8>
 801e984:	4770      	bx	lr
 801e986:	bf00      	nop
 801e988:	00000000 	.word	0x00000000
 801e98c:	7ff80000 	.word	0x7ff80000

0801e990 <abort>:
 801e990:	b508      	push	{r3, lr}
 801e992:	2006      	movs	r0, #6
 801e994:	f000 fc10 	bl	801f1b8 <raise>
 801e998:	2001      	movs	r0, #1
 801e99a:	f7eb fc4d 	bl	800a238 <_exit>

0801e99e <_calloc_r>:
 801e99e:	b570      	push	{r4, r5, r6, lr}
 801e9a0:	fba1 5402 	umull	r5, r4, r1, r2
 801e9a4:	b934      	cbnz	r4, 801e9b4 <_calloc_r+0x16>
 801e9a6:	4629      	mov	r1, r5
 801e9a8:	f7fd fd8e 	bl	801c4c8 <_malloc_r>
 801e9ac:	4606      	mov	r6, r0
 801e9ae:	b928      	cbnz	r0, 801e9bc <_calloc_r+0x1e>
 801e9b0:	4630      	mov	r0, r6
 801e9b2:	bd70      	pop	{r4, r5, r6, pc}
 801e9b4:	220c      	movs	r2, #12
 801e9b6:	6002      	str	r2, [r0, #0]
 801e9b8:	2600      	movs	r6, #0
 801e9ba:	e7f9      	b.n	801e9b0 <_calloc_r+0x12>
 801e9bc:	462a      	mov	r2, r5
 801e9be:	4621      	mov	r1, r4
 801e9c0:	f7fc fd98 	bl	801b4f4 <memset>
 801e9c4:	e7f4      	b.n	801e9b0 <_calloc_r+0x12>

0801e9c6 <rshift>:
 801e9c6:	6903      	ldr	r3, [r0, #16]
 801e9c8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801e9cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e9d0:	ea4f 1261 	mov.w	r2, r1, asr #5
 801e9d4:	f100 0414 	add.w	r4, r0, #20
 801e9d8:	dd45      	ble.n	801ea66 <rshift+0xa0>
 801e9da:	f011 011f 	ands.w	r1, r1, #31
 801e9de:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801e9e2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801e9e6:	d10c      	bne.n	801ea02 <rshift+0x3c>
 801e9e8:	f100 0710 	add.w	r7, r0, #16
 801e9ec:	4629      	mov	r1, r5
 801e9ee:	42b1      	cmp	r1, r6
 801e9f0:	d334      	bcc.n	801ea5c <rshift+0x96>
 801e9f2:	1a9b      	subs	r3, r3, r2
 801e9f4:	009b      	lsls	r3, r3, #2
 801e9f6:	1eea      	subs	r2, r5, #3
 801e9f8:	4296      	cmp	r6, r2
 801e9fa:	bf38      	it	cc
 801e9fc:	2300      	movcc	r3, #0
 801e9fe:	4423      	add	r3, r4
 801ea00:	e015      	b.n	801ea2e <rshift+0x68>
 801ea02:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801ea06:	f1c1 0820 	rsb	r8, r1, #32
 801ea0a:	40cf      	lsrs	r7, r1
 801ea0c:	f105 0e04 	add.w	lr, r5, #4
 801ea10:	46a1      	mov	r9, r4
 801ea12:	4576      	cmp	r6, lr
 801ea14:	46f4      	mov	ip, lr
 801ea16:	d815      	bhi.n	801ea44 <rshift+0x7e>
 801ea18:	1a9a      	subs	r2, r3, r2
 801ea1a:	0092      	lsls	r2, r2, #2
 801ea1c:	3a04      	subs	r2, #4
 801ea1e:	3501      	adds	r5, #1
 801ea20:	42ae      	cmp	r6, r5
 801ea22:	bf38      	it	cc
 801ea24:	2200      	movcc	r2, #0
 801ea26:	18a3      	adds	r3, r4, r2
 801ea28:	50a7      	str	r7, [r4, r2]
 801ea2a:	b107      	cbz	r7, 801ea2e <rshift+0x68>
 801ea2c:	3304      	adds	r3, #4
 801ea2e:	1b1a      	subs	r2, r3, r4
 801ea30:	42a3      	cmp	r3, r4
 801ea32:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801ea36:	bf08      	it	eq
 801ea38:	2300      	moveq	r3, #0
 801ea3a:	6102      	str	r2, [r0, #16]
 801ea3c:	bf08      	it	eq
 801ea3e:	6143      	streq	r3, [r0, #20]
 801ea40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ea44:	f8dc c000 	ldr.w	ip, [ip]
 801ea48:	fa0c fc08 	lsl.w	ip, ip, r8
 801ea4c:	ea4c 0707 	orr.w	r7, ip, r7
 801ea50:	f849 7b04 	str.w	r7, [r9], #4
 801ea54:	f85e 7b04 	ldr.w	r7, [lr], #4
 801ea58:	40cf      	lsrs	r7, r1
 801ea5a:	e7da      	b.n	801ea12 <rshift+0x4c>
 801ea5c:	f851 cb04 	ldr.w	ip, [r1], #4
 801ea60:	f847 cf04 	str.w	ip, [r7, #4]!
 801ea64:	e7c3      	b.n	801e9ee <rshift+0x28>
 801ea66:	4623      	mov	r3, r4
 801ea68:	e7e1      	b.n	801ea2e <rshift+0x68>

0801ea6a <__hexdig_fun>:
 801ea6a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801ea6e:	2b09      	cmp	r3, #9
 801ea70:	d802      	bhi.n	801ea78 <__hexdig_fun+0xe>
 801ea72:	3820      	subs	r0, #32
 801ea74:	b2c0      	uxtb	r0, r0
 801ea76:	4770      	bx	lr
 801ea78:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801ea7c:	2b05      	cmp	r3, #5
 801ea7e:	d801      	bhi.n	801ea84 <__hexdig_fun+0x1a>
 801ea80:	3847      	subs	r0, #71	@ 0x47
 801ea82:	e7f7      	b.n	801ea74 <__hexdig_fun+0xa>
 801ea84:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801ea88:	2b05      	cmp	r3, #5
 801ea8a:	d801      	bhi.n	801ea90 <__hexdig_fun+0x26>
 801ea8c:	3827      	subs	r0, #39	@ 0x27
 801ea8e:	e7f1      	b.n	801ea74 <__hexdig_fun+0xa>
 801ea90:	2000      	movs	r0, #0
 801ea92:	4770      	bx	lr

0801ea94 <__gethex>:
 801ea94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ea98:	b085      	sub	sp, #20
 801ea9a:	468a      	mov	sl, r1
 801ea9c:	9302      	str	r3, [sp, #8]
 801ea9e:	680b      	ldr	r3, [r1, #0]
 801eaa0:	9001      	str	r0, [sp, #4]
 801eaa2:	4690      	mov	r8, r2
 801eaa4:	1c9c      	adds	r4, r3, #2
 801eaa6:	46a1      	mov	r9, r4
 801eaa8:	f814 0b01 	ldrb.w	r0, [r4], #1
 801eaac:	2830      	cmp	r0, #48	@ 0x30
 801eaae:	d0fa      	beq.n	801eaa6 <__gethex+0x12>
 801eab0:	eba9 0303 	sub.w	r3, r9, r3
 801eab4:	f1a3 0b02 	sub.w	fp, r3, #2
 801eab8:	f7ff ffd7 	bl	801ea6a <__hexdig_fun>
 801eabc:	4605      	mov	r5, r0
 801eabe:	2800      	cmp	r0, #0
 801eac0:	d168      	bne.n	801eb94 <__gethex+0x100>
 801eac2:	49a0      	ldr	r1, [pc, #640]	@ (801ed44 <__gethex+0x2b0>)
 801eac4:	2201      	movs	r2, #1
 801eac6:	4648      	mov	r0, r9
 801eac8:	f7fc fd1c 	bl	801b504 <strncmp>
 801eacc:	4607      	mov	r7, r0
 801eace:	2800      	cmp	r0, #0
 801ead0:	d167      	bne.n	801eba2 <__gethex+0x10e>
 801ead2:	f899 0001 	ldrb.w	r0, [r9, #1]
 801ead6:	4626      	mov	r6, r4
 801ead8:	f7ff ffc7 	bl	801ea6a <__hexdig_fun>
 801eadc:	2800      	cmp	r0, #0
 801eade:	d062      	beq.n	801eba6 <__gethex+0x112>
 801eae0:	4623      	mov	r3, r4
 801eae2:	7818      	ldrb	r0, [r3, #0]
 801eae4:	2830      	cmp	r0, #48	@ 0x30
 801eae6:	4699      	mov	r9, r3
 801eae8:	f103 0301 	add.w	r3, r3, #1
 801eaec:	d0f9      	beq.n	801eae2 <__gethex+0x4e>
 801eaee:	f7ff ffbc 	bl	801ea6a <__hexdig_fun>
 801eaf2:	fab0 f580 	clz	r5, r0
 801eaf6:	096d      	lsrs	r5, r5, #5
 801eaf8:	f04f 0b01 	mov.w	fp, #1
 801eafc:	464a      	mov	r2, r9
 801eafe:	4616      	mov	r6, r2
 801eb00:	3201      	adds	r2, #1
 801eb02:	7830      	ldrb	r0, [r6, #0]
 801eb04:	f7ff ffb1 	bl	801ea6a <__hexdig_fun>
 801eb08:	2800      	cmp	r0, #0
 801eb0a:	d1f8      	bne.n	801eafe <__gethex+0x6a>
 801eb0c:	498d      	ldr	r1, [pc, #564]	@ (801ed44 <__gethex+0x2b0>)
 801eb0e:	2201      	movs	r2, #1
 801eb10:	4630      	mov	r0, r6
 801eb12:	f7fc fcf7 	bl	801b504 <strncmp>
 801eb16:	2800      	cmp	r0, #0
 801eb18:	d13f      	bne.n	801eb9a <__gethex+0x106>
 801eb1a:	b944      	cbnz	r4, 801eb2e <__gethex+0x9a>
 801eb1c:	1c74      	adds	r4, r6, #1
 801eb1e:	4622      	mov	r2, r4
 801eb20:	4616      	mov	r6, r2
 801eb22:	3201      	adds	r2, #1
 801eb24:	7830      	ldrb	r0, [r6, #0]
 801eb26:	f7ff ffa0 	bl	801ea6a <__hexdig_fun>
 801eb2a:	2800      	cmp	r0, #0
 801eb2c:	d1f8      	bne.n	801eb20 <__gethex+0x8c>
 801eb2e:	1ba4      	subs	r4, r4, r6
 801eb30:	00a7      	lsls	r7, r4, #2
 801eb32:	7833      	ldrb	r3, [r6, #0]
 801eb34:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801eb38:	2b50      	cmp	r3, #80	@ 0x50
 801eb3a:	d13e      	bne.n	801ebba <__gethex+0x126>
 801eb3c:	7873      	ldrb	r3, [r6, #1]
 801eb3e:	2b2b      	cmp	r3, #43	@ 0x2b
 801eb40:	d033      	beq.n	801ebaa <__gethex+0x116>
 801eb42:	2b2d      	cmp	r3, #45	@ 0x2d
 801eb44:	d034      	beq.n	801ebb0 <__gethex+0x11c>
 801eb46:	1c71      	adds	r1, r6, #1
 801eb48:	2400      	movs	r4, #0
 801eb4a:	7808      	ldrb	r0, [r1, #0]
 801eb4c:	f7ff ff8d 	bl	801ea6a <__hexdig_fun>
 801eb50:	1e43      	subs	r3, r0, #1
 801eb52:	b2db      	uxtb	r3, r3
 801eb54:	2b18      	cmp	r3, #24
 801eb56:	d830      	bhi.n	801ebba <__gethex+0x126>
 801eb58:	f1a0 0210 	sub.w	r2, r0, #16
 801eb5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801eb60:	f7ff ff83 	bl	801ea6a <__hexdig_fun>
 801eb64:	f100 3cff 	add.w	ip, r0, #4294967295
 801eb68:	fa5f fc8c 	uxtb.w	ip, ip
 801eb6c:	f1bc 0f18 	cmp.w	ip, #24
 801eb70:	f04f 030a 	mov.w	r3, #10
 801eb74:	d91e      	bls.n	801ebb4 <__gethex+0x120>
 801eb76:	b104      	cbz	r4, 801eb7a <__gethex+0xe6>
 801eb78:	4252      	negs	r2, r2
 801eb7a:	4417      	add	r7, r2
 801eb7c:	f8ca 1000 	str.w	r1, [sl]
 801eb80:	b1ed      	cbz	r5, 801ebbe <__gethex+0x12a>
 801eb82:	f1bb 0f00 	cmp.w	fp, #0
 801eb86:	bf0c      	ite	eq
 801eb88:	2506      	moveq	r5, #6
 801eb8a:	2500      	movne	r5, #0
 801eb8c:	4628      	mov	r0, r5
 801eb8e:	b005      	add	sp, #20
 801eb90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eb94:	2500      	movs	r5, #0
 801eb96:	462c      	mov	r4, r5
 801eb98:	e7b0      	b.n	801eafc <__gethex+0x68>
 801eb9a:	2c00      	cmp	r4, #0
 801eb9c:	d1c7      	bne.n	801eb2e <__gethex+0x9a>
 801eb9e:	4627      	mov	r7, r4
 801eba0:	e7c7      	b.n	801eb32 <__gethex+0x9e>
 801eba2:	464e      	mov	r6, r9
 801eba4:	462f      	mov	r7, r5
 801eba6:	2501      	movs	r5, #1
 801eba8:	e7c3      	b.n	801eb32 <__gethex+0x9e>
 801ebaa:	2400      	movs	r4, #0
 801ebac:	1cb1      	adds	r1, r6, #2
 801ebae:	e7cc      	b.n	801eb4a <__gethex+0xb6>
 801ebb0:	2401      	movs	r4, #1
 801ebb2:	e7fb      	b.n	801ebac <__gethex+0x118>
 801ebb4:	fb03 0002 	mla	r0, r3, r2, r0
 801ebb8:	e7ce      	b.n	801eb58 <__gethex+0xc4>
 801ebba:	4631      	mov	r1, r6
 801ebbc:	e7de      	b.n	801eb7c <__gethex+0xe8>
 801ebbe:	eba6 0309 	sub.w	r3, r6, r9
 801ebc2:	3b01      	subs	r3, #1
 801ebc4:	4629      	mov	r1, r5
 801ebc6:	2b07      	cmp	r3, #7
 801ebc8:	dc0a      	bgt.n	801ebe0 <__gethex+0x14c>
 801ebca:	9801      	ldr	r0, [sp, #4]
 801ebcc:	f7fd fd08 	bl	801c5e0 <_Balloc>
 801ebd0:	4604      	mov	r4, r0
 801ebd2:	b940      	cbnz	r0, 801ebe6 <__gethex+0x152>
 801ebd4:	4b5c      	ldr	r3, [pc, #368]	@ (801ed48 <__gethex+0x2b4>)
 801ebd6:	4602      	mov	r2, r0
 801ebd8:	21e4      	movs	r1, #228	@ 0xe4
 801ebda:	485c      	ldr	r0, [pc, #368]	@ (801ed4c <__gethex+0x2b8>)
 801ebdc:	f7fc fd88 	bl	801b6f0 <__assert_func>
 801ebe0:	3101      	adds	r1, #1
 801ebe2:	105b      	asrs	r3, r3, #1
 801ebe4:	e7ef      	b.n	801ebc6 <__gethex+0x132>
 801ebe6:	f100 0a14 	add.w	sl, r0, #20
 801ebea:	2300      	movs	r3, #0
 801ebec:	4655      	mov	r5, sl
 801ebee:	469b      	mov	fp, r3
 801ebf0:	45b1      	cmp	r9, r6
 801ebf2:	d337      	bcc.n	801ec64 <__gethex+0x1d0>
 801ebf4:	f845 bb04 	str.w	fp, [r5], #4
 801ebf8:	eba5 050a 	sub.w	r5, r5, sl
 801ebfc:	10ad      	asrs	r5, r5, #2
 801ebfe:	6125      	str	r5, [r4, #16]
 801ec00:	4658      	mov	r0, fp
 801ec02:	f7fd fddf 	bl	801c7c4 <__hi0bits>
 801ec06:	016d      	lsls	r5, r5, #5
 801ec08:	f8d8 6000 	ldr.w	r6, [r8]
 801ec0c:	1a2d      	subs	r5, r5, r0
 801ec0e:	42b5      	cmp	r5, r6
 801ec10:	dd54      	ble.n	801ecbc <__gethex+0x228>
 801ec12:	1bad      	subs	r5, r5, r6
 801ec14:	4629      	mov	r1, r5
 801ec16:	4620      	mov	r0, r4
 801ec18:	f7fe f96b 	bl	801cef2 <__any_on>
 801ec1c:	4681      	mov	r9, r0
 801ec1e:	b178      	cbz	r0, 801ec40 <__gethex+0x1ac>
 801ec20:	1e6b      	subs	r3, r5, #1
 801ec22:	1159      	asrs	r1, r3, #5
 801ec24:	f003 021f 	and.w	r2, r3, #31
 801ec28:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801ec2c:	f04f 0901 	mov.w	r9, #1
 801ec30:	fa09 f202 	lsl.w	r2, r9, r2
 801ec34:	420a      	tst	r2, r1
 801ec36:	d003      	beq.n	801ec40 <__gethex+0x1ac>
 801ec38:	454b      	cmp	r3, r9
 801ec3a:	dc36      	bgt.n	801ecaa <__gethex+0x216>
 801ec3c:	f04f 0902 	mov.w	r9, #2
 801ec40:	4629      	mov	r1, r5
 801ec42:	4620      	mov	r0, r4
 801ec44:	f7ff febf 	bl	801e9c6 <rshift>
 801ec48:	442f      	add	r7, r5
 801ec4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ec4e:	42bb      	cmp	r3, r7
 801ec50:	da42      	bge.n	801ecd8 <__gethex+0x244>
 801ec52:	9801      	ldr	r0, [sp, #4]
 801ec54:	4621      	mov	r1, r4
 801ec56:	f7fd fd03 	bl	801c660 <_Bfree>
 801ec5a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec5c:	2300      	movs	r3, #0
 801ec5e:	6013      	str	r3, [r2, #0]
 801ec60:	25a3      	movs	r5, #163	@ 0xa3
 801ec62:	e793      	b.n	801eb8c <__gethex+0xf8>
 801ec64:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801ec68:	2a2e      	cmp	r2, #46	@ 0x2e
 801ec6a:	d012      	beq.n	801ec92 <__gethex+0x1fe>
 801ec6c:	2b20      	cmp	r3, #32
 801ec6e:	d104      	bne.n	801ec7a <__gethex+0x1e6>
 801ec70:	f845 bb04 	str.w	fp, [r5], #4
 801ec74:	f04f 0b00 	mov.w	fp, #0
 801ec78:	465b      	mov	r3, fp
 801ec7a:	7830      	ldrb	r0, [r6, #0]
 801ec7c:	9303      	str	r3, [sp, #12]
 801ec7e:	f7ff fef4 	bl	801ea6a <__hexdig_fun>
 801ec82:	9b03      	ldr	r3, [sp, #12]
 801ec84:	f000 000f 	and.w	r0, r0, #15
 801ec88:	4098      	lsls	r0, r3
 801ec8a:	ea4b 0b00 	orr.w	fp, fp, r0
 801ec8e:	3304      	adds	r3, #4
 801ec90:	e7ae      	b.n	801ebf0 <__gethex+0x15c>
 801ec92:	45b1      	cmp	r9, r6
 801ec94:	d8ea      	bhi.n	801ec6c <__gethex+0x1d8>
 801ec96:	492b      	ldr	r1, [pc, #172]	@ (801ed44 <__gethex+0x2b0>)
 801ec98:	9303      	str	r3, [sp, #12]
 801ec9a:	2201      	movs	r2, #1
 801ec9c:	4630      	mov	r0, r6
 801ec9e:	f7fc fc31 	bl	801b504 <strncmp>
 801eca2:	9b03      	ldr	r3, [sp, #12]
 801eca4:	2800      	cmp	r0, #0
 801eca6:	d1e1      	bne.n	801ec6c <__gethex+0x1d8>
 801eca8:	e7a2      	b.n	801ebf0 <__gethex+0x15c>
 801ecaa:	1ea9      	subs	r1, r5, #2
 801ecac:	4620      	mov	r0, r4
 801ecae:	f7fe f920 	bl	801cef2 <__any_on>
 801ecb2:	2800      	cmp	r0, #0
 801ecb4:	d0c2      	beq.n	801ec3c <__gethex+0x1a8>
 801ecb6:	f04f 0903 	mov.w	r9, #3
 801ecba:	e7c1      	b.n	801ec40 <__gethex+0x1ac>
 801ecbc:	da09      	bge.n	801ecd2 <__gethex+0x23e>
 801ecbe:	1b75      	subs	r5, r6, r5
 801ecc0:	4621      	mov	r1, r4
 801ecc2:	9801      	ldr	r0, [sp, #4]
 801ecc4:	462a      	mov	r2, r5
 801ecc6:	f7fd fedb 	bl	801ca80 <__lshift>
 801ecca:	1b7f      	subs	r7, r7, r5
 801eccc:	4604      	mov	r4, r0
 801ecce:	f100 0a14 	add.w	sl, r0, #20
 801ecd2:	f04f 0900 	mov.w	r9, #0
 801ecd6:	e7b8      	b.n	801ec4a <__gethex+0x1b6>
 801ecd8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801ecdc:	42bd      	cmp	r5, r7
 801ecde:	dd6f      	ble.n	801edc0 <__gethex+0x32c>
 801ece0:	1bed      	subs	r5, r5, r7
 801ece2:	42ae      	cmp	r6, r5
 801ece4:	dc34      	bgt.n	801ed50 <__gethex+0x2bc>
 801ece6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ecea:	2b02      	cmp	r3, #2
 801ecec:	d022      	beq.n	801ed34 <__gethex+0x2a0>
 801ecee:	2b03      	cmp	r3, #3
 801ecf0:	d024      	beq.n	801ed3c <__gethex+0x2a8>
 801ecf2:	2b01      	cmp	r3, #1
 801ecf4:	d115      	bne.n	801ed22 <__gethex+0x28e>
 801ecf6:	42ae      	cmp	r6, r5
 801ecf8:	d113      	bne.n	801ed22 <__gethex+0x28e>
 801ecfa:	2e01      	cmp	r6, #1
 801ecfc:	d10b      	bne.n	801ed16 <__gethex+0x282>
 801ecfe:	9a02      	ldr	r2, [sp, #8]
 801ed00:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801ed04:	6013      	str	r3, [r2, #0]
 801ed06:	2301      	movs	r3, #1
 801ed08:	6123      	str	r3, [r4, #16]
 801ed0a:	f8ca 3000 	str.w	r3, [sl]
 801ed0e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ed10:	2562      	movs	r5, #98	@ 0x62
 801ed12:	601c      	str	r4, [r3, #0]
 801ed14:	e73a      	b.n	801eb8c <__gethex+0xf8>
 801ed16:	1e71      	subs	r1, r6, #1
 801ed18:	4620      	mov	r0, r4
 801ed1a:	f7fe f8ea 	bl	801cef2 <__any_on>
 801ed1e:	2800      	cmp	r0, #0
 801ed20:	d1ed      	bne.n	801ecfe <__gethex+0x26a>
 801ed22:	9801      	ldr	r0, [sp, #4]
 801ed24:	4621      	mov	r1, r4
 801ed26:	f7fd fc9b 	bl	801c660 <_Bfree>
 801ed2a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ed2c:	2300      	movs	r3, #0
 801ed2e:	6013      	str	r3, [r2, #0]
 801ed30:	2550      	movs	r5, #80	@ 0x50
 801ed32:	e72b      	b.n	801eb8c <__gethex+0xf8>
 801ed34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ed36:	2b00      	cmp	r3, #0
 801ed38:	d1f3      	bne.n	801ed22 <__gethex+0x28e>
 801ed3a:	e7e0      	b.n	801ecfe <__gethex+0x26a>
 801ed3c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	d1dd      	bne.n	801ecfe <__gethex+0x26a>
 801ed42:	e7ee      	b.n	801ed22 <__gethex+0x28e>
 801ed44:	0802161e 	.word	0x0802161e
 801ed48:	080215b4 	.word	0x080215b4
 801ed4c:	08021643 	.word	0x08021643
 801ed50:	1e6f      	subs	r7, r5, #1
 801ed52:	f1b9 0f00 	cmp.w	r9, #0
 801ed56:	d130      	bne.n	801edba <__gethex+0x326>
 801ed58:	b127      	cbz	r7, 801ed64 <__gethex+0x2d0>
 801ed5a:	4639      	mov	r1, r7
 801ed5c:	4620      	mov	r0, r4
 801ed5e:	f7fe f8c8 	bl	801cef2 <__any_on>
 801ed62:	4681      	mov	r9, r0
 801ed64:	117a      	asrs	r2, r7, #5
 801ed66:	2301      	movs	r3, #1
 801ed68:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801ed6c:	f007 071f 	and.w	r7, r7, #31
 801ed70:	40bb      	lsls	r3, r7
 801ed72:	4213      	tst	r3, r2
 801ed74:	4629      	mov	r1, r5
 801ed76:	4620      	mov	r0, r4
 801ed78:	bf18      	it	ne
 801ed7a:	f049 0902 	orrne.w	r9, r9, #2
 801ed7e:	f7ff fe22 	bl	801e9c6 <rshift>
 801ed82:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801ed86:	1b76      	subs	r6, r6, r5
 801ed88:	2502      	movs	r5, #2
 801ed8a:	f1b9 0f00 	cmp.w	r9, #0
 801ed8e:	d047      	beq.n	801ee20 <__gethex+0x38c>
 801ed90:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801ed94:	2b02      	cmp	r3, #2
 801ed96:	d015      	beq.n	801edc4 <__gethex+0x330>
 801ed98:	2b03      	cmp	r3, #3
 801ed9a:	d017      	beq.n	801edcc <__gethex+0x338>
 801ed9c:	2b01      	cmp	r3, #1
 801ed9e:	d109      	bne.n	801edb4 <__gethex+0x320>
 801eda0:	f019 0f02 	tst.w	r9, #2
 801eda4:	d006      	beq.n	801edb4 <__gethex+0x320>
 801eda6:	f8da 3000 	ldr.w	r3, [sl]
 801edaa:	ea49 0903 	orr.w	r9, r9, r3
 801edae:	f019 0f01 	tst.w	r9, #1
 801edb2:	d10e      	bne.n	801edd2 <__gethex+0x33e>
 801edb4:	f045 0510 	orr.w	r5, r5, #16
 801edb8:	e032      	b.n	801ee20 <__gethex+0x38c>
 801edba:	f04f 0901 	mov.w	r9, #1
 801edbe:	e7d1      	b.n	801ed64 <__gethex+0x2d0>
 801edc0:	2501      	movs	r5, #1
 801edc2:	e7e2      	b.n	801ed8a <__gethex+0x2f6>
 801edc4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801edc6:	f1c3 0301 	rsb	r3, r3, #1
 801edca:	930f      	str	r3, [sp, #60]	@ 0x3c
 801edcc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d0f0      	beq.n	801edb4 <__gethex+0x320>
 801edd2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801edd6:	f104 0314 	add.w	r3, r4, #20
 801edda:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801edde:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801ede2:	f04f 0c00 	mov.w	ip, #0
 801ede6:	4618      	mov	r0, r3
 801ede8:	f853 2b04 	ldr.w	r2, [r3], #4
 801edec:	f1b2 3fff 	cmp.w	r2, #4294967295
 801edf0:	d01b      	beq.n	801ee2a <__gethex+0x396>
 801edf2:	3201      	adds	r2, #1
 801edf4:	6002      	str	r2, [r0, #0]
 801edf6:	2d02      	cmp	r5, #2
 801edf8:	f104 0314 	add.w	r3, r4, #20
 801edfc:	d13c      	bne.n	801ee78 <__gethex+0x3e4>
 801edfe:	f8d8 2000 	ldr.w	r2, [r8]
 801ee02:	3a01      	subs	r2, #1
 801ee04:	42b2      	cmp	r2, r6
 801ee06:	d109      	bne.n	801ee1c <__gethex+0x388>
 801ee08:	1171      	asrs	r1, r6, #5
 801ee0a:	2201      	movs	r2, #1
 801ee0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801ee10:	f006 061f 	and.w	r6, r6, #31
 801ee14:	fa02 f606 	lsl.w	r6, r2, r6
 801ee18:	421e      	tst	r6, r3
 801ee1a:	d13a      	bne.n	801ee92 <__gethex+0x3fe>
 801ee1c:	f045 0520 	orr.w	r5, r5, #32
 801ee20:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee22:	601c      	str	r4, [r3, #0]
 801ee24:	9b02      	ldr	r3, [sp, #8]
 801ee26:	601f      	str	r7, [r3, #0]
 801ee28:	e6b0      	b.n	801eb8c <__gethex+0xf8>
 801ee2a:	4299      	cmp	r1, r3
 801ee2c:	f843 cc04 	str.w	ip, [r3, #-4]
 801ee30:	d8d9      	bhi.n	801ede6 <__gethex+0x352>
 801ee32:	68a3      	ldr	r3, [r4, #8]
 801ee34:	459b      	cmp	fp, r3
 801ee36:	db17      	blt.n	801ee68 <__gethex+0x3d4>
 801ee38:	6861      	ldr	r1, [r4, #4]
 801ee3a:	9801      	ldr	r0, [sp, #4]
 801ee3c:	3101      	adds	r1, #1
 801ee3e:	f7fd fbcf 	bl	801c5e0 <_Balloc>
 801ee42:	4681      	mov	r9, r0
 801ee44:	b918      	cbnz	r0, 801ee4e <__gethex+0x3ba>
 801ee46:	4b1a      	ldr	r3, [pc, #104]	@ (801eeb0 <__gethex+0x41c>)
 801ee48:	4602      	mov	r2, r0
 801ee4a:	2184      	movs	r1, #132	@ 0x84
 801ee4c:	e6c5      	b.n	801ebda <__gethex+0x146>
 801ee4e:	6922      	ldr	r2, [r4, #16]
 801ee50:	3202      	adds	r2, #2
 801ee52:	f104 010c 	add.w	r1, r4, #12
 801ee56:	0092      	lsls	r2, r2, #2
 801ee58:	300c      	adds	r0, #12
 801ee5a:	f7fc fc3a 	bl	801b6d2 <memcpy>
 801ee5e:	4621      	mov	r1, r4
 801ee60:	9801      	ldr	r0, [sp, #4]
 801ee62:	f7fd fbfd 	bl	801c660 <_Bfree>
 801ee66:	464c      	mov	r4, r9
 801ee68:	6923      	ldr	r3, [r4, #16]
 801ee6a:	1c5a      	adds	r2, r3, #1
 801ee6c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ee70:	6122      	str	r2, [r4, #16]
 801ee72:	2201      	movs	r2, #1
 801ee74:	615a      	str	r2, [r3, #20]
 801ee76:	e7be      	b.n	801edf6 <__gethex+0x362>
 801ee78:	6922      	ldr	r2, [r4, #16]
 801ee7a:	455a      	cmp	r2, fp
 801ee7c:	dd0b      	ble.n	801ee96 <__gethex+0x402>
 801ee7e:	2101      	movs	r1, #1
 801ee80:	4620      	mov	r0, r4
 801ee82:	f7ff fda0 	bl	801e9c6 <rshift>
 801ee86:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801ee8a:	3701      	adds	r7, #1
 801ee8c:	42bb      	cmp	r3, r7
 801ee8e:	f6ff aee0 	blt.w	801ec52 <__gethex+0x1be>
 801ee92:	2501      	movs	r5, #1
 801ee94:	e7c2      	b.n	801ee1c <__gethex+0x388>
 801ee96:	f016 061f 	ands.w	r6, r6, #31
 801ee9a:	d0fa      	beq.n	801ee92 <__gethex+0x3fe>
 801ee9c:	4453      	add	r3, sl
 801ee9e:	f1c6 0620 	rsb	r6, r6, #32
 801eea2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801eea6:	f7fd fc8d 	bl	801c7c4 <__hi0bits>
 801eeaa:	42b0      	cmp	r0, r6
 801eeac:	dbe7      	blt.n	801ee7e <__gethex+0x3ea>
 801eeae:	e7f0      	b.n	801ee92 <__gethex+0x3fe>
 801eeb0:	080215b4 	.word	0x080215b4

0801eeb4 <L_shift>:
 801eeb4:	f1c2 0208 	rsb	r2, r2, #8
 801eeb8:	0092      	lsls	r2, r2, #2
 801eeba:	b570      	push	{r4, r5, r6, lr}
 801eebc:	f1c2 0620 	rsb	r6, r2, #32
 801eec0:	6843      	ldr	r3, [r0, #4]
 801eec2:	6804      	ldr	r4, [r0, #0]
 801eec4:	fa03 f506 	lsl.w	r5, r3, r6
 801eec8:	432c      	orrs	r4, r5
 801eeca:	40d3      	lsrs	r3, r2
 801eecc:	6004      	str	r4, [r0, #0]
 801eece:	f840 3f04 	str.w	r3, [r0, #4]!
 801eed2:	4288      	cmp	r0, r1
 801eed4:	d3f4      	bcc.n	801eec0 <L_shift+0xc>
 801eed6:	bd70      	pop	{r4, r5, r6, pc}

0801eed8 <__match>:
 801eed8:	b530      	push	{r4, r5, lr}
 801eeda:	6803      	ldr	r3, [r0, #0]
 801eedc:	3301      	adds	r3, #1
 801eede:	f811 4b01 	ldrb.w	r4, [r1], #1
 801eee2:	b914      	cbnz	r4, 801eeea <__match+0x12>
 801eee4:	6003      	str	r3, [r0, #0]
 801eee6:	2001      	movs	r0, #1
 801eee8:	bd30      	pop	{r4, r5, pc}
 801eeea:	f813 2b01 	ldrb.w	r2, [r3], #1
 801eeee:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801eef2:	2d19      	cmp	r5, #25
 801eef4:	bf98      	it	ls
 801eef6:	3220      	addls	r2, #32
 801eef8:	42a2      	cmp	r2, r4
 801eefa:	d0f0      	beq.n	801eede <__match+0x6>
 801eefc:	2000      	movs	r0, #0
 801eefe:	e7f3      	b.n	801eee8 <__match+0x10>

0801ef00 <__hexnan>:
 801ef00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ef04:	680b      	ldr	r3, [r1, #0]
 801ef06:	6801      	ldr	r1, [r0, #0]
 801ef08:	115e      	asrs	r6, r3, #5
 801ef0a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801ef0e:	f013 031f 	ands.w	r3, r3, #31
 801ef12:	b087      	sub	sp, #28
 801ef14:	bf18      	it	ne
 801ef16:	3604      	addne	r6, #4
 801ef18:	2500      	movs	r5, #0
 801ef1a:	1f37      	subs	r7, r6, #4
 801ef1c:	4682      	mov	sl, r0
 801ef1e:	4690      	mov	r8, r2
 801ef20:	9301      	str	r3, [sp, #4]
 801ef22:	f846 5c04 	str.w	r5, [r6, #-4]
 801ef26:	46b9      	mov	r9, r7
 801ef28:	463c      	mov	r4, r7
 801ef2a:	9502      	str	r5, [sp, #8]
 801ef2c:	46ab      	mov	fp, r5
 801ef2e:	784a      	ldrb	r2, [r1, #1]
 801ef30:	1c4b      	adds	r3, r1, #1
 801ef32:	9303      	str	r3, [sp, #12]
 801ef34:	b342      	cbz	r2, 801ef88 <__hexnan+0x88>
 801ef36:	4610      	mov	r0, r2
 801ef38:	9105      	str	r1, [sp, #20]
 801ef3a:	9204      	str	r2, [sp, #16]
 801ef3c:	f7ff fd95 	bl	801ea6a <__hexdig_fun>
 801ef40:	2800      	cmp	r0, #0
 801ef42:	d151      	bne.n	801efe8 <__hexnan+0xe8>
 801ef44:	9a04      	ldr	r2, [sp, #16]
 801ef46:	9905      	ldr	r1, [sp, #20]
 801ef48:	2a20      	cmp	r2, #32
 801ef4a:	d818      	bhi.n	801ef7e <__hexnan+0x7e>
 801ef4c:	9b02      	ldr	r3, [sp, #8]
 801ef4e:	459b      	cmp	fp, r3
 801ef50:	dd13      	ble.n	801ef7a <__hexnan+0x7a>
 801ef52:	454c      	cmp	r4, r9
 801ef54:	d206      	bcs.n	801ef64 <__hexnan+0x64>
 801ef56:	2d07      	cmp	r5, #7
 801ef58:	dc04      	bgt.n	801ef64 <__hexnan+0x64>
 801ef5a:	462a      	mov	r2, r5
 801ef5c:	4649      	mov	r1, r9
 801ef5e:	4620      	mov	r0, r4
 801ef60:	f7ff ffa8 	bl	801eeb4 <L_shift>
 801ef64:	4544      	cmp	r4, r8
 801ef66:	d952      	bls.n	801f00e <__hexnan+0x10e>
 801ef68:	2300      	movs	r3, #0
 801ef6a:	f1a4 0904 	sub.w	r9, r4, #4
 801ef6e:	f844 3c04 	str.w	r3, [r4, #-4]
 801ef72:	f8cd b008 	str.w	fp, [sp, #8]
 801ef76:	464c      	mov	r4, r9
 801ef78:	461d      	mov	r5, r3
 801ef7a:	9903      	ldr	r1, [sp, #12]
 801ef7c:	e7d7      	b.n	801ef2e <__hexnan+0x2e>
 801ef7e:	2a29      	cmp	r2, #41	@ 0x29
 801ef80:	d157      	bne.n	801f032 <__hexnan+0x132>
 801ef82:	3102      	adds	r1, #2
 801ef84:	f8ca 1000 	str.w	r1, [sl]
 801ef88:	f1bb 0f00 	cmp.w	fp, #0
 801ef8c:	d051      	beq.n	801f032 <__hexnan+0x132>
 801ef8e:	454c      	cmp	r4, r9
 801ef90:	d206      	bcs.n	801efa0 <__hexnan+0xa0>
 801ef92:	2d07      	cmp	r5, #7
 801ef94:	dc04      	bgt.n	801efa0 <__hexnan+0xa0>
 801ef96:	462a      	mov	r2, r5
 801ef98:	4649      	mov	r1, r9
 801ef9a:	4620      	mov	r0, r4
 801ef9c:	f7ff ff8a 	bl	801eeb4 <L_shift>
 801efa0:	4544      	cmp	r4, r8
 801efa2:	d936      	bls.n	801f012 <__hexnan+0x112>
 801efa4:	f1a8 0204 	sub.w	r2, r8, #4
 801efa8:	4623      	mov	r3, r4
 801efaa:	f853 1b04 	ldr.w	r1, [r3], #4
 801efae:	f842 1f04 	str.w	r1, [r2, #4]!
 801efb2:	429f      	cmp	r7, r3
 801efb4:	d2f9      	bcs.n	801efaa <__hexnan+0xaa>
 801efb6:	1b3b      	subs	r3, r7, r4
 801efb8:	f023 0303 	bic.w	r3, r3, #3
 801efbc:	3304      	adds	r3, #4
 801efbe:	3401      	adds	r4, #1
 801efc0:	3e03      	subs	r6, #3
 801efc2:	42b4      	cmp	r4, r6
 801efc4:	bf88      	it	hi
 801efc6:	2304      	movhi	r3, #4
 801efc8:	4443      	add	r3, r8
 801efca:	2200      	movs	r2, #0
 801efcc:	f843 2b04 	str.w	r2, [r3], #4
 801efd0:	429f      	cmp	r7, r3
 801efd2:	d2fb      	bcs.n	801efcc <__hexnan+0xcc>
 801efd4:	683b      	ldr	r3, [r7, #0]
 801efd6:	b91b      	cbnz	r3, 801efe0 <__hexnan+0xe0>
 801efd8:	4547      	cmp	r7, r8
 801efda:	d128      	bne.n	801f02e <__hexnan+0x12e>
 801efdc:	2301      	movs	r3, #1
 801efde:	603b      	str	r3, [r7, #0]
 801efe0:	2005      	movs	r0, #5
 801efe2:	b007      	add	sp, #28
 801efe4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801efe8:	3501      	adds	r5, #1
 801efea:	2d08      	cmp	r5, #8
 801efec:	f10b 0b01 	add.w	fp, fp, #1
 801eff0:	dd06      	ble.n	801f000 <__hexnan+0x100>
 801eff2:	4544      	cmp	r4, r8
 801eff4:	d9c1      	bls.n	801ef7a <__hexnan+0x7a>
 801eff6:	2300      	movs	r3, #0
 801eff8:	f844 3c04 	str.w	r3, [r4, #-4]
 801effc:	2501      	movs	r5, #1
 801effe:	3c04      	subs	r4, #4
 801f000:	6822      	ldr	r2, [r4, #0]
 801f002:	f000 000f 	and.w	r0, r0, #15
 801f006:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801f00a:	6020      	str	r0, [r4, #0]
 801f00c:	e7b5      	b.n	801ef7a <__hexnan+0x7a>
 801f00e:	2508      	movs	r5, #8
 801f010:	e7b3      	b.n	801ef7a <__hexnan+0x7a>
 801f012:	9b01      	ldr	r3, [sp, #4]
 801f014:	2b00      	cmp	r3, #0
 801f016:	d0dd      	beq.n	801efd4 <__hexnan+0xd4>
 801f018:	f1c3 0320 	rsb	r3, r3, #32
 801f01c:	f04f 32ff 	mov.w	r2, #4294967295
 801f020:	40da      	lsrs	r2, r3
 801f022:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801f026:	4013      	ands	r3, r2
 801f028:	f846 3c04 	str.w	r3, [r6, #-4]
 801f02c:	e7d2      	b.n	801efd4 <__hexnan+0xd4>
 801f02e:	3f04      	subs	r7, #4
 801f030:	e7d0      	b.n	801efd4 <__hexnan+0xd4>
 801f032:	2004      	movs	r0, #4
 801f034:	e7d5      	b.n	801efe2 <__hexnan+0xe2>

0801f036 <__ascii_mbtowc>:
 801f036:	b082      	sub	sp, #8
 801f038:	b901      	cbnz	r1, 801f03c <__ascii_mbtowc+0x6>
 801f03a:	a901      	add	r1, sp, #4
 801f03c:	b142      	cbz	r2, 801f050 <__ascii_mbtowc+0x1a>
 801f03e:	b14b      	cbz	r3, 801f054 <__ascii_mbtowc+0x1e>
 801f040:	7813      	ldrb	r3, [r2, #0]
 801f042:	600b      	str	r3, [r1, #0]
 801f044:	7812      	ldrb	r2, [r2, #0]
 801f046:	1e10      	subs	r0, r2, #0
 801f048:	bf18      	it	ne
 801f04a:	2001      	movne	r0, #1
 801f04c:	b002      	add	sp, #8
 801f04e:	4770      	bx	lr
 801f050:	4610      	mov	r0, r2
 801f052:	e7fb      	b.n	801f04c <__ascii_mbtowc+0x16>
 801f054:	f06f 0001 	mvn.w	r0, #1
 801f058:	e7f8      	b.n	801f04c <__ascii_mbtowc+0x16>

0801f05a <_malloc_usable_size_r>:
 801f05a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f05e:	1f18      	subs	r0, r3, #4
 801f060:	2b00      	cmp	r3, #0
 801f062:	bfbc      	itt	lt
 801f064:	580b      	ldrlt	r3, [r1, r0]
 801f066:	18c0      	addlt	r0, r0, r3
 801f068:	4770      	bx	lr
	...

0801f06c <_strtoul_l.isra.0>:
 801f06c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f070:	4e34      	ldr	r6, [pc, #208]	@ (801f144 <_strtoul_l.isra.0+0xd8>)
 801f072:	4686      	mov	lr, r0
 801f074:	460d      	mov	r5, r1
 801f076:	4628      	mov	r0, r5
 801f078:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f07c:	5d37      	ldrb	r7, [r6, r4]
 801f07e:	f017 0708 	ands.w	r7, r7, #8
 801f082:	d1f8      	bne.n	801f076 <_strtoul_l.isra.0+0xa>
 801f084:	2c2d      	cmp	r4, #45	@ 0x2d
 801f086:	d110      	bne.n	801f0aa <_strtoul_l.isra.0+0x3e>
 801f088:	782c      	ldrb	r4, [r5, #0]
 801f08a:	2701      	movs	r7, #1
 801f08c:	1c85      	adds	r5, r0, #2
 801f08e:	f033 0010 	bics.w	r0, r3, #16
 801f092:	d115      	bne.n	801f0c0 <_strtoul_l.isra.0+0x54>
 801f094:	2c30      	cmp	r4, #48	@ 0x30
 801f096:	d10d      	bne.n	801f0b4 <_strtoul_l.isra.0+0x48>
 801f098:	7828      	ldrb	r0, [r5, #0]
 801f09a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801f09e:	2858      	cmp	r0, #88	@ 0x58
 801f0a0:	d108      	bne.n	801f0b4 <_strtoul_l.isra.0+0x48>
 801f0a2:	786c      	ldrb	r4, [r5, #1]
 801f0a4:	3502      	adds	r5, #2
 801f0a6:	2310      	movs	r3, #16
 801f0a8:	e00a      	b.n	801f0c0 <_strtoul_l.isra.0+0x54>
 801f0aa:	2c2b      	cmp	r4, #43	@ 0x2b
 801f0ac:	bf04      	itt	eq
 801f0ae:	782c      	ldrbeq	r4, [r5, #0]
 801f0b0:	1c85      	addeq	r5, r0, #2
 801f0b2:	e7ec      	b.n	801f08e <_strtoul_l.isra.0+0x22>
 801f0b4:	2b00      	cmp	r3, #0
 801f0b6:	d1f6      	bne.n	801f0a6 <_strtoul_l.isra.0+0x3a>
 801f0b8:	2c30      	cmp	r4, #48	@ 0x30
 801f0ba:	bf14      	ite	ne
 801f0bc:	230a      	movne	r3, #10
 801f0be:	2308      	moveq	r3, #8
 801f0c0:	f04f 38ff 	mov.w	r8, #4294967295
 801f0c4:	2600      	movs	r6, #0
 801f0c6:	fbb8 f8f3 	udiv	r8, r8, r3
 801f0ca:	fb03 f908 	mul.w	r9, r3, r8
 801f0ce:	ea6f 0909 	mvn.w	r9, r9
 801f0d2:	4630      	mov	r0, r6
 801f0d4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801f0d8:	f1bc 0f09 	cmp.w	ip, #9
 801f0dc:	d810      	bhi.n	801f100 <_strtoul_l.isra.0+0x94>
 801f0de:	4664      	mov	r4, ip
 801f0e0:	42a3      	cmp	r3, r4
 801f0e2:	dd1e      	ble.n	801f122 <_strtoul_l.isra.0+0xb6>
 801f0e4:	f1b6 3fff 	cmp.w	r6, #4294967295
 801f0e8:	d007      	beq.n	801f0fa <_strtoul_l.isra.0+0x8e>
 801f0ea:	4580      	cmp	r8, r0
 801f0ec:	d316      	bcc.n	801f11c <_strtoul_l.isra.0+0xb0>
 801f0ee:	d101      	bne.n	801f0f4 <_strtoul_l.isra.0+0x88>
 801f0f0:	45a1      	cmp	r9, r4
 801f0f2:	db13      	blt.n	801f11c <_strtoul_l.isra.0+0xb0>
 801f0f4:	fb00 4003 	mla	r0, r0, r3, r4
 801f0f8:	2601      	movs	r6, #1
 801f0fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 801f0fe:	e7e9      	b.n	801f0d4 <_strtoul_l.isra.0+0x68>
 801f100:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801f104:	f1bc 0f19 	cmp.w	ip, #25
 801f108:	d801      	bhi.n	801f10e <_strtoul_l.isra.0+0xa2>
 801f10a:	3c37      	subs	r4, #55	@ 0x37
 801f10c:	e7e8      	b.n	801f0e0 <_strtoul_l.isra.0+0x74>
 801f10e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801f112:	f1bc 0f19 	cmp.w	ip, #25
 801f116:	d804      	bhi.n	801f122 <_strtoul_l.isra.0+0xb6>
 801f118:	3c57      	subs	r4, #87	@ 0x57
 801f11a:	e7e1      	b.n	801f0e0 <_strtoul_l.isra.0+0x74>
 801f11c:	f04f 36ff 	mov.w	r6, #4294967295
 801f120:	e7eb      	b.n	801f0fa <_strtoul_l.isra.0+0x8e>
 801f122:	1c73      	adds	r3, r6, #1
 801f124:	d106      	bne.n	801f134 <_strtoul_l.isra.0+0xc8>
 801f126:	2322      	movs	r3, #34	@ 0x22
 801f128:	f8ce 3000 	str.w	r3, [lr]
 801f12c:	4630      	mov	r0, r6
 801f12e:	b932      	cbnz	r2, 801f13e <_strtoul_l.isra.0+0xd2>
 801f130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f134:	b107      	cbz	r7, 801f138 <_strtoul_l.isra.0+0xcc>
 801f136:	4240      	negs	r0, r0
 801f138:	2a00      	cmp	r2, #0
 801f13a:	d0f9      	beq.n	801f130 <_strtoul_l.isra.0+0xc4>
 801f13c:	b106      	cbz	r6, 801f140 <_strtoul_l.isra.0+0xd4>
 801f13e:	1e69      	subs	r1, r5, #1
 801f140:	6011      	str	r1, [r2, #0]
 801f142:	e7f5      	b.n	801f130 <_strtoul_l.isra.0+0xc4>
 801f144:	08021c11 	.word	0x08021c11

0801f148 <_strtoul_r>:
 801f148:	f7ff bf90 	b.w	801f06c <_strtoul_l.isra.0>

0801f14c <__ascii_wctomb>:
 801f14c:	4603      	mov	r3, r0
 801f14e:	4608      	mov	r0, r1
 801f150:	b141      	cbz	r1, 801f164 <__ascii_wctomb+0x18>
 801f152:	2aff      	cmp	r2, #255	@ 0xff
 801f154:	d904      	bls.n	801f160 <__ascii_wctomb+0x14>
 801f156:	228a      	movs	r2, #138	@ 0x8a
 801f158:	601a      	str	r2, [r3, #0]
 801f15a:	f04f 30ff 	mov.w	r0, #4294967295
 801f15e:	4770      	bx	lr
 801f160:	700a      	strb	r2, [r1, #0]
 801f162:	2001      	movs	r0, #1
 801f164:	4770      	bx	lr

0801f166 <_raise_r>:
 801f166:	291f      	cmp	r1, #31
 801f168:	b538      	push	{r3, r4, r5, lr}
 801f16a:	4605      	mov	r5, r0
 801f16c:	460c      	mov	r4, r1
 801f16e:	d904      	bls.n	801f17a <_raise_r+0x14>
 801f170:	2316      	movs	r3, #22
 801f172:	6003      	str	r3, [r0, #0]
 801f174:	f04f 30ff 	mov.w	r0, #4294967295
 801f178:	bd38      	pop	{r3, r4, r5, pc}
 801f17a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801f17c:	b112      	cbz	r2, 801f184 <_raise_r+0x1e>
 801f17e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801f182:	b94b      	cbnz	r3, 801f198 <_raise_r+0x32>
 801f184:	4628      	mov	r0, r5
 801f186:	f000 f831 	bl	801f1ec <_getpid_r>
 801f18a:	4622      	mov	r2, r4
 801f18c:	4601      	mov	r1, r0
 801f18e:	4628      	mov	r0, r5
 801f190:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f194:	f000 b818 	b.w	801f1c8 <_kill_r>
 801f198:	2b01      	cmp	r3, #1
 801f19a:	d00a      	beq.n	801f1b2 <_raise_r+0x4c>
 801f19c:	1c59      	adds	r1, r3, #1
 801f19e:	d103      	bne.n	801f1a8 <_raise_r+0x42>
 801f1a0:	2316      	movs	r3, #22
 801f1a2:	6003      	str	r3, [r0, #0]
 801f1a4:	2001      	movs	r0, #1
 801f1a6:	e7e7      	b.n	801f178 <_raise_r+0x12>
 801f1a8:	2100      	movs	r1, #0
 801f1aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801f1ae:	4620      	mov	r0, r4
 801f1b0:	4798      	blx	r3
 801f1b2:	2000      	movs	r0, #0
 801f1b4:	e7e0      	b.n	801f178 <_raise_r+0x12>
	...

0801f1b8 <raise>:
 801f1b8:	4b02      	ldr	r3, [pc, #8]	@ (801f1c4 <raise+0xc>)
 801f1ba:	4601      	mov	r1, r0
 801f1bc:	6818      	ldr	r0, [r3, #0]
 801f1be:	f7ff bfd2 	b.w	801f166 <_raise_r>
 801f1c2:	bf00      	nop
 801f1c4:	20000160 	.word	0x20000160

0801f1c8 <_kill_r>:
 801f1c8:	b538      	push	{r3, r4, r5, lr}
 801f1ca:	4d07      	ldr	r5, [pc, #28]	@ (801f1e8 <_kill_r+0x20>)
 801f1cc:	2300      	movs	r3, #0
 801f1ce:	4604      	mov	r4, r0
 801f1d0:	4608      	mov	r0, r1
 801f1d2:	4611      	mov	r1, r2
 801f1d4:	602b      	str	r3, [r5, #0]
 801f1d6:	f7eb f81f 	bl	800a218 <_kill>
 801f1da:	1c43      	adds	r3, r0, #1
 801f1dc:	d102      	bne.n	801f1e4 <_kill_r+0x1c>
 801f1de:	682b      	ldr	r3, [r5, #0]
 801f1e0:	b103      	cbz	r3, 801f1e4 <_kill_r+0x1c>
 801f1e2:	6023      	str	r3, [r4, #0]
 801f1e4:	bd38      	pop	{r3, r4, r5, pc}
 801f1e6:	bf00      	nop
 801f1e8:	2000c354 	.word	0x2000c354

0801f1ec <_getpid_r>:
 801f1ec:	f7eb b80c 	b.w	800a208 <_getpid>

0801f1f0 <_init>:
 801f1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1f2:	bf00      	nop
 801f1f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f1f6:	bc08      	pop	{r3}
 801f1f8:	469e      	mov	lr, r3
 801f1fa:	4770      	bx	lr

0801f1fc <_fini>:
 801f1fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f1fe:	bf00      	nop
 801f200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f202:	bc08      	pop	{r3}
 801f204:	469e      	mov	lr, r3
 801f206:	4770      	bx	lr
