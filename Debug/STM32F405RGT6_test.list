
STM32F405RGT6_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e498  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000292c  0801e628  0801e628  0001f628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08020f54  08020f54  0002231c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08020f54  08020f54  00021f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08020f5c  08020f5c  0002231c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08020f5c  08020f5c  00021f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08020f60  08020f60  00021f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  08020f64  00022000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002231c  2**0
                  CONTENTS
 10 .bss          0000b9b8  2000031c  2000031c  0002231c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000bcd4  2000bcd4  0002231c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002231c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00037cdb  00000000  00000000  0002234c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008338  00000000  00000000  0005a027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d60  00000000  00000000  00062360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000022e6  00000000  00000000  000650c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029d40  00000000  00000000  000673a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00038658  00000000  00000000  000910e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbf49  00000000  00000000  000c973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001a5687  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000da3c  00000000  00000000  001a56cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000050  00000000  00000000  001b3108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000031c 	.word	0x2000031c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e610 	.word	0x0801e610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000320 	.word	0x20000320
 80001cc:	0801e610 	.word	0x0801e610

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9be 	b.w	800101c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	468e      	mov	lr, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	4688      	mov	r8, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d962      	bls.n	8000e00 <__udivmoddi4+0xdc>
 8000d3a:	fab2 f682 	clz	r6, r2
 8000d3e:	b14e      	cbz	r6, 8000d54 <__udivmoddi4+0x30>
 8000d40:	f1c6 0320 	rsb	r3, r6, #32
 8000d44:	fa01 f806 	lsl.w	r8, r1, r6
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	40b7      	lsls	r7, r6
 8000d4e:	ea43 0808 	orr.w	r8, r3, r8
 8000d52:	40b4      	lsls	r4, r6
 8000d54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d58:	fa1f fc87 	uxth.w	ip, r7
 8000d5c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d60:	0c23      	lsrs	r3, r4, #16
 8000d62:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d6e:	429a      	cmp	r2, r3
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d78:	f080 80ea 	bcs.w	8000f50 <__udivmoddi4+0x22c>
 8000d7c:	429a      	cmp	r2, r3
 8000d7e:	f240 80e7 	bls.w	8000f50 <__udivmoddi4+0x22c>
 8000d82:	3902      	subs	r1, #2
 8000d84:	443b      	add	r3, r7
 8000d86:	1a9a      	subs	r2, r3, r2
 8000d88:	b2a3      	uxth	r3, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d96:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9a:	459c      	cmp	ip, r3
 8000d9c:	d909      	bls.n	8000db2 <__udivmoddi4+0x8e>
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da4:	f080 80d6 	bcs.w	8000f54 <__udivmoddi4+0x230>
 8000da8:	459c      	cmp	ip, r3
 8000daa:	f240 80d3 	bls.w	8000f54 <__udivmoddi4+0x230>
 8000dae:	443b      	add	r3, r7
 8000db0:	3802      	subs	r0, #2
 8000db2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db6:	eba3 030c 	sub.w	r3, r3, ip
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11d      	cbz	r5, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40f3      	lsrs	r3, r6
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d905      	bls.n	8000dda <__udivmoddi4+0xb6>
 8000dce:	b10d      	cbz	r5, 8000dd4 <__udivmoddi4+0xb0>
 8000dd0:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	4608      	mov	r0, r1
 8000dd8:	e7f5      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000dda:	fab3 f183 	clz	r1, r3
 8000dde:	2900      	cmp	r1, #0
 8000de0:	d146      	bne.n	8000e70 <__udivmoddi4+0x14c>
 8000de2:	4573      	cmp	r3, lr
 8000de4:	d302      	bcc.n	8000dec <__udivmoddi4+0xc8>
 8000de6:	4282      	cmp	r2, r0
 8000de8:	f200 8105 	bhi.w	8000ff6 <__udivmoddi4+0x2d2>
 8000dec:	1a84      	subs	r4, r0, r2
 8000dee:	eb6e 0203 	sbc.w	r2, lr, r3
 8000df2:	2001      	movs	r0, #1
 8000df4:	4690      	mov	r8, r2
 8000df6:	2d00      	cmp	r5, #0
 8000df8:	d0e5      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000dfa:	e9c5 4800 	strd	r4, r8, [r5]
 8000dfe:	e7e2      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	2a00      	cmp	r2, #0
 8000e02:	f000 8090 	beq.w	8000f26 <__udivmoddi4+0x202>
 8000e06:	fab2 f682 	clz	r6, r2
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	f040 80a4 	bne.w	8000f58 <__udivmoddi4+0x234>
 8000e10:	1a8a      	subs	r2, r1, r2
 8000e12:	0c03      	lsrs	r3, r0, #16
 8000e14:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e18:	b280      	uxth	r0, r0
 8000e1a:	b2bc      	uxth	r4, r7
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e22:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e2a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e2e:	429a      	cmp	r2, r3
 8000e30:	d907      	bls.n	8000e42 <__udivmoddi4+0x11e>
 8000e32:	18fb      	adds	r3, r7, r3
 8000e34:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e38:	d202      	bcs.n	8000e40 <__udivmoddi4+0x11c>
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	f200 80e0 	bhi.w	8001000 <__udivmoddi4+0x2dc>
 8000e40:	46c4      	mov	ip, r8
 8000e42:	1a9b      	subs	r3, r3, r2
 8000e44:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e48:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e4c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e50:	fb02 f404 	mul.w	r4, r2, r4
 8000e54:	429c      	cmp	r4, r3
 8000e56:	d907      	bls.n	8000e68 <__udivmoddi4+0x144>
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e5e:	d202      	bcs.n	8000e66 <__udivmoddi4+0x142>
 8000e60:	429c      	cmp	r4, r3
 8000e62:	f200 80ca 	bhi.w	8000ffa <__udivmoddi4+0x2d6>
 8000e66:	4602      	mov	r2, r0
 8000e68:	1b1b      	subs	r3, r3, r4
 8000e6a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e6e:	e7a5      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e70:	f1c1 0620 	rsb	r6, r1, #32
 8000e74:	408b      	lsls	r3, r1
 8000e76:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7a:	431f      	orrs	r7, r3
 8000e7c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e80:	fa20 f306 	lsr.w	r3, r0, r6
 8000e84:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e88:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e8c:	4323      	orrs	r3, r4
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	fa1f fc87 	uxth.w	ip, r7
 8000e96:	fbbe f0f9 	udiv	r0, lr, r9
 8000e9a:	0c1c      	lsrs	r4, r3, #16
 8000e9c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000ea0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000ea4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000ea8:	45a6      	cmp	lr, r4
 8000eaa:	fa02 f201 	lsl.w	r2, r2, r1
 8000eae:	d909      	bls.n	8000ec4 <__udivmoddi4+0x1a0>
 8000eb0:	193c      	adds	r4, r7, r4
 8000eb2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000eb6:	f080 809c 	bcs.w	8000ff2 <__udivmoddi4+0x2ce>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f240 8099 	bls.w	8000ff2 <__udivmoddi4+0x2ce>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	443c      	add	r4, r7
 8000ec4:	eba4 040e 	sub.w	r4, r4, lr
 8000ec8:	fa1f fe83 	uxth.w	lr, r3
 8000ecc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ed0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ed4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ed8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000edc:	45a4      	cmp	ip, r4
 8000ede:	d908      	bls.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ee0:	193c      	adds	r4, r7, r4
 8000ee2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ee6:	f080 8082 	bcs.w	8000fee <__udivmoddi4+0x2ca>
 8000eea:	45a4      	cmp	ip, r4
 8000eec:	d97f      	bls.n	8000fee <__udivmoddi4+0x2ca>
 8000eee:	3b02      	subs	r3, #2
 8000ef0:	443c      	add	r4, r7
 8000ef2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000ef6:	eba4 040c 	sub.w	r4, r4, ip
 8000efa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000efe:	4564      	cmp	r4, ip
 8000f00:	4673      	mov	r3, lr
 8000f02:	46e1      	mov	r9, ip
 8000f04:	d362      	bcc.n	8000fcc <__udivmoddi4+0x2a8>
 8000f06:	d05f      	beq.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f08:	b15d      	cbz	r5, 8000f22 <__udivmoddi4+0x1fe>
 8000f0a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f0e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f12:	fa04 f606 	lsl.w	r6, r4, r6
 8000f16:	fa22 f301 	lsr.w	r3, r2, r1
 8000f1a:	431e      	orrs	r6, r3
 8000f1c:	40cc      	lsrs	r4, r1
 8000f1e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f22:	2100      	movs	r1, #0
 8000f24:	e74f      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000f26:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f2a:	0c01      	lsrs	r1, r0, #16
 8000f2c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f30:	b280      	uxth	r0, r0
 8000f32:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f36:	463b      	mov	r3, r7
 8000f38:	4638      	mov	r0, r7
 8000f3a:	463c      	mov	r4, r7
 8000f3c:	46b8      	mov	r8, r7
 8000f3e:	46be      	mov	lr, r7
 8000f40:	2620      	movs	r6, #32
 8000f42:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f46:	eba2 0208 	sub.w	r2, r2, r8
 8000f4a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f4e:	e766      	b.n	8000e1e <__udivmoddi4+0xfa>
 8000f50:	4601      	mov	r1, r0
 8000f52:	e718      	b.n	8000d86 <__udivmoddi4+0x62>
 8000f54:	4610      	mov	r0, r2
 8000f56:	e72c      	b.n	8000db2 <__udivmoddi4+0x8e>
 8000f58:	f1c6 0220 	rsb	r2, r6, #32
 8000f5c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f60:	40b7      	lsls	r7, r6
 8000f62:	40b1      	lsls	r1, r6
 8000f64:	fa20 f202 	lsr.w	r2, r0, r2
 8000f68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f6c:	430a      	orrs	r2, r1
 8000f6e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f72:	b2bc      	uxth	r4, r7
 8000f74:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f78:	0c11      	lsrs	r1, r2, #16
 8000f7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f7e:	fb08 f904 	mul.w	r9, r8, r4
 8000f82:	40b0      	lsls	r0, r6
 8000f84:	4589      	cmp	r9, r1
 8000f86:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f8a:	b280      	uxth	r0, r0
 8000f8c:	d93e      	bls.n	800100c <__udivmoddi4+0x2e8>
 8000f8e:	1879      	adds	r1, r7, r1
 8000f90:	f108 3cff 	add.w	ip, r8, #4294967295
 8000f94:	d201      	bcs.n	8000f9a <__udivmoddi4+0x276>
 8000f96:	4589      	cmp	r9, r1
 8000f98:	d81f      	bhi.n	8000fda <__udivmoddi4+0x2b6>
 8000f9a:	eba1 0109 	sub.w	r1, r1, r9
 8000f9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fa2:	fb09 f804 	mul.w	r8, r9, r4
 8000fa6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000faa:	b292      	uxth	r2, r2
 8000fac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fb0:	4542      	cmp	r2, r8
 8000fb2:	d229      	bcs.n	8001008 <__udivmoddi4+0x2e4>
 8000fb4:	18ba      	adds	r2, r7, r2
 8000fb6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fba:	d2c4      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fbc:	4542      	cmp	r2, r8
 8000fbe:	d2c2      	bcs.n	8000f46 <__udivmoddi4+0x222>
 8000fc0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fc4:	443a      	add	r2, r7
 8000fc6:	e7be      	b.n	8000f46 <__udivmoddi4+0x222>
 8000fc8:	45f0      	cmp	r8, lr
 8000fca:	d29d      	bcs.n	8000f08 <__udivmoddi4+0x1e4>
 8000fcc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fd0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fd4:	3801      	subs	r0, #1
 8000fd6:	46e1      	mov	r9, ip
 8000fd8:	e796      	b.n	8000f08 <__udivmoddi4+0x1e4>
 8000fda:	eba7 0909 	sub.w	r9, r7, r9
 8000fde:	4449      	add	r1, r9
 8000fe0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000fe4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fe8:	fb09 f804 	mul.w	r8, r9, r4
 8000fec:	e7db      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fee:	4673      	mov	r3, lr
 8000ff0:	e77f      	b.n	8000ef2 <__udivmoddi4+0x1ce>
 8000ff2:	4650      	mov	r0, sl
 8000ff4:	e766      	b.n	8000ec4 <__udivmoddi4+0x1a0>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e6fd      	b.n	8000df6 <__udivmoddi4+0xd2>
 8000ffa:	443b      	add	r3, r7
 8000ffc:	3a02      	subs	r2, #2
 8000ffe:	e733      	b.n	8000e68 <__udivmoddi4+0x144>
 8001000:	f1ac 0c02 	sub.w	ip, ip, #2
 8001004:	443b      	add	r3, r7
 8001006:	e71c      	b.n	8000e42 <__udivmoddi4+0x11e>
 8001008:	4649      	mov	r1, r9
 800100a:	e79c      	b.n	8000f46 <__udivmoddi4+0x222>
 800100c:	eba1 0109 	sub.w	r1, r1, r9
 8001010:	46c4      	mov	ip, r8
 8001012:	fbb1 f9fe 	udiv	r9, r1, lr
 8001016:	fb09 f804 	mul.w	r8, r9, r4
 800101a:	e7c4      	b.n	8000fa6 <__udivmoddi4+0x282>

0800101c <__aeabi_idiv0>:
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop

08001020 <attitude_controller_init>:
void attitude_controller_init(
    attitude_controller_t* fc,
    float rate_gain,
    float max_angle,
    float max_rate
) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	60f8      	str	r0, [r7, #12]
 8001028:	ed87 0a02 	vstr	s0, [r7, #8]
 800102c:	edc7 0a01 	vstr	s1, [r7, #4]
 8001030:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d00e      	beq.n	8001058 <attitude_controller_init+0x38>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(attitude_controller_t));
 800103a:	2234      	movs	r2, #52	@ 0x34
 800103c:	2100      	movs	r1, #0
 800103e:	68f8      	ldr	r0, [r7, #12]
 8001040:	f019 fc68 	bl	801a914 <memset>

	fc->rate_gain = rate_gain;
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	611a      	str	r2, [r3, #16]
	fc->max_angle = max_angle;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	687a      	ldr	r2, [r7, #4]
 800104e:	615a      	str	r2, [r3, #20]
	fc->max_rate = max_rate;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	683a      	ldr	r2, [r7, #0]
 8001054:	619a      	str	r2, [r3, #24]
 8001056:	e000      	b.n	800105a <attitude_controller_init+0x3a>
        return;
 8001058:	bf00      	nop

}
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <quat_remove_yaw>:


/* Remove yaw (rotation about world Z) from q */
static quaternion quat_remove_yaw(quaternion q)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09c      	sub	sp, #112	@ 0x70
 8001064:	af00      	add	r7, sp, #0
 8001066:	eeb0 6a40 	vmov.f32	s12, s0
 800106a:	eef0 6a60 	vmov.f32	s13, s1
 800106e:	eeb0 7a41 	vmov.f32	s14, s2
 8001072:	eef0 7a61 	vmov.f32	s15, s3
 8001076:	ed87 6a04 	vstr	s12, [r7, #16]
 800107a:	edc7 6a05 	vstr	s13, [r7, #20]
 800107e:	ed87 7a06 	vstr	s14, [r7, #24]
 8001082:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure q is unit (good practice)
    q = quatnormalize(&q);
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	4618      	mov	r0, r3
 800108c:	f001 f8f0 	bl	8002270 <quatnormalize>
 8001090:	eeb0 6a40 	vmov.f32	s12, s0
 8001094:	eef0 6a60 	vmov.f32	s13, s1
 8001098:	eeb0 7a41 	vmov.f32	s14, s2
 800109c:	eef0 7a61 	vmov.f32	s15, s3
 80010a0:	ed87 6a04 	vstr	s12, [r7, #16]
 80010a4:	edc7 6a05 	vstr	s13, [r7, #20]
 80010a8:	ed87 7a06 	vstr	s14, [r7, #24]
 80010ac:	edc7 7a07 	vstr	s15, [r7, #28]

    // Twist around world Z: keep only w and z, renormalize
    quaternion q_twist = { q.w, 0.0f, 0.0f, q.z };
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	653b      	str	r3, [r7, #80]	@ 0x50
 80010b4:	f04f 0300 	mov.w	r3, #0
 80010b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80010ba:	f04f 0300 	mov.w	r3, #0
 80010be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	65fb      	str	r3, [r7, #92]	@ 0x5c

    quaternion q_twist_normalized = quatnormalize(&q_twist);
 80010c4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 f8d1 	bl	8002270 <quatnormalize>
 80010ce:	eeb0 6a40 	vmov.f32	s12, s0
 80010d2:	eef0 6a60 	vmov.f32	s13, s1
 80010d6:	eeb0 7a41 	vmov.f32	s14, s2
 80010da:	eef0 7a61 	vmov.f32	s15, s3
 80010de:	ed87 6a10 	vstr	s12, [r7, #64]	@ 0x40
 80010e2:	edc7 6a11 	vstr	s13, [r7, #68]	@ 0x44
 80010e6:	ed87 7a12 	vstr	s14, [r7, #72]	@ 0x48
 80010ea:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c

    quaternion twist_conj = quatconj(&q_twist_normalized);
 80010ee:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80010f2:	4618      	mov	r0, r3
 80010f4:	f001 f880 	bl	80021f8 <quatconj>
 80010f8:	eeb0 6a40 	vmov.f32	s12, s0
 80010fc:	eef0 6a60 	vmov.f32	s13, s1
 8001100:	eeb0 7a41 	vmov.f32	s14, s2
 8001104:	eef0 7a61 	vmov.f32	s15, s3
 8001108:	ed87 6a0c 	vstr	s12, [r7, #48]	@ 0x30
 800110c:	edc7 6a0d 	vstr	s13, [r7, #52]	@ 0x34
 8001110:	ed87 7a0e 	vstr	s14, [r7, #56]	@ 0x38
 8001114:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // swing = q * conj(twist)  -> orientation with yaw removed
    quaternion q_no_yaw = quatmultiply(&q, &twist_conj);
 8001118:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	4611      	mov	r1, r2
 8001122:	4618      	mov	r0, r3
 8001124:	f001 f95f 	bl	80023e6 <quatmultiply>
 8001128:	eeb0 6a40 	vmov.f32	s12, s0
 800112c:	eef0 6a60 	vmov.f32	s13, s1
 8001130:	eeb0 7a41 	vmov.f32	s14, s2
 8001134:	eef0 7a61 	vmov.f32	s15, s3
 8001138:	ed87 6a08 	vstr	s12, [r7, #32]
 800113c:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8001140:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8001144:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

    // Optional: normalize to clean tiny numeric errors
    return quatnormalize(&q_no_yaw);
 8001148:	f107 0320 	add.w	r3, r7, #32
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f88f 	bl	8002270 <quatnormalize>
 8001152:	eeb0 6a40 	vmov.f32	s12, s0
 8001156:	eef0 6a60 	vmov.f32	s13, s1
 800115a:	eeb0 7a41 	vmov.f32	s14, s2
 800115e:	eef0 7a61 	vmov.f32	s15, s3
 8001162:	ed87 6a18 	vstr	s12, [r7, #96]	@ 0x60
 8001166:	edc7 6a19 	vstr	s13, [r7, #100]	@ 0x64
 800116a:	ed87 7a1a 	vstr	s14, [r7, #104]	@ 0x68
 800116e:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 8001172:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001174:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8001176:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8001178:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800117a:	ee06 0a10 	vmov	s12, r0
 800117e:	ee06 1a90 	vmov	s13, r1
 8001182:	ee07 2a10 	vmov	s14, r2
 8001186:	ee07 3a90 	vmov	s15, r3
}
 800118a:	eeb0 0a46 	vmov.f32	s0, s12
 800118e:	eef0 0a66 	vmov.f32	s1, s13
 8001192:	eeb0 1a47 	vmov.f32	s2, s14
 8001196:	eef0 1a67 	vmov.f32	s3, s15
 800119a:	3770      	adds	r7, #112	@ 0x70
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <attitude_controller_angle_mode_update>:
    attitude_controller_t* fc,
    quaternion estimated_q,
    float target_roll,
    float target_pitch,
    float target_yaw_rate
) {
 80011a0:	b590      	push	{r4, r7, lr}
 80011a2:	b0a7      	sub	sp, #156	@ 0x9c
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	61f8      	str	r0, [r7, #28]
 80011a8:	eeb0 6a40 	vmov.f32	s12, s0
 80011ac:	eef0 6a60 	vmov.f32	s13, s1
 80011b0:	eeb0 7a41 	vmov.f32	s14, s2
 80011b4:	eef0 7a61 	vmov.f32	s15, s3
 80011b8:	ed87 2a02 	vstr	s4, [r7, #8]
 80011bc:	edc7 2a01 	vstr	s5, [r7, #4]
 80011c0:	ed87 3a00 	vstr	s6, [r7]
 80011c4:	ed87 6a03 	vstr	s12, [r7, #12]
 80011c8:	edc7 6a04 	vstr	s13, [r7, #16]
 80011cc:	ed87 7a05 	vstr	s14, [r7, #20]
 80011d0:	edc7 7a06 	vstr	s15, [r7, #24]
    if (!fc) {
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	f000 81b0 	beq.w	800153c <attitude_controller_angle_mode_update+0x39c>
        return;
    }

    target_roll = CLAMP(target_roll, -fc->max_angle, fc->max_angle);
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	edd3 7a05 	vldr	s15, [r3, #20]
 80011e2:	eef1 7a67 	vneg.f32	s15, s15
 80011e6:	ed97 7a02 	vldr	s14, [r7, #8]
 80011ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	d505      	bpl.n	8001200 <attitude_controller_angle_mode_update+0x60>
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80011fa:	eef1 7a67 	vneg.f32	s15, s15
 80011fe:	e00f      	b.n	8001220 <attitude_controller_angle_mode_update+0x80>
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	edd3 7a05 	vldr	s15, [r3, #20]
 8001206:	ed97 7a02 	vldr	s14, [r7, #8]
 800120a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001212:	dd03      	ble.n	800121c <attitude_controller_angle_mode_update+0x7c>
 8001214:	69fb      	ldr	r3, [r7, #28]
 8001216:	edd3 7a05 	vldr	s15, [r3, #20]
 800121a:	e001      	b.n	8001220 <attitude_controller_angle_mode_update+0x80>
 800121c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001220:	edc7 7a02 	vstr	s15, [r7, #8]
    target_pitch = CLAMP(target_pitch, -fc->max_angle, fc->max_angle);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	edd3 7a05 	vldr	s15, [r3, #20]
 800122a:	eef1 7a67 	vneg.f32	s15, s15
 800122e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001232:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	d505      	bpl.n	8001248 <attitude_controller_angle_mode_update+0xa8>
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001242:	eef1 7a67 	vneg.f32	s15, s15
 8001246:	e00f      	b.n	8001268 <attitude_controller_angle_mode_update+0xc8>
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	edd3 7a05 	vldr	s15, [r3, #20]
 800124e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	dd03      	ble.n	8001264 <attitude_controller_angle_mode_update+0xc4>
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001262:	e001      	b.n	8001268 <attitude_controller_angle_mode_update+0xc8>
 8001264:	edd7 7a01 	vldr	s15, [r7, #4]
 8001268:	edc7 7a01 	vstr	s15, [r7, #4]
    target_yaw_rate = CLAMP(target_yaw_rate, -fc->max_rate, fc->max_rate);
 800126c:	69fb      	ldr	r3, [r7, #28]
 800126e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001272:	eef1 7a67 	vneg.f32	s15, s15
 8001276:	ed97 7a00 	vldr	s14, [r7]
 800127a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001282:	d505      	bpl.n	8001290 <attitude_controller_angle_mode_update+0xf0>
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	edd3 7a06 	vldr	s15, [r3, #24]
 800128a:	eef1 7a67 	vneg.f32	s15, s15
 800128e:	e00f      	b.n	80012b0 <attitude_controller_angle_mode_update+0x110>
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	edd3 7a06 	vldr	s15, [r3, #24]
 8001296:	ed97 7a00 	vldr	s14, [r7]
 800129a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800129e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a2:	dd03      	ble.n	80012ac <attitude_controller_angle_mode_update+0x10c>
 80012a4:	69fb      	ldr	r3, [r7, #28]
 80012a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80012aa:	e001      	b.n	80012b0 <attitude_controller_angle_mode_update+0x110>
 80012ac:	edd7 7a00 	vldr	s15, [r7]
 80012b0:	edc7 7a00 	vstr	s15, [r7]

    // --- Store current sensor inputs and setpoints ---
    fc->estimated_q = estimated_q;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	461c      	mov	r4, r3
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    fc->target_roll = target_roll;
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	68ba      	ldr	r2, [r7, #8]
 80012c6:	61da      	str	r2, [r3, #28]
    fc->target_pitch = target_pitch;
 80012c8:	69fb      	ldr	r3, [r7, #28]
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	621a      	str	r2, [r3, #32]
    fc->target_yaw = target_yaw_rate;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Step 1: Build target quaternion from commanded roll/pitch ---
    angles3D target_rp = { target_roll, target_pitch, 0.0f }; // yaw handled separately
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012e0:	f04f 0300 	mov.w	r3, #0
 80012e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    quaternion target_delta_q = angle2quat(&target_rp);
 80012e8:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 80012ec:	4618      	mov	r0, r3
 80012ee:	f001 faf3 	bl	80028d8 <angle2quat>
 80012f2:	eeb0 6a40 	vmov.f32	s12, s0
 80012f6:	eef0 6a60 	vmov.f32	s13, s1
 80012fa:	eeb0 7a41 	vmov.f32	s14, s2
 80012fe:	eef0 7a61 	vmov.f32	s15, s3
 8001302:	ed87 6a1f 	vstr	s12, [r7, #124]	@ 0x7c
 8001306:	edc7 6a20 	vstr	s13, [r7, #128]	@ 0x80
 800130a:	ed87 7a21 	vstr	s14, [r7, #132]	@ 0x84
 800130e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    // --- Step 2: Compose target quaternion relative to level reference ---
	quaternion temp_default_leveld_position_q = FC_DEFAULT_LEVELD_POSITION_Q;
 8001312:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001316:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	673b      	str	r3, [r7, #112]	@ 0x70
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	677b      	str	r3, [r7, #116]	@ 0x74
 8001324:	f04f 0300 	mov.w	r3, #0
 8001328:	67bb      	str	r3, [r7, #120]	@ 0x78
    quaternion target_q = quatmultiply(&temp_default_leveld_position_q, &target_delta_q);
 800132a:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 800132e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001332:	4611      	mov	r1, r2
 8001334:	4618      	mov	r0, r3
 8001336:	f001 f856 	bl	80023e6 <quatmultiply>
 800133a:	eeb0 6a40 	vmov.f32	s12, s0
 800133e:	eef0 6a60 	vmov.f32	s13, s1
 8001342:	eeb0 7a41 	vmov.f32	s14, s2
 8001346:	eef0 7a61 	vmov.f32	s15, s3
 800134a:	ed87 6a13 	vstr	s12, [r7, #76]	@ 0x4c
 800134e:	edc7 6a14 	vstr	s13, [r7, #80]	@ 0x50
 8001352:	ed87 7a15 	vstr	s14, [r7, #84]	@ 0x54
 8001356:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

    // --- Step 3: Orientation error quaternion ---
    quaternion error_q = quat_error(&fc->estimated_q, &target_q);
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8001360:	4611      	mov	r1, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f001 fc20 	bl	8002ba8 <quat_error>
 8001368:	eeb0 6a40 	vmov.f32	s12, s0
 800136c:	eef0 6a60 	vmov.f32	s13, s1
 8001370:	eeb0 7a41 	vmov.f32	s14, s2
 8001374:	eef0 7a61 	vmov.f32	s15, s3
 8001378:	ed87 6a0f 	vstr	s12, [r7, #60]	@ 0x3c
 800137c:	edc7 6a10 	vstr	s13, [r7, #64]	@ 0x40
 8001380:	ed87 7a11 	vstr	s14, [r7, #68]	@ 0x44
 8001384:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    quaternion estimated_q_witouth_yaw = quat_remove_yaw(error_q);
 8001388:	ed97 6a0f 	vldr	s12, [r7, #60]	@ 0x3c
 800138c:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001390:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8001394:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001398:	eeb0 0a46 	vmov.f32	s0, s12
 800139c:	eef0 0a66 	vmov.f32	s1, s13
 80013a0:	eeb0 1a47 	vmov.f32	s2, s14
 80013a4:	eef0 1a67 	vmov.f32	s3, s15
 80013a8:	f7ff fe5a 	bl	8001060 <quat_remove_yaw>
 80013ac:	eeb0 6a40 	vmov.f32	s12, s0
 80013b0:	eef0 6a60 	vmov.f32	s13, s1
 80013b4:	eeb0 7a41 	vmov.f32	s14, s2
 80013b8:	eef0 7a61 	vmov.f32	s15, s3
 80013bc:	ed87 6a0b 	vstr	s12, [r7, #44]	@ 0x2c
 80013c0:	edc7 6a0c 	vstr	s13, [r7, #48]	@ 0x30
 80013c4:	ed87 7a0d 	vstr	s14, [r7, #52]	@ 0x34
 80013c8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    // --- Step 4: Convert error quaternion → rotation vector (rad) ---
    angles3D rotvec_err = quat2rotvec(estimated_q_witouth_yaw);
 80013cc:	ed97 6a0b 	vldr	s12, [r7, #44]	@ 0x2c
 80013d0:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80013d4:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80013d8:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80013dc:	eeb0 0a46 	vmov.f32	s0, s12
 80013e0:	eef0 0a66 	vmov.f32	s1, s13
 80013e4:	eeb0 1a47 	vmov.f32	s2, s14
 80013e8:	eef0 1a67 	vmov.f32	s3, s15
 80013ec:	f001 f9be 	bl	800276c <quat2rotvec>
 80013f0:	eef0 6a40 	vmov.f32	s13, s0
 80013f4:	eeb0 7a60 	vmov.f32	s14, s1
 80013f8:	eef0 7a41 	vmov.f32	s15, s2
 80013fc:	edc7 6a08 	vstr	s13, [r7, #32]
 8001400:	ed87 7a09 	vstr	s14, [r7, #36]	@ 0x24
 8001404:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    //angles3D rotvec_err = quat2rotvec(error_q);

    rotvec_err.z = 0.0f;
 8001408:	f04f 0300 	mov.w	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28

    fc->calculated_roll_rate = rotvec_err.x * fc->rate_gain;
 800140e:	ed97 7a08 	vldr	s14, [r7, #32]
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	edd3 7a04 	vldr	s15, [r3, #16]
 8001418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = rotvec_err.y * fc->rate_gain;
 8001422:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	edd3 7a04 	vldr	s15, [r3, #16]
 800142c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = target_yaw_rate * fc->rate_gain;
 8001436:	69fb      	ldr	r3, [r7, #28]
 8001438:	ed93 7a04 	vldr	s14, [r3, #16]
 800143c:	edd7 7a00 	vldr	s15, [r7]
 8001440:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30

	// --- Step 5: Apply limits ---
	fc->calculated_roll_rate = CLAMP(fc->calculated_roll_rate, -fc->max_rate, fc->max_rate);
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	edd3 7a06 	vldr	s15, [r3, #24]
 8001456:	eef1 7a67 	vneg.f32	s15, s15
 800145a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800145e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001462:	d505      	bpl.n	8001470 <attitude_controller_angle_mode_update+0x2d0>
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	edd3 7a06 	vldr	s15, [r3, #24]
 800146a:	eef1 7a67 	vneg.f32	s15, s15
 800146e:	e011      	b.n	8001494 <attitude_controller_angle_mode_update+0x2f4>
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	edd3 7a06 	vldr	s15, [r3, #24]
 800147c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	dd03      	ble.n	800148e <attitude_controller_angle_mode_update+0x2ee>
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	edd3 7a06 	vldr	s15, [r3, #24]
 800148c:	e002      	b.n	8001494 <attitude_controller_angle_mode_update+0x2f4>
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	fc->calculated_pitch_rate = CLAMP(fc->calculated_pitch_rate, -fc->max_rate, fc->max_rate);
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014a6:	eef1 7a67 	vneg.f32	s15, s15
 80014aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b2:	d505      	bpl.n	80014c0 <attitude_controller_angle_mode_update+0x320>
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ba:	eef1 7a67 	vneg.f32	s15, s15
 80014be:	e011      	b.n	80014e4 <attitude_controller_angle_mode_update+0x344>
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	ed93 7a0b 	vldr	s14, [r3, #44]	@ 0x2c
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d4:	dd03      	ble.n	80014de <attitude_controller_angle_mode_update+0x33e>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014dc:	e002      	b.n	80014e4 <attitude_controller_angle_mode_update+0x344>
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	fc->calculated_yaw_rate = CLAMP(fc->calculated_yaw_rate, -fc->max_rate, fc->max_rate);
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 80014f0:	69fb      	ldr	r3, [r7, #28]
 80014f2:	edd3 7a06 	vldr	s15, [r3, #24]
 80014f6:	eef1 7a67 	vneg.f32	s15, s15
 80014fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001502:	d505      	bpl.n	8001510 <attitude_controller_angle_mode_update+0x370>
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	edd3 7a06 	vldr	s15, [r3, #24]
 800150a:	eef1 7a67 	vneg.f32	s15, s15
 800150e:	e011      	b.n	8001534 <attitude_controller_angle_mode_update+0x394>
 8001510:	69fb      	ldr	r3, [r7, #28]
 8001512:	ed93 7a0c 	vldr	s14, [r3, #48]	@ 0x30
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	edd3 7a06 	vldr	s15, [r3, #24]
 800151c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	dd03      	ble.n	800152e <attitude_controller_angle_mode_update+0x38e>
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	edd3 7a06 	vldr	s15, [r3, #24]
 800152c:	e002      	b.n	8001534 <attitude_controller_angle_mode_update+0x394>
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
 800153a:	e000      	b.n	800153e <attitude_controller_angle_mode_update+0x39e>
        return;
 800153c:	bf00      	nop

}
 800153e:	379c      	adds	r7, #156	@ 0x9c
 8001540:	46bd      	mov	sp, r7
 8001542:	bd90      	pop	{r4, r7, pc}

08001544 <attitude_controller_get_calculated_rate>:
void attitude_controller_get_calculated_rate(
    attitude_controller_t* fc,
    float* out_roll_rate,
    float* out_pitch_rate,
    float* out_yaw_rate
) {
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	60f8      	str	r0, [r7, #12]
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d015      	beq.n	8001584 <attitude_controller_get_calculated_rate+0x40>
        return; // Avoid null pointer access
    }
	if (out_roll_rate) {
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d003      	beq.n	8001566 <attitude_controller_get_calculated_rate+0x22>
		*out_roll_rate = fc->calculated_roll_rate;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	601a      	str	r2, [r3, #0]
	}
	if (out_pitch_rate) {
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <attitude_controller_get_calculated_rate+0x30>
		*out_pitch_rate = fc->calculated_pitch_rate;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	601a      	str	r2, [r3, #0]
	}
	if (out_yaw_rate) {
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <attitude_controller_get_calculated_rate+0x42>
		*out_yaw_rate = fc->calculated_yaw_rate;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	e000      	b.n	8001586 <attitude_controller_get_calculated_rate+0x42>
        return; // Avoid null pointer access
 8001584:	bf00      	nop
	}
}
 8001586:	3714      	adds	r7, #20
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <crc16_ccitt_init>:
#include "crc.h"


uint16_t crc16_ccitt_init(void) {
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
	return (uint16_t)0xFFFF; // Initial value for CRC-16-CCITT
 8001594:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8001598:	4618      	mov	r0, r3
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr

080015a2 <crc16_ccitt_add>:

uint16_t crc16_ccitt_add(uint16_t crc, uint8_t a)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	4603      	mov	r3, r0
 80015aa:	460a      	mov	r2, r1
 80015ac:	80fb      	strh	r3, [r7, #6]
 80015ae:	4613      	mov	r3, r2
 80015b0:	717b      	strb	r3, [r7, #5]
    crc ^= (uint16_t)a << (uint8_t)8;
 80015b2:	797b      	ldrb	r3, [r7, #5]
 80015b4:	b21b      	sxth	r3, r3
 80015b6:	021b      	lsls	r3, r3, #8
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	4053      	eors	r3, r2
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 80015c4:	2300      	movs	r3, #0
 80015c6:	73fb      	strb	r3, [r7, #15]
 80015c8:	e014      	b.n	80015f4 <crc16_ccitt_add+0x52>
        if (crc & (uint16_t)0x8000) {
 80015ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	da0a      	bge.n	80015e8 <crc16_ccitt_add+0x46>
            crc = (crc << (uint8_t)1) ^ (uint16_t)0x1021;
 80015d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	b21b      	sxth	r3, r3
 80015da:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80015de:	f083 0301 	eor.w	r3, r3, #1
 80015e2:	b21b      	sxth	r3, r3
 80015e4:	80fb      	strh	r3, [r7, #6]
 80015e6:	e002      	b.n	80015ee <crc16_ccitt_add+0x4c>
        }
        else{
        	crc = (crc << (uint8_t)1);
 80015e8:	88fb      	ldrh	r3, [r7, #6]
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	80fb      	strh	r3, [r7, #6]
    for (uint8_t ii = (uint8_t)0; ii < (uint8_t)8; ++ii) {
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	3301      	adds	r3, #1
 80015f2:	73fb      	strb	r3, [r7, #15]
 80015f4:	7bfb      	ldrb	r3, [r7, #15]
 80015f6:	2b07      	cmp	r3, #7
 80015f8:	d9e7      	bls.n	80015ca <crc16_ccitt_add+0x28>
        }
    }
    return crc;
 80015fa:	88fb      	ldrh	r3, [r7, #6]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <crc16_ccitt_add_arr>:

uint16_t crc16_ccitt_add_arr(uint16_t crc, uint8_t* data, size_t len) {
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	e00d      	b.n	8001638 <crc16_ccitt_add_arr+0x30>
        crc = crc16_ccitt_add(crc, data[i]);
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	4413      	add	r3, r2
 8001622:	781a      	ldrb	r2, [r3, #0]
 8001624:	89fb      	ldrh	r3, [r7, #14]
 8001626:	4611      	mov	r1, r2
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ffba 	bl	80015a2 <crc16_ccitt_add>
 800162e:	4603      	mov	r3, r0
 8001630:	81fb      	strh	r3, [r7, #14]
    for (size_t i = (size_t)0; i < len; i++) {
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	3301      	adds	r3, #1
 8001636:	617b      	str	r3, [r7, #20]
 8001638:	697a      	ldr	r2, [r7, #20]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	429a      	cmp	r2, r3
 800163e:	d3ed      	bcc.n	800161c <crc16_ccitt_add_arr+0x14>
    }
    return crc;
 8001640:	89fb      	ldrh	r3, [r7, #14]
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	0000      	movs	r0, r0
 800164c:	0000      	movs	r0, r0
	...

08001650 <pt1_filter_init_lowpass>:
#include "filters.h"
#define _USE_MATH_DEFINES
#include <math.h>
#include <float.h>

void pt1_filter_init_lowpass(pt1_filter_t* filter, float cutoff_freq, float sample_rate) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	ed87 0a02 	vstr	s0, [r7, #8]
 800165c:	edc7 0a01 	vstr	s1, [r7, #4]
	if(cutoff_freq <= FLT_EPSILON || sample_rate <= FLT_EPSILON){
 8001660:	edd7 7a02 	vldr	s15, [r7, #8]
 8001664:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8001710 <pt1_filter_init_lowpass+0xc0>
 8001668:	eef4 7ac7 	vcmpe.f32	s15, s14
 800166c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001670:	d908      	bls.n	8001684 <pt1_filter_init_lowpass+0x34>
 8001672:	edd7 7a01 	vldr	s15, [r7, #4]
 8001676:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001710 <pt1_filter_init_lowpass+0xc0>
 800167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	d804      	bhi.n	800168e <pt1_filter_init_lowpass+0x3e>
		filter->alpha = 0.0f;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	f04f 0200 	mov.w	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	e02b      	b.n	80016e6 <pt1_filter_init_lowpass+0x96>
	}
	else{
	    float dt = 1.0f / sample_rate;
 800168e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001692:	ed97 7a01 	vldr	s14, [r7, #4]
 8001696:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800169a:	edc7 7a05 	vstr	s15, [r7, #20]
	    float rc = 1.0f / (2.0f * M_PI * cutoff_freq);
 800169e:	68b8      	ldr	r0, [r7, #8]
 80016a0:	f7fe ff52 	bl	8000548 <__aeabi_f2d>
 80016a4:	a318      	add	r3, pc, #96	@ (adr r3, 8001708 <pt1_filter_init_lowpass+0xb8>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7fe ffa5 	bl	80005f8 <__aeabi_dmul>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	f04f 0000 	mov.w	r0, #0
 80016b6:	4917      	ldr	r1, [pc, #92]	@ (8001714 <pt1_filter_init_lowpass+0xc4>)
 80016b8:	f7ff f8c8 	bl	800084c <__aeabi_ddiv>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4610      	mov	r0, r2
 80016c2:	4619      	mov	r1, r3
 80016c4:	f7ff fa90 	bl	8000be8 <__aeabi_d2f>
 80016c8:	4603      	mov	r3, r0
 80016ca:	613b      	str	r3, [r7, #16]
	    filter->alpha = dt / (dt + rc);
 80016cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80016d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80016d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80016dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	edc3 7a02 	vstr	s15, [r3, #8]
	}
	filter->sample_freq = sample_rate;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	601a      	str	r2, [r3, #0]
    filter->cutoff_freq = cutoff_freq;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	68ba      	ldr	r2, [r7, #8]
 80016f0:	605a      	str	r2, [r3, #4]
    filter->state = 0.0f;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	60da      	str	r2, [r3, #12]
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	f3af 8000 	nop.w
 8001708:	54442d18 	.word	0x54442d18
 800170c:	401921fb 	.word	0x401921fb
 8001710:	34000000 	.word	0x34000000
 8001714:	3ff00000 	.word	0x3ff00000

08001718 <pt1_filter_apply_lowpass>:

float pt1_filter_apply_lowpass(pt1_filter_t* filter, float input) {
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	ed87 0a00 	vstr	s0, [r7]
    filter->state += (filter->alpha * (input - filter->state));
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	ed93 7a03 	vldr	s14, [r3, #12]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	edd3 7a03 	vldr	s15, [r3, #12]
 8001736:	ed97 6a00 	vldr	s12, [r7]
 800173a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800173e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	edc3 7a03 	vstr	s15, [r3, #12]
    return filter->state;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	ee07 3a90 	vmov	s15, r3
}
 8001754:	eeb0 0a67 	vmov.f32	s0, s15
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr

08001762 <pt1_filter_reset>:

void pt1_filter_reset(pt1_filter_t* filter) {
 8001762:	b480      	push	{r7}
 8001764:	b083      	sub	sp, #12
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
    filter->state = 0.0f;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f04f 0200 	mov.w	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <pt2_filter_init_lowpass>:
    f->a2 = a2 / a0;
    biquad_filter_reset(f);
}


void pt2_filter_init_lowpass(pt2_filter_t *f, float cutoff_freq, float sample_freq) {
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	ed87 0a02 	vstr	s0, [r7, #8]
 800178a:	edc7 0a01 	vstr	s1, [r7, #4]
    pt1_filter_init_lowpass(&f->s1, cutoff_freq, sample_freq);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	edd7 0a01 	vldr	s1, [r7, #4]
 8001794:	ed97 0a02 	vldr	s0, [r7, #8]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff59 	bl	8001650 <pt1_filter_init_lowpass>
    pt1_filter_init_lowpass(&f->s2, cutoff_freq, sample_freq);
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	3310      	adds	r3, #16
 80017a2:	edd7 0a01 	vldr	s1, [r7, #4]
 80017a6:	ed97 0a02 	vldr	s0, [r7, #8]
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7ff ff50 	bl	8001650 <pt1_filter_init_lowpass>
	f->sample_freq = sample_freq;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	621a      	str	r2, [r3, #32]
    f->cutoff_freq = cutoff_freq;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	68ba      	ldr	r2, [r7, #8]
 80017ba:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80017bc:	bf00      	nop
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <pt2_filter_apply_lowpass>:

float pt2_filter_apply_lowpass(pt2_filter_t *f, float x) {
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	ed87 0a00 	vstr	s0, [r7]
    return pt1_filter_apply_lowpass(&f->s2, pt1_filter_apply_lowpass(&f->s1, x));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f103 0410 	add.w	r4, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	ed97 0a00 	vldr	s0, [r7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff9b 	bl	8001718 <pt1_filter_apply_lowpass>
 80017e2:	eef0 7a40 	vmov.f32	s15, s0
 80017e6:	eeb0 0a67 	vmov.f32	s0, s15
 80017ea:	4620      	mov	r0, r4
 80017ec:	f7ff ff94 	bl	8001718 <pt1_filter_apply_lowpass>
 80017f0:	eef0 7a40 	vmov.f32	s15, s0
}
 80017f4:	eeb0 0a67 	vmov.f32	s0, s15
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd90      	pop	{r4, r7, pc}

080017fe <pt2_filter_reset>:

void pt2_filter_reset(pt2_filter_t *f) {
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
    pt1_filter_reset(&f->s1);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ffaa 	bl	8001762 <pt1_filter_reset>
    pt1_filter_reset(&f->s2);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	3310      	adds	r3, #16
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ffa5 	bl	8001762 <pt1_filter_reset>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <flight_control_loop_arm_esc>:
// https://articulatedrobotics.xyz/tools/rotation-calculator/
//static quaternion ground_default_position_q = { .w = 1.0f, .x = 0.0f, .y = 0.0f, .z = 0.0f };	// angle2quat();
static quaternion ground_default_position_q = { .w = 0.999698f, .x = 0.007852f, .y = 0.023297f, .z = 0.000183f };


void flight_control_loop_arm_esc(flight_control_loop_t* fcl) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800182e:	f04f 31ff 	mov.w	r1, #4294967295
 8001832:	4618      	mov	r0, r3
 8001834:	f013 f8ee 	bl	8014a14 <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 1;
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800184c:	2300      	movs	r3, #0
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	f012 fe5d 	bl	8014510 <xQueueGenericSend>
	#endif
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <flight_control_loop_disarm_esc>:

void flight_control_loop_disarm_esc(flight_control_loop_t* fcl) {
 800185e:	b580      	push	{r7, lr}
 8001860:	b082      	sub	sp, #8
 8001862:	af00      	add	r7, sp, #0
 8001864:	6078      	str	r0, [r7, #4]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	4618      	mov	r0, r3
 8001872:	f013 f8cf 	bl	8014a14 <xQueueSemaphoreTake>
	#endif
	fcl->are_esc_armed = 0;
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	f892 33c0 	ldrb.w	r3, [r2, #960]	@ 0x3c0
 800187c:	f023 0301 	bic.w	r3, r3, #1
 8001880:	f882 33c0 	strb.w	r3, [r2, #960]	@ 0x3c0
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 800188a:	2300      	movs	r3, #0
 800188c:	2200      	movs	r2, #0
 800188e:	2100      	movs	r1, #0
 8001890:	f012 fe3e 	bl	8014510 <xQueueGenericSend>
	#endif
}
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <flight_control_loop_are_esc_armed>:

int flight_control_loop_are_esc_armed(flight_control_loop_t* fcl) {
 800189c:	b580      	push	{r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	int flag;
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreTake(fcl->flags_mutex, portMAX_DELAY);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	@ 0x400
 80018aa:	f04f 31ff 	mov.w	r1, #4294967295
 80018ae:	4618      	mov	r0, r3
 80018b0:	f013 f8b0 	bl	8014a14 <xQueueSemaphoreTake>
	#endif
	flag = fcl->are_esc_armed;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	f893 33c0 	ldrb.w	r3, [r3, #960]	@ 0x3c0
 80018ba:	f343 0300 	sbfx	r3, r3, #0, #1
 80018be:	b25b      	sxtb	r3, r3
 80018c0:	60fb      	str	r3, [r7, #12]
	#if MUTEX_ESP_ENABLE != 0
		xSemaphoreGive(fcl->flags_mutex);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80018c8:	2300      	movs	r3, #0
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	f012 fe1f 	bl	8014510 <xQueueGenericSend>
	#endif
	return flag;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <flight_control_loop_init>:
	fcl->write_throttle = hook;
	fcl->write_throttle_hook_context = context;
}


void flight_control_loop_init(flight_control_loop_t* fcl) {
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
	memset(fcl, 0, sizeof(flight_control_loop_t));
 80018e4:	f240 4204 	movw	r2, #1028	@ 0x404
 80018e8:	2100      	movs	r1, #0
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f019 f812 	bl	801a914 <memset>

	// Initialize IMU and attitude controller here (not shown)
	imu_init(
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	ed9f 2a87 	vldr	s4, [pc, #540]	@ 8001b10 <flight_control_loop_init+0x234>
 80018f6:	eddf 1a86 	vldr	s3, [pc, #536]	@ 8001b10 <flight_control_loop_init+0x234>
 80018fa:	ed9f 1a85 	vldr	s2, [pc, #532]	@ 8001b10 <flight_control_loop_init+0x234>
 80018fe:	eddf 0a85 	vldr	s1, [pc, #532]	@ 8001b14 <flight_control_loop_init+0x238>
 8001902:	eeb3 0a0e 	vmov.f32	s0, #62	@ 0x41f00000  30.0
 8001906:	4618      	mov	r0, r3
 8001908:	f001 f994 	bl	8002c34 <imu_init>
		ACCELEROMETER_SAMPLE_RATE_HZ,
		GYRO_SAMPLE_RATE_HZ,
		FLIGHT_CONTROLLER_PID_FREQ_HZ
	);

	imu_set_accel_bias(&fcl->imu, (coord3D) { accelerometer_bias[0], accelerometer_bias[1], accelerometer_bias[2] }, accelerometer_A_1);
 800190c:	687a      	ldr	r2, [r7, #4]
 800190e:	4b82      	ldr	r3, [pc, #520]	@ (8001b18 <flight_control_loop_init+0x23c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	4b80      	ldr	r3, [pc, #512]	@ (8001b18 <flight_control_loop_init+0x23c>)
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	4b7f      	ldr	r3, [pc, #508]	@ (8001b18 <flight_control_loop_init+0x23c>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	61fb      	str	r3, [r7, #28]
 8001920:	edd7 6a05 	vldr	s13, [r7, #20]
 8001924:	ed97 7a06 	vldr	s14, [r7, #24]
 8001928:	edd7 7a07 	vldr	s15, [r7, #28]
 800192c:	497b      	ldr	r1, [pc, #492]	@ (8001b1c <flight_control_loop_init+0x240>)
 800192e:	eeb0 0a66 	vmov.f32	s0, s13
 8001932:	eef0 0a47 	vmov.f32	s1, s14
 8001936:	eeb0 1a67 	vmov.f32	s2, s15
 800193a:	4610      	mov	r0, r2
 800193c:	f001 fbd2 	bl	80030e4 <imu_set_accel_bias>
	imu_set_gyro_bias(&fcl->imu, (coord3D) { gyro_bias[0], gyro_bias[1], gyro_bias[2] });
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	4b77      	ldr	r3, [pc, #476]	@ (8001b20 <flight_control_loop_init+0x244>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	4b75      	ldr	r3, [pc, #468]	@ (8001b20 <flight_control_loop_init+0x244>)
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b74      	ldr	r3, [pc, #464]	@ (8001b20 <flight_control_loop_init+0x244>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	edd7 6a02 	vldr	s13, [r7, #8]
 8001958:	ed97 7a03 	vldr	s14, [r7, #12]
 800195c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001960:	eeb0 0a66 	vmov.f32	s0, s13
 8001964:	eef0 0a47 	vmov.f32	s1, s14
 8001968:	eeb0 1a67 	vmov.f32	s2, s15
 800196c:	4610      	mov	r0, r2
 800196e:	f001 fb97 	bl	80030a0 <imu_set_gyro_bias>
	imu_set_leveled_attitude(&fcl->imu, ground_default_position_q);
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	4b6b      	ldr	r3, [pc, #428]	@ (8001b24 <flight_control_loop_init+0x248>)
 8001976:	ed93 6a00 	vldr	s12, [r3]
 800197a:	edd3 6a01 	vldr	s13, [r3, #4]
 800197e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001982:	edd3 7a03 	vldr	s15, [r3, #12]
 8001986:	eeb0 0a46 	vmov.f32	s0, s12
 800198a:	eef0 0a66 	vmov.f32	s1, s13
 800198e:	eeb0 1a47 	vmov.f32	s2, s14
 8001992:	eef0 1a67 	vmov.f32	s3, s15
 8001996:	4610      	mov	r0, r2
 8001998:	f001 f9dc 	bl	8002d54 <imu_set_leveled_attitude>

	attitude_controller_init(
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 80019a2:	ed9f 1a61 	vldr	s2, [pc, #388]	@ 8001b28 <flight_control_loop_init+0x24c>
 80019a6:	eddf 0a61 	vldr	s1, [pc, #388]	@ 8001b2c <flight_control_loop_init+0x250>
 80019aa:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7ff fb36 	bl	8001020 <attitude_controller_init>
		RATE_GAIN,
		MAX_ANGLE,
		MAX_RATE
	);

	rate_controller_init(
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019ba:	ed9f 1a5d 	vldr	s2, [pc, #372]	@ 8001b30 <flight_control_loop_init+0x254>
 80019be:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80019c2:	ed9f 0a53 	vldr	s0, [pc, #332]	@ 8001b10 <flight_control_loop_init+0x234>
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 f972 	bl	8003cb0 <rate_controller_init>
		FLIGHT_CONTROLLER_PID_FREQ_HZ,
		D_TERM_PID_FILTER_CUTOFF_FREQ_HZ,
		FF_TERM_PID_FILTER_CUTOFF_FREQ_HZ
	);

	rate_controller_init_roll_pid(
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019d2:	ed9f 2a58 	vldr	s4, [pc, #352]	@ 8001b34 <flight_control_loop_init+0x258>
 80019d6:	eddf 1a58 	vldr	s3, [pc, #352]	@ 8001b38 <flight_control_loop_init+0x25c>
 80019da:	ed9f 1a56 	vldr	s2, [pc, #344]	@ 8001b34 <flight_control_loop_init+0x258>
 80019de:	eddf 0a55 	vldr	s1, [pc, #340]	@ 8001b34 <flight_control_loop_init+0x258>
 80019e2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80019e6:	4618      	mov	r0, r3
 80019e8:	f002 f9f0 	bl	8003dcc <rate_controller_init_roll_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_pitch_pid(
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 80019f2:	ed9f 2a50 	vldr	s4, [pc, #320]	@ 8001b34 <flight_control_loop_init+0x258>
 80019f6:	eddf 1a50 	vldr	s3, [pc, #320]	@ 8001b38 <flight_control_loop_init+0x25c>
 80019fa:	ed9f 1a4e 	vldr	s2, [pc, #312]	@ 8001b34 <flight_control_loop_init+0x258>
 80019fe:	eddf 0a4d 	vldr	s1, [pc, #308]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a02:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f002 fa12 	bl	8003e30 <rate_controller_init_pitch_pid>
		CONTROLLER_PID_KD,
		CONTROLLER_MAX_INTEGRAL_LIMIT,
		CONTROLLER_PID_KFF
	);

	rate_controller_init_yaw_pid(
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001a12:	ed9f 2a48 	vldr	s4, [pc, #288]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a16:	eddf 1a48 	vldr	s3, [pc, #288]	@ 8001b38 <flight_control_loop_init+0x25c>
 8001a1a:	ed9f 1a46 	vldr	s2, [pc, #280]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a1e:	eddf 0a45 	vldr	s1, [pc, #276]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a22:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8001a26:	4618      	mov	r0, r3
 8001a28:	f002 fa34 	bl	8003e94 <rate_controller_init_yaw_pid>
		CONTROLLER_YAW_PID_KD,
		CONTROLLER_YAW_MAX_INTEGRAL_LIMIT,
		CONTROLLER_YAW_PID_KFF
	);

	rc_attitude_control_init_roll(
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a32:	ed9f 2a42 	vldr	s4, [pc, #264]	@ 8001b3c <flight_control_loop_init+0x260>
 8001a36:	eddf 1a3f 	vldr	s3, [pc, #252]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a3a:	ed9f 1a3c 	vldr	s2, [pc, #240]	@ 8001b2c <flight_control_loop_init+0x250>
 8001a3e:	eddf 0a40 	vldr	s1, [pc, #256]	@ 8001b40 <flight_control_loop_init+0x264>
 8001a42:	ed9f 0a3b 	vldr	s0, [pc, #236]	@ 8001b30 <flight_control_loop_init+0x254>
 8001a46:	2101      	movs	r1, #1
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 fd39 	bl	80044c0 <rc_attitude_control_init_roll>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_pitch(
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a54:	ed9f 2a39 	vldr	s4, [pc, #228]	@ 8001b3c <flight_control_loop_init+0x260>
 8001a58:	eddf 1a36 	vldr	s3, [pc, #216]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a5c:	ed9f 1a33 	vldr	s2, [pc, #204]	@ 8001b2c <flight_control_loop_init+0x250>
 8001a60:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8001b40 <flight_control_loop_init+0x264>
 8001a64:	ed9f 0a32 	vldr	s0, [pc, #200]	@ 8001b30 <flight_control_loop_init+0x254>
 8001a68:	2101      	movs	r1, #1
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f002 fd85 	bl	800457a <rc_attitude_control_init_pitch>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_yaw(
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a76:	ed9f 2a31 	vldr	s4, [pc, #196]	@ 8001b3c <flight_control_loop_init+0x260>
 8001a7a:	eddf 1a2e 	vldr	s3, [pc, #184]	@ 8001b34 <flight_control_loop_init+0x258>
 8001a7e:	ed9f 1a2b 	vldr	s2, [pc, #172]	@ 8001b2c <flight_control_loop_init+0x250>
 8001a82:	eddf 0a2f 	vldr	s1, [pc, #188]	@ 8001b40 <flight_control_loop_init+0x264>
 8001a86:	ed9f 0a2a 	vldr	s0, [pc, #168]	@ 8001b30 <flight_control_loop_init+0x254>
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f002 fdd3 	bl	8004638 <rc_attitude_control_init_yaw>
		MAX_ANGLE,
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

	rc_attitude_control_init_throttle(
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001a98:	ed9f 2a28 	vldr	s4, [pc, #160]	@ 8001b3c <flight_control_loop_init+0x260>
 8001a9c:	eddf 1a25 	vldr	s3, [pc, #148]	@ 8001b34 <flight_control_loop_init+0x258>
 8001aa0:	eeb7 1a00 	vmov.f32	s2, #112	@ 0x3f800000  1.0
 8001aa4:	eddf 0a26 	vldr	s1, [pc, #152]	@ 8001b40 <flight_control_loop_init+0x264>
 8001aa8:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 8001b30 <flight_control_loop_init+0x254>
 8001aac:	2101      	movs	r1, #1
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f002 fe22 	bl	80046f8 <rc_attitude_control_init_throttle>
		0.0f,
		RC_INPUT_SAMPLE_RATE_HZ
	);

#if MUTEX_ESP_ENABLE != 0
	fcl->imu_mutex = xSemaphoreCreateMutex();
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f012 fd12 	bl	80144de <xQueueCreateMutex>
 8001aba:	4602      	mov	r2, r0
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8c3 23ec 	str.w	r2, [r3, #1004]	@ 0x3ec
	fcl->rate_controller_mutex = xSemaphoreCreateMutex();
 8001ac2:	2001      	movs	r0, #1
 8001ac4:	f012 fd0b 	bl	80144de <xQueueCreateMutex>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	f8c3 23f0 	str.w	r2, [r3, #1008]	@ 0x3f0
	fcl->attitude_controller_mutex = xSemaphoreCreateMutex();
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	f012 fd04 	bl	80144de <xQueueCreateMutex>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f8c3 23f4 	str.w	r2, [r3, #1012]	@ 0x3f4
	fcl->rc_attitude_control_mutex = xSemaphoreCreateMutex();
 8001ade:	2001      	movs	r0, #1
 8001ae0:	f012 fcfd 	bl	80144de <xQueueCreateMutex>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f8c3 23f8 	str.w	r2, [r3, #1016]	@ 0x3f8
	fcl->motor_throttle_mutex = xSemaphoreCreateMutex();
 8001aec:	2001      	movs	r0, #1
 8001aee:	f012 fcf6 	bl	80144de <xQueueCreateMutex>
 8001af2:	4602      	mov	r2, r0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	f8c3 23fc 	str.w	r2, [r3, #1020]	@ 0x3fc
	fcl->flags_mutex = xSemaphoreCreateMutex();
 8001afa:	2001      	movs	r0, #1
 8001afc:	f012 fcef 	bl	80144de <xQueueCreateMutex>
 8001b00:	4602      	mov	r2, r0
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
#endif
}
 8001b08:	bf00      	nop
 8001b0a:	3720      	adds	r7, #32
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	447a0000 	.word	0x447a0000
 8001b14:	42a00000 	.word	0x42a00000
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	2000000c 	.word	0x2000000c
 8001b20:	20000030 	.word	0x20000030
 8001b24:	2000003c 	.word	0x2000003c
 8001b28:	40a78d36 	.word	0x40a78d36
 8001b2c:	3f1c61aa 	.word	0x3f1c61aa
 8001b30:	42200000 	.word	0x42200000
 8001b34:	00000000 	.word	0x00000000
 8001b38:	3fa78d37 	.word	0x3fa78d37
 8001b3c:	42c80000 	.word	0x42c80000
 8001b40:	3d75c28f 	.word	0x3d75c28f

08001b44 <flight_control_loop_tick>:


void flight_control_loop_tick(flight_control_loop_t* fcl) {
 8001b44:	b590      	push	{r4, r7, lr}
 8001b46:	b09b      	sub	sp, #108	@ 0x6c
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	6078      	str	r0, [r7, #4]
	// RC input
	coord3D target_attitude = { 0 };
 8001b4c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 8001b58:	f04f 0300 	mov.w	r3, #0
 8001b5c:	64fb      	str	r3, [r7, #76]	@ 0x4c

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001b64:	f04f 31ff 	mov.w	r1, #4294967295
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f012 ff53 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f503 703c 	add.w	r0, r3, #752	@ 0x2f0
 8001b74:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b78:	f103 0408 	add.w	r4, r3, #8
 8001b7c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001b80:	1d1a      	adds	r2, r3, #4
 8001b82:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001b86:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001b8a:	9300      	str	r3, [sp, #0]
 8001b8c:	4623      	mov	r3, r4
 8001b8e:	f002 fe33 	bl	80047f8 <rc_attitude_control_get_processed>
		&(target_attitude.z),
		&target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001b98:	2300      	movs	r3, #0
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	f012 fcb7 	bl	8014510 <xQueueGenericSend>
	// Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
	quaternion body_frame_estimated_q;

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bac:	4618      	mov	r0, r3
 8001bae:	f012 ff31 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	imu_get_estimated_data(&fcl->imu, &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001bb8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001bbc:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001bc0:	f001 fade 	bl	8003180 <imu_get_estimated_data>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001bca:	2300      	movs	r3, #0
 8001bcc:	2200      	movs	r2, #0
 8001bce:	2100      	movs	r1, #0
 8001bd0:	f012 fc9e 	bl	8014510 <xQueueGenericSend>
#endif


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->attitude_controller_mutex, portMAX_DELAY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8001bda:	f04f 31ff 	mov.w	r1, #4294967295
 8001bde:	4618      	mov	r0, r3
 8001be0:	f012 ff18 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	// Update attitude controller
	attitude_controller_angle_mode_update(
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f503 732f 	add.w	r3, r3, #700	@ 0x2bc
 8001bea:	edd7 5a14 	vldr	s11, [r7, #80]	@ 0x50
 8001bee:	ed97 5a15 	vldr	s10, [r7, #84]	@ 0x54
 8001bf2:	edd7 4a16 	vldr	s9, [r7, #88]	@ 0x58
 8001bf6:	ed97 6a09 	vldr	s12, [r7, #36]	@ 0x24
 8001bfa:	edd7 6a0a 	vldr	s13, [r7, #40]	@ 0x28
 8001bfe:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001c02:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c06:	eeb0 3a64 	vmov.f32	s6, s9
 8001c0a:	eef0 2a45 	vmov.f32	s5, s10
 8001c0e:	eeb0 2a65 	vmov.f32	s4, s11
 8001c12:	eeb0 0a46 	vmov.f32	s0, s12
 8001c16:	eef0 0a66 	vmov.f32	s1, s13
 8001c1a:	eeb0 1a47 	vmov.f32	s2, s14
 8001c1e:	eef0 1a67 	vmov.f32	s3, s15
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fabc 	bl	80011a0 <attitude_controller_angle_mode_update>
		target_attitude.x, // target roll
		target_attitude.y,  // target pitch
		target_attitude.z   // target yaw rate
	);

	float target_roll_rate = 0.0f;
 8001c28:	f04f 0300 	mov.w	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 8001c2e:	f04f 0300 	mov.w	r3, #0
 8001c32:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f503 702f 	add.w	r0, r3, #700	@ 0x2bc
 8001c40:	f107 0318 	add.w	r3, r7, #24
 8001c44:	f107 021c 	add.w	r2, r7, #28
 8001c48:	f107 0120 	add.w	r1, r7, #32
 8001c4c:	f7ff fc7a 	bl	8001544 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->attitude_controller_mutex);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 8001c56:	2300      	movs	r3, #0
 8001c58:	2200      	movs	r2, #0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f012 fc58 	bl	8014510 <xQueueGenericSend>
#endif

	float pid_roll_output = 0.0f;
 8001c60:	f04f 0300 	mov.w	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 8001c66:	f04f 0300 	mov.w	r3, #0
 8001c6a:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 8001c6c:	f04f 0300 	mov.w	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rate_controller_mutex, portMAX_DELAY);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8001c78:	f04f 31ff 	mov.w	r1, #4294967295
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f012 fec9 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	if (target_throttle > THROTTLE_IDLE)
 8001c82:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c86:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8001dac <flight_control_loop_tick+0x268>
 8001c8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c92:	dd1e      	ble.n	8001cd2 <flight_control_loop_tick+0x18e>
	{
		rate_controller_update(
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001c9a:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c9e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8001ca2:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 8001ca6:	ed97 6a08 	vldr	s12, [r7, #32]
 8001caa:	edd7 5a07 	vldr	s11, [r7, #28]
 8001cae:	ed97 5a06 	vldr	s10, [r7, #24]
 8001cb2:	eef0 2a45 	vmov.f32	s5, s10
 8001cb6:	eeb0 2a65 	vmov.f32	s4, s11
 8001cba:	eef0 1a46 	vmov.f32	s3, s12
 8001cbe:	eeb0 1a66 	vmov.f32	s2, s13
 8001cc2:	eef0 0a47 	vmov.f32	s1, s14
 8001cc6:	eeb0 0a67 	vmov.f32	s0, s15
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f002 f914 	bl	8003ef8 <rate_controller_update>
 8001cd0:	e005      	b.n	8001cde <flight_control_loop_tick+0x19a>
			target_pitch_rate,
			target_yaw_rate
		);
	}
	else {
		rate_controller_reset(&fcl->rate_controller);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f002 fa9b 	bl	8004214 <rate_controller_reset>
	}

	// Get PID outputs
	rate_controller_get_pid_outputs(
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
 8001ce4:	f107 030c 	add.w	r3, r7, #12
 8001ce8:	f107 0210 	add.w	r2, r7, #16
 8001cec:	f107 0114 	add.w	r1, r7, #20
 8001cf0:	f002 fae4 	bl	80042bc <rate_controller_get_pid_outputs>
		&pid_pitch_output,
		&pid_yaw_output
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rate_controller_mutex);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2100      	movs	r1, #0
 8001d00:	f012 fc06 	bl	8014510 <xQueueGenericSend>
#endif

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001d0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f012 fe80 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	// Mix PID outputs to motor commands
	if (flight_control_loop_are_esc_armed(fcl) != 0)
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff fdc1 	bl	800189c <flight_control_loop_are_esc_armed>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d018      	beq.n	8001d52 <flight_control_loop_tick+0x20e>
	{
		motor_mixer_quad_x(
 8001d20:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001d24:	ed97 7a05 	vldr	s14, [r7, #20]
 8001d28:	edd7 6a04 	vldr	s13, [r7, #16]
 8001d2c:	ed97 6a03 	vldr	s12, [r7, #12]
			target_throttle,
			pid_roll_output,
			pid_pitch_output,
			pid_yaw_output,
			THROTTLE_IDLE,
			fcl->motor_throttle
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f503 736c 	add.w	r3, r3, #944	@ 0x3b0
		motor_mixer_quad_x(
 8001d36:	4618      	mov	r0, r3
 8001d38:	ed9f 2a1c 	vldr	s4, [pc, #112]	@ 8001dac <flight_control_loop_tick+0x268>
 8001d3c:	eef0 1a46 	vmov.f32	s3, s12
 8001d40:	eeb0 1a66 	vmov.f32	s2, s13
 8001d44:	eef0 0a47 	vmov.f32	s1, s14
 8001d48:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4c:	f001 fcb6 	bl	80036bc <motor_mixer_quad_x>
 8001d50:	e010      	b.n	8001d74 <flight_control_loop_tick+0x230>
		);
	}
	else {
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d52:	2300      	movs	r3, #0
 8001d54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d56:	e00a      	b.n	8001d6e <flight_control_loop_tick+0x22a>
			fcl->motor_throttle[i] = 0.0f;
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d5c:	33ec      	adds	r3, #236	@ 0xec
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
		for (int i = 0; i < NUM_MOTORS; i++) {
 8001d68:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d6a:	3301      	adds	r3, #1
 8001d6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001d6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	ddf1      	ble.n	8001d58 <flight_control_loop_tick+0x214>
		}
	}
	if (fcl->write_throttle) {
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00a      	beq.n	8001d94 <flight_control_loop_tick+0x250>
		fcl->write_throttle(fcl, fcl->motor_throttle, fcl->write_throttle_hook_context);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	f502 716c 	add.w	r1, r2, #944	@ 0x3b0
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	f8d2 23e8 	ldr.w	r2, [r2, #1000]	@ 0x3e8
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	4798      	blx	r3
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	f012 fbb6 	bl	8014510 <xQueueGenericSend>
#endif

}
 8001da4:	bf00      	nop
 8001da6:	3764      	adds	r7, #100	@ 0x64
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd90      	pop	{r4, r7, pc}
 8001dac:	3d6147ae 	.word	0x3d6147ae

08001db0 <flight_control_loop_update_rc_control>:

void flight_control_loop_update_rc_control(flight_control_loop_t* fcl, coord3D target_attitude, float target_throttle) {
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6178      	str	r0, [r7, #20]
 8001db8:	eef0 6a40 	vmov.f32	s13, s0
 8001dbc:	eeb0 7a60 	vmov.f32	s14, s1
 8001dc0:	eef0 7a41 	vmov.f32	s15, s2
 8001dc4:	edc7 1a01 	vstr	s3, [r7, #4]
 8001dc8:	edc7 6a02 	vstr	s13, [r7, #8]
 8001dcc:	ed87 7a03 	vstr	s14, [r7, #12]
 8001dd0:	edc7 7a04 	vstr	s15, [r7, #16]

	target_attitude.x = CLAMP(target_attitude.x, -1.0f, 1.0f);
 8001dd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dd8:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001de4:	d501      	bpl.n	8001dea <flight_control_loop_update_rc_control+0x3a>
 8001de6:	4b41      	ldr	r3, [pc, #260]	@ (8001eec <flight_control_loop_update_rc_control+0x13c>)
 8001de8:	e00c      	b.n	8001e04 <flight_control_loop_update_rc_control+0x54>
 8001dea:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001df2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dfa:	dd02      	ble.n	8001e02 <flight_control_loop_update_rc_control+0x52>
 8001dfc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e00:	e000      	b.n	8001e04 <flight_control_loop_update_rc_control+0x54>
 8001e02:	68bb      	ldr	r3, [r7, #8]
 8001e04:	60bb      	str	r3, [r7, #8]
	target_attitude.y = CLAMP(target_attitude.y, -1.0f, 1.0f);
 8001e06:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e0a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e16:	d501      	bpl.n	8001e1c <flight_control_loop_update_rc_control+0x6c>
 8001e18:	4b34      	ldr	r3, [pc, #208]	@ (8001eec <flight_control_loop_update_rc_control+0x13c>)
 8001e1a:	e00c      	b.n	8001e36 <flight_control_loop_update_rc_control+0x86>
 8001e1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	dd02      	ble.n	8001e34 <flight_control_loop_update_rc_control+0x84>
 8001e2e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e32:	e000      	b.n	8001e36 <flight_control_loop_update_rc_control+0x86>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	60fb      	str	r3, [r7, #12]
	target_attitude.z = CLAMP(target_attitude.z, -1.0f, 1.0f);
 8001e38:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e3c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001e40:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	d501      	bpl.n	8001e4e <flight_control_loop_update_rc_control+0x9e>
 8001e4a:	4b28      	ldr	r3, [pc, #160]	@ (8001eec <flight_control_loop_update_rc_control+0x13c>)
 8001e4c:	e00c      	b.n	8001e68 <flight_control_loop_update_rc_control+0xb8>
 8001e4e:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e5e:	dd02      	ble.n	8001e66 <flight_control_loop_update_rc_control+0xb6>
 8001e60:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e64:	e000      	b.n	8001e68 <flight_control_loop_update_rc_control+0xb8>
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	613b      	str	r3, [r7, #16]
	target_throttle = CLAMP(target_throttle, 0.0f, 1.0f);
 8001e6a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e76:	d502      	bpl.n	8001e7e <flight_control_loop_update_rc_control+0xce>
 8001e78:	f04f 0300 	mov.w	r3, #0
 8001e7c:	e00c      	b.n	8001e98 <flight_control_loop_update_rc_control+0xe8>
 8001e7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001e82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e8e:	dd02      	ble.n	8001e96 <flight_control_loop_update_rc_control+0xe6>
 8001e90:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e94:	e000      	b.n	8001e98 <flight_control_loop_update_rc_control+0xe8>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	607b      	str	r3, [r7, #4]

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->rc_attitude_control_mutex, portMAX_DELAY);
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f012 fdb5 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_update(
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f503 733c 	add.w	r3, r3, #752	@ 0x2f0
 8001eb0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001eb4:	ed97 7a03 	vldr	s14, [r7, #12]
 8001eb8:	edd7 6a04 	vldr	s13, [r7, #16]
 8001ebc:	edd7 1a01 	vldr	s3, [r7, #4]
 8001ec0:	eeb0 1a66 	vmov.f32	s2, s13
 8001ec4:	eef0 0a47 	vmov.f32	s1, s14
 8001ec8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f002 fc6f 	bl	80047b0 <rc_attitude_control_update>
		target_attitude.z,
		target_throttle
	);

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2200      	movs	r2, #0
 8001edc:	2100      	movs	r1, #0
 8001ede:	f012 fb17 	bl	8014510 <xQueueGenericSend>
#endif
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	bf800000 	.word	0xbf800000

08001ef0 <flight_control_loop_update_imu>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->rc_attitude_control_mutex);
#endif
}

void flight_control_loop_update_imu(flight_control_loop_t* fcl, coord3D gyro_data, coord3D accel_data) {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b088      	sub	sp, #32
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	61f8      	str	r0, [r7, #28]
 8001ef8:	eeb0 5a40 	vmov.f32	s10, s0
 8001efc:	eef0 5a60 	vmov.f32	s11, s1
 8001f00:	eeb0 6a41 	vmov.f32	s12, s2
 8001f04:	eef0 6a61 	vmov.f32	s13, s3
 8001f08:	eeb0 7a42 	vmov.f32	s14, s4
 8001f0c:	eef0 7a62 	vmov.f32	s15, s5
 8001f10:	ed87 5a04 	vstr	s10, [r7, #16]
 8001f14:	edc7 5a05 	vstr	s11, [r7, #20]
 8001f18:	ed87 6a06 	vstr	s12, [r7, #24]
 8001f1c:	edc7 6a01 	vstr	s13, [r7, #4]
 8001f20:	ed87 7a02 	vstr	s14, [r7, #8]
 8001f24:	edc7 7a03 	vstr	s15, [r7, #12]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->imu_mutex, portMAX_DELAY);
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 8001f2e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f32:	4618      	mov	r0, r3
 8001f34:	f012 fd6e 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	imu_update(&fcl->imu, accel_data, gyro_data);
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	ed97 5a04 	vldr	s10, [r7, #16]
 8001f3e:	edd7 5a05 	vldr	s11, [r7, #20]
 8001f42:	ed97 6a06 	vldr	s12, [r7, #24]
 8001f46:	edd7 6a01 	vldr	s13, [r7, #4]
 8001f4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f4e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f52:	eef0 1a45 	vmov.f32	s3, s10
 8001f56:	eeb0 2a65 	vmov.f32	s4, s11
 8001f5a:	eef0 2a46 	vmov.f32	s5, s12
 8001f5e:	eeb0 0a66 	vmov.f32	s0, s13
 8001f62:	eef0 0a47 	vmov.f32	s1, s14
 8001f66:	eeb0 1a67 	vmov.f32	s2, s15
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f001 f857 	bl	800301e <imu_update>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8001f76:	2300      	movs	r3, #0
 8001f78:	2200      	movs	r2, #0
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	f012 fac8 	bl	8014510 <xQueueGenericSend>
#endif
}
 8001f80:	bf00      	nop
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}

08001f88 <flight_control_loop_get_motors_throttle>:
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->imu_mutex);
#endif
}

void flight_control_loop_get_motors_throttle(flight_control_loop_t* fcl, float motors_throttle[NUM_MOTORS]) {
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl->motor_throttle_mutex, portMAX_DELAY);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f8d3 33fc 	ldr.w	r3, [r3, #1020]	@ 0x3fc
 8001f98:	f04f 31ff 	mov.w	r1, #4294967295
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f012 fd39 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
 8001fa6:	e00d      	b.n	8001fc4 <flight_control_loop_get_motors_throttle+0x3c>
	{
		motors_throttle[i] = fcl->motor_throttle[i];
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	4413      	add	r3, r2
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	32ec      	adds	r2, #236	@ 0xec
 8001fb6:	0092      	lsls	r2, r2, #2
 8001fb8:	440a      	add	r2, r1
 8001fba:	6812      	ldr	r2, [r2, #0]
 8001fbc:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < NUM_MOTORS; i++)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d9ee      	bls.n	8001fa8 <flight_control_loop_get_motors_throttle+0x20>
	}
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl->motor_throttle_mutex);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f8d3 03fc 	ldr.w	r0, [r3, #1020]	@ 0x3fc
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	f012 fa9b 	bl	8014510 <xQueueGenericSend>
#endif
}
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <mycmd_fn>:


lwshell_t lwshell_cli;

/* Command to get called */
int32_t mycmd_fn(int32_t argc, char** argv) {
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
    printf("mycmd_fn called. Number of argv: %d\r\n", (int)argc);
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	480d      	ldr	r0, [pc, #52]	@ (8002028 <mycmd_fn+0x44>)
 8001ff2:	f018 fad5 	bl	801a5a0 <iprintf>
    for (int32_t i = 0; i < argc; ++i) {
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	60fb      	str	r3, [r7, #12]
 8001ffa:	e00c      	b.n	8002016 <mycmd_fn+0x32>
        printf("ARG[%d]: %s\r\n", (int)i, argv[i]);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	4413      	add	r3, r2
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	461a      	mov	r2, r3
 8002008:	68f9      	ldr	r1, [r7, #12]
 800200a:	4808      	ldr	r0, [pc, #32]	@ (800202c <mycmd_fn+0x48>)
 800200c:	f018 fac8 	bl	801a5a0 <iprintf>
    for (int32_t i = 0; i < argc; ++i) {
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	3301      	adds	r3, #1
 8002014:	60fb      	str	r3, [r7, #12]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	429a      	cmp	r2, r3
 800201c:	dbee      	blt.n	8001ffc <mycmd_fn+0x18>
    }

    /* Successful execution */
    return 0;
 800201e:	2300      	movs	r3, #0
}
 8002020:	4618      	mov	r0, r3
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	0801e628 	.word	0x0801e628
 800202c:	0801e650 	.word	0x0801e650

08002030 <fp_cli_example_minimal_init>:

/* Example code */
void fp_cli_example_minimal_init(void) {
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
    const char* input_str = "mycmd param1 \"param 2 with space\"\r\n";
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <fp_cli_example_minimal_init+0x24>)
 8002038:	607b      	str	r3, [r7, #4]

    /* Init library */
    //lwshell_init();
    lwshell_init_ex(&lwshell_cli);
 800203a:	4807      	ldr	r0, [pc, #28]	@ (8002058 <fp_cli_example_minimal_init+0x28>)
 800203c:	f002 fc14 	bl	8004868 <lwshell_init_ex>

    /* Define shell commands */
    //lwshell_register_cmd("mycmd", mycmd_fn, "Adds 2 integer numbers and prints them");
    lwshell_register_cmd_ex(&lwshell_cli, "mycmd", mycmd_fn, "Adds 2 integer numbers and prints them");
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <fp_cli_example_minimal_init+0x2c>)
 8002042:	4a07      	ldr	r2, [pc, #28]	@ (8002060 <fp_cli_example_minimal_init+0x30>)
 8002044:	4907      	ldr	r1, [pc, #28]	@ (8002064 <fp_cli_example_minimal_init+0x34>)
 8002046:	4804      	ldr	r0, [pc, #16]	@ (8002058 <fp_cli_example_minimal_init+0x28>)
 8002048:	f002 fc26 	bl	8004898 <lwshell_register_cmd_ex>

    /* User input to process every character */

    /* Now insert input */
    //lwshell_input(input_str, strlen(input_str));
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	0801e660 	.word	0x0801e660
 8002058:	20000338 	.word	0x20000338
 800205c:	0801e684 	.word	0x0801e684
 8002060:	08001fe5 	.word	0x08001fe5
 8002064:	0801e6ac 	.word	0x0801e6ac

08002068 <MagCal>:

#ifdef __cplusplus
extern "C" {
#endif

void MagCal(float* _x, float* _y, float* _z, float _bias[3], float A_1[3][3]) {
 8002068:	b480      	push	{r7}
 800206a:	b089      	sub	sp, #36	@ 0x24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	60b9      	str	r1, [r7, #8]
 8002072:	607a      	str	r2, [r7, #4]
 8002074:	603b      	str	r3, [r7, #0]
	//h_cal = (xyz - _bias) * A^-1
	float x_temp, y_temp, z_temp;

	x_temp = *_x;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	61fb      	str	r3, [r7, #28]
	y_temp = *_y;
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	61bb      	str	r3, [r7, #24]
	z_temp = *_z;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	617b      	str	r3, [r7, #20]

	x_temp -= _bias[0];
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	edd3 7a00 	vldr	s15, [r3]
 800208e:	ed97 7a07 	vldr	s14, [r7, #28]
 8002092:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002096:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp -= _bias[1];
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	3304      	adds	r3, #4
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	ed97 7a06 	vldr	s14, [r7, #24]
 80020a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020aa:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp -= _bias[2];
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	3308      	adds	r3, #8
 80020b2:	edd3 7a00 	vldr	s15, [r3]
 80020b6:	ed97 7a05 	vldr	s14, [r7, #20]
 80020ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020be:	edc7 7a05 	vstr	s15, [r7, #20]


	x_temp = x_temp * A_1[0][0] + y_temp * A_1[1][0] + z_temp * A_1[2][0];
 80020c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c4:	ed93 7a00 	vldr	s14, [r3]
 80020c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80020cc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020d2:	330c      	adds	r3, #12
 80020d4:	edd3 6a00 	vldr	s13, [r3]
 80020d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80020dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80020e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020e6:	3318      	adds	r3, #24
 80020e8:	edd3 6a00 	vldr	s13, [r3]
 80020ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80020f0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f8:	edc7 7a07 	vstr	s15, [r7, #28]
	y_temp = x_temp * A_1[0][1] + y_temp * A_1[1][1] + z_temp * A_1[2][1];
 80020fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8002102:	edd7 7a07 	vldr	s15, [r7, #28]
 8002106:	ee27 7a27 	vmul.f32	s14, s14, s15
 800210a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800210c:	330c      	adds	r3, #12
 800210e:	edd3 6a01 	vldr	s13, [r3, #4]
 8002112:	edd7 7a06 	vldr	s15, [r7, #24]
 8002116:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800211a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800211e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002120:	3318      	adds	r3, #24
 8002122:	edd3 6a01 	vldr	s13, [r3, #4]
 8002126:	edd7 7a05 	vldr	s15, [r7, #20]
 800212a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800212e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002132:	edc7 7a06 	vstr	s15, [r7, #24]
	z_temp = x_temp * A_1[0][2] + y_temp * A_1[1][2] + z_temp * A_1[2][2];
 8002136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002138:	ed93 7a02 	vldr	s14, [r3, #8]
 800213c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002140:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002146:	330c      	adds	r3, #12
 8002148:	edd3 6a02 	vldr	s13, [r3, #8]
 800214c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002150:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002154:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800215a:	3318      	adds	r3, #24
 800215c:	edd3 6a02 	vldr	s13, [r3, #8]
 8002160:	edd7 7a05 	vldr	s15, [r7, #20]
 8002164:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216c:	edc7 7a05 	vstr	s15, [r7, #20]

	*_x = x_temp;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	69fa      	ldr	r2, [r7, #28]
 8002174:	601a      	str	r2, [r3, #0]
	*_y = y_temp;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	601a      	str	r2, [r3, #0]
	*_z = z_temp;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	601a      	str	r2, [r3, #0]
}
 8002182:	bf00      	nop
 8002184:	3724      	adds	r7, #36	@ 0x24
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <quatnorm>:
// ================================================================
// ===						QUATERNIONS			                ===
// ================================================================
// https://www.mathworks.com/help/aerotbx/referencelist.html?type=function&category=flight-parameters-1&s_tid=CRUX_topnav

float quatnorm(quaternion* q) {
 800218e:	b580      	push	{r7, lr}
 8002190:	b082      	sub	sp, #8
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
	return sqrtf((q->w * q->w) + (q->x * q->x) + (q->y * q->y) + (q->z * q->z));
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	ed93 7a00 	vldr	s14, [r3]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	edd3 6a01 	vldr	s13, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	edd3 7a01 	vldr	s15, [r3, #4]
 80021b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	edd3 6a02 	vldr	s13, [r3, #8]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	edd3 7a02 	vldr	s15, [r3, #8]
 80021c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	edd3 6a03 	vldr	s13, [r3, #12]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	edd3 7a03 	vldr	s15, [r3, #12]
 80021da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e2:	eeb0 0a67 	vmov.f32	s0, s15
 80021e6:	f015 fd75 	bl	8017cd4 <sqrtf>
 80021ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80021ee:	eeb0 0a67 	vmov.f32	s0, s15
 80021f2:	3708      	adds	r7, #8
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <quatconj>:

quaternion quatconj(quaternion* q) {
 80021f8:	b490      	push	{r4, r7}
 80021fa:	b08e      	sub	sp, #56	@ 0x38
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6178      	str	r0, [r7, #20]
    quaternion result;
    result.w =  q->w;
 8002200:	697b      	ldr	r3, [r7, #20]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]
    result.x = -q->x;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	edd3 7a01 	vldr	s15, [r3, #4]
 800220c:	eef1 7a67 	vneg.f32	s15, s15
 8002210:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = -q->y;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	edd3 7a02 	vldr	s15, [r3, #8]
 800221a:	eef1 7a67 	vneg.f32	s15, s15
 800221e:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = -q->z;
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	edd3 7a03 	vldr	s15, [r3, #12]
 8002228:	eef1 7a67 	vneg.f32	s15, s15
 800222c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 8002230:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002234:	f107 0318 	add.w	r3, r7, #24
 8002238:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800223a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800223e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002240:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002242:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002246:	ee06 0a10 	vmov	s12, r0
 800224a:	ee06 1a90 	vmov	s13, r1
 800224e:	ee07 2a10 	vmov	s14, r2
 8002252:	ee07 3a90 	vmov	s15, r3
}
 8002256:	eeb0 0a46 	vmov.f32	s0, s12
 800225a:	eef0 0a66 	vmov.f32	s1, s13
 800225e:	eeb0 1a47 	vmov.f32	s2, s14
 8002262:	eef0 1a67 	vmov.f32	s3, s15
 8002266:	3738      	adds	r7, #56	@ 0x38
 8002268:	46bd      	mov	sp, r7
 800226a:	bc90      	pop	{r4, r7}
 800226c:	4770      	bx	lr
	...

08002270 <quatnormalize>:

quaternion quatnormalize(quaternion* q) {
 8002270:	b590      	push	{r4, r7, lr}
 8002272:	b091      	sub	sp, #68	@ 0x44
 8002274:	af00      	add	r7, sp, #0
 8002276:	6178      	str	r0, [r7, #20]
    float im;
    quaternion result;
	float q_norm = quatnorm(q);
 8002278:	6978      	ldr	r0, [r7, #20]
 800227a:	f7ff ff88 	bl	800218e <quatnorm>
 800227e:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

	if (q_norm <= FLT_EPSILON){
 8002282:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002286:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8002350 <quatnormalize+0xe0>
 800228a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002292:	d813      	bhi.n	80022bc <quatnormalize+0x4c>
	    result.w = 1.0f;
 8002294:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002298:	61bb      	str	r3, [r7, #24]
	    result.x = 0.0f;
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	61fb      	str	r3, [r7, #28]
	    result.y = 0.0f;
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
	    result.z = 0.0f;
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	627b      	str	r3, [r7, #36]	@ 0x24
		return result;
 80022ac:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80022b0:	f107 0318 	add.w	r3, r7, #24
 80022b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80022ba:	e032      	b.n	8002322 <quatnormalize+0xb2>
	}

	im = 1.0f / q_norm;
 80022bc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022c0:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80022c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022c8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    result.w = q->w * im;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	ed93 7a00 	vldr	s14, [r3]
 80022d2:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80022d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022da:	edc7 7a06 	vstr	s15, [r7, #24]
    result.x = q->x * im;
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	ed93 7a01 	vldr	s14, [r3, #4]
 80022e4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80022e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ec:	edc7 7a07 	vstr	s15, [r7, #28]
    result.y = q->y * im;
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	ed93 7a02 	vldr	s14, [r3, #8]
 80022f6:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80022fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022fe:	edc7 7a08 	vstr	s15, [r7, #32]
    result.z = q->z * im;
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	ed93 7a03 	vldr	s14, [r3, #12]
 8002308:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 800230c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002310:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return result;
 8002314:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002318:	f107 0318 	add.w	r3, r7, #24
 800231c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800231e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002322:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002324:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002326:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800232a:	ee06 0a10 	vmov	s12, r0
 800232e:	ee06 1a90 	vmov	s13, r1
 8002332:	ee07 2a10 	vmov	s14, r2
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eeb0 0a46 	vmov.f32	s0, s12
 800233e:	eef0 0a66 	vmov.f32	s1, s13
 8002342:	eeb0 1a47 	vmov.f32	s2, s14
 8002346:	eef0 1a67 	vmov.f32	s3, s15
 800234a:	3744      	adds	r7, #68	@ 0x44
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}
 8002350:	34000000 	.word	0x34000000

08002354 <quatmultiply_scalar>:
    result.z = qinv.z / norm_sq;
    return result;
}

// Multiply a reference of a quaternion by a scalar, q = s*q
quaternion quatmultiply_scalar(quaternion *q, float scalar){
 8002354:	b490      	push	{r4, r7}
 8002356:	b08e      	sub	sp, #56	@ 0x38
 8002358:	af00      	add	r7, sp, #0
 800235a:	6178      	str	r0, [r7, #20]
 800235c:	ed87 0a04 	vstr	s0, [r7, #16]
	quaternion res;
    res.w = q->w * scalar;
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	ed93 7a00 	vldr	s14, [r3]
 8002366:	edd7 7a04 	vldr	s15, [r7, #16]
 800236a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800236e:	edc7 7a06 	vstr	s15, [r7, #24]
    res.x = q->x * scalar;
 8002372:	697b      	ldr	r3, [r7, #20]
 8002374:	ed93 7a01 	vldr	s14, [r3, #4]
 8002378:	edd7 7a04 	vldr	s15, [r7, #16]
 800237c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002380:	edc7 7a07 	vstr	s15, [r7, #28]
    res.y = q->y * scalar;
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	ed93 7a02 	vldr	s14, [r3, #8]
 800238a:	edd7 7a04 	vldr	s15, [r7, #16]
 800238e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002392:	edc7 7a08 	vstr	s15, [r7, #32]
    res.z = q->z * scalar;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	ed93 7a03 	vldr	s14, [r3, #12]
 800239c:	edd7 7a04 	vldr	s15, [r7, #16]
 80023a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 80023a8:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 80023ac:	f107 0318 	add.w	r3, r7, #24
 80023b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80023b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80023b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80023b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80023be:	ee06 0a10 	vmov	s12, r0
 80023c2:	ee06 1a90 	vmov	s13, r1
 80023c6:	ee07 2a10 	vmov	s14, r2
 80023ca:	ee07 3a90 	vmov	s15, r3
}
 80023ce:	eeb0 0a46 	vmov.f32	s0, s12
 80023d2:	eef0 0a66 	vmov.f32	s1, s13
 80023d6:	eeb0 1a47 	vmov.f32	s2, s14
 80023da:	eef0 1a67 	vmov.f32	s3, s15
 80023de:	3738      	adds	r7, #56	@ 0x38
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bc90      	pop	{r4, r7}
 80023e4:	4770      	bx	lr

080023e6 <quatmultiply>:

quaternion quatmultiply(quaternion* _quat1, quaternion* _quat2) {
 80023e6:	b490      	push	{r4, r7}
 80023e8:	b096      	sub	sp, #88	@ 0x58
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6178      	str	r0, [r7, #20]
 80023ee:	6139      	str	r1, [r7, #16]
	quaternion res;
	float w1, x1, y1, z1;
	float w2, x2, y2, z2;

	w1 = _quat1->w;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	657b      	str	r3, [r7, #84]	@ 0x54
	x1 = _quat1->x;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	653b      	str	r3, [r7, #80]	@ 0x50
	y1 = _quat1->y;
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	64fb      	str	r3, [r7, #76]	@ 0x4c
	z1 = _quat1->z;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	64bb      	str	r3, [r7, #72]	@ 0x48

	w2 = _quat2->w;
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	647b      	str	r3, [r7, #68]	@ 0x44
	x2 = _quat2->x;
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	643b      	str	r3, [r7, #64]	@ 0x40
	y2 = _quat2->y;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	63fb      	str	r3, [r7, #60]	@ 0x3c
	z2 = _quat2->z;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	63bb      	str	r3, [r7, #56]	@ 0x38

	res.w = w1 * w2 - x1 * x2 - y1 * y2 - z1 * z2;  // new w
 8002420:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002424:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002430:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002434:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002438:	ee37 7a67 	vsub.f32	s14, s14, s15
 800243c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002440:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002444:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002448:	ee37 7a67 	vsub.f32	s14, s14, s15
 800244c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002450:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002454:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800245c:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = w1 * x2 + x1 * w2 + y1 * z2 - z1 * y2;  // new x
 8002460:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8002464:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800246c:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 8002470:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002478:	ee37 7a27 	vadd.f32	s14, s14, s15
 800247c:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002480:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002488:	ee37 7a27 	vadd.f32	s14, s14, s15
 800248c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002490:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002494:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002498:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249c:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = w1 * y2 - x1 * z2 + y1 * w2 + z1 * x2;  // new y
 80024a0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80024a4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80024a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ac:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80024b0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80024b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80024bc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 80024c0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80024c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024cc:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 80024d0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80024d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024dc:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = w1 * z2 + x1 * y2 - y1 * x2 + z1 * w2;	// new z
 80024e0:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80024e4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80024e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024ec:	edd7 6a14 	vldr	s13, [r7, #80]	@ 0x50
 80024f0:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80024f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80024fc:	edd7 6a13 	vldr	s13, [r7, #76]	@ 0x4c
 8002500:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002504:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002508:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250c:	edd7 6a12 	vldr	s13, [r7, #72]	@ 0x48
 8002510:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002514:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800251c:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return res;
 8002520:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002524:	f107 0318 	add.w	r3, r7, #24
 8002528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800252a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800252e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002530:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002532:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002536:	ee06 0a10 	vmov	s12, r0
 800253a:	ee06 1a90 	vmov	s13, r1
 800253e:	ee07 2a10 	vmov	s14, r2
 8002542:	ee07 3a90 	vmov	s15, r3
}
 8002546:	eeb0 0a46 	vmov.f32	s0, s12
 800254a:	eef0 0a66 	vmov.f32	s1, s13
 800254e:	eeb0 1a47 	vmov.f32	s2, s14
 8002552:	eef0 1a67 	vmov.f32	s3, s15
 8002556:	3758      	adds	r7, #88	@ 0x58
 8002558:	46bd      	mov	sp, r7
 800255a:	bc90      	pop	{r4, r7}
 800255c:	4770      	bx	lr

0800255e <quatrotate>:
quaternion quatdivide(quaternion* _quat1, quaternion* _quat2) {
	quaternion qtemp = quatinv(_quat2);
	return quatmultiply(&qtemp, _quat1);
}

vector3D quatrotate(quaternion* q, vector3D* vect) {
 800255e:	b580      	push	{r7, lr}
 8002560:	b094      	sub	sp, #80	@ 0x50
 8002562:	af00      	add	r7, sp, #0
 8002564:	6178      	str	r0, [r7, #20]
 8002566:	6139      	str	r1, [r7, #16]
	// - P_out is the output vector
	// - q is the orientation quaternion
	// - P_in is the input vector (a*aReal)
	// - conj(q) is the conjugate of the orientation quaternion (q=[w,x,y,z], q*=[w,-x,-y,-z])

	quaternion p = { 0.0f, vect->x, vect->y, vect->z }, qtemp;
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	637b      	str	r3, [r7, #52]	@ 0x34
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	643b      	str	r3, [r7, #64]	@ 0x40

	// quaternion multiplication: q * p, stored back in p
	p = quatmultiply(q, &p);
 8002580:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002584:	4619      	mov	r1, r3
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f7ff ff2d 	bl	80023e6 <quatmultiply>
 800258c:	eeb0 6a40 	vmov.f32	s12, s0
 8002590:	eef0 6a60 	vmov.f32	s13, s1
 8002594:	eeb0 7a41 	vmov.f32	s14, s2
 8002598:	eef0 7a61 	vmov.f32	s15, s3
 800259c:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80025a0:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80025a4:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80025a8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// quaternion multiplication: p * conj(q), stored back in p
	qtemp = quatconj(q);
 80025ac:	6978      	ldr	r0, [r7, #20]
 80025ae:	f7ff fe23 	bl	80021f8 <quatconj>
 80025b2:	eeb0 6a40 	vmov.f32	s12, s0
 80025b6:	eef0 6a60 	vmov.f32	s13, s1
 80025ba:	eeb0 7a41 	vmov.f32	s14, s2
 80025be:	eef0 7a61 	vmov.f32	s15, s3
 80025c2:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 80025c6:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 80025ca:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 80025ce:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	p = quatmultiply(&p, &qtemp);
 80025d2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80025d6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025da:	4611      	mov	r1, r2
 80025dc:	4618      	mov	r0, r3
 80025de:	f7ff ff02 	bl	80023e6 <quatmultiply>
 80025e2:	eeb0 6a40 	vmov.f32	s12, s0
 80025e6:	eef0 6a60 	vmov.f32	s13, s1
 80025ea:	eeb0 7a41 	vmov.f32	s14, s2
 80025ee:	eef0 7a61 	vmov.f32	s15, s3
 80025f2:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80025f6:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80025fa:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80025fe:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

	// p quaternion is now [0, x', y', z']
	vector3D result;
	result.x = p.x;
 8002602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002604:	61bb      	str	r3, [r7, #24]
	result.y = p.y;
 8002606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002608:	61fb      	str	r3, [r7, #28]
	result.z = p.z;
 800260a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800260c:	623b      	str	r3, [r7, #32]
	return result;
 800260e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002612:	f107 0218 	add.w	r2, r7, #24
 8002616:	ca07      	ldmia	r2, {r0, r1, r2}
 8002618:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800261c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800261e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002620:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002622:	ee06 1a90 	vmov	s13, r1
 8002626:	ee07 2a10 	vmov	s14, r2
 800262a:	ee07 3a90 	vmov	s15, r3
}
 800262e:	eeb0 0a66 	vmov.f32	s0, s13
 8002632:	eef0 0a47 	vmov.f32	s1, s14
 8002636:	eeb0 1a67 	vmov.f32	s2, s15
 800263a:	3750      	adds	r7, #80	@ 0x50
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <quat2angle>:

// Quaternion to rotating angles (Euler angles)
// rotation order: yaw (Z), pitch (Y), roll (X)
angles3D quat2angle(quaternion* q) {
 8002640:	b580      	push	{r7, lr}
 8002642:	b090      	sub	sp, #64	@ 0x40
 8002644:	af00      	add	r7, sp, #0
 8002646:	6178      	str	r0, [r7, #20]
	angles3D angles;
	//float sinr_cosp, cosr_cosp, sinp, siny_cosp, cosy_cosp;
	float w, x, y, z;

	w = q->w;
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	63fb      	str	r3, [r7, #60]	@ 0x3c
	x = q->x;
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	63bb      	str	r3, [r7, #56]	@ 0x38
	y = q->y;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	637b      	str	r3, [r7, #52]	@ 0x34
	z = q->z;
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	633b      	str	r3, [r7, #48]	@ 0x30

//	angles.x = atan2(2 * x * y - 2 * w * z, 2 * w * w + 2 * x * x - 1);   // psi
//	angles.y = -asin(2 * x * z + 2 * w * y);                              // theta
//	angles.z = atan2(2 * y * z - 2 * w * x, 2 * w * w + 2 * z * z - 1);   // phi

	angles.x = atan2f(2.0f * (w * x + y * z), 1.0f - 2.0f * (x * x + y * y)); // roll (X)
 8002660:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002664:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002668:	ee27 7a27 	vmul.f32	s14, s14, s15
 800266c:	edd7 6a0d 	vldr	s13, [r7, #52]	@ 0x34
 8002670:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002674:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002678:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002680:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002684:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8002688:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800268c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002694:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002698:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800269c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026a0:	eef0 0a67 	vmov.f32	s1, s15
 80026a4:	eeb0 0a66 	vmov.f32	s0, s13
 80026a8:	f015 faba 	bl	8017c20 <atan2f>
 80026ac:	eef0 7a40 	vmov.f32	s15, s0
 80026b0:	edc7 7a06 	vstr	s15, [r7, #24]
	angles.y = asinf(2.0f * (w * y - z * x));                           // pitch (Y)
 80026b4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80026b8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80026bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026c0:	edd7 6a0c 	vldr	s13, [r7, #48]	@ 0x30
 80026c4:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 80026c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80026d4:	eeb0 0a67 	vmov.f32	s0, s15
 80026d8:	f015 fa76 	bl	8017bc8 <asinf>
 80026dc:	eef0 7a40 	vmov.f32	s15, s0
 80026e0:	edc7 7a07 	vstr	s15, [r7, #28]
	angles.z = atan2f(2.0f * (w * z + x * y), 1.0f - 2.0f * (y * y + z * z)); // yaw (Z)
 80026e4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80026e8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80026ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026f0:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80026f4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80026f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002700:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8002704:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8002708:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800270c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002710:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002718:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800271c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002720:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002724:	eef0 0a67 	vmov.f32	s1, s15
 8002728:	eeb0 0a66 	vmov.f32	s0, s13
 800272c:	f015 fa78 	bl	8017c20 <atan2f>
 8002730:	eef0 7a40 	vmov.f32	s15, s0
 8002734:	edc7 7a08 	vstr	s15, [r7, #32]

	return angles;
 8002738:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800273c:	f107 0218 	add.w	r2, r7, #24
 8002740:	ca07      	ldmia	r2, {r0, r1, r2}
 8002742:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8002746:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002748:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800274a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274c:	ee06 1a90 	vmov	s13, r1
 8002750:	ee07 2a10 	vmov	s14, r2
 8002754:	ee07 3a90 	vmov	s15, r3
}
 8002758:	eeb0 0a66 	vmov.f32	s0, s13
 800275c:	eef0 0a47 	vmov.f32	s1, s14
 8002760:	eeb0 1a67 	vmov.f32	s2, s15
 8002764:	3740      	adds	r7, #64	@ 0x40
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <quat2rotvec>:

vector3D quat2rotvec(quaternion q) {
 800276c:	b580      	push	{r7, lr}
 800276e:	b090      	sub	sp, #64	@ 0x40
 8002770:	af00      	add	r7, sp, #0
 8002772:	eeb0 6a40 	vmov.f32	s12, s0
 8002776:	eef0 6a60 	vmov.f32	s13, s1
 800277a:	eeb0 7a41 	vmov.f32	s14, s2
 800277e:	eef0 7a61 	vmov.f32	s15, s3
 8002782:	ed87 6a04 	vstr	s12, [r7, #16]
 8002786:	edc7 6a05 	vstr	s13, [r7, #20]
 800278a:	ed87 7a06 	vstr	s14, [r7, #24]
 800278e:	edc7 7a07 	vstr	s15, [r7, #28]
	q = quatnormalize(&q);
 8002792:	f107 0310 	add.w	r3, r7, #16
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fd6a 	bl	8002270 <quatnormalize>
 800279c:	eeb0 6a40 	vmov.f32	s12, s0
 80027a0:	eef0 6a60 	vmov.f32	s13, s1
 80027a4:	eeb0 7a41 	vmov.f32	s14, s2
 80027a8:	eef0 7a61 	vmov.f32	s15, s3
 80027ac:	ed87 6a04 	vstr	s12, [r7, #16]
 80027b0:	edc7 6a05 	vstr	s13, [r7, #20]
 80027b4:	ed87 7a06 	vstr	s14, [r7, #24]
 80027b8:	edc7 7a07 	vstr	s15, [r7, #28]
    // Ensure shortest rotation
    if (q.w < 0) {
 80027bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80027c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027c8:	d517      	bpl.n	80027fa <quat2rotvec+0x8e>
        q.w = -q.w;
 80027ca:	edd7 7a04 	vldr	s15, [r7, #16]
 80027ce:	eef1 7a67 	vneg.f32	s15, s15
 80027d2:	edc7 7a04 	vstr	s15, [r7, #16]
        q.x = -q.x;
 80027d6:	edd7 7a05 	vldr	s15, [r7, #20]
 80027da:	eef1 7a67 	vneg.f32	s15, s15
 80027de:	edc7 7a05 	vstr	s15, [r7, #20]
        q.y = -q.y;
 80027e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80027e6:	eef1 7a67 	vneg.f32	s15, s15
 80027ea:	edc7 7a06 	vstr	s15, [r7, #24]
        q.z = -q.z;
 80027ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80027f2:	eef1 7a67 	vneg.f32	s15, s15
 80027f6:	edc7 7a07 	vstr	s15, [r7, #28]
    }

    vector3D rotvec;
    float angle = 2.0f * acosf(q.w);
 80027fa:	edd7 7a04 	vldr	s15, [r7, #16]
 80027fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002802:	f015 f9b5 	bl	8017b70 <acosf>
 8002806:	eef0 7a40 	vmov.f32	s15, s0
 800280a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800280e:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    float s = sqrtf(1.0f - q.w * q.w);  // sin(angle/2)
 8002812:	ed97 7a04 	vldr	s14, [r7, #16]
 8002816:	edd7 7a04 	vldr	s15, [r7, #16]
 800281a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800281e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002826:	eeb0 0a67 	vmov.f32	s0, s15
 800282a:	f015 fa53 	bl	8017cd4 <sqrtf>
 800282e:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

    if (s <= FLT_EPSILON) {
 8002832:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002836:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80028d4 <quat2rotvec+0x168>
 800283a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800283e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002842:	d809      	bhi.n	8002858 <quat2rotvec+0xec>
        // If angle is too small, return zero vector
        rotvec.x = 0.0f;
 8002844:	f04f 0300 	mov.w	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
        rotvec.y = 0.0f;
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
        rotvec.z = 0.0f;
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002856:	e023      	b.n	80028a0 <quat2rotvec+0x134>
    } else {
        // Normalize axis and scale by angle
        rotvec.x = angle * (q.x / s);
 8002858:	edd7 6a05 	vldr	s13, [r7, #20]
 800285c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002860:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002864:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002868:	ee67 7a27 	vmul.f32	s15, s14, s15
 800286c:	edc7 7a08 	vstr	s15, [r7, #32]
        rotvec.y = angle * (q.y / s);
 8002870:	edd7 6a06 	vldr	s13, [r7, #24]
 8002874:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002878:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800287c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002880:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002884:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        rotvec.z = angle * (q.z / s);
 8002888:	edd7 6a07 	vldr	s13, [r7, #28]
 800288c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8002890:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002894:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8002898:	ee67 7a27 	vmul.f32	s15, s14, s15
 800289c:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    }

    return rotvec;
 80028a0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028a4:	f107 0220 	add.w	r2, r7, #32
 80028a8:	ca07      	ldmia	r2, {r0, r1, r2}
 80028aa:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80028ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80028b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b4:	ee06 1a90 	vmov	s13, r1
 80028b8:	ee07 2a10 	vmov	s14, r2
 80028bc:	ee07 3a90 	vmov	s15, r3
}
 80028c0:	eeb0 0a66 	vmov.f32	s0, s13
 80028c4:	eef0 0a47 	vmov.f32	s1, s14
 80028c8:	eeb0 1a67 	vmov.f32	s2, s15
 80028cc:	3740      	adds	r7, #64	@ 0x40
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	34000000 	.word	0x34000000

080028d8 <angle2quat>:

// rotation order: yaw (Z), pitch (Y), roll (X) in radians
quaternion angle2quat(angles3D* angles) {
 80028d8:	b590      	push	{r4, r7, lr}
 80028da:	b095      	sub	sp, #84	@ 0x54
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6178      	str	r0, [r7, #20]
	// Abbreviations for the various angular functions
	float cy = cosf(angles->z * 0.5f);
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	edd3 7a02 	vldr	s15, [r3, #8]
 80028e6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80028ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028ee:	eeb0 0a67 	vmov.f32	s0, s15
 80028f2:	f015 fae1 	bl	8017eb8 <cosf>
 80028f6:	ed87 0a13 	vstr	s0, [r7, #76]	@ 0x4c
	float sy = sinf(angles->z * 0.5f);
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002900:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002904:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002908:	eeb0 0a67 	vmov.f32	s0, s15
 800290c:	f015 fb20 	bl	8017f50 <sinf>
 8002910:	ed87 0a12 	vstr	s0, [r7, #72]	@ 0x48
	float cp = cosf(angles->y * 0.5f);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	edd3 7a01 	vldr	s15, [r3, #4]
 800291a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800291e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002922:	eeb0 0a67 	vmov.f32	s0, s15
 8002926:	f015 fac7 	bl	8017eb8 <cosf>
 800292a:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
	float sp = sinf(angles->y * 0.5f);
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	edd3 7a01 	vldr	s15, [r3, #4]
 8002934:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800293c:	eeb0 0a67 	vmov.f32	s0, s15
 8002940:	f015 fb06 	bl	8017f50 <sinf>
 8002944:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
	float cr = cosf(angles->x * 0.5f);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002952:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002956:	eeb0 0a67 	vmov.f32	s0, s15
 800295a:	f015 faad 	bl	8017eb8 <cosf>
 800295e:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
	float sr = sinf(angles->x * 0.5f);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800296c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002970:	eeb0 0a67 	vmov.f32	s0, s15
 8002974:	f015 faec 	bl	8017f50 <sinf>
 8002978:	ed87 0a0e 	vstr	s0, [r7, #56]	@ 0x38

	quaternion q;
	q.w = cr * cp * cy + sr * sp * sy;
 800297c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002980:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002984:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002988:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800298c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002990:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002994:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002998:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800299c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80029a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a8:	edc7 7a06 	vstr	s15, [r7, #24]
	q.x = sr * cp * cy - cr * sp * sy;
 80029ac:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80029b0:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80029b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029b8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80029bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029c0:	edd7 6a0f 	vldr	s13, [r7, #60]	@ 0x3c
 80029c4:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80029c8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029cc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80029d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029d8:	edc7 7a07 	vstr	s15, [r7, #28]
	q.y = cr * sp * cy + sr * cp * sy;
 80029dc:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80029e0:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 80029e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e8:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 80029ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029f0:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 80029f4:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80029f8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80029fc:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002a00:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a08:	edc7 7a08 	vstr	s15, [r7, #32]
	q.z = cr * cp * sy - sr * sp * cy;
 8002a0c:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8002a10:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8002a14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a18:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8002a1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a20:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8002a24:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8002a28:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002a2c:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8002a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a38:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	return q;
 8002a3c:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002a40:	f107 0318 	add.w	r3, r7, #24
 8002a44:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a46:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002a4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002a4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002a4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a52:	ee06 0a10 	vmov	s12, r0
 8002a56:	ee06 1a90 	vmov	s13, r1
 8002a5a:	ee07 2a10 	vmov	s14, r2
 8002a5e:	ee07 3a90 	vmov	s15, r3
}
 8002a62:	eeb0 0a46 	vmov.f32	s0, s12
 8002a66:	eef0 0a66 	vmov.f32	s1, s13
 8002a6a:	eeb0 1a47 	vmov.f32	s2, s14
 8002a6e:	eef0 1a67 	vmov.f32	s3, s15
 8002a72:	3754      	adds	r7, #84	@ 0x54
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd90      	pop	{r4, r7, pc}

08002a78 <quatadd>:

// Adds two quaternions together and the sum is the pointer to another quaternion, Sum = L + R
quaternion quatadd(quaternion *L, quaternion *R){
 8002a78:	b490      	push	{r4, r7}
 8002a7a:	b08e      	sub	sp, #56	@ 0x38
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6178      	str	r0, [r7, #20]
 8002a80:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w + R->w;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	ed93 7a00 	vldr	s14, [r3]
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a92:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x + R->x;
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002aa2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa6:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y + R->y;
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	ed93 7a02 	vldr	s14, [r3, #8]
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aba:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z + R->z;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	ed93 7a03 	vldr	s14, [r3, #12]
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	edd3 7a03 	vldr	s15, [r3, #12]
 8002aca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ace:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002ad2:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002ad6:	f107 0318 	add.w	r3, r7, #24
 8002ada:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002adc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002ae0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002ae2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ae6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae8:	ee06 0a10 	vmov	s12, r0
 8002aec:	ee06 1a90 	vmov	s13, r1
 8002af0:	ee07 2a10 	vmov	s14, r2
 8002af4:	ee07 3a90 	vmov	s15, r3
}
 8002af8:	eeb0 0a46 	vmov.f32	s0, s12
 8002afc:	eef0 0a66 	vmov.f32	s1, s13
 8002b00:	eeb0 1a47 	vmov.f32	s2, s14
 8002b04:	eef0 1a67 	vmov.f32	s3, s15
 8002b08:	3738      	adds	r7, #56	@ 0x38
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc90      	pop	{r4, r7}
 8002b0e:	4770      	bx	lr

08002b10 <quatsub>:

// Subtracts two quaternions together and the sum is the pointer to another quaternion, sum = L - R
quaternion quatsub(quaternion *L, quaternion *R){
 8002b10:	b490      	push	{r4, r7}
 8002b12:	b08e      	sub	sp, #56	@ 0x38
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6178      	str	r0, [r7, #20]
 8002b18:	6139      	str	r1, [r7, #16]
	quaternion res;
	res.w = L->w - R->w;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	ed93 7a00 	vldr	s14, [r3]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b2a:	edc7 7a06 	vstr	s15, [r7, #24]
	res.x = L->x - R->x;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	ed93 7a01 	vldr	s14, [r3, #4]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b3e:	edc7 7a07 	vstr	s15, [r7, #28]
	res.y = L->y - R->y;
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b52:	edc7 7a08 	vstr	s15, [r7, #32]
	res.z = L->z - R->z;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	ed93 7a03 	vldr	s14, [r3, #12]
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b62:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b66:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return res;
 8002b6a:	f107 0428 	add.w	r4, r7, #40	@ 0x28
 8002b6e:	f107 0318 	add.w	r3, r7, #24
 8002b72:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8002b78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b80:	ee06 0a10 	vmov	s12, r0
 8002b84:	ee06 1a90 	vmov	s13, r1
 8002b88:	ee07 2a10 	vmov	s14, r2
 8002b8c:	ee07 3a90 	vmov	s15, r3
}
 8002b90:	eeb0 0a46 	vmov.f32	s0, s12
 8002b94:	eef0 0a66 	vmov.f32	s1, s13
 8002b98:	eeb0 1a47 	vmov.f32	s2, s14
 8002b9c:	eef0 1a67 	vmov.f32	s3, s15
 8002ba0:	3738      	adds	r7, #56	@ 0x38
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc90      	pop	{r4, r7}
 8002ba6:	4770      	bx	lr

08002ba8 <quat_error>:

// Compute error quaternion: q_err = conj(current) * desired
quaternion quat_error(quaternion *q_current, quaternion *q_desired) {
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08e      	sub	sp, #56	@ 0x38
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6178      	str	r0, [r7, #20]
 8002bb0:	6139      	str	r1, [r7, #16]
    quaternion q_conj = quatconj(q_current);
 8002bb2:	6978      	ldr	r0, [r7, #20]
 8002bb4:	f7ff fb20 	bl	80021f8 <quatconj>
 8002bb8:	eeb0 6a40 	vmov.f32	s12, s0
 8002bbc:	eef0 6a60 	vmov.f32	s13, s1
 8002bc0:	eeb0 7a41 	vmov.f32	s14, s2
 8002bc4:	eef0 7a61 	vmov.f32	s15, s3
 8002bc8:	ed87 6a06 	vstr	s12, [r7, #24]
 8002bcc:	edc7 6a07 	vstr	s13, [r7, #28]
 8002bd0:	ed87 7a08 	vstr	s14, [r7, #32]
 8002bd4:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    return quatmultiply(q_desired, &q_conj);
 8002bd8:	f107 0318 	add.w	r3, r7, #24
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6938      	ldr	r0, [r7, #16]
 8002be0:	f7ff fc01 	bl	80023e6 <quatmultiply>
 8002be4:	eeb0 6a40 	vmov.f32	s12, s0
 8002be8:	eef0 6a60 	vmov.f32	s13, s1
 8002bec:	eeb0 7a41 	vmov.f32	s14, s2
 8002bf0:	eef0 7a61 	vmov.f32	s15, s3
 8002bf4:	ed87 6a0a 	vstr	s12, [r7, #40]	@ 0x28
 8002bf8:	edc7 6a0b 	vstr	s13, [r7, #44]	@ 0x2c
 8002bfc:	ed87 7a0c 	vstr	s14, [r7, #48]	@ 0x30
 8002c00:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 8002c04:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c06:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002c08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c0c:	ee06 0a10 	vmov	s12, r0
 8002c10:	ee06 1a90 	vmov	s13, r1
 8002c14:	ee07 2a10 	vmov	s14, r2
 8002c18:	ee07 3a90 	vmov	s15, r3
}
 8002c1c:	eeb0 0a46 	vmov.f32	s0, s12
 8002c20:	eef0 0a66 	vmov.f32	s1, s13
 8002c24:	eeb0 1a47 	vmov.f32	s2, s14
 8002c28:	eef0 1a67 	vmov.f32	s3, s15
 8002c2c:	3738      	adds	r7, #56	@ 0x38
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
	...

08002c34 <imu_init>:
	float accel_filter_cutoff_freq_hz,
	float gyro_filter_cutoff_freq_hz,
	float accel_sample_rate_hz,
	float gyro_sample_rate_hz,
	float madgwick_sample_rate_hz
) {
 8002c34:	b590      	push	{r4, r7, lr}
 8002c36:	b08b      	sub	sp, #44	@ 0x2c
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6178      	str	r0, [r7, #20]
 8002c3c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002c40:	edc7 0a03 	vstr	s1, [r7, #12]
 8002c44:	ed87 1a02 	vstr	s2, [r7, #8]
 8002c48:	edc7 1a01 	vstr	s3, [r7, #4]
 8002c4c:	ed87 2a00 	vstr	s4, [r7]
	memset(im, 0, sizeof(imu_t));
 8002c50:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8002c54:	2100      	movs	r1, #0
 8002c56:	6978      	ldr	r0, [r7, #20]
 8002c58:	f017 fe5c 	bl	801a914 <memset>

	imu_set_leveled_attitude(im, IMU_DEFAULT_LEVELD_ATTITUDE_Q); // set default leveld position to identity quaternion
 8002c5c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002c60:	61bb      	str	r3, [r7, #24]
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	61fb      	str	r3, [r7, #28]
 8002c68:	f04f 0300 	mov.w	r3, #0
 8002c6c:	623b      	str	r3, [r7, #32]
 8002c6e:	f04f 0300 	mov.w	r3, #0
 8002c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c74:	ed97 6a06 	vldr	s12, [r7, #24]
 8002c78:	edd7 6a07 	vldr	s13, [r7, #28]
 8002c7c:	ed97 7a08 	vldr	s14, [r7, #32]
 8002c80:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c84:	eeb0 0a46 	vmov.f32	s0, s12
 8002c88:	eef0 0a66 	vmov.f32	s1, s13
 8002c8c:	eeb0 1a47 	vmov.f32	s2, s14
 8002c90:	eef0 1a67 	vmov.f32	s3, s15
 8002c94:	6978      	ldr	r0, [r7, #20]
 8002c96:	f000 f85d 	bl	8002d54 <imu_set_leveled_attitude>
	im->estimated_q = im->leveld_attitude_q; // identity quaternion
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 8002ca2:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 8002ca6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ca8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	im->accel_misalignment_A_inv[0][0] = 1.0f; // default: no misalignment
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002cb2:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
	im->accel_misalignment_A_inv[1][1] = 1.0f; // default: no misalignment
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002cbc:	f8c3 2104 	str.w	r2, [r3, #260]	@ 0x104
	im->accel_misalignment_A_inv[2][2] = 1.0f; // default: no misalignment
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002cc6:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

	pt1_filter_init_lowpass(&(im->accel_pt1_filter_x), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	3388      	adds	r3, #136	@ 0x88
 8002cce:	edd7 0a02 	vldr	s1, [r7, #8]
 8002cd2:	ed97 0a04 	vldr	s0, [r7, #16]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7fe fcba 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_y), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	3398      	adds	r3, #152	@ 0x98
 8002ce0:	edd7 0a02 	vldr	s1, [r7, #8]
 8002ce4:	ed97 0a04 	vldr	s0, [r7, #16]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fe fcb1 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->accel_pt1_filter_z), accel_filter_cutoff_freq_hz, accel_sample_rate_hz);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	33a8      	adds	r3, #168	@ 0xa8
 8002cf2:	edd7 0a02 	vldr	s1, [r7, #8]
 8002cf6:	ed97 0a04 	vldr	s0, [r7, #16]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7fe fca8 	bl	8001650 <pt1_filter_init_lowpass>

	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_x), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	33b8      	adds	r3, #184	@ 0xb8
 8002d04:	edd7 0a01 	vldr	s1, [r7, #4]
 8002d08:	ed97 0a03 	vldr	s0, [r7, #12]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe fc9f 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_y), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	33c8      	adds	r3, #200	@ 0xc8
 8002d16:	edd7 0a01 	vldr	s1, [r7, #4]
 8002d1a:	ed97 0a03 	vldr	s0, [r7, #12]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fc96 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(im->gyro_pt1_filter_z), gyro_filter_cutoff_freq_hz, gyro_sample_rate_hz);
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	33d8      	adds	r3, #216	@ 0xd8
 8002d28:	edd7 0a01 	vldr	s1, [r7, #4]
 8002d2c:	ed97 0a03 	vldr	s0, [r7, #12]
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7fe fc8d 	bl	8001650 <pt1_filter_init_lowpass>

	madgwick_filter_init(&(im->madgwick_filter), madgwick_sample_rate_hz, (float)IMU_GYRO_MEAN_ERROR_RAD);
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	3370      	adds	r3, #112	@ 0x70
 8002d3a:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8002d50 <imu_init+0x11c>
 8002d3e:	ed97 0a00 	vldr	s0, [r7]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fa70 	bl	8003228 <madgwick_filter_init>
}
 8002d48:	bf00      	nop
 8002d4a:	372c      	adds	r7, #44	@ 0x2c
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd90      	pop	{r4, r7, pc}
 8002d50:	3db2b8c2 	.word	0x3db2b8c2

08002d54 <imu_set_leveled_attitude>:

void imu_set_leveled_attitude(imu_t* im, quaternion leveld_attitude_q) {
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b08f      	sub	sp, #60	@ 0x3c
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6178      	str	r0, [r7, #20]
 8002d5c:	eeb0 6a40 	vmov.f32	s12, s0
 8002d60:	eef0 6a60 	vmov.f32	s13, s1
 8002d64:	eeb0 7a41 	vmov.f32	s14, s2
 8002d68:	eef0 7a61 	vmov.f32	s15, s3
 8002d6c:	ed87 6a01 	vstr	s12, [r7, #4]
 8002d70:	edc7 6a02 	vstr	s13, [r7, #8]
 8002d74:	ed87 7a03 	vstr	s14, [r7, #12]
 8002d78:	edc7 7a04 	vstr	s15, [r7, #16]
	quaternion q_ref = IMU_DEFAULT_LEVELD_ATTITUDE_Q;      // "leveled = identity"
 8002d7c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002d82:	f04f 0300 	mov.w	r3, #0
 8002d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d88:	f04f 0300 	mov.w	r3, #0
 8002d8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	637b      	str	r3, [r7, #52]	@ 0x34
	im->q_offset = quat_error(&q_ref, &leveld_attitude_q);
 8002d94:	697c      	ldr	r4, [r7, #20]
 8002d96:	1d3a      	adds	r2, r7, #4
 8002d98:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002d9c:	4611      	mov	r1, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f7ff ff02 	bl	8002ba8 <quat_error>
 8002da4:	eeb0 6a40 	vmov.f32	s12, s0
 8002da8:	eef0 6a60 	vmov.f32	s13, s1
 8002dac:	eeb0 7a41 	vmov.f32	s14, s2
 8002db0:	eef0 7a61 	vmov.f32	s15, s3
 8002db4:	ed84 6a4d 	vstr	s12, [r4, #308]	@ 0x134
 8002db8:	edc4 6a4e 	vstr	s13, [r4, #312]	@ 0x138
 8002dbc:	ed84 7a4f 	vstr	s14, [r4, #316]	@ 0x13c
 8002dc0:	edc4 7a50 	vstr	s15, [r4, #320]	@ 0x140
}
 8002dc4:	bf00      	nop
 8002dc6:	373c      	adds	r7, #60	@ 0x3c
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd90      	pop	{r4, r7, pc}

08002dcc <imu_update_gyro>:

void imu_update_gyro(imu_t* im, coord3D imu_raw_gyro_rad) {
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	eef0 6a40 	vmov.f32	s13, s0
 8002dd8:	eeb0 7a60 	vmov.f32	s14, s1
 8002ddc:	eef0 7a41 	vmov.f32	s15, s2
 8002de0:	edc7 6a00 	vstr	s13, [r7]
 8002de4:	ed87 7a01 	vstr	s14, [r7, #4]
 8002de8:	edc7 7a02 	vstr	s15, [r7, #8]

	im->raw_gyro = imu_raw_gyro_rad; // store raw gyro data
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	330c      	adds	r3, #12
 8002df0:	463a      	mov	r2, r7
 8002df2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002df4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->calibrated_gyro.x = imu_raw_gyro_rad.x - im->gyro_bias[0];
 8002df8:	ed97 7a00 	vldr	s14, [r7]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	edd3 7a46 	vldr	s15, [r3, #280]	@ 0x118
 8002e02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	im->calibrated_gyro.y = imu_raw_gyro_rad.y - im->gyro_bias[1];
 8002e0c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	edd3 7a47 	vldr	s15, [r3, #284]	@ 0x11c
 8002e16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	im->calibrated_gyro.z = imu_raw_gyro_rad.z - im->gyro_bias[2];
 8002e20:	ed97 7a02 	vldr	s14, [r7, #8]
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	edd3 7a48 	vldr	s15, [r3, #288]	@ 0x120
 8002e2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c

	im->filtered_gyro.x = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_x), im->calibrated_gyro.x);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f103 02b8 	add.w	r2, r3, #184	@ 0xb8
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8002e40:	eeb0 0a67 	vmov.f32	s0, s15
 8002e44:	4610      	mov	r0, r2
 8002e46:	f7fe fc67 	bl	8001718 <pt1_filter_apply_lowpass>
 8002e4a:	eef0 7a40 	vmov.f32	s15, s0
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
	im->filtered_gyro.y = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_y), im->calibrated_gyro.y);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f103 02c8 	add.w	r2, r3, #200	@ 0xc8
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002e60:	eeb0 0a67 	vmov.f32	s0, s15
 8002e64:	4610      	mov	r0, r2
 8002e66:	f7fe fc57 	bl	8001718 <pt1_filter_apply_lowpass>
 8002e6a:	eef0 7a40 	vmov.f32	s15, s0
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	im->filtered_gyro.z = pt1_filter_apply_lowpass(&(im->gyro_pt1_filter_z), im->calibrated_gyro.z);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f103 02d8 	add.w	r2, r3, #216	@ 0xd8
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002e80:	eeb0 0a67 	vmov.f32	s0, s15
 8002e84:	4610      	mov	r0, r2
 8002e86:	f7fe fc47 	bl	8001718 <pt1_filter_apply_lowpass>
 8002e8a:	eef0 7a40 	vmov.f32	s15, s0
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	edc3 7a11 	vstr	s15, [r3, #68]	@ 0x44

	im->body_frame_gyro = quatrotate(&(im->q_offset), &(im->filtered_gyro));
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	333c      	adds	r3, #60	@ 0x3c
 8002e9e:	68fc      	ldr	r4, [r7, #12]
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	4610      	mov	r0, r2
 8002ea4:	f7ff fb5b 	bl	800255e <quatrotate>
 8002ea8:	eef0 6a40 	vmov.f32	s13, s0
 8002eac:	eeb0 7a60 	vmov.f32	s14, s1
 8002eb0:	eef0 7a41 	vmov.f32	s15, s2
 8002eb4:	edc4 6a15 	vstr	s13, [r4, #84]	@ 0x54
 8002eb8:	ed84 7a16 	vstr	s14, [r4, #88]	@ 0x58
 8002ebc:	edc4 7a17 	vstr	s15, [r4, #92]	@ 0x5c
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd90      	pop	{r4, r7, pc}

08002ec8 <imu_update_accel>:

void imu_update_accel(imu_t* im, coord3D imu_raw_accel_m_s2) {
 8002ec8:	b5b0      	push	{r4, r5, r7, lr}
 8002eca:	b086      	sub	sp, #24
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	eef0 6a40 	vmov.f32	s13, s0
 8002ed4:	eeb0 7a60 	vmov.f32	s14, s1
 8002ed8:	eef0 7a41 	vmov.f32	s15, s2
 8002edc:	edc7 6a00 	vstr	s13, [r7]
 8002ee0:	ed87 7a01 	vstr	s14, [r7, #4]
 8002ee4:	edc7 7a02 	vstr	s15, [r7, #8]
	im->raw_accel = imu_raw_accel_m_s2;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	461c      	mov	r4, r3
 8002eec:	463b      	mov	r3, r7
 8002eee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	
	MagCal(&(imu_raw_accel_m_s2.x), &(imu_raw_accel_m_s2.y), &(imu_raw_accel_m_s2.z), im->accel_bias, im->accel_misalignment_A_inv);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f103 05e8 	add.w	r5, r3, #232	@ 0xe8
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	33f4      	adds	r3, #244	@ 0xf4
 8002f00:	463a      	mov	r2, r7
 8002f02:	f102 0408 	add.w	r4, r2, #8
 8002f06:	463a      	mov	r2, r7
 8002f08:	1d11      	adds	r1, r2, #4
 8002f0a:	4638      	mov	r0, r7
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	462b      	mov	r3, r5
 8002f10:	4622      	mov	r2, r4
 8002f12:	f7ff f8a9 	bl	8002068 <MagCal>

	im->calibrated_accel = imu_raw_accel_m_s2;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	3318      	adds	r3, #24
 8002f1a:	463a      	mov	r2, r7
 8002f1c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002f1e:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	im->filtered_accel.x = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_x), imu_raw_accel_m_s2.x);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3388      	adds	r3, #136	@ 0x88
 8002f26:	edd7 7a00 	vldr	s15, [r7]
 8002f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f7fe fbf2 	bl	8001718 <pt1_filter_apply_lowpass>
 8002f34:	eef0 7a40 	vmov.f32	s15, s0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	im->filtered_accel.y = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_y), imu_raw_accel_m_s2.y);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	3398      	adds	r3, #152	@ 0x98
 8002f42:	edd7 7a01 	vldr	s15, [r7, #4]
 8002f46:	eeb0 0a67 	vmov.f32	s0, s15
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe fbe4 	bl	8001718 <pt1_filter_apply_lowpass>
 8002f50:	eef0 7a40 	vmov.f32	s15, s0
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	edc3 7a0d 	vstr	s15, [r3, #52]	@ 0x34
	im->filtered_accel.z = pt1_filter_apply_lowpass(&(im->accel_pt1_filter_z), imu_raw_accel_m_s2.z);
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	33a8      	adds	r3, #168	@ 0xa8
 8002f5e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f62:	eeb0 0a67 	vmov.f32	s0, s15
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7fe fbd6 	bl	8001718 <pt1_filter_apply_lowpass>
 8002f6c:	eef0 7a40 	vmov.f32	s15, s0
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	im->body_frame_accel = quatrotate(&(im->q_offset), &(im->filtered_accel));
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f503 729a 	add.w	r2, r3, #308	@ 0x134
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	3330      	adds	r3, #48	@ 0x30
 8002f80:	68fc      	ldr	r4, [r7, #12]
 8002f82:	4619      	mov	r1, r3
 8002f84:	4610      	mov	r0, r2
 8002f86:	f7ff faea 	bl	800255e <quatrotate>
 8002f8a:	eef0 6a40 	vmov.f32	s13, s0
 8002f8e:	eeb0 7a60 	vmov.f32	s14, s1
 8002f92:	eef0 7a41 	vmov.f32	s15, s2
 8002f96:	edc4 6a12 	vstr	s13, [r4, #72]	@ 0x48
 8002f9a:	ed84 7a13 	vstr	s14, [r4, #76]	@ 0x4c
 8002f9e:	edc4 7a14 	vstr	s15, [r4, #80]	@ 0x50
}
 8002fa2:	bf00      	nop
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bdb0      	pop	{r4, r5, r7, pc}

08002faa <imu_update_madgwick>:

void imu_update_madgwick(imu_t* im) {
 8002faa:	b590      	push	{r4, r7, lr}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
	madgwick_filter_apply(
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
		&(im->madgwick_filter),
		-im->body_frame_accel.x,
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	edd3 7a12 	vldr	s15, [r3, #72]	@ 0x48
	madgwick_filter_apply(
 8002fbe:	eeb1 7a67 	vneg.f32	s14, s15
		-im->body_frame_accel.y,
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	edd3 7a13 	vldr	s15, [r3, #76]	@ 0x4c
	madgwick_filter_apply(
 8002fc8:	eef1 6a67 	vneg.f32	s13, s15
		-im->body_frame_accel.z,
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
	madgwick_filter_apply(
 8002fd2:	eef1 7a67 	vneg.f32	s15, s15
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	ed93 6a15 	vldr	s12, [r3, #84]	@ 0x54
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	edd3 5a16 	vldr	s11, [r3, #88]	@ 0x58
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	ed93 5a17 	vldr	s10, [r3, #92]	@ 0x5c
 8002fe8:	eef0 2a45 	vmov.f32	s5, s10
 8002fec:	eeb0 2a65 	vmov.f32	s4, s11
 8002ff0:	eef0 1a46 	vmov.f32	s3, s12
 8002ff4:	eeb0 1a67 	vmov.f32	s2, s15
 8002ff8:	eef0 0a66 	vmov.f32	s1, s13
 8002ffc:	eeb0 0a47 	vmov.f32	s0, s14
 8003000:	4610      	mov	r0, r2
 8003002:	f000 f935 	bl	8003270 <madgwick_filter_apply>
//		-im->body_frame_gyro.z
//	);

	//im->estimated_q = quatmultiply(&(im->q_offset), &(im->madgwick_filter.q_est));
	//im->estimated_q = quatnormalize(&(im->madgwick_filter.q_est));
	im->estimated_q = im->madgwick_filter.q_est;
 8003006:	687a      	ldr	r2, [r7, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f102 0460 	add.w	r4, r2, #96	@ 0x60
 800300e:	3370      	adds	r3, #112	@ 0x70
 8003010:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003012:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bd90      	pop	{r4, r7, pc}

0800301e <imu_update>:

void imu_update(imu_t* im, coord3D imu_raw_accel_m_s2, coord3D imu_raw_gyro_rad) {
 800301e:	b580      	push	{r7, lr}
 8003020:	b088      	sub	sp, #32
 8003022:	af00      	add	r7, sp, #0
 8003024:	61f8      	str	r0, [r7, #28]
 8003026:	eeb0 5a40 	vmov.f32	s10, s0
 800302a:	eef0 5a60 	vmov.f32	s11, s1
 800302e:	eeb0 6a41 	vmov.f32	s12, s2
 8003032:	eef0 6a61 	vmov.f32	s13, s3
 8003036:	eeb0 7a42 	vmov.f32	s14, s4
 800303a:	eef0 7a62 	vmov.f32	s15, s5
 800303e:	ed87 5a04 	vstr	s10, [r7, #16]
 8003042:	edc7 5a05 	vstr	s11, [r7, #20]
 8003046:	ed87 6a06 	vstr	s12, [r7, #24]
 800304a:	edc7 6a01 	vstr	s13, [r7, #4]
 800304e:	ed87 7a02 	vstr	s14, [r7, #8]
 8003052:	edc7 7a03 	vstr	s15, [r7, #12]
	imu_update_accel(im, imu_raw_accel_m_s2);
 8003056:	edd7 6a04 	vldr	s13, [r7, #16]
 800305a:	ed97 7a05 	vldr	s14, [r7, #20]
 800305e:	edd7 7a06 	vldr	s15, [r7, #24]
 8003062:	eeb0 0a66 	vmov.f32	s0, s13
 8003066:	eef0 0a47 	vmov.f32	s1, s14
 800306a:	eeb0 1a67 	vmov.f32	s2, s15
 800306e:	69f8      	ldr	r0, [r7, #28]
 8003070:	f7ff ff2a 	bl	8002ec8 <imu_update_accel>
	imu_update_gyro(im, imu_raw_gyro_rad);
 8003074:	edd7 6a01 	vldr	s13, [r7, #4]
 8003078:	ed97 7a02 	vldr	s14, [r7, #8]
 800307c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003080:	eeb0 0a66 	vmov.f32	s0, s13
 8003084:	eef0 0a47 	vmov.f32	s1, s14
 8003088:	eeb0 1a67 	vmov.f32	s2, s15
 800308c:	69f8      	ldr	r0, [r7, #28]
 800308e:	f7ff fe9d 	bl	8002dcc <imu_update_gyro>
	imu_update_madgwick(im);
 8003092:	69f8      	ldr	r0, [r7, #28]
 8003094:	f7ff ff89 	bl	8002faa <imu_update_madgwick>
}
 8003098:	bf00      	nop
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <imu_set_gyro_bias>:

void imu_set_gyro_bias(imu_t* im, coord3D gyro_bias) {
 80030a0:	b480      	push	{r7}
 80030a2:	b085      	sub	sp, #20
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	eef0 6a40 	vmov.f32	s13, s0
 80030ac:	eeb0 7a60 	vmov.f32	s14, s1
 80030b0:	eef0 7a41 	vmov.f32	s15, s2
 80030b4:	edc7 6a00 	vstr	s13, [r7]
 80030b8:	ed87 7a01 	vstr	s14, [r7, #4]
 80030bc:	edc7 7a02 	vstr	s15, [r7, #8]
	im->gyro_bias[0] = gyro_bias.x;
 80030c0:	683a      	ldr	r2, [r7, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
	im->gyro_bias[1] = gyro_bias.y;
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
	im->gyro_bias[2] = gyro_bias.z;
 80030d0:	68ba      	ldr	r2, [r7, #8]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 80030d8:	bf00      	nop
 80030da:	3714      	adds	r7, #20
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <imu_set_accel_bias>:

void imu_set_accel_bias(imu_t* im, coord3D accel_bias, float accel_misalignment_A_1[3][3]) {
 80030e4:	b480      	push	{r7}
 80030e6:	b089      	sub	sp, #36	@ 0x24
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6178      	str	r0, [r7, #20]
 80030ec:	eef0 6a40 	vmov.f32	s13, s0
 80030f0:	eeb0 7a60 	vmov.f32	s14, s1
 80030f4:	eef0 7a41 	vmov.f32	s15, s2
 80030f8:	6079      	str	r1, [r7, #4]
 80030fa:	edc7 6a02 	vstr	s13, [r7, #8]
 80030fe:	ed87 7a03 	vstr	s14, [r7, #12]
 8003102:	edc7 7a04 	vstr	s15, [r7, #16]
	im->accel_bias[0] = accel_bias.x;
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
	im->accel_bias[1] = accel_bias.y;
 800310e:	68fa      	ldr	r2, [r7, #12]
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f8c3 20ec 	str.w	r2, [r3, #236]	@ 0xec
	im->accel_bias[2] = accel_bias.z;
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	697b      	ldr	r3, [r7, #20]
 800311a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0

	for (size_t i = 0; i < 3; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	61fb      	str	r3, [r7, #28]
 8003122:	e023      	b.n	800316c <imu_set_accel_bias+0x88>
	{
		for (size_t j = 0; j < 3; j++) {
 8003124:	2300      	movs	r3, #0
 8003126:	61bb      	str	r3, [r7, #24]
 8003128:	e01a      	b.n	8003160 <imu_set_accel_bias+0x7c>
			im->accel_misalignment_A_inv[i][j] = accel_misalignment_A_1[i][j];
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	4613      	mov	r3, r2
 800312e:	005b      	lsls	r3, r3, #1
 8003130:	4413      	add	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	461a      	mov	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	441a      	add	r2, r3
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	6819      	ldr	r1, [r3, #0]
 8003142:	6978      	ldr	r0, [r7, #20]
 8003144:	69fa      	ldr	r2, [r7, #28]
 8003146:	4613      	mov	r3, r2
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	4413      	add	r3, r2
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4413      	add	r3, r2
 8003150:	333c      	adds	r3, #60	@ 0x3c
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4403      	add	r3, r0
 8003156:	3304      	adds	r3, #4
 8003158:	6019      	str	r1, [r3, #0]
		for (size_t j = 0; j < 3; j++) {
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	3301      	adds	r3, #1
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d9e1      	bls.n	800312a <imu_set_accel_bias+0x46>
	for (size_t i = 0; i < 3; i++)
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	3301      	adds	r3, #1
 800316a:	61fb      	str	r3, [r7, #28]
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d9d8      	bls.n	8003124 <imu_set_accel_bias+0x40>
		}
	}
}
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	3724      	adds	r7, #36	@ 0x24
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <imu_get_estimated_data>:


void imu_get_estimated_data(imu_t* im, quaternion* estimated_q, coord3D* estimated_acc, coord3D* estimated_gyro) {
 8003180:	b490      	push	{r4, r7}
 8003182:	b084      	sub	sp, #16
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]
 800318c:	603b      	str	r3, [r7, #0]
	if (estimated_q) {
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d006      	beq.n	80031a2 <imu_get_estimated_data+0x22>
		*estimated_q = im->estimated_q;
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4614      	mov	r4, r2
 800319a:	3360      	adds	r3, #96	@ 0x60
 800319c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800319e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	}

	if (estimated_acc) {
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <imu_get_estimated_data+0x38>
		*estimated_acc = im->body_frame_accel;
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4614      	mov	r4, r2
 80031ae:	3348      	adds	r3, #72	@ 0x48
 80031b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}

	if (estimated_gyro) {
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <imu_get_estimated_data+0x4e>
		*estimated_gyro = im->body_frame_gyro;
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	4614      	mov	r4, r2
 80031c4:	3354      	adds	r3, #84	@ 0x54
 80031c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031ca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 80031ce:	bf00      	nop
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc90      	pop	{r4, r7}
 80031d6:	4770      	bx	lr

080031d8 <imu_get_raw_accel_data>:

void imu_get_raw_accel_data(imu_t* im, coord3D* raw_acc){
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
	if (raw_acc) {
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <imu_get_raw_accel_data+0x1a>
		*raw_acc = im->raw_accel;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80031ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	}
}
 80031f2:	bf00      	nop
 80031f4:	370c      	adds	r7, #12
 80031f6:	46bd      	mov	sp, r7
 80031f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fc:	4770      	bx	lr

080031fe <imu_get_raw_gyro_data>:

void imu_get_raw_gyro_data(imu_t* im, coord3D* raw_gyro){
 80031fe:	b490      	push	{r4, r7}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
 8003206:	6039      	str	r1, [r7, #0]
		if (raw_gyro) {
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d007      	beq.n	800321e <imu_get_raw_gyro_data+0x20>
		*raw_gyro = im->raw_gyro;
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4614      	mov	r4, r2
 8003214:	330c      	adds	r3, #12
 8003216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800321a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	}
}
 800321e:	bf00      	nop
 8003220:	3708      	adds	r7, #8
 8003222:	46bd      	mov	sp, r7
 8003224:	bc90      	pop	{r4, r7}
 8003226:	4770      	bx	lr

08003228 <madgwick_filter_init>:
    //#define BETA(gyro_mean_error) (sqrt(3.0f/4.0f) * gyro_mean_error)    //*from paper*
	#define BETA(gyro_mean_error) (0.866025403784439f * gyro_mean_error)    //*from paper*
#endif


void madgwick_filter_init(madgwick_filter_t* filter, float sampling_freq, float gyro_mean_error) {
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	ed87 0a02 	vstr	s0, [r7, #8]
 8003234:	edc7 0a01 	vstr	s1, [r7, #4]
	filter->q_est.w = 1.0f;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800323e:	601a      	str	r2, [r3, #0]
	filter->q_est.x = 0.0f;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
	filter->q_est.y = 0.0f;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f04f 0200 	mov.w	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
	filter->q_est.z = 0.0f;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f04f 0200 	mov.w	r2, #0
 8003256:	60da      	str	r2, [r3, #12]

	filter->sampling_freq = sampling_freq;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	611a      	str	r2, [r3, #16]
	filter->gyro_mean_error = gyro_mean_error;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	615a      	str	r2, [r3, #20]
}
 8003264:	bf00      	nop
 8003266:	3714      	adds	r7, #20
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <madgwick_filter_apply>:


// The resulting quaternion is a global variable (q_est), so it is not returned or passed by reference/pointer
// Gyroscope Angular Velocity components are in Radians per Second
// Accelerometer componets will be normalized
void madgwick_filter_apply(madgwick_filter_t *filter, float ax, float ay, float az, float gx, float gy, float gz){
 8003270:	b590      	push	{r4, r7, lr}
 8003272:	b0b1      	sub	sp, #196	@ 0xc4
 8003274:	af00      	add	r7, sp, #0
 8003276:	61f8      	str	r0, [r7, #28]
 8003278:	ed87 0a06 	vstr	s0, [r7, #24]
 800327c:	edc7 0a05 	vstr	s1, [r7, #20]
 8003280:	ed87 1a04 	vstr	s2, [r7, #16]
 8003284:	edc7 1a03 	vstr	s3, [r7, #12]
 8003288:	ed87 2a02 	vstr	s4, [r7, #8]
 800328c:	edc7 2a01 	vstr	s5, [r7, #4]

    //Variables and constants
	quaternion q_est = filter->q_est;
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f107 04b0 	add.w	r4, r7, #176	@ 0xb0
 8003296:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003298:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_prev = q_est;
 800329c:	f107 04a0 	add.w	r4, r7, #160	@ 0xa0
 80032a0:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80032a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80032a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    struct quaternion q_est_dot = {0.0f};            // used as a place holder in equations 42 and 43
 80032aa:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 80032ae:	2200      	movs	r2, #0
 80032b0:	601a      	str	r2, [r3, #0]
 80032b2:	605a      	str	r2, [r3, #4]
 80032b4:	609a      	str	r2, [r3, #8]
 80032b6:	60da      	str	r2, [r3, #12]
    //const struct quaternion q_g_ref = {0, 0, 0, 1};// equation (23), reference to field of gravity for gradient descent optimization (not needed because I used eq 25 instead of eq 21
    struct quaternion q_a = {0.0f, ax, ay, az};    // equation (24) raw acceleration values, needs to be normalized
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    float F_g [3] = {0};                        // equation(15/21/25) objective function for gravity
 80032d2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80032d6:	2200      	movs	r2, #0
 80032d8:	601a      	str	r2, [r3, #0]
 80032da:	605a      	str	r2, [r3, #4]
 80032dc:	609a      	str	r2, [r3, #8]
    float J_g [3][4] = {0};                   // jacobian matrix for gravity
 80032de:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80032e2:	2230      	movs	r2, #48	@ 0x30
 80032e4:	2100      	movs	r1, #0
 80032e6:	4618      	mov	r0, r3
 80032e8:	f017 fb14 	bl	801a914 <memset>

    struct quaternion gradient = {0.0f};
 80032ec:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
 80032f6:	609a      	str	r2, [r3, #8]
 80032f8:	60da      	str	r2, [r3, #12]

    /* Integrate angluar velocity to obtain position in angles. */
    struct quaternion q_w;                   // equation (10), places gyroscope readings in a quaternion
    q_w.w = 0.0f;                              // the real component is zero, which the Madgwick uses to simplfy quat. mult.
 80032fa:	f04f 0300 	mov.w	r3, #0
 80032fe:	627b      	str	r3, [r7, #36]	@ 0x24
    q_w.x = gx;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	62bb      	str	r3, [r7, #40]	@ 0x28
    q_w.y = gy;
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	62fb      	str	r3, [r7, #44]	@ 0x2c
    q_w.z = gz;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	633b      	str	r3, [r7, #48]	@ 0x30

    q_w = quatmultiply_scalar(&q_w, 0.5f);                  // equation (12) dq/dt = (1/2)q*w
 800330c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003310:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff f81d 	bl	8002354 <quatmultiply_scalar>
 800331a:	eeb0 6a40 	vmov.f32	s12, s0
 800331e:	eef0 6a60 	vmov.f32	s13, s1
 8003322:	eeb0 7a41 	vmov.f32	s14, s2
 8003326:	eef0 7a61 	vmov.f32	s15, s3
 800332a:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800332e:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8003332:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8003336:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    q_w = quatmultiply(&q_est_prev, &q_w);        // equation (12)
 800333a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800333e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff f84e 	bl	80023e6 <quatmultiply>
 800334a:	eeb0 6a40 	vmov.f32	s12, s0
 800334e:	eef0 6a60 	vmov.f32	s13, s1
 8003352:	eeb0 7a41 	vmov.f32	s14, s2
 8003356:	eef0 7a61 	vmov.f32	s15, s3
 800335a:	ed87 6a09 	vstr	s12, [r7, #36]	@ 0x24
 800335e:	edc7 6a0a 	vstr	s13, [r7, #40]	@ 0x28
 8003362:	ed87 7a0b 	vstr	s14, [r7, #44]	@ 0x2c
 8003366:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
     The matrix multiplcation can also be done hard coded to reduce code.

     Note: it is possible to compute the objective function with quaternion multiplcation functions, but it does not take into account the many zeros that cancel terms out and is not optimized like the paper shows
     */

    q_a = quatnormalize(&q_a);              // normalize the acceleration quaternion to be a unit quaternion
 800336a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe ff7e 	bl	8002270 <quatnormalize>
 8003374:	eeb0 6a40 	vmov.f32	s12, s0
 8003378:	eef0 6a60 	vmov.f32	s13, s1
 800337c:	eeb0 7a41 	vmov.f32	s14, s2
 8003380:	eef0 7a61 	vmov.f32	s15, s3
 8003384:	ed87 6a20 	vstr	s12, [r7, #128]	@ 0x80
 8003388:	edc7 6a21 	vstr	s13, [r7, #132]	@ 0x84
 800338c:	ed87 7a22 	vstr	s14, [r7, #136]	@ 0x88
 8003390:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    //Compute the objective function for gravity, equation(15), simplified to equation (25) due to the 0's in the acceleration reference quaternion
    F_g[0] = 2*(q_est_prev.x * q_est_prev.z - q_est_prev.w * q_est_prev.y) - q_a.x;
 8003394:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003398:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 800339c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033a0:	edd7 6a28 	vldr	s13, [r7, #160]	@ 0xa0
 80033a4:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80033a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80033b4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80033b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033bc:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
    F_g[1] = 2*(q_est_prev.w * q_est_prev.x + q_est_prev.y* q_est_prev.z) - q_a.y;
 80033c0:	ed97 7a28 	vldr	s14, [r7, #160]	@ 0xa0
 80033c4:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80033c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033cc:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 80033d0:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80033d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80033d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033dc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80033e0:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 80033e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033e8:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
    F_g[2] = 2*(0.5f - q_est_prev.x * q_est_prev.x - q_est_prev.y * q_est_prev.y) - q_a.z;
 80033ec:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 80033f0:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80033f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80033fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003400:	edd7 6a2a 	vldr	s13, [r7, #168]	@ 0xa8
 8003404:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003408:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800340c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003410:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003414:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8003418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800341c:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c

    //Compute the Jacobian matrix, equation (26), for gravity
    J_g[0][0] = -2.0f * q_est_prev.y;
 8003420:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003424:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003428:	ee67 7a87 	vmul.f32	s15, s15, s14
 800342c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    J_g[0][1] =  2.0f * q_est_prev.z;
 8003430:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003434:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003438:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    J_g[0][2] = -2.0f * q_est_prev.w;
 800343c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003440:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8003444:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003448:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    J_g[0][3] =  2.0f * q_est_prev.x;
 800344c:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003450:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003454:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50

    J_g[1][0] = 2.0f * q_est_prev.x;
 8003458:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 800345c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003460:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    J_g[1][1] = 2.0f * q_est_prev.w;
 8003464:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8003468:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800346c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    J_g[1][2] = 2.0f * q_est_prev.z;
 8003470:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8003474:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003478:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    J_g[1][3] = 2.0f * q_est_prev.y;
 800347c:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8003480:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003484:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

    J_g[2][0] = 0.0f;
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	667b      	str	r3, [r7, #100]	@ 0x64
    J_g[2][1] = -4.0f * q_est_prev.x;
 800348e:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8003492:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 8003496:	ee67 7a87 	vmul.f32	s15, s15, s14
 800349a:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    J_g[2][2] = -4.0f * q_est_prev.y;
 800349e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80034a2:	eeb9 7a00 	vmov.f32	s14, #144	@ 0xc0800000 -4.0
 80034a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034aa:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    J_g[2][3] = 0.0f;
 80034ae:	f04f 0300 	mov.w	r3, #0
 80034b2:	673b      	str	r3, [r7, #112]	@ 0x70

    // now computer the gradient, equation (20), gradient = J_g'*F_g
    gradient.w = J_g[0][0] * F_g[0] + J_g[1][0] * F_g[1] + J_g[2][0] * F_g[2];
 80034b4:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80034b8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80034bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034c0:	edd7 6a15 	vldr	s13, [r7, #84]	@ 0x54
 80034c4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80034c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d0:	edd7 6a19 	vldr	s13, [r7, #100]	@ 0x64
 80034d4:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 80034d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e0:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    gradient.x = J_g[0][1] * F_g[0] + J_g[1][1] * F_g[1] + J_g[2][1] * F_g[2];
 80034e4:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80034e8:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80034ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 80034f0:	edd7 6a16 	vldr	s13, [r7, #88]	@ 0x58
 80034f4:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 80034f8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80034fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003500:	edd7 6a1a 	vldr	s13, [r7, #104]	@ 0x68
 8003504:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003508:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800350c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003510:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    gradient.y = J_g[0][2] * F_g[0] + J_g[1][2] * F_g[1] + J_g[2][2] * F_g[2];
 8003514:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003518:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800351c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003520:	edd7 6a17 	vldr	s13, [r7, #92]	@ 0x5c
 8003524:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003528:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800352c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003530:	edd7 6a1b 	vldr	s13, [r7, #108]	@ 0x6c
 8003534:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003538:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800353c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003540:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    gradient.z = J_g[0][3] * F_g[0] + J_g[1][3] * F_g[1] + J_g[2][3] * F_g[2];
 8003544:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8003548:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800354c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003550:	edd7 6a18 	vldr	s13, [r7, #96]	@ 0x60
 8003554:	edd7 7a1e 	vldr	s15, [r7, #120]	@ 0x78
 8003558:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800355c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003560:	edd7 6a1c 	vldr	s13, [r7, #112]	@ 0x70
 8003564:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8003568:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800356c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003570:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40

    // Normalize the gradient, equation (44)
    gradient = quatnormalize(&gradient);
 8003574:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003578:	4618      	mov	r0, r3
 800357a:	f7fe fe79 	bl	8002270 <quatnormalize>
 800357e:	eeb0 6a40 	vmov.f32	s12, s0
 8003582:	eef0 6a60 	vmov.f32	s13, s1
 8003586:	eeb0 7a41 	vmov.f32	s14, s2
 800358a:	eef0 7a61 	vmov.f32	s15, s3
 800358e:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 8003592:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 8003596:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 800359a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
     Eq. 36 has the filter gain Gamma, which is related to the step size and thus alpha. With alpha being very large,
        you can make assumptions to simplify the fusion equatoin of eq.36.
     Combining the simplification of the gradient descent equation with the simplification of the fusion equation gets you eq.
     41 which can be subdivided into eqs 42-44.
    */
    gradient = quatmultiply_scalar(&gradient, BETA(filter->gyro_mean_error));             // multiply normalized gradient by beta
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	edd3 7a05 	vldr	s15, [r3, #20]
 80035a4:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 80036b8 <madgwick_filter_apply+0x448>
 80035a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035ac:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80035b0:	eeb0 0a67 	vmov.f32	s0, s15
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7fe fecd 	bl	8002354 <quatmultiply_scalar>
 80035ba:	eeb0 6a40 	vmov.f32	s12, s0
 80035be:	eef0 6a60 	vmov.f32	s13, s1
 80035c2:	eeb0 7a41 	vmov.f32	s14, s2
 80035c6:	eef0 7a61 	vmov.f32	s15, s3
 80035ca:	ed87 6a0d 	vstr	s12, [r7, #52]	@ 0x34
 80035ce:	edc7 6a0e 	vstr	s13, [r7, #56]	@ 0x38
 80035d2:	ed87 7a0f 	vstr	s14, [r7, #60]	@ 0x3c
 80035d6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    q_est_dot = quatsub(&q_w, &gradient);        // subtract above from q_w, the integrated gyro quaternion
 80035da:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 80035de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7ff fa93 	bl	8002b10 <quatsub>
 80035ea:	eeb0 6a40 	vmov.f32	s12, s0
 80035ee:	eef0 6a60 	vmov.f32	s13, s1
 80035f2:	eeb0 7a41 	vmov.f32	s14, s2
 80035f6:	eef0 7a61 	vmov.f32	s15, s3
 80035fa:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 80035fe:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 8003602:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 8003606:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est_dot = quatmultiply_scalar(&q_est_dot, (1.0f / filter->sampling_freq));
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	edd3 7a04 	vldr	s15, [r3, #16]
 8003610:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003614:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003618:	f107 0390 	add.w	r3, r7, #144	@ 0x90
 800361c:	eeb0 0a47 	vmov.f32	s0, s14
 8003620:	4618      	mov	r0, r3
 8003622:	f7fe fe97 	bl	8002354 <quatmultiply_scalar>
 8003626:	eeb0 6a40 	vmov.f32	s12, s0
 800362a:	eef0 6a60 	vmov.f32	s13, s1
 800362e:	eeb0 7a41 	vmov.f32	s14, s2
 8003632:	eef0 7a61 	vmov.f32	s15, s3
 8003636:	ed87 6a24 	vstr	s12, [r7, #144]	@ 0x90
 800363a:	edc7 6a25 	vstr	s13, [r7, #148]	@ 0x94
 800363e:	ed87 7a26 	vstr	s14, [r7, #152]	@ 0x98
 8003642:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    q_est = quatadd(&q_est_prev, &q_est_dot);     // Integrate orientation rate to find position
 8003646:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 800364a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800364e:	4611      	mov	r1, r2
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fa11 	bl	8002a78 <quatadd>
 8003656:	eeb0 6a40 	vmov.f32	s12, s0
 800365a:	eef0 6a60 	vmov.f32	s13, s1
 800365e:	eeb0 7a41 	vmov.f32	s14, s2
 8003662:	eef0 7a61 	vmov.f32	s15, s3
 8003666:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 800366a:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 800366e:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 8003672:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
    q_est = quatnormalize(&q_est);                 // normalize the orientation of the estimate
 8003676:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800367a:	4618      	mov	r0, r3
 800367c:	f7fe fdf8 	bl	8002270 <quatnormalize>
 8003680:	eeb0 6a40 	vmov.f32	s12, s0
 8003684:	eef0 6a60 	vmov.f32	s13, s1
 8003688:	eeb0 7a41 	vmov.f32	s14, s2
 800368c:	eef0 7a61 	vmov.f32	s15, s3
 8003690:	ed87 6a2c 	vstr	s12, [r7, #176]	@ 0xb0
 8003694:	edc7 6a2d 	vstr	s13, [r7, #180]	@ 0xb4
 8003698:	ed87 7a2e 	vstr	s14, [r7, #184]	@ 0xb8
 800369c:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc
                                                //(shown in diagram, plus always use unit quaternions for orientation)
    filter->q_est = q_est;
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	461c      	mov	r4, r3
 80036a4:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80036a8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80036aa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80036ae:	bf00      	nop
 80036b0:	37c4      	adds	r7, #196	@ 0xc4
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd90      	pop	{r4, r7, pc}
 80036b6:	bf00      	nop
 80036b8:	3f5db3d7 	.word	0x3f5db3d7

080036bc <motor_mixer_quad_x>:
void motor_mixer_quad_x(
    float throttle_norm,       // 0..1 throttle
    float roll_out, float pitch_out, float yaw_out,  // ±PID_LIMIT
	float throttle_idle,  // e.g., 0..1 idle throttle
    float motor_dshot[NUM_MOTORS]     // output throttle per motor
) {
 80036bc:	b480      	push	{r7}
 80036be:	b097      	sub	sp, #92	@ 0x5c
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	ed87 0a05 	vstr	s0, [r7, #20]
 80036c6:	edc7 0a04 	vstr	s1, [r7, #16]
 80036ca:	ed87 1a03 	vstr	s2, [r7, #12]
 80036ce:	edc7 1a02 	vstr	s3, [r7, #8]
 80036d2:	ed87 2a01 	vstr	s4, [r7, #4]
 80036d6:	6038      	str	r0, [r7, #0]
	// Clamp inputs
	throttle_norm = CLAMP(throttle_norm, 0.0f, MAX_THROTTLE_MIX);
 80036d8:	edd7 7a05 	vldr	s15, [r7, #20]
 80036dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036e4:	d502      	bpl.n	80036ec <motor_mixer_quad_x+0x30>
 80036e6:	f04f 0300 	mov.w	r3, #0
 80036ea:	e00c      	b.n	8003706 <motor_mixer_quad_x+0x4a>
 80036ec:	edd7 7a05 	vldr	s15, [r7, #20]
 80036f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80036f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	dd02      	ble.n	8003704 <motor_mixer_quad_x+0x48>
 80036fe:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003702:	e000      	b.n	8003706 <motor_mixer_quad_x+0x4a>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	617b      	str	r3, [r7, #20]
	throttle_idle = CLAMP(throttle_idle, 0.0f, MAX_THROTTLE_MIX);
 8003708:	edd7 7a01 	vldr	s15, [r7, #4]
 800370c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003714:	d502      	bpl.n	800371c <motor_mixer_quad_x+0x60>
 8003716:	f04f 0300 	mov.w	r3, #0
 800371a:	e00c      	b.n	8003736 <motor_mixer_quad_x+0x7a>
 800371c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003720:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372c:	dd02      	ble.n	8003734 <motor_mixer_quad_x+0x78>
 800372e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8003732:	e000      	b.n	8003736 <motor_mixer_quad_x+0x7a>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	607b      	str	r3, [r7, #4]

    // Scale PID outputs into motor fraction
    float r = roll_out * AXIS_TO_MOTOR_GAIN;
 8003738:	edd7 7a04 	vldr	s15, [r7, #16]
 800373c:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8003994 <motor_mixer_quad_x+0x2d8>
 8003740:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003744:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
    float p = pitch_out * AXIS_TO_MOTOR_GAIN;
 8003748:	edd7 7a03 	vldr	s15, [r7, #12]
 800374c:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003994 <motor_mixer_quad_x+0x2d8>
 8003750:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003754:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
    float y = yaw_out * AXIS_TO_MOTOR_GAIN;
 8003758:	edd7 7a02 	vldr	s15, [r7, #8]
 800375c:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 8003994 <motor_mixer_quad_x+0x2d8>
 8003760:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003764:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    // Step 1: Compute raw motor mix
    float m[NUM_MOTORS];


	// Add throttle + roll + pitch + yaw for each motor
    for (int i = 0; i < NUM_MOTORS; i++) {
 8003768:	2300      	movs	r3, #0
 800376a:	657b      	str	r3, [r7, #84]	@ 0x54
 800376c:	e03a      	b.n	80037e4 <motor_mixer_quad_x+0x128>
        m[i] = throttle_norm + MIX[i][0] * r + MIX[i][1] * p + MIX[i][2] * y;
 800376e:	498a      	ldr	r1, [pc, #552]	@ (8003998 <motor_mixer_quad_x+0x2dc>)
 8003770:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003772:	4613      	mov	r3, r2
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	4413      	add	r3, r2
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	440b      	add	r3, r1
 800377c:	ed93 7a00 	vldr	s14, [r3]
 8003780:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003784:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003788:	edd7 7a05 	vldr	s15, [r7, #20]
 800378c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003790:	4981      	ldr	r1, [pc, #516]	@ (8003998 <motor_mixer_quad_x+0x2dc>)
 8003792:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	3304      	adds	r3, #4
 80037a0:	edd3 6a00 	vldr	s13, [r3]
 80037a4:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80037a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b0:	4979      	ldr	r1, [pc, #484]	@ (8003998 <motor_mixer_quad_x+0x2dc>)
 80037b2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	440b      	add	r3, r1
 80037be:	3308      	adds	r3, #8
 80037c0:	edd3 6a00 	vldr	s13, [r3]
 80037c4:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80037c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	3358      	adds	r3, #88	@ 0x58
 80037d6:	443b      	add	r3, r7
 80037d8:	3b40      	subs	r3, #64	@ 0x40
 80037da:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < NUM_MOTORS; i++) {
 80037de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e0:	3301      	adds	r3, #1
 80037e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80037e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	ddc1      	ble.n	800376e <motor_mixer_quad_x+0xb2>
    }

    // Step 2: Desaturate so all motors stay in [0..1]
    float mmin = m[0], mmax = m[0];
 80037ea:	69bb      	ldr	r3, [r7, #24]
 80037ec:	653b      	str	r3, [r7, #80]	@ 0x50
 80037ee:	69bb      	ldr	r3, [r7, #24]
 80037f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 80037f2:	2301      	movs	r3, #1
 80037f4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037f6:	e02c      	b.n	8003852 <motor_mixer_quad_x+0x196>
        if (m[i] < mmin) mmin = m[i];
 80037f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	3358      	adds	r3, #88	@ 0x58
 80037fe:	443b      	add	r3, r7
 8003800:	3b40      	subs	r3, #64	@ 0x40
 8003802:	edd3 7a00 	vldr	s15, [r3]
 8003806:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800380a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800380e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003812:	dd06      	ble.n	8003822 <motor_mixer_quad_x+0x166>
 8003814:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3358      	adds	r3, #88	@ 0x58
 800381a:	443b      	add	r3, r7
 800381c:	3b40      	subs	r3, #64	@ 0x40
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	653b      	str	r3, [r7, #80]	@ 0x50
        if (m[i] > mmax) mmax = m[i];
 8003822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	3358      	adds	r3, #88	@ 0x58
 8003828:	443b      	add	r3, r7
 800382a:	3b40      	subs	r3, #64	@ 0x40
 800382c:	edd3 7a00 	vldr	s15, [r3]
 8003830:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8003834:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003838:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383c:	d506      	bpl.n	800384c <motor_mixer_quad_x+0x190>
 800383e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	3358      	adds	r3, #88	@ 0x58
 8003844:	443b      	add	r3, r7
 8003846:	3b40      	subs	r3, #64	@ 0x40
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    for (int i = 1; i < NUM_MOTORS; i++) {
 800384c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800384e:	3301      	adds	r3, #1
 8003850:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003854:	2b03      	cmp	r3, #3
 8003856:	ddcf      	ble.n	80037f8 <motor_mixer_quad_x+0x13c>
    }

	// If any motor is above 1.0, lower all motors by the excess
    if (mmax > MAX_THROTTLE_MIX) {
 8003858:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800385c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003868:	dd22      	ble.n	80038b0 <motor_mixer_quad_x+0x1f4>
        float shift = mmax - MAX_THROTTLE_MIX;
 800386a:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800386e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003876:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
        for (int i = 0; i < NUM_MOTORS; i++) m[i] -= shift;
 800387a:	2300      	movs	r3, #0
 800387c:	647b      	str	r3, [r7, #68]	@ 0x44
 800387e:	e014      	b.n	80038aa <motor_mixer_quad_x+0x1ee>
 8003880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003882:	009b      	lsls	r3, r3, #2
 8003884:	3358      	adds	r3, #88	@ 0x58
 8003886:	443b      	add	r3, r7
 8003888:	3b40      	subs	r3, #64	@ 0x40
 800388a:	ed93 7a00 	vldr	s14, [r3]
 800388e:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8003892:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003896:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	3358      	adds	r3, #88	@ 0x58
 800389c:	443b      	add	r3, r7
 800389e:	3b40      	subs	r3, #64	@ 0x40
 80038a0:	edc3 7a00 	vstr	s15, [r3]
 80038a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038a6:	3301      	adds	r3, #1
 80038a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80038aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038ac:	2b03      	cmp	r3, #3
 80038ae:	dde7      	ble.n	8003880 <motor_mixer_quad_x+0x1c4>
    }

	// If any motor is below 0.0, raise all motors by the deficit
    if (mmin < 0.0f) {
 80038b0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80038b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038bc:	d522      	bpl.n	8003904 <motor_mixer_quad_x+0x248>
        float shift = 0.0f - mmin;
 80038be:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 800399c <motor_mixer_quad_x+0x2e0>
 80038c2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80038c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038ca:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
        for (int i = 0; i < NUM_MOTORS; i++) m[i] += shift;
 80038ce:	2300      	movs	r3, #0
 80038d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80038d2:	e014      	b.n	80038fe <motor_mixer_quad_x+0x242>
 80038d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	3358      	adds	r3, #88	@ 0x58
 80038da:	443b      	add	r3, r7
 80038dc:	3b40      	subs	r3, #64	@ 0x40
 80038de:	ed93 7a00 	vldr	s14, [r3]
 80038e2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80038e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	3358      	adds	r3, #88	@ 0x58
 80038f0:	443b      	add	r3, r7
 80038f2:	3b40      	subs	r3, #64	@ 0x40
 80038f4:	edc3 7a00 	vstr	s15, [r3]
 80038f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038fa:	3301      	adds	r3, #1
 80038fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80038fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003900:	2b03      	cmp	r3, #3
 8003902:	dde7      	ble.n	80038d4 <motor_mixer_quad_x+0x218>
    }

	// Step 3: Clamp to [throttle_idle..1.0] and write output
    for (int i = 0; i < NUM_MOTORS; i++) {
 8003904:	2300      	movs	r3, #0
 8003906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003908:	e03a      	b.n	8003980 <motor_mixer_quad_x+0x2c4>
        m[i] = CLAMP(m[i], throttle_idle, MAX_THROTTLE_MIX);
 800390a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	3358      	adds	r3, #88	@ 0x58
 8003910:	443b      	add	r3, r7
 8003912:	3b40      	subs	r3, #64	@ 0x40
 8003914:	edd3 7a00 	vldr	s15, [r3]
 8003918:	ed97 7a01 	vldr	s14, [r7, #4]
 800391c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003924:	dd01      	ble.n	800392a <motor_mixer_quad_x+0x26e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	e016      	b.n	8003958 <motor_mixer_quad_x+0x29c>
 800392a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	3358      	adds	r3, #88	@ 0x58
 8003930:	443b      	add	r3, r7
 8003932:	3b40      	subs	r3, #64	@ 0x40
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800393c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003944:	dd02      	ble.n	800394c <motor_mixer_quad_x+0x290>
 8003946:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800394a:	e005      	b.n	8003958 <motor_mixer_quad_x+0x29c>
 800394c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	3358      	adds	r3, #88	@ 0x58
 8003952:	443b      	add	r3, r7
 8003954:	3b40      	subs	r3, #64	@ 0x40
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800395a:	0092      	lsls	r2, r2, #2
 800395c:	3258      	adds	r2, #88	@ 0x58
 800395e:	443a      	add	r2, r7
 8003960:	3a40      	subs	r2, #64	@ 0x40
 8003962:	6013      	str	r3, [r2, #0]
        motor_dshot[i] = m[i];
 8003964:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	4413      	add	r3, r2
 800396c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800396e:	0092      	lsls	r2, r2, #2
 8003970:	3258      	adds	r2, #88	@ 0x58
 8003972:	443a      	add	r2, r7
 8003974:	3a40      	subs	r2, #64	@ 0x40
 8003976:	6812      	ldr	r2, [r2, #0]
 8003978:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUM_MOTORS; i++) {
 800397a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800397c:	3301      	adds	r3, #1
 800397e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003982:	2b03      	cmp	r3, #3
 8003984:	ddc1      	ble.n	800390a <motor_mixer_quad_x+0x24e>
    }
}
 8003986:	bf00      	nop
 8003988:	bf00      	nop
 800398a:	375c      	adds	r7, #92	@ 0x5c
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	3ceaaefa 	.word	0x3ceaaefa
 8003998:	08020680 	.word	0x08020680
 800399c:	00000000 	.word	0x00000000

080039a0 <pid_init>:
#include <math.h>

#define MIN(a,b) (((a)<(b))?(a):(b))
#define MAX(a,b) (((a)>(b))?(a):(b))

void pid_init(pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output) {
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6178      	str	r0, [r7, #20]
 80039a8:	ed87 0a04 	vstr	s0, [r7, #16]
 80039ac:	edc7 0a03 	vstr	s1, [r7, #12]
 80039b0:	ed87 1a02 	vstr	s2, [r7, #8]
 80039b4:	edc7 1a01 	vstr	s3, [r7, #4]
 80039b8:	ed87 2a00 	vstr	s4, [r7]
    pid->Kp = Kp;
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	693a      	ldr	r2, [r7, #16]
 80039c0:	609a      	str	r2, [r3, #8]
    pid->Ki = Ki;
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	68fa      	ldr	r2, [r7, #12]
 80039c6:	60da      	str	r2, [r3, #12]
    pid->Kd = Kd;
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	68ba      	ldr	r2, [r7, #8]
 80039cc:	611a      	str	r2, [r3, #16]
    pid->min_output = min_output;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	605a      	str	r2, [r3, #4]
    pid->max_output = max_output;
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	683a      	ldr	r2, [r7, #0]
 80039d8:	601a      	str	r2, [r3, #0]
    pid->error = 0.0f;
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	f04f 0200 	mov.w	r2, #0
 80039e0:	615a      	str	r2, [r3, #20]
    pid->pre_error = 0.0f;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f04f 0200 	mov.w	r2, #0
 80039e8:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	621a      	str	r2, [r3, #32]
    pid->integral_max_error = -1.0;
 80039f2:	697b      	ldr	r3, [r7, #20]
 80039f4:	4a07      	ldr	r2, [pc, #28]	@ (8003a14 <pid_init+0x74>)
 80039f6:	625a      	str	r2, [r3, #36]	@ 0x24
    pid->delta_time = 0.0f;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->derivative_error = 0.0f;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	61da      	str	r2, [r3, #28]
}
 8003a08:	bf00      	nop
 8003a0a:	371c      	adds	r7, #28
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	bf800000 	.word	0xbf800000

08003a18 <pid_init_with_integral_limit>:

void pid_init_with_integral_limit(pid_t *pid, float Kp, float Ki, float Kd, float min_output, float max_output, float integral_max_error) {
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	61f8      	str	r0, [r7, #28]
 8003a20:	ed87 0a06 	vstr	s0, [r7, #24]
 8003a24:	edc7 0a05 	vstr	s1, [r7, #20]
 8003a28:	ed87 1a04 	vstr	s2, [r7, #16]
 8003a2c:	edc7 1a03 	vstr	s3, [r7, #12]
 8003a30:	ed87 2a02 	vstr	s4, [r7, #8]
 8003a34:	edc7 2a01 	vstr	s5, [r7, #4]
    pid_init(pid, Kp, Ki, Kd, min_output, max_output);
 8003a38:	ed97 2a02 	vldr	s4, [r7, #8]
 8003a3c:	edd7 1a03 	vldr	s3, [r7, #12]
 8003a40:	ed97 1a04 	vldr	s2, [r7, #16]
 8003a44:	edd7 0a05 	vldr	s1, [r7, #20]
 8003a48:	ed97 0a06 	vldr	s0, [r7, #24]
 8003a4c:	69f8      	ldr	r0, [r7, #28]
 8003a4e:	f7ff ffa7 	bl	80039a0 <pid_init>
    pid_set_integral_limit(pid, integral_max_error);
 8003a52:	ed97 0a01 	vldr	s0, [r7, #4]
 8003a56:	69f8      	ldr	r0, [r7, #28]
 8003a58:	f000 f8d4 	bl	8003c04 <pid_set_integral_limit>
}
 8003a5c:	bf00      	nop
 8003a5e:	3720      	adds	r7, #32
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <pid_calculate>:

float pid_calculate(pid_t *pid, float setpoint, float process_value, float dt) {
 8003a64:	b480      	push	{r7}
 8003a66:	b08b      	sub	sp, #44	@ 0x2c
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003a70:	edc7 0a01 	vstr	s1, [r7, #4]
 8003a74:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - process_value;
 8003a78:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a7c:	edd7 7a01 	vldr	s15, [r7, #4]
 8003a80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003a84:	edc7 7a05 	vstr	s15, [r7, #20]
    float Pout = pid->Kp * error;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8003a8e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a96:	edc7 7a04 	vstr	s15, [r7, #16]
    float Iout = 0.0f;
 8003a9a:	f04f 0300 	mov.w	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    float Dout = 0.0f;
 8003aa0:	f04f 0300 	mov.w	r3, #0
 8003aa4:	623b      	str	r3, [r7, #32]
    float derivative = 0.0f;
 8003aa6:	f04f 0300 	mov.w	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
    dt = fabsf(dt);
 8003aac:	edd7 7a00 	vldr	s15, [r7]
 8003ab0:	eef0 7ae7 	vabs.f32	s15, s15
 8003ab4:	edc7 7a00 	vstr	s15, [r7]
    pid->delta_time = dt;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	629a      	str	r2, [r3, #40]	@ 0x28
    pid->error = error;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	615a      	str	r2, [r3, #20]

    if (dt > FLT_EPSILON) {
 8003ac4:	edd7 7a00 	vldr	s15, [r7]
 8003ac8:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8003c00 <pid_calculate+0x19c>
 8003acc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ad4:	dd5c      	ble.n	8003b90 <pid_calculate+0x12c>
        pid->integral += error * dt;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	ed93 7a08 	vldr	s14, [r3, #32]
 8003adc:	edd7 6a05 	vldr	s13, [r7, #20]
 8003ae0:	edd7 7a00 	vldr	s15, [r7]
 8003ae4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ae8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	edc3 7a08 	vstr	s15, [r3, #32]

        if (pid->integral_max_error > FLT_EPSILON) {
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003af8:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8003c00 <pid_calculate+0x19c>
 8003afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b04:	dd24      	ble.n	8003b50 <pid_calculate+0xec>
            if (pid->integral > pid->integral_max_error)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b1a:	dd04      	ble.n	8003b26 <pid_calculate+0xc2>
                pid->integral = pid->integral_max_error;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	621a      	str	r2, [r3, #32]
 8003b24:	e014      	b.n	8003b50 <pid_calculate+0xec>
            else if (pid->integral < -pid->integral_max_error)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	ed93 7a08 	vldr	s14, [r3, #32]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b32:	eef1 7a67 	vneg.f32	s15, s15
 8003b36:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b3e:	d507      	bpl.n	8003b50 <pid_calculate+0xec>
                pid->integral = -pid->integral_max_error;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8003b46:	eef1 7a67 	vneg.f32	s15, s15
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	edc3 7a08 	vstr	s15, [r3, #32]
        }

        Iout = pid->Ki * pid->integral;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	edd3 7a08 	vldr	s15, [r3, #32]
 8003b5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b60:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
        derivative = (error - pid->pre_error) / dt;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	edd3 7a06 	vldr	s15, [r3, #24]
 8003b6a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003b6e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003b72:	ed97 7a00 	vldr	s14, [r7]
 8003b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        Dout = pid->Kd * derivative;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	edd3 7a04 	vldr	s15, [r3, #16]
 8003b84:	ed97 7a07 	vldr	s14, [r7, #28]
 8003b88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b8c:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    float output = Pout + Iout + Dout;
 8003b90:	ed97 7a04 	vldr	s14, [r7, #16]
 8003b94:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b9c:	ed97 7a08 	vldr	s14, [r7, #32]
 8003ba0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ba4:	edc7 7a06 	vstr	s15, [r7, #24]

    if (output > pid->max_output) output = pid->max_output;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	edd3 7a00 	vldr	s15, [r3]
 8003bae:	ed97 7a06 	vldr	s14, [r7, #24]
 8003bb2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bba:	dd03      	ble.n	8003bc4 <pid_calculate+0x160>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	61bb      	str	r3, [r7, #24]
 8003bc2:	e00c      	b.n	8003bde <pid_calculate+0x17a>
    else if (output < pid->min_output) output = pid->min_output;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bca:	ed97 7a06 	vldr	s14, [r7, #24]
 8003bce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd6:	d502      	bpl.n	8003bde <pid_calculate+0x17a>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	61bb      	str	r3, [r7, #24]
    pid->derivative_error = derivative;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	61da      	str	r2, [r3, #28]
    pid->pre_error = error;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	619a      	str	r2, [r3, #24]
    return output;
 8003bea:	69bb      	ldr	r3, [r7, #24]
 8003bec:	ee07 3a90 	vmov	s15, r3
}
 8003bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf4:	372c      	adds	r7, #44	@ 0x2c
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	34000000 	.word	0x34000000

08003c04 <pid_set_integral_limit>:
void pid_set_min_output(pid_t *pid, float val) { pid->min_output = val; }
void pid_set_Kp(pid_t *pid, float val) { pid->Kp = val; }
void pid_set_Ki(pid_t *pid, float val) { pid->Ki = val; }
void pid_set_Kd(pid_t *pid, float val) { pid->Kd = val; }

void pid_set_integral_limit(pid_t *pid, float val) {
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	ed87 0a00 	vstr	s0, [r7]
    val = fabsf(val);
 8003c10:	edd7 7a00 	vldr	s15, [r7]
 8003c14:	eef0 7ae7 	vabs.f32	s15, s15
 8003c18:	edc7 7a00 	vstr	s15, [r7]
    pid->integral_max_error = val;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (pid->integral > val) pid->integral = val;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	edd3 7a08 	vldr	s15, [r3, #32]
 8003c28:	ed97 7a00 	vldr	s14, [r7]
 8003c2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c34:	d503      	bpl.n	8003c3e <pid_set_integral_limit+0x3a>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	621a      	str	r2, [r3, #32]
    else if (pid->integral < -val) pid->integral = -val;
}
 8003c3c:	e013      	b.n	8003c66 <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	ed93 7a08 	vldr	s14, [r3, #32]
 8003c44:	edd7 7a00 	vldr	s15, [r7]
 8003c48:	eef1 7a67 	vneg.f32	s15, s15
 8003c4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c54:	d400      	bmi.n	8003c58 <pid_set_integral_limit+0x54>
}
 8003c56:	e006      	b.n	8003c66 <pid_set_integral_limit+0x62>
    else if (pid->integral < -val) pid->integral = -val;
 8003c58:	edd7 7a00 	vldr	s15, [r7]
 8003c5c:	eef1 7a67 	vneg.f32	s15, s15
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr

08003c72 <pid_reset>:
float pid_get_Kp(pid_t *pid) { return pid->Kp; }
float pid_get_Ki(pid_t *pid) { return pid->Ki; }
float pid_get_Kd(pid_t *pid) { return pid->Kd; }
float pid_get_integral_error(pid_t *pid) { return pid->integral; }

void pid_reset(pid_t *pid) {
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
    pid->pre_error = 0.0f;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f04f 0200 	mov.w	r2, #0
 8003c80:	619a      	str	r2, [r3, #24]
    pid->integral = 0.0f;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	621a      	str	r2, [r3, #32]
    pid->error = 0.0f;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f04f 0200 	mov.w	r2, #0
 8003c90:	615a      	str	r2, [r3, #20]
    pid->derivative_error = 0.0f;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f04f 0200 	mov.w	r2, #0
 8003c98:	61da      	str	r2, [r3, #28]
    pid->delta_time = 0.0f;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f04f 0200 	mov.w	r2, #0
 8003ca0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <rate_controller_init>:
void rate_controller_init(
    rate_controller_t* fc,
    float sample_rate_hz,
    float d_term_pid_filter_cutoff_freq_hz,
    float ff_term_pid_filter_cutoff_freq_hz
) {
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b084      	sub	sp, #16
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8003cbc:	edc7 0a01 	vstr	s1, [r7, #4]
 8003cc0:	ed87 1a00 	vstr	s2, [r7]
    if (!fc) {
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d076      	beq.n	8003db8 <rate_controller_init+0x108>
        return;
    }

    // Clear all fields
    memset(fc, 0, sizeof(rate_controller_t));
 8003cca:	f44f 72bc 	mov.w	r2, #376	@ 0x178
 8003cce:	2100      	movs	r1, #0
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f016 fe1f 	bl	801a914 <memset>

    // Store sample rate and D-term gain (applied manually in update loop)
    fc->sample_rate_hz = sample_rate_hz;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	625a      	str	r2, [r3, #36]	@ 0x24

    // --- Initialize D-term filters (low-pass for noise reduction) ---
    pt2_filter_init_lowpass(&(fc->d_term_pid_roll_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	33c4      	adds	r3, #196	@ 0xc4
 8003ce0:	edd7 0a02 	vldr	s1, [r7, #8]
 8003ce4:	ed97 0a01 	vldr	s0, [r7, #4]
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fd fd48 	bl	800177e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_pitch_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	33ec      	adds	r3, #236	@ 0xec
 8003cf2:	edd7 0a02 	vldr	s1, [r7, #8]
 8003cf6:	ed97 0a01 	vldr	s0, [r7, #4]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fd fd3f 	bl	800177e <pt2_filter_init_lowpass>
    pt2_filter_init_lowpass(&(fc->d_term_pid_yaw_filter), d_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8003d06:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d0a:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7fd fd35 	bl	800177e <pt2_filter_init_lowpass>

	// --- Initialize FF-term filters (PT1 for smoothing) ---
	pt1_filter_init_lowpass(&(fc->ff_term_pid_roll_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8003d1a:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d1e:	ed97 0a00 	vldr	s0, [r7]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fd fc94 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_pitch_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8003d2e:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d32:	ed97 0a00 	vldr	s0, [r7]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd fc8a 	bl	8001650 <pt1_filter_init_lowpass>
	pt1_filter_init_lowpass(&(fc->ff_term_pid_yaw_pt1_filter), ff_term_pid_filter_cutoff_freq_hz, sample_rate_hz);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8003d42:	edd7 0a02 	vldr	s1, [r7, #8]
 8003d46:	ed97 0a00 	vldr	s0, [r7]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fd fc80 	bl	8001650 <pt1_filter_init_lowpass>

    // --- Initialize PID controllers (no D gain here; applied separately) ---
    pid_init_with_integral_limit(&(fc->pid_roll), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	3328      	adds	r3, #40	@ 0x28
 8003d54:	eddf 2a1a 	vldr	s5, [pc, #104]	@ 8003dc0 <rate_controller_init+0x110>
 8003d58:	ed9f 2a1a 	vldr	s4, [pc, #104]	@ 8003dc4 <rate_controller_init+0x114>
 8003d5c:	eddf 1a1a 	vldr	s3, [pc, #104]	@ 8003dc8 <rate_controller_init+0x118>
 8003d60:	ed9f 1a17 	vldr	s2, [pc, #92]	@ 8003dc0 <rate_controller_init+0x110>
 8003d64:	eddf 0a16 	vldr	s1, [pc, #88]	@ 8003dc0 <rate_controller_init+0x110>
 8003d68:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 8003dc0 <rate_controller_init+0x110>
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7ff fe53 	bl	8003a18 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_pitch), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	3354      	adds	r3, #84	@ 0x54
 8003d76:	eddf 2a12 	vldr	s5, [pc, #72]	@ 8003dc0 <rate_controller_init+0x110>
 8003d7a:	ed9f 2a12 	vldr	s4, [pc, #72]	@ 8003dc4 <rate_controller_init+0x114>
 8003d7e:	eddf 1a12 	vldr	s3, [pc, #72]	@ 8003dc8 <rate_controller_init+0x118>
 8003d82:	ed9f 1a0f 	vldr	s2, [pc, #60]	@ 8003dc0 <rate_controller_init+0x110>
 8003d86:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8003dc0 <rate_controller_init+0x110>
 8003d8a:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8003dc0 <rate_controller_init+0x110>
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff fe42 	bl	8003a18 <pid_init_with_integral_limit>
    pid_init_with_integral_limit(&(fc->pid_yaw), 0.0f, 0.0f, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, 0.0f);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3380      	adds	r3, #128	@ 0x80
 8003d98:	eddf 2a09 	vldr	s5, [pc, #36]	@ 8003dc0 <rate_controller_init+0x110>
 8003d9c:	ed9f 2a09 	vldr	s4, [pc, #36]	@ 8003dc4 <rate_controller_init+0x114>
 8003da0:	eddf 1a09 	vldr	s3, [pc, #36]	@ 8003dc8 <rate_controller_init+0x118>
 8003da4:	ed9f 1a06 	vldr	s2, [pc, #24]	@ 8003dc0 <rate_controller_init+0x110>
 8003da8:	eddf 0a05 	vldr	s1, [pc, #20]	@ 8003dc0 <rate_controller_init+0x110>
 8003dac:	ed9f 0a04 	vldr	s0, [pc, #16]	@ 8003dc0 <rate_controller_init+0x110>
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7ff fe31 	bl	8003a18 <pid_init_with_integral_limit>
 8003db6:	e000      	b.n	8003dba <rate_controller_init+0x10a>
        return;
 8003db8:	bf00      	nop
}
 8003dba:	3710      	adds	r7, #16
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	00000000 	.word	0x00000000
 8003dc4:	410ba058 	.word	0x410ba058
 8003dc8:	c10ba058 	.word	0xc10ba058

08003dcc <rate_controller_init_roll_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6178      	str	r0, [r7, #20]
 8003dd4:	ed87 0a04 	vstr	s0, [r7, #16]
 8003dd8:	edc7 0a03 	vstr	s1, [r7, #12]
 8003ddc:	ed87 1a02 	vstr	s2, [r7, #8]
 8003de0:	edc7 1a01 	vstr	s3, [r7, #4]
 8003de4:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_roll), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	3328      	adds	r3, #40	@ 0x28
 8003dec:	edd7 2a01 	vldr	s5, [r7, #4]
 8003df0:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003e24 <rate_controller_init_roll_pid+0x58>
 8003df4:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003e28 <rate_controller_init_roll_pid+0x5c>
 8003df8:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003e2c <rate_controller_init_roll_pid+0x60>
 8003dfc:	edd7 0a03 	vldr	s1, [r7, #12]
 8003e00:	ed97 0a04 	vldr	s0, [r7, #16]
 8003e04:	4618      	mov	r0, r3
 8003e06:	f7ff fe07 	bl	8003a18 <pid_init_with_integral_limit>
    fc->pid_roll_k_d = pid_k_d;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
	fc->pid_roll_k_ff = pid_k_ff;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
}
 8003e1a:	bf00      	nop
 8003e1c:	3718      	adds	r7, #24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	410ba058 	.word	0x410ba058
 8003e28:	c10ba058 	.word	0xc10ba058
 8003e2c:	00000000 	.word	0x00000000

08003e30 <rate_controller_init_pitch_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b086      	sub	sp, #24
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6178      	str	r0, [r7, #20]
 8003e38:	ed87 0a04 	vstr	s0, [r7, #16]
 8003e3c:	edc7 0a03 	vstr	s1, [r7, #12]
 8003e40:	ed87 1a02 	vstr	s2, [r7, #8]
 8003e44:	edc7 1a01 	vstr	s3, [r7, #4]
 8003e48:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_pitch), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	3354      	adds	r3, #84	@ 0x54
 8003e50:	edd7 2a01 	vldr	s5, [r7, #4]
 8003e54:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003e88 <rate_controller_init_pitch_pid+0x58>
 8003e58:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003e8c <rate_controller_init_pitch_pid+0x5c>
 8003e5c:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003e90 <rate_controller_init_pitch_pid+0x60>
 8003e60:	edd7 0a03 	vldr	s1, [r7, #12]
 8003e64:	ed97 0a04 	vldr	s0, [r7, #16]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7ff fdd5 	bl	8003a18 <pid_init_with_integral_limit>
    fc->pid_pitch_k_d = pid_k_d;
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	68ba      	ldr	r2, [r7, #8]
 8003e72:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
    fc->pid_pitch_k_ff = pid_k_ff;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
}
 8003e7e:	bf00      	nop
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	410ba058 	.word	0x410ba058
 8003e8c:	c10ba058 	.word	0xc10ba058
 8003e90:	00000000 	.word	0x00000000

08003e94 <rate_controller_init_yaw_pid>:
    float pid_k_p,
    float pid_k_i,
    float pid_k_d,
    float pid_k_i_limit,
    float pid_k_ff
) {
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6178      	str	r0, [r7, #20]
 8003e9c:	ed87 0a04 	vstr	s0, [r7, #16]
 8003ea0:	edc7 0a03 	vstr	s1, [r7, #12]
 8003ea4:	ed87 1a02 	vstr	s2, [r7, #8]
 8003ea8:	edc7 1a01 	vstr	s3, [r7, #4]
 8003eac:	ed87 2a00 	vstr	s4, [r7]
    pid_init_with_integral_limit(&(fc->pid_yaw), pid_k_p, pid_k_i, 0.0f, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT, pid_k_i_limit);
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3380      	adds	r3, #128	@ 0x80
 8003eb4:	edd7 2a01 	vldr	s5, [r7, #4]
 8003eb8:	ed9f 2a0c 	vldr	s4, [pc, #48]	@ 8003eec <rate_controller_init_yaw_pid+0x58>
 8003ebc:	eddf 1a0c 	vldr	s3, [pc, #48]	@ 8003ef0 <rate_controller_init_yaw_pid+0x5c>
 8003ec0:	ed9f 1a0c 	vldr	s2, [pc, #48]	@ 8003ef4 <rate_controller_init_yaw_pid+0x60>
 8003ec4:	edd7 0a03 	vldr	s1, [r7, #12]
 8003ec8:	ed97 0a04 	vldr	s0, [r7, #16]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7ff fda3 	bl	8003a18 <pid_init_with_integral_limit>
    fc->pid_yaw_k_d = pid_k_d;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    fc->pid_yaw_k_ff = pid_k_ff;
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8003ee2:	bf00      	nop
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	410ba058 	.word	0x410ba058
 8003ef0:	c10ba058 	.word	0xc10ba058
 8003ef4:	00000000 	.word	0x00000000

08003ef8 <rate_controller_update>:
	float sensor_pitch_rate,
	float sensor_yaw_rate,
    float target_roll_rate,
    float target_pitch_rate,
    float target_yaw_rate
) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b092      	sub	sp, #72	@ 0x48
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	61f8      	str	r0, [r7, #28]
 8003f00:	ed87 0a06 	vstr	s0, [r7, #24]
 8003f04:	edc7 0a05 	vstr	s1, [r7, #20]
 8003f08:	ed87 1a04 	vstr	s2, [r7, #16]
 8003f0c:	edc7 1a03 	vstr	s3, [r7, #12]
 8003f10:	ed87 2a02 	vstr	s4, [r7, #8]
 8003f14:	edc7 2a01 	vstr	s5, [r7, #4]
    if (!fc) {
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f000 816c 	beq.w	80041f8 <rate_controller_update+0x300>
    float roll_out;
    float pitch_out;
    float yaw_out;

    // --- Store current sensor inputs and setpoints ---
    fc->prev_target_roll_rate = fc->target_roll_rate;
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	68da      	ldr	r2, [r3, #12]
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	619a      	str	r2, [r3, #24]
	fc->prev_target_pitch_rate = fc->target_pitch_rate;
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	69fb      	ldr	r3, [r7, #28]
 8003f2e:	61da      	str	r2, [r3, #28]
	fc->prev_target_yaw_rate = fc->target_yaw_rate;
 8003f30:	69fb      	ldr	r3, [r7, #28]
 8003f32:	695a      	ldr	r2, [r3, #20]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	621a      	str	r2, [r3, #32]

    fc->target_roll_rate = target_roll_rate;
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	60da      	str	r2, [r3, #12]
    fc->target_pitch_rate = target_pitch_rate;
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	611a      	str	r2, [r3, #16]
    fc->target_yaw_rate = target_yaw_rate;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	615a      	str	r2, [r3, #20]

    fc->body_frame_roll_rate = sensor_roll_rate;
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	69ba      	ldr	r2, [r7, #24]
 8003f4e:	601a      	str	r2, [r3, #0]
	fc->body_frame_pitch_rate = sensor_pitch_rate;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	697a      	ldr	r2, [r7, #20]
 8003f54:	605a      	str	r2, [r3, #4]
    fc->body_frame_yaw_rate = sensor_yaw_rate;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	693a      	ldr	r2, [r7, #16]
 8003f5a:	609a      	str	r2, [r3, #8]

    float dt = HzToSec(fc->sample_rate_hz);
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8003f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f6a:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

    if(fabsf(dt) > FLT_EPSILON){
 8003f6e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8003f72:	eef0 7ae7 	vabs.f32	s15, s15
 8003f76:	ed9f 7aa2 	vldr	s14, [pc, #648]	@ 8004200 <rate_controller_update+0x308>
 8003f7a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f82:	f340 80e4 	ble.w	800414e <rate_controller_update+0x256>

    // --- Step 5: PID control ---
    roll_out = pid_calculate(&fc->pid_roll, target_roll_rate, sensor_roll_rate, dt);
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3328      	adds	r3, #40	@ 0x28
 8003f8a:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003f8e:	edd7 0a06 	vldr	s1, [r7, #24]
 8003f92:	ed97 0a03 	vldr	s0, [r7, #12]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff fd64 	bl	8003a64 <pid_calculate>
 8003f9c:	ed87 0a11 	vstr	s0, [r7, #68]	@ 0x44
    pitch_out = pid_calculate(&fc->pid_pitch, target_pitch_rate, sensor_pitch_rate, dt);
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	3354      	adds	r3, #84	@ 0x54
 8003fa4:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003fa8:	edd7 0a05 	vldr	s1, [r7, #20]
 8003fac:	ed97 0a02 	vldr	s0, [r7, #8]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff fd57 	bl	8003a64 <pid_calculate>
 8003fb6:	ed87 0a10 	vstr	s0, [r7, #64]	@ 0x40
    yaw_out = pid_calculate(&fc->pid_yaw, target_yaw_rate, sensor_yaw_rate, dt);
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	3380      	adds	r3, #128	@ 0x80
 8003fbe:	ed97 1a0e 	vldr	s2, [r7, #56]	@ 0x38
 8003fc2:	edd7 0a04 	vldr	s1, [r7, #16]
 8003fc6:	ed97 0a01 	vldr	s0, [r7, #4]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fd4a 	bl	8003a64 <pid_calculate>
 8003fd0:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c

    float roll_k_ff = fc->pid_roll_k_ff * ((fc->target_roll_rate - fc->prev_target_roll_rate) / dt);
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	ed93 7a2e 	vldr	s14, [r3, #184]	@ 0xb8
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	edd3 6a03 	vldr	s13, [r3, #12]
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fe6:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8003fea:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8003fee:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff6:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	float pitch_k_ff = fc->pid_pitch_k_ff * ((fc->target_pitch_rate - fc->prev_target_pitch_rate) / dt);
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	ed93 7a2f 	vldr	s14, [r3, #188]	@ 0xbc
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	edd3 6a04 	vldr	s13, [r3, #16]
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	edd3 7a07 	vldr	s15, [r3, #28]
 800400c:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004010:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 8004014:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8004018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800401c:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	float yaw_k_ff = fc->pid_yaw_k_ff * ((fc->target_yaw_rate - fc->prev_target_yaw_rate) / dt);
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	ed93 7a30 	vldr	s14, [r3, #192]	@ 0xc0
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	edd3 6a05 	vldr	s13, [r3, #20]
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004032:	ee36 6ae7 	vsub.f32	s12, s13, s15
 8004036:	edd7 6a0e 	vldr	s13, [r7, #56]	@ 0x38
 800403a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800403e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004042:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	roll_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_roll_pt1_filter, roll_k_ff);
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 800404c:	ed97 0a0d 	vldr	s0, [r7, #52]	@ 0x34
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fb61 	bl	8001718 <pt1_filter_apply_lowpass>
 8004056:	ed87 0a0d 	vstr	s0, [r7, #52]	@ 0x34
	pitch_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_pitch_pt1_filter, pitch_k_ff);
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 8004060:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8004064:	4618      	mov	r0, r3
 8004066:	f7fd fb57 	bl	8001718 <pt1_filter_apply_lowpass>
 800406a:	ed87 0a0c 	vstr	s0, [r7, #48]	@ 0x30
	yaw_k_ff = pt1_filter_apply_lowpass(&fc->ff_term_pid_yaw_pt1_filter, yaw_k_ff);
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 8004074:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8004078:	4618      	mov	r0, r3
 800407a:	f7fd fb4d 	bl	8001718 <pt1_filter_apply_lowpass>
 800407e:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c

    // --- Step 6: D-term filtering ---
    float roll_d = pt2_filter_apply_lowpass(&fc->d_term_pid_roll_filter, fc->pid_roll.derivative_error * fc->pid_roll_k_d);
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	f103 02c4 	add.w	r2, r3, #196	@ 0xc4
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	ed93 7a11 	vldr	s14, [r3, #68]	@ 0x44
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	edd3 7a2b 	vldr	s15, [r3, #172]	@ 0xac
 8004094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004098:	eeb0 0a67 	vmov.f32	s0, s15
 800409c:	4610      	mov	r0, r2
 800409e:	f7fd fb91 	bl	80017c4 <pt2_filter_apply_lowpass>
 80040a2:	ed87 0a0a 	vstr	s0, [r7, #40]	@ 0x28
    float pitch_d = pt2_filter_apply_lowpass(&fc->d_term_pid_pitch_filter, fc->pid_pitch.derivative_error * fc->pid_pitch_k_d);
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	f103 02ec 	add.w	r2, r3, #236	@ 0xec
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	ed93 7a1c 	vldr	s14, [r3, #112]	@ 0x70
 80040b2:	69fb      	ldr	r3, [r7, #28]
 80040b4:	edd3 7a2c 	vldr	s15, [r3, #176]	@ 0xb0
 80040b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040bc:	eeb0 0a67 	vmov.f32	s0, s15
 80040c0:	4610      	mov	r0, r2
 80040c2:	f7fd fb7f 	bl	80017c4 <pt2_filter_apply_lowpass>
 80040c6:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    float yaw_d = pt2_filter_apply_lowpass(&fc->d_term_pid_yaw_filter, fc->pid_yaw.derivative_error * fc->pid_yaw_k_d);
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	f503 728a 	add.w	r2, r3, #276	@ 0x114
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	ed93 7a27 	vldr	s14, [r3, #156]	@ 0x9c
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	edd3 7a2d 	vldr	s15, [r3, #180]	@ 0xb4
 80040dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040e0:	eeb0 0a67 	vmov.f32	s0, s15
 80040e4:	4610      	mov	r0, r2
 80040e6:	f7fd fb6d 	bl	80017c4 <pt2_filter_apply_lowpass>
 80040ea:	ed87 0a08 	vstr	s0, [r7, #32]

    // Add D-term back to PID outputs
    roll_out += roll_d;
 80040ee:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 80040f2:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80040f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040fa:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_d;
 80040fe:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004102:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8004106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800410a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_d;
 800410e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004112:	edd7 7a08 	vldr	s15, [r7, #32]
 8004116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800411a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    // Add FF term back to PID outputs
    roll_out += roll_k_ff;
 800411e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8004122:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8004126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800412a:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    pitch_out += pitch_k_ff;
 800412e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8004132:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8004136:	ee77 7a27 	vadd.f32	s15, s14, s15
 800413a:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    yaw_out += yaw_k_ff;
 800413e:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8004142:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8004146:	ee77 7a27 	vadd.f32	s15, s14, s15
 800414a:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
    }

    // Clamp to allowed range
    roll_out = CLAMP(roll_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 800414e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004152:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8004204 <rate_controller_update+0x30c>
 8004156:	eef4 7ac7 	vcmpe.f32	s15, s14
 800415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415e:	d501      	bpl.n	8004164 <rate_controller_update+0x26c>
 8004160:	4b29      	ldr	r3, [pc, #164]	@ (8004208 <rate_controller_update+0x310>)
 8004162:	e00b      	b.n	800417c <rate_controller_update+0x284>
 8004164:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8004168:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 800420c <rate_controller_update+0x314>
 800416c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004174:	dd01      	ble.n	800417a <rate_controller_update+0x282>
 8004176:	4b26      	ldr	r3, [pc, #152]	@ (8004210 <rate_controller_update+0x318>)
 8004178:	e000      	b.n	800417c <rate_controller_update+0x284>
 800417a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800417c:	647b      	str	r3, [r7, #68]	@ 0x44
    pitch_out = CLAMP(pitch_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 800417e:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004182:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8004204 <rate_controller_update+0x30c>
 8004186:	eef4 7ac7 	vcmpe.f32	s15, s14
 800418a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418e:	d501      	bpl.n	8004194 <rate_controller_update+0x29c>
 8004190:	4b1d      	ldr	r3, [pc, #116]	@ (8004208 <rate_controller_update+0x310>)
 8004192:	e00b      	b.n	80041ac <rate_controller_update+0x2b4>
 8004194:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8004198:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 800420c <rate_controller_update+0x314>
 800419c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a4:	dd01      	ble.n	80041aa <rate_controller_update+0x2b2>
 80041a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004210 <rate_controller_update+0x318>)
 80041a8:	e000      	b.n	80041ac <rate_controller_update+0x2b4>
 80041aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041ac:	643b      	str	r3, [r7, #64]	@ 0x40
    yaw_out = CLAMP(yaw_out, CONTROLLER_PID_MIN_OUTPUT, CONTROLLER_PID_MAX_OUTPUT);
 80041ae:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80041b2:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8004204 <rate_controller_update+0x30c>
 80041b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041be:	d501      	bpl.n	80041c4 <rate_controller_update+0x2cc>
 80041c0:	4b11      	ldr	r3, [pc, #68]	@ (8004208 <rate_controller_update+0x310>)
 80041c2:	e00b      	b.n	80041dc <rate_controller_update+0x2e4>
 80041c4:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80041c8:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800420c <rate_controller_update+0x314>
 80041cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80041d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041d4:	dd01      	ble.n	80041da <rate_controller_update+0x2e2>
 80041d6:	4b0e      	ldr	r3, [pc, #56]	@ (8004210 <rate_controller_update+0x318>)
 80041d8:	e000      	b.n	80041dc <rate_controller_update+0x2e4>
 80041da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041dc:	63fb      	str	r3, [r7, #60]	@ 0x3c

    // Store final PID outputs
    fc->out_pid_roll = roll_out;
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80041e2:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = pitch_out;
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80041ea:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = yaw_out;
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041f2:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
 80041f6:	e000      	b.n	80041fa <rate_controller_update+0x302>
        return;
 80041f8:	bf00      	nop
}
 80041fa:	3748      	adds	r7, #72	@ 0x48
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	34000000 	.word	0x34000000
 8004204:	c10ba058 	.word	0xc10ba058
 8004208:	c10ba058 	.word	0xc10ba058
 800420c:	410ba058 	.word	0x410ba058
 8004210:	410ba058 	.word	0x410ba058

08004214 <rate_controller_reset>:

void rate_controller_reset(rate_controller_t* fc) {
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
	pt2_filter_reset(&(fc->d_term_pid_roll_filter));
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	33c4      	adds	r3, #196	@ 0xc4
 8004220:	4618      	mov	r0, r3
 8004222:	f7fd faec 	bl	80017fe <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_pitch_filter));
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	33ec      	adds	r3, #236	@ 0xec
 800422a:	4618      	mov	r0, r3
 800422c:	f7fd fae7 	bl	80017fe <pt2_filter_reset>
	pt2_filter_reset(&(fc->d_term_pid_yaw_filter));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f503 738a 	add.w	r3, r3, #276	@ 0x114
 8004236:	4618      	mov	r0, r3
 8004238:	f7fd fae1 	bl	80017fe <pt2_filter_reset>

    pt1_filter_reset(&(fc->ff_term_pid_roll_pt1_filter));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8004242:	4618      	mov	r0, r3
 8004244:	f7fd fa8d 	bl	8001762 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_pitch_pt1_filter));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f503 73a6 	add.w	r3, r3, #332	@ 0x14c
 800424e:	4618      	mov	r0, r3
 8004250:	f7fd fa87 	bl	8001762 <pt1_filter_reset>
    pt1_filter_reset(&(fc->ff_term_pid_yaw_pt1_filter));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f503 73ae 	add.w	r3, r3, #348	@ 0x15c
 800425a:	4618      	mov	r0, r3
 800425c:	f7fd fa81 	bl	8001762 <pt1_filter_reset>

    pid_reset(&(fc->pid_roll));
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	3328      	adds	r3, #40	@ 0x28
 8004264:	4618      	mov	r0, r3
 8004266:	f7ff fd04 	bl	8003c72 <pid_reset>
    pid_reset(&(fc->pid_pitch));
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	3354      	adds	r3, #84	@ 0x54
 800426e:	4618      	mov	r0, r3
 8004270:	f7ff fcff 	bl	8003c72 <pid_reset>
    pid_reset(&(fc->pid_yaw));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	3380      	adds	r3, #128	@ 0x80
 8004278:	4618      	mov	r0, r3
 800427a:	f7ff fcfa 	bl	8003c72 <pid_reset>

    fc->prev_target_roll_rate = 0.0f;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	619a      	str	r2, [r3, #24]
    fc->prev_target_pitch_rate = 0.0f;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f04f 0200 	mov.w	r2, #0
 800428c:	61da      	str	r2, [r3, #28]
    fc->prev_target_yaw_rate = 0.0f;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f04f 0200 	mov.w	r2, #0
 8004294:	621a      	str	r2, [r3, #32]

    fc->out_pid_roll = 0.0f;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f8c3 216c 	str.w	r2, [r3, #364]	@ 0x16c
    fc->out_pid_pitch = 0.0f;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f8c3 2170 	str.w	r2, [r3, #368]	@ 0x170
    fc->out_pid_yaw = 0.0f;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	f04f 0200 	mov.w	r2, #0
 80042b0:	f8c3 2174 	str.w	r2, [r3, #372]	@ 0x174
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <rate_controller_get_pid_outputs>:
void rate_controller_get_pid_outputs(
    rate_controller_t* fc,
    float* out_pid_roll,
    float* out_pid_pitch,
    float* out_pid_yaw
) {
 80042bc:	b480      	push	{r7}
 80042be:	b085      	sub	sp, #20
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
    // Ensure valid pointers before copying
    if (!fc) {
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d018      	beq.n	8004302 <rate_controller_get_pid_outputs+0x46>
        return; // Avoid null pointer access
    }
    if (out_pid_roll) {
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d004      	beq.n	80042e0 <rate_controller_get_pid_outputs+0x24>
        *out_pid_roll = fc->out_pid_roll;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f8d3 216c 	ldr.w	r2, [r3, #364]	@ 0x16c
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_pitch) {
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d004      	beq.n	80042f0 <rate_controller_get_pid_outputs+0x34>
        *out_pid_pitch = fc->out_pid_pitch;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f8d3 2170 	ldr.w	r2, [r3, #368]	@ 0x170
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	601a      	str	r2, [r3, #0]
    }
    if (out_pid_yaw) {
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d006      	beq.n	8004304 <rate_controller_get_pid_outputs+0x48>
        *out_pid_yaw = fc->out_pid_yaw;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f8d3 2174 	ldr.w	r2, [r3, #372]	@ 0x174
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e000      	b.n	8004304 <rate_controller_get_pid_outputs+0x48>
        return; // Avoid null pointer access
 8004302:	bf00      	nop
    }
}
 8004304:	3714      	adds	r7, #20
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <rc_channel_filter_init>:
#include "rc_control.h"
#include <math.h>
#include <string.h>
#include "geometry2D.h"

void rc_channel_filter_init(rc_channel_filter_t* channel, int enable_lpf, float lpf_cutoff_freq_hz, float deadband,float multiplier,  float expo, float sample_rate_hz) {
 800430e:	b580      	push	{r7, lr}
 8004310:	b088      	sub	sp, #32
 8004312:	af00      	add	r7, sp, #0
 8004314:	61f8      	str	r0, [r7, #28]
 8004316:	61b9      	str	r1, [r7, #24]
 8004318:	ed87 0a05 	vstr	s0, [r7, #20]
 800431c:	edc7 0a04 	vstr	s1, [r7, #16]
 8004320:	ed87 1a03 	vstr	s2, [r7, #12]
 8004324:	edc7 1a02 	vstr	s3, [r7, #8]
 8004328:	ed87 2a01 	vstr	s4, [r7, #4]
	memset(channel, 0, sizeof(rc_channel_filter_t));
 800432c:	2230      	movs	r2, #48	@ 0x30
 800432e:	2100      	movs	r1, #0
 8004330:	69f8      	ldr	r0, [r7, #28]
 8004332:	f016 faef 	bl	801a914 <memset>

	channel->enable_lpf = enable_lpf;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	69ba      	ldr	r2, [r7, #24]
 800433a:	601a      	str	r2, [r3, #0]
	if (enable_lpf) {
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <rc_channel_filter_init+0x46>
		pt1_filter_init_lowpass(&channel->lpf, lpf_cutoff_freq_hz, sample_rate_hz);
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	3304      	adds	r3, #4
 8004346:	edd7 0a01 	vldr	s1, [r7, #4]
 800434a:	ed97 0a05 	vldr	s0, [r7, #20]
 800434e:	4618      	mov	r0, r3
 8004350:	f7fd f97e 	bl	8001650 <pt1_filter_init_lowpass>
	}
	channel->smoothed = 0.0f;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	615a      	str	r2, [r3, #20]
	channel->raw = 0.0f;
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	619a      	str	r2, [r3, #24]
	channel->prev_raw = 0.0f;
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	61da      	str	r2, [r3, #28]
	channel->deadband = deadband;
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	621a      	str	r2, [r3, #32]
	channel->multiplier = multiplier;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	68fa      	ldr	r2, [r7, #12]
 8004376:	629a      	str	r2, [r3, #40]	@ 0x28
	channel->expo = expo;
 8004378:	69fb      	ldr	r3, [r7, #28]
 800437a:	68ba      	ldr	r2, [r7, #8]
 800437c:	625a      	str	r2, [r3, #36]	@ 0x24
	channel->sample_rate = sample_rate_hz;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8004384:	bf00      	nop
 8004386:	3720      	adds	r7, #32
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <rc_channel_filter_update>:

void rc_channel_filter_update(rc_channel_filter_t* channel, float raw_input) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b084      	sub	sp, #16
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	ed87 0a00 	vstr	s0, [r7]
	channel->prev_raw = channel->raw;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699a      	ldr	r2, [r3, #24]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	61da      	str	r2, [r3, #28]
	channel->raw = raw_input;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	619a      	str	r2, [r3, #24]

	float processed_input = raw_input;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	60fb      	str	r3, [r7, #12]

	// Apply deadband
	if (fabsf(processed_input) < channel->deadband) {
 80043aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80043ae:	eeb0 7ae7 	vabs.f32	s14, s15
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	edd3 7a08 	vldr	s15, [r3, #32]
 80043b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043c0:	d503      	bpl.n	80043ca <rc_channel_filter_update+0x3e>
		processed_input = 0.0f;
 80043c2:	f04f 0300 	mov.w	r3, #0
 80043c6:	60fb      	str	r3, [r7, #12]
 80043c8:	e02b      	b.n	8004422 <rc_channel_filter_update+0x96>
	}
	else {
		// Scale to compensate for deadband
		if (processed_input > 0.0f) {
 80043ca:	edd7 7a03 	vldr	s15, [r7, #12]
 80043ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d6:	dd12      	ble.n	80043fe <rc_channel_filter_update+0x72>
			processed_input = (processed_input - channel->deadband) / (1.0f - channel->deadband);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	edd3 7a08 	vldr	s15, [r3, #32]
 80043de:	ed97 7a03 	vldr	s14, [r7, #12]
 80043e2:	ee77 6a67 	vsub.f32	s13, s14, s15
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	edd3 7a08 	vldr	s15, [r3, #32]
 80043ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80043f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043f8:	edc7 7a03 	vstr	s15, [r7, #12]
 80043fc:	e011      	b.n	8004422 <rc_channel_filter_update+0x96>
		}
		else {
			processed_input = (processed_input + channel->deadband) / (1.0f - channel->deadband);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	ed93 7a08 	vldr	s14, [r3, #32]
 8004404:	edd7 7a03 	vldr	s15, [r7, #12]
 8004408:	ee77 6a27 	vadd.f32	s13, s14, s15
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	edd3 7a08 	vldr	s15, [r3, #32]
 8004412:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004416:	ee37 7a67 	vsub.f32	s14, s14, s15
 800441a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800441e:	edc7 7a03 	vstr	s15, [r7, #12]
		}
	}

	// Apply exponential curve
	if (channel->expo != 0.0f) {
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004428:	eef5 7a40 	vcmp.f32	s15, #0.0
 800442c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004430:	d01a      	beq.n	8004468 <rc_channel_filter_update+0xdc>
		processed_input = copysignf(powf(fabsf(processed_input), 1.0f + channel->expo), processed_input);
 8004432:	edd7 7a03 	vldr	s15, [r7, #12]
 8004436:	eeb0 7ae7 	vabs.f32	s14, s15
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8004440:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004448:	eef0 0a67 	vmov.f32	s1, s15
 800444c:	eeb0 0a47 	vmov.f32	s0, s14
 8004450:	f013 fbe8 	bl	8017c24 <powf>
 8004454:	eef0 7a40 	vmov.f32	s15, s0
 8004458:	edd7 0a03 	vldr	s1, [r7, #12]
 800445c:	eeb0 0a67 	vmov.f32	s0, s15
 8004460:	f013 fdc6 	bl	8017ff0 <copysignf>
 8004464:	ed87 0a03 	vstr	s0, [r7, #12]
	}

	processed_input = processed_input * channel->multiplier;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800446e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004476:	edc7 7a03 	vstr	s15, [r7, #12]

	if (channel->enable_lpf) {
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d008      	beq.n	8004494 <rc_channel_filter_update+0x108>
		processed_input = pt1_filter_apply_lowpass(&channel->lpf, processed_input);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	3304      	adds	r3, #4
 8004486:	ed97 0a03 	vldr	s0, [r7, #12]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fd f944 	bl	8001718 <pt1_filter_apply_lowpass>
 8004490:	ed87 0a03 	vstr	s0, [r7, #12]
	}
	channel->smoothed = processed_input;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	615a      	str	r2, [r3, #20]
}
 800449a:	bf00      	nop
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <rc_channel_filter_get_processed>:

float rc_channel_filter_get_processed(rc_channel_filter_t* channel) {
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
	return channel->smoothed;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	ee07 3a90 	vmov	s15, r3
}
 80044b2:	eeb0 0a67 	vmov.f32	s0, s15
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <rc_attitude_control_init_roll>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	61f8      	str	r0, [r7, #28]
 80044c8:	61b9      	str	r1, [r7, #24]
 80044ca:	ed87 0a05 	vstr	s0, [r7, #20]
 80044ce:	edc7 0a04 	vstr	s1, [r7, #16]
 80044d2:	ed87 1a03 	vstr	s2, [r7, #12]
 80044d6:	edc7 1a02 	vstr	s3, [r7, #8]
 80044da:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->roll_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	ed97 2a01 	vldr	s4, [r7, #4]
 80044e4:	edd7 1a02 	vldr	s3, [r7, #8]
 80044e8:	ed97 1a03 	vldr	s2, [r7, #12]
 80044ec:	edd7 0a04 	vldr	s1, [r7, #16]
 80044f0:	ed97 0a05 	vldr	s0, [r7, #20]
 80044f4:	69b9      	ldr	r1, [r7, #24]
 80044f6:	4618      	mov	r0, r3
 80044f8:	f7ff ff09 	bl	800430e <rc_channel_filter_init>
}
 80044fc:	bf00      	nop
 80044fe:	3720      	adds	r7, #32
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <rc_attitude_control_update_roll>:

void rc_attitude_control_update_roll(
	rc_attitude_control_t* rc,
	float raw_input
) {
 8004504:	b580      	push	{r7, lr}
 8004506:	b082      	sub	sp, #8
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 8004510:	edd7 7a00 	vldr	s15, [r7]
 8004514:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004518:	eef4 7ac7 	vcmpe.f32	s15, s14
 800451c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004520:	d501      	bpl.n	8004526 <rc_attitude_control_update_roll+0x22>
 8004522:	4b0d      	ldr	r3, [pc, #52]	@ (8004558 <rc_attitude_control_update_roll+0x54>)
 8004524:	e00c      	b.n	8004540 <rc_attitude_control_update_roll+0x3c>
 8004526:	edd7 7a00 	vldr	s15, [r7]
 800452a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800452e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004536:	dd02      	ble.n	800453e <rc_attitude_control_update_roll+0x3a>
 8004538:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800453c:	e000      	b.n	8004540 <rc_attitude_control_update_roll+0x3c>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->roll_filter, raw_input);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	ed97 0a00 	vldr	s0, [r7]
 8004548:	4618      	mov	r0, r3
 800454a:	f7ff ff1f 	bl	800438c <rc_channel_filter_update>
}
 800454e:	bf00      	nop
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}
 8004556:	bf00      	nop
 8004558:	bf800000 	.word	0xbf800000

0800455c <rc_attitude_control_get_processed_roll>:

float rc_attitude_control_get_processed_roll(
	rc_attitude_control_t* rc
) {
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->roll_filter);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4618      	mov	r0, r3
 8004568:	f7ff ff9b 	bl	80044a2 <rc_channel_filter_get_processed>
 800456c:	eef0 7a40 	vmov.f32	s15, s0
}
 8004570:	eeb0 0a67 	vmov.f32	s0, s15
 8004574:	3708      	adds	r7, #8
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <rc_attitude_control_init_pitch>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 800457a:	b580      	push	{r7, lr}
 800457c:	b088      	sub	sp, #32
 800457e:	af00      	add	r7, sp, #0
 8004580:	61f8      	str	r0, [r7, #28]
 8004582:	61b9      	str	r1, [r7, #24]
 8004584:	ed87 0a05 	vstr	s0, [r7, #20]
 8004588:	edc7 0a04 	vstr	s1, [r7, #16]
 800458c:	ed87 1a03 	vstr	s2, [r7, #12]
 8004590:	edc7 1a02 	vstr	s3, [r7, #8]
 8004594:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->pitch_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	3330      	adds	r3, #48	@ 0x30
 800459c:	ed97 2a01 	vldr	s4, [r7, #4]
 80045a0:	edd7 1a02 	vldr	s3, [r7, #8]
 80045a4:	ed97 1a03 	vldr	s2, [r7, #12]
 80045a8:	edd7 0a04 	vldr	s1, [r7, #16]
 80045ac:	ed97 0a05 	vldr	s0, [r7, #20]
 80045b0:	69b9      	ldr	r1, [r7, #24]
 80045b2:	4618      	mov	r0, r3
 80045b4:	f7ff feab 	bl	800430e <rc_channel_filter_init>
}
 80045b8:	bf00      	nop
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <rc_attitude_control_update_pitch>:

void rc_attitude_control_update_pitch(
	rc_attitude_control_t* rc,
	float raw_input
) {
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b082      	sub	sp, #8
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 80045cc:	edd7 7a00 	vldr	s15, [r7]
 80045d0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80045d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045dc:	d501      	bpl.n	80045e2 <rc_attitude_control_update_pitch+0x22>
 80045de:	4b0d      	ldr	r3, [pc, #52]	@ (8004614 <rc_attitude_control_update_pitch+0x54>)
 80045e0:	e00c      	b.n	80045fc <rc_attitude_control_update_pitch+0x3c>
 80045e2:	edd7 7a00 	vldr	s15, [r7]
 80045e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80045ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045f2:	dd02      	ble.n	80045fa <rc_attitude_control_update_pitch+0x3a>
 80045f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80045f8:	e000      	b.n	80045fc <rc_attitude_control_update_pitch+0x3c>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->pitch_filter, raw_input);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	3330      	adds	r3, #48	@ 0x30
 8004602:	ed97 0a00 	vldr	s0, [r7]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fec0 	bl	800438c <rc_channel_filter_update>
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	bf800000 	.word	0xbf800000

08004618 <rc_attitude_control_get_processed_pitch>:

float rc_attitude_control_get_processed_pitch(
	rc_attitude_control_t* rc
) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->pitch_filter);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3330      	adds	r3, #48	@ 0x30
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff ff3c 	bl	80044a2 <rc_channel_filter_get_processed>
 800462a:	eef0 7a40 	vmov.f32	s15, s0
}
 800462e:	eeb0 0a67 	vmov.f32	s0, s15
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <rc_attitude_control_init_yaw>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 8004638:	b580      	push	{r7, lr}
 800463a:	b088      	sub	sp, #32
 800463c:	af00      	add	r7, sp, #0
 800463e:	61f8      	str	r0, [r7, #28]
 8004640:	61b9      	str	r1, [r7, #24]
 8004642:	ed87 0a05 	vstr	s0, [r7, #20]
 8004646:	edc7 0a04 	vstr	s1, [r7, #16]
 800464a:	ed87 1a03 	vstr	s2, [r7, #12]
 800464e:	edc7 1a02 	vstr	s3, [r7, #8]
 8004652:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->yaw_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	3360      	adds	r3, #96	@ 0x60
 800465a:	ed97 2a01 	vldr	s4, [r7, #4]
 800465e:	edd7 1a02 	vldr	s3, [r7, #8]
 8004662:	ed97 1a03 	vldr	s2, [r7, #12]
 8004666:	edd7 0a04 	vldr	s1, [r7, #16]
 800466a:	ed97 0a05 	vldr	s0, [r7, #20]
 800466e:	69b9      	ldr	r1, [r7, #24]
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fe4c 	bl	800430e <rc_channel_filter_init>
}
 8004676:	bf00      	nop
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <rc_attitude_control_update_yaw>:

void rc_attitude_control_update_yaw(
	rc_attitude_control_t* rc,
	float raw_input
) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b082      	sub	sp, #8
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, -1.0f, 1.0f);
 800468c:	edd7 7a00 	vldr	s15, [r7]
 8004690:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800469c:	d501      	bpl.n	80046a2 <rc_attitude_control_update_yaw+0x22>
 800469e:	4b0d      	ldr	r3, [pc, #52]	@ (80046d4 <rc_attitude_control_update_yaw+0x54>)
 80046a0:	e00c      	b.n	80046bc <rc_attitude_control_update_yaw+0x3c>
 80046a2:	edd7 7a00 	vldr	s15, [r7]
 80046a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046aa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80046ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046b2:	dd02      	ble.n	80046ba <rc_attitude_control_update_yaw+0x3a>
 80046b4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80046b8:	e000      	b.n	80046bc <rc_attitude_control_update_yaw+0x3c>
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->yaw_filter, raw_input);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3360      	adds	r3, #96	@ 0x60
 80046c2:	ed97 0a00 	vldr	s0, [r7]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff fe60 	bl	800438c <rc_channel_filter_update>
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	bf800000 	.word	0xbf800000

080046d8 <rc_attitude_control_get_processed_yaw>:

float rc_attitude_control_get_processed_yaw(
	rc_attitude_control_t* rc
) {
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->yaw_filter);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3360      	adds	r3, #96	@ 0x60
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff fedc 	bl	80044a2 <rc_channel_filter_get_processed>
 80046ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80046ee:	eeb0 0a67 	vmov.f32	s0, s15
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <rc_attitude_control_init_throttle>:
	float lpf_cutoff_freq_hz,
	float deadband,
	float multiplier,
	float expo,
	float sample_rate_hz
) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	61f8      	str	r0, [r7, #28]
 8004700:	61b9      	str	r1, [r7, #24]
 8004702:	ed87 0a05 	vstr	s0, [r7, #20]
 8004706:	edc7 0a04 	vstr	s1, [r7, #16]
 800470a:	ed87 1a03 	vstr	s2, [r7, #12]
 800470e:	edc7 1a02 	vstr	s3, [r7, #8]
 8004712:	ed87 2a01 	vstr	s4, [r7, #4]
	rc_channel_filter_init(&rc->throttle_filter, enable_lpf, lpf_cutoff_freq_hz, deadband, multiplier, expo, sample_rate_hz);
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3390      	adds	r3, #144	@ 0x90
 800471a:	ed97 2a01 	vldr	s4, [r7, #4]
 800471e:	edd7 1a02 	vldr	s3, [r7, #8]
 8004722:	ed97 1a03 	vldr	s2, [r7, #12]
 8004726:	edd7 0a04 	vldr	s1, [r7, #16]
 800472a:	ed97 0a05 	vldr	s0, [r7, #20]
 800472e:	69b9      	ldr	r1, [r7, #24]
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fdec 	bl	800430e <rc_channel_filter_init>
}
 8004736:	bf00      	nop
 8004738:	3720      	adds	r7, #32
 800473a:	46bd      	mov	sp, r7
 800473c:	bd80      	pop	{r7, pc}

0800473e <rc_attitude_control_update_throttle>:

void rc_attitude_control_update_throttle(
	rc_attitude_control_t* rc,
	float raw_input
) {
 800473e:	b580      	push	{r7, lr}
 8004740:	b082      	sub	sp, #8
 8004742:	af00      	add	r7, sp, #0
 8004744:	6078      	str	r0, [r7, #4]
 8004746:	ed87 0a00 	vstr	s0, [r7]
	raw_input = CLAMP(raw_input, 0.0f, 1.0f);
 800474a:	edd7 7a00 	vldr	s15, [r7]
 800474e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004756:	d502      	bpl.n	800475e <rc_attitude_control_update_throttle+0x20>
 8004758:	f04f 0300 	mov.w	r3, #0
 800475c:	e00c      	b.n	8004778 <rc_attitude_control_update_throttle+0x3a>
 800475e:	edd7 7a00 	vldr	s15, [r7]
 8004762:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004766:	eef4 7ac7 	vcmpe.f32	s15, s14
 800476a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800476e:	dd02      	ble.n	8004776 <rc_attitude_control_update_throttle+0x38>
 8004770:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004774:	e000      	b.n	8004778 <rc_attitude_control_update_throttle+0x3a>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	603b      	str	r3, [r7, #0]
	rc_channel_filter_update(&rc->throttle_filter, raw_input);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	3390      	adds	r3, #144	@ 0x90
 800477e:	ed97 0a00 	vldr	s0, [r7]
 8004782:	4618      	mov	r0, r3
 8004784:	f7ff fe02 	bl	800438c <rc_channel_filter_update>
}
 8004788:	bf00      	nop
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <rc_attitude_control_get_processed_throttle>:

float rc_attitude_control_get_processed_throttle(
	rc_attitude_control_t* rc
) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	return rc_channel_filter_get_processed(&rc->throttle_filter);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	3390      	adds	r3, #144	@ 0x90
 800479c:	4618      	mov	r0, r3
 800479e:	f7ff fe80 	bl	80044a2 <rc_channel_filter_get_processed>
 80047a2:	eef0 7a40 	vmov.f32	s15, s0
}
 80047a6:	eeb0 0a67 	vmov.f32	s0, s15
 80047aa:	3708      	adds	r7, #8
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <rc_attitude_control_update>:
	rc_attitude_control_t* rc,
	float raw_roll,
	float raw_pitch,
	float raw_yaw,
	float raw_throttle
) {
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6178      	str	r0, [r7, #20]
 80047b8:	ed87 0a04 	vstr	s0, [r7, #16]
 80047bc:	edc7 0a03 	vstr	s1, [r7, #12]
 80047c0:	ed87 1a02 	vstr	s2, [r7, #8]
 80047c4:	edc7 1a01 	vstr	s3, [r7, #4]
	rc_attitude_control_update_roll(rc, raw_roll);
 80047c8:	ed97 0a04 	vldr	s0, [r7, #16]
 80047cc:	6978      	ldr	r0, [r7, #20]
 80047ce:	f7ff fe99 	bl	8004504 <rc_attitude_control_update_roll>
	rc_attitude_control_update_pitch(rc, raw_pitch);
 80047d2:	ed97 0a03 	vldr	s0, [r7, #12]
 80047d6:	6978      	ldr	r0, [r7, #20]
 80047d8:	f7ff fef2 	bl	80045c0 <rc_attitude_control_update_pitch>
	rc_attitude_control_update_yaw(rc, raw_yaw);
 80047dc:	ed97 0a02 	vldr	s0, [r7, #8]
 80047e0:	6978      	ldr	r0, [r7, #20]
 80047e2:	f7ff ff4d 	bl	8004680 <rc_attitude_control_update_yaw>
	rc_attitude_control_update_throttle(rc, raw_throttle);
 80047e6:	ed97 0a01 	vldr	s0, [r7, #4]
 80047ea:	6978      	ldr	r0, [r7, #20]
 80047ec:	f7ff ffa7 	bl	800473e <rc_attitude_control_update_throttle>

}
 80047f0:	bf00      	nop
 80047f2:	3718      	adds	r7, #24
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}

080047f8 <rc_attitude_control_get_processed>:
	rc_attitude_control_t* rc,
	float* roll,
	float* pitch,
	float* yaw,
	float* throttle
) {
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b084      	sub	sp, #16
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	60f8      	str	r0, [r7, #12]
 8004800:	60b9      	str	r1, [r7, #8]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
	if (roll) {
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d007      	beq.n	800481c <rc_attitude_control_get_processed+0x24>
		*roll = rc_attitude_control_get_processed_roll(rc);
 800480c:	68f8      	ldr	r0, [r7, #12]
 800480e:	f7ff fea5 	bl	800455c <rc_attitude_control_get_processed_roll>
 8004812:	eef0 7a40 	vmov.f32	s15, s0
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	edc3 7a00 	vstr	s15, [r3]
	}
	if (pitch) {
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d007      	beq.n	8004832 <rc_attitude_control_get_processed+0x3a>
		*pitch = rc_attitude_control_get_processed_pitch(rc);
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f7ff fef8 	bl	8004618 <rc_attitude_control_get_processed_pitch>
 8004828:	eef0 7a40 	vmov.f32	s15, s0
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	edc3 7a00 	vstr	s15, [r3]
	}

	if (yaw) {
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <rc_attitude_control_get_processed+0x50>
		*yaw = rc_attitude_control_get_processed_yaw(rc);
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff ff4d 	bl	80046d8 <rc_attitude_control_get_processed_yaw>
 800483e:	eef0 7a40 	vmov.f32	s15, s0
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	edc3 7a00 	vstr	s15, [r3]
	}

	if (throttle) {
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d007      	beq.n	800485e <rc_attitude_control_get_processed+0x66>
		*throttle = rc_attitude_control_get_processed_throttle(rc);
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7ff ff9e 	bl	8004790 <rc_attitude_control_get_processed_throttle>
 8004854:	eef0 7a40 	vmov.f32	s15, s0
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	edc3 7a00 	vstr	s15, [r3]
	}
 800485e:	bf00      	nop
 8004860:	3710      	adds	r7, #16
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
	...

08004868 <lwshell_init_ex>:
 * \brief           Initialize shell interface
 * \param[in]       lwobj: LwSHELL object instance. Set to `NULL` to use default one
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 */
lwshellr_t
lwshell_init_ex(lwshell_t* lwobj) {
 8004868:	b580      	push	{r7, lr}
 800486a:	b082      	sub	sp, #8
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <lwshell_init_ex+0x12>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	e000      	b.n	800487c <lwshell_init_ex+0x14>
 800487a:	4b06      	ldr	r3, [pc, #24]	@ (8004894 <lwshell_init_ex+0x2c>)
 800487c:	607b      	str	r3, [r7, #4]
    LWSHELL_MEMSET(lwobj, 0x00, sizeof(*lwobj));
 800487e:	f44f 728a 	mov.w	r2, #276	@ 0x114
 8004882:	2100      	movs	r1, #0
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f016 f845 	bl	801a914 <memset>
    return lwshellOK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	2000044c 	.word	0x2000044c

08004898 <lwshell_register_cmd_ex>:
 * \param[in]       desc: Custom command description
 * \return          \ref lwshellOK on success, member of \ref lwshellr_t otherwise
 * \note            Available only when \ref LWSHELL_CFG_USE_DYNAMIC_COMMANDS is enabled
 */
lwshellr_t
lwshell_register_cmd_ex(lwshell_t* lwobj, const char* cmd_name, lwshell_cmd_fn cmd_fn, const char* desc) {
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
 80048a4:	603b      	str	r3, [r7, #0]
    lwobj = LWSHELL_GET_LWOBJ(lwobj);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <lwshell_register_cmd_ex+0x18>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	e000      	b.n	80048b2 <lwshell_register_cmd_ex+0x1a>
 80048b0:	4b23      	ldr	r3, [pc, #140]	@ (8004940 <lwshell_register_cmd_ex+0xa8>)
 80048b2:	60fb      	str	r3, [r7, #12]

    if (cmd_name == NULL || cmd_fn == NULL || strlen(cmd_name) == 0) {
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d006      	beq.n	80048c8 <lwshell_register_cmd_ex+0x30>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <lwshell_register_cmd_ex+0x30>
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d101      	bne.n	80048cc <lwshell_register_cmd_ex+0x34>
        return lwshellERRPAR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e032      	b.n	8004932 <lwshell_register_cmd_ex+0x9a>
    }

    /* Check for memory available */
    if (lwobj->dynamic_cmds_cnt < LWSHELL_ARRAYSIZE(lwobj->dynamic_cmds)) {
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80048d2:	2b07      	cmp	r3, #7
 80048d4:	d82c      	bhi.n	8004930 <lwshell_register_cmd_ex+0x98>
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].name = cmd_name;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80048dc:	68f9      	ldr	r1, [r7, #12]
 80048de:	4613      	mov	r3, r2
 80048e0:	005b      	lsls	r3, r3, #1
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	33b4      	adds	r3, #180	@ 0xb4
 80048ea:	68ba      	ldr	r2, [r7, #8]
 80048ec:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].fn = cmd_fn;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80048f4:	68f9      	ldr	r1, [r7, #12]
 80048f6:	4613      	mov	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	33b0      	adds	r3, #176	@ 0xb0
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	601a      	str	r2, [r3, #0]
        lwobj->dynamic_cmds[lwobj->dynamic_cmds_cnt].desc = desc;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800490c:	68f9      	ldr	r1, [r7, #12]
 800490e:	4613      	mov	r3, r2
 8004910:	005b      	lsls	r3, r3, #1
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	33b8      	adds	r3, #184	@ 0xb8
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	601a      	str	r2, [r3, #0]

        ++lwobj->dynamic_cmds_cnt;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8004924:	1c5a      	adds	r2, r3, #1
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
        return lwshellOK;
 800492c:	2300      	movs	r3, #0
 800492e:	e000      	b.n	8004932 <lwshell_register_cmd_ex+0x9a>
    }
    return lwshellERRMEM;
 8004930:	2302      	movs	r3, #2
}
 8004932:	4618      	mov	r0, r3
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	2000044c 	.word	0x2000044c

08004944 <mpu6500_basic_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      spi can't read magnetometer data
 */
uint8_t mpu6500_basic_init(mpu6500_interface_t interface, mpu6500_address_t addr_pin)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b084      	sub	sp, #16
 8004948:	af00      	add	r7, sp, #0
 800494a:	4603      	mov	r3, r0
 800494c:	460a      	mov	r2, r1
 800494e:	71fb      	strb	r3, [r7, #7]
 8004950:	4613      	mov	r3, r2
 8004952:	71bb      	strb	r3, [r7, #6]
    uint8_t res;
    
    /* link interface function */
    DRIVER_MPU6500_LINK_INIT(&gs_handle_mpu6500, mpu6500_handle_t);
 8004954:	f44f 6288 	mov.w	r2, #1088	@ 0x440
 8004958:	2100      	movs	r1, #0
 800495a:	48a4      	ldr	r0, [pc, #656]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 800495c:	f015 ffda 	bl	801a914 <memset>
    DRIVER_MPU6500_LINK_IIC_INIT(&gs_handle_mpu6500, mpu6500_interface_iic_init);
 8004960:	4ba2      	ldr	r3, [pc, #648]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004962:	4aa3      	ldr	r2, [pc, #652]	@ (8004bf0 <mpu6500_basic_init+0x2ac>)
 8004964:	605a      	str	r2, [r3, #4]
    DRIVER_MPU6500_LINK_IIC_DEINIT(&gs_handle_mpu6500, mpu6500_interface_iic_deinit);
 8004966:	4ba1      	ldr	r3, [pc, #644]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004968:	4aa2      	ldr	r2, [pc, #648]	@ (8004bf4 <mpu6500_basic_init+0x2b0>)
 800496a:	609a      	str	r2, [r3, #8]
    DRIVER_MPU6500_LINK_IIC_READ(&gs_handle_mpu6500, mpu6500_interface_iic_read);
 800496c:	4b9f      	ldr	r3, [pc, #636]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 800496e:	4aa2      	ldr	r2, [pc, #648]	@ (8004bf8 <mpu6500_basic_init+0x2b4>)
 8004970:	60da      	str	r2, [r3, #12]
    DRIVER_MPU6500_LINK_IIC_WRITE(&gs_handle_mpu6500, mpu6500_interface_iic_write);
 8004972:	4b9e      	ldr	r3, [pc, #632]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004974:	4aa1      	ldr	r2, [pc, #644]	@ (8004bfc <mpu6500_basic_init+0x2b8>)
 8004976:	611a      	str	r2, [r3, #16]
    DRIVER_MPU6500_LINK_SPI_INIT(&gs_handle_mpu6500, mpu6500_interface_spi_init);
 8004978:	4b9c      	ldr	r3, [pc, #624]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 800497a:	4aa1      	ldr	r2, [pc, #644]	@ (8004c00 <mpu6500_basic_init+0x2bc>)
 800497c:	615a      	str	r2, [r3, #20]
    DRIVER_MPU6500_LINK_SPI_DEINIT(&gs_handle_mpu6500, mpu6500_interface_spi_deinit);
 800497e:	4b9b      	ldr	r3, [pc, #620]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004980:	4aa0      	ldr	r2, [pc, #640]	@ (8004c04 <mpu6500_basic_init+0x2c0>)
 8004982:	619a      	str	r2, [r3, #24]
    DRIVER_MPU6500_LINK_SPI_READ(&gs_handle_mpu6500, mpu6500_interface_spi_read);
 8004984:	4b99      	ldr	r3, [pc, #612]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004986:	4aa0      	ldr	r2, [pc, #640]	@ (8004c08 <mpu6500_basic_init+0x2c4>)
 8004988:	61da      	str	r2, [r3, #28]
    DRIVER_MPU6500_LINK_SPI_WRITE(&gs_handle_mpu6500, mpu6500_interface_spi_write);
 800498a:	4b98      	ldr	r3, [pc, #608]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 800498c:	4a9f      	ldr	r2, [pc, #636]	@ (8004c0c <mpu6500_basic_init+0x2c8>)
 800498e:	621a      	str	r2, [r3, #32]
    DRIVER_MPU6500_LINK_DELAY_MS(&gs_handle_mpu6500, mpu6500_interface_delay_ms);
 8004990:	4b96      	ldr	r3, [pc, #600]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004992:	4a9f      	ldr	r2, [pc, #636]	@ (8004c10 <mpu6500_basic_init+0x2cc>)
 8004994:	625a      	str	r2, [r3, #36]	@ 0x24
    DRIVER_MPU6500_LINK_DEBUG_PRINT(&gs_handle_mpu6500, mpu6500_interface_debug_print);
 8004996:	4b95      	ldr	r3, [pc, #596]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004998:	4a9e      	ldr	r2, [pc, #632]	@ (8004c14 <mpu6500_basic_init+0x2d0>)
 800499a:	629a      	str	r2, [r3, #40]	@ 0x28
    DRIVER_MPU6500_LINK_RECEIVE_CALLBACK(&gs_handle_mpu6500, mpu6500_interface_receive_callback);
 800499c:	4b93      	ldr	r3, [pc, #588]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 800499e:	4a9e      	ldr	r2, [pc, #632]	@ (8004c18 <mpu6500_basic_init+0x2d4>)
 80049a0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* set the interface */
    res = mpu6500_set_interface(&gs_handle_mpu6500, interface);
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	4619      	mov	r1, r3
 80049a6:	4891      	ldr	r0, [pc, #580]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 80049a8:	f000 fd86 	bl	80054b8 <mpu6500_set_interface>
 80049ac:	4603      	mov	r3, r0
 80049ae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80049b0:	7bfb      	ldrb	r3, [r7, #15]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d004      	beq.n	80049c0 <mpu6500_basic_init+0x7c>
    {
        mpu6500_interface_debug_print("mpu6500: set interface failed.\n");
 80049b6:	4899      	ldr	r0, [pc, #612]	@ (8004c1c <mpu6500_basic_init+0x2d8>)
 80049b8:	f000 fca2 	bl	8005300 <mpu6500_interface_debug_print>
       
        return 1;
 80049bc:	2301      	movs	r3, #1
 80049be:	e3ce      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the addr pin */
    res = mpu6500_set_addr_pin(&gs_handle_mpu6500, addr_pin);
 80049c0:	79bb      	ldrb	r3, [r7, #6]
 80049c2:	4619      	mov	r1, r3
 80049c4:	4889      	ldr	r0, [pc, #548]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 80049c6:	f000 fd8d 	bl	80054e4 <mpu6500_set_addr_pin>
 80049ca:	4603      	mov	r3, r0
 80049cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80049ce:	7bfb      	ldrb	r3, [r7, #15]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d004      	beq.n	80049de <mpu6500_basic_init+0x9a>
    {
        mpu6500_interface_debug_print("mpu6500: set addr pin failed.\n");
 80049d4:	4892      	ldr	r0, [pc, #584]	@ (8004c20 <mpu6500_basic_init+0x2dc>)
 80049d6:	f000 fc93 	bl	8005300 <mpu6500_interface_debug_print>
       
        return 1;
 80049da:	2301      	movs	r3, #1
 80049dc:	e3bf      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* init */
    res = mpu6500_init(&gs_handle_mpu6500);
 80049de:	4883      	ldr	r0, [pc, #524]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 80049e0:	f000 fd96 	bl	8005510 <mpu6500_init>
 80049e4:	4603      	mov	r3, r0
 80049e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80049e8:	7bfb      	ldrb	r3, [r7, #15]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d004      	beq.n	80049f8 <mpu6500_basic_init+0xb4>
    {
        mpu6500_interface_debug_print("mpu6500: init failed.\n");
 80049ee:	488d      	ldr	r0, [pc, #564]	@ (8004c24 <mpu6500_basic_init+0x2e0>)
 80049f0:	f000 fc86 	bl	8005300 <mpu6500_interface_debug_print>
       
        return 1;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e3b2      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* delay 100 ms */
    mpu6500_interface_delay_ms(100);
 80049f8:	2064      	movs	r0, #100	@ 0x64
 80049fa:	f000 fc6b 	bl	80052d4 <mpu6500_interface_delay_ms>
    
    /* disable sleep */
    res = mpu6500_set_sleep(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 80049fe:	2100      	movs	r1, #0
 8004a00:	487a      	ldr	r0, [pc, #488]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004a02:	f001 ff61 	bl	80068c8 <mpu6500_set_sleep>
 8004a06:	4603      	mov	r3, r0
 8004a08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d007      	beq.n	8004a20 <mpu6500_basic_init+0xdc>
    {
        mpu6500_interface_debug_print("mpu6500: set sleep failed.\n");
 8004a10:	4885      	ldr	r0, [pc, #532]	@ (8004c28 <mpu6500_basic_init+0x2e4>)
 8004a12:	f000 fc75 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a16:	4875      	ldr	r0, [pc, #468]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004a18:	f000 fea6 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e39e      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* if spi interface, disable iic interface */
    if (interface == MPU6500_INTERFACE_SPI)
 8004a20:	79fb      	ldrb	r3, [r7, #7]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d110      	bne.n	8004a48 <mpu6500_basic_init+0x104>
    {
        /* disable iic */
        res = mpu6500_set_disable_iic_slave(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 8004a26:	2101      	movs	r1, #1
 8004a28:	4870      	ldr	r0, [pc, #448]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004a2a:	f001 fe17 	bl	800665c <mpu6500_set_disable_iic_slave>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	73fb      	strb	r3, [r7, #15]
        if (res != 0)
 8004a32:	7bfb      	ldrb	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d007      	beq.n	8004a48 <mpu6500_basic_init+0x104>
        {
            mpu6500_interface_debug_print("mpu6500: set disable iic slave failed.\n");
 8004a38:	487c      	ldr	r0, [pc, #496]	@ (8004c2c <mpu6500_basic_init+0x2e8>)
 8004a3a:	f000 fc61 	bl	8005300 <mpu6500_interface_debug_print>
            (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a3e:	486b      	ldr	r0, [pc, #428]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004a40:	f000 fe92 	bl	8005768 <mpu6500_deinit>
           
            return 1;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e38a      	b.n	800515e <mpu6500_basic_init+0x81a>
        }
    }
    
    /* set fifo 1024kb */
    res = mpu6500_set_fifo_1024kb(&gs_handle_mpu6500);
 8004a48:	4868      	ldr	r0, [pc, #416]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004a4a:	f002 fae7 	bl	800701c <mpu6500_set_fifo_1024kb>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a52:	7bfb      	ldrb	r3, [r7, #15]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d007      	beq.n	8004a68 <mpu6500_basic_init+0x124>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo 1024kb failed.\n");
 8004a58:	4875      	ldr	r0, [pc, #468]	@ (8004c30 <mpu6500_basic_init+0x2ec>)
 8004a5a:	f000 fc51 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a5e:	4863      	ldr	r0, [pc, #396]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004a60:	f000 fe82 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e37a      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default clock source */
    res = mpu6500_set_clock_source(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CLOCK_SOURCE);
 8004a68:	2101      	movs	r1, #1
 8004a6a:	4860      	ldr	r0, [pc, #384]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004a6c:	f001 fe44 	bl	80066f8 <mpu6500_set_clock_source>
 8004a70:	4603      	mov	r3, r0
 8004a72:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a74:	7bfb      	ldrb	r3, [r7, #15]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d007      	beq.n	8004a8a <mpu6500_basic_init+0x146>
    {
        mpu6500_interface_debug_print("mpu6500: set clock source failed.\n");
 8004a7a:	486e      	ldr	r0, [pc, #440]	@ (8004c34 <mpu6500_basic_init+0x2f0>)
 8004a7c:	f000 fc40 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004a80:	485a      	ldr	r0, [pc, #360]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004a82:	f000 fe71 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e369      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default rate */
    res = mpu6500_set_sample_rate_divider(&gs_handle_mpu6500, (1000 / MPU6500_BASIC_DEFAULT_RATE) - 1);
 8004a8a:	2100      	movs	r1, #0
 8004a8c:	4857      	ldr	r0, [pc, #348]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004a8e:	f002 f811 	bl	8006ab4 <mpu6500_set_sample_rate_divider>
 8004a92:	4603      	mov	r3, r0
 8004a94:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d007      	beq.n	8004aac <mpu6500_basic_init+0x168>
    {
        mpu6500_interface_debug_print("mpu6500: set sample rate divider failed.\n");
 8004a9c:	4866      	ldr	r0, [pc, #408]	@ (8004c38 <mpu6500_basic_init+0x2f4>)
 8004a9e:	f000 fc2f 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004aa2:	4852      	ldr	r0, [pc, #328]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004aa4:	f000 fe60 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	e358      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* enable temperature sensor */
    res = mpu6500_set_ptat(&gs_handle_mpu6500, MPU6500_BOOL_TRUE);
 8004aac:	2101      	movs	r1, #1
 8004aae:	484f      	ldr	r0, [pc, #316]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004ab0:	f001 fe6c 	bl	800678c <mpu6500_set_ptat>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d007      	beq.n	8004ace <mpu6500_basic_init+0x18a>
    {
        mpu6500_interface_debug_print("mpu6500: set ptat failed.\n");
 8004abe:	485f      	ldr	r0, [pc, #380]	@ (8004c3c <mpu6500_basic_init+0x2f8>)
 8004ac0:	f000 fc1e 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ac4:	4849      	ldr	r0, [pc, #292]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004ac6:	f000 fe4f 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e347      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default cycle wake up */
    res = mpu6500_set_cycle_wake_up(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_CYCLE_WAKE_UP);
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4846      	ldr	r0, [pc, #280]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004ad2:	f001 feab 	bl	800682c <mpu6500_set_cycle_wake_up>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ada:	7bfb      	ldrb	r3, [r7, #15]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d007      	beq.n	8004af0 <mpu6500_basic_init+0x1ac>
    {
        mpu6500_interface_debug_print("mpu6500: set cycle wake up failed.\n");
 8004ae0:	4857      	ldr	r0, [pc, #348]	@ (8004c40 <mpu6500_basic_init+0x2fc>)
 8004ae2:	f000 fc0d 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ae6:	4841      	ldr	r0, [pc, #260]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004ae8:	f000 fe3e 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e336      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_X, MPU6500_BOOL_FALSE);
 8004af0:	2200      	movs	r2, #0
 8004af2:	2105      	movs	r1, #5
 8004af4:	483d      	ldr	r0, [pc, #244]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004af6:	f001 ff83 	bl	8006a00 <mpu6500_set_standby_mode>
 8004afa:	4603      	mov	r3, r0
 8004afc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d007      	beq.n	8004b14 <mpu6500_basic_init+0x1d0>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004b04:	484f      	ldr	r0, [pc, #316]	@ (8004c44 <mpu6500_basic_init+0x300>)
 8004b06:	f000 fbfb 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b0a:	4838      	ldr	r0, [pc, #224]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004b0c:	f000 fe2c 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e324      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Y, MPU6500_BOOL_FALSE);
 8004b14:	2200      	movs	r2, #0
 8004b16:	2104      	movs	r1, #4
 8004b18:	4834      	ldr	r0, [pc, #208]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004b1a:	f001 ff71 	bl	8006a00 <mpu6500_set_standby_mode>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004b22:	7bfb      	ldrb	r3, [r7, #15]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <mpu6500_basic_init+0x1f4>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004b28:	4846      	ldr	r0, [pc, #280]	@ (8004c44 <mpu6500_basic_init+0x300>)
 8004b2a:	f000 fbe9 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b2e:	482f      	ldr	r0, [pc, #188]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004b30:	f000 fe1a 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e312      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* enable acc z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_ACC_Z, MPU6500_BOOL_FALSE);
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2103      	movs	r1, #3
 8004b3c:	482b      	ldr	r0, [pc, #172]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004b3e:	f001 ff5f 	bl	8006a00 <mpu6500_set_standby_mode>
 8004b42:	4603      	mov	r3, r0
 8004b44:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d007      	beq.n	8004b5c <mpu6500_basic_init+0x218>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004b4c:	483d      	ldr	r0, [pc, #244]	@ (8004c44 <mpu6500_basic_init+0x300>)
 8004b4e:	f000 fbd7 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b52:	4826      	ldr	r0, [pc, #152]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004b54:	f000 fe08 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e300      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro x */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_X, MPU6500_BOOL_FALSE);
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2102      	movs	r1, #2
 8004b60:	4822      	ldr	r0, [pc, #136]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004b62:	f001 ff4d 	bl	8006a00 <mpu6500_set_standby_mode>
 8004b66:	4603      	mov	r3, r0
 8004b68:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004b6a:	7bfb      	ldrb	r3, [r7, #15]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <mpu6500_basic_init+0x23c>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004b70:	4834      	ldr	r0, [pc, #208]	@ (8004c44 <mpu6500_basic_init+0x300>)
 8004b72:	f000 fbc5 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b76:	481d      	ldr	r0, [pc, #116]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004b78:	f000 fdf6 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e2ee      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro y */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Y, MPU6500_BOOL_FALSE);
 8004b80:	2200      	movs	r2, #0
 8004b82:	2101      	movs	r1, #1
 8004b84:	4819      	ldr	r0, [pc, #100]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004b86:	f001 ff3b 	bl	8006a00 <mpu6500_set_standby_mode>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004b8e:	7bfb      	ldrb	r3, [r7, #15]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <mpu6500_basic_init+0x260>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004b94:	482b      	ldr	r0, [pc, #172]	@ (8004c44 <mpu6500_basic_init+0x300>)
 8004b96:	f000 fbb3 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004b9a:	4814      	ldr	r0, [pc, #80]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004b9c:	f000 fde4 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e2dc      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* enable gyro z */
    res = mpu6500_set_standby_mode(&gs_handle_mpu6500, MPU6500_SOURCE_GYRO_Z, MPU6500_BOOL_FALSE);
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4810      	ldr	r0, [pc, #64]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004baa:	f001 ff29 	bl	8006a00 <mpu6500_set_standby_mode>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004bb2:	7bfb      	ldrb	r3, [r7, #15]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <mpu6500_basic_init+0x284>
    {
        mpu6500_interface_debug_print("mpu6500: set standby mode failed.\n");
 8004bb8:	4822      	ldr	r0, [pc, #136]	@ (8004c44 <mpu6500_basic_init+0x300>)
 8004bba:	f000 fba1 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004bbe:	480b      	ldr	r0, [pc, #44]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004bc0:	f000 fdd2 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e2ca      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope x test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8004bc8:	2200      	movs	r2, #0
 8004bca:	2107      	movs	r1, #7
 8004bcc:	4807      	ldr	r0, [pc, #28]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004bce:	f002 f881 	bl	8006cd4 <mpu6500_set_gyroscope_test>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004bd6:	7bfb      	ldrb	r3, [r7, #15]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d037      	beq.n	8004c4c <mpu6500_basic_init+0x308>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004bdc:	481a      	ldr	r0, [pc, #104]	@ (8004c48 <mpu6500_basic_init+0x304>)
 8004bde:	f000 fb8f 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004be2:	4802      	ldr	r0, [pc, #8]	@ (8004bec <mpu6500_basic_init+0x2a8>)
 8004be4:	f000 fdc0 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e2b8      	b.n	800515e <mpu6500_basic_init+0x81a>
 8004bec:	20000560 	.word	0x20000560
 8004bf0:	080051ad 	.word	0x080051ad
 8004bf4:	080051bd 	.word	0x080051bd
 8004bf8:	080051cd 	.word	0x080051cd
 8004bfc:	080051f1 	.word	0x080051f1
 8004c00:	08005215 	.word	0x08005215
 8004c04:	08005225 	.word	0x08005225
 8004c08:	08005235 	.word	0x08005235
 8004c0c:	08005285 	.word	0x08005285
 8004c10:	080052d5 	.word	0x080052d5
 8004c14:	08005301 	.word	0x08005301
 8004c18:	08005331 	.word	0x08005331
 8004c1c:	0801e6b4 	.word	0x0801e6b4
 8004c20:	0801e6d4 	.word	0x0801e6d4
 8004c24:	0801e6f4 	.word	0x0801e6f4
 8004c28:	0801e70c 	.word	0x0801e70c
 8004c2c:	0801e728 	.word	0x0801e728
 8004c30:	0801e750 	.word	0x0801e750
 8004c34:	0801e774 	.word	0x0801e774
 8004c38:	0801e798 	.word	0x0801e798
 8004c3c:	0801e7c4 	.word	0x0801e7c4
 8004c40:	0801e7e0 	.word	0x0801e7e0
 8004c44:	0801e804 	.word	0x0801e804
 8004c48:	0801e828 	.word	0x0801e828
    }
    
    /* disable gyroscope y test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	2106      	movs	r1, #6
 8004c50:	48b0      	ldr	r0, [pc, #704]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004c52:	f002 f83f 	bl	8006cd4 <mpu6500_set_gyroscope_test>
 8004c56:	4603      	mov	r3, r0
 8004c58:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c5a:	7bfb      	ldrb	r3, [r7, #15]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <mpu6500_basic_init+0x32c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004c60:	48ad      	ldr	r0, [pc, #692]	@ (8004f18 <mpu6500_basic_init+0x5d4>)
 8004c62:	f000 fb4d 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c66:	48ab      	ldr	r0, [pc, #684]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004c68:	f000 fd7e 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e276      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* disable gyroscope z test */
    res = mpu6500_set_gyroscope_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8004c70:	2200      	movs	r2, #0
 8004c72:	2105      	movs	r1, #5
 8004c74:	48a7      	ldr	r0, [pc, #668]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004c76:	f002 f82d 	bl	8006cd4 <mpu6500_set_gyroscope_test>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004c7e:	7bfb      	ldrb	r3, [r7, #15]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <mpu6500_basic_init+0x350>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope test failed.\n");
 8004c84:	48a4      	ldr	r0, [pc, #656]	@ (8004f18 <mpu6500_basic_init+0x5d4>)
 8004c86:	f000 fb3b 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004c8a:	48a2      	ldr	r0, [pc, #648]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004c8c:	f000 fd6c 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e264      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer x test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_X, MPU6500_BOOL_FALSE);
 8004c94:	2200      	movs	r2, #0
 8004c96:	2107      	movs	r1, #7
 8004c98:	489e      	ldr	r0, [pc, #632]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004c9a:	f002 f917 	bl	8006ecc <mpu6500_set_accelerometer_test>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ca2:	7bfb      	ldrb	r3, [r7, #15]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <mpu6500_basic_init+0x374>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004ca8:	489c      	ldr	r0, [pc, #624]	@ (8004f1c <mpu6500_basic_init+0x5d8>)
 8004caa:	f000 fb29 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004cae:	4899      	ldr	r0, [pc, #612]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004cb0:	f000 fd5a 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e252      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer y test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Y, MPU6500_BOOL_FALSE);
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2106      	movs	r1, #6
 8004cbc:	4895      	ldr	r0, [pc, #596]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004cbe:	f002 f905 	bl	8006ecc <mpu6500_set_accelerometer_test>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <mpu6500_basic_init+0x398>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004ccc:	4893      	ldr	r0, [pc, #588]	@ (8004f1c <mpu6500_basic_init+0x5d8>)
 8004cce:	f000 fb17 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004cd2:	4890      	ldr	r0, [pc, #576]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004cd4:	f000 fd48 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e240      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* disable accelerometer z test */
    res = mpu6500_set_accelerometer_test(&gs_handle_mpu6500, MPU6500_AXIS_Z, MPU6500_BOOL_FALSE);
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2105      	movs	r1, #5
 8004ce0:	488c      	ldr	r0, [pc, #560]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004ce2:	f002 f8f3 	bl	8006ecc <mpu6500_set_accelerometer_test>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004cea:	7bfb      	ldrb	r3, [r7, #15]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <mpu6500_basic_init+0x3bc>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer test failed.\n");
 8004cf0:	488a      	ldr	r0, [pc, #552]	@ (8004f1c <mpu6500_basic_init+0x5d8>)
 8004cf2:	f000 fb05 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004cf6:	4887      	ldr	r0, [pc, #540]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004cf8:	f000 fd36 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	e22e      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* disable fifo */
    res = mpu6500_set_fifo(&gs_handle_mpu6500, MPU6500_BOOL_FALSE);
 8004d00:	2100      	movs	r1, #0
 8004d02:	4884      	ldr	r0, [pc, #528]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004d04:	f001 fc0e 	bl	8006524 <mpu6500_set_fifo>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d007      	beq.n	8004d22 <mpu6500_basic_init+0x3de>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo failed.\n");
 8004d12:	4883      	ldr	r0, [pc, #524]	@ (8004f20 <mpu6500_basic_init+0x5dc>)
 8004d14:	f000 faf4 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d18:	487e      	ldr	r0, [pc, #504]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004d1a:	f000 fd25 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e21d      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* disable temp fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_TEMP, MPU6500_BOOL_FALSE);
 8004d22:	2200      	movs	r2, #0
 8004d24:	2107      	movs	r1, #7
 8004d26:	487b      	ldr	r0, [pc, #492]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004d28:	f002 fb4a 	bl	80073c0 <mpu6500_set_fifo_enable>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d007      	beq.n	8004d46 <mpu6500_basic_init+0x402>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004d36:	487b      	ldr	r0, [pc, #492]	@ (8004f24 <mpu6500_basic_init+0x5e0>)
 8004d38:	f000 fae2 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d3c:	4875      	ldr	r0, [pc, #468]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004d3e:	f000 fd13 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e20b      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* disable xg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_XG, MPU6500_BOOL_FALSE);
 8004d46:	2200      	movs	r2, #0
 8004d48:	2106      	movs	r1, #6
 8004d4a:	4872      	ldr	r0, [pc, #456]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004d4c:	f002 fb38 	bl	80073c0 <mpu6500_set_fifo_enable>
 8004d50:	4603      	mov	r3, r0
 8004d52:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <mpu6500_basic_init+0x426>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004d5a:	4872      	ldr	r0, [pc, #456]	@ (8004f24 <mpu6500_basic_init+0x5e0>)
 8004d5c:	f000 fad0 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d60:	486c      	ldr	r0, [pc, #432]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004d62:	f000 fd01 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e1f9      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* disable yg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_YG, MPU6500_BOOL_FALSE);
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2105      	movs	r1, #5
 8004d6e:	4869      	ldr	r0, [pc, #420]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004d70:	f002 fb26 	bl	80073c0 <mpu6500_set_fifo_enable>
 8004d74:	4603      	mov	r3, r0
 8004d76:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d78:	7bfb      	ldrb	r3, [r7, #15]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <mpu6500_basic_init+0x44a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004d7e:	4869      	ldr	r0, [pc, #420]	@ (8004f24 <mpu6500_basic_init+0x5e0>)
 8004d80:	f000 fabe 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004d84:	4863      	ldr	r0, [pc, #396]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004d86:	f000 fcef 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e1e7      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* disable zg fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ZG, MPU6500_BOOL_FALSE);
 8004d8e:	2200      	movs	r2, #0
 8004d90:	2104      	movs	r1, #4
 8004d92:	4860      	ldr	r0, [pc, #384]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004d94:	f002 fb14 	bl	80073c0 <mpu6500_set_fifo_enable>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004d9c:	7bfb      	ldrb	r3, [r7, #15]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d007      	beq.n	8004db2 <mpu6500_basic_init+0x46e>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004da2:	4860      	ldr	r0, [pc, #384]	@ (8004f24 <mpu6500_basic_init+0x5e0>)
 8004da4:	f000 faac 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004da8:	485a      	ldr	r0, [pc, #360]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004daa:	f000 fcdd 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e1d5      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* disable accel fifo */
    res = mpu6500_set_fifo_enable(&gs_handle_mpu6500, MPU6500_FIFO_ACCEL, MPU6500_BOOL_FALSE);
 8004db2:	2200      	movs	r2, #0
 8004db4:	2103      	movs	r1, #3
 8004db6:	4857      	ldr	r0, [pc, #348]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004db8:	f002 fb02 	bl	80073c0 <mpu6500_set_fifo_enable>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d007      	beq.n	8004dd6 <mpu6500_basic_init+0x492>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo enable failed.\n");
 8004dc6:	4857      	ldr	r0, [pc, #348]	@ (8004f24 <mpu6500_basic_init+0x5e0>)
 8004dc8:	f000 fa9a 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004dcc:	4851      	ldr	r0, [pc, #324]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004dce:	f000 fccb 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e1c3      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt level */
    res = mpu6500_set_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_LEVEL);
 8004dd6:	2101      	movs	r1, #1
 8004dd8:	484e      	ldr	r0, [pc, #312]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004dda:	f002 fb4b 	bl	8007474 <mpu6500_set_interrupt_level>
 8004dde:	4603      	mov	r3, r0
 8004de0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d007      	beq.n	8004df8 <mpu6500_basic_init+0x4b4>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt level failed.\n");
 8004de8:	484f      	ldr	r0, [pc, #316]	@ (8004f28 <mpu6500_basic_init+0x5e4>)
 8004dea:	f000 fa89 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004dee:	4849      	ldr	r0, [pc, #292]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004df0:	f000 fcba 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e1b2      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default pin type */
    res = mpu6500_set_interrupt_pin_type(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_PIN_TYPE);
 8004df8:	2100      	movs	r1, #0
 8004dfa:	4846      	ldr	r0, [pc, #280]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004dfc:	f002 fb88 	bl	8007510 <mpu6500_set_interrupt_pin_type>
 8004e00:	4603      	mov	r3, r0
 8004e02:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e04:	7bfb      	ldrb	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <mpu6500_basic_init+0x4d6>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt pin type failed.\n");
 8004e0a:	4848      	ldr	r0, [pc, #288]	@ (8004f2c <mpu6500_basic_init+0x5e8>)
 8004e0c:	f000 fa78 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e10:	4840      	ldr	r0, [pc, #256]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004e12:	f000 fca9 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004e16:	2301      	movs	r3, #1
 8004e18:	e1a1      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default motion interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_MOTION, MPU6500_BASIC_DEFAULT_INTERRUPT_MOTION);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2106      	movs	r1, #6
 8004e1e:	483d      	ldr	r0, [pc, #244]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004e20:	f002 fd4c 	bl	80078bc <mpu6500_set_interrupt>
 8004e24:	4603      	mov	r3, r0
 8004e26:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e28:	7bfb      	ldrb	r3, [r7, #15]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d007      	beq.n	8004e3e <mpu6500_basic_init+0x4fa>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004e2e:	4840      	ldr	r0, [pc, #256]	@ (8004f30 <mpu6500_basic_init+0x5ec>)
 8004e30:	f000 fa66 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e34:	4837      	ldr	r0, [pc, #220]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004e36:	f000 fc97 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e18f      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo overflow interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FIFO_OVERFLOW, MPU6500_BASIC_DEFAULT_INTERRUPT_FIFO_OVERFLOW);
 8004e3e:	2200      	movs	r2, #0
 8004e40:	2104      	movs	r1, #4
 8004e42:	4834      	ldr	r0, [pc, #208]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004e44:	f002 fd3a 	bl	80078bc <mpu6500_set_interrupt>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d007      	beq.n	8004e62 <mpu6500_basic_init+0x51e>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004e52:	4837      	ldr	r0, [pc, #220]	@ (8004f30 <mpu6500_basic_init+0x5ec>)
 8004e54:	f000 fa54 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e58:	482e      	ldr	r0, [pc, #184]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004e5a:	f000 fc85 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e17d      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default dmp interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DMP, MPU6500_BASIC_DEFAULT_INTERRUPT_DMP);
 8004e62:	2200      	movs	r2, #0
 8004e64:	2101      	movs	r1, #1
 8004e66:	482b      	ldr	r0, [pc, #172]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004e68:	f002 fd28 	bl	80078bc <mpu6500_set_interrupt>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e70:	7bfb      	ldrb	r3, [r7, #15]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d007      	beq.n	8004e86 <mpu6500_basic_init+0x542>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004e76:	482e      	ldr	r0, [pc, #184]	@ (8004f30 <mpu6500_basic_init+0x5ec>)
 8004e78:	f000 fa42 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004e7c:	4825      	ldr	r0, [pc, #148]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004e7e:	f000 fc73 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e16b      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync int interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_FSYNC_INT, MPU6500_BASIC_DEFAULT_INTERRUPT_FSYNC_INT);
 8004e86:	2200      	movs	r2, #0
 8004e88:	2103      	movs	r1, #3
 8004e8a:	4822      	ldr	r0, [pc, #136]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004e8c:	f002 fd16 	bl	80078bc <mpu6500_set_interrupt>
 8004e90:	4603      	mov	r3, r0
 8004e92:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <mpu6500_basic_init+0x566>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004e9a:	4825      	ldr	r0, [pc, #148]	@ (8004f30 <mpu6500_basic_init+0x5ec>)
 8004e9c:	f000 fa30 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ea0:	481c      	ldr	r0, [pc, #112]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004ea2:	f000 fc61 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e159      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default data ready interrupt */
    res = mpu6500_set_interrupt(&gs_handle_mpu6500, MPU6500_INTERRUPT_DATA_READY, MPU6500_BASIC_DEFAULT_INTERRUPT_DATA_READY);
 8004eaa:	2200      	movs	r2, #0
 8004eac:	2100      	movs	r1, #0
 8004eae:	4819      	ldr	r0, [pc, #100]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004eb0:	f002 fd04 	bl	80078bc <mpu6500_set_interrupt>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <mpu6500_basic_init+0x58a>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt failed.\n");
 8004ebe:	481c      	ldr	r0, [pc, #112]	@ (8004f30 <mpu6500_basic_init+0x5ec>)
 8004ec0:	f000 fa1e 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ec4:	4813      	ldr	r0, [pc, #76]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004ec6:	f000 fc4f 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e147      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt latch */
    res = mpu6500_set_interrupt_latch(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_LATCH);
 8004ece:	2101      	movs	r1, #1
 8004ed0:	4810      	ldr	r0, [pc, #64]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004ed2:	f002 fb6b 	bl	80075ac <mpu6500_set_interrupt_latch>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004eda:	7bfb      	ldrb	r3, [r7, #15]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d007      	beq.n	8004ef0 <mpu6500_basic_init+0x5ac>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt latch failed.\n");
 8004ee0:	4814      	ldr	r0, [pc, #80]	@ (8004f34 <mpu6500_basic_init+0x5f0>)
 8004ee2:	f000 fa0d 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ee6:	480b      	ldr	r0, [pc, #44]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004ee8:	f000 fc3e 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e136      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default interrupt read clear */
    res = mpu6500_set_interrupt_read_clear(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_INTERRUPT_READ_CLEAR);
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	4808      	ldr	r0, [pc, #32]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004ef4:	f002 fbaa 	bl	800764c <mpu6500_set_interrupt_read_clear>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d01c      	beq.n	8004f3c <mpu6500_basic_init+0x5f8>
    {
        mpu6500_interface_debug_print("mpu6500: set interrupt read clear failed.\n");
 8004f02:	480d      	ldr	r0, [pc, #52]	@ (8004f38 <mpu6500_basic_init+0x5f4>)
 8004f04:	f000 f9fc 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f08:	4802      	ldr	r0, [pc, #8]	@ (8004f14 <mpu6500_basic_init+0x5d0>)
 8004f0a:	f000 fc2d 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e125      	b.n	800515e <mpu6500_basic_init+0x81a>
 8004f12:	bf00      	nop
 8004f14:	20000560 	.word	0x20000560
 8004f18:	0801e828 	.word	0x0801e828
 8004f1c:	0801e850 	.word	0x0801e850
 8004f20:	0801e87c 	.word	0x0801e87c
 8004f24:	0801e898 	.word	0x0801e898
 8004f28:	0801e8bc 	.word	0x0801e8bc
 8004f2c:	0801e8e4 	.word	0x0801e8e4
 8004f30:	0801e910 	.word	0x0801e910
 8004f34:	0801e930 	.word	0x0801e930
 8004f38:	0801e958 	.word	0x0801e958
    }
    
    /* set the extern sync */
    res = mpu6500_set_extern_sync(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_EXTERN_SYNC);
 8004f3c:	2100      	movs	r1, #0
 8004f3e:	488a      	ldr	r0, [pc, #552]	@ (8005168 <mpu6500_basic_init+0x824>)
 8004f40:	f001 fde2 	bl	8006b08 <mpu6500_set_extern_sync>
 8004f44:	4603      	mov	r3, r0
 8004f46:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d007      	beq.n	8004f5e <mpu6500_basic_init+0x61a>
    {
        mpu6500_interface_debug_print("mpu6500: set extern sync failed.\n");
 8004f4e:	4887      	ldr	r0, [pc, #540]	@ (800516c <mpu6500_basic_init+0x828>)
 8004f50:	f000 f9d6 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f54:	4884      	ldr	r0, [pc, #528]	@ (8005168 <mpu6500_basic_init+0x824>)
 8004f56:	f000 fc07 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e0ff      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt */
    res = mpu6500_set_fsync_interrupt(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT);
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4881      	ldr	r0, [pc, #516]	@ (8005168 <mpu6500_basic_init+0x824>)
 8004f62:	f002 fc0f 	bl	8007784 <mpu6500_set_fsync_interrupt>
 8004f66:	4603      	mov	r3, r0
 8004f68:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f6a:	7bfb      	ldrb	r3, [r7, #15]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d007      	beq.n	8004f80 <mpu6500_basic_init+0x63c>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt failed.\n");
 8004f70:	487f      	ldr	r0, [pc, #508]	@ (8005170 <mpu6500_basic_init+0x82c>)
 8004f72:	f000 f9c5 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f76:	487c      	ldr	r0, [pc, #496]	@ (8005168 <mpu6500_basic_init+0x824>)
 8004f78:	f000 fbf6 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e0ee      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fsync interrupt level */
    res = mpu6500_set_fsync_interrupt_level(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FSYNC_INTERRUPT_LEVEL);
 8004f80:	2101      	movs	r1, #1
 8004f82:	4879      	ldr	r0, [pc, #484]	@ (8005168 <mpu6500_basic_init+0x824>)
 8004f84:	f002 fbb0 	bl	80076e8 <mpu6500_set_fsync_interrupt_level>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004f8c:	7bfb      	ldrb	r3, [r7, #15]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d007      	beq.n	8004fa2 <mpu6500_basic_init+0x65e>
    {
        mpu6500_interface_debug_print("mpu6500: set fsync interrupt level failed.\n");
 8004f92:	4878      	ldr	r0, [pc, #480]	@ (8005174 <mpu6500_basic_init+0x830>)
 8004f94:	f000 f9b4 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004f98:	4873      	ldr	r0, [pc, #460]	@ (8005168 <mpu6500_basic_init+0x824>)
 8004f9a:	f000 fbe5 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e0dd      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic master */
    res = mpu6500_set_iic_master(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_MASTER);
 8004fa2:	2100      	movs	r1, #0
 8004fa4:	4870      	ldr	r0, [pc, #448]	@ (8005168 <mpu6500_basic_init+0x824>)
 8004fa6:	f001 fb0b 	bl	80065c0 <mpu6500_set_iic_master>
 8004faa:	4603      	mov	r3, r0
 8004fac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d007      	beq.n	8004fc4 <mpu6500_basic_init+0x680>
    {
        mpu6500_interface_debug_print("mpu6500: set iic master failed.\n");
 8004fb4:	4870      	ldr	r0, [pc, #448]	@ (8005178 <mpu6500_basic_init+0x834>)
 8004fb6:	f000 f9a3 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004fba:	486b      	ldr	r0, [pc, #428]	@ (8005168 <mpu6500_basic_init+0x824>)
 8004fbc:	f000 fbd4 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0cc      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default iic bypass */
    res = mpu6500_set_iic_bypass(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_IIC_BYPASS);
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4868      	ldr	r0, [pc, #416]	@ (8005168 <mpu6500_basic_init+0x824>)
 8004fc8:	f002 fc2a 	bl	8007820 <mpu6500_set_iic_bypass>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004fd0:	7bfb      	ldrb	r3, [r7, #15]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d007      	beq.n	8004fe6 <mpu6500_basic_init+0x6a2>
    {
        mpu6500_interface_debug_print("mpu6500: set iic bypass failed.\n");
 8004fd6:	4869      	ldr	r0, [pc, #420]	@ (800517c <mpu6500_basic_init+0x838>)
 8004fd8:	f000 f992 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004fdc:	4862      	ldr	r0, [pc, #392]	@ (8005168 <mpu6500_basic_init+0x824>)
 8004fde:	f000 fbc3 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e0bb      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer range */
    res = mpu6500_set_accelerometer_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_RANGE);
 8004fe6:	2103      	movs	r1, #3
 8004fe8:	485f      	ldr	r0, [pc, #380]	@ (8005168 <mpu6500_basic_init+0x824>)
 8004fea:	f001 ffc9 	bl	8006f80 <mpu6500_set_accelerometer_range>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8004ff2:	7bfb      	ldrb	r3, [r7, #15]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d007      	beq.n	8005008 <mpu6500_basic_init+0x6c4>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer range failed.\n");
 8004ff8:	4861      	ldr	r0, [pc, #388]	@ (8005180 <mpu6500_basic_init+0x83c>)
 8004ffa:	f000 f981 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8004ffe:	485a      	ldr	r0, [pc, #360]	@ (8005168 <mpu6500_basic_init+0x824>)
 8005000:	f000 fbb2 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8005004:	2301      	movs	r3, #1
 8005006:	e0aa      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope range */
    res = mpu6500_set_gyroscope_range(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_RANGE);
 8005008:	2103      	movs	r1, #3
 800500a:	4857      	ldr	r0, [pc, #348]	@ (8005168 <mpu6500_basic_init+0x824>)
 800500c:	f001 febc 	bl	8006d88 <mpu6500_set_gyroscope_range>
 8005010:	4603      	mov	r3, r0
 8005012:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005014:	7bfb      	ldrb	r3, [r7, #15]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d007      	beq.n	800502a <mpu6500_basic_init+0x6e6>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope range failed.\n");
 800501a:	485a      	ldr	r0, [pc, #360]	@ (8005184 <mpu6500_basic_init+0x840>)
 800501c:	f000 f970 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005020:	4851      	ldr	r0, [pc, #324]	@ (8005168 <mpu6500_basic_init+0x824>)
 8005022:	f000 fba1 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8005026:	2301      	movs	r3, #1
 8005028:	e099      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyro standby */
    res = mpu6500_set_gyro_standby(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_STANDBY);
 800502a:	2100      	movs	r1, #0
 800502c:	484e      	ldr	r0, [pc, #312]	@ (8005168 <mpu6500_basic_init+0x824>)
 800502e:	f001 fc99 	bl	8006964 <mpu6500_set_gyro_standby>
 8005032:	4603      	mov	r3, r0
 8005034:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005036:	7bfb      	ldrb	r3, [r7, #15]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <mpu6500_basic_init+0x708>
    {
        mpu6500_interface_debug_print("mpu6500: set gyro standby failed.\n");
 800503c:	4852      	ldr	r0, [pc, #328]	@ (8005188 <mpu6500_basic_init+0x844>)
 800503e:	f000 f95f 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005042:	4849      	ldr	r0, [pc, #292]	@ (8005168 <mpu6500_basic_init+0x824>)
 8005044:	f000 fb90 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8005048:	2301      	movs	r3, #1
 800504a:	e088      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default fifo mode */
    res = mpu6500_set_fifo_mode(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_FIFO_MODE);
 800504c:	2101      	movs	r1, #1
 800504e:	4846      	ldr	r0, [pc, #280]	@ (8005168 <mpu6500_basic_init+0x824>)
 8005050:	f001 fdf2 	bl	8006c38 <mpu6500_set_fifo_mode>
 8005054:	4603      	mov	r3, r0
 8005056:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d007      	beq.n	800506e <mpu6500_basic_init+0x72a>
    {
        mpu6500_interface_debug_print("mpu6500: set fifo mode failed.\n");
 800505e:	484b      	ldr	r0, [pc, #300]	@ (800518c <mpu6500_basic_init+0x848>)
 8005060:	f000 f94e 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005064:	4840      	ldr	r0, [pc, #256]	@ (8005168 <mpu6500_basic_init+0x824>)
 8005066:	f000 fb7f 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 800506a:	2301      	movs	r3, #1
 800506c:	e077      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default gyroscope choice */
    res = mpu6500_set_gyroscope_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_GYROSCOPE_CHOICE);
 800506e:	2100      	movs	r1, #0
 8005070:	483d      	ldr	r0, [pc, #244]	@ (8005168 <mpu6500_basic_init+0x824>)
 8005072:	f001 fed7 	bl	8006e24 <mpu6500_set_gyroscope_choice>
 8005076:	4603      	mov	r3, r0
 8005078:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800507a:	7bfb      	ldrb	r3, [r7, #15]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d007      	beq.n	8005090 <mpu6500_basic_init+0x74c>
    {
        mpu6500_interface_debug_print("mpu6500: set gyroscope choice failed.\n");
 8005080:	4843      	ldr	r0, [pc, #268]	@ (8005190 <mpu6500_basic_init+0x84c>)
 8005082:	f000 f93d 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005086:	4838      	ldr	r0, [pc, #224]	@ (8005168 <mpu6500_basic_init+0x824>)
 8005088:	f000 fb6e 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 800508c:	2301      	movs	r3, #1
 800508e:	e066      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low pass filter */
    res = mpu6500_set_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_PASS_FILTER);
 8005090:	2102      	movs	r1, #2
 8005092:	4835      	ldr	r0, [pc, #212]	@ (8005168 <mpu6500_basic_init+0x824>)
 8005094:	f001 fd86 	bl	8006ba4 <mpu6500_set_low_pass_filter>
 8005098:	4603      	mov	r3, r0
 800509a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 800509c:	7bfb      	ldrb	r3, [r7, #15]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d007      	beq.n	80050b2 <mpu6500_basic_init+0x76e>
    {
        mpu6500_interface_debug_print("mpu6500: set low pass filter failed.\n");
 80050a2:	483c      	ldr	r0, [pc, #240]	@ (8005194 <mpu6500_basic_init+0x850>)
 80050a4:	f000 f92c 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80050a8:	482f      	ldr	r0, [pc, #188]	@ (8005168 <mpu6500_basic_init+0x824>)
 80050aa:	f000 fb5d 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e055      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer choice */
    res = mpu6500_set_accelerometer_choice(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_CHOICE);
 80050b2:	2100      	movs	r1, #0
 80050b4:	482c      	ldr	r0, [pc, #176]	@ (8005168 <mpu6500_basic_init+0x824>)
 80050b6:	f001 fff9 	bl	80070ac <mpu6500_set_accelerometer_choice>
 80050ba:	4603      	mov	r3, r0
 80050bc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80050be:	7bfb      	ldrb	r3, [r7, #15]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d007      	beq.n	80050d4 <mpu6500_basic_init+0x790>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer choice failed.\n");
 80050c4:	4834      	ldr	r0, [pc, #208]	@ (8005198 <mpu6500_basic_init+0x854>)
 80050c6:	f000 f91b 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80050ca:	4827      	ldr	r0, [pc, #156]	@ (8005168 <mpu6500_basic_init+0x824>)
 80050cc:	f000 fb4c 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e044      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accelerometer low pass filter */
    res = mpu6500_set_accelerometer_low_pass_filter(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_LOW_PASS_FILTER);
 80050d4:	2104      	movs	r1, #4
 80050d6:	4824      	ldr	r0, [pc, #144]	@ (8005168 <mpu6500_basic_init+0x824>)
 80050d8:	f002 f842 	bl	8007160 <mpu6500_set_accelerometer_low_pass_filter>
 80050dc:	4603      	mov	r3, r0
 80050de:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 80050e0:	7bfb      	ldrb	r3, [r7, #15]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d007      	beq.n	80050f6 <mpu6500_basic_init+0x7b2>
    {
        mpu6500_interface_debug_print("mpu6500: set accelerometer low pass filter failed.\n");
 80050e6:	482d      	ldr	r0, [pc, #180]	@ (800519c <mpu6500_basic_init+0x858>)
 80050e8:	f000 f90a 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 80050ec:	481e      	ldr	r0, [pc, #120]	@ (8005168 <mpu6500_basic_init+0x824>)
 80050ee:	f000 fb3b 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e033      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default low power accel output rate */
    res = mpu6500_set_low_power_accel_output_rate(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_LOW_POWER_ACCEL_OUTPUT_RATE);
 80050f6:	2108      	movs	r1, #8
 80050f8:	481b      	ldr	r0, [pc, #108]	@ (8005168 <mpu6500_basic_init+0x824>)
 80050fa:	f002 f87b 	bl	80071f4 <mpu6500_set_low_power_accel_output_rate>
 80050fe:	4603      	mov	r3, r0
 8005100:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005102:	7bfb      	ldrb	r3, [r7, #15]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d007      	beq.n	8005118 <mpu6500_basic_init+0x7d4>
    {
        mpu6500_interface_debug_print("mpu6500: set low power accel output rate failed.\n");
 8005108:	4825      	ldr	r0, [pc, #148]	@ (80051a0 <mpu6500_basic_init+0x85c>)
 800510a:	f000 f8f9 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 800510e:	4816      	ldr	r0, [pc, #88]	@ (8005168 <mpu6500_basic_init+0x824>)
 8005110:	f000 fb2a 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8005114:	2301      	movs	r3, #1
 8005116:	e022      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default wake on motion */
    res = mpu6500_set_wake_on_motion(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_WAKE_ON_MOTION);
 8005118:	2100      	movs	r1, #0
 800511a:	4813      	ldr	r0, [pc, #76]	@ (8005168 <mpu6500_basic_init+0x824>)
 800511c:	f002 f8b4 	bl	8007288 <mpu6500_set_wake_on_motion>
 8005120:	4603      	mov	r3, r0
 8005122:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <mpu6500_basic_init+0x7f6>
    {
        mpu6500_interface_debug_print("mpu6500: set wake on motion failed.\n");
 800512a:	481e      	ldr	r0, [pc, #120]	@ (80051a4 <mpu6500_basic_init+0x860>)
 800512c:	f000 f8e8 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005130:	480d      	ldr	r0, [pc, #52]	@ (8005168 <mpu6500_basic_init+0x824>)
 8005132:	f000 fb19 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8005136:	2301      	movs	r3, #1
 8005138:	e011      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    /* set the default accel compare with previous sample */
    res = mpu6500_set_accel_compare_with_previous_sample(&gs_handle_mpu6500, MPU6500_BASIC_DEFAULT_ACCELEROMETER_COMPARE);
 800513a:	2101      	movs	r1, #1
 800513c:	480a      	ldr	r0, [pc, #40]	@ (8005168 <mpu6500_basic_init+0x824>)
 800513e:	f002 f8f1 	bl	8007324 <mpu6500_set_accel_compare_with_previous_sample>
 8005142:	4603      	mov	r3, r0
 8005144:	73fb      	strb	r3, [r7, #15]
    if (res != 0)
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d007      	beq.n	800515c <mpu6500_basic_init+0x818>
    {
        mpu6500_interface_debug_print("mpu6500: set accel compare with previous sample failed.\n");
 800514c:	4816      	ldr	r0, [pc, #88]	@ (80051a8 <mpu6500_basic_init+0x864>)
 800514e:	f000 f8d7 	bl	8005300 <mpu6500_interface_debug_print>
        (void)mpu6500_deinit(&gs_handle_mpu6500);
 8005152:	4805      	ldr	r0, [pc, #20]	@ (8005168 <mpu6500_basic_init+0x824>)
 8005154:	f000 fb08 	bl	8005768 <mpu6500_deinit>
       
        return 1;
 8005158:	2301      	movs	r3, #1
 800515a:	e000      	b.n	800515e <mpu6500_basic_init+0x81a>
    }
    
    return 0;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000560 	.word	0x20000560
 800516c:	0801e984 	.word	0x0801e984
 8005170:	0801e9a8 	.word	0x0801e9a8
 8005174:	0801e9d0 	.word	0x0801e9d0
 8005178:	0801e9fc 	.word	0x0801e9fc
 800517c:	0801ea20 	.word	0x0801ea20
 8005180:	0801ea44 	.word	0x0801ea44
 8005184:	0801ea70 	.word	0x0801ea70
 8005188:	0801ea98 	.word	0x0801ea98
 800518c:	0801eabc 	.word	0x0801eabc
 8005190:	0801eadc 	.word	0x0801eadc
 8005194:	0801eb04 	.word	0x0801eb04
 8005198:	0801eb2c 	.word	0x0801eb2c
 800519c:	0801eb58 	.word	0x0801eb58
 80051a0:	0801eb8c 	.word	0x0801eb8c
 80051a4:	0801ebc0 	.word	0x0801ebc0
 80051a8:	0801ebe8 	.word	0x0801ebe8

080051ac <mpu6500_interface_iic_init>:
 *         - 0 success
 *         - 1 iic init failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_init(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
    return 0;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr

080051bc <mpu6500_interface_iic_deinit>:
 *         - 0 success
 *         - 1 iic deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_iic_deinit(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
    return 0;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <mpu6500_interface_iic_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_iic_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	603a      	str	r2, [r7, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	4603      	mov	r3, r0
 80051d8:	71fb      	strb	r3, [r7, #7]
 80051da:	460b      	mov	r3, r1
 80051dc:	71bb      	strb	r3, [r7, #6]
 80051de:	4613      	mov	r3, r2
 80051e0:	80bb      	strh	r3, [r7, #4]
    return 0;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <mpu6500_interface_iic_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_iic_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	603a      	str	r2, [r7, #0]
 80051f8:	461a      	mov	r2, r3
 80051fa:	4603      	mov	r3, r0
 80051fc:	71fb      	strb	r3, [r7, #7]
 80051fe:	460b      	mov	r3, r1
 8005200:	71bb      	strb	r3, [r7, #6]
 8005202:	4613      	mov	r3, r2
 8005204:	80bb      	strh	r3, [r7, #4]
    return 0;
 8005206:	2300      	movs	r3, #0
}
 8005208:	4618      	mov	r0, r3
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <mpu6500_interface_spi_init>:
 *         - 0 success
 *         - 1 spi init failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_init(void)
{
 8005214:	b480      	push	{r7}
 8005216:	af00      	add	r7, sp, #0
    return 0;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <mpu6500_interface_spi_deinit>:
 *         - 0 success
 *         - 1 spi deinit failed
 * @note   none
 */
uint8_t mpu6500_interface_spi_deinit(void)
{   
 8005224:	b480      	push	{r7}
 8005226:	af00      	add	r7, sp, #0
    return 0;
 8005228:	2300      	movs	r3, #0
}
 800522a:	4618      	mov	r0, r3
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <mpu6500_interface_spi_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t mpu6500_interface_spi_read(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	4603      	mov	r3, r0
 800523c:	6039      	str	r1, [r7, #0]
 800523e:	71fb      	strb	r3, [r7, #7]
 8005240:	4613      	mov	r3, r2
 8005242:	80bb      	strh	r3, [r7, #4]
	//uint8_t temp_data = 0x80|reg;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8005244:	2200      	movs	r2, #0
 8005246:	2110      	movs	r1, #16
 8005248:	480c      	ldr	r0, [pc, #48]	@ (800527c <mpu6500_interface_spi_read+0x48>)
 800524a:	f006 faf5 	bl	800b838 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg , 1, 100);
 800524e:	1df9      	adds	r1, r7, #7
 8005250:	2364      	movs	r3, #100	@ 0x64
 8005252:	2201      	movs	r2, #1
 8005254:	480a      	ldr	r0, [pc, #40]	@ (8005280 <mpu6500_interface_spi_read+0x4c>)
 8005256:	f008 faae 	bl	800d7b6 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, buf, len, 100);
 800525a:	88ba      	ldrh	r2, [r7, #4]
 800525c:	2364      	movs	r3, #100	@ 0x64
 800525e:	6839      	ldr	r1, [r7, #0]
 8005260:	4807      	ldr	r0, [pc, #28]	@ (8005280 <mpu6500_interface_spi_read+0x4c>)
 8005262:	f008 fbec 	bl	800da3e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8005266:	2201      	movs	r2, #1
 8005268:	2110      	movs	r1, #16
 800526a:	4804      	ldr	r0, [pc, #16]	@ (800527c <mpu6500_interface_spi_read+0x48>)
 800526c:	f006 fae4 	bl	800b838 <HAL_GPIO_WritePin>
    return 0;
 8005270:	2300      	movs	r3, #0
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	40020000 	.word	0x40020000
 8005280:	200042d4 	.word	0x200042d4

08005284 <mpu6500_interface_spi_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t mpu6500_interface_spi_write(uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	4603      	mov	r3, r0
 800528c:	6039      	str	r1, [r7, #0]
 800528e:	71fb      	strb	r3, [r7, #7]
 8005290:	4613      	mov	r3, r2
 8005292:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8005294:	2200      	movs	r2, #0
 8005296:	2110      	movs	r1, #16
 8005298:	480c      	ldr	r0, [pc, #48]	@ (80052cc <mpu6500_interface_spi_write+0x48>)
 800529a:	f006 facd 	bl	800b838 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 100);
 800529e:	1df9      	adds	r1, r7, #7
 80052a0:	2364      	movs	r3, #100	@ 0x64
 80052a2:	2201      	movs	r2, #1
 80052a4:	480a      	ldr	r0, [pc, #40]	@ (80052d0 <mpu6500_interface_spi_write+0x4c>)
 80052a6:	f008 fa86 	bl	800d7b6 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1, buf, 1, 100);
 80052aa:	2364      	movs	r3, #100	@ 0x64
 80052ac:	2201      	movs	r2, #1
 80052ae:	6839      	ldr	r1, [r7, #0]
 80052b0:	4807      	ldr	r0, [pc, #28]	@ (80052d0 <mpu6500_interface_spi_write+0x4c>)
 80052b2:	f008 fa80 	bl	800d7b6 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80052b6:	2201      	movs	r2, #1
 80052b8:	2110      	movs	r1, #16
 80052ba:	4804      	ldr	r0, [pc, #16]	@ (80052cc <mpu6500_interface_spi_write+0x48>)
 80052bc:	f006 fabc 	bl	800b838 <HAL_GPIO_WritePin>
    return 0;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3708      	adds	r7, #8
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40020000 	.word	0x40020000
 80052d0:	200042d4 	.word	0x200042d4

080052d4 <mpu6500_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms time
 * @note      none
 */
void mpu6500_interface_delay_ms(uint32_t ms)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	vTaskDelay(pdMS_TO_TICKS(ms));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052e2:	fb02 f303 	mul.w	r3, r2, r3
 80052e6:	4a05      	ldr	r2, [pc, #20]	@ (80052fc <mpu6500_interface_delay_ms+0x28>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	099b      	lsrs	r3, r3, #6
 80052ee:	4618      	mov	r0, r3
 80052f0:	f00f ffe4 	bl	80152bc <vTaskDelay>
}
 80052f4:	bf00      	nop
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	10624dd3 	.word	0x10624dd3

08005300 <mpu6500_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt format data
 * @note      none
 */
void mpu6500_interface_debug_print(const char *const fmt, ...)
{
 8005300:	b40f      	push	{r0, r1, r2, r3}
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
    va_list args;
    va_start(args, fmt);
 8005308:	f107 0314 	add.w	r3, r7, #20
 800530c:	607b      	str	r3, [r7, #4]
    vfprintf(stderr, fmt, args);  // <-- Pass to stderr
 800530e:	4b07      	ldr	r3, [pc, #28]	@ (800532c <mpu6500_interface_debug_print+0x2c>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6939      	ldr	r1, [r7, #16]
 8005318:	4618      	mov	r0, r3
 800531a:	f014 fcdb 	bl	8019cd4 <vfiprintf>
    va_end(args);
}
 800531e:	bf00      	nop
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005328:	b004      	add	sp, #16
 800532a:	4770      	bx	lr
 800532c:	20000160 	.word	0x20000160

08005330 <mpu6500_interface_receive_callback>:
 * @brief     interface receive callback
 * @param[in] type irq type
 * @note      none
 */
void mpu6500_interface_receive_callback(uint8_t type)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	71fb      	strb	r3, [r7, #7]
    switch (type)
 800533a:	79fb      	ldrb	r3, [r7, #7]
 800533c:	2b06      	cmp	r3, #6
 800533e:	d825      	bhi.n	800538c <mpu6500_interface_receive_callback+0x5c>
 8005340:	a201      	add	r2, pc, #4	@ (adr r2, 8005348 <mpu6500_interface_receive_callback+0x18>)
 8005342:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005346:	bf00      	nop
 8005348:	08005385 	.word	0x08005385
 800534c:	0800537d 	.word	0x0800537d
 8005350:	0800538d 	.word	0x0800538d
 8005354:	08005375 	.word	0x08005375
 8005358:	0800536d 	.word	0x0800536d
 800535c:	0800538d 	.word	0x0800538d
 8005360:	08005365 	.word	0x08005365
    {
        case MPU6500_INTERRUPT_MOTION :
        {
            mpu6500_interface_debug_print("mpu6500: irq motion.\n");
 8005364:	480d      	ldr	r0, [pc, #52]	@ (800539c <mpu6500_interface_receive_callback+0x6c>)
 8005366:	f7ff ffcb 	bl	8005300 <mpu6500_interface_debug_print>
            
            break;
 800536a:	e013      	b.n	8005394 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FIFO_OVERFLOW :
        {
            mpu6500_interface_debug_print("mpu6500: irq fifo overflow.\n");
 800536c:	480c      	ldr	r0, [pc, #48]	@ (80053a0 <mpu6500_interface_receive_callback+0x70>)
 800536e:	f7ff ffc7 	bl	8005300 <mpu6500_interface_debug_print>
            
            break;
 8005372:	e00f      	b.n	8005394 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_FSYNC_INT :
        {
            mpu6500_interface_debug_print("mpu6500: irq fsync int.\n");
 8005374:	480b      	ldr	r0, [pc, #44]	@ (80053a4 <mpu6500_interface_receive_callback+0x74>)
 8005376:	f7ff ffc3 	bl	8005300 <mpu6500_interface_debug_print>
            
            break;
 800537a:	e00b      	b.n	8005394 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DMP :
        {
            mpu6500_interface_debug_print("mpu6500: irq dmp\n");
 800537c:	480a      	ldr	r0, [pc, #40]	@ (80053a8 <mpu6500_interface_receive_callback+0x78>)
 800537e:	f7ff ffbf 	bl	8005300 <mpu6500_interface_debug_print>
            
            break;
 8005382:	e007      	b.n	8005394 <mpu6500_interface_receive_callback+0x64>
        }
        case MPU6500_INTERRUPT_DATA_READY :
        {
            mpu6500_interface_debug_print("mpu6500: irq data ready\n");
 8005384:	4809      	ldr	r0, [pc, #36]	@ (80053ac <mpu6500_interface_receive_callback+0x7c>)
 8005386:	f7ff ffbb 	bl	8005300 <mpu6500_interface_debug_print>
            
            break;
 800538a:	e003      	b.n	8005394 <mpu6500_interface_receive_callback+0x64>
        }
        default :
        {
            mpu6500_interface_debug_print("mpu6500: irq unknown code.\n");
 800538c:	4808      	ldr	r0, [pc, #32]	@ (80053b0 <mpu6500_interface_receive_callback+0x80>)
 800538e:	f7ff ffb7 	bl	8005300 <mpu6500_interface_debug_print>
            
            break;
 8005392:	bf00      	nop
        }
    }
}
 8005394:	bf00      	nop
 8005396:	3708      	adds	r7, #8
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}
 800539c:	0801ec24 	.word	0x0801ec24
 80053a0:	0801ec3c 	.word	0x0801ec3c
 80053a4:	0801ec5c 	.word	0x0801ec5c
 80053a8:	0801ec78 	.word	0x0801ec78
 80053ac:	0801ec8c 	.word	0x0801ec8c
 80053b0:	0801eca8 	.word	0x0801eca8

080053b4 <a_mpu6500_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
static uint8_t a_mpu6500_read(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80053b4:	b590      	push	{r4, r7, lr}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	607a      	str	r2, [r7, #4]
 80053be:	461a      	mov	r2, r3
 80053c0:	460b      	mov	r3, r1
 80053c2:	72fb      	strb	r3, [r7, #11]
 80053c4:	4613      	mov	r3, r2
 80053c6:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                     /* if iic interface */
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10e      	bne.n	80053f0 <a_mpu6500_read+0x3c>
    {
        if (handle->iic_read(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* read data */
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	68dc      	ldr	r4, [r3, #12]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	7818      	ldrb	r0, [r3, #0]
 80053da:	893b      	ldrh	r3, [r7, #8]
 80053dc:	7af9      	ldrb	r1, [r7, #11]
 80053de:	687a      	ldr	r2, [r7, #4]
 80053e0:	47a0      	blx	r4
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <a_mpu6500_read+0x38>
        {
            return 1;                                                                 /* return error */
 80053e8:	2301      	movs	r3, #1
 80053ea:	e010      	b.n	800540e <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 80053ec:	2300      	movs	r3, #0
 80053ee:	e00e      	b.n	800540e <a_mpu6500_read+0x5a>
        }
    }
    else                                                                              /* spi interface */
    {
        if (handle->spi_read(reg | 0x80, (uint8_t *)buf, len) != 0)                   /* read data */
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	69db      	ldr	r3, [r3, #28]
 80053f4:	7afa      	ldrb	r2, [r7, #11]
 80053f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053fa:	b2d0      	uxtb	r0, r2
 80053fc:	893a      	ldrh	r2, [r7, #8]
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	4798      	blx	r3
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <a_mpu6500_read+0x58>
        {
            return 1;                                                                 /* return error */
 8005408:	2301      	movs	r3, #1
 800540a:	e000      	b.n	800540e <a_mpu6500_read+0x5a>
        }
        else
        {
            return 0;                                                                 /* success return 0 */
 800540c:	2300      	movs	r3, #0
        }
    }
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	bd90      	pop	{r4, r7, pc}

08005416 <a_mpu6500_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
static uint8_t a_mpu6500_write(mpu6500_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8005416:	b590      	push	{r4, r7, lr}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	461a      	mov	r2, r3
 8005422:	460b      	mov	r3, r1
 8005424:	72fb      	strb	r3, [r7, #11]
 8005426:	4613      	mov	r3, r2
 8005428:	813b      	strh	r3, [r7, #8]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                      /* if iic interface */
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005430:	2b00      	cmp	r3, #0
 8005432:	d10e      	bne.n	8005452 <a_mpu6500_write+0x3c>
    {
        if (handle->iic_write(handle->iic_addr, reg, (uint8_t *)buf, len) != 0)        /* write data */
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	691c      	ldr	r4, [r3, #16]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	7818      	ldrb	r0, [r3, #0]
 800543c:	893b      	ldrh	r3, [r7, #8]
 800543e:	7af9      	ldrb	r1, [r7, #11]
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	47a0      	blx	r4
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d001      	beq.n	800544e <a_mpu6500_write+0x38>
        {
            return 1;                                                                  /* return error */
 800544a:	2301      	movs	r3, #1
 800544c:	e010      	b.n	8005470 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 800544e:	2300      	movs	r3, #0
 8005450:	e00e      	b.n	8005470 <a_mpu6500_write+0x5a>
        }
    }
    else                                                                               /* spi interface */
    {
        if (handle->spi_write(reg & (~0x80), (uint8_t *)buf, len) != 0)                /* write data */
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6a1b      	ldr	r3, [r3, #32]
 8005456:	7afa      	ldrb	r2, [r7, #11]
 8005458:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800545c:	b2d0      	uxtb	r0, r2
 800545e:	893a      	ldrh	r2, [r7, #8]
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	4798      	blx	r3
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <a_mpu6500_write+0x58>
        {
            return 1;                                                                  /* return error */
 800546a:	2301      	movs	r3, #1
 800546c:	e000      	b.n	8005470 <a_mpu6500_write+0x5a>
        }
        else
        {
            return 0;                                                                  /* success return 0 */
 800546e:	2300      	movs	r3, #0
        }
    }
}
 8005470:	4618      	mov	r0, r3
 8005472:	3714      	adds	r7, #20
 8005474:	46bd      	mov	sp, r7
 8005476:	bd90      	pop	{r4, r7, pc}

08005478 <a_mpu6500_deinit>:
 *            - 0 success
 *            - 1 deinit failed
 * @note      none
 */
static uint8_t a_mpu6500_deinit(mpu6500_handle_t *handle)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)        /* if iic interface */
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <a_mpu6500_deinit+0x26>
    {
        if (handle->iic_deinit() != 0)                   /* iic deinit */
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	4798      	blx	r3
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <a_mpu6500_deinit+0x22>
        {
            return 1;                                    /* return error */
 8005496:	2301      	movs	r3, #1
 8005498:	e00a      	b.n	80054b0 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 800549a:	2300      	movs	r3, #0
 800549c:	e008      	b.n	80054b0 <a_mpu6500_deinit+0x38>
        }
    }
    else
    {
        if (handle->spi_deinit() != 0)                   /* if spi interface */
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	699b      	ldr	r3, [r3, #24]
 80054a2:	4798      	blx	r3
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d001      	beq.n	80054ae <a_mpu6500_deinit+0x36>
        {
            return 1;                                    /* return error */
 80054aa:	2301      	movs	r3, #1
 80054ac:	e000      	b.n	80054b0 <a_mpu6500_deinit+0x38>
        }
        else
        {
            return 0;                                    /* success return 0 */
 80054ae:	2300      	movs	r3, #0
        }
    }
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3708      	adds	r7, #8
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <mpu6500_set_interface>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_interface(mpu6500_handle_t *handle, mpu6500_interface_t interface)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
 80054c0:	460b      	mov	r3, r1
 80054c2:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d101      	bne.n	80054ce <mpu6500_set_interface+0x16>
    {
        return 2;                                /* return error */
 80054ca:	2302      	movs	r3, #2
 80054cc:	e004      	b.n	80054d8 <mpu6500_set_interface+0x20>
    }
    
    handle->iic_spi = (uint8_t)interface;        /* set interface */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	78fa      	ldrb	r2, [r7, #3]
 80054d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    
    return 0;                                    /* success return 0 */
 80054d6:	2300      	movs	r3, #0
}
 80054d8:	4618      	mov	r0, r3
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <mpu6500_set_addr_pin>:
 *            - 0 success
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mpu6500_set_addr_pin(mpu6500_handle_t *handle, mpu6500_address_t addr_pin)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	460b      	mov	r3, r1
 80054ee:	70fb      	strb	r3, [r7, #3]
    if (handle == NULL)                          /* check handle */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <mpu6500_set_addr_pin+0x16>
    {
        return 2;                                /* return error */
 80054f6:	2302      	movs	r3, #2
 80054f8:	e003      	b.n	8005502 <mpu6500_set_addr_pin+0x1e>
    }

    handle->iic_addr = (uint8_t)addr_pin;        /* set iic addr */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	701a      	strb	r2, [r3, #0]
    
    return 0;                                    /* success return 0 */
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	370c      	adds	r7, #12
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
	...

08005510 <mpu6500_init>:
 *            - 4 reset failed
 *            - 5 id is invalid
 * @note      none
 */
uint8_t mpu6500_init(mpu6500_handle_t *handle)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    uint32_t timeout;
  
    if (handle == NULL)                                                             /* check handle */
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d101      	bne.n	8005522 <mpu6500_init+0x12>
    {
        return 2;                                                                   /* return error */
 800551e:	2302      	movs	r3, #2
 8005520:	e0fb      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (handle->debug_print == NULL)                                                /* check debug_print */
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005526:	2b00      	cmp	r3, #0
 8005528:	d101      	bne.n	800552e <mpu6500_init+0x1e>
    {
        return 3;                                                                   /* return error */
 800552a:	2303      	movs	r3, #3
 800552c:	e0f5      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (handle->iic_init == NULL)                                                   /* check iic_init */
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d105      	bne.n	8005542 <mpu6500_init+0x32>
    {
        handle->debug_print("mpu6500: iic_init is null.\n");                        /* iic_init is null */
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800553a:	487a      	ldr	r0, [pc, #488]	@ (8005724 <mpu6500_init+0x214>)
 800553c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800553e:	2303      	movs	r3, #3
 8005540:	e0eb      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (handle->iic_deinit == NULL)                                                 /* check iic_deinit */
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d105      	bne.n	8005556 <mpu6500_init+0x46>
    {
        handle->debug_print("mpu6500: iic_deinit is null.\n");                      /* iic_deinit is null */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800554e:	4876      	ldr	r0, [pc, #472]	@ (8005728 <mpu6500_init+0x218>)
 8005550:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005552:	2303      	movs	r3, #3
 8005554:	e0e1      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (handle->iic_read == NULL)                                                   /* check iic_read */
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68db      	ldr	r3, [r3, #12]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d105      	bne.n	800556a <mpu6500_init+0x5a>
    {
        handle->debug_print("mpu6500: iic_read is null.\n");                        /* iic_read is null */
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005562:	4872      	ldr	r0, [pc, #456]	@ (800572c <mpu6500_init+0x21c>)
 8005564:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 8005566:	2303      	movs	r3, #3
 8005568:	e0d7      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (handle->iic_write == NULL)                                                  /* check iic_write */
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	691b      	ldr	r3, [r3, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d105      	bne.n	800557e <mpu6500_init+0x6e>
    {
        handle->debug_print("mpu6500: iic_write is null.\n");                       /* iic_write is null */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005576:	486e      	ldr	r0, [pc, #440]	@ (8005730 <mpu6500_init+0x220>)
 8005578:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800557a:	2303      	movs	r3, #3
 800557c:	e0cd      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (handle->spi_init == NULL)                                                   /* check spi_init */
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d105      	bne.n	8005592 <mpu6500_init+0x82>
    {
        handle->debug_print("mpu6500: spi_init is null.\n");                        /* spi_init is null */
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800558a:	486a      	ldr	r0, [pc, #424]	@ (8005734 <mpu6500_init+0x224>)
 800558c:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 800558e:	2303      	movs	r3, #3
 8005590:	e0c3      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (handle->spi_deinit == NULL)                                                 /* check spi_deinit */
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <mpu6500_init+0x96>
    {
        handle->debug_print("mpu6500: spi_deinit is null.\n");                      /* spi_deinit is null */
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800559e:	4866      	ldr	r0, [pc, #408]	@ (8005738 <mpu6500_init+0x228>)
 80055a0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80055a2:	2303      	movs	r3, #3
 80055a4:	e0b9      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (handle->spi_read == NULL)                                                   /* check spi_read */
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69db      	ldr	r3, [r3, #28]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d105      	bne.n	80055ba <mpu6500_init+0xaa>
    {
        handle->debug_print("mpu6500: spi_read is null.\n");                        /* spi_read is null */
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055b2:	4862      	ldr	r0, [pc, #392]	@ (800573c <mpu6500_init+0x22c>)
 80055b4:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0af      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (handle->spi_write == NULL)                                                  /* check spi_write */
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d105      	bne.n	80055ce <mpu6500_init+0xbe>
    {
        handle->debug_print("mpu6500: spi_write is null.\n");                       /* spi_write is null */
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c6:	485e      	ldr	r0, [pc, #376]	@ (8005740 <mpu6500_init+0x230>)
 80055c8:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80055ca:	2303      	movs	r3, #3
 80055cc:	e0a5      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (handle->delay_ms == NULL)                                                   /* check delay_ms */
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d105      	bne.n	80055e2 <mpu6500_init+0xd2>
    {
        handle->debug_print("mpu6500: delay_ms is null.\n");                        /* delay_ms is null */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055da:	485a      	ldr	r0, [pc, #360]	@ (8005744 <mpu6500_init+0x234>)
 80055dc:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80055de:	2303      	movs	r3, #3
 80055e0:	e09b      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (handle->receive_callback == NULL)                                           /* check receive_callback */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d105      	bne.n	80055f6 <mpu6500_init+0xe6>
    {
        handle->debug_print("mpu6500: receive_callback is null.\n");                /* receive_callback is null */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055ee:	4856      	ldr	r0, [pc, #344]	@ (8005748 <mpu6500_init+0x238>)
 80055f0:	4798      	blx	r3
       
        return 3;                                                                   /* return error */
 80055f2:	2303      	movs	r3, #3
 80055f4:	e091      	b.n	800571a <mpu6500_init+0x20a>
    }
    
    if (handle->iic_spi == MPU6500_INTERFACE_IIC)                                   /* if iic interface */
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d10d      	bne.n	800561c <mpu6500_init+0x10c>
    {
        res = handle->iic_init();                                                   /* iic init */
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	4798      	blx	r3
 8005606:	4603      	mov	r3, r0
 8005608:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 800560a:	7afb      	ldrb	r3, [r7, #11]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d013      	beq.n	8005638 <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: iic init failed.\n");                     /* iic init failed */
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005614:	484d      	ldr	r0, [pc, #308]	@ (800574c <mpu6500_init+0x23c>)
 8005616:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 8005618:	2301      	movs	r3, #1
 800561a:	e07e      	b.n	800571a <mpu6500_init+0x20a>
        }
    }
    else                                                                            /* if spi interface */
    {
        res = handle->spi_init();                                                   /* spi init */
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	695b      	ldr	r3, [r3, #20]
 8005620:	4798      	blx	r3
 8005622:	4603      	mov	r3, r0
 8005624:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 8005626:	7afb      	ldrb	r3, [r7, #11]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <mpu6500_init+0x128>
        {
            handle->debug_print("mpu6500: spi init failed.\n");                     /* spi init failed */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005630:	4847      	ldr	r0, [pc, #284]	@ (8005750 <mpu6500_init+0x240>)
 8005632:	4798      	blx	r3
           
            return 1;                                                               /* return error */
 8005634:	2301      	movs	r3, #1
 8005636:	e070      	b.n	800571a <mpu6500_init+0x20a>
        }
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_WHO_AM_I, &prev, 1);                   /* read who am I */
 8005638:	f107 020a 	add.w	r2, r7, #10
 800563c:	2301      	movs	r3, #1
 800563e:	2175      	movs	r1, #117	@ 0x75
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff feb7 	bl	80053b4 <a_mpu6500_read>
 8005646:	4603      	mov	r3, r0
 8005648:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 800564a:	7afb      	ldrb	r3, [r7, #11]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d008      	beq.n	8005662 <mpu6500_init+0x152>
    {
        handle->debug_print("mpu6500: read who am i failed.\n");                    /* read who am I failed */
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005654:	483f      	ldr	r0, [pc, #252]	@ (8005754 <mpu6500_init+0x244>)
 8005656:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 8005658:	6878      	ldr	r0, [r7, #4]
 800565a:	f7ff ff0d 	bl	8005478 <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 800565e:	2305      	movs	r3, #5
 8005660:	e05b      	b.n	800571a <mpu6500_init+0x20a>
    }
    if (prev != 0x70)                                                               /* check the id */
 8005662:	7abb      	ldrb	r3, [r7, #10]
 8005664:	2b70      	cmp	r3, #112	@ 0x70
 8005666:	d008      	beq.n	800567a <mpu6500_init+0x16a>
    {
        handle->debug_print("mpu6500: id is invalid.\n");                           /* id is invalid */
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800566c:	483a      	ldr	r0, [pc, #232]	@ (8005758 <mpu6500_init+0x248>)
 800566e:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f7ff ff01 	bl	8005478 <a_mpu6500_deinit>
        
        return 5;                                                                   /* return error */
 8005676:	2305      	movs	r3, #5
 8005678:	e04f      	b.n	800571a <mpu6500_init+0x20a>
    }
    
    prev = 1 << 7;                                                                  /* reset the device */
 800567a:	2380      	movs	r3, #128	@ 0x80
 800567c:	72bb      	strb	r3, [r7, #10]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);                /* write pwr mgmt 1 */
 800567e:	f107 020a 	add.w	r2, r7, #10
 8005682:	2301      	movs	r3, #1
 8005684:	216b      	movs	r1, #107	@ 0x6b
 8005686:	6878      	ldr	r0, [r7, #4]
 8005688:	f7ff fec5 	bl	8005416 <a_mpu6500_write>
 800568c:	4603      	mov	r3, r0
 800568e:	72fb      	strb	r3, [r7, #11]
    if (res != 0)                                                                   /* check the result */
 8005690:	7afb      	ldrb	r3, [r7, #11]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d008      	beq.n	80056a8 <mpu6500_init+0x198>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");                 /* write pwr mgmt 1 failed */
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800569a:	4830      	ldr	r0, [pc, #192]	@ (800575c <mpu6500_init+0x24c>)
 800569c:	4798      	blx	r3
        (void)a_mpu6500_deinit(handle);                                             /* iic or spi deinit */
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff feea 	bl	8005478 <a_mpu6500_deinit>
        
        return 4;                                                                   /* return error */
 80056a4:	2304      	movs	r3, #4
 80056a6:	e038      	b.n	800571a <mpu6500_init+0x20a>
    }
    handle->delay_ms(10);                                                           /* delay 10 ms */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ac:	200a      	movs	r0, #10
 80056ae:	4798      	blx	r3
    timeout = 100;                                                                  /* set the timeout 1000 ms */
 80056b0:	2364      	movs	r3, #100	@ 0x64
 80056b2:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 80056b4:	e029      	b.n	800570a <mpu6500_init+0x1fa>
    {
        res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);             /* read pwr mgmt 1 */
 80056b6:	f107 020a 	add.w	r2, r7, #10
 80056ba:	2301      	movs	r3, #1
 80056bc:	216b      	movs	r1, #107	@ 0x6b
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f7ff fe78 	bl	80053b4 <a_mpu6500_read>
 80056c4:	4603      	mov	r3, r0
 80056c6:	72fb      	strb	r3, [r7, #11]
        if (res != 0)                                                               /* check the result */
 80056c8:	7afb      	ldrb	r3, [r7, #11]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d008      	beq.n	80056e0 <mpu6500_init+0x1d0>
        {
            handle->debug_print("mpu6500: read pwr mgmt 1 failed.\n");              /* read pwr mgmt 1 failed */
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056d2:	4823      	ldr	r0, [pc, #140]	@ (8005760 <mpu6500_init+0x250>)
 80056d4:	4798      	blx	r3
            (void)a_mpu6500_deinit(handle);                                         /* iic or spi deinit */
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7ff fece 	bl	8005478 <a_mpu6500_deinit>
            
            return 4;                                                               /* return error */
 80056dc:	2304      	movs	r3, #4
 80056de:	e01c      	b.n	800571a <mpu6500_init+0x20a>
        }
        if ((prev & (1 << 7)) == 0)                                                 /* check the result */
 80056e0:	7abb      	ldrb	r3, [r7, #10]
 80056e2:	b25b      	sxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	db09      	blt.n	80056fc <mpu6500_init+0x1ec>
        {
            handle->inited = 1;                                                     /* flag the inited bit */
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2201      	movs	r2, #1
 80056ec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            handle->dmp_inited = 0;                                                 /* flag closed */
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            
            return 0;                                                               /* success return 0 */
 80056f8:	2300      	movs	r3, #0
 80056fa:	e00e      	b.n	800571a <mpu6500_init+0x20a>
        }
        handle->delay_ms(10);                                                       /* delay 10 ms */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005700:	200a      	movs	r0, #10
 8005702:	4798      	blx	r3
        timeout--;                                                                  /* timeout-- */
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	3b01      	subs	r3, #1
 8005708:	60fb      	str	r3, [r7, #12]
    while (timeout != 0)                                                            /* check the timeout */
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1d2      	bne.n	80056b6 <mpu6500_init+0x1a6>
    }
    
    handle->debug_print("mpu6500: reset failed.\n");                                /* reset failed */
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	4813      	ldr	r0, [pc, #76]	@ (8005764 <mpu6500_init+0x254>)
 8005716:	4798      	blx	r3
   
    return 4;                                                                       /* return error */
 8005718:	2304      	movs	r3, #4
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	0801f280 	.word	0x0801f280
 8005728:	0801f29c 	.word	0x0801f29c
 800572c:	0801f2bc 	.word	0x0801f2bc
 8005730:	0801f2d8 	.word	0x0801f2d8
 8005734:	0801f2f8 	.word	0x0801f2f8
 8005738:	0801f314 	.word	0x0801f314
 800573c:	0801f334 	.word	0x0801f334
 8005740:	0801f350 	.word	0x0801f350
 8005744:	0801f370 	.word	0x0801f370
 8005748:	0801f38c 	.word	0x0801f38c
 800574c:	0801f3b0 	.word	0x0801f3b0
 8005750:	0801f3cc 	.word	0x0801f3cc
 8005754:	0801f3e8 	.word	0x0801f3e8
 8005758:	0801f408 	.word	0x0801f408
 800575c:	0801f424 	.word	0x0801f424
 8005760:	0801f448 	.word	0x0801f448
 8005764:	0801f46c 	.word	0x0801f46c

08005768 <mpu6500_deinit>:
 *            - 3 handle is not initialized
 *            - 4 enter sleep mode failed
 * @note      none
 */
uint8_t mpu6500_deinit(mpu6500_handle_t *handle)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b084      	sub	sp, #16
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                         /* check handle */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d101      	bne.n	800577a <mpu6500_deinit+0x12>
    {
        return 2;                                                               /* return error */
 8005776:	2302      	movs	r3, #2
 8005778:	e031      	b.n	80057de <mpu6500_deinit+0x76>
    }
    if (handle->inited != 1)                                                    /* check handle initialization */
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005780:	2b01      	cmp	r3, #1
 8005782:	d001      	beq.n	8005788 <mpu6500_deinit+0x20>
    {
        return 3;                                                               /* return error */
 8005784:	2303      	movs	r3, #3
 8005786:	e02a      	b.n	80057de <mpu6500_deinit+0x76>
    }
    
    prev = (1 << 6) | (1 << 3) | (7 << 0);                                      /* enter sleep mode */
 8005788:	234f      	movs	r3, #79	@ 0x4f
 800578a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, &prev, 1);            /* write pwr mgmt 1 */
 800578c:	f107 020e 	add.w	r2, r7, #14
 8005790:	2301      	movs	r3, #1
 8005792:	216b      	movs	r1, #107	@ 0x6b
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f7ff fe3e 	bl	8005416 <a_mpu6500_write>
 800579a:	4603      	mov	r3, r0
 800579c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 800579e:	7bfb      	ldrb	r3, [r7, #15]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d005      	beq.n	80057b0 <mpu6500_deinit+0x48>
    {
        handle->debug_print("mpu6500: write pwr mgmt 1 failed.\n");             /* write pwr mgmt 1 failed */
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057a8:	480f      	ldr	r0, [pc, #60]	@ (80057e8 <mpu6500_deinit+0x80>)
 80057aa:	4798      	blx	r3
       
        return 4;                                                               /* return error */
 80057ac:	2304      	movs	r3, #4
 80057ae:	e016      	b.n	80057de <mpu6500_deinit+0x76>
    }
    res = a_mpu6500_deinit(handle);                                             /* deinit */
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff fe61 	bl	8005478 <a_mpu6500_deinit>
 80057b6:	4603      	mov	r3, r0
 80057b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                               /* check the result */
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d005      	beq.n	80057cc <mpu6500_deinit+0x64>
    {
        handle->debug_print("mpu6500: deinit failed.\n");                       /* deinit failed */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057c4:	4809      	ldr	r0, [pc, #36]	@ (80057ec <mpu6500_deinit+0x84>)
 80057c6:	4798      	blx	r3
       
        return 1;                                                               /* return error */
 80057c8:	2301      	movs	r3, #1
 80057ca:	e008      	b.n	80057de <mpu6500_deinit+0x76>
    }
    handle->inited = 0;                                                         /* flag closed */
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    handle->dmp_inited = 0;                                                     /* flag closed */
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
    
    return 0;                                                                   /* success return 0 */
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3710      	adds	r7, #16
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	0801f424 	.word	0x0801f424
 80057ec:	0801f484 	.word	0x0801f484

080057f0 <mpu6500_read>:
uint8_t mpu6500_read(mpu6500_handle_t *handle,
                     int16_t (*accel_raw)[3], float (*accel_g)[3],
                     int16_t (*gyro_raw)[3], float (*gyro_dps)[3],
                     uint16_t *len
                    )
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	60f8      	str	r0, [r7, #12]
 80057f8:	60b9      	str	r1, [r7, #8]
 80057fa:	607a      	str	r2, [r7, #4]
 80057fc:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t prev;
    uint8_t accel_conf;
    uint8_t gyro_conf;
    
    if (handle == NULL)                                                                            /* check handle */
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d102      	bne.n	800580a <mpu6500_read+0x1a>
    {
        return 2;                                                                                  /* return error */
 8005804:	2302      	movs	r3, #2
 8005806:	f000 be88 	b.w	800651a <mpu6500_read+0xd2a>
    }
    if (handle->inited != 1)                                                                       /* check handle initialization */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005810:	2b01      	cmp	r3, #1
 8005812:	d002      	beq.n	800581a <mpu6500_read+0x2a>
    {
        return 3;                                                                                  /* return error */
 8005814:	2303      	movs	r3, #3
 8005816:	f000 be80 	b.w	800651a <mpu6500_read+0xd2a>
    }
    if ((*len) == 0)                                                                               /* check length */
 800581a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d106      	bne.n	8005830 <mpu6500_read+0x40>
    {
        handle->debug_print("mpu6500: length is zero.\n");                                         /* length is zero */
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	486a      	ldr	r0, [pc, #424]	@ (80059d0 <mpu6500_read+0x1e0>)
 8005828:	4798      	blx	r3
                                                                                                  
        return 4;                                                                                  /* return error */
 800582a:	2304      	movs	r3, #4
 800582c:	f000 be75 	b.w	800651a <mpu6500_read+0xd2a>
    }
    if (handle->dmp_inited != 0)                                                                   /* check dmp initialization */
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005836:	2b00      	cmp	r3, #0
 8005838:	d006      	beq.n	8005848 <mpu6500_read+0x58>
    {
        handle->debug_print("mpu6500: dmp is running.\n");                                         /* dmp is running */
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800583e:	4865      	ldr	r0, [pc, #404]	@ (80059d4 <mpu6500_read+0x1e4>)
 8005840:	4798      	blx	r3
        
        return 5;                                                                                  /* return error */
 8005842:	2305      	movs	r3, #5
 8005844:	f000 be69 	b.w	800651a <mpu6500_read+0xd2a>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);                      /* read config */
 8005848:	f107 0219 	add.w	r2, r7, #25
 800584c:	2301      	movs	r3, #1
 800584e:	216a      	movs	r1, #106	@ 0x6a
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff fdaf 	bl	80053b4 <a_mpu6500_read>
 8005856:	4603      	mov	r3, r0
 8005858:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 800585a:	7f7b      	ldrb	r3, [r7, #29]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d006      	beq.n	800586e <mpu6500_read+0x7e>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                                  /* read user ctrl failed */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	485c      	ldr	r0, [pc, #368]	@ (80059d8 <mpu6500_read+0x1e8>)
 8005866:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 8005868:	2301      	movs	r3, #1
 800586a:	f000 be56 	b.w	800651a <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&accel_conf, 1);             /* read accel config */
 800586e:	f107 0218 	add.w	r2, r7, #24
 8005872:	2301      	movs	r3, #1
 8005874:	211c      	movs	r1, #28
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff fd9c 	bl	80053b4 <a_mpu6500_read>
 800587c:	4603      	mov	r3, r0
 800587e:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 8005880:	7f7b      	ldrb	r3, [r7, #29]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d006      	beq.n	8005894 <mpu6500_read+0xa4>
    {
        handle->debug_print("mpu6500: read accel config failed.\n");                               /* read accel config failed */
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588a:	4854      	ldr	r0, [pc, #336]	@ (80059dc <mpu6500_read+0x1ec>)
 800588c:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 800588e:	2301      	movs	r3, #1
 8005890:	f000 be43 	b.w	800651a <mpu6500_read+0xd2a>
    }
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&gyro_conf, 1);               /* read gyro config */
 8005894:	f107 0217 	add.w	r2, r7, #23
 8005898:	2301      	movs	r3, #1
 800589a:	211b      	movs	r1, #27
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f7ff fd89 	bl	80053b4 <a_mpu6500_read>
 80058a2:	4603      	mov	r3, r0
 80058a4:	777b      	strb	r3, [r7, #29]
    if (res != 0)                                                                                  /* check result */
 80058a6:	7f7b      	ldrb	r3, [r7, #29]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d006      	beq.n	80058ba <mpu6500_read+0xca>
    {
        handle->debug_print("mpu6500: read gyro config failed.\n");                                /* read gyro config failed */
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b0:	484b      	ldr	r0, [pc, #300]	@ (80059e0 <mpu6500_read+0x1f0>)
 80058b2:	4798      	blx	r3
       
        return 1;                                                                                  /* return error */
 80058b4:	2301      	movs	r3, #1
 80058b6:	f000 be30 	b.w	800651a <mpu6500_read+0xd2a>
    }
    accel_conf = (accel_conf >> 3) & 0x3;                                                          /* get the accel conf */
 80058ba:	7e3b      	ldrb	r3, [r7, #24]
 80058bc:	08db      	lsrs	r3, r3, #3
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 0303 	and.w	r3, r3, #3
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	763b      	strb	r3, [r7, #24]
    gyro_conf = (gyro_conf >> 3) & 0x3;                                                            /* get the gyro conf */
 80058c8:	7dfb      	ldrb	r3, [r7, #23]
 80058ca:	08db      	lsrs	r3, r3, #3
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	f003 0303 	and.w	r3, r3, #3
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	75fb      	strb	r3, [r7, #23]
    if ((prev & (1 << 6)) != 0)                                                                    /* if fifo mode */
 80058d6:	7e7b      	ldrb	r3, [r7, #25]
 80058d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8436 	beq.w	800614e <mpu6500_read+0x95e>
        uint8_t conf;
        uint8_t buf[2];
        uint16_t count;
        uint16_t i;
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&conf, 1);                    /* read fifo enable */
 80058e2:	f107 0216 	add.w	r2, r7, #22
 80058e6:	2301      	movs	r3, #1
 80058e8:	2123      	movs	r1, #35	@ 0x23
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff fd62 	bl	80053b4 <a_mpu6500_read>
 80058f0:	4603      	mov	r3, r0
 80058f2:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80058f4:	7f7b      	ldrb	r3, [r7, #29]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d006      	beq.n	8005908 <mpu6500_read+0x118>
        {
            handle->debug_print("mpu6500: read fifo enable failed.\n");                            /* read fifo enable failed */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058fe:	4839      	ldr	r0, [pc, #228]	@ (80059e4 <mpu6500_read+0x1f4>)
 8005900:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8005902:	2301      	movs	r3, #1
 8005904:	f000 be09 	b.w	800651a <mpu6500_read+0xd2a>
        }
        if (conf != 0x78)                                                                          /* check the conf */
 8005908:	7dbb      	ldrb	r3, [r7, #22]
 800590a:	2b78      	cmp	r3, #120	@ 0x78
 800590c:	d006      	beq.n	800591c <mpu6500_read+0x12c>
        {
            handle->debug_print("mpu6500: fifo conf is error.\n");                                 /* fifo conf is error */
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	4835      	ldr	r0, [pc, #212]	@ (80059e8 <mpu6500_read+0x1f8>)
 8005914:	4798      	blx	r3
                                                                                                      
            return 6;                                                                              /* return error */
 8005916:	2306      	movs	r3, #6
 8005918:	f000 bdff 	b.w	800651a <mpu6500_read+0xd2a>
        }
        
        res = a_mpu6500_read(handle, MPU6500_REG_FIFO_COUNTH, (uint8_t *)buf, 2);                  /* read fifo count */
 800591c:	f107 0214 	add.w	r2, r7, #20
 8005920:	2302      	movs	r3, #2
 8005922:	2172      	movs	r1, #114	@ 0x72
 8005924:	68f8      	ldr	r0, [r7, #12]
 8005926:	f7ff fd45 	bl	80053b4 <a_mpu6500_read>
 800592a:	4603      	mov	r3, r0
 800592c:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 800592e:	7f7b      	ldrb	r3, [r7, #29]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d006      	beq.n	8005942 <mpu6500_read+0x152>
        {
            handle->debug_print("mpu6500: read fifo count failed.\n");                             /* read fifo count failed */
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005938:	482c      	ldr	r0, [pc, #176]	@ (80059ec <mpu6500_read+0x1fc>)
 800593a:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 800593c:	2301      	movs	r3, #1
 800593e:	f000 bdec 	b.w	800651a <mpu6500_read+0xd2a>
        }
        
        count = (uint16_t)(((uint16_t)buf[0] << 8) | buf[1]);                                      /* set count */
 8005942:	7d3b      	ldrb	r3, [r7, #20]
 8005944:	b21b      	sxth	r3, r3
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	b21a      	sxth	r2, r3
 800594a:	7d7b      	ldrb	r3, [r7, #21]
 800594c:	b21b      	sxth	r3, r3
 800594e:	4313      	orrs	r3, r2
 8005950:	b21b      	sxth	r3, r3
 8005952:	837b      	strh	r3, [r7, #26]
        count = (count < 1024) ? count : 1024;                                                     /* just the counter */
 8005954:	8b7b      	ldrh	r3, [r7, #26]
 8005956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800595a:	bf28      	it	cs
 800595c:	f44f 6380 	movcs.w	r3, #1024	@ 0x400
 8005960:	837b      	strh	r3, [r7, #26]
        count = (count < ((*len) * 12)) ? count : ((*len) * 12);                                   /* just outer buffer size */
 8005962:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005964:	881b      	ldrh	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	4613      	mov	r3, r2
 800596a:	005b      	lsls	r3, r3, #1
 800596c:	4413      	add	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	461a      	mov	r2, r3
 8005972:	8b7b      	ldrh	r3, [r7, #26]
 8005974:	4293      	cmp	r3, r2
 8005976:	bfa8      	it	ge
 8005978:	4613      	movge	r3, r2
 800597a:	837b      	strh	r3, [r7, #26]
        count = (count / 12) * 12;                                                                 /* 12 times */
 800597c:	8b7b      	ldrh	r3, [r7, #26]
 800597e:	4a1c      	ldr	r2, [pc, #112]	@ (80059f0 <mpu6500_read+0x200>)
 8005980:	fba2 2303 	umull	r2, r3, r2, r3
 8005984:	08db      	lsrs	r3, r3, #3
 8005986:	b29b      	uxth	r3, r3
 8005988:	461a      	mov	r2, r3
 800598a:	0052      	lsls	r2, r2, #1
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	837b      	strh	r3, [r7, #26]
        *len = count / 12;                                                                         /* set the output length */
 8005992:	8b7b      	ldrh	r3, [r7, #26]
 8005994:	4a16      	ldr	r2, [pc, #88]	@ (80059f0 <mpu6500_read+0x200>)
 8005996:	fba2 2303 	umull	r2, r3, r2, r3
 800599a:	08db      	lsrs	r3, r3, #3
 800599c:	b29a      	uxth	r2, r3
 800599e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a0:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_R_W, handle->buf, count);                         /* read data */
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80059a8:	8b7b      	ldrh	r3, [r7, #26]
 80059aa:	2174      	movs	r1, #116	@ 0x74
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7ff fd01 	bl	80053b4 <a_mpu6500_read>
 80059b2:	4603      	mov	r3, r0
 80059b4:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 80059b6:	7f7b      	ldrb	r3, [r7, #29]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d006      	beq.n	80059ca <mpu6500_read+0x1da>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c0:	480c      	ldr	r0, [pc, #48]	@ (80059f4 <mpu6500_read+0x204>)
 80059c2:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 80059c4:	2301      	movs	r3, #1
 80059c6:	f000 bda8 	b.w	800651a <mpu6500_read+0xd2a>
        }
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 80059ca:	2300      	movs	r3, #0
 80059cc:	83fb      	strh	r3, [r7, #30]
 80059ce:	e3b6      	b.n	800613e <mpu6500_read+0x94e>
 80059d0:	0801f4a0 	.word	0x0801f4a0
 80059d4:	0801ef70 	.word	0x0801ef70
 80059d8:	0801f238 	.word	0x0801f238
 80059dc:	0801f1f0 	.word	0x0801f1f0
 80059e0:	0801f214 	.word	0x0801f214
 80059e4:	0801f4bc 	.word	0x0801f4bc
 80059e8:	0801f4e0 	.word	0x0801f4e0
 80059ec:	0801f174 	.word	0x0801f174
 80059f0:	aaaaaaab 	.word	0xaaaaaaab
 80059f4:	0801f198 	.word	0x0801f198
 80059f8:	46800000 	.word	0x46800000
 80059fc:	46000000 	.word	0x46000000
        {
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8005a00:	8bfa      	ldrh	r2, [r7, #30]
 8005a02:	4613      	mov	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	4413      	add	r3, r2
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a14:	b21b      	sxth	r3, r3
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 1];                                  /* set raw accel x */
 8005a1a:	8bfa      	ldrh	r2, [r7, #30]
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	005b      	lsls	r3, r3, #1
 8005a20:	4413      	add	r3, r2
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	3301      	adds	r3, #1
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a2e:	b219      	sxth	r1, r3
            accel_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 0] << 8) | 
 8005a30:	8bfa      	ldrh	r2, [r7, #30]
 8005a32:	4613      	mov	r3, r2
 8005a34:	005b      	lsls	r3, r3, #1
 8005a36:	4413      	add	r3, r2
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	4413      	add	r3, r2
 8005a40:	ea40 0201 	orr.w	r2, r0, r1
 8005a44:	b212      	sxth	r2, r2
 8005a46:	801a      	strh	r2, [r3, #0]
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8005a48:	8bfa      	ldrh	r2, [r7, #30]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	4413      	add	r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	3302      	adds	r3, #2
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4413      	add	r3, r2
 8005a58:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a5c:	b21b      	sxth	r3, r3
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 3];                                  /* set raw accel y */
 8005a62:	8bfa      	ldrh	r2, [r7, #30]
 8005a64:	4613      	mov	r3, r2
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	4413      	add	r3, r2
 8005a6a:	009b      	lsls	r3, r3, #2
 8005a6c:	3303      	adds	r3, #3
 8005a6e:	68fa      	ldr	r2, [r7, #12]
 8005a70:	4413      	add	r3, r2
 8005a72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005a76:	b219      	sxth	r1, r3
            accel_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 2] << 8) | 
 8005a78:	8bfa      	ldrh	r2, [r7, #30]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	005b      	lsls	r3, r3, #1
 8005a7e:	4413      	add	r3, r2
 8005a80:	005b      	lsls	r3, r3, #1
 8005a82:	461a      	mov	r2, r3
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	4413      	add	r3, r2
 8005a88:	ea40 0201 	orr.w	r2, r0, r1
 8005a8c:	b212      	sxth	r2, r2
 8005a8e:	805a      	strh	r2, [r3, #2]
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8005a90:	8bfa      	ldrh	r2, [r7, #30]
 8005a92:	4613      	mov	r3, r2
 8005a94:	005b      	lsls	r3, r3, #1
 8005a96:	4413      	add	r3, r2
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	3304      	adds	r3, #4
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4413      	add	r3, r2
 8005aa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aa4:	b21b      	sxth	r3, r3
 8005aa6:	021b      	lsls	r3, r3, #8
 8005aa8:	b218      	sxth	r0, r3
                                         handle->buf[i * 12 + 5];                                  /* set raw accel z */
 8005aaa:	8bfa      	ldrh	r2, [r7, #30]
 8005aac:	4613      	mov	r3, r2
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	4413      	add	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	3305      	adds	r3, #5
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	4413      	add	r3, r2
 8005aba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005abe:	b219      	sxth	r1, r3
            accel_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 4] << 8) | 
 8005ac0:	8bfa      	ldrh	r2, [r7, #30]
 8005ac2:	4613      	mov	r3, r2
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	4413      	add	r3, r2
 8005ac8:	005b      	lsls	r3, r3, #1
 8005aca:	461a      	mov	r2, r3
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	4413      	add	r3, r2
 8005ad0:	ea40 0201 	orr.w	r2, r0, r1
 8005ad4:	b212      	sxth	r2, r2
 8005ad6:	809a      	strh	r2, [r3, #4]
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8005ad8:	8bfa      	ldrh	r2, [r7, #30]
 8005ada:	4613      	mov	r3, r2
 8005adc:	005b      	lsls	r3, r3, #1
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	3306      	adds	r3, #6
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	4413      	add	r3, r2
 8005ae8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005aec:	b21b      	sxth	r3, r3
 8005aee:	021b      	lsls	r3, r3, #8
 8005af0:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 7];                                   /* set raw gyro x */
 8005af2:	8bfa      	ldrh	r2, [r7, #30]
 8005af4:	4613      	mov	r3, r2
 8005af6:	005b      	lsls	r3, r3, #1
 8005af8:	4413      	add	r3, r2
 8005afa:	009b      	lsls	r3, r3, #2
 8005afc:	3307      	adds	r3, #7
 8005afe:	68fa      	ldr	r2, [r7, #12]
 8005b00:	4413      	add	r3, r2
 8005b02:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b06:	b219      	sxth	r1, r3
            gyro_raw[i][0] = (int16_t)((uint16_t)handle->buf[i * 12 + 6] << 8) | 
 8005b08:	8bfa      	ldrh	r2, [r7, #30]
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	005b      	lsls	r3, r3, #1
 8005b0e:	4413      	add	r3, r2
 8005b10:	005b      	lsls	r3, r3, #1
 8005b12:	461a      	mov	r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	4413      	add	r3, r2
 8005b18:	ea40 0201 	orr.w	r2, r0, r1
 8005b1c:	b212      	sxth	r2, r2
 8005b1e:	801a      	strh	r2, [r3, #0]
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8005b20:	8bfa      	ldrh	r2, [r7, #30]
 8005b22:	4613      	mov	r3, r2
 8005b24:	005b      	lsls	r3, r3, #1
 8005b26:	4413      	add	r3, r2
 8005b28:	009b      	lsls	r3, r3, #2
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4413      	add	r3, r2
 8005b30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b34:	b21b      	sxth	r3, r3
 8005b36:	021b      	lsls	r3, r3, #8
 8005b38:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 9];                                   /* set raw gyro y */
 8005b3a:	8bfa      	ldrh	r2, [r7, #30]
 8005b3c:	4613      	mov	r3, r2
 8005b3e:	005b      	lsls	r3, r3, #1
 8005b40:	4413      	add	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	3309      	adds	r3, #9
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	4413      	add	r3, r2
 8005b4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b4e:	b219      	sxth	r1, r3
            gyro_raw[i][1] = (int16_t)((uint16_t)handle->buf[i * 12 + 8] << 8) | 
 8005b50:	8bfa      	ldrh	r2, [r7, #30]
 8005b52:	4613      	mov	r3, r2
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	4413      	add	r3, r2
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	4413      	add	r3, r2
 8005b60:	ea40 0201 	orr.w	r2, r0, r1
 8005b64:	b212      	sxth	r2, r2
 8005b66:	805a      	strh	r2, [r3, #2]
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8005b68:	8bfa      	ldrh	r2, [r7, #30]
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	005b      	lsls	r3, r3, #1
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	330a      	adds	r3, #10
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	4413      	add	r3, r2
 8005b78:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b7c:	b21b      	sxth	r3, r3
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	b218      	sxth	r0, r3
                                        handle->buf[i * 12 + 11];                                  /* set raw gyro z */
 8005b82:	8bfa      	ldrh	r2, [r7, #30]
 8005b84:	4613      	mov	r3, r2
 8005b86:	005b      	lsls	r3, r3, #1
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	330b      	adds	r3, #11
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4413      	add	r3, r2
 8005b92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005b96:	b219      	sxth	r1, r3
            gyro_raw[i][2] = (int16_t)((uint16_t)handle->buf[i * 12 + 10] << 8) | 
 8005b98:	8bfa      	ldrh	r2, [r7, #30]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	005b      	lsls	r3, r3, #1
 8005b9e:	4413      	add	r3, r2
 8005ba0:	005b      	lsls	r3, r3, #1
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	ea40 0201 	orr.w	r2, r0, r1
 8005bac:	b212      	sxth	r2, r2
 8005bae:	809a      	strh	r2, [r3, #4]
            
            if (accel_conf == 0)                                                                   /* ±2g */
 8005bb0:	7e3b      	ldrb	r3, [r7, #24]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d154      	bne.n	8005c60 <mpu6500_read+0x470>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 16384.0f;                               /* set accel x */
 8005bb6:	8bfa      	ldrh	r2, [r7, #30]
 8005bb8:	4613      	mov	r3, r2
 8005bba:	005b      	lsls	r3, r3, #1
 8005bbc:	4413      	add	r3, r2
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005bca:	ee07 3a90 	vmov	s15, r3
 8005bce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005bd2:	8bfa      	ldrh	r2, [r7, #30]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	461a      	mov	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4413      	add	r3, r2
 8005be2:	ed5f 6a7b 	vldr	s13, [pc, #-492]	@ 80059f8 <mpu6500_read+0x208>
 8005be6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bea:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 16384.0f;                               /* set accel y */
 8005bee:	8bfa      	ldrh	r2, [r7, #30]
 8005bf0:	4613      	mov	r3, r2
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	4413      	add	r3, r2
 8005bf6:	005b      	lsls	r3, r3, #1
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c0a:	8bfa      	ldrh	r2, [r7, #30]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	005b      	lsls	r3, r3, #1
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	461a      	mov	r2, r3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4413      	add	r3, r2
 8005c1a:	ed5f 6a89 	vldr	s13, [pc, #-548]	@ 80059f8 <mpu6500_read+0x208>
 8005c1e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c22:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 16384.0f;                               /* set accel z */
 8005c26:	8bfa      	ldrh	r2, [r7, #30]
 8005c28:	4613      	mov	r3, r2
 8005c2a:	005b      	lsls	r3, r3, #1
 8005c2c:	4413      	add	r3, r2
 8005c2e:	005b      	lsls	r3, r3, #1
 8005c30:	461a      	mov	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4413      	add	r3, r2
 8005c36:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005c3a:	ee07 3a90 	vmov	s15, r3
 8005c3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c42:	8bfa      	ldrh	r2, [r7, #30]
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4413      	add	r3, r2
 8005c52:	ed5f 6a97 	vldr	s13, [pc, #-604]	@ 80059f8 <mpu6500_read+0x208>
 8005c56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c5a:	edc3 7a02 	vstr	s15, [r3, #8]
 8005c5e:	e103      	b.n	8005e68 <mpu6500_read+0x678>
            }
            else if (accel_conf == 1)                                                              /* ±4g */
 8005c60:	7e3b      	ldrb	r3, [r7, #24]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d154      	bne.n	8005d10 <mpu6500_read+0x520>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 8192.0f;                                /* set accel x */
 8005c66:	8bfa      	ldrh	r2, [r7, #30]
 8005c68:	4613      	mov	r3, r2
 8005c6a:	005b      	lsls	r3, r3, #1
 8005c6c:	4413      	add	r3, r2
 8005c6e:	005b      	lsls	r3, r3, #1
 8005c70:	461a      	mov	r2, r3
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	4413      	add	r3, r2
 8005c76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005c7a:	ee07 3a90 	vmov	s15, r3
 8005c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005c82:	8bfa      	ldrh	r2, [r7, #30]
 8005c84:	4613      	mov	r3, r2
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	4413      	add	r3, r2
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	461a      	mov	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4413      	add	r3, r2
 8005c92:	ed5f 6aa6 	vldr	s13, [pc, #-664]	@ 80059fc <mpu6500_read+0x20c>
 8005c96:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c9a:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 8192.0f;                                /* set accel y */
 8005c9e:	8bfa      	ldrh	r2, [r7, #30]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	4413      	add	r3, r2
 8005ca6:	005b      	lsls	r3, r3, #1
 8005ca8:	461a      	mov	r2, r3
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	4413      	add	r3, r2
 8005cae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005cb2:	ee07 3a90 	vmov	s15, r3
 8005cb6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cba:	8bfa      	ldrh	r2, [r7, #30]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	005b      	lsls	r3, r3, #1
 8005cc0:	4413      	add	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	4413      	add	r3, r2
 8005cca:	ed5f 6ab4 	vldr	s13, [pc, #-720]	@ 80059fc <mpu6500_read+0x20c>
 8005cce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005cd2:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 8192.0f;                                /* set accel z */
 8005cd6:	8bfa      	ldrh	r2, [r7, #30]
 8005cd8:	4613      	mov	r3, r2
 8005cda:	005b      	lsls	r3, r3, #1
 8005cdc:	4413      	add	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	68bb      	ldr	r3, [r7, #8]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005cea:	ee07 3a90 	vmov	s15, r3
 8005cee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005cf2:	8bfa      	ldrh	r2, [r7, #30]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	005b      	lsls	r3, r3, #1
 8005cf8:	4413      	add	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4413      	add	r3, r2
 8005d02:	ed5f 6ac2 	vldr	s13, [pc, #-776]	@ 80059fc <mpu6500_read+0x20c>
 8005d06:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d0a:	edc3 7a02 	vstr	s15, [r3, #8]
 8005d0e:	e0ab      	b.n	8005e68 <mpu6500_read+0x678>
            }
            else if (accel_conf == 2)                                                              /* ±8g */
 8005d10:	7e3b      	ldrb	r3, [r7, #24]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d154      	bne.n	8005dc0 <mpu6500_read+0x5d0>
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 4096.0f;                                /* set accel x */
 8005d16:	8bfa      	ldrh	r2, [r7, #30]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	4413      	add	r3, r2
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	461a      	mov	r2, r3
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	4413      	add	r3, r2
 8005d26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d2a:	ee07 3a90 	vmov	s15, r3
 8005d2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d32:	8bfa      	ldrh	r2, [r7, #30]
 8005d34:	4613      	mov	r3, r2
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	4413      	add	r3, r2
 8005d3a:	009b      	lsls	r3, r3, #2
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4413      	add	r3, r2
 8005d42:	eddf 6acd 	vldr	s13, [pc, #820]	@ 8006078 <mpu6500_read+0x888>
 8005d46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d4a:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 4096.0f;                                /* set accel y */
 8005d4e:	8bfa      	ldrh	r2, [r7, #30]
 8005d50:	4613      	mov	r3, r2
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	4413      	add	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	461a      	mov	r2, r3
 8005d5a:	68bb      	ldr	r3, [r7, #8]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005d62:	ee07 3a90 	vmov	s15, r3
 8005d66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005d6a:	8bfa      	ldrh	r2, [r7, #30]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	005b      	lsls	r3, r3, #1
 8005d70:	4413      	add	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	461a      	mov	r2, r3
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4413      	add	r3, r2
 8005d7a:	eddf 6abf 	vldr	s13, [pc, #764]	@ 8006078 <mpu6500_read+0x888>
 8005d7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005d82:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 4096.0f;                                /* set accel z */
 8005d86:	8bfa      	ldrh	r2, [r7, #30]
 8005d88:	4613      	mov	r3, r2
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4413      	add	r3, r2
 8005d8e:	005b      	lsls	r3, r3, #1
 8005d90:	461a      	mov	r2, r3
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	4413      	add	r3, r2
 8005d96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005d9a:	ee07 3a90 	vmov	s15, r3
 8005d9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005da2:	8bfa      	ldrh	r2, [r7, #30]
 8005da4:	4613      	mov	r3, r2
 8005da6:	005b      	lsls	r3, r3, #1
 8005da8:	4413      	add	r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	461a      	mov	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4413      	add	r3, r2
 8005db2:	eddf 6ab1 	vldr	s13, [pc, #708]	@ 8006078 <mpu6500_read+0x888>
 8005db6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005dba:	edc3 7a02 	vstr	s15, [r3, #8]
 8005dbe:	e053      	b.n	8005e68 <mpu6500_read+0x678>
            }
            else                                                                                   /* ±16g */
            {
                accel_g[i][0] = (float)(accel_raw[i][0]) / 2048.0f;                                /* set accel x */
 8005dc0:	8bfa      	ldrh	r2, [r7, #30]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	005b      	lsls	r3, r3, #1
 8005dc6:	4413      	add	r3, r2
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	461a      	mov	r2, r3
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005dd4:	ee07 3a90 	vmov	s15, r3
 8005dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ddc:	8bfa      	ldrh	r2, [r7, #30]
 8005dde:	4613      	mov	r3, r2
 8005de0:	005b      	lsls	r3, r3, #1
 8005de2:	4413      	add	r3, r2
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	461a      	mov	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	4413      	add	r3, r2
 8005dec:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 800607c <mpu6500_read+0x88c>
 8005df0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005df4:	edc3 7a00 	vstr	s15, [r3]
                accel_g[i][1] = (float)(accel_raw[i][1]) / 2048.0f;                                /* set accel y */
 8005df8:	8bfa      	ldrh	r2, [r7, #30]
 8005dfa:	4613      	mov	r3, r2
 8005dfc:	005b      	lsls	r3, r3, #1
 8005dfe:	4413      	add	r3, r2
 8005e00:	005b      	lsls	r3, r3, #1
 8005e02:	461a      	mov	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	4413      	add	r3, r2
 8005e08:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e0c:	ee07 3a90 	vmov	s15, r3
 8005e10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e14:	8bfa      	ldrh	r2, [r7, #30]
 8005e16:	4613      	mov	r3, r2
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	4413      	add	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	461a      	mov	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4413      	add	r3, r2
 8005e24:	eddf 6a95 	vldr	s13, [pc, #596]	@ 800607c <mpu6500_read+0x88c>
 8005e28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e2c:	edc3 7a01 	vstr	s15, [r3, #4]
                accel_g[i][2] = (float)(accel_raw[i][2]) / 2048.0f;                                /* set accel z */
 8005e30:	8bfa      	ldrh	r2, [r7, #30]
 8005e32:	4613      	mov	r3, r2
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	4413      	add	r3, r2
 8005e38:	005b      	lsls	r3, r3, #1
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005e44:	ee07 3a90 	vmov	s15, r3
 8005e48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e4c:	8bfa      	ldrh	r2, [r7, #30]
 8005e4e:	4613      	mov	r3, r2
 8005e50:	005b      	lsls	r3, r3, #1
 8005e52:	4413      	add	r3, r2
 8005e54:	009b      	lsls	r3, r3, #2
 8005e56:	461a      	mov	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	eddf 6a87 	vldr	s13, [pc, #540]	@ 800607c <mpu6500_read+0x88c>
 8005e60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e64:	edc3 7a02 	vstr	s15, [r3, #8]
            }
            
            if (gyro_conf == 0)                                                                    /* ±250dps */
 8005e68:	7dfb      	ldrb	r3, [r7, #23]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d154      	bne.n	8005f18 <mpu6500_read+0x728>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 131.0f;                                 /* set gyro x */
 8005e6e:	8bfa      	ldrh	r2, [r7, #30]
 8005e70:	4613      	mov	r3, r2
 8005e72:	005b      	lsls	r3, r3, #1
 8005e74:	4413      	add	r3, r2
 8005e76:	005b      	lsls	r3, r3, #1
 8005e78:	461a      	mov	r2, r3
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e82:	ee07 3a90 	vmov	s15, r3
 8005e86:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005e8a:	8bfa      	ldrh	r2, [r7, #30]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	461a      	mov	r2, r3
 8005e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e98:	4413      	add	r3, r2
 8005e9a:	eddf 6a79 	vldr	s13, [pc, #484]	@ 8006080 <mpu6500_read+0x890>
 8005e9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ea2:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 131.0f;                                 /* set gyro y */
 8005ea6:	8bfa      	ldrh	r2, [r7, #30]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	4413      	add	r3, r2
 8005eae:	005b      	lsls	r3, r3, #1
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	4413      	add	r3, r2
 8005eb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005eba:	ee07 3a90 	vmov	s15, r3
 8005ebe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ec2:	8bfa      	ldrh	r2, [r7, #30]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	005b      	lsls	r3, r3, #1
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	461a      	mov	r2, r3
 8005ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed0:	4413      	add	r3, r2
 8005ed2:	eddf 6a6b 	vldr	s13, [pc, #428]	@ 8006080 <mpu6500_read+0x890>
 8005ed6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005eda:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 131.0f;                                 /* set gyro z */
 8005ede:	8bfa      	ldrh	r2, [r7, #30]
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	005b      	lsls	r3, r3, #1
 8005ee4:	4413      	add	r3, r2
 8005ee6:	005b      	lsls	r3, r3, #1
 8005ee8:	461a      	mov	r2, r3
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	4413      	add	r3, r2
 8005eee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005ef2:	ee07 3a90 	vmov	s15, r3
 8005ef6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005efa:	8bfa      	ldrh	r2, [r7, #30]
 8005efc:	4613      	mov	r3, r2
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	4413      	add	r3, r2
 8005f02:	009b      	lsls	r3, r3, #2
 8005f04:	461a      	mov	r2, r3
 8005f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f08:	4413      	add	r3, r2
 8005f0a:	eddf 6a5d 	vldr	s13, [pc, #372]	@ 8006080 <mpu6500_read+0x890>
 8005f0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f12:	edc3 7a02 	vstr	s15, [r3, #8]
 8005f16:	e10f      	b.n	8006138 <mpu6500_read+0x948>
            }
            else if (gyro_conf == 1)                                                               /* ±500dps */
 8005f18:	7dfb      	ldrb	r3, [r7, #23]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d154      	bne.n	8005fc8 <mpu6500_read+0x7d8>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 65.5f;                                  /* set gyro x */
 8005f1e:	8bfa      	ldrh	r2, [r7, #30]
 8005f20:	4613      	mov	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4413      	add	r3, r2
 8005f26:	005b      	lsls	r3, r3, #1
 8005f28:	461a      	mov	r2, r3
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	4413      	add	r3, r2
 8005f2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005f32:	ee07 3a90 	vmov	s15, r3
 8005f36:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f3a:	8bfa      	ldrh	r2, [r7, #30]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	461a      	mov	r2, r3
 8005f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f48:	4413      	add	r3, r2
 8005f4a:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8006084 <mpu6500_read+0x894>
 8005f4e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f52:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 65.5f;                                  /* set gyro y */
 8005f56:	8bfa      	ldrh	r2, [r7, #30]
 8005f58:	4613      	mov	r3, r2
 8005f5a:	005b      	lsls	r3, r3, #1
 8005f5c:	4413      	add	r3, r2
 8005f5e:	005b      	lsls	r3, r3, #1
 8005f60:	461a      	mov	r2, r3
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	4413      	add	r3, r2
 8005f66:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005f6a:	ee07 3a90 	vmov	s15, r3
 8005f6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005f72:	8bfa      	ldrh	r2, [r7, #30]
 8005f74:	4613      	mov	r3, r2
 8005f76:	005b      	lsls	r3, r3, #1
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f80:	4413      	add	r3, r2
 8005f82:	eddf 6a40 	vldr	s13, [pc, #256]	@ 8006084 <mpu6500_read+0x894>
 8005f86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f8a:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 65.5f;                                  /* set gyro z */
 8005f8e:	8bfa      	ldrh	r2, [r7, #30]
 8005f90:	4613      	mov	r3, r2
 8005f92:	005b      	lsls	r3, r3, #1
 8005f94:	4413      	add	r3, r2
 8005f96:	005b      	lsls	r3, r3, #1
 8005f98:	461a      	mov	r2, r3
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005fa2:	ee07 3a90 	vmov	s15, r3
 8005fa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005faa:	8bfa      	ldrh	r2, [r7, #30]
 8005fac:	4613      	mov	r3, r2
 8005fae:	005b      	lsls	r3, r3, #1
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	461a      	mov	r2, r3
 8005fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fb8:	4413      	add	r3, r2
 8005fba:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8006084 <mpu6500_read+0x894>
 8005fbe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fc2:	edc3 7a02 	vstr	s15, [r3, #8]
 8005fc6:	e0b7      	b.n	8006138 <mpu6500_read+0x948>
            }
            else if (gyro_conf == 2)                                                               /* ±1000dps */
 8005fc8:	7dfb      	ldrb	r3, [r7, #23]
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d160      	bne.n	8006090 <mpu6500_read+0x8a0>
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 32.8f;                                  /* set gyro x */
 8005fce:	8bfa      	ldrh	r2, [r7, #30]
 8005fd0:	4613      	mov	r3, r2
 8005fd2:	005b      	lsls	r3, r3, #1
 8005fd4:	4413      	add	r3, r2
 8005fd6:	005b      	lsls	r3, r3, #1
 8005fd8:	461a      	mov	r2, r3
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	4413      	add	r3, r2
 8005fde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005fe2:	ee07 3a90 	vmov	s15, r3
 8005fe6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005fea:	8bfa      	ldrh	r2, [r7, #30]
 8005fec:	4613      	mov	r3, r2
 8005fee:	005b      	lsls	r3, r3, #1
 8005ff0:	4413      	add	r3, r2
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	461a      	mov	r2, r3
 8005ff6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff8:	4413      	add	r3, r2
 8005ffa:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8006088 <mpu6500_read+0x898>
 8005ffe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006002:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 32.8f;                                  /* set gyro y */
 8006006:	8bfa      	ldrh	r2, [r7, #30]
 8006008:	4613      	mov	r3, r2
 800600a:	005b      	lsls	r3, r3, #1
 800600c:	4413      	add	r3, r2
 800600e:	005b      	lsls	r3, r3, #1
 8006010:	461a      	mov	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	4413      	add	r3, r2
 8006016:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800601a:	ee07 3a90 	vmov	s15, r3
 800601e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006022:	8bfa      	ldrh	r2, [r7, #30]
 8006024:	4613      	mov	r3, r2
 8006026:	005b      	lsls	r3, r3, #1
 8006028:	4413      	add	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	461a      	mov	r2, r3
 800602e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006030:	4413      	add	r3, r2
 8006032:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8006088 <mpu6500_read+0x898>
 8006036:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800603a:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 32.8f;                                  /* set gyro z */
 800603e:	8bfa      	ldrh	r2, [r7, #30]
 8006040:	4613      	mov	r3, r2
 8006042:	005b      	lsls	r3, r3, #1
 8006044:	4413      	add	r3, r2
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	461a      	mov	r2, r3
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	4413      	add	r3, r2
 800604e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006052:	ee07 3a90 	vmov	s15, r3
 8006056:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800605a:	8bfa      	ldrh	r2, [r7, #30]
 800605c:	4613      	mov	r3, r2
 800605e:	005b      	lsls	r3, r3, #1
 8006060:	4413      	add	r3, r2
 8006062:	009b      	lsls	r3, r3, #2
 8006064:	461a      	mov	r2, r3
 8006066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006068:	4413      	add	r3, r2
 800606a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8006088 <mpu6500_read+0x898>
 800606e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006072:	edc3 7a02 	vstr	s15, [r3, #8]
 8006076:	e05f      	b.n	8006138 <mpu6500_read+0x948>
 8006078:	45800000 	.word	0x45800000
 800607c:	45000000 	.word	0x45000000
 8006080:	43030000 	.word	0x43030000
 8006084:	42830000 	.word	0x42830000
 8006088:	42033333 	.word	0x42033333
 800608c:	41833333 	.word	0x41833333
            }
            else                                                                                   /* ±2000dps */
            {
                gyro_dps[i][0] = (float)(gyro_raw[i][0]) / 16.4f;                                  /* set gyro x */
 8006090:	8bfa      	ldrh	r2, [r7, #30]
 8006092:	4613      	mov	r3, r2
 8006094:	005b      	lsls	r3, r3, #1
 8006096:	4413      	add	r3, r2
 8006098:	005b      	lsls	r3, r3, #1
 800609a:	461a      	mov	r2, r3
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	4413      	add	r3, r2
 80060a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060ac:	8bfa      	ldrh	r2, [r7, #30]
 80060ae:	4613      	mov	r3, r2
 80060b0:	005b      	lsls	r3, r3, #1
 80060b2:	4413      	add	r3, r2
 80060b4:	009b      	lsls	r3, r3, #2
 80060b6:	461a      	mov	r2, r3
 80060b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ba:	4413      	add	r3, r2
 80060bc:	ed5f 6a0d 	vldr	s13, [pc, #-52]	@ 800608c <mpu6500_read+0x89c>
 80060c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060c4:	edc3 7a00 	vstr	s15, [r3]
                gyro_dps[i][1] = (float)(gyro_raw[i][1]) / 16.4f;                                  /* set gyro y */
 80060c8:	8bfa      	ldrh	r2, [r7, #30]
 80060ca:	4613      	mov	r3, r2
 80060cc:	005b      	lsls	r3, r3, #1
 80060ce:	4413      	add	r3, r2
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	461a      	mov	r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	4413      	add	r3, r2
 80060d8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80060dc:	ee07 3a90 	vmov	s15, r3
 80060e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80060e4:	8bfa      	ldrh	r2, [r7, #30]
 80060e6:	4613      	mov	r3, r2
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	4413      	add	r3, r2
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	461a      	mov	r2, r3
 80060f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f2:	4413      	add	r3, r2
 80060f4:	ed5f 6a1b 	vldr	s13, [pc, #-108]	@ 800608c <mpu6500_read+0x89c>
 80060f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80060fc:	edc3 7a01 	vstr	s15, [r3, #4]
                gyro_dps[i][2] = (float)(gyro_raw[i][2]) / 16.4f;                                  /* set gyro z */
 8006100:	8bfa      	ldrh	r2, [r7, #30]
 8006102:	4613      	mov	r3, r2
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	4413      	add	r3, r2
 8006108:	005b      	lsls	r3, r3, #1
 800610a:	461a      	mov	r2, r3
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	4413      	add	r3, r2
 8006110:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006114:	ee07 3a90 	vmov	s15, r3
 8006118:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800611c:	8bfa      	ldrh	r2, [r7, #30]
 800611e:	4613      	mov	r3, r2
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	461a      	mov	r2, r3
 8006128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612a:	4413      	add	r3, r2
 800612c:	ed5f 6a29 	vldr	s13, [pc, #-164]	@ 800608c <mpu6500_read+0x89c>
 8006130:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006134:	edc3 7a02 	vstr	s15, [r3, #8]
        for (i = 0; i < (*len); i++)                                                               /* *len times */
 8006138:	8bfb      	ldrh	r3, [r7, #30]
 800613a:	3301      	adds	r3, #1
 800613c:	83fb      	strh	r3, [r7, #30]
 800613e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006140:	881b      	ldrh	r3, [r3, #0]
 8006142:	8bfa      	ldrh	r2, [r7, #30]
 8006144:	429a      	cmp	r2, r3
 8006146:	f4ff ac5b 	bcc.w	8005a00 <mpu6500_read+0x210>
            }
        }
        
        return 0;                                                                                  /* success return 0 */
 800614a:	2300      	movs	r3, #0
 800614c:	e1e5      	b.n	800651a <mpu6500_read+0xd2a>
    }
    else                                                                                           /* if normal mode */
    {
        *len = 1;                                                                                  /* set 1 */
 800614e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006150:	2201      	movs	r2, #1
 8006152:	801a      	strh	r2, [r3, #0]
        res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_XOUT_H, handle->buf, 14);                   /* read data */
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800615a:	230e      	movs	r3, #14
 800615c:	213b      	movs	r1, #59	@ 0x3b
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f7ff f928 	bl	80053b4 <a_mpu6500_read>
 8006164:	4603      	mov	r3, r0
 8006166:	777b      	strb	r3, [r7, #29]
        if (res != 0)                                                                              /* check result */
 8006168:	7f7b      	ldrb	r3, [r7, #29]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d005      	beq.n	800617a <mpu6500_read+0x98a>
        {
            handle->debug_print("mpu6500: read failed.\n");                                        /* read failed */
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006172:	48b4      	ldr	r0, [pc, #720]	@ (8006444 <mpu6500_read+0xc54>)
 8006174:	4798      	blx	r3
           
            return 1;                                                                              /* return error */
 8006176:	2301      	movs	r3, #1
 8006178:	e1cf      	b.n	800651a <mpu6500_read+0xd2a>
        }
        accel_raw[0][0] = (int16_t)((uint16_t)handle->buf[0] << 8) | handle->buf[1];               /* set raw accel x */
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006180:	b21b      	sxth	r3, r3
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	b21a      	sxth	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800618c:	b21b      	sxth	r3, r3
 800618e:	4313      	orrs	r3, r2
 8006190:	b21a      	sxth	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	801a      	strh	r2, [r3, #0]
        accel_raw[0][1] = (int16_t)((uint16_t)handle->buf[2] << 8) | handle->buf[3];               /* set raw accel y */
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800619c:	b21b      	sxth	r3, r3
 800619e:	021b      	lsls	r3, r3, #8
 80061a0:	b21a      	sxth	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061a8:	b21b      	sxth	r3, r3
 80061aa:	4313      	orrs	r3, r2
 80061ac:	b21a      	sxth	r2, r3
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	805a      	strh	r2, [r3, #2]
        accel_raw[0][2] = (int16_t)((uint16_t)handle->buf[4] << 8) | handle->buf[5];               /* set raw accel z */
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061b8:	b21b      	sxth	r3, r3
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	b21a      	sxth	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061c4:	b21b      	sxth	r3, r3
 80061c6:	4313      	orrs	r3, r2
 80061c8:	b21a      	sxth	r2, r3
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	809a      	strh	r2, [r3, #4]
        gyro_raw[0][0] = (int16_t)((uint16_t)handle->buf[8] << 8) | handle->buf[9];                /* set raw gyro x */
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 80061d4:	b21b      	sxth	r3, r3
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	b21a      	sxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 80061e0:	b21b      	sxth	r3, r3
 80061e2:	4313      	orrs	r3, r2
 80061e4:	b21a      	sxth	r2, r3
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	801a      	strh	r2, [r3, #0]
        gyro_raw[0][1] = (int16_t)((uint16_t)handle->buf[10] << 8) | handle->buf[11];              /* set raw gyro y */
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	f893 304a 	ldrb.w	r3, [r3, #74]	@ 0x4a
 80061f0:	b21b      	sxth	r3, r3
 80061f2:	021b      	lsls	r3, r3, #8
 80061f4:	b21a      	sxth	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80061fc:	b21b      	sxth	r3, r3
 80061fe:	4313      	orrs	r3, r2
 8006200:	b21a      	sxth	r2, r3
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	805a      	strh	r2, [r3, #2]
        gyro_raw[0][2] = (int16_t)((uint16_t)handle->buf[12] << 8) | handle->buf[13];              /* set raw gyro z */
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800620c:	b21b      	sxth	r3, r3
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	b21a      	sxth	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8006218:	b21b      	sxth	r3, r3
 800621a:	4313      	orrs	r3, r2
 800621c:	b21a      	sxth	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	809a      	strh	r2, [r3, #4]
        
        if (accel_conf == 0)                                                                       /* ±2g */
 8006222:	7e3b      	ldrb	r3, [r7, #24]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d12a      	bne.n	800627e <mpu6500_read+0xa8e>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 16384.0f;                                   /* set accel x */
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800622e:	ee07 3a90 	vmov	s15, r3
 8006232:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006236:	eddf 6a84 	vldr	s13, [pc, #528]	@ 8006448 <mpu6500_read+0xc58>
 800623a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 16384.0f;                                   /* set accel y */
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800624a:	ee07 3a90 	vmov	s15, r3
 800624e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006252:	eddf 6a7d 	vldr	s13, [pc, #500]	@ 8006448 <mpu6500_read+0xc58>
 8006256:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 16384.0f;                                   /* set accel z */
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006266:	ee07 3a90 	vmov	s15, r3
 800626a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800626e:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8006448 <mpu6500_read+0xc58>
 8006272:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	edc3 7a02 	vstr	s15, [r3, #8]
 800627c:	e085      	b.n	800638a <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 1)                                                                  /* ±4g */
 800627e:	7e3b      	ldrb	r3, [r7, #24]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d12a      	bne.n	80062da <mpu6500_read+0xaea>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 8192.0f;                                    /* set accel x */
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f9b3 3000 	ldrsh.w	r3, [r3]
 800628a:	ee07 3a90 	vmov	s15, r3
 800628e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006292:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800644c <mpu6500_read+0xc5c>
 8006296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 8192.0f;                                    /* set accel y */
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80062a6:	ee07 3a90 	vmov	s15, r3
 80062aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ae:	eddf 6a67 	vldr	s13, [pc, #412]	@ 800644c <mpu6500_read+0xc5c>
 80062b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 8192.0f;                                    /* set accel z */
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ca:	eddf 6a60 	vldr	s13, [pc, #384]	@ 800644c <mpu6500_read+0xc5c>
 80062ce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	edc3 7a02 	vstr	s15, [r3, #8]
 80062d8:	e057      	b.n	800638a <mpu6500_read+0xb9a>
        }
        else if (accel_conf == 2)                                                                  /* ±8g */
 80062da:	7e3b      	ldrb	r3, [r7, #24]
 80062dc:	2b02      	cmp	r3, #2
 80062de:	d12a      	bne.n	8006336 <mpu6500_read+0xb46>
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 4096.0f;                                    /* set accel x */
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80062e6:	ee07 3a90 	vmov	s15, r3
 80062ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80062ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006450 <mpu6500_read+0xc60>
 80062f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 4096.0f;                                    /* set accel y */
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006302:	ee07 3a90 	vmov	s15, r3
 8006306:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800630a:	eddf 6a51 	vldr	s13, [pc, #324]	@ 8006450 <mpu6500_read+0xc60>
 800630e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 4096.0f;                                    /* set accel z */
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800631e:	ee07 3a90 	vmov	s15, r3
 8006322:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006326:	eddf 6a4a 	vldr	s13, [pc, #296]	@ 8006450 <mpu6500_read+0xc60>
 800632a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	edc3 7a02 	vstr	s15, [r3, #8]
 8006334:	e029      	b.n	800638a <mpu6500_read+0xb9a>
        }
        else                                                                                       /* ±16g */
        {
            accel_g[0][0] = (float)(accel_raw[0][0]) / 2048.0f;                                    /* set accel x */
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	f9b3 3000 	ldrsh.w	r3, [r3]
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006344:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8006454 <mpu6500_read+0xc64>
 8006348:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	edc3 7a00 	vstr	s15, [r3]
            accel_g[0][1] = (float)(accel_raw[0][1]) / 2048.0f;                                    /* set accel y */
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006358:	ee07 3a90 	vmov	s15, r3
 800635c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006360:	eddf 6a3c 	vldr	s13, [pc, #240]	@ 8006454 <mpu6500_read+0xc64>
 8006364:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	edc3 7a01 	vstr	s15, [r3, #4]
            accel_g[0][2] = (float)(accel_raw[0][2]) / 2048.0f;                                    /* set accel z */
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006374:	ee07 3a90 	vmov	s15, r3
 8006378:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800637c:	eddf 6a35 	vldr	s13, [pc, #212]	@ 8006454 <mpu6500_read+0xc64>
 8006380:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        if (gyro_conf == 0)                                                                        /* ±250dps */
 800638a:	7dfb      	ldrb	r3, [r7, #23]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d12a      	bne.n	80063e6 <mpu6500_read+0xbf6>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 131.0f;                                     /* set gyro x */
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006396:	ee07 3a90 	vmov	s15, r3
 800639a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800639e:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8006458 <mpu6500_read+0xc68>
 80063a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a8:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 131.0f;                                     /* set gyro y */
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80063b2:	ee07 3a90 	vmov	s15, r3
 80063b6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063ba:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8006458 <mpu6500_read+0xc68>
 80063be:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063c4:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 131.0f;                                     /* set gyro z */
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80063ce:	ee07 3a90 	vmov	s15, r3
 80063d2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063d6:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8006458 <mpu6500_read+0xc68>
 80063da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80063de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063e0:	edc3 7a02 	vstr	s15, [r3, #8]
 80063e4:	e098      	b.n	8006518 <mpu6500_read+0xd28>
        }
        else if (gyro_conf == 1)                                                                   /* ±500dps */
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d13d      	bne.n	8006468 <mpu6500_read+0xc78>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 65.5f;                                      /* set gyro x */
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80063fa:	eddf 6a18 	vldr	s13, [pc, #96]	@ 800645c <mpu6500_read+0xc6c>
 80063fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006404:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 65.5f;                                      /* set gyro y */
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800640e:	ee07 3a90 	vmov	s15, r3
 8006412:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006416:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800645c <mpu6500_read+0xc6c>
 800641a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800641e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006420:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 65.5f;                                      /* set gyro z */
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800642a:	ee07 3a90 	vmov	s15, r3
 800642e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006432:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800645c <mpu6500_read+0xc6c>
 8006436:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800643a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643c:	edc3 7a02 	vstr	s15, [r3, #8]
 8006440:	e06a      	b.n	8006518 <mpu6500_read+0xd28>
 8006442:	bf00      	nop
 8006444:	0801f198 	.word	0x0801f198
 8006448:	46800000 	.word	0x46800000
 800644c:	46000000 	.word	0x46000000
 8006450:	45800000 	.word	0x45800000
 8006454:	45000000 	.word	0x45000000
 8006458:	43030000 	.word	0x43030000
 800645c:	42830000 	.word	0x42830000
 8006460:	42033333 	.word	0x42033333
 8006464:	41833333 	.word	0x41833333
        }
        else if (gyro_conf == 2)                                                                   /* ±1000dps */
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b02      	cmp	r3, #2
 800646c:	d12a      	bne.n	80064c4 <mpu6500_read+0xcd4>
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 32.8f;                                      /* set gyro x */
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006474:	ee07 3a90 	vmov	s15, r3
 8006478:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800647c:	ed5f 6a08 	vldr	s13, [pc, #-32]	@ 8006460 <mpu6500_read+0xc70>
 8006480:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006486:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 32.8f;                                      /* set gyro y */
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8006490:	ee07 3a90 	vmov	s15, r3
 8006494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006498:	ed5f 6a0f 	vldr	s13, [pc, #-60]	@ 8006460 <mpu6500_read+0xc70>
 800649c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064a2:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 32.8f;                                      /* set gyro z */
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80064ac:	ee07 3a90 	vmov	s15, r3
 80064b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064b4:	ed5f 6a16 	vldr	s13, [pc, #-88]	@ 8006460 <mpu6500_read+0xc70>
 80064b8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064be:	edc3 7a02 	vstr	s15, [r3, #8]
 80064c2:	e029      	b.n	8006518 <mpu6500_read+0xd28>
        }
        else                                                                                       /* ±2000dps */
        {
            gyro_dps[0][0] = (float)(gyro_raw[0][0]) / 16.4f;                                      /* set gyro x */
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80064ca:	ee07 3a90 	vmov	s15, r3
 80064ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064d2:	ed5f 6a1c 	vldr	s13, [pc, #-112]	@ 8006464 <mpu6500_read+0xc74>
 80064d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064dc:	edc3 7a00 	vstr	s15, [r3]
            gyro_dps[0][1] = (float)(gyro_raw[0][1]) / 16.4f;                                      /* set gyro y */
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80064e6:	ee07 3a90 	vmov	s15, r3
 80064ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80064ee:	ed5f 6a23 	vldr	s13, [pc, #-140]	@ 8006464 <mpu6500_read+0xc74>
 80064f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80064f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064f8:	edc3 7a01 	vstr	s15, [r3, #4]
            gyro_dps[0][2] = (float)(gyro_raw[0][2]) / 16.4f;                                      /* set gyro z */
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006502:	ee07 3a90 	vmov	s15, r3
 8006506:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800650a:	ed5f 6a2a 	vldr	s13, [pc, #-168]	@ 8006464 <mpu6500_read+0xc74>
 800650e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006514:	edc3 7a02 	vstr	s15, [r3, #8]
        }
        
        return 0;                                                                                  /* success return 0 */
 8006518:	2300      	movs	r3, #0
    }
}
 800651a:	4618      	mov	r0, r3
 800651c:	3720      	adds	r7, #32
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop

08006524 <mpu6500_set_fifo>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b084      	sub	sp, #16
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	460b      	mov	r3, r1
 800652e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                               /* check handle */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <mpu6500_set_fifo+0x16>
    {
        return 2;                                                                     /* return error */
 8006536:	2302      	movs	r3, #2
 8006538:	e03a      	b.n	80065b0 <mpu6500_set_fifo+0x8c>
    }
    if (handle->inited != 1)                                                          /* check handle initialization */
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006540:	2b01      	cmp	r3, #1
 8006542:	d001      	beq.n	8006548 <mpu6500_set_fifo+0x24>
    {
        return 3;                                                                     /* return error */
 8006544:	2303      	movs	r3, #3
 8006546:	e033      	b.n	80065b0 <mpu6500_set_fifo+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8006548:	f107 020e 	add.w	r2, r7, #14
 800654c:	2301      	movs	r3, #1
 800654e:	216a      	movs	r1, #106	@ 0x6a
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f7fe ff2f 	bl	80053b4 <a_mpu6500_read>
 8006556:	4603      	mov	r3, r0
 8006558:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d005      	beq.n	800656c <mpu6500_set_fifo+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                     /* read user ctrl failed */
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006564:	4814      	ldr	r0, [pc, #80]	@ (80065b8 <mpu6500_set_fifo+0x94>)
 8006566:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 8006568:	2301      	movs	r3, #1
 800656a:	e021      	b.n	80065b0 <mpu6500_set_fifo+0x8c>
    }
    prev &= ~(1 << 6);                                                                /* clear config */
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006572:	b2db      	uxtb	r3, r3
 8006574:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                              /* set config */
 8006576:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800657a:	019b      	lsls	r3, r3, #6
 800657c:	b25a      	sxtb	r2, r3
 800657e:	7bbb      	ldrb	r3, [r7, #14]
 8006580:	b25b      	sxtb	r3, r3
 8006582:	4313      	orrs	r3, r2
 8006584:	b25b      	sxtb	r3, r3
 8006586:	b2db      	uxtb	r3, r3
 8006588:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800658a:	f107 020e 	add.w	r2, r7, #14
 800658e:	2301      	movs	r3, #1
 8006590:	216a      	movs	r1, #106	@ 0x6a
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f7fe ff3f 	bl	8005416 <a_mpu6500_write>
 8006598:	4603      	mov	r3, r0
 800659a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                     /* check result */
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d005      	beq.n	80065ae <mpu6500_set_fifo+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                    /* write user ctrl failed */
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065a6:	4805      	ldr	r0, [pc, #20]	@ (80065bc <mpu6500_set_fifo+0x98>)
 80065a8:	4798      	blx	r3
       
        return 1;                                                                     /* return error */
 80065aa:	2301      	movs	r3, #1
 80065ac:	e000      	b.n	80065b0 <mpu6500_set_fifo+0x8c>
    }
    
    return 0;                                                                         /* success return 0 */
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	0801f238 	.word	0x0801f238
 80065bc:	0801f25c 	.word	0x0801f25c

080065c0 <mpu6500_set_iic_master>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_master(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b084      	sub	sp, #16
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <mpu6500_set_iic_master+0x16>
    {
        return 2;                                                                    /* return error */
 80065d2:	2302      	movs	r3, #2
 80065d4:	e03a      	b.n	800664c <mpu6500_set_iic_master+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d001      	beq.n	80065e4 <mpu6500_set_iic_master+0x24>
    {
        return 3;                                                                    /* return error */
 80065e0:	2303      	movs	r3, #3
 80065e2:	e033      	b.n	800664c <mpu6500_set_iic_master+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 80065e4:	f107 020e 	add.w	r2, r7, #14
 80065e8:	2301      	movs	r3, #1
 80065ea:	216a      	movs	r1, #106	@ 0x6a
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	f7fe fee1 	bl	80053b4 <a_mpu6500_read>
 80065f2:	4603      	mov	r3, r0
 80065f4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80065f6:	7bfb      	ldrb	r3, [r7, #15]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d005      	beq.n	8006608 <mpu6500_set_iic_master+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006600:	4814      	ldr	r0, [pc, #80]	@ (8006654 <mpu6500_set_iic_master+0x94>)
 8006602:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006604:	2301      	movs	r3, #1
 8006606:	e021      	b.n	800664c <mpu6500_set_iic_master+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	f023 0320 	bic.w	r3, r3, #32
 800660e:	b2db      	uxtb	r3, r3
 8006610:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 8006612:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006616:	015b      	lsls	r3, r3, #5
 8006618:	b25a      	sxtb	r2, r3
 800661a:	7bbb      	ldrb	r3, [r7, #14]
 800661c:	b25b      	sxtb	r3, r3
 800661e:	4313      	orrs	r3, r2
 8006620:	b25b      	sxtb	r3, r3
 8006622:	b2db      	uxtb	r3, r3
 8006624:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 8006626:	f107 020e 	add.w	r2, r7, #14
 800662a:	2301      	movs	r3, #1
 800662c:	216a      	movs	r1, #106	@ 0x6a
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fe fef1 	bl	8005416 <a_mpu6500_write>
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d005      	beq.n	800664a <mpu6500_set_iic_master+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006642:	4805      	ldr	r0, [pc, #20]	@ (8006658 <mpu6500_set_iic_master+0x98>)
 8006644:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <mpu6500_set_iic_master+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	0801f238 	.word	0x0801f238
 8006658:	0801f25c 	.word	0x0801f25c

0800665c <mpu6500_set_disable_iic_slave>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_disable_iic_slave(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d101      	bne.n	8006672 <mpu6500_set_disable_iic_slave+0x16>
    {
        return 2;                                                                    /* return error */
 800666e:	2302      	movs	r3, #2
 8006670:	e03a      	b.n	80066e8 <mpu6500_set_disable_iic_slave+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006678:	2b01      	cmp	r3, #1
 800667a:	d001      	beq.n	8006680 <mpu6500_set_disable_iic_slave+0x24>
    {
        return 3;                                                                    /* return error */
 800667c:	2303      	movs	r3, #3
 800667e:	e033      	b.n	80066e8 <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);        /* read config */
 8006680:	f107 020e 	add.w	r2, r7, #14
 8006684:	2301      	movs	r3, #1
 8006686:	216a      	movs	r1, #106	@ 0x6a
 8006688:	6878      	ldr	r0, [r7, #4]
 800668a:	f7fe fe93 	bl	80053b4 <a_mpu6500_read>
 800668e:	4603      	mov	r3, r0
 8006690:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <mpu6500_set_disable_iic_slave+0x48>
    {
        handle->debug_print("mpu6500: read user ctrl failed.\n");                    /* read user ctrl failed */
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800669c:	4814      	ldr	r0, [pc, #80]	@ (80066f0 <mpu6500_set_disable_iic_slave+0x94>)
 800669e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80066a0:	2301      	movs	r3, #1
 80066a2:	e021      	b.n	80066e8 <mpu6500_set_disable_iic_slave+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	f023 0310 	bic.w	r3, r3, #16
 80066aa:	b2db      	uxtb	r3, r3
 80066ac:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 80066ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80066b2:	011b      	lsls	r3, r3, #4
 80066b4:	b25a      	sxtb	r2, r3
 80066b6:	7bbb      	ldrb	r3, [r7, #14]
 80066b8:	b25b      	sxtb	r3, r3
 80066ba:	4313      	orrs	r3, r2
 80066bc:	b25b      	sxtb	r3, r3
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_USER_CTRL, (uint8_t *)&prev, 1);       /* write config */
 80066c2:	f107 020e 	add.w	r2, r7, #14
 80066c6:	2301      	movs	r3, #1
 80066c8:	216a      	movs	r1, #106	@ 0x6a
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f7fe fea3 	bl	8005416 <a_mpu6500_write>
 80066d0:	4603      	mov	r3, r0
 80066d2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <mpu6500_set_disable_iic_slave+0x8a>
    {
        handle->debug_print("mpu6500: write user ctrl failed.\n");                   /* write user ctrl failed */
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066de:	4805      	ldr	r0, [pc, #20]	@ (80066f4 <mpu6500_set_disable_iic_slave+0x98>)
 80066e0:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80066e2:	2301      	movs	r3, #1
 80066e4:	e000      	b.n	80066e8 <mpu6500_set_disable_iic_slave+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	0801f238 	.word	0x0801f238
 80066f4:	0801f25c 	.word	0x0801f25c

080066f8 <mpu6500_set_clock_source>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_clock_source(mpu6500_handle_t *handle, mpu6500_clock_source_t clock_source)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d101      	bne.n	800670e <mpu6500_set_clock_source+0x16>
    {
        return 2;                                                                    /* return error */
 800670a:	2302      	movs	r3, #2
 800670c:	e035      	b.n	800677a <mpu6500_set_clock_source+0x82>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006714:	2b01      	cmp	r3, #1
 8006716:	d001      	beq.n	800671c <mpu6500_set_clock_source+0x24>
    {
        return 3;                                                                    /* return error */
 8006718:	2303      	movs	r3, #3
 800671a:	e02e      	b.n	800677a <mpu6500_set_clock_source+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 800671c:	f107 020e 	add.w	r2, r7, #14
 8006720:	2301      	movs	r3, #1
 8006722:	216b      	movs	r1, #107	@ 0x6b
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f7fe fe45 	bl	80053b4 <a_mpu6500_read>
 800672a:	4603      	mov	r3, r0
 800672c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d005      	beq.n	8006740 <mpu6500_set_clock_source+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006738:	4812      	ldr	r0, [pc, #72]	@ (8006784 <mpu6500_set_clock_source+0x8c>)
 800673a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800673c:	2301      	movs	r3, #1
 800673e:	e01c      	b.n	800677a <mpu6500_set_clock_source+0x82>
    }
    prev &= ~(0x7 << 0);                                                             /* clear config */
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	f023 0307 	bic.w	r3, r3, #7
 8006746:	b2db      	uxtb	r3, r3
 8006748:	73bb      	strb	r3, [r7, #14]
    prev |= clock_source << 0;                                                       /* set config */
 800674a:	7bba      	ldrb	r2, [r7, #14]
 800674c:	78fb      	ldrb	r3, [r7, #3]
 800674e:	4313      	orrs	r3, r2
 8006750:	b2db      	uxtb	r3, r3
 8006752:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006754:	f107 020e 	add.w	r2, r7, #14
 8006758:	2301      	movs	r3, #1
 800675a:	216b      	movs	r1, #107	@ 0x6b
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f7fe fe5a 	bl	8005416 <a_mpu6500_write>
 8006762:	4603      	mov	r3, r0
 8006764:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006766:	7bfb      	ldrb	r3, [r7, #15]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d005      	beq.n	8006778 <mpu6500_set_clock_source+0x80>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006770:	4805      	ldr	r0, [pc, #20]	@ (8006788 <mpu6500_set_clock_source+0x90>)
 8006772:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006774:	2301      	movs	r3, #1
 8006776:	e000      	b.n	800677a <mpu6500_set_clock_source+0x82>
    }
    
    return 0;                                                                        /* success return 0 */
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	0801f524 	.word	0x0801f524
 8006788:	0801f550 	.word	0x0801f550

0800678c <mpu6500_set_ptat>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_ptat(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
 8006794:	460b      	mov	r3, r1
 8006796:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <mpu6500_set_ptat+0x16>
    {
        return 2;                                                                    /* return error */
 800679e:	2302      	movs	r3, #2
 80067a0:	e03c      	b.n	800681c <mpu6500_set_ptat+0x90>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d001      	beq.n	80067b0 <mpu6500_set_ptat+0x24>
    {
        return 3;                                                                    /* return error */
 80067ac:	2303      	movs	r3, #3
 80067ae:	e035      	b.n	800681c <mpu6500_set_ptat+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80067b0:	f107 020e 	add.w	r2, r7, #14
 80067b4:	2301      	movs	r3, #1
 80067b6:	216b      	movs	r1, #107	@ 0x6b
 80067b8:	6878      	ldr	r0, [r7, #4]
 80067ba:	f7fe fdfb 	bl	80053b4 <a_mpu6500_read>
 80067be:	4603      	mov	r3, r0
 80067c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80067c2:	7bfb      	ldrb	r3, [r7, #15]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d005      	beq.n	80067d4 <mpu6500_set_ptat+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067cc:	4815      	ldr	r0, [pc, #84]	@ (8006824 <mpu6500_set_ptat+0x98>)
 80067ce:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80067d0:	2301      	movs	r3, #1
 80067d2:	e023      	b.n	800681c <mpu6500_set_ptat+0x90>
    }
    prev &= ~(1 << 3);                                                               /* clear config */
 80067d4:	7bbb      	ldrb	r3, [r7, #14]
 80067d6:	f023 0308 	bic.w	r3, r3, #8
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 3;                                                          /* set config */
 80067de:	78fb      	ldrb	r3, [r7, #3]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <mpu6500_set_ptat+0x5c>
 80067e4:	2208      	movs	r2, #8
 80067e6:	e000      	b.n	80067ea <mpu6500_set_ptat+0x5e>
 80067e8:	2200      	movs	r2, #0
 80067ea:	7bbb      	ldrb	r3, [r7, #14]
 80067ec:	b25b      	sxtb	r3, r3
 80067ee:	4313      	orrs	r3, r2
 80067f0:	b25b      	sxtb	r3, r3
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80067f6:	f107 020e 	add.w	r2, r7, #14
 80067fa:	2301      	movs	r3, #1
 80067fc:	216b      	movs	r1, #107	@ 0x6b
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7fe fe09 	bl	8005416 <a_mpu6500_write>
 8006804:	4603      	mov	r3, r0
 8006806:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006808:	7bfb      	ldrb	r3, [r7, #15]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d005      	beq.n	800681a <mpu6500_set_ptat+0x8e>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006812:	4805      	ldr	r0, [pc, #20]	@ (8006828 <mpu6500_set_ptat+0x9c>)
 8006814:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006816:	2301      	movs	r3, #1
 8006818:	e000      	b.n	800681c <mpu6500_set_ptat+0x90>
    }
    
    return 0;                                                                        /* success return 0 */
 800681a:	2300      	movs	r3, #0
}
 800681c:	4618      	mov	r0, r3
 800681e:	3710      	adds	r7, #16
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}
 8006824:	0801f524 	.word	0x0801f524
 8006828:	0801f550 	.word	0x0801f550

0800682c <mpu6500_set_cycle_wake_up>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_cycle_wake_up(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	460b      	mov	r3, r1
 8006836:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d101      	bne.n	8006842 <mpu6500_set_cycle_wake_up+0x16>
    {
        return 2;                                                                    /* return error */
 800683e:	2302      	movs	r3, #2
 8006840:	e03a      	b.n	80068b8 <mpu6500_set_cycle_wake_up+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006848:	2b01      	cmp	r3, #1
 800684a:	d001      	beq.n	8006850 <mpu6500_set_cycle_wake_up+0x24>
    {
        return 3;                                                                    /* return error */
 800684c:	2303      	movs	r3, #3
 800684e:	e033      	b.n	80068b8 <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006850:	f107 020e 	add.w	r2, r7, #14
 8006854:	2301      	movs	r3, #1
 8006856:	216b      	movs	r1, #107	@ 0x6b
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7fe fdab 	bl	80053b4 <a_mpu6500_read>
 800685e:	4603      	mov	r3, r0
 8006860:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006862:	7bfb      	ldrb	r3, [r7, #15]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d005      	beq.n	8006874 <mpu6500_set_cycle_wake_up+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800686c:	4814      	ldr	r0, [pc, #80]	@ (80068c0 <mpu6500_set_cycle_wake_up+0x94>)
 800686e:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006870:	2301      	movs	r3, #1
 8006872:	e021      	b.n	80068b8 <mpu6500_set_cycle_wake_up+0x8c>
    }
    prev &= ~(1 << 5);                                                               /* clear config */
 8006874:	7bbb      	ldrb	r3, [r7, #14]
 8006876:	f023 0320 	bic.w	r3, r3, #32
 800687a:	b2db      	uxtb	r3, r3
 800687c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 5;                                                             /* set config */
 800687e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006882:	015b      	lsls	r3, r3, #5
 8006884:	b25a      	sxtb	r2, r3
 8006886:	7bbb      	ldrb	r3, [r7, #14]
 8006888:	b25b      	sxtb	r3, r3
 800688a:	4313      	orrs	r3, r2
 800688c:	b25b      	sxtb	r3, r3
 800688e:	b2db      	uxtb	r3, r3
 8006890:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 8006892:	f107 020e 	add.w	r2, r7, #14
 8006896:	2301      	movs	r3, #1
 8006898:	216b      	movs	r1, #107	@ 0x6b
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fe fdbb 	bl	8005416 <a_mpu6500_write>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80068a4:	7bfb      	ldrb	r3, [r7, #15]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <mpu6500_set_cycle_wake_up+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ae:	4805      	ldr	r0, [pc, #20]	@ (80068c4 <mpu6500_set_cycle_wake_up+0x98>)
 80068b0:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80068b2:	2301      	movs	r3, #1
 80068b4:	e000      	b.n	80068b8 <mpu6500_set_cycle_wake_up+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 80068b6:	2300      	movs	r3, #0
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	0801f524 	.word	0x0801f524
 80068c4:	0801f550 	.word	0x0801f550

080068c8 <mpu6500_set_sleep>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sleep(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b084      	sub	sp, #16
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	460b      	mov	r3, r1
 80068d2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <mpu6500_set_sleep+0x16>
    {
        return 2;                                                                    /* return error */
 80068da:	2302      	movs	r3, #2
 80068dc:	e03a      	b.n	8006954 <mpu6500_set_sleep+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d001      	beq.n	80068ec <mpu6500_set_sleep+0x24>
    {
        return 3;                                                                    /* return error */
 80068e8:	2303      	movs	r3, #3
 80068ea:	e033      	b.n	8006954 <mpu6500_set_sleep+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 80068ec:	f107 020e 	add.w	r2, r7, #14
 80068f0:	2301      	movs	r3, #1
 80068f2:	216b      	movs	r1, #107	@ 0x6b
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f7fe fd5d 	bl	80053b4 <a_mpu6500_read>
 80068fa:	4603      	mov	r3, r0
 80068fc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d005      	beq.n	8006910 <mpu6500_set_sleep+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	4814      	ldr	r0, [pc, #80]	@ (800695c <mpu6500_set_sleep+0x94>)
 800690a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800690c:	2301      	movs	r3, #1
 800690e:	e021      	b.n	8006954 <mpu6500_set_sleep+0x8c>
    }
    prev &= ~(1 << 6);                                                               /* clear config */
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006916:	b2db      	uxtb	r3, r3
 8006918:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                             /* set config */
 800691a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800691e:	019b      	lsls	r3, r3, #6
 8006920:	b25a      	sxtb	r2, r3
 8006922:	7bbb      	ldrb	r3, [r7, #14]
 8006924:	b25b      	sxtb	r3, r3
 8006926:	4313      	orrs	r3, r2
 8006928:	b25b      	sxtb	r3, r3
 800692a:	b2db      	uxtb	r3, r3
 800692c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 800692e:	f107 020e 	add.w	r2, r7, #14
 8006932:	2301      	movs	r3, #1
 8006934:	216b      	movs	r1, #107	@ 0x6b
 8006936:	6878      	ldr	r0, [r7, #4]
 8006938:	f7fe fd6d 	bl	8005416 <a_mpu6500_write>
 800693c:	4603      	mov	r3, r0
 800693e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006940:	7bfb      	ldrb	r3, [r7, #15]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d005      	beq.n	8006952 <mpu6500_set_sleep+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694a:	4805      	ldr	r0, [pc, #20]	@ (8006960 <mpu6500_set_sleep+0x98>)
 800694c:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 800694e:	2301      	movs	r3, #1
 8006950:	e000      	b.n	8006954 <mpu6500_set_sleep+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}
 800695c:	0801f524 	.word	0x0801f524
 8006960:	0801f550 	.word	0x0801f550

08006964 <mpu6500_set_gyro_standby>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_standby(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <mpu6500_set_gyro_standby+0x16>
    {
        return 2;                                                                    /* return error */
 8006976:	2302      	movs	r3, #2
 8006978:	e03a      	b.n	80069f0 <mpu6500_set_gyro_standby+0x8c>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006980:	2b01      	cmp	r3, #1
 8006982:	d001      	beq.n	8006988 <mpu6500_set_gyro_standby+0x24>
    {
        return 3;                                                                    /* return error */
 8006984:	2303      	movs	r3, #3
 8006986:	e033      	b.n	80069f0 <mpu6500_set_gyro_standby+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);       /* read config */
 8006988:	f107 020e 	add.w	r2, r7, #14
 800698c:	2301      	movs	r3, #1
 800698e:	216b      	movs	r1, #107	@ 0x6b
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7fe fd0f 	bl	80053b4 <a_mpu6500_read>
 8006996:	4603      	mov	r3, r0
 8006998:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <mpu6500_set_gyro_standby+0x48>
    {
        handle->debug_print("mpu6500: read power management 1 failed.\n");           /* read power management 1 failed */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a4:	4814      	ldr	r0, [pc, #80]	@ (80069f8 <mpu6500_set_gyro_standby+0x94>)
 80069a6:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80069a8:	2301      	movs	r3, #1
 80069aa:	e021      	b.n	80069f0 <mpu6500_set_gyro_standby+0x8c>
    }
    prev &= ~(1 << 4);                                                               /* clear config */
 80069ac:	7bbb      	ldrb	r3, [r7, #14]
 80069ae:	f023 0310 	bic.w	r3, r3, #16
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                             /* set config */
 80069b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069ba:	011b      	lsls	r3, r3, #4
 80069bc:	b25a      	sxtb	r2, r3
 80069be:	7bbb      	ldrb	r3, [r7, #14]
 80069c0:	b25b      	sxtb	r3, r3
 80069c2:	4313      	orrs	r3, r2
 80069c4:	b25b      	sxtb	r3, r3
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_1, (uint8_t *)&prev, 1);      /* write config */
 80069ca:	f107 020e 	add.w	r2, r7, #14
 80069ce:	2301      	movs	r3, #1
 80069d0:	216b      	movs	r1, #107	@ 0x6b
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f7fe fd1f 	bl	8005416 <a_mpu6500_write>
 80069d8:	4603      	mov	r3, r0
 80069da:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <mpu6500_set_gyro_standby+0x8a>
    {
        handle->debug_print("mpu6500: write power management 1 failed.\n");          /* write power management 1 failed */
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069e6:	4805      	ldr	r0, [pc, #20]	@ (80069fc <mpu6500_set_gyro_standby+0x98>)
 80069e8:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 80069ea:	2301      	movs	r3, #1
 80069ec:	e000      	b.n	80069f0 <mpu6500_set_gyro_standby+0x8c>
    }
    
    return 0;                                                                        /* success return 0 */
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	0801f524 	.word	0x0801f524
 80069fc:	0801f550 	.word	0x0801f550

08006a00 <mpu6500_set_standby_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_standby_mode(mpu6500_handle_t *handle, mpu6500_source_t source, mpu6500_bool_t enable)
{
 8006a00:	b580      	push	{r7, lr}
 8006a02:	b084      	sub	sp, #16
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	460b      	mov	r3, r1
 8006a0a:	70fb      	strb	r3, [r7, #3]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                              /* check handle */
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d101      	bne.n	8006a1a <mpu6500_set_standby_mode+0x1a>
    {
        return 2;                                                                    /* return error */
 8006a16:	2302      	movs	r3, #2
 8006a18:	e043      	b.n	8006aa2 <mpu6500_set_standby_mode+0xa2>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006a20:	2b01      	cmp	r3, #1
 8006a22:	d001      	beq.n	8006a28 <mpu6500_set_standby_mode+0x28>
    {
        return 3;                                                                    /* return error */
 8006a24:	2303      	movs	r3, #3
 8006a26:	e03c      	b.n	8006aa2 <mpu6500_set_standby_mode+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);       /* read config */
 8006a28:	f107 020e 	add.w	r2, r7, #14
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	216c      	movs	r1, #108	@ 0x6c
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f7fe fcbf 	bl	80053b4 <a_mpu6500_read>
 8006a36:	4603      	mov	r3, r0
 8006a38:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006a3a:	7bfb      	ldrb	r3, [r7, #15]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <mpu6500_set_standby_mode+0x4c>
    {
        handle->debug_print("mpu6500: read power management 2 failed.\n");           /* read power management 2 failed */
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a44:	4819      	ldr	r0, [pc, #100]	@ (8006aac <mpu6500_set_standby_mode+0xac>)
 8006a46:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e02a      	b.n	8006aa2 <mpu6500_set_standby_mode+0xa2>
    }
    prev &= ~(1 << source);                                                          /* clear config */
 8006a4c:	78fb      	ldrb	r3, [r7, #3]
 8006a4e:	2201      	movs	r2, #1
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	b25b      	sxtb	r3, r3
 8006a56:	43db      	mvns	r3, r3
 8006a58:	b25a      	sxtb	r2, r3
 8006a5a:	7bbb      	ldrb	r3, [r7, #14]
 8006a5c:	b25b      	sxtb	r3, r3
 8006a5e:	4013      	ands	r3, r2
 8006a60:	b25b      	sxtb	r3, r3
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	73bb      	strb	r3, [r7, #14]
    prev |= enable << source;                                                        /* set config */
 8006a66:	78ba      	ldrb	r2, [r7, #2]
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006a6e:	b25a      	sxtb	r2, r3
 8006a70:	7bbb      	ldrb	r3, [r7, #14]
 8006a72:	b25b      	sxtb	r3, r3
 8006a74:	4313      	orrs	r3, r2
 8006a76:	b25b      	sxtb	r3, r3
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_PWR_MGMT_2, (uint8_t *)&prev, 1);      /* write config */
 8006a7c:	f107 020e 	add.w	r2, r7, #14
 8006a80:	2301      	movs	r3, #1
 8006a82:	216c      	movs	r1, #108	@ 0x6c
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f7fe fcc6 	bl	8005416 <a_mpu6500_write>
 8006a8a:	4603      	mov	r3, r0
 8006a8c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d005      	beq.n	8006aa0 <mpu6500_set_standby_mode+0xa0>
    {
        handle->debug_print("mpu6500: write power management 2 failed.\n");          /* write power management 2 failed */
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a98:	4805      	ldr	r0, [pc, #20]	@ (8006ab0 <mpu6500_set_standby_mode+0xb0>)
 8006a9a:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e000      	b.n	8006aa2 <mpu6500_set_standby_mode+0xa2>
    }
    
    return 0;                                                                        /* success return 0 */
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	0801f57c 	.word	0x0801f57c
 8006ab0:	0801f5a8 	.word	0x0801f5a8

08006ab4 <mpu6500_set_sample_rate_divider>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_sample_rate_divider(mpu6500_handle_t *handle, uint8_t d)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                              /* check handle */
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <mpu6500_set_sample_rate_divider+0x16>
    {
        return 2;                                                                    /* return error */
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	e018      	b.n	8006afc <mpu6500_set_sample_rate_divider+0x48>
    }
    if (handle->inited != 1)                                                         /* check handle initialization */
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d001      	beq.n	8006ad8 <mpu6500_set_sample_rate_divider+0x24>
    {
        return 3;                                                                    /* return error */
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e011      	b.n	8006afc <mpu6500_set_sample_rate_divider+0x48>
    }
    
    res = a_mpu6500_write(handle, MPU6500_REG_SMPRT_DIV, (uint8_t *)&d, 1);          /* write config */
 8006ad8:	1cfa      	adds	r2, r7, #3
 8006ada:	2301      	movs	r3, #1
 8006adc:	2119      	movs	r1, #25
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7fe fc99 	bl	8005416 <a_mpu6500_write>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                    /* check result */
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <mpu6500_set_sample_rate_divider+0x46>
    {
        handle->debug_print("mpu6500: write smprt div failed.\n");                   /* write smprt div failed */
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006af2:	4804      	ldr	r0, [pc, #16]	@ (8006b04 <mpu6500_set_sample_rate_divider+0x50>)
 8006af4:	4798      	blx	r3
       
        return 1;                                                                    /* return error */
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <mpu6500_set_sample_rate_divider+0x48>
    }
    
    return 0;                                                                        /* success return 0 */
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	0801f668 	.word	0x0801f668

08006b08 <mpu6500_set_extern_sync>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_extern_sync(mpu6500_handle_t *handle, mpu6500_extern_sync_t sync)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d101      	bne.n	8006b1e <mpu6500_set_extern_sync+0x16>
    {
        return 2;                                                                  /* return error */
 8006b1a:	2302      	movs	r3, #2
 8006b1c:	e03a      	b.n	8006b94 <mpu6500_set_extern_sync+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d001      	beq.n	8006b2c <mpu6500_set_extern_sync+0x24>
    {
        return 3;                                                                  /* return error */
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e033      	b.n	8006b94 <mpu6500_set_extern_sync+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8006b2c:	f107 020e 	add.w	r2, r7, #14
 8006b30:	2301      	movs	r3, #1
 8006b32:	211a      	movs	r1, #26
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f7fe fc3d 	bl	80053b4 <a_mpu6500_read>
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006b3e:	7bfb      	ldrb	r3, [r7, #15]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <mpu6500_set_extern_sync+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b48:	4814      	ldr	r0, [pc, #80]	@ (8006b9c <mpu6500_set_extern_sync+0x94>)
 8006b4a:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e021      	b.n	8006b94 <mpu6500_set_extern_sync+0x8c>
    }
    prev &= ~(0x7 << 3);                                                           /* clear config */
 8006b50:	7bbb      	ldrb	r3, [r7, #14]
 8006b52:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	73bb      	strb	r3, [r7, #14]
    prev |= sync << 3;                                                             /* set config */
 8006b5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006b5e:	00db      	lsls	r3, r3, #3
 8006b60:	b25a      	sxtb	r2, r3
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	b25b      	sxtb	r3, r3
 8006b66:	4313      	orrs	r3, r2
 8006b68:	b25b      	sxtb	r3, r3
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006b6e:	f107 020e 	add.w	r2, r7, #14
 8006b72:	2301      	movs	r3, #1
 8006b74:	211a      	movs	r1, #26
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7fe fc4d 	bl	8005416 <a_mpu6500_write>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <mpu6500_set_extern_sync+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b8a:	4805      	ldr	r0, [pc, #20]	@ (8006ba0 <mpu6500_set_extern_sync+0x98>)
 8006b8c:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006b8e:	2301      	movs	r3, #1
 8006b90:	e000      	b.n	8006b94 <mpu6500_set_extern_sync+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	0801f6b0 	.word	0x0801f6b0
 8006ba0:	0801f6d0 	.word	0x0801f6d0

08006ba4 <mpu6500_set_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_pass_filter(mpu6500_handle_t *handle, mpu6500_low_pass_filter_t filter)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b084      	sub	sp, #16
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	460b      	mov	r3, r1
 8006bae:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d101      	bne.n	8006bba <mpu6500_set_low_pass_filter+0x16>
    {
        return 2;                                                                  /* return error */
 8006bb6:	2302      	movs	r3, #2
 8006bb8:	e035      	b.n	8006c26 <mpu6500_set_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d001      	beq.n	8006bc8 <mpu6500_set_low_pass_filter+0x24>
    {
        return 3;                                                                  /* return error */
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e02e      	b.n	8006c26 <mpu6500_set_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8006bc8:	f107 020e 	add.w	r2, r7, #14
 8006bcc:	2301      	movs	r3, #1
 8006bce:	211a      	movs	r1, #26
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f7fe fbef 	bl	80053b4 <a_mpu6500_read>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <mpu6500_set_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006be4:	4812      	ldr	r0, [pc, #72]	@ (8006c30 <mpu6500_set_low_pass_filter+0x8c>)
 8006be6:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006be8:	2301      	movs	r3, #1
 8006bea:	e01c      	b.n	8006c26 <mpu6500_set_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                           /* clear config */
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	f023 0307 	bic.w	r3, r3, #7
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                           /* set config */
 8006bf6:	7bba      	ldrb	r2, [r7, #14]
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006c00:	f107 020e 	add.w	r2, r7, #14
 8006c04:	2301      	movs	r3, #1
 8006c06:	211a      	movs	r1, #26
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7fe fc04 	bl	8005416 <a_mpu6500_write>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006c12:	7bfb      	ldrb	r3, [r7, #15]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <mpu6500_set_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c1c:	4805      	ldr	r0, [pc, #20]	@ (8006c34 <mpu6500_set_low_pass_filter+0x90>)
 8006c1e:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006c20:	2301      	movs	r3, #1
 8006c22:	e000      	b.n	8006c26 <mpu6500_set_low_pass_filter+0x82>
    }
    
    return 0;                                                                      /* success return 0 */
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	0801f6b0 	.word	0x0801f6b0
 8006c34:	0801f6d0 	.word	0x0801f6d0

08006c38 <mpu6500_set_fifo_mode>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_mode(mpu6500_handle_t *handle, mpu6500_fifo_mode mode)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                            /* check handle */
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <mpu6500_set_fifo_mode+0x16>
    {
        return 2;                                                                  /* return error */
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	e03a      	b.n	8006cc4 <mpu6500_set_fifo_mode+0x8c>
    }
    if (handle->inited != 1)                                                       /* check handle initialization */
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d001      	beq.n	8006c5c <mpu6500_set_fifo_mode+0x24>
    {
        return 3;                                                                  /* return error */
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e033      	b.n	8006cc4 <mpu6500_set_fifo_mode+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);         /* read config */
 8006c5c:	f107 020e 	add.w	r2, r7, #14
 8006c60:	2301      	movs	r3, #1
 8006c62:	211a      	movs	r1, #26
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7fe fba5 	bl	80053b4 <a_mpu6500_read>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d005      	beq.n	8006c80 <mpu6500_set_fifo_mode+0x48>
    {
        handle->debug_print("mpu6500: read config failed.\n");                     /* read config failed */
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c78:	4814      	ldr	r0, [pc, #80]	@ (8006ccc <mpu6500_set_fifo_mode+0x94>)
 8006c7a:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e021      	b.n	8006cc4 <mpu6500_set_fifo_mode+0x8c>
    }
    prev &= ~(1 << 6);                                                             /* clear config */
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	73bb      	strb	r3, [r7, #14]
    prev |= mode << 6;                                                             /* set config */
 8006c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c8e:	019b      	lsls	r3, r3, #6
 8006c90:	b25a      	sxtb	r2, r3
 8006c92:	7bbb      	ldrb	r3, [r7, #14]
 8006c94:	b25b      	sxtb	r3, r3
 8006c96:	4313      	orrs	r3, r2
 8006c98:	b25b      	sxtb	r3, r3
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_CONFIG, (uint8_t *)&prev, 1);        /* write config */
 8006c9e:	f107 020e 	add.w	r2, r7, #14
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	211a      	movs	r1, #26
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fe fbb5 	bl	8005416 <a_mpu6500_write>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                  /* check result */
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d005      	beq.n	8006cc2 <mpu6500_set_fifo_mode+0x8a>
    {
        handle->debug_print("mpu6500: write config failed.\n");                    /* write config failed */
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cba:	4805      	ldr	r0, [pc, #20]	@ (8006cd0 <mpu6500_set_fifo_mode+0x98>)
 8006cbc:	4798      	blx	r3
       
        return 1;                                                                  /* return error */
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	e000      	b.n	8006cc4 <mpu6500_set_fifo_mode+0x8c>
    }
    
    return 0;                                                                      /* success return 0 */
 8006cc2:	2300      	movs	r3, #0
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	0801f6b0 	.word	0x0801f6b0
 8006cd0:	0801f6d0 	.word	0x0801f6d0

08006cd4 <mpu6500_set_gyroscope_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b084      	sub	sp, #16
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
 8006cdc:	460b      	mov	r3, r1
 8006cde:	70fb      	strb	r3, [r7, #3]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d101      	bne.n	8006cee <mpu6500_set_gyroscope_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8006cea:	2302      	movs	r3, #2
 8006cec:	e043      	b.n	8006d76 <mpu6500_set_gyroscope_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006cf4:	2b01      	cmp	r3, #1
 8006cf6:	d001      	beq.n	8006cfc <mpu6500_set_gyroscope_test+0x28>
    {
        return 3;                                                                       /* return error */
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	e03c      	b.n	8006d76 <mpu6500_set_gyroscope_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006cfc:	f107 020e 	add.w	r2, r7, #14
 8006d00:	2301      	movs	r3, #1
 8006d02:	211b      	movs	r1, #27
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fe fb55 	bl	80053b4 <a_mpu6500_read>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d005      	beq.n	8006d20 <mpu6500_set_gyroscope_test+0x4c>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d18:	4819      	ldr	r0, [pc, #100]	@ (8006d80 <mpu6500_set_gyroscope_test+0xac>)
 8006d1a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	e02a      	b.n	8006d76 <mpu6500_set_gyroscope_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8006d20:	78fb      	ldrb	r3, [r7, #3]
 8006d22:	2201      	movs	r2, #1
 8006d24:	fa02 f303 	lsl.w	r3, r2, r3
 8006d28:	b25b      	sxtb	r3, r3
 8006d2a:	43db      	mvns	r3, r3
 8006d2c:	b25a      	sxtb	r2, r3
 8006d2e:	7bbb      	ldrb	r3, [r7, #14]
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	4013      	ands	r3, r2
 8006d34:	b25b      	sxtb	r3, r3
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8006d3a:	78ba      	ldrb	r2, [r7, #2]
 8006d3c:	78fb      	ldrb	r3, [r7, #3]
 8006d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006d42:	b25a      	sxtb	r2, r3
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
 8006d46:	b25b      	sxtb	r3, r3
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	b25b      	sxtb	r3, r3
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006d50:	f107 020e 	add.w	r2, r7, #14
 8006d54:	2301      	movs	r3, #1
 8006d56:	211b      	movs	r1, #27
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7fe fb5c 	bl	8005416 <a_mpu6500_write>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006d62:	7bfb      	ldrb	r3, [r7, #15]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d005      	beq.n	8006d74 <mpu6500_set_gyroscope_test+0xa0>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d6c:	4805      	ldr	r0, [pc, #20]	@ (8006d84 <mpu6500_set_gyroscope_test+0xb0>)
 8006d6e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006d70:	2301      	movs	r3, #1
 8006d72:	e000      	b.n	8006d76 <mpu6500_set_gyroscope_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3710      	adds	r7, #16
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	0801f6f0 	.word	0x0801f6f0
 8006d84:	0801f718 	.word	0x0801f718

08006d88 <mpu6500_set_gyroscope_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_range(mpu6500_handle_t *handle, mpu6500_gyroscope_range_t range)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d101      	bne.n	8006d9e <mpu6500_set_gyroscope_range+0x16>
    {
        return 2;                                                                       /* return error */
 8006d9a:	2302      	movs	r3, #2
 8006d9c:	e03a      	b.n	8006e14 <mpu6500_set_gyroscope_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d001      	beq.n	8006dac <mpu6500_set_gyroscope_range+0x24>
    {
        return 3;                                                                       /* return error */
 8006da8:	2303      	movs	r3, #3
 8006daa:	e033      	b.n	8006e14 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006dac:	f107 020e 	add.w	r2, r7, #14
 8006db0:	2301      	movs	r3, #1
 8006db2:	211b      	movs	r1, #27
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f7fe fafd 	bl	80053b4 <a_mpu6500_read>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d005      	beq.n	8006dd0 <mpu6500_set_gyroscope_range+0x48>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dc8:	4814      	ldr	r0, [pc, #80]	@ (8006e1c <mpu6500_set_gyroscope_range+0x94>)
 8006dca:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e021      	b.n	8006e14 <mpu6500_set_gyroscope_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	f023 0318 	bic.w	r3, r3, #24
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8006dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006dde:	00db      	lsls	r3, r3, #3
 8006de0:	b25a      	sxtb	r2, r3
 8006de2:	7bbb      	ldrb	r3, [r7, #14]
 8006de4:	b25b      	sxtb	r3, r3
 8006de6:	4313      	orrs	r3, r2
 8006de8:	b25b      	sxtb	r3, r3
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006dee:	f107 020e 	add.w	r2, r7, #14
 8006df2:	2301      	movs	r3, #1
 8006df4:	211b      	movs	r1, #27
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fe fb0d 	bl	8005416 <a_mpu6500_write>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d005      	beq.n	8006e12 <mpu6500_set_gyroscope_range+0x8a>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e0a:	4805      	ldr	r0, [pc, #20]	@ (8006e20 <mpu6500_set_gyroscope_range+0x98>)
 8006e0c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006e0e:	2301      	movs	r3, #1
 8006e10:	e000      	b.n	8006e14 <mpu6500_set_gyroscope_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3710      	adds	r7, #16
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}
 8006e1c:	0801f6f0 	.word	0x0801f6f0
 8006e20:	0801f718 	.word	0x0801f718

08006e24 <mpu6500_set_gyroscope_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 3
 * @note      none
 */
uint8_t mpu6500_set_gyroscope_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	460b      	mov	r3, r1
 8006e2e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d101      	bne.n	8006e3a <mpu6500_set_gyroscope_choice+0x16>
    {
        return 2;                                                                       /* return error */
 8006e36:	2302      	movs	r3, #2
 8006e38:	e03e      	b.n	8006eb8 <mpu6500_set_gyroscope_choice+0x94>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d001      	beq.n	8006e48 <mpu6500_set_gyroscope_choice+0x24>
    {
        return 3;                                                                       /* return error */
 8006e44:	2303      	movs	r3, #3
 8006e46:	e037      	b.n	8006eb8 <mpu6500_set_gyroscope_choice+0x94>
    }
    if (choice > 3)                                                                     /* check the choice */
 8006e48:	78fb      	ldrb	r3, [r7, #3]
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	d905      	bls.n	8006e5a <mpu6500_set_gyroscope_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 3.\n");                                  /* choice > 3 */
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e52:	481b      	ldr	r0, [pc, #108]	@ (8006ec0 <mpu6500_set_gyroscope_choice+0x9c>)
 8006e54:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 8006e56:	2304      	movs	r3, #4
 8006e58:	e02e      	b.n	8006eb8 <mpu6500_set_gyroscope_choice+0x94>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);         /* read gyroscope config */
 8006e5a:	f107 020e 	add.w	r2, r7, #14
 8006e5e:	2301      	movs	r3, #1
 8006e60:	211b      	movs	r1, #27
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fe faa6 	bl	80053b4 <a_mpu6500_read>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d005      	beq.n	8006e7e <mpu6500_set_gyroscope_choice+0x5a>
    {
        handle->debug_print("mpu6500: read gyroscope config failed.\n");                /* read gyroscope config failed */
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e76:	4813      	ldr	r0, [pc, #76]	@ (8006ec4 <mpu6500_set_gyroscope_choice+0xa0>)
 8006e78:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e01c      	b.n	8006eb8 <mpu6500_set_gyroscope_choice+0x94>
    }
    prev &= ~(3 << 0);                                                                  /* clear config */
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	f023 0303 	bic.w	r3, r3, #3
 8006e84:	b2db      	uxtb	r3, r3
 8006e86:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 0;                                                                /* set config */
 8006e88:	7bba      	ldrb	r2, [r7, #14]
 8006e8a:	78fb      	ldrb	r3, [r7, #3]
 8006e8c:	4313      	orrs	r3, r2
 8006e8e:	b2db      	uxtb	r3, r3
 8006e90:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_GYRO_CONFIG, (uint8_t *)&prev, 1);        /* write gyroscope config */
 8006e92:	f107 020e 	add.w	r2, r7, #14
 8006e96:	2301      	movs	r3, #1
 8006e98:	211b      	movs	r1, #27
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7fe fabb 	bl	8005416 <a_mpu6500_write>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006ea4:	7bfb      	ldrb	r3, [r7, #15]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d005      	beq.n	8006eb6 <mpu6500_set_gyroscope_choice+0x92>
    {
        handle->debug_print("mpu6500: write gyroscope config failed.\n");               /* write gyroscope config failed */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eae:	4806      	ldr	r0, [pc, #24]	@ (8006ec8 <mpu6500_set_gyroscope_choice+0xa4>)
 8006eb0:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <mpu6500_set_gyroscope_choice+0x94>
    }
    
    return 0;                                                                           /* success return 0 */
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	0801f744 	.word	0x0801f744
 8006ec4:	0801f6f0 	.word	0x0801f6f0
 8006ec8:	0801f718 	.word	0x0801f718

08006ecc <mpu6500_set_accelerometer_test>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_test(mpu6500_handle_t *handle, mpu6500_axis_t axis, mpu6500_bool_t enable)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	70fb      	strb	r3, [r7, #3]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d101      	bne.n	8006ee6 <mpu6500_set_accelerometer_test+0x1a>
    {
        return 2;                                                                       /* return error */
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e043      	b.n	8006f6e <mpu6500_set_accelerometer_test+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d001      	beq.n	8006ef4 <mpu6500_set_accelerometer_test+0x28>
    {
        return 3;                                                                       /* return error */
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e03c      	b.n	8006f6e <mpu6500_set_accelerometer_test+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8006ef4:	f107 020e 	add.w	r2, r7, #14
 8006ef8:	2301      	movs	r3, #1
 8006efa:	211c      	movs	r1, #28
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7fe fa59 	bl	80053b4 <a_mpu6500_read>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <mpu6500_set_accelerometer_test+0x4c>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f10:	4819      	ldr	r0, [pc, #100]	@ (8006f78 <mpu6500_set_accelerometer_test+0xac>)
 8006f12:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006f14:	2301      	movs	r3, #1
 8006f16:	e02a      	b.n	8006f6e <mpu6500_set_accelerometer_test+0xa2>
    }
    prev &= ~(1 << axis);                                                               /* clear config */
 8006f18:	78fb      	ldrb	r3, [r7, #3]
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f20:	b25b      	sxtb	r3, r3
 8006f22:	43db      	mvns	r3, r3
 8006f24:	b25a      	sxtb	r2, r3
 8006f26:	7bbb      	ldrb	r3, [r7, #14]
 8006f28:	b25b      	sxtb	r3, r3
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	b25b      	sxtb	r3, r3
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	73bb      	strb	r3, [r7, #14]
    prev |= enable << axis;                                                             /* set config */
 8006f32:	78ba      	ldrb	r2, [r7, #2]
 8006f34:	78fb      	ldrb	r3, [r7, #3]
 8006f36:	fa02 f303 	lsl.w	r3, r2, r3
 8006f3a:	b25a      	sxtb	r2, r3
 8006f3c:	7bbb      	ldrb	r3, [r7, #14]
 8006f3e:	b25b      	sxtb	r3, r3
 8006f40:	4313      	orrs	r3, r2
 8006f42:	b25b      	sxtb	r3, r3
 8006f44:	b2db      	uxtb	r3, r3
 8006f46:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8006f48:	f107 020e 	add.w	r2, r7, #14
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	211c      	movs	r1, #28
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f7fe fa60 	bl	8005416 <a_mpu6500_write>
 8006f56:	4603      	mov	r3, r0
 8006f58:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006f5a:	7bfb      	ldrb	r3, [r7, #15]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d005      	beq.n	8006f6c <mpu6500_set_accelerometer_test+0xa0>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f64:	4805      	ldr	r0, [pc, #20]	@ (8006f7c <mpu6500_set_accelerometer_test+0xb0>)
 8006f66:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006f68:	2301      	movs	r3, #1
 8006f6a:	e000      	b.n	8006f6e <mpu6500_set_accelerometer_test+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	0801f0a0 	.word	0x0801f0a0
 8006f7c:	0801f75c 	.word	0x0801f75c

08006f80 <mpu6500_set_accelerometer_range>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_range(mpu6500_handle_t *handle, mpu6500_accelerometer_range_t range)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b084      	sub	sp, #16
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d101      	bne.n	8006f96 <mpu6500_set_accelerometer_range+0x16>
    {
        return 2;                                                                       /* return error */
 8006f92:	2302      	movs	r3, #2
 8006f94:	e03a      	b.n	800700c <mpu6500_set_accelerometer_range+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	d001      	beq.n	8006fa4 <mpu6500_set_accelerometer_range+0x24>
    {
        return 3;                                                                       /* return error */
 8006fa0:	2303      	movs	r3, #3
 8006fa2:	e033      	b.n	800700c <mpu6500_set_accelerometer_range+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);        /* read accelerometer config */
 8006fa4:	f107 020e 	add.w	r2, r7, #14
 8006fa8:	2301      	movs	r3, #1
 8006faa:	211c      	movs	r1, #28
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f7fe fa01 	bl	80053b4 <a_mpu6500_read>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006fb6:	7bfb      	ldrb	r3, [r7, #15]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d005      	beq.n	8006fc8 <mpu6500_set_accelerometer_range+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer config failed.\n");            /* read accelerometer config failed */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc0:	4814      	ldr	r0, [pc, #80]	@ (8007014 <mpu6500_set_accelerometer_range+0x94>)
 8006fc2:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e021      	b.n	800700c <mpu6500_set_accelerometer_range+0x8c>
    }
    prev &= ~(3 << 3);                                                                  /* clear config */
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
 8006fca:	f023 0318 	bic.w	r3, r3, #24
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	73bb      	strb	r3, [r7, #14]
    prev |= range << 3;                                                                 /* set config */
 8006fd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	b25a      	sxtb	r2, r3
 8006fda:	7bbb      	ldrb	r3, [r7, #14]
 8006fdc:	b25b      	sxtb	r3, r3
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	b25b      	sxtb	r3, r3
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG, (uint8_t *)&prev, 1);       /* write accelerometer config */
 8006fe6:	f107 020e 	add.w	r2, r7, #14
 8006fea:	2301      	movs	r3, #1
 8006fec:	211c      	movs	r1, #28
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f7fe fa11 	bl	8005416 <a_mpu6500_write>
 8006ff4:	4603      	mov	r3, r0
 8006ff6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8006ff8:	7bfb      	ldrb	r3, [r7, #15]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d005      	beq.n	800700a <mpu6500_set_accelerometer_range+0x8a>
    {
        handle->debug_print("mpu6500: write accelerometer config failed.\n");           /* write accelerometer config failed */
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007002:	4805      	ldr	r0, [pc, #20]	@ (8007018 <mpu6500_set_accelerometer_range+0x98>)
 8007004:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007006:	2301      	movs	r3, #1
 8007008:	e000      	b.n	800700c <mpu6500_set_accelerometer_range+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}
 8007014:	0801f0a0 	.word	0x0801f0a0
 8007018:	0801f75c 	.word	0x0801f75c

0800701c <mpu6500_set_fifo_1024kb>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_1024kb(mpu6500_handle_t *handle)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b084      	sub	sp, #16
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d101      	bne.n	800702e <mpu6500_set_fifo_1024kb+0x12>
    {
        return 2;                                                                         /* return error */
 800702a:	2302      	movs	r3, #2
 800702c:	e035      	b.n	800709a <mpu6500_set_fifo_1024kb+0x7e>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007034:	2b01      	cmp	r3, #1
 8007036:	d001      	beq.n	800703c <mpu6500_set_fifo_1024kb+0x20>
    {
        return 3;                                                                         /* return error */
 8007038:	2303      	movs	r3, #3
 800703a:	e02e      	b.n	800709a <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 800703c:	f107 020e 	add.w	r2, r7, #14
 8007040:	2301      	movs	r3, #1
 8007042:	211d      	movs	r1, #29
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f7fe f9b5 	bl	80053b4 <a_mpu6500_read>
 800704a:	4603      	mov	r3, r0
 800704c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 800704e:	7bfb      	ldrb	r3, [r7, #15]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d005      	beq.n	8007060 <mpu6500_set_fifo_1024kb+0x44>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007058:	4812      	ldr	r0, [pc, #72]	@ (80070a4 <mpu6500_set_fifo_1024kb+0x88>)
 800705a:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 800705c:	2301      	movs	r3, #1
 800705e:	e01c      	b.n	800709a <mpu6500_set_fifo_1024kb+0x7e>
    }
    prev &= ~(1 << 6);                                                                    /* clear config */
 8007060:	7bbb      	ldrb	r3, [r7, #14]
 8007062:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007066:	b2db      	uxtb	r3, r3
 8007068:	73bb      	strb	r3, [r7, #14]
    prev |= 1 << 6;                                                                       /* set config */
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007070:	b2db      	uxtb	r3, r3
 8007072:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 8007074:	f107 020e 	add.w	r2, r7, #14
 8007078:	2301      	movs	r3, #1
 800707a:	211d      	movs	r1, #29
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f7fe f9ca 	bl	8005416 <a_mpu6500_write>
 8007082:	4603      	mov	r3, r0
 8007084:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8007086:	7bfb      	ldrb	r3, [r7, #15]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d005      	beq.n	8007098 <mpu6500_set_fifo_1024kb+0x7c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007090:	4805      	ldr	r0, [pc, #20]	@ (80070a8 <mpu6500_set_fifo_1024kb+0x8c>)
 8007092:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 8007094:	2301      	movs	r3, #1
 8007096:	e000      	b.n	800709a <mpu6500_set_fifo_1024kb+0x7e>
    }
    
    return 0;                                                                             /* success return 0 */
 8007098:	2300      	movs	r3, #0
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}
 80070a2:	bf00      	nop
 80070a4:	0801f78c 	.word	0x0801f78c
 80070a8:	0801f7bc 	.word	0x0801f7bc

080070ac <mpu6500_set_accelerometer_choice>:
 *            - 3 handle is not initialized
 *            - 4 choice > 1
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_choice(mpu6500_handle_t *handle, uint8_t choice)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	460b      	mov	r3, r1
 80070b6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <mpu6500_set_accelerometer_choice+0x16>
    {
        return 2;                                                                       /* return error */
 80070be:	2302      	movs	r3, #2
 80070c0:	e043      	b.n	800714a <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d001      	beq.n	80070d0 <mpu6500_set_accelerometer_choice+0x24>
    {
        return 3;                                                                       /* return error */
 80070cc:	2303      	movs	r3, #3
 80070ce:	e03c      	b.n	800714a <mpu6500_set_accelerometer_choice+0x9e>
    }
    if (choice > 1)                                                                     /* check the choice */
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d905      	bls.n	80070e2 <mpu6500_set_accelerometer_choice+0x36>
    {
        handle->debug_print("mpu6500: choice > 1.\n");                                  /* choice > 1 */
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070da:	481e      	ldr	r0, [pc, #120]	@ (8007154 <mpu6500_set_accelerometer_choice+0xa8>)
 80070dc:	4798      	blx	r3
       
        return 4;                                                                       /* return error */
 80070de:	2304      	movs	r3, #4
 80070e0:	e033      	b.n	800714a <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);       /* read accelerometer config */
 80070e2:	f107 020e 	add.w	r2, r7, #14
 80070e6:	2301      	movs	r3, #1
 80070e8:	211d      	movs	r1, #29
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fe f962 	bl	80053b4 <a_mpu6500_read>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d005      	beq.n	8007106 <mpu6500_set_accelerometer_choice+0x5a>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");          /* read accelerometer 2 config failed */
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070fe:	4816      	ldr	r0, [pc, #88]	@ (8007158 <mpu6500_set_accelerometer_choice+0xac>)
 8007100:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007102:	2301      	movs	r3, #1
 8007104:	e021      	b.n	800714a <mpu6500_set_accelerometer_choice+0x9e>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	f023 0308 	bic.w	r3, r3, #8
 800710c:	b2db      	uxtb	r3, r3
 800710e:	73bb      	strb	r3, [r7, #14]
    prev |= choice << 3;                                                                /* set config */
 8007110:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007114:	00db      	lsls	r3, r3, #3
 8007116:	b25a      	sxtb	r2, r3
 8007118:	7bbb      	ldrb	r3, [r7, #14]
 800711a:	b25b      	sxtb	r3, r3
 800711c:	4313      	orrs	r3, r2
 800711e:	b25b      	sxtb	r3, r3
 8007120:	b2db      	uxtb	r3, r3
 8007122:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);      /* write accelerometer config */
 8007124:	f107 020e 	add.w	r2, r7, #14
 8007128:	2301      	movs	r3, #1
 800712a:	211d      	movs	r1, #29
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7fe f972 	bl	8005416 <a_mpu6500_write>
 8007132:	4603      	mov	r3, r0
 8007134:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007136:	7bfb      	ldrb	r3, [r7, #15]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d005      	beq.n	8007148 <mpu6500_set_accelerometer_choice+0x9c>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");         /* write accelerometer 2 config failed */
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007140:	4806      	ldr	r0, [pc, #24]	@ (800715c <mpu6500_set_accelerometer_choice+0xb0>)
 8007142:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007144:	2301      	movs	r3, #1
 8007146:	e000      	b.n	800714a <mpu6500_set_accelerometer_choice+0x9e>
    }
    
    return 0;                                                                           /* success return 0 */
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3710      	adds	r7, #16
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	0801f7ec 	.word	0x0801f7ec
 8007158:	0801f78c 	.word	0x0801f78c
 800715c:	0801f7bc 	.word	0x0801f7bc

08007160 <mpu6500_set_accelerometer_low_pass_filter>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_low_pass_filter(mpu6500_handle_t *handle, mpu6500_accelerometer_low_pass_filter_t filter)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	460b      	mov	r3, r1
 800716a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                   /* check handle */
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <mpu6500_set_accelerometer_low_pass_filter+0x16>
    {
        return 2;                                                                         /* return error */
 8007172:	2302      	movs	r3, #2
 8007174:	e035      	b.n	80071e2 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    if (handle->inited != 1)                                                              /* check handle initialization */
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800717c:	2b01      	cmp	r3, #1
 800717e:	d001      	beq.n	8007184 <mpu6500_set_accelerometer_low_pass_filter+0x24>
    {
        return 3;                                                                         /* return error */
 8007180:	2303      	movs	r3, #3
 8007182:	e02e      	b.n	80071e2 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);         /* read config */
 8007184:	f107 020e 	add.w	r2, r7, #14
 8007188:	2301      	movs	r3, #1
 800718a:	211d      	movs	r1, #29
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7fe f911 	bl	80053b4 <a_mpu6500_read>
 8007192:	4603      	mov	r3, r0
 8007194:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 8007196:	7bfb      	ldrb	r3, [r7, #15]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d005      	beq.n	80071a8 <mpu6500_set_accelerometer_low_pass_filter+0x48>
    {
        handle->debug_print("mpu6500: read accelerometer 2 config failed.\n");            /* read accelerometer 2 config failed */
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071a0:	4812      	ldr	r0, [pc, #72]	@ (80071ec <mpu6500_set_accelerometer_low_pass_filter+0x8c>)
 80071a2:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80071a4:	2301      	movs	r3, #1
 80071a6:	e01c      	b.n	80071e2 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    prev &= ~(0x7 << 0);                                                                  /* clear config */
 80071a8:	7bbb      	ldrb	r3, [r7, #14]
 80071aa:	f023 0307 	bic.w	r3, r3, #7
 80071ae:	b2db      	uxtb	r3, r3
 80071b0:	73bb      	strb	r3, [r7, #14]
    prev |= filter << 0;                                                                  /* set config */
 80071b2:	7bba      	ldrb	r2, [r7, #14]
 80071b4:	78fb      	ldrb	r3, [r7, #3]
 80071b6:	4313      	orrs	r3, r2
 80071b8:	b2db      	uxtb	r3, r3
 80071ba:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_ACCEL_CONFIG2, (uint8_t *)&prev, 1);        /* write config */
 80071bc:	f107 020e 	add.w	r2, r7, #14
 80071c0:	2301      	movs	r3, #1
 80071c2:	211d      	movs	r1, #29
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7fe f926 	bl	8005416 <a_mpu6500_write>
 80071ca:	4603      	mov	r3, r0
 80071cc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                         /* check result */
 80071ce:	7bfb      	ldrb	r3, [r7, #15]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d005      	beq.n	80071e0 <mpu6500_set_accelerometer_low_pass_filter+0x80>
    {
        handle->debug_print("mpu6500: write accelerometer 2 config failed.\n");           /* write accelerometer 2 config failed */
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071d8:	4805      	ldr	r0, [pc, #20]	@ (80071f0 <mpu6500_set_accelerometer_low_pass_filter+0x90>)
 80071da:	4798      	blx	r3
       
        return 1;                                                                         /* return error */
 80071dc:	2301      	movs	r3, #1
 80071de:	e000      	b.n	80071e2 <mpu6500_set_accelerometer_low_pass_filter+0x82>
    }
    
    return 0;                                                                             /* success return 0 */
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3710      	adds	r7, #16
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	0801f78c 	.word	0x0801f78c
 80071f0:	0801f7bc 	.word	0x0801f7bc

080071f4 <mpu6500_set_low_power_accel_output_rate>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_low_power_accel_output_rate(mpu6500_handle_t *handle, mpu6500_low_power_accel_output_rate_t rate)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                  /* check handle */
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d101      	bne.n	800720a <mpu6500_set_low_power_accel_output_rate+0x16>
    {
        return 2;                                                                        /* return error */
 8007206:	2302      	movs	r3, #2
 8007208:	e035      	b.n	8007276 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    if (handle->inited != 1)                                                             /* check handle initialization */
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007210:	2b01      	cmp	r3, #1
 8007212:	d001      	beq.n	8007218 <mpu6500_set_low_power_accel_output_rate+0x24>
    {
        return 3;                                                                        /* return error */
 8007214:	2303      	movs	r3, #3
 8007216:	e02e      	b.n	8007276 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);         /* read config */
 8007218:	f107 020e 	add.w	r2, r7, #14
 800721c:	2301      	movs	r3, #1
 800721e:	211e      	movs	r1, #30
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f7fe f8c7 	bl	80053b4 <a_mpu6500_read>
 8007226:	4603      	mov	r3, r0
 8007228:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <mpu6500_set_low_power_accel_output_rate+0x48>
    {
        handle->debug_print("mpu6500: read lp accelerometer odr failed.\n");             /* read lp accelerometer odr failed */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007234:	4812      	ldr	r0, [pc, #72]	@ (8007280 <mpu6500_set_low_power_accel_output_rate+0x8c>)
 8007236:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8007238:	2301      	movs	r3, #1
 800723a:	e01c      	b.n	8007276 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    prev &= ~(0xF << 0);                                                                 /* clear config */
 800723c:	7bbb      	ldrb	r3, [r7, #14]
 800723e:	f023 030f 	bic.w	r3, r3, #15
 8007242:	b2db      	uxtb	r3, r3
 8007244:	73bb      	strb	r3, [r7, #14]
    prev |= rate << 0;                                                                   /* set config */
 8007246:	7bba      	ldrb	r2, [r7, #14]
 8007248:	78fb      	ldrb	r3, [r7, #3]
 800724a:	4313      	orrs	r3, r2
 800724c:	b2db      	uxtb	r3, r3
 800724e:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_LP_ACCEL_ODR, (uint8_t *)&prev, 1);        /* write config */
 8007250:	f107 020e 	add.w	r2, r7, #14
 8007254:	2301      	movs	r3, #1
 8007256:	211e      	movs	r1, #30
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fe f8dc 	bl	8005416 <a_mpu6500_write>
 800725e:	4603      	mov	r3, r0
 8007260:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                        /* check result */
 8007262:	7bfb      	ldrb	r3, [r7, #15]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d005      	beq.n	8007274 <mpu6500_set_low_power_accel_output_rate+0x80>
    {
        handle->debug_print("mpu6500: write lp accelerometer odr failed.\n");            /* write lp accelerometer odr failed */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800726c:	4805      	ldr	r0, [pc, #20]	@ (8007284 <mpu6500_set_low_power_accel_output_rate+0x90>)
 800726e:	4798      	blx	r3
       
        return 1;                                                                        /* return error */
 8007270:	2301      	movs	r3, #1
 8007272:	e000      	b.n	8007276 <mpu6500_set_low_power_accel_output_rate+0x82>
    }
    
    return 0;                                                                            /* success return 0 */
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3710      	adds	r7, #16
 800727a:	46bd      	mov	sp, r7
 800727c:	bd80      	pop	{r7, pc}
 800727e:	bf00      	nop
 8007280:	0801f804 	.word	0x0801f804
 8007284:	0801f830 	.word	0x0801f830

08007288 <mpu6500_set_wake_on_motion>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_wake_on_motion(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b084      	sub	sp, #16
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
 8007290:	460b      	mov	r3, r1
 8007292:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <mpu6500_set_wake_on_motion+0x16>
    {
        return 2;                                                                           /* return error */
 800729a:	2302      	movs	r3, #2
 800729c:	e03a      	b.n	8007314 <mpu6500_set_wake_on_motion+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d001      	beq.n	80072ac <mpu6500_set_wake_on_motion+0x24>
    {
        return 3;                                                                           /* return error */
 80072a8:	2303      	movs	r3, #3
 80072aa:	e033      	b.n	8007314 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 80072ac:	f107 020e 	add.w	r2, r7, #14
 80072b0:	2301      	movs	r3, #1
 80072b2:	2169      	movs	r1, #105	@ 0x69
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7fe f87d 	bl	80053b4 <a_mpu6500_read>
 80072ba:	4603      	mov	r3, r0
 80072bc:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d005      	beq.n	80072d0 <mpu6500_set_wake_on_motion+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072c8:	4814      	ldr	r0, [pc, #80]	@ (800731c <mpu6500_set_wake_on_motion+0x94>)
 80072ca:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80072cc:	2301      	movs	r3, #1
 80072ce:	e021      	b.n	8007314 <mpu6500_set_wake_on_motion+0x8c>
    }
    prev &= ~(1 << 7);                                                                      /* clear config */
 80072d0:	7bbb      	ldrb	r3, [r7, #14]
 80072d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072d6:	b2db      	uxtb	r3, r3
 80072d8:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 7;                                                                    /* set config */
 80072da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072de:	01db      	lsls	r3, r3, #7
 80072e0:	b25a      	sxtb	r2, r3
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	b25b      	sxtb	r3, r3
 80072e6:	4313      	orrs	r3, r2
 80072e8:	b25b      	sxtb	r3, r3
 80072ea:	b2db      	uxtb	r3, r3
 80072ec:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 80072ee:	f107 020e 	add.w	r2, r7, #14
 80072f2:	2301      	movs	r3, #1
 80072f4:	2169      	movs	r1, #105	@ 0x69
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f7fe f88d 	bl	8005416 <a_mpu6500_write>
 80072fc:	4603      	mov	r3, r0
 80072fe:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 8007300:	7bfb      	ldrb	r3, [r7, #15]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d005      	beq.n	8007312 <mpu6500_set_wake_on_motion+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800730a:	4805      	ldr	r0, [pc, #20]	@ (8007320 <mpu6500_set_wake_on_motion+0x98>)
 800730c:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 800730e:	2301      	movs	r3, #1
 8007310:	e000      	b.n	8007314 <mpu6500_set_wake_on_motion+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}
 800731c:	0801f860 	.word	0x0801f860
 8007320:	0801f88c 	.word	0x0801f88c

08007324 <mpu6500_set_accel_compare_with_previous_sample>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accel_compare_with_previous_sample(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b084      	sub	sp, #16
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	460b      	mov	r3, r1
 800732e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                     /* check handle */
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d101      	bne.n	800733a <mpu6500_set_accel_compare_with_previous_sample+0x16>
    {
        return 2;                                                                           /* return error */
 8007336:	2302      	movs	r3, #2
 8007338:	e03a      	b.n	80073b0 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    if (handle->inited != 1)                                                                /* check handle initialization */
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007340:	2b01      	cmp	r3, #1
 8007342:	d001      	beq.n	8007348 <mpu6500_set_accel_compare_with_previous_sample+0x24>
    {
        return 3;                                                                           /* return error */
 8007344:	2303      	movs	r3, #3
 8007346:	e033      	b.n	80073b0 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);         /* read config */
 8007348:	f107 020e 	add.w	r2, r7, #14
 800734c:	2301      	movs	r3, #1
 800734e:	2169      	movs	r1, #105	@ 0x69
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7fe f82f 	bl	80053b4 <a_mpu6500_read>
 8007356:	4603      	mov	r3, r0
 8007358:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800735a:	7bfb      	ldrb	r3, [r7, #15]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d005      	beq.n	800736c <mpu6500_set_accel_compare_with_previous_sample+0x48>
    {
        handle->debug_print("mpu6500: read motion detect ctrl failed.\n");                  /* read motion detect ctrl failed */
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007364:	4814      	ldr	r0, [pc, #80]	@ (80073b8 <mpu6500_set_accel_compare_with_previous_sample+0x94>)
 8007366:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 8007368:	2301      	movs	r3, #1
 800736a:	e021      	b.n	80073b0 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    prev &= ~(1 << 6);                                                                      /* clear config */
 800736c:	7bbb      	ldrb	r3, [r7, #14]
 800736e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007372:	b2db      	uxtb	r3, r3
 8007374:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 6;                                                                    /* set config */
 8007376:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800737a:	019b      	lsls	r3, r3, #6
 800737c:	b25a      	sxtb	r2, r3
 800737e:	7bbb      	ldrb	r3, [r7, #14]
 8007380:	b25b      	sxtb	r3, r3
 8007382:	4313      	orrs	r3, r2
 8007384:	b25b      	sxtb	r3, r3
 8007386:	b2db      	uxtb	r3, r3
 8007388:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_MOT_DETECT_CTRL, (uint8_t *)&prev, 1);        /* write config */
 800738a:	f107 020e 	add.w	r2, r7, #14
 800738e:	2301      	movs	r3, #1
 8007390:	2169      	movs	r1, #105	@ 0x69
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f7fe f83f 	bl	8005416 <a_mpu6500_write>
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                           /* check result */
 800739c:	7bfb      	ldrb	r3, [r7, #15]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d005      	beq.n	80073ae <mpu6500_set_accel_compare_with_previous_sample+0x8a>
    {
        handle->debug_print("mpu6500: write motion detect ctrl failed.\n");                 /* write motion detect ctrl failed */
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a6:	4805      	ldr	r0, [pc, #20]	@ (80073bc <mpu6500_set_accel_compare_with_previous_sample+0x98>)
 80073a8:	4798      	blx	r3
       
        return 1;                                                                           /* return error */
 80073aa:	2301      	movs	r3, #1
 80073ac:	e000      	b.n	80073b0 <mpu6500_set_accel_compare_with_previous_sample+0x8c>
    }
    
    return 0;                                                                               /* success return 0 */
 80073ae:	2300      	movs	r3, #0
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	0801f860 	.word	0x0801f860
 80073bc:	0801f88c 	.word	0x0801f88c

080073c0 <mpu6500_set_fifo_enable>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fifo_enable(mpu6500_handle_t *handle, mpu6500_fifo_t fifo, mpu6500_bool_t enable)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b084      	sub	sp, #16
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	460b      	mov	r3, r1
 80073ca:	70fb      	strb	r3, [r7, #3]
 80073cc:	4613      	mov	r3, r2
 80073ce:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                             /* check handle */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d101      	bne.n	80073da <mpu6500_set_fifo_enable+0x1a>
    {
        return 2;                                                                   /* return error */
 80073d6:	2302      	movs	r3, #2
 80073d8:	e043      	b.n	8007462 <mpu6500_set_fifo_enable+0xa2>
    }
    if (handle->inited != 1)                                                        /* check handle initialization */
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d001      	beq.n	80073e8 <mpu6500_set_fifo_enable+0x28>
    {
        return 3;                                                                   /* return error */
 80073e4:	2303      	movs	r3, #3
 80073e6:	e03c      	b.n	8007462 <mpu6500_set_fifo_enable+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);         /* read fifo enable config */
 80073e8:	f107 020e 	add.w	r2, r7, #14
 80073ec:	2301      	movs	r3, #1
 80073ee:	2123      	movs	r1, #35	@ 0x23
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f7fd ffdf 	bl	80053b4 <a_mpu6500_read>
 80073f6:	4603      	mov	r3, r0
 80073f8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d005      	beq.n	800740c <mpu6500_set_fifo_enable+0x4c>
    {
        handle->debug_print("mpu6500: read fifo enable config failed.\n");          /* read fifo enable config failed */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007404:	4819      	ldr	r0, [pc, #100]	@ (800746c <mpu6500_set_fifo_enable+0xac>)
 8007406:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 8007408:	2301      	movs	r3, #1
 800740a:	e02a      	b.n	8007462 <mpu6500_set_fifo_enable+0xa2>
    }
    prev &= ~(1 << fifo);                                                           /* clear config */
 800740c:	78fb      	ldrb	r3, [r7, #3]
 800740e:	2201      	movs	r2, #1
 8007410:	fa02 f303 	lsl.w	r3, r2, r3
 8007414:	b25b      	sxtb	r3, r3
 8007416:	43db      	mvns	r3, r3
 8007418:	b25a      	sxtb	r2, r3
 800741a:	7bbb      	ldrb	r3, [r7, #14]
 800741c:	b25b      	sxtb	r3, r3
 800741e:	4013      	ands	r3, r2
 8007420:	b25b      	sxtb	r3, r3
 8007422:	b2db      	uxtb	r3, r3
 8007424:	73bb      	strb	r3, [r7, #14]
    prev |= enable << fifo;                                                         /* set config */
 8007426:	78ba      	ldrb	r2, [r7, #2]
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	fa02 f303 	lsl.w	r3, r2, r3
 800742e:	b25a      	sxtb	r2, r3
 8007430:	7bbb      	ldrb	r3, [r7, #14]
 8007432:	b25b      	sxtb	r3, r3
 8007434:	4313      	orrs	r3, r2
 8007436:	b25b      	sxtb	r3, r3
 8007438:	b2db      	uxtb	r3, r3
 800743a:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_FIFO_EN, (uint8_t *)&prev, 1);        /* write fifo enable config */
 800743c:	f107 020e 	add.w	r2, r7, #14
 8007440:	2301      	movs	r3, #1
 8007442:	2123      	movs	r1, #35	@ 0x23
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f7fd ffe6 	bl	8005416 <a_mpu6500_write>
 800744a:	4603      	mov	r3, r0
 800744c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                   /* check result */
 800744e:	7bfb      	ldrb	r3, [r7, #15]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d005      	beq.n	8007460 <mpu6500_set_fifo_enable+0xa0>
    {
        handle->debug_print("mpu6500: write fifo enable config failed.\n");         /* write fifo enable config failed */
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007458:	4805      	ldr	r0, [pc, #20]	@ (8007470 <mpu6500_set_fifo_enable+0xb0>)
 800745a:	4798      	blx	r3
       
        return 1;                                                                   /* return error */
 800745c:	2301      	movs	r3, #1
 800745e:	e000      	b.n	8007462 <mpu6500_set_fifo_enable+0xa2>
    }
    
    return 0;                                                                       /* success return 0 */
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	0801f8b8 	.word	0x0801f8b8
 8007470:	0801f8e4 	.word	0x0801f8e4

08007474 <mpu6500_set_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d101      	bne.n	800748a <mpu6500_set_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 8007486:	2302      	movs	r3, #2
 8007488:	e03a      	b.n	8007500 <mpu6500_set_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007490:	2b01      	cmp	r3, #1
 8007492:	d001      	beq.n	8007498 <mpu6500_set_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8007494:	2303      	movs	r3, #3
 8007496:	e033      	b.n	8007500 <mpu6500_set_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007498:	f107 020e 	add.w	r2, r7, #14
 800749c:	2301      	movs	r3, #1
 800749e:	2137      	movs	r1, #55	@ 0x37
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f7fd ff87 	bl	80053b4 <a_mpu6500_read>
 80074a6:	4603      	mov	r3, r0
 80074a8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80074aa:	7bfb      	ldrb	r3, [r7, #15]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <mpu6500_set_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074b4:	4814      	ldr	r0, [pc, #80]	@ (8007508 <mpu6500_set_interrupt_level+0x94>)
 80074b6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80074b8:	2301      	movs	r3, #1
 80074ba:	e021      	b.n	8007500 <mpu6500_set_interrupt_level+0x8c>
    }
    prev &= ~(1 << 7);                                                                  /* clear config */
 80074bc:	7bbb      	ldrb	r3, [r7, #14]
 80074be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	73bb      	strb	r3, [r7, #14]
    prev |= level << 7;                                                                 /* set config */
 80074c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074ca:	01db      	lsls	r3, r3, #7
 80074cc:	b25a      	sxtb	r2, r3
 80074ce:	7bbb      	ldrb	r3, [r7, #14]
 80074d0:	b25b      	sxtb	r3, r3
 80074d2:	4313      	orrs	r3, r2
 80074d4:	b25b      	sxtb	r3, r3
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80074da:	f107 020e 	add.w	r2, r7, #14
 80074de:	2301      	movs	r3, #1
 80074e0:	2137      	movs	r1, #55	@ 0x37
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f7fd ff97 	bl	8005416 <a_mpu6500_write>
 80074e8:	4603      	mov	r3, r0
 80074ea:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80074ec:	7bfb      	ldrb	r3, [r7, #15]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d005      	beq.n	80074fe <mpu6500_set_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074f6:	4805      	ldr	r0, [pc, #20]	@ (800750c <mpu6500_set_interrupt_level+0x98>)
 80074f8:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80074fa:	2301      	movs	r3, #1
 80074fc:	e000      	b.n	8007500 <mpu6500_set_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80074fe:	2300      	movs	r3, #0
}
 8007500:	4618      	mov	r0, r3
 8007502:	3710      	adds	r7, #16
 8007504:	46bd      	mov	sp, r7
 8007506:	bd80      	pop	{r7, pc}
 8007508:	0801f910 	.word	0x0801f910
 800750c:	0801f938 	.word	0x0801f938

08007510 <mpu6500_set_interrupt_pin_type>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_pin_type(mpu6500_handle_t *handle, mpu6500_pin_type_t type)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b084      	sub	sp, #16
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	460b      	mov	r3, r1
 800751a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d101      	bne.n	8007526 <mpu6500_set_interrupt_pin_type+0x16>
    {
        return 2;                                                                       /* return error */
 8007522:	2302      	movs	r3, #2
 8007524:	e03a      	b.n	800759c <mpu6500_set_interrupt_pin_type+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800752c:	2b01      	cmp	r3, #1
 800752e:	d001      	beq.n	8007534 <mpu6500_set_interrupt_pin_type+0x24>
    {
        return 3;                                                                       /* return error */
 8007530:	2303      	movs	r3, #3
 8007532:	e033      	b.n	800759c <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007534:	f107 020e 	add.w	r2, r7, #14
 8007538:	2301      	movs	r3, #1
 800753a:	2137      	movs	r1, #55	@ 0x37
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7fd ff39 	bl	80053b4 <a_mpu6500_read>
 8007542:	4603      	mov	r3, r0
 8007544:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007546:	7bfb      	ldrb	r3, [r7, #15]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d005      	beq.n	8007558 <mpu6500_set_interrupt_pin_type+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007550:	4814      	ldr	r0, [pc, #80]	@ (80075a4 <mpu6500_set_interrupt_pin_type+0x94>)
 8007552:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007554:	2301      	movs	r3, #1
 8007556:	e021      	b.n	800759c <mpu6500_set_interrupt_pin_type+0x8c>
    }
    prev &= ~(1 << 6);                                                                  /* clear config */
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800755e:	b2db      	uxtb	r3, r3
 8007560:	73bb      	strb	r3, [r7, #14]
    prev |= type << 6;                                                                  /* set config */
 8007562:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007566:	019b      	lsls	r3, r3, #6
 8007568:	b25a      	sxtb	r2, r3
 800756a:	7bbb      	ldrb	r3, [r7, #14]
 800756c:	b25b      	sxtb	r3, r3
 800756e:	4313      	orrs	r3, r2
 8007570:	b25b      	sxtb	r3, r3
 8007572:	b2db      	uxtb	r3, r3
 8007574:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007576:	f107 020e 	add.w	r2, r7, #14
 800757a:	2301      	movs	r3, #1
 800757c:	2137      	movs	r1, #55	@ 0x37
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f7fd ff49 	bl	8005416 <a_mpu6500_write>
 8007584:	4603      	mov	r3, r0
 8007586:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d005      	beq.n	800759a <mpu6500_set_interrupt_pin_type+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007592:	4805      	ldr	r0, [pc, #20]	@ (80075a8 <mpu6500_set_interrupt_pin_type+0x98>)
 8007594:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007596:	2301      	movs	r3, #1
 8007598:	e000      	b.n	800759c <mpu6500_set_interrupt_pin_type+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	3710      	adds	r7, #16
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}
 80075a4:	0801f910 	.word	0x0801f910
 80075a8:	0801f938 	.word	0x0801f938

080075ac <mpu6500_set_interrupt_latch>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_latch(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b084      	sub	sp, #16
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <mpu6500_set_interrupt_latch+0x16>
    {
        return 2;                                                                       /* return error */
 80075be:	2302      	movs	r3, #2
 80075c0:	e03c      	b.n	800763c <mpu6500_set_interrupt_latch+0x90>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d001      	beq.n	80075d0 <mpu6500_set_interrupt_latch+0x24>
    {
        return 3;                                                                       /* return error */
 80075cc:	2303      	movs	r3, #3
 80075ce:	e035      	b.n	800763c <mpu6500_set_interrupt_latch+0x90>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80075d0:	f107 020e 	add.w	r2, r7, #14
 80075d4:	2301      	movs	r3, #1
 80075d6:	2137      	movs	r1, #55	@ 0x37
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f7fd feeb 	bl	80053b4 <a_mpu6500_read>
 80075de:	4603      	mov	r3, r0
 80075e0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80075e2:	7bfb      	ldrb	r3, [r7, #15]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d005      	beq.n	80075f4 <mpu6500_set_interrupt_latch+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ec:	4815      	ldr	r0, [pc, #84]	@ (8007644 <mpu6500_set_interrupt_latch+0x98>)
 80075ee:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80075f0:	2301      	movs	r3, #1
 80075f2:	e023      	b.n	800763c <mpu6500_set_interrupt_latch+0x90>
    }
    prev &= ~(1 << 5);                                                                  /* clear config */
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
 80075f6:	f023 0320 	bic.w	r3, r3, #32
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	73bb      	strb	r3, [r7, #14]
    prev |= (!enable) << 5;                                                             /* set config */
 80075fe:	78fb      	ldrb	r3, [r7, #3]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d101      	bne.n	8007608 <mpu6500_set_interrupt_latch+0x5c>
 8007604:	2220      	movs	r2, #32
 8007606:	e000      	b.n	800760a <mpu6500_set_interrupt_latch+0x5e>
 8007608:	2200      	movs	r2, #0
 800760a:	7bbb      	ldrb	r3, [r7, #14]
 800760c:	b25b      	sxtb	r3, r3
 800760e:	4313      	orrs	r3, r2
 8007610:	b25b      	sxtb	r3, r3
 8007612:	b2db      	uxtb	r3, r3
 8007614:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007616:	f107 020e 	add.w	r2, r7, #14
 800761a:	2301      	movs	r3, #1
 800761c:	2137      	movs	r1, #55	@ 0x37
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f7fd fef9 	bl	8005416 <a_mpu6500_write>
 8007624:	4603      	mov	r3, r0
 8007626:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d005      	beq.n	800763a <mpu6500_set_interrupt_latch+0x8e>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007632:	4805      	ldr	r0, [pc, #20]	@ (8007648 <mpu6500_set_interrupt_latch+0x9c>)
 8007634:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007636:	2301      	movs	r3, #1
 8007638:	e000      	b.n	800763c <mpu6500_set_interrupt_latch+0x90>
    }
    
    return 0;                                                                           /* success return 0 */
 800763a:	2300      	movs	r3, #0
}
 800763c:	4618      	mov	r0, r3
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}
 8007644:	0801f910 	.word	0x0801f910
 8007648:	0801f938 	.word	0x0801f938

0800764c <mpu6500_set_interrupt_read_clear>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt_read_clear(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b084      	sub	sp, #16
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
 8007654:	460b      	mov	r3, r1
 8007656:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d101      	bne.n	8007662 <mpu6500_set_interrupt_read_clear+0x16>
    {
        return 2;                                                                       /* return error */
 800765e:	2302      	movs	r3, #2
 8007660:	e03a      	b.n	80076d8 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007668:	2b01      	cmp	r3, #1
 800766a:	d001      	beq.n	8007670 <mpu6500_set_interrupt_read_clear+0x24>
    {
        return 3;                                                                       /* return error */
 800766c:	2303      	movs	r3, #3
 800766e:	e033      	b.n	80076d8 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 8007670:	f107 020e 	add.w	r2, r7, #14
 8007674:	2301      	movs	r3, #1
 8007676:	2137      	movs	r1, #55	@ 0x37
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7fd fe9b 	bl	80053b4 <a_mpu6500_read>
 800767e:	4603      	mov	r3, r0
 8007680:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d005      	beq.n	8007694 <mpu6500_set_interrupt_read_clear+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800768c:	4814      	ldr	r0, [pc, #80]	@ (80076e0 <mpu6500_set_interrupt_read_clear+0x94>)
 800768e:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007690:	2301      	movs	r3, #1
 8007692:	e021      	b.n	80076d8 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    prev &= ~(1 << 4);                                                                  /* clear config */
 8007694:	7bbb      	ldrb	r3, [r7, #14]
 8007696:	f023 0310 	bic.w	r3, r3, #16
 800769a:	b2db      	uxtb	r3, r3
 800769c:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 4;                                                                /* set config */
 800769e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80076a2:	011b      	lsls	r3, r3, #4
 80076a4:	b25a      	sxtb	r2, r3
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	b25b      	sxtb	r3, r3
 80076aa:	4313      	orrs	r3, r2
 80076ac:	b25b      	sxtb	r3, r3
 80076ae:	b2db      	uxtb	r3, r3
 80076b0:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80076b2:	f107 020e 	add.w	r2, r7, #14
 80076b6:	2301      	movs	r3, #1
 80076b8:	2137      	movs	r1, #55	@ 0x37
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fd feab 	bl	8005416 <a_mpu6500_write>
 80076c0:	4603      	mov	r3, r0
 80076c2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80076c4:	7bfb      	ldrb	r3, [r7, #15]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d005      	beq.n	80076d6 <mpu6500_set_interrupt_read_clear+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ce:	4805      	ldr	r0, [pc, #20]	@ (80076e4 <mpu6500_set_interrupt_read_clear+0x98>)
 80076d0:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80076d2:	2301      	movs	r3, #1
 80076d4:	e000      	b.n	80076d8 <mpu6500_set_interrupt_read_clear+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80076d6:	2300      	movs	r3, #0
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3710      	adds	r7, #16
 80076dc:	46bd      	mov	sp, r7
 80076de:	bd80      	pop	{r7, pc}
 80076e0:	0801f910 	.word	0x0801f910
 80076e4:	0801f938 	.word	0x0801f938

080076e8 <mpu6500_set_fsync_interrupt_level>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt_level(mpu6500_handle_t *handle, mpu6500_pin_level_t level)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	460b      	mov	r3, r1
 80076f2:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d101      	bne.n	80076fe <mpu6500_set_fsync_interrupt_level+0x16>
    {
        return 2;                                                                       /* return error */
 80076fa:	2302      	movs	r3, #2
 80076fc:	e03a      	b.n	8007774 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007704:	2b01      	cmp	r3, #1
 8007706:	d001      	beq.n	800770c <mpu6500_set_fsync_interrupt_level+0x24>
    {
        return 3;                                                                       /* return error */
 8007708:	2303      	movs	r3, #3
 800770a:	e033      	b.n	8007774 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 800770c:	f107 020e 	add.w	r2, r7, #14
 8007710:	2301      	movs	r3, #1
 8007712:	2137      	movs	r1, #55	@ 0x37
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7fd fe4d 	bl	80053b4 <a_mpu6500_read>
 800771a:	4603      	mov	r3, r0
 800771c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800771e:	7bfb      	ldrb	r3, [r7, #15]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d005      	beq.n	8007730 <mpu6500_set_fsync_interrupt_level+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007728:	4814      	ldr	r0, [pc, #80]	@ (800777c <mpu6500_set_fsync_interrupt_level+0x94>)
 800772a:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800772c:	2301      	movs	r3, #1
 800772e:	e021      	b.n	8007774 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    prev &= ~(1 << 3);                                                                  /* clear config */
 8007730:	7bbb      	ldrb	r3, [r7, #14]
 8007732:	f023 0308 	bic.w	r3, r3, #8
 8007736:	b2db      	uxtb	r3, r3
 8007738:	73bb      	strb	r3, [r7, #14]
    prev |= level << 3;                                                                 /* set config */
 800773a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800773e:	00db      	lsls	r3, r3, #3
 8007740:	b25a      	sxtb	r2, r3
 8007742:	7bbb      	ldrb	r3, [r7, #14]
 8007744:	b25b      	sxtb	r3, r3
 8007746:	4313      	orrs	r3, r2
 8007748:	b25b      	sxtb	r3, r3
 800774a:	b2db      	uxtb	r3, r3
 800774c:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 800774e:	f107 020e 	add.w	r2, r7, #14
 8007752:	2301      	movs	r3, #1
 8007754:	2137      	movs	r1, #55	@ 0x37
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f7fd fe5d 	bl	8005416 <a_mpu6500_write>
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d005      	beq.n	8007772 <mpu6500_set_fsync_interrupt_level+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800776a:	4805      	ldr	r0, [pc, #20]	@ (8007780 <mpu6500_set_fsync_interrupt_level+0x98>)
 800776c:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800776e:	2301      	movs	r3, #1
 8007770:	e000      	b.n	8007774 <mpu6500_set_fsync_interrupt_level+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 8007772:	2300      	movs	r3, #0
}
 8007774:	4618      	mov	r0, r3
 8007776:	3710      	adds	r7, #16
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}
 800777c:	0801f910 	.word	0x0801f910
 8007780:	0801f938 	.word	0x0801f938

08007784 <mpu6500_set_fsync_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_fsync_interrupt(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
 800778c:	460b      	mov	r3, r1
 800778e:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d101      	bne.n	800779a <mpu6500_set_fsync_interrupt+0x16>
    {
        return 2;                                                                       /* return error */
 8007796:	2302      	movs	r3, #2
 8007798:	e03a      	b.n	8007810 <mpu6500_set_fsync_interrupt+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d001      	beq.n	80077a8 <mpu6500_set_fsync_interrupt+0x24>
    {
        return 3;                                                                       /* return error */
 80077a4:	2303      	movs	r3, #3
 80077a6:	e033      	b.n	8007810 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin config */
 80077a8:	f107 020e 	add.w	r2, r7, #14
 80077ac:	2301      	movs	r3, #1
 80077ae:	2137      	movs	r1, #55	@ 0x37
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7fd fdff 	bl	80053b4 <a_mpu6500_read>
 80077b6:	4603      	mov	r3, r0
 80077b8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80077ba:	7bfb      	ldrb	r3, [r7, #15]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <mpu6500_set_fsync_interrupt+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80077c4:	4814      	ldr	r0, [pc, #80]	@ (8007818 <mpu6500_set_fsync_interrupt+0x94>)
 80077c6:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80077c8:	2301      	movs	r3, #1
 80077ca:	e021      	b.n	8007810 <mpu6500_set_fsync_interrupt+0x8c>
    }
    prev &= ~(1 << 2);                                                                  /* clear config */
 80077cc:	7bbb      	ldrb	r3, [r7, #14]
 80077ce:	f023 0304 	bic.w	r3, r3, #4
 80077d2:	b2db      	uxtb	r3, r3
 80077d4:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 2;                                                                /* set config */
 80077d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077da:	009b      	lsls	r3, r3, #2
 80077dc:	b25a      	sxtb	r2, r3
 80077de:	7bbb      	ldrb	r3, [r7, #14]
 80077e0:	b25b      	sxtb	r3, r3
 80077e2:	4313      	orrs	r3, r2
 80077e4:	b25b      	sxtb	r3, r3
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 80077ea:	f107 020e 	add.w	r2, r7, #14
 80077ee:	2301      	movs	r3, #1
 80077f0:	2137      	movs	r1, #55	@ 0x37
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7fd fe0f 	bl	8005416 <a_mpu6500_write>
 80077f8:	4603      	mov	r3, r0
 80077fa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80077fc:	7bfb      	ldrb	r3, [r7, #15]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d005      	beq.n	800780e <mpu6500_set_fsync_interrupt+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007806:	4805      	ldr	r0, [pc, #20]	@ (800781c <mpu6500_set_fsync_interrupt+0x98>)
 8007808:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 800780a:	2301      	movs	r3, #1
 800780c:	e000      	b.n	8007810 <mpu6500_set_fsync_interrupt+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 800780e:	2300      	movs	r3, #0
}
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	0801f910 	.word	0x0801f910
 800781c:	0801f938 	.word	0x0801f938

08007820 <mpu6500_set_iic_bypass>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_iic_bypass(mpu6500_handle_t *handle, mpu6500_bool_t enable)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
 8007828:	460b      	mov	r3, r1
 800782a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <mpu6500_set_iic_bypass+0x16>
    {
        return 2;                                                                       /* return error */
 8007832:	2302      	movs	r3, #2
 8007834:	e03a      	b.n	80078ac <mpu6500_set_iic_bypass+0x8c>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800783c:	2b01      	cmp	r3, #1
 800783e:	d001      	beq.n	8007844 <mpu6500_set_iic_bypass+0x24>
    {
        return 3;                                                                       /* return error */
 8007840:	2303      	movs	r3, #3
 8007842:	e033      	b.n	80078ac <mpu6500_set_iic_bypass+0x8c>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);         /* read interrupt pin */
 8007844:	f107 020e 	add.w	r2, r7, #14
 8007848:	2301      	movs	r3, #1
 800784a:	2137      	movs	r1, #55	@ 0x37
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7fd fdb1 	bl	80053b4 <a_mpu6500_read>
 8007852:	4603      	mov	r3, r0
 8007854:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007856:	7bfb      	ldrb	r3, [r7, #15]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d005      	beq.n	8007868 <mpu6500_set_iic_bypass+0x48>
    {
        handle->debug_print("mpu6500: read interrupt pin failed.\n");                   /* read interrupt pin failed */
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007860:	4814      	ldr	r0, [pc, #80]	@ (80078b4 <mpu6500_set_iic_bypass+0x94>)
 8007862:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007864:	2301      	movs	r3, #1
 8007866:	e021      	b.n	80078ac <mpu6500_set_iic_bypass+0x8c>
    }
    prev &= ~(1 << 1);                                                                  /* clear config */
 8007868:	7bbb      	ldrb	r3, [r7, #14]
 800786a:	f023 0302 	bic.w	r3, r3, #2
 800786e:	b2db      	uxtb	r3, r3
 8007870:	73bb      	strb	r3, [r7, #14]
    prev |= enable << 1;                                                                /* set config */
 8007872:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007876:	005b      	lsls	r3, r3, #1
 8007878:	b25a      	sxtb	r2, r3
 800787a:	7bbb      	ldrb	r3, [r7, #14]
 800787c:	b25b      	sxtb	r3, r3
 800787e:	4313      	orrs	r3, r2
 8007880:	b25b      	sxtb	r3, r3
 8007882:	b2db      	uxtb	r3, r3
 8007884:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_PIN_CFG, (uint8_t *)&prev, 1);        /* write interrupt pin */
 8007886:	f107 020e 	add.w	r2, r7, #14
 800788a:	2301      	movs	r3, #1
 800788c:	2137      	movs	r1, #55	@ 0x37
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7fd fdc1 	bl	8005416 <a_mpu6500_write>
 8007894:	4603      	mov	r3, r0
 8007896:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 8007898:	7bfb      	ldrb	r3, [r7, #15]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d005      	beq.n	80078aa <mpu6500_set_iic_bypass+0x8a>
    {
        handle->debug_print("mpu6500: write interrupt pin failed.\n");                  /* write interrupt pin failed */
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078a2:	4805      	ldr	r0, [pc, #20]	@ (80078b8 <mpu6500_set_iic_bypass+0x98>)
 80078a4:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 80078a6:	2301      	movs	r3, #1
 80078a8:	e000      	b.n	80078ac <mpu6500_set_iic_bypass+0x8c>
    }
    
    return 0;                                                                           /* success return 0 */
 80078aa:	2300      	movs	r3, #0
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3710      	adds	r7, #16
 80078b0:	46bd      	mov	sp, r7
 80078b2:	bd80      	pop	{r7, pc}
 80078b4:	0801f910 	.word	0x0801f910
 80078b8:	0801f938 	.word	0x0801f938

080078bc <mpu6500_set_interrupt>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_interrupt(mpu6500_handle_t *handle, mpu6500_interrupt_t type, mpu6500_bool_t enable)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
 80078c8:	4613      	mov	r3, r2
 80078ca:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                 /* check handle */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d101      	bne.n	80078d6 <mpu6500_set_interrupt+0x1a>
    {
        return 2;                                                                       /* return error */
 80078d2:	2302      	movs	r3, #2
 80078d4:	e043      	b.n	800795e <mpu6500_set_interrupt+0xa2>
    }
    if (handle->inited != 1)                                                            /* check handle initialization */
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d001      	beq.n	80078e4 <mpu6500_set_interrupt+0x28>
    {
        return 3;                                                                       /* return error */
 80078e0:	2303      	movs	r3, #3
 80078e2:	e03c      	b.n	800795e <mpu6500_set_interrupt+0xa2>
    }
    
    res = a_mpu6500_read(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);          /* read interrupt enable */
 80078e4:	f107 020e 	add.w	r2, r7, #14
 80078e8:	2301      	movs	r3, #1
 80078ea:	2138      	movs	r1, #56	@ 0x38
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f7fd fd61 	bl	80053b4 <a_mpu6500_read>
 80078f2:	4603      	mov	r3, r0
 80078f4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <mpu6500_set_interrupt+0x4c>
    {
        handle->debug_print("mpu6500: read interrupt enable failed.\n");                /* read interrupt enable failed */
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007900:	4819      	ldr	r0, [pc, #100]	@ (8007968 <mpu6500_set_interrupt+0xac>)
 8007902:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007904:	2301      	movs	r3, #1
 8007906:	e02a      	b.n	800795e <mpu6500_set_interrupt+0xa2>
    }
    prev &= ~(1 << type);                                                               /* clear config */
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	2201      	movs	r2, #1
 800790c:	fa02 f303 	lsl.w	r3, r2, r3
 8007910:	b25b      	sxtb	r3, r3
 8007912:	43db      	mvns	r3, r3
 8007914:	b25a      	sxtb	r2, r3
 8007916:	7bbb      	ldrb	r3, [r7, #14]
 8007918:	b25b      	sxtb	r3, r3
 800791a:	4013      	ands	r3, r2
 800791c:	b25b      	sxtb	r3, r3
 800791e:	b2db      	uxtb	r3, r3
 8007920:	73bb      	strb	r3, [r7, #14]
    prev |= enable << type;                                                             /* set config */
 8007922:	78ba      	ldrb	r2, [r7, #2]
 8007924:	78fb      	ldrb	r3, [r7, #3]
 8007926:	fa02 f303 	lsl.w	r3, r2, r3
 800792a:	b25a      	sxtb	r2, r3
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	b25b      	sxtb	r3, r3
 8007930:	4313      	orrs	r3, r2
 8007932:	b25b      	sxtb	r3, r3
 8007934:	b2db      	uxtb	r3, r3
 8007936:	73bb      	strb	r3, [r7, #14]
    res = a_mpu6500_write(handle, MPU6500_REG_INT_ENABLE, (uint8_t *)&prev, 1);         /* write interrupt enable */
 8007938:	f107 020e 	add.w	r2, r7, #14
 800793c:	2301      	movs	r3, #1
 800793e:	2138      	movs	r1, #56	@ 0x38
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7fd fd68 	bl	8005416 <a_mpu6500_write>
 8007946:	4603      	mov	r3, r0
 8007948:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                       /* check result */
 800794a:	7bfb      	ldrb	r3, [r7, #15]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d005      	beq.n	800795c <mpu6500_set_interrupt+0xa0>
    {
        handle->debug_print("mpu6500: write interrupt enable failed.\n");               /* write interrupt enable failed */
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007954:	4805      	ldr	r0, [pc, #20]	@ (800796c <mpu6500_set_interrupt+0xb0>)
 8007956:	4798      	blx	r3
       
        return 1;                                                                       /* return error */
 8007958:	2301      	movs	r3, #1
 800795a:	e000      	b.n	800795e <mpu6500_set_interrupt+0xa2>
    }
    
    return 0;                                                                           /* success return 0 */
 800795c:	2300      	movs	r3, #0
}
 800795e:	4618      	mov	r0, r3
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	0801f960 	.word	0x0801f960
 800796c:	0801f988 	.word	0x0801f988

08007970 <mpu6500_set_accelerometer_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b084      	sub	sp, #16
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	460b      	mov	r3, r1
 800797a:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <mpu6500_set_accelerometer_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007982:	2302      	movs	r3, #2
 8007984:	e022      	b.n	80079cc <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800798c:	2b01      	cmp	r3, #1
 800798e:	d001      	beq.n	8007994 <mpu6500_set_accelerometer_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007990:	2303      	movs	r3, #3
 8007992:	e01b      	b.n	80079cc <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007994:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007998:	121b      	asrs	r3, r3, #8
 800799a:	b21b      	sxth	r3, r3
 800799c:	b2db      	uxtb	r3, r3
 800799e:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 80079a0:	887b      	ldrh	r3, [r7, #2]
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XA_OFFSET_H, buf, 2);        /* write xa offset */
 80079a6:	f107 020c 	add.w	r2, r7, #12
 80079aa:	2302      	movs	r3, #2
 80079ac:	2177      	movs	r1, #119	@ 0x77
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f7fd fd31 	bl	8005416 <a_mpu6500_write>
 80079b4:	4603      	mov	r3, r0
 80079b6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 80079b8:	7bfb      	ldrb	r3, [r7, #15]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d005      	beq.n	80079ca <mpu6500_set_accelerometer_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xa offset failed.\n");         /* write xa offset failed*/
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c2:	4804      	ldr	r0, [pc, #16]	@ (80079d4 <mpu6500_set_accelerometer_x_offset+0x64>)
 80079c4:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 80079c6:	2301      	movs	r3, #1
 80079c8:	e000      	b.n	80079cc <mpu6500_set_accelerometer_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	0801fab4 	.word	0x0801fab4

080079d8 <mpu6500_set_accelerometer_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
 80079e0:	460b      	mov	r3, r1
 80079e2:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <mpu6500_set_accelerometer_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 80079ea:	2302      	movs	r3, #2
 80079ec:	e022      	b.n	8007a34 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d001      	beq.n	80079fc <mpu6500_set_accelerometer_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 80079f8:	2303      	movs	r3, #3
 80079fa:	e01b      	b.n	8007a34 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 80079fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a00:	121b      	asrs	r3, r3, #8
 8007a02:	b21b      	sxth	r3, r3
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007a08:	887b      	ldrh	r3, [r7, #2]
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YA_OFFSET_H, buf, 2);        /* write ya offset */
 8007a0e:	f107 020c 	add.w	r2, r7, #12
 8007a12:	2302      	movs	r3, #2
 8007a14:	217a      	movs	r1, #122	@ 0x7a
 8007a16:	6878      	ldr	r0, [r7, #4]
 8007a18:	f7fd fcfd 	bl	8005416 <a_mpu6500_write>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <mpu6500_set_accelerometer_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write ya offset failed.\n");         /* write ya offset failed*/
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a2a:	4804      	ldr	r0, [pc, #16]	@ (8007a3c <mpu6500_set_accelerometer_y_offset+0x64>)
 8007a2c:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e000      	b.n	8007a34 <mpu6500_set_accelerometer_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007a32:	2300      	movs	r3, #0
}
 8007a34:	4618      	mov	r0, r3
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}
 8007a3c:	0801fafc 	.word	0x0801fafc

08007a40 <mpu6500_set_accelerometer_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_accelerometer_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	460b      	mov	r3, r1
 8007a4a:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d101      	bne.n	8007a56 <mpu6500_set_accelerometer_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007a52:	2302      	movs	r3, #2
 8007a54:	e022      	b.n	8007a9c <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d001      	beq.n	8007a64 <mpu6500_set_accelerometer_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007a60:	2303      	movs	r3, #3
 8007a62:	e01b      	b.n	8007a9c <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007a64:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007a68:	121b      	asrs	r3, r3, #8
 8007a6a:	b21b      	sxth	r3, r3
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007a70:	887b      	ldrh	r3, [r7, #2]
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZA_OFFSET_H, buf, 2);        /* write za offset */
 8007a76:	f107 020c 	add.w	r2, r7, #12
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	217d      	movs	r1, #125	@ 0x7d
 8007a7e:	6878      	ldr	r0, [r7, #4]
 8007a80:	f7fd fcc9 	bl	8005416 <a_mpu6500_write>
 8007a84:	4603      	mov	r3, r0
 8007a86:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d005      	beq.n	8007a9a <mpu6500_set_accelerometer_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write za offset failed.\n");         /* write za offset failed*/
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a92:	4804      	ldr	r0, [pc, #16]	@ (8007aa4 <mpu6500_set_accelerometer_z_offset+0x64>)
 8007a94:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007a96:	2301      	movs	r3, #1
 8007a98:	e000      	b.n	8007a9c <mpu6500_set_accelerometer_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007a9a:	2300      	movs	r3, #0
}
 8007a9c:	4618      	mov	r0, r3
 8007a9e:	3710      	adds	r7, #16
 8007aa0:	46bd      	mov	sp, r7
 8007aa2:	bd80      	pop	{r7, pc}
 8007aa4:	0801fb44 	.word	0x0801fb44

08007aa8 <mpu6500_accelerometer_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_accelerometer_offset_convert_to_register(mpu6500_handle_t *handle, float mg, int16_t *reg)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	b085      	sub	sp, #20
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	60f8      	str	r0, [r7, #12]
 8007ab0:	ed87 0a02 	vstr	s0, [r7, #8]
 8007ab4:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                 /* check handle */
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d101      	bne.n	8007ac0 <mpu6500_accelerometer_offset_convert_to_register+0x18>
    {
        return 2;                       /* return error */
 8007abc:	2302      	movs	r3, #2
 8007abe:	e014      	b.n	8007aea <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)            /* check handle initialization */
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d001      	beq.n	8007ace <mpu6500_accelerometer_offset_convert_to_register+0x26>
    {
        return 3;                       /* return error */
 8007aca:	2303      	movs	r3, #3
 8007acc:	e00d      	b.n	8007aea <mpu6500_accelerometer_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(mg / 0.98f);       /* convert real data to register data */
 8007ace:	ed97 7a02 	vldr	s14, [r7, #8]
 8007ad2:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007af8 <mpu6500_accelerometer_offset_convert_to_register+0x50>
 8007ad6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007ada:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007ade:	ee17 3a90 	vmov	r3, s15
 8007ae2:	b21a      	sxth	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	801a      	strh	r2, [r3, #0]
    
    return 0;                           /* success return 0 */
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3714      	adds	r7, #20
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	3f7ae148 	.word	0x3f7ae148

08007afc <mpu6500_set_gyro_x_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_x_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
 8007b04:	460b      	mov	r3, r1
 8007b06:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d101      	bne.n	8007b12 <mpu6500_set_gyro_x_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007b0e:	2302      	movs	r3, #2
 8007b10:	e022      	b.n	8007b58 <mpu6500_set_gyro_x_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d001      	beq.n	8007b20 <mpu6500_set_gyro_x_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007b1c:	2303      	movs	r3, #3
 8007b1e:	e01b      	b.n	8007b58 <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007b20:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b24:	121b      	asrs	r3, r3, #8
 8007b26:	b21b      	sxth	r3, r3
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007b2c:	887b      	ldrh	r3, [r7, #2]
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_XG_OFFSET_H, buf, 2);        /* write xg offset */
 8007b32:	f107 020c 	add.w	r2, r7, #12
 8007b36:	2302      	movs	r3, #2
 8007b38:	2113      	movs	r1, #19
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f7fd fc6b 	bl	8005416 <a_mpu6500_write>
 8007b40:	4603      	mov	r3, r0
 8007b42:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007b44:	7bfb      	ldrb	r3, [r7, #15]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d005      	beq.n	8007b56 <mpu6500_set_gyro_x_offset+0x5a>
    {
        handle->debug_print("mpu6500: write xg offset failed.\n");         /* write xg offset failed*/
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b4e:	4804      	ldr	r0, [pc, #16]	@ (8007b60 <mpu6500_set_gyro_x_offset+0x64>)
 8007b50:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007b52:	2301      	movs	r3, #1
 8007b54:	e000      	b.n	8007b58 <mpu6500_set_gyro_x_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	0801fb8c 	.word	0x0801fb8c

08007b64 <mpu6500_set_gyro_y_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_y_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b084      	sub	sp, #16
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d101      	bne.n	8007b7a <mpu6500_set_gyro_y_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007b76:	2302      	movs	r3, #2
 8007b78:	e022      	b.n	8007bc0 <mpu6500_set_gyro_y_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d001      	beq.n	8007b88 <mpu6500_set_gyro_y_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007b84:	2303      	movs	r3, #3
 8007b86:	e01b      	b.n	8007bc0 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007b88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007b8c:	121b      	asrs	r3, r3, #8
 8007b8e:	b21b      	sxth	r3, r3
 8007b90:	b2db      	uxtb	r3, r3
 8007b92:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007b94:	887b      	ldrh	r3, [r7, #2]
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_YG_OFFSET_H, buf, 2);        /* write yg offset */
 8007b9a:	f107 020c 	add.w	r2, r7, #12
 8007b9e:	2302      	movs	r3, #2
 8007ba0:	2115      	movs	r1, #21
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f7fd fc37 	bl	8005416 <a_mpu6500_write>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d005      	beq.n	8007bbe <mpu6500_set_gyro_y_offset+0x5a>
    {
        handle->debug_print("mpu6500: write yg offset failed.\n");         /* write yg offset failed*/
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb6:	4804      	ldr	r0, [pc, #16]	@ (8007bc8 <mpu6500_set_gyro_y_offset+0x64>)
 8007bb8:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007bba:	2301      	movs	r3, #1
 8007bbc:	e000      	b.n	8007bc0 <mpu6500_set_gyro_y_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	0801fbd4 	.word	0x0801fbd4

08007bcc <mpu6500_set_gyro_z_offset>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mpu6500_set_gyro_z_offset(mpu6500_handle_t *handle, int16_t offset)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]
 8007bd4:	460b      	mov	r3, r1
 8007bd6:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                    /* check handle */
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <mpu6500_set_gyro_z_offset+0x16>
    {
        return 2;                                                          /* return error */
 8007bde:	2302      	movs	r3, #2
 8007be0:	e022      	b.n	8007c28 <mpu6500_set_gyro_z_offset+0x5c>
    }
    if (handle->inited != 1)                                               /* check handle initialization */
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007be8:	2b01      	cmp	r3, #1
 8007bea:	d001      	beq.n	8007bf0 <mpu6500_set_gyro_z_offset+0x24>
    {
        return 3;                                                          /* return error */
 8007bec:	2303      	movs	r3, #3
 8007bee:	e01b      	b.n	8007c28 <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    buf[0] = (offset >> 8) & 0xFF;                                         /* set high */
 8007bf0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007bf4:	121b      	asrs	r3, r3, #8
 8007bf6:	b21b      	sxth	r3, r3
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	733b      	strb	r3, [r7, #12]
    buf[1] = (offset >> 0) & 0xFF;                                         /* set low */
 8007bfc:	887b      	ldrh	r3, [r7, #2]
 8007bfe:	b2db      	uxtb	r3, r3
 8007c00:	737b      	strb	r3, [r7, #13]
    res = a_mpu6500_write(handle, MPU6500_REG_ZG_OFFSET_H, buf, 2);        /* write zg offset */
 8007c02:	f107 020c 	add.w	r2, r7, #12
 8007c06:	2302      	movs	r3, #2
 8007c08:	2117      	movs	r1, #23
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7fd fc03 	bl	8005416 <a_mpu6500_write>
 8007c10:	4603      	mov	r3, r0
 8007c12:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                          /* check result */
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d005      	beq.n	8007c26 <mpu6500_set_gyro_z_offset+0x5a>
    {
        handle->debug_print("mpu6500: write zg offset failed.\n");         /* write zg offset failed*/
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c1e:	4804      	ldr	r0, [pc, #16]	@ (8007c30 <mpu6500_set_gyro_z_offset+0x64>)
 8007c20:	4798      	blx	r3
       
        return 1;                                                          /* return error */
 8007c22:	2301      	movs	r3, #1
 8007c24:	e000      	b.n	8007c28 <mpu6500_set_gyro_z_offset+0x5c>
    }
    
    return 0;                                                              /* success return 0 */
 8007c26:	2300      	movs	r3, #0
}
 8007c28:	4618      	mov	r0, r3
 8007c2a:	3710      	adds	r7, #16
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	bd80      	pop	{r7, pc}
 8007c30:	0801fc1c 	.word	0x0801fc1c

08007c34 <mpu6500_gyro_offset_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t mpu6500_gyro_offset_convert_to_register(mpu6500_handle_t *handle, float dps, int16_t *reg)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b085      	sub	sp, #20
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	60f8      	str	r0, [r7, #12]
 8007c3c:	ed87 0a02 	vstr	s0, [r7, #8]
 8007c40:	6079      	str	r1, [r7, #4]
    if (handle == NULL)                     /* check handle */
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <mpu6500_gyro_offset_convert_to_register+0x18>
    {
        return 2;                           /* return error */
 8007c48:	2302      	movs	r3, #2
 8007c4a:	e014      	b.n	8007c76 <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    if (handle->inited != 1)                /* check handle initialization */
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d001      	beq.n	8007c5a <mpu6500_gyro_offset_convert_to_register+0x26>
    {
        return 3;                           /* return error */
 8007c56:	2303      	movs	r3, #3
 8007c58:	e00d      	b.n	8007c76 <mpu6500_gyro_offset_convert_to_register+0x42>
    }
    
    *reg = (int16_t)(dps / 0.0305f);        /* convert real data to register data */
 8007c5a:	ed97 7a02 	vldr	s14, [r7, #8]
 8007c5e:	eddf 6a09 	vldr	s13, [pc, #36]	@ 8007c84 <mpu6500_gyro_offset_convert_to_register+0x50>
 8007c62:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007c66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007c6a:	ee17 3a90 	vmov	r3, s15
 8007c6e:	b21a      	sxth	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	801a      	strh	r2, [r3, #0]
    
    return 0;                               /* success return 0 */
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3714      	adds	r7, #20
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
 8007c82:	bf00      	nop
 8007c84:	3cf9db23 	.word	0x3cf9db23

08007c88 <ring_buffer_init>:

#define MIN(X, Y) (((X) < (Y)) ? (X) : (Y))
#define MAX(X, Y) (((X) > (Y)) ? (X) : (Y))


uint8_t ring_buffer_init(ring_buffer_t* rb, uint8_t* buffer, size_t size) {
 8007c88:	b480      	push	{r7}
 8007c8a:	b085      	sub	sp, #20
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
	if (rb == NULL || buffer == NULL || size < (size_t)2) {
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d005      	beq.n	8007ca6 <ring_buffer_init+0x1e>
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d002      	beq.n	8007ca6 <ring_buffer_init+0x1e>
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d801      	bhi.n	8007caa <ring_buffer_init+0x22>
		// Must have valid pointers and buffer size ≥ 2
		return RING_BUFFER_ERROR_INVALID_PARAMETERS;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e00c      	b.n	8007cc4 <ring_buffer_init+0x3c>
	}

	rb->buffer = buffer;
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	601a      	str	r2, [r3, #0]
	rb->size = size;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	605a      	str	r2, [r3, #4]
	rb->head = (size_t)0;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	60da      	str	r2, [r3, #12]

	return RING_BUFFER_SUCCESS;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <ring_buffer_free_space>:
//		return rb->tail - rb->head - (size_t)1; // Free space when tail is ahead of head
//	}
//}


size_t ring_buffer_free_space(ring_buffer_t* rb) {
 8007cd0:	b480      	push	{r7}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->tail + rb->size - rb->head - (size_t)1) % rb->size;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68da      	ldr	r2, [r3, #12]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	441a      	add	r2, r3
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	6852      	ldr	r2, [r2, #4]
 8007cee:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cf2:	fb01 f202 	mul.w	r2, r1, r2
 8007cf6:	1a9b      	subs	r3, r3, r2
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <ring_buffer_used_space>:
uint8_t ring_buffer_is_full(ring_buffer_t* rb) {
	//if (rb == NULL) return (size_t)0;
	return (uint8_t) (((rb->head + (size_t)1) % rb->size) == rb->tail);
}

size_t ring_buffer_used_space(ring_buffer_t* rb) {
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;
	return (rb->head + rb->size - rb->tail) % rb->size;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	689a      	ldr	r2, [r3, #8]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	441a      	add	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68db      	ldr	r3, [r3, #12]
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	687a      	ldr	r2, [r7, #4]
 8007d1e:	6852      	ldr	r2, [r2, #4]
 8007d20:	fbb3 f1f2 	udiv	r1, r3, r2
 8007d24:	fb01 f202 	mul.w	r2, r1, r2
 8007d28:	1a9b      	subs	r3, r3, r2
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	370c      	adds	r7, #12
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr

08007d36 <ring_buffer_linear_free_space>:

 buffer size = 8, tail = 7, head = 2
 [ _ _ H _ _ _ _ T ]
 returns: 7 - 2 - 1 = 4 bytes available before reaching tail
*/
size_t ring_buffer_linear_free_space(ring_buffer_t* rb) {
 8007d36:	b480      	push	{r7}
 8007d38:	b083      	sub	sp, #12
 8007d3a:	af00      	add	r7, sp, #0
 8007d3c:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	689a      	ldr	r2, [r3, #8]
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	68db      	ldr	r3, [r3, #12]
 8007d46:	429a      	cmp	r2, r3
 8007d48:	d310      	bcc.n	8007d6c <ring_buffer_linear_free_space+0x36>
		if (rb->tail == (size_t)0) {
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d106      	bne.n	8007d60 <ring_buffer_linear_free_space+0x2a>
			// Only leave one byte free to distinguish full/empty
			return rb->size - rb->head - (size_t)1;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	689b      	ldr	r3, [r3, #8]
 8007d5a:	1ad3      	subs	r3, r2, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	e00b      	b.n	8007d78 <ring_buffer_linear_free_space+0x42>
		}
		else {
			return rb->size - rb->head;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685a      	ldr	r2, [r3, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	1ad3      	subs	r3, r2, r3
 8007d6a:	e005      	b.n	8007d78 <ring_buffer_linear_free_space+0x42>
		}
	}
	else {
		// Tail is before head, space is up to tail - 1
		return rb->tail - rb->head - (size_t)1;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	68da      	ldr	r2, [r3, #12]
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	3b01      	subs	r3, #1
	}
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <ring_buffer_linear_used_space>:



size_t ring_buffer_linear_used_space(ring_buffer_t* rb) {
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
	//if (rb == NULL) return (size_t)0;

	if (rb->head >= rb->tail) {
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	689a      	ldr	r2, [r3, #8]
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	68db      	ldr	r3, [r3, #12]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d305      	bcc.n	8007da4 <ring_buffer_linear_used_space+0x20>
		// All used data is linear
		return rb->head - rb->tail;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	68db      	ldr	r3, [r3, #12]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	e004      	b.n	8007dae <ring_buffer_linear_used_space+0x2a>
	}
	else {
		// Used data wraps around, so linear part is from tail to end
		return rb->size - rb->tail;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	1ad3      	subs	r3, r2, r3
	}
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	370c      	adds	r7, #12
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <ring_buffer_write_ptr>:



uint8_t* ring_buffer_write_ptr(ring_buffer_t* rb) {
 8007dba:	b480      	push	{r7}
 8007dbc:	b083      	sub	sp, #12
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->head];
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681a      	ldr	r2, [r3, #0]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	689b      	ldr	r3, [r3, #8]
 8007dca:	4413      	add	r3, r2
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <ring_buffer_read_ptr>:


uint8_t* ring_buffer_read_ptr(ring_buffer_t* rb) {
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0) {
//		return NULL;
//	}

	return &rb->buffer[rb->tail];
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68db      	ldr	r3, [r3, #12]
 8007de8:	4413      	add	r3, r2
}
 8007dea:	4618      	mov	r0, r3
 8007dec:	370c      	adds	r7, #12
 8007dee:	46bd      	mov	sp, r7
 8007df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df4:	4770      	bx	lr

08007df6 <ring_buffer_enqueue_arr>:

size_t ring_buffer_enqueue_arr(ring_buffer_t* rb, uint8_t* byte_array, size_t len) {
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b088      	sub	sp, #32
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	60f8      	str	r0, [r7, #12]
 8007dfe:	60b9      	str	r1, [r7, #8]
 8007e00:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || byte_array == NULL || rb->size == (size_t)0) {
//		return (size_t)0;
//	}

	size_t free_space = ring_buffer_free_space(rb);
 8007e02:	68f8      	ldr	r0, [r7, #12]
 8007e04:	f7ff ff64 	bl	8007cd0 <ring_buffer_free_space>
 8007e08:	61f8      	str	r0, [r7, #28]
	size_t to_write = MIN(len, free_space);
 8007e0a:	69fa      	ldr	r2, [r7, #28]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	bf28      	it	cs
 8007e12:	4613      	movcs	r3, r2
 8007e14:	61bb      	str	r3, [r7, #24]

	size_t linear_part = MIN(ring_buffer_linear_free_space(rb), to_write);
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f7ff ff8d 	bl	8007d36 <ring_buffer_linear_free_space>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	69bb      	ldr	r3, [r7, #24]
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d904      	bls.n	8007e2e <ring_buffer_enqueue_arr+0x38>
 8007e24:	68f8      	ldr	r0, [r7, #12]
 8007e26:	f7ff ff86 	bl	8007d36 <ring_buffer_linear_free_space>
 8007e2a:	4603      	mov	r3, r0
 8007e2c:	e000      	b.n	8007e30 <ring_buffer_enqueue_arr+0x3a>
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	617b      	str	r3, [r7, #20]
	memcpy(&rb->buffer[rb->head], byte_array, linear_part);
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	681a      	ldr	r2, [r3, #0]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	689b      	ldr	r3, [r3, #8]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	697a      	ldr	r2, [r7, #20]
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f012 fe56 	bl	801aaf2 <memcpy>
	rb->head = (rb->head + linear_part) % rb->size;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	689a      	ldr	r2, [r3, #8]
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	4413      	add	r3, r2
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	6852      	ldr	r2, [r2, #4]
 8007e52:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e56:	fb01 f202 	mul.w	r2, r1, r2
 8007e5a:	1a9a      	subs	r2, r3, r2
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	609a      	str	r2, [r3, #8]

	size_t wrapped_part = to_write - linear_part;
 8007e60:	69ba      	ldr	r2, [r7, #24]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	613b      	str	r3, [r7, #16]
	if (wrapped_part > (size_t)0) {
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d018      	beq.n	8007ea0 <ring_buffer_enqueue_arr+0xaa>
		memcpy(&rb->buffer[rb->head], &byte_array[linear_part], wrapped_part);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	18d0      	adds	r0, r2, r3
 8007e78:	68ba      	ldr	r2, [r7, #8]
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	4413      	add	r3, r2
 8007e7e:	693a      	ldr	r2, [r7, #16]
 8007e80:	4619      	mov	r1, r3
 8007e82:	f012 fe36 	bl	801aaf2 <memcpy>
		rb->head = (rb->head + wrapped_part) % rb->size;
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	689a      	ldr	r2, [r3, #8]
 8007e8a:	693b      	ldr	r3, [r7, #16]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	68fa      	ldr	r2, [r7, #12]
 8007e90:	6852      	ldr	r2, [r2, #4]
 8007e92:	fbb3 f1f2 	udiv	r1, r3, r2
 8007e96:	fb01 f202 	mul.w	r2, r1, r2
 8007e9a:	1a9a      	subs	r2, r3, r2
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	609a      	str	r2, [r3, #8]
	}

	return to_write;
 8007ea0:	69bb      	ldr	r3, [r7, #24]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3720      	adds	r7, #32
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <ring_buffer_dequeue_arr>:


size_t ring_buffer_dequeue_arr(ring_buffer_t* rb, uint8_t* out_array, size_t len) {
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b08a      	sub	sp, #40	@ 0x28
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	60b9      	str	r1, [r7, #8]
 8007eb4:	607a      	str	r2, [r7, #4]
//	if (rb == NULL || rb->buffer == NULL || rb->size == (size_t)0 || out_array == NULL) {
//		return (size_t)0;
//	}

	size_t used = ring_buffer_used_space(rb);
 8007eb6:	68f8      	ldr	r0, [r7, #12]
 8007eb8:	f7ff ff24 	bl	8007d04 <ring_buffer_used_space>
 8007ebc:	6278      	str	r0, [r7, #36]	@ 0x24
	if (used == (size_t)0) {
 8007ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d101      	bne.n	8007ec8 <ring_buffer_dequeue_arr+0x1e>
		return (size_t)0; // Nothing to read
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	e048      	b.n	8007f5a <ring_buffer_dequeue_arr+0xb0>
	}

	size_t to_read = MIN(len, used);
 8007ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	bf28      	it	cs
 8007ed0:	4613      	movcs	r3, r2
 8007ed2:	623b      	str	r3, [r7, #32]

	// How many bytes we can read linearly (without wrapping)
	size_t linear_data = ring_buffer_linear_used_space(rb);
 8007ed4:	68f8      	ldr	r0, [r7, #12]
 8007ed6:	f7ff ff55 	bl	8007d84 <ring_buffer_linear_used_space>
 8007eda:	61f8      	str	r0, [r7, #28]

	
	size_t first_chunk = MIN(to_read, linear_data);
 8007edc:	69fa      	ldr	r2, [r7, #28]
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	bf28      	it	cs
 8007ee4:	4613      	movcs	r3, r2
 8007ee6:	61bb      	str	r3, [r7, #24]

	memcpy(out_array, &rb->buffer[rb->tail], first_chunk);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	69ba      	ldr	r2, [r7, #24]
 8007ef4:	4619      	mov	r1, r3
 8007ef6:	68b8      	ldr	r0, [r7, #8]
 8007ef8:	f012 fdfb 	bl	801aaf2 <memcpy>
	rb->tail = (rb->tail + first_chunk) % rb->size;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	68da      	ldr	r2, [r3, #12]
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	4413      	add	r3, r2
 8007f04:	68fa      	ldr	r2, [r7, #12]
 8007f06:	6852      	ldr	r2, [r2, #4]
 8007f08:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f0c:	fb01 f202 	mul.w	r2, r1, r2
 8007f10:	1a9a      	subs	r2, r3, r2
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	60da      	str	r2, [r3, #12]

	if (to_read > first_chunk) {
 8007f16:	6a3a      	ldr	r2, [r7, #32]
 8007f18:	69bb      	ldr	r3, [r7, #24]
 8007f1a:	429a      	cmp	r2, r3
 8007f1c:	d91c      	bls.n	8007f58 <ring_buffer_dequeue_arr+0xae>
		size_t second_chunk = to_read - first_chunk;
 8007f1e:	6a3a      	ldr	r2, [r7, #32]
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	1ad3      	subs	r3, r2, r3
 8007f24:	617b      	str	r3, [r7, #20]
		memcpy(&out_array[first_chunk], &rb->buffer[rb->tail], second_chunk);
 8007f26:	68ba      	ldr	r2, [r7, #8]
 8007f28:	69bb      	ldr	r3, [r7, #24]
 8007f2a:	18d0      	adds	r0, r2, r3
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	4413      	add	r3, r2
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f012 fdda 	bl	801aaf2 <memcpy>
		rb->tail = (rb->tail + second_chunk) % rb->size;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	68da      	ldr	r2, [r3, #12]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	4413      	add	r3, r2
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	6852      	ldr	r2, [r2, #4]
 8007f4a:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f4e:	fb01 f202 	mul.w	r2, r1, r2
 8007f52:	1a9a      	subs	r2, r3, r2
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	60da      	str	r2, [r3, #12]
	}

	return (size_t)to_read;
 8007f58:	6a3b      	ldr	r3, [r7, #32]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3728      	adds	r7, #40	@ 0x28
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <ring_buffer_advance_tail>:
	}

	return to_peek - offset;
}

void ring_buffer_advance_tail(ring_buffer_t* rb, size_t len) {
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	6078      	str	r0, [r7, #4]
 8007f6a:	6039      	str	r1, [r7, #0]
//	if (rb == NULL) {
//		return;
//	}
	size_t used = ring_buffer_used_space(rb);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff fec9 	bl	8007d04 <ring_buffer_used_space>
 8007f72:	60f8      	str	r0, [r7, #12]
	size_t advance_len = MIN(len, used);
 8007f74:	68fa      	ldr	r2, [r7, #12]
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	bf28      	it	cs
 8007f7c:	4613      	movcs	r3, r2
 8007f7e:	60bb      	str	r3, [r7, #8]
	rb->tail = (rb->tail + advance_len) % rb->size;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	68da      	ldr	r2, [r3, #12]
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	4413      	add	r3, r2
 8007f88:	687a      	ldr	r2, [r7, #4]
 8007f8a:	6852      	ldr	r2, [r2, #4]
 8007f8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007f90:	fb01 f202 	mul.w	r2, r1, r2
 8007f94:	1a9a      	subs	r2, r3, r2
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	60da      	str	r2, [r3, #12]
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}

08007fa2 <ring_buffer_clear>:
	size_t free_space = ring_buffer_free_space(rb);
	size_t advance_len = MIN(len, free_space);
	rb->head = (rb->head + advance_len) % rb->size;
}

void ring_buffer_clear(ring_buffer_t* rb) {
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
//	if (rb == NULL) {
//		return;
//	}
	rb->head = (size_t)0;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	609a      	str	r2, [r3, #8]
	rb->tail = (size_t)0;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	60da      	str	r2, [r3, #12]
}
 8007fb6:	bf00      	nop
 8007fb8:	370c      	adds	r7, #12
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr
	...

08007fc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b082      	sub	sp, #8
 8007fc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007fca:	2300      	movs	r3, #0
 8007fcc:	607b      	str	r3, [r7, #4]
 8007fce:	4b10      	ldr	r3, [pc, #64]	@ (8008010 <MX_DMA_Init+0x4c>)
 8007fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fd2:	4a0f      	ldr	r2, [pc, #60]	@ (8008010 <MX_DMA_Init+0x4c>)
 8007fd4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007fda:	4b0d      	ldr	r3, [pc, #52]	@ (8008010 <MX_DMA_Init+0x4c>)
 8007fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fe2:	607b      	str	r3, [r7, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2105      	movs	r1, #5
 8007fea:	203a      	movs	r0, #58	@ 0x3a
 8007fec:	f002 fcf4 	bl	800a9d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8007ff0:	203a      	movs	r0, #58	@ 0x3a
 8007ff2:	f002 fd0d 	bl	800aa10 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	2105      	movs	r1, #5
 8007ffa:	2046      	movs	r0, #70	@ 0x46
 8007ffc:	f002 fcec 	bl	800a9d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8008000:	2046      	movs	r0, #70	@ 0x46
 8008002:	f002 fd05 	bl	800aa10 <HAL_NVIC_EnableIRQ>

}
 8008006:	bf00      	nop
 8008008:	3708      	adds	r7, #8
 800800a:	46bd      	mov	sp, r7
 800800c:	bd80      	pop	{r7, pc}
 800800e:	bf00      	nop
 8008010:	40023800 	.word	0x40023800

08008014 <arr_from_freqf>:
// esc_pwm_dc.c
#include "esc_pwm.h"

static inline uint32_t arr_from_freqf(uint32_t base_hz, float pwm_hz_f) {
 8008014:	b580      	push	{r7, lr}
 8008016:	b086      	sub	sp, #24
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	ed87 0a00 	vstr	s0, [r7]
    if (pwm_hz_f < 1e-3f) pwm_hz_f = 1e-3f;           // protecție
 8008020:	edd7 7a00 	vldr	s15, [r7]
 8008024:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800808c <arr_from_freqf+0x78>
 8008028:	eef4 7ac7 	vcmpe.f32	s15, s14
 800802c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008030:	d501      	bpl.n	8008036 <arr_from_freqf+0x22>
 8008032:	4b17      	ldr	r3, [pc, #92]	@ (8008090 <arr_from_freqf+0x7c>)
 8008034:	603b      	str	r3, [r7, #0]
    double ticks = (float)base_hz / (float)pwm_hz_f; // folosește double pt. precizie
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	ee07 3a90 	vmov	s15, r3
 800803c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008040:	edd7 7a00 	vldr	s15, [r7]
 8008044:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8008048:	ee16 0a90 	vmov	r0, s13
 800804c:	f7f8 fa7c 	bl	8000548 <__aeabi_f2d>
 8008050:	4602      	mov	r2, r0
 8008052:	460b      	mov	r3, r1
 8008054:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint32_t period_ticks = (uint32_t)(ticks + 0.5);   // rotunjire la cel mai apropiat
 8008058:	f04f 0200 	mov.w	r2, #0
 800805c:	4b0d      	ldr	r3, [pc, #52]	@ (8008094 <arr_from_freqf+0x80>)
 800805e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008062:	f7f8 f913 	bl	800028c <__adddf3>
 8008066:	4602      	mov	r2, r0
 8008068:	460b      	mov	r3, r1
 800806a:	4610      	mov	r0, r2
 800806c:	4619      	mov	r1, r3
 800806e:	f7f8 fd9b 	bl	8000ba8 <__aeabi_d2uiz>
 8008072:	4603      	mov	r3, r0
 8008074:	617b      	str	r3, [r7, #20]
    if (period_ticks < 1u) period_ticks = 1u;
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	2b00      	cmp	r3, #0
 800807a:	d101      	bne.n	8008080 <arr_from_freqf+0x6c>
 800807c:	2301      	movs	r3, #1
 800807e:	617b      	str	r3, [r7, #20]
    return period_ticks - 1u;                          // ARR = top - 1
 8008080:	697b      	ldr	r3, [r7, #20]
 8008082:	3b01      	subs	r3, #1
}
 8008084:	4618      	mov	r0, r3
 8008086:	3718      	adds	r7, #24
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}
 800808c:	3a83126f 	.word	0x3a83126f
 8008090:	3a83126f 	.word	0x3a83126f
 8008094:	3fe00000 	.word	0x3fe00000

08008098 <ccr_from_duty>:

static inline uint32_t ccr_from_duty(uint32_t arr, float duty) {
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	ed87 0a00 	vstr	s0, [r7]
    if (duty < 0.0f) duty = 0.0f;
 80080a4:	edd7 7a00 	vldr	s15, [r7]
 80080a8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80080ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080b0:	d502      	bpl.n	80080b8 <ccr_from_duty+0x20>
 80080b2:	f04f 0300 	mov.w	r3, #0
 80080b6:	603b      	str	r3, [r7, #0]
    if (duty > 1.0f) duty = 1.0f;
 80080b8:	edd7 7a00 	vldr	s15, [r7]
 80080bc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80080c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c8:	dd02      	ble.n	80080d0 <ccr_from_duty+0x38>
 80080ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80080ce:	603b      	str	r3, [r7, #0]
    uint32_t top = arr + 1u;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60bb      	str	r3, [r7, #8]
    uint32_t ccr = (uint32_t)((float)top * (float)duty + 0.5f);
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	ee07 3a90 	vmov	s15, r3
 80080dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80080e0:	edd7 7a00 	vldr	s15, [r7]
 80080e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080e8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80080ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80080f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80080f4:	ee17 3a90 	vmov	r3, s15
 80080f8:	60fb      	str	r3, [r7, #12]
    if (ccr > arr) ccr = arr;
 80080fa:	68fa      	ldr	r2, [r7, #12]
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d901      	bls.n	8008106 <ccr_from_duty+0x6e>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	60fb      	str	r3, [r7, #12]
    return ccr;
 8008106:	68fb      	ldr	r3, [r7, #12]
}
 8008108:	4618      	mov	r0, r3
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <pwm_init>:
// 1) make this non-static and let caller provide storage, or
// 2) keep an array of TIM_HandleTypeDef.
HAL_StatusTypeDef pwm_init(pwm_t *esc,
    TIM_HandleTypeDef *htim, uint32_t channel,
    uint32_t timer_clock_hz, float pwm_hz, float duty)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b09c      	sub	sp, #112	@ 0x70
 8008118:	af00      	add	r7, sp, #0
 800811a:	6178      	str	r0, [r7, #20]
 800811c:	6139      	str	r1, [r7, #16]
 800811e:	60fa      	str	r2, [r7, #12]
 8008120:	60bb      	str	r3, [r7, #8]
 8008122:	ed87 0a01 	vstr	s0, [r7, #4]
 8008126:	edc7 0a00 	vstr	s1, [r7]
    if (!esc || !htim) return HAL_ERROR;
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d002      	beq.n	8008136 <pwm_init+0x22>
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d101      	bne.n	800813a <pwm_init+0x26>
 8008136:	2301      	movs	r3, #1
 8008138:	e0de      	b.n	80082f8 <pwm_init+0x1e4>
    if (timer_clock_hz < 1000000u) return HAL_ERROR;
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	4a70      	ldr	r2, [pc, #448]	@ (8008300 <pwm_init+0x1ec>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d801      	bhi.n	8008146 <pwm_init+0x32>
 8008142:	2301      	movs	r3, #1
 8008144:	e0d8      	b.n	80082f8 <pwm_init+0x1e4>

    HAL_StatusTypeDef st;
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008146:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800814a:	2200      	movs	r2, #0
 800814c:	601a      	str	r2, [r3, #0]
 800814e:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8008150:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8008154:	2200      	movs	r2, #0
 8008156:	601a      	str	r2, [r3, #0]
 8008158:	605a      	str	r2, [r3, #4]
 800815a:	609a      	str	r2, [r3, #8]
 800815c:	60da      	str	r2, [r3, #12]
 800815e:	611a      	str	r2, [r3, #16]
 8008160:	615a      	str	r2, [r3, #20]
 8008162:	619a      	str	r2, [r3, #24]
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008164:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008168:	2200      	movs	r2, #0
 800816a:	601a      	str	r2, [r3, #0]
 800816c:	605a      	str	r2, [r3, #4]
 800816e:	609a      	str	r2, [r3, #8]
 8008170:	60da      	str	r2, [r3, #12]

    esc->htim       = htim;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	693a      	ldr	r2, [r7, #16]
 8008176:	601a      	str	r2, [r3, #0]
    esc->channel    = channel;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	605a      	str	r2, [r3, #4]
    esc->tim_clk_hz = timer_clock_hz;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	ee07 3a90 	vmov	s15, r3
 8008184:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	edc3 7a02 	vstr	s15, [r3, #8]
    esc->pwm_hz     = (pwm_hz <= 0.0f) ? 50.0f : pwm_hz;
 800818e:	edd7 7a01 	vldr	s15, [r7, #4]
 8008192:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800819a:	d801      	bhi.n	80081a0 <pwm_init+0x8c>
 800819c:	4b59      	ldr	r3, [pc, #356]	@ (8008304 <pwm_init+0x1f0>)
 800819e:	e000      	b.n	80081a2 <pwm_init+0x8e>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	697a      	ldr	r2, [r7, #20]
 80081a4:	60d3      	str	r3, [r2, #12]
    esc->duty       = (duty < 0.0f) ? 0.0f : (duty > 1.0f ? 1.0f : duty);
 80081a6:	edd7 7a00 	vldr	s15, [r7]
 80081aa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80081ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081b2:	d502      	bpl.n	80081ba <pwm_init+0xa6>
 80081b4:	f04f 0300 	mov.w	r3, #0
 80081b8:	e00c      	b.n	80081d4 <pwm_init+0xc0>
 80081ba:	edd7 7a00 	vldr	s15, [r7]
 80081be:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80081c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081ca:	dd02      	ble.n	80081d2 <pwm_init+0xbe>
 80081cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80081d0:	e000      	b.n	80081d4 <pwm_init+0xc0>
 80081d2:	683b      	ldr	r3, [r7, #0]
 80081d4:	697a      	ldr	r2, [r7, #20]
 80081d6:	6113      	str	r3, [r2, #16]

    uint32_t psc = (timer_clock_hz / 1000000u) - 1u;  // 1 MHz base
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	4a4b      	ldr	r2, [pc, #300]	@ (8008308 <pwm_init+0x1f4>)
 80081dc:	fba2 2303 	umull	r2, r3, r2, r3
 80081e0:	0c9b      	lsrs	r3, r3, #18
 80081e2:	3b01      	subs	r3, #1
 80081e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (psc > 0xFFFFu) return HAL_ERROR;
 80081e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80081e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80081ec:	d301      	bcc.n	80081f2 <pwm_init+0xde>
 80081ee:	2301      	movs	r3, #1
 80081f0:	e082      	b.n	80082f8 <pwm_init+0x1e4>

    //HAL_TIM_Base_DeInit(htim);
    HAL_TIM_PWM_DeInit(htim);
 80081f2:	6938      	ldr	r0, [r7, #16]
 80081f4:	f006 f99f 	bl	800e536 <HAL_TIM_PWM_DeInit>

    htim->Init.Prescaler         = psc;
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80081fc:	605a      	str	r2, [r3, #4]
    htim->Init.CounterMode       = TIM_COUNTERMODE_UP;
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	2200      	movs	r2, #0
 8008202:	609a      	str	r2, [r3, #8]
    htim->Init.Period            = arr_from_freqf(1000000u, esc->pwm_hz);
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	edd3 7a03 	vldr	s15, [r3, #12]
 800820a:	eeb0 0a67 	vmov.f32	s0, s15
 800820e:	483f      	ldr	r0, [pc, #252]	@ (800830c <pwm_init+0x1f8>)
 8008210:	f7ff ff00 	bl	8008014 <arr_from_freqf>
 8008214:	4602      	mov	r2, r0
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	60da      	str	r2, [r3, #12]
    htim->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	2200      	movs	r2, #0
 800821e:	611a      	str	r2, [r3, #16]
    htim->Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	2280      	movs	r2, #128	@ 0x80
 8008224:	619a      	str	r2, [r3, #24]

    st = HAL_TIM_Base_Init(htim);
 8008226:	6938      	ldr	r0, [r7, #16]
 8008228:	f006 f80e 	bl	800e248 <HAL_TIM_Base_Init>
 800822c:	4603      	mov	r3, r0
 800822e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8008232:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008236:	2b00      	cmp	r3, #0
 8008238:	d002      	beq.n	8008240 <pwm_init+0x12c>
 800823a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800823e:	e05b      	b.n	80082f8 <pwm_init+0x1e4>


    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008240:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008244:	637b      	str	r3, [r7, #52]	@ 0x34
    st = HAL_TIM_ConfigClockSource(htim, &sClockSourceConfig);
 8008246:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800824a:	4619      	mov	r1, r3
 800824c:	6938      	ldr	r0, [r7, #16]
 800824e:	f006 fc55 	bl	800eafc <HAL_TIM_ConfigClockSource>
 8008252:	4603      	mov	r3, r0
 8008254:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

    st = HAL_TIM_PWM_Init(htim);
 8008258:	6938      	ldr	r0, [r7, #16]
 800825a:	f006 f91d 	bl	800e498 <HAL_TIM_PWM_Init>
 800825e:	4603      	mov	r3, r0
 8008260:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 8008264:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008268:	2b00      	cmp	r3, #0
 800826a:	d002      	beq.n	8008272 <pwm_init+0x15e>
 800826c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008270:	e042      	b.n	80082f8 <pwm_init+0x1e4>


    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008272:	2300      	movs	r3, #0
 8008274:	663b      	str	r3, [r7, #96]	@ 0x60
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008276:	2300      	movs	r3, #0
 8008278:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_TIMEx_MasterConfigSynchronization(htim, &sMasterConfig);
 800827a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800827e:	4619      	mov	r1, r3
 8008280:	6938      	ldr	r0, [r7, #16]
 8008282:	f007 f847 	bl	800f314 <HAL_TIMEx_MasterConfigSynchronization>
    if (st != HAL_OK) return st;
 8008286:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800828a:	2b00      	cmp	r3, #0
 800828c:	d002      	beq.n	8008294 <pwm_init+0x180>
 800828e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008292:	e031      	b.n	80082f8 <pwm_init+0x1e4>


    TIM_OC_InitTypeDef oc = {0};
 8008294:	f107 0318 	add.w	r3, r7, #24
 8008298:	2200      	movs	r2, #0
 800829a:	601a      	str	r2, [r3, #0]
 800829c:	605a      	str	r2, [r3, #4]
 800829e:	609a      	str	r2, [r3, #8]
 80082a0:	60da      	str	r2, [r3, #12]
 80082a2:	611a      	str	r2, [r3, #16]
 80082a4:	615a      	str	r2, [r3, #20]
 80082a6:	619a      	str	r2, [r3, #24]
    oc.OCMode     = TIM_OCMODE_PWM1;
 80082a8:	2360      	movs	r3, #96	@ 0x60
 80082aa:	61bb      	str	r3, [r7, #24]
    oc.OCPolarity = TIM_OCPOLARITY_HIGH;
 80082ac:	2300      	movs	r3, #0
 80082ae:	623b      	str	r3, [r7, #32]
    oc.OCFastMode = TIM_OCFAST_DISABLE;
 80082b0:	2300      	movs	r3, #0
 80082b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    oc.Pulse      = ccr_from_duty(htim->Init.Period, esc->duty);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	68da      	ldr	r2, [r3, #12]
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80082be:	eeb0 0a67 	vmov.f32	s0, s15
 80082c2:	4610      	mov	r0, r2
 80082c4:	f7ff fee8 	bl	8008098 <ccr_from_duty>
 80082c8:	4603      	mov	r3, r0
 80082ca:	61fb      	str	r3, [r7, #28]

    st = HAL_TIM_PWM_ConfigChannel(htim, &oc, channel);
 80082cc:	f107 0318 	add.w	r3, r7, #24
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	4619      	mov	r1, r3
 80082d4:	6938      	ldr	r0, [r7, #16]
 80082d6:	f006 fb4f 	bl	800e978 <HAL_TIM_PWM_ConfigChannel>
 80082da:	4603      	mov	r3, r0
 80082dc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    if (st != HAL_OK) return st;
 80082e0:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d002      	beq.n	80082ee <pwm_init+0x1da>
 80082e8:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80082ec:	e004      	b.n	80082f8 <pwm_init+0x1e4>

    return HAL_TIM_PWM_Start(htim, channel);
 80082ee:	68f9      	ldr	r1, [r7, #12]
 80082f0:	6938      	ldr	r0, [r7, #16]
 80082f2:	f006 f989 	bl	800e608 <HAL_TIM_PWM_Start>
 80082f6:	4603      	mov	r3, r0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3770      	adds	r7, #112	@ 0x70
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	000f423f 	.word	0x000f423f
 8008304:	42480000 	.word	0x42480000
 8008308:	431bde83 	.word	0x431bde83
 800830c:	000f4240 	.word	0x000f4240

08008310 <pwm_set_duty>:



void pwm_set_duty(pwm_t *esc, float duty_0_1) {
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
 8008318:	ed87 0a00 	vstr	s0, [r7]
    if (!esc) return;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d04a      	beq.n	80083b8 <pwm_set_duty+0xa8>
    esc->duty = (duty_0_1 < 0.0f) ? 0.0f : (duty_0_1 > 1.0f ? 1.0f : duty_0_1);
 8008322:	edd7 7a00 	vldr	s15, [r7]
 8008326:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800832a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800832e:	d502      	bpl.n	8008336 <pwm_set_duty+0x26>
 8008330:	f04f 0300 	mov.w	r3, #0
 8008334:	e00c      	b.n	8008350 <pwm_set_duty+0x40>
 8008336:	edd7 7a00 	vldr	s15, [r7]
 800833a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800833e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008346:	dd02      	ble.n	800834e <pwm_set_duty+0x3e>
 8008348:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800834c:	e000      	b.n	8008350 <pwm_set_duty+0x40>
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6113      	str	r3, [r2, #16]
    uint32_t arr = __HAL_TIM_GET_AUTORELOAD(esc->htim);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800835c:	60fb      	str	r3, [r7, #12]
    uint32_t ccr = ccr_from_duty(arr, esc->duty);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	edd3 7a04 	vldr	s15, [r3, #16]
 8008364:	eeb0 0a67 	vmov.f32	s0, s15
 8008368:	68f8      	ldr	r0, [r7, #12]
 800836a:	f7ff fe95 	bl	8008098 <ccr_from_duty>
 800836e:	60b8      	str	r0, [r7, #8]
    __HAL_TIM_SET_COMPARE(esc->htim, esc->channel, ccr);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	2b00      	cmp	r3, #0
 8008376:	d105      	bne.n	8008384 <pwm_set_duty+0x74>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	635a      	str	r2, [r3, #52]	@ 0x34
 8008382:	e01a      	b.n	80083ba <pwm_set_duty+0xaa>
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	2b04      	cmp	r3, #4
 800838a:	d105      	bne.n	8008398 <pwm_set_duty+0x88>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	681a      	ldr	r2, [r3, #0]
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	6393      	str	r3, [r2, #56]	@ 0x38
 8008396:	e010      	b.n	80083ba <pwm_set_duty+0xaa>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	2b08      	cmp	r3, #8
 800839e:	d105      	bne.n	80083ac <pwm_set_duty+0x9c>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	681a      	ldr	r2, [r3, #0]
 80083a6:	68bb      	ldr	r3, [r7, #8]
 80083a8:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80083aa:	e006      	b.n	80083ba <pwm_set_duty+0xaa>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80083b6:	e000      	b.n	80083ba <pwm_set_duty+0xaa>
    if (!esc) return;
 80083b8:	bf00      	nop
}
 80083ba:	3710      	adds	r7, #16
 80083bc:	46bd      	mov	sp, r7
 80083be:	bd80      	pop	{r7, pc}

080083c0 <esc_pwm_throttle_to_duty_cycle>:
    HAL_TIM_GenerateEvent(esc->htim, TIM_EVENTSOURCE_UPDATE);
    __HAL_TIM_ENABLE(esc->htim);
}

float esc_pwm_throttle_to_duty_cycle(float pwm_hz, float min_us, float max_us, float throttle)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b089      	sub	sp, #36	@ 0x24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	ed87 0a03 	vstr	s0, [r7, #12]
 80083ca:	edc7 0a02 	vstr	s1, [r7, #8]
 80083ce:	ed87 1a01 	vstr	s2, [r7, #4]
 80083d2:	edc7 1a00 	vstr	s3, [r7]
    if (throttle < 0.0f) throttle = 0.0f;
 80083d6:	edd7 7a00 	vldr	s15, [r7]
 80083da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083e2:	d502      	bpl.n	80083ea <esc_pwm_throttle_to_duty_cycle+0x2a>
 80083e4:	f04f 0300 	mov.w	r3, #0
 80083e8:	603b      	str	r3, [r7, #0]
    if (throttle > 1.0f) throttle = 1.0f;
 80083ea:	edd7 7a00 	vldr	s15, [r7]
 80083ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80083f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80083f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083fa:	dd02      	ble.n	8008402 <esc_pwm_throttle_to_duty_cycle+0x42>
 80083fc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008400:	603b      	str	r3, [r7, #0]

    // Period of the PWM in microseconds
    float period_us = 1000000.0f / pwm_hz;
 8008402:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8008484 <esc_pwm_throttle_to_duty_cycle+0xc4>
 8008406:	ed97 7a03 	vldr	s14, [r7, #12]
 800840a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800840e:	edc7 7a06 	vstr	s15, [r7, #24]

    // Map throttle to pulse width in microseconds
    float pulse_us = min_us + throttle * (max_us - min_us);
 8008412:	ed97 7a01 	vldr	s14, [r7, #4]
 8008416:	edd7 7a02 	vldr	s15, [r7, #8]
 800841a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800841e:	edd7 7a00 	vldr	s15, [r7]
 8008422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008426:	ed97 7a02 	vldr	s14, [r7, #8]
 800842a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800842e:	edc7 7a05 	vstr	s15, [r7, #20]

    // Duty cycle = pulse / period
    float duty = pulse_us / period_us;
 8008432:	edd7 6a05 	vldr	s13, [r7, #20]
 8008436:	ed97 7a06 	vldr	s14, [r7, #24]
 800843a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800843e:	edc7 7a07 	vstr	s15, [r7, #28]

    // Clamp to [0..1]
    if (duty < 0.0f) duty = 0.0f;
 8008442:	edd7 7a07 	vldr	s15, [r7, #28]
 8008446:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800844a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800844e:	d502      	bpl.n	8008456 <esc_pwm_throttle_to_duty_cycle+0x96>
 8008450:	f04f 0300 	mov.w	r3, #0
 8008454:	61fb      	str	r3, [r7, #28]
    if (duty > 1.0f) duty = 1.0f;
 8008456:	edd7 7a07 	vldr	s15, [r7, #28]
 800845a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800845e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008466:	dd02      	ble.n	800846e <esc_pwm_throttle_to_duty_cycle+0xae>
 8008468:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800846c:	61fb      	str	r3, [r7, #28]

    return duty;
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	ee07 3a90 	vmov	s15, r3
}
 8008474:	eeb0 0a67 	vmov.f32	s0, s15
 8008478:	3724      	adds	r7, #36	@ 0x24
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	49742400 	.word	0x49742400

08008488 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8008488:	b580      	push	{r7, lr}
 800848a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	app_main_start(NULL);
 800848c:	2000      	movs	r0, #0
 800848e:	f000 ffdb 	bl	8009448 <app_main_start>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8008492:	4a05      	ldr	r2, [pc, #20]	@ (80084a8 <MX_FREERTOS_Init+0x20>)
 8008494:	2100      	movs	r1, #0
 8008496:	4805      	ldr	r0, [pc, #20]	@ (80084ac <MX_FREERTOS_Init+0x24>)
 8008498:	f00b fd2c 	bl	8013ef4 <osThreadNew>
 800849c:	4603      	mov	r3, r0
 800849e:	4a04      	ldr	r2, [pc, #16]	@ (80084b0 <MX_FREERTOS_Init+0x28>)
 80084a0:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80084a2:	bf00      	nop
 80084a4:	bd80      	pop	{r7, pc}
 80084a6:	bf00      	nop
 80084a8:	080206b0 	.word	0x080206b0
 80084ac:	080084b5 	.word	0x080084b5
 80084b0:	200009a0 	.word	0x200009a0

080084b4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b082      	sub	sp, #8
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 80084bc:	f00e fe64 	bl	8017188 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(pdMS_TO_TICKS(1000));
 80084c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80084c4:	f00b fda8 	bl	8014018 <osDelay>
 80084c8:	e7fa      	b.n	80084c0 <StartDefaultTask+0xc>
	...

080084cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08a      	sub	sp, #40	@ 0x28
 80084d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084d2:	f107 0314 	add.w	r3, r7, #20
 80084d6:	2200      	movs	r2, #0
 80084d8:	601a      	str	r2, [r3, #0]
 80084da:	605a      	str	r2, [r3, #4]
 80084dc:	609a      	str	r2, [r3, #8]
 80084de:	60da      	str	r2, [r3, #12]
 80084e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80084e2:	2300      	movs	r3, #0
 80084e4:	613b      	str	r3, [r7, #16]
 80084e6:	4b26      	ldr	r3, [pc, #152]	@ (8008580 <MX_GPIO_Init+0xb4>)
 80084e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ea:	4a25      	ldr	r2, [pc, #148]	@ (8008580 <MX_GPIO_Init+0xb4>)
 80084ec:	f043 0304 	orr.w	r3, r3, #4
 80084f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80084f2:	4b23      	ldr	r3, [pc, #140]	@ (8008580 <MX_GPIO_Init+0xb4>)
 80084f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084f6:	f003 0304 	and.w	r3, r3, #4
 80084fa:	613b      	str	r3, [r7, #16]
 80084fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80084fe:	2300      	movs	r3, #0
 8008500:	60fb      	str	r3, [r7, #12]
 8008502:	4b1f      	ldr	r3, [pc, #124]	@ (8008580 <MX_GPIO_Init+0xb4>)
 8008504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008506:	4a1e      	ldr	r2, [pc, #120]	@ (8008580 <MX_GPIO_Init+0xb4>)
 8008508:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800850c:	6313      	str	r3, [r2, #48]	@ 0x30
 800850e:	4b1c      	ldr	r3, [pc, #112]	@ (8008580 <MX_GPIO_Init+0xb4>)
 8008510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008516:	60fb      	str	r3, [r7, #12]
 8008518:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800851a:	2300      	movs	r3, #0
 800851c:	60bb      	str	r3, [r7, #8]
 800851e:	4b18      	ldr	r3, [pc, #96]	@ (8008580 <MX_GPIO_Init+0xb4>)
 8008520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008522:	4a17      	ldr	r2, [pc, #92]	@ (8008580 <MX_GPIO_Init+0xb4>)
 8008524:	f043 0301 	orr.w	r3, r3, #1
 8008528:	6313      	str	r3, [r2, #48]	@ 0x30
 800852a:	4b15      	ldr	r3, [pc, #84]	@ (8008580 <MX_GPIO_Init+0xb4>)
 800852c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	60bb      	str	r3, [r7, #8]
 8008534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008536:	2300      	movs	r3, #0
 8008538:	607b      	str	r3, [r7, #4]
 800853a:	4b11      	ldr	r3, [pc, #68]	@ (8008580 <MX_GPIO_Init+0xb4>)
 800853c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800853e:	4a10      	ldr	r2, [pc, #64]	@ (8008580 <MX_GPIO_Init+0xb4>)
 8008540:	f043 0302 	orr.w	r3, r3, #2
 8008544:	6313      	str	r3, [r2, #48]	@ 0x30
 8008546:	4b0e      	ldr	r3, [pc, #56]	@ (8008580 <MX_GPIO_Init+0xb4>)
 8008548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800854a:	f003 0302 	and.w	r3, r3, #2
 800854e:	607b      	str	r3, [r7, #4]
 8008550:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8008552:	2200      	movs	r2, #0
 8008554:	2110      	movs	r1, #16
 8008556:	480b      	ldr	r0, [pc, #44]	@ (8008584 <MX_GPIO_Init+0xb8>)
 8008558:	f003 f96e 	bl	800b838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800855c:	2310      	movs	r3, #16
 800855e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008560:	2301      	movs	r3, #1
 8008562:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008564:	2300      	movs	r3, #0
 8008566:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008568:	2300      	movs	r3, #0
 800856a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800856c:	f107 0314 	add.w	r3, r7, #20
 8008570:	4619      	mov	r1, r3
 8008572:	4804      	ldr	r0, [pc, #16]	@ (8008584 <MX_GPIO_Init+0xb8>)
 8008574:	f002 fec8 	bl	800b308 <HAL_GPIO_Init>

}
 8008578:	bf00      	nop
 800857a:	3728      	adds	r7, #40	@ 0x28
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	40023800 	.word	0x40023800
 8008584:	40020000 	.word	0x40020000

08008588 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *data, int len) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af00      	add	r7, sp, #0
 800858e:	60f8      	str	r0, [r7, #12]
 8008590:	60b9      	str	r1, [r7, #8]
 8008592:	607a      	str	r2, [r7, #4]
    static char err_header[] = "ERROR->";
int sent_size = len;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	617b      	str	r3, [r7, #20]
    if (file == 2) { // stderror to usb
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2b02      	cmp	r3, #2
 800859c:	d103      	bne.n	80085a6 <_write+0x1e>
        //CDC_Transmit_FS((uint8_t*)err_header, sizeof(err_header) - 1);
        usart1_send_data(err_header, sizeof(err_header) - 1);
 800859e:	2107      	movs	r1, #7
 80085a0:	4807      	ldr	r0, [pc, #28]	@ (80085c0 <_write+0x38>)
 80085a2:	f001 ffbf 	bl	800a524 <usart1_send_data>
    }
    //CDC_Transmit_FS((uint8_t*)data, len);
    sent_size = usart1_send_data(data, len);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	4619      	mov	r1, r3
 80085aa:	68b8      	ldr	r0, [r7, #8]
 80085ac:	f001 ffba 	bl	800a524 <usart1_send_data>
 80085b0:	4603      	mov	r3, r0
 80085b2:	617b      	str	r3, [r7, #20]
    return sent_size;
 80085b4:	697b      	ldr	r3, [r7, #20]
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3718      	adds	r7, #24
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	2000004c 	.word	0x2000004c

080085c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80085c8:	f002 f8c4 	bl	800a754 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80085cc:	f000 f818 	bl	8008600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085d0:	f7ff ff7c 	bl	80084cc <MX_GPIO_Init>
  MX_DMA_Init();
 80085d4:	f7ff fcf6 	bl	8007fc4 <MX_DMA_Init>
  MX_SPI1_Init();
 80085d8:	f001 f87c 	bl	80096d4 <MX_SPI1_Init>
  MX_TIM4_Init();
 80085dc:	f001 fb5a 	bl	8009c94 <MX_TIM4_Init>
  MX_TIM2_Init();
 80085e0:	f001 fac2 	bl	8009b68 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80085e4:	f001 fc3e 	bl	8009e64 <MX_USART1_UART_Init>
  //HAL_UART_Receive_DMA(&huart1, uart_rx_buffer, UART_RX_BUFFER_SIZE);

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80085e8:	f00b fc3a 	bl	8013e60 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80085ec:	f7ff ff4c 	bl	8008488 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80085f0:	f00b fc5a 	bl	8013ea8 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //dshot_test_sweep();
	  HAL_Delay(1000); // Only runs if scheduler fails
 80085f4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80085f8:	f002 f8ee 	bl	800a7d8 <HAL_Delay>
 80085fc:	e7fa      	b.n	80085f4 <main+0x30>
	...

08008600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b094      	sub	sp, #80	@ 0x50
 8008604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008606:	f107 0320 	add.w	r3, r7, #32
 800860a:	2230      	movs	r2, #48	@ 0x30
 800860c:	2100      	movs	r1, #0
 800860e:	4618      	mov	r0, r3
 8008610:	f012 f980 	bl	801a914 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008614:	f107 030c 	add.w	r3, r7, #12
 8008618:	2200      	movs	r2, #0
 800861a:	601a      	str	r2, [r3, #0]
 800861c:	605a      	str	r2, [r3, #4]
 800861e:	609a      	str	r2, [r3, #8]
 8008620:	60da      	str	r2, [r3, #12]
 8008622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008624:	2300      	movs	r3, #0
 8008626:	60bb      	str	r3, [r7, #8]
 8008628:	4b28      	ldr	r3, [pc, #160]	@ (80086cc <SystemClock_Config+0xcc>)
 800862a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800862c:	4a27      	ldr	r2, [pc, #156]	@ (80086cc <SystemClock_Config+0xcc>)
 800862e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008632:	6413      	str	r3, [r2, #64]	@ 0x40
 8008634:	4b25      	ldr	r3, [pc, #148]	@ (80086cc <SystemClock_Config+0xcc>)
 8008636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008638:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800863c:	60bb      	str	r3, [r7, #8]
 800863e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008640:	2300      	movs	r3, #0
 8008642:	607b      	str	r3, [r7, #4]
 8008644:	4b22      	ldr	r3, [pc, #136]	@ (80086d0 <SystemClock_Config+0xd0>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a21      	ldr	r2, [pc, #132]	@ (80086d0 <SystemClock_Config+0xd0>)
 800864a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	4b1f      	ldr	r3, [pc, #124]	@ (80086d0 <SystemClock_Config+0xd0>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008658:	607b      	str	r3, [r7, #4]
 800865a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800865c:	2301      	movs	r3, #1
 800865e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008660:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008664:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008666:	2302      	movs	r3, #2
 8008668:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800866a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800866e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8008670:	2304      	movs	r3, #4
 8008672:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8008674:	23a8      	movs	r3, #168	@ 0xa8
 8008676:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008678:	2302      	movs	r3, #2
 800867a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800867c:	2307      	movs	r3, #7
 800867e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008680:	f107 0320 	add.w	r3, r7, #32
 8008684:	4618      	mov	r0, r3
 8008686:	f004 fb43 	bl	800cd10 <HAL_RCC_OscConfig>
 800868a:	4603      	mov	r3, r0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d001      	beq.n	8008694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8008690:	f000 f832 	bl	80086f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008694:	230f      	movs	r3, #15
 8008696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008698:	2302      	movs	r3, #2
 800869a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800869c:	2300      	movs	r3, #0
 800869e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80086a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80086a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80086a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80086aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80086ac:	f107 030c 	add.w	r3, r7, #12
 80086b0:	2105      	movs	r1, #5
 80086b2:	4618      	mov	r0, r3
 80086b4:	f004 fda4 	bl	800d200 <HAL_RCC_ClockConfig>
 80086b8:	4603      	mov	r3, r0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80086be:	f000 f81b 	bl	80086f8 <Error_Handler>
  }
}
 80086c2:	bf00      	nop
 80086c4:	3750      	adds	r7, #80	@ 0x50
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	40023800 	.word	0x40023800
 80086d0:	40007000 	.word	0x40007000

080086d4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b082      	sub	sp, #8
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a04      	ldr	r2, [pc, #16]	@ (80086f4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80086e2:	4293      	cmp	r3, r2
 80086e4:	d101      	bne.n	80086ea <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80086e6:	f002 f857 	bl	800a798 <HAL_IncTick>
  /* USER CODE BEGIN Callback 1 */
  else if(htim == &htim4){
		//flight_controller_loop();
	}
  /* USER CODE END Callback 1 */
}
 80086ea:	bf00      	nop
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	40010000 	.word	0x40010000

080086f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80086fc:	b672      	cpsid	i
}
 80086fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008700:	bf00      	nop
 8008702:	e7fd      	b.n	8008700 <Error_Handler+0x8>

08008704 <ctrl_timer_cb>:


#define STACK_WORDS(bytes) ((bytes)/sizeof(StackType_t))

static void ctrl_timer_cb(TimerHandle_t arg)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 800870c:	2300      	movs	r3, #0
 800870e:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(ctrl_task_h, &hpw);
 8008710:	4b0c      	ldr	r3, [pc, #48]	@ (8008744 <ctrl_timer_cb+0x40>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f107 020c 	add.w	r2, r7, #12
 8008718:	4611      	mov	r1, r2
 800871a:	4618      	mov	r0, r3
 800871c:	f00d fc52 	bl	8015fc4 <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d00a      	beq.n	800873c <ctrl_timer_cb+0x38>
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d007      	beq.n	800873c <ctrl_timer_cb+0x38>
 800872c:	4b06      	ldr	r3, [pc, #24]	@ (8008748 <ctrl_timer_cb+0x44>)
 800872e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(ctrl_task_h);   // task-context safe
}
 800873c:	bf00      	nop
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}
 8008744:	200016b4 	.word	0x200016b4
 8008748:	e000ed04 	.word	0xe000ed04

0800874c <write_motor_timer_cb>:

static void write_motor_timer_cb(TimerHandle_t arg)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b084      	sub	sp, #16
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
     BaseType_t hpw = pdFALSE;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
     vTaskNotifyGiveFromISR(write_motor_main_h, &hpw);
 8008758:	4b0c      	ldr	r3, [pc, #48]	@ (800878c <write_motor_timer_cb+0x40>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f107 020c 	add.w	r2, r7, #12
 8008760:	4611      	mov	r1, r2
 8008762:	4618      	mov	r0, r3
 8008764:	f00d fc2e 	bl	8015fc4 <vTaskNotifyGiveFromISR>
     if (hpw) portYIELD_FROM_ISR(hpw);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d00a      	beq.n	8008784 <write_motor_timer_cb+0x38>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d007      	beq.n	8008784 <write_motor_timer_cb+0x38>
 8008774:	4b06      	ldr	r3, [pc, #24]	@ (8008790 <write_motor_timer_cb+0x44>)
 8008776:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800877a:	601a      	str	r2, [r3, #0]
 800877c:	f3bf 8f4f 	dsb	sy
 8008780:	f3bf 8f6f 	isb	sy
    //xTaskNotifyGive(write_motor_main_h);   // task-context safe
}
 8008784:	bf00      	nop
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	200016b8 	.word	0x200016b8
 8008790:	e000ed04 	.word	0xe000ed04

08008794 <init_imu>:

static void init_imu(){
 8008794:	b580      	push	{r7, lr}
 8008796:	b082      	sub	sp, #8
 8008798:	af00      	add	r7, sp, #0
    int16_t temp_int16_t;
    uint8_t mpu_res;
	mpu_res = mpu6500_basic_init(MPU6500_INTERFACE_SPI, MPU6500_ADDRESS_0x68);
 800879a:	2168      	movs	r1, #104	@ 0x68
 800879c:	2001      	movs	r0, #1
 800879e:	f7fc f8d1 	bl	8004944 <mpu6500_basic_init>
 80087a2:	4603      	mov	r3, r0
 80087a4:	71fb      	strb	r3, [r7, #7]
	if(mpu_res == 0){
 80087a6:	79fb      	ldrb	r3, [r7, #7]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d14e      	bne.n	800884a <init_imu+0xb6>
		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 80087ac:	1d3b      	adds	r3, r7, #4
 80087ae:	4619      	mov	r1, r3
 80087b0:	ed9f 0a29 	vldr	s0, [pc, #164]	@ 8008858 <init_imu+0xc4>
 80087b4:	4829      	ldr	r0, [pc, #164]	@ (800885c <init_imu+0xc8>)
 80087b6:	f7ff fa3d 	bl	8007c34 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_x_offset(&gs_handle_mpu6500, temp_int16_t);
 80087ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80087be:	4619      	mov	r1, r3
 80087c0:	4826      	ldr	r0, [pc, #152]	@ (800885c <init_imu+0xc8>)
 80087c2:	f7ff f99b 	bl	8007afc <mpu6500_set_gyro_x_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 80087c6:	1d3b      	adds	r3, r7, #4
 80087c8:	4619      	mov	r1, r3
 80087ca:	ed9f 0a23 	vldr	s0, [pc, #140]	@ 8008858 <init_imu+0xc4>
 80087ce:	4823      	ldr	r0, [pc, #140]	@ (800885c <init_imu+0xc8>)
 80087d0:	f7ff fa30 	bl	8007c34 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_y_offset(&gs_handle_mpu6500, temp_int16_t);
 80087d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80087d8:	4619      	mov	r1, r3
 80087da:	4820      	ldr	r0, [pc, #128]	@ (800885c <init_imu+0xc8>)
 80087dc:	f7ff f9c2 	bl	8007b64 <mpu6500_set_gyro_y_offset>

		  mpu6500_gyro_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 80087e0:	1d3b      	adds	r3, r7, #4
 80087e2:	4619      	mov	r1, r3
 80087e4:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 8008858 <init_imu+0xc4>
 80087e8:	481c      	ldr	r0, [pc, #112]	@ (800885c <init_imu+0xc8>)
 80087ea:	f7ff fa23 	bl	8007c34 <mpu6500_gyro_offset_convert_to_register>
		  mpu6500_set_gyro_z_offset(&gs_handle_mpu6500, temp_int16_t);
 80087ee:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80087f2:	4619      	mov	r1, r3
 80087f4:	4819      	ldr	r0, [pc, #100]	@ (800885c <init_imu+0xc8>)
 80087f6:	f7ff f9e9 	bl	8007bcc <mpu6500_set_gyro_z_offset>


		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 80087fa:	1d3b      	adds	r3, r7, #4
 80087fc:	4619      	mov	r1, r3
 80087fe:	ed9f 0a16 	vldr	s0, [pc, #88]	@ 8008858 <init_imu+0xc4>
 8008802:	4816      	ldr	r0, [pc, #88]	@ (800885c <init_imu+0xc8>)
 8008804:	f7ff f950 	bl	8007aa8 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_x_offset(&gs_handle_mpu6500, temp_int16_t);
 8008808:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800880c:	4619      	mov	r1, r3
 800880e:	4813      	ldr	r0, [pc, #76]	@ (800885c <init_imu+0xc8>)
 8008810:	f7ff f8ae 	bl	8007970 <mpu6500_set_accelerometer_x_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 8008814:	1d3b      	adds	r3, r7, #4
 8008816:	4619      	mov	r1, r3
 8008818:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8008858 <init_imu+0xc4>
 800881c:	480f      	ldr	r0, [pc, #60]	@ (800885c <init_imu+0xc8>)
 800881e:	f7ff f943 	bl	8007aa8 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_y_offset(&gs_handle_mpu6500, temp_int16_t);
 8008822:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008826:	4619      	mov	r1, r3
 8008828:	480c      	ldr	r0, [pc, #48]	@ (800885c <init_imu+0xc8>)
 800882a:	f7ff f8d5 	bl	80079d8 <mpu6500_set_accelerometer_y_offset>

		  mpu6500_accelerometer_offset_convert_to_register(&gs_handle_mpu6500, 0.0f, &temp_int16_t);
 800882e:	1d3b      	adds	r3, r7, #4
 8008830:	4619      	mov	r1, r3
 8008832:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8008858 <init_imu+0xc4>
 8008836:	4809      	ldr	r0, [pc, #36]	@ (800885c <init_imu+0xc8>)
 8008838:	f7ff f936 	bl	8007aa8 <mpu6500_accelerometer_offset_convert_to_register>
		  mpu6500_set_accelerometer_z_offset(&gs_handle_mpu6500, temp_int16_t);
 800883c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8008840:	4619      	mov	r1, r3
 8008842:	4806      	ldr	r0, [pc, #24]	@ (800885c <init_imu+0xc8>)
 8008844:	f7ff f8fc 	bl	8007a40 <mpu6500_set_accelerometer_z_offset>
	  }
	  else{
		  printf("MPU6500 failed to initialize");
	  }
}
 8008848:	e002      	b.n	8008850 <init_imu+0xbc>
		  printf("MPU6500 failed to initialize");
 800884a:	4805      	ldr	r0, [pc, #20]	@ (8008860 <init_imu+0xcc>)
 800884c:	f011 fea8 	bl	801a5a0 <iprintf>
}
 8008850:	bf00      	nop
 8008852:	3708      	adds	r7, #8
 8008854:	46bd      	mov	sp, r7
 8008856:	bd80      	pop	{r7, pc}
 8008858:	00000000 	.word	0x00000000
 800885c:	20000560 	.word	0x20000560
 8008860:	08020508 	.word	0x08020508

08008864 <flight_controller_main>:


static void flight_controller_main(void *arg)
{
 8008864:	b590      	push	{r4, r7, lr}
 8008866:	b095      	sub	sp, #84	@ 0x54
 8008868:	af02      	add	r7, sp, #8
 800886a:	6078      	str	r0, [r7, #4]
    float accel[3];
    float gyro[3];
    coord3D gyro_data;
    coord3D accel_data;

    ctrl_task_h = xTaskGetCurrentTaskHandle();
 800886c:	f00d f9c0 	bl	8015bf0 <xTaskGetCurrentTaskHandle>
 8008870:	4603      	mov	r3, r0
 8008872:	4a4d      	ldr	r2, [pc, #308]	@ (80089a8 <flight_controller_main+0x144>)
 8008874:	6013      	str	r3, [r2, #0]

        static TimerHandle_t tmr = NULL;
        if (tmr == NULL) {
 8008876:	4b4d      	ldr	r3, [pc, #308]	@ (80089ac <flight_controller_main+0x148>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d10a      	bne.n	8008894 <flight_controller_main+0x30>
        	tmr = xTimerCreate(
 800887e:	4b4c      	ldr	r3, [pc, #304]	@ (80089b0 <flight_controller_main+0x14c>)
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	2300      	movs	r3, #0
 8008884:	2201      	movs	r2, #1
 8008886:	2101      	movs	r1, #1
 8008888:	484a      	ldr	r0, [pc, #296]	@ (80089b4 <flight_controller_main+0x150>)
 800888a:	f00d fccf 	bl	801622c <xTimerCreate>
 800888e:	4603      	mov	r3, r0
 8008890:	4a46      	ldr	r2, [pc, #280]	@ (80089ac <flight_controller_main+0x148>)
 8008892:	6013      	str	r3, [r2, #0]
                NULL,                             // timer ID used to carry arg
				ctrl_timer_cb                // callback
            );
        }

        if (tmr != NULL) {
 8008894:	4b45      	ldr	r3, [pc, #276]	@ (80089ac <flight_controller_main+0x148>)
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	2b00      	cmp	r3, #0
 800889a:	d00b      	beq.n	80088b4 <flight_controller_main+0x50>
            xTimerStart(tmr, 0);
 800889c:	4b43      	ldr	r3, [pc, #268]	@ (80089ac <flight_controller_main+0x148>)
 800889e:	681c      	ldr	r4, [r3, #0]
 80088a0:	f00c fe5e 	bl	8015560 <xTaskGetTickCount>
 80088a4:	4602      	mov	r2, r0
 80088a6:	2300      	movs	r3, #0
 80088a8:	9300      	str	r3, [sp, #0]
 80088aa:	2300      	movs	r3, #0
 80088ac:	2101      	movs	r1, #1
 80088ae:	4620      	mov	r0, r4
 80088b0:	f00d fd1a 	bl	80162e8 <xTimerGenericCommand>
        }

    /* set 1 */
      for (;;)
      {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80088b4:	f04f 31ff 	mov.w	r1, #4294967295
 80088b8:	2001      	movs	r0, #1
 80088ba:	f00d fb37 	bl	8015f2c <ulTaskNotifyTake>

        len = 1;
 80088be:	2301      	movs	r3, #1
 80088c0:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
        if (mpu6500_read(&gs_handle_mpu6500,
 80088c4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80088c8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80088cc:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80088d0:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 80088d4:	9301      	str	r3, [sp, #4]
 80088d6:	f107 0320 	add.w	r3, r7, #32
 80088da:	9300      	str	r3, [sp, #0]
 80088dc:	4603      	mov	r3, r0
 80088de:	4836      	ldr	r0, [pc, #216]	@ (80089b8 <flight_controller_main+0x154>)
 80088e0:	f7fc ff86 	bl	80057f0 <mpu6500_read>
 80088e4:	4603      	mov	r3, r0
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d006      	beq.n	80088f8 <flight_controller_main+0x94>
                    (int16_t (*)[3])&accel_raw, (float (*)[3])&accel,
                    (int16_t (*)[3])&gyro_raw, (float (*)[3])&gyro,
                     &len) != 0
                    )
        {
            printf("MPU6500 read error\n");
 80088ea:	4834      	ldr	r0, [pc, #208]	@ (80089bc <flight_controller_main+0x158>)
 80088ec:	f011 fec8 	bl	801a680 <puts>
            flight_control_loop_disarm_esc(&fcl);
 80088f0:	4833      	ldr	r0, [pc, #204]	@ (80089c0 <flight_controller_main+0x15c>)
 80088f2:	f7f8 ffb4 	bl	800185e <flight_control_loop_disarm_esc>
 80088f6:	e052      	b.n	800899e <flight_controller_main+0x13a>
            //return; // implement some form of recovery if the mpu read fails
        }
        else{
            accel_data.x = G2MS2(accel[0]);
 80088f8:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80088fc:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 80089c4 <flight_controller_main+0x160>
 8008900:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008904:	edc7 7a02 	vstr	s15, [r7, #8]
            accel_data.y = -G2MS2(accel[1]);
 8008908:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800890c:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80089c4 <flight_controller_main+0x160>
 8008910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008914:	eef1 7a67 	vneg.f32	s15, s15
 8008918:	edc7 7a03 	vstr	s15, [r7, #12]
            accel_data.z = -G2MS2(accel[2]);
 800891c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8008920:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 80089c4 <flight_controller_main+0x160>
 8008924:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008928:	eef1 7a67 	vneg.f32	s15, s15
 800892c:	edc7 7a04 	vstr	s15, [r7, #16]
            gyro_data.x = radians(gyro[0]);
 8008930:	edd7 7a08 	vldr	s15, [r7, #32]
 8008934:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80089c8 <flight_controller_main+0x164>
 8008938:	ee67 7a87 	vmul.f32	s15, s15, s14
 800893c:	edc7 7a05 	vstr	s15, [r7, #20]
            gyro_data.y = -radians(gyro[1]);
 8008940:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8008944:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 80089c8 <flight_controller_main+0x164>
 8008948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800894c:	eef1 7a67 	vneg.f32	s15, s15
 8008950:	edc7 7a06 	vstr	s15, [r7, #24]
            gyro_data.z = -radians(gyro[2]);
 8008954:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8008958:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80089c8 <flight_controller_main+0x164>
 800895c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008960:	eef1 7a67 	vneg.f32	s15, s15
 8008964:	edc7 7a07 	vstr	s15, [r7, #28]
            flight_control_loop_update_imu(&fcl, gyro_data, accel_data);
 8008968:	ed97 5a02 	vldr	s10, [r7, #8]
 800896c:	edd7 5a03 	vldr	s11, [r7, #12]
 8008970:	ed97 6a04 	vldr	s12, [r7, #16]
 8008974:	edd7 6a05 	vldr	s13, [r7, #20]
 8008978:	ed97 7a06 	vldr	s14, [r7, #24]
 800897c:	edd7 7a07 	vldr	s15, [r7, #28]
 8008980:	eef0 1a45 	vmov.f32	s3, s10
 8008984:	eeb0 2a65 	vmov.f32	s4, s11
 8008988:	eef0 2a46 	vmov.f32	s5, s12
 800898c:	eeb0 0a66 	vmov.f32	s0, s13
 8008990:	eef0 0a47 	vmov.f32	s1, s14
 8008994:	eeb0 1a67 	vmov.f32	s2, s15
 8008998:	4809      	ldr	r0, [pc, #36]	@ (80089c0 <flight_controller_main+0x15c>)
 800899a:	f7f9 faa9 	bl	8001ef0 <flight_control_loop_update_imu>
        }
        flight_control_loop_tick(&fcl);
 800899e:	4808      	ldr	r0, [pc, #32]	@ (80089c0 <flight_controller_main+0x15c>)
 80089a0:	f7f9 f8d0 	bl	8001b44 <flight_control_loop_tick>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80089a4:	e786      	b.n	80088b4 <flight_controller_main+0x50>
 80089a6:	bf00      	nop
 80089a8:	200016b4 	.word	0x200016b4
 80089ac:	200042cc 	.word	0x200042cc
 80089b0:	08008705 	.word	0x08008705
 80089b4:	08020528 	.word	0x08020528
 80089b8:	20000560 	.word	0x20000560
 80089bc:	0802053c 	.word	0x0802053c
 80089c0:	2000124c 	.word	0x2000124c
 80089c4:	411ce80a 	.word	0x411ce80a
 80089c8:	3c8efa35 	.word	0x3c8efa35

080089cc <write_motor_main>:
      }
}


static void write_motor_main(void *arg){
 80089cc:	b590      	push	{r4, r7, lr}
 80089ce:	b091      	sub	sp, #68	@ 0x44
 80089d0:	af02      	add	r7, sp, #8
 80089d2:	6078      	str	r0, [r7, #4]
    write_motor_main_h = xTaskGetCurrentTaskHandle();
 80089d4:	f00d f90c 	bl	8015bf0 <xTaskGetCurrentTaskHandle>
 80089d8:	4603      	mov	r3, r0
 80089da:	4a54      	ldr	r2, [pc, #336]	@ (8008b2c <write_motor_main+0x160>)
 80089dc:	6013      	str	r3, [r2, #0]

    float duty_cycle;
    static TimerHandle_t s_writeMotorTimer = NULL;
    if (s_writeMotorTimer == NULL) {
 80089de:	4b54      	ldr	r3, [pc, #336]	@ (8008b30 <write_motor_main+0x164>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d10a      	bne.n	80089fc <write_motor_main+0x30>
        s_writeMotorTimer = xTimerCreate(
 80089e6:	4b53      	ldr	r3, [pc, #332]	@ (8008b34 <write_motor_main+0x168>)
 80089e8:	9300      	str	r3, [sp, #0]
 80089ea:	2300      	movs	r3, #0
 80089ec:	2201      	movs	r2, #1
 80089ee:	2102      	movs	r1, #2
 80089f0:	4851      	ldr	r0, [pc, #324]	@ (8008b38 <write_motor_main+0x16c>)
 80089f2:	f00d fc1b 	bl	801622c <xTimerCreate>
 80089f6:	4603      	mov	r3, r0
 80089f8:	4a4d      	ldr	r2, [pc, #308]	@ (8008b30 <write_motor_main+0x164>)
 80089fa:	6013      	str	r3, [r2, #0]
            NULL,                             // timer ID used to carry arg
			write_motor_timer_cb                // callback
        );
    }

    if (s_writeMotorTimer != NULL) {
 80089fc:	4b4c      	ldr	r3, [pc, #304]	@ (8008b30 <write_motor_main+0x164>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d00b      	beq.n	8008a1c <write_motor_main+0x50>
        xTimerStart(s_writeMotorTimer, 0);
 8008a04:	4b4a      	ldr	r3, [pc, #296]	@ (8008b30 <write_motor_main+0x164>)
 8008a06:	681c      	ldr	r4, [r3, #0]
 8008a08:	f00c fdaa 	bl	8015560 <xTaskGetTickCount>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	2300      	movs	r3, #0
 8008a10:	9300      	str	r3, [sp, #0]
 8008a12:	2300      	movs	r3, #0
 8008a14:	2101      	movs	r1, #1
 8008a16:	4620      	mov	r0, r4
 8008a18:	f00d fc66 	bl	80162e8 <xTimerGenericCommand>
    }


    g_motors_throttle_mutex = xSemaphoreCreateMutex();
 8008a1c:	2001      	movs	r0, #1
 8008a1e:	f00b fd5e 	bl	80144de <xQueueCreateMutex>
 8008a22:	4603      	mov	r3, r0
 8008a24:	4a45      	ldr	r2, [pc, #276]	@ (8008b3c <write_motor_main+0x170>)
 8008a26:	6013      	str	r3, [r2, #0]
    //servos_init();
    memset(g_motors_throttle, 0, sizeof(g_motors_throttle));
 8008a28:	2210      	movs	r2, #16
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	4844      	ldr	r0, [pc, #272]	@ (8008b40 <write_motor_main+0x174>)
 8008a2e:	f011 ff71 	bl	801a914 <memset>
    xSemaphoreGive(g_motors_throttle_mutex);
 8008a32:	4b42      	ldr	r3, [pc, #264]	@ (8008b3c <write_motor_main+0x170>)
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	2300      	movs	r3, #0
 8008a38:	2200      	movs	r2, #0
 8008a3a:	2100      	movs	r1, #0
 8008a3c:	f00b fd68 	bl	8014510 <xQueueGenericSend>

    for (;;)
    {
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008a40:	f04f 31ff 	mov.w	r1, #4294967295
 8008a44:	2001      	movs	r0, #1
 8008a46:	f00d fa71 	bl	8015f2c <ulTaskNotifyTake>

        xSemaphoreTake(g_motors_throttle_mutex, portMAX_DELAY);
 8008a4a:	4b3c      	ldr	r3, [pc, #240]	@ (8008b3c <write_motor_main+0x170>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f04f 31ff 	mov.w	r1, #4294967295
 8008a52:	4618      	mov	r0, r3
 8008a54:	f00b ffde 	bl	8014a14 <xQueueSemaphoreTake>
        flight_control_loop_get_motors_throttle(&fcl, g_motors_throttle);
 8008a58:	4939      	ldr	r1, [pc, #228]	@ (8008b40 <write_motor_main+0x174>)
 8008a5a:	483a      	ldr	r0, [pc, #232]	@ (8008b44 <write_motor_main+0x178>)
 8008a5c:	f7f9 fa94 	bl	8001f88 <flight_control_loop_get_motors_throttle>
				for(int i=0; i<4; i++){
					g_motors_throttle[i] = target_throttle;
				}
		#endif

        for (size_t i = 0; i < 4; i++) {
 8008a60:	2300      	movs	r3, #0
 8008a62:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a64:	e057      	b.n	8008b16 <write_motor_main+0x14a>
        	duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, g_motors_throttle[i]);
 8008a66:	4a36      	ldr	r2, [pc, #216]	@ (8008b40 <write_motor_main+0x174>)
 8008a68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a6a:	009b      	lsls	r3, r3, #2
 8008a6c:	4413      	add	r3, r2
 8008a6e:	edd3 7a00 	vldr	s15, [r3]
 8008a72:	eef0 1a67 	vmov.f32	s3, s15
 8008a76:	ed9f 1a34 	vldr	s2, [pc, #208]	@ 8008b48 <write_motor_main+0x17c>
 8008a7a:	eddf 0a34 	vldr	s1, [pc, #208]	@ 8008b4c <write_motor_main+0x180>
 8008a7e:	ed9f 0a34 	vldr	s0, [pc, #208]	@ 8008b50 <write_motor_main+0x184>
 8008a82:	f7ff fc9d 	bl	80083c0 <esc_pwm_throttle_to_duty_cycle>
 8008a86:	ed87 0a0b 	vstr	s0, [r7, #44]	@ 0x2c
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8008a8e:	f3ef 8310 	mrs	r3, PRIMASK
 8008a92:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8008a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
#define COMPILER_BARRIER() __asm volatile ("" ::: "memory")


__attribute__((always_inline)) static inline crit_state_t enter_critical(void)
{
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8008a96:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8008a98:	b672      	cpsid	i
}
 8008a9a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8008a9c:	f3bf 8f4f 	dsb	sy
}
 8008aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008aa2:	f3bf 8f6f 	isb	sy
}
 8008aa6:	bf00      	nop
    __disable_irq();                     // CPSID i (atomic)
    __DSB();
    __ISB();
    COMPILER_BARRIER();
    return old;
 8008aa8:	6a3b      	ldr	r3, [r7, #32]
}

/* Helpers: */
__attribute__((always_inline)) static inline crit_state_t __iBegin_custom(crit_state_t type)
{
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8008aaa:	61fb      	str	r3, [r7, #28]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8008aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d001      	beq.n	8008ab6 <write_motor_main+0xea>
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	e000      	b.n	8008ab8 <write_motor_main+0xec>
 8008ab6:	2300      	movs	r3, #0
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8008ab8:	60fb      	str	r3, [r7, #12]
 8008aba:	2301      	movs	r3, #1
 8008abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008abe:	e00d      	b.n	8008adc <write_motor_main+0x110>
        	{
        		pwm_set_duty(&esc_motors[i], duty_cycle);
 8008ac0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ac2:	4613      	mov	r3, r2
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	4a22      	ldr	r2, [pc, #136]	@ (8008b54 <write_motor_main+0x188>)
 8008acc:	4413      	add	r3, r2
 8008ace:	ed97 0a0b 	vldr	s0, [r7, #44]	@ 0x2c
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f7ff fc1c 	bl	8008310 <pwm_set_duty>
        	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8008ad8:	2300      	movs	r3, #0
 8008ada:	633b      	str	r3, [r7, #48]	@ 0x30
 8008adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d1ee      	bne.n	8008ac0 <write_motor_main+0xf4>
 8008ae2:	f107 030c 	add.w	r3, r7, #12
 8008ae6:	61bb      	str	r3, [r7, #24]
}

__attribute__((always_inline)) static inline void __iRestore_custom(crit_state_t *sreg)
{
	exit_critical(*sreg);		// restore saved I-bit
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dmb 0xF":::"memory");
 8008aee:	f3bf 8f5f 	dmb	sy
}
 8008af2:	bf00      	nop
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	f383 8810 	msr	PRIMASK, r3
}
 8008afe:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8008b00:	f3bf 8f4f 	dsb	sy
}
 8008b04:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008b06:	f3bf 8f6f 	isb	sy
}
 8008b0a:	bf00      	nop
}
 8008b0c:	bf00      	nop
}
 8008b0e:	bf00      	nop
        for (size_t i = 0; i < 4; i++) {
 8008b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b12:	3301      	adds	r3, #1
 8008b14:	637b      	str	r3, [r7, #52]	@ 0x34
 8008b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b18:	2b03      	cmp	r3, #3
 8008b1a:	d9a4      	bls.n	8008a66 <write_motor_main+0x9a>
        	}
        }
        xSemaphoreGive(g_motors_throttle_mutex);
 8008b1c:	4b07      	ldr	r3, [pc, #28]	@ (8008b3c <write_motor_main+0x170>)
 8008b1e:	6818      	ldr	r0, [r3, #0]
 8008b20:	2300      	movs	r3, #0
 8008b22:	2200      	movs	r2, #0
 8008b24:	2100      	movs	r1, #0
 8008b26:	f00b fcf3 	bl	8014510 <xQueueGenericSend>
        ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8008b2a:	e789      	b.n	8008a40 <write_motor_main+0x74>
 8008b2c:	200016b8 	.word	0x200016b8
 8008b30:	200042d0 	.word	0x200042d0
 8008b34:	0800874d 	.word	0x0800874d
 8008b38:	08020550 	.word	0x08020550
 8008b3c:	20001650 	.word	0x20001650
 8008b40:	20001654 	.word	0x20001654
 8008b44:	2000124c 	.word	0x2000124c
 8008b48:	44fa0000 	.word	0x44fa0000
 8008b4c:	447a0000 	.word	0x447a0000
 8008b50:	43c80000 	.word	0x43c80000
 8008b54:	20001664 	.word	0x20001664

08008b58 <line_buffer_add_char>:
    }
}

static int line_buffer_add_char(char c, char *buf, size_t buf_size, size_t *len)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b085      	sub	sp, #20
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	60b9      	str	r1, [r7, #8]
 8008b60:	607a      	str	r2, [r7, #4]
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	4603      	mov	r3, r0
 8008b66:	73fb      	strb	r3, [r7, #15]
    // buf: destination buffer
    // buf_size: total buffer capacity
    // len: pointer to current length (persistent between calls)
    // Returns 1 when a full line (ending with \n\r) is complete, 0 otherwise

    if (*len + 1 >= buf_size) {
 8008b68:	683b      	ldr	r3, [r7, #0]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d804      	bhi.n	8008b7e <line_buffer_add_char+0x26>
        // buffer overflow: reset
        *len = 0;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2200      	movs	r2, #0
 8008b78:	601a      	str	r2, [r3, #0]
        return 0;
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	e029      	b.n	8008bd2 <line_buffer_add_char+0x7a>
    }

    buf[(*len)++] = c;
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	1c59      	adds	r1, r3, #1
 8008b84:	683a      	ldr	r2, [r7, #0]
 8008b86:	6011      	str	r1, [r2, #0]
 8008b88:	68ba      	ldr	r2, [r7, #8]
 8008b8a:	4413      	add	r3, r2
 8008b8c:	7bfa      	ldrb	r2, [r7, #15]
 8008b8e:	701a      	strb	r2, [r3, #0]

    // Check for \n\r at the end
    if (*len >= 2) {
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d91b      	bls.n	8008bd0 <line_buffer_add_char+0x78>
    	if(buf[*len - 2] == '\r' && buf[*len - 1] == '\n'){
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	3b02      	subs	r3, #2
 8008b9e:	68ba      	ldr	r2, [r7, #8]
 8008ba0:	4413      	add	r3, r2
 8008ba2:	781b      	ldrb	r3, [r3, #0]
 8008ba4:	2b0d      	cmp	r3, #13
 8008ba6:	d113      	bne.n	8008bd0 <line_buffer_add_char+0x78>
 8008ba8:	683b      	ldr	r3, [r7, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	4413      	add	r3, r2
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	2b0a      	cmp	r3, #10
 8008bb6:	d10b      	bne.n	8008bd0 <line_buffer_add_char+0x78>
            buf[*len - 2] = '\0'; // terminate string before \n\r
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	3b02      	subs	r3, #2
 8008bbe:	68ba      	ldr	r2, [r7, #8]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	701a      	strb	r2, [r3, #0]
            *len = 0;             // reset for next line
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	601a      	str	r2, [r3, #0]
            return 1;             // line complete
 8008bcc:	2301      	movs	r3, #1
 8008bce:	e000      	b.n	8008bd2 <line_buffer_add_char+0x7a>
    	}
    }

    return 0; // line not complete yet
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
	...

08008be0 <rc_control_main>:

static void rc_control_main(void *arg)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b0f6      	sub	sp, #472	@ 0x1d8
 8008be4:	af0a      	add	r7, sp, #40	@ 0x28
 8008be6:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008bea:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8008bee:	6018      	str	r0, [r3, #0]
    uint8_t uart_recv_buffer[64];
    int recv_data;
    char linebuf[256];
    size_t line_len = 0;
 8008bf0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008bf4:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]

    float target_throttle = 0;
 8008bfc:	f04f 0300 	mov.w	r3, #0
 8008c00:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    float temp_target_throttle = 0;
 8008c04:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008c08:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8008c0c:	f04f 0200 	mov.w	r2, #0
 8008c10:	601a      	str	r2, [r3, #0]

    coord3D target_attitude = {0};
 8008c12:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008c16:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008c1a:	461a      	mov	r2, r3
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	6053      	str	r3, [r2, #4]
 8008c22:	6093      	str	r3, [r2, #8]
    coord3D temp_target_attitude = {0};
 8008c24:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008c28:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	2300      	movs	r3, #0
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	6053      	str	r3, [r2, #4]
 8008c34:	6093      	str	r3, [r2, #8]

    float arm_flag = 0;
 8008c36:	f04f 0300 	mov.w	r3, #0
 8008c3a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
    float temp_arm_flag = 0;
 8008c3e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008c42:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008c46:	f04f 0200 	mov.w	r2, #0
 8008c4a:	601a      	str	r2, [r3, #0]

    float disarm_flag = 0;
 8008c4c:	f04f 0300 	mov.w	r3, #0
 8008c50:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    float temp_disarm_flag = 0;
 8008c54:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008c58:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008c5c:	f04f 0200 	mov.w	r2, #0
 8008c60:	601a      	str	r2, [r3, #0]

    int errors = 0;
 8008c62:	2300      	movs	r3, #0
 8008c64:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
    int current_message_corrupted = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
    uint16_t crc_calculated;
    unsigned int crc_received = 0;
 8008c6e:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008c72:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008c76:	2200      	movs	r2, #0
 8008c78:	601a      	str	r2, [r3, #0]
    float pid_p = 0.0f;
 8008c7a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008c7e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8008c82:	f04f 0200 	mov.w	r2, #0
 8008c86:	601a      	str	r2, [r3, #0]
    float pid_i = 0.0f;
 8008c88:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008c8c:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8008c90:	f04f 0200 	mov.w	r2, #0
 8008c94:	601a      	str	r2, [r3, #0]
    float pid_d = 0.0f;
 8008c96:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008c9a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8008c9e:	f04f 0200 	mov.w	r2, #0
 8008ca2:	601a      	str	r2, [r3, #0]
    float level_p = 0.0f;
 8008ca4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008ca8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8008cac:	f04f 0200 	mov.w	r2, #0
 8008cb0:	601a      	str	r2, [r3, #0]
    float pid_apply = 0.0f;
 8008cb2:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008cb6:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8008cba:	f04f 0200 	mov.w	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]


  /* Infinite loop */
  for(;;)
  {
	  current_message_corrupted = 1;
 8008cc0:	2301      	movs	r3, #1
 8008cc2:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
      while (usart1_data_available_for_read() > 0)
 8008cc6:	e087      	b.n	8008dd8 <rc_control_main+0x1f8>
      {
          recv_data = usart1_recv_data((char*)uart_recv_buffer, sizeof(uart_recv_buffer));
 8008cc8:	f507 73a6 	add.w	r3, r7, #332	@ 0x14c
 8008ccc:	2140      	movs	r1, #64	@ 0x40
 8008cce:	4618      	mov	r0, r3
 8008cd0:	f001 fc7c 	bl	800a5cc <usart1_recv_data>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
          for(int i=0; i<recv_data; i++){
 8008cda:	2300      	movs	r3, #0
 8008cdc:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8008ce0:	e074      	b.n	8008dcc <rc_control_main+0x1ec>


			  if (line_buffer_add_char(uart_recv_buffer[i], linebuf, sizeof(linebuf), &line_len)) {
 8008ce2:	f507 72a6 	add.w	r2, r7, #332	@ 0x14c
 8008ce6:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008cea:	4413      	add	r3, r2
 8008cec:	7818      	ldrb	r0, [r3, #0]
 8008cee:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8008cf2:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8008cf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008cfa:	f7ff ff2d 	bl	8008b58 <line_buffer_add_char>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d05e      	beq.n	8008dc2 <rc_control_main+0x1e2>

				  int temp_str_len = strlen(linebuf);
 8008d04:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f7f7 fab1 	bl	8000270 <strlen>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
				  temp_str_len -= 6;
 8008d14:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8008d18:	3b06      	subs	r3, #6
 8008d1a:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
				  crc_calculated = crc16_ccitt_init();
 8008d1e:	f7f8 fc37 	bl	8001590 <crc16_ccitt_init>
 8008d22:	4603      	mov	r3, r0
 8008d24:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e
				  crc_calculated = crc16_ccitt_add_arr(crc_calculated, (uint8_t*)linebuf, temp_str_len);
 8008d28:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8008d2c:	f107 014c 	add.w	r1, r7, #76	@ 0x4c
 8008d30:	f8b7 318e 	ldrh.w	r3, [r7, #398]	@ 0x18e
 8008d34:	4618      	mov	r0, r3
 8008d36:	f7f8 fc67 	bl	8001608 <crc16_ccitt_add_arr>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e

				  if (sscanf(linebuf, "%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%f;%x",
 8008d40:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8008d44:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8008d48:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8008d4c:	f107 0320 	add.w	r3, r7, #32
 8008d50:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d52:	f107 030c 	add.w	r3, r7, #12
 8008d56:	9308      	str	r3, [sp, #32]
 8008d58:	f107 0310 	add.w	r3, r7, #16
 8008d5c:	9307      	str	r3, [sp, #28]
 8008d5e:	f107 0314 	add.w	r3, r7, #20
 8008d62:	9306      	str	r3, [sp, #24]
 8008d64:	f107 0318 	add.w	r3, r7, #24
 8008d68:	9305      	str	r3, [sp, #20]
 8008d6a:	f107 031c 	add.w	r3, r7, #28
 8008d6e:	9304      	str	r3, [sp, #16]
 8008d70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008d74:	9303      	str	r3, [sp, #12]
 8008d76:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8008d7a:	9302      	str	r3, [sp, #8]
 8008d7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008d80:	3308      	adds	r3, #8
 8008d82:	9301      	str	r3, [sp, #4]
 8008d84:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008d88:	3304      	adds	r3, #4
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	499b      	ldr	r1, [pc, #620]	@ (8008ffc <rc_control_main+0x41c>)
 8008d90:	f011 fca0 	bl	801a6d4 <siscanf>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b0c      	cmp	r3, #12
 8008d98:	d103      	bne.n	8008da2 <rc_control_main+0x1c2>
						  &level_p,
						  &pid_apply,
						  &crc_received

						  ) == 12) {
					  current_message_corrupted = 0;
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8008da0:	e002      	b.n	8008da8 <rc_control_main+0x1c8>
					  //printf("%s\n", linebuf);

				  } else {
					  current_message_corrupted = 1;
 8008da2:	2301      	movs	r3, #1
 8008da4:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
//					  printf("%s\n", linebuf);
				  }
				  if(crc_received != (unsigned int)crc_calculated){
 8008da8:	f8b7 218e 	ldrh.w	r2, [r7, #398]	@ 0x18e
 8008dac:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008db0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d003      	beq.n	8008dc2 <rc_control_main+0x1e2>
					  current_message_corrupted = 1;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
					  continue;
 8008dc0:	bf00      	nop
          for(int i=0; i<recv_data; i++){
 8008dc2:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8008dc6:	3301      	adds	r3, #1
 8008dc8:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8008dcc:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8008dd0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	db84      	blt.n	8008ce2 <rc_control_main+0x102>
      while (usart1_data_available_for_read() > 0)
 8008dd8:	f001 fc4c 	bl	800a674 <usart1_data_available_for_read>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	f47f af72 	bne.w	8008cc8 <rc_control_main+0xe8>
			  }
          }
      }


      if(current_message_corrupted == 0){
 8008de4:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f040 80a1 	bne.w	8008f30 <rc_control_main+0x350>
    	  errors = 0;
 8008dee:	2300      	movs	r3, #0
 8008df0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

          target_attitude = temp_target_attitude;
 8008df4:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008df8:	f5a3 71bc 	sub.w	r1, r3, #376	@ 0x178
 8008dfc:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008e00:	f5a3 72c2 	sub.w	r2, r3, #388	@ 0x184
 8008e04:	460b      	mov	r3, r1
 8008e06:	ca07      	ldmia	r2, {r0, r1, r2}
 8008e08:	e883 0007 	stmia.w	r3, {r0, r1, r2}
          arm_flag = (temp_arm_flag);
 8008e0c:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008e10:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
          disarm_flag = (temp_disarm_flag);
 8008e1a:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008e1e:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
          target_throttle = temp_target_throttle;
 8008e28:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008e2c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
          if(pid_apply > 0.5f){
 8008e36:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008e3a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8008e3e:	edd3 7a00 	vldr	s15, [r3]
 8008e42:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008e46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e4e:	dd6f      	ble.n	8008f30 <rc_control_main+0x350>
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8008e50:	4b6b      	ldr	r3, [pc, #428]	@ (8009000 <rc_control_main+0x420>)
 8008e52:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 8008e56:	f04f 31ff 	mov.w	r1, #4294967295
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f00b fdda 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	fcl.rate_controller.pid_pitch.Kp = pid_p;
 8008e60:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008e64:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a65      	ldr	r2, [pc, #404]	@ (8009000 <rc_control_main+0x420>)
 8008e6c:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
	fcl.rate_controller.pid_pitch.Ki = pid_i;
 8008e70:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008e74:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4a61      	ldr	r2, [pc, #388]	@ (8009000 <rc_control_main+0x420>)
 8008e7c:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
	fcl.rate_controller.pid_pitch.Kd = pid_d;
 8008e80:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008e84:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a5d      	ldr	r2, [pc, #372]	@ (8009000 <rc_control_main+0x420>)
 8008e8c:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8

	fcl.rate_controller.pid_roll.Kp = pid_p;
 8008e90:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008e94:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a59      	ldr	r2, [pc, #356]	@ (8009000 <rc_control_main+0x420>)
 8008e9c:	f8c2 3174 	str.w	r3, [r2, #372]	@ 0x174
	fcl.rate_controller.pid_roll.Ki = pid_i;
 8008ea0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008ea4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	4a55      	ldr	r2, [pc, #340]	@ (8009000 <rc_control_main+0x420>)
 8008eac:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
	fcl.rate_controller.pid_roll.Kd = pid_d;
 8008eb0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008eb4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a51      	ldr	r2, [pc, #324]	@ (8009000 <rc_control_main+0x420>)
 8008ebc:	f8c2 317c 	str.w	r3, [r2, #380]	@ 0x17c

	fcl.rate_controller.pid_yaw.Kp = pid_p;
 8008ec0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008ec4:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a4d      	ldr	r2, [pc, #308]	@ (8009000 <rc_control_main+0x420>)
 8008ecc:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
	fcl.rate_controller.pid_yaw.Ki = pid_i;
 8008ed0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008ed4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a49      	ldr	r2, [pc, #292]	@ (8009000 <rc_control_main+0x420>)
 8008edc:	f8c2 31d0 	str.w	r3, [r2, #464]	@ 0x1d0
	fcl.rate_controller.pid_yaw.Kd = pid_d;
 8008ee0:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008ee4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a45      	ldr	r2, [pc, #276]	@ (8009000 <rc_control_main+0x420>)
 8008eec:	f8c2 31d4 	str.w	r3, [r2, #468]	@ 0x1d4

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 8008ef0:	4b43      	ldr	r3, [pc, #268]	@ (8009000 <rc_control_main+0x420>)
 8008ef2:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	2200      	movs	r2, #0
 8008efa:	2100      	movs	r1, #0
 8008efc:	f00b fb08 	bl	8014510 <xQueueGenericSend>
#endif

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 8008f00:	4b3f      	ldr	r3, [pc, #252]	@ (8009000 <rc_control_main+0x420>)
 8008f02:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8008f06:	f04f 31ff 	mov.w	r1, #4294967295
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f00b fd82 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	fcl.attitude_controller.rate_gain = level_p;
 8008f10:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008f14:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a39      	ldr	r2, [pc, #228]	@ (8009000 <rc_control_main+0x420>)
 8008f1c:	f8c2 32cc 	str.w	r3, [r2, #716]	@ 0x2cc
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 8008f20:	4b37      	ldr	r3, [pc, #220]	@ (8009000 <rc_control_main+0x420>)
 8008f22:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 8008f26:	2300      	movs	r3, #0
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2100      	movs	r1, #0
 8008f2c:	f00b faf0 	bl	8014510 <xQueueGenericSend>
#endif
          }
      }

      errors += current_message_corrupted;
 8008f30:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8008f34:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8008f38:	4413      	add	r3, r2
 8008f3a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

      if (errors >= (RC_CONTROLLER_HZ / 2.0f)){
 8008f3e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8008f42:	ee07 3a90 	vmov	s15, r3
 8008f46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008f4a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8009004 <rc_control_main+0x424>
 8008f4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f56:	db20      	blt.n	8008f9a <rc_control_main+0x3ba>
    	  target_attitude.x = 0.0f;
 8008f58:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008f5c:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008f60:	f04f 0200 	mov.w	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
    	  target_attitude.y = 0.0f;
 8008f66:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008f6a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008f6e:	f04f 0200 	mov.w	r2, #0
 8008f72:	605a      	str	r2, [r3, #4]
    	  target_attitude.z = 0.0f;
 8008f74:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008f78:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008f7c:	f04f 0200 	mov.w	r2, #0
 8008f80:	609a      	str	r2, [r3, #8]
    	  target_throttle = 0.0f;
 8008f82:	f04f 0300 	mov.w	r3, #0
 8008f86:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
    	  disarm_flag = 1.0f;
 8008f8a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8008f8e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    	  arm_flag = 0.0f;
 8008f92:	f04f 0300 	mov.w	r3, #0
 8008f96:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
      }


      if (arm_flag > 0.5f){
 8008f9a:	edd7 7a6a 	vldr	s15, [r7, #424]	@ 0x1a8
 8008f9e:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008fa2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008faa:	dd02      	ble.n	8008fb2 <rc_control_main+0x3d2>
    	  flight_control_loop_arm_esc(&fcl);
 8008fac:	4814      	ldr	r0, [pc, #80]	@ (8009000 <rc_control_main+0x420>)
 8008fae:	f7f8 fc37 	bl	8001820 <flight_control_loop_arm_esc>
      }

      if (disarm_flag > 0.5f){
 8008fb2:	edd7 7a69 	vldr	s15, [r7, #420]	@ 0x1a4
 8008fb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8008fba:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008fc2:	dd02      	ble.n	8008fca <rc_control_main+0x3ea>
    	  flight_control_loop_disarm_esc(&fcl);
 8008fc4:	480e      	ldr	r0, [pc, #56]	@ (8009000 <rc_control_main+0x420>)
 8008fc6:	f7f8 fc4a 	bl	800185e <flight_control_loop_disarm_esc>
      }

      flight_control_loop_update_rc_control(&fcl, target_attitude, target_throttle);
 8008fca:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 8008fce:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8008fd2:	edd3 6a00 	vldr	s13, [r3]
 8008fd6:	ed93 7a01 	vldr	s14, [r3, #4]
 8008fda:	edd3 7a02 	vldr	s15, [r3, #8]
 8008fde:	edd7 1a6b 	vldr	s3, [r7, #428]	@ 0x1ac
 8008fe2:	eeb0 0a66 	vmov.f32	s0, s13
 8008fe6:	eef0 0a47 	vmov.f32	s1, s14
 8008fea:	eeb0 1a67 	vmov.f32	s2, s15
 8008fee:	4804      	ldr	r0, [pc, #16]	@ (8009000 <rc_control_main+0x420>)
 8008ff0:	f7f8 fede 	bl	8001db0 <flight_control_loop_update_rc_control>

      vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(RC_CONTROLLER_HZ)));
 8008ff4:	200a      	movs	r0, #10
 8008ff6:	f00c f961 	bl	80152bc <vTaskDelay>
	  current_message_corrupted = 1;
 8008ffa:	e661      	b.n	8008cc0 <rc_control_main+0xe0>
 8008ffc:	08020560 	.word	0x08020560
 8009000:	2000124c 	.word	0x2000124c
 8009004:	42480000 	.word	0x42480000

08009008 <print_telemetry_data>:
  }
}


static void print_telemetry_data(void *arg){
 8009008:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800900c:	b0aa      	sub	sp, #168	@ 0xa8
 800900e:	af06      	add	r7, sp, #24
 8009010:	6078      	str	r0, [r7, #4]
    // Get estimated attitude and body frame accel/gyro
	coord3D body_frame_accel, body_frame_gyro;
    coord3D raw_accel, raw_gyro;
	quaternion body_frame_estimated_q;
    float local_motors_throttle[4];
	coord3D target_attitude = { 0 };
 8009012:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8009016:	2200      	movs	r2, #0
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	605a      	str	r2, [r3, #4]
 800901c:	609a      	str	r2, [r3, #8]
	float target_throttle = 0.0f;
 800901e:	f04f 0300 	mov.w	r3, #0
 8009022:	633b      	str	r3, [r7, #48]	@ 0x30

    for (;;)
    {
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreTake(fcl.imu_mutex, portMAX_DELAY);
 8009024:	4bb3      	ldr	r3, [pc, #716]	@ (80092f4 <print_telemetry_data+0x2ec>)
 8009026:	f8d3 33ec 	ldr.w	r3, [r3, #1004]	@ 0x3ec
 800902a:	f04f 31ff 	mov.w	r1, #4294967295
 800902e:	4618      	mov	r0, r3
 8009030:	f00b fcf0 	bl	8014a14 <xQueueSemaphoreTake>
    #endif
        imu_get_raw_accel_data(&(fcl.imu), &raw_accel);
 8009034:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009038:	4619      	mov	r1, r3
 800903a:	48ae      	ldr	r0, [pc, #696]	@ (80092f4 <print_telemetry_data+0x2ec>)
 800903c:	f7fa f8cc 	bl	80031d8 <imu_get_raw_accel_data>
        imu_get_raw_gyro_data(&(fcl.imu), &raw_gyro);
 8009040:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8009044:	4619      	mov	r1, r3
 8009046:	48ab      	ldr	r0, [pc, #684]	@ (80092f4 <print_telemetry_data+0x2ec>)
 8009048:	f7fa f8d9 	bl	80031fe <imu_get_raw_gyro_data>
        imu_get_estimated_data(&(fcl.imu), &body_frame_estimated_q, &body_frame_accel, &body_frame_gyro);
 800904c:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8009050:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8009054:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8009058:	48a6      	ldr	r0, [pc, #664]	@ (80092f4 <print_telemetry_data+0x2ec>)
 800905a:	f7fa f891 	bl	8003180 <imu_get_estimated_data>
    #if MUTEX_ESP_ENABLE != 0
        xSemaphoreGive(fcl.imu_mutex);
 800905e:	4ba5      	ldr	r3, [pc, #660]	@ (80092f4 <print_telemetry_data+0x2ec>)
 8009060:	f8d3 03ec 	ldr.w	r0, [r3, #1004]	@ 0x3ec
 8009064:	2300      	movs	r3, #0
 8009066:	2200      	movs	r2, #0
 8009068:	2100      	movs	r1, #0
 800906a:	f00b fa51 	bl	8014510 <xQueueGenericSend>
    #endif

        flight_control_loop_get_motors_throttle(&fcl, local_motors_throttle);
 800906e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8009072:	4619      	mov	r1, r3
 8009074:	489f      	ldr	r0, [pc, #636]	@ (80092f4 <print_telemetry_data+0x2ec>)
 8009076:	f7f8 ff87 	bl	8001f88 <flight_control_loop_get_motors_throttle>
        angles3D angles = quat2angle(&(body_frame_estimated_q));
 800907a:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800907e:	4618      	mov	r0, r3
 8009080:	f7f9 fade 	bl	8002640 <quat2angle>
 8009084:	eef0 6a40 	vmov.f32	s13, s0
 8009088:	eeb0 7a60 	vmov.f32	s14, s1
 800908c:	eef0 7a41 	vmov.f32	s15, s2
 8009090:	edc7 6a09 	vstr	s13, [r7, #36]	@ 0x24
 8009094:	ed87 7a0a 	vstr	s14, [r7, #40]	@ 0x28
 8009098:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

        printf("%.3f;%.3f;%.3f;", degrees(angles.x), degrees(angles.y), degrees(angles.z));
 800909c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80090a0:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 80092f8 <print_telemetry_data+0x2f0>
 80090a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090a8:	ee17 0a90 	vmov	r0, s15
 80090ac:	f7f7 fa4c 	bl	8000548 <__aeabi_f2d>
 80090b0:	4680      	mov	r8, r0
 80090b2:	4689      	mov	r9, r1
 80090b4:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80090b8:	ed9f 7a8f 	vldr	s14, [pc, #572]	@ 80092f8 <print_telemetry_data+0x2f0>
 80090bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090c0:	ee17 0a90 	vmov	r0, s15
 80090c4:	f7f7 fa40 	bl	8000548 <__aeabi_f2d>
 80090c8:	4604      	mov	r4, r0
 80090ca:	460d      	mov	r5, r1
 80090cc:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80090d0:	ed9f 7a89 	vldr	s14, [pc, #548]	@ 80092f8 <print_telemetry_data+0x2f0>
 80090d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80090d8:	ee17 0a90 	vmov	r0, s15
 80090dc:	f7f7 fa34 	bl	8000548 <__aeabi_f2d>
 80090e0:	4602      	mov	r2, r0
 80090e2:	460b      	mov	r3, r1
 80090e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80090e8:	e9cd 4500 	strd	r4, r5, [sp]
 80090ec:	4642      	mov	r2, r8
 80090ee:	464b      	mov	r3, r9
 80090f0:	4882      	ldr	r0, [pc, #520]	@ (80092fc <print_telemetry_data+0x2f4>)
 80090f2:	f011 fa55 	bl	801a5a0 <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_accel.x, body_frame_accel.y, body_frame_accel.z);
 80090f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7f7 fa24 	bl	8000548 <__aeabi_f2d>
 8009100:	4680      	mov	r8, r0
 8009102:	4689      	mov	r9, r1
 8009104:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009108:	4618      	mov	r0, r3
 800910a:	f7f7 fa1d 	bl	8000548 <__aeabi_f2d>
 800910e:	4604      	mov	r4, r0
 8009110:	460d      	mov	r5, r1
 8009112:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009116:	4618      	mov	r0, r3
 8009118:	f7f7 fa16 	bl	8000548 <__aeabi_f2d>
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009124:	e9cd 4500 	strd	r4, r5, [sp]
 8009128:	4642      	mov	r2, r8
 800912a:	464b      	mov	r3, r9
 800912c:	4873      	ldr	r0, [pc, #460]	@ (80092fc <print_telemetry_data+0x2f4>)
 800912e:	f011 fa37 	bl	801a5a0 <iprintf>
        printf("%.3f;%.3f;%.3f;", body_frame_gyro.x, body_frame_gyro.y, body_frame_gyro.z);
 8009132:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009134:	4618      	mov	r0, r3
 8009136:	f7f7 fa07 	bl	8000548 <__aeabi_f2d>
 800913a:	4680      	mov	r8, r0
 800913c:	4689      	mov	r9, r1
 800913e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009140:	4618      	mov	r0, r3
 8009142:	f7f7 fa01 	bl	8000548 <__aeabi_f2d>
 8009146:	4604      	mov	r4, r0
 8009148:	460d      	mov	r5, r1
 800914a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800914e:	4618      	mov	r0, r3
 8009150:	f7f7 f9fa 	bl	8000548 <__aeabi_f2d>
 8009154:	4602      	mov	r2, r0
 8009156:	460b      	mov	r3, r1
 8009158:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800915c:	e9cd 4500 	strd	r4, r5, [sp]
 8009160:	4642      	mov	r2, r8
 8009162:	464b      	mov	r3, r9
 8009164:	4865      	ldr	r0, [pc, #404]	@ (80092fc <print_telemetry_data+0x2f4>)
 8009166:	f011 fa1b 	bl	801a5a0 <iprintf>
//        printf("%.3f;%.3f;%.3f;", raw_accel.x, raw_accel.y, raw_accel.z);
//        printf("%.3f;%.3f;%.3f;", raw_gyro.x, raw_gyro.y, raw_gyro.z);
        printf("%.3f;%.3f;%.3f;%.3f;", local_motors_throttle[0], local_motors_throttle[1], local_motors_throttle[2], local_motors_throttle[3]);
 800916a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800916c:	4618      	mov	r0, r3
 800916e:	f7f7 f9eb 	bl	8000548 <__aeabi_f2d>
 8009172:	4682      	mov	sl, r0
 8009174:	468b      	mov	fp, r1
 8009176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009178:	4618      	mov	r0, r3
 800917a:	f7f7 f9e5 	bl	8000548 <__aeabi_f2d>
 800917e:	4604      	mov	r4, r0
 8009180:	460d      	mov	r5, r1
 8009182:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009184:	4618      	mov	r0, r3
 8009186:	f7f7 f9df 	bl	8000548 <__aeabi_f2d>
 800918a:	4680      	mov	r8, r0
 800918c:	4689      	mov	r9, r1
 800918e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009190:	4618      	mov	r0, r3
 8009192:	f7f7 f9d9 	bl	8000548 <__aeabi_f2d>
 8009196:	4602      	mov	r2, r0
 8009198:	460b      	mov	r3, r1
 800919a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800919e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80091a2:	e9cd 4500 	strd	r4, r5, [sp]
 80091a6:	4652      	mov	r2, sl
 80091a8:	465b      	mov	r3, fp
 80091aa:	4855      	ldr	r0, [pc, #340]	@ (8009300 <print_telemetry_data+0x2f8>)
 80091ac:	f011 f9f8 	bl	801a5a0 <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rc_attitude_control_mutex, portMAX_DELAY);
 80091b0:	4b50      	ldr	r3, [pc, #320]	@ (80092f4 <print_telemetry_data+0x2ec>)
 80091b2:	f8d3 33f8 	ldr.w	r3, [r3, #1016]	@ 0x3f8
 80091b6:	f04f 31ff 	mov.w	r1, #4294967295
 80091ba:	4618      	mov	r0, r3
 80091bc:	f00b fc2a 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	rc_attitude_control_get_processed(
 80091c0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80091c4:	f103 0008 	add.w	r0, r3, #8
 80091c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80091cc:	1d1a      	adds	r2, r3, #4
 80091ce:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 80091d2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80091d6:	9300      	str	r3, [sp, #0]
 80091d8:	4603      	mov	r3, r0
 80091da:	484a      	ldr	r0, [pc, #296]	@ (8009304 <print_telemetry_data+0x2fc>)
 80091dc:	f7fb fb0c 	bl	80047f8 <rc_attitude_control_get_processed>
		&(target_attitude.y),
		&(target_attitude.z),
		&target_throttle
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rc_attitude_control_mutex);
 80091e0:	4b44      	ldr	r3, [pc, #272]	@ (80092f4 <print_telemetry_data+0x2ec>)
 80091e2:	f8d3 03f8 	ldr.w	r0, [r3, #1016]	@ 0x3f8
 80091e6:	2300      	movs	r3, #0
 80091e8:	2200      	movs	r2, #0
 80091ea:	2100      	movs	r1, #0
 80091ec:	f00b f990 	bl	8014510 <xQueueGenericSend>
#endif
	//	printf("%.3f;%.3f;%.3f;", target_attitude.x, target_attitude.y, target_attitude.z);
	printf("%.3f;", target_throttle);
 80091f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091f2:	4618      	mov	r0, r3
 80091f4:	f7f7 f9a8 	bl	8000548 <__aeabi_f2d>
 80091f8:	4602      	mov	r2, r0
 80091fa:	460b      	mov	r3, r1
 80091fc:	4842      	ldr	r0, [pc, #264]	@ (8009308 <print_telemetry_data+0x300>)
 80091fe:	f011 f9cf 	bl	801a5a0 <iprintf>

#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.attitude_controller_mutex, portMAX_DELAY);
 8009202:	4b3c      	ldr	r3, [pc, #240]	@ (80092f4 <print_telemetry_data+0x2ec>)
 8009204:	f8d3 33f4 	ldr.w	r3, [r3, #1012]	@ 0x3f4
 8009208:	f04f 31ff 	mov.w	r1, #4294967295
 800920c:	4618      	mov	r0, r3
 800920e:	f00b fc01 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	float target_roll_rate = 0.0f;
 8009212:	f04f 0300 	mov.w	r3, #0
 8009216:	623b      	str	r3, [r7, #32]
	float target_pitch_rate = 0.0f;
 8009218:	f04f 0300 	mov.w	r3, #0
 800921c:	61fb      	str	r3, [r7, #28]
	float target_yaw_rate = 0.0f;
 800921e:	f04f 0300 	mov.w	r3, #0
 8009222:	61bb      	str	r3, [r7, #24]
	attitude_controller_get_calculated_rate(
 8009224:	f107 0318 	add.w	r3, r7, #24
 8009228:	f107 021c 	add.w	r2, r7, #28
 800922c:	f107 0120 	add.w	r1, r7, #32
 8009230:	4836      	ldr	r0, [pc, #216]	@ (800930c <print_telemetry_data+0x304>)
 8009232:	f7f8 f987 	bl	8001544 <attitude_controller_get_calculated_rate>
		&target_roll_rate,
		&target_pitch_rate,
		&target_yaw_rate
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.attitude_controller_mutex);
 8009236:	4b2f      	ldr	r3, [pc, #188]	@ (80092f4 <print_telemetry_data+0x2ec>)
 8009238:	f8d3 03f4 	ldr.w	r0, [r3, #1012]	@ 0x3f4
 800923c:	2300      	movs	r3, #0
 800923e:	2200      	movs	r2, #0
 8009240:	2100      	movs	r1, #0
 8009242:	f00b f965 	bl	8014510 <xQueueGenericSend>
#endif
//	printf("%.3f;%.3f;%.3f;", target_roll_rate, target_pitch_rate, target_yaw_rate);


#if MUTEX_ESP_ENABLE != 0
	xSemaphoreTake(fcl.rate_controller_mutex, portMAX_DELAY);
 8009246:	4b2b      	ldr	r3, [pc, #172]	@ (80092f4 <print_telemetry_data+0x2ec>)
 8009248:	f8d3 33f0 	ldr.w	r3, [r3, #1008]	@ 0x3f0
 800924c:	f04f 31ff 	mov.w	r1, #4294967295
 8009250:	4618      	mov	r0, r3
 8009252:	f00b fbdf 	bl	8014a14 <xQueueSemaphoreTake>
#endif
	float pid_roll_output = 0.0f;
 8009256:	f04f 0300 	mov.w	r3, #0
 800925a:	617b      	str	r3, [r7, #20]
	float pid_pitch_output = 0.0f;
 800925c:	f04f 0300 	mov.w	r3, #0
 8009260:	613b      	str	r3, [r7, #16]
	float pid_yaw_output = 0.0f;
 8009262:	f04f 0300 	mov.w	r3, #0
 8009266:	60fb      	str	r3, [r7, #12]
	// Get PID outputs
	rate_controller_get_pid_outputs(
 8009268:	f107 030c 	add.w	r3, r7, #12
 800926c:	f107 0210 	add.w	r2, r7, #16
 8009270:	f107 0114 	add.w	r1, r7, #20
 8009274:	4826      	ldr	r0, [pc, #152]	@ (8009310 <print_telemetry_data+0x308>)
 8009276:	f7fb f821 	bl	80042bc <rate_controller_get_pid_outputs>
		&pid_roll_output,
		&pid_pitch_output,
		&pid_yaw_output
	);
#if MUTEX_ESP_ENABLE != 0
	xSemaphoreGive(fcl.rate_controller_mutex);
 800927a:	4b1e      	ldr	r3, [pc, #120]	@ (80092f4 <print_telemetry_data+0x2ec>)
 800927c:	f8d3 03f0 	ldr.w	r0, [r3, #1008]	@ 0x3f0
 8009280:	2300      	movs	r3, #0
 8009282:	2200      	movs	r2, #0
 8009284:	2100      	movs	r1, #0
 8009286:	f00b f943 	bl	8014510 <xQueueGenericSend>
#endif
	printf("%.3f;%.3f;%.3f;", degrees(pid_roll_output), degrees(pid_pitch_output), degrees(pid_yaw_output));
 800928a:	edd7 7a05 	vldr	s15, [r7, #20]
 800928e:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80092f8 <print_telemetry_data+0x2f0>
 8009292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009296:	ee17 0a90 	vmov	r0, s15
 800929a:	f7f7 f955 	bl	8000548 <__aeabi_f2d>
 800929e:	4680      	mov	r8, r0
 80092a0:	4689      	mov	r9, r1
 80092a2:	edd7 7a04 	vldr	s15, [r7, #16]
 80092a6:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80092f8 <print_telemetry_data+0x2f0>
 80092aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092ae:	ee17 0a90 	vmov	r0, s15
 80092b2:	f7f7 f949 	bl	8000548 <__aeabi_f2d>
 80092b6:	4604      	mov	r4, r0
 80092b8:	460d      	mov	r5, r1
 80092ba:	edd7 7a03 	vldr	s15, [r7, #12]
 80092be:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 80092f8 <print_telemetry_data+0x2f0>
 80092c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80092c6:	ee17 0a90 	vmov	r0, s15
 80092ca:	f7f7 f93d 	bl	8000548 <__aeabi_f2d>
 80092ce:	4602      	mov	r2, r0
 80092d0:	460b      	mov	r3, r1
 80092d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80092d6:	e9cd 4500 	strd	r4, r5, [sp]
 80092da:	4642      	mov	r2, r8
 80092dc:	464b      	mov	r3, r9
 80092de:	4807      	ldr	r0, [pc, #28]	@ (80092fc <print_telemetry_data+0x2f4>)
 80092e0:	f011 f95e 	bl	801a5a0 <iprintf>
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)write_h) * sizeof(StackType_t)));
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)rc_h)     * sizeof(StackType_t)));
//    printf("%lu;", (unsigned long)(uxTaskGetStackHighWaterMark((TaskHandle_t)telem_h)  * sizeof(StackType_t)));


    printf("\n");
 80092e4:	200a      	movs	r0, #10
 80092e6:	f011 f96d 	bl	801a5c4 <putchar>
    vTaskDelay(pdMS_TO_TICKS(HzToMilliSec(TELEMETRY_TASK_HZ)));
 80092ea:	2032      	movs	r0, #50	@ 0x32
 80092ec:	f00b ffe6 	bl	80152bc <vTaskDelay>
    {
 80092f0:	bf00      	nop
 80092f2:	e697      	b.n	8009024 <print_telemetry_data+0x1c>
 80092f4:	2000124c 	.word	0x2000124c
 80092f8:	42652ee1 	.word	0x42652ee1
 80092fc:	08020584 	.word	0x08020584
 8009300:	08020594 	.word	0x08020594
 8009304:	2000153c 	.word	0x2000153c
 8009308:	080205ac 	.word	0x080205ac
 800930c:	20001508 	.word	0x20001508
 8009310:	20001390 	.word	0x20001390

08009314 <fp_cli_func>:
    }
}

#include "fp_cli.h"
static void fp_cli_func(void *arg){
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
	//CDC_Transmit_FS((uint8_t*)err_header, sizeof(err_header) - 1);
	fp_cli_example_minimal_init();
 800931c:	f7f8 fe88 	bl	8002030 <fp_cli_example_minimal_init>
	//lwshellr_t lwshell_input_ex(lwshell_t* lwobj, const void* in_data, size_t len);
	for(;;){
		//lwshell_input_ex(&lwshell_cli, , );
		vTaskDelay(pdMS_TO_TICKS(100));
 8009320:	2064      	movs	r0, #100	@ 0x64
 8009322:	f00b ffcb 	bl	80152bc <vTaskDelay>
 8009326:	e7fb      	b.n	8009320 <fp_cli_func+0xc>

08009328 <app_init>:


}


void app_init(){
 8009328:	b580      	push	{r7, lr}
 800932a:	b08a      	sub	sp, #40	@ 0x28
 800932c:	af00      	add	r7, sp, #0
    init_imu();
 800932e:	f7ff fa31 	bl	8008794 <init_imu>
    flight_control_loop_init(&fcl);
 8009332:	483a      	ldr	r0, [pc, #232]	@ (800941c <app_init+0xf4>)
 8009334:	f7f8 fad2 	bl	80018dc <flight_control_loop_init>
    flight_control_loop_disarm_esc(&fcl);
 8009338:	4838      	ldr	r0, [pc, #224]	@ (800941c <app_init+0xf4>)
 800933a:	f7f8 fa90 	bl	800185e <flight_control_loop_disarm_esc>

    float duty_cycle = esc_pwm_throttle_to_duty_cycle(ESC_PWM_HZ, ESC_PWM_MIN_US, ESC_PWM_MAX_US, 0.0f);
 800933e:	eddf 1a38 	vldr	s3, [pc, #224]	@ 8009420 <app_init+0xf8>
 8009342:	ed9f 1a38 	vldr	s2, [pc, #224]	@ 8009424 <app_init+0xfc>
 8009346:	eddf 0a38 	vldr	s1, [pc, #224]	@ 8009428 <app_init+0x100>
 800934a:	ed9f 0a38 	vldr	s0, [pc, #224]	@ 800942c <app_init+0x104>
 800934e:	f7ff f837 	bl	80083c0 <esc_pwm_throttle_to_duty_cycle>
 8009352:	ed87 0a08 	vstr	s0, [r7, #32]
 8009356:	2300      	movs	r3, #0
 8009358:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800935a:	f3ef 8310 	mrs	r3, PRIMASK
 800935e:	61bb      	str	r3, [r7, #24]
  return(result);
 8009360:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 8009362:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8009364:	b672      	cpsid	i
}
 8009366:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009368:	f3bf 8f4f 	dsb	sy
}
 800936c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800936e:	f3bf 8f6f 	isb	sy
}
 8009372:	bf00      	nop
    return old;
 8009374:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 8009376:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 8009378:	69fb      	ldr	r3, [r7, #28]
 800937a:	2b01      	cmp	r3, #1
 800937c:	d001      	beq.n	8009382 <app_init+0x5a>
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	e000      	b.n	8009384 <app_init+0x5c>
 8009382:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 8009384:	603b      	str	r3, [r7, #0]
 8009386:	2301      	movs	r3, #1
 8009388:	627b      	str	r3, [r7, #36]	@ 0x24
 800938a:	e029      	b.n	80093e0 <app_init+0xb8>
	{
		pwm_init(&esc_motors[0], MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 800938c:	edd7 0a08 	vldr	s1, [r7, #32]
 8009390:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 800942c <app_init+0x104>
 8009394:	4b26      	ldr	r3, [pc, #152]	@ (8009430 <app_init+0x108>)
 8009396:	2200      	movs	r2, #0
 8009398:	4926      	ldr	r1, [pc, #152]	@ (8009434 <app_init+0x10c>)
 800939a:	4827      	ldr	r0, [pc, #156]	@ (8009438 <app_init+0x110>)
 800939c:	f7fe feba 	bl	8008114 <pwm_init>
		pwm_init(&esc_motors[1], MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 80093a0:	edd7 0a08 	vldr	s1, [r7, #32]
 80093a4:	ed9f 0a21 	vldr	s0, [pc, #132]	@ 800942c <app_init+0x104>
 80093a8:	4b21      	ldr	r3, [pc, #132]	@ (8009430 <app_init+0x108>)
 80093aa:	2204      	movs	r2, #4
 80093ac:	4921      	ldr	r1, [pc, #132]	@ (8009434 <app_init+0x10c>)
 80093ae:	4823      	ldr	r0, [pc, #140]	@ (800943c <app_init+0x114>)
 80093b0:	f7fe feb0 	bl	8008114 <pwm_init>
		pwm_init(&esc_motors[2], MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 80093b4:	edd7 0a08 	vldr	s1, [r7, #32]
 80093b8:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 800942c <app_init+0x104>
 80093bc:	4b1c      	ldr	r3, [pc, #112]	@ (8009430 <app_init+0x108>)
 80093be:	2208      	movs	r2, #8
 80093c0:	491c      	ldr	r1, [pc, #112]	@ (8009434 <app_init+0x10c>)
 80093c2:	481f      	ldr	r0, [pc, #124]	@ (8009440 <app_init+0x118>)
 80093c4:	f7fe fea6 	bl	8008114 <pwm_init>
		pwm_init(&esc_motors[3], MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL, TIMER_CLOCK, ESC_PWM_HZ, duty_cycle);
 80093c8:	edd7 0a08 	vldr	s1, [r7, #32]
 80093cc:	ed9f 0a17 	vldr	s0, [pc, #92]	@ 800942c <app_init+0x104>
 80093d0:	4b17      	ldr	r3, [pc, #92]	@ (8009430 <app_init+0x108>)
 80093d2:	220c      	movs	r2, #12
 80093d4:	4917      	ldr	r1, [pc, #92]	@ (8009434 <app_init+0x10c>)
 80093d6:	481b      	ldr	r0, [pc, #108]	@ (8009444 <app_init+0x11c>)
 80093d8:	f7fe fe9c 	bl	8008114 <pwm_init>
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 80093dc:	2300      	movs	r3, #0
 80093de:	627b      	str	r3, [r7, #36]	@ 0x24
 80093e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d1d2      	bne.n	800938c <app_init+0x64>
 80093e6:	463b      	mov	r3, r7
 80093e8:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 80093f0:	f3bf 8f5f 	dmb	sy
}
 80093f4:	bf00      	nop
 80093f6:	68bb      	ldr	r3, [r7, #8]
 80093f8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	f383 8810 	msr	PRIMASK, r3
}
 8009400:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 8009402:	f3bf 8f4f 	dsb	sy
}
 8009406:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009408:	f3bf 8f6f 	isb	sy
}
 800940c:	bf00      	nop
}
 800940e:	bf00      	nop
}
 8009410:	bf00      	nop
	}
}
 8009412:	bf00      	nop
 8009414:	3728      	adds	r7, #40	@ 0x28
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
 800941a:	bf00      	nop
 800941c:	2000124c 	.word	0x2000124c
 8009420:	00000000 	.word	0x00000000
 8009424:	44fa0000 	.word	0x44fa0000
 8009428:	447a0000 	.word	0x447a0000
 800942c:	43c80000 	.word	0x43c80000
 8009430:	0501bd00 	.word	0x0501bd00
 8009434:	20004378 	.word	0x20004378
 8009438:	20001664 	.word	0x20001664
 800943c:	20001678 	.word	0x20001678
 8009440:	2000168c 	.word	0x2000168c
 8009444:	200016a0 	.word	0x200016a0

08009448 <app_main_start>:


void app_main_start(void *argument)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b0b4      	sub	sp, #208	@ 0xd0
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
	app_init();
 8009450:	f7ff ff6a 	bl	8009328 <app_init>
    //   original 13  -> normal
    //   original 5   -> below normal
    //
    // If you need finer spacing, use osPriorityHigh1..7, osPriorityAboveNormal1..7 (if available).

    flight_attr = (osThreadAttr_t){
 8009454:	4b81      	ldr	r3, [pc, #516]	@ (800965c <app_main_start+0x214>)
 8009456:	4618      	mov	r0, r3
 8009458:	2324      	movs	r3, #36	@ 0x24
 800945a:	461a      	mov	r2, r3
 800945c:	2100      	movs	r1, #0
 800945e:	f011 fa59 	bl	801a914 <memset>
 8009462:	4b7e      	ldr	r3, [pc, #504]	@ (800965c <app_main_start+0x214>)
 8009464:	4a7e      	ldr	r2, [pc, #504]	@ (8009660 <app_main_start+0x218>)
 8009466:	601a      	str	r2, [r3, #0]
 8009468:	4b7c      	ldr	r3, [pc, #496]	@ (800965c <app_main_start+0x214>)
 800946a:	4a7e      	ldr	r2, [pc, #504]	@ (8009664 <app_main_start+0x21c>)
 800946c:	609a      	str	r2, [r3, #8]
 800946e:	4b7b      	ldr	r3, [pc, #492]	@ (800965c <app_main_start+0x214>)
 8009470:	22a8      	movs	r2, #168	@ 0xa8
 8009472:	60da      	str	r2, [r3, #12]
 8009474:	4b79      	ldr	r3, [pc, #484]	@ (800965c <app_main_start+0x214>)
 8009476:	4a7c      	ldr	r2, [pc, #496]	@ (8009668 <app_main_start+0x220>)
 8009478:	611a      	str	r2, [r3, #16]
 800947a:	4b78      	ldr	r3, [pc, #480]	@ (800965c <app_main_start+0x214>)
 800947c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009480:	615a      	str	r2, [r3, #20]
 8009482:	4b76      	ldr	r3, [pc, #472]	@ (800965c <app_main_start+0x214>)
 8009484:	2230      	movs	r2, #48	@ 0x30
 8009486:	619a      	str	r2, [r3, #24]
        .stack_mem  = flight_stack,
        .stack_size = sizeof(flight_stack),
		.cb_mem = &flight_h_taskControlBlock,
		.cb_size = sizeof(flight_h_taskControlBlock)
    };
    flight_h = osThreadNew(flight_controller_main, NULL, &flight_attr);
 8009488:	4a74      	ldr	r2, [pc, #464]	@ (800965c <app_main_start+0x214>)
 800948a:	2100      	movs	r1, #0
 800948c:	4877      	ldr	r0, [pc, #476]	@ (800966c <app_main_start+0x224>)
 800948e:	f00a fd31 	bl	8013ef4 <osThreadNew>
 8009492:	4603      	mov	r3, r0
 8009494:	4a76      	ldr	r2, [pc, #472]	@ (8009670 <app_main_start+0x228>)
 8009496:	6013      	str	r3, [r2, #0]
    configASSERT(flight_h != NULL);
 8009498:	4b75      	ldr	r3, [pc, #468]	@ (8009670 <app_main_start+0x228>)
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d10c      	bne.n	80094ba <app_main_start+0x72>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80094a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a4:	f383 8811 	msr	BASEPRI, r3
 80094a8:	f3bf 8f6f 	isb	sy
 80094ac:	f3bf 8f4f 	dsb	sy
 80094b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80094b4:	bf00      	nop
 80094b6:	bf00      	nop
 80094b8:	e7fd      	b.n	80094b6 <app_main_start+0x6e>

    write_attr = (osThreadAttr_t){
 80094ba:	4b6e      	ldr	r3, [pc, #440]	@ (8009674 <app_main_start+0x22c>)
 80094bc:	4618      	mov	r0, r3
 80094be:	2324      	movs	r3, #36	@ 0x24
 80094c0:	461a      	mov	r2, r3
 80094c2:	2100      	movs	r1, #0
 80094c4:	f011 fa26 	bl	801a914 <memset>
 80094c8:	4b6a      	ldr	r3, [pc, #424]	@ (8009674 <app_main_start+0x22c>)
 80094ca:	4a6b      	ldr	r2, [pc, #428]	@ (8009678 <app_main_start+0x230>)
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	4b69      	ldr	r3, [pc, #420]	@ (8009674 <app_main_start+0x22c>)
 80094d0:	4a6a      	ldr	r2, [pc, #424]	@ (800967c <app_main_start+0x234>)
 80094d2:	609a      	str	r2, [r3, #8]
 80094d4:	4b67      	ldr	r3, [pc, #412]	@ (8009674 <app_main_start+0x22c>)
 80094d6:	22a8      	movs	r2, #168	@ 0xa8
 80094d8:	60da      	str	r2, [r3, #12]
 80094da:	4b66      	ldr	r3, [pc, #408]	@ (8009674 <app_main_start+0x22c>)
 80094dc:	4a68      	ldr	r2, [pc, #416]	@ (8009680 <app_main_start+0x238>)
 80094de:	611a      	str	r2, [r3, #16]
 80094e0:	4b64      	ldr	r3, [pc, #400]	@ (8009674 <app_main_start+0x22c>)
 80094e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80094e6:	615a      	str	r2, [r3, #20]
 80094e8:	4b62      	ldr	r3, [pc, #392]	@ (8009674 <app_main_start+0x22c>)
 80094ea:	2220      	movs	r2, #32
 80094ec:	619a      	str	r2, [r3, #24]
        .stack_mem  = write_stack,
        .stack_size = sizeof(write_stack),
		.cb_mem = &write_h_taskControlBlock,
		.cb_size = sizeof(write_h_taskControlBlock)
    };
    write_h = osThreadNew(write_motor_main, NULL, &write_attr);
 80094ee:	4a61      	ldr	r2, [pc, #388]	@ (8009674 <app_main_start+0x22c>)
 80094f0:	2100      	movs	r1, #0
 80094f2:	4864      	ldr	r0, [pc, #400]	@ (8009684 <app_main_start+0x23c>)
 80094f4:	f00a fcfe 	bl	8013ef4 <osThreadNew>
 80094f8:	4603      	mov	r3, r0
 80094fa:	4a63      	ldr	r2, [pc, #396]	@ (8009688 <app_main_start+0x240>)
 80094fc:	6013      	str	r3, [r2, #0]
    configASSERT(write_h != NULL);
 80094fe:	4b62      	ldr	r3, [pc, #392]	@ (8009688 <app_main_start+0x240>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d10c      	bne.n	8009520 <app_main_start+0xd8>
	__asm volatile
 8009506:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800950a:	f383 8811 	msr	BASEPRI, r3
 800950e:	f3bf 8f6f 	isb	sy
 8009512:	f3bf 8f4f 	dsb	sy
 8009516:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
}
 800951a:	bf00      	nop
 800951c:	bf00      	nop
 800951e:	e7fd      	b.n	800951c <app_main_start+0xd4>

    rc_attr = (osThreadAttr_t){
 8009520:	4b5a      	ldr	r3, [pc, #360]	@ (800968c <app_main_start+0x244>)
 8009522:	4618      	mov	r0, r3
 8009524:	2324      	movs	r3, #36	@ 0x24
 8009526:	461a      	mov	r2, r3
 8009528:	2100      	movs	r1, #0
 800952a:	f011 f9f3 	bl	801a914 <memset>
 800952e:	4b57      	ldr	r3, [pc, #348]	@ (800968c <app_main_start+0x244>)
 8009530:	4a57      	ldr	r2, [pc, #348]	@ (8009690 <app_main_start+0x248>)
 8009532:	601a      	str	r2, [r3, #0]
 8009534:	4b55      	ldr	r3, [pc, #340]	@ (800968c <app_main_start+0x244>)
 8009536:	4a57      	ldr	r2, [pc, #348]	@ (8009694 <app_main_start+0x24c>)
 8009538:	609a      	str	r2, [r3, #8]
 800953a:	4b54      	ldr	r3, [pc, #336]	@ (800968c <app_main_start+0x244>)
 800953c:	22a8      	movs	r2, #168	@ 0xa8
 800953e:	60da      	str	r2, [r3, #12]
 8009540:	4b52      	ldr	r3, [pc, #328]	@ (800968c <app_main_start+0x244>)
 8009542:	4a55      	ldr	r2, [pc, #340]	@ (8009698 <app_main_start+0x250>)
 8009544:	611a      	str	r2, [r3, #16]
 8009546:	4b51      	ldr	r3, [pc, #324]	@ (800968c <app_main_start+0x244>)
 8009548:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800954c:	615a      	str	r2, [r3, #20]
 800954e:	4b4f      	ldr	r3, [pc, #316]	@ (800968c <app_main_start+0x244>)
 8009550:	2218      	movs	r2, #24
 8009552:	619a      	str	r2, [r3, #24]
        .stack_mem  = rc_stack,
        .stack_size = sizeof(rc_stack),
		.cb_mem = &rc_h_taskControlBlock,
		.cb_size = sizeof(rc_h_taskControlBlock)
    };
    rc_h = osThreadNew(rc_control_main, NULL, &rc_attr);
 8009554:	4a4d      	ldr	r2, [pc, #308]	@ (800968c <app_main_start+0x244>)
 8009556:	2100      	movs	r1, #0
 8009558:	4850      	ldr	r0, [pc, #320]	@ (800969c <app_main_start+0x254>)
 800955a:	f00a fccb 	bl	8013ef4 <osThreadNew>
 800955e:	4603      	mov	r3, r0
 8009560:	4a4f      	ldr	r2, [pc, #316]	@ (80096a0 <app_main_start+0x258>)
 8009562:	6013      	str	r3, [r2, #0]
    configASSERT(rc_h != NULL);
 8009564:	4b4e      	ldr	r3, [pc, #312]	@ (80096a0 <app_main_start+0x258>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10c      	bne.n	8009586 <app_main_start+0x13e>
	__asm volatile
 800956c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009570:	f383 8811 	msr	BASEPRI, r3
 8009574:	f3bf 8f6f 	isb	sy
 8009578:	f3bf 8f4f 	dsb	sy
 800957c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
}
 8009580:	bf00      	nop
 8009582:	bf00      	nop
 8009584:	e7fd      	b.n	8009582 <app_main_start+0x13a>

    telem_attr = (osThreadAttr_t){
 8009586:	4b47      	ldr	r3, [pc, #284]	@ (80096a4 <app_main_start+0x25c>)
 8009588:	4618      	mov	r0, r3
 800958a:	2324      	movs	r3, #36	@ 0x24
 800958c:	461a      	mov	r2, r3
 800958e:	2100      	movs	r1, #0
 8009590:	f011 f9c0 	bl	801a914 <memset>
 8009594:	4b43      	ldr	r3, [pc, #268]	@ (80096a4 <app_main_start+0x25c>)
 8009596:	4a44      	ldr	r2, [pc, #272]	@ (80096a8 <app_main_start+0x260>)
 8009598:	601a      	str	r2, [r3, #0]
 800959a:	4b42      	ldr	r3, [pc, #264]	@ (80096a4 <app_main_start+0x25c>)
 800959c:	4a43      	ldr	r2, [pc, #268]	@ (80096ac <app_main_start+0x264>)
 800959e:	609a      	str	r2, [r3, #8]
 80095a0:	4b40      	ldr	r3, [pc, #256]	@ (80096a4 <app_main_start+0x25c>)
 80095a2:	22a8      	movs	r2, #168	@ 0xa8
 80095a4:	60da      	str	r2, [r3, #12]
 80095a6:	4b3f      	ldr	r3, [pc, #252]	@ (80096a4 <app_main_start+0x25c>)
 80095a8:	4a41      	ldr	r2, [pc, #260]	@ (80096b0 <app_main_start+0x268>)
 80095aa:	611a      	str	r2, [r3, #16]
 80095ac:	4b3d      	ldr	r3, [pc, #244]	@ (80096a4 <app_main_start+0x25c>)
 80095ae:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095b2:	615a      	str	r2, [r3, #20]
 80095b4:	4b3b      	ldr	r3, [pc, #236]	@ (80096a4 <app_main_start+0x25c>)
 80095b6:	2210      	movs	r2, #16
 80095b8:	619a      	str	r2, [r3, #24]
        .stack_mem  = telem_stack,
        .stack_size = sizeof(telem_stack),
		.cb_mem = &telem_h_taskControlBlock,
		.cb_size = sizeof(telem_h_taskControlBlock)
    };
    telem_h = osThreadNew(print_telemetry_data, NULL, &telem_attr);
 80095ba:	4a3a      	ldr	r2, [pc, #232]	@ (80096a4 <app_main_start+0x25c>)
 80095bc:	2100      	movs	r1, #0
 80095be:	483d      	ldr	r0, [pc, #244]	@ (80096b4 <app_main_start+0x26c>)
 80095c0:	f00a fc98 	bl	8013ef4 <osThreadNew>
 80095c4:	4603      	mov	r3, r0
 80095c6:	4a3c      	ldr	r2, [pc, #240]	@ (80096b8 <app_main_start+0x270>)
 80095c8:	6013      	str	r3, [r2, #0]
    configASSERT(telem_h != NULL);
 80095ca:	4b3b      	ldr	r3, [pc, #236]	@ (80096b8 <app_main_start+0x270>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10c      	bne.n	80095ec <app_main_start+0x1a4>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
}
 80095e6:	bf00      	nop
 80095e8:	bf00      	nop
 80095ea:	e7fd      	b.n	80095e8 <app_main_start+0x1a0>


    fp_cli_attr = (osThreadAttr_t){
 80095ec:	4b33      	ldr	r3, [pc, #204]	@ (80096bc <app_main_start+0x274>)
 80095ee:	4618      	mov	r0, r3
 80095f0:	2324      	movs	r3, #36	@ 0x24
 80095f2:	461a      	mov	r2, r3
 80095f4:	2100      	movs	r1, #0
 80095f6:	f011 f98d 	bl	801a914 <memset>
 80095fa:	4b30      	ldr	r3, [pc, #192]	@ (80096bc <app_main_start+0x274>)
 80095fc:	4a30      	ldr	r2, [pc, #192]	@ (80096c0 <app_main_start+0x278>)
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	4b2e      	ldr	r3, [pc, #184]	@ (80096bc <app_main_start+0x274>)
 8009602:	4a30      	ldr	r2, [pc, #192]	@ (80096c4 <app_main_start+0x27c>)
 8009604:	609a      	str	r2, [r3, #8]
 8009606:	4b2d      	ldr	r3, [pc, #180]	@ (80096bc <app_main_start+0x274>)
 8009608:	22a8      	movs	r2, #168	@ 0xa8
 800960a:	60da      	str	r2, [r3, #12]
 800960c:	4b2b      	ldr	r3, [pc, #172]	@ (80096bc <app_main_start+0x274>)
 800960e:	4a2e      	ldr	r2, [pc, #184]	@ (80096c8 <app_main_start+0x280>)
 8009610:	611a      	str	r2, [r3, #16]
 8009612:	4b2a      	ldr	r3, [pc, #168]	@ (80096bc <app_main_start+0x274>)
 8009614:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009618:	615a      	str	r2, [r3, #20]
 800961a:	4b28      	ldr	r3, [pc, #160]	@ (80096bc <app_main_start+0x274>)
 800961c:	2210      	movs	r2, #16
 800961e:	619a      	str	r2, [r3, #24]
        .stack_mem  = fp_cli_stack,
        .stack_size = sizeof(fp_cli_stack),
		.cb_mem = &fp_cli_h_taskControlBlock,
		.cb_size = sizeof(fp_cli_h_taskControlBlock)
    };
    fp_cli_h = osThreadNew(fp_cli_func, NULL, &fp_cli_attr);
 8009620:	4a26      	ldr	r2, [pc, #152]	@ (80096bc <app_main_start+0x274>)
 8009622:	2100      	movs	r1, #0
 8009624:	4829      	ldr	r0, [pc, #164]	@ (80096cc <app_main_start+0x284>)
 8009626:	f00a fc65 	bl	8013ef4 <osThreadNew>
 800962a:	4603      	mov	r3, r0
 800962c:	4a28      	ldr	r2, [pc, #160]	@ (80096d0 <app_main_start+0x288>)
 800962e:	6013      	str	r3, [r2, #0]
    configASSERT(fp_cli_h != NULL);
 8009630:	4b27      	ldr	r3, [pc, #156]	@ (80096d0 <app_main_start+0x288>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d10c      	bne.n	8009652 <app_main_start+0x20a>
	__asm volatile
 8009638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
}
 800964c:	bf00      	nop
 800964e:	bf00      	nop
 8009650:	e7fd      	b.n	800964e <app_main_start+0x206>

}
 8009652:	bf00      	nop
 8009654:	37d0      	adds	r7, #208	@ 0xd0
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}
 800965a:	bf00      	nop
 800965c:	20003ebc 	.word	0x20003ebc
 8009660:	080205b4 	.word	0x080205b4
 8009664:	20003f70 	.word	0x20003f70
 8009668:	200016bc 	.word	0x200016bc
 800966c:	08008865 	.word	0x08008865
 8009670:	200042b8 	.word	0x200042b8
 8009674:	20003ee0 	.word	0x20003ee0
 8009678:	080205cc 	.word	0x080205cc
 800967c:	20004018 	.word	0x20004018
 8009680:	20001ebc 	.word	0x20001ebc
 8009684:	080089cd 	.word	0x080089cd
 8009688:	200042bc 	.word	0x200042bc
 800968c:	20003f04 	.word	0x20003f04
 8009690:	080205e0 	.word	0x080205e0
 8009694:	200040c0 	.word	0x200040c0
 8009698:	200026bc 	.word	0x200026bc
 800969c:	08008be1 	.word	0x08008be1
 80096a0:	200042c0 	.word	0x200042c0
 80096a4:	20003f28 	.word	0x20003f28
 80096a8:	080205f0 	.word	0x080205f0
 80096ac:	20004168 	.word	0x20004168
 80096b0:	20002ebc 	.word	0x20002ebc
 80096b4:	08009009 	.word	0x08009009
 80096b8:	200042c4 	.word	0x200042c4
 80096bc:	20003f4c 	.word	0x20003f4c
 80096c0:	08020608 	.word	0x08020608
 80096c4:	20004210 	.word	0x20004210
 80096c8:	200036bc 	.word	0x200036bc
 80096cc:	08009315 	.word	0x08009315
 80096d0:	200042c8 	.word	0x200042c8

080096d4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80096d4:	b580      	push	{r7, lr}
 80096d6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80096d8:	4b17      	ldr	r3, [pc, #92]	@ (8009738 <MX_SPI1_Init+0x64>)
 80096da:	4a18      	ldr	r2, [pc, #96]	@ (800973c <MX_SPI1_Init+0x68>)
 80096dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80096de:	4b16      	ldr	r3, [pc, #88]	@ (8009738 <MX_SPI1_Init+0x64>)
 80096e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80096e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80096e6:	4b14      	ldr	r3, [pc, #80]	@ (8009738 <MX_SPI1_Init+0x64>)
 80096e8:	2200      	movs	r2, #0
 80096ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80096ec:	4b12      	ldr	r3, [pc, #72]	@ (8009738 <MX_SPI1_Init+0x64>)
 80096ee:	2200      	movs	r2, #0
 80096f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80096f2:	4b11      	ldr	r3, [pc, #68]	@ (8009738 <MX_SPI1_Init+0x64>)
 80096f4:	2202      	movs	r2, #2
 80096f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80096f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009738 <MX_SPI1_Init+0x64>)
 80096fa:	2201      	movs	r2, #1
 80096fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80096fe:	4b0e      	ldr	r3, [pc, #56]	@ (8009738 <MX_SPI1_Init+0x64>)
 8009700:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009704:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8009706:	4b0c      	ldr	r3, [pc, #48]	@ (8009738 <MX_SPI1_Init+0x64>)
 8009708:	2220      	movs	r2, #32
 800970a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800970c:	4b0a      	ldr	r3, [pc, #40]	@ (8009738 <MX_SPI1_Init+0x64>)
 800970e:	2200      	movs	r2, #0
 8009710:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8009712:	4b09      	ldr	r3, [pc, #36]	@ (8009738 <MX_SPI1_Init+0x64>)
 8009714:	2200      	movs	r2, #0
 8009716:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009718:	4b07      	ldr	r3, [pc, #28]	@ (8009738 <MX_SPI1_Init+0x64>)
 800971a:	2200      	movs	r2, #0
 800971c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800971e:	4b06      	ldr	r3, [pc, #24]	@ (8009738 <MX_SPI1_Init+0x64>)
 8009720:	220a      	movs	r2, #10
 8009722:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8009724:	4804      	ldr	r0, [pc, #16]	@ (8009738 <MX_SPI1_Init+0x64>)
 8009726:	f003 ffbd 	bl	800d6a4 <HAL_SPI_Init>
 800972a:	4603      	mov	r3, r0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d001      	beq.n	8009734 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8009730:	f7fe ffe2 	bl	80086f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8009734:	bf00      	nop
 8009736:	bd80      	pop	{r7, pc}
 8009738:	200042d4 	.word	0x200042d4
 800973c:	40013000 	.word	0x40013000

08009740 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b08a      	sub	sp, #40	@ 0x28
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009748:	f107 0314 	add.w	r3, r7, #20
 800974c:	2200      	movs	r2, #0
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	605a      	str	r2, [r3, #4]
 8009752:	609a      	str	r2, [r3, #8]
 8009754:	60da      	str	r2, [r3, #12]
 8009756:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	4a19      	ldr	r2, [pc, #100]	@ (80097c4 <HAL_SPI_MspInit+0x84>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d12b      	bne.n	80097ba <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009762:	2300      	movs	r3, #0
 8009764:	613b      	str	r3, [r7, #16]
 8009766:	4b18      	ldr	r3, [pc, #96]	@ (80097c8 <HAL_SPI_MspInit+0x88>)
 8009768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800976a:	4a17      	ldr	r2, [pc, #92]	@ (80097c8 <HAL_SPI_MspInit+0x88>)
 800976c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009770:	6453      	str	r3, [r2, #68]	@ 0x44
 8009772:	4b15      	ldr	r3, [pc, #84]	@ (80097c8 <HAL_SPI_MspInit+0x88>)
 8009774:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009776:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800977a:	613b      	str	r3, [r7, #16]
 800977c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800977e:	2300      	movs	r3, #0
 8009780:	60fb      	str	r3, [r7, #12]
 8009782:	4b11      	ldr	r3, [pc, #68]	@ (80097c8 <HAL_SPI_MspInit+0x88>)
 8009784:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009786:	4a10      	ldr	r2, [pc, #64]	@ (80097c8 <HAL_SPI_MspInit+0x88>)
 8009788:	f043 0301 	orr.w	r3, r3, #1
 800978c:	6313      	str	r3, [r2, #48]	@ 0x30
 800978e:	4b0e      	ldr	r3, [pc, #56]	@ (80097c8 <HAL_SPI_MspInit+0x88>)
 8009790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009792:	f003 0301 	and.w	r3, r3, #1
 8009796:	60fb      	str	r3, [r7, #12]
 8009798:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800979a:	23e0      	movs	r3, #224	@ 0xe0
 800979c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800979e:	2302      	movs	r3, #2
 80097a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097a2:	2300      	movs	r3, #0
 80097a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097a6:	2303      	movs	r3, #3
 80097a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80097aa:	2305      	movs	r3, #5
 80097ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097ae:	f107 0314 	add.w	r3, r7, #20
 80097b2:	4619      	mov	r1, r3
 80097b4:	4805      	ldr	r0, [pc, #20]	@ (80097cc <HAL_SPI_MspInit+0x8c>)
 80097b6:	f001 fda7 	bl	800b308 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80097ba:	bf00      	nop
 80097bc:	3728      	adds	r7, #40	@ 0x28
 80097be:	46bd      	mov	sp, r7
 80097c0:	bd80      	pop	{r7, pc}
 80097c2:	bf00      	nop
 80097c4:	40013000 	.word	0x40013000
 80097c8:	40023800 	.word	0x40023800
 80097cc:	40020000 	.word	0x40020000

080097d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b082      	sub	sp, #8
 80097d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097d6:	2300      	movs	r3, #0
 80097d8:	607b      	str	r3, [r7, #4]
 80097da:	4b12      	ldr	r3, [pc, #72]	@ (8009824 <HAL_MspInit+0x54>)
 80097dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097de:	4a11      	ldr	r2, [pc, #68]	@ (8009824 <HAL_MspInit+0x54>)
 80097e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80097e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80097e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009824 <HAL_MspInit+0x54>)
 80097e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80097ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80097ee:	607b      	str	r3, [r7, #4]
 80097f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80097f2:	2300      	movs	r3, #0
 80097f4:	603b      	str	r3, [r7, #0]
 80097f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <HAL_MspInit+0x54>)
 80097f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097fa:	4a0a      	ldr	r2, [pc, #40]	@ (8009824 <HAL_MspInit+0x54>)
 80097fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009800:	6413      	str	r3, [r2, #64]	@ 0x40
 8009802:	4b08      	ldr	r3, [pc, #32]	@ (8009824 <HAL_MspInit+0x54>)
 8009804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800980e:	2200      	movs	r2, #0
 8009810:	210f      	movs	r1, #15
 8009812:	f06f 0001 	mvn.w	r0, #1
 8009816:	f001 f8df 	bl	800a9d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800981a:	bf00      	nop
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
 8009822:	bf00      	nop
 8009824:	40023800 	.word	0x40023800

08009828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b08c      	sub	sp, #48	@ 0x30
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8009830:	2300      	movs	r3, #0
 8009832:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8009834:	2300      	movs	r3, #0
 8009836:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8009838:	2300      	movs	r3, #0
 800983a:	60bb      	str	r3, [r7, #8]
 800983c:	4b2f      	ldr	r3, [pc, #188]	@ (80098fc <HAL_InitTick+0xd4>)
 800983e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009840:	4a2e      	ldr	r2, [pc, #184]	@ (80098fc <HAL_InitTick+0xd4>)
 8009842:	f043 0301 	orr.w	r3, r3, #1
 8009846:	6453      	str	r3, [r2, #68]	@ 0x44
 8009848:	4b2c      	ldr	r3, [pc, #176]	@ (80098fc <HAL_InitTick+0xd4>)
 800984a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	60bb      	str	r3, [r7, #8]
 8009852:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009854:	f107 020c 	add.w	r2, r7, #12
 8009858:	f107 0310 	add.w	r3, r7, #16
 800985c:	4611      	mov	r1, r2
 800985e:	4618      	mov	r0, r3
 8009860:	f003 feee 	bl	800d640 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8009864:	f003 fed8 	bl	800d618 <HAL_RCC_GetPCLK2Freq>
 8009868:	4603      	mov	r3, r0
 800986a:	005b      	lsls	r3, r3, #1
 800986c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800986e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009870:	4a23      	ldr	r2, [pc, #140]	@ (8009900 <HAL_InitTick+0xd8>)
 8009872:	fba2 2303 	umull	r2, r3, r2, r3
 8009876:	0c9b      	lsrs	r3, r3, #18
 8009878:	3b01      	subs	r3, #1
 800987a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800987c:	4b21      	ldr	r3, [pc, #132]	@ (8009904 <HAL_InitTick+0xdc>)
 800987e:	4a22      	ldr	r2, [pc, #136]	@ (8009908 <HAL_InitTick+0xe0>)
 8009880:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8009882:	4b20      	ldr	r3, [pc, #128]	@ (8009904 <HAL_InitTick+0xdc>)
 8009884:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009888:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800988a:	4a1e      	ldr	r2, [pc, #120]	@ (8009904 <HAL_InitTick+0xdc>)
 800988c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800988e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8009890:	4b1c      	ldr	r3, [pc, #112]	@ (8009904 <HAL_InitTick+0xdc>)
 8009892:	2200      	movs	r2, #0
 8009894:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009896:	4b1b      	ldr	r3, [pc, #108]	@ (8009904 <HAL_InitTick+0xdc>)
 8009898:	2200      	movs	r2, #0
 800989a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800989c:	4b19      	ldr	r3, [pc, #100]	@ (8009904 <HAL_InitTick+0xdc>)
 800989e:	2200      	movs	r2, #0
 80098a0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80098a2:	4818      	ldr	r0, [pc, #96]	@ (8009904 <HAL_InitTick+0xdc>)
 80098a4:	f004 fcd0 	bl	800e248 <HAL_TIM_Base_Init>
 80098a8:	4603      	mov	r3, r0
 80098aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80098ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d11b      	bne.n	80098ee <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80098b6:	4813      	ldr	r0, [pc, #76]	@ (8009904 <HAL_InitTick+0xdc>)
 80098b8:	f004 fd7e 	bl	800e3b8 <HAL_TIM_Base_Start_IT>
 80098bc:	4603      	mov	r3, r0
 80098be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80098c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d111      	bne.n	80098ee <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80098ca:	2019      	movs	r0, #25
 80098cc:	f001 f8a0 	bl	800aa10 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2b0f      	cmp	r3, #15
 80098d4:	d808      	bhi.n	80098e8 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80098d6:	2200      	movs	r2, #0
 80098d8:	6879      	ldr	r1, [r7, #4]
 80098da:	2019      	movs	r0, #25
 80098dc:	f001 f87c 	bl	800a9d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80098e0:	4a0a      	ldr	r2, [pc, #40]	@ (800990c <HAL_InitTick+0xe4>)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6013      	str	r3, [r2, #0]
 80098e6:	e002      	b.n	80098ee <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80098ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3730      	adds	r7, #48	@ 0x30
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	40023800 	.word	0x40023800
 8009900:	431bde83 	.word	0x431bde83
 8009904:	2000432c 	.word	0x2000432c
 8009908:	40010000 	.word	0x40010000
 800990c:	20000058 	.word	0x20000058

08009910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009910:	b480      	push	{r7}
 8009912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8009914:	bf00      	nop
 8009916:	e7fd      	b.n	8009914 <NMI_Handler+0x4>

08009918 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009918:	b480      	push	{r7}
 800991a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800991c:	bf00      	nop
 800991e:	e7fd      	b.n	800991c <HardFault_Handler+0x4>

08009920 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009920:	b480      	push	{r7}
 8009922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009924:	bf00      	nop
 8009926:	e7fd      	b.n	8009924 <MemManage_Handler+0x4>

08009928 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009928:	b480      	push	{r7}
 800992a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800992c:	bf00      	nop
 800992e:	e7fd      	b.n	800992c <BusFault_Handler+0x4>

08009930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009930:	b480      	push	{r7}
 8009932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009934:	bf00      	nop
 8009936:	e7fd      	b.n	8009934 <UsageFault_Handler+0x4>

08009938 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009938:	b480      	push	{r7}
 800993a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800993c:	bf00      	nop
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
	...

08009948 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800994c:	4802      	ldr	r0, [pc, #8]	@ (8009958 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800994e:	f004 ff23 	bl	800e798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8009952:	bf00      	nop
 8009954:	bd80      	pop	{r7, pc}
 8009956:	bf00      	nop
 8009958:	2000432c 	.word	0x2000432c

0800995c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8009960:	4802      	ldr	r0, [pc, #8]	@ (800996c <TIM4_IRQHandler+0x10>)
 8009962:	f004 ff19 	bl	800e798 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8009966:	bf00      	nop
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	200043c0 	.word	0x200043c0

08009970 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009976:	480e      	ldr	r0, [pc, #56]	@ (80099b0 <USART1_IRQHandler+0x40>)
 8009978:	f005 fe74 	bl	800f664 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE))
 800997c:	4b0c      	ldr	r3, [pc, #48]	@ (80099b0 <USART1_IRQHandler+0x40>)
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f003 0310 	and.w	r3, r3, #16
 8009986:	2b10      	cmp	r3, #16
 8009988:	d10d      	bne.n	80099a6 <USART1_IRQHandler+0x36>
  {
      __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 800998a:	2300      	movs	r3, #0
 800998c:	607b      	str	r3, [r7, #4]
 800998e:	4b08      	ldr	r3, [pc, #32]	@ (80099b0 <USART1_IRQHandler+0x40>)
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	607b      	str	r3, [r7, #4]
 8009996:	4b06      	ldr	r3, [pc, #24]	@ (80099b0 <USART1_IRQHandler+0x40>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	607b      	str	r3, [r7, #4]
 800999e:	687b      	ldr	r3, [r7, #4]
      HAL_UART_IDLECallback(&huart1);
 80099a0:	4803      	ldr	r0, [pc, #12]	@ (80099b0 <USART1_IRQHandler+0x40>)
 80099a2:	f000 fc0d 	bl	800a1c0 <HAL_UART_IDLECallback>
  }
  /* USER CODE END USART1_IRQn 1 */
}
 80099a6:	bf00      	nop
 80099a8:	3708      	adds	r7, #8
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	200054b0 	.word	0x200054b0

080099b4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80099b8:	4802      	ldr	r0, [pc, #8]	@ (80099c4 <DMA2_Stream2_IRQHandler+0x10>)
 80099ba:	f001 fa3b 	bl	800ae34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80099be:	bf00      	nop
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	200054f8 	.word	0x200054f8

080099c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80099cc:	4802      	ldr	r0, [pc, #8]	@ (80099d8 <OTG_FS_IRQHandler+0x10>)
 80099ce:	f002 f890 	bl	800baf2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80099d2:	bf00      	nop
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	2000b484 	.word	0x2000b484

080099dc <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80099e0:	4802      	ldr	r0, [pc, #8]	@ (80099ec <DMA2_Stream7_IRQHandler+0x10>)
 80099e2:	f001 fa27 	bl	800ae34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80099e6:	bf00      	nop
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20005558 	.word	0x20005558

080099f0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80099f0:	b480      	push	{r7}
 80099f2:	af00      	add	r7, sp, #0
  return 1;
 80099f4:	2301      	movs	r3, #1
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <_kill>:

int _kill(int pid, int sig)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
 8009a08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8009a0a:	f011 f845 	bl	801aa98 <__errno>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	2216      	movs	r2, #22
 8009a12:	601a      	str	r2, [r3, #0]
  return -1;
 8009a14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <_exit>:

void _exit (int status)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8009a28:	f04f 31ff 	mov.w	r1, #4294967295
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff ffe7 	bl	8009a00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8009a32:	bf00      	nop
 8009a34:	e7fd      	b.n	8009a32 <_exit+0x12>

08009a36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b086      	sub	sp, #24
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	60f8      	str	r0, [r7, #12]
 8009a3e:	60b9      	str	r1, [r7, #8]
 8009a40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a42:	2300      	movs	r3, #0
 8009a44:	617b      	str	r3, [r7, #20]
 8009a46:	e00a      	b.n	8009a5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8009a48:	f3af 8000 	nop.w
 8009a4c:	4601      	mov	r1, r0
 8009a4e:	68bb      	ldr	r3, [r7, #8]
 8009a50:	1c5a      	adds	r2, r3, #1
 8009a52:	60ba      	str	r2, [r7, #8]
 8009a54:	b2ca      	uxtb	r2, r1
 8009a56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a58:	697b      	ldr	r3, [r7, #20]
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	617b      	str	r3, [r7, #20]
 8009a5e:	697a      	ldr	r2, [r7, #20]
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	429a      	cmp	r2, r3
 8009a64:	dbf0      	blt.n	8009a48 <_read+0x12>
  }

  return len;
 8009a66:	687b      	ldr	r3, [r7, #4]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3718      	adds	r7, #24
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <_close>:
  }
  return len;
}

int _close(int file)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b083      	sub	sp, #12
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8009a78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009a98:	605a      	str	r2, [r3, #4]
  return 0;
 8009a9a:	2300      	movs	r3, #0
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <_isatty>:

int _isatty(int file)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8009ab0:	2301      	movs	r3, #1
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	370c      	adds	r7, #12
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abc:	4770      	bx	lr

08009abe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009abe:	b480      	push	{r7}
 8009ac0:	b085      	sub	sp, #20
 8009ac2:	af00      	add	r7, sp, #0
 8009ac4:	60f8      	str	r0, [r7, #12]
 8009ac6:	60b9      	str	r1, [r7, #8]
 8009ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8009aca:	2300      	movs	r3, #0
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b086      	sub	sp, #24
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009ae0:	4a14      	ldr	r2, [pc, #80]	@ (8009b34 <_sbrk+0x5c>)
 8009ae2:	4b15      	ldr	r3, [pc, #84]	@ (8009b38 <_sbrk+0x60>)
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009aec:	4b13      	ldr	r3, [pc, #76]	@ (8009b3c <_sbrk+0x64>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d102      	bne.n	8009afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009af4:	4b11      	ldr	r3, [pc, #68]	@ (8009b3c <_sbrk+0x64>)
 8009af6:	4a12      	ldr	r2, [pc, #72]	@ (8009b40 <_sbrk+0x68>)
 8009af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009afa:	4b10      	ldr	r3, [pc, #64]	@ (8009b3c <_sbrk+0x64>)
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4413      	add	r3, r2
 8009b02:	693a      	ldr	r2, [r7, #16]
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d207      	bcs.n	8009b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009b08:	f010 ffc6 	bl	801aa98 <__errno>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	220c      	movs	r2, #12
 8009b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009b12:	f04f 33ff 	mov.w	r3, #4294967295
 8009b16:	e009      	b.n	8009b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009b18:	4b08      	ldr	r3, [pc, #32]	@ (8009b3c <_sbrk+0x64>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8009b1e:	4b07      	ldr	r3, [pc, #28]	@ (8009b3c <_sbrk+0x64>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4413      	add	r3, r2
 8009b26:	4a05      	ldr	r2, [pc, #20]	@ (8009b3c <_sbrk+0x64>)
 8009b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3718      	adds	r7, #24
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	20020000 	.word	0x20020000
 8009b38:	00000400 	.word	0x00000400
 8009b3c:	20004374 	.word	0x20004374
 8009b40:	2000bcd8 	.word	0x2000bcd8

08009b44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009b44:	b480      	push	{r7}
 8009b46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009b48:	4b06      	ldr	r3, [pc, #24]	@ (8009b64 <SystemInit+0x20>)
 8009b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009b4e:	4a05      	ldr	r2, [pc, #20]	@ (8009b64 <SystemInit+0x20>)
 8009b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009b58:	bf00      	nop
 8009b5a:	46bd      	mov	sp, r7
 8009b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b60:	4770      	bx	lr
 8009b62:	bf00      	nop
 8009b64:	e000ed00 	.word	0xe000ed00

08009b68 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b08e      	sub	sp, #56	@ 0x38
 8009b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009b6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009b72:	2200      	movs	r2, #0
 8009b74:	601a      	str	r2, [r3, #0]
 8009b76:	605a      	str	r2, [r3, #4]
 8009b78:	609a      	str	r2, [r3, #8]
 8009b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009b7c:	f107 0320 	add.w	r3, r7, #32
 8009b80:	2200      	movs	r2, #0
 8009b82:	601a      	str	r2, [r3, #0]
 8009b84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009b86:	1d3b      	adds	r3, r7, #4
 8009b88:	2200      	movs	r2, #0
 8009b8a:	601a      	str	r2, [r3, #0]
 8009b8c:	605a      	str	r2, [r3, #4]
 8009b8e:	609a      	str	r2, [r3, #8]
 8009b90:	60da      	str	r2, [r3, #12]
 8009b92:	611a      	str	r2, [r3, #16]
 8009b94:	615a      	str	r2, [r3, #20]
 8009b96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8009b98:	4b3d      	ldr	r3, [pc, #244]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009b9a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8009b9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009ba0:	4b3b      	ldr	r3, [pc, #236]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009ba6:	4b3a      	ldr	r3, [pc, #232]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009ba8:	2200      	movs	r2, #0
 8009baa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8009bac:	4b38      	ldr	r3, [pc, #224]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009bb2:	4b37      	ldr	r3, [pc, #220]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009bb4:	2200      	movs	r2, #0
 8009bb6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009bb8:	4b35      	ldr	r3, [pc, #212]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009bba:	2280      	movs	r2, #128	@ 0x80
 8009bbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009bbe:	4834      	ldr	r0, [pc, #208]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009bc0:	f004 fb42 	bl	800e248 <HAL_TIM_Base_Init>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d001      	beq.n	8009bce <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8009bca:	f7fe fd95 	bl	80086f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009bce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009bd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8009bd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009bd8:	4619      	mov	r1, r3
 8009bda:	482d      	ldr	r0, [pc, #180]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009bdc:	f004 ff8e 	bl	800eafc <HAL_TIM_ConfigClockSource>
 8009be0:	4603      	mov	r3, r0
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8009be6:	f7fe fd87 	bl	80086f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8009bea:	4829      	ldr	r0, [pc, #164]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009bec:	f004 fc54 	bl	800e498 <HAL_TIM_PWM_Init>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8009bf6:	f7fe fd7f 	bl	80086f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8009c02:	f107 0320 	add.w	r3, r7, #32
 8009c06:	4619      	mov	r1, r3
 8009c08:	4821      	ldr	r0, [pc, #132]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009c0a:	f005 fb83 	bl	800f314 <HAL_TIMEx_MasterConfigSynchronization>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d001      	beq.n	8009c18 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8009c14:	f7fe fd70 	bl	80086f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009c18:	2360      	movs	r3, #96	@ 0x60
 8009c1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009c20:	2300      	movs	r3, #0
 8009c22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009c24:	2300      	movs	r3, #0
 8009c26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009c28:	1d3b      	adds	r3, r7, #4
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	4818      	ldr	r0, [pc, #96]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009c30:	f004 fea2 	bl	800e978 <HAL_TIM_PWM_ConfigChannel>
 8009c34:	4603      	mov	r3, r0
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d001      	beq.n	8009c3e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8009c3a:	f7fe fd5d 	bl	80086f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8009c3e:	1d3b      	adds	r3, r7, #4
 8009c40:	2204      	movs	r2, #4
 8009c42:	4619      	mov	r1, r3
 8009c44:	4812      	ldr	r0, [pc, #72]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009c46:	f004 fe97 	bl	800e978 <HAL_TIM_PWM_ConfigChannel>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 8009c50:	f7fe fd52 	bl	80086f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8009c54:	1d3b      	adds	r3, r7, #4
 8009c56:	2208      	movs	r2, #8
 8009c58:	4619      	mov	r1, r3
 8009c5a:	480d      	ldr	r0, [pc, #52]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009c5c:	f004 fe8c 	bl	800e978 <HAL_TIM_PWM_ConfigChannel>
 8009c60:	4603      	mov	r3, r0
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8009c66:	f7fe fd47 	bl	80086f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8009c6a:	1d3b      	adds	r3, r7, #4
 8009c6c:	220c      	movs	r2, #12
 8009c6e:	4619      	mov	r1, r3
 8009c70:	4807      	ldr	r0, [pc, #28]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009c72:	f004 fe81 	bl	800e978 <HAL_TIM_PWM_ConfigChannel>
 8009c76:	4603      	mov	r3, r0
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d001      	beq.n	8009c80 <MX_TIM2_Init+0x118>
  {
    Error_Handler();
 8009c7c:	f7fe fd3c 	bl	80086f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8009c80:	4803      	ldr	r0, [pc, #12]	@ (8009c90 <MX_TIM2_Init+0x128>)
 8009c82:	f000 f897 	bl	8009db4 <HAL_TIM_MspPostInit>

}
 8009c86:	bf00      	nop
 8009c88:	3738      	adds	r7, #56	@ 0x38
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bd80      	pop	{r7, pc}
 8009c8e:	bf00      	nop
 8009c90:	20004378 	.word	0x20004378

08009c94 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b086      	sub	sp, #24
 8009c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009c9a:	f107 0308 	add.w	r3, r7, #8
 8009c9e:	2200      	movs	r2, #0
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	605a      	str	r2, [r3, #4]
 8009ca4:	609a      	str	r2, [r3, #8]
 8009ca6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009ca8:	463b      	mov	r3, r7
 8009caa:	2200      	movs	r2, #0
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009cb0:	4b20      	ldr	r3, [pc, #128]	@ (8009d34 <MX_TIM4_Init+0xa0>)
 8009cb2:	4a21      	ldr	r2, [pc, #132]	@ (8009d38 <MX_TIM4_Init+0xa4>)
 8009cb4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8009cb6:	4b1f      	ldr	r3, [pc, #124]	@ (8009d34 <MX_TIM4_Init+0xa0>)
 8009cb8:	2253      	movs	r2, #83	@ 0x53
 8009cba:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009cbc:	4b1d      	ldr	r3, [pc, #116]	@ (8009d34 <MX_TIM4_Init+0xa0>)
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8009cc2:	4b1c      	ldr	r3, [pc, #112]	@ (8009d34 <MX_TIM4_Init+0xa0>)
 8009cc4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8009cc8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009cca:	4b1a      	ldr	r3, [pc, #104]	@ (8009d34 <MX_TIM4_Init+0xa0>)
 8009ccc:	2200      	movs	r2, #0
 8009cce:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009cd0:	4b18      	ldr	r3, [pc, #96]	@ (8009d34 <MX_TIM4_Init+0xa0>)
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009cd6:	4817      	ldr	r0, [pc, #92]	@ (8009d34 <MX_TIM4_Init+0xa0>)
 8009cd8:	f004 fab6 	bl	800e248 <HAL_TIM_Base_Init>
 8009cdc:	4603      	mov	r3, r0
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d001      	beq.n	8009ce6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8009ce2:	f7fe fd09 	bl	80086f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009ce6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009cea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009cec:	f107 0308 	add.w	r3, r7, #8
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4810      	ldr	r0, [pc, #64]	@ (8009d34 <MX_TIM4_Init+0xa0>)
 8009cf4:	f004 ff02 	bl	800eafc <HAL_TIM_ConfigClockSource>
 8009cf8:	4603      	mov	r3, r0
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d001      	beq.n	8009d02 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8009cfe:	f7fe fcfb 	bl	80086f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009d02:	2300      	movs	r3, #0
 8009d04:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009d06:	2300      	movs	r3, #0
 8009d08:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009d0a:	463b      	mov	r3, r7
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	4809      	ldr	r0, [pc, #36]	@ (8009d34 <MX_TIM4_Init+0xa0>)
 8009d10:	f005 fb00 	bl	800f314 <HAL_TIMEx_MasterConfigSynchronization>
 8009d14:	4603      	mov	r3, r0
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d001      	beq.n	8009d1e <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8009d1a:	f7fe fced 	bl	80086f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8009d1e:	4805      	ldr	r0, [pc, #20]	@ (8009d34 <MX_TIM4_Init+0xa0>)
 8009d20:	f004 fb4a 	bl	800e3b8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim4);
 8009d24:	4803      	ldr	r0, [pc, #12]	@ (8009d34 <MX_TIM4_Init+0xa0>)
 8009d26:	f004 fadf 	bl	800e2e8 <HAL_TIM_Base_Start>
  /* USER CODE END TIM4_Init 2 */

}
 8009d2a:	bf00      	nop
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	200043c0 	.word	0x200043c0
 8009d38:	40000800 	.word	0x40000800

08009d3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b084      	sub	sp, #16
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009d4c:	d10e      	bne.n	8009d6c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009d4e:	2300      	movs	r3, #0
 8009d50:	60fb      	str	r3, [r7, #12]
 8009d52:	4b16      	ldr	r3, [pc, #88]	@ (8009dac <HAL_TIM_Base_MspInit+0x70>)
 8009d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d56:	4a15      	ldr	r2, [pc, #84]	@ (8009dac <HAL_TIM_Base_MspInit+0x70>)
 8009d58:	f043 0301 	orr.w	r3, r3, #1
 8009d5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8009d5e:	4b13      	ldr	r3, [pc, #76]	@ (8009dac <HAL_TIM_Base_MspInit+0x70>)
 8009d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8009d6a:	e01a      	b.n	8009da2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM4)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	4a0f      	ldr	r2, [pc, #60]	@ (8009db0 <HAL_TIM_Base_MspInit+0x74>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d115      	bne.n	8009da2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8009d76:	2300      	movs	r3, #0
 8009d78:	60bb      	str	r3, [r7, #8]
 8009d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8009dac <HAL_TIM_Base_MspInit+0x70>)
 8009d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8009dac <HAL_TIM_Base_MspInit+0x70>)
 8009d80:	f043 0304 	orr.w	r3, r3, #4
 8009d84:	6413      	str	r3, [r2, #64]	@ 0x40
 8009d86:	4b09      	ldr	r3, [pc, #36]	@ (8009dac <HAL_TIM_Base_MspInit+0x70>)
 8009d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d8a:	f003 0304 	and.w	r3, r3, #4
 8009d8e:	60bb      	str	r3, [r7, #8]
 8009d90:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8009d92:	2200      	movs	r2, #0
 8009d94:	2105      	movs	r1, #5
 8009d96:	201e      	movs	r0, #30
 8009d98:	f000 fe1e 	bl	800a9d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009d9c:	201e      	movs	r0, #30
 8009d9e:	f000 fe37 	bl	800aa10 <HAL_NVIC_EnableIRQ>
}
 8009da2:	bf00      	nop
 8009da4:	3710      	adds	r7, #16
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	40023800 	.word	0x40023800
 8009db0:	40000800 	.word	0x40000800

08009db4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b08a      	sub	sp, #40	@ 0x28
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dbc:	f107 0314 	add.w	r3, r7, #20
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	601a      	str	r2, [r3, #0]
 8009dc4:	605a      	str	r2, [r3, #4]
 8009dc6:	609a      	str	r2, [r3, #8]
 8009dc8:	60da      	str	r2, [r3, #12]
 8009dca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009dd4:	d13c      	bne.n	8009e50 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	613b      	str	r3, [r7, #16]
 8009dda:	4b1f      	ldr	r3, [pc, #124]	@ (8009e58 <HAL_TIM_MspPostInit+0xa4>)
 8009ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dde:	4a1e      	ldr	r2, [pc, #120]	@ (8009e58 <HAL_TIM_MspPostInit+0xa4>)
 8009de0:	f043 0301 	orr.w	r3, r3, #1
 8009de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8009de6:	4b1c      	ldr	r3, [pc, #112]	@ (8009e58 <HAL_TIM_MspPostInit+0xa4>)
 8009de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dea:	f003 0301 	and.w	r3, r3, #1
 8009dee:	613b      	str	r3, [r7, #16]
 8009df0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009df2:	2300      	movs	r3, #0
 8009df4:	60fb      	str	r3, [r7, #12]
 8009df6:	4b18      	ldr	r3, [pc, #96]	@ (8009e58 <HAL_TIM_MspPostInit+0xa4>)
 8009df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dfa:	4a17      	ldr	r2, [pc, #92]	@ (8009e58 <HAL_TIM_MspPostInit+0xa4>)
 8009dfc:	f043 0302 	orr.w	r3, r3, #2
 8009e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8009e02:	4b15      	ldr	r3, [pc, #84]	@ (8009e58 <HAL_TIM_MspPostInit+0xa4>)
 8009e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e06:	f003 0302 	and.w	r3, r3, #2
 8009e0a:	60fb      	str	r3, [r7, #12]
 8009e0c:	68fb      	ldr	r3, [r7, #12]
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_15;
 8009e0e:	f248 030c 	movw	r3, #32780	@ 0x800c
 8009e12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e14:	2302      	movs	r3, #2
 8009e16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009e20:	2301      	movs	r3, #1
 8009e22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e24:	f107 0314 	add.w	r3, r7, #20
 8009e28:	4619      	mov	r1, r3
 8009e2a:	480c      	ldr	r0, [pc, #48]	@ (8009e5c <HAL_TIM_MspPostInit+0xa8>)
 8009e2c:	f001 fa6c 	bl	800b308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009e30:	2308      	movs	r3, #8
 8009e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e34:	2302      	movs	r3, #2
 8009e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009e40:	2301      	movs	r3, #1
 8009e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009e44:	f107 0314 	add.w	r3, r7, #20
 8009e48:	4619      	mov	r1, r3
 8009e4a:	4805      	ldr	r0, [pc, #20]	@ (8009e60 <HAL_TIM_MspPostInit+0xac>)
 8009e4c:	f001 fa5c 	bl	800b308 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8009e50:	bf00      	nop
 8009e52:	3728      	adds	r7, #40	@ 0x28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40023800 	.word	0x40023800
 8009e5c:	40020000 	.word	0x40020000
 8009e60:	40020400 	.word	0x40020400

08009e64 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b082      	sub	sp, #8
 8009e68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART1_Init 0 */
	ring_buffer_init(&usart1_tx_ring_buffer, usart1_tx_buffer, USART1_TX_BUFFER_SIZE);
 8009e6a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e6e:	4929      	ldr	r1, [pc, #164]	@ (8009f14 <MX_USART1_UART_Init+0xb0>)
 8009e70:	4829      	ldr	r0, [pc, #164]	@ (8009f18 <MX_USART1_UART_Init+0xb4>)
 8009e72:	f7fd ff09 	bl	8007c88 <ring_buffer_init>
	ring_buffer_init(&usart1_rx_ring_buffer, usart1_rx_buffer, USART1_RX_BUFFER_SIZE);
 8009e76:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009e7a:	4928      	ldr	r1, [pc, #160]	@ (8009f1c <MX_USART1_UART_Init+0xb8>)
 8009e7c:	4828      	ldr	r0, [pc, #160]	@ (8009f20 <MX_USART1_UART_Init+0xbc>)
 8009e7e:	f7fd ff03 	bl	8007c88 <ring_buffer_init>
	usart1_last_tx_size = 0;
 8009e82:	4b28      	ldr	r3, [pc, #160]	@ (8009f24 <MX_USART1_UART_Init+0xc0>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 8009e88:	4b27      	ldr	r3, [pc, #156]	@ (8009f28 <MX_USART1_UART_Init+0xc4>)
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	801a      	strh	r2, [r3, #0]
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8009e8e:	4b27      	ldr	r3, [pc, #156]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009e90:	4a27      	ldr	r2, [pc, #156]	@ (8009f30 <MX_USART1_UART_Init+0xcc>)
 8009e92:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8009e94:	4b25      	ldr	r3, [pc, #148]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009e96:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8009e9a:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8009e9c:	4b23      	ldr	r3, [pc, #140]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009ea2:	4b22      	ldr	r3, [pc, #136]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009ea4:	2200      	movs	r2, #0
 8009ea6:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8009ea8:	4b20      	ldr	r3, [pc, #128]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009eaa:	2200      	movs	r2, #0
 8009eac:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009eae:	4b1f      	ldr	r3, [pc, #124]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009eb0:	220c      	movs	r2, #12
 8009eb2:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009eb4:	4b1d      	ldr	r3, [pc, #116]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009eb6:	2200      	movs	r2, #0
 8009eb8:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_8;
 8009eba:	4b1c      	ldr	r3, [pc, #112]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009ebc:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8009ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009ec2:	481a      	ldr	r0, [pc, #104]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009ec4:	f005 fab6 	bl	800f434 <HAL_UART_Init>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d001      	beq.n	8009ed2 <MX_USART1_UART_Init+0x6e>
  {
    Error_Handler();
 8009ece:	f7fe fc13 	bl	80086f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
  uint16_t rx_buffer_remaining_free = (uint16_t)ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 8009ed2:	4813      	ldr	r0, [pc, #76]	@ (8009f20 <MX_USART1_UART_Init+0xbc>)
 8009ed4:	f7fd ff2f 	bl	8007d36 <ring_buffer_linear_free_space>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	80fb      	strh	r3, [r7, #6]
  uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 8009edc:	4810      	ldr	r0, [pc, #64]	@ (8009f20 <MX_USART1_UART_Init+0xbc>)
 8009ede:	f7fd ff6c 	bl	8007dba <ring_buffer_write_ptr>
 8009ee2:	6038      	str	r0, [r7, #0]
//   usart1_last_rx_len = rx_buffer_remaining_free;
//   HAL_UART_Receive_DMA(&huart1, write_ptr, rx_buffer_remaining_free);

  HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 8009ee4:	2280      	movs	r2, #128	@ 0x80
 8009ee6:	4913      	ldr	r1, [pc, #76]	@ (8009f34 <MX_USART1_UART_Init+0xd0>)
 8009ee8:	4810      	ldr	r0, [pc, #64]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009eea:	f005 fb95 	bl	800f618 <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 8009eee:	4b0e      	ldr	r3, [pc, #56]	@ (8009f28 <MX_USART1_UART_Init+0xc4>)
 8009ef0:	2280      	movs	r2, #128	@ 0x80
 8009ef2:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 8009ef4:	4b10      	ldr	r3, [pc, #64]	@ (8009f38 <MX_USART1_UART_Init+0xd4>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	801a      	strh	r2, [r3, #0]

  __HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 8009efa:	4b0c      	ldr	r3, [pc, #48]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68da      	ldr	r2, [r3, #12]
 8009f00:	4b0a      	ldr	r3, [pc, #40]	@ (8009f2c <MX_USART1_UART_Init+0xc8>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	f042 0210 	orr.w	r2, r2, #16
 8009f08:	60da      	str	r2, [r3, #12]
  /* USER CODE END USART1_Init 2 */

}
 8009f0a:	bf00      	nop
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20004c08 	.word	0x20004c08
 8009f18:	20005408 	.word	0x20005408
 8009f1c:	20004408 	.word	0x20004408
 8009f20:	20005418 	.word	0x20005418
 8009f24:	20005428 	.word	0x20005428
 8009f28:	2000542a 	.word	0x2000542a
 8009f2c:	200054b0 	.word	0x200054b0
 8009f30:	40011000 	.word	0x40011000
 8009f34:	2000542c 	.word	0x2000542c
 8009f38:	200054ac 	.word	0x200054ac

08009f3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b08a      	sub	sp, #40	@ 0x28
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009f44:	f107 0314 	add.w	r3, r7, #20
 8009f48:	2200      	movs	r2, #0
 8009f4a:	601a      	str	r2, [r3, #0]
 8009f4c:	605a      	str	r2, [r3, #4]
 8009f4e:	609a      	str	r2, [r3, #8]
 8009f50:	60da      	str	r2, [r3, #12]
 8009f52:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a4c      	ldr	r2, [pc, #304]	@ (800a08c <HAL_UART_MspInit+0x150>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	f040 8092 	bne.w	800a084 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009f60:	2300      	movs	r3, #0
 8009f62:	613b      	str	r3, [r7, #16]
 8009f64:	4b4a      	ldr	r3, [pc, #296]	@ (800a090 <HAL_UART_MspInit+0x154>)
 8009f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f68:	4a49      	ldr	r2, [pc, #292]	@ (800a090 <HAL_UART_MspInit+0x154>)
 8009f6a:	f043 0310 	orr.w	r3, r3, #16
 8009f6e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009f70:	4b47      	ldr	r3, [pc, #284]	@ (800a090 <HAL_UART_MspInit+0x154>)
 8009f72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f74:	f003 0310 	and.w	r3, r3, #16
 8009f78:	613b      	str	r3, [r7, #16]
 8009f7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60fb      	str	r3, [r7, #12]
 8009f80:	4b43      	ldr	r3, [pc, #268]	@ (800a090 <HAL_UART_MspInit+0x154>)
 8009f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f84:	4a42      	ldr	r2, [pc, #264]	@ (800a090 <HAL_UART_MspInit+0x154>)
 8009f86:	f043 0301 	orr.w	r3, r3, #1
 8009f8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8009f8c:	4b40      	ldr	r3, [pc, #256]	@ (800a090 <HAL_UART_MspInit+0x154>)
 8009f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009f90:	f003 0301 	and.w	r3, r3, #1
 8009f94:	60fb      	str	r3, [r7, #12]
 8009f96:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009f98:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8009f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009f9e:	2302      	movs	r3, #2
 8009fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fa6:	2303      	movs	r3, #3
 8009fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009faa:	2307      	movs	r3, #7
 8009fac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009fae:	f107 0314 	add.w	r3, r7, #20
 8009fb2:	4619      	mov	r1, r3
 8009fb4:	4837      	ldr	r0, [pc, #220]	@ (800a094 <HAL_UART_MspInit+0x158>)
 8009fb6:	f001 f9a7 	bl	800b308 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8009fba:	4b37      	ldr	r3, [pc, #220]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 8009fbc:	4a37      	ldr	r2, [pc, #220]	@ (800a09c <HAL_UART_MspInit+0x160>)
 8009fbe:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8009fc0:	4b35      	ldr	r3, [pc, #212]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 8009fc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8009fc6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8009fc8:	4b33      	ldr	r3, [pc, #204]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 8009fca:	2200      	movs	r2, #0
 8009fcc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8009fce:	4b32      	ldr	r3, [pc, #200]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8009fd4:	4b30      	ldr	r3, [pc, #192]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 8009fd6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009fda:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8009fdc:	4b2e      	ldr	r3, [pc, #184]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 8009fde:	2200      	movs	r2, #0
 8009fe0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8009fe2:	4b2d      	ldr	r3, [pc, #180]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8009fe8:	4b2b      	ldr	r3, [pc, #172]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 8009fea:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009fee:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8009ff0:	4b29      	ldr	r3, [pc, #164]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8009ff6:	4b28      	ldr	r3, [pc, #160]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8009ffc:	4826      	ldr	r0, [pc, #152]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 8009ffe:	f000 fd23 	bl	800aa48 <HAL_DMA_Init>
 800a002:	4603      	mov	r3, r0
 800a004:	2b00      	cmp	r3, #0
 800a006:	d001      	beq.n	800a00c <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 800a008:	f7fe fb76 	bl	80086f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	4a22      	ldr	r2, [pc, #136]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 800a010:	63da      	str	r2, [r3, #60]	@ 0x3c
 800a012:	4a21      	ldr	r2, [pc, #132]	@ (800a098 <HAL_UART_MspInit+0x15c>)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800a018:	4b21      	ldr	r3, [pc, #132]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a01a:	4a22      	ldr	r2, [pc, #136]	@ (800a0a4 <HAL_UART_MspInit+0x168>)
 800a01c:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800a01e:	4b20      	ldr	r3, [pc, #128]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a020:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800a024:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a026:	4b1e      	ldr	r3, [pc, #120]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a028:	2240      	movs	r2, #64	@ 0x40
 800a02a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a02c:	4b1c      	ldr	r3, [pc, #112]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a02e:	2200      	movs	r2, #0
 800a030:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a032:	4b1b      	ldr	r3, [pc, #108]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a034:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a038:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a03a:	4b19      	ldr	r3, [pc, #100]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a03c:	2200      	movs	r2, #0
 800a03e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a040:	4b17      	ldr	r3, [pc, #92]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a042:	2200      	movs	r2, #0
 800a044:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800a046:	4b16      	ldr	r3, [pc, #88]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a048:	2200      	movs	r2, #0
 800a04a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800a04c:	4b14      	ldr	r3, [pc, #80]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a04e:	2200      	movs	r2, #0
 800a050:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800a052:	4b13      	ldr	r3, [pc, #76]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a054:	2200      	movs	r2, #0
 800a056:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800a058:	4811      	ldr	r0, [pc, #68]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a05a:	f000 fcf5 	bl	800aa48 <HAL_DMA_Init>
 800a05e:	4603      	mov	r3, r0
 800a060:	2b00      	cmp	r3, #0
 800a062:	d001      	beq.n	800a068 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800a064:	f7fe fb48 	bl	80086f8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	4a0d      	ldr	r2, [pc, #52]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a06c:	639a      	str	r2, [r3, #56]	@ 0x38
 800a06e:	4a0c      	ldr	r2, [pc, #48]	@ (800a0a0 <HAL_UART_MspInit+0x164>)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800a074:	2200      	movs	r2, #0
 800a076:	2105      	movs	r1, #5
 800a078:	2025      	movs	r0, #37	@ 0x25
 800a07a:	f000 fcad 	bl	800a9d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a07e:	2025      	movs	r0, #37	@ 0x25
 800a080:	f000 fcc6 	bl	800aa10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800a084:	bf00      	nop
 800a086:	3728      	adds	r7, #40	@ 0x28
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}
 800a08c:	40011000 	.word	0x40011000
 800a090:	40023800 	.word	0x40023800
 800a094:	40020000 	.word	0x40020000
 800a098:	200054f8 	.word	0x200054f8
 800a09c:	40026440 	.word	0x40026440
 800a0a0:	20005558 	.word	0x20005558
 800a0a4:	400264b8 	.word	0x400264b8

0800a0a8 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b082      	sub	sp, #8
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	4a15      	ldr	r2, [pc, #84]	@ (800a10c <HAL_UART_MspDeInit+0x64>)
 800a0b6:	4293      	cmp	r3, r2
 800a0b8:	d123      	bne.n	800a102 <HAL_UART_MspDeInit+0x5a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800a0ba:	4b15      	ldr	r3, [pc, #84]	@ (800a110 <HAL_UART_MspDeInit+0x68>)
 800a0bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0be:	4a14      	ldr	r2, [pc, #80]	@ (800a110 <HAL_UART_MspDeInit+0x68>)
 800a0c0:	f023 0310 	bic.w	r3, r3, #16
 800a0c4:	6453      	str	r3, [r2, #68]	@ 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 800a0c6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800a0ca:	4812      	ldr	r0, [pc, #72]	@ (800a114 <HAL_UART_MspDeInit+0x6c>)
 800a0cc:	f001 fab8 	bl	800b640 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmarx);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	f000 fd65 	bl	800aba4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f000 fd60 	bl	800aba4 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 800a0e4:	2025      	movs	r0, #37	@ 0x25
 800a0e6:	f000 fca1 	bl	800aa2c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */
	usart1_last_tx_size = 0;
 800a0ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a118 <HAL_UART_MspDeInit+0x70>)
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	801a      	strh	r2, [r3, #0]
	usart1_last_rx_len = 0;
 800a0f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a11c <HAL_UART_MspDeInit+0x74>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	801a      	strh	r2, [r3, #0]
	ring_buffer_clear(&usart1_tx_ring_buffer);
 800a0f6:	480a      	ldr	r0, [pc, #40]	@ (800a120 <HAL_UART_MspDeInit+0x78>)
 800a0f8:	f7fd ff53 	bl	8007fa2 <ring_buffer_clear>
	ring_buffer_clear(&usart1_rx_ring_buffer);
 800a0fc:	4809      	ldr	r0, [pc, #36]	@ (800a124 <HAL_UART_MspDeInit+0x7c>)
 800a0fe:	f7fd ff50 	bl	8007fa2 <ring_buffer_clear>
  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800a102:	bf00      	nop
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	40011000 	.word	0x40011000
 800a110:	40023800 	.word	0x40023800
 800a114:	40020000 	.word	0x40020000
 800a118:	20005428 	.word	0x20005428
 800a11c:	2000542a 	.word	0x2000542a
 800a120:	20005408 	.word	0x20005408
 800a124:	20005418 	.word	0x20005418

0800a128 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	4a19      	ldr	r2, [pc, #100]	@ (800a19c <HAL_UART_TxCpltCallback+0x74>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d12b      	bne.n	800a192 <HAL_UART_TxCpltCallback+0x6a>
    {

    	if(huart1.gState == HAL_UART_STATE_READY)
 800a13a:	4b19      	ldr	r3, [pc, #100]	@ (800a1a0 <HAL_UART_TxCpltCallback+0x78>)
 800a13c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b20      	cmp	r3, #32
 800a144:	d125      	bne.n	800a192 <HAL_UART_TxCpltCallback+0x6a>
    	{
			// Advance tail for previously sent chunk
			ring_buffer_advance_tail(&usart1_tx_ring_buffer, usart1_last_tx_size);
 800a146:	4b17      	ldr	r3, [pc, #92]	@ (800a1a4 <HAL_UART_TxCpltCallback+0x7c>)
 800a148:	881b      	ldrh	r3, [r3, #0]
 800a14a:	b29b      	uxth	r3, r3
 800a14c:	4619      	mov	r1, r3
 800a14e:	4816      	ldr	r0, [pc, #88]	@ (800a1a8 <HAL_UART_TxCpltCallback+0x80>)
 800a150:	f7fd ff07 	bl	8007f62 <ring_buffer_advance_tail>

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 800a154:	4814      	ldr	r0, [pc, #80]	@ (800a1a8 <HAL_UART_TxCpltCallback+0x80>)
 800a156:	f7fd fe15 	bl	8007d84 <ring_buffer_linear_used_space>
 800a15a:	6178      	str	r0, [r7, #20]
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 800a15c:	697b      	ldr	r3, [r7, #20]
 800a15e:	2b80      	cmp	r3, #128	@ 0x80
 800a160:	bf28      	it	cs
 800a162:	2380      	movcs	r3, #128	@ 0x80
 800a164:	827b      	strh	r3, [r7, #18]
			uint8_t *next_chunk = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 800a166:	4810      	ldr	r0, [pc, #64]	@ (800a1a8 <HAL_UART_TxCpltCallback+0x80>)
 800a168:	f7fd fe36 	bl	8007dd8 <ring_buffer_read_ptr>
 800a16c:	60f8      	str	r0, [r7, #12]
			usart1_last_tx_size = frame_size;
 800a16e:	4a0d      	ldr	r2, [pc, #52]	@ (800a1a4 <HAL_UART_TxCpltCallback+0x7c>)
 800a170:	8a7b      	ldrh	r3, [r7, #18]
 800a172:	8013      	strh	r3, [r2, #0]

			if (frame_size > 0)
 800a174:	8a7b      	ldrh	r3, [r7, #18]
 800a176:	2b00      	cmp	r3, #0
 800a178:	d00b      	beq.n	800a192 <HAL_UART_TxCpltCallback+0x6a>
			{
		        if (HAL_UART_Transmit_DMA(huart, next_chunk, frame_size) != HAL_OK) {
 800a17a:	8a7b      	ldrh	r3, [r7, #18]
 800a17c:	461a      	mov	r2, r3
 800a17e:	68f9      	ldr	r1, [r7, #12]
 800a180:	6878      	ldr	r0, [r7, #4]
 800a182:	f005 f9d9 	bl	800f538 <HAL_UART_Transmit_DMA>
 800a186:	4603      	mov	r3, r0
 800a188:	2b00      	cmp	r3, #0
 800a18a:	d002      	beq.n	800a192 <HAL_UART_TxCpltCallback+0x6a>
		            usart1_last_tx_size = 0;
 800a18c:	4b05      	ldr	r3, [pc, #20]	@ (800a1a4 <HAL_UART_TxCpltCallback+0x7c>)
 800a18e:	2200      	movs	r2, #0
 800a190:	801a      	strh	r2, [r3, #0]
				//HAL_UART_Transmit_IT(huart, next_chunk, frame_size);
				// Do NOT advance tail here. Advance it next time, after TX completes.
			}
    	}
    }
}
 800a192:	bf00      	nop
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	40011000 	.word	0x40011000
 800a1a0:	200054b0 	.word	0x200054b0
 800a1a4:	20005428 	.word	0x20005428
 800a1a8:	20005408 	.word	0x20005408

0800a1ac <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b083      	sub	sp, #12
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
    {
    }
}
 800a1b4:	bf00      	nop
 800a1b6:	370c      	adds	r7, #12
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1be:	4770      	bx	lr

0800a1c0 <HAL_UART_IDLECallback>:




void HAL_UART_IDLECallback(UART_HandleTypeDef *huart)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b086      	sub	sp, #24
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1){
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a26      	ldr	r2, [pc, #152]	@ (800a268 <HAL_UART_IDLECallback+0xa8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d147      	bne.n	800a262 <HAL_UART_IDLECallback+0xa2>

    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart->hdmarx));
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1d6:	681b      	ldr	r3, [r3, #0]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800a1de:	617b      	str	r3, [r7, #20]

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 800a1e0:	4b22      	ldr	r3, [pc, #136]	@ (800a26c <HAL_UART_IDLECallback+0xac>)
 800a1e2:	881b      	ldrh	r3, [r3, #0]
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	461a      	mov	r2, r3
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d038      	beq.n	800a260 <HAL_UART_IDLECallback+0xa0>

    if (dma_pos > usart1_dma_last_pos) {
 800a1ee:	4b1f      	ldr	r3, [pc, #124]	@ (800a26c <HAL_UART_IDLECallback+0xac>)
 800a1f0:	881b      	ldrh	r3, [r3, #0]
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	461a      	mov	r2, r3
 800a1f6:	697b      	ldr	r3, [r7, #20]
 800a1f8:	4293      	cmp	r3, r2
 800a1fa:	dd12      	ble.n	800a222 <HAL_UART_IDLECallback+0x62>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 800a1fc:	4b1b      	ldr	r3, [pc, #108]	@ (800a26c <HAL_UART_IDLECallback+0xac>)
 800a1fe:	881b      	ldrh	r3, [r3, #0]
 800a200:	b29b      	uxth	r3, r3
 800a202:	461a      	mov	r2, r3
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	1a9b      	subs	r3, r3, r2
 800a208:	60fb      	str	r3, [r7, #12]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 800a20a:	4b18      	ldr	r3, [pc, #96]	@ (800a26c <HAL_UART_IDLECallback+0xac>)
 800a20c:	881b      	ldrh	r3, [r3, #0]
 800a20e:	b29b      	uxth	r3, r3
 800a210:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800a212:	4b17      	ldr	r3, [pc, #92]	@ (800a270 <HAL_UART_IDLECallback+0xb0>)
 800a214:	4413      	add	r3, r2
 800a216:	68fa      	ldr	r2, [r7, #12]
 800a218:	4619      	mov	r1, r3
 800a21a:	4816      	ldr	r0, [pc, #88]	@ (800a274 <HAL_UART_IDLECallback+0xb4>)
 800a21c:	f7fd fdeb 	bl	8007df6 <ring_buffer_enqueue_arr>
 800a220:	e019      	b.n	800a256 <HAL_UART_IDLECallback+0x96>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 800a222:	4b12      	ldr	r3, [pc, #72]	@ (800a26c <HAL_UART_IDLECallback+0xac>)
 800a224:	881b      	ldrh	r3, [r3, #0]
 800a226:	b29b      	uxth	r3, r3
 800a228:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800a22c:	613b      	str	r3, [r7, #16]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 800a22e:	4b0f      	ldr	r3, [pc, #60]	@ (800a26c <HAL_UART_IDLECallback+0xac>)
 800a230:	881b      	ldrh	r3, [r3, #0]
 800a232:	b29b      	uxth	r3, r3
 800a234:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800a236:	4b0e      	ldr	r3, [pc, #56]	@ (800a270 <HAL_UART_IDLECallback+0xb0>)
 800a238:	4413      	add	r3, r2
 800a23a:	693a      	ldr	r2, [r7, #16]
 800a23c:	4619      	mov	r1, r3
 800a23e:	480d      	ldr	r0, [pc, #52]	@ (800a274 <HAL_UART_IDLECallback+0xb4>)
 800a240:	f7fd fdd9 	bl	8007df6 <ring_buffer_enqueue_arr>
        if (dma_pos) {
 800a244:	697b      	ldr	r3, [r7, #20]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d005      	beq.n	800a256 <HAL_UART_IDLECallback+0x96>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	461a      	mov	r2, r3
 800a24e:	4908      	ldr	r1, [pc, #32]	@ (800a270 <HAL_UART_IDLECallback+0xb0>)
 800a250:	4808      	ldr	r0, [pc, #32]	@ (800a274 <HAL_UART_IDLECallback+0xb4>)
 800a252:	f7fd fdd0 	bl	8007df6 <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 800a256:	697b      	ldr	r3, [r7, #20]
 800a258:	b29a      	uxth	r2, r3
 800a25a:	4b04      	ldr	r3, [pc, #16]	@ (800a26c <HAL_UART_IDLECallback+0xac>)
 800a25c:	801a      	strh	r2, [r3, #0]
 800a25e:	e000      	b.n	800a262 <HAL_UART_IDLECallback+0xa2>
    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 800a260:	bf00      	nop
    }
}
 800a262:	3718      	adds	r7, #24
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	40011000 	.word	0x40011000
 800a26c:	200054ac 	.word	0x200054ac
 800a270:	2000542c 	.word	0x2000542c
 800a274:	20005418 	.word	0x20005418

0800a278 <usart1_read_dma_buffer>:


void usart1_read_dma_buffer()
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b08c      	sub	sp, #48	@ 0x30
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	2300      	movs	r3, #0
 800a280:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a282:	f3ef 8310 	mrs	r3, PRIMASK
 800a286:	61bb      	str	r3, [r7, #24]
  return(result);
 800a288:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a28a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a28c:	b672      	cpsid	i
}
 800a28e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a290:	f3bf 8f4f 	dsb	sy
}
 800a294:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a296:	f3bf 8f6f 	isb	sy
}
 800a29a:	bf00      	nop
    return old;
 800a29c:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a29e:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a2a0:	69fb      	ldr	r3, [r7, #28]
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d001      	beq.n	800a2aa <usart1_read_dma_buffer+0x32>
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	e000      	b.n	800a2ac <usart1_read_dma_buffer+0x34>
 800a2aa:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a2ac:	603b      	str	r3, [r7, #0]
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a2b2:	e049      	b.n	800a348 <usart1_read_dma_buffer+0xd0>
	{
    // Position DMA has written up to (bytes received so far)
    int dma_pos = (int)(RX_DMA_BUF_SIZE - __HAL_DMA_GET_COUNTER(huart1.hdmarx));
 800a2b4:	4b33      	ldr	r3, [pc, #204]	@ (800a384 <usart1_read_dma_buffer+0x10c>)
 800a2b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800a2c0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (dma_pos == usart1_dma_last_pos) return; // nothing new
 800a2c2:	4b31      	ldr	r3, [pc, #196]	@ (800a388 <usart1_read_dma_buffer+0x110>)
 800a2c4:	881b      	ldrh	r3, [r3, #0]
 800a2c6:	b29b      	uxth	r3, r3
 800a2c8:	461a      	mov	r2, r3
 800a2ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d101      	bne.n	800a2d4 <usart1_read_dma_buffer+0x5c>
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	e03d      	b.n	800a350 <usart1_read_dma_buffer+0xd8>

    if (dma_pos > usart1_dma_last_pos) {
 800a2d4:	4b2c      	ldr	r3, [pc, #176]	@ (800a388 <usart1_read_dma_buffer+0x110>)
 800a2d6:	881b      	ldrh	r3, [r3, #0]
 800a2d8:	b29b      	uxth	r3, r3
 800a2da:	461a      	mov	r2, r3
 800a2dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	dd12      	ble.n	800a308 <usart1_read_dma_buffer+0x90>
        // linear chunk
        size_t len = dma_pos - usart1_dma_last_pos;
 800a2e2:	4b29      	ldr	r3, [pc, #164]	@ (800a388 <usart1_read_dma_buffer+0x110>)
 800a2e4:	881b      	ldrh	r3, [r3, #0]
 800a2e6:	b29b      	uxth	r3, r3
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ec:	1a9b      	subs	r3, r3, r2
 800a2ee:	623b      	str	r3, [r7, #32]
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], len);
 800a2f0:	4b25      	ldr	r3, [pc, #148]	@ (800a388 <usart1_read_dma_buffer+0x110>)
 800a2f2:	881b      	ldrh	r3, [r3, #0]
 800a2f4:	b29b      	uxth	r3, r3
 800a2f6:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800a2f8:	4b24      	ldr	r3, [pc, #144]	@ (800a38c <usart1_read_dma_buffer+0x114>)
 800a2fa:	4413      	add	r3, r2
 800a2fc:	6a3a      	ldr	r2, [r7, #32]
 800a2fe:	4619      	mov	r1, r3
 800a300:	4823      	ldr	r0, [pc, #140]	@ (800a390 <usart1_read_dma_buffer+0x118>)
 800a302:	f7fd fd78 	bl	8007df6 <ring_buffer_enqueue_arr>
 800a306:	e019      	b.n	800a33c <usart1_read_dma_buffer+0xc4>
    } else {
        // wrapped: tail then head
        size_t tail_len = RX_DMA_BUF_SIZE - usart1_dma_last_pos;
 800a308:	4b1f      	ldr	r3, [pc, #124]	@ (800a388 <usart1_read_dma_buffer+0x110>)
 800a30a:	881b      	ldrh	r3, [r3, #0]
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 800a312:	627b      	str	r3, [r7, #36]	@ 0x24
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
                          &usart1_dma_rx[usart1_dma_last_pos], tail_len);
 800a314:	4b1c      	ldr	r3, [pc, #112]	@ (800a388 <usart1_read_dma_buffer+0x110>)
 800a316:	881b      	ldrh	r3, [r3, #0]
 800a318:	b29b      	uxth	r3, r3
 800a31a:	461a      	mov	r2, r3
        ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800a31c:	4b1b      	ldr	r3, [pc, #108]	@ (800a38c <usart1_read_dma_buffer+0x114>)
 800a31e:	4413      	add	r3, r2
 800a320:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a322:	4619      	mov	r1, r3
 800a324:	481a      	ldr	r0, [pc, #104]	@ (800a390 <usart1_read_dma_buffer+0x118>)
 800a326:	f7fd fd66 	bl	8007df6 <ring_buffer_enqueue_arr>
        if (dma_pos) {
 800a32a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d005      	beq.n	800a33c <usart1_read_dma_buffer+0xc4>
        	ring_buffer_enqueue_arr(&usart1_rx_ring_buffer,
 800a330:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a332:	461a      	mov	r2, r3
 800a334:	4915      	ldr	r1, [pc, #84]	@ (800a38c <usart1_read_dma_buffer+0x114>)
 800a336:	4816      	ldr	r0, [pc, #88]	@ (800a390 <usart1_read_dma_buffer+0x118>)
 800a338:	f7fd fd5d 	bl	8007df6 <ring_buffer_enqueue_arr>
                              &usart1_dma_rx[0], dma_pos);
        }
    }

    usart1_dma_last_pos = dma_pos;
 800a33c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a33e:	b29a      	uxth	r2, r3
 800a340:	4b11      	ldr	r3, [pc, #68]	@ (800a388 <usart1_read_dma_buffer+0x110>)
 800a342:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a344:	2300      	movs	r3, #0
 800a346:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1b2      	bne.n	800a2b4 <usart1_read_dma_buffer+0x3c>
 800a34e:	2301      	movs	r3, #1
 800a350:	463a      	mov	r2, r7
 800a352:	60fa      	str	r2, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 800a354:	68fa      	ldr	r2, [r7, #12]
 800a356:	6812      	ldr	r2, [r2, #0]
 800a358:	60ba      	str	r2, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800a35a:	f3bf 8f5f 	dmb	sy
}
 800a35e:	bf00      	nop
 800a360:	68ba      	ldr	r2, [r7, #8]
 800a362:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	f382 8810 	msr	PRIMASK, r2
}
 800a36a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a36c:	f3bf 8f4f 	dsb	sy
}
 800a370:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a372:	f3bf 8f6f 	isb	sy
}
 800a376:	bf00      	nop
}
 800a378:	bf00      	nop
}
 800a37a:	bf00      	nop
 800a37c:	2b01      	cmp	r3, #1
	}
}
 800a37e:	3730      	adds	r7, #48	@ 0x30
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	200054b0 	.word	0x200054b0
 800a388:	200054ac 	.word	0x200054ac
 800a38c:	2000542c 	.word	0x2000542c
 800a390:	20005418 	.word	0x20005418

0800a394 <HAL_UART_ErrorCallback>:




void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a04      	ldr	r2, [pc, #16]	@ (800a3b4 <HAL_UART_ErrorCallback+0x20>)
 800a3a2:	4293      	cmp	r3, r2
 800a3a4:	d101      	bne.n	800a3aa <HAL_UART_ErrorCallback+0x16>
    {
        // Handle TX/RX recovery here
        //usart1_recover();
        usart1_restart();
 800a3a6:	f000 f877 	bl	800a498 <usart1_restart>
    }
}
 800a3aa:	bf00      	nop
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
 800a3b2:	bf00      	nop
 800a3b4:	40011000 	.word	0x40011000

0800a3b8 <usart1_start_tx_if_idle>:


void usart1_start_tx_if_idle(int force_state)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b08e      	sub	sp, #56	@ 0x38
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	2300      	movs	r3, #0
 800a3c2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a3c4:	f3ef 8310 	mrs	r3, PRIMASK
 800a3c8:	623b      	str	r3, [r7, #32]
  return(result);
 800a3ca:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a3cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3ce:	b672      	cpsid	i
}
 800a3d0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a3d2:	f3bf 8f4f 	dsb	sy
}
 800a3d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a3d8:	f3bf 8f6f 	isb	sy
}
 800a3dc:	bf00      	nop
    return old;
 800a3de:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a3e0:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3e4:	2b01      	cmp	r3, #1
 800a3e6:	d001      	beq.n	800a3ec <usart1_start_tx_if_idle+0x34>
 800a3e8:	69bb      	ldr	r3, [r7, #24]
 800a3ea:	e000      	b.n	800a3ee <usart1_start_tx_if_idle+0x36>
 800a3ec:	2300      	movs	r3, #0
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a3ee:	60bb      	str	r3, [r7, #8]
 800a3f0:	2301      	movs	r3, #1
 800a3f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f4:	e02c      	b.n	800a450 <usart1_start_tx_if_idle+0x98>
	{
		if (((huart1.gState == HAL_UART_STATE_READY) || force_state != 0) && ring_buffer_used_space(&usart1_tx_ring_buffer) > 0)
 800a3f6:	4b25      	ldr	r3, [pc, #148]	@ (800a48c <usart1_start_tx_if_idle+0xd4>)
 800a3f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a3fc:	b2db      	uxtb	r3, r3
 800a3fe:	2b20      	cmp	r3, #32
 800a400:	d002      	beq.n	800a408 <usart1_start_tx_if_idle+0x50>
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d021      	beq.n	800a44c <usart1_start_tx_if_idle+0x94>
 800a408:	4821      	ldr	r0, [pc, #132]	@ (800a490 <usart1_start_tx_if_idle+0xd8>)
 800a40a:	f7fd fc7b 	bl	8007d04 <ring_buffer_used_space>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d01b      	beq.n	800a44c <usart1_start_tx_if_idle+0x94>
		{

			size_t linear_used = ring_buffer_linear_used_space(&usart1_tx_ring_buffer);
 800a414:	481e      	ldr	r0, [pc, #120]	@ (800a490 <usart1_start_tx_if_idle+0xd8>)
 800a416:	f7fd fcb5 	bl	8007d84 <ring_buffer_linear_used_space>
 800a41a:	6338      	str	r0, [r7, #48]	@ 0x30
			uint16_t frame_size = MIN(linear_used, USART1_TX_CHUNK_SIZE);
 800a41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41e:	2b80      	cmp	r3, #128	@ 0x80
 800a420:	bf28      	it	cs
 800a422:	2380      	movcs	r3, #128	@ 0x80
 800a424:	85fb      	strh	r3, [r7, #46]	@ 0x2e
			uint8_t *data = ring_buffer_read_ptr(&usart1_tx_ring_buffer);
 800a426:	481a      	ldr	r0, [pc, #104]	@ (800a490 <usart1_start_tx_if_idle+0xd8>)
 800a428:	f7fd fcd6 	bl	8007dd8 <ring_buffer_read_ptr>
 800a42c:	62b8      	str	r0, [r7, #40]	@ 0x28

			usart1_last_tx_size = frame_size;
 800a42e:	4a19      	ldr	r2, [pc, #100]	@ (800a494 <usart1_start_tx_if_idle+0xdc>)
 800a430:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a432:	8013      	strh	r3, [r2, #0]

			//EXIT_CRITICAL();
			if (HAL_UART_Transmit_DMA(&huart1, data, frame_size) != HAL_OK) {
 800a434:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800a436:	461a      	mov	r2, r3
 800a438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a43a:	4814      	ldr	r0, [pc, #80]	@ (800a48c <usart1_start_tx_if_idle+0xd4>)
 800a43c:	f005 f87c 	bl	800f538 <HAL_UART_Transmit_DMA>
 800a440:	4603      	mov	r3, r0
 800a442:	2b00      	cmp	r3, #0
 800a444:	d002      	beq.n	800a44c <usart1_start_tx_if_idle+0x94>
				//ENTER_CRITICAL();
				usart1_last_tx_size = 0;
 800a446:	4b13      	ldr	r3, [pc, #76]	@ (800a494 <usart1_start_tx_if_idle+0xdc>)
 800a448:	2200      	movs	r2, #0
 800a44a:	801a      	strh	r2, [r3, #0]
	ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a44c:	2300      	movs	r3, #0
 800a44e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a452:	2b00      	cmp	r3, #0
 800a454:	d1cf      	bne.n	800a3f6 <usart1_start_tx_if_idle+0x3e>
 800a456:	f107 0308 	add.w	r3, r7, #8
 800a45a:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a462:	f3bf 8f5f 	dmb	sy
}
 800a466:	bf00      	nop
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f383 8810 	msr	PRIMASK, r3
}
 800a472:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a474:	f3bf 8f4f 	dsb	sy
}
 800a478:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a47a:	f3bf 8f6f 	isb	sy
}
 800a47e:	bf00      	nop
}
 800a480:	bf00      	nop
}
 800a482:	bf00      	nop
		else
		{
			//EXIT_CRITICAL();
		}
	}
}
 800a484:	bf00      	nop
 800a486:	3738      	adds	r7, #56	@ 0x38
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}
 800a48c:	200054b0 	.word	0x200054b0
 800a490:	20005408 	.word	0x20005408
 800a494:	20005428 	.word	0x20005428

0800a498 <usart1_restart>:
  usart1_dma_last_pos = 0;
}


void usart1_restart(void)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
    // 1. Deinit UART (also unlinks DMA internally)
    HAL_UART_DeInit(&huart1);
 800a49e:	481b      	ldr	r0, [pc, #108]	@ (800a50c <usart1_restart+0x74>)
 800a4a0:	f005 f818 	bl	800f4d4 <HAL_UART_DeInit>

    // 2. Deinit DMA streams manually
    HAL_DMA_DeInit(huart1.hdmarx);
 800a4a4:	4b19      	ldr	r3, [pc, #100]	@ (800a50c <usart1_restart+0x74>)
 800a4a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f000 fb7b 	bl	800aba4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart1.hdmatx);
 800a4ae:	4b17      	ldr	r3, [pc, #92]	@ (800a50c <usart1_restart+0x74>)
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	f000 fb76 	bl	800aba4 <HAL_DMA_DeInit>

    // 3. Reset USART1 peripheral
    __HAL_RCC_USART1_FORCE_RESET();
 800a4b8:	4b15      	ldr	r3, [pc, #84]	@ (800a510 <usart1_restart+0x78>)
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4bc:	4a14      	ldr	r2, [pc, #80]	@ (800a510 <usart1_restart+0x78>)
 800a4be:	f043 0310 	orr.w	r3, r3, #16
 800a4c2:	6253      	str	r3, [r2, #36]	@ 0x24
    __HAL_RCC_USART1_RELEASE_RESET();
 800a4c4:	4b12      	ldr	r3, [pc, #72]	@ (800a510 <usart1_restart+0x78>)
 800a4c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4c8:	4a11      	ldr	r2, [pc, #68]	@ (800a510 <usart1_restart+0x78>)
 800a4ca:	f023 0310 	bic.w	r3, r3, #16
 800a4ce:	6253      	str	r3, [r2, #36]	@ 0x24

    // 4. Reinit USART1 and DMA
    MX_USART1_UART_Init();  // Reinitializes UART and links DMA
 800a4d0:	f7ff fcc8 	bl	8009e64 <MX_USART1_UART_Init>
    //MX_DMA_Init();          // Only needed if you have a custom DMA init function

    // 5. Restart RX DMA if needed
    uint16_t space = ring_buffer_linear_free_space(&usart1_rx_ring_buffer);
 800a4d4:	480f      	ldr	r0, [pc, #60]	@ (800a514 <usart1_restart+0x7c>)
 800a4d6:	f7fd fc2e 	bl	8007d36 <ring_buffer_linear_free_space>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	80fb      	strh	r3, [r7, #6]
    uint8_t *write_ptr = ring_buffer_write_ptr(&usart1_rx_ring_buffer);
 800a4de:	480d      	ldr	r0, [pc, #52]	@ (800a514 <usart1_restart+0x7c>)
 800a4e0:	f7fd fc6b 	bl	8007dba <ring_buffer_write_ptr>
 800a4e4:	6038      	str	r0, [r7, #0]
    // usart1_last_rx_len = space;
    // HAL_UART_Receive_DMA(&huart1, write_ptr, space);

      HAL_UART_Receive_DMA(&huart1, usart1_dma_rx, RX_DMA_BUF_SIZE);
 800a4e6:	2280      	movs	r2, #128	@ 0x80
 800a4e8:	490b      	ldr	r1, [pc, #44]	@ (800a518 <usart1_restart+0x80>)
 800a4ea:	4808      	ldr	r0, [pc, #32]	@ (800a50c <usart1_restart+0x74>)
 800a4ec:	f005 f894 	bl	800f618 <HAL_UART_Receive_DMA>
  usart1_last_rx_len = RX_DMA_BUF_SIZE;
 800a4f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a51c <usart1_restart+0x84>)
 800a4f2:	2280      	movs	r2, #128	@ 0x80
 800a4f4:	801a      	strh	r2, [r3, #0]
  usart1_dma_last_pos = 0;
 800a4f6:	4b0a      	ldr	r3, [pc, #40]	@ (800a520 <usart1_restart+0x88>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	801a      	strh	r2, [r3, #0]

    usart1_start_tx_if_idle(1);
 800a4fc:	2001      	movs	r0, #1
 800a4fe:	f7ff ff5b 	bl	800a3b8 <usart1_start_tx_if_idle>
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	200054b0 	.word	0x200054b0
 800a510:	40023800 	.word	0x40023800
 800a514:	20005418 	.word	0x20005418
 800a518:	2000542c 	.word	0x2000542c
 800a51c:	2000542a 	.word	0x2000542a
 800a520:	200054ac 	.word	0x200054ac

0800a524 <usart1_send_data>:




size_t usart1_send_data(char* data, size_t len)
{
 800a524:	b580      	push	{r7, lr}
 800a526:	b08c      	sub	sp, #48	@ 0x30
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
 800a52c:	6039      	str	r1, [r7, #0]
    if (data == NULL || len == 0) {
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d002      	beq.n	800a53a <usart1_send_data+0x16>
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d101      	bne.n	800a53e <usart1_send_data+0x1a>
        return 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	e040      	b.n	800a5c0 <usart1_send_data+0x9c>
 800a53e:	2300      	movs	r3, #0
 800a540:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a542:	f3ef 8310 	mrs	r3, PRIMASK
 800a546:	623b      	str	r3, [r7, #32]
  return(result);
 800a548:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a54a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a54c:	b672      	cpsid	i
}
 800a54e:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a550:	f3bf 8f4f 	dsb	sy
}
 800a554:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a556:	f3bf 8f6f 	isb	sy
}
 800a55a:	bf00      	nop
    return old;
 800a55c:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a55e:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a562:	2b01      	cmp	r3, #1
 800a564:	d001      	beq.n	800a56a <usart1_send_data+0x46>
 800a566:	69bb      	ldr	r3, [r7, #24]
 800a568:	e000      	b.n	800a56c <usart1_send_data+0x48>
 800a56a:	2300      	movs	r3, #0
    }
    size_t bytes_written;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a56c:	60bb      	str	r3, [r7, #8]
 800a56e:	2301      	movs	r3, #1
 800a570:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a572:	e007      	b.n	800a584 <usart1_send_data+0x60>
    {
        // Try to enqueue data
    	bytes_written = ring_buffer_enqueue_arr(&usart1_tx_ring_buffer, (uint8_t*)data, len);
 800a574:	683a      	ldr	r2, [r7, #0]
 800a576:	6879      	ldr	r1, [r7, #4]
 800a578:	4813      	ldr	r0, [pc, #76]	@ (800a5c8 <usart1_send_data+0xa4>)
 800a57a:	f7fd fc3c 	bl	8007df6 <ring_buffer_enqueue_arr>
 800a57e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a580:	2300      	movs	r3, #0
 800a582:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1f4      	bne.n	800a574 <usart1_send_data+0x50>
 800a58a:	f107 0308 	add.w	r3, r7, #8
 800a58e:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a590:	697b      	ldr	r3, [r7, #20]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a596:	f3bf 8f5f 	dmb	sy
}
 800a59a:	bf00      	nop
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f383 8810 	msr	PRIMASK, r3
}
 800a5a6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a5a8:	f3bf 8f4f 	dsb	sy
}
 800a5ac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a5ae:	f3bf 8f6f 	isb	sy
}
 800a5b2:	bf00      	nop
}
 800a5b4:	bf00      	nop
}
 800a5b6:	bf00      	nop
    }

    usart1_start_tx_if_idle(0);
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	f7ff fefd 	bl	800a3b8 <usart1_start_tx_if_idle>

    return bytes_written;
 800a5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a5c0:	4618      	mov	r0, r3
 800a5c2:	3730      	adds	r7, #48	@ 0x30
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	bd80      	pop	{r7, pc}
 800a5c8:	20005408 	.word	0x20005408

0800a5cc <usart1_recv_data>:

size_t usart1_recv_data(char* out_buf, size_t max_len)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b08c      	sub	sp, #48	@ 0x30
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
 800a5d4:	6039      	str	r1, [r7, #0]
    if (out_buf == NULL || max_len == 0) {
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <usart1_recv_data+0x16>
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d101      	bne.n	800a5e6 <usart1_recv_data+0x1a>
        return 0;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	e03f      	b.n	800a666 <usart1_recv_data+0x9a>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a5ea:	f3ef 8310 	mrs	r3, PRIMASK
 800a5ee:	623b      	str	r3, [r7, #32]
  return(result);
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a5f2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5f4:	b672      	cpsid	i
}
 800a5f6:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a5f8:	f3bf 8f4f 	dsb	sy
}
 800a5fc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a5fe:	f3bf 8f6f 	isb	sy
}
 800a602:	bf00      	nop
    return old;
 800a604:	69fb      	ldr	r3, [r7, #28]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a606:	61bb      	str	r3, [r7, #24]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d001      	beq.n	800a612 <usart1_recv_data+0x46>
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	e000      	b.n	800a614 <usart1_recv_data+0x48>
 800a612:	2300      	movs	r3, #0
    }
    size_t bytes_read;
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a614:	60bb      	str	r3, [r7, #8]
 800a616:	2301      	movs	r3, #1
 800a618:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a61a:	e009      	b.n	800a630 <usart1_recv_data+0x64>
    {
        usart1_read_dma_buffer();
 800a61c:	f7ff fe2c 	bl	800a278 <usart1_read_dma_buffer>
    	bytes_read = ring_buffer_dequeue_arr(&usart1_rx_ring_buffer, (uint8_t*)out_buf, max_len);
 800a620:	683a      	ldr	r2, [r7, #0]
 800a622:	6879      	ldr	r1, [r7, #4]
 800a624:	4812      	ldr	r0, [pc, #72]	@ (800a670 <usart1_recv_data+0xa4>)
 800a626:	f7fd fc40 	bl	8007eaa <ring_buffer_dequeue_arr>
 800a62a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a62c:	2300      	movs	r3, #0
 800a62e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a632:	2b00      	cmp	r3, #0
 800a634:	d1f2      	bne.n	800a61c <usart1_recv_data+0x50>
 800a636:	f107 0308 	add.w	r3, r7, #8
 800a63a:	617b      	str	r3, [r7, #20]
	exit_critical(*sreg);		// restore saved I-bit
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dmb 0xF":::"memory");
 800a642:	f3bf 8f5f 	dmb	sy
}
 800a646:	bf00      	nop
 800a648:	693b      	ldr	r3, [r7, #16]
 800a64a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	f383 8810 	msr	PRIMASK, r3
}
 800a652:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a654:	f3bf 8f4f 	dsb	sy
}
 800a658:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a65a:	f3bf 8f6f 	isb	sy
}
 800a65e:	bf00      	nop
}
 800a660:	bf00      	nop
}
 800a662:	bf00      	nop
    }

    return bytes_read;
 800a664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a666:	4618      	mov	r0, r3
 800a668:	3730      	adds	r7, #48	@ 0x30
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	20005418 	.word	0x20005418

0800a674 <usart1_data_available_for_read>:

size_t usart1_data_available_for_read()
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b08a      	sub	sp, #40	@ 0x28
 800a678:	af00      	add	r7, sp, #0
 800a67a:	2300      	movs	r3, #0
 800a67c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800a67e:	f3ef 8310 	mrs	r3, PRIMASK
 800a682:	61bb      	str	r3, [r7, #24]
  return(result);
 800a684:	69bb      	ldr	r3, [r7, #24]
    crit_state_t old = __get_PRIMASK();  // 0 or 1
 800a686:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 800a688:	b672      	cpsid	i
}
 800a68a:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a68c:	f3bf 8f4f 	dsb	sy
}
 800a690:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a692:	f3bf 8f6f 	isb	sy
}
 800a696:	bf00      	nop
    return old;
 800a698:	697b      	ldr	r3, [r7, #20]
	crit_state_t sreg = enter_critical();   // save interrupt flag state and disable interrupts
 800a69a:	613b      	str	r3, [r7, #16]
    return (type == ATOMIC_FORCEON_CUSTOM) ? PRIMASK_ENABLE_INTERRUPTS : sreg;
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	2b01      	cmp	r3, #1
 800a6a0:	d001      	beq.n	800a6a6 <usart1_data_available_for_read+0x32>
 800a6a2:	693b      	ldr	r3, [r7, #16]
 800a6a4:	e000      	b.n	800a6a8 <usart1_data_available_for_read+0x34>
 800a6a6:	2300      	movs	r3, #0
	size_t used;

    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a6a8:	603b      	str	r3, [r7, #0]
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	623b      	str	r3, [r7, #32]
 800a6ae:	e007      	b.n	800a6c0 <usart1_data_available_for_read+0x4c>
    {
        usart1_read_dma_buffer();
 800a6b0:	f7ff fde2 	bl	800a278 <usart1_read_dma_buffer>
    	used = ring_buffer_used_space(&usart1_rx_ring_buffer);
 800a6b4:	4811      	ldr	r0, [pc, #68]	@ (800a6fc <usart1_data_available_for_read+0x88>)
 800a6b6:	f7fd fb25 	bl	8007d04 <ring_buffer_used_space>
 800a6ba:	6278      	str	r0, [r7, #36]	@ 0x24
    ATOMIC_BLOCK_CUSTOM(ATOMIC_RESTORESTATE_CUSTOM)
 800a6bc:	2300      	movs	r3, #0
 800a6be:	623b      	str	r3, [r7, #32]
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d1f4      	bne.n	800a6b0 <usart1_data_available_for_read+0x3c>
 800a6c6:	463b      	mov	r3, r7
 800a6c8:	60fb      	str	r3, [r7, #12]
	exit_critical(*sreg);		// restore saved I-bit
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dmb 0xF":::"memory");
 800a6d0:	f3bf 8f5f 	dmb	sy
}
 800a6d4:	bf00      	nop
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	f383 8810 	msr	PRIMASK, r3
}
 800a6e0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800a6e2:	f3bf 8f4f 	dsb	sy
}
 800a6e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a6e8:	f3bf 8f6f 	isb	sy
}
 800a6ec:	bf00      	nop
}
 800a6ee:	bf00      	nop
}
 800a6f0:	bf00      	nop
    }

    return used;
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3728      	adds	r7, #40	@ 0x28
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}
 800a6fc:	20005418 	.word	0x20005418

0800a700 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800a700:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800a738 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800a704:	f7ff fa1e 	bl	8009b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800a708:	480c      	ldr	r0, [pc, #48]	@ (800a73c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800a70a:	490d      	ldr	r1, [pc, #52]	@ (800a740 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800a70c:	4a0d      	ldr	r2, [pc, #52]	@ (800a744 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800a70e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800a710:	e002      	b.n	800a718 <LoopCopyDataInit>

0800a712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800a712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800a714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800a716:	3304      	adds	r3, #4

0800a718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800a718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800a71a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800a71c:	d3f9      	bcc.n	800a712 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800a71e:	4a0a      	ldr	r2, [pc, #40]	@ (800a748 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800a720:	4c0a      	ldr	r4, [pc, #40]	@ (800a74c <LoopFillZerobss+0x22>)
  movs r3, #0
 800a722:	2300      	movs	r3, #0
  b LoopFillZerobss
 800a724:	e001      	b.n	800a72a <LoopFillZerobss>

0800a726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800a726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800a728:	3204      	adds	r2, #4

0800a72a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800a72a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800a72c:	d3fb      	bcc.n	800a726 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800a72e:	f010 f9b9 	bl	801aaa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800a732:	f7fd ff47 	bl	80085c4 <main>
  bx  lr    
 800a736:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800a738:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800a73c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800a740:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 800a744:	08020f64 	.word	0x08020f64
  ldr r2, =_sbss
 800a748:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 800a74c:	2000bcd4 	.word	0x2000bcd4

0800a750 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800a750:	e7fe      	b.n	800a750 <ADC_IRQHandler>
	...

0800a754 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a758:	4b0e      	ldr	r3, [pc, #56]	@ (800a794 <HAL_Init+0x40>)
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a0d      	ldr	r2, [pc, #52]	@ (800a794 <HAL_Init+0x40>)
 800a75e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a762:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800a764:	4b0b      	ldr	r3, [pc, #44]	@ (800a794 <HAL_Init+0x40>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a0a      	ldr	r2, [pc, #40]	@ (800a794 <HAL_Init+0x40>)
 800a76a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a76e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800a770:	4b08      	ldr	r3, [pc, #32]	@ (800a794 <HAL_Init+0x40>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	4a07      	ldr	r2, [pc, #28]	@ (800a794 <HAL_Init+0x40>)
 800a776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a77a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800a77c:	2003      	movs	r0, #3
 800a77e:	f000 f920 	bl	800a9c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800a782:	200f      	movs	r0, #15
 800a784:	f7ff f850 	bl	8009828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800a788:	f7ff f822 	bl	80097d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800a78c:	2300      	movs	r3, #0
}
 800a78e:	4618      	mov	r0, r3
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	40023c00 	.word	0x40023c00

0800a798 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800a798:	b480      	push	{r7}
 800a79a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800a79c:	4b06      	ldr	r3, [pc, #24]	@ (800a7b8 <HAL_IncTick+0x20>)
 800a79e:	781b      	ldrb	r3, [r3, #0]
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	4b06      	ldr	r3, [pc, #24]	@ (800a7bc <HAL_IncTick+0x24>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	4a04      	ldr	r2, [pc, #16]	@ (800a7bc <HAL_IncTick+0x24>)
 800a7aa:	6013      	str	r3, [r2, #0]
}
 800a7ac:	bf00      	nop
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	2000005c 	.word	0x2000005c
 800a7bc:	200055b8 	.word	0x200055b8

0800a7c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	af00      	add	r7, sp, #0
  return uwTick;
 800a7c4:	4b03      	ldr	r3, [pc, #12]	@ (800a7d4 <HAL_GetTick+0x14>)
 800a7c6:	681b      	ldr	r3, [r3, #0]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	200055b8 	.word	0x200055b8

0800a7d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b084      	sub	sp, #16
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800a7e0:	f7ff ffee 	bl	800a7c0 <HAL_GetTick>
 800a7e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7f0:	d005      	beq.n	800a7fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800a7f2:	4b0a      	ldr	r3, [pc, #40]	@ (800a81c <HAL_Delay+0x44>)
 800a7f4:	781b      	ldrb	r3, [r3, #0]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800a7fe:	bf00      	nop
 800a800:	f7ff ffde 	bl	800a7c0 <HAL_GetTick>
 800a804:	4602      	mov	r2, r0
 800a806:	68bb      	ldr	r3, [r7, #8]
 800a808:	1ad3      	subs	r3, r2, r3
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d8f7      	bhi.n	800a800 <HAL_Delay+0x28>
  {
  }
}
 800a810:	bf00      	nop
 800a812:	bf00      	nop
 800a814:	3710      	adds	r7, #16
 800a816:	46bd      	mov	sp, r7
 800a818:	bd80      	pop	{r7, pc}
 800a81a:	bf00      	nop
 800a81c:	2000005c 	.word	0x2000005c

0800a820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f003 0307 	and.w	r3, r3, #7
 800a82e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a830:	4b0c      	ldr	r3, [pc, #48]	@ (800a864 <__NVIC_SetPriorityGrouping+0x44>)
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a836:	68ba      	ldr	r2, [r7, #8]
 800a838:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a83c:	4013      	ands	r3, r2
 800a83e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a848:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a84c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a852:	4a04      	ldr	r2, [pc, #16]	@ (800a864 <__NVIC_SetPriorityGrouping+0x44>)
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	60d3      	str	r3, [r2, #12]
}
 800a858:	bf00      	nop
 800a85a:	3714      	adds	r7, #20
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr
 800a864:	e000ed00 	.word	0xe000ed00

0800a868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a868:	b480      	push	{r7}
 800a86a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a86c:	4b04      	ldr	r3, [pc, #16]	@ (800a880 <__NVIC_GetPriorityGrouping+0x18>)
 800a86e:	68db      	ldr	r3, [r3, #12]
 800a870:	0a1b      	lsrs	r3, r3, #8
 800a872:	f003 0307 	and.w	r3, r3, #7
}
 800a876:	4618      	mov	r0, r3
 800a878:	46bd      	mov	sp, r7
 800a87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a87e:	4770      	bx	lr
 800a880:	e000ed00 	.word	0xe000ed00

0800a884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a884:	b480      	push	{r7}
 800a886:	b083      	sub	sp, #12
 800a888:	af00      	add	r7, sp, #0
 800a88a:	4603      	mov	r3, r0
 800a88c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a88e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a892:	2b00      	cmp	r3, #0
 800a894:	db0b      	blt.n	800a8ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a896:	79fb      	ldrb	r3, [r7, #7]
 800a898:	f003 021f 	and.w	r2, r3, #31
 800a89c:	4907      	ldr	r1, [pc, #28]	@ (800a8bc <__NVIC_EnableIRQ+0x38>)
 800a89e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8a2:	095b      	lsrs	r3, r3, #5
 800a8a4:	2001      	movs	r0, #1
 800a8a6:	fa00 f202 	lsl.w	r2, r0, r2
 800a8aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a8ae:	bf00      	nop
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop
 800a8bc:	e000e100 	.word	0xe000e100

0800a8c0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a8ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	db12      	blt.n	800a8f8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a8d2:	79fb      	ldrb	r3, [r7, #7]
 800a8d4:	f003 021f 	and.w	r2, r3, #31
 800a8d8:	490a      	ldr	r1, [pc, #40]	@ (800a904 <__NVIC_DisableIRQ+0x44>)
 800a8da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a8de:	095b      	lsrs	r3, r3, #5
 800a8e0:	2001      	movs	r0, #1
 800a8e2:	fa00 f202 	lsl.w	r2, r0, r2
 800a8e6:	3320      	adds	r3, #32
 800a8e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800a8ec:	f3bf 8f4f 	dsb	sy
}
 800a8f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a8f2:	f3bf 8f6f 	isb	sy
}
 800a8f6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	e000e100 	.word	0xe000e100

0800a908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	4603      	mov	r3, r0
 800a910:	6039      	str	r1, [r7, #0]
 800a912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	db0a      	blt.n	800a932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a91c:	683b      	ldr	r3, [r7, #0]
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	490c      	ldr	r1, [pc, #48]	@ (800a954 <__NVIC_SetPriority+0x4c>)
 800a922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a926:	0112      	lsls	r2, r2, #4
 800a928:	b2d2      	uxtb	r2, r2
 800a92a:	440b      	add	r3, r1
 800a92c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a930:	e00a      	b.n	800a948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	b2da      	uxtb	r2, r3
 800a936:	4908      	ldr	r1, [pc, #32]	@ (800a958 <__NVIC_SetPriority+0x50>)
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	f003 030f 	and.w	r3, r3, #15
 800a93e:	3b04      	subs	r3, #4
 800a940:	0112      	lsls	r2, r2, #4
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	440b      	add	r3, r1
 800a946:	761a      	strb	r2, [r3, #24]
}
 800a948:	bf00      	nop
 800a94a:	370c      	adds	r7, #12
 800a94c:	46bd      	mov	sp, r7
 800a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a952:	4770      	bx	lr
 800a954:	e000e100 	.word	0xe000e100
 800a958:	e000ed00 	.word	0xe000ed00

0800a95c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b089      	sub	sp, #36	@ 0x24
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f003 0307 	and.w	r3, r3, #7
 800a96e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a970:	69fb      	ldr	r3, [r7, #28]
 800a972:	f1c3 0307 	rsb	r3, r3, #7
 800a976:	2b04      	cmp	r3, #4
 800a978:	bf28      	it	cs
 800a97a:	2304      	movcs	r3, #4
 800a97c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	3304      	adds	r3, #4
 800a982:	2b06      	cmp	r3, #6
 800a984:	d902      	bls.n	800a98c <NVIC_EncodePriority+0x30>
 800a986:	69fb      	ldr	r3, [r7, #28]
 800a988:	3b03      	subs	r3, #3
 800a98a:	e000      	b.n	800a98e <NVIC_EncodePriority+0x32>
 800a98c:	2300      	movs	r3, #0
 800a98e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a990:	f04f 32ff 	mov.w	r2, #4294967295
 800a994:	69bb      	ldr	r3, [r7, #24]
 800a996:	fa02 f303 	lsl.w	r3, r2, r3
 800a99a:	43da      	mvns	r2, r3
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	401a      	ands	r2, r3
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a9a4:	f04f 31ff 	mov.w	r1, #4294967295
 800a9a8:	697b      	ldr	r3, [r7, #20]
 800a9aa:	fa01 f303 	lsl.w	r3, r1, r3
 800a9ae:	43d9      	mvns	r1, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a9b4:	4313      	orrs	r3, r2
         );
}
 800a9b6:	4618      	mov	r0, r3
 800a9b8:	3724      	adds	r7, #36	@ 0x24
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a9c2:	b580      	push	{r7, lr}
 800a9c4:	b082      	sub	sp, #8
 800a9c6:	af00      	add	r7, sp, #0
 800a9c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f7ff ff28 	bl	800a820 <__NVIC_SetPriorityGrouping>
}
 800a9d0:	bf00      	nop
 800a9d2:	3708      	adds	r7, #8
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b086      	sub	sp, #24
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	4603      	mov	r3, r0
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800a9ea:	f7ff ff3d 	bl	800a868 <__NVIC_GetPriorityGrouping>
 800a9ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	68b9      	ldr	r1, [r7, #8]
 800a9f4:	6978      	ldr	r0, [r7, #20]
 800a9f6:	f7ff ffb1 	bl	800a95c <NVIC_EncodePriority>
 800a9fa:	4602      	mov	r2, r0
 800a9fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa00:	4611      	mov	r1, r2
 800aa02:	4618      	mov	r0, r3
 800aa04:	f7ff ff80 	bl	800a908 <__NVIC_SetPriority>
}
 800aa08:	bf00      	nop
 800aa0a:	3718      	adds	r7, #24
 800aa0c:	46bd      	mov	sp, r7
 800aa0e:	bd80      	pop	{r7, pc}

0800aa10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b082      	sub	sp, #8
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	4603      	mov	r3, r0
 800aa18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800aa1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f7ff ff30 	bl	800a884 <__NVIC_EnableIRQ>
}
 800aa24:	bf00      	nop
 800aa26:	3708      	adds	r7, #8
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b082      	sub	sp, #8
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	4603      	mov	r3, r0
 800aa34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800aa36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7ff ff40 	bl	800a8c0 <__NVIC_DisableIRQ>
}
 800aa40:	bf00      	nop
 800aa42:	3708      	adds	r7, #8
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}

0800aa48 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b086      	sub	sp, #24
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800aa50:	2300      	movs	r3, #0
 800aa52:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800aa54:	f7ff feb4 	bl	800a7c0 <HAL_GetTick>
 800aa58:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e099      	b.n	800ab98 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2202      	movs	r2, #2
 800aa68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0201 	bic.w	r2, r2, #1
 800aa82:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aa84:	e00f      	b.n	800aaa6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800aa86:	f7ff fe9b 	bl	800a7c0 <HAL_GetTick>
 800aa8a:	4602      	mov	r2, r0
 800aa8c:	693b      	ldr	r3, [r7, #16]
 800aa8e:	1ad3      	subs	r3, r2, r3
 800aa90:	2b05      	cmp	r3, #5
 800aa92:	d908      	bls.n	800aaa6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2220      	movs	r2, #32
 800aa98:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	2203      	movs	r2, #3
 800aa9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800aaa2:	2303      	movs	r3, #3
 800aaa4:	e078      	b.n	800ab98 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	f003 0301 	and.w	r3, r3, #1
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e8      	bne.n	800aa86 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800aabc:	697a      	ldr	r2, [r7, #20]
 800aabe:	4b38      	ldr	r3, [pc, #224]	@ (800aba0 <HAL_DMA_Init+0x158>)
 800aac0:	4013      	ands	r3, r2
 800aac2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	685a      	ldr	r2, [r3, #4]
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	689b      	ldr	r3, [r3, #8]
 800aacc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	691b      	ldr	r3, [r3, #16]
 800aad8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800aade:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	699b      	ldr	r3, [r3, #24]
 800aae4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800aaea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6a1b      	ldr	r3, [r3, #32]
 800aaf0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800aaf2:	697a      	ldr	r2, [r7, #20]
 800aaf4:	4313      	orrs	r3, r2
 800aaf6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aafc:	2b04      	cmp	r3, #4
 800aafe:	d107      	bne.n	800ab10 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ab08:	4313      	orrs	r3, r2
 800ab0a:	697a      	ldr	r2, [r7, #20]
 800ab0c:	4313      	orrs	r3, r2
 800ab0e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	695b      	ldr	r3, [r3, #20]
 800ab1e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800ab20:	697b      	ldr	r3, [r7, #20]
 800ab22:	f023 0307 	bic.w	r3, r3, #7
 800ab26:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2c:	697a      	ldr	r2, [r7, #20]
 800ab2e:	4313      	orrs	r3, r2
 800ab30:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab36:	2b04      	cmp	r3, #4
 800ab38:	d117      	bne.n	800ab6a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab3e:	697a      	ldr	r2, [r7, #20]
 800ab40:	4313      	orrs	r3, r2
 800ab42:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00e      	beq.n	800ab6a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800ab4c:	6878      	ldr	r0, [r7, #4]
 800ab4e:	f000 fb5f 	bl	800b210 <DMA_CheckFifoParam>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d008      	beq.n	800ab6a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2240      	movs	r2, #64	@ 0x40
 800ab5c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2201      	movs	r2, #1
 800ab62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800ab66:	2301      	movs	r3, #1
 800ab68:	e016      	b.n	800ab98 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	697a      	ldr	r2, [r7, #20]
 800ab70:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 fb16 	bl	800b1a4 <DMA_CalcBaseAndBitshift>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ab80:	223f      	movs	r2, #63	@ 0x3f
 800ab82:	409a      	lsls	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2201      	movs	r2, #1
 800ab92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800ab96:	2300      	movs	r3, #0
}
 800ab98:	4618      	mov	r0, r3
 800ab9a:	3718      	adds	r7, #24
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	f010803f 	.word	0xf010803f

0800aba4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d101      	bne.n	800abb6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e050      	b.n	800ac58 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b02      	cmp	r3, #2
 800abc0:	d101      	bne.n	800abc6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800abc2:	2302      	movs	r3, #2
 800abc4:	e048      	b.n	800ac58 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f022 0201 	bic.w	r2, r2, #1
 800abd4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	2200      	movs	r2, #0
 800abdc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	2200      	movs	r2, #0
 800abe4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2200      	movs	r2, #0
 800abec:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	2200      	movs	r2, #0
 800abf4:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	2200      	movs	r2, #0
 800abfc:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	2221      	movs	r2, #33	@ 0x21
 800ac04:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 facc 	bl	800b1a4 <DMA_CalcBaseAndBitshift>
 800ac0c:	4603      	mov	r3, r0
 800ac0e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2200      	movs	r2, #0
 800ac14:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2200      	movs	r2, #0
 800ac20:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2200      	movs	r2, #0
 800ac26:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	2200      	movs	r2, #0
 800ac32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ac38:	223f      	movs	r2, #63	@ 0x3f
 800ac3a:	409a      	lsls	r2, r3
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2200      	movs	r2, #0
 800ac44:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800ac56:	2300      	movs	r3, #0
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
 800ac6c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac76:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d101      	bne.n	800ac86 <HAL_DMA_Start_IT+0x26>
 800ac82:	2302      	movs	r3, #2
 800ac84:	e040      	b.n	800ad08 <HAL_DMA_Start_IT+0xa8>
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ac94:	b2db      	uxtb	r3, r3
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d12f      	bne.n	800acfa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	2202      	movs	r2, #2
 800ac9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	2200      	movs	r2, #0
 800aca6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	687a      	ldr	r2, [r7, #4]
 800acac:	68b9      	ldr	r1, [r7, #8]
 800acae:	68f8      	ldr	r0, [r7, #12]
 800acb0:	f000 fa4a 	bl	800b148 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800acb8:	223f      	movs	r2, #63	@ 0x3f
 800acba:	409a      	lsls	r2, r3
 800acbc:	693b      	ldr	r3, [r7, #16]
 800acbe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f042 0216 	orr.w	r2, r2, #22
 800acce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d007      	beq.n	800ace8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	681a      	ldr	r2, [r3, #0]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f042 0208 	orr.w	r2, r2, #8
 800ace6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	681a      	ldr	r2, [r3, #0]
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f042 0201 	orr.w	r2, r2, #1
 800acf6:	601a      	str	r2, [r3, #0]
 800acf8:	e005      	b.n	800ad06 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	2200      	movs	r2, #0
 800acfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800ad02:	2302      	movs	r3, #2
 800ad04:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800ad06:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3718      	adds	r7, #24
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}

0800ad10 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b084      	sub	sp, #16
 800ad14:	af00      	add	r7, sp, #0
 800ad16:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ad1c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800ad1e:	f7ff fd4f 	bl	800a7c0 <HAL_GetTick>
 800ad22:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ad2a:	b2db      	uxtb	r3, r3
 800ad2c:	2b02      	cmp	r3, #2
 800ad2e:	d008      	beq.n	800ad42 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	2280      	movs	r2, #128	@ 0x80
 800ad34:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800ad3e:	2301      	movs	r3, #1
 800ad40:	e052      	b.n	800ade8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f022 0216 	bic.w	r2, r2, #22
 800ad50:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	695a      	ldr	r2, [r3, #20]
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ad60:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d103      	bne.n	800ad72 <HAL_DMA_Abort+0x62>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d007      	beq.n	800ad82 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	681a      	ldr	r2, [r3, #0]
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f022 0208 	bic.w	r2, r2, #8
 800ad80:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0201 	bic.w	r2, r2, #1
 800ad90:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800ad92:	e013      	b.n	800adbc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800ad94:	f7ff fd14 	bl	800a7c0 <HAL_GetTick>
 800ad98:	4602      	mov	r2, r0
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	1ad3      	subs	r3, r2, r3
 800ad9e:	2b05      	cmp	r3, #5
 800ada0:	d90c      	bls.n	800adbc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	2220      	movs	r2, #32
 800ada6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2203      	movs	r2, #3
 800adac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2200      	movs	r2, #0
 800adb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e015      	b.n	800ade8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	f003 0301 	and.w	r3, r3, #1
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d1e4      	bne.n	800ad94 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800adce:	223f      	movs	r2, #63	@ 0x3f
 800add0:	409a      	lsls	r2, r3
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2200      	movs	r2, #0
 800ade2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800ade6:	2300      	movs	r3, #0
}
 800ade8:	4618      	mov	r0, r3
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}

0800adf0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800adf0:	b480      	push	{r7}
 800adf2:	b083      	sub	sp, #12
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b02      	cmp	r3, #2
 800ae02:	d004      	beq.n	800ae0e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2280      	movs	r2, #128	@ 0x80
 800ae08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e00c      	b.n	800ae28 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2205      	movs	r2, #5
 800ae12:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	681a      	ldr	r2, [r3, #0]
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f022 0201 	bic.w	r2, r2, #1
 800ae24:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800ae26:	2300      	movs	r3, #0
}
 800ae28:	4618      	mov	r0, r3
 800ae2a:	370c      	adds	r7, #12
 800ae2c:	46bd      	mov	sp, r7
 800ae2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae32:	4770      	bx	lr

0800ae34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800ae40:	4b8e      	ldr	r3, [pc, #568]	@ (800b07c <HAL_DMA_IRQHandler+0x248>)
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	4a8e      	ldr	r2, [pc, #568]	@ (800b080 <HAL_DMA_IRQHandler+0x24c>)
 800ae46:	fba2 2303 	umull	r2, r3, r2, r3
 800ae4a:	0a9b      	lsrs	r3, r3, #10
 800ae4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ae52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae5e:	2208      	movs	r2, #8
 800ae60:	409a      	lsls	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	4013      	ands	r3, r2
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d01a      	beq.n	800aea0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	f003 0304 	and.w	r3, r3, #4
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d013      	beq.n	800aea0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	681a      	ldr	r2, [r3, #0]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f022 0204 	bic.w	r2, r2, #4
 800ae86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ae8c:	2208      	movs	r2, #8
 800ae8e:	409a      	lsls	r2, r3
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ae98:	f043 0201 	orr.w	r2, r3, #1
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aea4:	2201      	movs	r2, #1
 800aea6:	409a      	lsls	r2, r3
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4013      	ands	r3, r2
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d012      	beq.n	800aed6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	695b      	ldr	r3, [r3, #20]
 800aeb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00b      	beq.n	800aed6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aec2:	2201      	movs	r2, #1
 800aec4:	409a      	lsls	r2, r3
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800aece:	f043 0202 	orr.w	r2, r3, #2
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aeda:	2204      	movs	r2, #4
 800aedc:	409a      	lsls	r2, r3
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	4013      	ands	r3, r2
 800aee2:	2b00      	cmp	r3, #0
 800aee4:	d012      	beq.n	800af0c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f003 0302 	and.w	r3, r3, #2
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d00b      	beq.n	800af0c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aef8:	2204      	movs	r2, #4
 800aefa:	409a      	lsls	r2, r3
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800af04:	f043 0204 	orr.w	r2, r3, #4
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af10:	2210      	movs	r2, #16
 800af12:	409a      	lsls	r2, r3
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	4013      	ands	r3, r2
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d043      	beq.n	800afa4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f003 0308 	and.w	r3, r3, #8
 800af26:	2b00      	cmp	r3, #0
 800af28:	d03c      	beq.n	800afa4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af2e:	2210      	movs	r2, #16
 800af30:	409a      	lsls	r2, r3
 800af32:	693b      	ldr	r3, [r7, #16]
 800af34:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800af40:	2b00      	cmp	r3, #0
 800af42:	d018      	beq.n	800af76 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d108      	bne.n	800af64 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af56:	2b00      	cmp	r3, #0
 800af58:	d024      	beq.n	800afa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	4798      	blx	r3
 800af62:	e01f      	b.n	800afa4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d01b      	beq.n	800afa4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	4798      	blx	r3
 800af74:	e016      	b.n	800afa4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af80:	2b00      	cmp	r3, #0
 800af82:	d107      	bne.n	800af94 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f022 0208 	bic.w	r2, r2, #8
 800af92:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afa8:	2220      	movs	r2, #32
 800afaa:	409a      	lsls	r2, r3
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4013      	ands	r3, r2
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 808f 	beq.w	800b0d4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f003 0310 	and.w	r3, r3, #16
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f000 8087 	beq.w	800b0d4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800afca:	2220      	movs	r2, #32
 800afcc:	409a      	lsls	r2, r3
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b05      	cmp	r3, #5
 800afdc:	d136      	bne.n	800b04c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	681a      	ldr	r2, [r3, #0]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 0216 	bic.w	r2, r2, #22
 800afec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	695a      	ldr	r2, [r3, #20]
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800affc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b002:	2b00      	cmp	r3, #0
 800b004:	d103      	bne.n	800b00e <HAL_DMA_IRQHandler+0x1da>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d007      	beq.n	800b01e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	f022 0208 	bic.w	r2, r2, #8
 800b01c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b022:	223f      	movs	r2, #63	@ 0x3f
 800b024:	409a      	lsls	r2, r3
 800b026:	693b      	ldr	r3, [r7, #16]
 800b028:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2201      	movs	r2, #1
 800b02e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2200      	movs	r2, #0
 800b036:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d07e      	beq.n	800b140 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	4798      	blx	r3
        }
        return;
 800b04a:	e079      	b.n	800b140 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b056:	2b00      	cmp	r3, #0
 800b058:	d01d      	beq.n	800b096 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d10d      	bne.n	800b084 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d031      	beq.n	800b0d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	4798      	blx	r3
 800b078:	e02c      	b.n	800b0d4 <HAL_DMA_IRQHandler+0x2a0>
 800b07a:	bf00      	nop
 800b07c:	20000054 	.word	0x20000054
 800b080:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d023      	beq.n	800b0d4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b090:	6878      	ldr	r0, [r7, #4]
 800b092:	4798      	blx	r3
 800b094:	e01e      	b.n	800b0d4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d10f      	bne.n	800b0c4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	681a      	ldr	r2, [r3, #0]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f022 0210 	bic.w	r2, r2, #16
 800b0b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2201      	movs	r2, #1
 800b0b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d003      	beq.n	800b0d4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b0d0:	6878      	ldr	r0, [r7, #4]
 800b0d2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d032      	beq.n	800b142 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b0e0:	f003 0301 	and.w	r3, r3, #1
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d022      	beq.n	800b12e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2205      	movs	r2, #5
 800b0ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	681a      	ldr	r2, [r3, #0]
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f022 0201 	bic.w	r2, r2, #1
 800b0fe:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	3301      	adds	r3, #1
 800b104:	60bb      	str	r3, [r7, #8]
 800b106:	697a      	ldr	r2, [r7, #20]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d307      	bcc.n	800b11c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 0301 	and.w	r3, r3, #1
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1f2      	bne.n	800b100 <HAL_DMA_IRQHandler+0x2cc>
 800b11a:	e000      	b.n	800b11e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800b11c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2201      	movs	r2, #1
 800b122:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2200      	movs	r2, #0
 800b12a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b132:	2b00      	cmp	r3, #0
 800b134:	d005      	beq.n	800b142 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b13a:	6878      	ldr	r0, [r7, #4]
 800b13c:	4798      	blx	r3
 800b13e:	e000      	b.n	800b142 <HAL_DMA_IRQHandler+0x30e>
        return;
 800b140:	bf00      	nop
    }
  }
}
 800b142:	3718      	adds	r7, #24
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	60f8      	str	r0, [r7, #12]
 800b150:	60b9      	str	r1, [r7, #8]
 800b152:	607a      	str	r2, [r7, #4]
 800b154:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	681a      	ldr	r2, [r3, #0]
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800b164:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	683a      	ldr	r2, [r7, #0]
 800b16c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	689b      	ldr	r3, [r3, #8]
 800b172:	2b40      	cmp	r3, #64	@ 0x40
 800b174:	d108      	bne.n	800b188 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	68ba      	ldr	r2, [r7, #8]
 800b184:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800b186:	e007      	b.n	800b198 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	687a      	ldr	r2, [r7, #4]
 800b196:	60da      	str	r2, [r3, #12]
}
 800b198:	bf00      	nop
 800b19a:	3714      	adds	r7, #20
 800b19c:	46bd      	mov	sp, r7
 800b19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a2:	4770      	bx	lr

0800b1a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	b2db      	uxtb	r3, r3
 800b1b2:	3b10      	subs	r3, #16
 800b1b4:	4a14      	ldr	r2, [pc, #80]	@ (800b208 <DMA_CalcBaseAndBitshift+0x64>)
 800b1b6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1ba:	091b      	lsrs	r3, r3, #4
 800b1bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800b1be:	4a13      	ldr	r2, [pc, #76]	@ (800b20c <DMA_CalcBaseAndBitshift+0x68>)
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	781b      	ldrb	r3, [r3, #0]
 800b1c6:	461a      	mov	r2, r3
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2b03      	cmp	r3, #3
 800b1d0:	d909      	bls.n	800b1e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800b1da:	f023 0303 	bic.w	r3, r3, #3
 800b1de:	1d1a      	adds	r2, r3, #4
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	659a      	str	r2, [r3, #88]	@ 0x58
 800b1e4:	e007      	b.n	800b1f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800b1ee:	f023 0303 	bic.w	r3, r3, #3
 800b1f2:	687a      	ldr	r2, [r7, #4]
 800b1f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3714      	adds	r7, #20
 800b1fe:	46bd      	mov	sp, r7
 800b200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b204:	4770      	bx	lr
 800b206:	bf00      	nop
 800b208:	aaaaaaab 	.word	0xaaaaaaab
 800b20c:	080206ec 	.word	0x080206ec

0800b210 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b210:	b480      	push	{r7}
 800b212:	b085      	sub	sp, #20
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b218:	2300      	movs	r3, #0
 800b21a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b220:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d11f      	bne.n	800b26a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	2b03      	cmp	r3, #3
 800b22e:	d856      	bhi.n	800b2de <DMA_CheckFifoParam+0xce>
 800b230:	a201      	add	r2, pc, #4	@ (adr r2, 800b238 <DMA_CheckFifoParam+0x28>)
 800b232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b236:	bf00      	nop
 800b238:	0800b249 	.word	0x0800b249
 800b23c:	0800b25b 	.word	0x0800b25b
 800b240:	0800b249 	.word	0x0800b249
 800b244:	0800b2df 	.word	0x0800b2df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b24c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b250:	2b00      	cmp	r3, #0
 800b252:	d046      	beq.n	800b2e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800b254:	2301      	movs	r3, #1
 800b256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b258:	e043      	b.n	800b2e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b25e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b262:	d140      	bne.n	800b2e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800b264:	2301      	movs	r3, #1
 800b266:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b268:	e03d      	b.n	800b2e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	699b      	ldr	r3, [r3, #24]
 800b26e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b272:	d121      	bne.n	800b2b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800b274:	68bb      	ldr	r3, [r7, #8]
 800b276:	2b03      	cmp	r3, #3
 800b278:	d837      	bhi.n	800b2ea <DMA_CheckFifoParam+0xda>
 800b27a:	a201      	add	r2, pc, #4	@ (adr r2, 800b280 <DMA_CheckFifoParam+0x70>)
 800b27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b280:	0800b291 	.word	0x0800b291
 800b284:	0800b297 	.word	0x0800b297
 800b288:	0800b291 	.word	0x0800b291
 800b28c:	0800b2a9 	.word	0x0800b2a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800b290:	2301      	movs	r3, #1
 800b292:	73fb      	strb	r3, [r7, #15]
      break;
 800b294:	e030      	b.n	800b2f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d025      	beq.n	800b2ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800b2a6:	e022      	b.n	800b2ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800b2b0:	d11f      	bne.n	800b2f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800b2b6:	e01c      	b.n	800b2f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	2b02      	cmp	r3, #2
 800b2bc:	d903      	bls.n	800b2c6 <DMA_CheckFifoParam+0xb6>
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b03      	cmp	r3, #3
 800b2c2:	d003      	beq.n	800b2cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800b2c4:	e018      	b.n	800b2f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	73fb      	strb	r3, [r7, #15]
      break;
 800b2ca:	e015      	b.n	800b2f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d00e      	beq.n	800b2f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	73fb      	strb	r3, [r7, #15]
      break;
 800b2dc:	e00b      	b.n	800b2f6 <DMA_CheckFifoParam+0xe6>
      break;
 800b2de:	bf00      	nop
 800b2e0:	e00a      	b.n	800b2f8 <DMA_CheckFifoParam+0xe8>
      break;
 800b2e2:	bf00      	nop
 800b2e4:	e008      	b.n	800b2f8 <DMA_CheckFifoParam+0xe8>
      break;
 800b2e6:	bf00      	nop
 800b2e8:	e006      	b.n	800b2f8 <DMA_CheckFifoParam+0xe8>
      break;
 800b2ea:	bf00      	nop
 800b2ec:	e004      	b.n	800b2f8 <DMA_CheckFifoParam+0xe8>
      break;
 800b2ee:	bf00      	nop
 800b2f0:	e002      	b.n	800b2f8 <DMA_CheckFifoParam+0xe8>
      break;   
 800b2f2:	bf00      	nop
 800b2f4:	e000      	b.n	800b2f8 <DMA_CheckFifoParam+0xe8>
      break;
 800b2f6:	bf00      	nop
    }
  } 
  
  return status; 
 800b2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2fa:	4618      	mov	r0, r3
 800b2fc:	3714      	adds	r7, #20
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr
 800b306:	bf00      	nop

0800b308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800b308:	b480      	push	{r7}
 800b30a:	b089      	sub	sp, #36	@ 0x24
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
 800b310:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b312:	2300      	movs	r3, #0
 800b314:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800b316:	2300      	movs	r3, #0
 800b318:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800b31a:	2300      	movs	r3, #0
 800b31c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b31e:	2300      	movs	r3, #0
 800b320:	61fb      	str	r3, [r7, #28]
 800b322:	e16b      	b.n	800b5fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b324:	2201      	movs	r2, #1
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	fa02 f303 	lsl.w	r3, r2, r3
 800b32c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800b32e:	683b      	ldr	r3, [r7, #0]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	697a      	ldr	r2, [r7, #20]
 800b334:	4013      	ands	r3, r2
 800b336:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	f040 815a 	bne.w	800b5f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	685b      	ldr	r3, [r3, #4]
 800b346:	f003 0303 	and.w	r3, r3, #3
 800b34a:	2b01      	cmp	r3, #1
 800b34c:	d005      	beq.n	800b35a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b34e:	683b      	ldr	r3, [r7, #0]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800b356:	2b02      	cmp	r3, #2
 800b358:	d130      	bne.n	800b3bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	005b      	lsls	r3, r3, #1
 800b364:	2203      	movs	r2, #3
 800b366:	fa02 f303 	lsl.w	r3, r2, r3
 800b36a:	43db      	mvns	r3, r3
 800b36c:	69ba      	ldr	r2, [r7, #24]
 800b36e:	4013      	ands	r3, r2
 800b370:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	68da      	ldr	r2, [r3, #12]
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	005b      	lsls	r3, r3, #1
 800b37a:	fa02 f303 	lsl.w	r3, r2, r3
 800b37e:	69ba      	ldr	r2, [r7, #24]
 800b380:	4313      	orrs	r3, r2
 800b382:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	69ba      	ldr	r2, [r7, #24]
 800b388:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b390:	2201      	movs	r2, #1
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	fa02 f303 	lsl.w	r3, r2, r3
 800b398:	43db      	mvns	r3, r3
 800b39a:	69ba      	ldr	r2, [r7, #24]
 800b39c:	4013      	ands	r3, r2
 800b39e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800b3a0:	683b      	ldr	r3, [r7, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	091b      	lsrs	r3, r3, #4
 800b3a6:	f003 0201 	and.w	r2, r3, #1
 800b3aa:	69fb      	ldr	r3, [r7, #28]
 800b3ac:	fa02 f303 	lsl.w	r3, r2, r3
 800b3b0:	69ba      	ldr	r2, [r7, #24]
 800b3b2:	4313      	orrs	r3, r2
 800b3b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	f003 0303 	and.w	r3, r3, #3
 800b3c4:	2b03      	cmp	r3, #3
 800b3c6:	d017      	beq.n	800b3f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	68db      	ldr	r3, [r3, #12]
 800b3cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b3ce:	69fb      	ldr	r3, [r7, #28]
 800b3d0:	005b      	lsls	r3, r3, #1
 800b3d2:	2203      	movs	r2, #3
 800b3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d8:	43db      	mvns	r3, r3
 800b3da:	69ba      	ldr	r2, [r7, #24]
 800b3dc:	4013      	ands	r3, r2
 800b3de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800b3e0:	683b      	ldr	r3, [r7, #0]
 800b3e2:	689a      	ldr	r2, [r3, #8]
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	005b      	lsls	r3, r3, #1
 800b3e8:	fa02 f303 	lsl.w	r3, r2, r3
 800b3ec:	69ba      	ldr	r2, [r7, #24]
 800b3ee:	4313      	orrs	r3, r2
 800b3f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	69ba      	ldr	r2, [r7, #24]
 800b3f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	f003 0303 	and.w	r3, r3, #3
 800b400:	2b02      	cmp	r3, #2
 800b402:	d123      	bne.n	800b44c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	08da      	lsrs	r2, r3, #3
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	3208      	adds	r2, #8
 800b40c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b410:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	f003 0307 	and.w	r3, r3, #7
 800b418:	009b      	lsls	r3, r3, #2
 800b41a:	220f      	movs	r2, #15
 800b41c:	fa02 f303 	lsl.w	r3, r2, r3
 800b420:	43db      	mvns	r3, r3
 800b422:	69ba      	ldr	r2, [r7, #24]
 800b424:	4013      	ands	r3, r2
 800b426:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	691a      	ldr	r2, [r3, #16]
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	f003 0307 	and.w	r3, r3, #7
 800b432:	009b      	lsls	r3, r3, #2
 800b434:	fa02 f303 	lsl.w	r3, r2, r3
 800b438:	69ba      	ldr	r2, [r7, #24]
 800b43a:	4313      	orrs	r3, r2
 800b43c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	08da      	lsrs	r2, r3, #3
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3208      	adds	r2, #8
 800b446:	69b9      	ldr	r1, [r7, #24]
 800b448:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	005b      	lsls	r3, r3, #1
 800b456:	2203      	movs	r2, #3
 800b458:	fa02 f303 	lsl.w	r3, r2, r3
 800b45c:	43db      	mvns	r3, r3
 800b45e:	69ba      	ldr	r2, [r7, #24]
 800b460:	4013      	ands	r3, r2
 800b462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800b464:	683b      	ldr	r3, [r7, #0]
 800b466:	685b      	ldr	r3, [r3, #4]
 800b468:	f003 0203 	and.w	r2, r3, #3
 800b46c:	69fb      	ldr	r3, [r7, #28]
 800b46e:	005b      	lsls	r3, r3, #1
 800b470:	fa02 f303 	lsl.w	r3, r2, r3
 800b474:	69ba      	ldr	r2, [r7, #24]
 800b476:	4313      	orrs	r3, r2
 800b478:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	69ba      	ldr	r2, [r7, #24]
 800b47e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800b480:	683b      	ldr	r3, [r7, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 80b4 	beq.w	800b5f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800b48e:	2300      	movs	r3, #0
 800b490:	60fb      	str	r3, [r7, #12]
 800b492:	4b60      	ldr	r3, [pc, #384]	@ (800b614 <HAL_GPIO_Init+0x30c>)
 800b494:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b496:	4a5f      	ldr	r2, [pc, #380]	@ (800b614 <HAL_GPIO_Init+0x30c>)
 800b498:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b49c:	6453      	str	r3, [r2, #68]	@ 0x44
 800b49e:	4b5d      	ldr	r3, [pc, #372]	@ (800b614 <HAL_GPIO_Init+0x30c>)
 800b4a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b4a2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b4a6:	60fb      	str	r3, [r7, #12]
 800b4a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800b4aa:	4a5b      	ldr	r2, [pc, #364]	@ (800b618 <HAL_GPIO_Init+0x310>)
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	089b      	lsrs	r3, r3, #2
 800b4b0:	3302      	adds	r3, #2
 800b4b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b4b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800b4b8:	69fb      	ldr	r3, [r7, #28]
 800b4ba:	f003 0303 	and.w	r3, r3, #3
 800b4be:	009b      	lsls	r3, r3, #2
 800b4c0:	220f      	movs	r2, #15
 800b4c2:	fa02 f303 	lsl.w	r3, r2, r3
 800b4c6:	43db      	mvns	r3, r3
 800b4c8:	69ba      	ldr	r2, [r7, #24]
 800b4ca:	4013      	ands	r3, r2
 800b4cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	4a52      	ldr	r2, [pc, #328]	@ (800b61c <HAL_GPIO_Init+0x314>)
 800b4d2:	4293      	cmp	r3, r2
 800b4d4:	d02b      	beq.n	800b52e <HAL_GPIO_Init+0x226>
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	4a51      	ldr	r2, [pc, #324]	@ (800b620 <HAL_GPIO_Init+0x318>)
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	d025      	beq.n	800b52a <HAL_GPIO_Init+0x222>
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	4a50      	ldr	r2, [pc, #320]	@ (800b624 <HAL_GPIO_Init+0x31c>)
 800b4e2:	4293      	cmp	r3, r2
 800b4e4:	d01f      	beq.n	800b526 <HAL_GPIO_Init+0x21e>
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a4f      	ldr	r2, [pc, #316]	@ (800b628 <HAL_GPIO_Init+0x320>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d019      	beq.n	800b522 <HAL_GPIO_Init+0x21a>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a4e      	ldr	r2, [pc, #312]	@ (800b62c <HAL_GPIO_Init+0x324>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d013      	beq.n	800b51e <HAL_GPIO_Init+0x216>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a4d      	ldr	r2, [pc, #308]	@ (800b630 <HAL_GPIO_Init+0x328>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d00d      	beq.n	800b51a <HAL_GPIO_Init+0x212>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a4c      	ldr	r2, [pc, #304]	@ (800b634 <HAL_GPIO_Init+0x32c>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d007      	beq.n	800b516 <HAL_GPIO_Init+0x20e>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4a4b      	ldr	r2, [pc, #300]	@ (800b638 <HAL_GPIO_Init+0x330>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d101      	bne.n	800b512 <HAL_GPIO_Init+0x20a>
 800b50e:	2307      	movs	r3, #7
 800b510:	e00e      	b.n	800b530 <HAL_GPIO_Init+0x228>
 800b512:	2308      	movs	r3, #8
 800b514:	e00c      	b.n	800b530 <HAL_GPIO_Init+0x228>
 800b516:	2306      	movs	r3, #6
 800b518:	e00a      	b.n	800b530 <HAL_GPIO_Init+0x228>
 800b51a:	2305      	movs	r3, #5
 800b51c:	e008      	b.n	800b530 <HAL_GPIO_Init+0x228>
 800b51e:	2304      	movs	r3, #4
 800b520:	e006      	b.n	800b530 <HAL_GPIO_Init+0x228>
 800b522:	2303      	movs	r3, #3
 800b524:	e004      	b.n	800b530 <HAL_GPIO_Init+0x228>
 800b526:	2302      	movs	r3, #2
 800b528:	e002      	b.n	800b530 <HAL_GPIO_Init+0x228>
 800b52a:	2301      	movs	r3, #1
 800b52c:	e000      	b.n	800b530 <HAL_GPIO_Init+0x228>
 800b52e:	2300      	movs	r3, #0
 800b530:	69fa      	ldr	r2, [r7, #28]
 800b532:	f002 0203 	and.w	r2, r2, #3
 800b536:	0092      	lsls	r2, r2, #2
 800b538:	4093      	lsls	r3, r2
 800b53a:	69ba      	ldr	r2, [r7, #24]
 800b53c:	4313      	orrs	r3, r2
 800b53e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800b540:	4935      	ldr	r1, [pc, #212]	@ (800b618 <HAL_GPIO_Init+0x310>)
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	089b      	lsrs	r3, r3, #2
 800b546:	3302      	adds	r3, #2
 800b548:	69ba      	ldr	r2, [r7, #24]
 800b54a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800b54e:	4b3b      	ldr	r3, [pc, #236]	@ (800b63c <HAL_GPIO_Init+0x334>)
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b554:	693b      	ldr	r3, [r7, #16]
 800b556:	43db      	mvns	r3, r3
 800b558:	69ba      	ldr	r2, [r7, #24]
 800b55a:	4013      	ands	r3, r2
 800b55c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800b566:	2b00      	cmp	r3, #0
 800b568:	d003      	beq.n	800b572 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800b56a:	69ba      	ldr	r2, [r7, #24]
 800b56c:	693b      	ldr	r3, [r7, #16]
 800b56e:	4313      	orrs	r3, r2
 800b570:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800b572:	4a32      	ldr	r2, [pc, #200]	@ (800b63c <HAL_GPIO_Init+0x334>)
 800b574:	69bb      	ldr	r3, [r7, #24]
 800b576:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800b578:	4b30      	ldr	r3, [pc, #192]	@ (800b63c <HAL_GPIO_Init+0x334>)
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	43db      	mvns	r3, r3
 800b582:	69ba      	ldr	r2, [r7, #24]
 800b584:	4013      	ands	r3, r2
 800b586:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	685b      	ldr	r3, [r3, #4]
 800b58c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800b590:	2b00      	cmp	r3, #0
 800b592:	d003      	beq.n	800b59c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800b594:	69ba      	ldr	r2, [r7, #24]
 800b596:	693b      	ldr	r3, [r7, #16]
 800b598:	4313      	orrs	r3, r2
 800b59a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800b59c:	4a27      	ldr	r2, [pc, #156]	@ (800b63c <HAL_GPIO_Init+0x334>)
 800b59e:	69bb      	ldr	r3, [r7, #24]
 800b5a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800b5a2:	4b26      	ldr	r3, [pc, #152]	@ (800b63c <HAL_GPIO_Init+0x334>)
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	43db      	mvns	r3, r3
 800b5ac:	69ba      	ldr	r2, [r7, #24]
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	685b      	ldr	r3, [r3, #4]
 800b5b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d003      	beq.n	800b5c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	693b      	ldr	r3, [r7, #16]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800b5c6:	4a1d      	ldr	r2, [pc, #116]	@ (800b63c <HAL_GPIO_Init+0x334>)
 800b5c8:	69bb      	ldr	r3, [r7, #24]
 800b5ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800b5cc:	4b1b      	ldr	r3, [pc, #108]	@ (800b63c <HAL_GPIO_Init+0x334>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	43db      	mvns	r3, r3
 800b5d6:	69ba      	ldr	r2, [r7, #24]
 800b5d8:	4013      	ands	r3, r2
 800b5da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800b5dc:	683b      	ldr	r3, [r7, #0]
 800b5de:	685b      	ldr	r3, [r3, #4]
 800b5e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d003      	beq.n	800b5f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800b5e8:	69ba      	ldr	r2, [r7, #24]
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	4313      	orrs	r3, r2
 800b5ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800b5f0:	4a12      	ldr	r2, [pc, #72]	@ (800b63c <HAL_GPIO_Init+0x334>)
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	3301      	adds	r3, #1
 800b5fa:	61fb      	str	r3, [r7, #28]
 800b5fc:	69fb      	ldr	r3, [r7, #28]
 800b5fe:	2b0f      	cmp	r3, #15
 800b600:	f67f ae90 	bls.w	800b324 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop
 800b608:	3724      	adds	r7, #36	@ 0x24
 800b60a:	46bd      	mov	sp, r7
 800b60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	40023800 	.word	0x40023800
 800b618:	40013800 	.word	0x40013800
 800b61c:	40020000 	.word	0x40020000
 800b620:	40020400 	.word	0x40020400
 800b624:	40020800 	.word	0x40020800
 800b628:	40020c00 	.word	0x40020c00
 800b62c:	40021000 	.word	0x40021000
 800b630:	40021400 	.word	0x40021400
 800b634:	40021800 	.word	0x40021800
 800b638:	40021c00 	.word	0x40021c00
 800b63c:	40013c00 	.word	0x40013c00

0800b640 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800b640:	b480      	push	{r7}
 800b642:	b087      	sub	sp, #28
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800b64e:	2300      	movs	r3, #0
 800b650:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800b652:	2300      	movs	r3, #0
 800b654:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b656:	2300      	movs	r3, #0
 800b658:	617b      	str	r3, [r7, #20]
 800b65a:	e0cd      	b.n	800b7f8 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800b65c:	2201      	movs	r2, #1
 800b65e:	697b      	ldr	r3, [r7, #20]
 800b660:	fa02 f303 	lsl.w	r3, r2, r3
 800b664:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800b666:	683a      	ldr	r2, [r7, #0]
 800b668:	693b      	ldr	r3, [r7, #16]
 800b66a:	4013      	ands	r3, r2
 800b66c:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	429a      	cmp	r2, r3
 800b674:	f040 80bd 	bne.w	800b7f2 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800b678:	4a65      	ldr	r2, [pc, #404]	@ (800b810 <HAL_GPIO_DeInit+0x1d0>)
 800b67a:	697b      	ldr	r3, [r7, #20]
 800b67c:	089b      	lsrs	r3, r3, #2
 800b67e:	3302      	adds	r3, #2
 800b680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b684:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	f003 0303 	and.w	r3, r3, #3
 800b68c:	009b      	lsls	r3, r3, #2
 800b68e:	220f      	movs	r2, #15
 800b690:	fa02 f303 	lsl.w	r3, r2, r3
 800b694:	68ba      	ldr	r2, [r7, #8]
 800b696:	4013      	ands	r3, r2
 800b698:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	4a5d      	ldr	r2, [pc, #372]	@ (800b814 <HAL_GPIO_DeInit+0x1d4>)
 800b69e:	4293      	cmp	r3, r2
 800b6a0:	d02b      	beq.n	800b6fa <HAL_GPIO_DeInit+0xba>
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	4a5c      	ldr	r2, [pc, #368]	@ (800b818 <HAL_GPIO_DeInit+0x1d8>)
 800b6a6:	4293      	cmp	r3, r2
 800b6a8:	d025      	beq.n	800b6f6 <HAL_GPIO_DeInit+0xb6>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	4a5b      	ldr	r2, [pc, #364]	@ (800b81c <HAL_GPIO_DeInit+0x1dc>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d01f      	beq.n	800b6f2 <HAL_GPIO_DeInit+0xb2>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	4a5a      	ldr	r2, [pc, #360]	@ (800b820 <HAL_GPIO_DeInit+0x1e0>)
 800b6b6:	4293      	cmp	r3, r2
 800b6b8:	d019      	beq.n	800b6ee <HAL_GPIO_DeInit+0xae>
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a59      	ldr	r2, [pc, #356]	@ (800b824 <HAL_GPIO_DeInit+0x1e4>)
 800b6be:	4293      	cmp	r3, r2
 800b6c0:	d013      	beq.n	800b6ea <HAL_GPIO_DeInit+0xaa>
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	4a58      	ldr	r2, [pc, #352]	@ (800b828 <HAL_GPIO_DeInit+0x1e8>)
 800b6c6:	4293      	cmp	r3, r2
 800b6c8:	d00d      	beq.n	800b6e6 <HAL_GPIO_DeInit+0xa6>
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	4a57      	ldr	r2, [pc, #348]	@ (800b82c <HAL_GPIO_DeInit+0x1ec>)
 800b6ce:	4293      	cmp	r3, r2
 800b6d0:	d007      	beq.n	800b6e2 <HAL_GPIO_DeInit+0xa2>
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	4a56      	ldr	r2, [pc, #344]	@ (800b830 <HAL_GPIO_DeInit+0x1f0>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d101      	bne.n	800b6de <HAL_GPIO_DeInit+0x9e>
 800b6da:	2307      	movs	r3, #7
 800b6dc:	e00e      	b.n	800b6fc <HAL_GPIO_DeInit+0xbc>
 800b6de:	2308      	movs	r3, #8
 800b6e0:	e00c      	b.n	800b6fc <HAL_GPIO_DeInit+0xbc>
 800b6e2:	2306      	movs	r3, #6
 800b6e4:	e00a      	b.n	800b6fc <HAL_GPIO_DeInit+0xbc>
 800b6e6:	2305      	movs	r3, #5
 800b6e8:	e008      	b.n	800b6fc <HAL_GPIO_DeInit+0xbc>
 800b6ea:	2304      	movs	r3, #4
 800b6ec:	e006      	b.n	800b6fc <HAL_GPIO_DeInit+0xbc>
 800b6ee:	2303      	movs	r3, #3
 800b6f0:	e004      	b.n	800b6fc <HAL_GPIO_DeInit+0xbc>
 800b6f2:	2302      	movs	r3, #2
 800b6f4:	e002      	b.n	800b6fc <HAL_GPIO_DeInit+0xbc>
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e000      	b.n	800b6fc <HAL_GPIO_DeInit+0xbc>
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	f002 0203 	and.w	r2, r2, #3
 800b702:	0092      	lsls	r2, r2, #2
 800b704:	4093      	lsls	r3, r2
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	429a      	cmp	r2, r3
 800b70a:	d132      	bne.n	800b772 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800b70c:	4b49      	ldr	r3, [pc, #292]	@ (800b834 <HAL_GPIO_DeInit+0x1f4>)
 800b70e:	681a      	ldr	r2, [r3, #0]
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	43db      	mvns	r3, r3
 800b714:	4947      	ldr	r1, [pc, #284]	@ (800b834 <HAL_GPIO_DeInit+0x1f4>)
 800b716:	4013      	ands	r3, r2
 800b718:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800b71a:	4b46      	ldr	r3, [pc, #280]	@ (800b834 <HAL_GPIO_DeInit+0x1f4>)
 800b71c:	685a      	ldr	r2, [r3, #4]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	43db      	mvns	r3, r3
 800b722:	4944      	ldr	r1, [pc, #272]	@ (800b834 <HAL_GPIO_DeInit+0x1f4>)
 800b724:	4013      	ands	r3, r2
 800b726:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800b728:	4b42      	ldr	r3, [pc, #264]	@ (800b834 <HAL_GPIO_DeInit+0x1f4>)
 800b72a:	68da      	ldr	r2, [r3, #12]
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	43db      	mvns	r3, r3
 800b730:	4940      	ldr	r1, [pc, #256]	@ (800b834 <HAL_GPIO_DeInit+0x1f4>)
 800b732:	4013      	ands	r3, r2
 800b734:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800b736:	4b3f      	ldr	r3, [pc, #252]	@ (800b834 <HAL_GPIO_DeInit+0x1f4>)
 800b738:	689a      	ldr	r2, [r3, #8]
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	43db      	mvns	r3, r3
 800b73e:	493d      	ldr	r1, [pc, #244]	@ (800b834 <HAL_GPIO_DeInit+0x1f4>)
 800b740:	4013      	ands	r3, r2
 800b742:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	f003 0303 	and.w	r3, r3, #3
 800b74a:	009b      	lsls	r3, r3, #2
 800b74c:	220f      	movs	r2, #15
 800b74e:	fa02 f303 	lsl.w	r3, r2, r3
 800b752:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800b754:	4a2e      	ldr	r2, [pc, #184]	@ (800b810 <HAL_GPIO_DeInit+0x1d0>)
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	089b      	lsrs	r3, r3, #2
 800b75a:	3302      	adds	r3, #2
 800b75c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	43da      	mvns	r2, r3
 800b764:	482a      	ldr	r0, [pc, #168]	@ (800b810 <HAL_GPIO_DeInit+0x1d0>)
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	089b      	lsrs	r3, r3, #2
 800b76a:	400a      	ands	r2, r1
 800b76c:	3302      	adds	r3, #2
 800b76e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	697b      	ldr	r3, [r7, #20]
 800b778:	005b      	lsls	r3, r3, #1
 800b77a:	2103      	movs	r1, #3
 800b77c:	fa01 f303 	lsl.w	r3, r1, r3
 800b780:	43db      	mvns	r3, r3
 800b782:	401a      	ands	r2, r3
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	08da      	lsrs	r2, r3, #3
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	3208      	adds	r2, #8
 800b790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b794:	697b      	ldr	r3, [r7, #20]
 800b796:	f003 0307 	and.w	r3, r3, #7
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	220f      	movs	r2, #15
 800b79e:	fa02 f303 	lsl.w	r3, r2, r3
 800b7a2:	43db      	mvns	r3, r3
 800b7a4:	697a      	ldr	r2, [r7, #20]
 800b7a6:	08d2      	lsrs	r2, r2, #3
 800b7a8:	4019      	ands	r1, r3
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	3208      	adds	r2, #8
 800b7ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	68da      	ldr	r2, [r3, #12]
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	005b      	lsls	r3, r3, #1
 800b7ba:	2103      	movs	r1, #3
 800b7bc:	fa01 f303 	lsl.w	r3, r1, r3
 800b7c0:	43db      	mvns	r3, r3
 800b7c2:	401a      	ands	r2, r3
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	685a      	ldr	r2, [r3, #4]
 800b7cc:	2101      	movs	r1, #1
 800b7ce:	697b      	ldr	r3, [r7, #20]
 800b7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b7d4:	43db      	mvns	r3, r3
 800b7d6:	401a      	ands	r2, r3
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	689a      	ldr	r2, [r3, #8]
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	005b      	lsls	r3, r3, #1
 800b7e4:	2103      	movs	r1, #3
 800b7e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ea:	43db      	mvns	r3, r3
 800b7ec:	401a      	ands	r2, r3
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800b7f2:	697b      	ldr	r3, [r7, #20]
 800b7f4:	3301      	adds	r3, #1
 800b7f6:	617b      	str	r3, [r7, #20]
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	2b0f      	cmp	r3, #15
 800b7fc:	f67f af2e 	bls.w	800b65c <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800b800:	bf00      	nop
 800b802:	bf00      	nop
 800b804:	371c      	adds	r7, #28
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr
 800b80e:	bf00      	nop
 800b810:	40013800 	.word	0x40013800
 800b814:	40020000 	.word	0x40020000
 800b818:	40020400 	.word	0x40020400
 800b81c:	40020800 	.word	0x40020800
 800b820:	40020c00 	.word	0x40020c00
 800b824:	40021000 	.word	0x40021000
 800b828:	40021400 	.word	0x40021400
 800b82c:	40021800 	.word	0x40021800
 800b830:	40021c00 	.word	0x40021c00
 800b834:	40013c00 	.word	0x40013c00

0800b838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800b838:	b480      	push	{r7}
 800b83a:	b083      	sub	sp, #12
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	460b      	mov	r3, r1
 800b842:	807b      	strh	r3, [r7, #2]
 800b844:	4613      	mov	r3, r2
 800b846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800b848:	787b      	ldrb	r3, [r7, #1]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d003      	beq.n	800b856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800b84e:	887a      	ldrh	r2, [r7, #2]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800b854:	e003      	b.n	800b85e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800b856:	887b      	ldrh	r3, [r7, #2]
 800b858:	041a      	lsls	r2, r3, #16
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	619a      	str	r2, [r3, #24]
}
 800b85e:	bf00      	nop
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b086      	sub	sp, #24
 800b86e:	af02      	add	r7, sp, #8
 800b870:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d101      	bne.n	800b87c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b878:	2301      	movs	r3, #1
 800b87a:	e101      	b.n	800ba80 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d106      	bne.n	800b89c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2200      	movs	r2, #0
 800b892:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b896:	6878      	ldr	r0, [r7, #4]
 800b898:	f00b fe56 	bl	8017548 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	2203      	movs	r2, #3
 800b8a0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b8aa:	d102      	bne.n	800b8b2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	f005 f8cb 	bl	8010a52 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	6818      	ldr	r0, [r3, #0]
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	7c1a      	ldrb	r2, [r3, #16]
 800b8c4:	f88d 2000 	strb.w	r2, [sp]
 800b8c8:	3304      	adds	r3, #4
 800b8ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b8cc:	f004 ffaa 	bl	8010824 <USB_CoreInit>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d005      	beq.n	800b8e2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2202      	movs	r2, #2
 800b8da:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e0ce      	b.n	800ba80 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	2100      	movs	r1, #0
 800b8e8:	4618      	mov	r0, r3
 800b8ea:	f005 f8c3 	bl	8010a74 <USB_SetCurrentMode>
 800b8ee:	4603      	mov	r3, r0
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d005      	beq.n	800b900 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	2202      	movs	r2, #2
 800b8f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e0bf      	b.n	800ba80 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b900:	2300      	movs	r3, #0
 800b902:	73fb      	strb	r3, [r7, #15]
 800b904:	e04a      	b.n	800b99c <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b906:	7bfa      	ldrb	r2, [r7, #15]
 800b908:	6879      	ldr	r1, [r7, #4]
 800b90a:	4613      	mov	r3, r2
 800b90c:	00db      	lsls	r3, r3, #3
 800b90e:	4413      	add	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	440b      	add	r3, r1
 800b914:	3315      	adds	r3, #21
 800b916:	2201      	movs	r2, #1
 800b918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b91a:	7bfa      	ldrb	r2, [r7, #15]
 800b91c:	6879      	ldr	r1, [r7, #4]
 800b91e:	4613      	mov	r3, r2
 800b920:	00db      	lsls	r3, r3, #3
 800b922:	4413      	add	r3, r2
 800b924:	009b      	lsls	r3, r3, #2
 800b926:	440b      	add	r3, r1
 800b928:	3314      	adds	r3, #20
 800b92a:	7bfa      	ldrb	r2, [r7, #15]
 800b92c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b92e:	7bfa      	ldrb	r2, [r7, #15]
 800b930:	7bfb      	ldrb	r3, [r7, #15]
 800b932:	b298      	uxth	r0, r3
 800b934:	6879      	ldr	r1, [r7, #4]
 800b936:	4613      	mov	r3, r2
 800b938:	00db      	lsls	r3, r3, #3
 800b93a:	4413      	add	r3, r2
 800b93c:	009b      	lsls	r3, r3, #2
 800b93e:	440b      	add	r3, r1
 800b940:	332e      	adds	r3, #46	@ 0x2e
 800b942:	4602      	mov	r2, r0
 800b944:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b946:	7bfa      	ldrb	r2, [r7, #15]
 800b948:	6879      	ldr	r1, [r7, #4]
 800b94a:	4613      	mov	r3, r2
 800b94c:	00db      	lsls	r3, r3, #3
 800b94e:	4413      	add	r3, r2
 800b950:	009b      	lsls	r3, r3, #2
 800b952:	440b      	add	r3, r1
 800b954:	3318      	adds	r3, #24
 800b956:	2200      	movs	r2, #0
 800b958:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b95a:	7bfa      	ldrb	r2, [r7, #15]
 800b95c:	6879      	ldr	r1, [r7, #4]
 800b95e:	4613      	mov	r3, r2
 800b960:	00db      	lsls	r3, r3, #3
 800b962:	4413      	add	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	440b      	add	r3, r1
 800b968:	331c      	adds	r3, #28
 800b96a:	2200      	movs	r2, #0
 800b96c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b96e:	7bfa      	ldrb	r2, [r7, #15]
 800b970:	6879      	ldr	r1, [r7, #4]
 800b972:	4613      	mov	r3, r2
 800b974:	00db      	lsls	r3, r3, #3
 800b976:	4413      	add	r3, r2
 800b978:	009b      	lsls	r3, r3, #2
 800b97a:	440b      	add	r3, r1
 800b97c:	3320      	adds	r3, #32
 800b97e:	2200      	movs	r2, #0
 800b980:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b982:	7bfa      	ldrb	r2, [r7, #15]
 800b984:	6879      	ldr	r1, [r7, #4]
 800b986:	4613      	mov	r3, r2
 800b988:	00db      	lsls	r3, r3, #3
 800b98a:	4413      	add	r3, r2
 800b98c:	009b      	lsls	r3, r3, #2
 800b98e:	440b      	add	r3, r1
 800b990:	3324      	adds	r3, #36	@ 0x24
 800b992:	2200      	movs	r2, #0
 800b994:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b996:	7bfb      	ldrb	r3, [r7, #15]
 800b998:	3301      	adds	r3, #1
 800b99a:	73fb      	strb	r3, [r7, #15]
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	791b      	ldrb	r3, [r3, #4]
 800b9a0:	7bfa      	ldrb	r2, [r7, #15]
 800b9a2:	429a      	cmp	r2, r3
 800b9a4:	d3af      	bcc.n	800b906 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	73fb      	strb	r3, [r7, #15]
 800b9aa:	e044      	b.n	800ba36 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b9ac:	7bfa      	ldrb	r2, [r7, #15]
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	00db      	lsls	r3, r3, #3
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	440b      	add	r3, r1
 800b9ba:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800b9be:	2200      	movs	r2, #0
 800b9c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b9c2:	7bfa      	ldrb	r2, [r7, #15]
 800b9c4:	6879      	ldr	r1, [r7, #4]
 800b9c6:	4613      	mov	r3, r2
 800b9c8:	00db      	lsls	r3, r3, #3
 800b9ca:	4413      	add	r3, r2
 800b9cc:	009b      	lsls	r3, r3, #2
 800b9ce:	440b      	add	r3, r1
 800b9d0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800b9d4:	7bfa      	ldrb	r2, [r7, #15]
 800b9d6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b9d8:	7bfa      	ldrb	r2, [r7, #15]
 800b9da:	6879      	ldr	r1, [r7, #4]
 800b9dc:	4613      	mov	r3, r2
 800b9de:	00db      	lsls	r3, r3, #3
 800b9e0:	4413      	add	r3, r2
 800b9e2:	009b      	lsls	r3, r3, #2
 800b9e4:	440b      	add	r3, r1
 800b9e6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800b9ea:	2200      	movs	r2, #0
 800b9ec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b9ee:	7bfa      	ldrb	r2, [r7, #15]
 800b9f0:	6879      	ldr	r1, [r7, #4]
 800b9f2:	4613      	mov	r3, r2
 800b9f4:	00db      	lsls	r3, r3, #3
 800b9f6:	4413      	add	r3, r2
 800b9f8:	009b      	lsls	r3, r3, #2
 800b9fa:	440b      	add	r3, r1
 800b9fc:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800ba00:	2200      	movs	r2, #0
 800ba02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800ba04:	7bfa      	ldrb	r2, [r7, #15]
 800ba06:	6879      	ldr	r1, [r7, #4]
 800ba08:	4613      	mov	r3, r2
 800ba0a:	00db      	lsls	r3, r3, #3
 800ba0c:	4413      	add	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	440b      	add	r3, r1
 800ba12:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ba16:	2200      	movs	r2, #0
 800ba18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ba1a:	7bfa      	ldrb	r2, [r7, #15]
 800ba1c:	6879      	ldr	r1, [r7, #4]
 800ba1e:	4613      	mov	r3, r2
 800ba20:	00db      	lsls	r3, r3, #3
 800ba22:	4413      	add	r3, r2
 800ba24:	009b      	lsls	r3, r3, #2
 800ba26:	440b      	add	r3, r1
 800ba28:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ba30:	7bfb      	ldrb	r3, [r7, #15]
 800ba32:	3301      	adds	r3, #1
 800ba34:	73fb      	strb	r3, [r7, #15]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	791b      	ldrb	r3, [r3, #4]
 800ba3a:	7bfa      	ldrb	r2, [r7, #15]
 800ba3c:	429a      	cmp	r2, r3
 800ba3e:	d3b5      	bcc.n	800b9ac <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6818      	ldr	r0, [r3, #0]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	7c1a      	ldrb	r2, [r3, #16]
 800ba48:	f88d 2000 	strb.w	r2, [sp]
 800ba4c:	3304      	adds	r3, #4
 800ba4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ba50:	f005 f85c 	bl	8010b0c <USB_DevInit>
 800ba54:	4603      	mov	r3, r0
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d005      	beq.n	800ba66 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2202      	movs	r2, #2
 800ba5e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800ba62:	2301      	movs	r3, #1
 800ba64:	e00c      	b.n	800ba80 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2201      	movs	r2, #1
 800ba70:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4618      	mov	r0, r3
 800ba7a:	f006 f8a6 	bl	8011bca <USB_DevDisconnect>

  return HAL_OK;
 800ba7e:	2300      	movs	r3, #0
}
 800ba80:	4618      	mov	r0, r3
 800ba82:	3710      	adds	r7, #16
 800ba84:	46bd      	mov	sp, r7
 800ba86:	bd80      	pop	{r7, pc}

0800ba88 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d101      	bne.n	800baa4 <HAL_PCD_Start+0x1c>
 800baa0:	2302      	movs	r3, #2
 800baa2:	e022      	b.n	800baea <HAL_PCD_Start+0x62>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	2201      	movs	r2, #1
 800baa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d009      	beq.n	800bacc <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800babc:	2b01      	cmp	r3, #1
 800babe:	d105      	bne.n	800bacc <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bac4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f004 ffad 	bl	8010a30 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	4618      	mov	r0, r3
 800badc:	f006 f854 	bl	8011b88 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2200      	movs	r2, #0
 800bae4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800bae8:	2300      	movs	r3, #0
}
 800baea:	4618      	mov	r0, r3
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}

0800baf2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800baf2:	b590      	push	{r4, r7, lr}
 800baf4:	b08d      	sub	sp, #52	@ 0x34
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb00:	6a3b      	ldr	r3, [r7, #32]
 800bb02:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f006 f912 	bl	8011d32 <USB_GetMode>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	f040 848c 	bne.w	800c42e <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f006 f876 	bl	8011c0c <USB_ReadInterrupts>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	f000 8482 	beq.w	800c42c <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800bb28:	69fb      	ldr	r3, [r7, #28]
 800bb2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	0a1b      	lsrs	r3, r3, #8
 800bb32:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	4618      	mov	r0, r3
 800bb42:	f006 f863 	bl	8011c0c <USB_ReadInterrupts>
 800bb46:	4603      	mov	r3, r0
 800bb48:	f003 0302 	and.w	r3, r3, #2
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	d107      	bne.n	800bb60 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	695a      	ldr	r2, [r3, #20]
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f002 0202 	and.w	r2, r2, #2
 800bb5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4618      	mov	r0, r3
 800bb66:	f006 f851 	bl	8011c0c <USB_ReadInterrupts>
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	f003 0310 	and.w	r3, r3, #16
 800bb70:	2b10      	cmp	r3, #16
 800bb72:	d161      	bne.n	800bc38 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	699a      	ldr	r2, [r3, #24]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	f022 0210 	bic.w	r2, r2, #16
 800bb82:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800bb84:	6a3b      	ldr	r3, [r7, #32]
 800bb86:	6a1b      	ldr	r3, [r3, #32]
 800bb88:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800bb8a:	69bb      	ldr	r3, [r7, #24]
 800bb8c:	f003 020f 	and.w	r2, r3, #15
 800bb90:	4613      	mov	r3, r2
 800bb92:	00db      	lsls	r3, r3, #3
 800bb94:	4413      	add	r3, r2
 800bb96:	009b      	lsls	r3, r3, #2
 800bb98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	4413      	add	r3, r2
 800bba0:	3304      	adds	r3, #4
 800bba2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800bba4:	69bb      	ldr	r3, [r7, #24]
 800bba6:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800bbaa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bbae:	d124      	bne.n	800bbfa <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800bbb0:	69ba      	ldr	r2, [r7, #24]
 800bbb2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800bbb6:	4013      	ands	r3, r2
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d035      	beq.n	800bc28 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bbbc:	697b      	ldr	r3, [r7, #20]
 800bbbe:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800bbc0:	69bb      	ldr	r3, [r7, #24]
 800bbc2:	091b      	lsrs	r3, r3, #4
 800bbc4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800bbc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbca:	b29b      	uxth	r3, r3
 800bbcc:	461a      	mov	r2, r3
 800bbce:	6a38      	ldr	r0, [r7, #32]
 800bbd0:	f005 fe88 	bl	80118e4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	68da      	ldr	r2, [r3, #12]
 800bbd8:	69bb      	ldr	r3, [r7, #24]
 800bbda:	091b      	lsrs	r3, r3, #4
 800bbdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbe0:	441a      	add	r2, r3
 800bbe2:	697b      	ldr	r3, [r7, #20]
 800bbe4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bbe6:	697b      	ldr	r3, [r7, #20]
 800bbe8:	695a      	ldr	r2, [r3, #20]
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	091b      	lsrs	r3, r3, #4
 800bbee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bbf2:	441a      	add	r2, r3
 800bbf4:	697b      	ldr	r3, [r7, #20]
 800bbf6:	615a      	str	r2, [r3, #20]
 800bbf8:	e016      	b.n	800bc28 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800bbfa:	69bb      	ldr	r3, [r7, #24]
 800bbfc:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800bc00:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800bc04:	d110      	bne.n	800bc28 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bc0c:	2208      	movs	r2, #8
 800bc0e:	4619      	mov	r1, r3
 800bc10:	6a38      	ldr	r0, [r7, #32]
 800bc12:	f005 fe67 	bl	80118e4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800bc16:	697b      	ldr	r3, [r7, #20]
 800bc18:	695a      	ldr	r2, [r3, #20]
 800bc1a:	69bb      	ldr	r3, [r7, #24]
 800bc1c:	091b      	lsrs	r3, r3, #4
 800bc1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800bc22:	441a      	add	r2, r3
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	699a      	ldr	r2, [r3, #24]
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f042 0210 	orr.w	r2, r2, #16
 800bc36:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f005 ffe5 	bl	8011c0c <USB_ReadInterrupts>
 800bc42:	4603      	mov	r3, r0
 800bc44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800bc48:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800bc4c:	f040 80a7 	bne.w	800bd9e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800bc50:	2300      	movs	r3, #0
 800bc52:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4618      	mov	r0, r3
 800bc5a:	f005 ffea 	bl	8011c32 <USB_ReadDevAllOutEpInterrupt>
 800bc5e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800bc60:	e099      	b.n	800bd96 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800bc62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc64:	f003 0301 	and.w	r3, r3, #1
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	f000 808e 	beq.w	800bd8a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bc74:	b2d2      	uxtb	r2, r2
 800bc76:	4611      	mov	r1, r2
 800bc78:	4618      	mov	r0, r3
 800bc7a:	f006 f80e 	bl	8011c9a <USB_ReadDevOutEPInterrupt>
 800bc7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800bc80:	693b      	ldr	r3, [r7, #16]
 800bc82:	f003 0301 	and.w	r3, r3, #1
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d00c      	beq.n	800bca4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800bc8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8c:	015a      	lsls	r2, r3, #5
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	4413      	add	r3, r2
 800bc92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc96:	461a      	mov	r2, r3
 800bc98:	2301      	movs	r3, #1
 800bc9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800bc9c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 fea4 	bl	800c9ec <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800bca4:	693b      	ldr	r3, [r7, #16]
 800bca6:	f003 0308 	and.w	r3, r3, #8
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d00c      	beq.n	800bcc8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800bcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb0:	015a      	lsls	r2, r3, #5
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcba:	461a      	mov	r2, r3
 800bcbc:	2308      	movs	r3, #8
 800bcbe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800bcc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 ff7a 	bl	800cbbc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	f003 0310 	and.w	r3, r3, #16
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d008      	beq.n	800bce4 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd4:	015a      	lsls	r2, r3, #5
 800bcd6:	69fb      	ldr	r3, [r7, #28]
 800bcd8:	4413      	add	r3, r2
 800bcda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcde:	461a      	mov	r2, r3
 800bce0:	2310      	movs	r3, #16
 800bce2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800bce4:	693b      	ldr	r3, [r7, #16]
 800bce6:	f003 0302 	and.w	r3, r3, #2
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d030      	beq.n	800bd50 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800bcee:	6a3b      	ldr	r3, [r7, #32]
 800bcf0:	695b      	ldr	r3, [r3, #20]
 800bcf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcf6:	2b80      	cmp	r3, #128	@ 0x80
 800bcf8:	d109      	bne.n	800bd0e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	69fa      	ldr	r2, [r7, #28]
 800bd04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bd08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800bd0c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800bd0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd10:	4613      	mov	r3, r2
 800bd12:	00db      	lsls	r3, r3, #3
 800bd14:	4413      	add	r3, r2
 800bd16:	009b      	lsls	r3, r3, #2
 800bd18:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800bd1c:	687a      	ldr	r2, [r7, #4]
 800bd1e:	4413      	add	r3, r2
 800bd20:	3304      	adds	r3, #4
 800bd22:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bd24:	697b      	ldr	r3, [r7, #20]
 800bd26:	78db      	ldrb	r3, [r3, #3]
 800bd28:	2b01      	cmp	r3, #1
 800bd2a:	d108      	bne.n	800bd3e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800bd2c:	697b      	ldr	r3, [r7, #20]
 800bd2e:	2200      	movs	r2, #0
 800bd30:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800bd32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd34:	b2db      	uxtb	r3, r3
 800bd36:	4619      	mov	r1, r3
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f00b fd0b 	bl	8017754 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800bd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd40:	015a      	lsls	r2, r3, #5
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	4413      	add	r3, r2
 800bd46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	2302      	movs	r3, #2
 800bd4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800bd50:	693b      	ldr	r3, [r7, #16]
 800bd52:	f003 0320 	and.w	r3, r3, #32
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d008      	beq.n	800bd6c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bd5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd5c:	015a      	lsls	r2, r3, #5
 800bd5e:	69fb      	ldr	r3, [r7, #28]
 800bd60:	4413      	add	r3, r2
 800bd62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd66:	461a      	mov	r2, r3
 800bd68:	2320      	movs	r3, #32
 800bd6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800bd72:	2b00      	cmp	r3, #0
 800bd74:	d009      	beq.n	800bd8a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800bd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd82:	461a      	mov	r2, r3
 800bd84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bd88:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800bd8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800bd90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd92:	085b      	lsrs	r3, r3, #1
 800bd94:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800bd96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	f47f af62 	bne.w	800bc62 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f005 ff32 	bl	8011c0c <USB_ReadInterrupts>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800bdae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800bdb2:	f040 80db 	bne.w	800bf6c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	4618      	mov	r0, r3
 800bdbc:	f005 ff53 	bl	8011c66 <USB_ReadDevAllInEpInterrupt>
 800bdc0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800bdc6:	e0cd      	b.n	800bf64 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800bdc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdca:	f003 0301 	and.w	r3, r3, #1
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	f000 80c2 	beq.w	800bf58 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdda:	b2d2      	uxtb	r2, r2
 800bddc:	4611      	mov	r1, r2
 800bdde:	4618      	mov	r0, r3
 800bde0:	f005 ff79 	bl	8011cd6 <USB_ReadDevInEPInterrupt>
 800bde4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	f003 0301 	and.w	r3, r3, #1
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d057      	beq.n	800bea0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf2:	f003 030f 	and.w	r3, r3, #15
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdfc:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	43db      	mvns	r3, r3
 800be0a:	69f9      	ldr	r1, [r7, #28]
 800be0c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800be10:	4013      	ands	r3, r2
 800be12:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800be14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be16:	015a      	lsls	r2, r3, #5
 800be18:	69fb      	ldr	r3, [r7, #28]
 800be1a:	4413      	add	r3, r2
 800be1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be20:	461a      	mov	r2, r3
 800be22:	2301      	movs	r3, #1
 800be24:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	799b      	ldrb	r3, [r3, #6]
 800be2a:	2b01      	cmp	r3, #1
 800be2c:	d132      	bne.n	800be94 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800be2e:	6879      	ldr	r1, [r7, #4]
 800be30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be32:	4613      	mov	r3, r2
 800be34:	00db      	lsls	r3, r3, #3
 800be36:	4413      	add	r3, r2
 800be38:	009b      	lsls	r3, r3, #2
 800be3a:	440b      	add	r3, r1
 800be3c:	3320      	adds	r3, #32
 800be3e:	6819      	ldr	r1, [r3, #0]
 800be40:	6878      	ldr	r0, [r7, #4]
 800be42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be44:	4613      	mov	r3, r2
 800be46:	00db      	lsls	r3, r3, #3
 800be48:	4413      	add	r3, r2
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	4403      	add	r3, r0
 800be4e:	331c      	adds	r3, #28
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4419      	add	r1, r3
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be58:	4613      	mov	r3, r2
 800be5a:	00db      	lsls	r3, r3, #3
 800be5c:	4413      	add	r3, r2
 800be5e:	009b      	lsls	r3, r3, #2
 800be60:	4403      	add	r3, r0
 800be62:	3320      	adds	r3, #32
 800be64:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800be66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d113      	bne.n	800be94 <HAL_PCD_IRQHandler+0x3a2>
 800be6c:	6879      	ldr	r1, [r7, #4]
 800be6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800be70:	4613      	mov	r3, r2
 800be72:	00db      	lsls	r3, r3, #3
 800be74:	4413      	add	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	440b      	add	r3, r1
 800be7a:	3324      	adds	r3, #36	@ 0x24
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d108      	bne.n	800be94 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	6818      	ldr	r0, [r3, #0]
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800be8c:	461a      	mov	r2, r3
 800be8e:	2101      	movs	r1, #1
 800be90:	f005 ff80 	bl	8011d94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800be94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be96:	b2db      	uxtb	r3, r3
 800be98:	4619      	mov	r1, r3
 800be9a:	6878      	ldr	r0, [r7, #4]
 800be9c:	f00b fbd5 	bl	801764a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800bea0:	693b      	ldr	r3, [r7, #16]
 800bea2:	f003 0308 	and.w	r3, r3, #8
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d008      	beq.n	800bebc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800beaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800beac:	015a      	lsls	r2, r3, #5
 800beae:	69fb      	ldr	r3, [r7, #28]
 800beb0:	4413      	add	r3, r2
 800beb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beb6:	461a      	mov	r2, r3
 800beb8:	2308      	movs	r3, #8
 800beba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800bebc:	693b      	ldr	r3, [r7, #16]
 800bebe:	f003 0310 	and.w	r3, r3, #16
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d008      	beq.n	800bed8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800bec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bec8:	015a      	lsls	r2, r3, #5
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	4413      	add	r3, r2
 800bece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bed2:	461a      	mov	r2, r3
 800bed4:	2310      	movs	r3, #16
 800bed6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800bed8:	693b      	ldr	r3, [r7, #16]
 800beda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d008      	beq.n	800bef4 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800bee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800beee:	461a      	mov	r2, r3
 800bef0:	2340      	movs	r3, #64	@ 0x40
 800bef2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	f003 0302 	and.w	r3, r3, #2
 800befa:	2b00      	cmp	r3, #0
 800befc:	d023      	beq.n	800bf46 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800befe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf00:	6a38      	ldr	r0, [r7, #32]
 800bf02:	f004 ff67 	bl	8010dd4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800bf06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bf08:	4613      	mov	r3, r2
 800bf0a:	00db      	lsls	r3, r3, #3
 800bf0c:	4413      	add	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	3310      	adds	r3, #16
 800bf12:	687a      	ldr	r2, [r7, #4]
 800bf14:	4413      	add	r3, r2
 800bf16:	3304      	adds	r3, #4
 800bf18:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800bf1a:	697b      	ldr	r3, [r7, #20]
 800bf1c:	78db      	ldrb	r3, [r3, #3]
 800bf1e:	2b01      	cmp	r3, #1
 800bf20:	d108      	bne.n	800bf34 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800bf22:	697b      	ldr	r3, [r7, #20]
 800bf24:	2200      	movs	r2, #0
 800bf26:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800bf28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	4619      	mov	r1, r3
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f00b fc22 	bl	8017778 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800bf34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf36:	015a      	lsls	r2, r3, #5
 800bf38:	69fb      	ldr	r3, [r7, #28]
 800bf3a:	4413      	add	r3, r2
 800bf3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf40:	461a      	mov	r2, r3
 800bf42:	2302      	movs	r3, #2
 800bf44:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800bf46:	693b      	ldr	r3, [r7, #16]
 800bf48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d003      	beq.n	800bf58 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800bf50:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fcbd 	bl	800c8d2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800bf58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800bf5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf60:	085b      	lsrs	r3, r3, #1
 800bf62:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800bf64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	f47f af2e 	bne.w	800bdc8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4618      	mov	r0, r3
 800bf72:	f005 fe4b 	bl	8011c0c <USB_ReadInterrupts>
 800bf76:	4603      	mov	r3, r0
 800bf78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf80:	d122      	bne.n	800bfc8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	69fa      	ldr	r2, [r7, #28]
 800bf8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bf90:	f023 0301 	bic.w	r3, r3, #1
 800bf94:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	d108      	bne.n	800bfb2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	6878      	ldr	r0, [r7, #4]
 800bfac:	f000 fea4 	bl	800ccf8 <HAL_PCDEx_LPM_Callback>
 800bfb0:	e002      	b.n	800bfb8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f00b fbc0 	bl	8017738 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	695a      	ldr	r2, [r3, #20]
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800bfc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	4618      	mov	r0, r3
 800bfce:	f005 fe1d 	bl	8011c0c <USB_ReadInterrupts>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800bfd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800bfdc:	d112      	bne.n	800c004 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800bfde:	69fb      	ldr	r3, [r7, #28]
 800bfe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bfe4:	689b      	ldr	r3, [r3, #8]
 800bfe6:	f003 0301 	and.w	r3, r3, #1
 800bfea:	2b01      	cmp	r3, #1
 800bfec:	d102      	bne.n	800bff4 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800bfee:	6878      	ldr	r0, [r7, #4]
 800bff0:	f00b fb7c 	bl	80176ec <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	695a      	ldr	r2, [r3, #20]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800c002:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	4618      	mov	r0, r3
 800c00a:	f005 fdff 	bl	8011c0c <USB_ReadInterrupts>
 800c00e:	4603      	mov	r3, r0
 800c010:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c014:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c018:	f040 80b7 	bne.w	800c18a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c022:	685b      	ldr	r3, [r3, #4]
 800c024:	69fa      	ldr	r2, [r7, #28]
 800c026:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c02a:	f023 0301 	bic.w	r3, r3, #1
 800c02e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	2110      	movs	r1, #16
 800c036:	4618      	mov	r0, r3
 800c038:	f004 fecc 	bl	8010dd4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c03c:	2300      	movs	r3, #0
 800c03e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c040:	e046      	b.n	800c0d0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800c042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c044:	015a      	lsls	r2, r3, #5
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	4413      	add	r3, r2
 800c04a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c04e:	461a      	mov	r2, r3
 800c050:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c054:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c058:	015a      	lsls	r2, r3, #5
 800c05a:	69fb      	ldr	r3, [r7, #28]
 800c05c:	4413      	add	r3, r2
 800c05e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c066:	0151      	lsls	r1, r2, #5
 800c068:	69fa      	ldr	r2, [r7, #28]
 800c06a:	440a      	add	r2, r1
 800c06c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c070:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c074:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800c076:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c078:	015a      	lsls	r2, r3, #5
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	4413      	add	r3, r2
 800c07e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c082:	461a      	mov	r2, r3
 800c084:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800c088:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c08a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c08c:	015a      	lsls	r2, r3, #5
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	4413      	add	r3, r2
 800c092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c09a:	0151      	lsls	r1, r2, #5
 800c09c:	69fa      	ldr	r2, [r7, #28]
 800c09e:	440a      	add	r2, r1
 800c0a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0a4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c0a8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c0aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0ac:	015a      	lsls	r2, r3, #5
 800c0ae:	69fb      	ldr	r3, [r7, #28]
 800c0b0:	4413      	add	r3, r2
 800c0b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0ba:	0151      	lsls	r1, r2, #5
 800c0bc:	69fa      	ldr	r2, [r7, #28]
 800c0be:	440a      	add	r2, r1
 800c0c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c0c8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	791b      	ldrb	r3, [r3, #4]
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0d8:	4293      	cmp	r3, r2
 800c0da:	d3b2      	bcc.n	800c042 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800c0dc:	69fb      	ldr	r3, [r7, #28]
 800c0de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0e2:	69db      	ldr	r3, [r3, #28]
 800c0e4:	69fa      	ldr	r2, [r7, #28]
 800c0e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c0ea:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800c0ee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	7bdb      	ldrb	r3, [r3, #15]
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d016      	beq.n	800c126 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800c0f8:	69fb      	ldr	r3, [r7, #28]
 800c0fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c0fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c102:	69fa      	ldr	r2, [r7, #28]
 800c104:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c108:	f043 030b 	orr.w	r3, r3, #11
 800c10c:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800c110:	69fb      	ldr	r3, [r7, #28]
 800c112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c118:	69fa      	ldr	r2, [r7, #28]
 800c11a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c11e:	f043 030b 	orr.w	r3, r3, #11
 800c122:	6453      	str	r3, [r2, #68]	@ 0x44
 800c124:	e015      	b.n	800c152 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c12c:	695b      	ldr	r3, [r3, #20]
 800c12e:	69fa      	ldr	r2, [r7, #28]
 800c130:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c134:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800c138:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800c13c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800c13e:	69fb      	ldr	r3, [r7, #28]
 800c140:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c144:	691b      	ldr	r3, [r3, #16]
 800c146:	69fa      	ldr	r2, [r7, #28]
 800c148:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c14c:	f043 030b 	orr.w	r3, r3, #11
 800c150:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c158:	681b      	ldr	r3, [r3, #0]
 800c15a:	69fa      	ldr	r2, [r7, #28]
 800c15c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c160:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c164:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6818      	ldr	r0, [r3, #0]
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800c174:	461a      	mov	r2, r3
 800c176:	f005 fe0d 	bl	8011d94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	695a      	ldr	r2, [r3, #20]
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800c188:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4618      	mov	r0, r3
 800c190:	f005 fd3c 	bl	8011c0c <USB_ReadInterrupts>
 800c194:	4603      	mov	r3, r0
 800c196:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c19a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c19e:	d123      	bne.n	800c1e8 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	4618      	mov	r0, r3
 800c1a6:	f005 fdd2 	bl	8011d4e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	4618      	mov	r0, r3
 800c1b0:	f004 fe89 	bl	8010ec6 <USB_GetDevSpeed>
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	461a      	mov	r2, r3
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	681c      	ldr	r4, [r3, #0]
 800c1c0:	f001 fa0a 	bl	800d5d8 <HAL_RCC_GetHCLKFreq>
 800c1c4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	4620      	mov	r0, r4
 800c1ce:	f004 fb8d 	bl	80108ec <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f00b fa61 	bl	801769a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	695a      	ldr	r2, [r3, #20]
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800c1e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f005 fd0d 	bl	8011c0c <USB_ReadInterrupts>
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	f003 0308 	and.w	r3, r3, #8
 800c1f8:	2b08      	cmp	r3, #8
 800c1fa:	d10a      	bne.n	800c212 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800c1fc:	6878      	ldr	r0, [r7, #4]
 800c1fe:	f00b fa3e 	bl	801767e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	695a      	ldr	r2, [r3, #20]
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f002 0208 	and.w	r2, r2, #8
 800c210:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	4618      	mov	r0, r3
 800c218:	f005 fcf8 	bl	8011c0c <USB_ReadInterrupts>
 800c21c:	4603      	mov	r3, r0
 800c21e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c222:	2b80      	cmp	r3, #128	@ 0x80
 800c224:	d123      	bne.n	800c26e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800c226:	6a3b      	ldr	r3, [r7, #32]
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c22e:	6a3b      	ldr	r3, [r7, #32]
 800c230:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c232:	2301      	movs	r3, #1
 800c234:	627b      	str	r3, [r7, #36]	@ 0x24
 800c236:	e014      	b.n	800c262 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800c238:	6879      	ldr	r1, [r7, #4]
 800c23a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c23c:	4613      	mov	r3, r2
 800c23e:	00db      	lsls	r3, r3, #3
 800c240:	4413      	add	r3, r2
 800c242:	009b      	lsls	r3, r3, #2
 800c244:	440b      	add	r3, r1
 800c246:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	2b01      	cmp	r3, #1
 800c24e:	d105      	bne.n	800c25c <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800c250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c252:	b2db      	uxtb	r3, r3
 800c254:	4619      	mov	r1, r3
 800c256:	6878      	ldr	r0, [r7, #4]
 800c258:	f000 fb0a 	bl	800c870 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c25e:	3301      	adds	r3, #1
 800c260:	627b      	str	r3, [r7, #36]	@ 0x24
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	791b      	ldrb	r3, [r3, #4]
 800c266:	461a      	mov	r2, r3
 800c268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c26a:	4293      	cmp	r3, r2
 800c26c:	d3e4      	bcc.n	800c238 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	4618      	mov	r0, r3
 800c274:	f005 fcca 	bl	8011c0c <USB_ReadInterrupts>
 800c278:	4603      	mov	r3, r0
 800c27a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800c27e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c282:	d13c      	bne.n	800c2fe <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c284:	2301      	movs	r3, #1
 800c286:	627b      	str	r3, [r7, #36]	@ 0x24
 800c288:	e02b      	b.n	800c2e2 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800c28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c28c:	015a      	lsls	r2, r3, #5
 800c28e:	69fb      	ldr	r3, [r7, #28]
 800c290:	4413      	add	r3, r2
 800c292:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c29a:	6879      	ldr	r1, [r7, #4]
 800c29c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c29e:	4613      	mov	r3, r2
 800c2a0:	00db      	lsls	r3, r3, #3
 800c2a2:	4413      	add	r3, r2
 800c2a4:	009b      	lsls	r3, r3, #2
 800c2a6:	440b      	add	r3, r1
 800c2a8:	3318      	adds	r3, #24
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	2b01      	cmp	r3, #1
 800c2ae:	d115      	bne.n	800c2dc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800c2b0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	da12      	bge.n	800c2dc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800c2b6:	6879      	ldr	r1, [r7, #4]
 800c2b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c2ba:	4613      	mov	r3, r2
 800c2bc:	00db      	lsls	r3, r3, #3
 800c2be:	4413      	add	r3, r2
 800c2c0:	009b      	lsls	r3, r3, #2
 800c2c2:	440b      	add	r3, r1
 800c2c4:	3317      	adds	r3, #23
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	4619      	mov	r1, r3
 800c2d6:	6878      	ldr	r0, [r7, #4]
 800c2d8:	f000 faca 	bl	800c870 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c2dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2de:	3301      	adds	r3, #1
 800c2e0:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	791b      	ldrb	r3, [r3, #4]
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d3cd      	bcc.n	800c28a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	695a      	ldr	r2, [r3, #20]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800c2fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	4618      	mov	r0, r3
 800c304:	f005 fc82 	bl	8011c0c <USB_ReadInterrupts>
 800c308:	4603      	mov	r3, r0
 800c30a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800c30e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c312:	d156      	bne.n	800c3c2 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c314:	2301      	movs	r3, #1
 800c316:	627b      	str	r3, [r7, #36]	@ 0x24
 800c318:	e045      	b.n	800c3a6 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800c31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c31c:	015a      	lsls	r2, r3, #5
 800c31e:	69fb      	ldr	r3, [r7, #28]
 800c320:	4413      	add	r3, r2
 800c322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c32a:	6879      	ldr	r1, [r7, #4]
 800c32c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c32e:	4613      	mov	r3, r2
 800c330:	00db      	lsls	r3, r3, #3
 800c332:	4413      	add	r3, r2
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	440b      	add	r3, r1
 800c338:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800c33c:	781b      	ldrb	r3, [r3, #0]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d12e      	bne.n	800c3a0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c342:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800c344:	2b00      	cmp	r3, #0
 800c346:	da2b      	bge.n	800c3a0 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800c348:	69bb      	ldr	r3, [r7, #24]
 800c34a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800c354:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800c358:	429a      	cmp	r2, r3
 800c35a:	d121      	bne.n	800c3a0 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800c35c:	6879      	ldr	r1, [r7, #4]
 800c35e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c360:	4613      	mov	r3, r2
 800c362:	00db      	lsls	r3, r3, #3
 800c364:	4413      	add	r3, r2
 800c366:	009b      	lsls	r3, r3, #2
 800c368:	440b      	add	r3, r1
 800c36a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800c36e:	2201      	movs	r2, #1
 800c370:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800c372:	6a3b      	ldr	r3, [r7, #32]
 800c374:	699b      	ldr	r3, [r3, #24]
 800c376:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800c37a:	6a3b      	ldr	r3, [r7, #32]
 800c37c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800c37e:	6a3b      	ldr	r3, [r7, #32]
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c386:	2b00      	cmp	r3, #0
 800c388:	d10a      	bne.n	800c3a0 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800c38a:	69fb      	ldr	r3, [r7, #28]
 800c38c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	69fa      	ldr	r2, [r7, #28]
 800c394:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c398:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800c39c:	6053      	str	r3, [r2, #4]
            break;
 800c39e:	e008      	b.n	800c3b2 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800c3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	627b      	str	r3, [r7, #36]	@ 0x24
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	791b      	ldrb	r3, [r3, #4]
 800c3aa:	461a      	mov	r2, r3
 800c3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d3b3      	bcc.n	800c31a <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	695a      	ldr	r2, [r3, #20]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800c3c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f005 fc20 	bl	8011c0c <USB_ReadInterrupts>
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800c3d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c3d6:	d10a      	bne.n	800c3ee <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800c3d8:	6878      	ldr	r0, [r7, #4]
 800c3da:	f00b f9df 	bl	801779c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	695a      	ldr	r2, [r3, #20]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800c3ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	4618      	mov	r0, r3
 800c3f4:	f005 fc0a 	bl	8011c0c <USB_ReadInterrupts>
 800c3f8:	4603      	mov	r3, r0
 800c3fa:	f003 0304 	and.w	r3, r3, #4
 800c3fe:	2b04      	cmp	r3, #4
 800c400:	d115      	bne.n	800c42e <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800c40a:	69bb      	ldr	r3, [r7, #24]
 800c40c:	f003 0304 	and.w	r3, r3, #4
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f00b f9cf 	bl	80177b8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	6859      	ldr	r1, [r3, #4]
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	69ba      	ldr	r2, [r7, #24]
 800c426:	430a      	orrs	r2, r1
 800c428:	605a      	str	r2, [r3, #4]
 800c42a:	e000      	b.n	800c42e <HAL_PCD_IRQHandler+0x93c>
      return;
 800c42c:	bf00      	nop
    }
  }
}
 800c42e:	3734      	adds	r7, #52	@ 0x34
 800c430:	46bd      	mov	sp, r7
 800c432:	bd90      	pop	{r4, r7, pc}

0800c434 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
 800c43c:	460b      	mov	r3, r1
 800c43e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c446:	2b01      	cmp	r3, #1
 800c448:	d101      	bne.n	800c44e <HAL_PCD_SetAddress+0x1a>
 800c44a:	2302      	movs	r3, #2
 800c44c:	e012      	b.n	800c474 <HAL_PCD_SetAddress+0x40>
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2201      	movs	r2, #1
 800c452:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	78fa      	ldrb	r2, [r7, #3]
 800c45a:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	78fa      	ldrb	r2, [r7, #3]
 800c462:	4611      	mov	r1, r2
 800c464:	4618      	mov	r0, r3
 800c466:	f005 fb69 	bl	8011b3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	2200      	movs	r2, #0
 800c46e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c472:	2300      	movs	r3, #0
}
 800c474:	4618      	mov	r0, r3
 800c476:	3708      	adds	r7, #8
 800c478:	46bd      	mov	sp, r7
 800c47a:	bd80      	pop	{r7, pc}

0800c47c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	4608      	mov	r0, r1
 800c486:	4611      	mov	r1, r2
 800c488:	461a      	mov	r2, r3
 800c48a:	4603      	mov	r3, r0
 800c48c:	70fb      	strb	r3, [r7, #3]
 800c48e:	460b      	mov	r3, r1
 800c490:	803b      	strh	r3, [r7, #0]
 800c492:	4613      	mov	r3, r2
 800c494:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800c496:	2300      	movs	r3, #0
 800c498:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c49a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	da0f      	bge.n	800c4c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c4a2:	78fb      	ldrb	r3, [r7, #3]
 800c4a4:	f003 020f 	and.w	r2, r3, #15
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	00db      	lsls	r3, r3, #3
 800c4ac:	4413      	add	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	3310      	adds	r3, #16
 800c4b2:	687a      	ldr	r2, [r7, #4]
 800c4b4:	4413      	add	r3, r2
 800c4b6:	3304      	adds	r3, #4
 800c4b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	2201      	movs	r2, #1
 800c4be:	705a      	strb	r2, [r3, #1]
 800c4c0:	e00f      	b.n	800c4e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c4c2:	78fb      	ldrb	r3, [r7, #3]
 800c4c4:	f003 020f 	and.w	r2, r3, #15
 800c4c8:	4613      	mov	r3, r2
 800c4ca:	00db      	lsls	r3, r3, #3
 800c4cc:	4413      	add	r3, r2
 800c4ce:	009b      	lsls	r3, r3, #2
 800c4d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	3304      	adds	r3, #4
 800c4da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800c4e2:	78fb      	ldrb	r3, [r7, #3]
 800c4e4:	f003 030f 	and.w	r3, r3, #15
 800c4e8:	b2da      	uxtb	r2, r3
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 800c4ee:	883b      	ldrh	r3, [r7, #0]
 800c4f0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	78ba      	ldrb	r2, [r7, #2]
 800c4fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	785b      	ldrb	r3, [r3, #1]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d004      	beq.n	800c510 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	781b      	ldrb	r3, [r3, #0]
 800c50a:	461a      	mov	r2, r3
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800c510:	78bb      	ldrb	r3, [r7, #2]
 800c512:	2b02      	cmp	r3, #2
 800c514:	d102      	bne.n	800c51c <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	2200      	movs	r2, #0
 800c51a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c522:	2b01      	cmp	r3, #1
 800c524:	d101      	bne.n	800c52a <HAL_PCD_EP_Open+0xae>
 800c526:	2302      	movs	r3, #2
 800c528:	e00e      	b.n	800c548 <HAL_PCD_EP_Open+0xcc>
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	68f9      	ldr	r1, [r7, #12]
 800c538:	4618      	mov	r0, r3
 800c53a:	f004 fce9 	bl	8010f10 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2200      	movs	r2, #0
 800c542:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800c546:	7afb      	ldrb	r3, [r7, #11]
}
 800c548:	4618      	mov	r0, r3
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	6078      	str	r0, [r7, #4]
 800c558:	460b      	mov	r3, r1
 800c55a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800c55c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c560:	2b00      	cmp	r3, #0
 800c562:	da0f      	bge.n	800c584 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c564:	78fb      	ldrb	r3, [r7, #3]
 800c566:	f003 020f 	and.w	r2, r3, #15
 800c56a:	4613      	mov	r3, r2
 800c56c:	00db      	lsls	r3, r3, #3
 800c56e:	4413      	add	r3, r2
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	3310      	adds	r3, #16
 800c574:	687a      	ldr	r2, [r7, #4]
 800c576:	4413      	add	r3, r2
 800c578:	3304      	adds	r3, #4
 800c57a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2201      	movs	r2, #1
 800c580:	705a      	strb	r2, [r3, #1]
 800c582:	e00f      	b.n	800c5a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c584:	78fb      	ldrb	r3, [r7, #3]
 800c586:	f003 020f 	and.w	r2, r3, #15
 800c58a:	4613      	mov	r3, r2
 800c58c:	00db      	lsls	r3, r3, #3
 800c58e:	4413      	add	r3, r2
 800c590:	009b      	lsls	r3, r3, #2
 800c592:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c596:	687a      	ldr	r2, [r7, #4]
 800c598:	4413      	add	r3, r2
 800c59a:	3304      	adds	r3, #4
 800c59c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800c5a4:	78fb      	ldrb	r3, [r7, #3]
 800c5a6:	f003 030f 	and.w	r3, r3, #15
 800c5aa:	b2da      	uxtb	r2, r3
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c5b6:	2b01      	cmp	r3, #1
 800c5b8:	d101      	bne.n	800c5be <HAL_PCD_EP_Close+0x6e>
 800c5ba:	2302      	movs	r3, #2
 800c5bc:	e00e      	b.n	800c5dc <HAL_PCD_EP_Close+0x8c>
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	2201      	movs	r2, #1
 800c5c2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	68f9      	ldr	r1, [r7, #12]
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	f004 fd27 	bl	8011020 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	2200      	movs	r2, #0
 800c5d6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800c5da:	2300      	movs	r3, #0
}
 800c5dc:	4618      	mov	r0, r3
 800c5de:	3710      	adds	r7, #16
 800c5e0:	46bd      	mov	sp, r7
 800c5e2:	bd80      	pop	{r7, pc}

0800c5e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b086      	sub	sp, #24
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	60f8      	str	r0, [r7, #12]
 800c5ec:	607a      	str	r2, [r7, #4]
 800c5ee:	603b      	str	r3, [r7, #0]
 800c5f0:	460b      	mov	r3, r1
 800c5f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c5f4:	7afb      	ldrb	r3, [r7, #11]
 800c5f6:	f003 020f 	and.w	r2, r3, #15
 800c5fa:	4613      	mov	r3, r2
 800c5fc:	00db      	lsls	r3, r3, #3
 800c5fe:	4413      	add	r3, r2
 800c600:	009b      	lsls	r3, r3, #2
 800c602:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c606:	68fa      	ldr	r2, [r7, #12]
 800c608:	4413      	add	r3, r2
 800c60a:	3304      	adds	r3, #4
 800c60c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c60e:	697b      	ldr	r3, [r7, #20]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2200      	movs	r2, #0
 800c61e:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800c620:	697b      	ldr	r3, [r7, #20]
 800c622:	2200      	movs	r2, #0
 800c624:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c626:	7afb      	ldrb	r3, [r7, #11]
 800c628:	f003 030f 	and.w	r3, r3, #15
 800c62c:	b2da      	uxtb	r2, r3
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	799b      	ldrb	r3, [r3, #6]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d102      	bne.n	800c640 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c63a:	687a      	ldr	r2, [r7, #4]
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	6818      	ldr	r0, [r3, #0]
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	799b      	ldrb	r3, [r3, #6]
 800c648:	461a      	mov	r2, r3
 800c64a:	6979      	ldr	r1, [r7, #20]
 800c64c:	f004 fdc4 	bl	80111d8 <USB_EPStartXfer>

  return HAL_OK;
 800c650:	2300      	movs	r3, #0
}
 800c652:	4618      	mov	r0, r3
 800c654:	3718      	adds	r7, #24
 800c656:	46bd      	mov	sp, r7
 800c658:	bd80      	pop	{r7, pc}

0800c65a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800c65a:	b480      	push	{r7}
 800c65c:	b083      	sub	sp, #12
 800c65e:	af00      	add	r7, sp, #0
 800c660:	6078      	str	r0, [r7, #4]
 800c662:	460b      	mov	r3, r1
 800c664:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800c666:	78fb      	ldrb	r3, [r7, #3]
 800c668:	f003 020f 	and.w	r2, r3, #15
 800c66c:	6879      	ldr	r1, [r7, #4]
 800c66e:	4613      	mov	r3, r2
 800c670:	00db      	lsls	r3, r3, #3
 800c672:	4413      	add	r3, r2
 800c674:	009b      	lsls	r3, r3, #2
 800c676:	440b      	add	r3, r1
 800c678:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800c67c:	681b      	ldr	r3, [r3, #0]
}
 800c67e:	4618      	mov	r0, r3
 800c680:	370c      	adds	r7, #12
 800c682:	46bd      	mov	sp, r7
 800c684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c688:	4770      	bx	lr

0800c68a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800c68a:	b580      	push	{r7, lr}
 800c68c:	b086      	sub	sp, #24
 800c68e:	af00      	add	r7, sp, #0
 800c690:	60f8      	str	r0, [r7, #12]
 800c692:	607a      	str	r2, [r7, #4]
 800c694:	603b      	str	r3, [r7, #0]
 800c696:	460b      	mov	r3, r1
 800c698:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c69a:	7afb      	ldrb	r3, [r7, #11]
 800c69c:	f003 020f 	and.w	r2, r3, #15
 800c6a0:	4613      	mov	r3, r2
 800c6a2:	00db      	lsls	r3, r3, #3
 800c6a4:	4413      	add	r3, r2
 800c6a6:	009b      	lsls	r3, r3, #2
 800c6a8:	3310      	adds	r3, #16
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	4413      	add	r3, r2
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	687a      	ldr	r2, [r7, #4]
 800c6b6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	683a      	ldr	r2, [r7, #0]
 800c6bc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2200      	movs	r2, #0
 800c6c2:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800c6c4:	697b      	ldr	r3, [r7, #20]
 800c6c6:	2201      	movs	r2, #1
 800c6c8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c6ca:	7afb      	ldrb	r3, [r7, #11]
 800c6cc:	f003 030f 	and.w	r3, r3, #15
 800c6d0:	b2da      	uxtb	r2, r3
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	799b      	ldrb	r3, [r3, #6]
 800c6da:	2b01      	cmp	r3, #1
 800c6dc:	d102      	bne.n	800c6e4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800c6de:	687a      	ldr	r2, [r7, #4]
 800c6e0:	697b      	ldr	r3, [r7, #20]
 800c6e2:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	6818      	ldr	r0, [r3, #0]
 800c6e8:	68fb      	ldr	r3, [r7, #12]
 800c6ea:	799b      	ldrb	r3, [r3, #6]
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	6979      	ldr	r1, [r7, #20]
 800c6f0:	f004 fd72 	bl	80111d8 <USB_EPStartXfer>

  return HAL_OK;
 800c6f4:	2300      	movs	r3, #0
}
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	3718      	adds	r7, #24
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	bd80      	pop	{r7, pc}

0800c6fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c6fe:	b580      	push	{r7, lr}
 800c700:	b084      	sub	sp, #16
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	460b      	mov	r3, r1
 800c708:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800c70a:	78fb      	ldrb	r3, [r7, #3]
 800c70c:	f003 030f 	and.w	r3, r3, #15
 800c710:	687a      	ldr	r2, [r7, #4]
 800c712:	7912      	ldrb	r2, [r2, #4]
 800c714:	4293      	cmp	r3, r2
 800c716:	d901      	bls.n	800c71c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800c718:	2301      	movs	r3, #1
 800c71a:	e04f      	b.n	800c7bc <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c71c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c720:	2b00      	cmp	r3, #0
 800c722:	da0f      	bge.n	800c744 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c724:	78fb      	ldrb	r3, [r7, #3]
 800c726:	f003 020f 	and.w	r2, r3, #15
 800c72a:	4613      	mov	r3, r2
 800c72c:	00db      	lsls	r3, r3, #3
 800c72e:	4413      	add	r3, r2
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	3310      	adds	r3, #16
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	4413      	add	r3, r2
 800c738:	3304      	adds	r3, #4
 800c73a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	2201      	movs	r2, #1
 800c740:	705a      	strb	r2, [r3, #1]
 800c742:	e00d      	b.n	800c760 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800c744:	78fa      	ldrb	r2, [r7, #3]
 800c746:	4613      	mov	r3, r2
 800c748:	00db      	lsls	r3, r3, #3
 800c74a:	4413      	add	r3, r2
 800c74c:	009b      	lsls	r3, r3, #2
 800c74e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	4413      	add	r3, r2
 800c756:	3304      	adds	r3, #4
 800c758:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	2200      	movs	r2, #0
 800c75e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2201      	movs	r2, #1
 800c764:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c766:	78fb      	ldrb	r3, [r7, #3]
 800c768:	f003 030f 	and.w	r3, r3, #15
 800c76c:	b2da      	uxtb	r2, r3
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d101      	bne.n	800c780 <HAL_PCD_EP_SetStall+0x82>
 800c77c:	2302      	movs	r3, #2
 800c77e:	e01d      	b.n	800c7bc <HAL_PCD_EP_SetStall+0xbe>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	2201      	movs	r2, #1
 800c784:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	68f9      	ldr	r1, [r7, #12]
 800c78e:	4618      	mov	r0, r3
 800c790:	f005 f900 	bl	8011994 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800c794:	78fb      	ldrb	r3, [r7, #3]
 800c796:	f003 030f 	and.w	r3, r3, #15
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d109      	bne.n	800c7b2 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6818      	ldr	r0, [r3, #0]
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	7999      	ldrb	r1, [r3, #6]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	f005 faf1 	bl	8011d94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	2200      	movs	r2, #0
 800c7b6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c7ba:	2300      	movs	r3, #0
}
 800c7bc:	4618      	mov	r0, r3
 800c7be:	3710      	adds	r7, #16
 800c7c0:	46bd      	mov	sp, r7
 800c7c2:	bd80      	pop	{r7, pc}

0800c7c4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b084      	sub	sp, #16
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	6078      	str	r0, [r7, #4]
 800c7cc:	460b      	mov	r3, r1
 800c7ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800c7d0:	78fb      	ldrb	r3, [r7, #3]
 800c7d2:	f003 030f 	and.w	r3, r3, #15
 800c7d6:	687a      	ldr	r2, [r7, #4]
 800c7d8:	7912      	ldrb	r2, [r2, #4]
 800c7da:	4293      	cmp	r3, r2
 800c7dc:	d901      	bls.n	800c7e2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800c7de:	2301      	movs	r3, #1
 800c7e0:	e042      	b.n	800c868 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800c7e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	da0f      	bge.n	800c80a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c7ea:	78fb      	ldrb	r3, [r7, #3]
 800c7ec:	f003 020f 	and.w	r2, r3, #15
 800c7f0:	4613      	mov	r3, r2
 800c7f2:	00db      	lsls	r3, r3, #3
 800c7f4:	4413      	add	r3, r2
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	3310      	adds	r3, #16
 800c7fa:	687a      	ldr	r2, [r7, #4]
 800c7fc:	4413      	add	r3, r2
 800c7fe:	3304      	adds	r3, #4
 800c800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	2201      	movs	r2, #1
 800c806:	705a      	strb	r2, [r3, #1]
 800c808:	e00f      	b.n	800c82a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c80a:	78fb      	ldrb	r3, [r7, #3]
 800c80c:	f003 020f 	and.w	r2, r3, #15
 800c810:	4613      	mov	r3, r2
 800c812:	00db      	lsls	r3, r3, #3
 800c814:	4413      	add	r3, r2
 800c816:	009b      	lsls	r3, r3, #2
 800c818:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c81c:	687a      	ldr	r2, [r7, #4]
 800c81e:	4413      	add	r3, r2
 800c820:	3304      	adds	r3, #4
 800c822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	2200      	movs	r2, #0
 800c828:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800c82a:	68fb      	ldr	r3, [r7, #12]
 800c82c:	2200      	movs	r2, #0
 800c82e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800c830:	78fb      	ldrb	r3, [r7, #3]
 800c832:	f003 030f 	and.w	r3, r3, #15
 800c836:	b2da      	uxtb	r2, r3
 800c838:	68fb      	ldr	r3, [r7, #12]
 800c83a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800c842:	2b01      	cmp	r3, #1
 800c844:	d101      	bne.n	800c84a <HAL_PCD_EP_ClrStall+0x86>
 800c846:	2302      	movs	r3, #2
 800c848:	e00e      	b.n	800c868 <HAL_PCD_EP_ClrStall+0xa4>
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2201      	movs	r2, #1
 800c84e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681b      	ldr	r3, [r3, #0]
 800c856:	68f9      	ldr	r1, [r7, #12]
 800c858:	4618      	mov	r0, r3
 800c85a:	f005 f909 	bl	8011a70 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800c866:	2300      	movs	r3, #0
}
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}

0800c870 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800c870:	b580      	push	{r7, lr}
 800c872:	b084      	sub	sp, #16
 800c874:	af00      	add	r7, sp, #0
 800c876:	6078      	str	r0, [r7, #4]
 800c878:	460b      	mov	r3, r1
 800c87a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800c87c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c880:	2b00      	cmp	r3, #0
 800c882:	da0c      	bge.n	800c89e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800c884:	78fb      	ldrb	r3, [r7, #3]
 800c886:	f003 020f 	and.w	r2, r3, #15
 800c88a:	4613      	mov	r3, r2
 800c88c:	00db      	lsls	r3, r3, #3
 800c88e:	4413      	add	r3, r2
 800c890:	009b      	lsls	r3, r3, #2
 800c892:	3310      	adds	r3, #16
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	4413      	add	r3, r2
 800c898:	3304      	adds	r3, #4
 800c89a:	60fb      	str	r3, [r7, #12]
 800c89c:	e00c      	b.n	800c8b8 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800c89e:	78fb      	ldrb	r3, [r7, #3]
 800c8a0:	f003 020f 	and.w	r2, r3, #15
 800c8a4:	4613      	mov	r3, r2
 800c8a6:	00db      	lsls	r3, r3, #3
 800c8a8:	4413      	add	r3, r2
 800c8aa:	009b      	lsls	r3, r3, #2
 800c8ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	3304      	adds	r3, #4
 800c8b6:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	68f9      	ldr	r1, [r7, #12]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f004 ff28 	bl	8011714 <USB_EPStopXfer>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	72fb      	strb	r3, [r7, #11]

  return ret;
 800c8c8:	7afb      	ldrb	r3, [r7, #11]
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3710      	adds	r7, #16
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b08a      	sub	sp, #40	@ 0x28
 800c8d6:	af02      	add	r7, sp, #8
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800c8e6:	683a      	ldr	r2, [r7, #0]
 800c8e8:	4613      	mov	r3, r2
 800c8ea:	00db      	lsls	r3, r3, #3
 800c8ec:	4413      	add	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	3310      	adds	r3, #16
 800c8f2:	687a      	ldr	r2, [r7, #4]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	3304      	adds	r3, #4
 800c8f8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	695a      	ldr	r2, [r3, #20]
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	691b      	ldr	r3, [r3, #16]
 800c902:	429a      	cmp	r2, r3
 800c904:	d901      	bls.n	800c90a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	e06b      	b.n	800c9e2 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	691a      	ldr	r2, [r3, #16]
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	695b      	ldr	r3, [r3, #20]
 800c912:	1ad3      	subs	r3, r2, r3
 800c914:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	689b      	ldr	r3, [r3, #8]
 800c91a:	69fa      	ldr	r2, [r7, #28]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d902      	bls.n	800c926 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	689b      	ldr	r3, [r3, #8]
 800c924:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800c926:	69fb      	ldr	r3, [r7, #28]
 800c928:	3303      	adds	r3, #3
 800c92a:	089b      	lsrs	r3, r3, #2
 800c92c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c92e:	e02a      	b.n	800c986 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	691a      	ldr	r2, [r3, #16]
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	695b      	ldr	r3, [r3, #20]
 800c938:	1ad3      	subs	r3, r2, r3
 800c93a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	69fa      	ldr	r2, [r7, #28]
 800c942:	429a      	cmp	r2, r3
 800c944:	d902      	bls.n	800c94c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	689b      	ldr	r3, [r3, #8]
 800c94a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800c94c:	69fb      	ldr	r3, [r7, #28]
 800c94e:	3303      	adds	r3, #3
 800c950:	089b      	lsrs	r3, r3, #2
 800c952:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	68d9      	ldr	r1, [r3, #12]
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	b2da      	uxtb	r2, r3
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800c964:	9300      	str	r3, [sp, #0]
 800c966:	4603      	mov	r3, r0
 800c968:	6978      	ldr	r0, [r7, #20]
 800c96a:	f004 ff7d 	bl	8011868 <USB_WritePacket>

    ep->xfer_buff  += len;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	68da      	ldr	r2, [r3, #12]
 800c972:	69fb      	ldr	r3, [r7, #28]
 800c974:	441a      	add	r2, r3
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	695a      	ldr	r2, [r3, #20]
 800c97e:	69fb      	ldr	r3, [r7, #28]
 800c980:	441a      	add	r2, r3
 800c982:	68fb      	ldr	r3, [r7, #12]
 800c984:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	015a      	lsls	r2, r3, #5
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	4413      	add	r3, r2
 800c98e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c992:	699b      	ldr	r3, [r3, #24]
 800c994:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c996:	69ba      	ldr	r2, [r7, #24]
 800c998:	429a      	cmp	r2, r3
 800c99a:	d809      	bhi.n	800c9b0 <PCD_WriteEmptyTxFifo+0xde>
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	695a      	ldr	r2, [r3, #20]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d203      	bcs.n	800c9b0 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1bf      	bne.n	800c930 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	691a      	ldr	r2, [r3, #16]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	695b      	ldr	r3, [r3, #20]
 800c9b8:	429a      	cmp	r2, r3
 800c9ba:	d811      	bhi.n	800c9e0 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	f003 030f 	and.w	r3, r3, #15
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	fa02 f303 	lsl.w	r3, r2, r3
 800c9c8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c9d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	43db      	mvns	r3, r3
 800c9d6:	6939      	ldr	r1, [r7, #16]
 800c9d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c9dc:	4013      	ands	r3, r2
 800c9de:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800c9e0:	2300      	movs	r3, #0
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	3720      	adds	r7, #32
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	bd80      	pop	{r7, pc}
	...

0800c9ec <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b088      	sub	sp, #32
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c9fc:	69fb      	ldr	r3, [r7, #28]
 800c9fe:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ca00:	69fb      	ldr	r3, [r7, #28]
 800ca02:	333c      	adds	r3, #60	@ 0x3c
 800ca04:	3304      	adds	r3, #4
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	015a      	lsls	r2, r3, #5
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	4413      	add	r3, r2
 800ca12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca16:	689b      	ldr	r3, [r3, #8]
 800ca18:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	799b      	ldrb	r3, [r3, #6]
 800ca1e:	2b01      	cmp	r3, #1
 800ca20:	d17b      	bne.n	800cb1a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800ca22:	693b      	ldr	r3, [r7, #16]
 800ca24:	f003 0308 	and.w	r3, r3, #8
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d015      	beq.n	800ca58 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ca2c:	697b      	ldr	r3, [r7, #20]
 800ca2e:	4a61      	ldr	r2, [pc, #388]	@ (800cbb4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ca30:	4293      	cmp	r3, r2
 800ca32:	f240 80b9 	bls.w	800cba8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	f000 80b3 	beq.w	800cba8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	015a      	lsls	r2, r3, #5
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	4413      	add	r3, r2
 800ca4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca4e:	461a      	mov	r2, r3
 800ca50:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ca54:	6093      	str	r3, [r2, #8]
 800ca56:	e0a7      	b.n	800cba8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800ca58:	693b      	ldr	r3, [r7, #16]
 800ca5a:	f003 0320 	and.w	r3, r3, #32
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d009      	beq.n	800ca76 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	015a      	lsls	r2, r3, #5
 800ca66:	69bb      	ldr	r3, [r7, #24]
 800ca68:	4413      	add	r3, r2
 800ca6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ca6e:	461a      	mov	r2, r3
 800ca70:	2320      	movs	r3, #32
 800ca72:	6093      	str	r3, [r2, #8]
 800ca74:	e098      	b.n	800cba8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	f040 8093 	bne.w	800cba8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	4a4b      	ldr	r2, [pc, #300]	@ (800cbb4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800ca86:	4293      	cmp	r3, r2
 800ca88:	d90f      	bls.n	800caaa <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800ca8a:	693b      	ldr	r3, [r7, #16]
 800ca8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00a      	beq.n	800caaa <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	015a      	lsls	r2, r3, #5
 800ca98:	69bb      	ldr	r3, [r7, #24]
 800ca9a:	4413      	add	r3, r2
 800ca9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800caa0:	461a      	mov	r2, r3
 800caa2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800caa6:	6093      	str	r3, [r2, #8]
 800caa8:	e07e      	b.n	800cba8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800caaa:	683a      	ldr	r2, [r7, #0]
 800caac:	4613      	mov	r3, r2
 800caae:	00db      	lsls	r3, r3, #3
 800cab0:	4413      	add	r3, r2
 800cab2:	009b      	lsls	r3, r3, #2
 800cab4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800cab8:	687a      	ldr	r2, [r7, #4]
 800caba:	4413      	add	r3, r2
 800cabc:	3304      	adds	r3, #4
 800cabe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	6a1a      	ldr	r2, [r3, #32]
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	0159      	lsls	r1, r3, #5
 800cac8:	69bb      	ldr	r3, [r7, #24]
 800caca:	440b      	add	r3, r1
 800cacc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cad0:	691b      	ldr	r3, [r3, #16]
 800cad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cad6:	1ad2      	subs	r2, r2, r3
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d114      	bne.n	800cb0c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d109      	bne.n	800cafe <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6818      	ldr	r0, [r3, #0]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800caf4:	461a      	mov	r2, r3
 800caf6:	2101      	movs	r1, #1
 800caf8:	f005 f94c 	bl	8011d94 <USB_EP0_OutStart>
 800cafc:	e006      	b.n	800cb0c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	68da      	ldr	r2, [r3, #12]
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	695b      	ldr	r3, [r3, #20]
 800cb06:	441a      	add	r2, r3
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	b2db      	uxtb	r3, r3
 800cb10:	4619      	mov	r1, r3
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f00a fd7e 	bl	8017614 <HAL_PCD_DataOutStageCallback>
 800cb18:	e046      	b.n	800cba8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800cb1a:	697b      	ldr	r3, [r7, #20]
 800cb1c:	4a26      	ldr	r2, [pc, #152]	@ (800cbb8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800cb1e:	4293      	cmp	r3, r2
 800cb20:	d124      	bne.n	800cb6c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00a      	beq.n	800cb42 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	015a      	lsls	r2, r3, #5
 800cb30:	69bb      	ldr	r3, [r7, #24]
 800cb32:	4413      	add	r3, r2
 800cb34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb38:	461a      	mov	r2, r3
 800cb3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cb3e:	6093      	str	r3, [r2, #8]
 800cb40:	e032      	b.n	800cba8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800cb42:	693b      	ldr	r3, [r7, #16]
 800cb44:	f003 0320 	and.w	r3, r3, #32
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d008      	beq.n	800cb5e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	015a      	lsls	r2, r3, #5
 800cb50:	69bb      	ldr	r3, [r7, #24]
 800cb52:	4413      	add	r3, r2
 800cb54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cb58:	461a      	mov	r2, r3
 800cb5a:	2320      	movs	r3, #32
 800cb5c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	b2db      	uxtb	r3, r3
 800cb62:	4619      	mov	r1, r3
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f00a fd55 	bl	8017614 <HAL_PCD_DataOutStageCallback>
 800cb6a:	e01d      	b.n	800cba8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800cb6c:	683b      	ldr	r3, [r7, #0]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d114      	bne.n	800cb9c <PCD_EP_OutXfrComplete_int+0x1b0>
 800cb72:	6879      	ldr	r1, [r7, #4]
 800cb74:	683a      	ldr	r2, [r7, #0]
 800cb76:	4613      	mov	r3, r2
 800cb78:	00db      	lsls	r3, r3, #3
 800cb7a:	4413      	add	r3, r2
 800cb7c:	009b      	lsls	r3, r3, #2
 800cb7e:	440b      	add	r3, r1
 800cb80:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d108      	bne.n	800cb9c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6818      	ldr	r0, [r3, #0]
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cb94:	461a      	mov	r2, r3
 800cb96:	2100      	movs	r1, #0
 800cb98:	f005 f8fc 	bl	8011d94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800cb9c:	683b      	ldr	r3, [r7, #0]
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	4619      	mov	r1, r3
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	f00a fd36 	bl	8017614 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800cba8:	2300      	movs	r3, #0
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3720      	adds	r7, #32
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	bd80      	pop	{r7, pc}
 800cbb2:	bf00      	nop
 800cbb4:	4f54300a 	.word	0x4f54300a
 800cbb8:	4f54310a 	.word	0x4f54310a

0800cbbc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800cbd0:	697b      	ldr	r3, [r7, #20]
 800cbd2:	333c      	adds	r3, #60	@ 0x3c
 800cbd4:	3304      	adds	r3, #4
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800cbda:	683b      	ldr	r3, [r7, #0]
 800cbdc:	015a      	lsls	r2, r3, #5
 800cbde:	693b      	ldr	r3, [r7, #16]
 800cbe0:	4413      	add	r3, r2
 800cbe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cbe6:	689b      	ldr	r3, [r3, #8]
 800cbe8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	4a15      	ldr	r2, [pc, #84]	@ (800cc44 <PCD_EP_OutSetupPacket_int+0x88>)
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	d90e      	bls.n	800cc10 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800cbf2:	68bb      	ldr	r3, [r7, #8]
 800cbf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d009      	beq.n	800cc10 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800cbfc:	683b      	ldr	r3, [r7, #0]
 800cbfe:	015a      	lsls	r2, r3, #5
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	4413      	add	r3, r2
 800cc04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800cc08:	461a      	mov	r2, r3
 800cc0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800cc0e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f00a fced 	bl	80175f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4a0a      	ldr	r2, [pc, #40]	@ (800cc44 <PCD_EP_OutSetupPacket_int+0x88>)
 800cc1a:	4293      	cmp	r3, r2
 800cc1c:	d90c      	bls.n	800cc38 <PCD_EP_OutSetupPacket_int+0x7c>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	799b      	ldrb	r3, [r3, #6]
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d108      	bne.n	800cc38 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6818      	ldr	r0, [r3, #0]
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800cc30:	461a      	mov	r2, r3
 800cc32:	2101      	movs	r1, #1
 800cc34:	f005 f8ae 	bl	8011d94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800cc38:	2300      	movs	r3, #0
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	3718      	adds	r7, #24
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
 800cc42:	bf00      	nop
 800cc44:	4f54300a 	.word	0x4f54300a

0800cc48 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b085      	sub	sp, #20
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	460b      	mov	r3, r1
 800cc52:	70fb      	strb	r3, [r7, #3]
 800cc54:	4613      	mov	r3, r2
 800cc56:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	681b      	ldr	r3, [r3, #0]
 800cc5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc5e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800cc60:	78fb      	ldrb	r3, [r7, #3]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	d107      	bne.n	800cc76 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800cc66:	883b      	ldrh	r3, [r7, #0]
 800cc68:	0419      	lsls	r1, r3, #16
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	68ba      	ldr	r2, [r7, #8]
 800cc70:	430a      	orrs	r2, r1
 800cc72:	629a      	str	r2, [r3, #40]	@ 0x28
 800cc74:	e028      	b.n	800ccc8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc7c:	0c1b      	lsrs	r3, r3, #16
 800cc7e:	68ba      	ldr	r2, [r7, #8]
 800cc80:	4413      	add	r3, r2
 800cc82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cc84:	2300      	movs	r3, #0
 800cc86:	73fb      	strb	r3, [r7, #15]
 800cc88:	e00d      	b.n	800cca6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	7bfb      	ldrb	r3, [r7, #15]
 800cc90:	3340      	adds	r3, #64	@ 0x40
 800cc92:	009b      	lsls	r3, r3, #2
 800cc94:	4413      	add	r3, r2
 800cc96:	685b      	ldr	r3, [r3, #4]
 800cc98:	0c1b      	lsrs	r3, r3, #16
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	4413      	add	r3, r2
 800cc9e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800cca0:	7bfb      	ldrb	r3, [r7, #15]
 800cca2:	3301      	adds	r3, #1
 800cca4:	73fb      	strb	r3, [r7, #15]
 800cca6:	7bfa      	ldrb	r2, [r7, #15]
 800cca8:	78fb      	ldrb	r3, [r7, #3]
 800ccaa:	3b01      	subs	r3, #1
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d3ec      	bcc.n	800cc8a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800ccb0:	883b      	ldrh	r3, [r7, #0]
 800ccb2:	0418      	lsls	r0, r3, #16
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	6819      	ldr	r1, [r3, #0]
 800ccb8:	78fb      	ldrb	r3, [r7, #3]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	68ba      	ldr	r2, [r7, #8]
 800ccbe:	4302      	orrs	r2, r0
 800ccc0:	3340      	adds	r3, #64	@ 0x40
 800ccc2:	009b      	lsls	r3, r3, #2
 800ccc4:	440b      	add	r3, r1
 800ccc6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ccc8:	2300      	movs	r3, #0
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3714      	adds	r7, #20
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd4:	4770      	bx	lr

0800ccd6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800ccd6:	b480      	push	{r7}
 800ccd8:	b083      	sub	sp, #12
 800ccda:	af00      	add	r7, sp, #0
 800ccdc:	6078      	str	r0, [r7, #4]
 800ccde:	460b      	mov	r3, r1
 800cce0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	887a      	ldrh	r2, [r7, #2]
 800cce8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	370c      	adds	r7, #12
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccf6:	4770      	bx	lr

0800ccf8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800ccf8:	b480      	push	{r7}
 800ccfa:	b083      	sub	sp, #12
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	460b      	mov	r3, r1
 800cd02:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800cd04:	bf00      	nop
 800cd06:	370c      	adds	r7, #12
 800cd08:	46bd      	mov	sp, r7
 800cd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0e:	4770      	bx	lr

0800cd10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b086      	sub	sp, #24
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d101      	bne.n	800cd22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e267      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	f003 0301 	and.w	r3, r3, #1
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d075      	beq.n	800ce1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800cd2e:	4b88      	ldr	r3, [pc, #544]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	f003 030c 	and.w	r3, r3, #12
 800cd36:	2b04      	cmp	r3, #4
 800cd38:	d00c      	beq.n	800cd54 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd3a:	4b85      	ldr	r3, [pc, #532]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cd3c:	689b      	ldr	r3, [r3, #8]
 800cd3e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800cd42:	2b08      	cmp	r3, #8
 800cd44:	d112      	bne.n	800cd6c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800cd46:	4b82      	ldr	r3, [pc, #520]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cd48:	685b      	ldr	r3, [r3, #4]
 800cd4a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cd4e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800cd52:	d10b      	bne.n	800cd6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800cd54:	4b7e      	ldr	r3, [pc, #504]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d05b      	beq.n	800ce18 <HAL_RCC_OscConfig+0x108>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d157      	bne.n	800ce18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	e242      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	685b      	ldr	r3, [r3, #4]
 800cd70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800cd74:	d106      	bne.n	800cd84 <HAL_RCC_OscConfig+0x74>
 800cd76:	4b76      	ldr	r3, [pc, #472]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	4a75      	ldr	r2, [pc, #468]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cd7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cd80:	6013      	str	r3, [r2, #0]
 800cd82:	e01d      	b.n	800cdc0 <HAL_RCC_OscConfig+0xb0>
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	685b      	ldr	r3, [r3, #4]
 800cd88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800cd8c:	d10c      	bne.n	800cda8 <HAL_RCC_OscConfig+0x98>
 800cd8e:	4b70      	ldr	r3, [pc, #448]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	4a6f      	ldr	r2, [pc, #444]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cd94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800cd98:	6013      	str	r3, [r2, #0]
 800cd9a:	4b6d      	ldr	r3, [pc, #436]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	4a6c      	ldr	r2, [pc, #432]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cda0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800cda4:	6013      	str	r3, [r2, #0]
 800cda6:	e00b      	b.n	800cdc0 <HAL_RCC_OscConfig+0xb0>
 800cda8:	4b69      	ldr	r3, [pc, #420]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	4a68      	ldr	r2, [pc, #416]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cdae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cdb2:	6013      	str	r3, [r2, #0]
 800cdb4:	4b66      	ldr	r3, [pc, #408]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4a65      	ldr	r2, [pc, #404]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cdba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cdbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	685b      	ldr	r3, [r3, #4]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d013      	beq.n	800cdf0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cdc8:	f7fd fcfa 	bl	800a7c0 <HAL_GetTick>
 800cdcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cdce:	e008      	b.n	800cde2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cdd0:	f7fd fcf6 	bl	800a7c0 <HAL_GetTick>
 800cdd4:	4602      	mov	r2, r0
 800cdd6:	693b      	ldr	r3, [r7, #16]
 800cdd8:	1ad3      	subs	r3, r2, r3
 800cdda:	2b64      	cmp	r3, #100	@ 0x64
 800cddc:	d901      	bls.n	800cde2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800cdde:	2303      	movs	r3, #3
 800cde0:	e207      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800cde2:	4b5b      	ldr	r3, [pc, #364]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d0f0      	beq.n	800cdd0 <HAL_RCC_OscConfig+0xc0>
 800cdee:	e014      	b.n	800ce1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cdf0:	f7fd fce6 	bl	800a7c0 <HAL_GetTick>
 800cdf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800cdf6:	e008      	b.n	800ce0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800cdf8:	f7fd fce2 	bl	800a7c0 <HAL_GetTick>
 800cdfc:	4602      	mov	r2, r0
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	1ad3      	subs	r3, r2, r3
 800ce02:	2b64      	cmp	r3, #100	@ 0x64
 800ce04:	d901      	bls.n	800ce0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ce06:	2303      	movs	r3, #3
 800ce08:	e1f3      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ce0a:	4b51      	ldr	r3, [pc, #324]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1f0      	bne.n	800cdf8 <HAL_RCC_OscConfig+0xe8>
 800ce16:	e000      	b.n	800ce1a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ce18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f003 0302 	and.w	r3, r3, #2
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d063      	beq.n	800ceee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ce26:	4b4a      	ldr	r3, [pc, #296]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800ce28:	689b      	ldr	r3, [r3, #8]
 800ce2a:	f003 030c 	and.w	r3, r3, #12
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d00b      	beq.n	800ce4a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce32:	4b47      	ldr	r3, [pc, #284]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800ce34:	689b      	ldr	r3, [r3, #8]
 800ce36:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ce3a:	2b08      	cmp	r3, #8
 800ce3c:	d11c      	bne.n	800ce78 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ce3e:	4b44      	ldr	r3, [pc, #272]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800ce40:	685b      	ldr	r3, [r3, #4]
 800ce42:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d116      	bne.n	800ce78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce4a:	4b41      	ldr	r3, [pc, #260]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	f003 0302 	and.w	r3, r3, #2
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d005      	beq.n	800ce62 <HAL_RCC_OscConfig+0x152>
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	68db      	ldr	r3, [r3, #12]
 800ce5a:	2b01      	cmp	r3, #1
 800ce5c:	d001      	beq.n	800ce62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ce5e:	2301      	movs	r3, #1
 800ce60:	e1c7      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ce62:	4b3b      	ldr	r3, [pc, #236]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	691b      	ldr	r3, [r3, #16]
 800ce6e:	00db      	lsls	r3, r3, #3
 800ce70:	4937      	ldr	r1, [pc, #220]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800ce72:	4313      	orrs	r3, r2
 800ce74:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ce76:	e03a      	b.n	800ceee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	68db      	ldr	r3, [r3, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d020      	beq.n	800cec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ce80:	4b34      	ldr	r3, [pc, #208]	@ (800cf54 <HAL_RCC_OscConfig+0x244>)
 800ce82:	2201      	movs	r2, #1
 800ce84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ce86:	f7fd fc9b 	bl	800a7c0 <HAL_GetTick>
 800ce8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ce8c:	e008      	b.n	800cea0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ce8e:	f7fd fc97 	bl	800a7c0 <HAL_GetTick>
 800ce92:	4602      	mov	r2, r0
 800ce94:	693b      	ldr	r3, [r7, #16]
 800ce96:	1ad3      	subs	r3, r2, r3
 800ce98:	2b02      	cmp	r3, #2
 800ce9a:	d901      	bls.n	800cea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800ce9c:	2303      	movs	r3, #3
 800ce9e:	e1a8      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800cea0:	4b2b      	ldr	r3, [pc, #172]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	f003 0302 	and.w	r3, r3, #2
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d0f0      	beq.n	800ce8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ceac:	4b28      	ldr	r3, [pc, #160]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	691b      	ldr	r3, [r3, #16]
 800ceb8:	00db      	lsls	r3, r3, #3
 800ceba:	4925      	ldr	r1, [pc, #148]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cebc:	4313      	orrs	r3, r2
 800cebe:	600b      	str	r3, [r1, #0]
 800cec0:	e015      	b.n	800ceee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800cec2:	4b24      	ldr	r3, [pc, #144]	@ (800cf54 <HAL_RCC_OscConfig+0x244>)
 800cec4:	2200      	movs	r2, #0
 800cec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cec8:	f7fd fc7a 	bl	800a7c0 <HAL_GetTick>
 800cecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cece:	e008      	b.n	800cee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ced0:	f7fd fc76 	bl	800a7c0 <HAL_GetTick>
 800ced4:	4602      	mov	r2, r0
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	1ad3      	subs	r3, r2, r3
 800ceda:	2b02      	cmp	r3, #2
 800cedc:	d901      	bls.n	800cee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800cede:	2303      	movs	r3, #3
 800cee0:	e187      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800cee2:	4b1b      	ldr	r3, [pc, #108]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0302 	and.w	r3, r3, #2
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d1f0      	bne.n	800ced0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	f003 0308 	and.w	r3, r3, #8
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d036      	beq.n	800cf68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	695b      	ldr	r3, [r3, #20]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d016      	beq.n	800cf30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800cf02:	4b15      	ldr	r3, [pc, #84]	@ (800cf58 <HAL_RCC_OscConfig+0x248>)
 800cf04:	2201      	movs	r2, #1
 800cf06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800cf08:	f7fd fc5a 	bl	800a7c0 <HAL_GetTick>
 800cf0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cf0e:	e008      	b.n	800cf22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cf10:	f7fd fc56 	bl	800a7c0 <HAL_GetTick>
 800cf14:	4602      	mov	r2, r0
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	1ad3      	subs	r3, r2, r3
 800cf1a:	2b02      	cmp	r3, #2
 800cf1c:	d901      	bls.n	800cf22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800cf1e:	2303      	movs	r3, #3
 800cf20:	e167      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800cf22:	4b0b      	ldr	r3, [pc, #44]	@ (800cf50 <HAL_RCC_OscConfig+0x240>)
 800cf24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf26:	f003 0302 	and.w	r3, r3, #2
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d0f0      	beq.n	800cf10 <HAL_RCC_OscConfig+0x200>
 800cf2e:	e01b      	b.n	800cf68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800cf30:	4b09      	ldr	r3, [pc, #36]	@ (800cf58 <HAL_RCC_OscConfig+0x248>)
 800cf32:	2200      	movs	r2, #0
 800cf34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800cf36:	f7fd fc43 	bl	800a7c0 <HAL_GetTick>
 800cf3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf3c:	e00e      	b.n	800cf5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800cf3e:	f7fd fc3f 	bl	800a7c0 <HAL_GetTick>
 800cf42:	4602      	mov	r2, r0
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	1ad3      	subs	r3, r2, r3
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	d907      	bls.n	800cf5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800cf4c:	2303      	movs	r3, #3
 800cf4e:	e150      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
 800cf50:	40023800 	.word	0x40023800
 800cf54:	42470000 	.word	0x42470000
 800cf58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800cf5c:	4b88      	ldr	r3, [pc, #544]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800cf5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800cf60:	f003 0302 	and.w	r3, r3, #2
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1ea      	bne.n	800cf3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	f003 0304 	and.w	r3, r3, #4
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	f000 8097 	beq.w	800d0a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cf76:	2300      	movs	r3, #0
 800cf78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cf7a:	4b81      	ldr	r3, [pc, #516]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800cf7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10f      	bne.n	800cfa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cf86:	2300      	movs	r3, #0
 800cf88:	60bb      	str	r3, [r7, #8]
 800cf8a:	4b7d      	ldr	r3, [pc, #500]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800cf8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf8e:	4a7c      	ldr	r2, [pc, #496]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800cf90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800cf94:	6413      	str	r3, [r2, #64]	@ 0x40
 800cf96:	4b7a      	ldr	r3, [pc, #488]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800cf98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cf9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800cf9e:	60bb      	str	r3, [r7, #8]
 800cfa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfa6:	4b77      	ldr	r3, [pc, #476]	@ (800d184 <HAL_RCC_OscConfig+0x474>)
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d118      	bne.n	800cfe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cfb2:	4b74      	ldr	r3, [pc, #464]	@ (800d184 <HAL_RCC_OscConfig+0x474>)
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	4a73      	ldr	r2, [pc, #460]	@ (800d184 <HAL_RCC_OscConfig+0x474>)
 800cfb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800cfbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cfbe:	f7fd fbff 	bl	800a7c0 <HAL_GetTick>
 800cfc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfc4:	e008      	b.n	800cfd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cfc6:	f7fd fbfb 	bl	800a7c0 <HAL_GetTick>
 800cfca:	4602      	mov	r2, r0
 800cfcc:	693b      	ldr	r3, [r7, #16]
 800cfce:	1ad3      	subs	r3, r2, r3
 800cfd0:	2b02      	cmp	r3, #2
 800cfd2:	d901      	bls.n	800cfd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800cfd4:	2303      	movs	r3, #3
 800cfd6:	e10c      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cfd8:	4b6a      	ldr	r3, [pc, #424]	@ (800d184 <HAL_RCC_OscConfig+0x474>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d0f0      	beq.n	800cfc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	689b      	ldr	r3, [r3, #8]
 800cfe8:	2b01      	cmp	r3, #1
 800cfea:	d106      	bne.n	800cffa <HAL_RCC_OscConfig+0x2ea>
 800cfec:	4b64      	ldr	r3, [pc, #400]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800cfee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800cff0:	4a63      	ldr	r2, [pc, #396]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800cff2:	f043 0301 	orr.w	r3, r3, #1
 800cff6:	6713      	str	r3, [r2, #112]	@ 0x70
 800cff8:	e01c      	b.n	800d034 <HAL_RCC_OscConfig+0x324>
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	2b05      	cmp	r3, #5
 800d000:	d10c      	bne.n	800d01c <HAL_RCC_OscConfig+0x30c>
 800d002:	4b5f      	ldr	r3, [pc, #380]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d006:	4a5e      	ldr	r2, [pc, #376]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d008:	f043 0304 	orr.w	r3, r3, #4
 800d00c:	6713      	str	r3, [r2, #112]	@ 0x70
 800d00e:	4b5c      	ldr	r3, [pc, #368]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d012:	4a5b      	ldr	r2, [pc, #364]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d014:	f043 0301 	orr.w	r3, r3, #1
 800d018:	6713      	str	r3, [r2, #112]	@ 0x70
 800d01a:	e00b      	b.n	800d034 <HAL_RCC_OscConfig+0x324>
 800d01c:	4b58      	ldr	r3, [pc, #352]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d01e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d020:	4a57      	ldr	r2, [pc, #348]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d022:	f023 0301 	bic.w	r3, r3, #1
 800d026:	6713      	str	r3, [r2, #112]	@ 0x70
 800d028:	4b55      	ldr	r3, [pc, #340]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d02a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d02c:	4a54      	ldr	r2, [pc, #336]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d02e:	f023 0304 	bic.w	r3, r3, #4
 800d032:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	689b      	ldr	r3, [r3, #8]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d015      	beq.n	800d068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800d03c:	f7fd fbc0 	bl	800a7c0 <HAL_GetTick>
 800d040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d042:	e00a      	b.n	800d05a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d044:	f7fd fbbc 	bl	800a7c0 <HAL_GetTick>
 800d048:	4602      	mov	r2, r0
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	1ad3      	subs	r3, r2, r3
 800d04e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d052:	4293      	cmp	r3, r2
 800d054:	d901      	bls.n	800d05a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800d056:	2303      	movs	r3, #3
 800d058:	e0cb      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800d05a:	4b49      	ldr	r3, [pc, #292]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d05c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d05e:	f003 0302 	and.w	r3, r3, #2
 800d062:	2b00      	cmp	r3, #0
 800d064:	d0ee      	beq.n	800d044 <HAL_RCC_OscConfig+0x334>
 800d066:	e014      	b.n	800d092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800d068:	f7fd fbaa 	bl	800a7c0 <HAL_GetTick>
 800d06c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d06e:	e00a      	b.n	800d086 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d070:	f7fd fba6 	bl	800a7c0 <HAL_GetTick>
 800d074:	4602      	mov	r2, r0
 800d076:	693b      	ldr	r3, [r7, #16]
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d07e:	4293      	cmp	r3, r2
 800d080:	d901      	bls.n	800d086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800d082:	2303      	movs	r3, #3
 800d084:	e0b5      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800d086:	4b3e      	ldr	r3, [pc, #248]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d08a:	f003 0302 	and.w	r3, r3, #2
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d1ee      	bne.n	800d070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800d092:	7dfb      	ldrb	r3, [r7, #23]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d105      	bne.n	800d0a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d098:	4b39      	ldr	r3, [pc, #228]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d09a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d09c:	4a38      	ldr	r2, [pc, #224]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d09e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800d0a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	699b      	ldr	r3, [r3, #24]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	f000 80a1 	beq.w	800d1f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800d0ae:	4b34      	ldr	r3, [pc, #208]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d0b0:	689b      	ldr	r3, [r3, #8]
 800d0b2:	f003 030c 	and.w	r3, r3, #12
 800d0b6:	2b08      	cmp	r3, #8
 800d0b8:	d05c      	beq.n	800d174 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	699b      	ldr	r3, [r3, #24]
 800d0be:	2b02      	cmp	r3, #2
 800d0c0:	d141      	bne.n	800d146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d0c2:	4b31      	ldr	r3, [pc, #196]	@ (800d188 <HAL_RCC_OscConfig+0x478>)
 800d0c4:	2200      	movs	r2, #0
 800d0c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d0c8:	f7fd fb7a 	bl	800a7c0 <HAL_GetTick>
 800d0cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0ce:	e008      	b.n	800d0e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d0d0:	f7fd fb76 	bl	800a7c0 <HAL_GetTick>
 800d0d4:	4602      	mov	r2, r0
 800d0d6:	693b      	ldr	r3, [r7, #16]
 800d0d8:	1ad3      	subs	r3, r2, r3
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d901      	bls.n	800d0e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800d0de:	2303      	movs	r3, #3
 800d0e0:	e087      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d0e2:	4b27      	ldr	r3, [pc, #156]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d1f0      	bne.n	800d0d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	69da      	ldr	r2, [r3, #28]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6a1b      	ldr	r3, [r3, #32]
 800d0f6:	431a      	orrs	r2, r3
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0fc:	019b      	lsls	r3, r3, #6
 800d0fe:	431a      	orrs	r2, r3
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d104:	085b      	lsrs	r3, r3, #1
 800d106:	3b01      	subs	r3, #1
 800d108:	041b      	lsls	r3, r3, #16
 800d10a:	431a      	orrs	r2, r3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d110:	061b      	lsls	r3, r3, #24
 800d112:	491b      	ldr	r1, [pc, #108]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d114:	4313      	orrs	r3, r2
 800d116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800d118:	4b1b      	ldr	r3, [pc, #108]	@ (800d188 <HAL_RCC_OscConfig+0x478>)
 800d11a:	2201      	movs	r2, #1
 800d11c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d11e:	f7fd fb4f 	bl	800a7c0 <HAL_GetTick>
 800d122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d124:	e008      	b.n	800d138 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d126:	f7fd fb4b 	bl	800a7c0 <HAL_GetTick>
 800d12a:	4602      	mov	r2, r0
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	1ad3      	subs	r3, r2, r3
 800d130:	2b02      	cmp	r3, #2
 800d132:	d901      	bls.n	800d138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800d134:	2303      	movs	r3, #3
 800d136:	e05c      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d138:	4b11      	ldr	r3, [pc, #68]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d140:	2b00      	cmp	r3, #0
 800d142:	d0f0      	beq.n	800d126 <HAL_RCC_OscConfig+0x416>
 800d144:	e054      	b.n	800d1f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800d146:	4b10      	ldr	r3, [pc, #64]	@ (800d188 <HAL_RCC_OscConfig+0x478>)
 800d148:	2200      	movs	r2, #0
 800d14a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800d14c:	f7fd fb38 	bl	800a7c0 <HAL_GetTick>
 800d150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d152:	e008      	b.n	800d166 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800d154:	f7fd fb34 	bl	800a7c0 <HAL_GetTick>
 800d158:	4602      	mov	r2, r0
 800d15a:	693b      	ldr	r3, [r7, #16]
 800d15c:	1ad3      	subs	r3, r2, r3
 800d15e:	2b02      	cmp	r3, #2
 800d160:	d901      	bls.n	800d166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800d162:	2303      	movs	r3, #3
 800d164:	e045      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800d166:	4b06      	ldr	r3, [pc, #24]	@ (800d180 <HAL_RCC_OscConfig+0x470>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1f0      	bne.n	800d154 <HAL_RCC_OscConfig+0x444>
 800d172:	e03d      	b.n	800d1f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	699b      	ldr	r3, [r3, #24]
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d107      	bne.n	800d18c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	e038      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
 800d180:	40023800 	.word	0x40023800
 800d184:	40007000 	.word	0x40007000
 800d188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800d18c:	4b1b      	ldr	r3, [pc, #108]	@ (800d1fc <HAL_RCC_OscConfig+0x4ec>)
 800d18e:	685b      	ldr	r3, [r3, #4]
 800d190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	699b      	ldr	r3, [r3, #24]
 800d196:	2b01      	cmp	r3, #1
 800d198:	d028      	beq.n	800d1ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	d121      	bne.n	800d1ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800d1b2:	429a      	cmp	r2, r3
 800d1b4:	d11a      	bne.n	800d1ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d1b6:	68fa      	ldr	r2, [r7, #12]
 800d1b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800d1bc:	4013      	ands	r3, r2
 800d1be:	687a      	ldr	r2, [r7, #4]
 800d1c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800d1c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800d1c4:	4293      	cmp	r3, r2
 800d1c6:	d111      	bne.n	800d1ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1d2:	085b      	lsrs	r3, r3, #1
 800d1d4:	3b01      	subs	r3, #1
 800d1d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800d1d8:	429a      	cmp	r2, r3
 800d1da:	d107      	bne.n	800d1ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800d1e8:	429a      	cmp	r2, r3
 800d1ea:	d001      	beq.n	800d1f0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800d1ec:	2301      	movs	r3, #1
 800d1ee:	e000      	b.n	800d1f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3718      	adds	r7, #24
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}
 800d1fa:	bf00      	nop
 800d1fc:	40023800 	.word	0x40023800

0800d200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b084      	sub	sp, #16
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d101      	bne.n	800d214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800d210:	2301      	movs	r3, #1
 800d212:	e0cc      	b.n	800d3ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800d214:	4b68      	ldr	r3, [pc, #416]	@ (800d3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	f003 0307 	and.w	r3, r3, #7
 800d21c:	683a      	ldr	r2, [r7, #0]
 800d21e:	429a      	cmp	r2, r3
 800d220:	d90c      	bls.n	800d23c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d222:	4b65      	ldr	r3, [pc, #404]	@ (800d3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d224:	683a      	ldr	r2, [r7, #0]
 800d226:	b2d2      	uxtb	r2, r2
 800d228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d22a:	4b63      	ldr	r3, [pc, #396]	@ (800d3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f003 0307 	and.w	r3, r3, #7
 800d232:	683a      	ldr	r2, [r7, #0]
 800d234:	429a      	cmp	r2, r3
 800d236:	d001      	beq.n	800d23c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800d238:	2301      	movs	r3, #1
 800d23a:	e0b8      	b.n	800d3ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f003 0302 	and.w	r3, r3, #2
 800d244:	2b00      	cmp	r3, #0
 800d246:	d020      	beq.n	800d28a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	f003 0304 	and.w	r3, r3, #4
 800d250:	2b00      	cmp	r3, #0
 800d252:	d005      	beq.n	800d260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800d254:	4b59      	ldr	r3, [pc, #356]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d256:	689b      	ldr	r3, [r3, #8]
 800d258:	4a58      	ldr	r2, [pc, #352]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d25a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800d25e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	f003 0308 	and.w	r3, r3, #8
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d005      	beq.n	800d278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800d26c:	4b53      	ldr	r3, [pc, #332]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d26e:	689b      	ldr	r3, [r3, #8]
 800d270:	4a52      	ldr	r2, [pc, #328]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d272:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800d276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800d278:	4b50      	ldr	r3, [pc, #320]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d27a:	689b      	ldr	r3, [r3, #8]
 800d27c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	689b      	ldr	r3, [r3, #8]
 800d284:	494d      	ldr	r1, [pc, #308]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d286:	4313      	orrs	r3, r2
 800d288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	f003 0301 	and.w	r3, r3, #1
 800d292:	2b00      	cmp	r3, #0
 800d294:	d044      	beq.n	800d320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	685b      	ldr	r3, [r3, #4]
 800d29a:	2b01      	cmp	r3, #1
 800d29c:	d107      	bne.n	800d2ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800d29e:	4b47      	ldr	r3, [pc, #284]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d2a0:	681b      	ldr	r3, [r3, #0]
 800d2a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d119      	bne.n	800d2de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	e07f      	b.n	800d3ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	685b      	ldr	r3, [r3, #4]
 800d2b2:	2b02      	cmp	r3, #2
 800d2b4:	d003      	beq.n	800d2be <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800d2ba:	2b03      	cmp	r3, #3
 800d2bc:	d107      	bne.n	800d2ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800d2be:	4b3f      	ldr	r3, [pc, #252]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d109      	bne.n	800d2de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e06f      	b.n	800d3ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800d2ce:	4b3b      	ldr	r3, [pc, #236]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	f003 0302 	and.w	r3, r3, #2
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800d2da:	2301      	movs	r3, #1
 800d2dc:	e067      	b.n	800d3ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800d2de:	4b37      	ldr	r3, [pc, #220]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	f023 0203 	bic.w	r2, r3, #3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	685b      	ldr	r3, [r3, #4]
 800d2ea:	4934      	ldr	r1, [pc, #208]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d2ec:	4313      	orrs	r3, r2
 800d2ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800d2f0:	f7fd fa66 	bl	800a7c0 <HAL_GetTick>
 800d2f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d2f6:	e00a      	b.n	800d30e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800d2f8:	f7fd fa62 	bl	800a7c0 <HAL_GetTick>
 800d2fc:	4602      	mov	r2, r0
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	1ad3      	subs	r3, r2, r3
 800d302:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d306:	4293      	cmp	r3, r2
 800d308:	d901      	bls.n	800d30e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800d30a:	2303      	movs	r3, #3
 800d30c:	e04f      	b.n	800d3ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800d30e:	4b2b      	ldr	r3, [pc, #172]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d310:	689b      	ldr	r3, [r3, #8]
 800d312:	f003 020c 	and.w	r2, r3, #12
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	429a      	cmp	r2, r3
 800d31e:	d1eb      	bne.n	800d2f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800d320:	4b25      	ldr	r3, [pc, #148]	@ (800d3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	f003 0307 	and.w	r3, r3, #7
 800d328:	683a      	ldr	r2, [r7, #0]
 800d32a:	429a      	cmp	r2, r3
 800d32c:	d20c      	bcs.n	800d348 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800d32e:	4b22      	ldr	r3, [pc, #136]	@ (800d3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d330:	683a      	ldr	r2, [r7, #0]
 800d332:	b2d2      	uxtb	r2, r2
 800d334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800d336:	4b20      	ldr	r3, [pc, #128]	@ (800d3b8 <HAL_RCC_ClockConfig+0x1b8>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f003 0307 	and.w	r3, r3, #7
 800d33e:	683a      	ldr	r2, [r7, #0]
 800d340:	429a      	cmp	r2, r3
 800d342:	d001      	beq.n	800d348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800d344:	2301      	movs	r3, #1
 800d346:	e032      	b.n	800d3ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	f003 0304 	and.w	r3, r3, #4
 800d350:	2b00      	cmp	r3, #0
 800d352:	d008      	beq.n	800d366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800d354:	4b19      	ldr	r3, [pc, #100]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d356:	689b      	ldr	r3, [r3, #8]
 800d358:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	68db      	ldr	r3, [r3, #12]
 800d360:	4916      	ldr	r1, [pc, #88]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d362:	4313      	orrs	r3, r2
 800d364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	f003 0308 	and.w	r3, r3, #8
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d009      	beq.n	800d386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800d372:	4b12      	ldr	r3, [pc, #72]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d374:	689b      	ldr	r3, [r3, #8]
 800d376:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	691b      	ldr	r3, [r3, #16]
 800d37e:	00db      	lsls	r3, r3, #3
 800d380:	490e      	ldr	r1, [pc, #56]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d382:	4313      	orrs	r3, r2
 800d384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800d386:	f000 f821 	bl	800d3cc <HAL_RCC_GetSysClockFreq>
 800d38a:	4602      	mov	r2, r0
 800d38c:	4b0b      	ldr	r3, [pc, #44]	@ (800d3bc <HAL_RCC_ClockConfig+0x1bc>)
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	091b      	lsrs	r3, r3, #4
 800d392:	f003 030f 	and.w	r3, r3, #15
 800d396:	490a      	ldr	r1, [pc, #40]	@ (800d3c0 <HAL_RCC_ClockConfig+0x1c0>)
 800d398:	5ccb      	ldrb	r3, [r1, r3]
 800d39a:	fa22 f303 	lsr.w	r3, r2, r3
 800d39e:	4a09      	ldr	r2, [pc, #36]	@ (800d3c4 <HAL_RCC_ClockConfig+0x1c4>)
 800d3a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800d3a2:	4b09      	ldr	r3, [pc, #36]	@ (800d3c8 <HAL_RCC_ClockConfig+0x1c8>)
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fc fa3e 	bl	8009828 <HAL_InitTick>

  return HAL_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	40023c00 	.word	0x40023c00
 800d3bc:	40023800 	.word	0x40023800
 800d3c0:	080206d4 	.word	0x080206d4
 800d3c4:	20000054 	.word	0x20000054
 800d3c8:	20000058 	.word	0x20000058

0800d3cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800d3cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d3d0:	b094      	sub	sp, #80	@ 0x50
 800d3d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800d3e4:	4b79      	ldr	r3, [pc, #484]	@ (800d5cc <HAL_RCC_GetSysClockFreq+0x200>)
 800d3e6:	689b      	ldr	r3, [r3, #8]
 800d3e8:	f003 030c 	and.w	r3, r3, #12
 800d3ec:	2b08      	cmp	r3, #8
 800d3ee:	d00d      	beq.n	800d40c <HAL_RCC_GetSysClockFreq+0x40>
 800d3f0:	2b08      	cmp	r3, #8
 800d3f2:	f200 80e1 	bhi.w	800d5b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d002      	beq.n	800d400 <HAL_RCC_GetSysClockFreq+0x34>
 800d3fa:	2b04      	cmp	r3, #4
 800d3fc:	d003      	beq.n	800d406 <HAL_RCC_GetSysClockFreq+0x3a>
 800d3fe:	e0db      	b.n	800d5b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800d400:	4b73      	ldr	r3, [pc, #460]	@ (800d5d0 <HAL_RCC_GetSysClockFreq+0x204>)
 800d402:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d404:	e0db      	b.n	800d5be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800d406:	4b73      	ldr	r3, [pc, #460]	@ (800d5d4 <HAL_RCC_GetSysClockFreq+0x208>)
 800d408:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d40a:	e0d8      	b.n	800d5be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800d40c:	4b6f      	ldr	r3, [pc, #444]	@ (800d5cc <HAL_RCC_GetSysClockFreq+0x200>)
 800d40e:	685b      	ldr	r3, [r3, #4]
 800d410:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d414:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800d416:	4b6d      	ldr	r3, [pc, #436]	@ (800d5cc <HAL_RCC_GetSysClockFreq+0x200>)
 800d418:	685b      	ldr	r3, [r3, #4]
 800d41a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d063      	beq.n	800d4ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d422:	4b6a      	ldr	r3, [pc, #424]	@ (800d5cc <HAL_RCC_GetSysClockFreq+0x200>)
 800d424:	685b      	ldr	r3, [r3, #4]
 800d426:	099b      	lsrs	r3, r3, #6
 800d428:	2200      	movs	r2, #0
 800d42a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d42c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800d42e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d434:	633b      	str	r3, [r7, #48]	@ 0x30
 800d436:	2300      	movs	r3, #0
 800d438:	637b      	str	r3, [r7, #52]	@ 0x34
 800d43a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800d43e:	4622      	mov	r2, r4
 800d440:	462b      	mov	r3, r5
 800d442:	f04f 0000 	mov.w	r0, #0
 800d446:	f04f 0100 	mov.w	r1, #0
 800d44a:	0159      	lsls	r1, r3, #5
 800d44c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d450:	0150      	lsls	r0, r2, #5
 800d452:	4602      	mov	r2, r0
 800d454:	460b      	mov	r3, r1
 800d456:	4621      	mov	r1, r4
 800d458:	1a51      	subs	r1, r2, r1
 800d45a:	6139      	str	r1, [r7, #16]
 800d45c:	4629      	mov	r1, r5
 800d45e:	eb63 0301 	sbc.w	r3, r3, r1
 800d462:	617b      	str	r3, [r7, #20]
 800d464:	f04f 0200 	mov.w	r2, #0
 800d468:	f04f 0300 	mov.w	r3, #0
 800d46c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d470:	4659      	mov	r1, fp
 800d472:	018b      	lsls	r3, r1, #6
 800d474:	4651      	mov	r1, sl
 800d476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800d47a:	4651      	mov	r1, sl
 800d47c:	018a      	lsls	r2, r1, #6
 800d47e:	4651      	mov	r1, sl
 800d480:	ebb2 0801 	subs.w	r8, r2, r1
 800d484:	4659      	mov	r1, fp
 800d486:	eb63 0901 	sbc.w	r9, r3, r1
 800d48a:	f04f 0200 	mov.w	r2, #0
 800d48e:	f04f 0300 	mov.w	r3, #0
 800d492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800d496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800d49a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800d49e:	4690      	mov	r8, r2
 800d4a0:	4699      	mov	r9, r3
 800d4a2:	4623      	mov	r3, r4
 800d4a4:	eb18 0303 	adds.w	r3, r8, r3
 800d4a8:	60bb      	str	r3, [r7, #8]
 800d4aa:	462b      	mov	r3, r5
 800d4ac:	eb49 0303 	adc.w	r3, r9, r3
 800d4b0:	60fb      	str	r3, [r7, #12]
 800d4b2:	f04f 0200 	mov.w	r2, #0
 800d4b6:	f04f 0300 	mov.w	r3, #0
 800d4ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800d4be:	4629      	mov	r1, r5
 800d4c0:	024b      	lsls	r3, r1, #9
 800d4c2:	4621      	mov	r1, r4
 800d4c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800d4c8:	4621      	mov	r1, r4
 800d4ca:	024a      	lsls	r2, r1, #9
 800d4cc:	4610      	mov	r0, r2
 800d4ce:	4619      	mov	r1, r3
 800d4d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d4d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800d4d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d4dc:	f7f3 fbd4 	bl	8000c88 <__aeabi_uldivmod>
 800d4e0:	4602      	mov	r2, r0
 800d4e2:	460b      	mov	r3, r1
 800d4e4:	4613      	mov	r3, r2
 800d4e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d4e8:	e058      	b.n	800d59c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800d4ea:	4b38      	ldr	r3, [pc, #224]	@ (800d5cc <HAL_RCC_GetSysClockFreq+0x200>)
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	099b      	lsrs	r3, r3, #6
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	4611      	mov	r1, r2
 800d4f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800d4fa:	623b      	str	r3, [r7, #32]
 800d4fc:	2300      	movs	r3, #0
 800d4fe:	627b      	str	r3, [r7, #36]	@ 0x24
 800d500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800d504:	4642      	mov	r2, r8
 800d506:	464b      	mov	r3, r9
 800d508:	f04f 0000 	mov.w	r0, #0
 800d50c:	f04f 0100 	mov.w	r1, #0
 800d510:	0159      	lsls	r1, r3, #5
 800d512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800d516:	0150      	lsls	r0, r2, #5
 800d518:	4602      	mov	r2, r0
 800d51a:	460b      	mov	r3, r1
 800d51c:	4641      	mov	r1, r8
 800d51e:	ebb2 0a01 	subs.w	sl, r2, r1
 800d522:	4649      	mov	r1, r9
 800d524:	eb63 0b01 	sbc.w	fp, r3, r1
 800d528:	f04f 0200 	mov.w	r2, #0
 800d52c:	f04f 0300 	mov.w	r3, #0
 800d530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800d534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800d538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800d53c:	ebb2 040a 	subs.w	r4, r2, sl
 800d540:	eb63 050b 	sbc.w	r5, r3, fp
 800d544:	f04f 0200 	mov.w	r2, #0
 800d548:	f04f 0300 	mov.w	r3, #0
 800d54c:	00eb      	lsls	r3, r5, #3
 800d54e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d552:	00e2      	lsls	r2, r4, #3
 800d554:	4614      	mov	r4, r2
 800d556:	461d      	mov	r5, r3
 800d558:	4643      	mov	r3, r8
 800d55a:	18e3      	adds	r3, r4, r3
 800d55c:	603b      	str	r3, [r7, #0]
 800d55e:	464b      	mov	r3, r9
 800d560:	eb45 0303 	adc.w	r3, r5, r3
 800d564:	607b      	str	r3, [r7, #4]
 800d566:	f04f 0200 	mov.w	r2, #0
 800d56a:	f04f 0300 	mov.w	r3, #0
 800d56e:	e9d7 4500 	ldrd	r4, r5, [r7]
 800d572:	4629      	mov	r1, r5
 800d574:	028b      	lsls	r3, r1, #10
 800d576:	4621      	mov	r1, r4
 800d578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800d57c:	4621      	mov	r1, r4
 800d57e:	028a      	lsls	r2, r1, #10
 800d580:	4610      	mov	r0, r2
 800d582:	4619      	mov	r1, r3
 800d584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d586:	2200      	movs	r2, #0
 800d588:	61bb      	str	r3, [r7, #24]
 800d58a:	61fa      	str	r2, [r7, #28]
 800d58c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d590:	f7f3 fb7a 	bl	8000c88 <__aeabi_uldivmod>
 800d594:	4602      	mov	r2, r0
 800d596:	460b      	mov	r3, r1
 800d598:	4613      	mov	r3, r2
 800d59a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800d59c:	4b0b      	ldr	r3, [pc, #44]	@ (800d5cc <HAL_RCC_GetSysClockFreq+0x200>)
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	0c1b      	lsrs	r3, r3, #16
 800d5a2:	f003 0303 	and.w	r3, r3, #3
 800d5a6:	3301      	adds	r3, #1
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800d5ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d5ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d5b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d5b6:	e002      	b.n	800d5be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800d5b8:	4b05      	ldr	r3, [pc, #20]	@ (800d5d0 <HAL_RCC_GetSysClockFreq+0x204>)
 800d5ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800d5bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800d5be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	3750      	adds	r7, #80	@ 0x50
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d5ca:	bf00      	nop
 800d5cc:	40023800 	.word	0x40023800
 800d5d0:	00f42400 	.word	0x00f42400
 800d5d4:	007a1200 	.word	0x007a1200

0800d5d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d5d8:	b480      	push	{r7}
 800d5da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800d5dc:	4b03      	ldr	r3, [pc, #12]	@ (800d5ec <HAL_RCC_GetHCLKFreq+0x14>)
 800d5de:	681b      	ldr	r3, [r3, #0]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr
 800d5ea:	bf00      	nop
 800d5ec:	20000054 	.word	0x20000054

0800d5f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800d5f4:	f7ff fff0 	bl	800d5d8 <HAL_RCC_GetHCLKFreq>
 800d5f8:	4602      	mov	r2, r0
 800d5fa:	4b05      	ldr	r3, [pc, #20]	@ (800d610 <HAL_RCC_GetPCLK1Freq+0x20>)
 800d5fc:	689b      	ldr	r3, [r3, #8]
 800d5fe:	0a9b      	lsrs	r3, r3, #10
 800d600:	f003 0307 	and.w	r3, r3, #7
 800d604:	4903      	ldr	r1, [pc, #12]	@ (800d614 <HAL_RCC_GetPCLK1Freq+0x24>)
 800d606:	5ccb      	ldrb	r3, [r1, r3]
 800d608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	40023800 	.word	0x40023800
 800d614:	080206e4 	.word	0x080206e4

0800d618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800d61c:	f7ff ffdc 	bl	800d5d8 <HAL_RCC_GetHCLKFreq>
 800d620:	4602      	mov	r2, r0
 800d622:	4b05      	ldr	r3, [pc, #20]	@ (800d638 <HAL_RCC_GetPCLK2Freq+0x20>)
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	0b5b      	lsrs	r3, r3, #13
 800d628:	f003 0307 	and.w	r3, r3, #7
 800d62c:	4903      	ldr	r1, [pc, #12]	@ (800d63c <HAL_RCC_GetPCLK2Freq+0x24>)
 800d62e:	5ccb      	ldrb	r3, [r1, r3]
 800d630:	fa22 f303 	lsr.w	r3, r2, r3
}
 800d634:	4618      	mov	r0, r3
 800d636:	bd80      	pop	{r7, pc}
 800d638:	40023800 	.word	0x40023800
 800d63c:	080206e4 	.word	0x080206e4

0800d640 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800d640:	b480      	push	{r7}
 800d642:	b083      	sub	sp, #12
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	220f      	movs	r2, #15
 800d64e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800d650:	4b12      	ldr	r3, [pc, #72]	@ (800d69c <HAL_RCC_GetClockConfig+0x5c>)
 800d652:	689b      	ldr	r3, [r3, #8]
 800d654:	f003 0203 	and.w	r2, r3, #3
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800d65c:	4b0f      	ldr	r3, [pc, #60]	@ (800d69c <HAL_RCC_GetClockConfig+0x5c>)
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800d668:	4b0c      	ldr	r3, [pc, #48]	@ (800d69c <HAL_RCC_GetClockConfig+0x5c>)
 800d66a:	689b      	ldr	r3, [r3, #8]
 800d66c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800d674:	4b09      	ldr	r3, [pc, #36]	@ (800d69c <HAL_RCC_GetClockConfig+0x5c>)
 800d676:	689b      	ldr	r3, [r3, #8]
 800d678:	08db      	lsrs	r3, r3, #3
 800d67a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800d682:	4b07      	ldr	r3, [pc, #28]	@ (800d6a0 <HAL_RCC_GetClockConfig+0x60>)
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f003 0207 	and.w	r2, r3, #7
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	601a      	str	r2, [r3, #0]
}
 800d68e:	bf00      	nop
 800d690:	370c      	adds	r7, #12
 800d692:	46bd      	mov	sp, r7
 800d694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d698:	4770      	bx	lr
 800d69a:	bf00      	nop
 800d69c:	40023800 	.word	0x40023800
 800d6a0:	40023c00 	.word	0x40023c00

0800d6a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d6a4:	b580      	push	{r7, lr}
 800d6a6:	b082      	sub	sp, #8
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d101      	bne.n	800d6b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	e07b      	b.n	800d7ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d108      	bne.n	800d6d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d6c6:	d009      	beq.n	800d6dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	2200      	movs	r2, #0
 800d6cc:	61da      	str	r2, [r3, #28]
 800d6ce:	e005      	b.n	800d6dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2200      	movs	r2, #0
 800d6da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d6dc:	687b      	ldr	r3, [r7, #4]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d6e8:	b2db      	uxtb	r3, r3
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d106      	bne.n	800d6fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f7fc f822 	bl	8009740 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	2202      	movs	r2, #2
 800d700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	681a      	ldr	r2, [r3, #0]
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d712:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	685b      	ldr	r3, [r3, #4]
 800d718:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800d724:	431a      	orrs	r2, r3
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	68db      	ldr	r3, [r3, #12]
 800d72a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800d72e:	431a      	orrs	r2, r3
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	691b      	ldr	r3, [r3, #16]
 800d734:	f003 0302 	and.w	r3, r3, #2
 800d738:	431a      	orrs	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	695b      	ldr	r3, [r3, #20]
 800d73e:	f003 0301 	and.w	r3, r3, #1
 800d742:	431a      	orrs	r2, r3
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	699b      	ldr	r3, [r3, #24]
 800d748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800d74c:	431a      	orrs	r2, r3
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	69db      	ldr	r3, [r3, #28]
 800d752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d756:	431a      	orrs	r2, r3
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	6a1b      	ldr	r3, [r3, #32]
 800d75c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d760:	ea42 0103 	orr.w	r1, r2, r3
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d768:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	430a      	orrs	r2, r1
 800d772:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	0c1b      	lsrs	r3, r3, #16
 800d77a:	f003 0104 	and.w	r1, r3, #4
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d782:	f003 0210 	and.w	r2, r3, #16
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	430a      	orrs	r2, r1
 800d78c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	69da      	ldr	r2, [r3, #28]
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d79c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800d7ac:	2300      	movs	r3, #0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b088      	sub	sp, #32
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	60f8      	str	r0, [r7, #12]
 800d7be:	60b9      	str	r1, [r7, #8]
 800d7c0:	603b      	str	r3, [r7, #0]
 800d7c2:	4613      	mov	r3, r2
 800d7c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d7c6:	f7fc fffb 	bl	800a7c0 <HAL_GetTick>
 800d7ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800d7cc:	88fb      	ldrh	r3, [r7, #6]
 800d7ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d7d0:	68fb      	ldr	r3, [r7, #12]
 800d7d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800d7d6:	b2db      	uxtb	r3, r3
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d001      	beq.n	800d7e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800d7dc:	2302      	movs	r3, #2
 800d7de:	e12a      	b.n	800da36 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d002      	beq.n	800d7ec <HAL_SPI_Transmit+0x36>
 800d7e6:	88fb      	ldrh	r3, [r7, #6]
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d101      	bne.n	800d7f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	e122      	b.n	800da36 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800d7f6:	2b01      	cmp	r3, #1
 800d7f8:	d101      	bne.n	800d7fe <HAL_SPI_Transmit+0x48>
 800d7fa:	2302      	movs	r3, #2
 800d7fc:	e11b      	b.n	800da36 <HAL_SPI_Transmit+0x280>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2201      	movs	r2, #1
 800d802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	2203      	movs	r2, #3
 800d80a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	2200      	movs	r2, #0
 800d812:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	88fa      	ldrh	r2, [r7, #6]
 800d81e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	88fa      	ldrh	r2, [r7, #6]
 800d824:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	2200      	movs	r2, #0
 800d82a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800d82c:	68fb      	ldr	r3, [r7, #12]
 800d82e:	2200      	movs	r2, #0
 800d830:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2200      	movs	r2, #0
 800d836:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	2200      	movs	r2, #0
 800d83c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	2200      	movs	r2, #0
 800d842:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	689b      	ldr	r3, [r3, #8]
 800d848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d84c:	d10f      	bne.n	800d86e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d85c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	681a      	ldr	r2, [r3, #0]
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800d86c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d878:	2b40      	cmp	r3, #64	@ 0x40
 800d87a:	d007      	beq.n	800d88c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	681a      	ldr	r2, [r3, #0]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d88a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d894:	d152      	bne.n	800d93c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d002      	beq.n	800d8a4 <HAL_SPI_Transmit+0xee>
 800d89e:	8b7b      	ldrh	r3, [r7, #26]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d145      	bne.n	800d930 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8a8:	881a      	ldrh	r2, [r3, #0]
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8b4:	1c9a      	adds	r2, r3, #2
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d8be:	b29b      	uxth	r3, r3
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	b29a      	uxth	r2, r3
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800d8c8:	e032      	b.n	800d930 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	689b      	ldr	r3, [r3, #8]
 800d8d0:	f003 0302 	and.w	r3, r3, #2
 800d8d4:	2b02      	cmp	r3, #2
 800d8d6:	d112      	bne.n	800d8fe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8dc:	881a      	ldrh	r2, [r3, #0]
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d8e8:	1c9a      	adds	r2, r3, #2
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d8fc:	e018      	b.n	800d930 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d8fe:	f7fc ff5f 	bl	800a7c0 <HAL_GetTick>
 800d902:	4602      	mov	r2, r0
 800d904:	69fb      	ldr	r3, [r7, #28]
 800d906:	1ad3      	subs	r3, r2, r3
 800d908:	683a      	ldr	r2, [r7, #0]
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d803      	bhi.n	800d916 <HAL_SPI_Transmit+0x160>
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d914:	d102      	bne.n	800d91c <HAL_SPI_Transmit+0x166>
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	d109      	bne.n	800d930 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2201      	movs	r2, #1
 800d920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	2200      	movs	r2, #0
 800d928:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d92c:	2303      	movs	r3, #3
 800d92e:	e082      	b.n	800da36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d934:	b29b      	uxth	r3, r3
 800d936:	2b00      	cmp	r3, #0
 800d938:	d1c7      	bne.n	800d8ca <HAL_SPI_Transmit+0x114>
 800d93a:	e053      	b.n	800d9e4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d002      	beq.n	800d94a <HAL_SPI_Transmit+0x194>
 800d944:	8b7b      	ldrh	r3, [r7, #26]
 800d946:	2b01      	cmp	r3, #1
 800d948:	d147      	bne.n	800d9da <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	330c      	adds	r3, #12
 800d954:	7812      	ldrb	r2, [r2, #0]
 800d956:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d95c:	1c5a      	adds	r2, r3, #1
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d966:	b29b      	uxth	r3, r3
 800d968:	3b01      	subs	r3, #1
 800d96a:	b29a      	uxth	r2, r3
 800d96c:	68fb      	ldr	r3, [r7, #12]
 800d96e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800d970:	e033      	b.n	800d9da <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	689b      	ldr	r3, [r3, #8]
 800d978:	f003 0302 	and.w	r3, r3, #2
 800d97c:	2b02      	cmp	r3, #2
 800d97e:	d113      	bne.n	800d9a8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	330c      	adds	r3, #12
 800d98a:	7812      	ldrb	r2, [r2, #0]
 800d98c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d992:	1c5a      	adds	r2, r3, #1
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d99c:	b29b      	uxth	r3, r3
 800d99e:	3b01      	subs	r3, #1
 800d9a0:	b29a      	uxth	r2, r3
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 800d9a6:	e018      	b.n	800d9da <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d9a8:	f7fc ff0a 	bl	800a7c0 <HAL_GetTick>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	69fb      	ldr	r3, [r7, #28]
 800d9b0:	1ad3      	subs	r3, r2, r3
 800d9b2:	683a      	ldr	r2, [r7, #0]
 800d9b4:	429a      	cmp	r2, r3
 800d9b6:	d803      	bhi.n	800d9c0 <HAL_SPI_Transmit+0x20a>
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9be:	d102      	bne.n	800d9c6 <HAL_SPI_Transmit+0x210>
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d109      	bne.n	800d9da <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2201      	movs	r2, #1
 800d9ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800d9d6:	2303      	movs	r3, #3
 800d9d8:	e02d      	b.n	800da36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800d9de:	b29b      	uxth	r3, r3
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d1c6      	bne.n	800d972 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800d9e4:	69fa      	ldr	r2, [r7, #28]
 800d9e6:	6839      	ldr	r1, [r7, #0]
 800d9e8:	68f8      	ldr	r0, [r7, #12]
 800d9ea:	f000 fbd9 	bl	800e1a0 <SPI_EndRxTxTransaction>
 800d9ee:	4603      	mov	r3, r0
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d002      	beq.n	800d9fa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2220      	movs	r2, #32
 800d9f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	689b      	ldr	r3, [r3, #8]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d10a      	bne.n	800da18 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800da02:	2300      	movs	r3, #0
 800da04:	617b      	str	r3, [r7, #20]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	68db      	ldr	r3, [r3, #12]
 800da0c:	617b      	str	r3, [r7, #20]
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	689b      	ldr	r3, [r3, #8]
 800da14:	617b      	str	r3, [r7, #20]
 800da16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2200      	movs	r2, #0
 800da24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d001      	beq.n	800da34 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800da30:	2301      	movs	r3, #1
 800da32:	e000      	b.n	800da36 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800da34:	2300      	movs	r3, #0
  }
}
 800da36:	4618      	mov	r0, r3
 800da38:	3720      	adds	r7, #32
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}

0800da3e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800da3e:	b580      	push	{r7, lr}
 800da40:	b088      	sub	sp, #32
 800da42:	af02      	add	r7, sp, #8
 800da44:	60f8      	str	r0, [r7, #12]
 800da46:	60b9      	str	r1, [r7, #8]
 800da48:	603b      	str	r3, [r7, #0]
 800da4a:	4613      	mov	r3, r2
 800da4c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800da54:	b2db      	uxtb	r3, r3
 800da56:	2b01      	cmp	r3, #1
 800da58:	d001      	beq.n	800da5e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800da5a:	2302      	movs	r3, #2
 800da5c:	e104      	b.n	800dc68 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800da66:	d112      	bne.n	800da8e <HAL_SPI_Receive+0x50>
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	689b      	ldr	r3, [r3, #8]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10e      	bne.n	800da8e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	2204      	movs	r2, #4
 800da74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800da78:	88fa      	ldrh	r2, [r7, #6]
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	4613      	mov	r3, r2
 800da80:	68ba      	ldr	r2, [r7, #8]
 800da82:	68b9      	ldr	r1, [r7, #8]
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f000 f8f3 	bl	800dc70 <HAL_SPI_TransmitReceive>
 800da8a:	4603      	mov	r3, r0
 800da8c:	e0ec      	b.n	800dc68 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800da8e:	f7fc fe97 	bl	800a7c0 <HAL_GetTick>
 800da92:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d002      	beq.n	800daa0 <HAL_SPI_Receive+0x62>
 800da9a:	88fb      	ldrh	r3, [r7, #6]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d101      	bne.n	800daa4 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800daa0:	2301      	movs	r3, #1
 800daa2:	e0e1      	b.n	800dc68 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800daaa:	2b01      	cmp	r3, #1
 800daac:	d101      	bne.n	800dab2 <HAL_SPI_Receive+0x74>
 800daae:	2302      	movs	r3, #2
 800dab0:	e0da      	b.n	800dc68 <HAL_SPI_Receive+0x22a>
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	2201      	movs	r2, #1
 800dab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2204      	movs	r2, #4
 800dabe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2200      	movs	r2, #0
 800dac6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	68ba      	ldr	r2, [r7, #8]
 800dacc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	88fa      	ldrh	r2, [r7, #6]
 800dad2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	88fa      	ldrh	r2, [r7, #6]
 800dad8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	2200      	movs	r2, #0
 800dade:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	2200      	movs	r2, #0
 800dae4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	2200      	movs	r2, #0
 800daea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2200      	movs	r2, #0
 800daf0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	2200      	movs	r2, #0
 800daf6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	689b      	ldr	r3, [r3, #8]
 800dafc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800db00:	d10f      	bne.n	800db22 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	681a      	ldr	r2, [r3, #0]
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800db10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800db20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	681b      	ldr	r3, [r3, #0]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800db2c:	2b40      	cmp	r3, #64	@ 0x40
 800db2e:	d007      	beq.n	800db40 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	681a      	ldr	r2, [r3, #0]
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800db3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	68db      	ldr	r3, [r3, #12]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d170      	bne.n	800dc2a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800db48:	e035      	b.n	800dbb6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	689b      	ldr	r3, [r3, #8]
 800db50:	f003 0301 	and.w	r3, r3, #1
 800db54:	2b01      	cmp	r3, #1
 800db56:	d115      	bne.n	800db84 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	f103 020c 	add.w	r2, r3, #12
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db64:	7812      	ldrb	r2, [r2, #0]
 800db66:	b2d2      	uxtb	r2, r2
 800db68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db6e:	1c5a      	adds	r2, r3, #1
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800db78:	b29b      	uxth	r3, r3
 800db7a:	3b01      	subs	r3, #1
 800db7c:	b29a      	uxth	r2, r3
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800db82:	e018      	b.n	800dbb6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800db84:	f7fc fe1c 	bl	800a7c0 <HAL_GetTick>
 800db88:	4602      	mov	r2, r0
 800db8a:	697b      	ldr	r3, [r7, #20]
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	683a      	ldr	r2, [r7, #0]
 800db90:	429a      	cmp	r2, r3
 800db92:	d803      	bhi.n	800db9c <HAL_SPI_Receive+0x15e>
 800db94:	683b      	ldr	r3, [r7, #0]
 800db96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db9a:	d102      	bne.n	800dba2 <HAL_SPI_Receive+0x164>
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d109      	bne.n	800dbb6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2201      	movs	r2, #1
 800dba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800dbaa:	68fb      	ldr	r3, [r7, #12]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800dbb2:	2303      	movs	r3, #3
 800dbb4:	e058      	b.n	800dc68 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dbba:	b29b      	uxth	r3, r3
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d1c4      	bne.n	800db4a <HAL_SPI_Receive+0x10c>
 800dbc0:	e038      	b.n	800dc34 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	689b      	ldr	r3, [r3, #8]
 800dbc8:	f003 0301 	and.w	r3, r3, #1
 800dbcc:	2b01      	cmp	r3, #1
 800dbce:	d113      	bne.n	800dbf8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	68da      	ldr	r2, [r3, #12]
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbda:	b292      	uxth	r2, r2
 800dbdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dbde:	68fb      	ldr	r3, [r7, #12]
 800dbe0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dbe2:	1c9a      	adds	r2, r3, #2
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dbec:	b29b      	uxth	r3, r3
 800dbee:	3b01      	subs	r3, #1
 800dbf0:	b29a      	uxth	r2, r3
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800dbf6:	e018      	b.n	800dc2a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dbf8:	f7fc fde2 	bl	800a7c0 <HAL_GetTick>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	697b      	ldr	r3, [r7, #20]
 800dc00:	1ad3      	subs	r3, r2, r3
 800dc02:	683a      	ldr	r2, [r7, #0]
 800dc04:	429a      	cmp	r2, r3
 800dc06:	d803      	bhi.n	800dc10 <HAL_SPI_Receive+0x1d2>
 800dc08:	683b      	ldr	r3, [r7, #0]
 800dc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc0e:	d102      	bne.n	800dc16 <HAL_SPI_Receive+0x1d8>
 800dc10:	683b      	ldr	r3, [r7, #0]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	d109      	bne.n	800dc2a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2201      	movs	r2, #1
 800dc1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	2200      	movs	r2, #0
 800dc22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800dc26:	2303      	movs	r3, #3
 800dc28:	e01e      	b.n	800dc68 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d1c6      	bne.n	800dbc2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800dc34:	697a      	ldr	r2, [r7, #20]
 800dc36:	6839      	ldr	r1, [r7, #0]
 800dc38:	68f8      	ldr	r0, [r7, #12]
 800dc3a:	f000 fa4b 	bl	800e0d4 <SPI_EndRxTransaction>
 800dc3e:	4603      	mov	r3, r0
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d002      	beq.n	800dc4a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2220      	movs	r2, #32
 800dc48:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	2201      	movs	r2, #1
 800dc4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	2200      	movs	r2, #0
 800dc56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d001      	beq.n	800dc66 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	e000      	b.n	800dc68 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800dc66:	2300      	movs	r3, #0
  }
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	3718      	adds	r7, #24
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	bd80      	pop	{r7, pc}

0800dc70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800dc70:	b580      	push	{r7, lr}
 800dc72:	b08a      	sub	sp, #40	@ 0x28
 800dc74:	af00      	add	r7, sp, #0
 800dc76:	60f8      	str	r0, [r7, #12]
 800dc78:	60b9      	str	r1, [r7, #8]
 800dc7a:	607a      	str	r2, [r7, #4]
 800dc7c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800dc7e:	2301      	movs	r3, #1
 800dc80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc82:	f7fc fd9d 	bl	800a7c0 <HAL_GetTick>
 800dc86:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800dc8e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	685b      	ldr	r3, [r3, #4]
 800dc94:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800dc96:	887b      	ldrh	r3, [r7, #2]
 800dc98:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800dc9a:	7ffb      	ldrb	r3, [r7, #31]
 800dc9c:	2b01      	cmp	r3, #1
 800dc9e:	d00c      	beq.n	800dcba <HAL_SPI_TransmitReceive+0x4a>
 800dca0:	69bb      	ldr	r3, [r7, #24]
 800dca2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800dca6:	d106      	bne.n	800dcb6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	689b      	ldr	r3, [r3, #8]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d102      	bne.n	800dcb6 <HAL_SPI_TransmitReceive+0x46>
 800dcb0:	7ffb      	ldrb	r3, [r7, #31]
 800dcb2:	2b04      	cmp	r3, #4
 800dcb4:	d001      	beq.n	800dcba <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800dcb6:	2302      	movs	r3, #2
 800dcb8:	e17f      	b.n	800dfba <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800dcba:	68bb      	ldr	r3, [r7, #8]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d005      	beq.n	800dccc <HAL_SPI_TransmitReceive+0x5c>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d002      	beq.n	800dccc <HAL_SPI_TransmitReceive+0x5c>
 800dcc6:	887b      	ldrh	r3, [r7, #2]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d101      	bne.n	800dcd0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800dccc:	2301      	movs	r3, #1
 800dcce:	e174      	b.n	800dfba <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800dcd6:	2b01      	cmp	r3, #1
 800dcd8:	d101      	bne.n	800dcde <HAL_SPI_TransmitReceive+0x6e>
 800dcda:	2302      	movs	r3, #2
 800dcdc:	e16d      	b.n	800dfba <HAL_SPI_TransmitReceive+0x34a>
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2201      	movs	r2, #1
 800dce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	2b04      	cmp	r3, #4
 800dcf0:	d003      	beq.n	800dcfa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	2205      	movs	r2, #5
 800dcf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	887a      	ldrh	r2, [r7, #2]
 800dd0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	887a      	ldrh	r2, [r7, #2]
 800dd10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	68ba      	ldr	r2, [r7, #8]
 800dd16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	887a      	ldrh	r2, [r7, #2]
 800dd1c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	887a      	ldrh	r2, [r7, #2]
 800dd22:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2200      	movs	r2, #0
 800dd28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dd3a:	2b40      	cmp	r3, #64	@ 0x40
 800dd3c:	d007      	beq.n	800dd4e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	681a      	ldr	r2, [r3, #0]
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800dd4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	68db      	ldr	r3, [r3, #12]
 800dd52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dd56:	d17e      	bne.n	800de56 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	685b      	ldr	r3, [r3, #4]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d002      	beq.n	800dd66 <HAL_SPI_TransmitReceive+0xf6>
 800dd60:	8afb      	ldrh	r3, [r7, #22]
 800dd62:	2b01      	cmp	r3, #1
 800dd64:	d16c      	bne.n	800de40 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd6a:	881a      	ldrh	r2, [r3, #0]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dd76:	1c9a      	adds	r2, r3, #2
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	3b01      	subs	r3, #1
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800dd8a:	e059      	b.n	800de40 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	689b      	ldr	r3, [r3, #8]
 800dd92:	f003 0302 	and.w	r3, r3, #2
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	d11b      	bne.n	800ddd2 <HAL_SPI_TransmitReceive+0x162>
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dd9e:	b29b      	uxth	r3, r3
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d016      	beq.n	800ddd2 <HAL_SPI_TransmitReceive+0x162>
 800dda4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dda6:	2b01      	cmp	r3, #1
 800dda8:	d113      	bne.n	800ddd2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddae:	881a      	ldrh	r2, [r3, #0]
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	681b      	ldr	r3, [r3, #0]
 800ddb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ddba:	1c9a      	adds	r2, r3, #2
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800ddc4:	b29b      	uxth	r3, r3
 800ddc6:	3b01      	subs	r3, #1
 800ddc8:	b29a      	uxth	r2, r3
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ddce:	2300      	movs	r3, #0
 800ddd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	689b      	ldr	r3, [r3, #8]
 800ddd8:	f003 0301 	and.w	r3, r3, #1
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d119      	bne.n	800de14 <HAL_SPI_TransmitReceive+0x1a4>
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dde4:	b29b      	uxth	r3, r3
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d014      	beq.n	800de14 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	68da      	ldr	r2, [r3, #12]
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddf4:	b292      	uxth	r2, r2
 800ddf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ddfc:	1c9a      	adds	r2, r3, #2
 800ddfe:	68fb      	ldr	r3, [r7, #12]
 800de00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de06:	b29b      	uxth	r3, r3
 800de08:	3b01      	subs	r3, #1
 800de0a:	b29a      	uxth	r2, r3
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800de10:	2301      	movs	r3, #1
 800de12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800de14:	f7fc fcd4 	bl	800a7c0 <HAL_GetTick>
 800de18:	4602      	mov	r2, r0
 800de1a:	6a3b      	ldr	r3, [r7, #32]
 800de1c:	1ad3      	subs	r3, r2, r3
 800de1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de20:	429a      	cmp	r2, r3
 800de22:	d80d      	bhi.n	800de40 <HAL_SPI_TransmitReceive+0x1d0>
 800de24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800de2a:	d009      	beq.n	800de40 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	2201      	movs	r2, #1
 800de30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	2200      	movs	r2, #0
 800de38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800de3c:	2303      	movs	r3, #3
 800de3e:	e0bc      	b.n	800dfba <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de40:	68fb      	ldr	r3, [r7, #12]
 800de42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800de44:	b29b      	uxth	r3, r3
 800de46:	2b00      	cmp	r3, #0
 800de48:	d1a0      	bne.n	800dd8c <HAL_SPI_TransmitReceive+0x11c>
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800de4e:	b29b      	uxth	r3, r3
 800de50:	2b00      	cmp	r3, #0
 800de52:	d19b      	bne.n	800dd8c <HAL_SPI_TransmitReceive+0x11c>
 800de54:	e082      	b.n	800df5c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	685b      	ldr	r3, [r3, #4]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <HAL_SPI_TransmitReceive+0x1f4>
 800de5e:	8afb      	ldrh	r3, [r7, #22]
 800de60:	2b01      	cmp	r3, #1
 800de62:	d171      	bne.n	800df48 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	330c      	adds	r3, #12
 800de6e:	7812      	ldrb	r2, [r2, #0]
 800de70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de76:	1c5a      	adds	r2, r3, #1
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800de7c:	68fb      	ldr	r3, [r7, #12]
 800de7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800de80:	b29b      	uxth	r3, r3
 800de82:	3b01      	subs	r3, #1
 800de84:	b29a      	uxth	r2, r3
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800de8a:	e05d      	b.n	800df48 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	689b      	ldr	r3, [r3, #8]
 800de92:	f003 0302 	and.w	r3, r3, #2
 800de96:	2b02      	cmp	r3, #2
 800de98:	d11c      	bne.n	800ded4 <HAL_SPI_TransmitReceive+0x264>
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800de9e:	b29b      	uxth	r3, r3
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d017      	beq.n	800ded4 <HAL_SPI_TransmitReceive+0x264>
 800dea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dea6:	2b01      	cmp	r3, #1
 800dea8:	d114      	bne.n	800ded4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	330c      	adds	r3, #12
 800deb4:	7812      	ldrb	r2, [r2, #0]
 800deb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800debc:	1c5a      	adds	r2, r3, #1
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800dec6:	b29b      	uxth	r3, r3
 800dec8:	3b01      	subs	r3, #1
 800deca:	b29a      	uxth	r2, r3
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ded0:	2300      	movs	r3, #0
 800ded2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	689b      	ldr	r3, [r3, #8]
 800deda:	f003 0301 	and.w	r3, r3, #1
 800dede:	2b01      	cmp	r3, #1
 800dee0:	d119      	bne.n	800df16 <HAL_SPI_TransmitReceive+0x2a6>
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800dee6:	b29b      	uxth	r3, r3
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d014      	beq.n	800df16 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	681b      	ldr	r3, [r3, #0]
 800def0:	68da      	ldr	r2, [r3, #12]
 800def2:	68fb      	ldr	r3, [r7, #12]
 800def4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800def6:	b2d2      	uxtb	r2, r2
 800def8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800defe:	1c5a      	adds	r2, r3, #1
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df08:	b29b      	uxth	r3, r3
 800df0a:	3b01      	subs	r3, #1
 800df0c:	b29a      	uxth	r2, r3
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800df12:	2301      	movs	r3, #1
 800df14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800df16:	f7fc fc53 	bl	800a7c0 <HAL_GetTick>
 800df1a:	4602      	mov	r2, r0
 800df1c:	6a3b      	ldr	r3, [r7, #32]
 800df1e:	1ad3      	subs	r3, r2, r3
 800df20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df22:	429a      	cmp	r2, r3
 800df24:	d803      	bhi.n	800df2e <HAL_SPI_TransmitReceive+0x2be>
 800df26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df28:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df2c:	d102      	bne.n	800df34 <HAL_SPI_TransmitReceive+0x2c4>
 800df2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df30:	2b00      	cmp	r3, #0
 800df32:	d109      	bne.n	800df48 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2201      	movs	r2, #1
 800df38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2200      	movs	r2, #0
 800df40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800df44:	2303      	movs	r3, #3
 800df46:	e038      	b.n	800dfba <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d19c      	bne.n	800de8c <HAL_SPI_TransmitReceive+0x21c>
 800df52:	68fb      	ldr	r3, [r7, #12]
 800df54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800df56:	b29b      	uxth	r3, r3
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d197      	bne.n	800de8c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800df5c:	6a3a      	ldr	r2, [r7, #32]
 800df5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f000 f91d 	bl	800e1a0 <SPI_EndRxTxTransaction>
 800df66:	4603      	mov	r3, r0
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d008      	beq.n	800df7e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	2220      	movs	r2, #32
 800df70:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	2200      	movs	r2, #0
 800df76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800df7a:	2301      	movs	r3, #1
 800df7c:	e01d      	b.n	800dfba <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d10a      	bne.n	800df9c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800df86:	2300      	movs	r3, #0
 800df88:	613b      	str	r3, [r7, #16]
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	68db      	ldr	r3, [r3, #12]
 800df90:	613b      	str	r3, [r7, #16]
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	689b      	ldr	r3, [r3, #8]
 800df98:	613b      	str	r3, [r7, #16]
 800df9a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	2201      	movs	r2, #1
 800dfa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800dfb4:	2301      	movs	r3, #1
 800dfb6:	e000      	b.n	800dfba <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800dfb8:	2300      	movs	r3, #0
  }
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3728      	adds	r7, #40	@ 0x28
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
	...

0800dfc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b088      	sub	sp, #32
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	60f8      	str	r0, [r7, #12]
 800dfcc:	60b9      	str	r1, [r7, #8]
 800dfce:	603b      	str	r3, [r7, #0]
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800dfd4:	f7fc fbf4 	bl	800a7c0 <HAL_GetTick>
 800dfd8:	4602      	mov	r2, r0
 800dfda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dfdc:	1a9b      	subs	r3, r3, r2
 800dfde:	683a      	ldr	r2, [r7, #0]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800dfe4:	f7fc fbec 	bl	800a7c0 <HAL_GetTick>
 800dfe8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800dfea:	4b39      	ldr	r3, [pc, #228]	@ (800e0d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	015b      	lsls	r3, r3, #5
 800dff0:	0d1b      	lsrs	r3, r3, #20
 800dff2:	69fa      	ldr	r2, [r7, #28]
 800dff4:	fb02 f303 	mul.w	r3, r2, r3
 800dff8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800dffa:	e054      	b.n	800e0a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800dffc:	683b      	ldr	r3, [r7, #0]
 800dffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e002:	d050      	beq.n	800e0a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800e004:	f7fc fbdc 	bl	800a7c0 <HAL_GetTick>
 800e008:	4602      	mov	r2, r0
 800e00a:	69bb      	ldr	r3, [r7, #24]
 800e00c:	1ad3      	subs	r3, r2, r3
 800e00e:	69fa      	ldr	r2, [r7, #28]
 800e010:	429a      	cmp	r2, r3
 800e012:	d902      	bls.n	800e01a <SPI_WaitFlagStateUntilTimeout+0x56>
 800e014:	69fb      	ldr	r3, [r7, #28]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d13d      	bne.n	800e096 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	685a      	ldr	r2, [r3, #4]
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800e028:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e032:	d111      	bne.n	800e058 <SPI_WaitFlagStateUntilTimeout+0x94>
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	689b      	ldr	r3, [r3, #8]
 800e038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e03c:	d004      	beq.n	800e048 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	689b      	ldr	r3, [r3, #8]
 800e042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e046:	d107      	bne.n	800e058 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800e048:	68fb      	ldr	r3, [r7, #12]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e056:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e05c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e060:	d10f      	bne.n	800e082 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	681b      	ldr	r3, [r3, #0]
 800e06c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800e070:	601a      	str	r2, [r3, #0]
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	681a      	ldr	r2, [r3, #0]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800e080:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	2201      	movs	r2, #1
 800e086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2200      	movs	r2, #0
 800e08e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800e092:	2303      	movs	r3, #3
 800e094:	e017      	b.n	800e0c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800e096:	697b      	ldr	r3, [r7, #20]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d101      	bne.n	800e0a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800e09c:	2300      	movs	r3, #0
 800e09e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	689a      	ldr	r2, [r3, #8]
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	4013      	ands	r3, r2
 800e0b0:	68ba      	ldr	r2, [r7, #8]
 800e0b2:	429a      	cmp	r2, r3
 800e0b4:	bf0c      	ite	eq
 800e0b6:	2301      	moveq	r3, #1
 800e0b8:	2300      	movne	r3, #0
 800e0ba:	b2db      	uxtb	r3, r3
 800e0bc:	461a      	mov	r2, r3
 800e0be:	79fb      	ldrb	r3, [r7, #7]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d19b      	bne.n	800dffc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3720      	adds	r7, #32
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}
 800e0ce:	bf00      	nop
 800e0d0:	20000054 	.word	0x20000054

0800e0d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800e0d4:	b580      	push	{r7, lr}
 800e0d6:	b086      	sub	sp, #24
 800e0d8:	af02      	add	r7, sp, #8
 800e0da:	60f8      	str	r0, [r7, #12]
 800e0dc:	60b9      	str	r1, [r7, #8]
 800e0de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e0e8:	d111      	bne.n	800e10e <SPI_EndRxTransaction+0x3a>
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	689b      	ldr	r3, [r3, #8]
 800e0ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e0f2:	d004      	beq.n	800e0fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	689b      	ldr	r3, [r3, #8]
 800e0f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e0fc:	d107      	bne.n	800e10e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800e10c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	685b      	ldr	r3, [r3, #4]
 800e112:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e116:	d12a      	bne.n	800e16e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	689b      	ldr	r3, [r3, #8]
 800e11c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e120:	d012      	beq.n	800e148 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	9300      	str	r3, [sp, #0]
 800e126:	68bb      	ldr	r3, [r7, #8]
 800e128:	2200      	movs	r2, #0
 800e12a:	2180      	movs	r1, #128	@ 0x80
 800e12c:	68f8      	ldr	r0, [r7, #12]
 800e12e:	f7ff ff49 	bl	800dfc4 <SPI_WaitFlagStateUntilTimeout>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d02d      	beq.n	800e194 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e13c:	f043 0220 	orr.w	r2, r3, #32
 800e140:	68fb      	ldr	r3, [r7, #12]
 800e142:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800e144:	2303      	movs	r3, #3
 800e146:	e026      	b.n	800e196 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	9300      	str	r3, [sp, #0]
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	2200      	movs	r2, #0
 800e150:	2101      	movs	r1, #1
 800e152:	68f8      	ldr	r0, [r7, #12]
 800e154:	f7ff ff36 	bl	800dfc4 <SPI_WaitFlagStateUntilTimeout>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d01a      	beq.n	800e194 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e162:	f043 0220 	orr.w	r2, r3, #32
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800e16a:	2303      	movs	r3, #3
 800e16c:	e013      	b.n	800e196 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	9300      	str	r3, [sp, #0]
 800e172:	68bb      	ldr	r3, [r7, #8]
 800e174:	2200      	movs	r2, #0
 800e176:	2101      	movs	r1, #1
 800e178:	68f8      	ldr	r0, [r7, #12]
 800e17a:	f7ff ff23 	bl	800dfc4 <SPI_WaitFlagStateUntilTimeout>
 800e17e:	4603      	mov	r3, r0
 800e180:	2b00      	cmp	r3, #0
 800e182:	d007      	beq.n	800e194 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e188:	f043 0220 	orr.w	r2, r3, #32
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800e190:	2303      	movs	r3, #3
 800e192:	e000      	b.n	800e196 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3710      	adds	r7, #16
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
	...

0800e1a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b088      	sub	sp, #32
 800e1a4:	af02      	add	r7, sp, #8
 800e1a6:	60f8      	str	r0, [r7, #12]
 800e1a8:	60b9      	str	r1, [r7, #8]
 800e1aa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	9300      	str	r3, [sp, #0]
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	2201      	movs	r2, #1
 800e1b4:	2102      	movs	r1, #2
 800e1b6:	68f8      	ldr	r0, [r7, #12]
 800e1b8:	f7ff ff04 	bl	800dfc4 <SPI_WaitFlagStateUntilTimeout>
 800e1bc:	4603      	mov	r3, r0
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d007      	beq.n	800e1d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e1c6:	f043 0220 	orr.w	r2, r3, #32
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800e1ce:	2303      	movs	r3, #3
 800e1d0:	e032      	b.n	800e238 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800e1d2:	4b1b      	ldr	r3, [pc, #108]	@ (800e240 <SPI_EndRxTxTransaction+0xa0>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	4a1b      	ldr	r2, [pc, #108]	@ (800e244 <SPI_EndRxTxTransaction+0xa4>)
 800e1d8:	fba2 2303 	umull	r2, r3, r2, r3
 800e1dc:	0d5b      	lsrs	r3, r3, #21
 800e1de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800e1e2:	fb02 f303 	mul.w	r3, r2, r3
 800e1e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800e1f0:	d112      	bne.n	800e218 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	9300      	str	r3, [sp, #0]
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	2180      	movs	r1, #128	@ 0x80
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	f7ff fee1 	bl	800dfc4 <SPI_WaitFlagStateUntilTimeout>
 800e202:	4603      	mov	r3, r0
 800e204:	2b00      	cmp	r3, #0
 800e206:	d016      	beq.n	800e236 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e20c:	f043 0220 	orr.w	r2, r3, #32
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800e214:	2303      	movs	r3, #3
 800e216:	e00f      	b.n	800e238 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800e218:	697b      	ldr	r3, [r7, #20]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00a      	beq.n	800e234 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800e21e:	697b      	ldr	r3, [r7, #20]
 800e220:	3b01      	subs	r3, #1
 800e222:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	689b      	ldr	r3, [r3, #8]
 800e22a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e22e:	2b80      	cmp	r3, #128	@ 0x80
 800e230:	d0f2      	beq.n	800e218 <SPI_EndRxTxTransaction+0x78>
 800e232:	e000      	b.n	800e236 <SPI_EndRxTxTransaction+0x96>
        break;
 800e234:	bf00      	nop
  }

  return HAL_OK;
 800e236:	2300      	movs	r3, #0
}
 800e238:	4618      	mov	r0, r3
 800e23a:	3718      	adds	r7, #24
 800e23c:	46bd      	mov	sp, r7
 800e23e:	bd80      	pop	{r7, pc}
 800e240:	20000054 	.word	0x20000054
 800e244:	165e9f81 	.word	0x165e9f81

0800e248 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e248:	b580      	push	{r7, lr}
 800e24a:	b082      	sub	sp, #8
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2b00      	cmp	r3, #0
 800e254:	d101      	bne.n	800e25a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e256:	2301      	movs	r3, #1
 800e258:	e041      	b.n	800e2de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e260:	b2db      	uxtb	r3, r3
 800e262:	2b00      	cmp	r3, #0
 800e264:	d106      	bne.n	800e274 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2200      	movs	r2, #0
 800e26a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f7fb fd64 	bl	8009d3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2202      	movs	r2, #2
 800e278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	681a      	ldr	r2, [r3, #0]
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	3304      	adds	r3, #4
 800e284:	4619      	mov	r1, r3
 800e286:	4610      	mov	r0, r2
 800e288:	f000 fd28 	bl	800ecdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	2201      	movs	r2, #1
 800e290:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2201      	movs	r2, #1
 800e298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	2201      	movs	r2, #1
 800e2a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	2201      	movs	r2, #1
 800e2b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2201      	movs	r2, #1
 800e2c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	2201      	movs	r2, #1
 800e2d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e2dc:	2300      	movs	r3, #0
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3708      	adds	r7, #8
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
	...

0800e2e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e2e8:	b480      	push	{r7}
 800e2ea:	b085      	sub	sp, #20
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e2f6:	b2db      	uxtb	r3, r3
 800e2f8:	2b01      	cmp	r3, #1
 800e2fa:	d001      	beq.n	800e300 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	e046      	b.n	800e38e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	2202      	movs	r2, #2
 800e304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	4a23      	ldr	r2, [pc, #140]	@ (800e39c <HAL_TIM_Base_Start+0xb4>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d022      	beq.n	800e358 <HAL_TIM_Base_Start+0x70>
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e31a:	d01d      	beq.n	800e358 <HAL_TIM_Base_Start+0x70>
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	681b      	ldr	r3, [r3, #0]
 800e320:	4a1f      	ldr	r2, [pc, #124]	@ (800e3a0 <HAL_TIM_Base_Start+0xb8>)
 800e322:	4293      	cmp	r3, r2
 800e324:	d018      	beq.n	800e358 <HAL_TIM_Base_Start+0x70>
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4a1e      	ldr	r2, [pc, #120]	@ (800e3a4 <HAL_TIM_Base_Start+0xbc>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d013      	beq.n	800e358 <HAL_TIM_Base_Start+0x70>
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	4a1c      	ldr	r2, [pc, #112]	@ (800e3a8 <HAL_TIM_Base_Start+0xc0>)
 800e336:	4293      	cmp	r3, r2
 800e338:	d00e      	beq.n	800e358 <HAL_TIM_Base_Start+0x70>
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	681b      	ldr	r3, [r3, #0]
 800e33e:	4a1b      	ldr	r2, [pc, #108]	@ (800e3ac <HAL_TIM_Base_Start+0xc4>)
 800e340:	4293      	cmp	r3, r2
 800e342:	d009      	beq.n	800e358 <HAL_TIM_Base_Start+0x70>
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	4a19      	ldr	r2, [pc, #100]	@ (800e3b0 <HAL_TIM_Base_Start+0xc8>)
 800e34a:	4293      	cmp	r3, r2
 800e34c:	d004      	beq.n	800e358 <HAL_TIM_Base_Start+0x70>
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	4a18      	ldr	r2, [pc, #96]	@ (800e3b4 <HAL_TIM_Base_Start+0xcc>)
 800e354:	4293      	cmp	r3, r2
 800e356:	d111      	bne.n	800e37c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	f003 0307 	and.w	r3, r3, #7
 800e362:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	2b06      	cmp	r3, #6
 800e368:	d010      	beq.n	800e38c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	681b      	ldr	r3, [r3, #0]
 800e36e:	681a      	ldr	r2, [r3, #0]
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	681b      	ldr	r3, [r3, #0]
 800e374:	f042 0201 	orr.w	r2, r2, #1
 800e378:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e37a:	e007      	b.n	800e38c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	681a      	ldr	r2, [r3, #0]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	f042 0201 	orr.w	r2, r2, #1
 800e38a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3714      	adds	r7, #20
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr
 800e39a:	bf00      	nop
 800e39c:	40010000 	.word	0x40010000
 800e3a0:	40000400 	.word	0x40000400
 800e3a4:	40000800 	.word	0x40000800
 800e3a8:	40000c00 	.word	0x40000c00
 800e3ac:	40010400 	.word	0x40010400
 800e3b0:	40014000 	.word	0x40014000
 800e3b4:	40001800 	.word	0x40001800

0800e3b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b085      	sub	sp, #20
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	d001      	beq.n	800e3d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e3cc:	2301      	movs	r3, #1
 800e3ce:	e04e      	b.n	800e46e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2202      	movs	r2, #2
 800e3d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	68da      	ldr	r2, [r3, #12]
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	f042 0201 	orr.w	r2, r2, #1
 800e3e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4a23      	ldr	r2, [pc, #140]	@ (800e47c <HAL_TIM_Base_Start_IT+0xc4>)
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d022      	beq.n	800e438 <HAL_TIM_Base_Start_IT+0x80>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e3fa:	d01d      	beq.n	800e438 <HAL_TIM_Base_Start_IT+0x80>
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a1f      	ldr	r2, [pc, #124]	@ (800e480 <HAL_TIM_Base_Start_IT+0xc8>)
 800e402:	4293      	cmp	r3, r2
 800e404:	d018      	beq.n	800e438 <HAL_TIM_Base_Start_IT+0x80>
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	4a1e      	ldr	r2, [pc, #120]	@ (800e484 <HAL_TIM_Base_Start_IT+0xcc>)
 800e40c:	4293      	cmp	r3, r2
 800e40e:	d013      	beq.n	800e438 <HAL_TIM_Base_Start_IT+0x80>
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	4a1c      	ldr	r2, [pc, #112]	@ (800e488 <HAL_TIM_Base_Start_IT+0xd0>)
 800e416:	4293      	cmp	r3, r2
 800e418:	d00e      	beq.n	800e438 <HAL_TIM_Base_Start_IT+0x80>
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	4a1b      	ldr	r2, [pc, #108]	@ (800e48c <HAL_TIM_Base_Start_IT+0xd4>)
 800e420:	4293      	cmp	r3, r2
 800e422:	d009      	beq.n	800e438 <HAL_TIM_Base_Start_IT+0x80>
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	4a19      	ldr	r2, [pc, #100]	@ (800e490 <HAL_TIM_Base_Start_IT+0xd8>)
 800e42a:	4293      	cmp	r3, r2
 800e42c:	d004      	beq.n	800e438 <HAL_TIM_Base_Start_IT+0x80>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	4a18      	ldr	r2, [pc, #96]	@ (800e494 <HAL_TIM_Base_Start_IT+0xdc>)
 800e434:	4293      	cmp	r3, r2
 800e436:	d111      	bne.n	800e45c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	689b      	ldr	r3, [r3, #8]
 800e43e:	f003 0307 	and.w	r3, r3, #7
 800e442:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e444:	68fb      	ldr	r3, [r7, #12]
 800e446:	2b06      	cmp	r3, #6
 800e448:	d010      	beq.n	800e46c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	681a      	ldr	r2, [r3, #0]
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f042 0201 	orr.w	r2, r2, #1
 800e458:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e45a:	e007      	b.n	800e46c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	681b      	ldr	r3, [r3, #0]
 800e466:	f042 0201 	orr.w	r2, r2, #1
 800e46a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e46c:	2300      	movs	r3, #0
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3714      	adds	r7, #20
 800e472:	46bd      	mov	sp, r7
 800e474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e478:	4770      	bx	lr
 800e47a:	bf00      	nop
 800e47c:	40010000 	.word	0x40010000
 800e480:	40000400 	.word	0x40000400
 800e484:	40000800 	.word	0x40000800
 800e488:	40000c00 	.word	0x40000c00
 800e48c:	40010400 	.word	0x40010400
 800e490:	40014000 	.word	0x40014000
 800e494:	40001800 	.word	0x40001800

0800e498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d101      	bne.n	800e4aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e4a6:	2301      	movs	r3, #1
 800e4a8:	e041      	b.n	800e52e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d106      	bne.n	800e4c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 f88d 	bl	800e5de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2202      	movs	r2, #2
 800e4c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	681a      	ldr	r2, [r3, #0]
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	3304      	adds	r3, #4
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	4610      	mov	r0, r2
 800e4d8:	f000 fc00 	bl	800ecdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	2201      	movs	r2, #1
 800e4e0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2201      	movs	r2, #1
 800e4e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2201      	movs	r2, #1
 800e4f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	2201      	movs	r2, #1
 800e500:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2201      	movs	r2, #1
 800e508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2201      	movs	r2, #1
 800e510:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	2201      	movs	r2, #1
 800e518:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	2201      	movs	r2, #1
 800e520:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	2201      	movs	r2, #1
 800e528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800e52c:	2300      	movs	r3, #0
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3708      	adds	r7, #8
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <HAL_TIM_PWM_DeInit>:
  * @brief  DeInitializes the TIM peripheral
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_DeInit(TIM_HandleTypeDef *htim)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b082      	sub	sp, #8
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2202      	movs	r2, #2
 800e542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	6a1a      	ldr	r2, [r3, #32]
 800e54c:	f241 1311 	movw	r3, #4369	@ 0x1111
 800e550:	4013      	ands	r3, r2
 800e552:	2b00      	cmp	r3, #0
 800e554:	d10f      	bne.n	800e576 <HAL_TIM_PWM_DeInit+0x40>
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	681b      	ldr	r3, [r3, #0]
 800e55a:	6a1a      	ldr	r2, [r3, #32]
 800e55c:	f240 4344 	movw	r3, #1092	@ 0x444
 800e560:	4013      	ands	r3, r2
 800e562:	2b00      	cmp	r3, #0
 800e564:	d107      	bne.n	800e576 <HAL_TIM_PWM_DeInit+0x40>
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	f022 0201 	bic.w	r2, r2, #1
 800e574:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->PWM_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_TIM_PWM_MspDeInit(htim);
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 f83b 	bl	800e5f2 <HAL_TIM_PWM_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_RESET;
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	2200      	movs	r2, #0
 800e580:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Change the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2200      	movs	r2, #0
 800e588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2200      	movs	r2, #0
 800e590:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	2200      	movs	r2, #0
 800e598:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	2200      	movs	r2, #0
 800e5a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_RESET);
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	2200      	movs	r2, #0
 800e5b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	2200      	movs	r2, #0
 800e5c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2200      	movs	r2, #0
 800e5d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800e5d4:	2300      	movs	r3, #0
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3708      	adds	r7, #8
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	bd80      	pop	{r7, pc}

0800e5de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e5de:	b480      	push	{r7}
 800e5e0:	b083      	sub	sp, #12
 800e5e2:	af00      	add	r7, sp, #0
 800e5e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e5e6:	bf00      	nop
 800e5e8:	370c      	adds	r7, #12
 800e5ea:	46bd      	mov	sp, r7
 800e5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5f0:	4770      	bx	lr

0800e5f2 <HAL_TIM_PWM_MspDeInit>:
  * @brief  DeInitializes TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspDeInit(TIM_HandleTypeDef *htim)
{
 800e5f2:	b480      	push	{r7}
 800e5f4:	b083      	sub	sp, #12
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspDeInit could be implemented in the user file
   */
}
 800e5fa:	bf00      	nop
 800e5fc:	370c      	adds	r7, #12
 800e5fe:	46bd      	mov	sp, r7
 800e600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e604:	4770      	bx	lr
	...

0800e608 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b084      	sub	sp, #16
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	6078      	str	r0, [r7, #4]
 800e610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e612:	683b      	ldr	r3, [r7, #0]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d109      	bne.n	800e62c <HAL_TIM_PWM_Start+0x24>
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800e61e:	b2db      	uxtb	r3, r3
 800e620:	2b01      	cmp	r3, #1
 800e622:	bf14      	ite	ne
 800e624:	2301      	movne	r3, #1
 800e626:	2300      	moveq	r3, #0
 800e628:	b2db      	uxtb	r3, r3
 800e62a:	e022      	b.n	800e672 <HAL_TIM_PWM_Start+0x6a>
 800e62c:	683b      	ldr	r3, [r7, #0]
 800e62e:	2b04      	cmp	r3, #4
 800e630:	d109      	bne.n	800e646 <HAL_TIM_PWM_Start+0x3e>
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800e638:	b2db      	uxtb	r3, r3
 800e63a:	2b01      	cmp	r3, #1
 800e63c:	bf14      	ite	ne
 800e63e:	2301      	movne	r3, #1
 800e640:	2300      	moveq	r3, #0
 800e642:	b2db      	uxtb	r3, r3
 800e644:	e015      	b.n	800e672 <HAL_TIM_PWM_Start+0x6a>
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	2b08      	cmp	r3, #8
 800e64a:	d109      	bne.n	800e660 <HAL_TIM_PWM_Start+0x58>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b01      	cmp	r3, #1
 800e656:	bf14      	ite	ne
 800e658:	2301      	movne	r3, #1
 800e65a:	2300      	moveq	r3, #0
 800e65c:	b2db      	uxtb	r3, r3
 800e65e:	e008      	b.n	800e672 <HAL_TIM_PWM_Start+0x6a>
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e666:	b2db      	uxtb	r3, r3
 800e668:	2b01      	cmp	r3, #1
 800e66a:	bf14      	ite	ne
 800e66c:	2301      	movne	r3, #1
 800e66e:	2300      	moveq	r3, #0
 800e670:	b2db      	uxtb	r3, r3
 800e672:	2b00      	cmp	r3, #0
 800e674:	d001      	beq.n	800e67a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800e676:	2301      	movs	r3, #1
 800e678:	e07c      	b.n	800e774 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d104      	bne.n	800e68a <HAL_TIM_PWM_Start+0x82>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	2202      	movs	r2, #2
 800e684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800e688:	e013      	b.n	800e6b2 <HAL_TIM_PWM_Start+0xaa>
 800e68a:	683b      	ldr	r3, [r7, #0]
 800e68c:	2b04      	cmp	r3, #4
 800e68e:	d104      	bne.n	800e69a <HAL_TIM_PWM_Start+0x92>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	2202      	movs	r2, #2
 800e694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800e698:	e00b      	b.n	800e6b2 <HAL_TIM_PWM_Start+0xaa>
 800e69a:	683b      	ldr	r3, [r7, #0]
 800e69c:	2b08      	cmp	r3, #8
 800e69e:	d104      	bne.n	800e6aa <HAL_TIM_PWM_Start+0xa2>
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	2202      	movs	r2, #2
 800e6a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800e6a8:	e003      	b.n	800e6b2 <HAL_TIM_PWM_Start+0xaa>
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	2202      	movs	r2, #2
 800e6ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	681b      	ldr	r3, [r3, #0]
 800e6b6:	2201      	movs	r2, #1
 800e6b8:	6839      	ldr	r1, [r7, #0]
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	f000 fe04 	bl	800f2c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	4a2d      	ldr	r2, [pc, #180]	@ (800e77c <HAL_TIM_PWM_Start+0x174>)
 800e6c6:	4293      	cmp	r3, r2
 800e6c8:	d004      	beq.n	800e6d4 <HAL_TIM_PWM_Start+0xcc>
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4a2c      	ldr	r2, [pc, #176]	@ (800e780 <HAL_TIM_PWM_Start+0x178>)
 800e6d0:	4293      	cmp	r3, r2
 800e6d2:	d101      	bne.n	800e6d8 <HAL_TIM_PWM_Start+0xd0>
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	e000      	b.n	800e6da <HAL_TIM_PWM_Start+0xd2>
 800e6d8:	2300      	movs	r3, #0
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d007      	beq.n	800e6ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e6ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	681b      	ldr	r3, [r3, #0]
 800e6f2:	4a22      	ldr	r2, [pc, #136]	@ (800e77c <HAL_TIM_PWM_Start+0x174>)
 800e6f4:	4293      	cmp	r3, r2
 800e6f6:	d022      	beq.n	800e73e <HAL_TIM_PWM_Start+0x136>
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e700:	d01d      	beq.n	800e73e <HAL_TIM_PWM_Start+0x136>
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	4a1f      	ldr	r2, [pc, #124]	@ (800e784 <HAL_TIM_PWM_Start+0x17c>)
 800e708:	4293      	cmp	r3, r2
 800e70a:	d018      	beq.n	800e73e <HAL_TIM_PWM_Start+0x136>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	4a1d      	ldr	r2, [pc, #116]	@ (800e788 <HAL_TIM_PWM_Start+0x180>)
 800e712:	4293      	cmp	r3, r2
 800e714:	d013      	beq.n	800e73e <HAL_TIM_PWM_Start+0x136>
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	4a1c      	ldr	r2, [pc, #112]	@ (800e78c <HAL_TIM_PWM_Start+0x184>)
 800e71c:	4293      	cmp	r3, r2
 800e71e:	d00e      	beq.n	800e73e <HAL_TIM_PWM_Start+0x136>
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a16      	ldr	r2, [pc, #88]	@ (800e780 <HAL_TIM_PWM_Start+0x178>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d009      	beq.n	800e73e <HAL_TIM_PWM_Start+0x136>
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4a18      	ldr	r2, [pc, #96]	@ (800e790 <HAL_TIM_PWM_Start+0x188>)
 800e730:	4293      	cmp	r3, r2
 800e732:	d004      	beq.n	800e73e <HAL_TIM_PWM_Start+0x136>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4a16      	ldr	r2, [pc, #88]	@ (800e794 <HAL_TIM_PWM_Start+0x18c>)
 800e73a:	4293      	cmp	r3, r2
 800e73c:	d111      	bne.n	800e762 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	689b      	ldr	r3, [r3, #8]
 800e744:	f003 0307 	and.w	r3, r3, #7
 800e748:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2b06      	cmp	r3, #6
 800e74e:	d010      	beq.n	800e772 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	681a      	ldr	r2, [r3, #0]
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f042 0201 	orr.w	r2, r2, #1
 800e75e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e760:	e007      	b.n	800e772 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f042 0201 	orr.w	r2, r2, #1
 800e770:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800e772:	2300      	movs	r3, #0
}
 800e774:	4618      	mov	r0, r3
 800e776:	3710      	adds	r7, #16
 800e778:	46bd      	mov	sp, r7
 800e77a:	bd80      	pop	{r7, pc}
 800e77c:	40010000 	.word	0x40010000
 800e780:	40010400 	.word	0x40010400
 800e784:	40000400 	.word	0x40000400
 800e788:	40000800 	.word	0x40000800
 800e78c:	40000c00 	.word	0x40000c00
 800e790:	40014000 	.word	0x40014000
 800e794:	40001800 	.word	0x40001800

0800e798 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	68db      	ldr	r3, [r3, #12]
 800e7a6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	f003 0302 	and.w	r3, r3, #2
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d020      	beq.n	800e7fc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f003 0302 	and.w	r3, r3, #2
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d01b      	beq.n	800e7fc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f06f 0202 	mvn.w	r2, #2
 800e7cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	2201      	movs	r2, #1
 800e7d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	699b      	ldr	r3, [r3, #24]
 800e7da:	f003 0303 	and.w	r3, r3, #3
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d003      	beq.n	800e7ea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e7e2:	6878      	ldr	r0, [r7, #4]
 800e7e4:	f000 fa5b 	bl	800ec9e <HAL_TIM_IC_CaptureCallback>
 800e7e8:	e005      	b.n	800e7f6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f000 fa4d 	bl	800ec8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 fa5e 	bl	800ecb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	f003 0304 	and.w	r3, r3, #4
 800e802:	2b00      	cmp	r3, #0
 800e804:	d020      	beq.n	800e848 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f003 0304 	and.w	r3, r3, #4
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d01b      	beq.n	800e848 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	f06f 0204 	mvn.w	r2, #4
 800e818:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2202      	movs	r2, #2
 800e81e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	699b      	ldr	r3, [r3, #24]
 800e826:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d003      	beq.n	800e836 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e82e:	6878      	ldr	r0, [r7, #4]
 800e830:	f000 fa35 	bl	800ec9e <HAL_TIM_IC_CaptureCallback>
 800e834:	e005      	b.n	800e842 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f000 fa27 	bl	800ec8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f000 fa38 	bl	800ecb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2200      	movs	r2, #0
 800e846:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800e848:	68bb      	ldr	r3, [r7, #8]
 800e84a:	f003 0308 	and.w	r3, r3, #8
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d020      	beq.n	800e894 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f003 0308 	and.w	r3, r3, #8
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d01b      	beq.n	800e894 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	f06f 0208 	mvn.w	r2, #8
 800e864:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	2204      	movs	r2, #4
 800e86a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	69db      	ldr	r3, [r3, #28]
 800e872:	f003 0303 	and.w	r3, r3, #3
 800e876:	2b00      	cmp	r3, #0
 800e878:	d003      	beq.n	800e882 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e87a:	6878      	ldr	r0, [r7, #4]
 800e87c:	f000 fa0f 	bl	800ec9e <HAL_TIM_IC_CaptureCallback>
 800e880:	e005      	b.n	800e88e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e882:	6878      	ldr	r0, [r7, #4]
 800e884:	f000 fa01 	bl	800ec8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 fa12 	bl	800ecb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2200      	movs	r2, #0
 800e892:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	f003 0310 	and.w	r3, r3, #16
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d020      	beq.n	800e8e0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	f003 0310 	and.w	r3, r3, #16
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d01b      	beq.n	800e8e0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	f06f 0210 	mvn.w	r2, #16
 800e8b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	2208      	movs	r2, #8
 800e8b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	69db      	ldr	r3, [r3, #28]
 800e8be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d003      	beq.n	800e8ce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f000 f9e9 	bl	800ec9e <HAL_TIM_IC_CaptureCallback>
 800e8cc:	e005      	b.n	800e8da <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e8ce:	6878      	ldr	r0, [r7, #4]
 800e8d0:	f000 f9db 	bl	800ec8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f000 f9ec 	bl	800ecb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	2200      	movs	r2, #0
 800e8de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800e8e0:	68bb      	ldr	r3, [r7, #8]
 800e8e2:	f003 0301 	and.w	r3, r3, #1
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d00c      	beq.n	800e904 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f003 0301 	and.w	r3, r3, #1
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d007      	beq.n	800e904 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f06f 0201 	mvn.w	r2, #1
 800e8fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e8fe:	6878      	ldr	r0, [r7, #4]
 800e900:	f7f9 fee8 	bl	80086d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d00c      	beq.n	800e928 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e914:	2b00      	cmp	r3, #0
 800e916:	d007      	beq.n	800e928 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800e920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f000 fd7c 	bl	800f420 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e92e:	2b00      	cmp	r3, #0
 800e930:	d00c      	beq.n	800e94c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d007      	beq.n	800e94c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800e944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e946:	6878      	ldr	r0, [r7, #4]
 800e948:	f000 f9bd 	bl	800ecc6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800e94c:	68bb      	ldr	r3, [r7, #8]
 800e94e:	f003 0320 	and.w	r3, r3, #32
 800e952:	2b00      	cmp	r3, #0
 800e954:	d00c      	beq.n	800e970 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	f003 0320 	and.w	r3, r3, #32
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d007      	beq.n	800e970 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f06f 0220 	mvn.w	r2, #32
 800e968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 fd4e 	bl	800f40c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e970:	bf00      	nop
 800e972:	3710      	adds	r7, #16
 800e974:	46bd      	mov	sp, r7
 800e976:	bd80      	pop	{r7, pc}

0800e978 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b086      	sub	sp, #24
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e984:	2300      	movs	r3, #0
 800e986:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d101      	bne.n	800e996 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800e992:	2302      	movs	r3, #2
 800e994:	e0ae      	b.n	800eaf4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2201      	movs	r2, #1
 800e99a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	2b0c      	cmp	r3, #12
 800e9a2:	f200 809f 	bhi.w	800eae4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800e9a6:	a201      	add	r2, pc, #4	@ (adr r2, 800e9ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 800e9a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9ac:	0800e9e1 	.word	0x0800e9e1
 800e9b0:	0800eae5 	.word	0x0800eae5
 800e9b4:	0800eae5 	.word	0x0800eae5
 800e9b8:	0800eae5 	.word	0x0800eae5
 800e9bc:	0800ea21 	.word	0x0800ea21
 800e9c0:	0800eae5 	.word	0x0800eae5
 800e9c4:	0800eae5 	.word	0x0800eae5
 800e9c8:	0800eae5 	.word	0x0800eae5
 800e9cc:	0800ea63 	.word	0x0800ea63
 800e9d0:	0800eae5 	.word	0x0800eae5
 800e9d4:	0800eae5 	.word	0x0800eae5
 800e9d8:	0800eae5 	.word	0x0800eae5
 800e9dc:	0800eaa3 	.word	0x0800eaa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e9e0:	68fb      	ldr	r3, [r7, #12]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	68b9      	ldr	r1, [r7, #8]
 800e9e6:	4618      	mov	r0, r3
 800e9e8:	f000 fa24 	bl	800ee34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	699a      	ldr	r2, [r3, #24]
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f042 0208 	orr.w	r2, r2, #8
 800e9fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	699a      	ldr	r2, [r3, #24]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	f022 0204 	bic.w	r2, r2, #4
 800ea0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	6999      	ldr	r1, [r3, #24]
 800ea12:	68bb      	ldr	r3, [r7, #8]
 800ea14:	691a      	ldr	r2, [r3, #16]
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	430a      	orrs	r2, r1
 800ea1c:	619a      	str	r2, [r3, #24]
      break;
 800ea1e:	e064      	b.n	800eaea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	681b      	ldr	r3, [r3, #0]
 800ea24:	68b9      	ldr	r1, [r7, #8]
 800ea26:	4618      	mov	r0, r3
 800ea28:	f000 fa74 	bl	800ef14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	681b      	ldr	r3, [r3, #0]
 800ea30:	699a      	ldr	r2, [r3, #24]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ea3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	699a      	ldr	r2, [r3, #24]
 800ea42:	68fb      	ldr	r3, [r7, #12]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ea4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	6999      	ldr	r1, [r3, #24]
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	691b      	ldr	r3, [r3, #16]
 800ea56:	021a      	lsls	r2, r3, #8
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	430a      	orrs	r2, r1
 800ea5e:	619a      	str	r2, [r3, #24]
      break;
 800ea60:	e043      	b.n	800eaea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ea62:	68fb      	ldr	r3, [r7, #12]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	68b9      	ldr	r1, [r7, #8]
 800ea68:	4618      	mov	r0, r3
 800ea6a:	f000 fac9 	bl	800f000 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ea6e:	68fb      	ldr	r3, [r7, #12]
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	69da      	ldr	r2, [r3, #28]
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f042 0208 	orr.w	r2, r2, #8
 800ea7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	69da      	ldr	r2, [r3, #28]
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	f022 0204 	bic.w	r2, r2, #4
 800ea8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	69d9      	ldr	r1, [r3, #28]
 800ea94:	68bb      	ldr	r3, [r7, #8]
 800ea96:	691a      	ldr	r2, [r3, #16]
 800ea98:	68fb      	ldr	r3, [r7, #12]
 800ea9a:	681b      	ldr	r3, [r3, #0]
 800ea9c:	430a      	orrs	r2, r1
 800ea9e:	61da      	str	r2, [r3, #28]
      break;
 800eaa0:	e023      	b.n	800eaea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	68b9      	ldr	r1, [r7, #8]
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f000 fb1d 	bl	800f0e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	69da      	ldr	r2, [r3, #28]
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800eabc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eabe:	68fb      	ldr	r3, [r7, #12]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	69da      	ldr	r2, [r3, #28]
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	681b      	ldr	r3, [r3, #0]
 800eac8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800eacc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800eace:	68fb      	ldr	r3, [r7, #12]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	69d9      	ldr	r1, [r3, #28]
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	691b      	ldr	r3, [r3, #16]
 800ead8:	021a      	lsls	r2, r3, #8
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	430a      	orrs	r2, r1
 800eae0:	61da      	str	r2, [r3, #28]
      break;
 800eae2:	e002      	b.n	800eaea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800eae4:	2301      	movs	r3, #1
 800eae6:	75fb      	strb	r3, [r7, #23]
      break;
 800eae8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	2200      	movs	r2, #0
 800eaee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800eaf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3718      	adds	r7, #24
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	bd80      	pop	{r7, pc}

0800eafc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800eb06:	2300      	movs	r3, #0
 800eb08:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800eb10:	2b01      	cmp	r3, #1
 800eb12:	d101      	bne.n	800eb18 <HAL_TIM_ConfigClockSource+0x1c>
 800eb14:	2302      	movs	r3, #2
 800eb16:	e0b4      	b.n	800ec82 <HAL_TIM_ConfigClockSource+0x186>
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2201      	movs	r2, #1
 800eb1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2202      	movs	r2, #2
 800eb24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	689b      	ldr	r3, [r3, #8]
 800eb2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800eb36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800eb3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	68ba      	ldr	r2, [r7, #8]
 800eb46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb50:	d03e      	beq.n	800ebd0 <HAL_TIM_ConfigClockSource+0xd4>
 800eb52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800eb56:	f200 8087 	bhi.w	800ec68 <HAL_TIM_ConfigClockSource+0x16c>
 800eb5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb5e:	f000 8086 	beq.w	800ec6e <HAL_TIM_ConfigClockSource+0x172>
 800eb62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800eb66:	d87f      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x16c>
 800eb68:	2b70      	cmp	r3, #112	@ 0x70
 800eb6a:	d01a      	beq.n	800eba2 <HAL_TIM_ConfigClockSource+0xa6>
 800eb6c:	2b70      	cmp	r3, #112	@ 0x70
 800eb6e:	d87b      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x16c>
 800eb70:	2b60      	cmp	r3, #96	@ 0x60
 800eb72:	d050      	beq.n	800ec16 <HAL_TIM_ConfigClockSource+0x11a>
 800eb74:	2b60      	cmp	r3, #96	@ 0x60
 800eb76:	d877      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x16c>
 800eb78:	2b50      	cmp	r3, #80	@ 0x50
 800eb7a:	d03c      	beq.n	800ebf6 <HAL_TIM_ConfigClockSource+0xfa>
 800eb7c:	2b50      	cmp	r3, #80	@ 0x50
 800eb7e:	d873      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x16c>
 800eb80:	2b40      	cmp	r3, #64	@ 0x40
 800eb82:	d058      	beq.n	800ec36 <HAL_TIM_ConfigClockSource+0x13a>
 800eb84:	2b40      	cmp	r3, #64	@ 0x40
 800eb86:	d86f      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x16c>
 800eb88:	2b30      	cmp	r3, #48	@ 0x30
 800eb8a:	d064      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x15a>
 800eb8c:	2b30      	cmp	r3, #48	@ 0x30
 800eb8e:	d86b      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x16c>
 800eb90:	2b20      	cmp	r3, #32
 800eb92:	d060      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x15a>
 800eb94:	2b20      	cmp	r3, #32
 800eb96:	d867      	bhi.n	800ec68 <HAL_TIM_ConfigClockSource+0x16c>
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d05c      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x15a>
 800eb9c:	2b10      	cmp	r3, #16
 800eb9e:	d05a      	beq.n	800ec56 <HAL_TIM_ConfigClockSource+0x15a>
 800eba0:	e062      	b.n	800ec68 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ebb2:	f000 fb69 	bl	800f288 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	689b      	ldr	r3, [r3, #8]
 800ebbc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800ebc4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	68ba      	ldr	r2, [r7, #8]
 800ebcc:	609a      	str	r2, [r3, #8]
      break;
 800ebce:	e04f      	b.n	800ec70 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ebd4:	683b      	ldr	r3, [r7, #0]
 800ebd6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ebd8:	683b      	ldr	r3, [r7, #0]
 800ebda:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ebdc:	683b      	ldr	r3, [r7, #0]
 800ebde:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ebe0:	f000 fb52 	bl	800f288 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	689a      	ldr	r2, [r3, #8]
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800ebf2:	609a      	str	r2, [r3, #8]
      break;
 800ebf4:	e03c      	b.n	800ec70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec02:	461a      	mov	r2, r3
 800ec04:	f000 fac6 	bl	800f194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	2150      	movs	r1, #80	@ 0x50
 800ec0e:	4618      	mov	r0, r3
 800ec10:	f000 fb1f 	bl	800f252 <TIM_ITRx_SetConfig>
      break;
 800ec14:	e02c      	b.n	800ec70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ec1a:	683b      	ldr	r3, [r7, #0]
 800ec1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ec1e:	683b      	ldr	r3, [r7, #0]
 800ec20:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ec22:	461a      	mov	r2, r3
 800ec24:	f000 fae5 	bl	800f1f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	2160      	movs	r1, #96	@ 0x60
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f000 fb0f 	bl	800f252 <TIM_ITRx_SetConfig>
      break;
 800ec34:	e01c      	b.n	800ec70 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ec3a:	683b      	ldr	r3, [r7, #0]
 800ec3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ec3e:	683b      	ldr	r3, [r7, #0]
 800ec40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ec42:	461a      	mov	r2, r3
 800ec44:	f000 faa6 	bl	800f194 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2140      	movs	r1, #64	@ 0x40
 800ec4e:	4618      	mov	r0, r3
 800ec50:	f000 faff 	bl	800f252 <TIM_ITRx_SetConfig>
      break;
 800ec54:	e00c      	b.n	800ec70 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681a      	ldr	r2, [r3, #0]
 800ec5a:	683b      	ldr	r3, [r7, #0]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4619      	mov	r1, r3
 800ec60:	4610      	mov	r0, r2
 800ec62:	f000 faf6 	bl	800f252 <TIM_ITRx_SetConfig>
      break;
 800ec66:	e003      	b.n	800ec70 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800ec68:	2301      	movs	r3, #1
 800ec6a:	73fb      	strb	r3, [r7, #15]
      break;
 800ec6c:	e000      	b.n	800ec70 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800ec6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	2201      	movs	r2, #1
 800ec74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800ec80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec8a:	b480      	push	{r7}
 800ec8c:	b083      	sub	sp, #12
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ec92:	bf00      	nop
 800ec94:	370c      	adds	r7, #12
 800ec96:	46bd      	mov	sp, r7
 800ec98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec9c:	4770      	bx	lr

0800ec9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ec9e:	b480      	push	{r7}
 800eca0:	b083      	sub	sp, #12
 800eca2:	af00      	add	r7, sp, #0
 800eca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800eca6:	bf00      	nop
 800eca8:	370c      	adds	r7, #12
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr

0800ecb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ecb2:	b480      	push	{r7}
 800ecb4:	b083      	sub	sp, #12
 800ecb6:	af00      	add	r7, sp, #0
 800ecb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ecba:	bf00      	nop
 800ecbc:	370c      	adds	r7, #12
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr

0800ecc6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ecc6:	b480      	push	{r7}
 800ecc8:	b083      	sub	sp, #12
 800ecca:	af00      	add	r7, sp, #0
 800eccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ecce:	bf00      	nop
 800ecd0:	370c      	adds	r7, #12
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr
	...

0800ecdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ecdc:	b480      	push	{r7}
 800ecde:	b085      	sub	sp, #20
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
 800ece4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	4a46      	ldr	r2, [pc, #280]	@ (800ee08 <TIM_Base_SetConfig+0x12c>)
 800ecf0:	4293      	cmp	r3, r2
 800ecf2:	d013      	beq.n	800ed1c <TIM_Base_SetConfig+0x40>
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ecfa:	d00f      	beq.n	800ed1c <TIM_Base_SetConfig+0x40>
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4a43      	ldr	r2, [pc, #268]	@ (800ee0c <TIM_Base_SetConfig+0x130>)
 800ed00:	4293      	cmp	r3, r2
 800ed02:	d00b      	beq.n	800ed1c <TIM_Base_SetConfig+0x40>
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	4a42      	ldr	r2, [pc, #264]	@ (800ee10 <TIM_Base_SetConfig+0x134>)
 800ed08:	4293      	cmp	r3, r2
 800ed0a:	d007      	beq.n	800ed1c <TIM_Base_SetConfig+0x40>
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	4a41      	ldr	r2, [pc, #260]	@ (800ee14 <TIM_Base_SetConfig+0x138>)
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d003      	beq.n	800ed1c <TIM_Base_SetConfig+0x40>
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	4a40      	ldr	r2, [pc, #256]	@ (800ee18 <TIM_Base_SetConfig+0x13c>)
 800ed18:	4293      	cmp	r3, r2
 800ed1a:	d108      	bne.n	800ed2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ed22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	4313      	orrs	r3, r2
 800ed2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	4a35      	ldr	r2, [pc, #212]	@ (800ee08 <TIM_Base_SetConfig+0x12c>)
 800ed32:	4293      	cmp	r3, r2
 800ed34:	d02b      	beq.n	800ed8e <TIM_Base_SetConfig+0xb2>
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed3c:	d027      	beq.n	800ed8e <TIM_Base_SetConfig+0xb2>
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	4a32      	ldr	r2, [pc, #200]	@ (800ee0c <TIM_Base_SetConfig+0x130>)
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d023      	beq.n	800ed8e <TIM_Base_SetConfig+0xb2>
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	4a31      	ldr	r2, [pc, #196]	@ (800ee10 <TIM_Base_SetConfig+0x134>)
 800ed4a:	4293      	cmp	r3, r2
 800ed4c:	d01f      	beq.n	800ed8e <TIM_Base_SetConfig+0xb2>
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	4a30      	ldr	r2, [pc, #192]	@ (800ee14 <TIM_Base_SetConfig+0x138>)
 800ed52:	4293      	cmp	r3, r2
 800ed54:	d01b      	beq.n	800ed8e <TIM_Base_SetConfig+0xb2>
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	4a2f      	ldr	r2, [pc, #188]	@ (800ee18 <TIM_Base_SetConfig+0x13c>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d017      	beq.n	800ed8e <TIM_Base_SetConfig+0xb2>
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	4a2e      	ldr	r2, [pc, #184]	@ (800ee1c <TIM_Base_SetConfig+0x140>)
 800ed62:	4293      	cmp	r3, r2
 800ed64:	d013      	beq.n	800ed8e <TIM_Base_SetConfig+0xb2>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	4a2d      	ldr	r2, [pc, #180]	@ (800ee20 <TIM_Base_SetConfig+0x144>)
 800ed6a:	4293      	cmp	r3, r2
 800ed6c:	d00f      	beq.n	800ed8e <TIM_Base_SetConfig+0xb2>
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	4a2c      	ldr	r2, [pc, #176]	@ (800ee24 <TIM_Base_SetConfig+0x148>)
 800ed72:	4293      	cmp	r3, r2
 800ed74:	d00b      	beq.n	800ed8e <TIM_Base_SetConfig+0xb2>
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	4a2b      	ldr	r2, [pc, #172]	@ (800ee28 <TIM_Base_SetConfig+0x14c>)
 800ed7a:	4293      	cmp	r3, r2
 800ed7c:	d007      	beq.n	800ed8e <TIM_Base_SetConfig+0xb2>
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	4a2a      	ldr	r2, [pc, #168]	@ (800ee2c <TIM_Base_SetConfig+0x150>)
 800ed82:	4293      	cmp	r3, r2
 800ed84:	d003      	beq.n	800ed8e <TIM_Base_SetConfig+0xb2>
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	4a29      	ldr	r2, [pc, #164]	@ (800ee30 <TIM_Base_SetConfig+0x154>)
 800ed8a:	4293      	cmp	r3, r2
 800ed8c:	d108      	bne.n	800eda0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ed94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed96:	683b      	ldr	r3, [r7, #0]
 800ed98:	68db      	ldr	r3, [r3, #12]
 800ed9a:	68fa      	ldr	r2, [r7, #12]
 800ed9c:	4313      	orrs	r3, r2
 800ed9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800eda6:	683b      	ldr	r3, [r7, #0]
 800eda8:	695b      	ldr	r3, [r3, #20]
 800edaa:	4313      	orrs	r3, r2
 800edac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	68fa      	ldr	r2, [r7, #12]
 800edb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800edb4:	683b      	ldr	r3, [r7, #0]
 800edb6:	689a      	ldr	r2, [r3, #8]
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	681a      	ldr	r2, [r3, #0]
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	4a10      	ldr	r2, [pc, #64]	@ (800ee08 <TIM_Base_SetConfig+0x12c>)
 800edc8:	4293      	cmp	r3, r2
 800edca:	d003      	beq.n	800edd4 <TIM_Base_SetConfig+0xf8>
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	4a12      	ldr	r2, [pc, #72]	@ (800ee18 <TIM_Base_SetConfig+0x13c>)
 800edd0:	4293      	cmp	r3, r2
 800edd2:	d103      	bne.n	800eddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	691a      	ldr	r2, [r3, #16]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	2201      	movs	r2, #1
 800ede0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	691b      	ldr	r3, [r3, #16]
 800ede6:	f003 0301 	and.w	r3, r3, #1
 800edea:	2b01      	cmp	r3, #1
 800edec:	d105      	bne.n	800edfa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	691b      	ldr	r3, [r3, #16]
 800edf2:	f023 0201 	bic.w	r2, r3, #1
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	611a      	str	r2, [r3, #16]
  }
}
 800edfa:	bf00      	nop
 800edfc:	3714      	adds	r7, #20
 800edfe:	46bd      	mov	sp, r7
 800ee00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee04:	4770      	bx	lr
 800ee06:	bf00      	nop
 800ee08:	40010000 	.word	0x40010000
 800ee0c:	40000400 	.word	0x40000400
 800ee10:	40000800 	.word	0x40000800
 800ee14:	40000c00 	.word	0x40000c00
 800ee18:	40010400 	.word	0x40010400
 800ee1c:	40014000 	.word	0x40014000
 800ee20:	40014400 	.word	0x40014400
 800ee24:	40014800 	.word	0x40014800
 800ee28:	40001800 	.word	0x40001800
 800ee2c:	40001c00 	.word	0x40001c00
 800ee30:	40002000 	.word	0x40002000

0800ee34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b087      	sub	sp, #28
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
 800ee3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6a1b      	ldr	r3, [r3, #32]
 800ee42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	6a1b      	ldr	r3, [r3, #32]
 800ee48:	f023 0201 	bic.w	r2, r3, #1
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	685b      	ldr	r3, [r3, #4]
 800ee54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	699b      	ldr	r3, [r3, #24]
 800ee5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ee62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	f023 0303 	bic.w	r3, r3, #3
 800ee6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	68fa      	ldr	r2, [r7, #12]
 800ee72:	4313      	orrs	r3, r2
 800ee74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ee76:	697b      	ldr	r3, [r7, #20]
 800ee78:	f023 0302 	bic.w	r3, r3, #2
 800ee7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ee7e:	683b      	ldr	r3, [r7, #0]
 800ee80:	689b      	ldr	r3, [r3, #8]
 800ee82:	697a      	ldr	r2, [r7, #20]
 800ee84:	4313      	orrs	r3, r2
 800ee86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	4a20      	ldr	r2, [pc, #128]	@ (800ef0c <TIM_OC1_SetConfig+0xd8>)
 800ee8c:	4293      	cmp	r3, r2
 800ee8e:	d003      	beq.n	800ee98 <TIM_OC1_SetConfig+0x64>
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	4a1f      	ldr	r2, [pc, #124]	@ (800ef10 <TIM_OC1_SetConfig+0xdc>)
 800ee94:	4293      	cmp	r3, r2
 800ee96:	d10c      	bne.n	800eeb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	f023 0308 	bic.w	r3, r3, #8
 800ee9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	68db      	ldr	r3, [r3, #12]
 800eea4:	697a      	ldr	r2, [r7, #20]
 800eea6:	4313      	orrs	r3, r2
 800eea8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eeaa:	697b      	ldr	r3, [r7, #20]
 800eeac:	f023 0304 	bic.w	r3, r3, #4
 800eeb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4a15      	ldr	r2, [pc, #84]	@ (800ef0c <TIM_OC1_SetConfig+0xd8>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d003      	beq.n	800eec2 <TIM_OC1_SetConfig+0x8e>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4a14      	ldr	r2, [pc, #80]	@ (800ef10 <TIM_OC1_SetConfig+0xdc>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d111      	bne.n	800eee6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800eec2:	693b      	ldr	r3, [r7, #16]
 800eec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800eec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800eeca:	693b      	ldr	r3, [r7, #16]
 800eecc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800eed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	695b      	ldr	r3, [r3, #20]
 800eed6:	693a      	ldr	r2, [r7, #16]
 800eed8:	4313      	orrs	r3, r2
 800eeda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800eedc:	683b      	ldr	r3, [r7, #0]
 800eede:	699b      	ldr	r3, [r3, #24]
 800eee0:	693a      	ldr	r2, [r7, #16]
 800eee2:	4313      	orrs	r3, r2
 800eee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	693a      	ldr	r2, [r7, #16]
 800eeea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	68fa      	ldr	r2, [r7, #12]
 800eef0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800eef2:	683b      	ldr	r3, [r7, #0]
 800eef4:	685a      	ldr	r2, [r3, #4]
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	697a      	ldr	r2, [r7, #20]
 800eefe:	621a      	str	r2, [r3, #32]
}
 800ef00:	bf00      	nop
 800ef02:	371c      	adds	r7, #28
 800ef04:	46bd      	mov	sp, r7
 800ef06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0a:	4770      	bx	lr
 800ef0c:	40010000 	.word	0x40010000
 800ef10:	40010400 	.word	0x40010400

0800ef14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ef14:	b480      	push	{r7}
 800ef16:	b087      	sub	sp, #28
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
 800ef1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6a1b      	ldr	r3, [r3, #32]
 800ef22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	6a1b      	ldr	r3, [r3, #32]
 800ef28:	f023 0210 	bic.w	r2, r3, #16
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	685b      	ldr	r3, [r3, #4]
 800ef34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	699b      	ldr	r3, [r3, #24]
 800ef3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800ef42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ef4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ef4c:	683b      	ldr	r3, [r7, #0]
 800ef4e:	681b      	ldr	r3, [r3, #0]
 800ef50:	021b      	lsls	r3, r3, #8
 800ef52:	68fa      	ldr	r2, [r7, #12]
 800ef54:	4313      	orrs	r3, r2
 800ef56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ef58:	697b      	ldr	r3, [r7, #20]
 800ef5a:	f023 0320 	bic.w	r3, r3, #32
 800ef5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ef60:	683b      	ldr	r3, [r7, #0]
 800ef62:	689b      	ldr	r3, [r3, #8]
 800ef64:	011b      	lsls	r3, r3, #4
 800ef66:	697a      	ldr	r2, [r7, #20]
 800ef68:	4313      	orrs	r3, r2
 800ef6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	4a22      	ldr	r2, [pc, #136]	@ (800eff8 <TIM_OC2_SetConfig+0xe4>)
 800ef70:	4293      	cmp	r3, r2
 800ef72:	d003      	beq.n	800ef7c <TIM_OC2_SetConfig+0x68>
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	4a21      	ldr	r2, [pc, #132]	@ (800effc <TIM_OC2_SetConfig+0xe8>)
 800ef78:	4293      	cmp	r3, r2
 800ef7a:	d10d      	bne.n	800ef98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ef7c:	697b      	ldr	r3, [r7, #20]
 800ef7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ef82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ef84:	683b      	ldr	r3, [r7, #0]
 800ef86:	68db      	ldr	r3, [r3, #12]
 800ef88:	011b      	lsls	r3, r3, #4
 800ef8a:	697a      	ldr	r2, [r7, #20]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ef90:	697b      	ldr	r3, [r7, #20]
 800ef92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ef96:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	4a17      	ldr	r2, [pc, #92]	@ (800eff8 <TIM_OC2_SetConfig+0xe4>)
 800ef9c:	4293      	cmp	r3, r2
 800ef9e:	d003      	beq.n	800efa8 <TIM_OC2_SetConfig+0x94>
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	4a16      	ldr	r2, [pc, #88]	@ (800effc <TIM_OC2_SetConfig+0xe8>)
 800efa4:	4293      	cmp	r3, r2
 800efa6:	d113      	bne.n	800efd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800efa8:	693b      	ldr	r3, [r7, #16]
 800efaa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800efae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800efb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	695b      	ldr	r3, [r3, #20]
 800efbc:	009b      	lsls	r3, r3, #2
 800efbe:	693a      	ldr	r2, [r7, #16]
 800efc0:	4313      	orrs	r3, r2
 800efc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800efc4:	683b      	ldr	r3, [r7, #0]
 800efc6:	699b      	ldr	r3, [r3, #24]
 800efc8:	009b      	lsls	r3, r3, #2
 800efca:	693a      	ldr	r2, [r7, #16]
 800efcc:	4313      	orrs	r3, r2
 800efce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	693a      	ldr	r2, [r7, #16]
 800efd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	68fa      	ldr	r2, [r7, #12]
 800efda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800efdc:	683b      	ldr	r3, [r7, #0]
 800efde:	685a      	ldr	r2, [r3, #4]
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	697a      	ldr	r2, [r7, #20]
 800efe8:	621a      	str	r2, [r3, #32]
}
 800efea:	bf00      	nop
 800efec:	371c      	adds	r7, #28
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr
 800eff6:	bf00      	nop
 800eff8:	40010000 	.word	0x40010000
 800effc:	40010400 	.word	0x40010400

0800f000 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f000:	b480      	push	{r7}
 800f002:	b087      	sub	sp, #28
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	6a1b      	ldr	r3, [r3, #32]
 800f00e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6a1b      	ldr	r3, [r3, #32]
 800f014:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	685b      	ldr	r3, [r3, #4]
 800f020:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	69db      	ldr	r3, [r3, #28]
 800f026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f02e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f030:	68fb      	ldr	r3, [r7, #12]
 800f032:	f023 0303 	bic.w	r3, r3, #3
 800f036:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	68fa      	ldr	r2, [r7, #12]
 800f03e:	4313      	orrs	r3, r2
 800f040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f042:	697b      	ldr	r3, [r7, #20]
 800f044:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800f048:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	689b      	ldr	r3, [r3, #8]
 800f04e:	021b      	lsls	r3, r3, #8
 800f050:	697a      	ldr	r2, [r7, #20]
 800f052:	4313      	orrs	r3, r2
 800f054:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4a21      	ldr	r2, [pc, #132]	@ (800f0e0 <TIM_OC3_SetConfig+0xe0>)
 800f05a:	4293      	cmp	r3, r2
 800f05c:	d003      	beq.n	800f066 <TIM_OC3_SetConfig+0x66>
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	4a20      	ldr	r2, [pc, #128]	@ (800f0e4 <TIM_OC3_SetConfig+0xe4>)
 800f062:	4293      	cmp	r3, r2
 800f064:	d10d      	bne.n	800f082 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800f06c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f06e:	683b      	ldr	r3, [r7, #0]
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	021b      	lsls	r3, r3, #8
 800f074:	697a      	ldr	r2, [r7, #20]
 800f076:	4313      	orrs	r3, r2
 800f078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800f080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4a16      	ldr	r2, [pc, #88]	@ (800f0e0 <TIM_OC3_SetConfig+0xe0>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d003      	beq.n	800f092 <TIM_OC3_SetConfig+0x92>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a15      	ldr	r2, [pc, #84]	@ (800f0e4 <TIM_OC3_SetConfig+0xe4>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d113      	bne.n	800f0ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f092:	693b      	ldr	r3, [r7, #16]
 800f094:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f09a:	693b      	ldr	r3, [r7, #16]
 800f09c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f0a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f0a2:	683b      	ldr	r3, [r7, #0]
 800f0a4:	695b      	ldr	r3, [r3, #20]
 800f0a6:	011b      	lsls	r3, r3, #4
 800f0a8:	693a      	ldr	r2, [r7, #16]
 800f0aa:	4313      	orrs	r3, r2
 800f0ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	699b      	ldr	r3, [r3, #24]
 800f0b2:	011b      	lsls	r3, r3, #4
 800f0b4:	693a      	ldr	r2, [r7, #16]
 800f0b6:	4313      	orrs	r3, r2
 800f0b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	693a      	ldr	r2, [r7, #16]
 800f0be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	68fa      	ldr	r2, [r7, #12]
 800f0c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f0c6:	683b      	ldr	r3, [r7, #0]
 800f0c8:	685a      	ldr	r2, [r3, #4]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	697a      	ldr	r2, [r7, #20]
 800f0d2:	621a      	str	r2, [r3, #32]
}
 800f0d4:	bf00      	nop
 800f0d6:	371c      	adds	r7, #28
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr
 800f0e0:	40010000 	.word	0x40010000
 800f0e4:	40010400 	.word	0x40010400

0800f0e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f0e8:	b480      	push	{r7}
 800f0ea:	b087      	sub	sp, #28
 800f0ec:	af00      	add	r7, sp, #0
 800f0ee:	6078      	str	r0, [r7, #4]
 800f0f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6a1b      	ldr	r3, [r3, #32]
 800f0f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	6a1b      	ldr	r3, [r3, #32]
 800f0fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	69db      	ldr	r3, [r3, #28]
 800f10e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800f116:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800f11e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f120:	683b      	ldr	r3, [r7, #0]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	021b      	lsls	r3, r3, #8
 800f126:	68fa      	ldr	r2, [r7, #12]
 800f128:	4313      	orrs	r3, r2
 800f12a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800f132:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f134:	683b      	ldr	r3, [r7, #0]
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	031b      	lsls	r3, r3, #12
 800f13a:	693a      	ldr	r2, [r7, #16]
 800f13c:	4313      	orrs	r3, r2
 800f13e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	4a12      	ldr	r2, [pc, #72]	@ (800f18c <TIM_OC4_SetConfig+0xa4>)
 800f144:	4293      	cmp	r3, r2
 800f146:	d003      	beq.n	800f150 <TIM_OC4_SetConfig+0x68>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	4a11      	ldr	r2, [pc, #68]	@ (800f190 <TIM_OC4_SetConfig+0xa8>)
 800f14c:	4293      	cmp	r3, r2
 800f14e:	d109      	bne.n	800f164 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800f156:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f158:	683b      	ldr	r3, [r7, #0]
 800f15a:	695b      	ldr	r3, [r3, #20]
 800f15c:	019b      	lsls	r3, r3, #6
 800f15e:	697a      	ldr	r2, [r7, #20]
 800f160:	4313      	orrs	r3, r2
 800f162:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	697a      	ldr	r2, [r7, #20]
 800f168:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	68fa      	ldr	r2, [r7, #12]
 800f16e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f170:	683b      	ldr	r3, [r7, #0]
 800f172:	685a      	ldr	r2, [r3, #4]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	693a      	ldr	r2, [r7, #16]
 800f17c:	621a      	str	r2, [r3, #32]
}
 800f17e:	bf00      	nop
 800f180:	371c      	adds	r7, #28
 800f182:	46bd      	mov	sp, r7
 800f184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f188:	4770      	bx	lr
 800f18a:	bf00      	nop
 800f18c:	40010000 	.word	0x40010000
 800f190:	40010400 	.word	0x40010400

0800f194 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f194:	b480      	push	{r7}
 800f196:	b087      	sub	sp, #28
 800f198:	af00      	add	r7, sp, #0
 800f19a:	60f8      	str	r0, [r7, #12]
 800f19c:	60b9      	str	r1, [r7, #8]
 800f19e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	6a1b      	ldr	r3, [r3, #32]
 800f1a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	6a1b      	ldr	r3, [r3, #32]
 800f1aa:	f023 0201 	bic.w	r2, r3, #1
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	699b      	ldr	r3, [r3, #24]
 800f1b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f1b8:	693b      	ldr	r3, [r7, #16]
 800f1ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800f1be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	011b      	lsls	r3, r3, #4
 800f1c4:	693a      	ldr	r2, [r7, #16]
 800f1c6:	4313      	orrs	r3, r2
 800f1c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	f023 030a 	bic.w	r3, r3, #10
 800f1d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f1d2:	697a      	ldr	r2, [r7, #20]
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	4313      	orrs	r3, r2
 800f1d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f1da:	68fb      	ldr	r3, [r7, #12]
 800f1dc:	693a      	ldr	r2, [r7, #16]
 800f1de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f1e0:	68fb      	ldr	r3, [r7, #12]
 800f1e2:	697a      	ldr	r2, [r7, #20]
 800f1e4:	621a      	str	r2, [r3, #32]
}
 800f1e6:	bf00      	nop
 800f1e8:	371c      	adds	r7, #28
 800f1ea:	46bd      	mov	sp, r7
 800f1ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f0:	4770      	bx	lr

0800f1f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f1f2:	b480      	push	{r7}
 800f1f4:	b087      	sub	sp, #28
 800f1f6:	af00      	add	r7, sp, #0
 800f1f8:	60f8      	str	r0, [r7, #12]
 800f1fa:	60b9      	str	r1, [r7, #8]
 800f1fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f1fe:	68fb      	ldr	r3, [r7, #12]
 800f200:	6a1b      	ldr	r3, [r3, #32]
 800f202:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6a1b      	ldr	r3, [r3, #32]
 800f208:	f023 0210 	bic.w	r2, r3, #16
 800f20c:	68fb      	ldr	r3, [r7, #12]
 800f20e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f210:	68fb      	ldr	r3, [r7, #12]
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f216:	693b      	ldr	r3, [r7, #16]
 800f218:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800f21c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f21e:	687b      	ldr	r3, [r7, #4]
 800f220:	031b      	lsls	r3, r3, #12
 800f222:	693a      	ldr	r2, [r7, #16]
 800f224:	4313      	orrs	r3, r2
 800f226:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f228:	697b      	ldr	r3, [r7, #20]
 800f22a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800f22e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	011b      	lsls	r3, r3, #4
 800f234:	697a      	ldr	r2, [r7, #20]
 800f236:	4313      	orrs	r3, r2
 800f238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f23a:	68fb      	ldr	r3, [r7, #12]
 800f23c:	693a      	ldr	r2, [r7, #16]
 800f23e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f240:	68fb      	ldr	r3, [r7, #12]
 800f242:	697a      	ldr	r2, [r7, #20]
 800f244:	621a      	str	r2, [r3, #32]
}
 800f246:	bf00      	nop
 800f248:	371c      	adds	r7, #28
 800f24a:	46bd      	mov	sp, r7
 800f24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f250:	4770      	bx	lr

0800f252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f252:	b480      	push	{r7}
 800f254:	b085      	sub	sp, #20
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
 800f25a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	689b      	ldr	r3, [r3, #8]
 800f260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f262:	68fb      	ldr	r3, [r7, #12]
 800f264:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f26a:	683a      	ldr	r2, [r7, #0]
 800f26c:	68fb      	ldr	r3, [r7, #12]
 800f26e:	4313      	orrs	r3, r2
 800f270:	f043 0307 	orr.w	r3, r3, #7
 800f274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	609a      	str	r2, [r3, #8]
}
 800f27c:	bf00      	nop
 800f27e:	3714      	adds	r7, #20
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f288:	b480      	push	{r7}
 800f28a:	b087      	sub	sp, #28
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
 800f294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f296:	68fb      	ldr	r3, [r7, #12]
 800f298:	689b      	ldr	r3, [r3, #8]
 800f29a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800f2a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	021a      	lsls	r2, r3, #8
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	431a      	orrs	r2, r3
 800f2ac:	68bb      	ldr	r3, [r7, #8]
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	697a      	ldr	r2, [r7, #20]
 800f2b2:	4313      	orrs	r3, r2
 800f2b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	697a      	ldr	r2, [r7, #20]
 800f2ba:	609a      	str	r2, [r3, #8]
}
 800f2bc:	bf00      	nop
 800f2be:	371c      	adds	r7, #28
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b087      	sub	sp, #28
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	60f8      	str	r0, [r7, #12]
 800f2d0:	60b9      	str	r1, [r7, #8]
 800f2d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f2d4:	68bb      	ldr	r3, [r7, #8]
 800f2d6:	f003 031f 	and.w	r3, r3, #31
 800f2da:	2201      	movs	r2, #1
 800f2dc:	fa02 f303 	lsl.w	r3, r2, r3
 800f2e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	6a1a      	ldr	r2, [r3, #32]
 800f2e6:	697b      	ldr	r3, [r7, #20]
 800f2e8:	43db      	mvns	r3, r3
 800f2ea:	401a      	ands	r2, r3
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	6a1a      	ldr	r2, [r3, #32]
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	f003 031f 	and.w	r3, r3, #31
 800f2fa:	6879      	ldr	r1, [r7, #4]
 800f2fc:	fa01 f303 	lsl.w	r3, r1, r3
 800f300:	431a      	orrs	r2, r3
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	621a      	str	r2, [r3, #32]
}
 800f306:	bf00      	nop
 800f308:	371c      	adds	r7, #28
 800f30a:	46bd      	mov	sp, r7
 800f30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f310:	4770      	bx	lr
	...

0800f314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f314:	b480      	push	{r7}
 800f316:	b085      	sub	sp, #20
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f31e:	687b      	ldr	r3, [r7, #4]
 800f320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800f324:	2b01      	cmp	r3, #1
 800f326:	d101      	bne.n	800f32c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f328:	2302      	movs	r3, #2
 800f32a:	e05a      	b.n	800f3e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	2201      	movs	r2, #1
 800f330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2202      	movs	r2, #2
 800f338:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	685b      	ldr	r3, [r3, #4]
 800f342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	689b      	ldr	r3, [r3, #8]
 800f34a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800f352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f354:	683b      	ldr	r3, [r7, #0]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	4313      	orrs	r3, r2
 800f35c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	681b      	ldr	r3, [r3, #0]
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	4a21      	ldr	r2, [pc, #132]	@ (800f3f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800f36c:	4293      	cmp	r3, r2
 800f36e:	d022      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f378:	d01d      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	4a1d      	ldr	r2, [pc, #116]	@ (800f3f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800f380:	4293      	cmp	r3, r2
 800f382:	d018      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	681b      	ldr	r3, [r3, #0]
 800f388:	4a1b      	ldr	r2, [pc, #108]	@ (800f3f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800f38a:	4293      	cmp	r3, r2
 800f38c:	d013      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	681b      	ldr	r3, [r3, #0]
 800f392:	4a1a      	ldr	r2, [pc, #104]	@ (800f3fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800f394:	4293      	cmp	r3, r2
 800f396:	d00e      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	4a18      	ldr	r2, [pc, #96]	@ (800f400 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800f39e:	4293      	cmp	r3, r2
 800f3a0:	d009      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	4a17      	ldr	r2, [pc, #92]	@ (800f404 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d004      	beq.n	800f3b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	4a15      	ldr	r2, [pc, #84]	@ (800f408 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d10c      	bne.n	800f3d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f3b6:	68bb      	ldr	r3, [r7, #8]
 800f3b8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f3bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f3be:	683b      	ldr	r3, [r7, #0]
 800f3c0:	685b      	ldr	r3, [r3, #4]
 800f3c2:	68ba      	ldr	r2, [r7, #8]
 800f3c4:	4313      	orrs	r3, r2
 800f3c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	68ba      	ldr	r2, [r7, #8]
 800f3ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f3e0:	2300      	movs	r3, #0
}
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	3714      	adds	r7, #20
 800f3e6:	46bd      	mov	sp, r7
 800f3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ec:	4770      	bx	lr
 800f3ee:	bf00      	nop
 800f3f0:	40010000 	.word	0x40010000
 800f3f4:	40000400 	.word	0x40000400
 800f3f8:	40000800 	.word	0x40000800
 800f3fc:	40000c00 	.word	0x40000c00
 800f400:	40010400 	.word	0x40010400
 800f404:	40014000 	.word	0x40014000
 800f408:	40001800 	.word	0x40001800

0800f40c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f40c:	b480      	push	{r7}
 800f40e:	b083      	sub	sp, #12
 800f410:	af00      	add	r7, sp, #0
 800f412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f414:	bf00      	nop
 800f416:	370c      	adds	r7, #12
 800f418:	46bd      	mov	sp, r7
 800f41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41e:	4770      	bx	lr

0800f420 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f420:	b480      	push	{r7}
 800f422:	b083      	sub	sp, #12
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f428:	bf00      	nop
 800f42a:	370c      	adds	r7, #12
 800f42c:	46bd      	mov	sp, r7
 800f42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f432:	4770      	bx	lr

0800f434 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f434:	b580      	push	{r7, lr}
 800f436:	b082      	sub	sp, #8
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d101      	bne.n	800f446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f442:	2301      	movs	r3, #1
 800f444:	e042      	b.n	800f4cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f44c:	b2db      	uxtb	r3, r3
 800f44e:	2b00      	cmp	r3, #0
 800f450:	d106      	bne.n	800f460 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	2200      	movs	r2, #0
 800f456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f7fa fd6e 	bl	8009f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2224      	movs	r2, #36	@ 0x24
 800f464:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	681b      	ldr	r3, [r3, #0]
 800f46c:	68da      	ldr	r2, [r3, #12]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f476:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800f478:	6878      	ldr	r0, [r7, #4]
 800f47a:	f000 ff5f 	bl	801033c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	691a      	ldr	r2, [r3, #16]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800f48c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	695a      	ldr	r2, [r3, #20]
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	681b      	ldr	r3, [r3, #0]
 800f498:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800f49c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	681b      	ldr	r3, [r3, #0]
 800f4a2:	68da      	ldr	r2, [r3, #12]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800f4ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	2200      	movs	r2, #0
 800f4b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	2220      	movs	r2, #32
 800f4b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	2220      	movs	r2, #32
 800f4c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800f4ca:	2300      	movs	r3, #0
}
 800f4cc:	4618      	mov	r0, r3
 800f4ce:	3708      	adds	r7, #8
 800f4d0:	46bd      	mov	sp, r7
 800f4d2:	bd80      	pop	{r7, pc}

0800f4d4 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d101      	bne.n	800f4e6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e024      	b.n	800f530 <HAL_UART_DeInit+0x5c>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	2224      	movs	r2, #36	@ 0x24
 800f4ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	68da      	ldr	r2, [r3, #12]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800f4fc:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800f4fe:	6878      	ldr	r0, [r7, #4]
 800f500:	f7fa fdd2 	bl	800a0a8 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	2200      	movs	r2, #0
 800f508:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_RESET;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_RESET;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	2200      	movs	r2, #0
 800f516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	631a      	str	r2, [r3, #48]	@ 0x30
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	2200      	movs	r2, #0
 800f524:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	2200      	movs	r2, #0
 800f52a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800f52e:	2300      	movs	r3, #0
}
 800f530:	4618      	mov	r0, r3
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b08c      	sub	sp, #48	@ 0x30
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	60f8      	str	r0, [r7, #12]
 800f540:	60b9      	str	r1, [r7, #8]
 800f542:	4613      	mov	r3, r2
 800f544:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800f54c:	b2db      	uxtb	r3, r3
 800f54e:	2b20      	cmp	r3, #32
 800f550:	d156      	bne.n	800f600 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	2b00      	cmp	r3, #0
 800f556:	d002      	beq.n	800f55e <HAL_UART_Transmit_DMA+0x26>
 800f558:	88fb      	ldrh	r3, [r7, #6]
 800f55a:	2b00      	cmp	r3, #0
 800f55c:	d101      	bne.n	800f562 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800f55e:	2301      	movs	r3, #1
 800f560:	e04f      	b.n	800f602 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800f562:	68ba      	ldr	r2, [r7, #8]
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	88fa      	ldrh	r2, [r7, #6]
 800f56c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	88fa      	ldrh	r2, [r7, #6]
 800f572:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f574:	68fb      	ldr	r3, [r7, #12]
 800f576:	2200      	movs	r2, #0
 800f578:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	2221      	movs	r2, #33	@ 0x21
 800f57e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f586:	4a21      	ldr	r2, [pc, #132]	@ (800f60c <HAL_UART_Transmit_DMA+0xd4>)
 800f588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f58e:	4a20      	ldr	r2, [pc, #128]	@ (800f610 <HAL_UART_Transmit_DMA+0xd8>)
 800f590:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f596:	4a1f      	ldr	r2, [pc, #124]	@ (800f614 <HAL_UART_Transmit_DMA+0xdc>)
 800f598:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f59e:	2200      	movs	r2, #0
 800f5a0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800f5a2:	f107 0308 	add.w	r3, r7, #8
 800f5a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800f5ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5ae:	6819      	ldr	r1, [r3, #0]
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	681b      	ldr	r3, [r3, #0]
 800f5b4:	3304      	adds	r3, #4
 800f5b6:	461a      	mov	r2, r3
 800f5b8:	88fb      	ldrh	r3, [r7, #6]
 800f5ba:	f7fb fb51 	bl	800ac60 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	681b      	ldr	r3, [r3, #0]
 800f5c2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800f5c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	3314      	adds	r3, #20
 800f5ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f5d0:	69bb      	ldr	r3, [r7, #24]
 800f5d2:	e853 3f00 	ldrex	r3, [r3]
 800f5d6:	617b      	str	r3, [r7, #20]
   return(result);
 800f5d8:	697b      	ldr	r3, [r7, #20]
 800f5da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f5de:	62bb      	str	r3, [r7, #40]	@ 0x28
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	681b      	ldr	r3, [r3, #0]
 800f5e4:	3314      	adds	r3, #20
 800f5e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f5e8:	627a      	str	r2, [r7, #36]	@ 0x24
 800f5ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f5ec:	6a39      	ldr	r1, [r7, #32]
 800f5ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f5f0:	e841 2300 	strex	r3, r2, [r1]
 800f5f4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f5f6:	69fb      	ldr	r3, [r7, #28]
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	d1e5      	bne.n	800f5c8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	e000      	b.n	800f602 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 800f600:	2302      	movs	r3, #2
  }
}
 800f602:	4618      	mov	r0, r3
 800f604:	3730      	adds	r7, #48	@ 0x30
 800f606:	46bd      	mov	sp, r7
 800f608:	bd80      	pop	{r7, pc}
 800f60a:	bf00      	nop
 800f60c:	0800fbc9 	.word	0x0800fbc9
 800f610:	0800fc63 	.word	0x0800fc63
 800f614:	0800fde7 	.word	0x0800fde7

0800f618 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f618:	b580      	push	{r7, lr}
 800f61a:	b084      	sub	sp, #16
 800f61c:	af00      	add	r7, sp, #0
 800f61e:	60f8      	str	r0, [r7, #12]
 800f620:	60b9      	str	r1, [r7, #8]
 800f622:	4613      	mov	r3, r2
 800f624:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800f62c:	b2db      	uxtb	r3, r3
 800f62e:	2b20      	cmp	r3, #32
 800f630:	d112      	bne.n	800f658 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d002      	beq.n	800f63e <HAL_UART_Receive_DMA+0x26>
 800f638:	88fb      	ldrh	r3, [r7, #6]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d101      	bne.n	800f642 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800f63e:	2301      	movs	r3, #1
 800f640:	e00b      	b.n	800f65a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	2200      	movs	r2, #0
 800f646:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800f648:	88fb      	ldrh	r3, [r7, #6]
 800f64a:	461a      	mov	r2, r3
 800f64c:	68b9      	ldr	r1, [r7, #8]
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f000 fc14 	bl	800fe7c <UART_Start_Receive_DMA>
 800f654:	4603      	mov	r3, r0
 800f656:	e000      	b.n	800f65a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 800f658:	2302      	movs	r3, #2
  }
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	3710      	adds	r7, #16
 800f65e:	46bd      	mov	sp, r7
 800f660:	bd80      	pop	{r7, pc}
	...

0800f664 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b0ba      	sub	sp, #232	@ 0xe8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	68db      	ldr	r3, [r3, #12]
 800f67c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	695b      	ldr	r3, [r3, #20]
 800f686:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800f68a:	2300      	movs	r3, #0
 800f68c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800f690:	2300      	movs	r3, #0
 800f692:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800f696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f69a:	f003 030f 	and.w	r3, r3, #15
 800f69e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800f6a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	d10f      	bne.n	800f6ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f6aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6ae:	f003 0320 	and.w	r3, r3, #32
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	d009      	beq.n	800f6ca <HAL_UART_IRQHandler+0x66>
 800f6b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6ba:	f003 0320 	and.w	r3, r3, #32
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d003      	beq.n	800f6ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f000 fd7b 	bl	80101be <UART_Receive_IT>
      return;
 800f6c8:	e25b      	b.n	800fb82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800f6ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	f000 80de 	beq.w	800f890 <HAL_UART_IRQHandler+0x22c>
 800f6d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f6d8:	f003 0301 	and.w	r3, r3, #1
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d106      	bne.n	800f6ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800f6e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	f000 80d1 	beq.w	800f890 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800f6ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f6f2:	f003 0301 	and.w	r3, r3, #1
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d00b      	beq.n	800f712 <HAL_UART_IRQHandler+0xae>
 800f6fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f6fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f702:	2b00      	cmp	r3, #0
 800f704:	d005      	beq.n	800f712 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f706:	687b      	ldr	r3, [r7, #4]
 800f708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f70a:	f043 0201 	orr.w	r2, r3, #1
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f712:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f716:	f003 0304 	and.w	r3, r3, #4
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d00b      	beq.n	800f736 <HAL_UART_IRQHandler+0xd2>
 800f71e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f722:	f003 0301 	and.w	r3, r3, #1
 800f726:	2b00      	cmp	r3, #0
 800f728:	d005      	beq.n	800f736 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f72e:	f043 0202 	orr.w	r2, r3, #2
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800f736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f73a:	f003 0302 	and.w	r3, r3, #2
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d00b      	beq.n	800f75a <HAL_UART_IRQHandler+0xf6>
 800f742:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f746:	f003 0301 	and.w	r3, r3, #1
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d005      	beq.n	800f75a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f752:	f043 0204 	orr.w	r2, r3, #4
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800f75a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f75e:	f003 0308 	and.w	r3, r3, #8
 800f762:	2b00      	cmp	r3, #0
 800f764:	d011      	beq.n	800f78a <HAL_UART_IRQHandler+0x126>
 800f766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f76a:	f003 0320 	and.w	r3, r3, #32
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d105      	bne.n	800f77e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800f772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800f776:	f003 0301 	and.w	r3, r3, #1
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d005      	beq.n	800f78a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f782:	f043 0208 	orr.w	r2, r3, #8
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f78e:	2b00      	cmp	r3, #0
 800f790:	f000 81f2 	beq.w	800fb78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800f794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f798:	f003 0320 	and.w	r3, r3, #32
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d008      	beq.n	800f7b2 <HAL_UART_IRQHandler+0x14e>
 800f7a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f7a4:	f003 0320 	and.w	r3, r3, #32
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d002      	beq.n	800f7b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 fd06 	bl	80101be <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	681b      	ldr	r3, [r3, #0]
 800f7b6:	695b      	ldr	r3, [r3, #20]
 800f7b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7bc:	2b40      	cmp	r3, #64	@ 0x40
 800f7be:	bf0c      	ite	eq
 800f7c0:	2301      	moveq	r3, #1
 800f7c2:	2300      	movne	r3, #0
 800f7c4:	b2db      	uxtb	r3, r3
 800f7c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7ce:	f003 0308 	and.w	r3, r3, #8
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d103      	bne.n	800f7de <HAL_UART_IRQHandler+0x17a>
 800f7d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	d04f      	beq.n	800f87e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800f7de:	6878      	ldr	r0, [r7, #4]
 800f7e0:	f000 fc0e 	bl	8010000 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	695b      	ldr	r3, [r3, #20]
 800f7ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f7ee:	2b40      	cmp	r3, #64	@ 0x40
 800f7f0:	d141      	bne.n	800f876 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	3314      	adds	r3, #20
 800f7f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f7fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800f800:	e853 3f00 	ldrex	r3, [r3]
 800f804:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800f808:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800f80c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f810:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	3314      	adds	r3, #20
 800f81a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800f81e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800f822:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f826:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800f82a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800f82e:	e841 2300 	strex	r3, r2, [r1]
 800f832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800f836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d1d9      	bne.n	800f7f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f842:	2b00      	cmp	r3, #0
 800f844:	d013      	beq.n	800f86e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f84a:	4a7e      	ldr	r2, [pc, #504]	@ (800fa44 <HAL_UART_IRQHandler+0x3e0>)
 800f84c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f852:	4618      	mov	r0, r3
 800f854:	f7fb facc 	bl	800adf0 <HAL_DMA_Abort_IT>
 800f858:	4603      	mov	r3, r0
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d016      	beq.n	800f88c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800f868:	4610      	mov	r0, r2
 800f86a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f86c:	e00e      	b.n	800f88c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800f86e:	6878      	ldr	r0, [r7, #4]
 800f870:	f7fa fd90 	bl	800a394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f874:	e00a      	b.n	800f88c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800f876:	6878      	ldr	r0, [r7, #4]
 800f878:	f7fa fd8c 	bl	800a394 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f87c:	e006      	b.n	800f88c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f87e:	6878      	ldr	r0, [r7, #4]
 800f880:	f7fa fd88 	bl	800a394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f884:	687b      	ldr	r3, [r7, #4]
 800f886:	2200      	movs	r2, #0
 800f888:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800f88a:	e175      	b.n	800fb78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f88c:	bf00      	nop
    return;
 800f88e:	e173      	b.n	800fb78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f894:	2b01      	cmp	r3, #1
 800f896:	f040 814f 	bne.w	800fb38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800f89a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800f89e:	f003 0310 	and.w	r3, r3, #16
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	f000 8148 	beq.w	800fb38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800f8a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800f8ac:	f003 0310 	and.w	r3, r3, #16
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	f000 8141 	beq.w	800fb38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800f8b6:	2300      	movs	r3, #0
 800f8b8:	60bb      	str	r3, [r7, #8]
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	60bb      	str	r3, [r7, #8]
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	60bb      	str	r3, [r7, #8]
 800f8ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	695b      	ldr	r3, [r3, #20]
 800f8d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f8d6:	2b40      	cmp	r3, #64	@ 0x40
 800f8d8:	f040 80b6 	bne.w	800fa48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	685b      	ldr	r3, [r3, #4]
 800f8e4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f8e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f000 8145 	beq.w	800fb7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800f8f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f8fa:	429a      	cmp	r2, r3
 800f8fc:	f080 813e 	bcs.w	800fb7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800f906:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f90c:	69db      	ldr	r3, [r3, #28]
 800f90e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f912:	f000 8088 	beq.w	800fa26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	330c      	adds	r3, #12
 800f91c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f920:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800f924:	e853 3f00 	ldrex	r3, [r3]
 800f928:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800f92c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800f930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f934:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	330c      	adds	r3, #12
 800f93e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800f942:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800f946:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f94a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800f94e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800f952:	e841 2300 	strex	r3, r2, [r1]
 800f956:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800f95a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d1d9      	bne.n	800f916 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	3314      	adds	r3, #20
 800f968:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f96a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800f96c:	e853 3f00 	ldrex	r3, [r3]
 800f970:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800f972:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f974:	f023 0301 	bic.w	r3, r3, #1
 800f978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	3314      	adds	r3, #20
 800f982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800f986:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800f98a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f98c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800f98e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800f992:	e841 2300 	strex	r3, r2, [r1]
 800f996:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800f998:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d1e1      	bne.n	800f962 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	681b      	ldr	r3, [r3, #0]
 800f9a2:	3314      	adds	r3, #20
 800f9a4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800f9a8:	e853 3f00 	ldrex	r3, [r3]
 800f9ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800f9ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800f9b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800f9b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	3314      	adds	r3, #20
 800f9be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800f9c2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800f9c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9c6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800f9c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800f9ca:	e841 2300 	strex	r3, r2, [r1]
 800f9ce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800f9d0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d1e3      	bne.n	800f99e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	2220      	movs	r2, #32
 800f9da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	330c      	adds	r3, #12
 800f9ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f9ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f9ee:	e853 3f00 	ldrex	r3, [r3]
 800f9f2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800f9f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800f9f6:	f023 0310 	bic.w	r3, r3, #16
 800f9fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	330c      	adds	r3, #12
 800fa04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800fa08:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fa0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fa0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fa10:	e841 2300 	strex	r3, r2, [r1]
 800fa14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fa16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d1e3      	bne.n	800f9e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fa20:	4618      	mov	r0, r3
 800fa22:	f7fb f975 	bl	800ad10 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2202      	movs	r2, #2
 800fa2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fa2c:	687b      	ldr	r3, [r7, #4]
 800fa2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fa34:	b29b      	uxth	r3, r3
 800fa36:	1ad3      	subs	r3, r2, r3
 800fa38:	b29b      	uxth	r3, r3
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f000 f8b7 	bl	800fbb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fa42:	e09b      	b.n	800fb7c <HAL_UART_IRQHandler+0x518>
 800fa44:	080100c7 	.word	0x080100c7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fa50:	b29b      	uxth	r3, r3
 800fa52:	1ad3      	subs	r3, r2, r3
 800fa54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800fa5c:	b29b      	uxth	r3, r3
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f000 808e 	beq.w	800fb80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800fa64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	f000 8089 	beq.w	800fb80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	330c      	adds	r3, #12
 800fa74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fa78:	e853 3f00 	ldrex	r3, [r3]
 800fa7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fa7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fa80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800fa84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	330c      	adds	r3, #12
 800fa8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800fa92:	647a      	str	r2, [r7, #68]	@ 0x44
 800fa94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fa98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fa9a:	e841 2300 	strex	r3, r2, [r1]
 800fa9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800faa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d1e3      	bne.n	800fa6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	3314      	adds	r3, #20
 800faac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fab0:	e853 3f00 	ldrex	r3, [r3]
 800fab4:	623b      	str	r3, [r7, #32]
   return(result);
 800fab6:	6a3b      	ldr	r3, [r7, #32]
 800fab8:	f023 0301 	bic.w	r3, r3, #1
 800fabc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	3314      	adds	r3, #20
 800fac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800faca:	633a      	str	r2, [r7, #48]	@ 0x30
 800facc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800face:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fad2:	e841 2300 	strex	r3, r2, [r1]
 800fad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d1e3      	bne.n	800faa6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	2220      	movs	r2, #32
 800fae2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2200      	movs	r2, #0
 800faea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	330c      	adds	r3, #12
 800faf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800faf4:	693b      	ldr	r3, [r7, #16]
 800faf6:	e853 3f00 	ldrex	r3, [r3]
 800fafa:	60fb      	str	r3, [r7, #12]
   return(result);
 800fafc:	68fb      	ldr	r3, [r7, #12]
 800fafe:	f023 0310 	bic.w	r3, r3, #16
 800fb02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	681b      	ldr	r3, [r3, #0]
 800fb0a:	330c      	adds	r3, #12
 800fb0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800fb10:	61fa      	str	r2, [r7, #28]
 800fb12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb14:	69b9      	ldr	r1, [r7, #24]
 800fb16:	69fa      	ldr	r2, [r7, #28]
 800fb18:	e841 2300 	strex	r3, r2, [r1]
 800fb1c:	617b      	str	r3, [r7, #20]
   return(result);
 800fb1e:	697b      	ldr	r3, [r7, #20]
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d1e3      	bne.n	800faec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	2202      	movs	r2, #2
 800fb28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fb2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800fb2e:	4619      	mov	r1, r3
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 f83d 	bl	800fbb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800fb36:	e023      	b.n	800fb80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800fb38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d009      	beq.n	800fb58 <HAL_UART_IRQHandler+0x4f4>
 800fb44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d003      	beq.n	800fb58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800fb50:	6878      	ldr	r0, [r7, #4]
 800fb52:	f000 facc 	bl	80100ee <UART_Transmit_IT>
    return;
 800fb56:	e014      	b.n	800fb82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800fb58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800fb5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00e      	beq.n	800fb82 <HAL_UART_IRQHandler+0x51e>
 800fb64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800fb68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	d008      	beq.n	800fb82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f000 fb0c 	bl	801018e <UART_EndTransmit_IT>
    return;
 800fb76:	e004      	b.n	800fb82 <HAL_UART_IRQHandler+0x51e>
    return;
 800fb78:	bf00      	nop
 800fb7a:	e002      	b.n	800fb82 <HAL_UART_IRQHandler+0x51e>
      return;
 800fb7c:	bf00      	nop
 800fb7e:	e000      	b.n	800fb82 <HAL_UART_IRQHandler+0x51e>
      return;
 800fb80:	bf00      	nop
  }
}
 800fb82:	37e8      	adds	r7, #232	@ 0xe8
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fb88:	b480      	push	{r7}
 800fb8a:	b083      	sub	sp, #12
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr

0800fb9c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800fb9c:	b480      	push	{r7}
 800fb9e:	b083      	sub	sp, #12
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800fba4:	bf00      	nop
 800fba6:	370c      	adds	r7, #12
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbae:	4770      	bx	lr

0800fbb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800fbb0:	b480      	push	{r7}
 800fbb2:	b083      	sub	sp, #12
 800fbb4:	af00      	add	r7, sp, #0
 800fbb6:	6078      	str	r0, [r7, #4]
 800fbb8:	460b      	mov	r3, r1
 800fbba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800fbbc:	bf00      	nop
 800fbbe:	370c      	adds	r7, #12
 800fbc0:	46bd      	mov	sp, r7
 800fbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc6:	4770      	bx	lr

0800fbc8 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b090      	sub	sp, #64	@ 0x40
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fbd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	681b      	ldr	r3, [r3, #0]
 800fbdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d137      	bne.n	800fc54 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800fbe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbe6:	2200      	movs	r2, #0
 800fbe8:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fbea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	3314      	adds	r3, #20
 800fbf0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbf4:	e853 3f00 	ldrex	r3, [r3]
 800fbf8:	623b      	str	r3, [r7, #32]
   return(result);
 800fbfa:	6a3b      	ldr	r3, [r7, #32]
 800fbfc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800fc00:	63bb      	str	r3, [r7, #56]	@ 0x38
 800fc02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	3314      	adds	r3, #20
 800fc08:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800fc0a:	633a      	str	r2, [r7, #48]	@ 0x30
 800fc0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fc10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fc12:	e841 2300 	strex	r3, r2, [r1]
 800fc16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fc18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d1e5      	bne.n	800fbea <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fc1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	330c      	adds	r3, #12
 800fc24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc26:	693b      	ldr	r3, [r7, #16]
 800fc28:	e853 3f00 	ldrex	r3, [r3]
 800fc2c:	60fb      	str	r3, [r7, #12]
   return(result);
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fc34:	637b      	str	r3, [r7, #52]	@ 0x34
 800fc36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	330c      	adds	r3, #12
 800fc3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800fc3e:	61fa      	str	r2, [r7, #28]
 800fc40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc42:	69b9      	ldr	r1, [r7, #24]
 800fc44:	69fa      	ldr	r2, [r7, #28]
 800fc46:	e841 2300 	strex	r3, r2, [r1]
 800fc4a:	617b      	str	r3, [r7, #20]
   return(result);
 800fc4c:	697b      	ldr	r3, [r7, #20]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d1e5      	bne.n	800fc1e <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fc52:	e002      	b.n	800fc5a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800fc54:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800fc56:	f7fa fa67 	bl	800a128 <HAL_UART_TxCpltCallback>
}
 800fc5a:	bf00      	nop
 800fc5c:	3740      	adds	r7, #64	@ 0x40
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd80      	pop	{r7, pc}

0800fc62 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b084      	sub	sp, #16
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc6e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f7ff ff89 	bl	800fb88 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fc76:	bf00      	nop
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b09c      	sub	sp, #112	@ 0x70
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc8a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d172      	bne.n	800fd80 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800fc9a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fca0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	330c      	adds	r3, #12
 800fca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fca8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fcaa:	e853 3f00 	ldrex	r3, [r3]
 800fcae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800fcb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800fcb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800fcb6:	66bb      	str	r3, [r7, #104]	@ 0x68
 800fcb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	330c      	adds	r3, #12
 800fcbe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800fcc0:	65ba      	str	r2, [r7, #88]	@ 0x58
 800fcc2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800fcc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800fcc8:	e841 2300 	strex	r3, r2, [r1]
 800fccc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800fcce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d1e5      	bne.n	800fca0 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	3314      	adds	r3, #20
 800fcda:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800fcde:	e853 3f00 	ldrex	r3, [r3]
 800fce2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800fce4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800fce6:	f023 0301 	bic.w	r3, r3, #1
 800fcea:	667b      	str	r3, [r7, #100]	@ 0x64
 800fcec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	3314      	adds	r3, #20
 800fcf2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800fcf4:	647a      	str	r2, [r7, #68]	@ 0x44
 800fcf6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcf8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800fcfa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800fcfc:	e841 2300 	strex	r3, r2, [r1]
 800fd00:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800fd02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800fd04:	2b00      	cmp	r3, #0
 800fd06:	d1e5      	bne.n	800fcd4 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	3314      	adds	r3, #20
 800fd0e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd12:	e853 3f00 	ldrex	r3, [r3]
 800fd16:	623b      	str	r3, [r7, #32]
   return(result);
 800fd18:	6a3b      	ldr	r3, [r7, #32]
 800fd1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800fd1e:	663b      	str	r3, [r7, #96]	@ 0x60
 800fd20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd22:	681b      	ldr	r3, [r3, #0]
 800fd24:	3314      	adds	r3, #20
 800fd26:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800fd28:	633a      	str	r2, [r7, #48]	@ 0x30
 800fd2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd2c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800fd2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800fd30:	e841 2300 	strex	r3, r2, [r1]
 800fd34:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800fd36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d1e5      	bne.n	800fd08 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fd3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd3e:	2220      	movs	r2, #32
 800fd40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd48:	2b01      	cmp	r3, #1
 800fd4a:	d119      	bne.n	800fd80 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	330c      	adds	r3, #12
 800fd52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	e853 3f00 	ldrex	r3, [r3]
 800fd5a:	60fb      	str	r3, [r7, #12]
   return(result);
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	f023 0310 	bic.w	r3, r3, #16
 800fd62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800fd64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	330c      	adds	r3, #12
 800fd6a:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800fd6c:	61fa      	str	r2, [r7, #28]
 800fd6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd70:	69b9      	ldr	r1, [r7, #24]
 800fd72:	69fa      	ldr	r2, [r7, #28]
 800fd74:	e841 2300 	strex	r3, r2, [r1]
 800fd78:	617b      	str	r3, [r7, #20]
   return(result);
 800fd7a:	697b      	ldr	r3, [r7, #20]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d1e5      	bne.n	800fd4c <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800fd80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd82:	2200      	movs	r2, #0
 800fd84:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fd86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd8a:	2b01      	cmp	r3, #1
 800fd8c:	d106      	bne.n	800fd9c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800fd8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800fd90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fd92:	4619      	mov	r1, r3
 800fd94:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fd96:	f7ff ff0b 	bl	800fbb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fd9a:	e002      	b.n	800fda2 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800fd9c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800fd9e:	f7fa fa05 	bl	800a1ac <HAL_UART_RxCpltCallback>
}
 800fda2:	bf00      	nop
 800fda4:	3770      	adds	r7, #112	@ 0x70
 800fda6:	46bd      	mov	sp, r7
 800fda8:	bd80      	pop	{r7, pc}

0800fdaa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800fdaa:	b580      	push	{r7, lr}
 800fdac:	b084      	sub	sp, #16
 800fdae:	af00      	add	r7, sp, #0
 800fdb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdb6:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	2201      	movs	r2, #1
 800fdbc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdc2:	2b01      	cmp	r3, #1
 800fdc4:	d108      	bne.n	800fdd8 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800fdc6:	68fb      	ldr	r3, [r7, #12]
 800fdc8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800fdca:	085b      	lsrs	r3, r3, #1
 800fdcc:	b29b      	uxth	r3, r3
 800fdce:	4619      	mov	r1, r3
 800fdd0:	68f8      	ldr	r0, [r7, #12]
 800fdd2:	f7ff feed 	bl	800fbb0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800fdd6:	e002      	b.n	800fdde <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f7ff fedf 	bl	800fb9c <HAL_UART_RxHalfCpltCallback>
}
 800fdde:	bf00      	nop
 800fde0:	3710      	adds	r7, #16
 800fde2:	46bd      	mov	sp, r7
 800fde4:	bd80      	pop	{r7, pc}

0800fde6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b084      	sub	sp, #16
 800fdea:	af00      	add	r7, sp, #0
 800fdec:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdf6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800fdf8:	68bb      	ldr	r3, [r7, #8]
 800fdfa:	681b      	ldr	r3, [r3, #0]
 800fdfc:	695b      	ldr	r3, [r3, #20]
 800fdfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe02:	2b80      	cmp	r3, #128	@ 0x80
 800fe04:	bf0c      	ite	eq
 800fe06:	2301      	moveq	r3, #1
 800fe08:	2300      	movne	r3, #0
 800fe0a:	b2db      	uxtb	r3, r3
 800fe0c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800fe14:	b2db      	uxtb	r3, r3
 800fe16:	2b21      	cmp	r3, #33	@ 0x21
 800fe18:	d108      	bne.n	800fe2c <UART_DMAError+0x46>
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d005      	beq.n	800fe2c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800fe20:	68bb      	ldr	r3, [r7, #8]
 800fe22:	2200      	movs	r2, #0
 800fe24:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800fe26:	68b8      	ldr	r0, [r7, #8]
 800fe28:	f000 f8c2 	bl	800ffb0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800fe2c:	68bb      	ldr	r3, [r7, #8]
 800fe2e:	681b      	ldr	r3, [r3, #0]
 800fe30:	695b      	ldr	r3, [r3, #20]
 800fe32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fe36:	2b40      	cmp	r3, #64	@ 0x40
 800fe38:	bf0c      	ite	eq
 800fe3a:	2301      	moveq	r3, #1
 800fe3c:	2300      	movne	r3, #0
 800fe3e:	b2db      	uxtb	r3, r3
 800fe40:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800fe42:	68bb      	ldr	r3, [r7, #8]
 800fe44:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800fe48:	b2db      	uxtb	r3, r3
 800fe4a:	2b22      	cmp	r3, #34	@ 0x22
 800fe4c:	d108      	bne.n	800fe60 <UART_DMAError+0x7a>
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d005      	beq.n	800fe60 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800fe54:	68bb      	ldr	r3, [r7, #8]
 800fe56:	2200      	movs	r2, #0
 800fe58:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800fe5a:	68b8      	ldr	r0, [r7, #8]
 800fe5c:	f000 f8d0 	bl	8010000 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800fe60:	68bb      	ldr	r3, [r7, #8]
 800fe62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe64:	f043 0210 	orr.w	r2, r3, #16
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800fe6c:	68b8      	ldr	r0, [r7, #8]
 800fe6e:	f7fa fa91 	bl	800a394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fe72:	bf00      	nop
 800fe74:	3710      	adds	r7, #16
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
	...

0800fe7c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b098      	sub	sp, #96	@ 0x60
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	60f8      	str	r0, [r7, #12]
 800fe84:	60b9      	str	r1, [r7, #8]
 800fe86:	4613      	mov	r3, r2
 800fe88:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800fe8a:	68ba      	ldr	r2, [r7, #8]
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	88fa      	ldrh	r2, [r7, #6]
 800fe94:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe96:	68fb      	ldr	r3, [r7, #12]
 800fe98:	2200      	movs	r2, #0
 800fe9a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	2222      	movs	r2, #34	@ 0x22
 800fea0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fea8:	4a3e      	ldr	r2, [pc, #248]	@ (800ffa4 <UART_Start_Receive_DMA+0x128>)
 800feaa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800feac:	68fb      	ldr	r3, [r7, #12]
 800feae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800feb0:	4a3d      	ldr	r2, [pc, #244]	@ (800ffa8 <UART_Start_Receive_DMA+0x12c>)
 800feb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800feb8:	4a3c      	ldr	r2, [pc, #240]	@ (800ffac <UART_Start_Receive_DMA+0x130>)
 800feba:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fec0:	2200      	movs	r2, #0
 800fec2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800fec4:	f107 0308 	add.w	r3, r7, #8
 800fec8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	681b      	ldr	r3, [r3, #0]
 800fed2:	3304      	adds	r3, #4
 800fed4:	4619      	mov	r1, r3
 800fed6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800fed8:	681a      	ldr	r2, [r3, #0]
 800feda:	88fb      	ldrh	r3, [r7, #6]
 800fedc:	f7fa fec0 	bl	800ac60 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800fee0:	2300      	movs	r3, #0
 800fee2:	613b      	str	r3, [r7, #16]
 800fee4:	68fb      	ldr	r3, [r7, #12]
 800fee6:	681b      	ldr	r3, [r3, #0]
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	613b      	str	r3, [r7, #16]
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	685b      	ldr	r3, [r3, #4]
 800fef2:	613b      	str	r3, [r7, #16]
 800fef4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	691b      	ldr	r3, [r3, #16]
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d019      	beq.n	800ff32 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	330c      	adds	r3, #12
 800ff04:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ff08:	e853 3f00 	ldrex	r3, [r3]
 800ff0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ff0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ff10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ff14:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	330c      	adds	r3, #12
 800ff1c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800ff1e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800ff20:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff22:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800ff24:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ff26:	e841 2300 	strex	r3, r2, [r1]
 800ff2a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800ff2c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	d1e5      	bne.n	800fefe <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	3314      	adds	r3, #20
 800ff38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ff3c:	e853 3f00 	ldrex	r3, [r3]
 800ff40:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ff42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ff44:	f043 0301 	orr.w	r3, r3, #1
 800ff48:	657b      	str	r3, [r7, #84]	@ 0x54
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	3314      	adds	r3, #20
 800ff50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ff52:	63ba      	str	r2, [r7, #56]	@ 0x38
 800ff54:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff56:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800ff58:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ff5a:	e841 2300 	strex	r3, r2, [r1]
 800ff5e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ff60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d1e5      	bne.n	800ff32 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	3314      	adds	r3, #20
 800ff6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff6e:	69bb      	ldr	r3, [r7, #24]
 800ff70:	e853 3f00 	ldrex	r3, [r3]
 800ff74:	617b      	str	r3, [r7, #20]
   return(result);
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ff7c:	653b      	str	r3, [r7, #80]	@ 0x50
 800ff7e:	68fb      	ldr	r3, [r7, #12]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	3314      	adds	r3, #20
 800ff84:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800ff86:	627a      	str	r2, [r7, #36]	@ 0x24
 800ff88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff8a:	6a39      	ldr	r1, [r7, #32]
 800ff8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ff8e:	e841 2300 	strex	r3, r2, [r1]
 800ff92:	61fb      	str	r3, [r7, #28]
   return(result);
 800ff94:	69fb      	ldr	r3, [r7, #28]
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	d1e5      	bne.n	800ff66 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800ff9a:	2300      	movs	r3, #0
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	3760      	adds	r7, #96	@ 0x60
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	bd80      	pop	{r7, pc}
 800ffa4:	0800fc7f 	.word	0x0800fc7f
 800ffa8:	0800fdab 	.word	0x0800fdab
 800ffac:	0800fde7 	.word	0x0800fde7

0800ffb0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ffb0:	b480      	push	{r7}
 800ffb2:	b089      	sub	sp, #36	@ 0x24
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	330c      	adds	r3, #12
 800ffbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	e853 3f00 	ldrex	r3, [r3]
 800ffc6:	60bb      	str	r3, [r7, #8]
   return(result);
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800ffce:	61fb      	str	r3, [r7, #28]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	681b      	ldr	r3, [r3, #0]
 800ffd4:	330c      	adds	r3, #12
 800ffd6:	69fa      	ldr	r2, [r7, #28]
 800ffd8:	61ba      	str	r2, [r7, #24]
 800ffda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ffdc:	6979      	ldr	r1, [r7, #20]
 800ffde:	69ba      	ldr	r2, [r7, #24]
 800ffe0:	e841 2300 	strex	r3, r2, [r1]
 800ffe4:	613b      	str	r3, [r7, #16]
   return(result);
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d1e5      	bne.n	800ffb8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	2220      	movs	r2, #32
 800fff0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800fff4:	bf00      	nop
 800fff6:	3724      	adds	r7, #36	@ 0x24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fffe:	4770      	bx	lr

08010000 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010000:	b480      	push	{r7}
 8010002:	b095      	sub	sp, #84	@ 0x54
 8010004:	af00      	add	r7, sp, #0
 8010006:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	681b      	ldr	r3, [r3, #0]
 801000c:	330c      	adds	r3, #12
 801000e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010012:	e853 3f00 	ldrex	r3, [r3]
 8010016:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8010018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801001a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801001e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	330c      	adds	r3, #12
 8010026:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010028:	643a      	str	r2, [r7, #64]	@ 0x40
 801002a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801002c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801002e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010030:	e841 2300 	strex	r3, r2, [r1]
 8010034:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8010036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010038:	2b00      	cmp	r3, #0
 801003a:	d1e5      	bne.n	8010008 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	3314      	adds	r3, #20
 8010042:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010044:	6a3b      	ldr	r3, [r7, #32]
 8010046:	e853 3f00 	ldrex	r3, [r3]
 801004a:	61fb      	str	r3, [r7, #28]
   return(result);
 801004c:	69fb      	ldr	r3, [r7, #28]
 801004e:	f023 0301 	bic.w	r3, r3, #1
 8010052:	64bb      	str	r3, [r7, #72]	@ 0x48
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	681b      	ldr	r3, [r3, #0]
 8010058:	3314      	adds	r3, #20
 801005a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801005c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801005e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010060:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010062:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010064:	e841 2300 	strex	r3, r2, [r1]
 8010068:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801006a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801006c:	2b00      	cmp	r3, #0
 801006e:	d1e5      	bne.n	801003c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010074:	2b01      	cmp	r3, #1
 8010076:	d119      	bne.n	80100ac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	330c      	adds	r3, #12
 801007e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	e853 3f00 	ldrex	r3, [r3]
 8010086:	60bb      	str	r3, [r7, #8]
   return(result);
 8010088:	68bb      	ldr	r3, [r7, #8]
 801008a:	f023 0310 	bic.w	r3, r3, #16
 801008e:	647b      	str	r3, [r7, #68]	@ 0x44
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	330c      	adds	r3, #12
 8010096:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8010098:	61ba      	str	r2, [r7, #24]
 801009a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801009c:	6979      	ldr	r1, [r7, #20]
 801009e:	69ba      	ldr	r2, [r7, #24]
 80100a0:	e841 2300 	strex	r3, r2, [r1]
 80100a4:	613b      	str	r3, [r7, #16]
   return(result);
 80100a6:	693b      	ldr	r3, [r7, #16]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d1e5      	bne.n	8010078 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2220      	movs	r2, #32
 80100b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	2200      	movs	r2, #0
 80100b8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80100ba:	bf00      	nop
 80100bc:	3754      	adds	r7, #84	@ 0x54
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr

080100c6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80100c6:	b580      	push	{r7, lr}
 80100c8:	b084      	sub	sp, #16
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80100d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	2200      	movs	r2, #0
 80100d8:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	2200      	movs	r2, #0
 80100de:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80100e0:	68f8      	ldr	r0, [r7, #12]
 80100e2:	f7fa f957 	bl	800a394 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80100e6:	bf00      	nop
 80100e8:	3710      	adds	r7, #16
 80100ea:	46bd      	mov	sp, r7
 80100ec:	bd80      	pop	{r7, pc}

080100ee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80100ee:	b480      	push	{r7}
 80100f0:	b085      	sub	sp, #20
 80100f2:	af00      	add	r7, sp, #0
 80100f4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80100fc:	b2db      	uxtb	r3, r3
 80100fe:	2b21      	cmp	r3, #33	@ 0x21
 8010100:	d13e      	bne.n	8010180 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	689b      	ldr	r3, [r3, #8]
 8010106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801010a:	d114      	bne.n	8010136 <UART_Transmit_IT+0x48>
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	691b      	ldr	r3, [r3, #16]
 8010110:	2b00      	cmp	r3, #0
 8010112:	d110      	bne.n	8010136 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	6a1b      	ldr	r3, [r3, #32]
 8010118:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	881b      	ldrh	r3, [r3, #0]
 801011e:	461a      	mov	r2, r3
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	681b      	ldr	r3, [r3, #0]
 8010124:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010128:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 801012a:	687b      	ldr	r3, [r7, #4]
 801012c:	6a1b      	ldr	r3, [r3, #32]
 801012e:	1c9a      	adds	r2, r3, #2
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	621a      	str	r2, [r3, #32]
 8010134:	e008      	b.n	8010148 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	6a1b      	ldr	r3, [r3, #32]
 801013a:	1c59      	adds	r1, r3, #1
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	6211      	str	r1, [r2, #32]
 8010140:	781a      	ldrb	r2, [r3, #0]
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 801014c:	b29b      	uxth	r3, r3
 801014e:	3b01      	subs	r3, #1
 8010150:	b29b      	uxth	r3, r3
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	4619      	mov	r1, r3
 8010156:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8010158:	2b00      	cmp	r3, #0
 801015a:	d10f      	bne.n	801017c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	68da      	ldr	r2, [r3, #12]
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801016a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	68da      	ldr	r2, [r3, #12]
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801017a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 801017c:	2300      	movs	r3, #0
 801017e:	e000      	b.n	8010182 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8010180:	2302      	movs	r3, #2
  }
}
 8010182:	4618      	mov	r0, r3
 8010184:	3714      	adds	r7, #20
 8010186:	46bd      	mov	sp, r7
 8010188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801018c:	4770      	bx	lr

0801018e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801018e:	b580      	push	{r7, lr}
 8010190:	b082      	sub	sp, #8
 8010192:	af00      	add	r7, sp, #0
 8010194:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	68da      	ldr	r2, [r3, #12]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80101a4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2220      	movs	r2, #32
 80101aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80101ae:	6878      	ldr	r0, [r7, #4]
 80101b0:	f7f9 ffba 	bl	800a128 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80101b4:	2300      	movs	r3, #0
}
 80101b6:	4618      	mov	r0, r3
 80101b8:	3708      	adds	r7, #8
 80101ba:	46bd      	mov	sp, r7
 80101bc:	bd80      	pop	{r7, pc}

080101be <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80101be:	b580      	push	{r7, lr}
 80101c0:	b08c      	sub	sp, #48	@ 0x30
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80101cc:	b2db      	uxtb	r3, r3
 80101ce:	2b22      	cmp	r3, #34	@ 0x22
 80101d0:	f040 80ae 	bne.w	8010330 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	689b      	ldr	r3, [r3, #8]
 80101d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80101dc:	d117      	bne.n	801020e <UART_Receive_IT+0x50>
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	691b      	ldr	r3, [r3, #16]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d113      	bne.n	801020e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80101e6:	2300      	movs	r3, #0
 80101e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80101ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80101f0:	687b      	ldr	r3, [r7, #4]
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	685b      	ldr	r3, [r3, #4]
 80101f6:	b29b      	uxth	r3, r3
 80101f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80101fc:	b29a      	uxth	r2, r3
 80101fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010200:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010206:	1c9a      	adds	r2, r3, #2
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	629a      	str	r2, [r3, #40]	@ 0x28
 801020c:	e026      	b.n	801025c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010212:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8010214:	2300      	movs	r3, #0
 8010216:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	689b      	ldr	r3, [r3, #8]
 801021c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010220:	d007      	beq.n	8010232 <UART_Receive_IT+0x74>
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	689b      	ldr	r3, [r3, #8]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d10a      	bne.n	8010240 <UART_Receive_IT+0x82>
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	691b      	ldr	r3, [r3, #16]
 801022e:	2b00      	cmp	r3, #0
 8010230:	d106      	bne.n	8010240 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	685b      	ldr	r3, [r3, #4]
 8010238:	b2da      	uxtb	r2, r3
 801023a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801023c:	701a      	strb	r2, [r3, #0]
 801023e:	e008      	b.n	8010252 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	b2db      	uxtb	r3, r3
 8010248:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801024c:	b2da      	uxtb	r2, r3
 801024e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010250:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010256:	1c5a      	adds	r2, r3, #1
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8010260:	b29b      	uxth	r3, r3
 8010262:	3b01      	subs	r3, #1
 8010264:	b29b      	uxth	r3, r3
 8010266:	687a      	ldr	r2, [r7, #4]
 8010268:	4619      	mov	r1, r3
 801026a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 801026c:	2b00      	cmp	r3, #0
 801026e:	d15d      	bne.n	801032c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	68da      	ldr	r2, [r3, #12]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f022 0220 	bic.w	r2, r2, #32
 801027e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	68da      	ldr	r2, [r3, #12]
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	681b      	ldr	r3, [r3, #0]
 801028a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801028e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	695a      	ldr	r2, [r3, #20]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	f022 0201 	bic.w	r2, r2, #1
 801029e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2220      	movs	r2, #32
 80102a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2200      	movs	r2, #0
 80102ac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80102b2:	2b01      	cmp	r3, #1
 80102b4:	d135      	bne.n	8010322 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	2200      	movs	r2, #0
 80102ba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	681b      	ldr	r3, [r3, #0]
 80102c0:	330c      	adds	r3, #12
 80102c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102c4:	697b      	ldr	r3, [r7, #20]
 80102c6:	e853 3f00 	ldrex	r3, [r3]
 80102ca:	613b      	str	r3, [r7, #16]
   return(result);
 80102cc:	693b      	ldr	r3, [r7, #16]
 80102ce:	f023 0310 	bic.w	r3, r3, #16
 80102d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	330c      	adds	r3, #12
 80102da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80102dc:	623a      	str	r2, [r7, #32]
 80102de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e0:	69f9      	ldr	r1, [r7, #28]
 80102e2:	6a3a      	ldr	r2, [r7, #32]
 80102e4:	e841 2300 	strex	r3, r2, [r1]
 80102e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80102ea:	69bb      	ldr	r3, [r7, #24]
 80102ec:	2b00      	cmp	r3, #0
 80102ee:	d1e5      	bne.n	80102bc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	f003 0310 	and.w	r3, r3, #16
 80102fa:	2b10      	cmp	r3, #16
 80102fc:	d10a      	bne.n	8010314 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80102fe:	2300      	movs	r3, #0
 8010300:	60fb      	str	r3, [r7, #12]
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	60fb      	str	r3, [r7, #12]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	685b      	ldr	r3, [r3, #4]
 8010310:	60fb      	str	r3, [r7, #12]
 8010312:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8010318:	4619      	mov	r1, r3
 801031a:	6878      	ldr	r0, [r7, #4]
 801031c:	f7ff fc48 	bl	800fbb0 <HAL_UARTEx_RxEventCallback>
 8010320:	e002      	b.n	8010328 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8010322:	6878      	ldr	r0, [r7, #4]
 8010324:	f7f9 ff42 	bl	800a1ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8010328:	2300      	movs	r3, #0
 801032a:	e002      	b.n	8010332 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 801032c:	2300      	movs	r3, #0
 801032e:	e000      	b.n	8010332 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8010330:	2302      	movs	r3, #2
  }
}
 8010332:	4618      	mov	r0, r3
 8010334:	3730      	adds	r7, #48	@ 0x30
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
	...

0801033c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 801033c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010340:	b0c0      	sub	sp, #256	@ 0x100
 8010342:	af00      	add	r7, sp, #0
 8010344:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8010348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	691b      	ldr	r3, [r3, #16]
 8010350:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8010354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010358:	68d9      	ldr	r1, [r3, #12]
 801035a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801035e:	681a      	ldr	r2, [r3, #0]
 8010360:	ea40 0301 	orr.w	r3, r0, r1
 8010364:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8010366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801036a:	689a      	ldr	r2, [r3, #8]
 801036c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010370:	691b      	ldr	r3, [r3, #16]
 8010372:	431a      	orrs	r2, r3
 8010374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010378:	695b      	ldr	r3, [r3, #20]
 801037a:	431a      	orrs	r2, r3
 801037c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8010380:	69db      	ldr	r3, [r3, #28]
 8010382:	4313      	orrs	r3, r2
 8010384:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8010388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801038c:	681b      	ldr	r3, [r3, #0]
 801038e:	68db      	ldr	r3, [r3, #12]
 8010390:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8010394:	f021 010c 	bic.w	r1, r1, #12
 8010398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801039c:	681a      	ldr	r2, [r3, #0]
 801039e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80103a2:	430b      	orrs	r3, r1
 80103a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80103a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103aa:	681b      	ldr	r3, [r3, #0]
 80103ac:	695b      	ldr	r3, [r3, #20]
 80103ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80103b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103b6:	6999      	ldr	r1, [r3, #24]
 80103b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	ea40 0301 	orr.w	r3, r0, r1
 80103c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80103c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103c8:	681a      	ldr	r2, [r3, #0]
 80103ca:	4b8f      	ldr	r3, [pc, #572]	@ (8010608 <UART_SetConfig+0x2cc>)
 80103cc:	429a      	cmp	r2, r3
 80103ce:	d005      	beq.n	80103dc <UART_SetConfig+0xa0>
 80103d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103d4:	681a      	ldr	r2, [r3, #0]
 80103d6:	4b8d      	ldr	r3, [pc, #564]	@ (801060c <UART_SetConfig+0x2d0>)
 80103d8:	429a      	cmp	r2, r3
 80103da:	d104      	bne.n	80103e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80103dc:	f7fd f91c 	bl	800d618 <HAL_RCC_GetPCLK2Freq>
 80103e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80103e4:	e003      	b.n	80103ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80103e6:	f7fd f903 	bl	800d5f0 <HAL_RCC_GetPCLK1Freq>
 80103ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80103ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80103f2:	69db      	ldr	r3, [r3, #28]
 80103f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80103f8:	f040 810c 	bne.w	8010614 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80103fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010400:	2200      	movs	r2, #0
 8010402:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010406:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 801040a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 801040e:	4622      	mov	r2, r4
 8010410:	462b      	mov	r3, r5
 8010412:	1891      	adds	r1, r2, r2
 8010414:	65b9      	str	r1, [r7, #88]	@ 0x58
 8010416:	415b      	adcs	r3, r3
 8010418:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801041a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 801041e:	4621      	mov	r1, r4
 8010420:	eb12 0801 	adds.w	r8, r2, r1
 8010424:	4629      	mov	r1, r5
 8010426:	eb43 0901 	adc.w	r9, r3, r1
 801042a:	f04f 0200 	mov.w	r2, #0
 801042e:	f04f 0300 	mov.w	r3, #0
 8010432:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010436:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 801043a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 801043e:	4690      	mov	r8, r2
 8010440:	4699      	mov	r9, r3
 8010442:	4623      	mov	r3, r4
 8010444:	eb18 0303 	adds.w	r3, r8, r3
 8010448:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801044c:	462b      	mov	r3, r5
 801044e:	eb49 0303 	adc.w	r3, r9, r3
 8010452:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	2200      	movs	r2, #0
 801045e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010462:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8010466:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801046a:	460b      	mov	r3, r1
 801046c:	18db      	adds	r3, r3, r3
 801046e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010470:	4613      	mov	r3, r2
 8010472:	eb42 0303 	adc.w	r3, r2, r3
 8010476:	657b      	str	r3, [r7, #84]	@ 0x54
 8010478:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 801047c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8010480:	f7f0 fc02 	bl	8000c88 <__aeabi_uldivmod>
 8010484:	4602      	mov	r2, r0
 8010486:	460b      	mov	r3, r1
 8010488:	4b61      	ldr	r3, [pc, #388]	@ (8010610 <UART_SetConfig+0x2d4>)
 801048a:	fba3 2302 	umull	r2, r3, r3, r2
 801048e:	095b      	lsrs	r3, r3, #5
 8010490:	011c      	lsls	r4, r3, #4
 8010492:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010496:	2200      	movs	r2, #0
 8010498:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801049c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80104a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80104a4:	4642      	mov	r2, r8
 80104a6:	464b      	mov	r3, r9
 80104a8:	1891      	adds	r1, r2, r2
 80104aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80104ac:	415b      	adcs	r3, r3
 80104ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80104b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80104b4:	4641      	mov	r1, r8
 80104b6:	eb12 0a01 	adds.w	sl, r2, r1
 80104ba:	4649      	mov	r1, r9
 80104bc:	eb43 0b01 	adc.w	fp, r3, r1
 80104c0:	f04f 0200 	mov.w	r2, #0
 80104c4:	f04f 0300 	mov.w	r3, #0
 80104c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80104cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80104d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80104d4:	4692      	mov	sl, r2
 80104d6:	469b      	mov	fp, r3
 80104d8:	4643      	mov	r3, r8
 80104da:	eb1a 0303 	adds.w	r3, sl, r3
 80104de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80104e2:	464b      	mov	r3, r9
 80104e4:	eb4b 0303 	adc.w	r3, fp, r3
 80104e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80104ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	2200      	movs	r2, #0
 80104f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80104f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80104fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010500:	460b      	mov	r3, r1
 8010502:	18db      	adds	r3, r3, r3
 8010504:	643b      	str	r3, [r7, #64]	@ 0x40
 8010506:	4613      	mov	r3, r2
 8010508:	eb42 0303 	adc.w	r3, r2, r3
 801050c:	647b      	str	r3, [r7, #68]	@ 0x44
 801050e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8010512:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8010516:	f7f0 fbb7 	bl	8000c88 <__aeabi_uldivmod>
 801051a:	4602      	mov	r2, r0
 801051c:	460b      	mov	r3, r1
 801051e:	4611      	mov	r1, r2
 8010520:	4b3b      	ldr	r3, [pc, #236]	@ (8010610 <UART_SetConfig+0x2d4>)
 8010522:	fba3 2301 	umull	r2, r3, r3, r1
 8010526:	095b      	lsrs	r3, r3, #5
 8010528:	2264      	movs	r2, #100	@ 0x64
 801052a:	fb02 f303 	mul.w	r3, r2, r3
 801052e:	1acb      	subs	r3, r1, r3
 8010530:	00db      	lsls	r3, r3, #3
 8010532:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8010536:	4b36      	ldr	r3, [pc, #216]	@ (8010610 <UART_SetConfig+0x2d4>)
 8010538:	fba3 2302 	umull	r2, r3, r3, r2
 801053c:	095b      	lsrs	r3, r3, #5
 801053e:	005b      	lsls	r3, r3, #1
 8010540:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8010544:	441c      	add	r4, r3
 8010546:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 801054a:	2200      	movs	r2, #0
 801054c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8010550:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8010554:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8010558:	4642      	mov	r2, r8
 801055a:	464b      	mov	r3, r9
 801055c:	1891      	adds	r1, r2, r2
 801055e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8010560:	415b      	adcs	r3, r3
 8010562:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010564:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8010568:	4641      	mov	r1, r8
 801056a:	1851      	adds	r1, r2, r1
 801056c:	6339      	str	r1, [r7, #48]	@ 0x30
 801056e:	4649      	mov	r1, r9
 8010570:	414b      	adcs	r3, r1
 8010572:	637b      	str	r3, [r7, #52]	@ 0x34
 8010574:	f04f 0200 	mov.w	r2, #0
 8010578:	f04f 0300 	mov.w	r3, #0
 801057c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8010580:	4659      	mov	r1, fp
 8010582:	00cb      	lsls	r3, r1, #3
 8010584:	4651      	mov	r1, sl
 8010586:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801058a:	4651      	mov	r1, sl
 801058c:	00ca      	lsls	r2, r1, #3
 801058e:	4610      	mov	r0, r2
 8010590:	4619      	mov	r1, r3
 8010592:	4603      	mov	r3, r0
 8010594:	4642      	mov	r2, r8
 8010596:	189b      	adds	r3, r3, r2
 8010598:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801059c:	464b      	mov	r3, r9
 801059e:	460a      	mov	r2, r1
 80105a0:	eb42 0303 	adc.w	r3, r2, r3
 80105a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80105a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	2200      	movs	r2, #0
 80105b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80105b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80105b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80105bc:	460b      	mov	r3, r1
 80105be:	18db      	adds	r3, r3, r3
 80105c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80105c2:	4613      	mov	r3, r2
 80105c4:	eb42 0303 	adc.w	r3, r2, r3
 80105c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80105ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80105ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80105d2:	f7f0 fb59 	bl	8000c88 <__aeabi_uldivmod>
 80105d6:	4602      	mov	r2, r0
 80105d8:	460b      	mov	r3, r1
 80105da:	4b0d      	ldr	r3, [pc, #52]	@ (8010610 <UART_SetConfig+0x2d4>)
 80105dc:	fba3 1302 	umull	r1, r3, r3, r2
 80105e0:	095b      	lsrs	r3, r3, #5
 80105e2:	2164      	movs	r1, #100	@ 0x64
 80105e4:	fb01 f303 	mul.w	r3, r1, r3
 80105e8:	1ad3      	subs	r3, r2, r3
 80105ea:	00db      	lsls	r3, r3, #3
 80105ec:	3332      	adds	r3, #50	@ 0x32
 80105ee:	4a08      	ldr	r2, [pc, #32]	@ (8010610 <UART_SetConfig+0x2d4>)
 80105f0:	fba2 2303 	umull	r2, r3, r2, r3
 80105f4:	095b      	lsrs	r3, r3, #5
 80105f6:	f003 0207 	and.w	r2, r3, #7
 80105fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	4422      	add	r2, r4
 8010602:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8010604:	e106      	b.n	8010814 <UART_SetConfig+0x4d8>
 8010606:	bf00      	nop
 8010608:	40011000 	.word	0x40011000
 801060c:	40011400 	.word	0x40011400
 8010610:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8010614:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010618:	2200      	movs	r2, #0
 801061a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801061e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8010622:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8010626:	4642      	mov	r2, r8
 8010628:	464b      	mov	r3, r9
 801062a:	1891      	adds	r1, r2, r2
 801062c:	6239      	str	r1, [r7, #32]
 801062e:	415b      	adcs	r3, r3
 8010630:	627b      	str	r3, [r7, #36]	@ 0x24
 8010632:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8010636:	4641      	mov	r1, r8
 8010638:	1854      	adds	r4, r2, r1
 801063a:	4649      	mov	r1, r9
 801063c:	eb43 0501 	adc.w	r5, r3, r1
 8010640:	f04f 0200 	mov.w	r2, #0
 8010644:	f04f 0300 	mov.w	r3, #0
 8010648:	00eb      	lsls	r3, r5, #3
 801064a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801064e:	00e2      	lsls	r2, r4, #3
 8010650:	4614      	mov	r4, r2
 8010652:	461d      	mov	r5, r3
 8010654:	4643      	mov	r3, r8
 8010656:	18e3      	adds	r3, r4, r3
 8010658:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801065c:	464b      	mov	r3, r9
 801065e:	eb45 0303 	adc.w	r3, r5, r3
 8010662:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8010666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801066a:	685b      	ldr	r3, [r3, #4]
 801066c:	2200      	movs	r2, #0
 801066e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8010672:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8010676:	f04f 0200 	mov.w	r2, #0
 801067a:	f04f 0300 	mov.w	r3, #0
 801067e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8010682:	4629      	mov	r1, r5
 8010684:	008b      	lsls	r3, r1, #2
 8010686:	4621      	mov	r1, r4
 8010688:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801068c:	4621      	mov	r1, r4
 801068e:	008a      	lsls	r2, r1, #2
 8010690:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8010694:	f7f0 faf8 	bl	8000c88 <__aeabi_uldivmod>
 8010698:	4602      	mov	r2, r0
 801069a:	460b      	mov	r3, r1
 801069c:	4b60      	ldr	r3, [pc, #384]	@ (8010820 <UART_SetConfig+0x4e4>)
 801069e:	fba3 2302 	umull	r2, r3, r3, r2
 80106a2:	095b      	lsrs	r3, r3, #5
 80106a4:	011c      	lsls	r4, r3, #4
 80106a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80106aa:	2200      	movs	r2, #0
 80106ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80106b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80106b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80106b8:	4642      	mov	r2, r8
 80106ba:	464b      	mov	r3, r9
 80106bc:	1891      	adds	r1, r2, r2
 80106be:	61b9      	str	r1, [r7, #24]
 80106c0:	415b      	adcs	r3, r3
 80106c2:	61fb      	str	r3, [r7, #28]
 80106c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80106c8:	4641      	mov	r1, r8
 80106ca:	1851      	adds	r1, r2, r1
 80106cc:	6139      	str	r1, [r7, #16]
 80106ce:	4649      	mov	r1, r9
 80106d0:	414b      	adcs	r3, r1
 80106d2:	617b      	str	r3, [r7, #20]
 80106d4:	f04f 0200 	mov.w	r2, #0
 80106d8:	f04f 0300 	mov.w	r3, #0
 80106dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80106e0:	4659      	mov	r1, fp
 80106e2:	00cb      	lsls	r3, r1, #3
 80106e4:	4651      	mov	r1, sl
 80106e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80106ea:	4651      	mov	r1, sl
 80106ec:	00ca      	lsls	r2, r1, #3
 80106ee:	4610      	mov	r0, r2
 80106f0:	4619      	mov	r1, r3
 80106f2:	4603      	mov	r3, r0
 80106f4:	4642      	mov	r2, r8
 80106f6:	189b      	adds	r3, r3, r2
 80106f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80106fc:	464b      	mov	r3, r9
 80106fe:	460a      	mov	r2, r1
 8010700:	eb42 0303 	adc.w	r3, r2, r3
 8010704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8010708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801070c:	685b      	ldr	r3, [r3, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	67bb      	str	r3, [r7, #120]	@ 0x78
 8010712:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8010714:	f04f 0200 	mov.w	r2, #0
 8010718:	f04f 0300 	mov.w	r3, #0
 801071c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8010720:	4649      	mov	r1, r9
 8010722:	008b      	lsls	r3, r1, #2
 8010724:	4641      	mov	r1, r8
 8010726:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801072a:	4641      	mov	r1, r8
 801072c:	008a      	lsls	r2, r1, #2
 801072e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8010732:	f7f0 faa9 	bl	8000c88 <__aeabi_uldivmod>
 8010736:	4602      	mov	r2, r0
 8010738:	460b      	mov	r3, r1
 801073a:	4611      	mov	r1, r2
 801073c:	4b38      	ldr	r3, [pc, #224]	@ (8010820 <UART_SetConfig+0x4e4>)
 801073e:	fba3 2301 	umull	r2, r3, r3, r1
 8010742:	095b      	lsrs	r3, r3, #5
 8010744:	2264      	movs	r2, #100	@ 0x64
 8010746:	fb02 f303 	mul.w	r3, r2, r3
 801074a:	1acb      	subs	r3, r1, r3
 801074c:	011b      	lsls	r3, r3, #4
 801074e:	3332      	adds	r3, #50	@ 0x32
 8010750:	4a33      	ldr	r2, [pc, #204]	@ (8010820 <UART_SetConfig+0x4e4>)
 8010752:	fba2 2303 	umull	r2, r3, r2, r3
 8010756:	095b      	lsrs	r3, r3, #5
 8010758:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801075c:	441c      	add	r4, r3
 801075e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8010762:	2200      	movs	r2, #0
 8010764:	673b      	str	r3, [r7, #112]	@ 0x70
 8010766:	677a      	str	r2, [r7, #116]	@ 0x74
 8010768:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 801076c:	4642      	mov	r2, r8
 801076e:	464b      	mov	r3, r9
 8010770:	1891      	adds	r1, r2, r2
 8010772:	60b9      	str	r1, [r7, #8]
 8010774:	415b      	adcs	r3, r3
 8010776:	60fb      	str	r3, [r7, #12]
 8010778:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801077c:	4641      	mov	r1, r8
 801077e:	1851      	adds	r1, r2, r1
 8010780:	6039      	str	r1, [r7, #0]
 8010782:	4649      	mov	r1, r9
 8010784:	414b      	adcs	r3, r1
 8010786:	607b      	str	r3, [r7, #4]
 8010788:	f04f 0200 	mov.w	r2, #0
 801078c:	f04f 0300 	mov.w	r3, #0
 8010790:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8010794:	4659      	mov	r1, fp
 8010796:	00cb      	lsls	r3, r1, #3
 8010798:	4651      	mov	r1, sl
 801079a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801079e:	4651      	mov	r1, sl
 80107a0:	00ca      	lsls	r2, r1, #3
 80107a2:	4610      	mov	r0, r2
 80107a4:	4619      	mov	r1, r3
 80107a6:	4603      	mov	r3, r0
 80107a8:	4642      	mov	r2, r8
 80107aa:	189b      	adds	r3, r3, r2
 80107ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80107ae:	464b      	mov	r3, r9
 80107b0:	460a      	mov	r2, r1
 80107b2:	eb42 0303 	adc.w	r3, r2, r3
 80107b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80107b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	2200      	movs	r2, #0
 80107c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80107c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80107c4:	f04f 0200 	mov.w	r2, #0
 80107c8:	f04f 0300 	mov.w	r3, #0
 80107cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80107d0:	4649      	mov	r1, r9
 80107d2:	008b      	lsls	r3, r1, #2
 80107d4:	4641      	mov	r1, r8
 80107d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80107da:	4641      	mov	r1, r8
 80107dc:	008a      	lsls	r2, r1, #2
 80107de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80107e2:	f7f0 fa51 	bl	8000c88 <__aeabi_uldivmod>
 80107e6:	4602      	mov	r2, r0
 80107e8:	460b      	mov	r3, r1
 80107ea:	4b0d      	ldr	r3, [pc, #52]	@ (8010820 <UART_SetConfig+0x4e4>)
 80107ec:	fba3 1302 	umull	r1, r3, r3, r2
 80107f0:	095b      	lsrs	r3, r3, #5
 80107f2:	2164      	movs	r1, #100	@ 0x64
 80107f4:	fb01 f303 	mul.w	r3, r1, r3
 80107f8:	1ad3      	subs	r3, r2, r3
 80107fa:	011b      	lsls	r3, r3, #4
 80107fc:	3332      	adds	r3, #50	@ 0x32
 80107fe:	4a08      	ldr	r2, [pc, #32]	@ (8010820 <UART_SetConfig+0x4e4>)
 8010800:	fba2 2303 	umull	r2, r3, r2, r3
 8010804:	095b      	lsrs	r3, r3, #5
 8010806:	f003 020f 	and.w	r2, r3, #15
 801080a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4422      	add	r2, r4
 8010812:	609a      	str	r2, [r3, #8]
}
 8010814:	bf00      	nop
 8010816:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 801081a:	46bd      	mov	sp, r7
 801081c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010820:	51eb851f 	.word	0x51eb851f

08010824 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010824:	b084      	sub	sp, #16
 8010826:	b580      	push	{r7, lr}
 8010828:	b084      	sub	sp, #16
 801082a:	af00      	add	r7, sp, #0
 801082c:	6078      	str	r0, [r7, #4]
 801082e:	f107 001c 	add.w	r0, r7, #28
 8010832:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010836:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801083a:	2b01      	cmp	r3, #1
 801083c:	d123      	bne.n	8010886 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010842:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	68db      	ldr	r3, [r3, #12]
 801084e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8010852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	68db      	ldr	r3, [r3, #12]
 801085e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010866:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801086a:	2b01      	cmp	r3, #1
 801086c:	d105      	bne.n	801087a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 801087a:	6878      	ldr	r0, [r7, #4]
 801087c:	f001 fae8 	bl	8011e50 <USB_CoreReset>
 8010880:	4603      	mov	r3, r0
 8010882:	73fb      	strb	r3, [r7, #15]
 8010884:	e01b      	b.n	80108be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	68db      	ldr	r3, [r3, #12]
 801088a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	f001 fadc 	bl	8011e50 <USB_CoreReset>
 8010898:	4603      	mov	r3, r0
 801089a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 801089c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d106      	bne.n	80108b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80108b0:	e005      	b.n	80108be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80108b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80108be:	7fbb      	ldrb	r3, [r7, #30]
 80108c0:	2b01      	cmp	r3, #1
 80108c2:	d10b      	bne.n	80108dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	689b      	ldr	r3, [r3, #8]
 80108c8:	f043 0206 	orr.w	r2, r3, #6
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	689b      	ldr	r3, [r3, #8]
 80108d4:	f043 0220 	orr.w	r2, r3, #32
 80108d8:	687b      	ldr	r3, [r7, #4]
 80108da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80108dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3710      	adds	r7, #16
 80108e2:	46bd      	mov	sp, r7
 80108e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80108e8:	b004      	add	sp, #16
 80108ea:	4770      	bx	lr

080108ec <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80108ec:	b480      	push	{r7}
 80108ee:	b087      	sub	sp, #28
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	4613      	mov	r3, r2
 80108f8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80108fa:	79fb      	ldrb	r3, [r7, #7]
 80108fc:	2b02      	cmp	r3, #2
 80108fe:	d165      	bne.n	80109cc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	4a41      	ldr	r2, [pc, #260]	@ (8010a08 <USB_SetTurnaroundTime+0x11c>)
 8010904:	4293      	cmp	r3, r2
 8010906:	d906      	bls.n	8010916 <USB_SetTurnaroundTime+0x2a>
 8010908:	68bb      	ldr	r3, [r7, #8]
 801090a:	4a40      	ldr	r2, [pc, #256]	@ (8010a0c <USB_SetTurnaroundTime+0x120>)
 801090c:	4293      	cmp	r3, r2
 801090e:	d202      	bcs.n	8010916 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8010910:	230f      	movs	r3, #15
 8010912:	617b      	str	r3, [r7, #20]
 8010914:	e062      	b.n	80109dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8010916:	68bb      	ldr	r3, [r7, #8]
 8010918:	4a3c      	ldr	r2, [pc, #240]	@ (8010a0c <USB_SetTurnaroundTime+0x120>)
 801091a:	4293      	cmp	r3, r2
 801091c:	d306      	bcc.n	801092c <USB_SetTurnaroundTime+0x40>
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	4a3b      	ldr	r2, [pc, #236]	@ (8010a10 <USB_SetTurnaroundTime+0x124>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d202      	bcs.n	801092c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8010926:	230e      	movs	r3, #14
 8010928:	617b      	str	r3, [r7, #20]
 801092a:	e057      	b.n	80109dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 801092c:	68bb      	ldr	r3, [r7, #8]
 801092e:	4a38      	ldr	r2, [pc, #224]	@ (8010a10 <USB_SetTurnaroundTime+0x124>)
 8010930:	4293      	cmp	r3, r2
 8010932:	d306      	bcc.n	8010942 <USB_SetTurnaroundTime+0x56>
 8010934:	68bb      	ldr	r3, [r7, #8]
 8010936:	4a37      	ldr	r2, [pc, #220]	@ (8010a14 <USB_SetTurnaroundTime+0x128>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d202      	bcs.n	8010942 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 801093c:	230d      	movs	r3, #13
 801093e:	617b      	str	r3, [r7, #20]
 8010940:	e04c      	b.n	80109dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8010942:	68bb      	ldr	r3, [r7, #8]
 8010944:	4a33      	ldr	r2, [pc, #204]	@ (8010a14 <USB_SetTurnaroundTime+0x128>)
 8010946:	4293      	cmp	r3, r2
 8010948:	d306      	bcc.n	8010958 <USB_SetTurnaroundTime+0x6c>
 801094a:	68bb      	ldr	r3, [r7, #8]
 801094c:	4a32      	ldr	r2, [pc, #200]	@ (8010a18 <USB_SetTurnaroundTime+0x12c>)
 801094e:	4293      	cmp	r3, r2
 8010950:	d802      	bhi.n	8010958 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8010952:	230c      	movs	r3, #12
 8010954:	617b      	str	r3, [r7, #20]
 8010956:	e041      	b.n	80109dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	4a2f      	ldr	r2, [pc, #188]	@ (8010a18 <USB_SetTurnaroundTime+0x12c>)
 801095c:	4293      	cmp	r3, r2
 801095e:	d906      	bls.n	801096e <USB_SetTurnaroundTime+0x82>
 8010960:	68bb      	ldr	r3, [r7, #8]
 8010962:	4a2e      	ldr	r2, [pc, #184]	@ (8010a1c <USB_SetTurnaroundTime+0x130>)
 8010964:	4293      	cmp	r3, r2
 8010966:	d802      	bhi.n	801096e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8010968:	230b      	movs	r3, #11
 801096a:	617b      	str	r3, [r7, #20]
 801096c:	e036      	b.n	80109dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801096e:	68bb      	ldr	r3, [r7, #8]
 8010970:	4a2a      	ldr	r2, [pc, #168]	@ (8010a1c <USB_SetTurnaroundTime+0x130>)
 8010972:	4293      	cmp	r3, r2
 8010974:	d906      	bls.n	8010984 <USB_SetTurnaroundTime+0x98>
 8010976:	68bb      	ldr	r3, [r7, #8]
 8010978:	4a29      	ldr	r2, [pc, #164]	@ (8010a20 <USB_SetTurnaroundTime+0x134>)
 801097a:	4293      	cmp	r3, r2
 801097c:	d802      	bhi.n	8010984 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801097e:	230a      	movs	r3, #10
 8010980:	617b      	str	r3, [r7, #20]
 8010982:	e02b      	b.n	80109dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	4a26      	ldr	r2, [pc, #152]	@ (8010a20 <USB_SetTurnaroundTime+0x134>)
 8010988:	4293      	cmp	r3, r2
 801098a:	d906      	bls.n	801099a <USB_SetTurnaroundTime+0xae>
 801098c:	68bb      	ldr	r3, [r7, #8]
 801098e:	4a25      	ldr	r2, [pc, #148]	@ (8010a24 <USB_SetTurnaroundTime+0x138>)
 8010990:	4293      	cmp	r3, r2
 8010992:	d202      	bcs.n	801099a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8010994:	2309      	movs	r3, #9
 8010996:	617b      	str	r3, [r7, #20]
 8010998:	e020      	b.n	80109dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 801099a:	68bb      	ldr	r3, [r7, #8]
 801099c:	4a21      	ldr	r2, [pc, #132]	@ (8010a24 <USB_SetTurnaroundTime+0x138>)
 801099e:	4293      	cmp	r3, r2
 80109a0:	d306      	bcc.n	80109b0 <USB_SetTurnaroundTime+0xc4>
 80109a2:	68bb      	ldr	r3, [r7, #8]
 80109a4:	4a20      	ldr	r2, [pc, #128]	@ (8010a28 <USB_SetTurnaroundTime+0x13c>)
 80109a6:	4293      	cmp	r3, r2
 80109a8:	d802      	bhi.n	80109b0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80109aa:	2308      	movs	r3, #8
 80109ac:	617b      	str	r3, [r7, #20]
 80109ae:	e015      	b.n	80109dc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80109b0:	68bb      	ldr	r3, [r7, #8]
 80109b2:	4a1d      	ldr	r2, [pc, #116]	@ (8010a28 <USB_SetTurnaroundTime+0x13c>)
 80109b4:	4293      	cmp	r3, r2
 80109b6:	d906      	bls.n	80109c6 <USB_SetTurnaroundTime+0xda>
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	4a1c      	ldr	r2, [pc, #112]	@ (8010a2c <USB_SetTurnaroundTime+0x140>)
 80109bc:	4293      	cmp	r3, r2
 80109be:	d202      	bcs.n	80109c6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80109c0:	2307      	movs	r3, #7
 80109c2:	617b      	str	r3, [r7, #20]
 80109c4:	e00a      	b.n	80109dc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80109c6:	2306      	movs	r3, #6
 80109c8:	617b      	str	r3, [r7, #20]
 80109ca:	e007      	b.n	80109dc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80109cc:	79fb      	ldrb	r3, [r7, #7]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d102      	bne.n	80109d8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80109d2:	2309      	movs	r3, #9
 80109d4:	617b      	str	r3, [r7, #20]
 80109d6:	e001      	b.n	80109dc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80109d8:	2309      	movs	r3, #9
 80109da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80109dc:	68fb      	ldr	r3, [r7, #12]
 80109de:	68db      	ldr	r3, [r3, #12]
 80109e0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	68da      	ldr	r2, [r3, #12]
 80109ec:	697b      	ldr	r3, [r7, #20]
 80109ee:	029b      	lsls	r3, r3, #10
 80109f0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80109f4:	431a      	orrs	r2, r3
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80109fa:	2300      	movs	r3, #0
}
 80109fc:	4618      	mov	r0, r3
 80109fe:	371c      	adds	r7, #28
 8010a00:	46bd      	mov	sp, r7
 8010a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a06:	4770      	bx	lr
 8010a08:	00d8acbf 	.word	0x00d8acbf
 8010a0c:	00e4e1c0 	.word	0x00e4e1c0
 8010a10:	00f42400 	.word	0x00f42400
 8010a14:	01067380 	.word	0x01067380
 8010a18:	011a499f 	.word	0x011a499f
 8010a1c:	01312cff 	.word	0x01312cff
 8010a20:	014ca43f 	.word	0x014ca43f
 8010a24:	016e3600 	.word	0x016e3600
 8010a28:	01a6ab1f 	.word	0x01a6ab1f
 8010a2c:	01e84800 	.word	0x01e84800

08010a30 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a30:	b480      	push	{r7}
 8010a32:	b083      	sub	sp, #12
 8010a34:	af00      	add	r7, sp, #0
 8010a36:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	689b      	ldr	r3, [r3, #8]
 8010a3c:	f043 0201 	orr.w	r2, r3, #1
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010a44:	2300      	movs	r3, #0
}
 8010a46:	4618      	mov	r0, r3
 8010a48:	370c      	adds	r7, #12
 8010a4a:	46bd      	mov	sp, r7
 8010a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a50:	4770      	bx	lr

08010a52 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010a52:	b480      	push	{r7}
 8010a54:	b083      	sub	sp, #12
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	689b      	ldr	r3, [r3, #8]
 8010a5e:	f023 0201 	bic.w	r2, r3, #1
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010a66:	2300      	movs	r3, #0
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	370c      	adds	r7, #12
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a72:	4770      	bx	lr

08010a74 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	460b      	mov	r3, r1
 8010a7e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010a80:	2300      	movs	r3, #0
 8010a82:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010a90:	78fb      	ldrb	r3, [r7, #3]
 8010a92:	2b01      	cmp	r3, #1
 8010a94:	d115      	bne.n	8010ac2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	68db      	ldr	r3, [r3, #12]
 8010a9a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010aa2:	200a      	movs	r0, #10
 8010aa4:	f7f9 fe98 	bl	800a7d8 <HAL_Delay>
      ms += 10U;
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	330a      	adds	r3, #10
 8010aac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f001 f93f 	bl	8011d32 <USB_GetMode>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	2b01      	cmp	r3, #1
 8010ab8:	d01e      	beq.n	8010af8 <USB_SetCurrentMode+0x84>
 8010aba:	68fb      	ldr	r3, [r7, #12]
 8010abc:	2bc7      	cmp	r3, #199	@ 0xc7
 8010abe:	d9f0      	bls.n	8010aa2 <USB_SetCurrentMode+0x2e>
 8010ac0:	e01a      	b.n	8010af8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010ac2:	78fb      	ldrb	r3, [r7, #3]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d115      	bne.n	8010af4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010ac8:	687b      	ldr	r3, [r7, #4]
 8010aca:	68db      	ldr	r3, [r3, #12]
 8010acc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8010ad4:	200a      	movs	r0, #10
 8010ad6:	f7f9 fe7f 	bl	800a7d8 <HAL_Delay>
      ms += 10U;
 8010ada:	68fb      	ldr	r3, [r7, #12]
 8010adc:	330a      	adds	r3, #10
 8010ade:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8010ae0:	6878      	ldr	r0, [r7, #4]
 8010ae2:	f001 f926 	bl	8011d32 <USB_GetMode>
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	d005      	beq.n	8010af8 <USB_SetCurrentMode+0x84>
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	2bc7      	cmp	r3, #199	@ 0xc7
 8010af0:	d9f0      	bls.n	8010ad4 <USB_SetCurrentMode+0x60>
 8010af2:	e001      	b.n	8010af8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010af4:	2301      	movs	r3, #1
 8010af6:	e005      	b.n	8010b04 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	2bc8      	cmp	r3, #200	@ 0xc8
 8010afc:	d101      	bne.n	8010b02 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010afe:	2301      	movs	r3, #1
 8010b00:	e000      	b.n	8010b04 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010b02:	2300      	movs	r3, #0
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	3710      	adds	r7, #16
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010b0c:	b084      	sub	sp, #16
 8010b0e:	b580      	push	{r7, lr}
 8010b10:	b086      	sub	sp, #24
 8010b12:	af00      	add	r7, sp, #0
 8010b14:	6078      	str	r0, [r7, #4]
 8010b16:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8010b1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010b1e:	2300      	movs	r3, #0
 8010b20:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010b26:	2300      	movs	r3, #0
 8010b28:	613b      	str	r3, [r7, #16]
 8010b2a:	e009      	b.n	8010b40 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010b2c:	687a      	ldr	r2, [r7, #4]
 8010b2e:	693b      	ldr	r3, [r7, #16]
 8010b30:	3340      	adds	r3, #64	@ 0x40
 8010b32:	009b      	lsls	r3, r3, #2
 8010b34:	4413      	add	r3, r2
 8010b36:	2200      	movs	r2, #0
 8010b38:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010b3a:	693b      	ldr	r3, [r7, #16]
 8010b3c:	3301      	adds	r3, #1
 8010b3e:	613b      	str	r3, [r7, #16]
 8010b40:	693b      	ldr	r3, [r7, #16]
 8010b42:	2b0e      	cmp	r3, #14
 8010b44:	d9f2      	bls.n	8010b2c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010b46:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d11c      	bne.n	8010b88 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010b54:	685b      	ldr	r3, [r3, #4]
 8010b56:	68fa      	ldr	r2, [r7, #12]
 8010b58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010b5c:	f043 0302 	orr.w	r3, r3, #2
 8010b60:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b66:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8010b6e:	687b      	ldr	r3, [r7, #4]
 8010b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b72:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b7e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	639a      	str	r2, [r3, #56]	@ 0x38
 8010b86:	e00b      	b.n	8010ba0 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b8c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010b98:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8010ba6:	461a      	mov	r2, r3
 8010ba8:	2300      	movs	r3, #0
 8010baa:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010bac:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d10d      	bne.n	8010bd0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d104      	bne.n	8010bc6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010bbc:	2100      	movs	r1, #0
 8010bbe:	6878      	ldr	r0, [r7, #4]
 8010bc0:	f000 f968 	bl	8010e94 <USB_SetDevSpeed>
 8010bc4:	e008      	b.n	8010bd8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010bc6:	2101      	movs	r1, #1
 8010bc8:	6878      	ldr	r0, [r7, #4]
 8010bca:	f000 f963 	bl	8010e94 <USB_SetDevSpeed>
 8010bce:	e003      	b.n	8010bd8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010bd0:	2103      	movs	r1, #3
 8010bd2:	6878      	ldr	r0, [r7, #4]
 8010bd4:	f000 f95e 	bl	8010e94 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010bd8:	2110      	movs	r1, #16
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f000 f8fa 	bl	8010dd4 <USB_FlushTxFifo>
 8010be0:	4603      	mov	r3, r0
 8010be2:	2b00      	cmp	r3, #0
 8010be4:	d001      	beq.n	8010bea <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8010be6:	2301      	movs	r3, #1
 8010be8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f924 	bl	8010e38 <USB_FlushRxFifo>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d001      	beq.n	8010bfa <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8010bf6:	2301      	movs	r3, #1
 8010bf8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010bfa:	68fb      	ldr	r3, [r7, #12]
 8010bfc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c00:	461a      	mov	r2, r3
 8010c02:	2300      	movs	r3, #0
 8010c04:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c0c:	461a      	mov	r2, r3
 8010c0e:	2300      	movs	r3, #0
 8010c10:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010c18:	461a      	mov	r2, r3
 8010c1a:	2300      	movs	r3, #0
 8010c1c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010c1e:	2300      	movs	r3, #0
 8010c20:	613b      	str	r3, [r7, #16]
 8010c22:	e043      	b.n	8010cac <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010c24:	693b      	ldr	r3, [r7, #16]
 8010c26:	015a      	lsls	r2, r3, #5
 8010c28:	68fb      	ldr	r3, [r7, #12]
 8010c2a:	4413      	add	r3, r2
 8010c2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c30:	681b      	ldr	r3, [r3, #0]
 8010c32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010c36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010c3a:	d118      	bne.n	8010c6e <USB_DevInit+0x162>
    {
      if (i == 0U)
 8010c3c:	693b      	ldr	r3, [r7, #16]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d10a      	bne.n	8010c58 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	015a      	lsls	r2, r3, #5
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	4413      	add	r3, r2
 8010c4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c4e:	461a      	mov	r2, r3
 8010c50:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010c54:	6013      	str	r3, [r2, #0]
 8010c56:	e013      	b.n	8010c80 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	015a      	lsls	r2, r3, #5
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	4413      	add	r3, r2
 8010c60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c64:	461a      	mov	r2, r3
 8010c66:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010c6a:	6013      	str	r3, [r2, #0]
 8010c6c:	e008      	b.n	8010c80 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	015a      	lsls	r2, r3, #5
 8010c72:	68fb      	ldr	r3, [r7, #12]
 8010c74:	4413      	add	r3, r2
 8010c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010c80:	693b      	ldr	r3, [r7, #16]
 8010c82:	015a      	lsls	r2, r3, #5
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	4413      	add	r3, r2
 8010c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c8c:	461a      	mov	r2, r3
 8010c8e:	2300      	movs	r3, #0
 8010c90:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	015a      	lsls	r2, r3, #5
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	4413      	add	r3, r2
 8010c9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010c9e:	461a      	mov	r2, r3
 8010ca0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010ca4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010ca6:	693b      	ldr	r3, [r7, #16]
 8010ca8:	3301      	adds	r3, #1
 8010caa:	613b      	str	r3, [r7, #16]
 8010cac:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	693b      	ldr	r3, [r7, #16]
 8010cb4:	4293      	cmp	r3, r2
 8010cb6:	d3b5      	bcc.n	8010c24 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010cb8:	2300      	movs	r3, #0
 8010cba:	613b      	str	r3, [r7, #16]
 8010cbc:	e043      	b.n	8010d46 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010cbe:	693b      	ldr	r3, [r7, #16]
 8010cc0:	015a      	lsls	r2, r3, #5
 8010cc2:	68fb      	ldr	r3, [r7, #12]
 8010cc4:	4413      	add	r3, r2
 8010cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8010cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8010cd4:	d118      	bne.n	8010d08 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8010cd6:	693b      	ldr	r3, [r7, #16]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d10a      	bne.n	8010cf2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010cdc:	693b      	ldr	r3, [r7, #16]
 8010cde:	015a      	lsls	r2, r3, #5
 8010ce0:	68fb      	ldr	r3, [r7, #12]
 8010ce2:	4413      	add	r3, r2
 8010ce4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010ce8:	461a      	mov	r2, r3
 8010cea:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8010cee:	6013      	str	r3, [r2, #0]
 8010cf0:	e013      	b.n	8010d1a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010cf2:	693b      	ldr	r3, [r7, #16]
 8010cf4:	015a      	lsls	r2, r3, #5
 8010cf6:	68fb      	ldr	r3, [r7, #12]
 8010cf8:	4413      	add	r3, r2
 8010cfa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010cfe:	461a      	mov	r2, r3
 8010d00:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8010d04:	6013      	str	r3, [r2, #0]
 8010d06:	e008      	b.n	8010d1a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010d08:	693b      	ldr	r3, [r7, #16]
 8010d0a:	015a      	lsls	r2, r3, #5
 8010d0c:	68fb      	ldr	r3, [r7, #12]
 8010d0e:	4413      	add	r3, r2
 8010d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d14:	461a      	mov	r2, r3
 8010d16:	2300      	movs	r3, #0
 8010d18:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010d1a:	693b      	ldr	r3, [r7, #16]
 8010d1c:	015a      	lsls	r2, r3, #5
 8010d1e:	68fb      	ldr	r3, [r7, #12]
 8010d20:	4413      	add	r3, r2
 8010d22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d26:	461a      	mov	r2, r3
 8010d28:	2300      	movs	r3, #0
 8010d2a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	015a      	lsls	r2, r3, #5
 8010d30:	68fb      	ldr	r3, [r7, #12]
 8010d32:	4413      	add	r3, r2
 8010d34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010d38:	461a      	mov	r2, r3
 8010d3a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8010d3e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d40:	693b      	ldr	r3, [r7, #16]
 8010d42:	3301      	adds	r3, #1
 8010d44:	613b      	str	r3, [r7, #16]
 8010d46:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010d4a:	461a      	mov	r2, r3
 8010d4c:	693b      	ldr	r3, [r7, #16]
 8010d4e:	4293      	cmp	r3, r2
 8010d50:	d3b5      	bcc.n	8010cbe <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010d58:	691b      	ldr	r3, [r3, #16]
 8010d5a:	68fa      	ldr	r2, [r7, #12]
 8010d5c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8010d60:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8010d64:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	2200      	movs	r2, #0
 8010d6a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8010d72:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010d74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d105      	bne.n	8010d88 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	699b      	ldr	r3, [r3, #24]
 8010d80:	f043 0210 	orr.w	r2, r3, #16
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	699a      	ldr	r2, [r3, #24]
 8010d8c:	4b10      	ldr	r3, [pc, #64]	@ (8010dd0 <USB_DevInit+0x2c4>)
 8010d8e:	4313      	orrs	r3, r2
 8010d90:	687a      	ldr	r2, [r7, #4]
 8010d92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010d94:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d005      	beq.n	8010da8 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	699b      	ldr	r3, [r3, #24]
 8010da0:	f043 0208 	orr.w	r2, r3, #8
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010da8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8010dac:	2b01      	cmp	r3, #1
 8010dae:	d107      	bne.n	8010dc0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	699b      	ldr	r3, [r3, #24]
 8010db4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8010db8:	f043 0304 	orr.w	r3, r3, #4
 8010dbc:	687a      	ldr	r2, [r7, #4]
 8010dbe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010dc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dc2:	4618      	mov	r0, r3
 8010dc4:	3718      	adds	r7, #24
 8010dc6:	46bd      	mov	sp, r7
 8010dc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010dcc:	b004      	add	sp, #16
 8010dce:	4770      	bx	lr
 8010dd0:	803c3800 	.word	0x803c3800

08010dd4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b085      	sub	sp, #20
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	6078      	str	r0, [r7, #4]
 8010ddc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010dde:	2300      	movs	r3, #0
 8010de0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	3301      	adds	r3, #1
 8010de6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010dee:	d901      	bls.n	8010df4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010df0:	2303      	movs	r3, #3
 8010df2:	e01b      	b.n	8010e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	691b      	ldr	r3, [r3, #16]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	daf2      	bge.n	8010de2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	019b      	lsls	r3, r3, #6
 8010e04:	f043 0220 	orr.w	r2, r3, #32
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010e0c:	68fb      	ldr	r3, [r7, #12]
 8010e0e:	3301      	adds	r3, #1
 8010e10:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010e12:	68fb      	ldr	r3, [r7, #12]
 8010e14:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010e18:	d901      	bls.n	8010e1e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010e1a:	2303      	movs	r3, #3
 8010e1c:	e006      	b.n	8010e2c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	691b      	ldr	r3, [r3, #16]
 8010e22:	f003 0320 	and.w	r3, r3, #32
 8010e26:	2b20      	cmp	r3, #32
 8010e28:	d0f0      	beq.n	8010e0c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010e2a:	2300      	movs	r3, #0
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3714      	adds	r7, #20
 8010e30:	46bd      	mov	sp, r7
 8010e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e36:	4770      	bx	lr

08010e38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010e38:	b480      	push	{r7}
 8010e3a:	b085      	sub	sp, #20
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010e40:	2300      	movs	r3, #0
 8010e42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010e44:	68fb      	ldr	r3, [r7, #12]
 8010e46:	3301      	adds	r3, #1
 8010e48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010e50:	d901      	bls.n	8010e56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010e52:	2303      	movs	r3, #3
 8010e54:	e018      	b.n	8010e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	691b      	ldr	r3, [r3, #16]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	daf2      	bge.n	8010e44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010e5e:	2300      	movs	r3, #0
 8010e60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2210      	movs	r2, #16
 8010e66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8010e6e:	68fb      	ldr	r3, [r7, #12]
 8010e70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8010e74:	d901      	bls.n	8010e7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010e76:	2303      	movs	r3, #3
 8010e78:	e006      	b.n	8010e88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	691b      	ldr	r3, [r3, #16]
 8010e7e:	f003 0310 	and.w	r3, r3, #16
 8010e82:	2b10      	cmp	r3, #16
 8010e84:	d0f0      	beq.n	8010e68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010e86:	2300      	movs	r3, #0
}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3714      	adds	r7, #20
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e92:	4770      	bx	lr

08010e94 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010e94:	b480      	push	{r7}
 8010e96:	b085      	sub	sp, #20
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	6078      	str	r0, [r7, #4]
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010ea4:	68fb      	ldr	r3, [r7, #12]
 8010ea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010eaa:	681a      	ldr	r2, [r3, #0]
 8010eac:	78fb      	ldrb	r3, [r7, #3]
 8010eae:	68f9      	ldr	r1, [r7, #12]
 8010eb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010eb4:	4313      	orrs	r3, r2
 8010eb6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010eb8:	2300      	movs	r3, #0
}
 8010eba:	4618      	mov	r0, r3
 8010ebc:	3714      	adds	r7, #20
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr

08010ec6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8010ec6:	b480      	push	{r7}
 8010ec8:	b087      	sub	sp, #28
 8010eca:	af00      	add	r7, sp, #0
 8010ecc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8010ed2:	693b      	ldr	r3, [r7, #16]
 8010ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010ed8:	689b      	ldr	r3, [r3, #8]
 8010eda:	f003 0306 	and.w	r3, r3, #6
 8010ede:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d102      	bne.n	8010eec <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	75fb      	strb	r3, [r7, #23]
 8010eea:	e00a      	b.n	8010f02 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	2b02      	cmp	r3, #2
 8010ef0:	d002      	beq.n	8010ef8 <USB_GetDevSpeed+0x32>
 8010ef2:	68fb      	ldr	r3, [r7, #12]
 8010ef4:	2b06      	cmp	r3, #6
 8010ef6:	d102      	bne.n	8010efe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8010ef8:	2302      	movs	r3, #2
 8010efa:	75fb      	strb	r3, [r7, #23]
 8010efc:	e001      	b.n	8010f02 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8010efe:	230f      	movs	r3, #15
 8010f00:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8010f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	371c      	adds	r7, #28
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f0e:	4770      	bx	lr

08010f10 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8010f10:	b480      	push	{r7}
 8010f12:	b085      	sub	sp, #20
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
 8010f18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8010f1e:	683b      	ldr	r3, [r7, #0]
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8010f24:	683b      	ldr	r3, [r7, #0]
 8010f26:	785b      	ldrb	r3, [r3, #1]
 8010f28:	2b01      	cmp	r3, #1
 8010f2a:	d13a      	bne.n	8010fa2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010f32:	69da      	ldr	r2, [r3, #28]
 8010f34:	683b      	ldr	r3, [r7, #0]
 8010f36:	781b      	ldrb	r3, [r3, #0]
 8010f38:	f003 030f 	and.w	r3, r3, #15
 8010f3c:	2101      	movs	r1, #1
 8010f3e:	fa01 f303 	lsl.w	r3, r1, r3
 8010f42:	b29b      	uxth	r3, r3
 8010f44:	68f9      	ldr	r1, [r7, #12]
 8010f46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010f4a:	4313      	orrs	r3, r2
 8010f4c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8010f4e:	68bb      	ldr	r3, [r7, #8]
 8010f50:	015a      	lsls	r2, r3, #5
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	4413      	add	r3, r2
 8010f56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f5a:	681b      	ldr	r3, [r3, #0]
 8010f5c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d155      	bne.n	8011010 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010f64:	68bb      	ldr	r3, [r7, #8]
 8010f66:	015a      	lsls	r2, r3, #5
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	4413      	add	r3, r2
 8010f6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8010f70:	681a      	ldr	r2, [r3, #0]
 8010f72:	683b      	ldr	r3, [r7, #0]
 8010f74:	689b      	ldr	r3, [r3, #8]
 8010f76:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	791b      	ldrb	r3, [r3, #4]
 8010f7e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010f80:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	059b      	lsls	r3, r3, #22
 8010f86:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8010f88:	4313      	orrs	r3, r2
 8010f8a:	68ba      	ldr	r2, [r7, #8]
 8010f8c:	0151      	lsls	r1, r2, #5
 8010f8e:	68fa      	ldr	r2, [r7, #12]
 8010f90:	440a      	add	r2, r1
 8010f92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8010f96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8010f9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8010f9e:	6013      	str	r3, [r2, #0]
 8010fa0:	e036      	b.n	8011010 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
 8010fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8010fa8:	69da      	ldr	r2, [r3, #28]
 8010faa:	683b      	ldr	r3, [r7, #0]
 8010fac:	781b      	ldrb	r3, [r3, #0]
 8010fae:	f003 030f 	and.w	r3, r3, #15
 8010fb2:	2101      	movs	r1, #1
 8010fb4:	fa01 f303 	lsl.w	r3, r1, r3
 8010fb8:	041b      	lsls	r3, r3, #16
 8010fba:	68f9      	ldr	r1, [r7, #12]
 8010fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8010fc0:	4313      	orrs	r3, r2
 8010fc2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8010fc4:	68bb      	ldr	r3, [r7, #8]
 8010fc6:	015a      	lsls	r2, r3, #5
 8010fc8:	68fb      	ldr	r3, [r7, #12]
 8010fca:	4413      	add	r3, r2
 8010fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d11a      	bne.n	8011010 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	015a      	lsls	r2, r3, #5
 8010fde:	68fb      	ldr	r3, [r7, #12]
 8010fe0:	4413      	add	r3, r2
 8010fe2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8010fe6:	681a      	ldr	r2, [r3, #0]
 8010fe8:	683b      	ldr	r3, [r7, #0]
 8010fea:	689b      	ldr	r3, [r3, #8]
 8010fec:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8010ff0:	683b      	ldr	r3, [r7, #0]
 8010ff2:	791b      	ldrb	r3, [r3, #4]
 8010ff4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8010ff6:	430b      	orrs	r3, r1
 8010ff8:	4313      	orrs	r3, r2
 8010ffa:	68ba      	ldr	r2, [r7, #8]
 8010ffc:	0151      	lsls	r1, r2, #5
 8010ffe:	68fa      	ldr	r2, [r7, #12]
 8011000:	440a      	add	r2, r1
 8011002:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801100a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801100e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8011010:	2300      	movs	r3, #0
}
 8011012:	4618      	mov	r0, r3
 8011014:	3714      	adds	r7, #20
 8011016:	46bd      	mov	sp, r7
 8011018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101c:	4770      	bx	lr
	...

08011020 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011020:	b480      	push	{r7}
 8011022:	b085      	sub	sp, #20
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801102a:	687b      	ldr	r3, [r7, #4]
 801102c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	781b      	ldrb	r3, [r3, #0]
 8011032:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8011034:	683b      	ldr	r3, [r7, #0]
 8011036:	785b      	ldrb	r3, [r3, #1]
 8011038:	2b01      	cmp	r3, #1
 801103a:	d161      	bne.n	8011100 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801103c:	68bb      	ldr	r3, [r7, #8]
 801103e:	015a      	lsls	r2, r3, #5
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	4413      	add	r3, r2
 8011044:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 801104e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011052:	d11f      	bne.n	8011094 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8011054:	68bb      	ldr	r3, [r7, #8]
 8011056:	015a      	lsls	r2, r3, #5
 8011058:	68fb      	ldr	r3, [r7, #12]
 801105a:	4413      	add	r3, r2
 801105c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011060:	681b      	ldr	r3, [r3, #0]
 8011062:	68ba      	ldr	r2, [r7, #8]
 8011064:	0151      	lsls	r1, r2, #5
 8011066:	68fa      	ldr	r2, [r7, #12]
 8011068:	440a      	add	r2, r1
 801106a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801106e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011072:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8011074:	68bb      	ldr	r3, [r7, #8]
 8011076:	015a      	lsls	r2, r3, #5
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	4413      	add	r3, r2
 801107c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011080:	681b      	ldr	r3, [r3, #0]
 8011082:	68ba      	ldr	r2, [r7, #8]
 8011084:	0151      	lsls	r1, r2, #5
 8011086:	68fa      	ldr	r2, [r7, #12]
 8011088:	440a      	add	r2, r1
 801108a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801108e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011092:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801109a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801109c:	683b      	ldr	r3, [r7, #0]
 801109e:	781b      	ldrb	r3, [r3, #0]
 80110a0:	f003 030f 	and.w	r3, r3, #15
 80110a4:	2101      	movs	r1, #1
 80110a6:	fa01 f303 	lsl.w	r3, r1, r3
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	43db      	mvns	r3, r3
 80110ae:	68f9      	ldr	r1, [r7, #12]
 80110b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80110b4:	4013      	ands	r3, r2
 80110b6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80110be:	69da      	ldr	r2, [r3, #28]
 80110c0:	683b      	ldr	r3, [r7, #0]
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	f003 030f 	and.w	r3, r3, #15
 80110c8:	2101      	movs	r1, #1
 80110ca:	fa01 f303 	lsl.w	r3, r1, r3
 80110ce:	b29b      	uxth	r3, r3
 80110d0:	43db      	mvns	r3, r3
 80110d2:	68f9      	ldr	r1, [r7, #12]
 80110d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80110d8:	4013      	ands	r3, r2
 80110da:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80110dc:	68bb      	ldr	r3, [r7, #8]
 80110de:	015a      	lsls	r2, r3, #5
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	4413      	add	r3, r2
 80110e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	0159      	lsls	r1, r3, #5
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	440b      	add	r3, r1
 80110f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80110f6:	4619      	mov	r1, r3
 80110f8:	4b35      	ldr	r3, [pc, #212]	@ (80111d0 <USB_DeactivateEndpoint+0x1b0>)
 80110fa:	4013      	ands	r3, r2
 80110fc:	600b      	str	r3, [r1, #0]
 80110fe:	e060      	b.n	80111c2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011100:	68bb      	ldr	r3, [r7, #8]
 8011102:	015a      	lsls	r2, r3, #5
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	4413      	add	r3, r2
 8011108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801110c:	681b      	ldr	r3, [r3, #0]
 801110e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011112:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011116:	d11f      	bne.n	8011158 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	015a      	lsls	r2, r3, #5
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	4413      	add	r3, r2
 8011120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011124:	681b      	ldr	r3, [r3, #0]
 8011126:	68ba      	ldr	r2, [r7, #8]
 8011128:	0151      	lsls	r1, r2, #5
 801112a:	68fa      	ldr	r2, [r7, #12]
 801112c:	440a      	add	r2, r1
 801112e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011132:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011136:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	015a      	lsls	r2, r3, #5
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	4413      	add	r3, r2
 8011140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011144:	681b      	ldr	r3, [r3, #0]
 8011146:	68ba      	ldr	r2, [r7, #8]
 8011148:	0151      	lsls	r1, r2, #5
 801114a:	68fa      	ldr	r2, [r7, #12]
 801114c:	440a      	add	r2, r1
 801114e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011152:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011156:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801115e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011160:	683b      	ldr	r3, [r7, #0]
 8011162:	781b      	ldrb	r3, [r3, #0]
 8011164:	f003 030f 	and.w	r3, r3, #15
 8011168:	2101      	movs	r1, #1
 801116a:	fa01 f303 	lsl.w	r3, r1, r3
 801116e:	041b      	lsls	r3, r3, #16
 8011170:	43db      	mvns	r3, r3
 8011172:	68f9      	ldr	r1, [r7, #12]
 8011174:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011178:	4013      	ands	r3, r2
 801117a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011182:	69da      	ldr	r2, [r3, #28]
 8011184:	683b      	ldr	r3, [r7, #0]
 8011186:	781b      	ldrb	r3, [r3, #0]
 8011188:	f003 030f 	and.w	r3, r3, #15
 801118c:	2101      	movs	r1, #1
 801118e:	fa01 f303 	lsl.w	r3, r1, r3
 8011192:	041b      	lsls	r3, r3, #16
 8011194:	43db      	mvns	r3, r3
 8011196:	68f9      	ldr	r1, [r7, #12]
 8011198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 801119c:	4013      	ands	r3, r2
 801119e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	015a      	lsls	r2, r3, #5
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	4413      	add	r3, r2
 80111a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111ac:	681a      	ldr	r2, [r3, #0]
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	0159      	lsls	r1, r3, #5
 80111b2:	68fb      	ldr	r3, [r7, #12]
 80111b4:	440b      	add	r3, r1
 80111b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80111ba:	4619      	mov	r1, r3
 80111bc:	4b05      	ldr	r3, [pc, #20]	@ (80111d4 <USB_DeactivateEndpoint+0x1b4>)
 80111be:	4013      	ands	r3, r2
 80111c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80111c2:	2300      	movs	r3, #0
}
 80111c4:	4618      	mov	r0, r3
 80111c6:	3714      	adds	r7, #20
 80111c8:	46bd      	mov	sp, r7
 80111ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ce:	4770      	bx	lr
 80111d0:	ec337800 	.word	0xec337800
 80111d4:	eff37800 	.word	0xeff37800

080111d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b08a      	sub	sp, #40	@ 0x28
 80111dc:	af02      	add	r7, sp, #8
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	4613      	mov	r3, r2
 80111e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80111ea:	68bb      	ldr	r3, [r7, #8]
 80111ec:	781b      	ldrb	r3, [r3, #0]
 80111ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80111f0:	68bb      	ldr	r3, [r7, #8]
 80111f2:	785b      	ldrb	r3, [r3, #1]
 80111f4:	2b01      	cmp	r3, #1
 80111f6:	f040 817f 	bne.w	80114f8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	691b      	ldr	r3, [r3, #16]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d132      	bne.n	8011268 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011202:	69bb      	ldr	r3, [r7, #24]
 8011204:	015a      	lsls	r2, r3, #5
 8011206:	69fb      	ldr	r3, [r7, #28]
 8011208:	4413      	add	r3, r2
 801120a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801120e:	691b      	ldr	r3, [r3, #16]
 8011210:	69ba      	ldr	r2, [r7, #24]
 8011212:	0151      	lsls	r1, r2, #5
 8011214:	69fa      	ldr	r2, [r7, #28]
 8011216:	440a      	add	r2, r1
 8011218:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801121c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8011220:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8011224:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8011226:	69bb      	ldr	r3, [r7, #24]
 8011228:	015a      	lsls	r2, r3, #5
 801122a:	69fb      	ldr	r3, [r7, #28]
 801122c:	4413      	add	r3, r2
 801122e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011232:	691b      	ldr	r3, [r3, #16]
 8011234:	69ba      	ldr	r2, [r7, #24]
 8011236:	0151      	lsls	r1, r2, #5
 8011238:	69fa      	ldr	r2, [r7, #28]
 801123a:	440a      	add	r2, r1
 801123c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011240:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011244:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011246:	69bb      	ldr	r3, [r7, #24]
 8011248:	015a      	lsls	r2, r3, #5
 801124a:	69fb      	ldr	r3, [r7, #28]
 801124c:	4413      	add	r3, r2
 801124e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011252:	691b      	ldr	r3, [r3, #16]
 8011254:	69ba      	ldr	r2, [r7, #24]
 8011256:	0151      	lsls	r1, r2, #5
 8011258:	69fa      	ldr	r2, [r7, #28]
 801125a:	440a      	add	r2, r1
 801125c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011260:	0cdb      	lsrs	r3, r3, #19
 8011262:	04db      	lsls	r3, r3, #19
 8011264:	6113      	str	r3, [r2, #16]
 8011266:	e097      	b.n	8011398 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8011268:	69bb      	ldr	r3, [r7, #24]
 801126a:	015a      	lsls	r2, r3, #5
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	4413      	add	r3, r2
 8011270:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011274:	691b      	ldr	r3, [r3, #16]
 8011276:	69ba      	ldr	r2, [r7, #24]
 8011278:	0151      	lsls	r1, r2, #5
 801127a:	69fa      	ldr	r2, [r7, #28]
 801127c:	440a      	add	r2, r1
 801127e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011282:	0cdb      	lsrs	r3, r3, #19
 8011284:	04db      	lsls	r3, r3, #19
 8011286:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8011288:	69bb      	ldr	r3, [r7, #24]
 801128a:	015a      	lsls	r2, r3, #5
 801128c:	69fb      	ldr	r3, [r7, #28]
 801128e:	4413      	add	r3, r2
 8011290:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011294:	691b      	ldr	r3, [r3, #16]
 8011296:	69ba      	ldr	r2, [r7, #24]
 8011298:	0151      	lsls	r1, r2, #5
 801129a:	69fa      	ldr	r2, [r7, #28]
 801129c:	440a      	add	r2, r1
 801129e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80112a2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80112a6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80112aa:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80112ac:	69bb      	ldr	r3, [r7, #24]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d11a      	bne.n	80112e8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80112b2:	68bb      	ldr	r3, [r7, #8]
 80112b4:	691a      	ldr	r2, [r3, #16]
 80112b6:	68bb      	ldr	r3, [r7, #8]
 80112b8:	689b      	ldr	r3, [r3, #8]
 80112ba:	429a      	cmp	r2, r3
 80112bc:	d903      	bls.n	80112c6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80112be:	68bb      	ldr	r3, [r7, #8]
 80112c0:	689a      	ldr	r2, [r3, #8]
 80112c2:	68bb      	ldr	r3, [r7, #8]
 80112c4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80112c6:	69bb      	ldr	r3, [r7, #24]
 80112c8:	015a      	lsls	r2, r3, #5
 80112ca:	69fb      	ldr	r3, [r7, #28]
 80112cc:	4413      	add	r3, r2
 80112ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80112d2:	691b      	ldr	r3, [r3, #16]
 80112d4:	69ba      	ldr	r2, [r7, #24]
 80112d6:	0151      	lsls	r1, r2, #5
 80112d8:	69fa      	ldr	r2, [r7, #28]
 80112da:	440a      	add	r2, r1
 80112dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80112e0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80112e4:	6113      	str	r3, [r2, #16]
 80112e6:	e044      	b.n	8011372 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	691a      	ldr	r2, [r3, #16]
 80112ec:	68bb      	ldr	r3, [r7, #8]
 80112ee:	689b      	ldr	r3, [r3, #8]
 80112f0:	4413      	add	r3, r2
 80112f2:	1e5a      	subs	r2, r3, #1
 80112f4:	68bb      	ldr	r3, [r7, #8]
 80112f6:	689b      	ldr	r3, [r3, #8]
 80112f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80112fc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80112fe:	69bb      	ldr	r3, [r7, #24]
 8011300:	015a      	lsls	r2, r3, #5
 8011302:	69fb      	ldr	r3, [r7, #28]
 8011304:	4413      	add	r3, r2
 8011306:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801130a:	691a      	ldr	r2, [r3, #16]
 801130c:	8afb      	ldrh	r3, [r7, #22]
 801130e:	04d9      	lsls	r1, r3, #19
 8011310:	4ba4      	ldr	r3, [pc, #656]	@ (80115a4 <USB_EPStartXfer+0x3cc>)
 8011312:	400b      	ands	r3, r1
 8011314:	69b9      	ldr	r1, [r7, #24]
 8011316:	0148      	lsls	r0, r1, #5
 8011318:	69f9      	ldr	r1, [r7, #28]
 801131a:	4401      	add	r1, r0
 801131c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011320:	4313      	orrs	r3, r2
 8011322:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8011324:	68bb      	ldr	r3, [r7, #8]
 8011326:	791b      	ldrb	r3, [r3, #4]
 8011328:	2b01      	cmp	r3, #1
 801132a:	d122      	bne.n	8011372 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 801132c:	69bb      	ldr	r3, [r7, #24]
 801132e:	015a      	lsls	r2, r3, #5
 8011330:	69fb      	ldr	r3, [r7, #28]
 8011332:	4413      	add	r3, r2
 8011334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011338:	691b      	ldr	r3, [r3, #16]
 801133a:	69ba      	ldr	r2, [r7, #24]
 801133c:	0151      	lsls	r1, r2, #5
 801133e:	69fa      	ldr	r2, [r7, #28]
 8011340:	440a      	add	r2, r1
 8011342:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011346:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 801134a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 801134c:	69bb      	ldr	r3, [r7, #24]
 801134e:	015a      	lsls	r2, r3, #5
 8011350:	69fb      	ldr	r3, [r7, #28]
 8011352:	4413      	add	r3, r2
 8011354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011358:	691a      	ldr	r2, [r3, #16]
 801135a:	8afb      	ldrh	r3, [r7, #22]
 801135c:	075b      	lsls	r3, r3, #29
 801135e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8011362:	69b9      	ldr	r1, [r7, #24]
 8011364:	0148      	lsls	r0, r1, #5
 8011366:	69f9      	ldr	r1, [r7, #28]
 8011368:	4401      	add	r1, r0
 801136a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 801136e:	4313      	orrs	r3, r2
 8011370:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8011372:	69bb      	ldr	r3, [r7, #24]
 8011374:	015a      	lsls	r2, r3, #5
 8011376:	69fb      	ldr	r3, [r7, #28]
 8011378:	4413      	add	r3, r2
 801137a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801137e:	691a      	ldr	r2, [r3, #16]
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	691b      	ldr	r3, [r3, #16]
 8011384:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011388:	69b9      	ldr	r1, [r7, #24]
 801138a:	0148      	lsls	r0, r1, #5
 801138c:	69f9      	ldr	r1, [r7, #28]
 801138e:	4401      	add	r1, r0
 8011390:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8011394:	4313      	orrs	r3, r2
 8011396:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8011398:	79fb      	ldrb	r3, [r7, #7]
 801139a:	2b01      	cmp	r3, #1
 801139c:	d14b      	bne.n	8011436 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 801139e:	68bb      	ldr	r3, [r7, #8]
 80113a0:	69db      	ldr	r3, [r3, #28]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d009      	beq.n	80113ba <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80113a6:	69bb      	ldr	r3, [r7, #24]
 80113a8:	015a      	lsls	r2, r3, #5
 80113aa:	69fb      	ldr	r3, [r7, #28]
 80113ac:	4413      	add	r3, r2
 80113ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113b2:	461a      	mov	r2, r3
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	69db      	ldr	r3, [r3, #28]
 80113b8:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	791b      	ldrb	r3, [r3, #4]
 80113be:	2b01      	cmp	r3, #1
 80113c0:	d128      	bne.n	8011414 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80113c2:	69fb      	ldr	r3, [r7, #28]
 80113c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80113c8:	689b      	ldr	r3, [r3, #8]
 80113ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d110      	bne.n	80113f4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80113d2:	69bb      	ldr	r3, [r7, #24]
 80113d4:	015a      	lsls	r2, r3, #5
 80113d6:	69fb      	ldr	r3, [r7, #28]
 80113d8:	4413      	add	r3, r2
 80113da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	69ba      	ldr	r2, [r7, #24]
 80113e2:	0151      	lsls	r1, r2, #5
 80113e4:	69fa      	ldr	r2, [r7, #28]
 80113e6:	440a      	add	r2, r1
 80113e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80113ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80113f0:	6013      	str	r3, [r2, #0]
 80113f2:	e00f      	b.n	8011414 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80113f4:	69bb      	ldr	r3, [r7, #24]
 80113f6:	015a      	lsls	r2, r3, #5
 80113f8:	69fb      	ldr	r3, [r7, #28]
 80113fa:	4413      	add	r3, r2
 80113fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	69ba      	ldr	r2, [r7, #24]
 8011404:	0151      	lsls	r1, r2, #5
 8011406:	69fa      	ldr	r2, [r7, #28]
 8011408:	440a      	add	r2, r1
 801140a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801140e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011412:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011414:	69bb      	ldr	r3, [r7, #24]
 8011416:	015a      	lsls	r2, r3, #5
 8011418:	69fb      	ldr	r3, [r7, #28]
 801141a:	4413      	add	r3, r2
 801141c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011420:	681b      	ldr	r3, [r3, #0]
 8011422:	69ba      	ldr	r2, [r7, #24]
 8011424:	0151      	lsls	r1, r2, #5
 8011426:	69fa      	ldr	r2, [r7, #28]
 8011428:	440a      	add	r2, r1
 801142a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801142e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011432:	6013      	str	r3, [r2, #0]
 8011434:	e166      	b.n	8011704 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8011436:	69bb      	ldr	r3, [r7, #24]
 8011438:	015a      	lsls	r2, r3, #5
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	4413      	add	r3, r2
 801143e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	69ba      	ldr	r2, [r7, #24]
 8011446:	0151      	lsls	r1, r2, #5
 8011448:	69fa      	ldr	r2, [r7, #28]
 801144a:	440a      	add	r2, r1
 801144c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011450:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011454:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011456:	68bb      	ldr	r3, [r7, #8]
 8011458:	791b      	ldrb	r3, [r3, #4]
 801145a:	2b01      	cmp	r3, #1
 801145c:	d015      	beq.n	801148a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801145e:	68bb      	ldr	r3, [r7, #8]
 8011460:	691b      	ldr	r3, [r3, #16]
 8011462:	2b00      	cmp	r3, #0
 8011464:	f000 814e 	beq.w	8011704 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8011468:	69fb      	ldr	r3, [r7, #28]
 801146a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 801146e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011470:	68bb      	ldr	r3, [r7, #8]
 8011472:	781b      	ldrb	r3, [r3, #0]
 8011474:	f003 030f 	and.w	r3, r3, #15
 8011478:	2101      	movs	r1, #1
 801147a:	fa01 f303 	lsl.w	r3, r1, r3
 801147e:	69f9      	ldr	r1, [r7, #28]
 8011480:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011484:	4313      	orrs	r3, r2
 8011486:	634b      	str	r3, [r1, #52]	@ 0x34
 8011488:	e13c      	b.n	8011704 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801148a:	69fb      	ldr	r3, [r7, #28]
 801148c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011490:	689b      	ldr	r3, [r3, #8]
 8011492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011496:	2b00      	cmp	r3, #0
 8011498:	d110      	bne.n	80114bc <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	015a      	lsls	r2, r3, #5
 801149e:	69fb      	ldr	r3, [r7, #28]
 80114a0:	4413      	add	r3, r2
 80114a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	69ba      	ldr	r2, [r7, #24]
 80114aa:	0151      	lsls	r1, r2, #5
 80114ac:	69fa      	ldr	r2, [r7, #28]
 80114ae:	440a      	add	r2, r1
 80114b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80114b4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80114b8:	6013      	str	r3, [r2, #0]
 80114ba:	e00f      	b.n	80114dc <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80114bc:	69bb      	ldr	r3, [r7, #24]
 80114be:	015a      	lsls	r2, r3, #5
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	4413      	add	r3, r2
 80114c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	69ba      	ldr	r2, [r7, #24]
 80114cc:	0151      	lsls	r1, r2, #5
 80114ce:	69fa      	ldr	r2, [r7, #28]
 80114d0:	440a      	add	r2, r1
 80114d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80114d6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80114da:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	68d9      	ldr	r1, [r3, #12]
 80114e0:	68bb      	ldr	r3, [r7, #8]
 80114e2:	781a      	ldrb	r2, [r3, #0]
 80114e4:	68bb      	ldr	r3, [r7, #8]
 80114e6:	691b      	ldr	r3, [r3, #16]
 80114e8:	b298      	uxth	r0, r3
 80114ea:	79fb      	ldrb	r3, [r7, #7]
 80114ec:	9300      	str	r3, [sp, #0]
 80114ee:	4603      	mov	r3, r0
 80114f0:	68f8      	ldr	r0, [r7, #12]
 80114f2:	f000 f9b9 	bl	8011868 <USB_WritePacket>
 80114f6:	e105      	b.n	8011704 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80114f8:	69bb      	ldr	r3, [r7, #24]
 80114fa:	015a      	lsls	r2, r3, #5
 80114fc:	69fb      	ldr	r3, [r7, #28]
 80114fe:	4413      	add	r3, r2
 8011500:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011504:	691b      	ldr	r3, [r3, #16]
 8011506:	69ba      	ldr	r2, [r7, #24]
 8011508:	0151      	lsls	r1, r2, #5
 801150a:	69fa      	ldr	r2, [r7, #28]
 801150c:	440a      	add	r2, r1
 801150e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011512:	0cdb      	lsrs	r3, r3, #19
 8011514:	04db      	lsls	r3, r3, #19
 8011516:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8011518:	69bb      	ldr	r3, [r7, #24]
 801151a:	015a      	lsls	r2, r3, #5
 801151c:	69fb      	ldr	r3, [r7, #28]
 801151e:	4413      	add	r3, r2
 8011520:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011524:	691b      	ldr	r3, [r3, #16]
 8011526:	69ba      	ldr	r2, [r7, #24]
 8011528:	0151      	lsls	r1, r2, #5
 801152a:	69fa      	ldr	r2, [r7, #28]
 801152c:	440a      	add	r2, r1
 801152e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011532:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8011536:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 801153a:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 801153c:	69bb      	ldr	r3, [r7, #24]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d132      	bne.n	80115a8 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8011542:	68bb      	ldr	r3, [r7, #8]
 8011544:	691b      	ldr	r3, [r3, #16]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d003      	beq.n	8011552 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	689a      	ldr	r2, [r3, #8]
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	689a      	ldr	r2, [r3, #8]
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 801155a:	69bb      	ldr	r3, [r7, #24]
 801155c:	015a      	lsls	r2, r3, #5
 801155e:	69fb      	ldr	r3, [r7, #28]
 8011560:	4413      	add	r3, r2
 8011562:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011566:	691a      	ldr	r2, [r3, #16]
 8011568:	68bb      	ldr	r3, [r7, #8]
 801156a:	6a1b      	ldr	r3, [r3, #32]
 801156c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011570:	69b9      	ldr	r1, [r7, #24]
 8011572:	0148      	lsls	r0, r1, #5
 8011574:	69f9      	ldr	r1, [r7, #28]
 8011576:	4401      	add	r1, r0
 8011578:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801157c:	4313      	orrs	r3, r2
 801157e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011580:	69bb      	ldr	r3, [r7, #24]
 8011582:	015a      	lsls	r2, r3, #5
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	4413      	add	r3, r2
 8011588:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801158c:	691b      	ldr	r3, [r3, #16]
 801158e:	69ba      	ldr	r2, [r7, #24]
 8011590:	0151      	lsls	r1, r2, #5
 8011592:	69fa      	ldr	r2, [r7, #28]
 8011594:	440a      	add	r2, r1
 8011596:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 801159a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801159e:	6113      	str	r3, [r2, #16]
 80115a0:	e062      	b.n	8011668 <USB_EPStartXfer+0x490>
 80115a2:	bf00      	nop
 80115a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	691b      	ldr	r3, [r3, #16]
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d123      	bne.n	80115f8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80115b0:	69bb      	ldr	r3, [r7, #24]
 80115b2:	015a      	lsls	r2, r3, #5
 80115b4:	69fb      	ldr	r3, [r7, #28]
 80115b6:	4413      	add	r3, r2
 80115b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80115bc:	691a      	ldr	r2, [r3, #16]
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	689b      	ldr	r3, [r3, #8]
 80115c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80115c6:	69b9      	ldr	r1, [r7, #24]
 80115c8:	0148      	lsls	r0, r1, #5
 80115ca:	69f9      	ldr	r1, [r7, #28]
 80115cc:	4401      	add	r1, r0
 80115ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80115d2:	4313      	orrs	r3, r2
 80115d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80115d6:	69bb      	ldr	r3, [r7, #24]
 80115d8:	015a      	lsls	r2, r3, #5
 80115da:	69fb      	ldr	r3, [r7, #28]
 80115dc:	4413      	add	r3, r2
 80115de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80115e2:	691b      	ldr	r3, [r3, #16]
 80115e4:	69ba      	ldr	r2, [r7, #24]
 80115e6:	0151      	lsls	r1, r2, #5
 80115e8:	69fa      	ldr	r2, [r7, #28]
 80115ea:	440a      	add	r2, r1
 80115ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80115f0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80115f4:	6113      	str	r3, [r2, #16]
 80115f6:	e037      	b.n	8011668 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	691a      	ldr	r2, [r3, #16]
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	689b      	ldr	r3, [r3, #8]
 8011600:	4413      	add	r3, r2
 8011602:	1e5a      	subs	r2, r3, #1
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	689b      	ldr	r3, [r3, #8]
 8011608:	fbb2 f3f3 	udiv	r3, r2, r3
 801160c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 801160e:	68bb      	ldr	r3, [r7, #8]
 8011610:	689b      	ldr	r3, [r3, #8]
 8011612:	8afa      	ldrh	r2, [r7, #22]
 8011614:	fb03 f202 	mul.w	r2, r3, r2
 8011618:	68bb      	ldr	r3, [r7, #8]
 801161a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 801161c:	69bb      	ldr	r3, [r7, #24]
 801161e:	015a      	lsls	r2, r3, #5
 8011620:	69fb      	ldr	r3, [r7, #28]
 8011622:	4413      	add	r3, r2
 8011624:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011628:	691a      	ldr	r2, [r3, #16]
 801162a:	8afb      	ldrh	r3, [r7, #22]
 801162c:	04d9      	lsls	r1, r3, #19
 801162e:	4b38      	ldr	r3, [pc, #224]	@ (8011710 <USB_EPStartXfer+0x538>)
 8011630:	400b      	ands	r3, r1
 8011632:	69b9      	ldr	r1, [r7, #24]
 8011634:	0148      	lsls	r0, r1, #5
 8011636:	69f9      	ldr	r1, [r7, #28]
 8011638:	4401      	add	r1, r0
 801163a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 801163e:	4313      	orrs	r3, r2
 8011640:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8011642:	69bb      	ldr	r3, [r7, #24]
 8011644:	015a      	lsls	r2, r3, #5
 8011646:	69fb      	ldr	r3, [r7, #28]
 8011648:	4413      	add	r3, r2
 801164a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801164e:	691a      	ldr	r2, [r3, #16]
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	6a1b      	ldr	r3, [r3, #32]
 8011654:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8011658:	69b9      	ldr	r1, [r7, #24]
 801165a:	0148      	lsls	r0, r1, #5
 801165c:	69f9      	ldr	r1, [r7, #28]
 801165e:	4401      	add	r1, r0
 8011660:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8011664:	4313      	orrs	r3, r2
 8011666:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8011668:	79fb      	ldrb	r3, [r7, #7]
 801166a:	2b01      	cmp	r3, #1
 801166c:	d10d      	bne.n	801168a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801166e:	68bb      	ldr	r3, [r7, #8]
 8011670:	68db      	ldr	r3, [r3, #12]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d009      	beq.n	801168a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8011676:	68bb      	ldr	r3, [r7, #8]
 8011678:	68d9      	ldr	r1, [r3, #12]
 801167a:	69bb      	ldr	r3, [r7, #24]
 801167c:	015a      	lsls	r2, r3, #5
 801167e:	69fb      	ldr	r3, [r7, #28]
 8011680:	4413      	add	r3, r2
 8011682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011686:	460a      	mov	r2, r1
 8011688:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801168a:	68bb      	ldr	r3, [r7, #8]
 801168c:	791b      	ldrb	r3, [r3, #4]
 801168e:	2b01      	cmp	r3, #1
 8011690:	d128      	bne.n	80116e4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8011692:	69fb      	ldr	r3, [r7, #28]
 8011694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011698:	689b      	ldr	r3, [r3, #8]
 801169a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801169e:	2b00      	cmp	r3, #0
 80116a0:	d110      	bne.n	80116c4 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80116a2:	69bb      	ldr	r3, [r7, #24]
 80116a4:	015a      	lsls	r2, r3, #5
 80116a6:	69fb      	ldr	r3, [r7, #28]
 80116a8:	4413      	add	r3, r2
 80116aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	69ba      	ldr	r2, [r7, #24]
 80116b2:	0151      	lsls	r1, r2, #5
 80116b4:	69fa      	ldr	r2, [r7, #28]
 80116b6:	440a      	add	r2, r1
 80116b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80116bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80116c0:	6013      	str	r3, [r2, #0]
 80116c2:	e00f      	b.n	80116e4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80116c4:	69bb      	ldr	r3, [r7, #24]
 80116c6:	015a      	lsls	r2, r3, #5
 80116c8:	69fb      	ldr	r3, [r7, #28]
 80116ca:	4413      	add	r3, r2
 80116cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	69ba      	ldr	r2, [r7, #24]
 80116d4:	0151      	lsls	r1, r2, #5
 80116d6:	69fa      	ldr	r2, [r7, #28]
 80116d8:	440a      	add	r2, r1
 80116da:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80116de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80116e2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80116e4:	69bb      	ldr	r3, [r7, #24]
 80116e6:	015a      	lsls	r2, r3, #5
 80116e8:	69fb      	ldr	r3, [r7, #28]
 80116ea:	4413      	add	r3, r2
 80116ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	69ba      	ldr	r2, [r7, #24]
 80116f4:	0151      	lsls	r1, r2, #5
 80116f6:	69fa      	ldr	r2, [r7, #28]
 80116f8:	440a      	add	r2, r1
 80116fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80116fe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8011702:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011704:	2300      	movs	r3, #0
}
 8011706:	4618      	mov	r0, r3
 8011708:	3720      	adds	r7, #32
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	1ff80000 	.word	0x1ff80000

08011714 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8011714:	b480      	push	{r7}
 8011716:	b087      	sub	sp, #28
 8011718:	af00      	add	r7, sp, #0
 801171a:	6078      	str	r0, [r7, #4]
 801171c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 801171e:	2300      	movs	r3, #0
 8011720:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8011722:	2300      	movs	r3, #0
 8011724:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011726:	687b      	ldr	r3, [r7, #4]
 8011728:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 801172a:	683b      	ldr	r3, [r7, #0]
 801172c:	785b      	ldrb	r3, [r3, #1]
 801172e:	2b01      	cmp	r3, #1
 8011730:	d14a      	bne.n	80117c8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	781b      	ldrb	r3, [r3, #0]
 8011736:	015a      	lsls	r2, r3, #5
 8011738:	693b      	ldr	r3, [r7, #16]
 801173a:	4413      	add	r3, r2
 801173c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801174a:	f040 8086 	bne.w	801185a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 801174e:	683b      	ldr	r3, [r7, #0]
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	015a      	lsls	r2, r3, #5
 8011754:	693b      	ldr	r3, [r7, #16]
 8011756:	4413      	add	r3, r2
 8011758:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	683a      	ldr	r2, [r7, #0]
 8011760:	7812      	ldrb	r2, [r2, #0]
 8011762:	0151      	lsls	r1, r2, #5
 8011764:	693a      	ldr	r2, [r7, #16]
 8011766:	440a      	add	r2, r1
 8011768:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 801176c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011770:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8011772:	683b      	ldr	r3, [r7, #0]
 8011774:	781b      	ldrb	r3, [r3, #0]
 8011776:	015a      	lsls	r2, r3, #5
 8011778:	693b      	ldr	r3, [r7, #16]
 801177a:	4413      	add	r3, r2
 801177c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011780:	681b      	ldr	r3, [r3, #0]
 8011782:	683a      	ldr	r2, [r7, #0]
 8011784:	7812      	ldrb	r2, [r2, #0]
 8011786:	0151      	lsls	r1, r2, #5
 8011788:	693a      	ldr	r2, [r7, #16]
 801178a:	440a      	add	r2, r1
 801178c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011790:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011794:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8011796:	68fb      	ldr	r3, [r7, #12]
 8011798:	3301      	adds	r3, #1
 801179a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	f242 7210 	movw	r2, #10000	@ 0x2710
 80117a2:	4293      	cmp	r3, r2
 80117a4:	d902      	bls.n	80117ac <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80117a6:	2301      	movs	r3, #1
 80117a8:	75fb      	strb	r3, [r7, #23]
          break;
 80117aa:	e056      	b.n	801185a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	781b      	ldrb	r3, [r3, #0]
 80117b0:	015a      	lsls	r2, r3, #5
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	4413      	add	r3, r2
 80117b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80117c0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80117c4:	d0e7      	beq.n	8011796 <USB_EPStopXfer+0x82>
 80117c6:	e048      	b.n	801185a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80117c8:	683b      	ldr	r3, [r7, #0]
 80117ca:	781b      	ldrb	r3, [r3, #0]
 80117cc:	015a      	lsls	r2, r3, #5
 80117ce:	693b      	ldr	r3, [r7, #16]
 80117d0:	4413      	add	r3, r2
 80117d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80117dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80117e0:	d13b      	bne.n	801185a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	781b      	ldrb	r3, [r3, #0]
 80117e6:	015a      	lsls	r2, r3, #5
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	4413      	add	r3, r2
 80117ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	683a      	ldr	r2, [r7, #0]
 80117f4:	7812      	ldrb	r2, [r2, #0]
 80117f6:	0151      	lsls	r1, r2, #5
 80117f8:	693a      	ldr	r2, [r7, #16]
 80117fa:	440a      	add	r2, r1
 80117fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011800:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011804:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8011806:	683b      	ldr	r3, [r7, #0]
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	015a      	lsls	r2, r3, #5
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	4413      	add	r3, r2
 8011810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	683a      	ldr	r2, [r7, #0]
 8011818:	7812      	ldrb	r2, [r2, #0]
 801181a:	0151      	lsls	r1, r2, #5
 801181c:	693a      	ldr	r2, [r7, #16]
 801181e:	440a      	add	r2, r1
 8011820:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011824:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8011828:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 801182a:	68fb      	ldr	r3, [r7, #12]
 801182c:	3301      	adds	r3, #1
 801182e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	f242 7210 	movw	r2, #10000	@ 0x2710
 8011836:	4293      	cmp	r3, r2
 8011838:	d902      	bls.n	8011840 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 801183a:	2301      	movs	r3, #1
 801183c:	75fb      	strb	r3, [r7, #23]
          break;
 801183e:	e00c      	b.n	801185a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8011840:	683b      	ldr	r3, [r7, #0]
 8011842:	781b      	ldrb	r3, [r3, #0]
 8011844:	015a      	lsls	r2, r3, #5
 8011846:	693b      	ldr	r3, [r7, #16]
 8011848:	4413      	add	r3, r2
 801184a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 801184e:	681b      	ldr	r3, [r3, #0]
 8011850:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011854:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011858:	d0e7      	beq.n	801182a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 801185a:	7dfb      	ldrb	r3, [r7, #23]
}
 801185c:	4618      	mov	r0, r3
 801185e:	371c      	adds	r7, #28
 8011860:	46bd      	mov	sp, r7
 8011862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011866:	4770      	bx	lr

08011868 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8011868:	b480      	push	{r7}
 801186a:	b089      	sub	sp, #36	@ 0x24
 801186c:	af00      	add	r7, sp, #0
 801186e:	60f8      	str	r0, [r7, #12]
 8011870:	60b9      	str	r1, [r7, #8]
 8011872:	4611      	mov	r1, r2
 8011874:	461a      	mov	r2, r3
 8011876:	460b      	mov	r3, r1
 8011878:	71fb      	strb	r3, [r7, #7]
 801187a:	4613      	mov	r3, r2
 801187c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8011886:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801188a:	2b00      	cmp	r3, #0
 801188c:	d123      	bne.n	80118d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 801188e:	88bb      	ldrh	r3, [r7, #4]
 8011890:	3303      	adds	r3, #3
 8011892:	089b      	lsrs	r3, r3, #2
 8011894:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8011896:	2300      	movs	r3, #0
 8011898:	61bb      	str	r3, [r7, #24]
 801189a:	e018      	b.n	80118ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 801189c:	79fb      	ldrb	r3, [r7, #7]
 801189e:	031a      	lsls	r2, r3, #12
 80118a0:	697b      	ldr	r3, [r7, #20]
 80118a2:	4413      	add	r3, r2
 80118a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80118a8:	461a      	mov	r2, r3
 80118aa:	69fb      	ldr	r3, [r7, #28]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80118b0:	69fb      	ldr	r3, [r7, #28]
 80118b2:	3301      	adds	r3, #1
 80118b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80118b6:	69fb      	ldr	r3, [r7, #28]
 80118b8:	3301      	adds	r3, #1
 80118ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80118bc:	69fb      	ldr	r3, [r7, #28]
 80118be:	3301      	adds	r3, #1
 80118c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	3301      	adds	r3, #1
 80118c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80118c8:	69bb      	ldr	r3, [r7, #24]
 80118ca:	3301      	adds	r3, #1
 80118cc:	61bb      	str	r3, [r7, #24]
 80118ce:	69ba      	ldr	r2, [r7, #24]
 80118d0:	693b      	ldr	r3, [r7, #16]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d3e2      	bcc.n	801189c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80118d6:	2300      	movs	r3, #0
}
 80118d8:	4618      	mov	r0, r3
 80118da:	3724      	adds	r7, #36	@ 0x24
 80118dc:	46bd      	mov	sp, r7
 80118de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e2:	4770      	bx	lr

080118e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b08b      	sub	sp, #44	@ 0x2c
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	60b9      	str	r1, [r7, #8]
 80118ee:	4613      	mov	r3, r2
 80118f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80118f6:	68bb      	ldr	r3, [r7, #8]
 80118f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80118fa:	88fb      	ldrh	r3, [r7, #6]
 80118fc:	089b      	lsrs	r3, r3, #2
 80118fe:	b29b      	uxth	r3, r3
 8011900:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8011902:	88fb      	ldrh	r3, [r7, #6]
 8011904:	f003 0303 	and.w	r3, r3, #3
 8011908:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 801190a:	2300      	movs	r3, #0
 801190c:	623b      	str	r3, [r7, #32]
 801190e:	e014      	b.n	801193a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8011910:	69bb      	ldr	r3, [r7, #24]
 8011912:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011916:	681a      	ldr	r2, [r3, #0]
 8011918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801191a:	601a      	str	r2, [r3, #0]
    pDest++;
 801191c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801191e:	3301      	adds	r3, #1
 8011920:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011924:	3301      	adds	r3, #1
 8011926:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8011928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801192a:	3301      	adds	r3, #1
 801192c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 801192e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011930:	3301      	adds	r3, #1
 8011932:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8011934:	6a3b      	ldr	r3, [r7, #32]
 8011936:	3301      	adds	r3, #1
 8011938:	623b      	str	r3, [r7, #32]
 801193a:	6a3a      	ldr	r2, [r7, #32]
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	429a      	cmp	r2, r3
 8011940:	d3e6      	bcc.n	8011910 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8011942:	8bfb      	ldrh	r3, [r7, #30]
 8011944:	2b00      	cmp	r3, #0
 8011946:	d01e      	beq.n	8011986 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8011948:	2300      	movs	r3, #0
 801194a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 801194c:	69bb      	ldr	r3, [r7, #24]
 801194e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8011952:	461a      	mov	r2, r3
 8011954:	f107 0310 	add.w	r3, r7, #16
 8011958:	6812      	ldr	r2, [r2, #0]
 801195a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 801195c:	693a      	ldr	r2, [r7, #16]
 801195e:	6a3b      	ldr	r3, [r7, #32]
 8011960:	b2db      	uxtb	r3, r3
 8011962:	00db      	lsls	r3, r3, #3
 8011964:	fa22 f303 	lsr.w	r3, r2, r3
 8011968:	b2da      	uxtb	r2, r3
 801196a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801196c:	701a      	strb	r2, [r3, #0]
      i++;
 801196e:	6a3b      	ldr	r3, [r7, #32]
 8011970:	3301      	adds	r3, #1
 8011972:	623b      	str	r3, [r7, #32]
      pDest++;
 8011974:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011976:	3301      	adds	r3, #1
 8011978:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 801197a:	8bfb      	ldrh	r3, [r7, #30]
 801197c:	3b01      	subs	r3, #1
 801197e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8011980:	8bfb      	ldrh	r3, [r7, #30]
 8011982:	2b00      	cmp	r3, #0
 8011984:	d1ea      	bne.n	801195c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8011986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8011988:	4618      	mov	r0, r3
 801198a:	372c      	adds	r7, #44	@ 0x2c
 801198c:	46bd      	mov	sp, r7
 801198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011992:	4770      	bx	lr

08011994 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011994:	b480      	push	{r7}
 8011996:	b085      	sub	sp, #20
 8011998:	af00      	add	r7, sp, #0
 801199a:	6078      	str	r0, [r7, #4]
 801199c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801199e:	687b      	ldr	r3, [r7, #4]
 80119a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80119a2:	683b      	ldr	r3, [r7, #0]
 80119a4:	781b      	ldrb	r3, [r3, #0]
 80119a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	785b      	ldrb	r3, [r3, #1]
 80119ac:	2b01      	cmp	r3, #1
 80119ae:	d12c      	bne.n	8011a0a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	015a      	lsls	r2, r3, #5
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	4413      	add	r3, r2
 80119b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80119bc:	681b      	ldr	r3, [r3, #0]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	db12      	blt.n	80119e8 <USB_EPSetStall+0x54>
 80119c2:	68bb      	ldr	r3, [r7, #8]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	d00f      	beq.n	80119e8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	015a      	lsls	r2, r3, #5
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	4413      	add	r3, r2
 80119d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	68ba      	ldr	r2, [r7, #8]
 80119d8:	0151      	lsls	r1, r2, #5
 80119da:	68fa      	ldr	r2, [r7, #12]
 80119dc:	440a      	add	r2, r1
 80119de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80119e2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80119e6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	015a      	lsls	r2, r3, #5
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	4413      	add	r3, r2
 80119f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	68ba      	ldr	r2, [r7, #8]
 80119f8:	0151      	lsls	r1, r2, #5
 80119fa:	68fa      	ldr	r2, [r7, #12]
 80119fc:	440a      	add	r2, r1
 80119fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011a02:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011a06:	6013      	str	r3, [r2, #0]
 8011a08:	e02b      	b.n	8011a62 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8011a0a:	68bb      	ldr	r3, [r7, #8]
 8011a0c:	015a      	lsls	r2, r3, #5
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	4413      	add	r3, r2
 8011a12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a16:	681b      	ldr	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	db12      	blt.n	8011a42 <USB_EPSetStall+0xae>
 8011a1c:	68bb      	ldr	r3, [r7, #8]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d00f      	beq.n	8011a42 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	015a      	lsls	r2, r3, #5
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	4413      	add	r3, r2
 8011a2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a2e:	681b      	ldr	r3, [r3, #0]
 8011a30:	68ba      	ldr	r2, [r7, #8]
 8011a32:	0151      	lsls	r1, r2, #5
 8011a34:	68fa      	ldr	r2, [r7, #12]
 8011a36:	440a      	add	r2, r1
 8011a38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a3c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8011a40:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8011a42:	68bb      	ldr	r3, [r7, #8]
 8011a44:	015a      	lsls	r2, r3, #5
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	4413      	add	r3, r2
 8011a4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011a4e:	681b      	ldr	r3, [r3, #0]
 8011a50:	68ba      	ldr	r2, [r7, #8]
 8011a52:	0151      	lsls	r1, r2, #5
 8011a54:	68fa      	ldr	r2, [r7, #12]
 8011a56:	440a      	add	r2, r1
 8011a58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011a5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8011a60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011a62:	2300      	movs	r3, #0
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	3714      	adds	r7, #20
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a6e:	4770      	bx	lr

08011a70 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8011a70:	b480      	push	{r7}
 8011a72:	b085      	sub	sp, #20
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	6078      	str	r0, [r7, #4]
 8011a78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8011a7e:	683b      	ldr	r3, [r7, #0]
 8011a80:	781b      	ldrb	r3, [r3, #0]
 8011a82:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8011a84:	683b      	ldr	r3, [r7, #0]
 8011a86:	785b      	ldrb	r3, [r3, #1]
 8011a88:	2b01      	cmp	r3, #1
 8011a8a:	d128      	bne.n	8011ade <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8011a8c:	68bb      	ldr	r3, [r7, #8]
 8011a8e:	015a      	lsls	r2, r3, #5
 8011a90:	68fb      	ldr	r3, [r7, #12]
 8011a92:	4413      	add	r3, r2
 8011a94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	68ba      	ldr	r2, [r7, #8]
 8011a9c:	0151      	lsls	r1, r2, #5
 8011a9e:	68fa      	ldr	r2, [r7, #12]
 8011aa0:	440a      	add	r2, r1
 8011aa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011aa6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011aaa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011aac:	683b      	ldr	r3, [r7, #0]
 8011aae:	791b      	ldrb	r3, [r3, #4]
 8011ab0:	2b03      	cmp	r3, #3
 8011ab2:	d003      	beq.n	8011abc <USB_EPClearStall+0x4c>
 8011ab4:	683b      	ldr	r3, [r7, #0]
 8011ab6:	791b      	ldrb	r3, [r3, #4]
 8011ab8:	2b02      	cmp	r3, #2
 8011aba:	d138      	bne.n	8011b2e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	015a      	lsls	r2, r3, #5
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	4413      	add	r3, r2
 8011ac4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	68ba      	ldr	r2, [r7, #8]
 8011acc:	0151      	lsls	r1, r2, #5
 8011ace:	68fa      	ldr	r2, [r7, #12]
 8011ad0:	440a      	add	r2, r1
 8011ad2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011ad6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011ada:	6013      	str	r3, [r2, #0]
 8011adc:	e027      	b.n	8011b2e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8011ade:	68bb      	ldr	r3, [r7, #8]
 8011ae0:	015a      	lsls	r2, r3, #5
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	4413      	add	r3, r2
 8011ae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	68ba      	ldr	r2, [r7, #8]
 8011aee:	0151      	lsls	r1, r2, #5
 8011af0:	68fa      	ldr	r2, [r7, #12]
 8011af2:	440a      	add	r2, r1
 8011af4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011af8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8011afc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8011afe:	683b      	ldr	r3, [r7, #0]
 8011b00:	791b      	ldrb	r3, [r3, #4]
 8011b02:	2b03      	cmp	r3, #3
 8011b04:	d003      	beq.n	8011b0e <USB_EPClearStall+0x9e>
 8011b06:	683b      	ldr	r3, [r7, #0]
 8011b08:	791b      	ldrb	r3, [r3, #4]
 8011b0a:	2b02      	cmp	r3, #2
 8011b0c:	d10f      	bne.n	8011b2e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8011b0e:	68bb      	ldr	r3, [r7, #8]
 8011b10:	015a      	lsls	r2, r3, #5
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	4413      	add	r3, r2
 8011b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011b1a:	681b      	ldr	r3, [r3, #0]
 8011b1c:	68ba      	ldr	r2, [r7, #8]
 8011b1e:	0151      	lsls	r1, r2, #5
 8011b20:	68fa      	ldr	r2, [r7, #12]
 8011b22:	440a      	add	r2, r1
 8011b24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011b28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8011b2c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8011b2e:	2300      	movs	r3, #0
}
 8011b30:	4618      	mov	r0, r3
 8011b32:	3714      	adds	r7, #20
 8011b34:	46bd      	mov	sp, r7
 8011b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b3a:	4770      	bx	lr

08011b3c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8011b3c:	b480      	push	{r7}
 8011b3e:	b085      	sub	sp, #20
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	460b      	mov	r3, r1
 8011b46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8011b4c:	68fb      	ldr	r3, [r7, #12]
 8011b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b52:	681b      	ldr	r3, [r3, #0]
 8011b54:	68fa      	ldr	r2, [r7, #12]
 8011b56:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011b5a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8011b5e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011b66:	681a      	ldr	r2, [r3, #0]
 8011b68:	78fb      	ldrb	r3, [r7, #3]
 8011b6a:	011b      	lsls	r3, r3, #4
 8011b6c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8011b70:	68f9      	ldr	r1, [r7, #12]
 8011b72:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8011b76:	4313      	orrs	r3, r2
 8011b78:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8011b7a:	2300      	movs	r3, #0
}
 8011b7c:	4618      	mov	r0, r3
 8011b7e:	3714      	adds	r7, #20
 8011b80:	46bd      	mov	sp, r7
 8011b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b86:	4770      	bx	lr

08011b88 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011b88:	b480      	push	{r7}
 8011b8a:	b085      	sub	sp, #20
 8011b8c:	af00      	add	r7, sp, #0
 8011b8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	68fa      	ldr	r2, [r7, #12]
 8011b9e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011ba2:	f023 0303 	bic.w	r3, r3, #3
 8011ba6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8011ba8:	68fb      	ldr	r3, [r7, #12]
 8011baa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011bae:	685b      	ldr	r3, [r3, #4]
 8011bb0:	68fa      	ldr	r2, [r7, #12]
 8011bb2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011bb6:	f023 0302 	bic.w	r3, r3, #2
 8011bba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011bbc:	2300      	movs	r3, #0
}
 8011bbe:	4618      	mov	r0, r3
 8011bc0:	3714      	adds	r7, #20
 8011bc2:	46bd      	mov	sp, r7
 8011bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bc8:	4770      	bx	lr

08011bca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8011bca:	b480      	push	{r7}
 8011bcc:	b085      	sub	sp, #20
 8011bce:	af00      	add	r7, sp, #0
 8011bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8011bd6:	68fb      	ldr	r3, [r7, #12]
 8011bd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	68fa      	ldr	r2, [r7, #12]
 8011be0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011be4:	f023 0303 	bic.w	r3, r3, #3
 8011be8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011bf0:	685b      	ldr	r3, [r3, #4]
 8011bf2:	68fa      	ldr	r2, [r7, #12]
 8011bf4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011bf8:	f043 0302 	orr.w	r3, r3, #2
 8011bfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011bfe:	2300      	movs	r3, #0
}
 8011c00:	4618      	mov	r0, r3
 8011c02:	3714      	adds	r7, #20
 8011c04:	46bd      	mov	sp, r7
 8011c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0a:	4770      	bx	lr

08011c0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8011c0c:	b480      	push	{r7}
 8011c0e:	b085      	sub	sp, #20
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8011c14:	687b      	ldr	r3, [r7, #4]
 8011c16:	695b      	ldr	r3, [r3, #20]
 8011c18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	699b      	ldr	r3, [r3, #24]
 8011c1e:	68fa      	ldr	r2, [r7, #12]
 8011c20:	4013      	ands	r3, r2
 8011c22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8011c24:	68fb      	ldr	r3, [r7, #12]
}
 8011c26:	4618      	mov	r0, r3
 8011c28:	3714      	adds	r7, #20
 8011c2a:	46bd      	mov	sp, r7
 8011c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c30:	4770      	bx	lr

08011c32 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011c32:	b480      	push	{r7}
 8011c34:	b085      	sub	sp, #20
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c44:	699b      	ldr	r3, [r3, #24]
 8011c46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c4e:	69db      	ldr	r3, [r3, #28]
 8011c50:	68ba      	ldr	r2, [r7, #8]
 8011c52:	4013      	ands	r3, r2
 8011c54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8011c56:	68bb      	ldr	r3, [r7, #8]
 8011c58:	0c1b      	lsrs	r3, r3, #16
}
 8011c5a:	4618      	mov	r0, r3
 8011c5c:	3714      	adds	r7, #20
 8011c5e:	46bd      	mov	sp, r7
 8011c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c64:	4770      	bx	lr

08011c66 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8011c66:	b480      	push	{r7}
 8011c68:	b085      	sub	sp, #20
 8011c6a:	af00      	add	r7, sp, #0
 8011c6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8011c72:	68fb      	ldr	r3, [r7, #12]
 8011c74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c78:	699b      	ldr	r3, [r3, #24]
 8011c7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8011c7c:	68fb      	ldr	r3, [r7, #12]
 8011c7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011c82:	69db      	ldr	r3, [r3, #28]
 8011c84:	68ba      	ldr	r2, [r7, #8]
 8011c86:	4013      	ands	r3, r2
 8011c88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8011c8a:	68bb      	ldr	r3, [r7, #8]
 8011c8c:	b29b      	uxth	r3, r3
}
 8011c8e:	4618      	mov	r0, r3
 8011c90:	3714      	adds	r7, #20
 8011c92:	46bd      	mov	sp, r7
 8011c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c98:	4770      	bx	lr

08011c9a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011c9a:	b480      	push	{r7}
 8011c9c:	b085      	sub	sp, #20
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	6078      	str	r0, [r7, #4]
 8011ca2:	460b      	mov	r3, r1
 8011ca4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ca6:	687b      	ldr	r3, [r7, #4]
 8011ca8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8011caa:	78fb      	ldrb	r3, [r7, #3]
 8011cac:	015a      	lsls	r2, r3, #5
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	4413      	add	r3, r2
 8011cb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011cb6:	689b      	ldr	r3, [r3, #8]
 8011cb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011cc0:	695b      	ldr	r3, [r3, #20]
 8011cc2:	68ba      	ldr	r2, [r7, #8]
 8011cc4:	4013      	ands	r3, r2
 8011cc6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011cc8:	68bb      	ldr	r3, [r7, #8]
}
 8011cca:	4618      	mov	r0, r3
 8011ccc:	3714      	adds	r7, #20
 8011cce:	46bd      	mov	sp, r7
 8011cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cd4:	4770      	bx	lr

08011cd6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8011cd6:	b480      	push	{r7}
 8011cd8:	b087      	sub	sp, #28
 8011cda:	af00      	add	r7, sp, #0
 8011cdc:	6078      	str	r0, [r7, #4]
 8011cde:	460b      	mov	r3, r1
 8011ce0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011cec:	691b      	ldr	r3, [r3, #16]
 8011cee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011cf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011cf8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8011cfa:	78fb      	ldrb	r3, [r7, #3]
 8011cfc:	f003 030f 	and.w	r3, r3, #15
 8011d00:	68fa      	ldr	r2, [r7, #12]
 8011d02:	fa22 f303 	lsr.w	r3, r2, r3
 8011d06:	01db      	lsls	r3, r3, #7
 8011d08:	b2db      	uxtb	r3, r3
 8011d0a:	693a      	ldr	r2, [r7, #16]
 8011d0c:	4313      	orrs	r3, r2
 8011d0e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8011d10:	78fb      	ldrb	r3, [r7, #3]
 8011d12:	015a      	lsls	r2, r3, #5
 8011d14:	697b      	ldr	r3, [r7, #20]
 8011d16:	4413      	add	r3, r2
 8011d18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d1c:	689b      	ldr	r3, [r3, #8]
 8011d1e:	693a      	ldr	r2, [r7, #16]
 8011d20:	4013      	ands	r3, r2
 8011d22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8011d24:	68bb      	ldr	r3, [r7, #8]
}
 8011d26:	4618      	mov	r0, r3
 8011d28:	371c      	adds	r7, #28
 8011d2a:	46bd      	mov	sp, r7
 8011d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d30:	4770      	bx	lr

08011d32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8011d32:	b480      	push	{r7}
 8011d34:	b083      	sub	sp, #12
 8011d36:	af00      	add	r7, sp, #0
 8011d38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	695b      	ldr	r3, [r3, #20]
 8011d3e:	f003 0301 	and.w	r3, r3, #1
}
 8011d42:	4618      	mov	r0, r3
 8011d44:	370c      	adds	r7, #12
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr

08011d4e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8011d4e:	b480      	push	{r7}
 8011d50:	b085      	sub	sp, #20
 8011d52:	af00      	add	r7, sp, #0
 8011d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011d56:	687b      	ldr	r3, [r7, #4]
 8011d58:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8011d5a:	68fb      	ldr	r3, [r7, #12]
 8011d5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	68fa      	ldr	r2, [r7, #12]
 8011d64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8011d68:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8011d6c:	f023 0307 	bic.w	r3, r3, #7
 8011d70:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8011d78:	685b      	ldr	r3, [r3, #4]
 8011d7a:	68fa      	ldr	r2, [r7, #12]
 8011d7c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8011d80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011d84:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8011d86:	2300      	movs	r3, #0
}
 8011d88:	4618      	mov	r0, r3
 8011d8a:	3714      	adds	r7, #20
 8011d8c:	46bd      	mov	sp, r7
 8011d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d92:	4770      	bx	lr

08011d94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b087      	sub	sp, #28
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	60f8      	str	r0, [r7, #12]
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	607a      	str	r2, [r7, #4]
 8011da0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011da2:	68fb      	ldr	r3, [r7, #12]
 8011da4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8011da6:	68fb      	ldr	r3, [r7, #12]
 8011da8:	333c      	adds	r3, #60	@ 0x3c
 8011daa:	3304      	adds	r3, #4
 8011dac:	681b      	ldr	r3, [r3, #0]
 8011dae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8011db0:	693b      	ldr	r3, [r7, #16]
 8011db2:	4a26      	ldr	r2, [pc, #152]	@ (8011e4c <USB_EP0_OutStart+0xb8>)
 8011db4:	4293      	cmp	r3, r2
 8011db6:	d90a      	bls.n	8011dce <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dbe:	681b      	ldr	r3, [r3, #0]
 8011dc0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8011dc4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8011dc8:	d101      	bne.n	8011dce <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	e037      	b.n	8011e3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8011dce:	697b      	ldr	r3, [r7, #20]
 8011dd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8011dda:	697b      	ldr	r3, [r7, #20]
 8011ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011de0:	691b      	ldr	r3, [r3, #16]
 8011de2:	697a      	ldr	r2, [r7, #20]
 8011de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011de8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8011dec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8011dee:	697b      	ldr	r3, [r7, #20]
 8011df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011df4:	691b      	ldr	r3, [r3, #16]
 8011df6:	697a      	ldr	r2, [r7, #20]
 8011df8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011dfc:	f043 0318 	orr.w	r3, r3, #24
 8011e00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8011e02:	697b      	ldr	r3, [r7, #20]
 8011e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e08:	691b      	ldr	r3, [r3, #16]
 8011e0a:	697a      	ldr	r2, [r7, #20]
 8011e0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011e10:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8011e14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8011e16:	7afb      	ldrb	r3, [r7, #11]
 8011e18:	2b01      	cmp	r3, #1
 8011e1a:	d10f      	bne.n	8011e3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8011e1c:	697b      	ldr	r3, [r7, #20]
 8011e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e22:	461a      	mov	r2, r3
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	697a      	ldr	r2, [r7, #20]
 8011e32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8011e36:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8011e3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8011e3c:	2300      	movs	r3, #0
}
 8011e3e:	4618      	mov	r0, r3
 8011e40:	371c      	adds	r7, #28
 8011e42:	46bd      	mov	sp, r7
 8011e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e48:	4770      	bx	lr
 8011e4a:	bf00      	nop
 8011e4c:	4f54300a 	.word	0x4f54300a

08011e50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011e50:	b480      	push	{r7}
 8011e52:	b085      	sub	sp, #20
 8011e54:	af00      	add	r7, sp, #0
 8011e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8011e58:	2300      	movs	r3, #0
 8011e5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	3301      	adds	r3, #1
 8011e60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011e68:	d901      	bls.n	8011e6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8011e6a:	2303      	movs	r3, #3
 8011e6c:	e01b      	b.n	8011ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	691b      	ldr	r3, [r3, #16]
 8011e72:	2b00      	cmp	r3, #0
 8011e74:	daf2      	bge.n	8011e5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8011e76:	2300      	movs	r3, #0
 8011e78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	691b      	ldr	r3, [r3, #16]
 8011e7e:	f043 0201 	orr.w	r2, r3, #1
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8011e86:	68fb      	ldr	r3, [r7, #12]
 8011e88:	3301      	adds	r3, #1
 8011e8a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8011e8c:	68fb      	ldr	r3, [r7, #12]
 8011e8e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8011e92:	d901      	bls.n	8011e98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011e94:	2303      	movs	r3, #3
 8011e96:	e006      	b.n	8011ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8011e98:	687b      	ldr	r3, [r7, #4]
 8011e9a:	691b      	ldr	r3, [r3, #16]
 8011e9c:	f003 0301 	and.w	r3, r3, #1
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d0f0      	beq.n	8011e86 <USB_CoreReset+0x36>

  return HAL_OK;
 8011ea4:	2300      	movs	r3, #0
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3714      	adds	r7, #20
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eb0:	4770      	bx	lr
	...

08011eb4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b084      	sub	sp, #16
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
 8011ebc:	460b      	mov	r3, r1
 8011ebe:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8011ec0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8011ec4:	f005 fe10 	bl	8017ae8 <USBD_static_malloc>
 8011ec8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d109      	bne.n	8011ee4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011ed0:	687b      	ldr	r3, [r7, #4]
 8011ed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	32b0      	adds	r2, #176	@ 0xb0
 8011eda:	2100      	movs	r1, #0
 8011edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011ee0:	2302      	movs	r3, #2
 8011ee2:	e0d4      	b.n	801208e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8011ee4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8011ee8:	2100      	movs	r1, #0
 8011eea:	68f8      	ldr	r0, [r7, #12]
 8011eec:	f008 fd12 	bl	801a914 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	32b0      	adds	r2, #176	@ 0xb0
 8011efa:	68f9      	ldr	r1, [r7, #12]
 8011efc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011f00:	687b      	ldr	r3, [r7, #4]
 8011f02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	32b0      	adds	r2, #176	@ 0xb0
 8011f0a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011f14:	687b      	ldr	r3, [r7, #4]
 8011f16:	7c1b      	ldrb	r3, [r3, #16]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d138      	bne.n	8011f8e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011f1c:	4b5e      	ldr	r3, [pc, #376]	@ (8012098 <USBD_CDC_Init+0x1e4>)
 8011f1e:	7819      	ldrb	r1, [r3, #0]
 8011f20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011f24:	2202      	movs	r2, #2
 8011f26:	6878      	ldr	r0, [r7, #4]
 8011f28:	f005 fcbb 	bl	80178a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011f2c:	4b5a      	ldr	r3, [pc, #360]	@ (8012098 <USBD_CDC_Init+0x1e4>)
 8011f2e:	781b      	ldrb	r3, [r3, #0]
 8011f30:	f003 020f 	and.w	r2, r3, #15
 8011f34:	6879      	ldr	r1, [r7, #4]
 8011f36:	4613      	mov	r3, r2
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	4413      	add	r3, r2
 8011f3c:	009b      	lsls	r3, r3, #2
 8011f3e:	440b      	add	r3, r1
 8011f40:	3324      	adds	r3, #36	@ 0x24
 8011f42:	2201      	movs	r2, #1
 8011f44:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011f46:	4b55      	ldr	r3, [pc, #340]	@ (801209c <USBD_CDC_Init+0x1e8>)
 8011f48:	7819      	ldrb	r1, [r3, #0]
 8011f4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011f4e:	2202      	movs	r2, #2
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f005 fca6 	bl	80178a2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011f56:	4b51      	ldr	r3, [pc, #324]	@ (801209c <USBD_CDC_Init+0x1e8>)
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	f003 020f 	and.w	r2, r3, #15
 8011f5e:	6879      	ldr	r1, [r7, #4]
 8011f60:	4613      	mov	r3, r2
 8011f62:	009b      	lsls	r3, r3, #2
 8011f64:	4413      	add	r3, r2
 8011f66:	009b      	lsls	r3, r3, #2
 8011f68:	440b      	add	r3, r1
 8011f6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011f6e:	2201      	movs	r2, #1
 8011f70:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8011f72:	4b4b      	ldr	r3, [pc, #300]	@ (80120a0 <USBD_CDC_Init+0x1ec>)
 8011f74:	781b      	ldrb	r3, [r3, #0]
 8011f76:	f003 020f 	and.w	r2, r3, #15
 8011f7a:	6879      	ldr	r1, [r7, #4]
 8011f7c:	4613      	mov	r3, r2
 8011f7e:	009b      	lsls	r3, r3, #2
 8011f80:	4413      	add	r3, r2
 8011f82:	009b      	lsls	r3, r3, #2
 8011f84:	440b      	add	r3, r1
 8011f86:	3326      	adds	r3, #38	@ 0x26
 8011f88:	2210      	movs	r2, #16
 8011f8a:	801a      	strh	r2, [r3, #0]
 8011f8c:	e035      	b.n	8011ffa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011f8e:	4b42      	ldr	r3, [pc, #264]	@ (8012098 <USBD_CDC_Init+0x1e4>)
 8011f90:	7819      	ldrb	r1, [r3, #0]
 8011f92:	2340      	movs	r3, #64	@ 0x40
 8011f94:	2202      	movs	r2, #2
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f005 fc83 	bl	80178a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011f9c:	4b3e      	ldr	r3, [pc, #248]	@ (8012098 <USBD_CDC_Init+0x1e4>)
 8011f9e:	781b      	ldrb	r3, [r3, #0]
 8011fa0:	f003 020f 	and.w	r2, r3, #15
 8011fa4:	6879      	ldr	r1, [r7, #4]
 8011fa6:	4613      	mov	r3, r2
 8011fa8:	009b      	lsls	r3, r3, #2
 8011faa:	4413      	add	r3, r2
 8011fac:	009b      	lsls	r3, r3, #2
 8011fae:	440b      	add	r3, r1
 8011fb0:	3324      	adds	r3, #36	@ 0x24
 8011fb2:	2201      	movs	r2, #1
 8011fb4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8011fb6:	4b39      	ldr	r3, [pc, #228]	@ (801209c <USBD_CDC_Init+0x1e8>)
 8011fb8:	7819      	ldrb	r1, [r3, #0]
 8011fba:	2340      	movs	r3, #64	@ 0x40
 8011fbc:	2202      	movs	r2, #2
 8011fbe:	6878      	ldr	r0, [r7, #4]
 8011fc0:	f005 fc6f 	bl	80178a2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8011fc4:	4b35      	ldr	r3, [pc, #212]	@ (801209c <USBD_CDC_Init+0x1e8>)
 8011fc6:	781b      	ldrb	r3, [r3, #0]
 8011fc8:	f003 020f 	and.w	r2, r3, #15
 8011fcc:	6879      	ldr	r1, [r7, #4]
 8011fce:	4613      	mov	r3, r2
 8011fd0:	009b      	lsls	r3, r3, #2
 8011fd2:	4413      	add	r3, r2
 8011fd4:	009b      	lsls	r3, r3, #2
 8011fd6:	440b      	add	r3, r1
 8011fd8:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8011fdc:	2201      	movs	r2, #1
 8011fde:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80120a0 <USBD_CDC_Init+0x1ec>)
 8011fe2:	781b      	ldrb	r3, [r3, #0]
 8011fe4:	f003 020f 	and.w	r2, r3, #15
 8011fe8:	6879      	ldr	r1, [r7, #4]
 8011fea:	4613      	mov	r3, r2
 8011fec:	009b      	lsls	r3, r3, #2
 8011fee:	4413      	add	r3, r2
 8011ff0:	009b      	lsls	r3, r3, #2
 8011ff2:	440b      	add	r3, r1
 8011ff4:	3326      	adds	r3, #38	@ 0x26
 8011ff6:	2210      	movs	r2, #16
 8011ff8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011ffa:	4b29      	ldr	r3, [pc, #164]	@ (80120a0 <USBD_CDC_Init+0x1ec>)
 8011ffc:	7819      	ldrb	r1, [r3, #0]
 8011ffe:	2308      	movs	r3, #8
 8012000:	2203      	movs	r2, #3
 8012002:	6878      	ldr	r0, [r7, #4]
 8012004:	f005 fc4d 	bl	80178a2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8012008:	4b25      	ldr	r3, [pc, #148]	@ (80120a0 <USBD_CDC_Init+0x1ec>)
 801200a:	781b      	ldrb	r3, [r3, #0]
 801200c:	f003 020f 	and.w	r2, r3, #15
 8012010:	6879      	ldr	r1, [r7, #4]
 8012012:	4613      	mov	r3, r2
 8012014:	009b      	lsls	r3, r3, #2
 8012016:	4413      	add	r3, r2
 8012018:	009b      	lsls	r3, r3, #2
 801201a:	440b      	add	r3, r1
 801201c:	3324      	adds	r3, #36	@ 0x24
 801201e:	2201      	movs	r2, #1
 8012020:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	2200      	movs	r2, #0
 8012026:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	33b0      	adds	r3, #176	@ 0xb0
 8012034:	009b      	lsls	r3, r3, #2
 8012036:	4413      	add	r3, r2
 8012038:	685b      	ldr	r3, [r3, #4]
 801203a:	681b      	ldr	r3, [r3, #0]
 801203c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 801203e:	68fb      	ldr	r3, [r7, #12]
 8012040:	2200      	movs	r2, #0
 8012042:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	2200      	movs	r2, #0
 801204a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8012054:	2b00      	cmp	r3, #0
 8012056:	d101      	bne.n	801205c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8012058:	2302      	movs	r3, #2
 801205a:	e018      	b.n	801208e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	7c1b      	ldrb	r3, [r3, #16]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d10a      	bne.n	801207a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8012064:	4b0d      	ldr	r3, [pc, #52]	@ (801209c <USBD_CDC_Init+0x1e8>)
 8012066:	7819      	ldrb	r1, [r3, #0]
 8012068:	68fb      	ldr	r3, [r7, #12]
 801206a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 801206e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f005 fd04 	bl	8017a80 <USBD_LL_PrepareReceive>
 8012078:	e008      	b.n	801208c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801207a:	4b08      	ldr	r3, [pc, #32]	@ (801209c <USBD_CDC_Init+0x1e8>)
 801207c:	7819      	ldrb	r1, [r3, #0]
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8012084:	2340      	movs	r3, #64	@ 0x40
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f005 fcfa 	bl	8017a80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 801208c:	2300      	movs	r3, #0
}
 801208e:	4618      	mov	r0, r3
 8012090:	3710      	adds	r7, #16
 8012092:	46bd      	mov	sp, r7
 8012094:	bd80      	pop	{r7, pc}
 8012096:	bf00      	nop
 8012098:	200000e7 	.word	0x200000e7
 801209c:	200000e8 	.word	0x200000e8
 80120a0:	200000e9 	.word	0x200000e9

080120a4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b082      	sub	sp, #8
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	460b      	mov	r3, r1
 80120ae:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80120b0:	4b3a      	ldr	r3, [pc, #232]	@ (801219c <USBD_CDC_DeInit+0xf8>)
 80120b2:	781b      	ldrb	r3, [r3, #0]
 80120b4:	4619      	mov	r1, r3
 80120b6:	6878      	ldr	r0, [r7, #4]
 80120b8:	f005 fc19 	bl	80178ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80120bc:	4b37      	ldr	r3, [pc, #220]	@ (801219c <USBD_CDC_DeInit+0xf8>)
 80120be:	781b      	ldrb	r3, [r3, #0]
 80120c0:	f003 020f 	and.w	r2, r3, #15
 80120c4:	6879      	ldr	r1, [r7, #4]
 80120c6:	4613      	mov	r3, r2
 80120c8:	009b      	lsls	r3, r3, #2
 80120ca:	4413      	add	r3, r2
 80120cc:	009b      	lsls	r3, r3, #2
 80120ce:	440b      	add	r3, r1
 80120d0:	3324      	adds	r3, #36	@ 0x24
 80120d2:	2200      	movs	r2, #0
 80120d4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80120d6:	4b32      	ldr	r3, [pc, #200]	@ (80121a0 <USBD_CDC_DeInit+0xfc>)
 80120d8:	781b      	ldrb	r3, [r3, #0]
 80120da:	4619      	mov	r1, r3
 80120dc:	6878      	ldr	r0, [r7, #4]
 80120de:	f005 fc06 	bl	80178ee <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80120e2:	4b2f      	ldr	r3, [pc, #188]	@ (80121a0 <USBD_CDC_DeInit+0xfc>)
 80120e4:	781b      	ldrb	r3, [r3, #0]
 80120e6:	f003 020f 	and.w	r2, r3, #15
 80120ea:	6879      	ldr	r1, [r7, #4]
 80120ec:	4613      	mov	r3, r2
 80120ee:	009b      	lsls	r3, r3, #2
 80120f0:	4413      	add	r3, r2
 80120f2:	009b      	lsls	r3, r3, #2
 80120f4:	440b      	add	r3, r1
 80120f6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80120fa:	2200      	movs	r2, #0
 80120fc:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80120fe:	4b29      	ldr	r3, [pc, #164]	@ (80121a4 <USBD_CDC_DeInit+0x100>)
 8012100:	781b      	ldrb	r3, [r3, #0]
 8012102:	4619      	mov	r1, r3
 8012104:	6878      	ldr	r0, [r7, #4]
 8012106:	f005 fbf2 	bl	80178ee <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 801210a:	4b26      	ldr	r3, [pc, #152]	@ (80121a4 <USBD_CDC_DeInit+0x100>)
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	f003 020f 	and.w	r2, r3, #15
 8012112:	6879      	ldr	r1, [r7, #4]
 8012114:	4613      	mov	r3, r2
 8012116:	009b      	lsls	r3, r3, #2
 8012118:	4413      	add	r3, r2
 801211a:	009b      	lsls	r3, r3, #2
 801211c:	440b      	add	r3, r1
 801211e:	3324      	adds	r3, #36	@ 0x24
 8012120:	2200      	movs	r2, #0
 8012122:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8012124:	4b1f      	ldr	r3, [pc, #124]	@ (80121a4 <USBD_CDC_DeInit+0x100>)
 8012126:	781b      	ldrb	r3, [r3, #0]
 8012128:	f003 020f 	and.w	r2, r3, #15
 801212c:	6879      	ldr	r1, [r7, #4]
 801212e:	4613      	mov	r3, r2
 8012130:	009b      	lsls	r3, r3, #2
 8012132:	4413      	add	r3, r2
 8012134:	009b      	lsls	r3, r3, #2
 8012136:	440b      	add	r3, r1
 8012138:	3326      	adds	r3, #38	@ 0x26
 801213a:	2200      	movs	r2, #0
 801213c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	32b0      	adds	r2, #176	@ 0xb0
 8012148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801214c:	2b00      	cmp	r3, #0
 801214e:	d01f      	beq.n	8012190 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8012150:	687b      	ldr	r3, [r7, #4]
 8012152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012156:	687a      	ldr	r2, [r7, #4]
 8012158:	33b0      	adds	r3, #176	@ 0xb0
 801215a:	009b      	lsls	r3, r3, #2
 801215c:	4413      	add	r3, r2
 801215e:	685b      	ldr	r3, [r3, #4]
 8012160:	685b      	ldr	r3, [r3, #4]
 8012162:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	32b0      	adds	r2, #176	@ 0xb0
 801216e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012172:	4618      	mov	r0, r3
 8012174:	f005 fcc6 	bl	8017b04 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	32b0      	adds	r2, #176	@ 0xb0
 8012182:	2100      	movs	r1, #0
 8012184:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	2200      	movs	r2, #0
 801218c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8012190:	2300      	movs	r3, #0
}
 8012192:	4618      	mov	r0, r3
 8012194:	3708      	adds	r7, #8
 8012196:	46bd      	mov	sp, r7
 8012198:	bd80      	pop	{r7, pc}
 801219a:	bf00      	nop
 801219c:	200000e7 	.word	0x200000e7
 80121a0:	200000e8 	.word	0x200000e8
 80121a4:	200000e9 	.word	0x200000e9

080121a8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b086      	sub	sp, #24
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	32b0      	adds	r2, #176	@ 0xb0
 80121bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121c0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80121c2:	2300      	movs	r3, #0
 80121c4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80121c6:	2300      	movs	r3, #0
 80121c8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80121ca:	2300      	movs	r3, #0
 80121cc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d101      	bne.n	80121d8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80121d4:	2303      	movs	r3, #3
 80121d6:	e0bf      	b.n	8012358 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80121d8:	683b      	ldr	r3, [r7, #0]
 80121da:	781b      	ldrb	r3, [r3, #0]
 80121dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d050      	beq.n	8012286 <USBD_CDC_Setup+0xde>
 80121e4:	2b20      	cmp	r3, #32
 80121e6:	f040 80af 	bne.w	8012348 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	88db      	ldrh	r3, [r3, #6]
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d03a      	beq.n	8012268 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80121f2:	683b      	ldr	r3, [r7, #0]
 80121f4:	781b      	ldrb	r3, [r3, #0]
 80121f6:	b25b      	sxtb	r3, r3
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	da1b      	bge.n	8012234 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	33b0      	adds	r3, #176	@ 0xb0
 8012206:	009b      	lsls	r3, r3, #2
 8012208:	4413      	add	r3, r2
 801220a:	685b      	ldr	r3, [r3, #4]
 801220c:	689b      	ldr	r3, [r3, #8]
 801220e:	683a      	ldr	r2, [r7, #0]
 8012210:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8012212:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012214:	683a      	ldr	r2, [r7, #0]
 8012216:	88d2      	ldrh	r2, [r2, #6]
 8012218:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 801221a:	683b      	ldr	r3, [r7, #0]
 801221c:	88db      	ldrh	r3, [r3, #6]
 801221e:	2b07      	cmp	r3, #7
 8012220:	bf28      	it	cs
 8012222:	2307      	movcs	r3, #7
 8012224:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8012226:	693b      	ldr	r3, [r7, #16]
 8012228:	89fa      	ldrh	r2, [r7, #14]
 801222a:	4619      	mov	r1, r3
 801222c:	6878      	ldr	r0, [r7, #4]
 801222e:	f001 fd53 	bl	8013cd8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8012232:	e090      	b.n	8012356 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8012234:	683b      	ldr	r3, [r7, #0]
 8012236:	785a      	ldrb	r2, [r3, #1]
 8012238:	693b      	ldr	r3, [r7, #16]
 801223a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801223e:	683b      	ldr	r3, [r7, #0]
 8012240:	88db      	ldrh	r3, [r3, #6]
 8012242:	2b3f      	cmp	r3, #63	@ 0x3f
 8012244:	d803      	bhi.n	801224e <USBD_CDC_Setup+0xa6>
 8012246:	683b      	ldr	r3, [r7, #0]
 8012248:	88db      	ldrh	r3, [r3, #6]
 801224a:	b2da      	uxtb	r2, r3
 801224c:	e000      	b.n	8012250 <USBD_CDC_Setup+0xa8>
 801224e:	2240      	movs	r2, #64	@ 0x40
 8012250:	693b      	ldr	r3, [r7, #16]
 8012252:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8012256:	6939      	ldr	r1, [r7, #16]
 8012258:	693b      	ldr	r3, [r7, #16]
 801225a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 801225e:	461a      	mov	r2, r3
 8012260:	6878      	ldr	r0, [r7, #4]
 8012262:	f001 fd65 	bl	8013d30 <USBD_CtlPrepareRx>
      break;
 8012266:	e076      	b.n	8012356 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 801226e:	687a      	ldr	r2, [r7, #4]
 8012270:	33b0      	adds	r3, #176	@ 0xb0
 8012272:	009b      	lsls	r3, r3, #2
 8012274:	4413      	add	r3, r2
 8012276:	685b      	ldr	r3, [r3, #4]
 8012278:	689b      	ldr	r3, [r3, #8]
 801227a:	683a      	ldr	r2, [r7, #0]
 801227c:	7850      	ldrb	r0, [r2, #1]
 801227e:	2200      	movs	r2, #0
 8012280:	6839      	ldr	r1, [r7, #0]
 8012282:	4798      	blx	r3
      break;
 8012284:	e067      	b.n	8012356 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	785b      	ldrb	r3, [r3, #1]
 801228a:	2b0b      	cmp	r3, #11
 801228c:	d851      	bhi.n	8012332 <USBD_CDC_Setup+0x18a>
 801228e:	a201      	add	r2, pc, #4	@ (adr r2, 8012294 <USBD_CDC_Setup+0xec>)
 8012290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012294:	080122c5 	.word	0x080122c5
 8012298:	08012341 	.word	0x08012341
 801229c:	08012333 	.word	0x08012333
 80122a0:	08012333 	.word	0x08012333
 80122a4:	08012333 	.word	0x08012333
 80122a8:	08012333 	.word	0x08012333
 80122ac:	08012333 	.word	0x08012333
 80122b0:	08012333 	.word	0x08012333
 80122b4:	08012333 	.word	0x08012333
 80122b8:	08012333 	.word	0x08012333
 80122bc:	080122ef 	.word	0x080122ef
 80122c0:	08012319 	.word	0x08012319
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122ca:	b2db      	uxtb	r3, r3
 80122cc:	2b03      	cmp	r3, #3
 80122ce:	d107      	bne.n	80122e0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80122d0:	f107 030a 	add.w	r3, r7, #10
 80122d4:	2202      	movs	r2, #2
 80122d6:	4619      	mov	r1, r3
 80122d8:	6878      	ldr	r0, [r7, #4]
 80122da:	f001 fcfd 	bl	8013cd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80122de:	e032      	b.n	8012346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80122e0:	6839      	ldr	r1, [r7, #0]
 80122e2:	6878      	ldr	r0, [r7, #4]
 80122e4:	f001 fc7b 	bl	8013bde <USBD_CtlError>
            ret = USBD_FAIL;
 80122e8:	2303      	movs	r3, #3
 80122ea:	75fb      	strb	r3, [r7, #23]
          break;
 80122ec:	e02b      	b.n	8012346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80122f4:	b2db      	uxtb	r3, r3
 80122f6:	2b03      	cmp	r3, #3
 80122f8:	d107      	bne.n	801230a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80122fa:	f107 030d 	add.w	r3, r7, #13
 80122fe:	2201      	movs	r2, #1
 8012300:	4619      	mov	r1, r3
 8012302:	6878      	ldr	r0, [r7, #4]
 8012304:	f001 fce8 	bl	8013cd8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8012308:	e01d      	b.n	8012346 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801230a:	6839      	ldr	r1, [r7, #0]
 801230c:	6878      	ldr	r0, [r7, #4]
 801230e:	f001 fc66 	bl	8013bde <USBD_CtlError>
            ret = USBD_FAIL;
 8012312:	2303      	movs	r3, #3
 8012314:	75fb      	strb	r3, [r7, #23]
          break;
 8012316:	e016      	b.n	8012346 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801231e:	b2db      	uxtb	r3, r3
 8012320:	2b03      	cmp	r3, #3
 8012322:	d00f      	beq.n	8012344 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8012324:	6839      	ldr	r1, [r7, #0]
 8012326:	6878      	ldr	r0, [r7, #4]
 8012328:	f001 fc59 	bl	8013bde <USBD_CtlError>
            ret = USBD_FAIL;
 801232c:	2303      	movs	r3, #3
 801232e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8012330:	e008      	b.n	8012344 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8012332:	6839      	ldr	r1, [r7, #0]
 8012334:	6878      	ldr	r0, [r7, #4]
 8012336:	f001 fc52 	bl	8013bde <USBD_CtlError>
          ret = USBD_FAIL;
 801233a:	2303      	movs	r3, #3
 801233c:	75fb      	strb	r3, [r7, #23]
          break;
 801233e:	e002      	b.n	8012346 <USBD_CDC_Setup+0x19e>
          break;
 8012340:	bf00      	nop
 8012342:	e008      	b.n	8012356 <USBD_CDC_Setup+0x1ae>
          break;
 8012344:	bf00      	nop
      }
      break;
 8012346:	e006      	b.n	8012356 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8012348:	6839      	ldr	r1, [r7, #0]
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f001 fc47 	bl	8013bde <USBD_CtlError>
      ret = USBD_FAIL;
 8012350:	2303      	movs	r3, #3
 8012352:	75fb      	strb	r3, [r7, #23]
      break;
 8012354:	bf00      	nop
  }

  return (uint8_t)ret;
 8012356:	7dfb      	ldrb	r3, [r7, #23]
}
 8012358:	4618      	mov	r0, r3
 801235a:	3718      	adds	r7, #24
 801235c:	46bd      	mov	sp, r7
 801235e:	bd80      	pop	{r7, pc}

08012360 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8012360:	b580      	push	{r7, lr}
 8012362:	b084      	sub	sp, #16
 8012364:	af00      	add	r7, sp, #0
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	460b      	mov	r3, r1
 801236a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 801236c:	687b      	ldr	r3, [r7, #4]
 801236e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012372:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	32b0      	adds	r2, #176	@ 0xb0
 801237e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d101      	bne.n	801238a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8012386:	2303      	movs	r3, #3
 8012388:	e065      	b.n	8012456 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801238a:	687b      	ldr	r3, [r7, #4]
 801238c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	32b0      	adds	r2, #176	@ 0xb0
 8012394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012398:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 801239a:	78fb      	ldrb	r3, [r7, #3]
 801239c:	f003 020f 	and.w	r2, r3, #15
 80123a0:	6879      	ldr	r1, [r7, #4]
 80123a2:	4613      	mov	r3, r2
 80123a4:	009b      	lsls	r3, r3, #2
 80123a6:	4413      	add	r3, r2
 80123a8:	009b      	lsls	r3, r3, #2
 80123aa:	440b      	add	r3, r1
 80123ac:	3318      	adds	r3, #24
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d02f      	beq.n	8012414 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80123b4:	78fb      	ldrb	r3, [r7, #3]
 80123b6:	f003 020f 	and.w	r2, r3, #15
 80123ba:	6879      	ldr	r1, [r7, #4]
 80123bc:	4613      	mov	r3, r2
 80123be:	009b      	lsls	r3, r3, #2
 80123c0:	4413      	add	r3, r2
 80123c2:	009b      	lsls	r3, r3, #2
 80123c4:	440b      	add	r3, r1
 80123c6:	3318      	adds	r3, #24
 80123c8:	681a      	ldr	r2, [r3, #0]
 80123ca:	78fb      	ldrb	r3, [r7, #3]
 80123cc:	f003 010f 	and.w	r1, r3, #15
 80123d0:	68f8      	ldr	r0, [r7, #12]
 80123d2:	460b      	mov	r3, r1
 80123d4:	00db      	lsls	r3, r3, #3
 80123d6:	440b      	add	r3, r1
 80123d8:	009b      	lsls	r3, r3, #2
 80123da:	4403      	add	r3, r0
 80123dc:	331c      	adds	r3, #28
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	fbb2 f1f3 	udiv	r1, r2, r3
 80123e4:	fb01 f303 	mul.w	r3, r1, r3
 80123e8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d112      	bne.n	8012414 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80123ee:	78fb      	ldrb	r3, [r7, #3]
 80123f0:	f003 020f 	and.w	r2, r3, #15
 80123f4:	6879      	ldr	r1, [r7, #4]
 80123f6:	4613      	mov	r3, r2
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	4413      	add	r3, r2
 80123fc:	009b      	lsls	r3, r3, #2
 80123fe:	440b      	add	r3, r1
 8012400:	3318      	adds	r3, #24
 8012402:	2200      	movs	r2, #0
 8012404:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8012406:	78f9      	ldrb	r1, [r7, #3]
 8012408:	2300      	movs	r3, #0
 801240a:	2200      	movs	r2, #0
 801240c:	6878      	ldr	r0, [r7, #4]
 801240e:	f005 fb16 	bl	8017a3e <USBD_LL_Transmit>
 8012412:	e01f      	b.n	8012454 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	2200      	movs	r2, #0
 8012418:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012422:	687a      	ldr	r2, [r7, #4]
 8012424:	33b0      	adds	r3, #176	@ 0xb0
 8012426:	009b      	lsls	r3, r3, #2
 8012428:	4413      	add	r3, r2
 801242a:	685b      	ldr	r3, [r3, #4]
 801242c:	691b      	ldr	r3, [r3, #16]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d010      	beq.n	8012454 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8012432:	687b      	ldr	r3, [r7, #4]
 8012434:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012438:	687a      	ldr	r2, [r7, #4]
 801243a:	33b0      	adds	r3, #176	@ 0xb0
 801243c:	009b      	lsls	r3, r3, #2
 801243e:	4413      	add	r3, r2
 8012440:	685b      	ldr	r3, [r3, #4]
 8012442:	691b      	ldr	r3, [r3, #16]
 8012444:	68ba      	ldr	r2, [r7, #8]
 8012446:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 801244a:	68ba      	ldr	r2, [r7, #8]
 801244c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8012450:	78fa      	ldrb	r2, [r7, #3]
 8012452:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8012454:	2300      	movs	r3, #0
}
 8012456:	4618      	mov	r0, r3
 8012458:	3710      	adds	r7, #16
 801245a:	46bd      	mov	sp, r7
 801245c:	bd80      	pop	{r7, pc}

0801245e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801245e:	b580      	push	{r7, lr}
 8012460:	b084      	sub	sp, #16
 8012462:	af00      	add	r7, sp, #0
 8012464:	6078      	str	r0, [r7, #4]
 8012466:	460b      	mov	r3, r1
 8012468:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	32b0      	adds	r2, #176	@ 0xb0
 8012474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012478:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	32b0      	adds	r2, #176	@ 0xb0
 8012484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d101      	bne.n	8012490 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 801248c:	2303      	movs	r3, #3
 801248e:	e01a      	b.n	80124c6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8012490:	78fb      	ldrb	r3, [r7, #3]
 8012492:	4619      	mov	r1, r3
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f005 fb14 	bl	8017ac2 <USBD_LL_GetRxDataSize>
 801249a:	4602      	mov	r2, r0
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80124a8:	687a      	ldr	r2, [r7, #4]
 80124aa:	33b0      	adds	r3, #176	@ 0xb0
 80124ac:	009b      	lsls	r3, r3, #2
 80124ae:	4413      	add	r3, r2
 80124b0:	685b      	ldr	r3, [r3, #4]
 80124b2:	68db      	ldr	r3, [r3, #12]
 80124b4:	68fa      	ldr	r2, [r7, #12]
 80124b6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80124ba:	68fa      	ldr	r2, [r7, #12]
 80124bc:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80124c0:	4611      	mov	r1, r2
 80124c2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80124c4:	2300      	movs	r3, #0
}
 80124c6:	4618      	mov	r0, r3
 80124c8:	3710      	adds	r7, #16
 80124ca:	46bd      	mov	sp, r7
 80124cc:	bd80      	pop	{r7, pc}

080124ce <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80124ce:	b580      	push	{r7, lr}
 80124d0:	b084      	sub	sp, #16
 80124d2:	af00      	add	r7, sp, #0
 80124d4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80124d6:	687b      	ldr	r3, [r7, #4]
 80124d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	32b0      	adds	r2, #176	@ 0xb0
 80124e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80124e4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d101      	bne.n	80124f0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80124ec:	2303      	movs	r3, #3
 80124ee:	e024      	b.n	801253a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80124f6:	687a      	ldr	r2, [r7, #4]
 80124f8:	33b0      	adds	r3, #176	@ 0xb0
 80124fa:	009b      	lsls	r3, r3, #2
 80124fc:	4413      	add	r3, r2
 80124fe:	685b      	ldr	r3, [r3, #4]
 8012500:	2b00      	cmp	r3, #0
 8012502:	d019      	beq.n	8012538 <USBD_CDC_EP0_RxReady+0x6a>
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 801250a:	2bff      	cmp	r3, #255	@ 0xff
 801250c:	d014      	beq.n	8012538 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8012514:	687a      	ldr	r2, [r7, #4]
 8012516:	33b0      	adds	r3, #176	@ 0xb0
 8012518:	009b      	lsls	r3, r3, #2
 801251a:	4413      	add	r3, r2
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	689b      	ldr	r3, [r3, #8]
 8012520:	68fa      	ldr	r2, [r7, #12]
 8012522:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8012526:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8012528:	68fa      	ldr	r2, [r7, #12]
 801252a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801252e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	22ff      	movs	r2, #255	@ 0xff
 8012534:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8012538:	2300      	movs	r3, #0
}
 801253a:	4618      	mov	r0, r3
 801253c:	3710      	adds	r7, #16
 801253e:	46bd      	mov	sp, r7
 8012540:	bd80      	pop	{r7, pc}
	...

08012544 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b086      	sub	sp, #24
 8012548:	af00      	add	r7, sp, #0
 801254a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801254c:	2182      	movs	r1, #130	@ 0x82
 801254e:	4818      	ldr	r0, [pc, #96]	@ (80125b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012550:	f000 fd0f 	bl	8012f72 <USBD_GetEpDesc>
 8012554:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012556:	2101      	movs	r1, #1
 8012558:	4815      	ldr	r0, [pc, #84]	@ (80125b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801255a:	f000 fd0a 	bl	8012f72 <USBD_GetEpDesc>
 801255e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012560:	2181      	movs	r1, #129	@ 0x81
 8012562:	4813      	ldr	r0, [pc, #76]	@ (80125b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8012564:	f000 fd05 	bl	8012f72 <USBD_GetEpDesc>
 8012568:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801256a:	697b      	ldr	r3, [r7, #20]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d002      	beq.n	8012576 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012570:	697b      	ldr	r3, [r7, #20]
 8012572:	2210      	movs	r2, #16
 8012574:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012576:	693b      	ldr	r3, [r7, #16]
 8012578:	2b00      	cmp	r3, #0
 801257a:	d006      	beq.n	801258a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801257c:	693b      	ldr	r3, [r7, #16]
 801257e:	2200      	movs	r2, #0
 8012580:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012584:	711a      	strb	r2, [r3, #4]
 8012586:	2200      	movs	r2, #0
 8012588:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	2b00      	cmp	r3, #0
 801258e:	d006      	beq.n	801259e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012590:	68fb      	ldr	r3, [r7, #12]
 8012592:	2200      	movs	r2, #0
 8012594:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012598:	711a      	strb	r2, [r3, #4]
 801259a:	2200      	movs	r2, #0
 801259c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	2243      	movs	r2, #67	@ 0x43
 80125a2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80125a4:	4b02      	ldr	r3, [pc, #8]	@ (80125b0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80125a6:	4618      	mov	r0, r3
 80125a8:	3718      	adds	r7, #24
 80125aa:	46bd      	mov	sp, r7
 80125ac:	bd80      	pop	{r7, pc}
 80125ae:	bf00      	nop
 80125b0:	200000a4 	.word	0x200000a4

080125b4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80125b4:	b580      	push	{r7, lr}
 80125b6:	b086      	sub	sp, #24
 80125b8:	af00      	add	r7, sp, #0
 80125ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80125bc:	2182      	movs	r1, #130	@ 0x82
 80125be:	4818      	ldr	r0, [pc, #96]	@ (8012620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80125c0:	f000 fcd7 	bl	8012f72 <USBD_GetEpDesc>
 80125c4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80125c6:	2101      	movs	r1, #1
 80125c8:	4815      	ldr	r0, [pc, #84]	@ (8012620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80125ca:	f000 fcd2 	bl	8012f72 <USBD_GetEpDesc>
 80125ce:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80125d0:	2181      	movs	r1, #129	@ 0x81
 80125d2:	4813      	ldr	r0, [pc, #76]	@ (8012620 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80125d4:	f000 fccd 	bl	8012f72 <USBD_GetEpDesc>
 80125d8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80125da:	697b      	ldr	r3, [r7, #20]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d002      	beq.n	80125e6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80125e0:	697b      	ldr	r3, [r7, #20]
 80125e2:	2210      	movs	r2, #16
 80125e4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80125e6:	693b      	ldr	r3, [r7, #16]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d006      	beq.n	80125fa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80125ec:	693b      	ldr	r3, [r7, #16]
 80125ee:	2200      	movs	r2, #0
 80125f0:	711a      	strb	r2, [r3, #4]
 80125f2:	2200      	movs	r2, #0
 80125f4:	f042 0202 	orr.w	r2, r2, #2
 80125f8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	2b00      	cmp	r3, #0
 80125fe:	d006      	beq.n	801260e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2200      	movs	r2, #0
 8012604:	711a      	strb	r2, [r3, #4]
 8012606:	2200      	movs	r2, #0
 8012608:	f042 0202 	orr.w	r2, r2, #2
 801260c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	2243      	movs	r2, #67	@ 0x43
 8012612:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012614:	4b02      	ldr	r3, [pc, #8]	@ (8012620 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8012616:	4618      	mov	r0, r3
 8012618:	3718      	adds	r7, #24
 801261a:	46bd      	mov	sp, r7
 801261c:	bd80      	pop	{r7, pc}
 801261e:	bf00      	nop
 8012620:	200000a4 	.word	0x200000a4

08012624 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b086      	sub	sp, #24
 8012628:	af00      	add	r7, sp, #0
 801262a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 801262c:	2182      	movs	r1, #130	@ 0x82
 801262e:	4818      	ldr	r0, [pc, #96]	@ (8012690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012630:	f000 fc9f 	bl	8012f72 <USBD_GetEpDesc>
 8012634:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8012636:	2101      	movs	r1, #1
 8012638:	4815      	ldr	r0, [pc, #84]	@ (8012690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801263a:	f000 fc9a 	bl	8012f72 <USBD_GetEpDesc>
 801263e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8012640:	2181      	movs	r1, #129	@ 0x81
 8012642:	4813      	ldr	r0, [pc, #76]	@ (8012690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8012644:	f000 fc95 	bl	8012f72 <USBD_GetEpDesc>
 8012648:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 801264a:	697b      	ldr	r3, [r7, #20]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d002      	beq.n	8012656 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8012650:	697b      	ldr	r3, [r7, #20]
 8012652:	2210      	movs	r2, #16
 8012654:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8012656:	693b      	ldr	r3, [r7, #16]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d006      	beq.n	801266a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 801265c:	693b      	ldr	r3, [r7, #16]
 801265e:	2200      	movs	r2, #0
 8012660:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012664:	711a      	strb	r2, [r3, #4]
 8012666:	2200      	movs	r2, #0
 8012668:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d006      	beq.n	801267e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8012670:	68fb      	ldr	r3, [r7, #12]
 8012672:	2200      	movs	r2, #0
 8012674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8012678:	711a      	strb	r2, [r3, #4]
 801267a:	2200      	movs	r2, #0
 801267c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	2243      	movs	r2, #67	@ 0x43
 8012682:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8012684:	4b02      	ldr	r3, [pc, #8]	@ (8012690 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8012686:	4618      	mov	r0, r3
 8012688:	3718      	adds	r7, #24
 801268a:	46bd      	mov	sp, r7
 801268c:	bd80      	pop	{r7, pc}
 801268e:	bf00      	nop
 8012690:	200000a4 	.word	0x200000a4

08012694 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	220a      	movs	r2, #10
 80126a0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80126a2:	4b03      	ldr	r3, [pc, #12]	@ (80126b0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80126a4:	4618      	mov	r0, r3
 80126a6:	370c      	adds	r7, #12
 80126a8:	46bd      	mov	sp, r7
 80126aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ae:	4770      	bx	lr
 80126b0:	20000060 	.word	0x20000060

080126b4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80126b4:	b480      	push	{r7}
 80126b6:	b083      	sub	sp, #12
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
 80126bc:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d101      	bne.n	80126c8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80126c4:	2303      	movs	r3, #3
 80126c6:	e009      	b.n	80126dc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80126ce:	687a      	ldr	r2, [r7, #4]
 80126d0:	33b0      	adds	r3, #176	@ 0xb0
 80126d2:	009b      	lsls	r3, r3, #2
 80126d4:	4413      	add	r3, r2
 80126d6:	683a      	ldr	r2, [r7, #0]
 80126d8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80126da:	2300      	movs	r3, #0
}
 80126dc:	4618      	mov	r0, r3
 80126de:	370c      	adds	r7, #12
 80126e0:	46bd      	mov	sp, r7
 80126e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e6:	4770      	bx	lr

080126e8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80126e8:	b480      	push	{r7}
 80126ea:	b087      	sub	sp, #28
 80126ec:	af00      	add	r7, sp, #0
 80126ee:	60f8      	str	r0, [r7, #12]
 80126f0:	60b9      	str	r1, [r7, #8]
 80126f2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	32b0      	adds	r2, #176	@ 0xb0
 80126fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012702:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8012704:	697b      	ldr	r3, [r7, #20]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d101      	bne.n	801270e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 801270a:	2303      	movs	r3, #3
 801270c:	e008      	b.n	8012720 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801270e:	697b      	ldr	r3, [r7, #20]
 8012710:	68ba      	ldr	r2, [r7, #8]
 8012712:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8012716:	697b      	ldr	r3, [r7, #20]
 8012718:	687a      	ldr	r2, [r7, #4]
 801271a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 801271e:	2300      	movs	r3, #0
}
 8012720:	4618      	mov	r0, r3
 8012722:	371c      	adds	r7, #28
 8012724:	46bd      	mov	sp, r7
 8012726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272a:	4770      	bx	lr

0801272c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 801272c:	b480      	push	{r7}
 801272e:	b085      	sub	sp, #20
 8012730:	af00      	add	r7, sp, #0
 8012732:	6078      	str	r0, [r7, #4]
 8012734:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012736:	687b      	ldr	r3, [r7, #4]
 8012738:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	32b0      	adds	r2, #176	@ 0xb0
 8012740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012744:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8012746:	68fb      	ldr	r3, [r7, #12]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d101      	bne.n	8012750 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 801274c:	2303      	movs	r3, #3
 801274e:	e004      	b.n	801275a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8012750:	68fb      	ldr	r3, [r7, #12]
 8012752:	683a      	ldr	r2, [r7, #0]
 8012754:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8012758:	2300      	movs	r3, #0
}
 801275a:	4618      	mov	r0, r3
 801275c:	3714      	adds	r7, #20
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr
	...

08012768 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b084      	sub	sp, #16
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	32b0      	adds	r2, #176	@ 0xb0
 801277a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801277e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	32b0      	adds	r2, #176	@ 0xb0
 801278a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801278e:	2b00      	cmp	r3, #0
 8012790:	d101      	bne.n	8012796 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8012792:	2303      	movs	r3, #3
 8012794:	e018      	b.n	80127c8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	7c1b      	ldrb	r3, [r3, #16]
 801279a:	2b00      	cmp	r3, #0
 801279c:	d10a      	bne.n	80127b4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801279e:	4b0c      	ldr	r3, [pc, #48]	@ (80127d0 <USBD_CDC_ReceivePacket+0x68>)
 80127a0:	7819      	ldrb	r1, [r3, #0]
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80127a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80127ac:	6878      	ldr	r0, [r7, #4]
 80127ae:	f005 f967 	bl	8017a80 <USBD_LL_PrepareReceive>
 80127b2:	e008      	b.n	80127c6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80127b4:	4b06      	ldr	r3, [pc, #24]	@ (80127d0 <USBD_CDC_ReceivePacket+0x68>)
 80127b6:	7819      	ldrb	r1, [r3, #0]
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80127be:	2340      	movs	r3, #64	@ 0x40
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f005 f95d 	bl	8017a80 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80127c6:	2300      	movs	r3, #0
}
 80127c8:	4618      	mov	r0, r3
 80127ca:	3710      	adds	r7, #16
 80127cc:	46bd      	mov	sp, r7
 80127ce:	bd80      	pop	{r7, pc}
 80127d0:	200000e8 	.word	0x200000e8

080127d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b086      	sub	sp, #24
 80127d8:	af00      	add	r7, sp, #0
 80127da:	60f8      	str	r0, [r7, #12]
 80127dc:	60b9      	str	r1, [r7, #8]
 80127de:	4613      	mov	r3, r2
 80127e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d101      	bne.n	80127ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80127e8:	2303      	movs	r3, #3
 80127ea:	e01f      	b.n	801282c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	2200      	movs	r2, #0
 80127f0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	2200      	movs	r2, #0
 80127f8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80127fc:	68fb      	ldr	r3, [r7, #12]
 80127fe:	2200      	movs	r2, #0
 8012800:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8012804:	68bb      	ldr	r3, [r7, #8]
 8012806:	2b00      	cmp	r3, #0
 8012808:	d003      	beq.n	8012812 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 801280a:	68fb      	ldr	r3, [r7, #12]
 801280c:	68ba      	ldr	r2, [r7, #8]
 801280e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	2201      	movs	r2, #1
 8012816:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	79fa      	ldrb	r2, [r7, #7]
 801281e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8012820:	68f8      	ldr	r0, [r7, #12]
 8012822:	f004 ffd7 	bl	80177d4 <USBD_LL_Init>
 8012826:	4603      	mov	r3, r0
 8012828:	75fb      	strb	r3, [r7, #23]

  return ret;
 801282a:	7dfb      	ldrb	r3, [r7, #23]
}
 801282c:	4618      	mov	r0, r3
 801282e:	3718      	adds	r7, #24
 8012830:	46bd      	mov	sp, r7
 8012832:	bd80      	pop	{r7, pc}

08012834 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8012834:	b580      	push	{r7, lr}
 8012836:	b084      	sub	sp, #16
 8012838:	af00      	add	r7, sp, #0
 801283a:	6078      	str	r0, [r7, #4]
 801283c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801283e:	2300      	movs	r3, #0
 8012840:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8012842:	683b      	ldr	r3, [r7, #0]
 8012844:	2b00      	cmp	r3, #0
 8012846:	d101      	bne.n	801284c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8012848:	2303      	movs	r3, #3
 801284a:	e025      	b.n	8012898 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	683a      	ldr	r2, [r7, #0]
 8012850:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	32ae      	adds	r2, #174	@ 0xae
 801285e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012864:	2b00      	cmp	r3, #0
 8012866:	d00f      	beq.n	8012888 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	32ae      	adds	r2, #174	@ 0xae
 8012872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012876:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012878:	f107 020e 	add.w	r2, r7, #14
 801287c:	4610      	mov	r0, r2
 801287e:	4798      	blx	r3
 8012880:	4602      	mov	r2, r0
 8012882:	687b      	ldr	r3, [r7, #4]
 8012884:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 801288e:	1c5a      	adds	r2, r3, #1
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8012896:	2300      	movs	r3, #0
}
 8012898:	4618      	mov	r0, r3
 801289a:	3710      	adds	r7, #16
 801289c:	46bd      	mov	sp, r7
 801289e:	bd80      	pop	{r7, pc}

080128a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b082      	sub	sp, #8
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80128a8:	6878      	ldr	r0, [r7, #4]
 80128aa:	f004 ffdf 	bl	801786c <USBD_LL_Start>
 80128ae:	4603      	mov	r3, r0
}
 80128b0:	4618      	mov	r0, r3
 80128b2:	3708      	adds	r7, #8
 80128b4:	46bd      	mov	sp, r7
 80128b6:	bd80      	pop	{r7, pc}

080128b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80128b8:	b480      	push	{r7}
 80128ba:	b083      	sub	sp, #12
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80128c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80128c2:	4618      	mov	r0, r3
 80128c4:	370c      	adds	r7, #12
 80128c6:	46bd      	mov	sp, r7
 80128c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128cc:	4770      	bx	lr

080128ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80128ce:	b580      	push	{r7, lr}
 80128d0:	b084      	sub	sp, #16
 80128d2:	af00      	add	r7, sp, #0
 80128d4:	6078      	str	r0, [r7, #4]
 80128d6:	460b      	mov	r3, r1
 80128d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80128da:	2300      	movs	r3, #0
 80128dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d009      	beq.n	80128fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	78fa      	ldrb	r2, [r7, #3]
 80128f2:	4611      	mov	r1, r2
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	4798      	blx	r3
 80128f8:	4603      	mov	r3, r0
 80128fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80128fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80128fe:	4618      	mov	r0, r3
 8012900:	3710      	adds	r7, #16
 8012902:	46bd      	mov	sp, r7
 8012904:	bd80      	pop	{r7, pc}

08012906 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8012906:	b580      	push	{r7, lr}
 8012908:	b084      	sub	sp, #16
 801290a:	af00      	add	r7, sp, #0
 801290c:	6078      	str	r0, [r7, #4]
 801290e:	460b      	mov	r3, r1
 8012910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8012912:	2300      	movs	r3, #0
 8012914:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801291c:	685b      	ldr	r3, [r3, #4]
 801291e:	78fa      	ldrb	r2, [r7, #3]
 8012920:	4611      	mov	r1, r2
 8012922:	6878      	ldr	r0, [r7, #4]
 8012924:	4798      	blx	r3
 8012926:	4603      	mov	r3, r0
 8012928:	2b00      	cmp	r3, #0
 801292a:	d001      	beq.n	8012930 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 801292c:	2303      	movs	r3, #3
 801292e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012930:	7bfb      	ldrb	r3, [r7, #15]
}
 8012932:	4618      	mov	r0, r3
 8012934:	3710      	adds	r7, #16
 8012936:	46bd      	mov	sp, r7
 8012938:	bd80      	pop	{r7, pc}

0801293a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 801293a:	b580      	push	{r7, lr}
 801293c:	b084      	sub	sp, #16
 801293e:	af00      	add	r7, sp, #0
 8012940:	6078      	str	r0, [r7, #4]
 8012942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801294a:	6839      	ldr	r1, [r7, #0]
 801294c:	4618      	mov	r0, r3
 801294e:	f001 f90c 	bl	8013b6a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	2201      	movs	r2, #1
 8012956:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8012960:	461a      	mov	r2, r3
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 801296e:	f003 031f 	and.w	r3, r3, #31
 8012972:	2b02      	cmp	r3, #2
 8012974:	d01a      	beq.n	80129ac <USBD_LL_SetupStage+0x72>
 8012976:	2b02      	cmp	r3, #2
 8012978:	d822      	bhi.n	80129c0 <USBD_LL_SetupStage+0x86>
 801297a:	2b00      	cmp	r3, #0
 801297c:	d002      	beq.n	8012984 <USBD_LL_SetupStage+0x4a>
 801297e:	2b01      	cmp	r3, #1
 8012980:	d00a      	beq.n	8012998 <USBD_LL_SetupStage+0x5e>
 8012982:	e01d      	b.n	80129c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801298a:	4619      	mov	r1, r3
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f000 fb63 	bl	8013058 <USBD_StdDevReq>
 8012992:	4603      	mov	r3, r0
 8012994:	73fb      	strb	r3, [r7, #15]
      break;
 8012996:	e020      	b.n	80129da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 801299e:	4619      	mov	r1, r3
 80129a0:	6878      	ldr	r0, [r7, #4]
 80129a2:	f000 fbcb 	bl	801313c <USBD_StdItfReq>
 80129a6:	4603      	mov	r3, r0
 80129a8:	73fb      	strb	r3, [r7, #15]
      break;
 80129aa:	e016      	b.n	80129da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80129b2:	4619      	mov	r1, r3
 80129b4:	6878      	ldr	r0, [r7, #4]
 80129b6:	f000 fc2d 	bl	8013214 <USBD_StdEPReq>
 80129ba:	4603      	mov	r3, r0
 80129bc:	73fb      	strb	r3, [r7, #15]
      break;
 80129be:	e00c      	b.n	80129da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80129c6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80129ca:	b2db      	uxtb	r3, r3
 80129cc:	4619      	mov	r1, r3
 80129ce:	6878      	ldr	r0, [r7, #4]
 80129d0:	f004 ffac 	bl	801792c <USBD_LL_StallEP>
 80129d4:	4603      	mov	r3, r0
 80129d6:	73fb      	strb	r3, [r7, #15]
      break;
 80129d8:	bf00      	nop
  }

  return ret;
 80129da:	7bfb      	ldrb	r3, [r7, #15]
}
 80129dc:	4618      	mov	r0, r3
 80129de:	3710      	adds	r7, #16
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}

080129e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80129e4:	b580      	push	{r7, lr}
 80129e6:	b086      	sub	sp, #24
 80129e8:	af00      	add	r7, sp, #0
 80129ea:	60f8      	str	r0, [r7, #12]
 80129ec:	460b      	mov	r3, r1
 80129ee:	607a      	str	r2, [r7, #4]
 80129f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80129f2:	2300      	movs	r3, #0
 80129f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80129f6:	7afb      	ldrb	r3, [r7, #11]
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d16e      	bne.n	8012ada <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8012a02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012a0a:	2b03      	cmp	r3, #3
 8012a0c:	f040 8098 	bne.w	8012b40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	689a      	ldr	r2, [r3, #8]
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	68db      	ldr	r3, [r3, #12]
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d913      	bls.n	8012a44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8012a1c:	693b      	ldr	r3, [r7, #16]
 8012a1e:	689a      	ldr	r2, [r3, #8]
 8012a20:	693b      	ldr	r3, [r7, #16]
 8012a22:	68db      	ldr	r3, [r3, #12]
 8012a24:	1ad2      	subs	r2, r2, r3
 8012a26:	693b      	ldr	r3, [r7, #16]
 8012a28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	68da      	ldr	r2, [r3, #12]
 8012a2e:	693b      	ldr	r3, [r7, #16]
 8012a30:	689b      	ldr	r3, [r3, #8]
 8012a32:	4293      	cmp	r3, r2
 8012a34:	bf28      	it	cs
 8012a36:	4613      	movcs	r3, r2
 8012a38:	461a      	mov	r2, r3
 8012a3a:	6879      	ldr	r1, [r7, #4]
 8012a3c:	68f8      	ldr	r0, [r7, #12]
 8012a3e:	f001 f994 	bl	8013d6a <USBD_CtlContinueRx>
 8012a42:	e07d      	b.n	8012b40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8012a4a:	f003 031f 	and.w	r3, r3, #31
 8012a4e:	2b02      	cmp	r3, #2
 8012a50:	d014      	beq.n	8012a7c <USBD_LL_DataOutStage+0x98>
 8012a52:	2b02      	cmp	r3, #2
 8012a54:	d81d      	bhi.n	8012a92 <USBD_LL_DataOutStage+0xae>
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d002      	beq.n	8012a60 <USBD_LL_DataOutStage+0x7c>
 8012a5a:	2b01      	cmp	r3, #1
 8012a5c:	d003      	beq.n	8012a66 <USBD_LL_DataOutStage+0x82>
 8012a5e:	e018      	b.n	8012a92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8012a60:	2300      	movs	r3, #0
 8012a62:	75bb      	strb	r3, [r7, #22]
            break;
 8012a64:	e018      	b.n	8012a98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8012a66:	68fb      	ldr	r3, [r7, #12]
 8012a68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012a6c:	b2db      	uxtb	r3, r3
 8012a6e:	4619      	mov	r1, r3
 8012a70:	68f8      	ldr	r0, [r7, #12]
 8012a72:	f000 fa64 	bl	8012f3e <USBD_CoreFindIF>
 8012a76:	4603      	mov	r3, r0
 8012a78:	75bb      	strb	r3, [r7, #22]
            break;
 8012a7a:	e00d      	b.n	8012a98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8012a82:	b2db      	uxtb	r3, r3
 8012a84:	4619      	mov	r1, r3
 8012a86:	68f8      	ldr	r0, [r7, #12]
 8012a88:	f000 fa66 	bl	8012f58 <USBD_CoreFindEP>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	75bb      	strb	r3, [r7, #22]
            break;
 8012a90:	e002      	b.n	8012a98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8012a92:	2300      	movs	r3, #0
 8012a94:	75bb      	strb	r3, [r7, #22]
            break;
 8012a96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8012a98:	7dbb      	ldrb	r3, [r7, #22]
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d119      	bne.n	8012ad2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012aa4:	b2db      	uxtb	r3, r3
 8012aa6:	2b03      	cmp	r3, #3
 8012aa8:	d113      	bne.n	8012ad2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8012aaa:	7dba      	ldrb	r2, [r7, #22]
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	32ae      	adds	r2, #174	@ 0xae
 8012ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ab4:	691b      	ldr	r3, [r3, #16]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d00b      	beq.n	8012ad2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8012aba:	7dba      	ldrb	r2, [r7, #22]
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8012ac2:	7dba      	ldrb	r2, [r7, #22]
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	32ae      	adds	r2, #174	@ 0xae
 8012ac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012acc:	691b      	ldr	r3, [r3, #16]
 8012ace:	68f8      	ldr	r0, [r7, #12]
 8012ad0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8012ad2:	68f8      	ldr	r0, [r7, #12]
 8012ad4:	f001 f95a 	bl	8013d8c <USBD_CtlSendStatus>
 8012ad8:	e032      	b.n	8012b40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8012ada:	7afb      	ldrb	r3, [r7, #11]
 8012adc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012ae0:	b2db      	uxtb	r3, r3
 8012ae2:	4619      	mov	r1, r3
 8012ae4:	68f8      	ldr	r0, [r7, #12]
 8012ae6:	f000 fa37 	bl	8012f58 <USBD_CoreFindEP>
 8012aea:	4603      	mov	r3, r0
 8012aec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012aee:	7dbb      	ldrb	r3, [r7, #22]
 8012af0:	2bff      	cmp	r3, #255	@ 0xff
 8012af2:	d025      	beq.n	8012b40 <USBD_LL_DataOutStage+0x15c>
 8012af4:	7dbb      	ldrb	r3, [r7, #22]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d122      	bne.n	8012b40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012afa:	68fb      	ldr	r3, [r7, #12]
 8012afc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012b00:	b2db      	uxtb	r3, r3
 8012b02:	2b03      	cmp	r3, #3
 8012b04:	d117      	bne.n	8012b36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8012b06:	7dba      	ldrb	r2, [r7, #22]
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	32ae      	adds	r2, #174	@ 0xae
 8012b0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b10:	699b      	ldr	r3, [r3, #24]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d00f      	beq.n	8012b36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8012b16:	7dba      	ldrb	r2, [r7, #22]
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8012b1e:	7dba      	ldrb	r2, [r7, #22]
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	32ae      	adds	r2, #174	@ 0xae
 8012b24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012b28:	699b      	ldr	r3, [r3, #24]
 8012b2a:	7afa      	ldrb	r2, [r7, #11]
 8012b2c:	4611      	mov	r1, r2
 8012b2e:	68f8      	ldr	r0, [r7, #12]
 8012b30:	4798      	blx	r3
 8012b32:	4603      	mov	r3, r0
 8012b34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8012b36:	7dfb      	ldrb	r3, [r7, #23]
 8012b38:	2b00      	cmp	r3, #0
 8012b3a:	d001      	beq.n	8012b40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8012b3c:	7dfb      	ldrb	r3, [r7, #23]
 8012b3e:	e000      	b.n	8012b42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8012b40:	2300      	movs	r3, #0
}
 8012b42:	4618      	mov	r0, r3
 8012b44:	3718      	adds	r7, #24
 8012b46:	46bd      	mov	sp, r7
 8012b48:	bd80      	pop	{r7, pc}

08012b4a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8012b4a:	b580      	push	{r7, lr}
 8012b4c:	b086      	sub	sp, #24
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	60f8      	str	r0, [r7, #12]
 8012b52:	460b      	mov	r3, r1
 8012b54:	607a      	str	r2, [r7, #4]
 8012b56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8012b58:	7afb      	ldrb	r3, [r7, #11]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d16f      	bne.n	8012c3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	3314      	adds	r3, #20
 8012b62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8012b6a:	2b02      	cmp	r3, #2
 8012b6c:	d15a      	bne.n	8012c24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8012b6e:	693b      	ldr	r3, [r7, #16]
 8012b70:	689a      	ldr	r2, [r3, #8]
 8012b72:	693b      	ldr	r3, [r7, #16]
 8012b74:	68db      	ldr	r3, [r3, #12]
 8012b76:	429a      	cmp	r2, r3
 8012b78:	d914      	bls.n	8012ba4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8012b7a:	693b      	ldr	r3, [r7, #16]
 8012b7c:	689a      	ldr	r2, [r3, #8]
 8012b7e:	693b      	ldr	r3, [r7, #16]
 8012b80:	68db      	ldr	r3, [r3, #12]
 8012b82:	1ad2      	subs	r2, r2, r3
 8012b84:	693b      	ldr	r3, [r7, #16]
 8012b86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8012b88:	693b      	ldr	r3, [r7, #16]
 8012b8a:	689b      	ldr	r3, [r3, #8]
 8012b8c:	461a      	mov	r2, r3
 8012b8e:	6879      	ldr	r1, [r7, #4]
 8012b90:	68f8      	ldr	r0, [r7, #12]
 8012b92:	f001 f8bc 	bl	8013d0e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012b96:	2300      	movs	r3, #0
 8012b98:	2200      	movs	r2, #0
 8012b9a:	2100      	movs	r1, #0
 8012b9c:	68f8      	ldr	r0, [r7, #12]
 8012b9e:	f004 ff6f 	bl	8017a80 <USBD_LL_PrepareReceive>
 8012ba2:	e03f      	b.n	8012c24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	68da      	ldr	r2, [r3, #12]
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	689b      	ldr	r3, [r3, #8]
 8012bac:	429a      	cmp	r2, r3
 8012bae:	d11c      	bne.n	8012bea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	685a      	ldr	r2, [r3, #4]
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8012bb8:	429a      	cmp	r2, r3
 8012bba:	d316      	bcc.n	8012bea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8012bbc:	693b      	ldr	r3, [r7, #16]
 8012bbe:	685a      	ldr	r2, [r3, #4]
 8012bc0:	68fb      	ldr	r3, [r7, #12]
 8012bc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8012bc6:	429a      	cmp	r2, r3
 8012bc8:	d20f      	bcs.n	8012bea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8012bca:	2200      	movs	r2, #0
 8012bcc:	2100      	movs	r1, #0
 8012bce:	68f8      	ldr	r0, [r7, #12]
 8012bd0:	f001 f89d 	bl	8013d0e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8012bd4:	68fb      	ldr	r3, [r7, #12]
 8012bd6:	2200      	movs	r2, #0
 8012bd8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8012bdc:	2300      	movs	r3, #0
 8012bde:	2200      	movs	r2, #0
 8012be0:	2100      	movs	r1, #0
 8012be2:	68f8      	ldr	r0, [r7, #12]
 8012be4:	f004 ff4c 	bl	8017a80 <USBD_LL_PrepareReceive>
 8012be8:	e01c      	b.n	8012c24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	2b03      	cmp	r3, #3
 8012bf4:	d10f      	bne.n	8012c16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8012bf6:	68fb      	ldr	r3, [r7, #12]
 8012bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012bfc:	68db      	ldr	r3, [r3, #12]
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d009      	beq.n	8012c16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	2200      	movs	r2, #0
 8012c06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	68f8      	ldr	r0, [r7, #12]
 8012c14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8012c16:	2180      	movs	r1, #128	@ 0x80
 8012c18:	68f8      	ldr	r0, [r7, #12]
 8012c1a:	f004 fe87 	bl	801792c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8012c1e:	68f8      	ldr	r0, [r7, #12]
 8012c20:	f001 f8c7 	bl	8013db2 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d03a      	beq.n	8012ca4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8012c2e:	68f8      	ldr	r0, [r7, #12]
 8012c30:	f7ff fe42 	bl	80128b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8012c34:	68fb      	ldr	r3, [r7, #12]
 8012c36:	2200      	movs	r2, #0
 8012c38:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8012c3c:	e032      	b.n	8012ca4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8012c3e:	7afb      	ldrb	r3, [r7, #11]
 8012c40:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8012c44:	b2db      	uxtb	r3, r3
 8012c46:	4619      	mov	r1, r3
 8012c48:	68f8      	ldr	r0, [r7, #12]
 8012c4a:	f000 f985 	bl	8012f58 <USBD_CoreFindEP>
 8012c4e:	4603      	mov	r3, r0
 8012c50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012c52:	7dfb      	ldrb	r3, [r7, #23]
 8012c54:	2bff      	cmp	r3, #255	@ 0xff
 8012c56:	d025      	beq.n	8012ca4 <USBD_LL_DataInStage+0x15a>
 8012c58:	7dfb      	ldrb	r3, [r7, #23]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d122      	bne.n	8012ca4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012c64:	b2db      	uxtb	r3, r3
 8012c66:	2b03      	cmp	r3, #3
 8012c68:	d11c      	bne.n	8012ca4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012c6a:	7dfa      	ldrb	r2, [r7, #23]
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	32ae      	adds	r2, #174	@ 0xae
 8012c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c74:	695b      	ldr	r3, [r3, #20]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d014      	beq.n	8012ca4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012c7a:	7dfa      	ldrb	r2, [r7, #23]
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8012c82:	7dfa      	ldrb	r2, [r7, #23]
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	32ae      	adds	r2, #174	@ 0xae
 8012c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012c8c:	695b      	ldr	r3, [r3, #20]
 8012c8e:	7afa      	ldrb	r2, [r7, #11]
 8012c90:	4611      	mov	r1, r2
 8012c92:	68f8      	ldr	r0, [r7, #12]
 8012c94:	4798      	blx	r3
 8012c96:	4603      	mov	r3, r0
 8012c98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012c9a:	7dbb      	ldrb	r3, [r7, #22]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d001      	beq.n	8012ca4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012ca0:	7dbb      	ldrb	r3, [r7, #22]
 8012ca2:	e000      	b.n	8012ca6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8012ca4:	2300      	movs	r3, #0
}
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	3718      	adds	r7, #24
 8012caa:	46bd      	mov	sp, r7
 8012cac:	bd80      	pop	{r7, pc}

08012cae <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012cae:	b580      	push	{r7, lr}
 8012cb0:	b084      	sub	sp, #16
 8012cb2:	af00      	add	r7, sp, #0
 8012cb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8012cb6:	2300      	movs	r3, #0
 8012cb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	2200      	movs	r2, #0
 8012cc6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2200      	movs	r2, #0
 8012cd4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	2200      	movs	r2, #0
 8012cdc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d014      	beq.n	8012d14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012cf0:	685b      	ldr	r3, [r3, #4]
 8012cf2:	2b00      	cmp	r3, #0
 8012cf4:	d00e      	beq.n	8012d14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	6852      	ldr	r2, [r2, #4]
 8012d02:	b2d2      	uxtb	r2, r2
 8012d04:	4611      	mov	r1, r2
 8012d06:	6878      	ldr	r0, [r7, #4]
 8012d08:	4798      	blx	r3
 8012d0a:	4603      	mov	r3, r0
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d001      	beq.n	8012d14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8012d10:	2303      	movs	r3, #3
 8012d12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012d14:	2340      	movs	r3, #64	@ 0x40
 8012d16:	2200      	movs	r2, #0
 8012d18:	2100      	movs	r1, #0
 8012d1a:	6878      	ldr	r0, [r7, #4]
 8012d1c:	f004 fdc1 	bl	80178a2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	2201      	movs	r2, #1
 8012d24:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8012d28:	687b      	ldr	r3, [r7, #4]
 8012d2a:	2240      	movs	r2, #64	@ 0x40
 8012d2c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8012d30:	2340      	movs	r3, #64	@ 0x40
 8012d32:	2200      	movs	r2, #0
 8012d34:	2180      	movs	r1, #128	@ 0x80
 8012d36:	6878      	ldr	r0, [r7, #4]
 8012d38:	f004 fdb3 	bl	80178a2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	2201      	movs	r2, #1
 8012d40:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	2240      	movs	r2, #64	@ 0x40
 8012d46:	621a      	str	r2, [r3, #32]

  return ret;
 8012d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3710      	adds	r7, #16
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}

08012d52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8012d52:	b480      	push	{r7}
 8012d54:	b083      	sub	sp, #12
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
 8012d5a:	460b      	mov	r3, r1
 8012d5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	78fa      	ldrb	r2, [r7, #3]
 8012d62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8012d64:	2300      	movs	r3, #0
}
 8012d66:	4618      	mov	r0, r3
 8012d68:	370c      	adds	r7, #12
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d70:	4770      	bx	lr

08012d72 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8012d72:	b480      	push	{r7}
 8012d74:	b083      	sub	sp, #12
 8012d76:	af00      	add	r7, sp, #0
 8012d78:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012d7a:	687b      	ldr	r3, [r7, #4]
 8012d7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d80:	b2db      	uxtb	r3, r3
 8012d82:	2b04      	cmp	r3, #4
 8012d84:	d006      	beq.n	8012d94 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012d8c:	b2da      	uxtb	r2, r3
 8012d8e:	687b      	ldr	r3, [r7, #4]
 8012d90:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	2204      	movs	r2, #4
 8012d98:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8012d9c:	2300      	movs	r3, #0
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	370c      	adds	r7, #12
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr

08012daa <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012daa:	b480      	push	{r7}
 8012dac:	b083      	sub	sp, #12
 8012dae:	af00      	add	r7, sp, #0
 8012db0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012db8:	b2db      	uxtb	r3, r3
 8012dba:	2b04      	cmp	r3, #4
 8012dbc:	d106      	bne.n	8012dcc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8012dc4:	b2da      	uxtb	r2, r3
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8012dcc:	2300      	movs	r3, #0
}
 8012dce:	4618      	mov	r0, r3
 8012dd0:	370c      	adds	r7, #12
 8012dd2:	46bd      	mov	sp, r7
 8012dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dd8:	4770      	bx	lr

08012dda <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012dda:	b580      	push	{r7, lr}
 8012ddc:	b082      	sub	sp, #8
 8012dde:	af00      	add	r7, sp, #0
 8012de0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012de2:	687b      	ldr	r3, [r7, #4]
 8012de4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012de8:	b2db      	uxtb	r3, r3
 8012dea:	2b03      	cmp	r3, #3
 8012dec:	d110      	bne.n	8012e10 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d00b      	beq.n	8012e10 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012dfe:	69db      	ldr	r3, [r3, #28]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d005      	beq.n	8012e10 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012e0a:	69db      	ldr	r3, [r3, #28]
 8012e0c:	6878      	ldr	r0, [r7, #4]
 8012e0e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8012e10:	2300      	movs	r3, #0
}
 8012e12:	4618      	mov	r0, r3
 8012e14:	3708      	adds	r7, #8
 8012e16:	46bd      	mov	sp, r7
 8012e18:	bd80      	pop	{r7, pc}

08012e1a <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8012e1a:	b580      	push	{r7, lr}
 8012e1c:	b082      	sub	sp, #8
 8012e1e:	af00      	add	r7, sp, #0
 8012e20:	6078      	str	r0, [r7, #4]
 8012e22:	460b      	mov	r3, r1
 8012e24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012e26:	687b      	ldr	r3, [r7, #4]
 8012e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	32ae      	adds	r2, #174	@ 0xae
 8012e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d101      	bne.n	8012e3c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8012e38:	2303      	movs	r3, #3
 8012e3a:	e01c      	b.n	8012e76 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012e42:	b2db      	uxtb	r3, r3
 8012e44:	2b03      	cmp	r3, #3
 8012e46:	d115      	bne.n	8012e74 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	32ae      	adds	r2, #174	@ 0xae
 8012e52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e56:	6a1b      	ldr	r3, [r3, #32]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d00b      	beq.n	8012e74 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	32ae      	adds	r2, #174	@ 0xae
 8012e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e6a:	6a1b      	ldr	r3, [r3, #32]
 8012e6c:	78fa      	ldrb	r2, [r7, #3]
 8012e6e:	4611      	mov	r1, r2
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012e74:	2300      	movs	r3, #0
}
 8012e76:	4618      	mov	r0, r3
 8012e78:	3708      	adds	r7, #8
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	bd80      	pop	{r7, pc}

08012e7e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012e7e:	b580      	push	{r7, lr}
 8012e80:	b082      	sub	sp, #8
 8012e82:	af00      	add	r7, sp, #0
 8012e84:	6078      	str	r0, [r7, #4]
 8012e86:	460b      	mov	r3, r1
 8012e88:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012e90:	687b      	ldr	r3, [r7, #4]
 8012e92:	32ae      	adds	r2, #174	@ 0xae
 8012e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d101      	bne.n	8012ea0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8012e9c:	2303      	movs	r3, #3
 8012e9e:	e01c      	b.n	8012eda <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8012ea6:	b2db      	uxtb	r3, r3
 8012ea8:	2b03      	cmp	r3, #3
 8012eaa:	d115      	bne.n	8012ed8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	32ae      	adds	r2, #174	@ 0xae
 8012eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ebc:	2b00      	cmp	r3, #0
 8012ebe:	d00b      	beq.n	8012ed8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	32ae      	adds	r2, #174	@ 0xae
 8012eca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012ed0:	78fa      	ldrb	r2, [r7, #3]
 8012ed2:	4611      	mov	r1, r2
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012ed8:	2300      	movs	r3, #0
}
 8012eda:	4618      	mov	r0, r3
 8012edc:	3708      	adds	r7, #8
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}

08012ee2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8012ee2:	b480      	push	{r7}
 8012ee4:	b083      	sub	sp, #12
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8012eea:	2300      	movs	r3, #0
}
 8012eec:	4618      	mov	r0, r3
 8012eee:	370c      	adds	r7, #12
 8012ef0:	46bd      	mov	sp, r7
 8012ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef6:	4770      	bx	lr

08012ef8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8012ef8:	b580      	push	{r7, lr}
 8012efa:	b084      	sub	sp, #16
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8012f00:	2300      	movs	r3, #0
 8012f02:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	2201      	movs	r2, #1
 8012f08:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d00e      	beq.n	8012f34 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8012f1c:	685b      	ldr	r3, [r3, #4]
 8012f1e:	687a      	ldr	r2, [r7, #4]
 8012f20:	6852      	ldr	r2, [r2, #4]
 8012f22:	b2d2      	uxtb	r2, r2
 8012f24:	4611      	mov	r1, r2
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	4798      	blx	r3
 8012f2a:	4603      	mov	r3, r0
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d001      	beq.n	8012f34 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8012f30:	2303      	movs	r3, #3
 8012f32:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8012f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f36:	4618      	mov	r0, r3
 8012f38:	3710      	adds	r7, #16
 8012f3a:	46bd      	mov	sp, r7
 8012f3c:	bd80      	pop	{r7, pc}

08012f3e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012f3e:	b480      	push	{r7}
 8012f40:	b083      	sub	sp, #12
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
 8012f46:	460b      	mov	r3, r1
 8012f48:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012f4a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	370c      	adds	r7, #12
 8012f50:	46bd      	mov	sp, r7
 8012f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f56:	4770      	bx	lr

08012f58 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012f58:	b480      	push	{r7}
 8012f5a:	b083      	sub	sp, #12
 8012f5c:	af00      	add	r7, sp, #0
 8012f5e:	6078      	str	r0, [r7, #4]
 8012f60:	460b      	mov	r3, r1
 8012f62:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012f64:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012f66:	4618      	mov	r0, r3
 8012f68:	370c      	adds	r7, #12
 8012f6a:	46bd      	mov	sp, r7
 8012f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f70:	4770      	bx	lr

08012f72 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8012f72:	b580      	push	{r7, lr}
 8012f74:	b086      	sub	sp, #24
 8012f76:	af00      	add	r7, sp, #0
 8012f78:	6078      	str	r0, [r7, #4]
 8012f7a:	460b      	mov	r3, r1
 8012f7c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8012f86:	2300      	movs	r3, #0
 8012f88:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	885b      	ldrh	r3, [r3, #2]
 8012f8e:	b29b      	uxth	r3, r3
 8012f90:	68fa      	ldr	r2, [r7, #12]
 8012f92:	7812      	ldrb	r2, [r2, #0]
 8012f94:	4293      	cmp	r3, r2
 8012f96:	d91f      	bls.n	8012fd8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	781b      	ldrb	r3, [r3, #0]
 8012f9c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8012f9e:	e013      	b.n	8012fc8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8012fa0:	f107 030a 	add.w	r3, r7, #10
 8012fa4:	4619      	mov	r1, r3
 8012fa6:	6978      	ldr	r0, [r7, #20]
 8012fa8:	f000 f81b 	bl	8012fe2 <USBD_GetNextDesc>
 8012fac:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	785b      	ldrb	r3, [r3, #1]
 8012fb2:	2b05      	cmp	r3, #5
 8012fb4:	d108      	bne.n	8012fc8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012fb6:	697b      	ldr	r3, [r7, #20]
 8012fb8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012fba:	693b      	ldr	r3, [r7, #16]
 8012fbc:	789b      	ldrb	r3, [r3, #2]
 8012fbe:	78fa      	ldrb	r2, [r7, #3]
 8012fc0:	429a      	cmp	r2, r3
 8012fc2:	d008      	beq.n	8012fd6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012fc4:	2300      	movs	r3, #0
 8012fc6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012fc8:	68fb      	ldr	r3, [r7, #12]
 8012fca:	885b      	ldrh	r3, [r3, #2]
 8012fcc:	b29a      	uxth	r2, r3
 8012fce:	897b      	ldrh	r3, [r7, #10]
 8012fd0:	429a      	cmp	r2, r3
 8012fd2:	d8e5      	bhi.n	8012fa0 <USBD_GetEpDesc+0x2e>
 8012fd4:	e000      	b.n	8012fd8 <USBD_GetEpDesc+0x66>
          break;
 8012fd6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012fd8:	693b      	ldr	r3, [r7, #16]
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3718      	adds	r7, #24
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}

08012fe2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8012fe2:	b480      	push	{r7}
 8012fe4:	b085      	sub	sp, #20
 8012fe6:	af00      	add	r7, sp, #0
 8012fe8:	6078      	str	r0, [r7, #4]
 8012fea:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	881b      	ldrh	r3, [r3, #0]
 8012ff4:	68fa      	ldr	r2, [r7, #12]
 8012ff6:	7812      	ldrb	r2, [r2, #0]
 8012ff8:	4413      	add	r3, r2
 8012ffa:	b29a      	uxth	r2, r3
 8012ffc:	683b      	ldr	r3, [r7, #0]
 8012ffe:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	781b      	ldrb	r3, [r3, #0]
 8013004:	461a      	mov	r2, r3
 8013006:	687b      	ldr	r3, [r7, #4]
 8013008:	4413      	add	r3, r2
 801300a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 801300c:	68fb      	ldr	r3, [r7, #12]
}
 801300e:	4618      	mov	r0, r3
 8013010:	3714      	adds	r7, #20
 8013012:	46bd      	mov	sp, r7
 8013014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013018:	4770      	bx	lr

0801301a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 801301a:	b480      	push	{r7}
 801301c:	b087      	sub	sp, #28
 801301e:	af00      	add	r7, sp, #0
 8013020:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	781b      	ldrb	r3, [r3, #0]
 801302a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801302c:	697b      	ldr	r3, [r7, #20]
 801302e:	3301      	adds	r3, #1
 8013030:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	781b      	ldrb	r3, [r3, #0]
 8013036:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8013038:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 801303c:	021b      	lsls	r3, r3, #8
 801303e:	b21a      	sxth	r2, r3
 8013040:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8013044:	4313      	orrs	r3, r2
 8013046:	b21b      	sxth	r3, r3
 8013048:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801304a:	89fb      	ldrh	r3, [r7, #14]
}
 801304c:	4618      	mov	r0, r3
 801304e:	371c      	adds	r7, #28
 8013050:	46bd      	mov	sp, r7
 8013052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013056:	4770      	bx	lr

08013058 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013058:	b580      	push	{r7, lr}
 801305a:	b084      	sub	sp, #16
 801305c:	af00      	add	r7, sp, #0
 801305e:	6078      	str	r0, [r7, #4]
 8013060:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013062:	2300      	movs	r3, #0
 8013064:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013066:	683b      	ldr	r3, [r7, #0]
 8013068:	781b      	ldrb	r3, [r3, #0]
 801306a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801306e:	2b40      	cmp	r3, #64	@ 0x40
 8013070:	d005      	beq.n	801307e <USBD_StdDevReq+0x26>
 8013072:	2b40      	cmp	r3, #64	@ 0x40
 8013074:	d857      	bhi.n	8013126 <USBD_StdDevReq+0xce>
 8013076:	2b00      	cmp	r3, #0
 8013078:	d00f      	beq.n	801309a <USBD_StdDevReq+0x42>
 801307a:	2b20      	cmp	r3, #32
 801307c:	d153      	bne.n	8013126 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	32ae      	adds	r2, #174	@ 0xae
 8013088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801308c:	689b      	ldr	r3, [r3, #8]
 801308e:	6839      	ldr	r1, [r7, #0]
 8013090:	6878      	ldr	r0, [r7, #4]
 8013092:	4798      	blx	r3
 8013094:	4603      	mov	r3, r0
 8013096:	73fb      	strb	r3, [r7, #15]
      break;
 8013098:	e04a      	b.n	8013130 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801309a:	683b      	ldr	r3, [r7, #0]
 801309c:	785b      	ldrb	r3, [r3, #1]
 801309e:	2b09      	cmp	r3, #9
 80130a0:	d83b      	bhi.n	801311a <USBD_StdDevReq+0xc2>
 80130a2:	a201      	add	r2, pc, #4	@ (adr r2, 80130a8 <USBD_StdDevReq+0x50>)
 80130a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130a8:	080130fd 	.word	0x080130fd
 80130ac:	08013111 	.word	0x08013111
 80130b0:	0801311b 	.word	0x0801311b
 80130b4:	08013107 	.word	0x08013107
 80130b8:	0801311b 	.word	0x0801311b
 80130bc:	080130db 	.word	0x080130db
 80130c0:	080130d1 	.word	0x080130d1
 80130c4:	0801311b 	.word	0x0801311b
 80130c8:	080130f3 	.word	0x080130f3
 80130cc:	080130e5 	.word	0x080130e5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80130d0:	6839      	ldr	r1, [r7, #0]
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f000 fa3c 	bl	8013550 <USBD_GetDescriptor>
          break;
 80130d8:	e024      	b.n	8013124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80130da:	6839      	ldr	r1, [r7, #0]
 80130dc:	6878      	ldr	r0, [r7, #4]
 80130de:	f000 fba1 	bl	8013824 <USBD_SetAddress>
          break;
 80130e2:	e01f      	b.n	8013124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80130e4:	6839      	ldr	r1, [r7, #0]
 80130e6:	6878      	ldr	r0, [r7, #4]
 80130e8:	f000 fbe0 	bl	80138ac <USBD_SetConfig>
 80130ec:	4603      	mov	r3, r0
 80130ee:	73fb      	strb	r3, [r7, #15]
          break;
 80130f0:	e018      	b.n	8013124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80130f2:	6839      	ldr	r1, [r7, #0]
 80130f4:	6878      	ldr	r0, [r7, #4]
 80130f6:	f000 fc83 	bl	8013a00 <USBD_GetConfig>
          break;
 80130fa:	e013      	b.n	8013124 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80130fc:	6839      	ldr	r1, [r7, #0]
 80130fe:	6878      	ldr	r0, [r7, #4]
 8013100:	f000 fcb4 	bl	8013a6c <USBD_GetStatus>
          break;
 8013104:	e00e      	b.n	8013124 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8013106:	6839      	ldr	r1, [r7, #0]
 8013108:	6878      	ldr	r0, [r7, #4]
 801310a:	f000 fce3 	bl	8013ad4 <USBD_SetFeature>
          break;
 801310e:	e009      	b.n	8013124 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8013110:	6839      	ldr	r1, [r7, #0]
 8013112:	6878      	ldr	r0, [r7, #4]
 8013114:	f000 fd07 	bl	8013b26 <USBD_ClrFeature>
          break;
 8013118:	e004      	b.n	8013124 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 801311a:	6839      	ldr	r1, [r7, #0]
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f000 fd5e 	bl	8013bde <USBD_CtlError>
          break;
 8013122:	bf00      	nop
      }
      break;
 8013124:	e004      	b.n	8013130 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8013126:	6839      	ldr	r1, [r7, #0]
 8013128:	6878      	ldr	r0, [r7, #4]
 801312a:	f000 fd58 	bl	8013bde <USBD_CtlError>
      break;
 801312e:	bf00      	nop
  }

  return ret;
 8013130:	7bfb      	ldrb	r3, [r7, #15]
}
 8013132:	4618      	mov	r0, r3
 8013134:	3710      	adds	r7, #16
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}
 801313a:	bf00      	nop

0801313c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b084      	sub	sp, #16
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
 8013144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8013146:	2300      	movs	r3, #0
 8013148:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801314a:	683b      	ldr	r3, [r7, #0]
 801314c:	781b      	ldrb	r3, [r3, #0]
 801314e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013152:	2b40      	cmp	r3, #64	@ 0x40
 8013154:	d005      	beq.n	8013162 <USBD_StdItfReq+0x26>
 8013156:	2b40      	cmp	r3, #64	@ 0x40
 8013158:	d852      	bhi.n	8013200 <USBD_StdItfReq+0xc4>
 801315a:	2b00      	cmp	r3, #0
 801315c:	d001      	beq.n	8013162 <USBD_StdItfReq+0x26>
 801315e:	2b20      	cmp	r3, #32
 8013160:	d14e      	bne.n	8013200 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013168:	b2db      	uxtb	r3, r3
 801316a:	3b01      	subs	r3, #1
 801316c:	2b02      	cmp	r3, #2
 801316e:	d840      	bhi.n	80131f2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	889b      	ldrh	r3, [r3, #4]
 8013174:	b2db      	uxtb	r3, r3
 8013176:	2b01      	cmp	r3, #1
 8013178:	d836      	bhi.n	80131e8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801317a:	683b      	ldr	r3, [r7, #0]
 801317c:	889b      	ldrh	r3, [r3, #4]
 801317e:	b2db      	uxtb	r3, r3
 8013180:	4619      	mov	r1, r3
 8013182:	6878      	ldr	r0, [r7, #4]
 8013184:	f7ff fedb 	bl	8012f3e <USBD_CoreFindIF>
 8013188:	4603      	mov	r3, r0
 801318a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801318c:	7bbb      	ldrb	r3, [r7, #14]
 801318e:	2bff      	cmp	r3, #255	@ 0xff
 8013190:	d01d      	beq.n	80131ce <USBD_StdItfReq+0x92>
 8013192:	7bbb      	ldrb	r3, [r7, #14]
 8013194:	2b00      	cmp	r3, #0
 8013196:	d11a      	bne.n	80131ce <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8013198:	7bba      	ldrb	r2, [r7, #14]
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	32ae      	adds	r2, #174	@ 0xae
 801319e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131a2:	689b      	ldr	r3, [r3, #8]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d00f      	beq.n	80131c8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80131a8:	7bba      	ldrb	r2, [r7, #14]
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80131b0:	7bba      	ldrb	r2, [r7, #14]
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	32ae      	adds	r2, #174	@ 0xae
 80131b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80131ba:	689b      	ldr	r3, [r3, #8]
 80131bc:	6839      	ldr	r1, [r7, #0]
 80131be:	6878      	ldr	r0, [r7, #4]
 80131c0:	4798      	blx	r3
 80131c2:	4603      	mov	r3, r0
 80131c4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80131c6:	e004      	b.n	80131d2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80131c8:	2303      	movs	r3, #3
 80131ca:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80131cc:	e001      	b.n	80131d2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80131ce:	2303      	movs	r3, #3
 80131d0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80131d2:	683b      	ldr	r3, [r7, #0]
 80131d4:	88db      	ldrh	r3, [r3, #6]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d110      	bne.n	80131fc <USBD_StdItfReq+0xc0>
 80131da:	7bfb      	ldrb	r3, [r7, #15]
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d10d      	bne.n	80131fc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80131e0:	6878      	ldr	r0, [r7, #4]
 80131e2:	f000 fdd3 	bl	8013d8c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80131e6:	e009      	b.n	80131fc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80131e8:	6839      	ldr	r1, [r7, #0]
 80131ea:	6878      	ldr	r0, [r7, #4]
 80131ec:	f000 fcf7 	bl	8013bde <USBD_CtlError>
          break;
 80131f0:	e004      	b.n	80131fc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80131f2:	6839      	ldr	r1, [r7, #0]
 80131f4:	6878      	ldr	r0, [r7, #4]
 80131f6:	f000 fcf2 	bl	8013bde <USBD_CtlError>
          break;
 80131fa:	e000      	b.n	80131fe <USBD_StdItfReq+0xc2>
          break;
 80131fc:	bf00      	nop
      }
      break;
 80131fe:	e004      	b.n	801320a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8013200:	6839      	ldr	r1, [r7, #0]
 8013202:	6878      	ldr	r0, [r7, #4]
 8013204:	f000 fceb 	bl	8013bde <USBD_CtlError>
      break;
 8013208:	bf00      	nop
  }

  return ret;
 801320a:	7bfb      	ldrb	r3, [r7, #15]
}
 801320c:	4618      	mov	r0, r3
 801320e:	3710      	adds	r7, #16
 8013210:	46bd      	mov	sp, r7
 8013212:	bd80      	pop	{r7, pc}

08013214 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013214:	b580      	push	{r7, lr}
 8013216:	b084      	sub	sp, #16
 8013218:	af00      	add	r7, sp, #0
 801321a:	6078      	str	r0, [r7, #4]
 801321c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 801321e:	2300      	movs	r3, #0
 8013220:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8013222:	683b      	ldr	r3, [r7, #0]
 8013224:	889b      	ldrh	r3, [r3, #4]
 8013226:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013228:	683b      	ldr	r3, [r7, #0]
 801322a:	781b      	ldrb	r3, [r3, #0]
 801322c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8013230:	2b40      	cmp	r3, #64	@ 0x40
 8013232:	d007      	beq.n	8013244 <USBD_StdEPReq+0x30>
 8013234:	2b40      	cmp	r3, #64	@ 0x40
 8013236:	f200 817f 	bhi.w	8013538 <USBD_StdEPReq+0x324>
 801323a:	2b00      	cmp	r3, #0
 801323c:	d02a      	beq.n	8013294 <USBD_StdEPReq+0x80>
 801323e:	2b20      	cmp	r3, #32
 8013240:	f040 817a 	bne.w	8013538 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8013244:	7bbb      	ldrb	r3, [r7, #14]
 8013246:	4619      	mov	r1, r3
 8013248:	6878      	ldr	r0, [r7, #4]
 801324a:	f7ff fe85 	bl	8012f58 <USBD_CoreFindEP>
 801324e:	4603      	mov	r3, r0
 8013250:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013252:	7b7b      	ldrb	r3, [r7, #13]
 8013254:	2bff      	cmp	r3, #255	@ 0xff
 8013256:	f000 8174 	beq.w	8013542 <USBD_StdEPReq+0x32e>
 801325a:	7b7b      	ldrb	r3, [r7, #13]
 801325c:	2b00      	cmp	r3, #0
 801325e:	f040 8170 	bne.w	8013542 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8013262:	7b7a      	ldrb	r2, [r7, #13]
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801326a:	7b7a      	ldrb	r2, [r7, #13]
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	32ae      	adds	r2, #174	@ 0xae
 8013270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013274:	689b      	ldr	r3, [r3, #8]
 8013276:	2b00      	cmp	r3, #0
 8013278:	f000 8163 	beq.w	8013542 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 801327c:	7b7a      	ldrb	r2, [r7, #13]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	32ae      	adds	r2, #174	@ 0xae
 8013282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013286:	689b      	ldr	r3, [r3, #8]
 8013288:	6839      	ldr	r1, [r7, #0]
 801328a:	6878      	ldr	r0, [r7, #4]
 801328c:	4798      	blx	r3
 801328e:	4603      	mov	r3, r0
 8013290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8013292:	e156      	b.n	8013542 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013294:	683b      	ldr	r3, [r7, #0]
 8013296:	785b      	ldrb	r3, [r3, #1]
 8013298:	2b03      	cmp	r3, #3
 801329a:	d008      	beq.n	80132ae <USBD_StdEPReq+0x9a>
 801329c:	2b03      	cmp	r3, #3
 801329e:	f300 8145 	bgt.w	801352c <USBD_StdEPReq+0x318>
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	f000 809b 	beq.w	80133de <USBD_StdEPReq+0x1ca>
 80132a8:	2b01      	cmp	r3, #1
 80132aa:	d03c      	beq.n	8013326 <USBD_StdEPReq+0x112>
 80132ac:	e13e      	b.n	801352c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80132b4:	b2db      	uxtb	r3, r3
 80132b6:	2b02      	cmp	r3, #2
 80132b8:	d002      	beq.n	80132c0 <USBD_StdEPReq+0xac>
 80132ba:	2b03      	cmp	r3, #3
 80132bc:	d016      	beq.n	80132ec <USBD_StdEPReq+0xd8>
 80132be:	e02c      	b.n	801331a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80132c0:	7bbb      	ldrb	r3, [r7, #14]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d00d      	beq.n	80132e2 <USBD_StdEPReq+0xce>
 80132c6:	7bbb      	ldrb	r3, [r7, #14]
 80132c8:	2b80      	cmp	r3, #128	@ 0x80
 80132ca:	d00a      	beq.n	80132e2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80132cc:	7bbb      	ldrb	r3, [r7, #14]
 80132ce:	4619      	mov	r1, r3
 80132d0:	6878      	ldr	r0, [r7, #4]
 80132d2:	f004 fb2b 	bl	801792c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80132d6:	2180      	movs	r1, #128	@ 0x80
 80132d8:	6878      	ldr	r0, [r7, #4]
 80132da:	f004 fb27 	bl	801792c <USBD_LL_StallEP>
 80132de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80132e0:	e020      	b.n	8013324 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80132e2:	6839      	ldr	r1, [r7, #0]
 80132e4:	6878      	ldr	r0, [r7, #4]
 80132e6:	f000 fc7a 	bl	8013bde <USBD_CtlError>
              break;
 80132ea:	e01b      	b.n	8013324 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	885b      	ldrh	r3, [r3, #2]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d10e      	bne.n	8013312 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80132f4:	7bbb      	ldrb	r3, [r7, #14]
 80132f6:	2b00      	cmp	r3, #0
 80132f8:	d00b      	beq.n	8013312 <USBD_StdEPReq+0xfe>
 80132fa:	7bbb      	ldrb	r3, [r7, #14]
 80132fc:	2b80      	cmp	r3, #128	@ 0x80
 80132fe:	d008      	beq.n	8013312 <USBD_StdEPReq+0xfe>
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	88db      	ldrh	r3, [r3, #6]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d104      	bne.n	8013312 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8013308:	7bbb      	ldrb	r3, [r7, #14]
 801330a:	4619      	mov	r1, r3
 801330c:	6878      	ldr	r0, [r7, #4]
 801330e:	f004 fb0d 	bl	801792c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8013312:	6878      	ldr	r0, [r7, #4]
 8013314:	f000 fd3a 	bl	8013d8c <USBD_CtlSendStatus>

              break;
 8013318:	e004      	b.n	8013324 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801331a:	6839      	ldr	r1, [r7, #0]
 801331c:	6878      	ldr	r0, [r7, #4]
 801331e:	f000 fc5e 	bl	8013bde <USBD_CtlError>
              break;
 8013322:	bf00      	nop
          }
          break;
 8013324:	e107      	b.n	8013536 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801332c:	b2db      	uxtb	r3, r3
 801332e:	2b02      	cmp	r3, #2
 8013330:	d002      	beq.n	8013338 <USBD_StdEPReq+0x124>
 8013332:	2b03      	cmp	r3, #3
 8013334:	d016      	beq.n	8013364 <USBD_StdEPReq+0x150>
 8013336:	e04b      	b.n	80133d0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8013338:	7bbb      	ldrb	r3, [r7, #14]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d00d      	beq.n	801335a <USBD_StdEPReq+0x146>
 801333e:	7bbb      	ldrb	r3, [r7, #14]
 8013340:	2b80      	cmp	r3, #128	@ 0x80
 8013342:	d00a      	beq.n	801335a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8013344:	7bbb      	ldrb	r3, [r7, #14]
 8013346:	4619      	mov	r1, r3
 8013348:	6878      	ldr	r0, [r7, #4]
 801334a:	f004 faef 	bl	801792c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801334e:	2180      	movs	r1, #128	@ 0x80
 8013350:	6878      	ldr	r0, [r7, #4]
 8013352:	f004 faeb 	bl	801792c <USBD_LL_StallEP>
 8013356:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8013358:	e040      	b.n	80133dc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801335a:	6839      	ldr	r1, [r7, #0]
 801335c:	6878      	ldr	r0, [r7, #4]
 801335e:	f000 fc3e 	bl	8013bde <USBD_CtlError>
              break;
 8013362:	e03b      	b.n	80133dc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8013364:	683b      	ldr	r3, [r7, #0]
 8013366:	885b      	ldrh	r3, [r3, #2]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d136      	bne.n	80133da <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801336c:	7bbb      	ldrb	r3, [r7, #14]
 801336e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013372:	2b00      	cmp	r3, #0
 8013374:	d004      	beq.n	8013380 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8013376:	7bbb      	ldrb	r3, [r7, #14]
 8013378:	4619      	mov	r1, r3
 801337a:	6878      	ldr	r0, [r7, #4]
 801337c:	f004 faf5 	bl	801796a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f000 fd03 	bl	8013d8c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8013386:	7bbb      	ldrb	r3, [r7, #14]
 8013388:	4619      	mov	r1, r3
 801338a:	6878      	ldr	r0, [r7, #4]
 801338c:	f7ff fde4 	bl	8012f58 <USBD_CoreFindEP>
 8013390:	4603      	mov	r3, r0
 8013392:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8013394:	7b7b      	ldrb	r3, [r7, #13]
 8013396:	2bff      	cmp	r3, #255	@ 0xff
 8013398:	d01f      	beq.n	80133da <USBD_StdEPReq+0x1c6>
 801339a:	7b7b      	ldrb	r3, [r7, #13]
 801339c:	2b00      	cmp	r3, #0
 801339e:	d11c      	bne.n	80133da <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80133a0:	7b7a      	ldrb	r2, [r7, #13]
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80133a8:	7b7a      	ldrb	r2, [r7, #13]
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	32ae      	adds	r2, #174	@ 0xae
 80133ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133b2:	689b      	ldr	r3, [r3, #8]
 80133b4:	2b00      	cmp	r3, #0
 80133b6:	d010      	beq.n	80133da <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80133b8:	7b7a      	ldrb	r2, [r7, #13]
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	32ae      	adds	r2, #174	@ 0xae
 80133be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133c2:	689b      	ldr	r3, [r3, #8]
 80133c4:	6839      	ldr	r1, [r7, #0]
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	4798      	blx	r3
 80133ca:	4603      	mov	r3, r0
 80133cc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80133ce:	e004      	b.n	80133da <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80133d0:	6839      	ldr	r1, [r7, #0]
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f000 fc03 	bl	8013bde <USBD_CtlError>
              break;
 80133d8:	e000      	b.n	80133dc <USBD_StdEPReq+0x1c8>
              break;
 80133da:	bf00      	nop
          }
          break;
 80133dc:	e0ab      	b.n	8013536 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80133e4:	b2db      	uxtb	r3, r3
 80133e6:	2b02      	cmp	r3, #2
 80133e8:	d002      	beq.n	80133f0 <USBD_StdEPReq+0x1dc>
 80133ea:	2b03      	cmp	r3, #3
 80133ec:	d032      	beq.n	8013454 <USBD_StdEPReq+0x240>
 80133ee:	e097      	b.n	8013520 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80133f0:	7bbb      	ldrb	r3, [r7, #14]
 80133f2:	2b00      	cmp	r3, #0
 80133f4:	d007      	beq.n	8013406 <USBD_StdEPReq+0x1f2>
 80133f6:	7bbb      	ldrb	r3, [r7, #14]
 80133f8:	2b80      	cmp	r3, #128	@ 0x80
 80133fa:	d004      	beq.n	8013406 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80133fc:	6839      	ldr	r1, [r7, #0]
 80133fe:	6878      	ldr	r0, [r7, #4]
 8013400:	f000 fbed 	bl	8013bde <USBD_CtlError>
                break;
 8013404:	e091      	b.n	801352a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8013406:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801340a:	2b00      	cmp	r3, #0
 801340c:	da0b      	bge.n	8013426 <USBD_StdEPReq+0x212>
 801340e:	7bbb      	ldrb	r3, [r7, #14]
 8013410:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8013414:	4613      	mov	r3, r2
 8013416:	009b      	lsls	r3, r3, #2
 8013418:	4413      	add	r3, r2
 801341a:	009b      	lsls	r3, r3, #2
 801341c:	3310      	adds	r3, #16
 801341e:	687a      	ldr	r2, [r7, #4]
 8013420:	4413      	add	r3, r2
 8013422:	3304      	adds	r3, #4
 8013424:	e00b      	b.n	801343e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8013426:	7bbb      	ldrb	r3, [r7, #14]
 8013428:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801342c:	4613      	mov	r3, r2
 801342e:	009b      	lsls	r3, r3, #2
 8013430:	4413      	add	r3, r2
 8013432:	009b      	lsls	r3, r3, #2
 8013434:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8013438:	687a      	ldr	r2, [r7, #4]
 801343a:	4413      	add	r3, r2
 801343c:	3304      	adds	r3, #4
 801343e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8013440:	68bb      	ldr	r3, [r7, #8]
 8013442:	2200      	movs	r2, #0
 8013444:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	2202      	movs	r2, #2
 801344a:	4619      	mov	r1, r3
 801344c:	6878      	ldr	r0, [r7, #4]
 801344e:	f000 fc43 	bl	8013cd8 <USBD_CtlSendData>
              break;
 8013452:	e06a      	b.n	801352a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8013454:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013458:	2b00      	cmp	r3, #0
 801345a:	da11      	bge.n	8013480 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801345c:	7bbb      	ldrb	r3, [r7, #14]
 801345e:	f003 020f 	and.w	r2, r3, #15
 8013462:	6879      	ldr	r1, [r7, #4]
 8013464:	4613      	mov	r3, r2
 8013466:	009b      	lsls	r3, r3, #2
 8013468:	4413      	add	r3, r2
 801346a:	009b      	lsls	r3, r3, #2
 801346c:	440b      	add	r3, r1
 801346e:	3324      	adds	r3, #36	@ 0x24
 8013470:	881b      	ldrh	r3, [r3, #0]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d117      	bne.n	80134a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8013476:	6839      	ldr	r1, [r7, #0]
 8013478:	6878      	ldr	r0, [r7, #4]
 801347a:	f000 fbb0 	bl	8013bde <USBD_CtlError>
                  break;
 801347e:	e054      	b.n	801352a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8013480:	7bbb      	ldrb	r3, [r7, #14]
 8013482:	f003 020f 	and.w	r2, r3, #15
 8013486:	6879      	ldr	r1, [r7, #4]
 8013488:	4613      	mov	r3, r2
 801348a:	009b      	lsls	r3, r3, #2
 801348c:	4413      	add	r3, r2
 801348e:	009b      	lsls	r3, r3, #2
 8013490:	440b      	add	r3, r1
 8013492:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8013496:	881b      	ldrh	r3, [r3, #0]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d104      	bne.n	80134a6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801349c:	6839      	ldr	r1, [r7, #0]
 801349e:	6878      	ldr	r0, [r7, #4]
 80134a0:	f000 fb9d 	bl	8013bde <USBD_CtlError>
                  break;
 80134a4:	e041      	b.n	801352a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80134a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	da0b      	bge.n	80134c6 <USBD_StdEPReq+0x2b2>
 80134ae:	7bbb      	ldrb	r3, [r7, #14]
 80134b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80134b4:	4613      	mov	r3, r2
 80134b6:	009b      	lsls	r3, r3, #2
 80134b8:	4413      	add	r3, r2
 80134ba:	009b      	lsls	r3, r3, #2
 80134bc:	3310      	adds	r3, #16
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	4413      	add	r3, r2
 80134c2:	3304      	adds	r3, #4
 80134c4:	e00b      	b.n	80134de <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80134c6:	7bbb      	ldrb	r3, [r7, #14]
 80134c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80134cc:	4613      	mov	r3, r2
 80134ce:	009b      	lsls	r3, r3, #2
 80134d0:	4413      	add	r3, r2
 80134d2:	009b      	lsls	r3, r3, #2
 80134d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80134d8:	687a      	ldr	r2, [r7, #4]
 80134da:	4413      	add	r3, r2
 80134dc:	3304      	adds	r3, #4
 80134de:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80134e0:	7bbb      	ldrb	r3, [r7, #14]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d002      	beq.n	80134ec <USBD_StdEPReq+0x2d8>
 80134e6:	7bbb      	ldrb	r3, [r7, #14]
 80134e8:	2b80      	cmp	r3, #128	@ 0x80
 80134ea:	d103      	bne.n	80134f4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80134ec:	68bb      	ldr	r3, [r7, #8]
 80134ee:	2200      	movs	r2, #0
 80134f0:	601a      	str	r2, [r3, #0]
 80134f2:	e00e      	b.n	8013512 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80134f4:	7bbb      	ldrb	r3, [r7, #14]
 80134f6:	4619      	mov	r1, r3
 80134f8:	6878      	ldr	r0, [r7, #4]
 80134fa:	f004 fa55 	bl	80179a8 <USBD_LL_IsStallEP>
 80134fe:	4603      	mov	r3, r0
 8013500:	2b00      	cmp	r3, #0
 8013502:	d003      	beq.n	801350c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	2201      	movs	r2, #1
 8013508:	601a      	str	r2, [r3, #0]
 801350a:	e002      	b.n	8013512 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	2200      	movs	r2, #0
 8013510:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8013512:	68bb      	ldr	r3, [r7, #8]
 8013514:	2202      	movs	r2, #2
 8013516:	4619      	mov	r1, r3
 8013518:	6878      	ldr	r0, [r7, #4]
 801351a:	f000 fbdd 	bl	8013cd8 <USBD_CtlSendData>
              break;
 801351e:	e004      	b.n	801352a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8013520:	6839      	ldr	r1, [r7, #0]
 8013522:	6878      	ldr	r0, [r7, #4]
 8013524:	f000 fb5b 	bl	8013bde <USBD_CtlError>
              break;
 8013528:	bf00      	nop
          }
          break;
 801352a:	e004      	b.n	8013536 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 801352c:	6839      	ldr	r1, [r7, #0]
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f000 fb55 	bl	8013bde <USBD_CtlError>
          break;
 8013534:	bf00      	nop
      }
      break;
 8013536:	e005      	b.n	8013544 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8013538:	6839      	ldr	r1, [r7, #0]
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f000 fb4f 	bl	8013bde <USBD_CtlError>
      break;
 8013540:	e000      	b.n	8013544 <USBD_StdEPReq+0x330>
      break;
 8013542:	bf00      	nop
  }

  return ret;
 8013544:	7bfb      	ldrb	r3, [r7, #15]
}
 8013546:	4618      	mov	r0, r3
 8013548:	3710      	adds	r7, #16
 801354a:	46bd      	mov	sp, r7
 801354c:	bd80      	pop	{r7, pc}
	...

08013550 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013550:	b580      	push	{r7, lr}
 8013552:	b084      	sub	sp, #16
 8013554:	af00      	add	r7, sp, #0
 8013556:	6078      	str	r0, [r7, #4]
 8013558:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801355a:	2300      	movs	r3, #0
 801355c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801355e:	2300      	movs	r3, #0
 8013560:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8013562:	2300      	movs	r3, #0
 8013564:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8013566:	683b      	ldr	r3, [r7, #0]
 8013568:	885b      	ldrh	r3, [r3, #2]
 801356a:	0a1b      	lsrs	r3, r3, #8
 801356c:	b29b      	uxth	r3, r3
 801356e:	3b01      	subs	r3, #1
 8013570:	2b06      	cmp	r3, #6
 8013572:	f200 8128 	bhi.w	80137c6 <USBD_GetDescriptor+0x276>
 8013576:	a201      	add	r2, pc, #4	@ (adr r2, 801357c <USBD_GetDescriptor+0x2c>)
 8013578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801357c:	08013599 	.word	0x08013599
 8013580:	080135b1 	.word	0x080135b1
 8013584:	080135f1 	.word	0x080135f1
 8013588:	080137c7 	.word	0x080137c7
 801358c:	080137c7 	.word	0x080137c7
 8013590:	08013767 	.word	0x08013767
 8013594:	08013793 	.word	0x08013793
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	687a      	ldr	r2, [r7, #4]
 80135a2:	7c12      	ldrb	r2, [r2, #16]
 80135a4:	f107 0108 	add.w	r1, r7, #8
 80135a8:	4610      	mov	r0, r2
 80135aa:	4798      	blx	r3
 80135ac:	60f8      	str	r0, [r7, #12]
      break;
 80135ae:	e112      	b.n	80137d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	7c1b      	ldrb	r3, [r3, #16]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d10d      	bne.n	80135d4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80135c0:	f107 0208 	add.w	r2, r7, #8
 80135c4:	4610      	mov	r0, r2
 80135c6:	4798      	blx	r3
 80135c8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	3301      	adds	r3, #1
 80135ce:	2202      	movs	r2, #2
 80135d0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80135d2:	e100      	b.n	80137d6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80135d4:	687b      	ldr	r3, [r7, #4]
 80135d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80135da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135dc:	f107 0208 	add.w	r2, r7, #8
 80135e0:	4610      	mov	r0, r2
 80135e2:	4798      	blx	r3
 80135e4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80135e6:	68fb      	ldr	r3, [r7, #12]
 80135e8:	3301      	adds	r3, #1
 80135ea:	2202      	movs	r2, #2
 80135ec:	701a      	strb	r2, [r3, #0]
      break;
 80135ee:	e0f2      	b.n	80137d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	885b      	ldrh	r3, [r3, #2]
 80135f4:	b2db      	uxtb	r3, r3
 80135f6:	2b05      	cmp	r3, #5
 80135f8:	f200 80ac 	bhi.w	8013754 <USBD_GetDescriptor+0x204>
 80135fc:	a201      	add	r2, pc, #4	@ (adr r2, 8013604 <USBD_GetDescriptor+0xb4>)
 80135fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013602:	bf00      	nop
 8013604:	0801361d 	.word	0x0801361d
 8013608:	08013651 	.word	0x08013651
 801360c:	08013685 	.word	0x08013685
 8013610:	080136b9 	.word	0x080136b9
 8013614:	080136ed 	.word	0x080136ed
 8013618:	08013721 	.word	0x08013721
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013622:	685b      	ldr	r3, [r3, #4]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d00b      	beq.n	8013640 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801362e:	685b      	ldr	r3, [r3, #4]
 8013630:	687a      	ldr	r2, [r7, #4]
 8013632:	7c12      	ldrb	r2, [r2, #16]
 8013634:	f107 0108 	add.w	r1, r7, #8
 8013638:	4610      	mov	r0, r2
 801363a:	4798      	blx	r3
 801363c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801363e:	e091      	b.n	8013764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013640:	6839      	ldr	r1, [r7, #0]
 8013642:	6878      	ldr	r0, [r7, #4]
 8013644:	f000 facb 	bl	8013bde <USBD_CtlError>
            err++;
 8013648:	7afb      	ldrb	r3, [r7, #11]
 801364a:	3301      	adds	r3, #1
 801364c:	72fb      	strb	r3, [r7, #11]
          break;
 801364e:	e089      	b.n	8013764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013656:	689b      	ldr	r3, [r3, #8]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d00b      	beq.n	8013674 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013662:	689b      	ldr	r3, [r3, #8]
 8013664:	687a      	ldr	r2, [r7, #4]
 8013666:	7c12      	ldrb	r2, [r2, #16]
 8013668:	f107 0108 	add.w	r1, r7, #8
 801366c:	4610      	mov	r0, r2
 801366e:	4798      	blx	r3
 8013670:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013672:	e077      	b.n	8013764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013674:	6839      	ldr	r1, [r7, #0]
 8013676:	6878      	ldr	r0, [r7, #4]
 8013678:	f000 fab1 	bl	8013bde <USBD_CtlError>
            err++;
 801367c:	7afb      	ldrb	r3, [r7, #11]
 801367e:	3301      	adds	r3, #1
 8013680:	72fb      	strb	r3, [r7, #11]
          break;
 8013682:	e06f      	b.n	8013764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801368a:	68db      	ldr	r3, [r3, #12]
 801368c:	2b00      	cmp	r3, #0
 801368e:	d00b      	beq.n	80136a8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013696:	68db      	ldr	r3, [r3, #12]
 8013698:	687a      	ldr	r2, [r7, #4]
 801369a:	7c12      	ldrb	r2, [r2, #16]
 801369c:	f107 0108 	add.w	r1, r7, #8
 80136a0:	4610      	mov	r0, r2
 80136a2:	4798      	blx	r3
 80136a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80136a6:	e05d      	b.n	8013764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80136a8:	6839      	ldr	r1, [r7, #0]
 80136aa:	6878      	ldr	r0, [r7, #4]
 80136ac:	f000 fa97 	bl	8013bde <USBD_CtlError>
            err++;
 80136b0:	7afb      	ldrb	r3, [r7, #11]
 80136b2:	3301      	adds	r3, #1
 80136b4:	72fb      	strb	r3, [r7, #11]
          break;
 80136b6:	e055      	b.n	8013764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80136be:	691b      	ldr	r3, [r3, #16]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d00b      	beq.n	80136dc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80136ca:	691b      	ldr	r3, [r3, #16]
 80136cc:	687a      	ldr	r2, [r7, #4]
 80136ce:	7c12      	ldrb	r2, [r2, #16]
 80136d0:	f107 0108 	add.w	r1, r7, #8
 80136d4:	4610      	mov	r0, r2
 80136d6:	4798      	blx	r3
 80136d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80136da:	e043      	b.n	8013764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80136dc:	6839      	ldr	r1, [r7, #0]
 80136de:	6878      	ldr	r0, [r7, #4]
 80136e0:	f000 fa7d 	bl	8013bde <USBD_CtlError>
            err++;
 80136e4:	7afb      	ldrb	r3, [r7, #11]
 80136e6:	3301      	adds	r3, #1
 80136e8:	72fb      	strb	r3, [r7, #11]
          break;
 80136ea:	e03b      	b.n	8013764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80136f2:	695b      	ldr	r3, [r3, #20]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d00b      	beq.n	8013710 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80136fe:	695b      	ldr	r3, [r3, #20]
 8013700:	687a      	ldr	r2, [r7, #4]
 8013702:	7c12      	ldrb	r2, [r2, #16]
 8013704:	f107 0108 	add.w	r1, r7, #8
 8013708:	4610      	mov	r0, r2
 801370a:	4798      	blx	r3
 801370c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801370e:	e029      	b.n	8013764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013710:	6839      	ldr	r1, [r7, #0]
 8013712:	6878      	ldr	r0, [r7, #4]
 8013714:	f000 fa63 	bl	8013bde <USBD_CtlError>
            err++;
 8013718:	7afb      	ldrb	r3, [r7, #11]
 801371a:	3301      	adds	r3, #1
 801371c:	72fb      	strb	r3, [r7, #11]
          break;
 801371e:	e021      	b.n	8013764 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8013720:	687b      	ldr	r3, [r7, #4]
 8013722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013726:	699b      	ldr	r3, [r3, #24]
 8013728:	2b00      	cmp	r3, #0
 801372a:	d00b      	beq.n	8013744 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8013732:	699b      	ldr	r3, [r3, #24]
 8013734:	687a      	ldr	r2, [r7, #4]
 8013736:	7c12      	ldrb	r2, [r2, #16]
 8013738:	f107 0108 	add.w	r1, r7, #8
 801373c:	4610      	mov	r0, r2
 801373e:	4798      	blx	r3
 8013740:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8013742:	e00f      	b.n	8013764 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8013744:	6839      	ldr	r1, [r7, #0]
 8013746:	6878      	ldr	r0, [r7, #4]
 8013748:	f000 fa49 	bl	8013bde <USBD_CtlError>
            err++;
 801374c:	7afb      	ldrb	r3, [r7, #11]
 801374e:	3301      	adds	r3, #1
 8013750:	72fb      	strb	r3, [r7, #11]
          break;
 8013752:	e007      	b.n	8013764 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8013754:	6839      	ldr	r1, [r7, #0]
 8013756:	6878      	ldr	r0, [r7, #4]
 8013758:	f000 fa41 	bl	8013bde <USBD_CtlError>
          err++;
 801375c:	7afb      	ldrb	r3, [r7, #11]
 801375e:	3301      	adds	r3, #1
 8013760:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8013762:	bf00      	nop
      }
      break;
 8013764:	e037      	b.n	80137d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	7c1b      	ldrb	r3, [r3, #16]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d109      	bne.n	8013782 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8013774:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013776:	f107 0208 	add.w	r2, r7, #8
 801377a:	4610      	mov	r0, r2
 801377c:	4798      	blx	r3
 801377e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8013780:	e029      	b.n	80137d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8013782:	6839      	ldr	r1, [r7, #0]
 8013784:	6878      	ldr	r0, [r7, #4]
 8013786:	f000 fa2a 	bl	8013bde <USBD_CtlError>
        err++;
 801378a:	7afb      	ldrb	r3, [r7, #11]
 801378c:	3301      	adds	r3, #1
 801378e:	72fb      	strb	r3, [r7, #11]
      break;
 8013790:	e021      	b.n	80137d6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	7c1b      	ldrb	r3, [r3, #16]
 8013796:	2b00      	cmp	r3, #0
 8013798:	d10d      	bne.n	80137b6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80137a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80137a2:	f107 0208 	add.w	r2, r7, #8
 80137a6:	4610      	mov	r0, r2
 80137a8:	4798      	blx	r3
 80137aa:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80137ac:	68fb      	ldr	r3, [r7, #12]
 80137ae:	3301      	adds	r3, #1
 80137b0:	2207      	movs	r2, #7
 80137b2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80137b4:	e00f      	b.n	80137d6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80137b6:	6839      	ldr	r1, [r7, #0]
 80137b8:	6878      	ldr	r0, [r7, #4]
 80137ba:	f000 fa10 	bl	8013bde <USBD_CtlError>
        err++;
 80137be:	7afb      	ldrb	r3, [r7, #11]
 80137c0:	3301      	adds	r3, #1
 80137c2:	72fb      	strb	r3, [r7, #11]
      break;
 80137c4:	e007      	b.n	80137d6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80137c6:	6839      	ldr	r1, [r7, #0]
 80137c8:	6878      	ldr	r0, [r7, #4]
 80137ca:	f000 fa08 	bl	8013bde <USBD_CtlError>
      err++;
 80137ce:	7afb      	ldrb	r3, [r7, #11]
 80137d0:	3301      	adds	r3, #1
 80137d2:	72fb      	strb	r3, [r7, #11]
      break;
 80137d4:	bf00      	nop
  }

  if (err != 0U)
 80137d6:	7afb      	ldrb	r3, [r7, #11]
 80137d8:	2b00      	cmp	r3, #0
 80137da:	d11e      	bne.n	801381a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80137dc:	683b      	ldr	r3, [r7, #0]
 80137de:	88db      	ldrh	r3, [r3, #6]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d016      	beq.n	8013812 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80137e4:	893b      	ldrh	r3, [r7, #8]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d00e      	beq.n	8013808 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80137ea:	683b      	ldr	r3, [r7, #0]
 80137ec:	88da      	ldrh	r2, [r3, #6]
 80137ee:	893b      	ldrh	r3, [r7, #8]
 80137f0:	4293      	cmp	r3, r2
 80137f2:	bf28      	it	cs
 80137f4:	4613      	movcs	r3, r2
 80137f6:	b29b      	uxth	r3, r3
 80137f8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80137fa:	893b      	ldrh	r3, [r7, #8]
 80137fc:	461a      	mov	r2, r3
 80137fe:	68f9      	ldr	r1, [r7, #12]
 8013800:	6878      	ldr	r0, [r7, #4]
 8013802:	f000 fa69 	bl	8013cd8 <USBD_CtlSendData>
 8013806:	e009      	b.n	801381c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8013808:	6839      	ldr	r1, [r7, #0]
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f000 f9e7 	bl	8013bde <USBD_CtlError>
 8013810:	e004      	b.n	801381c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f000 faba 	bl	8013d8c <USBD_CtlSendStatus>
 8013818:	e000      	b.n	801381c <USBD_GetDescriptor+0x2cc>
    return;
 801381a:	bf00      	nop
  }
}
 801381c:	3710      	adds	r7, #16
 801381e:	46bd      	mov	sp, r7
 8013820:	bd80      	pop	{r7, pc}
 8013822:	bf00      	nop

08013824 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013824:	b580      	push	{r7, lr}
 8013826:	b084      	sub	sp, #16
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
 801382c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	889b      	ldrh	r3, [r3, #4]
 8013832:	2b00      	cmp	r3, #0
 8013834:	d131      	bne.n	801389a <USBD_SetAddress+0x76>
 8013836:	683b      	ldr	r3, [r7, #0]
 8013838:	88db      	ldrh	r3, [r3, #6]
 801383a:	2b00      	cmp	r3, #0
 801383c:	d12d      	bne.n	801389a <USBD_SetAddress+0x76>
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	885b      	ldrh	r3, [r3, #2]
 8013842:	2b7f      	cmp	r3, #127	@ 0x7f
 8013844:	d829      	bhi.n	801389a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	885b      	ldrh	r3, [r3, #2]
 801384a:	b2db      	uxtb	r3, r3
 801384c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013850:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013852:	687b      	ldr	r3, [r7, #4]
 8013854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013858:	b2db      	uxtb	r3, r3
 801385a:	2b03      	cmp	r3, #3
 801385c:	d104      	bne.n	8013868 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 801385e:	6839      	ldr	r1, [r7, #0]
 8013860:	6878      	ldr	r0, [r7, #4]
 8013862:	f000 f9bc 	bl	8013bde <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013866:	e01d      	b.n	80138a4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	7bfa      	ldrb	r2, [r7, #15]
 801386c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8013870:	7bfb      	ldrb	r3, [r7, #15]
 8013872:	4619      	mov	r1, r3
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	f004 f8c3 	bl	8017a00 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f000 fa86 	bl	8013d8c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8013880:	7bfb      	ldrb	r3, [r7, #15]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d004      	beq.n	8013890 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	2202      	movs	r2, #2
 801388a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801388e:	e009      	b.n	80138a4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	2201      	movs	r2, #1
 8013894:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013898:	e004      	b.n	80138a4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 801389a:	6839      	ldr	r1, [r7, #0]
 801389c:	6878      	ldr	r0, [r7, #4]
 801389e:	f000 f99e 	bl	8013bde <USBD_CtlError>
  }
}
 80138a2:	bf00      	nop
 80138a4:	bf00      	nop
 80138a6:	3710      	adds	r7, #16
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}

080138ac <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80138ac:	b580      	push	{r7, lr}
 80138ae:	b084      	sub	sp, #16
 80138b0:	af00      	add	r7, sp, #0
 80138b2:	6078      	str	r0, [r7, #4]
 80138b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80138b6:	2300      	movs	r3, #0
 80138b8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80138ba:	683b      	ldr	r3, [r7, #0]
 80138bc:	885b      	ldrh	r3, [r3, #2]
 80138be:	b2da      	uxtb	r2, r3
 80138c0:	4b4e      	ldr	r3, [pc, #312]	@ (80139fc <USBD_SetConfig+0x150>)
 80138c2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80138c4:	4b4d      	ldr	r3, [pc, #308]	@ (80139fc <USBD_SetConfig+0x150>)
 80138c6:	781b      	ldrb	r3, [r3, #0]
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d905      	bls.n	80138d8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80138cc:	6839      	ldr	r1, [r7, #0]
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f000 f985 	bl	8013bde <USBD_CtlError>
    return USBD_FAIL;
 80138d4:	2303      	movs	r3, #3
 80138d6:	e08c      	b.n	80139f2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80138de:	b2db      	uxtb	r3, r3
 80138e0:	2b02      	cmp	r3, #2
 80138e2:	d002      	beq.n	80138ea <USBD_SetConfig+0x3e>
 80138e4:	2b03      	cmp	r3, #3
 80138e6:	d029      	beq.n	801393c <USBD_SetConfig+0x90>
 80138e8:	e075      	b.n	80139d6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80138ea:	4b44      	ldr	r3, [pc, #272]	@ (80139fc <USBD_SetConfig+0x150>)
 80138ec:	781b      	ldrb	r3, [r3, #0]
 80138ee:	2b00      	cmp	r3, #0
 80138f0:	d020      	beq.n	8013934 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80138f2:	4b42      	ldr	r3, [pc, #264]	@ (80139fc <USBD_SetConfig+0x150>)
 80138f4:	781b      	ldrb	r3, [r3, #0]
 80138f6:	461a      	mov	r2, r3
 80138f8:	687b      	ldr	r3, [r7, #4]
 80138fa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80138fc:	4b3f      	ldr	r3, [pc, #252]	@ (80139fc <USBD_SetConfig+0x150>)
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	4619      	mov	r1, r3
 8013902:	6878      	ldr	r0, [r7, #4]
 8013904:	f7fe ffe3 	bl	80128ce <USBD_SetClassConfig>
 8013908:	4603      	mov	r3, r0
 801390a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 801390c:	7bfb      	ldrb	r3, [r7, #15]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d008      	beq.n	8013924 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8013912:	6839      	ldr	r1, [r7, #0]
 8013914:	6878      	ldr	r0, [r7, #4]
 8013916:	f000 f962 	bl	8013bde <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	2202      	movs	r2, #2
 801391e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013922:	e065      	b.n	80139f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8013924:	6878      	ldr	r0, [r7, #4]
 8013926:	f000 fa31 	bl	8013d8c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	2203      	movs	r2, #3
 801392e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8013932:	e05d      	b.n	80139f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8013934:	6878      	ldr	r0, [r7, #4]
 8013936:	f000 fa29 	bl	8013d8c <USBD_CtlSendStatus>
      break;
 801393a:	e059      	b.n	80139f0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 801393c:	4b2f      	ldr	r3, [pc, #188]	@ (80139fc <USBD_SetConfig+0x150>)
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	2b00      	cmp	r3, #0
 8013942:	d112      	bne.n	801396a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	2202      	movs	r2, #2
 8013948:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 801394c:	4b2b      	ldr	r3, [pc, #172]	@ (80139fc <USBD_SetConfig+0x150>)
 801394e:	781b      	ldrb	r3, [r3, #0]
 8013950:	461a      	mov	r2, r3
 8013952:	687b      	ldr	r3, [r7, #4]
 8013954:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8013956:	4b29      	ldr	r3, [pc, #164]	@ (80139fc <USBD_SetConfig+0x150>)
 8013958:	781b      	ldrb	r3, [r3, #0]
 801395a:	4619      	mov	r1, r3
 801395c:	6878      	ldr	r0, [r7, #4]
 801395e:	f7fe ffd2 	bl	8012906 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8013962:	6878      	ldr	r0, [r7, #4]
 8013964:	f000 fa12 	bl	8013d8c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8013968:	e042      	b.n	80139f0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 801396a:	4b24      	ldr	r3, [pc, #144]	@ (80139fc <USBD_SetConfig+0x150>)
 801396c:	781b      	ldrb	r3, [r3, #0]
 801396e:	461a      	mov	r2, r3
 8013970:	687b      	ldr	r3, [r7, #4]
 8013972:	685b      	ldr	r3, [r3, #4]
 8013974:	429a      	cmp	r2, r3
 8013976:	d02a      	beq.n	80139ce <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	685b      	ldr	r3, [r3, #4]
 801397c:	b2db      	uxtb	r3, r3
 801397e:	4619      	mov	r1, r3
 8013980:	6878      	ldr	r0, [r7, #4]
 8013982:	f7fe ffc0 	bl	8012906 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8013986:	4b1d      	ldr	r3, [pc, #116]	@ (80139fc <USBD_SetConfig+0x150>)
 8013988:	781b      	ldrb	r3, [r3, #0]
 801398a:	461a      	mov	r2, r3
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8013990:	4b1a      	ldr	r3, [pc, #104]	@ (80139fc <USBD_SetConfig+0x150>)
 8013992:	781b      	ldrb	r3, [r3, #0]
 8013994:	4619      	mov	r1, r3
 8013996:	6878      	ldr	r0, [r7, #4]
 8013998:	f7fe ff99 	bl	80128ce <USBD_SetClassConfig>
 801399c:	4603      	mov	r3, r0
 801399e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80139a0:	7bfb      	ldrb	r3, [r7, #15]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d00f      	beq.n	80139c6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80139a6:	6839      	ldr	r1, [r7, #0]
 80139a8:	6878      	ldr	r0, [r7, #4]
 80139aa:	f000 f918 	bl	8013bde <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	685b      	ldr	r3, [r3, #4]
 80139b2:	b2db      	uxtb	r3, r3
 80139b4:	4619      	mov	r1, r3
 80139b6:	6878      	ldr	r0, [r7, #4]
 80139b8:	f7fe ffa5 	bl	8012906 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	2202      	movs	r2, #2
 80139c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80139c4:	e014      	b.n	80139f0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80139c6:	6878      	ldr	r0, [r7, #4]
 80139c8:	f000 f9e0 	bl	8013d8c <USBD_CtlSendStatus>
      break;
 80139cc:	e010      	b.n	80139f0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80139ce:	6878      	ldr	r0, [r7, #4]
 80139d0:	f000 f9dc 	bl	8013d8c <USBD_CtlSendStatus>
      break;
 80139d4:	e00c      	b.n	80139f0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80139d6:	6839      	ldr	r1, [r7, #0]
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f000 f900 	bl	8013bde <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80139de:	4b07      	ldr	r3, [pc, #28]	@ (80139fc <USBD_SetConfig+0x150>)
 80139e0:	781b      	ldrb	r3, [r3, #0]
 80139e2:	4619      	mov	r1, r3
 80139e4:	6878      	ldr	r0, [r7, #4]
 80139e6:	f7fe ff8e 	bl	8012906 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80139ea:	2303      	movs	r3, #3
 80139ec:	73fb      	strb	r3, [r7, #15]
      break;
 80139ee:	bf00      	nop
  }

  return ret;
 80139f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80139f2:	4618      	mov	r0, r3
 80139f4:	3710      	adds	r7, #16
 80139f6:	46bd      	mov	sp, r7
 80139f8:	bd80      	pop	{r7, pc}
 80139fa:	bf00      	nop
 80139fc:	200055bc 	.word	0x200055bc

08013a00 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a00:	b580      	push	{r7, lr}
 8013a02:	b082      	sub	sp, #8
 8013a04:	af00      	add	r7, sp, #0
 8013a06:	6078      	str	r0, [r7, #4]
 8013a08:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	88db      	ldrh	r3, [r3, #6]
 8013a0e:	2b01      	cmp	r3, #1
 8013a10:	d004      	beq.n	8013a1c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8013a12:	6839      	ldr	r1, [r7, #0]
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f000 f8e2 	bl	8013bde <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8013a1a:	e023      	b.n	8013a64 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a22:	b2db      	uxtb	r3, r3
 8013a24:	2b02      	cmp	r3, #2
 8013a26:	dc02      	bgt.n	8013a2e <USBD_GetConfig+0x2e>
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	dc03      	bgt.n	8013a34 <USBD_GetConfig+0x34>
 8013a2c:	e015      	b.n	8013a5a <USBD_GetConfig+0x5a>
 8013a2e:	2b03      	cmp	r3, #3
 8013a30:	d00b      	beq.n	8013a4a <USBD_GetConfig+0x4a>
 8013a32:	e012      	b.n	8013a5a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	2200      	movs	r2, #0
 8013a38:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	3308      	adds	r3, #8
 8013a3e:	2201      	movs	r2, #1
 8013a40:	4619      	mov	r1, r3
 8013a42:	6878      	ldr	r0, [r7, #4]
 8013a44:	f000 f948 	bl	8013cd8 <USBD_CtlSendData>
        break;
 8013a48:	e00c      	b.n	8013a64 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	3304      	adds	r3, #4
 8013a4e:	2201      	movs	r2, #1
 8013a50:	4619      	mov	r1, r3
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f000 f940 	bl	8013cd8 <USBD_CtlSendData>
        break;
 8013a58:	e004      	b.n	8013a64 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8013a5a:	6839      	ldr	r1, [r7, #0]
 8013a5c:	6878      	ldr	r0, [r7, #4]
 8013a5e:	f000 f8be 	bl	8013bde <USBD_CtlError>
        break;
 8013a62:	bf00      	nop
}
 8013a64:	bf00      	nop
 8013a66:	3708      	adds	r7, #8
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}

08013a6c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013a6c:	b580      	push	{r7, lr}
 8013a6e:	b082      	sub	sp, #8
 8013a70:	af00      	add	r7, sp, #0
 8013a72:	6078      	str	r0, [r7, #4]
 8013a74:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013a7c:	b2db      	uxtb	r3, r3
 8013a7e:	3b01      	subs	r3, #1
 8013a80:	2b02      	cmp	r3, #2
 8013a82:	d81e      	bhi.n	8013ac2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8013a84:	683b      	ldr	r3, [r7, #0]
 8013a86:	88db      	ldrh	r3, [r3, #6]
 8013a88:	2b02      	cmp	r3, #2
 8013a8a:	d004      	beq.n	8013a96 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8013a8c:	6839      	ldr	r1, [r7, #0]
 8013a8e:	6878      	ldr	r0, [r7, #4]
 8013a90:	f000 f8a5 	bl	8013bde <USBD_CtlError>
        break;
 8013a94:	e01a      	b.n	8013acc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	2201      	movs	r2, #1
 8013a9a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d005      	beq.n	8013ab2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	68db      	ldr	r3, [r3, #12]
 8013aaa:	f043 0202 	orr.w	r2, r3, #2
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	330c      	adds	r3, #12
 8013ab6:	2202      	movs	r2, #2
 8013ab8:	4619      	mov	r1, r3
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f000 f90c 	bl	8013cd8 <USBD_CtlSendData>
      break;
 8013ac0:	e004      	b.n	8013acc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8013ac2:	6839      	ldr	r1, [r7, #0]
 8013ac4:	6878      	ldr	r0, [r7, #4]
 8013ac6:	f000 f88a 	bl	8013bde <USBD_CtlError>
      break;
 8013aca:	bf00      	nop
  }
}
 8013acc:	bf00      	nop
 8013ace:	3708      	adds	r7, #8
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	bd80      	pop	{r7, pc}

08013ad4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013ad4:	b580      	push	{r7, lr}
 8013ad6:	b082      	sub	sp, #8
 8013ad8:	af00      	add	r7, sp, #0
 8013ada:	6078      	str	r0, [r7, #4]
 8013adc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013ade:	683b      	ldr	r3, [r7, #0]
 8013ae0:	885b      	ldrh	r3, [r3, #2]
 8013ae2:	2b01      	cmp	r3, #1
 8013ae4:	d107      	bne.n	8013af6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	2201      	movs	r2, #1
 8013aea:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8013aee:	6878      	ldr	r0, [r7, #4]
 8013af0:	f000 f94c 	bl	8013d8c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8013af4:	e013      	b.n	8013b1e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8013af6:	683b      	ldr	r3, [r7, #0]
 8013af8:	885b      	ldrh	r3, [r3, #2]
 8013afa:	2b02      	cmp	r3, #2
 8013afc:	d10b      	bne.n	8013b16 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8013afe:	683b      	ldr	r3, [r7, #0]
 8013b00:	889b      	ldrh	r3, [r3, #4]
 8013b02:	0a1b      	lsrs	r3, r3, #8
 8013b04:	b29b      	uxth	r3, r3
 8013b06:	b2da      	uxtb	r2, r3
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8013b0e:	6878      	ldr	r0, [r7, #4]
 8013b10:	f000 f93c 	bl	8013d8c <USBD_CtlSendStatus>
}
 8013b14:	e003      	b.n	8013b1e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8013b16:	6839      	ldr	r1, [r7, #0]
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f000 f860 	bl	8013bde <USBD_CtlError>
}
 8013b1e:	bf00      	nop
 8013b20:	3708      	adds	r7, #8
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}

08013b26 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013b26:	b580      	push	{r7, lr}
 8013b28:	b082      	sub	sp, #8
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
 8013b2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8013b36:	b2db      	uxtb	r3, r3
 8013b38:	3b01      	subs	r3, #1
 8013b3a:	2b02      	cmp	r3, #2
 8013b3c:	d80b      	bhi.n	8013b56 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8013b3e:	683b      	ldr	r3, [r7, #0]
 8013b40:	885b      	ldrh	r3, [r3, #2]
 8013b42:	2b01      	cmp	r3, #1
 8013b44:	d10c      	bne.n	8013b60 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8013b4e:	6878      	ldr	r0, [r7, #4]
 8013b50:	f000 f91c 	bl	8013d8c <USBD_CtlSendStatus>
      }
      break;
 8013b54:	e004      	b.n	8013b60 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8013b56:	6839      	ldr	r1, [r7, #0]
 8013b58:	6878      	ldr	r0, [r7, #4]
 8013b5a:	f000 f840 	bl	8013bde <USBD_CtlError>
      break;
 8013b5e:	e000      	b.n	8013b62 <USBD_ClrFeature+0x3c>
      break;
 8013b60:	bf00      	nop
  }
}
 8013b62:	bf00      	nop
 8013b64:	3708      	adds	r7, #8
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}

08013b6a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8013b6a:	b580      	push	{r7, lr}
 8013b6c:	b084      	sub	sp, #16
 8013b6e:	af00      	add	r7, sp, #0
 8013b70:	6078      	str	r0, [r7, #4]
 8013b72:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8013b74:	683b      	ldr	r3, [r7, #0]
 8013b76:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	781a      	ldrb	r2, [r3, #0]
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	3301      	adds	r3, #1
 8013b84:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	781a      	ldrb	r2, [r3, #0]
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8013b8e:	68fb      	ldr	r3, [r7, #12]
 8013b90:	3301      	adds	r3, #1
 8013b92:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8013b94:	68f8      	ldr	r0, [r7, #12]
 8013b96:	f7ff fa40 	bl	801301a <SWAPBYTE>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	461a      	mov	r2, r3
 8013b9e:	687b      	ldr	r3, [r7, #4]
 8013ba0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	3301      	adds	r3, #1
 8013ba6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	3301      	adds	r3, #1
 8013bac:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8013bae:	68f8      	ldr	r0, [r7, #12]
 8013bb0:	f7ff fa33 	bl	801301a <SWAPBYTE>
 8013bb4:	4603      	mov	r3, r0
 8013bb6:	461a      	mov	r2, r3
 8013bb8:	687b      	ldr	r3, [r7, #4]
 8013bba:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	3301      	adds	r3, #1
 8013bc0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	3301      	adds	r3, #1
 8013bc6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8013bc8:	68f8      	ldr	r0, [r7, #12]
 8013bca:	f7ff fa26 	bl	801301a <SWAPBYTE>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	461a      	mov	r2, r3
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	80da      	strh	r2, [r3, #6]
}
 8013bd6:	bf00      	nop
 8013bd8:	3710      	adds	r7, #16
 8013bda:	46bd      	mov	sp, r7
 8013bdc:	bd80      	pop	{r7, pc}

08013bde <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013bde:	b580      	push	{r7, lr}
 8013be0:	b082      	sub	sp, #8
 8013be2:	af00      	add	r7, sp, #0
 8013be4:	6078      	str	r0, [r7, #4]
 8013be6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8013be8:	2180      	movs	r1, #128	@ 0x80
 8013bea:	6878      	ldr	r0, [r7, #4]
 8013bec:	f003 fe9e 	bl	801792c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8013bf0:	2100      	movs	r1, #0
 8013bf2:	6878      	ldr	r0, [r7, #4]
 8013bf4:	f003 fe9a 	bl	801792c <USBD_LL_StallEP>
}
 8013bf8:	bf00      	nop
 8013bfa:	3708      	adds	r7, #8
 8013bfc:	46bd      	mov	sp, r7
 8013bfe:	bd80      	pop	{r7, pc}

08013c00 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b086      	sub	sp, #24
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	60f8      	str	r0, [r7, #12]
 8013c08:	60b9      	str	r1, [r7, #8]
 8013c0a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	d042      	beq.n	8013c9c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8013c1a:	6938      	ldr	r0, [r7, #16]
 8013c1c:	f000 f842 	bl	8013ca4 <USBD_GetLen>
 8013c20:	4603      	mov	r3, r0
 8013c22:	3301      	adds	r3, #1
 8013c24:	005b      	lsls	r3, r3, #1
 8013c26:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013c2a:	d808      	bhi.n	8013c3e <USBD_GetString+0x3e>
 8013c2c:	6938      	ldr	r0, [r7, #16]
 8013c2e:	f000 f839 	bl	8013ca4 <USBD_GetLen>
 8013c32:	4603      	mov	r3, r0
 8013c34:	3301      	adds	r3, #1
 8013c36:	b29b      	uxth	r3, r3
 8013c38:	005b      	lsls	r3, r3, #1
 8013c3a:	b29a      	uxth	r2, r3
 8013c3c:	e001      	b.n	8013c42 <USBD_GetString+0x42>
 8013c3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8013c46:	7dfb      	ldrb	r3, [r7, #23]
 8013c48:	68ba      	ldr	r2, [r7, #8]
 8013c4a:	4413      	add	r3, r2
 8013c4c:	687a      	ldr	r2, [r7, #4]
 8013c4e:	7812      	ldrb	r2, [r2, #0]
 8013c50:	701a      	strb	r2, [r3, #0]
  idx++;
 8013c52:	7dfb      	ldrb	r3, [r7, #23]
 8013c54:	3301      	adds	r3, #1
 8013c56:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8013c58:	7dfb      	ldrb	r3, [r7, #23]
 8013c5a:	68ba      	ldr	r2, [r7, #8]
 8013c5c:	4413      	add	r3, r2
 8013c5e:	2203      	movs	r2, #3
 8013c60:	701a      	strb	r2, [r3, #0]
  idx++;
 8013c62:	7dfb      	ldrb	r3, [r7, #23]
 8013c64:	3301      	adds	r3, #1
 8013c66:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8013c68:	e013      	b.n	8013c92 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8013c6a:	7dfb      	ldrb	r3, [r7, #23]
 8013c6c:	68ba      	ldr	r2, [r7, #8]
 8013c6e:	4413      	add	r3, r2
 8013c70:	693a      	ldr	r2, [r7, #16]
 8013c72:	7812      	ldrb	r2, [r2, #0]
 8013c74:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8013c76:	693b      	ldr	r3, [r7, #16]
 8013c78:	3301      	adds	r3, #1
 8013c7a:	613b      	str	r3, [r7, #16]
    idx++;
 8013c7c:	7dfb      	ldrb	r3, [r7, #23]
 8013c7e:	3301      	adds	r3, #1
 8013c80:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013c82:	7dfb      	ldrb	r3, [r7, #23]
 8013c84:	68ba      	ldr	r2, [r7, #8]
 8013c86:	4413      	add	r3, r2
 8013c88:	2200      	movs	r2, #0
 8013c8a:	701a      	strb	r2, [r3, #0]
    idx++;
 8013c8c:	7dfb      	ldrb	r3, [r7, #23]
 8013c8e:	3301      	adds	r3, #1
 8013c90:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013c92:	693b      	ldr	r3, [r7, #16]
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d1e7      	bne.n	8013c6a <USBD_GetString+0x6a>
 8013c9a:	e000      	b.n	8013c9e <USBD_GetString+0x9e>
    return;
 8013c9c:	bf00      	nop
  }
}
 8013c9e:	3718      	adds	r7, #24
 8013ca0:	46bd      	mov	sp, r7
 8013ca2:	bd80      	pop	{r7, pc}

08013ca4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013ca4:	b480      	push	{r7}
 8013ca6:	b085      	sub	sp, #20
 8013ca8:	af00      	add	r7, sp, #0
 8013caa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013cac:	2300      	movs	r3, #0
 8013cae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013cb0:	687b      	ldr	r3, [r7, #4]
 8013cb2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013cb4:	e005      	b.n	8013cc2 <USBD_GetLen+0x1e>
  {
    len++;
 8013cb6:	7bfb      	ldrb	r3, [r7, #15]
 8013cb8:	3301      	adds	r3, #1
 8013cba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	3301      	adds	r3, #1
 8013cc0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	781b      	ldrb	r3, [r3, #0]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d1f5      	bne.n	8013cb6 <USBD_GetLen+0x12>
  }

  return len;
 8013cca:	7bfb      	ldrb	r3, [r7, #15]
}
 8013ccc:	4618      	mov	r0, r3
 8013cce:	3714      	adds	r7, #20
 8013cd0:	46bd      	mov	sp, r7
 8013cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cd6:	4770      	bx	lr

08013cd8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b084      	sub	sp, #16
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	60f8      	str	r0, [r7, #12]
 8013ce0:	60b9      	str	r1, [r7, #8]
 8013ce2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013ce4:	68fb      	ldr	r3, [r7, #12]
 8013ce6:	2202      	movs	r2, #2
 8013ce8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	687a      	ldr	r2, [r7, #4]
 8013cf0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013cf2:	68fb      	ldr	r3, [r7, #12]
 8013cf4:	687a      	ldr	r2, [r7, #4]
 8013cf6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013cf8:	687b      	ldr	r3, [r7, #4]
 8013cfa:	68ba      	ldr	r2, [r7, #8]
 8013cfc:	2100      	movs	r1, #0
 8013cfe:	68f8      	ldr	r0, [r7, #12]
 8013d00:	f003 fe9d 	bl	8017a3e <USBD_LL_Transmit>

  return USBD_OK;
 8013d04:	2300      	movs	r3, #0
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3710      	adds	r7, #16
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}

08013d0e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8013d0e:	b580      	push	{r7, lr}
 8013d10:	b084      	sub	sp, #16
 8013d12:	af00      	add	r7, sp, #0
 8013d14:	60f8      	str	r0, [r7, #12]
 8013d16:	60b9      	str	r1, [r7, #8]
 8013d18:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	68ba      	ldr	r2, [r7, #8]
 8013d1e:	2100      	movs	r1, #0
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	f003 fe8c 	bl	8017a3e <USBD_LL_Transmit>

  return USBD_OK;
 8013d26:	2300      	movs	r3, #0
}
 8013d28:	4618      	mov	r0, r3
 8013d2a:	3710      	adds	r7, #16
 8013d2c:	46bd      	mov	sp, r7
 8013d2e:	bd80      	pop	{r7, pc}

08013d30 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b084      	sub	sp, #16
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	60f8      	str	r0, [r7, #12]
 8013d38:	60b9      	str	r1, [r7, #8]
 8013d3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	2203      	movs	r2, #3
 8013d40:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	687a      	ldr	r2, [r7, #4]
 8013d48:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	687a      	ldr	r2, [r7, #4]
 8013d50:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	68ba      	ldr	r2, [r7, #8]
 8013d58:	2100      	movs	r1, #0
 8013d5a:	68f8      	ldr	r0, [r7, #12]
 8013d5c:	f003 fe90 	bl	8017a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013d60:	2300      	movs	r3, #0
}
 8013d62:	4618      	mov	r0, r3
 8013d64:	3710      	adds	r7, #16
 8013d66:	46bd      	mov	sp, r7
 8013d68:	bd80      	pop	{r7, pc}

08013d6a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8013d6a:	b580      	push	{r7, lr}
 8013d6c:	b084      	sub	sp, #16
 8013d6e:	af00      	add	r7, sp, #0
 8013d70:	60f8      	str	r0, [r7, #12]
 8013d72:	60b9      	str	r1, [r7, #8]
 8013d74:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8013d76:	687b      	ldr	r3, [r7, #4]
 8013d78:	68ba      	ldr	r2, [r7, #8]
 8013d7a:	2100      	movs	r1, #0
 8013d7c:	68f8      	ldr	r0, [r7, #12]
 8013d7e:	f003 fe7f 	bl	8017a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013d82:	2300      	movs	r3, #0
}
 8013d84:	4618      	mov	r0, r3
 8013d86:	3710      	adds	r7, #16
 8013d88:	46bd      	mov	sp, r7
 8013d8a:	bd80      	pop	{r7, pc}

08013d8c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013d8c:	b580      	push	{r7, lr}
 8013d8e:	b082      	sub	sp, #8
 8013d90:	af00      	add	r7, sp, #0
 8013d92:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013d94:	687b      	ldr	r3, [r7, #4]
 8013d96:	2204      	movs	r2, #4
 8013d98:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013d9c:	2300      	movs	r3, #0
 8013d9e:	2200      	movs	r2, #0
 8013da0:	2100      	movs	r1, #0
 8013da2:	6878      	ldr	r0, [r7, #4]
 8013da4:	f003 fe4b 	bl	8017a3e <USBD_LL_Transmit>

  return USBD_OK;
 8013da8:	2300      	movs	r3, #0
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3708      	adds	r7, #8
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}

08013db2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013db2:	b580      	push	{r7, lr}
 8013db4:	b082      	sub	sp, #8
 8013db6:	af00      	add	r7, sp, #0
 8013db8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	2205      	movs	r2, #5
 8013dbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013dc2:	2300      	movs	r3, #0
 8013dc4:	2200      	movs	r2, #0
 8013dc6:	2100      	movs	r1, #0
 8013dc8:	6878      	ldr	r0, [r7, #4]
 8013dca:	f003 fe59 	bl	8017a80 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013dce:	2300      	movs	r3, #0
}
 8013dd0:	4618      	mov	r0, r3
 8013dd2:	3708      	adds	r7, #8
 8013dd4:	46bd      	mov	sp, r7
 8013dd6:	bd80      	pop	{r7, pc}

08013dd8 <__NVIC_SetPriority>:
{
 8013dd8:	b480      	push	{r7}
 8013dda:	b083      	sub	sp, #12
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	4603      	mov	r3, r0
 8013de0:	6039      	str	r1, [r7, #0]
 8013de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8013de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013de8:	2b00      	cmp	r3, #0
 8013dea:	db0a      	blt.n	8013e02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013dec:	683b      	ldr	r3, [r7, #0]
 8013dee:	b2da      	uxtb	r2, r3
 8013df0:	490c      	ldr	r1, [pc, #48]	@ (8013e24 <__NVIC_SetPriority+0x4c>)
 8013df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013df6:	0112      	lsls	r2, r2, #4
 8013df8:	b2d2      	uxtb	r2, r2
 8013dfa:	440b      	add	r3, r1
 8013dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8013e00:	e00a      	b.n	8013e18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8013e02:	683b      	ldr	r3, [r7, #0]
 8013e04:	b2da      	uxtb	r2, r3
 8013e06:	4908      	ldr	r1, [pc, #32]	@ (8013e28 <__NVIC_SetPriority+0x50>)
 8013e08:	79fb      	ldrb	r3, [r7, #7]
 8013e0a:	f003 030f 	and.w	r3, r3, #15
 8013e0e:	3b04      	subs	r3, #4
 8013e10:	0112      	lsls	r2, r2, #4
 8013e12:	b2d2      	uxtb	r2, r2
 8013e14:	440b      	add	r3, r1
 8013e16:	761a      	strb	r2, [r3, #24]
}
 8013e18:	bf00      	nop
 8013e1a:	370c      	adds	r7, #12
 8013e1c:	46bd      	mov	sp, r7
 8013e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e22:	4770      	bx	lr
 8013e24:	e000e100 	.word	0xe000e100
 8013e28:	e000ed00 	.word	0xe000ed00

08013e2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8013e2c:	b580      	push	{r7, lr}
 8013e2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8013e30:	4b05      	ldr	r3, [pc, #20]	@ (8013e48 <SysTick_Handler+0x1c>)
 8013e32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8013e34:	f001 feec 	bl	8015c10 <xTaskGetSchedulerState>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	2b01      	cmp	r3, #1
 8013e3c:	d001      	beq.n	8013e42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8013e3e:	f002 ff23 	bl	8016c88 <xPortSysTickHandler>
  }
}
 8013e42:	bf00      	nop
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	e000e010 	.word	0xe000e010

08013e4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8013e50:	2100      	movs	r1, #0
 8013e52:	f06f 0004 	mvn.w	r0, #4
 8013e56:	f7ff ffbf 	bl	8013dd8 <__NVIC_SetPriority>
#endif
}
 8013e5a:	bf00      	nop
 8013e5c:	bd80      	pop	{r7, pc}
	...

08013e60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8013e60:	b480      	push	{r7}
 8013e62:	b083      	sub	sp, #12
 8013e64:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013e66:	f3ef 8305 	mrs	r3, IPSR
 8013e6a:	603b      	str	r3, [r7, #0]
  return(result);
 8013e6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d003      	beq.n	8013e7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8013e72:	f06f 0305 	mvn.w	r3, #5
 8013e76:	607b      	str	r3, [r7, #4]
 8013e78:	e00c      	b.n	8013e94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8013e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8013ea4 <osKernelInitialize+0x44>)
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d105      	bne.n	8013e8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8013e82:	4b08      	ldr	r3, [pc, #32]	@ (8013ea4 <osKernelInitialize+0x44>)
 8013e84:	2201      	movs	r2, #1
 8013e86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8013e88:	2300      	movs	r3, #0
 8013e8a:	607b      	str	r3, [r7, #4]
 8013e8c:	e002      	b.n	8013e94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8013e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8013e92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013e94:	687b      	ldr	r3, [r7, #4]
}
 8013e96:	4618      	mov	r0, r3
 8013e98:	370c      	adds	r7, #12
 8013e9a:	46bd      	mov	sp, r7
 8013e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea0:	4770      	bx	lr
 8013ea2:	bf00      	nop
 8013ea4:	200055c0 	.word	0x200055c0

08013ea8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8013ea8:	b580      	push	{r7, lr}
 8013eaa:	b082      	sub	sp, #8
 8013eac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013eae:	f3ef 8305 	mrs	r3, IPSR
 8013eb2:	603b      	str	r3, [r7, #0]
  return(result);
 8013eb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d003      	beq.n	8013ec2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8013eba:	f06f 0305 	mvn.w	r3, #5
 8013ebe:	607b      	str	r3, [r7, #4]
 8013ec0:	e010      	b.n	8013ee4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8013ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8013ef0 <osKernelStart+0x48>)
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	2b01      	cmp	r3, #1
 8013ec8:	d109      	bne.n	8013ede <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8013eca:	f7ff ffbf 	bl	8013e4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8013ece:	4b08      	ldr	r3, [pc, #32]	@ (8013ef0 <osKernelStart+0x48>)
 8013ed0:	2202      	movs	r2, #2
 8013ed2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8013ed4:	f001 fa28 	bl	8015328 <vTaskStartScheduler>
      stat = osOK;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	607b      	str	r3, [r7, #4]
 8013edc:	e002      	b.n	8013ee4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8013ede:	f04f 33ff 	mov.w	r3, #4294967295
 8013ee2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8013ee4:	687b      	ldr	r3, [r7, #4]
}
 8013ee6:	4618      	mov	r0, r3
 8013ee8:	3708      	adds	r7, #8
 8013eea:	46bd      	mov	sp, r7
 8013eec:	bd80      	pop	{r7, pc}
 8013eee:	bf00      	nop
 8013ef0:	200055c0 	.word	0x200055c0

08013ef4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b08e      	sub	sp, #56	@ 0x38
 8013ef8:	af04      	add	r7, sp, #16
 8013efa:	60f8      	str	r0, [r7, #12]
 8013efc:	60b9      	str	r1, [r7, #8]
 8013efe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8013f00:	2300      	movs	r3, #0
 8013f02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013f04:	f3ef 8305 	mrs	r3, IPSR
 8013f08:	617b      	str	r3, [r7, #20]
  return(result);
 8013f0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d17e      	bne.n	801400e <osThreadNew+0x11a>
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d07b      	beq.n	801400e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8013f16:	2380      	movs	r3, #128	@ 0x80
 8013f18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8013f1a:	2318      	movs	r3, #24
 8013f1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8013f1e:	2300      	movs	r3, #0
 8013f20:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8013f22:	f04f 33ff 	mov.w	r3, #4294967295
 8013f26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	2b00      	cmp	r3, #0
 8013f2c:	d045      	beq.n	8013fba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	681b      	ldr	r3, [r3, #0]
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d002      	beq.n	8013f3c <osThreadNew+0x48>
        name = attr->name;
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	681b      	ldr	r3, [r3, #0]
 8013f3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	699b      	ldr	r3, [r3, #24]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d002      	beq.n	8013f4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	699b      	ldr	r3, [r3, #24]
 8013f48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8013f4a:	69fb      	ldr	r3, [r7, #28]
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d008      	beq.n	8013f62 <osThreadNew+0x6e>
 8013f50:	69fb      	ldr	r3, [r7, #28]
 8013f52:	2b38      	cmp	r3, #56	@ 0x38
 8013f54:	d805      	bhi.n	8013f62 <osThreadNew+0x6e>
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	685b      	ldr	r3, [r3, #4]
 8013f5a:	f003 0301 	and.w	r3, r3, #1
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d001      	beq.n	8013f66 <osThreadNew+0x72>
        return (NULL);
 8013f62:	2300      	movs	r3, #0
 8013f64:	e054      	b.n	8014010 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8013f66:	687b      	ldr	r3, [r7, #4]
 8013f68:	695b      	ldr	r3, [r3, #20]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d003      	beq.n	8013f76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	695b      	ldr	r3, [r3, #20]
 8013f72:	089b      	lsrs	r3, r3, #2
 8013f74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	689b      	ldr	r3, [r3, #8]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d00e      	beq.n	8013f9c <osThreadNew+0xa8>
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	68db      	ldr	r3, [r3, #12]
 8013f82:	2ba7      	cmp	r3, #167	@ 0xa7
 8013f84:	d90a      	bls.n	8013f9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d006      	beq.n	8013f9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	695b      	ldr	r3, [r3, #20]
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d002      	beq.n	8013f9c <osThreadNew+0xa8>
        mem = 1;
 8013f96:	2301      	movs	r3, #1
 8013f98:	61bb      	str	r3, [r7, #24]
 8013f9a:	e010      	b.n	8013fbe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	689b      	ldr	r3, [r3, #8]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d10c      	bne.n	8013fbe <osThreadNew+0xca>
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	68db      	ldr	r3, [r3, #12]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d108      	bne.n	8013fbe <osThreadNew+0xca>
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	691b      	ldr	r3, [r3, #16]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d104      	bne.n	8013fbe <osThreadNew+0xca>
          mem = 0;
 8013fb4:	2300      	movs	r3, #0
 8013fb6:	61bb      	str	r3, [r7, #24]
 8013fb8:	e001      	b.n	8013fbe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8013fba:	2300      	movs	r3, #0
 8013fbc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8013fbe:	69bb      	ldr	r3, [r7, #24]
 8013fc0:	2b01      	cmp	r3, #1
 8013fc2:	d110      	bne.n	8013fe6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8013fc8:	687a      	ldr	r2, [r7, #4]
 8013fca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8013fcc:	9202      	str	r2, [sp, #8]
 8013fce:	9301      	str	r3, [sp, #4]
 8013fd0:	69fb      	ldr	r3, [r7, #28]
 8013fd2:	9300      	str	r3, [sp, #0]
 8013fd4:	68bb      	ldr	r3, [r7, #8]
 8013fd6:	6a3a      	ldr	r2, [r7, #32]
 8013fd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013fda:	68f8      	ldr	r0, [r7, #12]
 8013fdc:	f000 ffb0 	bl	8014f40 <xTaskCreateStatic>
 8013fe0:	4603      	mov	r3, r0
 8013fe2:	613b      	str	r3, [r7, #16]
 8013fe4:	e013      	b.n	801400e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8013fe6:	69bb      	ldr	r3, [r7, #24]
 8013fe8:	2b00      	cmp	r3, #0
 8013fea:	d110      	bne.n	801400e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8013fec:	6a3b      	ldr	r3, [r7, #32]
 8013fee:	b29a      	uxth	r2, r3
 8013ff0:	f107 0310 	add.w	r3, r7, #16
 8013ff4:	9301      	str	r3, [sp, #4]
 8013ff6:	69fb      	ldr	r3, [r7, #28]
 8013ff8:	9300      	str	r3, [sp, #0]
 8013ffa:	68bb      	ldr	r3, [r7, #8]
 8013ffc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8013ffe:	68f8      	ldr	r0, [r7, #12]
 8014000:	f000 fffe 	bl	8015000 <xTaskCreate>
 8014004:	4603      	mov	r3, r0
 8014006:	2b01      	cmp	r3, #1
 8014008:	d001      	beq.n	801400e <osThreadNew+0x11a>
            hTask = NULL;
 801400a:	2300      	movs	r3, #0
 801400c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801400e:	693b      	ldr	r3, [r7, #16]
}
 8014010:	4618      	mov	r0, r3
 8014012:	3728      	adds	r7, #40	@ 0x28
 8014014:	46bd      	mov	sp, r7
 8014016:	bd80      	pop	{r7, pc}

08014018 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8014018:	b580      	push	{r7, lr}
 801401a:	b084      	sub	sp, #16
 801401c:	af00      	add	r7, sp, #0
 801401e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8014020:	f3ef 8305 	mrs	r3, IPSR
 8014024:	60bb      	str	r3, [r7, #8]
  return(result);
 8014026:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8014028:	2b00      	cmp	r3, #0
 801402a:	d003      	beq.n	8014034 <osDelay+0x1c>
    stat = osErrorISR;
 801402c:	f06f 0305 	mvn.w	r3, #5
 8014030:	60fb      	str	r3, [r7, #12]
 8014032:	e007      	b.n	8014044 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8014034:	2300      	movs	r3, #0
 8014036:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d002      	beq.n	8014044 <osDelay+0x2c>
      vTaskDelay(ticks);
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f001 f93c 	bl	80152bc <vTaskDelay>
    }
  }

  return (stat);
 8014044:	68fb      	ldr	r3, [r7, #12]
}
 8014046:	4618      	mov	r0, r3
 8014048:	3710      	adds	r7, #16
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}
	...

08014050 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8014050:	b480      	push	{r7}
 8014052:	b085      	sub	sp, #20
 8014054:	af00      	add	r7, sp, #0
 8014056:	60f8      	str	r0, [r7, #12]
 8014058:	60b9      	str	r1, [r7, #8]
 801405a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 801405c:	68fb      	ldr	r3, [r7, #12]
 801405e:	4a07      	ldr	r2, [pc, #28]	@ (801407c <vApplicationGetIdleTaskMemory+0x2c>)
 8014060:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	4a06      	ldr	r2, [pc, #24]	@ (8014080 <vApplicationGetIdleTaskMemory+0x30>)
 8014066:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	2280      	movs	r2, #128	@ 0x80
 801406c:	601a      	str	r2, [r3, #0]
}
 801406e:	bf00      	nop
 8014070:	3714      	adds	r7, #20
 8014072:	46bd      	mov	sp, r7
 8014074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014078:	4770      	bx	lr
 801407a:	bf00      	nop
 801407c:	200055c4 	.word	0x200055c4
 8014080:	2000566c 	.word	0x2000566c

08014084 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8014084:	b480      	push	{r7}
 8014086:	b085      	sub	sp, #20
 8014088:	af00      	add	r7, sp, #0
 801408a:	60f8      	str	r0, [r7, #12]
 801408c:	60b9      	str	r1, [r7, #8]
 801408e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8014090:	68fb      	ldr	r3, [r7, #12]
 8014092:	4a07      	ldr	r2, [pc, #28]	@ (80140b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8014094:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8014096:	68bb      	ldr	r3, [r7, #8]
 8014098:	4a06      	ldr	r2, [pc, #24]	@ (80140b4 <vApplicationGetTimerTaskMemory+0x30>)
 801409a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 801409c:	687b      	ldr	r3, [r7, #4]
 801409e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80140a2:	601a      	str	r2, [r3, #0]
}
 80140a4:	bf00      	nop
 80140a6:	3714      	adds	r7, #20
 80140a8:	46bd      	mov	sp, r7
 80140aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ae:	4770      	bx	lr
 80140b0:	2000586c 	.word	0x2000586c
 80140b4:	20005914 	.word	0x20005914

080140b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80140b8:	b480      	push	{r7}
 80140ba:	b083      	sub	sp, #12
 80140bc:	af00      	add	r7, sp, #0
 80140be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	f103 0208 	add.w	r2, r3, #8
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	f04f 32ff 	mov.w	r2, #4294967295
 80140d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	f103 0208 	add.w	r2, r3, #8
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	f103 0208 	add.w	r2, r3, #8
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	2200      	movs	r2, #0
 80140ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80140ec:	bf00      	nop
 80140ee:	370c      	adds	r7, #12
 80140f0:	46bd      	mov	sp, r7
 80140f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140f6:	4770      	bx	lr

080140f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80140f8:	b480      	push	{r7}
 80140fa:	b083      	sub	sp, #12
 80140fc:	af00      	add	r7, sp, #0
 80140fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	2200      	movs	r2, #0
 8014104:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8014106:	bf00      	nop
 8014108:	370c      	adds	r7, #12
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr

08014112 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8014112:	b480      	push	{r7}
 8014114:	b085      	sub	sp, #20
 8014116:	af00      	add	r7, sp, #0
 8014118:	6078      	str	r0, [r7, #4]
 801411a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	685b      	ldr	r3, [r3, #4]
 8014120:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	68fa      	ldr	r2, [r7, #12]
 8014126:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8014128:	68fb      	ldr	r3, [r7, #12]
 801412a:	689a      	ldr	r2, [r3, #8]
 801412c:	683b      	ldr	r3, [r7, #0]
 801412e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8014130:	68fb      	ldr	r3, [r7, #12]
 8014132:	689b      	ldr	r3, [r3, #8]
 8014134:	683a      	ldr	r2, [r7, #0]
 8014136:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	683a      	ldr	r2, [r7, #0]
 801413c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801413e:	683b      	ldr	r3, [r7, #0]
 8014140:	687a      	ldr	r2, [r7, #4]
 8014142:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8014144:	687b      	ldr	r3, [r7, #4]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	1c5a      	adds	r2, r3, #1
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	601a      	str	r2, [r3, #0]
}
 801414e:	bf00      	nop
 8014150:	3714      	adds	r7, #20
 8014152:	46bd      	mov	sp, r7
 8014154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014158:	4770      	bx	lr

0801415a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801415a:	b480      	push	{r7}
 801415c:	b085      	sub	sp, #20
 801415e:	af00      	add	r7, sp, #0
 8014160:	6078      	str	r0, [r7, #4]
 8014162:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8014164:	683b      	ldr	r3, [r7, #0]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801416a:	68bb      	ldr	r3, [r7, #8]
 801416c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014170:	d103      	bne.n	801417a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	691b      	ldr	r3, [r3, #16]
 8014176:	60fb      	str	r3, [r7, #12]
 8014178:	e00c      	b.n	8014194 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	3308      	adds	r3, #8
 801417e:	60fb      	str	r3, [r7, #12]
 8014180:	e002      	b.n	8014188 <vListInsert+0x2e>
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	685b      	ldr	r3, [r3, #4]
 8014186:	60fb      	str	r3, [r7, #12]
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	685b      	ldr	r3, [r3, #4]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	68ba      	ldr	r2, [r7, #8]
 8014190:	429a      	cmp	r2, r3
 8014192:	d2f6      	bcs.n	8014182 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	685a      	ldr	r2, [r3, #4]
 8014198:	683b      	ldr	r3, [r7, #0]
 801419a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801419c:	683b      	ldr	r3, [r7, #0]
 801419e:	685b      	ldr	r3, [r3, #4]
 80141a0:	683a      	ldr	r2, [r7, #0]
 80141a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80141a4:	683b      	ldr	r3, [r7, #0]
 80141a6:	68fa      	ldr	r2, [r7, #12]
 80141a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	683a      	ldr	r2, [r7, #0]
 80141ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80141b0:	683b      	ldr	r3, [r7, #0]
 80141b2:	687a      	ldr	r2, [r7, #4]
 80141b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	1c5a      	adds	r2, r3, #1
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	601a      	str	r2, [r3, #0]
}
 80141c0:	bf00      	nop
 80141c2:	3714      	adds	r7, #20
 80141c4:	46bd      	mov	sp, r7
 80141c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ca:	4770      	bx	lr

080141cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80141cc:	b480      	push	{r7}
 80141ce:	b085      	sub	sp, #20
 80141d0:	af00      	add	r7, sp, #0
 80141d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	691b      	ldr	r3, [r3, #16]
 80141d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	685b      	ldr	r3, [r3, #4]
 80141de:	687a      	ldr	r2, [r7, #4]
 80141e0:	6892      	ldr	r2, [r2, #8]
 80141e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80141e4:	687b      	ldr	r3, [r7, #4]
 80141e6:	689b      	ldr	r3, [r3, #8]
 80141e8:	687a      	ldr	r2, [r7, #4]
 80141ea:	6852      	ldr	r2, [r2, #4]
 80141ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	685b      	ldr	r3, [r3, #4]
 80141f2:	687a      	ldr	r2, [r7, #4]
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d103      	bne.n	8014200 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	689a      	ldr	r2, [r3, #8]
 80141fc:	68fb      	ldr	r3, [r7, #12]
 80141fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8014200:	687b      	ldr	r3, [r7, #4]
 8014202:	2200      	movs	r2, #0
 8014204:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	1e5a      	subs	r2, r3, #1
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	681b      	ldr	r3, [r3, #0]
}
 8014214:	4618      	mov	r0, r3
 8014216:	3714      	adds	r7, #20
 8014218:	46bd      	mov	sp, r7
 801421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421e:	4770      	bx	lr

08014220 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8014220:	b580      	push	{r7, lr}
 8014222:	b084      	sub	sp, #16
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
 8014228:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801422e:	68fb      	ldr	r3, [r7, #12]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d10b      	bne.n	801424c <xQueueGenericReset+0x2c>
	__asm volatile
 8014234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014238:	f383 8811 	msr	BASEPRI, r3
 801423c:	f3bf 8f6f 	isb	sy
 8014240:	f3bf 8f4f 	dsb	sy
 8014244:	60bb      	str	r3, [r7, #8]
}
 8014246:	bf00      	nop
 8014248:	bf00      	nop
 801424a:	e7fd      	b.n	8014248 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801424c:	f002 fc8c 	bl	8016b68 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014250:	68fb      	ldr	r3, [r7, #12]
 8014252:	681a      	ldr	r2, [r3, #0]
 8014254:	68fb      	ldr	r3, [r7, #12]
 8014256:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014258:	68f9      	ldr	r1, [r7, #12]
 801425a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801425c:	fb01 f303 	mul.w	r3, r1, r3
 8014260:	441a      	add	r2, r3
 8014262:	68fb      	ldr	r3, [r7, #12]
 8014264:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8014266:	68fb      	ldr	r3, [r7, #12]
 8014268:	2200      	movs	r2, #0
 801426a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801426c:	68fb      	ldr	r3, [r7, #12]
 801426e:	681a      	ldr	r2, [r3, #0]
 8014270:	68fb      	ldr	r3, [r7, #12]
 8014272:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8014274:	68fb      	ldr	r3, [r7, #12]
 8014276:	681a      	ldr	r2, [r3, #0]
 8014278:	68fb      	ldr	r3, [r7, #12]
 801427a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801427c:	3b01      	subs	r3, #1
 801427e:	68f9      	ldr	r1, [r7, #12]
 8014280:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8014282:	fb01 f303 	mul.w	r3, r1, r3
 8014286:	441a      	add	r2, r3
 8014288:	68fb      	ldr	r3, [r7, #12]
 801428a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801428c:	68fb      	ldr	r3, [r7, #12]
 801428e:	22ff      	movs	r2, #255	@ 0xff
 8014290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	22ff      	movs	r2, #255	@ 0xff
 8014298:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 801429c:	683b      	ldr	r3, [r7, #0]
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d114      	bne.n	80142cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	691b      	ldr	r3, [r3, #16]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d01a      	beq.n	80142e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142aa:	68fb      	ldr	r3, [r7, #12]
 80142ac:	3310      	adds	r3, #16
 80142ae:	4618      	mov	r0, r3
 80142b0:	f001 fad8 	bl	8015864 <xTaskRemoveFromEventList>
 80142b4:	4603      	mov	r3, r0
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d012      	beq.n	80142e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80142ba:	4b0d      	ldr	r3, [pc, #52]	@ (80142f0 <xQueueGenericReset+0xd0>)
 80142bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80142c0:	601a      	str	r2, [r3, #0]
 80142c2:	f3bf 8f4f 	dsb	sy
 80142c6:	f3bf 8f6f 	isb	sy
 80142ca:	e009      	b.n	80142e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	3310      	adds	r3, #16
 80142d0:	4618      	mov	r0, r3
 80142d2:	f7ff fef1 	bl	80140b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	3324      	adds	r3, #36	@ 0x24
 80142da:	4618      	mov	r0, r3
 80142dc:	f7ff feec 	bl	80140b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80142e0:	f002 fc74 	bl	8016bcc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80142e4:	2301      	movs	r3, #1
}
 80142e6:	4618      	mov	r0, r3
 80142e8:	3710      	adds	r7, #16
 80142ea:	46bd      	mov	sp, r7
 80142ec:	bd80      	pop	{r7, pc}
 80142ee:	bf00      	nop
 80142f0:	e000ed04 	.word	0xe000ed04

080142f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80142f4:	b580      	push	{r7, lr}
 80142f6:	b08e      	sub	sp, #56	@ 0x38
 80142f8:	af02      	add	r7, sp, #8
 80142fa:	60f8      	str	r0, [r7, #12]
 80142fc:	60b9      	str	r1, [r7, #8]
 80142fe:	607a      	str	r2, [r7, #4]
 8014300:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8014302:	68fb      	ldr	r3, [r7, #12]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d10b      	bne.n	8014320 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8014308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801430c:	f383 8811 	msr	BASEPRI, r3
 8014310:	f3bf 8f6f 	isb	sy
 8014314:	f3bf 8f4f 	dsb	sy
 8014318:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801431a:	bf00      	nop
 801431c:	bf00      	nop
 801431e:	e7fd      	b.n	801431c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8014320:	683b      	ldr	r3, [r7, #0]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d10b      	bne.n	801433e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8014326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801432a:	f383 8811 	msr	BASEPRI, r3
 801432e:	f3bf 8f6f 	isb	sy
 8014332:	f3bf 8f4f 	dsb	sy
 8014336:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8014338:	bf00      	nop
 801433a:	bf00      	nop
 801433c:	e7fd      	b.n	801433a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	2b00      	cmp	r3, #0
 8014342:	d002      	beq.n	801434a <xQueueGenericCreateStatic+0x56>
 8014344:	68bb      	ldr	r3, [r7, #8]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d001      	beq.n	801434e <xQueueGenericCreateStatic+0x5a>
 801434a:	2301      	movs	r3, #1
 801434c:	e000      	b.n	8014350 <xQueueGenericCreateStatic+0x5c>
 801434e:	2300      	movs	r3, #0
 8014350:	2b00      	cmp	r3, #0
 8014352:	d10b      	bne.n	801436c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8014354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014358:	f383 8811 	msr	BASEPRI, r3
 801435c:	f3bf 8f6f 	isb	sy
 8014360:	f3bf 8f4f 	dsb	sy
 8014364:	623b      	str	r3, [r7, #32]
}
 8014366:	bf00      	nop
 8014368:	bf00      	nop
 801436a:	e7fd      	b.n	8014368 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801436c:	687b      	ldr	r3, [r7, #4]
 801436e:	2b00      	cmp	r3, #0
 8014370:	d102      	bne.n	8014378 <xQueueGenericCreateStatic+0x84>
 8014372:	68bb      	ldr	r3, [r7, #8]
 8014374:	2b00      	cmp	r3, #0
 8014376:	d101      	bne.n	801437c <xQueueGenericCreateStatic+0x88>
 8014378:	2301      	movs	r3, #1
 801437a:	e000      	b.n	801437e <xQueueGenericCreateStatic+0x8a>
 801437c:	2300      	movs	r3, #0
 801437e:	2b00      	cmp	r3, #0
 8014380:	d10b      	bne.n	801439a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8014382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014386:	f383 8811 	msr	BASEPRI, r3
 801438a:	f3bf 8f6f 	isb	sy
 801438e:	f3bf 8f4f 	dsb	sy
 8014392:	61fb      	str	r3, [r7, #28]
}
 8014394:	bf00      	nop
 8014396:	bf00      	nop
 8014398:	e7fd      	b.n	8014396 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 801439a:	2350      	movs	r3, #80	@ 0x50
 801439c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801439e:	697b      	ldr	r3, [r7, #20]
 80143a0:	2b50      	cmp	r3, #80	@ 0x50
 80143a2:	d00b      	beq.n	80143bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80143a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80143a8:	f383 8811 	msr	BASEPRI, r3
 80143ac:	f3bf 8f6f 	isb	sy
 80143b0:	f3bf 8f4f 	dsb	sy
 80143b4:	61bb      	str	r3, [r7, #24]
}
 80143b6:	bf00      	nop
 80143b8:	bf00      	nop
 80143ba:	e7fd      	b.n	80143b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80143bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80143be:	683b      	ldr	r3, [r7, #0]
 80143c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80143c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	d00d      	beq.n	80143e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80143c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ca:	2201      	movs	r2, #1
 80143cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80143d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80143d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143d6:	9300      	str	r3, [sp, #0]
 80143d8:	4613      	mov	r3, r2
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	68b9      	ldr	r1, [r7, #8]
 80143de:	68f8      	ldr	r0, [r7, #12]
 80143e0:	f000 f840 	bl	8014464 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80143e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80143e6:	4618      	mov	r0, r3
 80143e8:	3730      	adds	r7, #48	@ 0x30
 80143ea:	46bd      	mov	sp, r7
 80143ec:	bd80      	pop	{r7, pc}

080143ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80143ee:	b580      	push	{r7, lr}
 80143f0:	b08a      	sub	sp, #40	@ 0x28
 80143f2:	af02      	add	r7, sp, #8
 80143f4:	60f8      	str	r0, [r7, #12]
 80143f6:	60b9      	str	r1, [r7, #8]
 80143f8:	4613      	mov	r3, r2
 80143fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d10b      	bne.n	801441a <xQueueGenericCreate+0x2c>
	__asm volatile
 8014402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014406:	f383 8811 	msr	BASEPRI, r3
 801440a:	f3bf 8f6f 	isb	sy
 801440e:	f3bf 8f4f 	dsb	sy
 8014412:	613b      	str	r3, [r7, #16]
}
 8014414:	bf00      	nop
 8014416:	bf00      	nop
 8014418:	e7fd      	b.n	8014416 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	68ba      	ldr	r2, [r7, #8]
 801441e:	fb02 f303 	mul.w	r3, r2, r3
 8014422:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8014424:	69fb      	ldr	r3, [r7, #28]
 8014426:	3350      	adds	r3, #80	@ 0x50
 8014428:	4618      	mov	r0, r3
 801442a:	f002 fcbf 	bl	8016dac <pvPortMalloc>
 801442e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8014430:	69bb      	ldr	r3, [r7, #24]
 8014432:	2b00      	cmp	r3, #0
 8014434:	d011      	beq.n	801445a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8014436:	69bb      	ldr	r3, [r7, #24]
 8014438:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801443a:	697b      	ldr	r3, [r7, #20]
 801443c:	3350      	adds	r3, #80	@ 0x50
 801443e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8014440:	69bb      	ldr	r3, [r7, #24]
 8014442:	2200      	movs	r2, #0
 8014444:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8014448:	79fa      	ldrb	r2, [r7, #7]
 801444a:	69bb      	ldr	r3, [r7, #24]
 801444c:	9300      	str	r3, [sp, #0]
 801444e:	4613      	mov	r3, r2
 8014450:	697a      	ldr	r2, [r7, #20]
 8014452:	68b9      	ldr	r1, [r7, #8]
 8014454:	68f8      	ldr	r0, [r7, #12]
 8014456:	f000 f805 	bl	8014464 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801445a:	69bb      	ldr	r3, [r7, #24]
	}
 801445c:	4618      	mov	r0, r3
 801445e:	3720      	adds	r7, #32
 8014460:	46bd      	mov	sp, r7
 8014462:	bd80      	pop	{r7, pc}

08014464 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8014464:	b580      	push	{r7, lr}
 8014466:	b084      	sub	sp, #16
 8014468:	af00      	add	r7, sp, #0
 801446a:	60f8      	str	r0, [r7, #12]
 801446c:	60b9      	str	r1, [r7, #8]
 801446e:	607a      	str	r2, [r7, #4]
 8014470:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8014472:	68bb      	ldr	r3, [r7, #8]
 8014474:	2b00      	cmp	r3, #0
 8014476:	d103      	bne.n	8014480 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8014478:	69bb      	ldr	r3, [r7, #24]
 801447a:	69ba      	ldr	r2, [r7, #24]
 801447c:	601a      	str	r2, [r3, #0]
 801447e:	e002      	b.n	8014486 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8014480:	69bb      	ldr	r3, [r7, #24]
 8014482:	687a      	ldr	r2, [r7, #4]
 8014484:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8014486:	69bb      	ldr	r3, [r7, #24]
 8014488:	68fa      	ldr	r2, [r7, #12]
 801448a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 801448c:	69bb      	ldr	r3, [r7, #24]
 801448e:	68ba      	ldr	r2, [r7, #8]
 8014490:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8014492:	2101      	movs	r1, #1
 8014494:	69b8      	ldr	r0, [r7, #24]
 8014496:	f7ff fec3 	bl	8014220 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801449a:	69bb      	ldr	r3, [r7, #24]
 801449c:	78fa      	ldrb	r2, [r7, #3]
 801449e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80144a2:	bf00      	nop
 80144a4:	3710      	adds	r7, #16
 80144a6:	46bd      	mov	sp, r7
 80144a8:	bd80      	pop	{r7, pc}

080144aa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80144aa:	b580      	push	{r7, lr}
 80144ac:	b082      	sub	sp, #8
 80144ae:	af00      	add	r7, sp, #0
 80144b0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d00e      	beq.n	80144d6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2200      	movs	r2, #0
 80144bc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	2200      	movs	r2, #0
 80144c2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80144c4:	687b      	ldr	r3, [r7, #4]
 80144c6:	2200      	movs	r2, #0
 80144c8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80144ca:	2300      	movs	r3, #0
 80144cc:	2200      	movs	r2, #0
 80144ce:	2100      	movs	r1, #0
 80144d0:	6878      	ldr	r0, [r7, #4]
 80144d2:	f000 f81d 	bl	8014510 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80144d6:	bf00      	nop
 80144d8:	3708      	adds	r7, #8
 80144da:	46bd      	mov	sp, r7
 80144dc:	bd80      	pop	{r7, pc}

080144de <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80144de:	b580      	push	{r7, lr}
 80144e0:	b086      	sub	sp, #24
 80144e2:	af00      	add	r7, sp, #0
 80144e4:	4603      	mov	r3, r0
 80144e6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80144e8:	2301      	movs	r3, #1
 80144ea:	617b      	str	r3, [r7, #20]
 80144ec:	2300      	movs	r3, #0
 80144ee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80144f0:	79fb      	ldrb	r3, [r7, #7]
 80144f2:	461a      	mov	r2, r3
 80144f4:	6939      	ldr	r1, [r7, #16]
 80144f6:	6978      	ldr	r0, [r7, #20]
 80144f8:	f7ff ff79 	bl	80143ee <xQueueGenericCreate>
 80144fc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80144fe:	68f8      	ldr	r0, [r7, #12]
 8014500:	f7ff ffd3 	bl	80144aa <prvInitialiseMutex>

		return xNewQueue;
 8014504:	68fb      	ldr	r3, [r7, #12]
	}
 8014506:	4618      	mov	r0, r3
 8014508:	3718      	adds	r7, #24
 801450a:	46bd      	mov	sp, r7
 801450c:	bd80      	pop	{r7, pc}
	...

08014510 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b08e      	sub	sp, #56	@ 0x38
 8014514:	af00      	add	r7, sp, #0
 8014516:	60f8      	str	r0, [r7, #12]
 8014518:	60b9      	str	r1, [r7, #8]
 801451a:	607a      	str	r2, [r7, #4]
 801451c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801451e:	2300      	movs	r3, #0
 8014520:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014522:	68fb      	ldr	r3, [r7, #12]
 8014524:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8014526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014528:	2b00      	cmp	r3, #0
 801452a:	d10b      	bne.n	8014544 <xQueueGenericSend+0x34>
	__asm volatile
 801452c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014530:	f383 8811 	msr	BASEPRI, r3
 8014534:	f3bf 8f6f 	isb	sy
 8014538:	f3bf 8f4f 	dsb	sy
 801453c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801453e:	bf00      	nop
 8014540:	bf00      	nop
 8014542:	e7fd      	b.n	8014540 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014544:	68bb      	ldr	r3, [r7, #8]
 8014546:	2b00      	cmp	r3, #0
 8014548:	d103      	bne.n	8014552 <xQueueGenericSend+0x42>
 801454a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801454c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801454e:	2b00      	cmp	r3, #0
 8014550:	d101      	bne.n	8014556 <xQueueGenericSend+0x46>
 8014552:	2301      	movs	r3, #1
 8014554:	e000      	b.n	8014558 <xQueueGenericSend+0x48>
 8014556:	2300      	movs	r3, #0
 8014558:	2b00      	cmp	r3, #0
 801455a:	d10b      	bne.n	8014574 <xQueueGenericSend+0x64>
	__asm volatile
 801455c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014560:	f383 8811 	msr	BASEPRI, r3
 8014564:	f3bf 8f6f 	isb	sy
 8014568:	f3bf 8f4f 	dsb	sy
 801456c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801456e:	bf00      	nop
 8014570:	bf00      	nop
 8014572:	e7fd      	b.n	8014570 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014574:	683b      	ldr	r3, [r7, #0]
 8014576:	2b02      	cmp	r3, #2
 8014578:	d103      	bne.n	8014582 <xQueueGenericSend+0x72>
 801457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801457c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801457e:	2b01      	cmp	r3, #1
 8014580:	d101      	bne.n	8014586 <xQueueGenericSend+0x76>
 8014582:	2301      	movs	r3, #1
 8014584:	e000      	b.n	8014588 <xQueueGenericSend+0x78>
 8014586:	2300      	movs	r3, #0
 8014588:	2b00      	cmp	r3, #0
 801458a:	d10b      	bne.n	80145a4 <xQueueGenericSend+0x94>
	__asm volatile
 801458c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014590:	f383 8811 	msr	BASEPRI, r3
 8014594:	f3bf 8f6f 	isb	sy
 8014598:	f3bf 8f4f 	dsb	sy
 801459c:	623b      	str	r3, [r7, #32]
}
 801459e:	bf00      	nop
 80145a0:	bf00      	nop
 80145a2:	e7fd      	b.n	80145a0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80145a4:	f001 fb34 	bl	8015c10 <xTaskGetSchedulerState>
 80145a8:	4603      	mov	r3, r0
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d102      	bne.n	80145b4 <xQueueGenericSend+0xa4>
 80145ae:	687b      	ldr	r3, [r7, #4]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d101      	bne.n	80145b8 <xQueueGenericSend+0xa8>
 80145b4:	2301      	movs	r3, #1
 80145b6:	e000      	b.n	80145ba <xQueueGenericSend+0xaa>
 80145b8:	2300      	movs	r3, #0
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	d10b      	bne.n	80145d6 <xQueueGenericSend+0xc6>
	__asm volatile
 80145be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80145c2:	f383 8811 	msr	BASEPRI, r3
 80145c6:	f3bf 8f6f 	isb	sy
 80145ca:	f3bf 8f4f 	dsb	sy
 80145ce:	61fb      	str	r3, [r7, #28]
}
 80145d0:	bf00      	nop
 80145d2:	bf00      	nop
 80145d4:	e7fd      	b.n	80145d2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80145d6:	f002 fac7 	bl	8016b68 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80145da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80145de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80145e2:	429a      	cmp	r2, r3
 80145e4:	d302      	bcc.n	80145ec <xQueueGenericSend+0xdc>
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	2b02      	cmp	r3, #2
 80145ea:	d129      	bne.n	8014640 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80145ec:	683a      	ldr	r2, [r7, #0]
 80145ee:	68b9      	ldr	r1, [r7, #8]
 80145f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80145f2:	f000 fb37 	bl	8014c64 <prvCopyDataToQueue>
 80145f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80145f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d010      	beq.n	8014622 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014602:	3324      	adds	r3, #36	@ 0x24
 8014604:	4618      	mov	r0, r3
 8014606:	f001 f92d 	bl	8015864 <xTaskRemoveFromEventList>
 801460a:	4603      	mov	r3, r0
 801460c:	2b00      	cmp	r3, #0
 801460e:	d013      	beq.n	8014638 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8014610:	4b3f      	ldr	r3, [pc, #252]	@ (8014710 <xQueueGenericSend+0x200>)
 8014612:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014616:	601a      	str	r2, [r3, #0]
 8014618:	f3bf 8f4f 	dsb	sy
 801461c:	f3bf 8f6f 	isb	sy
 8014620:	e00a      	b.n	8014638 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8014622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014624:	2b00      	cmp	r3, #0
 8014626:	d007      	beq.n	8014638 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8014628:	4b39      	ldr	r3, [pc, #228]	@ (8014710 <xQueueGenericSend+0x200>)
 801462a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801462e:	601a      	str	r2, [r3, #0]
 8014630:	f3bf 8f4f 	dsb	sy
 8014634:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8014638:	f002 fac8 	bl	8016bcc <vPortExitCritical>
				return pdPASS;
 801463c:	2301      	movs	r3, #1
 801463e:	e063      	b.n	8014708 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d103      	bne.n	801464e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8014646:	f002 fac1 	bl	8016bcc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801464a:	2300      	movs	r3, #0
 801464c:	e05c      	b.n	8014708 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 801464e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014650:	2b00      	cmp	r3, #0
 8014652:	d106      	bne.n	8014662 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014654:	f107 0314 	add.w	r3, r7, #20
 8014658:	4618      	mov	r0, r3
 801465a:	f001 f967 	bl	801592c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801465e:	2301      	movs	r3, #1
 8014660:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014662:	f002 fab3 	bl	8016bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014666:	f000 fecf 	bl	8015408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801466a:	f002 fa7d 	bl	8016b68 <vPortEnterCritical>
 801466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014674:	b25b      	sxtb	r3, r3
 8014676:	f1b3 3fff 	cmp.w	r3, #4294967295
 801467a:	d103      	bne.n	8014684 <xQueueGenericSend+0x174>
 801467c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801467e:	2200      	movs	r2, #0
 8014680:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014686:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801468a:	b25b      	sxtb	r3, r3
 801468c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014690:	d103      	bne.n	801469a <xQueueGenericSend+0x18a>
 8014692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014694:	2200      	movs	r2, #0
 8014696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801469a:	f002 fa97 	bl	8016bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801469e:	1d3a      	adds	r2, r7, #4
 80146a0:	f107 0314 	add.w	r3, r7, #20
 80146a4:	4611      	mov	r1, r2
 80146a6:	4618      	mov	r0, r3
 80146a8:	f001 f956 	bl	8015958 <xTaskCheckForTimeOut>
 80146ac:	4603      	mov	r3, r0
 80146ae:	2b00      	cmp	r3, #0
 80146b0:	d124      	bne.n	80146fc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80146b2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146b4:	f000 fbce 	bl	8014e54 <prvIsQueueFull>
 80146b8:	4603      	mov	r3, r0
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d018      	beq.n	80146f0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80146be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80146c0:	3310      	adds	r3, #16
 80146c2:	687a      	ldr	r2, [r7, #4]
 80146c4:	4611      	mov	r1, r2
 80146c6:	4618      	mov	r0, r3
 80146c8:	f001 f87a 	bl	80157c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80146cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146ce:	f000 fb59 	bl	8014d84 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80146d2:	f000 fea7 	bl	8015424 <xTaskResumeAll>
 80146d6:	4603      	mov	r3, r0
 80146d8:	2b00      	cmp	r3, #0
 80146da:	f47f af7c 	bne.w	80145d6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80146de:	4b0c      	ldr	r3, [pc, #48]	@ (8014710 <xQueueGenericSend+0x200>)
 80146e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80146e4:	601a      	str	r2, [r3, #0]
 80146e6:	f3bf 8f4f 	dsb	sy
 80146ea:	f3bf 8f6f 	isb	sy
 80146ee:	e772      	b.n	80145d6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80146f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146f2:	f000 fb47 	bl	8014d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80146f6:	f000 fe95 	bl	8015424 <xTaskResumeAll>
 80146fa:	e76c      	b.n	80145d6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80146fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80146fe:	f000 fb41 	bl	8014d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014702:	f000 fe8f 	bl	8015424 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8014706:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8014708:	4618      	mov	r0, r3
 801470a:	3738      	adds	r7, #56	@ 0x38
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}
 8014710:	e000ed04 	.word	0xe000ed04

08014714 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b090      	sub	sp, #64	@ 0x40
 8014718:	af00      	add	r7, sp, #0
 801471a:	60f8      	str	r0, [r7, #12]
 801471c:	60b9      	str	r1, [r7, #8]
 801471e:	607a      	str	r2, [r7, #4]
 8014720:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8014726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014728:	2b00      	cmp	r3, #0
 801472a:	d10b      	bne.n	8014744 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 801472c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014730:	f383 8811 	msr	BASEPRI, r3
 8014734:	f3bf 8f6f 	isb	sy
 8014738:	f3bf 8f4f 	dsb	sy
 801473c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 801473e:	bf00      	nop
 8014740:	bf00      	nop
 8014742:	e7fd      	b.n	8014740 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d103      	bne.n	8014752 <xQueueGenericSendFromISR+0x3e>
 801474a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801474c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801474e:	2b00      	cmp	r3, #0
 8014750:	d101      	bne.n	8014756 <xQueueGenericSendFromISR+0x42>
 8014752:	2301      	movs	r3, #1
 8014754:	e000      	b.n	8014758 <xQueueGenericSendFromISR+0x44>
 8014756:	2300      	movs	r3, #0
 8014758:	2b00      	cmp	r3, #0
 801475a:	d10b      	bne.n	8014774 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 801475c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014760:	f383 8811 	msr	BASEPRI, r3
 8014764:	f3bf 8f6f 	isb	sy
 8014768:	f3bf 8f4f 	dsb	sy
 801476c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 801476e:	bf00      	nop
 8014770:	bf00      	nop
 8014772:	e7fd      	b.n	8014770 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8014774:	683b      	ldr	r3, [r7, #0]
 8014776:	2b02      	cmp	r3, #2
 8014778:	d103      	bne.n	8014782 <xQueueGenericSendFromISR+0x6e>
 801477a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801477c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801477e:	2b01      	cmp	r3, #1
 8014780:	d101      	bne.n	8014786 <xQueueGenericSendFromISR+0x72>
 8014782:	2301      	movs	r3, #1
 8014784:	e000      	b.n	8014788 <xQueueGenericSendFromISR+0x74>
 8014786:	2300      	movs	r3, #0
 8014788:	2b00      	cmp	r3, #0
 801478a:	d10b      	bne.n	80147a4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 801478c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014790:	f383 8811 	msr	BASEPRI, r3
 8014794:	f3bf 8f6f 	isb	sy
 8014798:	f3bf 8f4f 	dsb	sy
 801479c:	623b      	str	r3, [r7, #32]
}
 801479e:	bf00      	nop
 80147a0:	bf00      	nop
 80147a2:	e7fd      	b.n	80147a0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80147a4:	f002 fac0 	bl	8016d28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80147a8:	f3ef 8211 	mrs	r2, BASEPRI
 80147ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80147b0:	f383 8811 	msr	BASEPRI, r3
 80147b4:	f3bf 8f6f 	isb	sy
 80147b8:	f3bf 8f4f 	dsb	sy
 80147bc:	61fa      	str	r2, [r7, #28]
 80147be:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80147c0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80147c2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80147c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80147c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80147cc:	429a      	cmp	r2, r3
 80147ce:	d302      	bcc.n	80147d6 <xQueueGenericSendFromISR+0xc2>
 80147d0:	683b      	ldr	r3, [r7, #0]
 80147d2:	2b02      	cmp	r3, #2
 80147d4:	d12f      	bne.n	8014836 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80147d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80147dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80147e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80147e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80147e6:	683a      	ldr	r2, [r7, #0]
 80147e8:	68b9      	ldr	r1, [r7, #8]
 80147ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80147ec:	f000 fa3a 	bl	8014c64 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80147f0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80147f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147f8:	d112      	bne.n	8014820 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80147fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80147fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d016      	beq.n	8014830 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014804:	3324      	adds	r3, #36	@ 0x24
 8014806:	4618      	mov	r0, r3
 8014808:	f001 f82c 	bl	8015864 <xTaskRemoveFromEventList>
 801480c:	4603      	mov	r3, r0
 801480e:	2b00      	cmp	r3, #0
 8014810:	d00e      	beq.n	8014830 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d00b      	beq.n	8014830 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	2201      	movs	r2, #1
 801481c:	601a      	str	r2, [r3, #0]
 801481e:	e007      	b.n	8014830 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8014820:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014824:	3301      	adds	r3, #1
 8014826:	b2db      	uxtb	r3, r3
 8014828:	b25a      	sxtb	r2, r3
 801482a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801482c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8014830:	2301      	movs	r3, #1
 8014832:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8014834:	e001      	b.n	801483a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8014836:	2300      	movs	r3, #0
 8014838:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801483a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801483c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801483e:	697b      	ldr	r3, [r7, #20]
 8014840:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8014844:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8014846:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8014848:	4618      	mov	r0, r3
 801484a:	3740      	adds	r7, #64	@ 0x40
 801484c:	46bd      	mov	sp, r7
 801484e:	bd80      	pop	{r7, pc}

08014850 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8014850:	b580      	push	{r7, lr}
 8014852:	b08c      	sub	sp, #48	@ 0x30
 8014854:	af00      	add	r7, sp, #0
 8014856:	60f8      	str	r0, [r7, #12]
 8014858:	60b9      	str	r1, [r7, #8]
 801485a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 801485c:	2300      	movs	r3, #0
 801485e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014860:	68fb      	ldr	r3, [r7, #12]
 8014862:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014866:	2b00      	cmp	r3, #0
 8014868:	d10b      	bne.n	8014882 <xQueueReceive+0x32>
	__asm volatile
 801486a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801486e:	f383 8811 	msr	BASEPRI, r3
 8014872:	f3bf 8f6f 	isb	sy
 8014876:	f3bf 8f4f 	dsb	sy
 801487a:	623b      	str	r3, [r7, #32]
}
 801487c:	bf00      	nop
 801487e:	bf00      	nop
 8014880:	e7fd      	b.n	801487e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8014882:	68bb      	ldr	r3, [r7, #8]
 8014884:	2b00      	cmp	r3, #0
 8014886:	d103      	bne.n	8014890 <xQueueReceive+0x40>
 8014888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801488a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801488c:	2b00      	cmp	r3, #0
 801488e:	d101      	bne.n	8014894 <xQueueReceive+0x44>
 8014890:	2301      	movs	r3, #1
 8014892:	e000      	b.n	8014896 <xQueueReceive+0x46>
 8014894:	2300      	movs	r3, #0
 8014896:	2b00      	cmp	r3, #0
 8014898:	d10b      	bne.n	80148b2 <xQueueReceive+0x62>
	__asm volatile
 801489a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801489e:	f383 8811 	msr	BASEPRI, r3
 80148a2:	f3bf 8f6f 	isb	sy
 80148a6:	f3bf 8f4f 	dsb	sy
 80148aa:	61fb      	str	r3, [r7, #28]
}
 80148ac:	bf00      	nop
 80148ae:	bf00      	nop
 80148b0:	e7fd      	b.n	80148ae <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80148b2:	f001 f9ad 	bl	8015c10 <xTaskGetSchedulerState>
 80148b6:	4603      	mov	r3, r0
 80148b8:	2b00      	cmp	r3, #0
 80148ba:	d102      	bne.n	80148c2 <xQueueReceive+0x72>
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d101      	bne.n	80148c6 <xQueueReceive+0x76>
 80148c2:	2301      	movs	r3, #1
 80148c4:	e000      	b.n	80148c8 <xQueueReceive+0x78>
 80148c6:	2300      	movs	r3, #0
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d10b      	bne.n	80148e4 <xQueueReceive+0x94>
	__asm volatile
 80148cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80148d0:	f383 8811 	msr	BASEPRI, r3
 80148d4:	f3bf 8f6f 	isb	sy
 80148d8:	f3bf 8f4f 	dsb	sy
 80148dc:	61bb      	str	r3, [r7, #24]
}
 80148de:	bf00      	nop
 80148e0:	bf00      	nop
 80148e2:	e7fd      	b.n	80148e0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80148e4:	f002 f940 	bl	8016b68 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80148e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80148ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80148ec:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80148ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d01f      	beq.n	8014934 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80148f4:	68b9      	ldr	r1, [r7, #8]
 80148f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80148f8:	f000 fa1e 	bl	8014d38 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80148fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148fe:	1e5a      	subs	r2, r3, #1
 8014900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014902:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014906:	691b      	ldr	r3, [r3, #16]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d00f      	beq.n	801492c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801490e:	3310      	adds	r3, #16
 8014910:	4618      	mov	r0, r3
 8014912:	f000 ffa7 	bl	8015864 <xTaskRemoveFromEventList>
 8014916:	4603      	mov	r3, r0
 8014918:	2b00      	cmp	r3, #0
 801491a:	d007      	beq.n	801492c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801491c:	4b3c      	ldr	r3, [pc, #240]	@ (8014a10 <xQueueReceive+0x1c0>)
 801491e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014922:	601a      	str	r2, [r3, #0]
 8014924:	f3bf 8f4f 	dsb	sy
 8014928:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801492c:	f002 f94e 	bl	8016bcc <vPortExitCritical>
				return pdPASS;
 8014930:	2301      	movs	r3, #1
 8014932:	e069      	b.n	8014a08 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d103      	bne.n	8014942 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801493a:	f002 f947 	bl	8016bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801493e:	2300      	movs	r3, #0
 8014940:	e062      	b.n	8014a08 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014942:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014944:	2b00      	cmp	r3, #0
 8014946:	d106      	bne.n	8014956 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014948:	f107 0310 	add.w	r3, r7, #16
 801494c:	4618      	mov	r0, r3
 801494e:	f000 ffed 	bl	801592c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014952:	2301      	movs	r3, #1
 8014954:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014956:	f002 f939 	bl	8016bcc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801495a:	f000 fd55 	bl	8015408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801495e:	f002 f903 	bl	8016b68 <vPortEnterCritical>
 8014962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014964:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014968:	b25b      	sxtb	r3, r3
 801496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801496e:	d103      	bne.n	8014978 <xQueueReceive+0x128>
 8014970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014972:	2200      	movs	r2, #0
 8014974:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801497a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 801497e:	b25b      	sxtb	r3, r3
 8014980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014984:	d103      	bne.n	801498e <xQueueReceive+0x13e>
 8014986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014988:	2200      	movs	r2, #0
 801498a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801498e:	f002 f91d 	bl	8016bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014992:	1d3a      	adds	r2, r7, #4
 8014994:	f107 0310 	add.w	r3, r7, #16
 8014998:	4611      	mov	r1, r2
 801499a:	4618      	mov	r0, r3
 801499c:	f000 ffdc 	bl	8015958 <xTaskCheckForTimeOut>
 80149a0:	4603      	mov	r3, r0
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d123      	bne.n	80149ee <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80149a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80149a8:	f000 fa3e 	bl	8014e28 <prvIsQueueEmpty>
 80149ac:	4603      	mov	r3, r0
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d017      	beq.n	80149e2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80149b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80149b4:	3324      	adds	r3, #36	@ 0x24
 80149b6:	687a      	ldr	r2, [r7, #4]
 80149b8:	4611      	mov	r1, r2
 80149ba:	4618      	mov	r0, r3
 80149bc:	f000 ff00 	bl	80157c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80149c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80149c2:	f000 f9df 	bl	8014d84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80149c6:	f000 fd2d 	bl	8015424 <xTaskResumeAll>
 80149ca:	4603      	mov	r3, r0
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d189      	bne.n	80148e4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80149d0:	4b0f      	ldr	r3, [pc, #60]	@ (8014a10 <xQueueReceive+0x1c0>)
 80149d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80149d6:	601a      	str	r2, [r3, #0]
 80149d8:	f3bf 8f4f 	dsb	sy
 80149dc:	f3bf 8f6f 	isb	sy
 80149e0:	e780      	b.n	80148e4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80149e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80149e4:	f000 f9ce 	bl	8014d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80149e8:	f000 fd1c 	bl	8015424 <xTaskResumeAll>
 80149ec:	e77a      	b.n	80148e4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80149ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80149f0:	f000 f9c8 	bl	8014d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80149f4:	f000 fd16 	bl	8015424 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80149f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80149fa:	f000 fa15 	bl	8014e28 <prvIsQueueEmpty>
 80149fe:	4603      	mov	r3, r0
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	f43f af6f 	beq.w	80148e4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014a06:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014a08:	4618      	mov	r0, r3
 8014a0a:	3730      	adds	r7, #48	@ 0x30
 8014a0c:	46bd      	mov	sp, r7
 8014a0e:	bd80      	pop	{r7, pc}
 8014a10:	e000ed04 	.word	0xe000ed04

08014a14 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b08e      	sub	sp, #56	@ 0x38
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
 8014a1c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8014a1e:	2300      	movs	r3, #0
 8014a20:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8014a22:	687b      	ldr	r3, [r7, #4]
 8014a24:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8014a26:	2300      	movs	r3, #0
 8014a28:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8014a2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d10b      	bne.n	8014a48 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8014a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a34:	f383 8811 	msr	BASEPRI, r3
 8014a38:	f3bf 8f6f 	isb	sy
 8014a3c:	f3bf 8f4f 	dsb	sy
 8014a40:	623b      	str	r3, [r7, #32]
}
 8014a42:	bf00      	nop
 8014a44:	bf00      	nop
 8014a46:	e7fd      	b.n	8014a44 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8014a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d00b      	beq.n	8014a68 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8014a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a54:	f383 8811 	msr	BASEPRI, r3
 8014a58:	f3bf 8f6f 	isb	sy
 8014a5c:	f3bf 8f4f 	dsb	sy
 8014a60:	61fb      	str	r3, [r7, #28]
}
 8014a62:	bf00      	nop
 8014a64:	bf00      	nop
 8014a66:	e7fd      	b.n	8014a64 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014a68:	f001 f8d2 	bl	8015c10 <xTaskGetSchedulerState>
 8014a6c:	4603      	mov	r3, r0
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d102      	bne.n	8014a78 <xQueueSemaphoreTake+0x64>
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d101      	bne.n	8014a7c <xQueueSemaphoreTake+0x68>
 8014a78:	2301      	movs	r3, #1
 8014a7a:	e000      	b.n	8014a7e <xQueueSemaphoreTake+0x6a>
 8014a7c:	2300      	movs	r3, #0
 8014a7e:	2b00      	cmp	r3, #0
 8014a80:	d10b      	bne.n	8014a9a <xQueueSemaphoreTake+0x86>
	__asm volatile
 8014a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014a86:	f383 8811 	msr	BASEPRI, r3
 8014a8a:	f3bf 8f6f 	isb	sy
 8014a8e:	f3bf 8f4f 	dsb	sy
 8014a92:	61bb      	str	r3, [r7, #24]
}
 8014a94:	bf00      	nop
 8014a96:	bf00      	nop
 8014a98:	e7fd      	b.n	8014a96 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014a9a:	f002 f865 	bl	8016b68 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8014a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014aa2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d024      	beq.n	8014af4 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014aac:	1e5a      	subs	r2, r3, #1
 8014aae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ab0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ab4:	681b      	ldr	r3, [r3, #0]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d104      	bne.n	8014ac4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014aba:	f001 fa23 	bl	8015f04 <pvTaskIncrementMutexHeldCount>
 8014abe:	4602      	mov	r2, r0
 8014ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ac2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ac6:	691b      	ldr	r3, [r3, #16]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d00f      	beq.n	8014aec <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014ace:	3310      	adds	r3, #16
 8014ad0:	4618      	mov	r0, r3
 8014ad2:	f000 fec7 	bl	8015864 <xTaskRemoveFromEventList>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d007      	beq.n	8014aec <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8014adc:	4b54      	ldr	r3, [pc, #336]	@ (8014c30 <xQueueSemaphoreTake+0x21c>)
 8014ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014ae2:	601a      	str	r2, [r3, #0]
 8014ae4:	f3bf 8f4f 	dsb	sy
 8014ae8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8014aec:	f002 f86e 	bl	8016bcc <vPortExitCritical>
				return pdPASS;
 8014af0:	2301      	movs	r3, #1
 8014af2:	e098      	b.n	8014c26 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8014af4:	683b      	ldr	r3, [r7, #0]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d112      	bne.n	8014b20 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8014afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d00b      	beq.n	8014b18 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8014b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014b04:	f383 8811 	msr	BASEPRI, r3
 8014b08:	f3bf 8f6f 	isb	sy
 8014b0c:	f3bf 8f4f 	dsb	sy
 8014b10:	617b      	str	r3, [r7, #20]
}
 8014b12:	bf00      	nop
 8014b14:	bf00      	nop
 8014b16:	e7fd      	b.n	8014b14 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8014b18:	f002 f858 	bl	8016bcc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8014b1c:	2300      	movs	r3, #0
 8014b1e:	e082      	b.n	8014c26 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8014b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d106      	bne.n	8014b34 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8014b26:	f107 030c 	add.w	r3, r7, #12
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f000 fefe 	bl	801592c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8014b30:	2301      	movs	r3, #1
 8014b32:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014b34:	f002 f84a 	bl	8016bcc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014b38:	f000 fc66 	bl	8015408 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014b3c:	f002 f814 	bl	8016b68 <vPortEnterCritical>
 8014b40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b42:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014b46:	b25b      	sxtb	r3, r3
 8014b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b4c:	d103      	bne.n	8014b56 <xQueueSemaphoreTake+0x142>
 8014b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b50:	2200      	movs	r2, #0
 8014b52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014b5c:	b25b      	sxtb	r3, r3
 8014b5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b62:	d103      	bne.n	8014b6c <xQueueSemaphoreTake+0x158>
 8014b64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b66:	2200      	movs	r2, #0
 8014b68:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014b6c:	f002 f82e 	bl	8016bcc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8014b70:	463a      	mov	r2, r7
 8014b72:	f107 030c 	add.w	r3, r7, #12
 8014b76:	4611      	mov	r1, r2
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f000 feed 	bl	8015958 <xTaskCheckForTimeOut>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d132      	bne.n	8014bea <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014b84:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014b86:	f000 f94f 	bl	8014e28 <prvIsQueueEmpty>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	2b00      	cmp	r3, #0
 8014b8e:	d026      	beq.n	8014bde <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014b90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d109      	bne.n	8014bac <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8014b98:	f001 ffe6 	bl	8016b68 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014b9e:	689b      	ldr	r3, [r3, #8]
 8014ba0:	4618      	mov	r0, r3
 8014ba2:	f001 f853 	bl	8015c4c <xTaskPriorityInherit>
 8014ba6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8014ba8:	f002 f810 	bl	8016bcc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014bae:	3324      	adds	r3, #36	@ 0x24
 8014bb0:	683a      	ldr	r2, [r7, #0]
 8014bb2:	4611      	mov	r1, r2
 8014bb4:	4618      	mov	r0, r3
 8014bb6:	f000 fe03 	bl	80157c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014bba:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014bbc:	f000 f8e2 	bl	8014d84 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8014bc0:	f000 fc30 	bl	8015424 <xTaskResumeAll>
 8014bc4:	4603      	mov	r3, r0
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	f47f af67 	bne.w	8014a9a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8014bcc:	4b18      	ldr	r3, [pc, #96]	@ (8014c30 <xQueueSemaphoreTake+0x21c>)
 8014bce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014bd2:	601a      	str	r2, [r3, #0]
 8014bd4:	f3bf 8f4f 	dsb	sy
 8014bd8:	f3bf 8f6f 	isb	sy
 8014bdc:	e75d      	b.n	8014a9a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8014bde:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014be0:	f000 f8d0 	bl	8014d84 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8014be4:	f000 fc1e 	bl	8015424 <xTaskResumeAll>
 8014be8:	e757      	b.n	8014a9a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8014bea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014bec:	f000 f8ca 	bl	8014d84 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8014bf0:	f000 fc18 	bl	8015424 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014bf4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014bf6:	f000 f917 	bl	8014e28 <prvIsQueueEmpty>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	f43f af4c 	beq.w	8014a9a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8014c02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c04:	2b00      	cmp	r3, #0
 8014c06:	d00d      	beq.n	8014c24 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8014c08:	f001 ffae 	bl	8016b68 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8014c0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8014c0e:	f000 f811 	bl	8014c34 <prvGetDisinheritPriorityAfterTimeout>
 8014c12:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8014c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c16:	689b      	ldr	r3, [r3, #8]
 8014c18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014c1a:	4618      	mov	r0, r3
 8014c1c:	f001 f8ee 	bl	8015dfc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8014c20:	f001 ffd4 	bl	8016bcc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8014c24:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3738      	adds	r7, #56	@ 0x38
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
 8014c2e:	bf00      	nop
 8014c30:	e000ed04 	.word	0xe000ed04

08014c34 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014c34:	b480      	push	{r7}
 8014c36:	b085      	sub	sp, #20
 8014c38:	af00      	add	r7, sp, #0
 8014c3a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d006      	beq.n	8014c52 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8014c4e:	60fb      	str	r3, [r7, #12]
 8014c50:	e001      	b.n	8014c56 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014c52:	2300      	movs	r3, #0
 8014c54:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014c56:	68fb      	ldr	r3, [r7, #12]
	}
 8014c58:	4618      	mov	r0, r3
 8014c5a:	3714      	adds	r7, #20
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c62:	4770      	bx	lr

08014c64 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014c64:	b580      	push	{r7, lr}
 8014c66:	b086      	sub	sp, #24
 8014c68:	af00      	add	r7, sp, #0
 8014c6a:	60f8      	str	r0, [r7, #12]
 8014c6c:	60b9      	str	r1, [r7, #8]
 8014c6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014c70:	2300      	movs	r3, #0
 8014c72:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014c78:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8014c7a:	68fb      	ldr	r3, [r7, #12]
 8014c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d10d      	bne.n	8014c9e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	681b      	ldr	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d14d      	bne.n	8014d26 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014c8a:	68fb      	ldr	r3, [r7, #12]
 8014c8c:	689b      	ldr	r3, [r3, #8]
 8014c8e:	4618      	mov	r0, r3
 8014c90:	f001 f844 	bl	8015d1c <xTaskPriorityDisinherit>
 8014c94:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2200      	movs	r2, #0
 8014c9a:	609a      	str	r2, [r3, #8]
 8014c9c:	e043      	b.n	8014d26 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d119      	bne.n	8014cd8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	6858      	ldr	r0, [r3, #4]
 8014ca8:	68fb      	ldr	r3, [r7, #12]
 8014caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014cac:	461a      	mov	r2, r3
 8014cae:	68b9      	ldr	r1, [r7, #8]
 8014cb0:	f005 ff1f 	bl	801aaf2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014cb4:	68fb      	ldr	r3, [r7, #12]
 8014cb6:	685a      	ldr	r2, [r3, #4]
 8014cb8:	68fb      	ldr	r3, [r7, #12]
 8014cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014cbc:	441a      	add	r2, r3
 8014cbe:	68fb      	ldr	r3, [r7, #12]
 8014cc0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	685a      	ldr	r2, [r3, #4]
 8014cc6:	68fb      	ldr	r3, [r7, #12]
 8014cc8:	689b      	ldr	r3, [r3, #8]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d32b      	bcc.n	8014d26 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	681a      	ldr	r2, [r3, #0]
 8014cd2:	68fb      	ldr	r3, [r7, #12]
 8014cd4:	605a      	str	r2, [r3, #4]
 8014cd6:	e026      	b.n	8014d26 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8014cd8:	68fb      	ldr	r3, [r7, #12]
 8014cda:	68d8      	ldr	r0, [r3, #12]
 8014cdc:	68fb      	ldr	r3, [r7, #12]
 8014cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014ce0:	461a      	mov	r2, r3
 8014ce2:	68b9      	ldr	r1, [r7, #8]
 8014ce4:	f005 ff05 	bl	801aaf2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8014ce8:	68fb      	ldr	r3, [r7, #12]
 8014cea:	68da      	ldr	r2, [r3, #12]
 8014cec:	68fb      	ldr	r3, [r7, #12]
 8014cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014cf0:	425b      	negs	r3, r3
 8014cf2:	441a      	add	r2, r3
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	68da      	ldr	r2, [r3, #12]
 8014cfc:	68fb      	ldr	r3, [r7, #12]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d207      	bcs.n	8014d14 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014d04:	68fb      	ldr	r3, [r7, #12]
 8014d06:	689a      	ldr	r2, [r3, #8]
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d0c:	425b      	negs	r3, r3
 8014d0e:	441a      	add	r2, r3
 8014d10:	68fb      	ldr	r3, [r7, #12]
 8014d12:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2b02      	cmp	r3, #2
 8014d18:	d105      	bne.n	8014d26 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014d1a:	693b      	ldr	r3, [r7, #16]
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	d002      	beq.n	8014d26 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	3b01      	subs	r3, #1
 8014d24:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	1c5a      	adds	r2, r3, #1
 8014d2a:	68fb      	ldr	r3, [r7, #12]
 8014d2c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8014d2e:	697b      	ldr	r3, [r7, #20]
}
 8014d30:	4618      	mov	r0, r3
 8014d32:	3718      	adds	r7, #24
 8014d34:	46bd      	mov	sp, r7
 8014d36:	bd80      	pop	{r7, pc}

08014d38 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8014d38:	b580      	push	{r7, lr}
 8014d3a:	b082      	sub	sp, #8
 8014d3c:	af00      	add	r7, sp, #0
 8014d3e:	6078      	str	r0, [r7, #4]
 8014d40:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d018      	beq.n	8014d7c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	68da      	ldr	r2, [r3, #12]
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d52:	441a      	add	r2, r3
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	68da      	ldr	r2, [r3, #12]
 8014d5c:	687b      	ldr	r3, [r7, #4]
 8014d5e:	689b      	ldr	r3, [r3, #8]
 8014d60:	429a      	cmp	r2, r3
 8014d62:	d303      	bcc.n	8014d6c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	681a      	ldr	r2, [r3, #0]
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	68d9      	ldr	r1, [r3, #12]
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d74:	461a      	mov	r2, r3
 8014d76:	6838      	ldr	r0, [r7, #0]
 8014d78:	f005 febb 	bl	801aaf2 <memcpy>
	}
}
 8014d7c:	bf00      	nop
 8014d7e:	3708      	adds	r7, #8
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}

08014d84 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b084      	sub	sp, #16
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8014d8c:	f001 feec 	bl	8016b68 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014d96:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014d98:	e011      	b.n	8014dbe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014d9e:	2b00      	cmp	r3, #0
 8014da0:	d012      	beq.n	8014dc8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	3324      	adds	r3, #36	@ 0x24
 8014da6:	4618      	mov	r0, r3
 8014da8:	f000 fd5c 	bl	8015864 <xTaskRemoveFromEventList>
 8014dac:	4603      	mov	r3, r0
 8014dae:	2b00      	cmp	r3, #0
 8014db0:	d001      	beq.n	8014db6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8014db2:	f000 fe35 	bl	8015a20 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8014db6:	7bfb      	ldrb	r3, [r7, #15]
 8014db8:	3b01      	subs	r3, #1
 8014dba:	b2db      	uxtb	r3, r3
 8014dbc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8014dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	dce9      	bgt.n	8014d9a <prvUnlockQueue+0x16>
 8014dc6:	e000      	b.n	8014dca <prvUnlockQueue+0x46>
					break;
 8014dc8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	22ff      	movs	r2, #255	@ 0xff
 8014dce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8014dd2:	f001 fefb 	bl	8016bcc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014dd6:	f001 fec7 	bl	8016b68 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014de0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014de2:	e011      	b.n	8014e08 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	691b      	ldr	r3, [r3, #16]
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d012      	beq.n	8014e12 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	3310      	adds	r3, #16
 8014df0:	4618      	mov	r0, r3
 8014df2:	f000 fd37 	bl	8015864 <xTaskRemoveFromEventList>
 8014df6:	4603      	mov	r3, r0
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d001      	beq.n	8014e00 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8014dfc:	f000 fe10 	bl	8015a20 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014e00:	7bbb      	ldrb	r3, [r7, #14]
 8014e02:	3b01      	subs	r3, #1
 8014e04:	b2db      	uxtb	r3, r3
 8014e06:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014e08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	dce9      	bgt.n	8014de4 <prvUnlockQueue+0x60>
 8014e10:	e000      	b.n	8014e14 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014e12:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	22ff      	movs	r2, #255	@ 0xff
 8014e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8014e1c:	f001 fed6 	bl	8016bcc <vPortExitCritical>
}
 8014e20:	bf00      	nop
 8014e22:	3710      	adds	r7, #16
 8014e24:	46bd      	mov	sp, r7
 8014e26:	bd80      	pop	{r7, pc}

08014e28 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014e28:	b580      	push	{r7, lr}
 8014e2a:	b084      	sub	sp, #16
 8014e2c:	af00      	add	r7, sp, #0
 8014e2e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014e30:	f001 fe9a 	bl	8016b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d102      	bne.n	8014e42 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8014e3c:	2301      	movs	r3, #1
 8014e3e:	60fb      	str	r3, [r7, #12]
 8014e40:	e001      	b.n	8014e46 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014e42:	2300      	movs	r3, #0
 8014e44:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014e46:	f001 fec1 	bl	8016bcc <vPortExitCritical>

	return xReturn;
 8014e4a:	68fb      	ldr	r3, [r7, #12]
}
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	3710      	adds	r7, #16
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}

08014e54 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b084      	sub	sp, #16
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014e5c:	f001 fe84 	bl	8016b68 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014e68:	429a      	cmp	r2, r3
 8014e6a:	d102      	bne.n	8014e72 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8014e6c:	2301      	movs	r3, #1
 8014e6e:	60fb      	str	r3, [r7, #12]
 8014e70:	e001      	b.n	8014e76 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014e72:	2300      	movs	r3, #0
 8014e74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014e76:	f001 fea9 	bl	8016bcc <vPortExitCritical>

	return xReturn;
 8014e7a:	68fb      	ldr	r3, [r7, #12]
}
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	3710      	adds	r7, #16
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bd80      	pop	{r7, pc}

08014e84 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014e84:	b480      	push	{r7}
 8014e86:	b085      	sub	sp, #20
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014e8e:	2300      	movs	r3, #0
 8014e90:	60fb      	str	r3, [r7, #12]
 8014e92:	e014      	b.n	8014ebe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8014e94:	4a0f      	ldr	r2, [pc, #60]	@ (8014ed4 <vQueueAddToRegistry+0x50>)
 8014e96:	68fb      	ldr	r3, [r7, #12]
 8014e98:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8014e9c:	2b00      	cmp	r3, #0
 8014e9e:	d10b      	bne.n	8014eb8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8014ea0:	490c      	ldr	r1, [pc, #48]	@ (8014ed4 <vQueueAddToRegistry+0x50>)
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	683a      	ldr	r2, [r7, #0]
 8014ea6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8014eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8014ed4 <vQueueAddToRegistry+0x50>)
 8014eac:	68fb      	ldr	r3, [r7, #12]
 8014eae:	00db      	lsls	r3, r3, #3
 8014eb0:	4413      	add	r3, r2
 8014eb2:	687a      	ldr	r2, [r7, #4]
 8014eb4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8014eb6:	e006      	b.n	8014ec6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	3301      	adds	r3, #1
 8014ebc:	60fb      	str	r3, [r7, #12]
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	2b07      	cmp	r3, #7
 8014ec2:	d9e7      	bls.n	8014e94 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014ec4:	bf00      	nop
 8014ec6:	bf00      	nop
 8014ec8:	3714      	adds	r7, #20
 8014eca:	46bd      	mov	sp, r7
 8014ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ed0:	4770      	bx	lr
 8014ed2:	bf00      	nop
 8014ed4:	20005d14 	.word	0x20005d14

08014ed8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014ed8:	b580      	push	{r7, lr}
 8014eda:	b086      	sub	sp, #24
 8014edc:	af00      	add	r7, sp, #0
 8014ede:	60f8      	str	r0, [r7, #12]
 8014ee0:	60b9      	str	r1, [r7, #8]
 8014ee2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014ee4:	68fb      	ldr	r3, [r7, #12]
 8014ee6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014ee8:	f001 fe3e 	bl	8016b68 <vPortEnterCritical>
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8014ef2:	b25b      	sxtb	r3, r3
 8014ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014ef8:	d103      	bne.n	8014f02 <vQueueWaitForMessageRestricted+0x2a>
 8014efa:	697b      	ldr	r3, [r7, #20]
 8014efc:	2200      	movs	r2, #0
 8014efe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8014f02:	697b      	ldr	r3, [r7, #20]
 8014f04:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8014f08:	b25b      	sxtb	r3, r3
 8014f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f0e:	d103      	bne.n	8014f18 <vQueueWaitForMessageRestricted+0x40>
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	2200      	movs	r2, #0
 8014f14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8014f18:	f001 fe58 	bl	8016bcc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014f1c:	697b      	ldr	r3, [r7, #20]
 8014f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d106      	bne.n	8014f32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014f24:	697b      	ldr	r3, [r7, #20]
 8014f26:	3324      	adds	r3, #36	@ 0x24
 8014f28:	687a      	ldr	r2, [r7, #4]
 8014f2a:	68b9      	ldr	r1, [r7, #8]
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f000 fc6d 	bl	801580c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014f32:	6978      	ldr	r0, [r7, #20]
 8014f34:	f7ff ff26 	bl	8014d84 <prvUnlockQueue>
	}
 8014f38:	bf00      	nop
 8014f3a:	3718      	adds	r7, #24
 8014f3c:	46bd      	mov	sp, r7
 8014f3e:	bd80      	pop	{r7, pc}

08014f40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b08e      	sub	sp, #56	@ 0x38
 8014f44:	af04      	add	r7, sp, #16
 8014f46:	60f8      	str	r0, [r7, #12]
 8014f48:	60b9      	str	r1, [r7, #8]
 8014f4a:	607a      	str	r2, [r7, #4]
 8014f4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8014f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d10b      	bne.n	8014f6c <xTaskCreateStatic+0x2c>
	__asm volatile
 8014f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f58:	f383 8811 	msr	BASEPRI, r3
 8014f5c:	f3bf 8f6f 	isb	sy
 8014f60:	f3bf 8f4f 	dsb	sy
 8014f64:	623b      	str	r3, [r7, #32]
}
 8014f66:	bf00      	nop
 8014f68:	bf00      	nop
 8014f6a:	e7fd      	b.n	8014f68 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8014f6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f6e:	2b00      	cmp	r3, #0
 8014f70:	d10b      	bne.n	8014f8a <xTaskCreateStatic+0x4a>
	__asm volatile
 8014f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f76:	f383 8811 	msr	BASEPRI, r3
 8014f7a:	f3bf 8f6f 	isb	sy
 8014f7e:	f3bf 8f4f 	dsb	sy
 8014f82:	61fb      	str	r3, [r7, #28]
}
 8014f84:	bf00      	nop
 8014f86:	bf00      	nop
 8014f88:	e7fd      	b.n	8014f86 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8014f8a:	23a8      	movs	r3, #168	@ 0xa8
 8014f8c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8014f8e:	693b      	ldr	r3, [r7, #16]
 8014f90:	2ba8      	cmp	r3, #168	@ 0xa8
 8014f92:	d00b      	beq.n	8014fac <xTaskCreateStatic+0x6c>
	__asm volatile
 8014f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8014f98:	f383 8811 	msr	BASEPRI, r3
 8014f9c:	f3bf 8f6f 	isb	sy
 8014fa0:	f3bf 8f4f 	dsb	sy
 8014fa4:	61bb      	str	r3, [r7, #24]
}
 8014fa6:	bf00      	nop
 8014fa8:	bf00      	nop
 8014faa:	e7fd      	b.n	8014fa8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014fac:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fb0:	2b00      	cmp	r3, #0
 8014fb2:	d01e      	beq.n	8014ff2 <xTaskCreateStatic+0xb2>
 8014fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d01b      	beq.n	8014ff2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014fbc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fc0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014fc2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fc6:	2202      	movs	r2, #2
 8014fc8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014fcc:	2300      	movs	r3, #0
 8014fce:	9303      	str	r3, [sp, #12]
 8014fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014fd2:	9302      	str	r3, [sp, #8]
 8014fd4:	f107 0314 	add.w	r3, r7, #20
 8014fd8:	9301      	str	r3, [sp, #4]
 8014fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014fdc:	9300      	str	r3, [sp, #0]
 8014fde:	683b      	ldr	r3, [r7, #0]
 8014fe0:	687a      	ldr	r2, [r7, #4]
 8014fe2:	68b9      	ldr	r1, [r7, #8]
 8014fe4:	68f8      	ldr	r0, [r7, #12]
 8014fe6:	f000 f851 	bl	801508c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014fea:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014fec:	f000 f8f6 	bl	80151dc <prvAddNewTaskToReadyList>
 8014ff0:	e001      	b.n	8014ff6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014ff6:	697b      	ldr	r3, [r7, #20]
	}
 8014ff8:	4618      	mov	r0, r3
 8014ffa:	3728      	adds	r7, #40	@ 0x28
 8014ffc:	46bd      	mov	sp, r7
 8014ffe:	bd80      	pop	{r7, pc}

08015000 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8015000:	b580      	push	{r7, lr}
 8015002:	b08c      	sub	sp, #48	@ 0x30
 8015004:	af04      	add	r7, sp, #16
 8015006:	60f8      	str	r0, [r7, #12]
 8015008:	60b9      	str	r1, [r7, #8]
 801500a:	603b      	str	r3, [r7, #0]
 801500c:	4613      	mov	r3, r2
 801500e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8015010:	88fb      	ldrh	r3, [r7, #6]
 8015012:	009b      	lsls	r3, r3, #2
 8015014:	4618      	mov	r0, r3
 8015016:	f001 fec9 	bl	8016dac <pvPortMalloc>
 801501a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801501c:	697b      	ldr	r3, [r7, #20]
 801501e:	2b00      	cmp	r3, #0
 8015020:	d00e      	beq.n	8015040 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8015022:	20a8      	movs	r0, #168	@ 0xa8
 8015024:	f001 fec2 	bl	8016dac <pvPortMalloc>
 8015028:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801502a:	69fb      	ldr	r3, [r7, #28]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d003      	beq.n	8015038 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8015030:	69fb      	ldr	r3, [r7, #28]
 8015032:	697a      	ldr	r2, [r7, #20]
 8015034:	631a      	str	r2, [r3, #48]	@ 0x30
 8015036:	e005      	b.n	8015044 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8015038:	6978      	ldr	r0, [r7, #20]
 801503a:	f001 ff85 	bl	8016f48 <vPortFree>
 801503e:	e001      	b.n	8015044 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8015040:	2300      	movs	r3, #0
 8015042:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8015044:	69fb      	ldr	r3, [r7, #28]
 8015046:	2b00      	cmp	r3, #0
 8015048:	d017      	beq.n	801507a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 801504a:	69fb      	ldr	r3, [r7, #28]
 801504c:	2200      	movs	r2, #0
 801504e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8015052:	88fa      	ldrh	r2, [r7, #6]
 8015054:	2300      	movs	r3, #0
 8015056:	9303      	str	r3, [sp, #12]
 8015058:	69fb      	ldr	r3, [r7, #28]
 801505a:	9302      	str	r3, [sp, #8]
 801505c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801505e:	9301      	str	r3, [sp, #4]
 8015060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015062:	9300      	str	r3, [sp, #0]
 8015064:	683b      	ldr	r3, [r7, #0]
 8015066:	68b9      	ldr	r1, [r7, #8]
 8015068:	68f8      	ldr	r0, [r7, #12]
 801506a:	f000 f80f 	bl	801508c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801506e:	69f8      	ldr	r0, [r7, #28]
 8015070:	f000 f8b4 	bl	80151dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8015074:	2301      	movs	r3, #1
 8015076:	61bb      	str	r3, [r7, #24]
 8015078:	e002      	b.n	8015080 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801507a:	f04f 33ff 	mov.w	r3, #4294967295
 801507e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8015080:	69bb      	ldr	r3, [r7, #24]
	}
 8015082:	4618      	mov	r0, r3
 8015084:	3720      	adds	r7, #32
 8015086:	46bd      	mov	sp, r7
 8015088:	bd80      	pop	{r7, pc}
	...

0801508c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b088      	sub	sp, #32
 8015090:	af00      	add	r7, sp, #0
 8015092:	60f8      	str	r0, [r7, #12]
 8015094:	60b9      	str	r1, [r7, #8]
 8015096:	607a      	str	r2, [r7, #4]
 8015098:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801509a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801509c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	009b      	lsls	r3, r3, #2
 80150a2:	461a      	mov	r2, r3
 80150a4:	21a5      	movs	r1, #165	@ 0xa5
 80150a6:	f005 fc35 	bl	801a914 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80150aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80150ac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80150b4:	3b01      	subs	r3, #1
 80150b6:	009b      	lsls	r3, r3, #2
 80150b8:	4413      	add	r3, r2
 80150ba:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80150bc:	69bb      	ldr	r3, [r7, #24]
 80150be:	f023 0307 	bic.w	r3, r3, #7
 80150c2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80150c4:	69bb      	ldr	r3, [r7, #24]
 80150c6:	f003 0307 	and.w	r3, r3, #7
 80150ca:	2b00      	cmp	r3, #0
 80150cc:	d00b      	beq.n	80150e6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80150ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80150d2:	f383 8811 	msr	BASEPRI, r3
 80150d6:	f3bf 8f6f 	isb	sy
 80150da:	f3bf 8f4f 	dsb	sy
 80150de:	617b      	str	r3, [r7, #20]
}
 80150e0:	bf00      	nop
 80150e2:	bf00      	nop
 80150e4:	e7fd      	b.n	80150e2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80150e6:	68bb      	ldr	r3, [r7, #8]
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	d01f      	beq.n	801512c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80150ec:	2300      	movs	r3, #0
 80150ee:	61fb      	str	r3, [r7, #28]
 80150f0:	e012      	b.n	8015118 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80150f2:	68ba      	ldr	r2, [r7, #8]
 80150f4:	69fb      	ldr	r3, [r7, #28]
 80150f6:	4413      	add	r3, r2
 80150f8:	7819      	ldrb	r1, [r3, #0]
 80150fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80150fc:	69fb      	ldr	r3, [r7, #28]
 80150fe:	4413      	add	r3, r2
 8015100:	3334      	adds	r3, #52	@ 0x34
 8015102:	460a      	mov	r2, r1
 8015104:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8015106:	68ba      	ldr	r2, [r7, #8]
 8015108:	69fb      	ldr	r3, [r7, #28]
 801510a:	4413      	add	r3, r2
 801510c:	781b      	ldrb	r3, [r3, #0]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d006      	beq.n	8015120 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8015112:	69fb      	ldr	r3, [r7, #28]
 8015114:	3301      	adds	r3, #1
 8015116:	61fb      	str	r3, [r7, #28]
 8015118:	69fb      	ldr	r3, [r7, #28]
 801511a:	2b0f      	cmp	r3, #15
 801511c:	d9e9      	bls.n	80150f2 <prvInitialiseNewTask+0x66>
 801511e:	e000      	b.n	8015122 <prvInitialiseNewTask+0x96>
			{
				break;
 8015120:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8015122:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015124:	2200      	movs	r2, #0
 8015126:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801512a:	e003      	b.n	8015134 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801512c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801512e:	2200      	movs	r2, #0
 8015130:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8015134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015136:	2b37      	cmp	r3, #55	@ 0x37
 8015138:	d901      	bls.n	801513e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801513a:	2337      	movs	r3, #55	@ 0x37
 801513c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015142:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8015144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015146:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015148:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 801514a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801514c:	2200      	movs	r2, #0
 801514e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8015150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015152:	3304      	adds	r3, #4
 8015154:	4618      	mov	r0, r3
 8015156:	f7fe ffcf 	bl	80140f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801515c:	3318      	adds	r3, #24
 801515e:	4618      	mov	r0, r3
 8015160:	f7fe ffca 	bl	80140f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8015164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015168:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801516c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015172:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8015174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015176:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015178:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801517a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801517c:	2200      	movs	r2, #0
 801517e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015184:	2200      	movs	r2, #0
 8015186:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801518a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801518c:	3354      	adds	r3, #84	@ 0x54
 801518e:	224c      	movs	r2, #76	@ 0x4c
 8015190:	2100      	movs	r1, #0
 8015192:	4618      	mov	r0, r3
 8015194:	f005 fbbe 	bl	801a914 <memset>
 8015198:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801519a:	4a0d      	ldr	r2, [pc, #52]	@ (80151d0 <prvInitialiseNewTask+0x144>)
 801519c:	659a      	str	r2, [r3, #88]	@ 0x58
 801519e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151a0:	4a0c      	ldr	r2, [pc, #48]	@ (80151d4 <prvInitialiseNewTask+0x148>)
 80151a2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80151a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151a6:	4a0c      	ldr	r2, [pc, #48]	@ (80151d8 <prvInitialiseNewTask+0x14c>)
 80151a8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80151aa:	683a      	ldr	r2, [r7, #0]
 80151ac:	68f9      	ldr	r1, [r7, #12]
 80151ae:	69b8      	ldr	r0, [r7, #24]
 80151b0:	f001 fbaa 	bl	8016908 <pxPortInitialiseStack>
 80151b4:	4602      	mov	r2, r0
 80151b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80151b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80151ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151bc:	2b00      	cmp	r3, #0
 80151be:	d002      	beq.n	80151c6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80151c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80151c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80151c6:	bf00      	nop
 80151c8:	3720      	adds	r7, #32
 80151ca:	46bd      	mov	sp, r7
 80151cc:	bd80      	pop	{r7, pc}
 80151ce:	bf00      	nop
 80151d0:	2000bb88 	.word	0x2000bb88
 80151d4:	2000bbf0 	.word	0x2000bbf0
 80151d8:	2000bc58 	.word	0x2000bc58

080151dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80151dc:	b580      	push	{r7, lr}
 80151de:	b082      	sub	sp, #8
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80151e4:	f001 fcc0 	bl	8016b68 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80151e8:	4b2d      	ldr	r3, [pc, #180]	@ (80152a0 <prvAddNewTaskToReadyList+0xc4>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	3301      	adds	r3, #1
 80151ee:	4a2c      	ldr	r2, [pc, #176]	@ (80152a0 <prvAddNewTaskToReadyList+0xc4>)
 80151f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80151f2:	4b2c      	ldr	r3, [pc, #176]	@ (80152a4 <prvAddNewTaskToReadyList+0xc8>)
 80151f4:	681b      	ldr	r3, [r3, #0]
 80151f6:	2b00      	cmp	r3, #0
 80151f8:	d109      	bne.n	801520e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80151fa:	4a2a      	ldr	r2, [pc, #168]	@ (80152a4 <prvAddNewTaskToReadyList+0xc8>)
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8015200:	4b27      	ldr	r3, [pc, #156]	@ (80152a0 <prvAddNewTaskToReadyList+0xc4>)
 8015202:	681b      	ldr	r3, [r3, #0]
 8015204:	2b01      	cmp	r3, #1
 8015206:	d110      	bne.n	801522a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8015208:	f000 fc2e 	bl	8015a68 <prvInitialiseTaskLists>
 801520c:	e00d      	b.n	801522a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801520e:	4b26      	ldr	r3, [pc, #152]	@ (80152a8 <prvAddNewTaskToReadyList+0xcc>)
 8015210:	681b      	ldr	r3, [r3, #0]
 8015212:	2b00      	cmp	r3, #0
 8015214:	d109      	bne.n	801522a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8015216:	4b23      	ldr	r3, [pc, #140]	@ (80152a4 <prvAddNewTaskToReadyList+0xc8>)
 8015218:	681b      	ldr	r3, [r3, #0]
 801521a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015220:	429a      	cmp	r2, r3
 8015222:	d802      	bhi.n	801522a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8015224:	4a1f      	ldr	r2, [pc, #124]	@ (80152a4 <prvAddNewTaskToReadyList+0xc8>)
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801522a:	4b20      	ldr	r3, [pc, #128]	@ (80152ac <prvAddNewTaskToReadyList+0xd0>)
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	3301      	adds	r3, #1
 8015230:	4a1e      	ldr	r2, [pc, #120]	@ (80152ac <prvAddNewTaskToReadyList+0xd0>)
 8015232:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8015234:	4b1d      	ldr	r3, [pc, #116]	@ (80152ac <prvAddNewTaskToReadyList+0xd0>)
 8015236:	681a      	ldr	r2, [r3, #0]
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015240:	4b1b      	ldr	r3, [pc, #108]	@ (80152b0 <prvAddNewTaskToReadyList+0xd4>)
 8015242:	681b      	ldr	r3, [r3, #0]
 8015244:	429a      	cmp	r2, r3
 8015246:	d903      	bls.n	8015250 <prvAddNewTaskToReadyList+0x74>
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801524c:	4a18      	ldr	r2, [pc, #96]	@ (80152b0 <prvAddNewTaskToReadyList+0xd4>)
 801524e:	6013      	str	r3, [r2, #0]
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015254:	4613      	mov	r3, r2
 8015256:	009b      	lsls	r3, r3, #2
 8015258:	4413      	add	r3, r2
 801525a:	009b      	lsls	r3, r3, #2
 801525c:	4a15      	ldr	r2, [pc, #84]	@ (80152b4 <prvAddNewTaskToReadyList+0xd8>)
 801525e:	441a      	add	r2, r3
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	3304      	adds	r3, #4
 8015264:	4619      	mov	r1, r3
 8015266:	4610      	mov	r0, r2
 8015268:	f7fe ff53 	bl	8014112 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801526c:	f001 fcae 	bl	8016bcc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8015270:	4b0d      	ldr	r3, [pc, #52]	@ (80152a8 <prvAddNewTaskToReadyList+0xcc>)
 8015272:	681b      	ldr	r3, [r3, #0]
 8015274:	2b00      	cmp	r3, #0
 8015276:	d00e      	beq.n	8015296 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8015278:	4b0a      	ldr	r3, [pc, #40]	@ (80152a4 <prvAddNewTaskToReadyList+0xc8>)
 801527a:	681b      	ldr	r3, [r3, #0]
 801527c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015282:	429a      	cmp	r2, r3
 8015284:	d207      	bcs.n	8015296 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8015286:	4b0c      	ldr	r3, [pc, #48]	@ (80152b8 <prvAddNewTaskToReadyList+0xdc>)
 8015288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801528c:	601a      	str	r2, [r3, #0]
 801528e:	f3bf 8f4f 	dsb	sy
 8015292:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8015296:	bf00      	nop
 8015298:	3708      	adds	r7, #8
 801529a:	46bd      	mov	sp, r7
 801529c:	bd80      	pop	{r7, pc}
 801529e:	bf00      	nop
 80152a0:	20006228 	.word	0x20006228
 80152a4:	20005d54 	.word	0x20005d54
 80152a8:	20006234 	.word	0x20006234
 80152ac:	20006244 	.word	0x20006244
 80152b0:	20006230 	.word	0x20006230
 80152b4:	20005d58 	.word	0x20005d58
 80152b8:	e000ed04 	.word	0xe000ed04

080152bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b084      	sub	sp, #16
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80152c4:	2300      	movs	r3, #0
 80152c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d018      	beq.n	8015300 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80152ce:	4b14      	ldr	r3, [pc, #80]	@ (8015320 <vTaskDelay+0x64>)
 80152d0:	681b      	ldr	r3, [r3, #0]
 80152d2:	2b00      	cmp	r3, #0
 80152d4:	d00b      	beq.n	80152ee <vTaskDelay+0x32>
	__asm volatile
 80152d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80152da:	f383 8811 	msr	BASEPRI, r3
 80152de:	f3bf 8f6f 	isb	sy
 80152e2:	f3bf 8f4f 	dsb	sy
 80152e6:	60bb      	str	r3, [r7, #8]
}
 80152e8:	bf00      	nop
 80152ea:	bf00      	nop
 80152ec:	e7fd      	b.n	80152ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80152ee:	f000 f88b 	bl	8015408 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80152f2:	2100      	movs	r1, #0
 80152f4:	6878      	ldr	r0, [r7, #4]
 80152f6:	f000 fefb 	bl	80160f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80152fa:	f000 f893 	bl	8015424 <xTaskResumeAll>
 80152fe:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8015300:	68fb      	ldr	r3, [r7, #12]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d107      	bne.n	8015316 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8015306:	4b07      	ldr	r3, [pc, #28]	@ (8015324 <vTaskDelay+0x68>)
 8015308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801530c:	601a      	str	r2, [r3, #0]
 801530e:	f3bf 8f4f 	dsb	sy
 8015312:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015316:	bf00      	nop
 8015318:	3710      	adds	r7, #16
 801531a:	46bd      	mov	sp, r7
 801531c:	bd80      	pop	{r7, pc}
 801531e:	bf00      	nop
 8015320:	20006250 	.word	0x20006250
 8015324:	e000ed04 	.word	0xe000ed04

08015328 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8015328:	b580      	push	{r7, lr}
 801532a:	b08a      	sub	sp, #40	@ 0x28
 801532c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801532e:	2300      	movs	r3, #0
 8015330:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8015332:	2300      	movs	r3, #0
 8015334:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8015336:	463a      	mov	r2, r7
 8015338:	1d39      	adds	r1, r7, #4
 801533a:	f107 0308 	add.w	r3, r7, #8
 801533e:	4618      	mov	r0, r3
 8015340:	f7fe fe86 	bl	8014050 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8015344:	6839      	ldr	r1, [r7, #0]
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	68ba      	ldr	r2, [r7, #8]
 801534a:	9202      	str	r2, [sp, #8]
 801534c:	9301      	str	r3, [sp, #4]
 801534e:	2300      	movs	r3, #0
 8015350:	9300      	str	r3, [sp, #0]
 8015352:	2300      	movs	r3, #0
 8015354:	460a      	mov	r2, r1
 8015356:	4924      	ldr	r1, [pc, #144]	@ (80153e8 <vTaskStartScheduler+0xc0>)
 8015358:	4824      	ldr	r0, [pc, #144]	@ (80153ec <vTaskStartScheduler+0xc4>)
 801535a:	f7ff fdf1 	bl	8014f40 <xTaskCreateStatic>
 801535e:	4603      	mov	r3, r0
 8015360:	4a23      	ldr	r2, [pc, #140]	@ (80153f0 <vTaskStartScheduler+0xc8>)
 8015362:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8015364:	4b22      	ldr	r3, [pc, #136]	@ (80153f0 <vTaskStartScheduler+0xc8>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	2b00      	cmp	r3, #0
 801536a:	d002      	beq.n	8015372 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 801536c:	2301      	movs	r3, #1
 801536e:	617b      	str	r3, [r7, #20]
 8015370:	e001      	b.n	8015376 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8015372:	2300      	movs	r3, #0
 8015374:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8015376:	697b      	ldr	r3, [r7, #20]
 8015378:	2b01      	cmp	r3, #1
 801537a:	d102      	bne.n	8015382 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 801537c:	f000 ff0c 	bl	8016198 <xTimerCreateTimerTask>
 8015380:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8015382:	697b      	ldr	r3, [r7, #20]
 8015384:	2b01      	cmp	r3, #1
 8015386:	d11b      	bne.n	80153c0 <vTaskStartScheduler+0x98>
	__asm volatile
 8015388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801538c:	f383 8811 	msr	BASEPRI, r3
 8015390:	f3bf 8f6f 	isb	sy
 8015394:	f3bf 8f4f 	dsb	sy
 8015398:	613b      	str	r3, [r7, #16]
}
 801539a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 801539c:	4b15      	ldr	r3, [pc, #84]	@ (80153f4 <vTaskStartScheduler+0xcc>)
 801539e:	681b      	ldr	r3, [r3, #0]
 80153a0:	3354      	adds	r3, #84	@ 0x54
 80153a2:	4a15      	ldr	r2, [pc, #84]	@ (80153f8 <vTaskStartScheduler+0xd0>)
 80153a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80153a6:	4b15      	ldr	r3, [pc, #84]	@ (80153fc <vTaskStartScheduler+0xd4>)
 80153a8:	f04f 32ff 	mov.w	r2, #4294967295
 80153ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80153ae:	4b14      	ldr	r3, [pc, #80]	@ (8015400 <vTaskStartScheduler+0xd8>)
 80153b0:	2201      	movs	r2, #1
 80153b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80153b4:	4b13      	ldr	r3, [pc, #76]	@ (8015404 <vTaskStartScheduler+0xdc>)
 80153b6:	2200      	movs	r2, #0
 80153b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80153ba:	f001 fb31 	bl	8016a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80153be:	e00f      	b.n	80153e0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80153c0:	697b      	ldr	r3, [r7, #20]
 80153c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80153c6:	d10b      	bne.n	80153e0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80153c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80153cc:	f383 8811 	msr	BASEPRI, r3
 80153d0:	f3bf 8f6f 	isb	sy
 80153d4:	f3bf 8f4f 	dsb	sy
 80153d8:	60fb      	str	r3, [r7, #12]
}
 80153da:	bf00      	nop
 80153dc:	bf00      	nop
 80153de:	e7fd      	b.n	80153dc <vTaskStartScheduler+0xb4>
}
 80153e0:	bf00      	nop
 80153e2:	3718      	adds	r7, #24
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	08020614 	.word	0x08020614
 80153ec:	08015a39 	.word	0x08015a39
 80153f0:	2000624c 	.word	0x2000624c
 80153f4:	20005d54 	.word	0x20005d54
 80153f8:	20000160 	.word	0x20000160
 80153fc:	20006248 	.word	0x20006248
 8015400:	20006234 	.word	0x20006234
 8015404:	2000622c 	.word	0x2000622c

08015408 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8015408:	b480      	push	{r7}
 801540a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801540c:	4b04      	ldr	r3, [pc, #16]	@ (8015420 <vTaskSuspendAll+0x18>)
 801540e:	681b      	ldr	r3, [r3, #0]
 8015410:	3301      	adds	r3, #1
 8015412:	4a03      	ldr	r2, [pc, #12]	@ (8015420 <vTaskSuspendAll+0x18>)
 8015414:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8015416:	bf00      	nop
 8015418:	46bd      	mov	sp, r7
 801541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541e:	4770      	bx	lr
 8015420:	20006250 	.word	0x20006250

08015424 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b084      	sub	sp, #16
 8015428:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801542a:	2300      	movs	r3, #0
 801542c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801542e:	2300      	movs	r3, #0
 8015430:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8015432:	4b42      	ldr	r3, [pc, #264]	@ (801553c <xTaskResumeAll+0x118>)
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d10b      	bne.n	8015452 <xTaskResumeAll+0x2e>
	__asm volatile
 801543a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801543e:	f383 8811 	msr	BASEPRI, r3
 8015442:	f3bf 8f6f 	isb	sy
 8015446:	f3bf 8f4f 	dsb	sy
 801544a:	603b      	str	r3, [r7, #0]
}
 801544c:	bf00      	nop
 801544e:	bf00      	nop
 8015450:	e7fd      	b.n	801544e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8015452:	f001 fb89 	bl	8016b68 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8015456:	4b39      	ldr	r3, [pc, #228]	@ (801553c <xTaskResumeAll+0x118>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	3b01      	subs	r3, #1
 801545c:	4a37      	ldr	r2, [pc, #220]	@ (801553c <xTaskResumeAll+0x118>)
 801545e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015460:	4b36      	ldr	r3, [pc, #216]	@ (801553c <xTaskResumeAll+0x118>)
 8015462:	681b      	ldr	r3, [r3, #0]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d162      	bne.n	801552e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8015468:	4b35      	ldr	r3, [pc, #212]	@ (8015540 <xTaskResumeAll+0x11c>)
 801546a:	681b      	ldr	r3, [r3, #0]
 801546c:	2b00      	cmp	r3, #0
 801546e:	d05e      	beq.n	801552e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8015470:	e02f      	b.n	80154d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015472:	4b34      	ldr	r3, [pc, #208]	@ (8015544 <xTaskResumeAll+0x120>)
 8015474:	68db      	ldr	r3, [r3, #12]
 8015476:	68db      	ldr	r3, [r3, #12]
 8015478:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801547a:	68fb      	ldr	r3, [r7, #12]
 801547c:	3318      	adds	r3, #24
 801547e:	4618      	mov	r0, r3
 8015480:	f7fe fea4 	bl	80141cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015484:	68fb      	ldr	r3, [r7, #12]
 8015486:	3304      	adds	r3, #4
 8015488:	4618      	mov	r0, r3
 801548a:	f7fe fe9f 	bl	80141cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801548e:	68fb      	ldr	r3, [r7, #12]
 8015490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015492:	4b2d      	ldr	r3, [pc, #180]	@ (8015548 <xTaskResumeAll+0x124>)
 8015494:	681b      	ldr	r3, [r3, #0]
 8015496:	429a      	cmp	r2, r3
 8015498:	d903      	bls.n	80154a2 <xTaskResumeAll+0x7e>
 801549a:	68fb      	ldr	r3, [r7, #12]
 801549c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801549e:	4a2a      	ldr	r2, [pc, #168]	@ (8015548 <xTaskResumeAll+0x124>)
 80154a0:	6013      	str	r3, [r2, #0]
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154a6:	4613      	mov	r3, r2
 80154a8:	009b      	lsls	r3, r3, #2
 80154aa:	4413      	add	r3, r2
 80154ac:	009b      	lsls	r3, r3, #2
 80154ae:	4a27      	ldr	r2, [pc, #156]	@ (801554c <xTaskResumeAll+0x128>)
 80154b0:	441a      	add	r2, r3
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	3304      	adds	r3, #4
 80154b6:	4619      	mov	r1, r3
 80154b8:	4610      	mov	r0, r2
 80154ba:	f7fe fe2a 	bl	8014112 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80154c2:	4b23      	ldr	r3, [pc, #140]	@ (8015550 <xTaskResumeAll+0x12c>)
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80154c8:	429a      	cmp	r2, r3
 80154ca:	d302      	bcc.n	80154d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80154cc:	4b21      	ldr	r3, [pc, #132]	@ (8015554 <xTaskResumeAll+0x130>)
 80154ce:	2201      	movs	r2, #1
 80154d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80154d2:	4b1c      	ldr	r3, [pc, #112]	@ (8015544 <xTaskResumeAll+0x120>)
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	2b00      	cmp	r3, #0
 80154d8:	d1cb      	bne.n	8015472 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d001      	beq.n	80154e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80154e0:	f000 fb66 	bl	8015bb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80154e4:	4b1c      	ldr	r3, [pc, #112]	@ (8015558 <xTaskResumeAll+0x134>)
 80154e6:	681b      	ldr	r3, [r3, #0]
 80154e8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80154ea:	687b      	ldr	r3, [r7, #4]
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d010      	beq.n	8015512 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80154f0:	f000 f846 	bl	8015580 <xTaskIncrementTick>
 80154f4:	4603      	mov	r3, r0
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d002      	beq.n	8015500 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80154fa:	4b16      	ldr	r3, [pc, #88]	@ (8015554 <xTaskResumeAll+0x130>)
 80154fc:	2201      	movs	r2, #1
 80154fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	3b01      	subs	r3, #1
 8015504:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d1f1      	bne.n	80154f0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 801550c:	4b12      	ldr	r3, [pc, #72]	@ (8015558 <xTaskResumeAll+0x134>)
 801550e:	2200      	movs	r2, #0
 8015510:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8015512:	4b10      	ldr	r3, [pc, #64]	@ (8015554 <xTaskResumeAll+0x130>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	2b00      	cmp	r3, #0
 8015518:	d009      	beq.n	801552e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801551a:	2301      	movs	r3, #1
 801551c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801551e:	4b0f      	ldr	r3, [pc, #60]	@ (801555c <xTaskResumeAll+0x138>)
 8015520:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015524:	601a      	str	r2, [r3, #0]
 8015526:	f3bf 8f4f 	dsb	sy
 801552a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801552e:	f001 fb4d 	bl	8016bcc <vPortExitCritical>

	return xAlreadyYielded;
 8015532:	68bb      	ldr	r3, [r7, #8]
}
 8015534:	4618      	mov	r0, r3
 8015536:	3710      	adds	r7, #16
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}
 801553c:	20006250 	.word	0x20006250
 8015540:	20006228 	.word	0x20006228
 8015544:	200061e8 	.word	0x200061e8
 8015548:	20006230 	.word	0x20006230
 801554c:	20005d58 	.word	0x20005d58
 8015550:	20005d54 	.word	0x20005d54
 8015554:	2000623c 	.word	0x2000623c
 8015558:	20006238 	.word	0x20006238
 801555c:	e000ed04 	.word	0xe000ed04

08015560 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8015560:	b480      	push	{r7}
 8015562:	b083      	sub	sp, #12
 8015564:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8015566:	4b05      	ldr	r3, [pc, #20]	@ (801557c <xTaskGetTickCount+0x1c>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801556c:	687b      	ldr	r3, [r7, #4]
}
 801556e:	4618      	mov	r0, r3
 8015570:	370c      	adds	r7, #12
 8015572:	46bd      	mov	sp, r7
 8015574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015578:	4770      	bx	lr
 801557a:	bf00      	nop
 801557c:	2000622c 	.word	0x2000622c

08015580 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8015580:	b580      	push	{r7, lr}
 8015582:	b086      	sub	sp, #24
 8015584:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8015586:	2300      	movs	r3, #0
 8015588:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801558a:	4b4f      	ldr	r3, [pc, #316]	@ (80156c8 <xTaskIncrementTick+0x148>)
 801558c:	681b      	ldr	r3, [r3, #0]
 801558e:	2b00      	cmp	r3, #0
 8015590:	f040 8090 	bne.w	80156b4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8015594:	4b4d      	ldr	r3, [pc, #308]	@ (80156cc <xTaskIncrementTick+0x14c>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	3301      	adds	r3, #1
 801559a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801559c:	4a4b      	ldr	r2, [pc, #300]	@ (80156cc <xTaskIncrementTick+0x14c>)
 801559e:	693b      	ldr	r3, [r7, #16]
 80155a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80155a2:	693b      	ldr	r3, [r7, #16]
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d121      	bne.n	80155ec <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80155a8:	4b49      	ldr	r3, [pc, #292]	@ (80156d0 <xTaskIncrementTick+0x150>)
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d00b      	beq.n	80155ca <xTaskIncrementTick+0x4a>
	__asm volatile
 80155b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80155b6:	f383 8811 	msr	BASEPRI, r3
 80155ba:	f3bf 8f6f 	isb	sy
 80155be:	f3bf 8f4f 	dsb	sy
 80155c2:	603b      	str	r3, [r7, #0]
}
 80155c4:	bf00      	nop
 80155c6:	bf00      	nop
 80155c8:	e7fd      	b.n	80155c6 <xTaskIncrementTick+0x46>
 80155ca:	4b41      	ldr	r3, [pc, #260]	@ (80156d0 <xTaskIncrementTick+0x150>)
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	60fb      	str	r3, [r7, #12]
 80155d0:	4b40      	ldr	r3, [pc, #256]	@ (80156d4 <xTaskIncrementTick+0x154>)
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	4a3e      	ldr	r2, [pc, #248]	@ (80156d0 <xTaskIncrementTick+0x150>)
 80155d6:	6013      	str	r3, [r2, #0]
 80155d8:	4a3e      	ldr	r2, [pc, #248]	@ (80156d4 <xTaskIncrementTick+0x154>)
 80155da:	68fb      	ldr	r3, [r7, #12]
 80155dc:	6013      	str	r3, [r2, #0]
 80155de:	4b3e      	ldr	r3, [pc, #248]	@ (80156d8 <xTaskIncrementTick+0x158>)
 80155e0:	681b      	ldr	r3, [r3, #0]
 80155e2:	3301      	adds	r3, #1
 80155e4:	4a3c      	ldr	r2, [pc, #240]	@ (80156d8 <xTaskIncrementTick+0x158>)
 80155e6:	6013      	str	r3, [r2, #0]
 80155e8:	f000 fae2 	bl	8015bb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80155ec:	4b3b      	ldr	r3, [pc, #236]	@ (80156dc <xTaskIncrementTick+0x15c>)
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	693a      	ldr	r2, [r7, #16]
 80155f2:	429a      	cmp	r2, r3
 80155f4:	d349      	bcc.n	801568a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80155f6:	4b36      	ldr	r3, [pc, #216]	@ (80156d0 <xTaskIncrementTick+0x150>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	681b      	ldr	r3, [r3, #0]
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d104      	bne.n	801560a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015600:	4b36      	ldr	r3, [pc, #216]	@ (80156dc <xTaskIncrementTick+0x15c>)
 8015602:	f04f 32ff 	mov.w	r2, #4294967295
 8015606:	601a      	str	r2, [r3, #0]
					break;
 8015608:	e03f      	b.n	801568a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801560a:	4b31      	ldr	r3, [pc, #196]	@ (80156d0 <xTaskIncrementTick+0x150>)
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	68db      	ldr	r3, [r3, #12]
 8015610:	68db      	ldr	r3, [r3, #12]
 8015612:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8015614:	68bb      	ldr	r3, [r7, #8]
 8015616:	685b      	ldr	r3, [r3, #4]
 8015618:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801561a:	693a      	ldr	r2, [r7, #16]
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	429a      	cmp	r2, r3
 8015620:	d203      	bcs.n	801562a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8015622:	4a2e      	ldr	r2, [pc, #184]	@ (80156dc <xTaskIncrementTick+0x15c>)
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8015628:	e02f      	b.n	801568a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801562a:	68bb      	ldr	r3, [r7, #8]
 801562c:	3304      	adds	r3, #4
 801562e:	4618      	mov	r0, r3
 8015630:	f7fe fdcc 	bl	80141cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015634:	68bb      	ldr	r3, [r7, #8]
 8015636:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015638:	2b00      	cmp	r3, #0
 801563a:	d004      	beq.n	8015646 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801563c:	68bb      	ldr	r3, [r7, #8]
 801563e:	3318      	adds	r3, #24
 8015640:	4618      	mov	r0, r3
 8015642:	f7fe fdc3 	bl	80141cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8015646:	68bb      	ldr	r3, [r7, #8]
 8015648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801564a:	4b25      	ldr	r3, [pc, #148]	@ (80156e0 <xTaskIncrementTick+0x160>)
 801564c:	681b      	ldr	r3, [r3, #0]
 801564e:	429a      	cmp	r2, r3
 8015650:	d903      	bls.n	801565a <xTaskIncrementTick+0xda>
 8015652:	68bb      	ldr	r3, [r7, #8]
 8015654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015656:	4a22      	ldr	r2, [pc, #136]	@ (80156e0 <xTaskIncrementTick+0x160>)
 8015658:	6013      	str	r3, [r2, #0]
 801565a:	68bb      	ldr	r3, [r7, #8]
 801565c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801565e:	4613      	mov	r3, r2
 8015660:	009b      	lsls	r3, r3, #2
 8015662:	4413      	add	r3, r2
 8015664:	009b      	lsls	r3, r3, #2
 8015666:	4a1f      	ldr	r2, [pc, #124]	@ (80156e4 <xTaskIncrementTick+0x164>)
 8015668:	441a      	add	r2, r3
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	3304      	adds	r3, #4
 801566e:	4619      	mov	r1, r3
 8015670:	4610      	mov	r0, r2
 8015672:	f7fe fd4e 	bl	8014112 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801567a:	4b1b      	ldr	r3, [pc, #108]	@ (80156e8 <xTaskIncrementTick+0x168>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015680:	429a      	cmp	r2, r3
 8015682:	d3b8      	bcc.n	80155f6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8015684:	2301      	movs	r3, #1
 8015686:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015688:	e7b5      	b.n	80155f6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801568a:	4b17      	ldr	r3, [pc, #92]	@ (80156e8 <xTaskIncrementTick+0x168>)
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015690:	4914      	ldr	r1, [pc, #80]	@ (80156e4 <xTaskIncrementTick+0x164>)
 8015692:	4613      	mov	r3, r2
 8015694:	009b      	lsls	r3, r3, #2
 8015696:	4413      	add	r3, r2
 8015698:	009b      	lsls	r3, r3, #2
 801569a:	440b      	add	r3, r1
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	2b01      	cmp	r3, #1
 80156a0:	d901      	bls.n	80156a6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80156a2:	2301      	movs	r3, #1
 80156a4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80156a6:	4b11      	ldr	r3, [pc, #68]	@ (80156ec <xTaskIncrementTick+0x16c>)
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d007      	beq.n	80156be <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80156ae:	2301      	movs	r3, #1
 80156b0:	617b      	str	r3, [r7, #20]
 80156b2:	e004      	b.n	80156be <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80156b4:	4b0e      	ldr	r3, [pc, #56]	@ (80156f0 <xTaskIncrementTick+0x170>)
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	3301      	adds	r3, #1
 80156ba:	4a0d      	ldr	r2, [pc, #52]	@ (80156f0 <xTaskIncrementTick+0x170>)
 80156bc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80156be:	697b      	ldr	r3, [r7, #20]
}
 80156c0:	4618      	mov	r0, r3
 80156c2:	3718      	adds	r7, #24
 80156c4:	46bd      	mov	sp, r7
 80156c6:	bd80      	pop	{r7, pc}
 80156c8:	20006250 	.word	0x20006250
 80156cc:	2000622c 	.word	0x2000622c
 80156d0:	200061e0 	.word	0x200061e0
 80156d4:	200061e4 	.word	0x200061e4
 80156d8:	20006240 	.word	0x20006240
 80156dc:	20006248 	.word	0x20006248
 80156e0:	20006230 	.word	0x20006230
 80156e4:	20005d58 	.word	0x20005d58
 80156e8:	20005d54 	.word	0x20005d54
 80156ec:	2000623c 	.word	0x2000623c
 80156f0:	20006238 	.word	0x20006238

080156f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80156f4:	b480      	push	{r7}
 80156f6:	b085      	sub	sp, #20
 80156f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80156fa:	4b2b      	ldr	r3, [pc, #172]	@ (80157a8 <vTaskSwitchContext+0xb4>)
 80156fc:	681b      	ldr	r3, [r3, #0]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d003      	beq.n	801570a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015702:	4b2a      	ldr	r3, [pc, #168]	@ (80157ac <vTaskSwitchContext+0xb8>)
 8015704:	2201      	movs	r2, #1
 8015706:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8015708:	e047      	b.n	801579a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 801570a:	4b28      	ldr	r3, [pc, #160]	@ (80157ac <vTaskSwitchContext+0xb8>)
 801570c:	2200      	movs	r2, #0
 801570e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015710:	4b27      	ldr	r3, [pc, #156]	@ (80157b0 <vTaskSwitchContext+0xbc>)
 8015712:	681b      	ldr	r3, [r3, #0]
 8015714:	60fb      	str	r3, [r7, #12]
 8015716:	e011      	b.n	801573c <vTaskSwitchContext+0x48>
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d10b      	bne.n	8015736 <vTaskSwitchContext+0x42>
	__asm volatile
 801571e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015722:	f383 8811 	msr	BASEPRI, r3
 8015726:	f3bf 8f6f 	isb	sy
 801572a:	f3bf 8f4f 	dsb	sy
 801572e:	607b      	str	r3, [r7, #4]
}
 8015730:	bf00      	nop
 8015732:	bf00      	nop
 8015734:	e7fd      	b.n	8015732 <vTaskSwitchContext+0x3e>
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	3b01      	subs	r3, #1
 801573a:	60fb      	str	r3, [r7, #12]
 801573c:	491d      	ldr	r1, [pc, #116]	@ (80157b4 <vTaskSwitchContext+0xc0>)
 801573e:	68fa      	ldr	r2, [r7, #12]
 8015740:	4613      	mov	r3, r2
 8015742:	009b      	lsls	r3, r3, #2
 8015744:	4413      	add	r3, r2
 8015746:	009b      	lsls	r3, r3, #2
 8015748:	440b      	add	r3, r1
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d0e3      	beq.n	8015718 <vTaskSwitchContext+0x24>
 8015750:	68fa      	ldr	r2, [r7, #12]
 8015752:	4613      	mov	r3, r2
 8015754:	009b      	lsls	r3, r3, #2
 8015756:	4413      	add	r3, r2
 8015758:	009b      	lsls	r3, r3, #2
 801575a:	4a16      	ldr	r2, [pc, #88]	@ (80157b4 <vTaskSwitchContext+0xc0>)
 801575c:	4413      	add	r3, r2
 801575e:	60bb      	str	r3, [r7, #8]
 8015760:	68bb      	ldr	r3, [r7, #8]
 8015762:	685b      	ldr	r3, [r3, #4]
 8015764:	685a      	ldr	r2, [r3, #4]
 8015766:	68bb      	ldr	r3, [r7, #8]
 8015768:	605a      	str	r2, [r3, #4]
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	685a      	ldr	r2, [r3, #4]
 801576e:	68bb      	ldr	r3, [r7, #8]
 8015770:	3308      	adds	r3, #8
 8015772:	429a      	cmp	r2, r3
 8015774:	d104      	bne.n	8015780 <vTaskSwitchContext+0x8c>
 8015776:	68bb      	ldr	r3, [r7, #8]
 8015778:	685b      	ldr	r3, [r3, #4]
 801577a:	685a      	ldr	r2, [r3, #4]
 801577c:	68bb      	ldr	r3, [r7, #8]
 801577e:	605a      	str	r2, [r3, #4]
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	685b      	ldr	r3, [r3, #4]
 8015784:	68db      	ldr	r3, [r3, #12]
 8015786:	4a0c      	ldr	r2, [pc, #48]	@ (80157b8 <vTaskSwitchContext+0xc4>)
 8015788:	6013      	str	r3, [r2, #0]
 801578a:	4a09      	ldr	r2, [pc, #36]	@ (80157b0 <vTaskSwitchContext+0xbc>)
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015790:	4b09      	ldr	r3, [pc, #36]	@ (80157b8 <vTaskSwitchContext+0xc4>)
 8015792:	681b      	ldr	r3, [r3, #0]
 8015794:	3354      	adds	r3, #84	@ 0x54
 8015796:	4a09      	ldr	r2, [pc, #36]	@ (80157bc <vTaskSwitchContext+0xc8>)
 8015798:	6013      	str	r3, [r2, #0]
}
 801579a:	bf00      	nop
 801579c:	3714      	adds	r7, #20
 801579e:	46bd      	mov	sp, r7
 80157a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157a4:	4770      	bx	lr
 80157a6:	bf00      	nop
 80157a8:	20006250 	.word	0x20006250
 80157ac:	2000623c 	.word	0x2000623c
 80157b0:	20006230 	.word	0x20006230
 80157b4:	20005d58 	.word	0x20005d58
 80157b8:	20005d54 	.word	0x20005d54
 80157bc:	20000160 	.word	0x20000160

080157c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80157c0:	b580      	push	{r7, lr}
 80157c2:	b084      	sub	sp, #16
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
 80157c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d10b      	bne.n	80157e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80157d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80157d4:	f383 8811 	msr	BASEPRI, r3
 80157d8:	f3bf 8f6f 	isb	sy
 80157dc:	f3bf 8f4f 	dsb	sy
 80157e0:	60fb      	str	r3, [r7, #12]
}
 80157e2:	bf00      	nop
 80157e4:	bf00      	nop
 80157e6:	e7fd      	b.n	80157e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80157e8:	4b07      	ldr	r3, [pc, #28]	@ (8015808 <vTaskPlaceOnEventList+0x48>)
 80157ea:	681b      	ldr	r3, [r3, #0]
 80157ec:	3318      	adds	r3, #24
 80157ee:	4619      	mov	r1, r3
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f7fe fcb2 	bl	801415a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80157f6:	2101      	movs	r1, #1
 80157f8:	6838      	ldr	r0, [r7, #0]
 80157fa:	f000 fc79 	bl	80160f0 <prvAddCurrentTaskToDelayedList>
}
 80157fe:	bf00      	nop
 8015800:	3710      	adds	r7, #16
 8015802:	46bd      	mov	sp, r7
 8015804:	bd80      	pop	{r7, pc}
 8015806:	bf00      	nop
 8015808:	20005d54 	.word	0x20005d54

0801580c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801580c:	b580      	push	{r7, lr}
 801580e:	b086      	sub	sp, #24
 8015810:	af00      	add	r7, sp, #0
 8015812:	60f8      	str	r0, [r7, #12]
 8015814:	60b9      	str	r1, [r7, #8]
 8015816:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d10b      	bne.n	8015836 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 801581e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015822:	f383 8811 	msr	BASEPRI, r3
 8015826:	f3bf 8f6f 	isb	sy
 801582a:	f3bf 8f4f 	dsb	sy
 801582e:	617b      	str	r3, [r7, #20]
}
 8015830:	bf00      	nop
 8015832:	bf00      	nop
 8015834:	e7fd      	b.n	8015832 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015836:	4b0a      	ldr	r3, [pc, #40]	@ (8015860 <vTaskPlaceOnEventListRestricted+0x54>)
 8015838:	681b      	ldr	r3, [r3, #0]
 801583a:	3318      	adds	r3, #24
 801583c:	4619      	mov	r1, r3
 801583e:	68f8      	ldr	r0, [r7, #12]
 8015840:	f7fe fc67 	bl	8014112 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8015844:	687b      	ldr	r3, [r7, #4]
 8015846:	2b00      	cmp	r3, #0
 8015848:	d002      	beq.n	8015850 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 801584a:	f04f 33ff 	mov.w	r3, #4294967295
 801584e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8015850:	6879      	ldr	r1, [r7, #4]
 8015852:	68b8      	ldr	r0, [r7, #8]
 8015854:	f000 fc4c 	bl	80160f0 <prvAddCurrentTaskToDelayedList>
	}
 8015858:	bf00      	nop
 801585a:	3718      	adds	r7, #24
 801585c:	46bd      	mov	sp, r7
 801585e:	bd80      	pop	{r7, pc}
 8015860:	20005d54 	.word	0x20005d54

08015864 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8015864:	b580      	push	{r7, lr}
 8015866:	b086      	sub	sp, #24
 8015868:	af00      	add	r7, sp, #0
 801586a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	68db      	ldr	r3, [r3, #12]
 8015870:	68db      	ldr	r3, [r3, #12]
 8015872:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d10b      	bne.n	8015892 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 801587a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801587e:	f383 8811 	msr	BASEPRI, r3
 8015882:	f3bf 8f6f 	isb	sy
 8015886:	f3bf 8f4f 	dsb	sy
 801588a:	60fb      	str	r3, [r7, #12]
}
 801588c:	bf00      	nop
 801588e:	bf00      	nop
 8015890:	e7fd      	b.n	801588e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015892:	693b      	ldr	r3, [r7, #16]
 8015894:	3318      	adds	r3, #24
 8015896:	4618      	mov	r0, r3
 8015898:	f7fe fc98 	bl	80141cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801589c:	4b1d      	ldr	r3, [pc, #116]	@ (8015914 <xTaskRemoveFromEventList+0xb0>)
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d11d      	bne.n	80158e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80158a4:	693b      	ldr	r3, [r7, #16]
 80158a6:	3304      	adds	r3, #4
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7fe fc8f 	bl	80141cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80158ae:	693b      	ldr	r3, [r7, #16]
 80158b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158b2:	4b19      	ldr	r3, [pc, #100]	@ (8015918 <xTaskRemoveFromEventList+0xb4>)
 80158b4:	681b      	ldr	r3, [r3, #0]
 80158b6:	429a      	cmp	r2, r3
 80158b8:	d903      	bls.n	80158c2 <xTaskRemoveFromEventList+0x5e>
 80158ba:	693b      	ldr	r3, [r7, #16]
 80158bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158be:	4a16      	ldr	r2, [pc, #88]	@ (8015918 <xTaskRemoveFromEventList+0xb4>)
 80158c0:	6013      	str	r3, [r2, #0]
 80158c2:	693b      	ldr	r3, [r7, #16]
 80158c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158c6:	4613      	mov	r3, r2
 80158c8:	009b      	lsls	r3, r3, #2
 80158ca:	4413      	add	r3, r2
 80158cc:	009b      	lsls	r3, r3, #2
 80158ce:	4a13      	ldr	r2, [pc, #76]	@ (801591c <xTaskRemoveFromEventList+0xb8>)
 80158d0:	441a      	add	r2, r3
 80158d2:	693b      	ldr	r3, [r7, #16]
 80158d4:	3304      	adds	r3, #4
 80158d6:	4619      	mov	r1, r3
 80158d8:	4610      	mov	r0, r2
 80158da:	f7fe fc1a 	bl	8014112 <vListInsertEnd>
 80158de:	e005      	b.n	80158ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80158e0:	693b      	ldr	r3, [r7, #16]
 80158e2:	3318      	adds	r3, #24
 80158e4:	4619      	mov	r1, r3
 80158e6:	480e      	ldr	r0, [pc, #56]	@ (8015920 <xTaskRemoveFromEventList+0xbc>)
 80158e8:	f7fe fc13 	bl	8014112 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80158ec:	693b      	ldr	r3, [r7, #16]
 80158ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80158f0:	4b0c      	ldr	r3, [pc, #48]	@ (8015924 <xTaskRemoveFromEventList+0xc0>)
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80158f6:	429a      	cmp	r2, r3
 80158f8:	d905      	bls.n	8015906 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80158fa:	2301      	movs	r3, #1
 80158fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80158fe:	4b0a      	ldr	r3, [pc, #40]	@ (8015928 <xTaskRemoveFromEventList+0xc4>)
 8015900:	2201      	movs	r2, #1
 8015902:	601a      	str	r2, [r3, #0]
 8015904:	e001      	b.n	801590a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8015906:	2300      	movs	r3, #0
 8015908:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801590a:	697b      	ldr	r3, [r7, #20]
}
 801590c:	4618      	mov	r0, r3
 801590e:	3718      	adds	r7, #24
 8015910:	46bd      	mov	sp, r7
 8015912:	bd80      	pop	{r7, pc}
 8015914:	20006250 	.word	0x20006250
 8015918:	20006230 	.word	0x20006230
 801591c:	20005d58 	.word	0x20005d58
 8015920:	200061e8 	.word	0x200061e8
 8015924:	20005d54 	.word	0x20005d54
 8015928:	2000623c 	.word	0x2000623c

0801592c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801592c:	b480      	push	{r7}
 801592e:	b083      	sub	sp, #12
 8015930:	af00      	add	r7, sp, #0
 8015932:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8015934:	4b06      	ldr	r3, [pc, #24]	@ (8015950 <vTaskInternalSetTimeOutState+0x24>)
 8015936:	681a      	ldr	r2, [r3, #0]
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801593c:	4b05      	ldr	r3, [pc, #20]	@ (8015954 <vTaskInternalSetTimeOutState+0x28>)
 801593e:	681a      	ldr	r2, [r3, #0]
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	605a      	str	r2, [r3, #4]
}
 8015944:	bf00      	nop
 8015946:	370c      	adds	r7, #12
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr
 8015950:	20006240 	.word	0x20006240
 8015954:	2000622c 	.word	0x2000622c

08015958 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8015958:	b580      	push	{r7, lr}
 801595a:	b088      	sub	sp, #32
 801595c:	af00      	add	r7, sp, #0
 801595e:	6078      	str	r0, [r7, #4]
 8015960:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	2b00      	cmp	r3, #0
 8015966:	d10b      	bne.n	8015980 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8015968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801596c:	f383 8811 	msr	BASEPRI, r3
 8015970:	f3bf 8f6f 	isb	sy
 8015974:	f3bf 8f4f 	dsb	sy
 8015978:	613b      	str	r3, [r7, #16]
}
 801597a:	bf00      	nop
 801597c:	bf00      	nop
 801597e:	e7fd      	b.n	801597c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015980:	683b      	ldr	r3, [r7, #0]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d10b      	bne.n	801599e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8015986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801598a:	f383 8811 	msr	BASEPRI, r3
 801598e:	f3bf 8f6f 	isb	sy
 8015992:	f3bf 8f4f 	dsb	sy
 8015996:	60fb      	str	r3, [r7, #12]
}
 8015998:	bf00      	nop
 801599a:	bf00      	nop
 801599c:	e7fd      	b.n	801599a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 801599e:	f001 f8e3 	bl	8016b68 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80159a2:	4b1d      	ldr	r3, [pc, #116]	@ (8015a18 <xTaskCheckForTimeOut+0xc0>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	685b      	ldr	r3, [r3, #4]
 80159ac:	69ba      	ldr	r2, [r7, #24]
 80159ae:	1ad3      	subs	r3, r2, r3
 80159b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159ba:	d102      	bne.n	80159c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80159bc:	2300      	movs	r3, #0
 80159be:	61fb      	str	r3, [r7, #28]
 80159c0:	e023      	b.n	8015a0a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	681a      	ldr	r2, [r3, #0]
 80159c6:	4b15      	ldr	r3, [pc, #84]	@ (8015a1c <xTaskCheckForTimeOut+0xc4>)
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	429a      	cmp	r2, r3
 80159cc:	d007      	beq.n	80159de <xTaskCheckForTimeOut+0x86>
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	685b      	ldr	r3, [r3, #4]
 80159d2:	69ba      	ldr	r2, [r7, #24]
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d302      	bcc.n	80159de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80159d8:	2301      	movs	r3, #1
 80159da:	61fb      	str	r3, [r7, #28]
 80159dc:	e015      	b.n	8015a0a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80159de:	683b      	ldr	r3, [r7, #0]
 80159e0:	681b      	ldr	r3, [r3, #0]
 80159e2:	697a      	ldr	r2, [r7, #20]
 80159e4:	429a      	cmp	r2, r3
 80159e6:	d20b      	bcs.n	8015a00 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	681a      	ldr	r2, [r3, #0]
 80159ec:	697b      	ldr	r3, [r7, #20]
 80159ee:	1ad2      	subs	r2, r2, r3
 80159f0:	683b      	ldr	r3, [r7, #0]
 80159f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80159f4:	6878      	ldr	r0, [r7, #4]
 80159f6:	f7ff ff99 	bl	801592c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80159fa:	2300      	movs	r3, #0
 80159fc:	61fb      	str	r3, [r7, #28]
 80159fe:	e004      	b.n	8015a0a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8015a00:	683b      	ldr	r3, [r7, #0]
 8015a02:	2200      	movs	r2, #0
 8015a04:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8015a06:	2301      	movs	r3, #1
 8015a08:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8015a0a:	f001 f8df 	bl	8016bcc <vPortExitCritical>

	return xReturn;
 8015a0e:	69fb      	ldr	r3, [r7, #28]
}
 8015a10:	4618      	mov	r0, r3
 8015a12:	3720      	adds	r7, #32
 8015a14:	46bd      	mov	sp, r7
 8015a16:	bd80      	pop	{r7, pc}
 8015a18:	2000622c 	.word	0x2000622c
 8015a1c:	20006240 	.word	0x20006240

08015a20 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8015a20:	b480      	push	{r7}
 8015a22:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8015a24:	4b03      	ldr	r3, [pc, #12]	@ (8015a34 <vTaskMissedYield+0x14>)
 8015a26:	2201      	movs	r2, #1
 8015a28:	601a      	str	r2, [r3, #0]
}
 8015a2a:	bf00      	nop
 8015a2c:	46bd      	mov	sp, r7
 8015a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a32:	4770      	bx	lr
 8015a34:	2000623c 	.word	0x2000623c

08015a38 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8015a38:	b580      	push	{r7, lr}
 8015a3a:	b082      	sub	sp, #8
 8015a3c:	af00      	add	r7, sp, #0
 8015a3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8015a40:	f000 f852 	bl	8015ae8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8015a44:	4b06      	ldr	r3, [pc, #24]	@ (8015a60 <prvIdleTask+0x28>)
 8015a46:	681b      	ldr	r3, [r3, #0]
 8015a48:	2b01      	cmp	r3, #1
 8015a4a:	d9f9      	bls.n	8015a40 <prvIdleTask+0x8>
			{
				taskYIELD();
 8015a4c:	4b05      	ldr	r3, [pc, #20]	@ (8015a64 <prvIdleTask+0x2c>)
 8015a4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015a52:	601a      	str	r2, [r3, #0]
 8015a54:	f3bf 8f4f 	dsb	sy
 8015a58:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8015a5c:	e7f0      	b.n	8015a40 <prvIdleTask+0x8>
 8015a5e:	bf00      	nop
 8015a60:	20005d58 	.word	0x20005d58
 8015a64:	e000ed04 	.word	0xe000ed04

08015a68 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8015a68:	b580      	push	{r7, lr}
 8015a6a:	b082      	sub	sp, #8
 8015a6c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015a6e:	2300      	movs	r3, #0
 8015a70:	607b      	str	r3, [r7, #4]
 8015a72:	e00c      	b.n	8015a8e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8015a74:	687a      	ldr	r2, [r7, #4]
 8015a76:	4613      	mov	r3, r2
 8015a78:	009b      	lsls	r3, r3, #2
 8015a7a:	4413      	add	r3, r2
 8015a7c:	009b      	lsls	r3, r3, #2
 8015a7e:	4a12      	ldr	r2, [pc, #72]	@ (8015ac8 <prvInitialiseTaskLists+0x60>)
 8015a80:	4413      	add	r3, r2
 8015a82:	4618      	mov	r0, r3
 8015a84:	f7fe fb18 	bl	80140b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	3301      	adds	r3, #1
 8015a8c:	607b      	str	r3, [r7, #4]
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	2b37      	cmp	r3, #55	@ 0x37
 8015a92:	d9ef      	bls.n	8015a74 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015a94:	480d      	ldr	r0, [pc, #52]	@ (8015acc <prvInitialiseTaskLists+0x64>)
 8015a96:	f7fe fb0f 	bl	80140b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8015a9a:	480d      	ldr	r0, [pc, #52]	@ (8015ad0 <prvInitialiseTaskLists+0x68>)
 8015a9c:	f7fe fb0c 	bl	80140b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015aa0:	480c      	ldr	r0, [pc, #48]	@ (8015ad4 <prvInitialiseTaskLists+0x6c>)
 8015aa2:	f7fe fb09 	bl	80140b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8015aa6:	480c      	ldr	r0, [pc, #48]	@ (8015ad8 <prvInitialiseTaskLists+0x70>)
 8015aa8:	f7fe fb06 	bl	80140b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015aac:	480b      	ldr	r0, [pc, #44]	@ (8015adc <prvInitialiseTaskLists+0x74>)
 8015aae:	f7fe fb03 	bl	80140b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8015ae0 <prvInitialiseTaskLists+0x78>)
 8015ab4:	4a05      	ldr	r2, [pc, #20]	@ (8015acc <prvInitialiseTaskLists+0x64>)
 8015ab6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8015ae4 <prvInitialiseTaskLists+0x7c>)
 8015aba:	4a05      	ldr	r2, [pc, #20]	@ (8015ad0 <prvInitialiseTaskLists+0x68>)
 8015abc:	601a      	str	r2, [r3, #0]
}
 8015abe:	bf00      	nop
 8015ac0:	3708      	adds	r7, #8
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	bd80      	pop	{r7, pc}
 8015ac6:	bf00      	nop
 8015ac8:	20005d58 	.word	0x20005d58
 8015acc:	200061b8 	.word	0x200061b8
 8015ad0:	200061cc 	.word	0x200061cc
 8015ad4:	200061e8 	.word	0x200061e8
 8015ad8:	200061fc 	.word	0x200061fc
 8015adc:	20006214 	.word	0x20006214
 8015ae0:	200061e0 	.word	0x200061e0
 8015ae4:	200061e4 	.word	0x200061e4

08015ae8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b082      	sub	sp, #8
 8015aec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015aee:	e019      	b.n	8015b24 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015af0:	f001 f83a 	bl	8016b68 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015af4:	4b10      	ldr	r3, [pc, #64]	@ (8015b38 <prvCheckTasksWaitingTermination+0x50>)
 8015af6:	68db      	ldr	r3, [r3, #12]
 8015af8:	68db      	ldr	r3, [r3, #12]
 8015afa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	3304      	adds	r3, #4
 8015b00:	4618      	mov	r0, r3
 8015b02:	f7fe fb63 	bl	80141cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8015b06:	4b0d      	ldr	r3, [pc, #52]	@ (8015b3c <prvCheckTasksWaitingTermination+0x54>)
 8015b08:	681b      	ldr	r3, [r3, #0]
 8015b0a:	3b01      	subs	r3, #1
 8015b0c:	4a0b      	ldr	r2, [pc, #44]	@ (8015b3c <prvCheckTasksWaitingTermination+0x54>)
 8015b0e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015b10:	4b0b      	ldr	r3, [pc, #44]	@ (8015b40 <prvCheckTasksWaitingTermination+0x58>)
 8015b12:	681b      	ldr	r3, [r3, #0]
 8015b14:	3b01      	subs	r3, #1
 8015b16:	4a0a      	ldr	r2, [pc, #40]	@ (8015b40 <prvCheckTasksWaitingTermination+0x58>)
 8015b18:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015b1a:	f001 f857 	bl	8016bcc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015b1e:	6878      	ldr	r0, [r7, #4]
 8015b20:	f000 f810 	bl	8015b44 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015b24:	4b06      	ldr	r3, [pc, #24]	@ (8015b40 <prvCheckTasksWaitingTermination+0x58>)
 8015b26:	681b      	ldr	r3, [r3, #0]
 8015b28:	2b00      	cmp	r3, #0
 8015b2a:	d1e1      	bne.n	8015af0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015b2c:	bf00      	nop
 8015b2e:	bf00      	nop
 8015b30:	3708      	adds	r7, #8
 8015b32:	46bd      	mov	sp, r7
 8015b34:	bd80      	pop	{r7, pc}
 8015b36:	bf00      	nop
 8015b38:	200061fc 	.word	0x200061fc
 8015b3c:	20006228 	.word	0x20006228
 8015b40:	20006210 	.word	0x20006210

08015b44 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015b44:	b580      	push	{r7, lr}
 8015b46:	b084      	sub	sp, #16
 8015b48:	af00      	add	r7, sp, #0
 8015b4a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	3354      	adds	r3, #84	@ 0x54
 8015b50:	4618      	mov	r0, r3
 8015b52:	f004 ff0d 	bl	801a970 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d108      	bne.n	8015b72 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8015b60:	687b      	ldr	r3, [r7, #4]
 8015b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015b64:	4618      	mov	r0, r3
 8015b66:	f001 f9ef 	bl	8016f48 <vPortFree>
				vPortFree( pxTCB );
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f001 f9ec 	bl	8016f48 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8015b70:	e019      	b.n	8015ba6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8015b78:	2b01      	cmp	r3, #1
 8015b7a:	d103      	bne.n	8015b84 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8015b7c:	6878      	ldr	r0, [r7, #4]
 8015b7e:	f001 f9e3 	bl	8016f48 <vPortFree>
	}
 8015b82:	e010      	b.n	8015ba6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8015b8a:	2b02      	cmp	r3, #2
 8015b8c:	d00b      	beq.n	8015ba6 <prvDeleteTCB+0x62>
	__asm volatile
 8015b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015b92:	f383 8811 	msr	BASEPRI, r3
 8015b96:	f3bf 8f6f 	isb	sy
 8015b9a:	f3bf 8f4f 	dsb	sy
 8015b9e:	60fb      	str	r3, [r7, #12]
}
 8015ba0:	bf00      	nop
 8015ba2:	bf00      	nop
 8015ba4:	e7fd      	b.n	8015ba2 <prvDeleteTCB+0x5e>
	}
 8015ba6:	bf00      	nop
 8015ba8:	3710      	adds	r7, #16
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd80      	pop	{r7, pc}
	...

08015bb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8015bb0:	b480      	push	{r7}
 8015bb2:	b083      	sub	sp, #12
 8015bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015bb6:	4b0c      	ldr	r3, [pc, #48]	@ (8015be8 <prvResetNextTaskUnblockTime+0x38>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	681b      	ldr	r3, [r3, #0]
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d104      	bne.n	8015bca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8015bec <prvResetNextTaskUnblockTime+0x3c>)
 8015bc2:	f04f 32ff 	mov.w	r2, #4294967295
 8015bc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015bc8:	e008      	b.n	8015bdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015bca:	4b07      	ldr	r3, [pc, #28]	@ (8015be8 <prvResetNextTaskUnblockTime+0x38>)
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	68db      	ldr	r3, [r3, #12]
 8015bd0:	68db      	ldr	r3, [r3, #12]
 8015bd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	685b      	ldr	r3, [r3, #4]
 8015bd8:	4a04      	ldr	r2, [pc, #16]	@ (8015bec <prvResetNextTaskUnblockTime+0x3c>)
 8015bda:	6013      	str	r3, [r2, #0]
}
 8015bdc:	bf00      	nop
 8015bde:	370c      	adds	r7, #12
 8015be0:	46bd      	mov	sp, r7
 8015be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be6:	4770      	bx	lr
 8015be8:	200061e0 	.word	0x200061e0
 8015bec:	20006248 	.word	0x20006248

08015bf0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b083      	sub	sp, #12
 8015bf4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8015bf6:	4b05      	ldr	r3, [pc, #20]	@ (8015c0c <xTaskGetCurrentTaskHandle+0x1c>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	607b      	str	r3, [r7, #4]

		return xReturn;
 8015bfc:	687b      	ldr	r3, [r7, #4]
	}
 8015bfe:	4618      	mov	r0, r3
 8015c00:	370c      	adds	r7, #12
 8015c02:	46bd      	mov	sp, r7
 8015c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c08:	4770      	bx	lr
 8015c0a:	bf00      	nop
 8015c0c:	20005d54 	.word	0x20005d54

08015c10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015c10:	b480      	push	{r7}
 8015c12:	b083      	sub	sp, #12
 8015c14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015c16:	4b0b      	ldr	r3, [pc, #44]	@ (8015c44 <xTaskGetSchedulerState+0x34>)
 8015c18:	681b      	ldr	r3, [r3, #0]
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d102      	bne.n	8015c24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015c1e:	2301      	movs	r3, #1
 8015c20:	607b      	str	r3, [r7, #4]
 8015c22:	e008      	b.n	8015c36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015c24:	4b08      	ldr	r3, [pc, #32]	@ (8015c48 <xTaskGetSchedulerState+0x38>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	2b00      	cmp	r3, #0
 8015c2a:	d102      	bne.n	8015c32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015c2c:	2302      	movs	r3, #2
 8015c2e:	607b      	str	r3, [r7, #4]
 8015c30:	e001      	b.n	8015c36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015c32:	2300      	movs	r3, #0
 8015c34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015c36:	687b      	ldr	r3, [r7, #4]
	}
 8015c38:	4618      	mov	r0, r3
 8015c3a:	370c      	adds	r7, #12
 8015c3c:	46bd      	mov	sp, r7
 8015c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c42:	4770      	bx	lr
 8015c44:	20006234 	.word	0x20006234
 8015c48:	20006250 	.word	0x20006250

08015c4c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015c4c:	b580      	push	{r7, lr}
 8015c4e:	b084      	sub	sp, #16
 8015c50:	af00      	add	r7, sp, #0
 8015c52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015c58:	2300      	movs	r3, #0
 8015c5a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d051      	beq.n	8015d06 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8015c62:	68bb      	ldr	r3, [r7, #8]
 8015c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c66:	4b2a      	ldr	r3, [pc, #168]	@ (8015d10 <xTaskPriorityInherit+0xc4>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c6c:	429a      	cmp	r2, r3
 8015c6e:	d241      	bcs.n	8015cf4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015c70:	68bb      	ldr	r3, [r7, #8]
 8015c72:	699b      	ldr	r3, [r3, #24]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	db06      	blt.n	8015c86 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015c78:	4b25      	ldr	r3, [pc, #148]	@ (8015d10 <xTaskPriorityInherit+0xc4>)
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c7e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015c82:	68bb      	ldr	r3, [r7, #8]
 8015c84:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8015c86:	68bb      	ldr	r3, [r7, #8]
 8015c88:	6959      	ldr	r1, [r3, #20]
 8015c8a:	68bb      	ldr	r3, [r7, #8]
 8015c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015c8e:	4613      	mov	r3, r2
 8015c90:	009b      	lsls	r3, r3, #2
 8015c92:	4413      	add	r3, r2
 8015c94:	009b      	lsls	r3, r3, #2
 8015c96:	4a1f      	ldr	r2, [pc, #124]	@ (8015d14 <xTaskPriorityInherit+0xc8>)
 8015c98:	4413      	add	r3, r2
 8015c9a:	4299      	cmp	r1, r3
 8015c9c:	d122      	bne.n	8015ce4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	3304      	adds	r3, #4
 8015ca2:	4618      	mov	r0, r3
 8015ca4:	f7fe fa92 	bl	80141cc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015ca8:	4b19      	ldr	r3, [pc, #100]	@ (8015d10 <xTaskPriorityInherit+0xc4>)
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cae:	68bb      	ldr	r3, [r7, #8]
 8015cb0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8015cb2:	68bb      	ldr	r3, [r7, #8]
 8015cb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cb6:	4b18      	ldr	r3, [pc, #96]	@ (8015d18 <xTaskPriorityInherit+0xcc>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	429a      	cmp	r2, r3
 8015cbc:	d903      	bls.n	8015cc6 <xTaskPriorityInherit+0x7a>
 8015cbe:	68bb      	ldr	r3, [r7, #8]
 8015cc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cc2:	4a15      	ldr	r2, [pc, #84]	@ (8015d18 <xTaskPriorityInherit+0xcc>)
 8015cc4:	6013      	str	r3, [r2, #0]
 8015cc6:	68bb      	ldr	r3, [r7, #8]
 8015cc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cca:	4613      	mov	r3, r2
 8015ccc:	009b      	lsls	r3, r3, #2
 8015cce:	4413      	add	r3, r2
 8015cd0:	009b      	lsls	r3, r3, #2
 8015cd2:	4a10      	ldr	r2, [pc, #64]	@ (8015d14 <xTaskPriorityInherit+0xc8>)
 8015cd4:	441a      	add	r2, r3
 8015cd6:	68bb      	ldr	r3, [r7, #8]
 8015cd8:	3304      	adds	r3, #4
 8015cda:	4619      	mov	r1, r3
 8015cdc:	4610      	mov	r0, r2
 8015cde:	f7fe fa18 	bl	8014112 <vListInsertEnd>
 8015ce2:	e004      	b.n	8015cee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8015ce4:	4b0a      	ldr	r3, [pc, #40]	@ (8015d10 <xTaskPriorityInherit+0xc4>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015cea:	68bb      	ldr	r3, [r7, #8]
 8015cec:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8015cee:	2301      	movs	r3, #1
 8015cf0:	60fb      	str	r3, [r7, #12]
 8015cf2:	e008      	b.n	8015d06 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8015cf4:	68bb      	ldr	r3, [r7, #8]
 8015cf6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015cf8:	4b05      	ldr	r3, [pc, #20]	@ (8015d10 <xTaskPriorityInherit+0xc4>)
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015cfe:	429a      	cmp	r2, r3
 8015d00:	d201      	bcs.n	8015d06 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8015d02:	2301      	movs	r3, #1
 8015d04:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015d06:	68fb      	ldr	r3, [r7, #12]
	}
 8015d08:	4618      	mov	r0, r3
 8015d0a:	3710      	adds	r7, #16
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	bd80      	pop	{r7, pc}
 8015d10:	20005d54 	.word	0x20005d54
 8015d14:	20005d58 	.word	0x20005d58
 8015d18:	20006230 	.word	0x20006230

08015d1c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b086      	sub	sp, #24
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d058      	beq.n	8015de4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015d32:	4b2f      	ldr	r3, [pc, #188]	@ (8015df0 <xTaskPriorityDisinherit+0xd4>)
 8015d34:	681b      	ldr	r3, [r3, #0]
 8015d36:	693a      	ldr	r2, [r7, #16]
 8015d38:	429a      	cmp	r2, r3
 8015d3a:	d00b      	beq.n	8015d54 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8015d3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d40:	f383 8811 	msr	BASEPRI, r3
 8015d44:	f3bf 8f6f 	isb	sy
 8015d48:	f3bf 8f4f 	dsb	sy
 8015d4c:	60fb      	str	r3, [r7, #12]
}
 8015d4e:	bf00      	nop
 8015d50:	bf00      	nop
 8015d52:	e7fd      	b.n	8015d50 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8015d54:	693b      	ldr	r3, [r7, #16]
 8015d56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d10b      	bne.n	8015d74 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8015d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015d60:	f383 8811 	msr	BASEPRI, r3
 8015d64:	f3bf 8f6f 	isb	sy
 8015d68:	f3bf 8f4f 	dsb	sy
 8015d6c:	60bb      	str	r3, [r7, #8]
}
 8015d6e:	bf00      	nop
 8015d70:	bf00      	nop
 8015d72:	e7fd      	b.n	8015d70 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8015d74:	693b      	ldr	r3, [r7, #16]
 8015d76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015d78:	1e5a      	subs	r2, r3, #1
 8015d7a:	693b      	ldr	r3, [r7, #16]
 8015d7c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015d7e:	693b      	ldr	r3, [r7, #16]
 8015d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015d82:	693b      	ldr	r3, [r7, #16]
 8015d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015d86:	429a      	cmp	r2, r3
 8015d88:	d02c      	beq.n	8015de4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8015d8a:	693b      	ldr	r3, [r7, #16]
 8015d8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d128      	bne.n	8015de4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015d92:	693b      	ldr	r3, [r7, #16]
 8015d94:	3304      	adds	r3, #4
 8015d96:	4618      	mov	r0, r3
 8015d98:	f7fe fa18 	bl	80141cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8015d9c:	693b      	ldr	r3, [r7, #16]
 8015d9e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015da0:	693b      	ldr	r3, [r7, #16]
 8015da2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015da4:	693b      	ldr	r3, [r7, #16]
 8015da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015da8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015dac:	693b      	ldr	r3, [r7, #16]
 8015dae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015db0:	693b      	ldr	r3, [r7, #16]
 8015db2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015db4:	4b0f      	ldr	r3, [pc, #60]	@ (8015df4 <xTaskPriorityDisinherit+0xd8>)
 8015db6:	681b      	ldr	r3, [r3, #0]
 8015db8:	429a      	cmp	r2, r3
 8015dba:	d903      	bls.n	8015dc4 <xTaskPriorityDisinherit+0xa8>
 8015dbc:	693b      	ldr	r3, [r7, #16]
 8015dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015dc0:	4a0c      	ldr	r2, [pc, #48]	@ (8015df4 <xTaskPriorityDisinherit+0xd8>)
 8015dc2:	6013      	str	r3, [r2, #0]
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015dc8:	4613      	mov	r3, r2
 8015dca:	009b      	lsls	r3, r3, #2
 8015dcc:	4413      	add	r3, r2
 8015dce:	009b      	lsls	r3, r3, #2
 8015dd0:	4a09      	ldr	r2, [pc, #36]	@ (8015df8 <xTaskPriorityDisinherit+0xdc>)
 8015dd2:	441a      	add	r2, r3
 8015dd4:	693b      	ldr	r3, [r7, #16]
 8015dd6:	3304      	adds	r3, #4
 8015dd8:	4619      	mov	r1, r3
 8015dda:	4610      	mov	r0, r2
 8015ddc:	f7fe f999 	bl	8014112 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015de0:	2301      	movs	r3, #1
 8015de2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015de4:	697b      	ldr	r3, [r7, #20]
	}
 8015de6:	4618      	mov	r0, r3
 8015de8:	3718      	adds	r7, #24
 8015dea:	46bd      	mov	sp, r7
 8015dec:	bd80      	pop	{r7, pc}
 8015dee:	bf00      	nop
 8015df0:	20005d54 	.word	0x20005d54
 8015df4:	20006230 	.word	0x20006230
 8015df8:	20005d58 	.word	0x20005d58

08015dfc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b088      	sub	sp, #32
 8015e00:	af00      	add	r7, sp, #0
 8015e02:	6078      	str	r0, [r7, #4]
 8015e04:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8015e0a:	2301      	movs	r3, #1
 8015e0c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d06c      	beq.n	8015eee <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015e14:	69bb      	ldr	r3, [r7, #24]
 8015e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d10b      	bne.n	8015e34 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8015e1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e20:	f383 8811 	msr	BASEPRI, r3
 8015e24:	f3bf 8f6f 	isb	sy
 8015e28:	f3bf 8f4f 	dsb	sy
 8015e2c:	60fb      	str	r3, [r7, #12]
}
 8015e2e:	bf00      	nop
 8015e30:	bf00      	nop
 8015e32:	e7fd      	b.n	8015e30 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015e34:	69bb      	ldr	r3, [r7, #24]
 8015e36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e38:	683a      	ldr	r2, [r7, #0]
 8015e3a:	429a      	cmp	r2, r3
 8015e3c:	d902      	bls.n	8015e44 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015e3e:	683b      	ldr	r3, [r7, #0]
 8015e40:	61fb      	str	r3, [r7, #28]
 8015e42:	e002      	b.n	8015e4a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015e44:	69bb      	ldr	r3, [r7, #24]
 8015e46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015e48:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8015e4a:	69bb      	ldr	r3, [r7, #24]
 8015e4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e4e:	69fa      	ldr	r2, [r7, #28]
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d04c      	beq.n	8015eee <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015e54:	69bb      	ldr	r3, [r7, #24]
 8015e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015e58:	697a      	ldr	r2, [r7, #20]
 8015e5a:	429a      	cmp	r2, r3
 8015e5c:	d147      	bne.n	8015eee <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015e5e:	4b26      	ldr	r3, [pc, #152]	@ (8015ef8 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015e60:	681b      	ldr	r3, [r3, #0]
 8015e62:	69ba      	ldr	r2, [r7, #24]
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d10b      	bne.n	8015e80 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8015e68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015e6c:	f383 8811 	msr	BASEPRI, r3
 8015e70:	f3bf 8f6f 	isb	sy
 8015e74:	f3bf 8f4f 	dsb	sy
 8015e78:	60bb      	str	r3, [r7, #8]
}
 8015e7a:	bf00      	nop
 8015e7c:	bf00      	nop
 8015e7e:	e7fd      	b.n	8015e7c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015e80:	69bb      	ldr	r3, [r7, #24]
 8015e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015e84:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015e86:	69bb      	ldr	r3, [r7, #24]
 8015e88:	69fa      	ldr	r2, [r7, #28]
 8015e8a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015e8c:	69bb      	ldr	r3, [r7, #24]
 8015e8e:	699b      	ldr	r3, [r3, #24]
 8015e90:	2b00      	cmp	r3, #0
 8015e92:	db04      	blt.n	8015e9e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015e94:	69fb      	ldr	r3, [r7, #28]
 8015e96:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8015e9a:	69bb      	ldr	r3, [r7, #24]
 8015e9c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8015e9e:	69bb      	ldr	r3, [r7, #24]
 8015ea0:	6959      	ldr	r1, [r3, #20]
 8015ea2:	693a      	ldr	r2, [r7, #16]
 8015ea4:	4613      	mov	r3, r2
 8015ea6:	009b      	lsls	r3, r3, #2
 8015ea8:	4413      	add	r3, r2
 8015eaa:	009b      	lsls	r3, r3, #2
 8015eac:	4a13      	ldr	r2, [pc, #76]	@ (8015efc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015eae:	4413      	add	r3, r2
 8015eb0:	4299      	cmp	r1, r3
 8015eb2:	d11c      	bne.n	8015eee <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015eb4:	69bb      	ldr	r3, [r7, #24]
 8015eb6:	3304      	adds	r3, #4
 8015eb8:	4618      	mov	r0, r3
 8015eba:	f7fe f987 	bl	80141cc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8015ebe:	69bb      	ldr	r3, [r7, #24]
 8015ec0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8015f00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	429a      	cmp	r2, r3
 8015ec8:	d903      	bls.n	8015ed2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8015eca:	69bb      	ldr	r3, [r7, #24]
 8015ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ece:	4a0c      	ldr	r2, [pc, #48]	@ (8015f00 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8015ed0:	6013      	str	r3, [r2, #0]
 8015ed2:	69bb      	ldr	r3, [r7, #24]
 8015ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015ed6:	4613      	mov	r3, r2
 8015ed8:	009b      	lsls	r3, r3, #2
 8015eda:	4413      	add	r3, r2
 8015edc:	009b      	lsls	r3, r3, #2
 8015ede:	4a07      	ldr	r2, [pc, #28]	@ (8015efc <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015ee0:	441a      	add	r2, r3
 8015ee2:	69bb      	ldr	r3, [r7, #24]
 8015ee4:	3304      	adds	r3, #4
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	4610      	mov	r0, r2
 8015eea:	f7fe f912 	bl	8014112 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015eee:	bf00      	nop
 8015ef0:	3720      	adds	r7, #32
 8015ef2:	46bd      	mov	sp, r7
 8015ef4:	bd80      	pop	{r7, pc}
 8015ef6:	bf00      	nop
 8015ef8:	20005d54 	.word	0x20005d54
 8015efc:	20005d58 	.word	0x20005d58
 8015f00:	20006230 	.word	0x20006230

08015f04 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015f04:	b480      	push	{r7}
 8015f06:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015f08:	4b07      	ldr	r3, [pc, #28]	@ (8015f28 <pvTaskIncrementMutexHeldCount+0x24>)
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	d004      	beq.n	8015f1a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015f10:	4b05      	ldr	r3, [pc, #20]	@ (8015f28 <pvTaskIncrementMutexHeldCount+0x24>)
 8015f12:	681b      	ldr	r3, [r3, #0]
 8015f14:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015f16:	3201      	adds	r2, #1
 8015f18:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8015f1a:	4b03      	ldr	r3, [pc, #12]	@ (8015f28 <pvTaskIncrementMutexHeldCount+0x24>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
	}
 8015f1e:	4618      	mov	r0, r3
 8015f20:	46bd      	mov	sp, r7
 8015f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f26:	4770      	bx	lr
 8015f28:	20005d54 	.word	0x20005d54

08015f2c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8015f2c:	b580      	push	{r7, lr}
 8015f2e:	b084      	sub	sp, #16
 8015f30:	af00      	add	r7, sp, #0
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8015f36:	f000 fe17 	bl	8016b68 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8015f3a:	4b20      	ldr	r3, [pc, #128]	@ (8015fbc <ulTaskNotifyTake+0x90>)
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d113      	bne.n	8015f6e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8015f46:	4b1d      	ldr	r3, [pc, #116]	@ (8015fbc <ulTaskNotifyTake+0x90>)
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	2201      	movs	r2, #1
 8015f4c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d00b      	beq.n	8015f6e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015f56:	2101      	movs	r1, #1
 8015f58:	6838      	ldr	r0, [r7, #0]
 8015f5a:	f000 f8c9 	bl	80160f0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8015f5e:	4b18      	ldr	r3, [pc, #96]	@ (8015fc0 <ulTaskNotifyTake+0x94>)
 8015f60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8015f64:	601a      	str	r2, [r3, #0]
 8015f66:	f3bf 8f4f 	dsb	sy
 8015f6a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8015f6e:	f000 fe2d 	bl	8016bcc <vPortExitCritical>

		taskENTER_CRITICAL();
 8015f72:	f000 fdf9 	bl	8016b68 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8015f76:	4b11      	ldr	r3, [pc, #68]	@ (8015fbc <ulTaskNotifyTake+0x90>)
 8015f78:	681b      	ldr	r3, [r3, #0]
 8015f7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8015f7e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	d00e      	beq.n	8015fa4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 8015f86:	687b      	ldr	r3, [r7, #4]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d005      	beq.n	8015f98 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8015f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8015fbc <ulTaskNotifyTake+0x90>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	2200      	movs	r2, #0
 8015f92:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 8015f96:	e005      	b.n	8015fa4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 8015f98:	4b08      	ldr	r3, [pc, #32]	@ (8015fbc <ulTaskNotifyTake+0x90>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	68fa      	ldr	r2, [r7, #12]
 8015f9e:	3a01      	subs	r2, #1
 8015fa0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8015fa4:	4b05      	ldr	r3, [pc, #20]	@ (8015fbc <ulTaskNotifyTake+0x90>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	2200      	movs	r2, #0
 8015faa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 8015fae:	f000 fe0d 	bl	8016bcc <vPortExitCritical>

		return ulReturn;
 8015fb2:	68fb      	ldr	r3, [r7, #12]
	}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	3710      	adds	r7, #16
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	bd80      	pop	{r7, pc}
 8015fbc:	20005d54 	.word	0x20005d54
 8015fc0:	e000ed04 	.word	0xe000ed04

08015fc4 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015fc4:	b580      	push	{r7, lr}
 8015fc6:	b08a      	sub	sp, #40	@ 0x28
 8015fc8:	af00      	add	r7, sp, #0
 8015fca:	6078      	str	r0, [r7, #4]
 8015fcc:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d10b      	bne.n	8015fec <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 8015fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015fd8:	f383 8811 	msr	BASEPRI, r3
 8015fdc:	f3bf 8f6f 	isb	sy
 8015fe0:	f3bf 8f4f 	dsb	sy
 8015fe4:	61bb      	str	r3, [r7, #24]
}
 8015fe6:	bf00      	nop
 8015fe8:	bf00      	nop
 8015fea:	e7fd      	b.n	8015fe8 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8015fec:	f000 fe9c 	bl	8016d28 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 8015ff4:	f3ef 8211 	mrs	r2, BASEPRI
 8015ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8015ffc:	f383 8811 	msr	BASEPRI, r3
 8016000:	f3bf 8f6f 	isb	sy
 8016004:	f3bf 8f4f 	dsb	sy
 8016008:	617a      	str	r2, [r7, #20]
 801600a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801600c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801600e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8016010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016012:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 8016016:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8016018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801601a:	2202      	movs	r2, #2
 801601c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8016020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016022:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8016026:	1c5a      	adds	r2, r3, #1
 8016028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801602a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 801602e:	7ffb      	ldrb	r3, [r7, #31]
 8016030:	2b01      	cmp	r3, #1
 8016032:	d147      	bne.n	80160c4 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8016034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016038:	2b00      	cmp	r3, #0
 801603a:	d00b      	beq.n	8016054 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 801603c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016040:	f383 8811 	msr	BASEPRI, r3
 8016044:	f3bf 8f6f 	isb	sy
 8016048:	f3bf 8f4f 	dsb	sy
 801604c:	60fb      	str	r3, [r7, #12]
}
 801604e:	bf00      	nop
 8016050:	bf00      	nop
 8016052:	e7fd      	b.n	8016050 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8016054:	4b20      	ldr	r3, [pc, #128]	@ (80160d8 <vTaskNotifyGiveFromISR+0x114>)
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d11d      	bne.n	8016098 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801605c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801605e:	3304      	adds	r3, #4
 8016060:	4618      	mov	r0, r3
 8016062:	f7fe f8b3 	bl	80141cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8016066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016068:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801606a:	4b1c      	ldr	r3, [pc, #112]	@ (80160dc <vTaskNotifyGiveFromISR+0x118>)
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	429a      	cmp	r2, r3
 8016070:	d903      	bls.n	801607a <vTaskNotifyGiveFromISR+0xb6>
 8016072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016076:	4a19      	ldr	r2, [pc, #100]	@ (80160dc <vTaskNotifyGiveFromISR+0x118>)
 8016078:	6013      	str	r3, [r2, #0]
 801607a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801607c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801607e:	4613      	mov	r3, r2
 8016080:	009b      	lsls	r3, r3, #2
 8016082:	4413      	add	r3, r2
 8016084:	009b      	lsls	r3, r3, #2
 8016086:	4a16      	ldr	r2, [pc, #88]	@ (80160e0 <vTaskNotifyGiveFromISR+0x11c>)
 8016088:	441a      	add	r2, r3
 801608a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801608c:	3304      	adds	r3, #4
 801608e:	4619      	mov	r1, r3
 8016090:	4610      	mov	r0, r2
 8016092:	f7fe f83e 	bl	8014112 <vListInsertEnd>
 8016096:	e005      	b.n	80160a4 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8016098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801609a:	3318      	adds	r3, #24
 801609c:	4619      	mov	r1, r3
 801609e:	4811      	ldr	r0, [pc, #68]	@ (80160e4 <vTaskNotifyGiveFromISR+0x120>)
 80160a0:	f7fe f837 	bl	8014112 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80160a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80160a8:	4b0f      	ldr	r3, [pc, #60]	@ (80160e8 <vTaskNotifyGiveFromISR+0x124>)
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80160ae:	429a      	cmp	r2, r3
 80160b0:	d908      	bls.n	80160c4 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80160b2:	683b      	ldr	r3, [r7, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d002      	beq.n	80160be <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80160b8:	683b      	ldr	r3, [r7, #0]
 80160ba:	2201      	movs	r2, #1
 80160bc:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80160be:	4b0b      	ldr	r3, [pc, #44]	@ (80160ec <vTaskNotifyGiveFromISR+0x128>)
 80160c0:	2201      	movs	r2, #1
 80160c2:	601a      	str	r2, [r3, #0]
 80160c4:	6a3b      	ldr	r3, [r7, #32]
 80160c6:	60bb      	str	r3, [r7, #8]
	__asm volatile
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	f383 8811 	msr	BASEPRI, r3
}
 80160ce:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 80160d0:	bf00      	nop
 80160d2:	3728      	adds	r7, #40	@ 0x28
 80160d4:	46bd      	mov	sp, r7
 80160d6:	bd80      	pop	{r7, pc}
 80160d8:	20006250 	.word	0x20006250
 80160dc:	20006230 	.word	0x20006230
 80160e0:	20005d58 	.word	0x20005d58
 80160e4:	200061e8 	.word	0x200061e8
 80160e8:	20005d54 	.word	0x20005d54
 80160ec:	2000623c 	.word	0x2000623c

080160f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80160f0:	b580      	push	{r7, lr}
 80160f2:	b084      	sub	sp, #16
 80160f4:	af00      	add	r7, sp, #0
 80160f6:	6078      	str	r0, [r7, #4]
 80160f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80160fa:	4b21      	ldr	r3, [pc, #132]	@ (8016180 <prvAddCurrentTaskToDelayedList+0x90>)
 80160fc:	681b      	ldr	r3, [r3, #0]
 80160fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8016100:	4b20      	ldr	r3, [pc, #128]	@ (8016184 <prvAddCurrentTaskToDelayedList+0x94>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	3304      	adds	r3, #4
 8016106:	4618      	mov	r0, r3
 8016108:	f7fe f860 	bl	80141cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016112:	d10a      	bne.n	801612a <prvAddCurrentTaskToDelayedList+0x3a>
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	2b00      	cmp	r3, #0
 8016118:	d007      	beq.n	801612a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801611a:	4b1a      	ldr	r3, [pc, #104]	@ (8016184 <prvAddCurrentTaskToDelayedList+0x94>)
 801611c:	681b      	ldr	r3, [r3, #0]
 801611e:	3304      	adds	r3, #4
 8016120:	4619      	mov	r1, r3
 8016122:	4819      	ldr	r0, [pc, #100]	@ (8016188 <prvAddCurrentTaskToDelayedList+0x98>)
 8016124:	f7fd fff5 	bl	8014112 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8016128:	e026      	b.n	8016178 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801612a:	68fa      	ldr	r2, [r7, #12]
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	4413      	add	r3, r2
 8016130:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8016132:	4b14      	ldr	r3, [pc, #80]	@ (8016184 <prvAddCurrentTaskToDelayedList+0x94>)
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	68ba      	ldr	r2, [r7, #8]
 8016138:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801613a:	68ba      	ldr	r2, [r7, #8]
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	429a      	cmp	r2, r3
 8016140:	d209      	bcs.n	8016156 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016142:	4b12      	ldr	r3, [pc, #72]	@ (801618c <prvAddCurrentTaskToDelayedList+0x9c>)
 8016144:	681a      	ldr	r2, [r3, #0]
 8016146:	4b0f      	ldr	r3, [pc, #60]	@ (8016184 <prvAddCurrentTaskToDelayedList+0x94>)
 8016148:	681b      	ldr	r3, [r3, #0]
 801614a:	3304      	adds	r3, #4
 801614c:	4619      	mov	r1, r3
 801614e:	4610      	mov	r0, r2
 8016150:	f7fe f803 	bl	801415a <vListInsert>
}
 8016154:	e010      	b.n	8016178 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8016156:	4b0e      	ldr	r3, [pc, #56]	@ (8016190 <prvAddCurrentTaskToDelayedList+0xa0>)
 8016158:	681a      	ldr	r2, [r3, #0]
 801615a:	4b0a      	ldr	r3, [pc, #40]	@ (8016184 <prvAddCurrentTaskToDelayedList+0x94>)
 801615c:	681b      	ldr	r3, [r3, #0]
 801615e:	3304      	adds	r3, #4
 8016160:	4619      	mov	r1, r3
 8016162:	4610      	mov	r0, r2
 8016164:	f7fd fff9 	bl	801415a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8016168:	4b0a      	ldr	r3, [pc, #40]	@ (8016194 <prvAddCurrentTaskToDelayedList+0xa4>)
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	68ba      	ldr	r2, [r7, #8]
 801616e:	429a      	cmp	r2, r3
 8016170:	d202      	bcs.n	8016178 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8016172:	4a08      	ldr	r2, [pc, #32]	@ (8016194 <prvAddCurrentTaskToDelayedList+0xa4>)
 8016174:	68bb      	ldr	r3, [r7, #8]
 8016176:	6013      	str	r3, [r2, #0]
}
 8016178:	bf00      	nop
 801617a:	3710      	adds	r7, #16
 801617c:	46bd      	mov	sp, r7
 801617e:	bd80      	pop	{r7, pc}
 8016180:	2000622c 	.word	0x2000622c
 8016184:	20005d54 	.word	0x20005d54
 8016188:	20006214 	.word	0x20006214
 801618c:	200061e4 	.word	0x200061e4
 8016190:	200061e0 	.word	0x200061e0
 8016194:	20006248 	.word	0x20006248

08016198 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8016198:	b580      	push	{r7, lr}
 801619a:	b08a      	sub	sp, #40	@ 0x28
 801619c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801619e:	2300      	movs	r3, #0
 80161a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80161a2:	f000 fb71 	bl	8016888 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80161a6:	4b1d      	ldr	r3, [pc, #116]	@ (801621c <xTimerCreateTimerTask+0x84>)
 80161a8:	681b      	ldr	r3, [r3, #0]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d021      	beq.n	80161f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80161ae:	2300      	movs	r3, #0
 80161b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80161b2:	2300      	movs	r3, #0
 80161b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80161b6:	1d3a      	adds	r2, r7, #4
 80161b8:	f107 0108 	add.w	r1, r7, #8
 80161bc:	f107 030c 	add.w	r3, r7, #12
 80161c0:	4618      	mov	r0, r3
 80161c2:	f7fd ff5f 	bl	8014084 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80161c6:	6879      	ldr	r1, [r7, #4]
 80161c8:	68bb      	ldr	r3, [r7, #8]
 80161ca:	68fa      	ldr	r2, [r7, #12]
 80161cc:	9202      	str	r2, [sp, #8]
 80161ce:	9301      	str	r3, [sp, #4]
 80161d0:	2302      	movs	r3, #2
 80161d2:	9300      	str	r3, [sp, #0]
 80161d4:	2300      	movs	r3, #0
 80161d6:	460a      	mov	r2, r1
 80161d8:	4911      	ldr	r1, [pc, #68]	@ (8016220 <xTimerCreateTimerTask+0x88>)
 80161da:	4812      	ldr	r0, [pc, #72]	@ (8016224 <xTimerCreateTimerTask+0x8c>)
 80161dc:	f7fe feb0 	bl	8014f40 <xTaskCreateStatic>
 80161e0:	4603      	mov	r3, r0
 80161e2:	4a11      	ldr	r2, [pc, #68]	@ (8016228 <xTimerCreateTimerTask+0x90>)
 80161e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80161e6:	4b10      	ldr	r3, [pc, #64]	@ (8016228 <xTimerCreateTimerTask+0x90>)
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d001      	beq.n	80161f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80161ee:	2301      	movs	r3, #1
 80161f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80161f2:	697b      	ldr	r3, [r7, #20]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d10b      	bne.n	8016210 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80161f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80161fc:	f383 8811 	msr	BASEPRI, r3
 8016200:	f3bf 8f6f 	isb	sy
 8016204:	f3bf 8f4f 	dsb	sy
 8016208:	613b      	str	r3, [r7, #16]
}
 801620a:	bf00      	nop
 801620c:	bf00      	nop
 801620e:	e7fd      	b.n	801620c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8016210:	697b      	ldr	r3, [r7, #20]
}
 8016212:	4618      	mov	r0, r3
 8016214:	3718      	adds	r7, #24
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}
 801621a:	bf00      	nop
 801621c:	20006284 	.word	0x20006284
 8016220:	0802061c 	.word	0x0802061c
 8016224:	08016421 	.word	0x08016421
 8016228:	20006288 	.word	0x20006288

0801622c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 801622c:	b580      	push	{r7, lr}
 801622e:	b088      	sub	sp, #32
 8016230:	af02      	add	r7, sp, #8
 8016232:	60f8      	str	r0, [r7, #12]
 8016234:	60b9      	str	r1, [r7, #8]
 8016236:	607a      	str	r2, [r7, #4]
 8016238:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 801623a:	202c      	movs	r0, #44	@ 0x2c
 801623c:	f000 fdb6 	bl	8016dac <pvPortMalloc>
 8016240:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8016242:	697b      	ldr	r3, [r7, #20]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d00d      	beq.n	8016264 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8016248:	697b      	ldr	r3, [r7, #20]
 801624a:	2200      	movs	r2, #0
 801624c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8016250:	697b      	ldr	r3, [r7, #20]
 8016252:	9301      	str	r3, [sp, #4]
 8016254:	6a3b      	ldr	r3, [r7, #32]
 8016256:	9300      	str	r3, [sp, #0]
 8016258:	683b      	ldr	r3, [r7, #0]
 801625a:	687a      	ldr	r2, [r7, #4]
 801625c:	68b9      	ldr	r1, [r7, #8]
 801625e:	68f8      	ldr	r0, [r7, #12]
 8016260:	f000 f805 	bl	801626e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8016264:	697b      	ldr	r3, [r7, #20]
	}
 8016266:	4618      	mov	r0, r3
 8016268:	3718      	adds	r7, #24
 801626a:	46bd      	mov	sp, r7
 801626c:	bd80      	pop	{r7, pc}

0801626e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 801626e:	b580      	push	{r7, lr}
 8016270:	b086      	sub	sp, #24
 8016272:	af00      	add	r7, sp, #0
 8016274:	60f8      	str	r0, [r7, #12]
 8016276:	60b9      	str	r1, [r7, #8]
 8016278:	607a      	str	r2, [r7, #4]
 801627a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 801627c:	68bb      	ldr	r3, [r7, #8]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d10b      	bne.n	801629a <prvInitialiseNewTimer+0x2c>
	__asm volatile
 8016282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016286:	f383 8811 	msr	BASEPRI, r3
 801628a:	f3bf 8f6f 	isb	sy
 801628e:	f3bf 8f4f 	dsb	sy
 8016292:	617b      	str	r3, [r7, #20]
}
 8016294:	bf00      	nop
 8016296:	bf00      	nop
 8016298:	e7fd      	b.n	8016296 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 801629a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801629c:	2b00      	cmp	r3, #0
 801629e:	d01e      	beq.n	80162de <prvInitialiseNewTimer+0x70>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80162a0:	f000 faf2 	bl	8016888 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80162a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162a6:	68fa      	ldr	r2, [r7, #12]
 80162a8:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80162aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ac:	68ba      	ldr	r2, [r7, #8]
 80162ae:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80162b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162b2:	683a      	ldr	r2, [r7, #0]
 80162b4:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80162b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162b8:	6a3a      	ldr	r2, [r7, #32]
 80162ba:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80162bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162be:	3304      	adds	r3, #4
 80162c0:	4618      	mov	r0, r3
 80162c2:	f7fd ff19 	bl	80140f8 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80162c6:	687b      	ldr	r3, [r7, #4]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d008      	beq.n	80162de <prvInitialiseNewTimer+0x70>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80162cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80162d2:	f043 0304 	orr.w	r3, r3, #4
 80162d6:	b2da      	uxtb	r2, r3
 80162d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162da:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80162de:	bf00      	nop
 80162e0:	3718      	adds	r7, #24
 80162e2:	46bd      	mov	sp, r7
 80162e4:	bd80      	pop	{r7, pc}
	...

080162e8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b08a      	sub	sp, #40	@ 0x28
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	60f8      	str	r0, [r7, #12]
 80162f0:	60b9      	str	r1, [r7, #8]
 80162f2:	607a      	str	r2, [r7, #4]
 80162f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80162f6:	2300      	movs	r3, #0
 80162f8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80162fa:	68fb      	ldr	r3, [r7, #12]
 80162fc:	2b00      	cmp	r3, #0
 80162fe:	d10b      	bne.n	8016318 <xTimerGenericCommand+0x30>
	__asm volatile
 8016300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016304:	f383 8811 	msr	BASEPRI, r3
 8016308:	f3bf 8f6f 	isb	sy
 801630c:	f3bf 8f4f 	dsb	sy
 8016310:	623b      	str	r3, [r7, #32]
}
 8016312:	bf00      	nop
 8016314:	bf00      	nop
 8016316:	e7fd      	b.n	8016314 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8016318:	4b19      	ldr	r3, [pc, #100]	@ (8016380 <xTimerGenericCommand+0x98>)
 801631a:	681b      	ldr	r3, [r3, #0]
 801631c:	2b00      	cmp	r3, #0
 801631e:	d02a      	beq.n	8016376 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8016320:	68bb      	ldr	r3, [r7, #8]
 8016322:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801632c:	68bb      	ldr	r3, [r7, #8]
 801632e:	2b05      	cmp	r3, #5
 8016330:	dc18      	bgt.n	8016364 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8016332:	f7ff fc6d 	bl	8015c10 <xTaskGetSchedulerState>
 8016336:	4603      	mov	r3, r0
 8016338:	2b02      	cmp	r3, #2
 801633a:	d109      	bne.n	8016350 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801633c:	4b10      	ldr	r3, [pc, #64]	@ (8016380 <xTimerGenericCommand+0x98>)
 801633e:	6818      	ldr	r0, [r3, #0]
 8016340:	f107 0110 	add.w	r1, r7, #16
 8016344:	2300      	movs	r3, #0
 8016346:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016348:	f7fe f8e2 	bl	8014510 <xQueueGenericSend>
 801634c:	6278      	str	r0, [r7, #36]	@ 0x24
 801634e:	e012      	b.n	8016376 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8016350:	4b0b      	ldr	r3, [pc, #44]	@ (8016380 <xTimerGenericCommand+0x98>)
 8016352:	6818      	ldr	r0, [r3, #0]
 8016354:	f107 0110 	add.w	r1, r7, #16
 8016358:	2300      	movs	r3, #0
 801635a:	2200      	movs	r2, #0
 801635c:	f7fe f8d8 	bl	8014510 <xQueueGenericSend>
 8016360:	6278      	str	r0, [r7, #36]	@ 0x24
 8016362:	e008      	b.n	8016376 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8016364:	4b06      	ldr	r3, [pc, #24]	@ (8016380 <xTimerGenericCommand+0x98>)
 8016366:	6818      	ldr	r0, [r3, #0]
 8016368:	f107 0110 	add.w	r1, r7, #16
 801636c:	2300      	movs	r3, #0
 801636e:	683a      	ldr	r2, [r7, #0]
 8016370:	f7fe f9d0 	bl	8014714 <xQueueGenericSendFromISR>
 8016374:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8016376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8016378:	4618      	mov	r0, r3
 801637a:	3728      	adds	r7, #40	@ 0x28
 801637c:	46bd      	mov	sp, r7
 801637e:	bd80      	pop	{r7, pc}
 8016380:	20006284 	.word	0x20006284

08016384 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8016384:	b580      	push	{r7, lr}
 8016386:	b088      	sub	sp, #32
 8016388:	af02      	add	r7, sp, #8
 801638a:	6078      	str	r0, [r7, #4]
 801638c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801638e:	4b23      	ldr	r3, [pc, #140]	@ (801641c <prvProcessExpiredTimer+0x98>)
 8016390:	681b      	ldr	r3, [r3, #0]
 8016392:	68db      	ldr	r3, [r3, #12]
 8016394:	68db      	ldr	r3, [r3, #12]
 8016396:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016398:	697b      	ldr	r3, [r7, #20]
 801639a:	3304      	adds	r3, #4
 801639c:	4618      	mov	r0, r3
 801639e:	f7fd ff15 	bl	80141cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80163a2:	697b      	ldr	r3, [r7, #20]
 80163a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80163a8:	f003 0304 	and.w	r3, r3, #4
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	d023      	beq.n	80163f8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80163b0:	697b      	ldr	r3, [r7, #20]
 80163b2:	699a      	ldr	r2, [r3, #24]
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	18d1      	adds	r1, r2, r3
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	683a      	ldr	r2, [r7, #0]
 80163bc:	6978      	ldr	r0, [r7, #20]
 80163be:	f000 f8d5 	bl	801656c <prvInsertTimerInActiveList>
 80163c2:	4603      	mov	r3, r0
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d020      	beq.n	801640a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80163c8:	2300      	movs	r3, #0
 80163ca:	9300      	str	r3, [sp, #0]
 80163cc:	2300      	movs	r3, #0
 80163ce:	687a      	ldr	r2, [r7, #4]
 80163d0:	2100      	movs	r1, #0
 80163d2:	6978      	ldr	r0, [r7, #20]
 80163d4:	f7ff ff88 	bl	80162e8 <xTimerGenericCommand>
 80163d8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d114      	bne.n	801640a <prvProcessExpiredTimer+0x86>
	__asm volatile
 80163e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80163e4:	f383 8811 	msr	BASEPRI, r3
 80163e8:	f3bf 8f6f 	isb	sy
 80163ec:	f3bf 8f4f 	dsb	sy
 80163f0:	60fb      	str	r3, [r7, #12]
}
 80163f2:	bf00      	nop
 80163f4:	bf00      	nop
 80163f6:	e7fd      	b.n	80163f4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80163f8:	697b      	ldr	r3, [r7, #20]
 80163fa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80163fe:	f023 0301 	bic.w	r3, r3, #1
 8016402:	b2da      	uxtb	r2, r3
 8016404:	697b      	ldr	r3, [r7, #20]
 8016406:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801640a:	697b      	ldr	r3, [r7, #20]
 801640c:	6a1b      	ldr	r3, [r3, #32]
 801640e:	6978      	ldr	r0, [r7, #20]
 8016410:	4798      	blx	r3
}
 8016412:	bf00      	nop
 8016414:	3718      	adds	r7, #24
 8016416:	46bd      	mov	sp, r7
 8016418:	bd80      	pop	{r7, pc}
 801641a:	bf00      	nop
 801641c:	2000627c 	.word	0x2000627c

08016420 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8016420:	b580      	push	{r7, lr}
 8016422:	b084      	sub	sp, #16
 8016424:	af00      	add	r7, sp, #0
 8016426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016428:	f107 0308 	add.w	r3, r7, #8
 801642c:	4618      	mov	r0, r3
 801642e:	f000 f859 	bl	80164e4 <prvGetNextExpireTime>
 8016432:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8016434:	68bb      	ldr	r3, [r7, #8]
 8016436:	4619      	mov	r1, r3
 8016438:	68f8      	ldr	r0, [r7, #12]
 801643a:	f000 f805 	bl	8016448 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801643e:	f000 f8d7 	bl	80165f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8016442:	bf00      	nop
 8016444:	e7f0      	b.n	8016428 <prvTimerTask+0x8>
	...

08016448 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8016452:	f7fe ffd9 	bl	8015408 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016456:	f107 0308 	add.w	r3, r7, #8
 801645a:	4618      	mov	r0, r3
 801645c:	f000 f866 	bl	801652c <prvSampleTimeNow>
 8016460:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8016462:	68bb      	ldr	r3, [r7, #8]
 8016464:	2b00      	cmp	r3, #0
 8016466:	d130      	bne.n	80164ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8016468:	683b      	ldr	r3, [r7, #0]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d10a      	bne.n	8016484 <prvProcessTimerOrBlockTask+0x3c>
 801646e:	687a      	ldr	r2, [r7, #4]
 8016470:	68fb      	ldr	r3, [r7, #12]
 8016472:	429a      	cmp	r2, r3
 8016474:	d806      	bhi.n	8016484 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8016476:	f7fe ffd5 	bl	8015424 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801647a:	68f9      	ldr	r1, [r7, #12]
 801647c:	6878      	ldr	r0, [r7, #4]
 801647e:	f7ff ff81 	bl	8016384 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8016482:	e024      	b.n	80164ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8016484:	683b      	ldr	r3, [r7, #0]
 8016486:	2b00      	cmp	r3, #0
 8016488:	d008      	beq.n	801649c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801648a:	4b13      	ldr	r3, [pc, #76]	@ (80164d8 <prvProcessTimerOrBlockTask+0x90>)
 801648c:	681b      	ldr	r3, [r3, #0]
 801648e:	681b      	ldr	r3, [r3, #0]
 8016490:	2b00      	cmp	r3, #0
 8016492:	d101      	bne.n	8016498 <prvProcessTimerOrBlockTask+0x50>
 8016494:	2301      	movs	r3, #1
 8016496:	e000      	b.n	801649a <prvProcessTimerOrBlockTask+0x52>
 8016498:	2300      	movs	r3, #0
 801649a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801649c:	4b0f      	ldr	r3, [pc, #60]	@ (80164dc <prvProcessTimerOrBlockTask+0x94>)
 801649e:	6818      	ldr	r0, [r3, #0]
 80164a0:	687a      	ldr	r2, [r7, #4]
 80164a2:	68fb      	ldr	r3, [r7, #12]
 80164a4:	1ad3      	subs	r3, r2, r3
 80164a6:	683a      	ldr	r2, [r7, #0]
 80164a8:	4619      	mov	r1, r3
 80164aa:	f7fe fd15 	bl	8014ed8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80164ae:	f7fe ffb9 	bl	8015424 <xTaskResumeAll>
 80164b2:	4603      	mov	r3, r0
 80164b4:	2b00      	cmp	r3, #0
 80164b6:	d10a      	bne.n	80164ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80164b8:	4b09      	ldr	r3, [pc, #36]	@ (80164e0 <prvProcessTimerOrBlockTask+0x98>)
 80164ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80164be:	601a      	str	r2, [r3, #0]
 80164c0:	f3bf 8f4f 	dsb	sy
 80164c4:	f3bf 8f6f 	isb	sy
}
 80164c8:	e001      	b.n	80164ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80164ca:	f7fe ffab 	bl	8015424 <xTaskResumeAll>
}
 80164ce:	bf00      	nop
 80164d0:	3710      	adds	r7, #16
 80164d2:	46bd      	mov	sp, r7
 80164d4:	bd80      	pop	{r7, pc}
 80164d6:	bf00      	nop
 80164d8:	20006280 	.word	0x20006280
 80164dc:	20006284 	.word	0x20006284
 80164e0:	e000ed04 	.word	0xe000ed04

080164e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80164e4:	b480      	push	{r7}
 80164e6:	b085      	sub	sp, #20
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80164ec:	4b0e      	ldr	r3, [pc, #56]	@ (8016528 <prvGetNextExpireTime+0x44>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	2b00      	cmp	r3, #0
 80164f4:	d101      	bne.n	80164fa <prvGetNextExpireTime+0x16>
 80164f6:	2201      	movs	r2, #1
 80164f8:	e000      	b.n	80164fc <prvGetNextExpireTime+0x18>
 80164fa:	2200      	movs	r2, #0
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	681b      	ldr	r3, [r3, #0]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d105      	bne.n	8016514 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8016508:	4b07      	ldr	r3, [pc, #28]	@ (8016528 <prvGetNextExpireTime+0x44>)
 801650a:	681b      	ldr	r3, [r3, #0]
 801650c:	68db      	ldr	r3, [r3, #12]
 801650e:	681b      	ldr	r3, [r3, #0]
 8016510:	60fb      	str	r3, [r7, #12]
 8016512:	e001      	b.n	8016518 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016514:	2300      	movs	r3, #0
 8016516:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8016518:	68fb      	ldr	r3, [r7, #12]
}
 801651a:	4618      	mov	r0, r3
 801651c:	3714      	adds	r7, #20
 801651e:	46bd      	mov	sp, r7
 8016520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016524:	4770      	bx	lr
 8016526:	bf00      	nop
 8016528:	2000627c 	.word	0x2000627c

0801652c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b084      	sub	sp, #16
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016534:	f7ff f814 	bl	8015560 <xTaskGetTickCount>
 8016538:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801653a:	4b0b      	ldr	r3, [pc, #44]	@ (8016568 <prvSampleTimeNow+0x3c>)
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	68fa      	ldr	r2, [r7, #12]
 8016540:	429a      	cmp	r2, r3
 8016542:	d205      	bcs.n	8016550 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016544:	f000 f93a 	bl	80167bc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	2201      	movs	r2, #1
 801654c:	601a      	str	r2, [r3, #0]
 801654e:	e002      	b.n	8016556 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	2200      	movs	r2, #0
 8016554:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8016556:	4a04      	ldr	r2, [pc, #16]	@ (8016568 <prvSampleTimeNow+0x3c>)
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801655c:	68fb      	ldr	r3, [r7, #12]
}
 801655e:	4618      	mov	r0, r3
 8016560:	3710      	adds	r7, #16
 8016562:	46bd      	mov	sp, r7
 8016564:	bd80      	pop	{r7, pc}
 8016566:	bf00      	nop
 8016568:	2000628c 	.word	0x2000628c

0801656c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801656c:	b580      	push	{r7, lr}
 801656e:	b086      	sub	sp, #24
 8016570:	af00      	add	r7, sp, #0
 8016572:	60f8      	str	r0, [r7, #12]
 8016574:	60b9      	str	r1, [r7, #8]
 8016576:	607a      	str	r2, [r7, #4]
 8016578:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801657a:	2300      	movs	r3, #0
 801657c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	68ba      	ldr	r2, [r7, #8]
 8016582:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	68fa      	ldr	r2, [r7, #12]
 8016588:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801658a:	68ba      	ldr	r2, [r7, #8]
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	429a      	cmp	r2, r3
 8016590:	d812      	bhi.n	80165b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016592:	687a      	ldr	r2, [r7, #4]
 8016594:	683b      	ldr	r3, [r7, #0]
 8016596:	1ad2      	subs	r2, r2, r3
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	699b      	ldr	r3, [r3, #24]
 801659c:	429a      	cmp	r2, r3
 801659e:	d302      	bcc.n	80165a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80165a0:	2301      	movs	r3, #1
 80165a2:	617b      	str	r3, [r7, #20]
 80165a4:	e01b      	b.n	80165de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80165a6:	4b10      	ldr	r3, [pc, #64]	@ (80165e8 <prvInsertTimerInActiveList+0x7c>)
 80165a8:	681a      	ldr	r2, [r3, #0]
 80165aa:	68fb      	ldr	r3, [r7, #12]
 80165ac:	3304      	adds	r3, #4
 80165ae:	4619      	mov	r1, r3
 80165b0:	4610      	mov	r0, r2
 80165b2:	f7fd fdd2 	bl	801415a <vListInsert>
 80165b6:	e012      	b.n	80165de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80165b8:	687a      	ldr	r2, [r7, #4]
 80165ba:	683b      	ldr	r3, [r7, #0]
 80165bc:	429a      	cmp	r2, r3
 80165be:	d206      	bcs.n	80165ce <prvInsertTimerInActiveList+0x62>
 80165c0:	68ba      	ldr	r2, [r7, #8]
 80165c2:	683b      	ldr	r3, [r7, #0]
 80165c4:	429a      	cmp	r2, r3
 80165c6:	d302      	bcc.n	80165ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80165c8:	2301      	movs	r3, #1
 80165ca:	617b      	str	r3, [r7, #20]
 80165cc:	e007      	b.n	80165de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80165ce:	4b07      	ldr	r3, [pc, #28]	@ (80165ec <prvInsertTimerInActiveList+0x80>)
 80165d0:	681a      	ldr	r2, [r3, #0]
 80165d2:	68fb      	ldr	r3, [r7, #12]
 80165d4:	3304      	adds	r3, #4
 80165d6:	4619      	mov	r1, r3
 80165d8:	4610      	mov	r0, r2
 80165da:	f7fd fdbe 	bl	801415a <vListInsert>
		}
	}

	return xProcessTimerNow;
 80165de:	697b      	ldr	r3, [r7, #20]
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	3718      	adds	r7, #24
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}
 80165e8:	20006280 	.word	0x20006280
 80165ec:	2000627c 	.word	0x2000627c

080165f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80165f0:	b580      	push	{r7, lr}
 80165f2:	b08e      	sub	sp, #56	@ 0x38
 80165f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80165f6:	e0ce      	b.n	8016796 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	da19      	bge.n	8016632 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80165fe:	1d3b      	adds	r3, r7, #4
 8016600:	3304      	adds	r3, #4
 8016602:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8016604:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016606:	2b00      	cmp	r3, #0
 8016608:	d10b      	bne.n	8016622 <prvProcessReceivedCommands+0x32>
	__asm volatile
 801660a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801660e:	f383 8811 	msr	BASEPRI, r3
 8016612:	f3bf 8f6f 	isb	sy
 8016616:	f3bf 8f4f 	dsb	sy
 801661a:	61fb      	str	r3, [r7, #28]
}
 801661c:	bf00      	nop
 801661e:	bf00      	nop
 8016620:	e7fd      	b.n	801661e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016628:	6850      	ldr	r0, [r2, #4]
 801662a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801662c:	6892      	ldr	r2, [r2, #8]
 801662e:	4611      	mov	r1, r2
 8016630:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	2b00      	cmp	r3, #0
 8016636:	f2c0 80ae 	blt.w	8016796 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801663a:	68fb      	ldr	r3, [r7, #12]
 801663c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801663e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016640:	695b      	ldr	r3, [r3, #20]
 8016642:	2b00      	cmp	r3, #0
 8016644:	d004      	beq.n	8016650 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016648:	3304      	adds	r3, #4
 801664a:	4618      	mov	r0, r3
 801664c:	f7fd fdbe 	bl	80141cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016650:	463b      	mov	r3, r7
 8016652:	4618      	mov	r0, r3
 8016654:	f7ff ff6a 	bl	801652c <prvSampleTimeNow>
 8016658:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	2b09      	cmp	r3, #9
 801665e:	f200 8097 	bhi.w	8016790 <prvProcessReceivedCommands+0x1a0>
 8016662:	a201      	add	r2, pc, #4	@ (adr r2, 8016668 <prvProcessReceivedCommands+0x78>)
 8016664:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016668:	08016691 	.word	0x08016691
 801666c:	08016691 	.word	0x08016691
 8016670:	08016691 	.word	0x08016691
 8016674:	08016707 	.word	0x08016707
 8016678:	0801671b 	.word	0x0801671b
 801667c:	08016767 	.word	0x08016767
 8016680:	08016691 	.word	0x08016691
 8016684:	08016691 	.word	0x08016691
 8016688:	08016707 	.word	0x08016707
 801668c:	0801671b 	.word	0x0801671b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016692:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016696:	f043 0301 	orr.w	r3, r3, #1
 801669a:	b2da      	uxtb	r2, r3
 801669c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801669e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80166a2:	68ba      	ldr	r2, [r7, #8]
 80166a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166a6:	699b      	ldr	r3, [r3, #24]
 80166a8:	18d1      	adds	r1, r2, r3
 80166aa:	68bb      	ldr	r3, [r7, #8]
 80166ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80166b0:	f7ff ff5c 	bl	801656c <prvInsertTimerInActiveList>
 80166b4:	4603      	mov	r3, r0
 80166b6:	2b00      	cmp	r3, #0
 80166b8:	d06c      	beq.n	8016794 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80166ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166bc:	6a1b      	ldr	r3, [r3, #32]
 80166be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80166c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80166c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80166c8:	f003 0304 	and.w	r3, r3, #4
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d061      	beq.n	8016794 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80166d0:	68ba      	ldr	r2, [r7, #8]
 80166d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166d4:	699b      	ldr	r3, [r3, #24]
 80166d6:	441a      	add	r2, r3
 80166d8:	2300      	movs	r3, #0
 80166da:	9300      	str	r3, [sp, #0]
 80166dc:	2300      	movs	r3, #0
 80166de:	2100      	movs	r1, #0
 80166e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80166e2:	f7ff fe01 	bl	80162e8 <xTimerGenericCommand>
 80166e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80166e8:	6a3b      	ldr	r3, [r7, #32]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d152      	bne.n	8016794 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80166ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80166f2:	f383 8811 	msr	BASEPRI, r3
 80166f6:	f3bf 8f6f 	isb	sy
 80166fa:	f3bf 8f4f 	dsb	sy
 80166fe:	61bb      	str	r3, [r7, #24]
}
 8016700:	bf00      	nop
 8016702:	bf00      	nop
 8016704:	e7fd      	b.n	8016702 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8016706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016708:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801670c:	f023 0301 	bic.w	r3, r3, #1
 8016710:	b2da      	uxtb	r2, r3
 8016712:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016714:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8016718:	e03d      	b.n	8016796 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801671a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801671c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016720:	f043 0301 	orr.w	r3, r3, #1
 8016724:	b2da      	uxtb	r2, r3
 8016726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016728:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801672c:	68ba      	ldr	r2, [r7, #8]
 801672e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016730:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016734:	699b      	ldr	r3, [r3, #24]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d10b      	bne.n	8016752 <prvProcessReceivedCommands+0x162>
	__asm volatile
 801673a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801673e:	f383 8811 	msr	BASEPRI, r3
 8016742:	f3bf 8f6f 	isb	sy
 8016746:	f3bf 8f4f 	dsb	sy
 801674a:	617b      	str	r3, [r7, #20]
}
 801674c:	bf00      	nop
 801674e:	bf00      	nop
 8016750:	e7fd      	b.n	801674e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016754:	699a      	ldr	r2, [r3, #24]
 8016756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016758:	18d1      	adds	r1, r2, r3
 801675a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801675c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801675e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016760:	f7ff ff04 	bl	801656c <prvInsertTimerInActiveList>
					break;
 8016764:	e017      	b.n	8016796 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016766:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016768:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801676c:	f003 0302 	and.w	r3, r3, #2
 8016770:	2b00      	cmp	r3, #0
 8016772:	d103      	bne.n	801677c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8016774:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016776:	f000 fbe7 	bl	8016f48 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801677a:	e00c      	b.n	8016796 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801677c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801677e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8016782:	f023 0301 	bic.w	r3, r3, #1
 8016786:	b2da      	uxtb	r2, r3
 8016788:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801678a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 801678e:	e002      	b.n	8016796 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8016790:	bf00      	nop
 8016792:	e000      	b.n	8016796 <prvProcessReceivedCommands+0x1a6>
					break;
 8016794:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016796:	4b08      	ldr	r3, [pc, #32]	@ (80167b8 <prvProcessReceivedCommands+0x1c8>)
 8016798:	681b      	ldr	r3, [r3, #0]
 801679a:	1d39      	adds	r1, r7, #4
 801679c:	2200      	movs	r2, #0
 801679e:	4618      	mov	r0, r3
 80167a0:	f7fe f856 	bl	8014850 <xQueueReceive>
 80167a4:	4603      	mov	r3, r0
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	f47f af26 	bne.w	80165f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80167ac:	bf00      	nop
 80167ae:	bf00      	nop
 80167b0:	3730      	adds	r7, #48	@ 0x30
 80167b2:	46bd      	mov	sp, r7
 80167b4:	bd80      	pop	{r7, pc}
 80167b6:	bf00      	nop
 80167b8:	20006284 	.word	0x20006284

080167bc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80167bc:	b580      	push	{r7, lr}
 80167be:	b088      	sub	sp, #32
 80167c0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80167c2:	e049      	b.n	8016858 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80167c4:	4b2e      	ldr	r3, [pc, #184]	@ (8016880 <prvSwitchTimerLists+0xc4>)
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	68db      	ldr	r3, [r3, #12]
 80167ca:	681b      	ldr	r3, [r3, #0]
 80167cc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80167ce:	4b2c      	ldr	r3, [pc, #176]	@ (8016880 <prvSwitchTimerLists+0xc4>)
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	68db      	ldr	r3, [r3, #12]
 80167d4:	68db      	ldr	r3, [r3, #12]
 80167d6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	3304      	adds	r3, #4
 80167dc:	4618      	mov	r0, r3
 80167de:	f7fd fcf5 	bl	80141cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	6a1b      	ldr	r3, [r3, #32]
 80167e6:	68f8      	ldr	r0, [r7, #12]
 80167e8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80167f0:	f003 0304 	and.w	r3, r3, #4
 80167f4:	2b00      	cmp	r3, #0
 80167f6:	d02f      	beq.n	8016858 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80167f8:	68fb      	ldr	r3, [r7, #12]
 80167fa:	699b      	ldr	r3, [r3, #24]
 80167fc:	693a      	ldr	r2, [r7, #16]
 80167fe:	4413      	add	r3, r2
 8016800:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8016802:	68ba      	ldr	r2, [r7, #8]
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	429a      	cmp	r2, r3
 8016808:	d90e      	bls.n	8016828 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	68ba      	ldr	r2, [r7, #8]
 801680e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	68fa      	ldr	r2, [r7, #12]
 8016814:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016816:	4b1a      	ldr	r3, [pc, #104]	@ (8016880 <prvSwitchTimerLists+0xc4>)
 8016818:	681a      	ldr	r2, [r3, #0]
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	3304      	adds	r3, #4
 801681e:	4619      	mov	r1, r3
 8016820:	4610      	mov	r0, r2
 8016822:	f7fd fc9a 	bl	801415a <vListInsert>
 8016826:	e017      	b.n	8016858 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016828:	2300      	movs	r3, #0
 801682a:	9300      	str	r3, [sp, #0]
 801682c:	2300      	movs	r3, #0
 801682e:	693a      	ldr	r2, [r7, #16]
 8016830:	2100      	movs	r1, #0
 8016832:	68f8      	ldr	r0, [r7, #12]
 8016834:	f7ff fd58 	bl	80162e8 <xTimerGenericCommand>
 8016838:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	2b00      	cmp	r3, #0
 801683e:	d10b      	bne.n	8016858 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8016840:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016844:	f383 8811 	msr	BASEPRI, r3
 8016848:	f3bf 8f6f 	isb	sy
 801684c:	f3bf 8f4f 	dsb	sy
 8016850:	603b      	str	r3, [r7, #0]
}
 8016852:	bf00      	nop
 8016854:	bf00      	nop
 8016856:	e7fd      	b.n	8016854 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016858:	4b09      	ldr	r3, [pc, #36]	@ (8016880 <prvSwitchTimerLists+0xc4>)
 801685a:	681b      	ldr	r3, [r3, #0]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	2b00      	cmp	r3, #0
 8016860:	d1b0      	bne.n	80167c4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8016862:	4b07      	ldr	r3, [pc, #28]	@ (8016880 <prvSwitchTimerLists+0xc4>)
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016868:	4b06      	ldr	r3, [pc, #24]	@ (8016884 <prvSwitchTimerLists+0xc8>)
 801686a:	681b      	ldr	r3, [r3, #0]
 801686c:	4a04      	ldr	r2, [pc, #16]	@ (8016880 <prvSwitchTimerLists+0xc4>)
 801686e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8016870:	4a04      	ldr	r2, [pc, #16]	@ (8016884 <prvSwitchTimerLists+0xc8>)
 8016872:	697b      	ldr	r3, [r7, #20]
 8016874:	6013      	str	r3, [r2, #0]
}
 8016876:	bf00      	nop
 8016878:	3718      	adds	r7, #24
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}
 801687e:	bf00      	nop
 8016880:	2000627c 	.word	0x2000627c
 8016884:	20006280 	.word	0x20006280

08016888 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b082      	sub	sp, #8
 801688c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801688e:	f000 f96b 	bl	8016b68 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8016892:	4b15      	ldr	r3, [pc, #84]	@ (80168e8 <prvCheckForValidListAndQueue+0x60>)
 8016894:	681b      	ldr	r3, [r3, #0]
 8016896:	2b00      	cmp	r3, #0
 8016898:	d120      	bne.n	80168dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801689a:	4814      	ldr	r0, [pc, #80]	@ (80168ec <prvCheckForValidListAndQueue+0x64>)
 801689c:	f7fd fc0c 	bl	80140b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80168a0:	4813      	ldr	r0, [pc, #76]	@ (80168f0 <prvCheckForValidListAndQueue+0x68>)
 80168a2:	f7fd fc09 	bl	80140b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80168a6:	4b13      	ldr	r3, [pc, #76]	@ (80168f4 <prvCheckForValidListAndQueue+0x6c>)
 80168a8:	4a10      	ldr	r2, [pc, #64]	@ (80168ec <prvCheckForValidListAndQueue+0x64>)
 80168aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80168ac:	4b12      	ldr	r3, [pc, #72]	@ (80168f8 <prvCheckForValidListAndQueue+0x70>)
 80168ae:	4a10      	ldr	r2, [pc, #64]	@ (80168f0 <prvCheckForValidListAndQueue+0x68>)
 80168b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80168b2:	2300      	movs	r3, #0
 80168b4:	9300      	str	r3, [sp, #0]
 80168b6:	4b11      	ldr	r3, [pc, #68]	@ (80168fc <prvCheckForValidListAndQueue+0x74>)
 80168b8:	4a11      	ldr	r2, [pc, #68]	@ (8016900 <prvCheckForValidListAndQueue+0x78>)
 80168ba:	2110      	movs	r1, #16
 80168bc:	200a      	movs	r0, #10
 80168be:	f7fd fd19 	bl	80142f4 <xQueueGenericCreateStatic>
 80168c2:	4603      	mov	r3, r0
 80168c4:	4a08      	ldr	r2, [pc, #32]	@ (80168e8 <prvCheckForValidListAndQueue+0x60>)
 80168c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80168c8:	4b07      	ldr	r3, [pc, #28]	@ (80168e8 <prvCheckForValidListAndQueue+0x60>)
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d005      	beq.n	80168dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80168d0:	4b05      	ldr	r3, [pc, #20]	@ (80168e8 <prvCheckForValidListAndQueue+0x60>)
 80168d2:	681b      	ldr	r3, [r3, #0]
 80168d4:	490b      	ldr	r1, [pc, #44]	@ (8016904 <prvCheckForValidListAndQueue+0x7c>)
 80168d6:	4618      	mov	r0, r3
 80168d8:	f7fe fad4 	bl	8014e84 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80168dc:	f000 f976 	bl	8016bcc <vPortExitCritical>
}
 80168e0:	bf00      	nop
 80168e2:	46bd      	mov	sp, r7
 80168e4:	bd80      	pop	{r7, pc}
 80168e6:	bf00      	nop
 80168e8:	20006284 	.word	0x20006284
 80168ec:	20006254 	.word	0x20006254
 80168f0:	20006268 	.word	0x20006268
 80168f4:	2000627c 	.word	0x2000627c
 80168f8:	20006280 	.word	0x20006280
 80168fc:	20006330 	.word	0x20006330
 8016900:	20006290 	.word	0x20006290
 8016904:	08020624 	.word	0x08020624

08016908 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8016908:	b480      	push	{r7}
 801690a:	b085      	sub	sp, #20
 801690c:	af00      	add	r7, sp, #0
 801690e:	60f8      	str	r0, [r7, #12]
 8016910:	60b9      	str	r1, [r7, #8]
 8016912:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	3b04      	subs	r3, #4
 8016918:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8016920:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	3b04      	subs	r3, #4
 8016926:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016928:	68bb      	ldr	r3, [r7, #8]
 801692a:	f023 0201 	bic.w	r2, r3, #1
 801692e:	68fb      	ldr	r3, [r7, #12]
 8016930:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8016932:	68fb      	ldr	r3, [r7, #12]
 8016934:	3b04      	subs	r3, #4
 8016936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016938:	4a0c      	ldr	r2, [pc, #48]	@ (801696c <pxPortInitialiseStack+0x64>)
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801693e:	68fb      	ldr	r3, [r7, #12]
 8016940:	3b14      	subs	r3, #20
 8016942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8016944:	687a      	ldr	r2, [r7, #4]
 8016946:	68fb      	ldr	r3, [r7, #12]
 8016948:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801694a:	68fb      	ldr	r3, [r7, #12]
 801694c:	3b04      	subs	r3, #4
 801694e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016950:	68fb      	ldr	r3, [r7, #12]
 8016952:	f06f 0202 	mvn.w	r2, #2
 8016956:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	3b20      	subs	r3, #32
 801695c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801695e:	68fb      	ldr	r3, [r7, #12]
}
 8016960:	4618      	mov	r0, r3
 8016962:	3714      	adds	r7, #20
 8016964:	46bd      	mov	sp, r7
 8016966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801696a:	4770      	bx	lr
 801696c:	08016971 	.word	0x08016971

08016970 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016970:	b480      	push	{r7}
 8016972:	b085      	sub	sp, #20
 8016974:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8016976:	2300      	movs	r3, #0
 8016978:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801697a:	4b13      	ldr	r3, [pc, #76]	@ (80169c8 <prvTaskExitError+0x58>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016982:	d00b      	beq.n	801699c <prvTaskExitError+0x2c>
	__asm volatile
 8016984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016988:	f383 8811 	msr	BASEPRI, r3
 801698c:	f3bf 8f6f 	isb	sy
 8016990:	f3bf 8f4f 	dsb	sy
 8016994:	60fb      	str	r3, [r7, #12]
}
 8016996:	bf00      	nop
 8016998:	bf00      	nop
 801699a:	e7fd      	b.n	8016998 <prvTaskExitError+0x28>
	__asm volatile
 801699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80169a0:	f383 8811 	msr	BASEPRI, r3
 80169a4:	f3bf 8f6f 	isb	sy
 80169a8:	f3bf 8f4f 	dsb	sy
 80169ac:	60bb      	str	r3, [r7, #8]
}
 80169ae:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80169b0:	bf00      	nop
 80169b2:	687b      	ldr	r3, [r7, #4]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d0fc      	beq.n	80169b2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80169b8:	bf00      	nop
 80169ba:	bf00      	nop
 80169bc:	3714      	adds	r7, #20
 80169be:	46bd      	mov	sp, r7
 80169c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c4:	4770      	bx	lr
 80169c6:	bf00      	nop
 80169c8:	200000ec 	.word	0x200000ec
 80169cc:	00000000 	.word	0x00000000

080169d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80169d0:	4b07      	ldr	r3, [pc, #28]	@ (80169f0 <pxCurrentTCBConst2>)
 80169d2:	6819      	ldr	r1, [r3, #0]
 80169d4:	6808      	ldr	r0, [r1, #0]
 80169d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169da:	f380 8809 	msr	PSP, r0
 80169de:	f3bf 8f6f 	isb	sy
 80169e2:	f04f 0000 	mov.w	r0, #0
 80169e6:	f380 8811 	msr	BASEPRI, r0
 80169ea:	4770      	bx	lr
 80169ec:	f3af 8000 	nop.w

080169f0 <pxCurrentTCBConst2>:
 80169f0:	20005d54 	.word	0x20005d54
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80169f4:	bf00      	nop
 80169f6:	bf00      	nop

080169f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80169f8:	4808      	ldr	r0, [pc, #32]	@ (8016a1c <prvPortStartFirstTask+0x24>)
 80169fa:	6800      	ldr	r0, [r0, #0]
 80169fc:	6800      	ldr	r0, [r0, #0]
 80169fe:	f380 8808 	msr	MSP, r0
 8016a02:	f04f 0000 	mov.w	r0, #0
 8016a06:	f380 8814 	msr	CONTROL, r0
 8016a0a:	b662      	cpsie	i
 8016a0c:	b661      	cpsie	f
 8016a0e:	f3bf 8f4f 	dsb	sy
 8016a12:	f3bf 8f6f 	isb	sy
 8016a16:	df00      	svc	0
 8016a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8016a1a:	bf00      	nop
 8016a1c:	e000ed08 	.word	0xe000ed08

08016a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b086      	sub	sp, #24
 8016a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016a26:	4b47      	ldr	r3, [pc, #284]	@ (8016b44 <xPortStartScheduler+0x124>)
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	4a47      	ldr	r2, [pc, #284]	@ (8016b48 <xPortStartScheduler+0x128>)
 8016a2c:	4293      	cmp	r3, r2
 8016a2e:	d10b      	bne.n	8016a48 <xPortStartScheduler+0x28>
	__asm volatile
 8016a30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a34:	f383 8811 	msr	BASEPRI, r3
 8016a38:	f3bf 8f6f 	isb	sy
 8016a3c:	f3bf 8f4f 	dsb	sy
 8016a40:	60fb      	str	r3, [r7, #12]
}
 8016a42:	bf00      	nop
 8016a44:	bf00      	nop
 8016a46:	e7fd      	b.n	8016a44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016a48:	4b3e      	ldr	r3, [pc, #248]	@ (8016b44 <xPortStartScheduler+0x124>)
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	4a3f      	ldr	r2, [pc, #252]	@ (8016b4c <xPortStartScheduler+0x12c>)
 8016a4e:	4293      	cmp	r3, r2
 8016a50:	d10b      	bne.n	8016a6a <xPortStartScheduler+0x4a>
	__asm volatile
 8016a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016a56:	f383 8811 	msr	BASEPRI, r3
 8016a5a:	f3bf 8f6f 	isb	sy
 8016a5e:	f3bf 8f4f 	dsb	sy
 8016a62:	613b      	str	r3, [r7, #16]
}
 8016a64:	bf00      	nop
 8016a66:	bf00      	nop
 8016a68:	e7fd      	b.n	8016a66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016a6a:	4b39      	ldr	r3, [pc, #228]	@ (8016b50 <xPortStartScheduler+0x130>)
 8016a6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	781b      	ldrb	r3, [r3, #0]
 8016a72:	b2db      	uxtb	r3, r3
 8016a74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016a76:	697b      	ldr	r3, [r7, #20]
 8016a78:	22ff      	movs	r2, #255	@ 0xff
 8016a7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016a7c:	697b      	ldr	r3, [r7, #20]
 8016a7e:	781b      	ldrb	r3, [r3, #0]
 8016a80:	b2db      	uxtb	r3, r3
 8016a82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016a84:	78fb      	ldrb	r3, [r7, #3]
 8016a86:	b2db      	uxtb	r3, r3
 8016a88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8016a8c:	b2da      	uxtb	r2, r3
 8016a8e:	4b31      	ldr	r3, [pc, #196]	@ (8016b54 <xPortStartScheduler+0x134>)
 8016a90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8016a92:	4b31      	ldr	r3, [pc, #196]	@ (8016b58 <xPortStartScheduler+0x138>)
 8016a94:	2207      	movs	r2, #7
 8016a96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016a98:	e009      	b.n	8016aae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8016a9a:	4b2f      	ldr	r3, [pc, #188]	@ (8016b58 <xPortStartScheduler+0x138>)
 8016a9c:	681b      	ldr	r3, [r3, #0]
 8016a9e:	3b01      	subs	r3, #1
 8016aa0:	4a2d      	ldr	r2, [pc, #180]	@ (8016b58 <xPortStartScheduler+0x138>)
 8016aa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016aa4:	78fb      	ldrb	r3, [r7, #3]
 8016aa6:	b2db      	uxtb	r3, r3
 8016aa8:	005b      	lsls	r3, r3, #1
 8016aaa:	b2db      	uxtb	r3, r3
 8016aac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016aae:	78fb      	ldrb	r3, [r7, #3]
 8016ab0:	b2db      	uxtb	r3, r3
 8016ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016ab6:	2b80      	cmp	r3, #128	@ 0x80
 8016ab8:	d0ef      	beq.n	8016a9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016aba:	4b27      	ldr	r3, [pc, #156]	@ (8016b58 <xPortStartScheduler+0x138>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	f1c3 0307 	rsb	r3, r3, #7
 8016ac2:	2b04      	cmp	r3, #4
 8016ac4:	d00b      	beq.n	8016ade <xPortStartScheduler+0xbe>
	__asm volatile
 8016ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016aca:	f383 8811 	msr	BASEPRI, r3
 8016ace:	f3bf 8f6f 	isb	sy
 8016ad2:	f3bf 8f4f 	dsb	sy
 8016ad6:	60bb      	str	r3, [r7, #8]
}
 8016ad8:	bf00      	nop
 8016ada:	bf00      	nop
 8016adc:	e7fd      	b.n	8016ada <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8016ade:	4b1e      	ldr	r3, [pc, #120]	@ (8016b58 <xPortStartScheduler+0x138>)
 8016ae0:	681b      	ldr	r3, [r3, #0]
 8016ae2:	021b      	lsls	r3, r3, #8
 8016ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8016b58 <xPortStartScheduler+0x138>)
 8016ae6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8016ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8016b58 <xPortStartScheduler+0x138>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8016af0:	4a19      	ldr	r2, [pc, #100]	@ (8016b58 <xPortStartScheduler+0x138>)
 8016af2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	b2da      	uxtb	r2, r3
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8016afc:	4b17      	ldr	r3, [pc, #92]	@ (8016b5c <xPortStartScheduler+0x13c>)
 8016afe:	681b      	ldr	r3, [r3, #0]
 8016b00:	4a16      	ldr	r2, [pc, #88]	@ (8016b5c <xPortStartScheduler+0x13c>)
 8016b02:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8016b06:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8016b08:	4b14      	ldr	r3, [pc, #80]	@ (8016b5c <xPortStartScheduler+0x13c>)
 8016b0a:	681b      	ldr	r3, [r3, #0]
 8016b0c:	4a13      	ldr	r2, [pc, #76]	@ (8016b5c <xPortStartScheduler+0x13c>)
 8016b0e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8016b12:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8016b14:	f000 f8da 	bl	8016ccc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8016b18:	4b11      	ldr	r3, [pc, #68]	@ (8016b60 <xPortStartScheduler+0x140>)
 8016b1a:	2200      	movs	r2, #0
 8016b1c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8016b1e:	f000 f8f9 	bl	8016d14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8016b22:	4b10      	ldr	r3, [pc, #64]	@ (8016b64 <xPortStartScheduler+0x144>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	4a0f      	ldr	r2, [pc, #60]	@ (8016b64 <xPortStartScheduler+0x144>)
 8016b28:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8016b2c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016b2e:	f7ff ff63 	bl	80169f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8016b32:	f7fe fddf 	bl	80156f4 <vTaskSwitchContext>
	prvTaskExitError();
 8016b36:	f7ff ff1b 	bl	8016970 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016b3a:	2300      	movs	r3, #0
}
 8016b3c:	4618      	mov	r0, r3
 8016b3e:	3718      	adds	r7, #24
 8016b40:	46bd      	mov	sp, r7
 8016b42:	bd80      	pop	{r7, pc}
 8016b44:	e000ed00 	.word	0xe000ed00
 8016b48:	410fc271 	.word	0x410fc271
 8016b4c:	410fc270 	.word	0x410fc270
 8016b50:	e000e400 	.word	0xe000e400
 8016b54:	20006380 	.word	0x20006380
 8016b58:	20006384 	.word	0x20006384
 8016b5c:	e000ed20 	.word	0xe000ed20
 8016b60:	200000ec 	.word	0x200000ec
 8016b64:	e000ef34 	.word	0xe000ef34

08016b68 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016b68:	b480      	push	{r7}
 8016b6a:	b083      	sub	sp, #12
 8016b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8016b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016b72:	f383 8811 	msr	BASEPRI, r3
 8016b76:	f3bf 8f6f 	isb	sy
 8016b7a:	f3bf 8f4f 	dsb	sy
 8016b7e:	607b      	str	r3, [r7, #4]
}
 8016b80:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8016b82:	4b10      	ldr	r3, [pc, #64]	@ (8016bc4 <vPortEnterCritical+0x5c>)
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	3301      	adds	r3, #1
 8016b88:	4a0e      	ldr	r2, [pc, #56]	@ (8016bc4 <vPortEnterCritical+0x5c>)
 8016b8a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016b8c:	4b0d      	ldr	r3, [pc, #52]	@ (8016bc4 <vPortEnterCritical+0x5c>)
 8016b8e:	681b      	ldr	r3, [r3, #0]
 8016b90:	2b01      	cmp	r3, #1
 8016b92:	d110      	bne.n	8016bb6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016b94:	4b0c      	ldr	r3, [pc, #48]	@ (8016bc8 <vPortEnterCritical+0x60>)
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	b2db      	uxtb	r3, r3
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d00b      	beq.n	8016bb6 <vPortEnterCritical+0x4e>
	__asm volatile
 8016b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016ba2:	f383 8811 	msr	BASEPRI, r3
 8016ba6:	f3bf 8f6f 	isb	sy
 8016baa:	f3bf 8f4f 	dsb	sy
 8016bae:	603b      	str	r3, [r7, #0]
}
 8016bb0:	bf00      	nop
 8016bb2:	bf00      	nop
 8016bb4:	e7fd      	b.n	8016bb2 <vPortEnterCritical+0x4a>
	}
}
 8016bb6:	bf00      	nop
 8016bb8:	370c      	adds	r7, #12
 8016bba:	46bd      	mov	sp, r7
 8016bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc0:	4770      	bx	lr
 8016bc2:	bf00      	nop
 8016bc4:	200000ec 	.word	0x200000ec
 8016bc8:	e000ed04 	.word	0xe000ed04

08016bcc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8016bcc:	b480      	push	{r7}
 8016bce:	b083      	sub	sp, #12
 8016bd0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8016bd2:	4b12      	ldr	r3, [pc, #72]	@ (8016c1c <vPortExitCritical+0x50>)
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	2b00      	cmp	r3, #0
 8016bd8:	d10b      	bne.n	8016bf2 <vPortExitCritical+0x26>
	__asm volatile
 8016bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016bde:	f383 8811 	msr	BASEPRI, r3
 8016be2:	f3bf 8f6f 	isb	sy
 8016be6:	f3bf 8f4f 	dsb	sy
 8016bea:	607b      	str	r3, [r7, #4]
}
 8016bec:	bf00      	nop
 8016bee:	bf00      	nop
 8016bf0:	e7fd      	b.n	8016bee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8016bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8016c1c <vPortExitCritical+0x50>)
 8016bf4:	681b      	ldr	r3, [r3, #0]
 8016bf6:	3b01      	subs	r3, #1
 8016bf8:	4a08      	ldr	r2, [pc, #32]	@ (8016c1c <vPortExitCritical+0x50>)
 8016bfa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8016bfc:	4b07      	ldr	r3, [pc, #28]	@ (8016c1c <vPortExitCritical+0x50>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	2b00      	cmp	r3, #0
 8016c02:	d105      	bne.n	8016c10 <vPortExitCritical+0x44>
 8016c04:	2300      	movs	r3, #0
 8016c06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016c08:	683b      	ldr	r3, [r7, #0]
 8016c0a:	f383 8811 	msr	BASEPRI, r3
}
 8016c0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8016c10:	bf00      	nop
 8016c12:	370c      	adds	r7, #12
 8016c14:	46bd      	mov	sp, r7
 8016c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c1a:	4770      	bx	lr
 8016c1c:	200000ec 	.word	0x200000ec

08016c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016c20:	f3ef 8009 	mrs	r0, PSP
 8016c24:	f3bf 8f6f 	isb	sy
 8016c28:	4b15      	ldr	r3, [pc, #84]	@ (8016c80 <pxCurrentTCBConst>)
 8016c2a:	681a      	ldr	r2, [r3, #0]
 8016c2c:	f01e 0f10 	tst.w	lr, #16
 8016c30:	bf08      	it	eq
 8016c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c3a:	6010      	str	r0, [r2, #0]
 8016c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016c40:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8016c44:	f380 8811 	msr	BASEPRI, r0
 8016c48:	f3bf 8f4f 	dsb	sy
 8016c4c:	f3bf 8f6f 	isb	sy
 8016c50:	f7fe fd50 	bl	80156f4 <vTaskSwitchContext>
 8016c54:	f04f 0000 	mov.w	r0, #0
 8016c58:	f380 8811 	msr	BASEPRI, r0
 8016c5c:	bc09      	pop	{r0, r3}
 8016c5e:	6819      	ldr	r1, [r3, #0]
 8016c60:	6808      	ldr	r0, [r1, #0]
 8016c62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c66:	f01e 0f10 	tst.w	lr, #16
 8016c6a:	bf08      	it	eq
 8016c6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016c70:	f380 8809 	msr	PSP, r0
 8016c74:	f3bf 8f6f 	isb	sy
 8016c78:	4770      	bx	lr
 8016c7a:	bf00      	nop
 8016c7c:	f3af 8000 	nop.w

08016c80 <pxCurrentTCBConst>:
 8016c80:	20005d54 	.word	0x20005d54
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016c84:	bf00      	nop
 8016c86:	bf00      	nop

08016c88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b082      	sub	sp, #8
 8016c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8016c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016c92:	f383 8811 	msr	BASEPRI, r3
 8016c96:	f3bf 8f6f 	isb	sy
 8016c9a:	f3bf 8f4f 	dsb	sy
 8016c9e:	607b      	str	r3, [r7, #4]
}
 8016ca0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016ca2:	f7fe fc6d 	bl	8015580 <xTaskIncrementTick>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d003      	beq.n	8016cb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8016cac:	4b06      	ldr	r3, [pc, #24]	@ (8016cc8 <xPortSysTickHandler+0x40>)
 8016cae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8016cb2:	601a      	str	r2, [r3, #0]
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016cb8:	683b      	ldr	r3, [r7, #0]
 8016cba:	f383 8811 	msr	BASEPRI, r3
}
 8016cbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8016cc0:	bf00      	nop
 8016cc2:	3708      	adds	r7, #8
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	bd80      	pop	{r7, pc}
 8016cc8:	e000ed04 	.word	0xe000ed04

08016ccc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8016ccc:	b480      	push	{r7}
 8016cce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8016cd0:	4b0b      	ldr	r3, [pc, #44]	@ (8016d00 <vPortSetupTimerInterrupt+0x34>)
 8016cd2:	2200      	movs	r2, #0
 8016cd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8016cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8016d04 <vPortSetupTimerInterrupt+0x38>)
 8016cd8:	2200      	movs	r2, #0
 8016cda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8016cdc:	4b0a      	ldr	r3, [pc, #40]	@ (8016d08 <vPortSetupTimerInterrupt+0x3c>)
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	4a0a      	ldr	r2, [pc, #40]	@ (8016d0c <vPortSetupTimerInterrupt+0x40>)
 8016ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8016ce6:	099b      	lsrs	r3, r3, #6
 8016ce8:	4a09      	ldr	r2, [pc, #36]	@ (8016d10 <vPortSetupTimerInterrupt+0x44>)
 8016cea:	3b01      	subs	r3, #1
 8016cec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8016cee:	4b04      	ldr	r3, [pc, #16]	@ (8016d00 <vPortSetupTimerInterrupt+0x34>)
 8016cf0:	2207      	movs	r2, #7
 8016cf2:	601a      	str	r2, [r3, #0]
}
 8016cf4:	bf00      	nop
 8016cf6:	46bd      	mov	sp, r7
 8016cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cfc:	4770      	bx	lr
 8016cfe:	bf00      	nop
 8016d00:	e000e010 	.word	0xe000e010
 8016d04:	e000e018 	.word	0xe000e018
 8016d08:	20000054 	.word	0x20000054
 8016d0c:	10624dd3 	.word	0x10624dd3
 8016d10:	e000e014 	.word	0xe000e014

08016d14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8016d14:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8016d24 <vPortEnableVFP+0x10>
 8016d18:	6801      	ldr	r1, [r0, #0]
 8016d1a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8016d1e:	6001      	str	r1, [r0, #0]
 8016d20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016d22:	bf00      	nop
 8016d24:	e000ed88 	.word	0xe000ed88

08016d28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016d28:	b480      	push	{r7}
 8016d2a:	b085      	sub	sp, #20
 8016d2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8016d2e:	f3ef 8305 	mrs	r3, IPSR
 8016d32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016d34:	68fb      	ldr	r3, [r7, #12]
 8016d36:	2b0f      	cmp	r3, #15
 8016d38:	d915      	bls.n	8016d66 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8016d3a:	4a18      	ldr	r2, [pc, #96]	@ (8016d9c <vPortValidateInterruptPriority+0x74>)
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	4413      	add	r3, r2
 8016d40:	781b      	ldrb	r3, [r3, #0]
 8016d42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016d44:	4b16      	ldr	r3, [pc, #88]	@ (8016da0 <vPortValidateInterruptPriority+0x78>)
 8016d46:	781b      	ldrb	r3, [r3, #0]
 8016d48:	7afa      	ldrb	r2, [r7, #11]
 8016d4a:	429a      	cmp	r2, r3
 8016d4c:	d20b      	bcs.n	8016d66 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8016d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d52:	f383 8811 	msr	BASEPRI, r3
 8016d56:	f3bf 8f6f 	isb	sy
 8016d5a:	f3bf 8f4f 	dsb	sy
 8016d5e:	607b      	str	r3, [r7, #4]
}
 8016d60:	bf00      	nop
 8016d62:	bf00      	nop
 8016d64:	e7fd      	b.n	8016d62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016d66:	4b0f      	ldr	r3, [pc, #60]	@ (8016da4 <vPortValidateInterruptPriority+0x7c>)
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8016d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8016da8 <vPortValidateInterruptPriority+0x80>)
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	429a      	cmp	r2, r3
 8016d74:	d90b      	bls.n	8016d8e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8016d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016d7a:	f383 8811 	msr	BASEPRI, r3
 8016d7e:	f3bf 8f6f 	isb	sy
 8016d82:	f3bf 8f4f 	dsb	sy
 8016d86:	603b      	str	r3, [r7, #0]
}
 8016d88:	bf00      	nop
 8016d8a:	bf00      	nop
 8016d8c:	e7fd      	b.n	8016d8a <vPortValidateInterruptPriority+0x62>
	}
 8016d8e:	bf00      	nop
 8016d90:	3714      	adds	r7, #20
 8016d92:	46bd      	mov	sp, r7
 8016d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d98:	4770      	bx	lr
 8016d9a:	bf00      	nop
 8016d9c:	e000e3f0 	.word	0xe000e3f0
 8016da0:	20006380 	.word	0x20006380
 8016da4:	e000ed0c 	.word	0xe000ed0c
 8016da8:	20006384 	.word	0x20006384

08016dac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016dac:	b580      	push	{r7, lr}
 8016dae:	b08a      	sub	sp, #40	@ 0x28
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016db4:	2300      	movs	r3, #0
 8016db6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016db8:	f7fe fb26 	bl	8015408 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016dbc:	4b5c      	ldr	r3, [pc, #368]	@ (8016f30 <pvPortMalloc+0x184>)
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d101      	bne.n	8016dc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8016dc4:	f000 f924 	bl	8017010 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8016dc8:	4b5a      	ldr	r3, [pc, #360]	@ (8016f34 <pvPortMalloc+0x188>)
 8016dca:	681a      	ldr	r2, [r3, #0]
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	4013      	ands	r3, r2
 8016dd0:	2b00      	cmp	r3, #0
 8016dd2:	f040 8095 	bne.w	8016f00 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	2b00      	cmp	r3, #0
 8016dda:	d01e      	beq.n	8016e1a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8016ddc:	2208      	movs	r2, #8
 8016dde:	687b      	ldr	r3, [r7, #4]
 8016de0:	4413      	add	r3, r2
 8016de2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	f003 0307 	and.w	r3, r3, #7
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	d015      	beq.n	8016e1a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8016dee:	687b      	ldr	r3, [r7, #4]
 8016df0:	f023 0307 	bic.w	r3, r3, #7
 8016df4:	3308      	adds	r3, #8
 8016df6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	f003 0307 	and.w	r3, r3, #7
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d00b      	beq.n	8016e1a <pvPortMalloc+0x6e>
	__asm volatile
 8016e02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e06:	f383 8811 	msr	BASEPRI, r3
 8016e0a:	f3bf 8f6f 	isb	sy
 8016e0e:	f3bf 8f4f 	dsb	sy
 8016e12:	617b      	str	r3, [r7, #20]
}
 8016e14:	bf00      	nop
 8016e16:	bf00      	nop
 8016e18:	e7fd      	b.n	8016e16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	2b00      	cmp	r3, #0
 8016e1e:	d06f      	beq.n	8016f00 <pvPortMalloc+0x154>
 8016e20:	4b45      	ldr	r3, [pc, #276]	@ (8016f38 <pvPortMalloc+0x18c>)
 8016e22:	681b      	ldr	r3, [r3, #0]
 8016e24:	687a      	ldr	r2, [r7, #4]
 8016e26:	429a      	cmp	r2, r3
 8016e28:	d86a      	bhi.n	8016f00 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016e2a:	4b44      	ldr	r3, [pc, #272]	@ (8016f3c <pvPortMalloc+0x190>)
 8016e2c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016e2e:	4b43      	ldr	r3, [pc, #268]	@ (8016f3c <pvPortMalloc+0x190>)
 8016e30:	681b      	ldr	r3, [r3, #0]
 8016e32:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016e34:	e004      	b.n	8016e40 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8016e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e38:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e3c:	681b      	ldr	r3, [r3, #0]
 8016e3e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8016e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e42:	685b      	ldr	r3, [r3, #4]
 8016e44:	687a      	ldr	r2, [r7, #4]
 8016e46:	429a      	cmp	r2, r3
 8016e48:	d903      	bls.n	8016e52 <pvPortMalloc+0xa6>
 8016e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e4c:	681b      	ldr	r3, [r3, #0]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d1f1      	bne.n	8016e36 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8016e52:	4b37      	ldr	r3, [pc, #220]	@ (8016f30 <pvPortMalloc+0x184>)
 8016e54:	681b      	ldr	r3, [r3, #0]
 8016e56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e58:	429a      	cmp	r2, r3
 8016e5a:	d051      	beq.n	8016f00 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016e5c:	6a3b      	ldr	r3, [r7, #32]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	2208      	movs	r2, #8
 8016e62:	4413      	add	r3, r2
 8016e64:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e68:	681a      	ldr	r2, [r3, #0]
 8016e6a:	6a3b      	ldr	r3, [r7, #32]
 8016e6c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e70:	685a      	ldr	r2, [r3, #4]
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	1ad2      	subs	r2, r2, r3
 8016e76:	2308      	movs	r3, #8
 8016e78:	005b      	lsls	r3, r3, #1
 8016e7a:	429a      	cmp	r2, r3
 8016e7c:	d920      	bls.n	8016ec0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	4413      	add	r3, r2
 8016e84:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016e86:	69bb      	ldr	r3, [r7, #24]
 8016e88:	f003 0307 	and.w	r3, r3, #7
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	d00b      	beq.n	8016ea8 <pvPortMalloc+0xfc>
	__asm volatile
 8016e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016e94:	f383 8811 	msr	BASEPRI, r3
 8016e98:	f3bf 8f6f 	isb	sy
 8016e9c:	f3bf 8f4f 	dsb	sy
 8016ea0:	613b      	str	r3, [r7, #16]
}
 8016ea2:	bf00      	nop
 8016ea4:	bf00      	nop
 8016ea6:	e7fd      	b.n	8016ea4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eaa:	685a      	ldr	r2, [r3, #4]
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	1ad2      	subs	r2, r2, r3
 8016eb0:	69bb      	ldr	r3, [r7, #24]
 8016eb2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8016eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eb6:	687a      	ldr	r2, [r7, #4]
 8016eb8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016eba:	69b8      	ldr	r0, [r7, #24]
 8016ebc:	f000 f90a 	bl	80170d4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016ec0:	4b1d      	ldr	r3, [pc, #116]	@ (8016f38 <pvPortMalloc+0x18c>)
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	1ad3      	subs	r3, r2, r3
 8016eca:	4a1b      	ldr	r2, [pc, #108]	@ (8016f38 <pvPortMalloc+0x18c>)
 8016ecc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8016ece:	4b1a      	ldr	r3, [pc, #104]	@ (8016f38 <pvPortMalloc+0x18c>)
 8016ed0:	681a      	ldr	r2, [r3, #0]
 8016ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8016f40 <pvPortMalloc+0x194>)
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	429a      	cmp	r2, r3
 8016ed8:	d203      	bcs.n	8016ee2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8016eda:	4b17      	ldr	r3, [pc, #92]	@ (8016f38 <pvPortMalloc+0x18c>)
 8016edc:	681b      	ldr	r3, [r3, #0]
 8016ede:	4a18      	ldr	r2, [pc, #96]	@ (8016f40 <pvPortMalloc+0x194>)
 8016ee0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8016ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ee4:	685a      	ldr	r2, [r3, #4]
 8016ee6:	4b13      	ldr	r3, [pc, #76]	@ (8016f34 <pvPortMalloc+0x188>)
 8016ee8:	681b      	ldr	r3, [r3, #0]
 8016eea:	431a      	orrs	r2, r3
 8016eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eee:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ef2:	2200      	movs	r2, #0
 8016ef4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8016ef6:	4b13      	ldr	r3, [pc, #76]	@ (8016f44 <pvPortMalloc+0x198>)
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	3301      	adds	r3, #1
 8016efc:	4a11      	ldr	r2, [pc, #68]	@ (8016f44 <pvPortMalloc+0x198>)
 8016efe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016f00:	f7fe fa90 	bl	8015424 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8016f04:	69fb      	ldr	r3, [r7, #28]
 8016f06:	f003 0307 	and.w	r3, r3, #7
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d00b      	beq.n	8016f26 <pvPortMalloc+0x17a>
	__asm volatile
 8016f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f12:	f383 8811 	msr	BASEPRI, r3
 8016f16:	f3bf 8f6f 	isb	sy
 8016f1a:	f3bf 8f4f 	dsb	sy
 8016f1e:	60fb      	str	r3, [r7, #12]
}
 8016f20:	bf00      	nop
 8016f22:	bf00      	nop
 8016f24:	e7fd      	b.n	8016f22 <pvPortMalloc+0x176>
	return pvReturn;
 8016f26:	69fb      	ldr	r3, [r7, #28]
}
 8016f28:	4618      	mov	r0, r3
 8016f2a:	3728      	adds	r7, #40	@ 0x28
 8016f2c:	46bd      	mov	sp, r7
 8016f2e:	bd80      	pop	{r7, pc}
 8016f30:	20009f90 	.word	0x20009f90
 8016f34:	20009fa4 	.word	0x20009fa4
 8016f38:	20009f94 	.word	0x20009f94
 8016f3c:	20009f88 	.word	0x20009f88
 8016f40:	20009f98 	.word	0x20009f98
 8016f44:	20009f9c 	.word	0x20009f9c

08016f48 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016f48:	b580      	push	{r7, lr}
 8016f4a:	b086      	sub	sp, #24
 8016f4c:	af00      	add	r7, sp, #0
 8016f4e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d04f      	beq.n	8016ffa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016f5a:	2308      	movs	r3, #8
 8016f5c:	425b      	negs	r3, r3
 8016f5e:	697a      	ldr	r2, [r7, #20]
 8016f60:	4413      	add	r3, r2
 8016f62:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016f64:	697b      	ldr	r3, [r7, #20]
 8016f66:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016f68:	693b      	ldr	r3, [r7, #16]
 8016f6a:	685a      	ldr	r2, [r3, #4]
 8016f6c:	4b25      	ldr	r3, [pc, #148]	@ (8017004 <vPortFree+0xbc>)
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	4013      	ands	r3, r2
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d10b      	bne.n	8016f8e <vPortFree+0x46>
	__asm volatile
 8016f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f7a:	f383 8811 	msr	BASEPRI, r3
 8016f7e:	f3bf 8f6f 	isb	sy
 8016f82:	f3bf 8f4f 	dsb	sy
 8016f86:	60fb      	str	r3, [r7, #12]
}
 8016f88:	bf00      	nop
 8016f8a:	bf00      	nop
 8016f8c:	e7fd      	b.n	8016f8a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016f8e:	693b      	ldr	r3, [r7, #16]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d00b      	beq.n	8016fae <vPortFree+0x66>
	__asm volatile
 8016f96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8016f9a:	f383 8811 	msr	BASEPRI, r3
 8016f9e:	f3bf 8f6f 	isb	sy
 8016fa2:	f3bf 8f4f 	dsb	sy
 8016fa6:	60bb      	str	r3, [r7, #8]
}
 8016fa8:	bf00      	nop
 8016faa:	bf00      	nop
 8016fac:	e7fd      	b.n	8016faa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016fae:	693b      	ldr	r3, [r7, #16]
 8016fb0:	685a      	ldr	r2, [r3, #4]
 8016fb2:	4b14      	ldr	r3, [pc, #80]	@ (8017004 <vPortFree+0xbc>)
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	4013      	ands	r3, r2
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	d01e      	beq.n	8016ffa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016fbc:	693b      	ldr	r3, [r7, #16]
 8016fbe:	681b      	ldr	r3, [r3, #0]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d11a      	bne.n	8016ffa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016fc4:	693b      	ldr	r3, [r7, #16]
 8016fc6:	685a      	ldr	r2, [r3, #4]
 8016fc8:	4b0e      	ldr	r3, [pc, #56]	@ (8017004 <vPortFree+0xbc>)
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	43db      	mvns	r3, r3
 8016fce:	401a      	ands	r2, r3
 8016fd0:	693b      	ldr	r3, [r7, #16]
 8016fd2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016fd4:	f7fe fa18 	bl	8015408 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016fd8:	693b      	ldr	r3, [r7, #16]
 8016fda:	685a      	ldr	r2, [r3, #4]
 8016fdc:	4b0a      	ldr	r3, [pc, #40]	@ (8017008 <vPortFree+0xc0>)
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	4413      	add	r3, r2
 8016fe2:	4a09      	ldr	r2, [pc, #36]	@ (8017008 <vPortFree+0xc0>)
 8016fe4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016fe6:	6938      	ldr	r0, [r7, #16]
 8016fe8:	f000 f874 	bl	80170d4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016fec:	4b07      	ldr	r3, [pc, #28]	@ (801700c <vPortFree+0xc4>)
 8016fee:	681b      	ldr	r3, [r3, #0]
 8016ff0:	3301      	adds	r3, #1
 8016ff2:	4a06      	ldr	r2, [pc, #24]	@ (801700c <vPortFree+0xc4>)
 8016ff4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016ff6:	f7fe fa15 	bl	8015424 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016ffa:	bf00      	nop
 8016ffc:	3718      	adds	r7, #24
 8016ffe:	46bd      	mov	sp, r7
 8017000:	bd80      	pop	{r7, pc}
 8017002:	bf00      	nop
 8017004:	20009fa4 	.word	0x20009fa4
 8017008:	20009f94 	.word	0x20009f94
 801700c:	20009fa0 	.word	0x20009fa0

08017010 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8017010:	b480      	push	{r7}
 8017012:	b085      	sub	sp, #20
 8017014:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8017016:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 801701a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801701c:	4b27      	ldr	r3, [pc, #156]	@ (80170bc <prvHeapInit+0xac>)
 801701e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	f003 0307 	and.w	r3, r3, #7
 8017026:	2b00      	cmp	r3, #0
 8017028:	d00c      	beq.n	8017044 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	3307      	adds	r3, #7
 801702e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	f023 0307 	bic.w	r3, r3, #7
 8017036:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8017038:	68ba      	ldr	r2, [r7, #8]
 801703a:	68fb      	ldr	r3, [r7, #12]
 801703c:	1ad3      	subs	r3, r2, r3
 801703e:	4a1f      	ldr	r2, [pc, #124]	@ (80170bc <prvHeapInit+0xac>)
 8017040:	4413      	add	r3, r2
 8017042:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8017048:	4a1d      	ldr	r2, [pc, #116]	@ (80170c0 <prvHeapInit+0xb0>)
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801704e:	4b1c      	ldr	r3, [pc, #112]	@ (80170c0 <prvHeapInit+0xb0>)
 8017050:	2200      	movs	r2, #0
 8017052:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8017054:	687b      	ldr	r3, [r7, #4]
 8017056:	68ba      	ldr	r2, [r7, #8]
 8017058:	4413      	add	r3, r2
 801705a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801705c:	2208      	movs	r2, #8
 801705e:	68fb      	ldr	r3, [r7, #12]
 8017060:	1a9b      	subs	r3, r3, r2
 8017062:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	f023 0307 	bic.w	r3, r3, #7
 801706a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	4a15      	ldr	r2, [pc, #84]	@ (80170c4 <prvHeapInit+0xb4>)
 8017070:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8017072:	4b14      	ldr	r3, [pc, #80]	@ (80170c4 <prvHeapInit+0xb4>)
 8017074:	681b      	ldr	r3, [r3, #0]
 8017076:	2200      	movs	r2, #0
 8017078:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801707a:	4b12      	ldr	r3, [pc, #72]	@ (80170c4 <prvHeapInit+0xb4>)
 801707c:	681b      	ldr	r3, [r3, #0]
 801707e:	2200      	movs	r2, #0
 8017080:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8017082:	687b      	ldr	r3, [r7, #4]
 8017084:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8017086:	683b      	ldr	r3, [r7, #0]
 8017088:	68fa      	ldr	r2, [r7, #12]
 801708a:	1ad2      	subs	r2, r2, r3
 801708c:	683b      	ldr	r3, [r7, #0]
 801708e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8017090:	4b0c      	ldr	r3, [pc, #48]	@ (80170c4 <prvHeapInit+0xb4>)
 8017092:	681a      	ldr	r2, [r3, #0]
 8017094:	683b      	ldr	r3, [r7, #0]
 8017096:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8017098:	683b      	ldr	r3, [r7, #0]
 801709a:	685b      	ldr	r3, [r3, #4]
 801709c:	4a0a      	ldr	r2, [pc, #40]	@ (80170c8 <prvHeapInit+0xb8>)
 801709e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80170a0:	683b      	ldr	r3, [r7, #0]
 80170a2:	685b      	ldr	r3, [r3, #4]
 80170a4:	4a09      	ldr	r2, [pc, #36]	@ (80170cc <prvHeapInit+0xbc>)
 80170a6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80170a8:	4b09      	ldr	r3, [pc, #36]	@ (80170d0 <prvHeapInit+0xc0>)
 80170aa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80170ae:	601a      	str	r2, [r3, #0]
}
 80170b0:	bf00      	nop
 80170b2:	3714      	adds	r7, #20
 80170b4:	46bd      	mov	sp, r7
 80170b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170ba:	4770      	bx	lr
 80170bc:	20006388 	.word	0x20006388
 80170c0:	20009f88 	.word	0x20009f88
 80170c4:	20009f90 	.word	0x20009f90
 80170c8:	20009f98 	.word	0x20009f98
 80170cc:	20009f94 	.word	0x20009f94
 80170d0:	20009fa4 	.word	0x20009fa4

080170d4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80170d4:	b480      	push	{r7}
 80170d6:	b085      	sub	sp, #20
 80170d8:	af00      	add	r7, sp, #0
 80170da:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80170dc:	4b28      	ldr	r3, [pc, #160]	@ (8017180 <prvInsertBlockIntoFreeList+0xac>)
 80170de:	60fb      	str	r3, [r7, #12]
 80170e0:	e002      	b.n	80170e8 <prvInsertBlockIntoFreeList+0x14>
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	681b      	ldr	r3, [r3, #0]
 80170e6:	60fb      	str	r3, [r7, #12]
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	687a      	ldr	r2, [r7, #4]
 80170ee:	429a      	cmp	r2, r3
 80170f0:	d8f7      	bhi.n	80170e2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80170f2:	68fb      	ldr	r3, [r7, #12]
 80170f4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	685b      	ldr	r3, [r3, #4]
 80170fa:	68ba      	ldr	r2, [r7, #8]
 80170fc:	4413      	add	r3, r2
 80170fe:	687a      	ldr	r2, [r7, #4]
 8017100:	429a      	cmp	r2, r3
 8017102:	d108      	bne.n	8017116 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	685a      	ldr	r2, [r3, #4]
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	685b      	ldr	r3, [r3, #4]
 801710c:	441a      	add	r2, r3
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	685b      	ldr	r3, [r3, #4]
 801711e:	68ba      	ldr	r2, [r7, #8]
 8017120:	441a      	add	r2, r3
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	429a      	cmp	r2, r3
 8017128:	d118      	bne.n	801715c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801712a:	68fb      	ldr	r3, [r7, #12]
 801712c:	681a      	ldr	r2, [r3, #0]
 801712e:	4b15      	ldr	r3, [pc, #84]	@ (8017184 <prvInsertBlockIntoFreeList+0xb0>)
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	429a      	cmp	r2, r3
 8017134:	d00d      	beq.n	8017152 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	685a      	ldr	r2, [r3, #4]
 801713a:	68fb      	ldr	r3, [r7, #12]
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	685b      	ldr	r3, [r3, #4]
 8017140:	441a      	add	r2, r3
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	681a      	ldr	r2, [r3, #0]
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	601a      	str	r2, [r3, #0]
 8017150:	e008      	b.n	8017164 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8017152:	4b0c      	ldr	r3, [pc, #48]	@ (8017184 <prvInsertBlockIntoFreeList+0xb0>)
 8017154:	681a      	ldr	r2, [r3, #0]
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	601a      	str	r2, [r3, #0]
 801715a:	e003      	b.n	8017164 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	681a      	ldr	r2, [r3, #0]
 8017160:	687b      	ldr	r3, [r7, #4]
 8017162:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8017164:	68fa      	ldr	r2, [r7, #12]
 8017166:	687b      	ldr	r3, [r7, #4]
 8017168:	429a      	cmp	r2, r3
 801716a:	d002      	beq.n	8017172 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	687a      	ldr	r2, [r7, #4]
 8017170:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8017172:	bf00      	nop
 8017174:	3714      	adds	r7, #20
 8017176:	46bd      	mov	sp, r7
 8017178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801717c:	4770      	bx	lr
 801717e:	bf00      	nop
 8017180:	20009f88 	.word	0x20009f88
 8017184:	20009f90 	.word	0x20009f90

08017188 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017188:	b580      	push	{r7, lr}
 801718a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801718c:	2200      	movs	r2, #0
 801718e:	4912      	ldr	r1, [pc, #72]	@ (80171d8 <MX_USB_DEVICE_Init+0x50>)
 8017190:	4812      	ldr	r0, [pc, #72]	@ (80171dc <MX_USB_DEVICE_Init+0x54>)
 8017192:	f7fb fb1f 	bl	80127d4 <USBD_Init>
 8017196:	4603      	mov	r3, r0
 8017198:	2b00      	cmp	r3, #0
 801719a:	d001      	beq.n	80171a0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801719c:	f7f1 faac 	bl	80086f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80171a0:	490f      	ldr	r1, [pc, #60]	@ (80171e0 <MX_USB_DEVICE_Init+0x58>)
 80171a2:	480e      	ldr	r0, [pc, #56]	@ (80171dc <MX_USB_DEVICE_Init+0x54>)
 80171a4:	f7fb fb46 	bl	8012834 <USBD_RegisterClass>
 80171a8:	4603      	mov	r3, r0
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d001      	beq.n	80171b2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80171ae:	f7f1 faa3 	bl	80086f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80171b2:	490c      	ldr	r1, [pc, #48]	@ (80171e4 <MX_USB_DEVICE_Init+0x5c>)
 80171b4:	4809      	ldr	r0, [pc, #36]	@ (80171dc <MX_USB_DEVICE_Init+0x54>)
 80171b6:	f7fb fa7d 	bl	80126b4 <USBD_CDC_RegisterInterface>
 80171ba:	4603      	mov	r3, r0
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d001      	beq.n	80171c4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80171c0:	f7f1 fa9a 	bl	80086f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80171c4:	4805      	ldr	r0, [pc, #20]	@ (80171dc <MX_USB_DEVICE_Init+0x54>)
 80171c6:	f7fb fb6b 	bl	80128a0 <USBD_Start>
 80171ca:	4603      	mov	r3, r0
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d001      	beq.n	80171d4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80171d0:	f7f1 fa92 	bl	80086f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80171d4:	bf00      	nop
 80171d6:	bd80      	pop	{r7, pc}
 80171d8:	20000104 	.word	0x20000104
 80171dc:	20009fa8 	.word	0x20009fa8
 80171e0:	2000006c 	.word	0x2000006c
 80171e4:	200000f0 	.word	0x200000f0

080171e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80171ec:	2200      	movs	r2, #0
 80171ee:	4905      	ldr	r1, [pc, #20]	@ (8017204 <CDC_Init_FS+0x1c>)
 80171f0:	4805      	ldr	r0, [pc, #20]	@ (8017208 <CDC_Init_FS+0x20>)
 80171f2:	f7fb fa79 	bl	80126e8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80171f6:	4905      	ldr	r1, [pc, #20]	@ (801720c <CDC_Init_FS+0x24>)
 80171f8:	4803      	ldr	r0, [pc, #12]	@ (8017208 <CDC_Init_FS+0x20>)
 80171fa:	f7fb fa97 	bl	801272c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80171fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017200:	4618      	mov	r0, r3
 8017202:	bd80      	pop	{r7, pc}
 8017204:	2000aa84 	.word	0x2000aa84
 8017208:	20009fa8 	.word	0x20009fa8
 801720c:	2000a284 	.word	0x2000a284

08017210 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017210:	b480      	push	{r7}
 8017212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017214:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017216:	4618      	mov	r0, r3
 8017218:	46bd      	mov	sp, r7
 801721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721e:	4770      	bx	lr

08017220 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017220:	b480      	push	{r7}
 8017222:	b083      	sub	sp, #12
 8017224:	af00      	add	r7, sp, #0
 8017226:	4603      	mov	r3, r0
 8017228:	6039      	str	r1, [r7, #0]
 801722a:	71fb      	strb	r3, [r7, #7]
 801722c:	4613      	mov	r3, r2
 801722e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017230:	79fb      	ldrb	r3, [r7, #7]
 8017232:	2b23      	cmp	r3, #35	@ 0x23
 8017234:	d84a      	bhi.n	80172cc <CDC_Control_FS+0xac>
 8017236:	a201      	add	r2, pc, #4	@ (adr r2, 801723c <CDC_Control_FS+0x1c>)
 8017238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801723c:	080172cd 	.word	0x080172cd
 8017240:	080172cd 	.word	0x080172cd
 8017244:	080172cd 	.word	0x080172cd
 8017248:	080172cd 	.word	0x080172cd
 801724c:	080172cd 	.word	0x080172cd
 8017250:	080172cd 	.word	0x080172cd
 8017254:	080172cd 	.word	0x080172cd
 8017258:	080172cd 	.word	0x080172cd
 801725c:	080172cd 	.word	0x080172cd
 8017260:	080172cd 	.word	0x080172cd
 8017264:	080172cd 	.word	0x080172cd
 8017268:	080172cd 	.word	0x080172cd
 801726c:	080172cd 	.word	0x080172cd
 8017270:	080172cd 	.word	0x080172cd
 8017274:	080172cd 	.word	0x080172cd
 8017278:	080172cd 	.word	0x080172cd
 801727c:	080172cd 	.word	0x080172cd
 8017280:	080172cd 	.word	0x080172cd
 8017284:	080172cd 	.word	0x080172cd
 8017288:	080172cd 	.word	0x080172cd
 801728c:	080172cd 	.word	0x080172cd
 8017290:	080172cd 	.word	0x080172cd
 8017294:	080172cd 	.word	0x080172cd
 8017298:	080172cd 	.word	0x080172cd
 801729c:	080172cd 	.word	0x080172cd
 80172a0:	080172cd 	.word	0x080172cd
 80172a4:	080172cd 	.word	0x080172cd
 80172a8:	080172cd 	.word	0x080172cd
 80172ac:	080172cd 	.word	0x080172cd
 80172b0:	080172cd 	.word	0x080172cd
 80172b4:	080172cd 	.word	0x080172cd
 80172b8:	080172cd 	.word	0x080172cd
 80172bc:	080172cd 	.word	0x080172cd
 80172c0:	080172cd 	.word	0x080172cd
 80172c4:	080172cd 	.word	0x080172cd
 80172c8:	080172cd 	.word	0x080172cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80172cc:	bf00      	nop
  }

  return (USBD_OK);
 80172ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80172d0:	4618      	mov	r0, r3
 80172d2:	370c      	adds	r7, #12
 80172d4:	46bd      	mov	sp, r7
 80172d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172da:	4770      	bx	lr

080172dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80172dc:	b580      	push	{r7, lr}
 80172de:	b082      	sub	sp, #8
 80172e0:	af00      	add	r7, sp, #0
 80172e2:	6078      	str	r0, [r7, #4]
 80172e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80172e6:	6879      	ldr	r1, [r7, #4]
 80172e8:	4805      	ldr	r0, [pc, #20]	@ (8017300 <CDC_Receive_FS+0x24>)
 80172ea:	f7fb fa1f 	bl	801272c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80172ee:	4804      	ldr	r0, [pc, #16]	@ (8017300 <CDC_Receive_FS+0x24>)
 80172f0:	f7fb fa3a 	bl	8012768 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80172f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80172f6:	4618      	mov	r0, r3
 80172f8:	3708      	adds	r7, #8
 80172fa:	46bd      	mov	sp, r7
 80172fc:	bd80      	pop	{r7, pc}
 80172fe:	bf00      	nop
 8017300:	20009fa8 	.word	0x20009fa8

08017304 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8017304:	b480      	push	{r7}
 8017306:	b087      	sub	sp, #28
 8017308:	af00      	add	r7, sp, #0
 801730a:	60f8      	str	r0, [r7, #12]
 801730c:	60b9      	str	r1, [r7, #8]
 801730e:	4613      	mov	r3, r2
 8017310:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8017312:	2300      	movs	r3, #0
 8017314:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8017316:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801731a:	4618      	mov	r0, r3
 801731c:	371c      	adds	r7, #28
 801731e:	46bd      	mov	sp, r7
 8017320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017324:	4770      	bx	lr
	...

08017328 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017328:	b480      	push	{r7}
 801732a:	b083      	sub	sp, #12
 801732c:	af00      	add	r7, sp, #0
 801732e:	4603      	mov	r3, r0
 8017330:	6039      	str	r1, [r7, #0]
 8017332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017334:	683b      	ldr	r3, [r7, #0]
 8017336:	2212      	movs	r2, #18
 8017338:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801733a:	4b03      	ldr	r3, [pc, #12]	@ (8017348 <USBD_FS_DeviceDescriptor+0x20>)
}
 801733c:	4618      	mov	r0, r3
 801733e:	370c      	adds	r7, #12
 8017340:	46bd      	mov	sp, r7
 8017342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017346:	4770      	bx	lr
 8017348:	20000120 	.word	0x20000120

0801734c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801734c:	b480      	push	{r7}
 801734e:	b083      	sub	sp, #12
 8017350:	af00      	add	r7, sp, #0
 8017352:	4603      	mov	r3, r0
 8017354:	6039      	str	r1, [r7, #0]
 8017356:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017358:	683b      	ldr	r3, [r7, #0]
 801735a:	2204      	movs	r2, #4
 801735c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801735e:	4b03      	ldr	r3, [pc, #12]	@ (801736c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017360:	4618      	mov	r0, r3
 8017362:	370c      	adds	r7, #12
 8017364:	46bd      	mov	sp, r7
 8017366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801736a:	4770      	bx	lr
 801736c:	20000134 	.word	0x20000134

08017370 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017370:	b580      	push	{r7, lr}
 8017372:	b082      	sub	sp, #8
 8017374:	af00      	add	r7, sp, #0
 8017376:	4603      	mov	r3, r0
 8017378:	6039      	str	r1, [r7, #0]
 801737a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801737c:	79fb      	ldrb	r3, [r7, #7]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d105      	bne.n	801738e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017382:	683a      	ldr	r2, [r7, #0]
 8017384:	4907      	ldr	r1, [pc, #28]	@ (80173a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8017386:	4808      	ldr	r0, [pc, #32]	@ (80173a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8017388:	f7fc fc3a 	bl	8013c00 <USBD_GetString>
 801738c:	e004      	b.n	8017398 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801738e:	683a      	ldr	r2, [r7, #0]
 8017390:	4904      	ldr	r1, [pc, #16]	@ (80173a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8017392:	4805      	ldr	r0, [pc, #20]	@ (80173a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8017394:	f7fc fc34 	bl	8013c00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017398:	4b02      	ldr	r3, [pc, #8]	@ (80173a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801739a:	4618      	mov	r0, r3
 801739c:	3708      	adds	r7, #8
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	2000b284 	.word	0x2000b284
 80173a8:	0802062c 	.word	0x0802062c

080173ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b082      	sub	sp, #8
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	4603      	mov	r3, r0
 80173b4:	6039      	str	r1, [r7, #0]
 80173b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80173b8:	683a      	ldr	r2, [r7, #0]
 80173ba:	4904      	ldr	r1, [pc, #16]	@ (80173cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80173bc:	4804      	ldr	r0, [pc, #16]	@ (80173d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80173be:	f7fc fc1f 	bl	8013c00 <USBD_GetString>
  return USBD_StrDesc;
 80173c2:	4b02      	ldr	r3, [pc, #8]	@ (80173cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80173c4:	4618      	mov	r0, r3
 80173c6:	3708      	adds	r7, #8
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}
 80173cc:	2000b284 	.word	0x2000b284
 80173d0:	08020644 	.word	0x08020644

080173d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173d4:	b580      	push	{r7, lr}
 80173d6:	b082      	sub	sp, #8
 80173d8:	af00      	add	r7, sp, #0
 80173da:	4603      	mov	r3, r0
 80173dc:	6039      	str	r1, [r7, #0]
 80173de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80173e0:	683b      	ldr	r3, [r7, #0]
 80173e2:	221a      	movs	r2, #26
 80173e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80173e6:	f000 f843 	bl	8017470 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80173ea:	4b02      	ldr	r3, [pc, #8]	@ (80173f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80173ec:	4618      	mov	r0, r3
 80173ee:	3708      	adds	r7, #8
 80173f0:	46bd      	mov	sp, r7
 80173f2:	bd80      	pop	{r7, pc}
 80173f4:	20000138 	.word	0x20000138

080173f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173f8:	b580      	push	{r7, lr}
 80173fa:	b082      	sub	sp, #8
 80173fc:	af00      	add	r7, sp, #0
 80173fe:	4603      	mov	r3, r0
 8017400:	6039      	str	r1, [r7, #0]
 8017402:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017404:	79fb      	ldrb	r3, [r7, #7]
 8017406:	2b00      	cmp	r3, #0
 8017408:	d105      	bne.n	8017416 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801740a:	683a      	ldr	r2, [r7, #0]
 801740c:	4907      	ldr	r1, [pc, #28]	@ (801742c <USBD_FS_ConfigStrDescriptor+0x34>)
 801740e:	4808      	ldr	r0, [pc, #32]	@ (8017430 <USBD_FS_ConfigStrDescriptor+0x38>)
 8017410:	f7fc fbf6 	bl	8013c00 <USBD_GetString>
 8017414:	e004      	b.n	8017420 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017416:	683a      	ldr	r2, [r7, #0]
 8017418:	4904      	ldr	r1, [pc, #16]	@ (801742c <USBD_FS_ConfigStrDescriptor+0x34>)
 801741a:	4805      	ldr	r0, [pc, #20]	@ (8017430 <USBD_FS_ConfigStrDescriptor+0x38>)
 801741c:	f7fc fbf0 	bl	8013c00 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017420:	4b02      	ldr	r3, [pc, #8]	@ (801742c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017422:	4618      	mov	r0, r3
 8017424:	3708      	adds	r7, #8
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	2000b284 	.word	0x2000b284
 8017430:	08020658 	.word	0x08020658

08017434 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017434:	b580      	push	{r7, lr}
 8017436:	b082      	sub	sp, #8
 8017438:	af00      	add	r7, sp, #0
 801743a:	4603      	mov	r3, r0
 801743c:	6039      	str	r1, [r7, #0]
 801743e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017440:	79fb      	ldrb	r3, [r7, #7]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d105      	bne.n	8017452 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017446:	683a      	ldr	r2, [r7, #0]
 8017448:	4907      	ldr	r1, [pc, #28]	@ (8017468 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801744a:	4808      	ldr	r0, [pc, #32]	@ (801746c <USBD_FS_InterfaceStrDescriptor+0x38>)
 801744c:	f7fc fbd8 	bl	8013c00 <USBD_GetString>
 8017450:	e004      	b.n	801745c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017452:	683a      	ldr	r2, [r7, #0]
 8017454:	4904      	ldr	r1, [pc, #16]	@ (8017468 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017456:	4805      	ldr	r0, [pc, #20]	@ (801746c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017458:	f7fc fbd2 	bl	8013c00 <USBD_GetString>
  }
  return USBD_StrDesc;
 801745c:	4b02      	ldr	r3, [pc, #8]	@ (8017468 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801745e:	4618      	mov	r0, r3
 8017460:	3708      	adds	r7, #8
 8017462:	46bd      	mov	sp, r7
 8017464:	bd80      	pop	{r7, pc}
 8017466:	bf00      	nop
 8017468:	2000b284 	.word	0x2000b284
 801746c:	08020664 	.word	0x08020664

08017470 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017470:	b580      	push	{r7, lr}
 8017472:	b084      	sub	sp, #16
 8017474:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017476:	4b0f      	ldr	r3, [pc, #60]	@ (80174b4 <Get_SerialNum+0x44>)
 8017478:	681b      	ldr	r3, [r3, #0]
 801747a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801747c:	4b0e      	ldr	r3, [pc, #56]	@ (80174b8 <Get_SerialNum+0x48>)
 801747e:	681b      	ldr	r3, [r3, #0]
 8017480:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017482:	4b0e      	ldr	r3, [pc, #56]	@ (80174bc <Get_SerialNum+0x4c>)
 8017484:	681b      	ldr	r3, [r3, #0]
 8017486:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017488:	68fa      	ldr	r2, [r7, #12]
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	4413      	add	r3, r2
 801748e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d009      	beq.n	80174aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017496:	2208      	movs	r2, #8
 8017498:	4909      	ldr	r1, [pc, #36]	@ (80174c0 <Get_SerialNum+0x50>)
 801749a:	68f8      	ldr	r0, [r7, #12]
 801749c:	f000 f814 	bl	80174c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80174a0:	2204      	movs	r2, #4
 80174a2:	4908      	ldr	r1, [pc, #32]	@ (80174c4 <Get_SerialNum+0x54>)
 80174a4:	68b8      	ldr	r0, [r7, #8]
 80174a6:	f000 f80f 	bl	80174c8 <IntToUnicode>
  }
}
 80174aa:	bf00      	nop
 80174ac:	3710      	adds	r7, #16
 80174ae:	46bd      	mov	sp, r7
 80174b0:	bd80      	pop	{r7, pc}
 80174b2:	bf00      	nop
 80174b4:	1fff7a10 	.word	0x1fff7a10
 80174b8:	1fff7a14 	.word	0x1fff7a14
 80174bc:	1fff7a18 	.word	0x1fff7a18
 80174c0:	2000013a 	.word	0x2000013a
 80174c4:	2000014a 	.word	0x2000014a

080174c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80174c8:	b480      	push	{r7}
 80174ca:	b087      	sub	sp, #28
 80174cc:	af00      	add	r7, sp, #0
 80174ce:	60f8      	str	r0, [r7, #12]
 80174d0:	60b9      	str	r1, [r7, #8]
 80174d2:	4613      	mov	r3, r2
 80174d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80174d6:	2300      	movs	r3, #0
 80174d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80174da:	2300      	movs	r3, #0
 80174dc:	75fb      	strb	r3, [r7, #23]
 80174de:	e027      	b.n	8017530 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80174e0:	68fb      	ldr	r3, [r7, #12]
 80174e2:	0f1b      	lsrs	r3, r3, #28
 80174e4:	2b09      	cmp	r3, #9
 80174e6:	d80b      	bhi.n	8017500 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	0f1b      	lsrs	r3, r3, #28
 80174ec:	b2da      	uxtb	r2, r3
 80174ee:	7dfb      	ldrb	r3, [r7, #23]
 80174f0:	005b      	lsls	r3, r3, #1
 80174f2:	4619      	mov	r1, r3
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	440b      	add	r3, r1
 80174f8:	3230      	adds	r2, #48	@ 0x30
 80174fa:	b2d2      	uxtb	r2, r2
 80174fc:	701a      	strb	r2, [r3, #0]
 80174fe:	e00a      	b.n	8017516 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017500:	68fb      	ldr	r3, [r7, #12]
 8017502:	0f1b      	lsrs	r3, r3, #28
 8017504:	b2da      	uxtb	r2, r3
 8017506:	7dfb      	ldrb	r3, [r7, #23]
 8017508:	005b      	lsls	r3, r3, #1
 801750a:	4619      	mov	r1, r3
 801750c:	68bb      	ldr	r3, [r7, #8]
 801750e:	440b      	add	r3, r1
 8017510:	3237      	adds	r2, #55	@ 0x37
 8017512:	b2d2      	uxtb	r2, r2
 8017514:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	011b      	lsls	r3, r3, #4
 801751a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801751c:	7dfb      	ldrb	r3, [r7, #23]
 801751e:	005b      	lsls	r3, r3, #1
 8017520:	3301      	adds	r3, #1
 8017522:	68ba      	ldr	r2, [r7, #8]
 8017524:	4413      	add	r3, r2
 8017526:	2200      	movs	r2, #0
 8017528:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801752a:	7dfb      	ldrb	r3, [r7, #23]
 801752c:	3301      	adds	r3, #1
 801752e:	75fb      	strb	r3, [r7, #23]
 8017530:	7dfa      	ldrb	r2, [r7, #23]
 8017532:	79fb      	ldrb	r3, [r7, #7]
 8017534:	429a      	cmp	r2, r3
 8017536:	d3d3      	bcc.n	80174e0 <IntToUnicode+0x18>
  }
}
 8017538:	bf00      	nop
 801753a:	bf00      	nop
 801753c:	371c      	adds	r7, #28
 801753e:	46bd      	mov	sp, r7
 8017540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017544:	4770      	bx	lr
	...

08017548 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017548:	b580      	push	{r7, lr}
 801754a:	b08a      	sub	sp, #40	@ 0x28
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017550:	f107 0314 	add.w	r3, r7, #20
 8017554:	2200      	movs	r2, #0
 8017556:	601a      	str	r2, [r3, #0]
 8017558:	605a      	str	r2, [r3, #4]
 801755a:	609a      	str	r2, [r3, #8]
 801755c:	60da      	str	r2, [r3, #12]
 801755e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017560:	687b      	ldr	r3, [r7, #4]
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8017568:	d13a      	bne.n	80175e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801756a:	2300      	movs	r3, #0
 801756c:	613b      	str	r3, [r7, #16]
 801756e:	4b1e      	ldr	r3, [pc, #120]	@ (80175e8 <HAL_PCD_MspInit+0xa0>)
 8017570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017572:	4a1d      	ldr	r2, [pc, #116]	@ (80175e8 <HAL_PCD_MspInit+0xa0>)
 8017574:	f043 0301 	orr.w	r3, r3, #1
 8017578:	6313      	str	r3, [r2, #48]	@ 0x30
 801757a:	4b1b      	ldr	r3, [pc, #108]	@ (80175e8 <HAL_PCD_MspInit+0xa0>)
 801757c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801757e:	f003 0301 	and.w	r3, r3, #1
 8017582:	613b      	str	r3, [r7, #16]
 8017584:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8017586:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 801758a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801758c:	2302      	movs	r3, #2
 801758e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017590:	2300      	movs	r3, #0
 8017592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017594:	2303      	movs	r3, #3
 8017596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017598:	230a      	movs	r3, #10
 801759a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801759c:	f107 0314 	add.w	r3, r7, #20
 80175a0:	4619      	mov	r1, r3
 80175a2:	4812      	ldr	r0, [pc, #72]	@ (80175ec <HAL_PCD_MspInit+0xa4>)
 80175a4:	f7f3 feb0 	bl	800b308 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80175a8:	4b0f      	ldr	r3, [pc, #60]	@ (80175e8 <HAL_PCD_MspInit+0xa0>)
 80175aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80175ac:	4a0e      	ldr	r2, [pc, #56]	@ (80175e8 <HAL_PCD_MspInit+0xa0>)
 80175ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80175b2:	6353      	str	r3, [r2, #52]	@ 0x34
 80175b4:	2300      	movs	r3, #0
 80175b6:	60fb      	str	r3, [r7, #12]
 80175b8:	4b0b      	ldr	r3, [pc, #44]	@ (80175e8 <HAL_PCD_MspInit+0xa0>)
 80175ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175bc:	4a0a      	ldr	r2, [pc, #40]	@ (80175e8 <HAL_PCD_MspInit+0xa0>)
 80175be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80175c2:	6453      	str	r3, [r2, #68]	@ 0x44
 80175c4:	4b08      	ldr	r3, [pc, #32]	@ (80175e8 <HAL_PCD_MspInit+0xa0>)
 80175c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80175cc:	60fb      	str	r3, [r7, #12]
 80175ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 80175d0:	2200      	movs	r2, #0
 80175d2:	2105      	movs	r1, #5
 80175d4:	2043      	movs	r0, #67	@ 0x43
 80175d6:	f7f3 f9ff 	bl	800a9d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80175da:	2043      	movs	r0, #67	@ 0x43
 80175dc:	f7f3 fa18 	bl	800aa10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80175e0:	bf00      	nop
 80175e2:	3728      	adds	r7, #40	@ 0x28
 80175e4:	46bd      	mov	sp, r7
 80175e6:	bd80      	pop	{r7, pc}
 80175e8:	40023800 	.word	0x40023800
 80175ec:	40020000 	.word	0x40020000

080175f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175f0:	b580      	push	{r7, lr}
 80175f2:	b082      	sub	sp, #8
 80175f4:	af00      	add	r7, sp, #0
 80175f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80175f8:	687b      	ldr	r3, [r7, #4]
 80175fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80175fe:	687b      	ldr	r3, [r7, #4]
 8017600:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8017604:	4619      	mov	r1, r3
 8017606:	4610      	mov	r0, r2
 8017608:	f7fb f997 	bl	801293a <USBD_LL_SetupStage>
}
 801760c:	bf00      	nop
 801760e:	3708      	adds	r7, #8
 8017610:	46bd      	mov	sp, r7
 8017612:	bd80      	pop	{r7, pc}

08017614 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017614:	b580      	push	{r7, lr}
 8017616:	b082      	sub	sp, #8
 8017618:	af00      	add	r7, sp, #0
 801761a:	6078      	str	r0, [r7, #4]
 801761c:	460b      	mov	r3, r1
 801761e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017620:	687b      	ldr	r3, [r7, #4]
 8017622:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8017626:	78fa      	ldrb	r2, [r7, #3]
 8017628:	6879      	ldr	r1, [r7, #4]
 801762a:	4613      	mov	r3, r2
 801762c:	00db      	lsls	r3, r3, #3
 801762e:	4413      	add	r3, r2
 8017630:	009b      	lsls	r3, r3, #2
 8017632:	440b      	add	r3, r1
 8017634:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8017638:	681a      	ldr	r2, [r3, #0]
 801763a:	78fb      	ldrb	r3, [r7, #3]
 801763c:	4619      	mov	r1, r3
 801763e:	f7fb f9d1 	bl	80129e4 <USBD_LL_DataOutStage>
}
 8017642:	bf00      	nop
 8017644:	3708      	adds	r7, #8
 8017646:	46bd      	mov	sp, r7
 8017648:	bd80      	pop	{r7, pc}

0801764a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801764a:	b580      	push	{r7, lr}
 801764c:	b082      	sub	sp, #8
 801764e:	af00      	add	r7, sp, #0
 8017650:	6078      	str	r0, [r7, #4]
 8017652:	460b      	mov	r3, r1
 8017654:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017656:	687b      	ldr	r3, [r7, #4]
 8017658:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801765c:	78fa      	ldrb	r2, [r7, #3]
 801765e:	6879      	ldr	r1, [r7, #4]
 8017660:	4613      	mov	r3, r2
 8017662:	00db      	lsls	r3, r3, #3
 8017664:	4413      	add	r3, r2
 8017666:	009b      	lsls	r3, r3, #2
 8017668:	440b      	add	r3, r1
 801766a:	3320      	adds	r3, #32
 801766c:	681a      	ldr	r2, [r3, #0]
 801766e:	78fb      	ldrb	r3, [r7, #3]
 8017670:	4619      	mov	r1, r3
 8017672:	f7fb fa6a 	bl	8012b4a <USBD_LL_DataInStage>
}
 8017676:	bf00      	nop
 8017678:	3708      	adds	r7, #8
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}

0801767e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801767e:	b580      	push	{r7, lr}
 8017680:	b082      	sub	sp, #8
 8017682:	af00      	add	r7, sp, #0
 8017684:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801768c:	4618      	mov	r0, r3
 801768e:	f7fb fba4 	bl	8012dda <USBD_LL_SOF>
}
 8017692:	bf00      	nop
 8017694:	3708      	adds	r7, #8
 8017696:	46bd      	mov	sp, r7
 8017698:	bd80      	pop	{r7, pc}

0801769a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801769a:	b580      	push	{r7, lr}
 801769c:	b084      	sub	sp, #16
 801769e:	af00      	add	r7, sp, #0
 80176a0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80176a2:	2301      	movs	r3, #1
 80176a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80176a6:	687b      	ldr	r3, [r7, #4]
 80176a8:	79db      	ldrb	r3, [r3, #7]
 80176aa:	2b00      	cmp	r3, #0
 80176ac:	d102      	bne.n	80176b4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80176ae:	2300      	movs	r3, #0
 80176b0:	73fb      	strb	r3, [r7, #15]
 80176b2:	e008      	b.n	80176c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80176b4:	687b      	ldr	r3, [r7, #4]
 80176b6:	79db      	ldrb	r3, [r3, #7]
 80176b8:	2b02      	cmp	r3, #2
 80176ba:	d102      	bne.n	80176c2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80176bc:	2301      	movs	r3, #1
 80176be:	73fb      	strb	r3, [r7, #15]
 80176c0:	e001      	b.n	80176c6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80176c2:	f7f1 f819 	bl	80086f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80176c6:	687b      	ldr	r3, [r7, #4]
 80176c8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80176cc:	7bfa      	ldrb	r2, [r7, #15]
 80176ce:	4611      	mov	r1, r2
 80176d0:	4618      	mov	r0, r3
 80176d2:	f7fb fb3e 	bl	8012d52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80176dc:	4618      	mov	r0, r3
 80176de:	f7fb fae6 	bl	8012cae <USBD_LL_Reset>
}
 80176e2:	bf00      	nop
 80176e4:	3710      	adds	r7, #16
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
	...

080176ec <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176ec:	b580      	push	{r7, lr}
 80176ee:	b082      	sub	sp, #8
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80176f4:	687b      	ldr	r3, [r7, #4]
 80176f6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80176fa:	4618      	mov	r0, r3
 80176fc:	f7fb fb39 	bl	8012d72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	681b      	ldr	r3, [r3, #0]
 8017704:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	687a      	ldr	r2, [r7, #4]
 801770c:	6812      	ldr	r2, [r2, #0]
 801770e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8017712:	f043 0301 	orr.w	r3, r3, #1
 8017716:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	7adb      	ldrb	r3, [r3, #11]
 801771c:	2b00      	cmp	r3, #0
 801771e:	d005      	beq.n	801772c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017720:	4b04      	ldr	r3, [pc, #16]	@ (8017734 <HAL_PCD_SuspendCallback+0x48>)
 8017722:	691b      	ldr	r3, [r3, #16]
 8017724:	4a03      	ldr	r2, [pc, #12]	@ (8017734 <HAL_PCD_SuspendCallback+0x48>)
 8017726:	f043 0306 	orr.w	r3, r3, #6
 801772a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801772c:	bf00      	nop
 801772e:	3708      	adds	r7, #8
 8017730:	46bd      	mov	sp, r7
 8017732:	bd80      	pop	{r7, pc}
 8017734:	e000ed00 	.word	0xe000ed00

08017738 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017738:	b580      	push	{r7, lr}
 801773a:	b082      	sub	sp, #8
 801773c:	af00      	add	r7, sp, #0
 801773e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017746:	4618      	mov	r0, r3
 8017748:	f7fb fb2f 	bl	8012daa <USBD_LL_Resume>
}
 801774c:	bf00      	nop
 801774e:	3708      	adds	r7, #8
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}

08017754 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b082      	sub	sp, #8
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
 801775c:	460b      	mov	r3, r1
 801775e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017760:	687b      	ldr	r3, [r7, #4]
 8017762:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8017766:	78fa      	ldrb	r2, [r7, #3]
 8017768:	4611      	mov	r1, r2
 801776a:	4618      	mov	r0, r3
 801776c:	f7fb fb87 	bl	8012e7e <USBD_LL_IsoOUTIncomplete>
}
 8017770:	bf00      	nop
 8017772:	3708      	adds	r7, #8
 8017774:	46bd      	mov	sp, r7
 8017776:	bd80      	pop	{r7, pc}

08017778 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017778:	b580      	push	{r7, lr}
 801777a:	b082      	sub	sp, #8
 801777c:	af00      	add	r7, sp, #0
 801777e:	6078      	str	r0, [r7, #4]
 8017780:	460b      	mov	r3, r1
 8017782:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017784:	687b      	ldr	r3, [r7, #4]
 8017786:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801778a:	78fa      	ldrb	r2, [r7, #3]
 801778c:	4611      	mov	r1, r2
 801778e:	4618      	mov	r0, r3
 8017790:	f7fb fb43 	bl	8012e1a <USBD_LL_IsoINIncomplete>
}
 8017794:	bf00      	nop
 8017796:	3708      	adds	r7, #8
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}

0801779c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801779c:	b580      	push	{r7, lr}
 801779e:	b082      	sub	sp, #8
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80177aa:	4618      	mov	r0, r3
 80177ac:	f7fb fb99 	bl	8012ee2 <USBD_LL_DevConnected>
}
 80177b0:	bf00      	nop
 80177b2:	3708      	adds	r7, #8
 80177b4:	46bd      	mov	sp, r7
 80177b6:	bd80      	pop	{r7, pc}

080177b8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80177b8:	b580      	push	{r7, lr}
 80177ba:	b082      	sub	sp, #8
 80177bc:	af00      	add	r7, sp, #0
 80177be:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80177c6:	4618      	mov	r0, r3
 80177c8:	f7fb fb96 	bl	8012ef8 <USBD_LL_DevDisconnected>
}
 80177cc:	bf00      	nop
 80177ce:	3708      	adds	r7, #8
 80177d0:	46bd      	mov	sp, r7
 80177d2:	bd80      	pop	{r7, pc}

080177d4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	b082      	sub	sp, #8
 80177d8:	af00      	add	r7, sp, #0
 80177da:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80177dc:	687b      	ldr	r3, [r7, #4]
 80177de:	781b      	ldrb	r3, [r3, #0]
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d13c      	bne.n	801785e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80177e4:	4a20      	ldr	r2, [pc, #128]	@ (8017868 <USBD_LL_Init+0x94>)
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 80177ec:	687b      	ldr	r3, [r7, #4]
 80177ee:	4a1e      	ldr	r2, [pc, #120]	@ (8017868 <USBD_LL_Init+0x94>)
 80177f0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80177f4:	4b1c      	ldr	r3, [pc, #112]	@ (8017868 <USBD_LL_Init+0x94>)
 80177f6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80177fa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80177fc:	4b1a      	ldr	r3, [pc, #104]	@ (8017868 <USBD_LL_Init+0x94>)
 80177fe:	2204      	movs	r2, #4
 8017800:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017802:	4b19      	ldr	r3, [pc, #100]	@ (8017868 <USBD_LL_Init+0x94>)
 8017804:	2202      	movs	r2, #2
 8017806:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8017808:	4b17      	ldr	r3, [pc, #92]	@ (8017868 <USBD_LL_Init+0x94>)
 801780a:	2200      	movs	r2, #0
 801780c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801780e:	4b16      	ldr	r3, [pc, #88]	@ (8017868 <USBD_LL_Init+0x94>)
 8017810:	2202      	movs	r2, #2
 8017812:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017814:	4b14      	ldr	r3, [pc, #80]	@ (8017868 <USBD_LL_Init+0x94>)
 8017816:	2200      	movs	r2, #0
 8017818:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801781a:	4b13      	ldr	r3, [pc, #76]	@ (8017868 <USBD_LL_Init+0x94>)
 801781c:	2200      	movs	r2, #0
 801781e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017820:	4b11      	ldr	r3, [pc, #68]	@ (8017868 <USBD_LL_Init+0x94>)
 8017822:	2200      	movs	r2, #0
 8017824:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8017826:	4b10      	ldr	r3, [pc, #64]	@ (8017868 <USBD_LL_Init+0x94>)
 8017828:	2200      	movs	r2, #0
 801782a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801782c:	4b0e      	ldr	r3, [pc, #56]	@ (8017868 <USBD_LL_Init+0x94>)
 801782e:	2200      	movs	r2, #0
 8017830:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017832:	480d      	ldr	r0, [pc, #52]	@ (8017868 <USBD_LL_Init+0x94>)
 8017834:	f7f4 f819 	bl	800b86a <HAL_PCD_Init>
 8017838:	4603      	mov	r3, r0
 801783a:	2b00      	cmp	r3, #0
 801783c:	d001      	beq.n	8017842 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801783e:	f7f0 ff5b 	bl	80086f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017842:	2180      	movs	r1, #128	@ 0x80
 8017844:	4808      	ldr	r0, [pc, #32]	@ (8017868 <USBD_LL_Init+0x94>)
 8017846:	f7f5 fa46 	bl	800ccd6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801784a:	2240      	movs	r2, #64	@ 0x40
 801784c:	2100      	movs	r1, #0
 801784e:	4806      	ldr	r0, [pc, #24]	@ (8017868 <USBD_LL_Init+0x94>)
 8017850:	f7f5 f9fa 	bl	800cc48 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8017854:	2280      	movs	r2, #128	@ 0x80
 8017856:	2101      	movs	r1, #1
 8017858:	4803      	ldr	r0, [pc, #12]	@ (8017868 <USBD_LL_Init+0x94>)
 801785a:	f7f5 f9f5 	bl	800cc48 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801785e:	2300      	movs	r3, #0
}
 8017860:	4618      	mov	r0, r3
 8017862:	3708      	adds	r7, #8
 8017864:	46bd      	mov	sp, r7
 8017866:	bd80      	pop	{r7, pc}
 8017868:	2000b484 	.word	0x2000b484

0801786c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801786c:	b580      	push	{r7, lr}
 801786e:	b084      	sub	sp, #16
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017874:	2300      	movs	r3, #0
 8017876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017878:	2300      	movs	r3, #0
 801787a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017882:	4618      	mov	r0, r3
 8017884:	f7f4 f900 	bl	800ba88 <HAL_PCD_Start>
 8017888:	4603      	mov	r3, r0
 801788a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801788c:	7bfb      	ldrb	r3, [r7, #15]
 801788e:	4618      	mov	r0, r3
 8017890:	f000 f942 	bl	8017b18 <USBD_Get_USB_Status>
 8017894:	4603      	mov	r3, r0
 8017896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017898:	7bbb      	ldrb	r3, [r7, #14]
}
 801789a:	4618      	mov	r0, r3
 801789c:	3710      	adds	r7, #16
 801789e:	46bd      	mov	sp, r7
 80178a0:	bd80      	pop	{r7, pc}

080178a2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80178a2:	b580      	push	{r7, lr}
 80178a4:	b084      	sub	sp, #16
 80178a6:	af00      	add	r7, sp, #0
 80178a8:	6078      	str	r0, [r7, #4]
 80178aa:	4608      	mov	r0, r1
 80178ac:	4611      	mov	r1, r2
 80178ae:	461a      	mov	r2, r3
 80178b0:	4603      	mov	r3, r0
 80178b2:	70fb      	strb	r3, [r7, #3]
 80178b4:	460b      	mov	r3, r1
 80178b6:	70bb      	strb	r3, [r7, #2]
 80178b8:	4613      	mov	r3, r2
 80178ba:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178bc:	2300      	movs	r3, #0
 80178be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178c0:	2300      	movs	r3, #0
 80178c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80178c4:	687b      	ldr	r3, [r7, #4]
 80178c6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80178ca:	78bb      	ldrb	r3, [r7, #2]
 80178cc:	883a      	ldrh	r2, [r7, #0]
 80178ce:	78f9      	ldrb	r1, [r7, #3]
 80178d0:	f7f4 fdd4 	bl	800c47c <HAL_PCD_EP_Open>
 80178d4:	4603      	mov	r3, r0
 80178d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178d8:	7bfb      	ldrb	r3, [r7, #15]
 80178da:	4618      	mov	r0, r3
 80178dc:	f000 f91c 	bl	8017b18 <USBD_Get_USB_Status>
 80178e0:	4603      	mov	r3, r0
 80178e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80178e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80178e6:	4618      	mov	r0, r3
 80178e8:	3710      	adds	r7, #16
 80178ea:	46bd      	mov	sp, r7
 80178ec:	bd80      	pop	{r7, pc}

080178ee <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80178ee:	b580      	push	{r7, lr}
 80178f0:	b084      	sub	sp, #16
 80178f2:	af00      	add	r7, sp, #0
 80178f4:	6078      	str	r0, [r7, #4]
 80178f6:	460b      	mov	r3, r1
 80178f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178fa:	2300      	movs	r3, #0
 80178fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178fe:	2300      	movs	r3, #0
 8017900:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017908:	78fa      	ldrb	r2, [r7, #3]
 801790a:	4611      	mov	r1, r2
 801790c:	4618      	mov	r0, r3
 801790e:	f7f4 fe1f 	bl	800c550 <HAL_PCD_EP_Close>
 8017912:	4603      	mov	r3, r0
 8017914:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017916:	7bfb      	ldrb	r3, [r7, #15]
 8017918:	4618      	mov	r0, r3
 801791a:	f000 f8fd 	bl	8017b18 <USBD_Get_USB_Status>
 801791e:	4603      	mov	r3, r0
 8017920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017922:	7bbb      	ldrb	r3, [r7, #14]
}
 8017924:	4618      	mov	r0, r3
 8017926:	3710      	adds	r7, #16
 8017928:	46bd      	mov	sp, r7
 801792a:	bd80      	pop	{r7, pc}

0801792c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801792c:	b580      	push	{r7, lr}
 801792e:	b084      	sub	sp, #16
 8017930:	af00      	add	r7, sp, #0
 8017932:	6078      	str	r0, [r7, #4]
 8017934:	460b      	mov	r3, r1
 8017936:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017938:	2300      	movs	r3, #0
 801793a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801793c:	2300      	movs	r3, #0
 801793e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017946:	78fa      	ldrb	r2, [r7, #3]
 8017948:	4611      	mov	r1, r2
 801794a:	4618      	mov	r0, r3
 801794c:	f7f4 fed7 	bl	800c6fe <HAL_PCD_EP_SetStall>
 8017950:	4603      	mov	r3, r0
 8017952:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017954:	7bfb      	ldrb	r3, [r7, #15]
 8017956:	4618      	mov	r0, r3
 8017958:	f000 f8de 	bl	8017b18 <USBD_Get_USB_Status>
 801795c:	4603      	mov	r3, r0
 801795e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017960:	7bbb      	ldrb	r3, [r7, #14]
}
 8017962:	4618      	mov	r0, r3
 8017964:	3710      	adds	r7, #16
 8017966:	46bd      	mov	sp, r7
 8017968:	bd80      	pop	{r7, pc}

0801796a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801796a:	b580      	push	{r7, lr}
 801796c:	b084      	sub	sp, #16
 801796e:	af00      	add	r7, sp, #0
 8017970:	6078      	str	r0, [r7, #4]
 8017972:	460b      	mov	r3, r1
 8017974:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017976:	2300      	movs	r3, #0
 8017978:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801797a:	2300      	movs	r3, #0
 801797c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017984:	78fa      	ldrb	r2, [r7, #3]
 8017986:	4611      	mov	r1, r2
 8017988:	4618      	mov	r0, r3
 801798a:	f7f4 ff1b 	bl	800c7c4 <HAL_PCD_EP_ClrStall>
 801798e:	4603      	mov	r3, r0
 8017990:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017992:	7bfb      	ldrb	r3, [r7, #15]
 8017994:	4618      	mov	r0, r3
 8017996:	f000 f8bf 	bl	8017b18 <USBD_Get_USB_Status>
 801799a:	4603      	mov	r3, r0
 801799c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801799e:	7bbb      	ldrb	r3, [r7, #14]
}
 80179a0:	4618      	mov	r0, r3
 80179a2:	3710      	adds	r7, #16
 80179a4:	46bd      	mov	sp, r7
 80179a6:	bd80      	pop	{r7, pc}

080179a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80179a8:	b480      	push	{r7}
 80179aa:	b085      	sub	sp, #20
 80179ac:	af00      	add	r7, sp, #0
 80179ae:	6078      	str	r0, [r7, #4]
 80179b0:	460b      	mov	r3, r1
 80179b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80179ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80179bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	da0b      	bge.n	80179dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80179c4:	78fb      	ldrb	r3, [r7, #3]
 80179c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80179ca:	68f9      	ldr	r1, [r7, #12]
 80179cc:	4613      	mov	r3, r2
 80179ce:	00db      	lsls	r3, r3, #3
 80179d0:	4413      	add	r3, r2
 80179d2:	009b      	lsls	r3, r3, #2
 80179d4:	440b      	add	r3, r1
 80179d6:	3316      	adds	r3, #22
 80179d8:	781b      	ldrb	r3, [r3, #0]
 80179da:	e00b      	b.n	80179f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80179dc:	78fb      	ldrb	r3, [r7, #3]
 80179de:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80179e2:	68f9      	ldr	r1, [r7, #12]
 80179e4:	4613      	mov	r3, r2
 80179e6:	00db      	lsls	r3, r3, #3
 80179e8:	4413      	add	r3, r2
 80179ea:	009b      	lsls	r3, r3, #2
 80179ec:	440b      	add	r3, r1
 80179ee:	f203 2356 	addw	r3, r3, #598	@ 0x256
 80179f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	3714      	adds	r7, #20
 80179f8:	46bd      	mov	sp, r7
 80179fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fe:	4770      	bx	lr

08017a00 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017a00:	b580      	push	{r7, lr}
 8017a02:	b084      	sub	sp, #16
 8017a04:	af00      	add	r7, sp, #0
 8017a06:	6078      	str	r0, [r7, #4]
 8017a08:	460b      	mov	r3, r1
 8017a0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a0c:	2300      	movs	r3, #0
 8017a0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a10:	2300      	movs	r3, #0
 8017a12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017a1a:	78fa      	ldrb	r2, [r7, #3]
 8017a1c:	4611      	mov	r1, r2
 8017a1e:	4618      	mov	r0, r3
 8017a20:	f7f4 fd08 	bl	800c434 <HAL_PCD_SetAddress>
 8017a24:	4603      	mov	r3, r0
 8017a26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a28:	7bfb      	ldrb	r3, [r7, #15]
 8017a2a:	4618      	mov	r0, r3
 8017a2c:	f000 f874 	bl	8017b18 <USBD_Get_USB_Status>
 8017a30:	4603      	mov	r3, r0
 8017a32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017a34:	7bbb      	ldrb	r3, [r7, #14]
}
 8017a36:	4618      	mov	r0, r3
 8017a38:	3710      	adds	r7, #16
 8017a3a:	46bd      	mov	sp, r7
 8017a3c:	bd80      	pop	{r7, pc}

08017a3e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017a3e:	b580      	push	{r7, lr}
 8017a40:	b086      	sub	sp, #24
 8017a42:	af00      	add	r7, sp, #0
 8017a44:	60f8      	str	r0, [r7, #12]
 8017a46:	607a      	str	r2, [r7, #4]
 8017a48:	603b      	str	r3, [r7, #0]
 8017a4a:	460b      	mov	r3, r1
 8017a4c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a4e:	2300      	movs	r3, #0
 8017a50:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a52:	2300      	movs	r3, #0
 8017a54:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017a56:	68fb      	ldr	r3, [r7, #12]
 8017a58:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017a5c:	7af9      	ldrb	r1, [r7, #11]
 8017a5e:	683b      	ldr	r3, [r7, #0]
 8017a60:	687a      	ldr	r2, [r7, #4]
 8017a62:	f7f4 fe12 	bl	800c68a <HAL_PCD_EP_Transmit>
 8017a66:	4603      	mov	r3, r0
 8017a68:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017a6a:	7dfb      	ldrb	r3, [r7, #23]
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f000 f853 	bl	8017b18 <USBD_Get_USB_Status>
 8017a72:	4603      	mov	r3, r0
 8017a74:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017a76:	7dbb      	ldrb	r3, [r7, #22]
}
 8017a78:	4618      	mov	r0, r3
 8017a7a:	3718      	adds	r7, #24
 8017a7c:	46bd      	mov	sp, r7
 8017a7e:	bd80      	pop	{r7, pc}

08017a80 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b086      	sub	sp, #24
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	60f8      	str	r0, [r7, #12]
 8017a88:	607a      	str	r2, [r7, #4]
 8017a8a:	603b      	str	r3, [r7, #0]
 8017a8c:	460b      	mov	r3, r1
 8017a8e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a90:	2300      	movs	r3, #0
 8017a92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a94:	2300      	movs	r3, #0
 8017a96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8017a9e:	7af9      	ldrb	r1, [r7, #11]
 8017aa0:	683b      	ldr	r3, [r7, #0]
 8017aa2:	687a      	ldr	r2, [r7, #4]
 8017aa4:	f7f4 fd9e 	bl	800c5e4 <HAL_PCD_EP_Receive>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017aac:	7dfb      	ldrb	r3, [r7, #23]
 8017aae:	4618      	mov	r0, r3
 8017ab0:	f000 f832 	bl	8017b18 <USBD_Get_USB_Status>
 8017ab4:	4603      	mov	r3, r0
 8017ab6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017ab8:	7dbb      	ldrb	r3, [r7, #22]
}
 8017aba:	4618      	mov	r0, r3
 8017abc:	3718      	adds	r7, #24
 8017abe:	46bd      	mov	sp, r7
 8017ac0:	bd80      	pop	{r7, pc}

08017ac2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017ac2:	b580      	push	{r7, lr}
 8017ac4:	b082      	sub	sp, #8
 8017ac6:	af00      	add	r7, sp, #0
 8017ac8:	6078      	str	r0, [r7, #4]
 8017aca:	460b      	mov	r3, r1
 8017acc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8017ad4:	78fa      	ldrb	r2, [r7, #3]
 8017ad6:	4611      	mov	r1, r2
 8017ad8:	4618      	mov	r0, r3
 8017ada:	f7f4 fdbe 	bl	800c65a <HAL_PCD_EP_GetRxCount>
 8017ade:	4603      	mov	r3, r0
}
 8017ae0:	4618      	mov	r0, r3
 8017ae2:	3708      	adds	r7, #8
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}

08017ae8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8017ae8:	b480      	push	{r7}
 8017aea:	b083      	sub	sp, #12
 8017aec:	af00      	add	r7, sp, #0
 8017aee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017af0:	4b03      	ldr	r3, [pc, #12]	@ (8017b00 <USBD_static_malloc+0x18>)
}
 8017af2:	4618      	mov	r0, r3
 8017af4:	370c      	adds	r7, #12
 8017af6:	46bd      	mov	sp, r7
 8017af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017afc:	4770      	bx	lr
 8017afe:	bf00      	nop
 8017b00:	2000b968 	.word	0x2000b968

08017b04 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017b04:	b480      	push	{r7}
 8017b06:	b083      	sub	sp, #12
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	6078      	str	r0, [r7, #4]

}
 8017b0c:	bf00      	nop
 8017b0e:	370c      	adds	r7, #12
 8017b10:	46bd      	mov	sp, r7
 8017b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b16:	4770      	bx	lr

08017b18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017b18:	b480      	push	{r7}
 8017b1a:	b085      	sub	sp, #20
 8017b1c:	af00      	add	r7, sp, #0
 8017b1e:	4603      	mov	r3, r0
 8017b20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017b22:	2300      	movs	r3, #0
 8017b24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017b26:	79fb      	ldrb	r3, [r7, #7]
 8017b28:	2b03      	cmp	r3, #3
 8017b2a:	d817      	bhi.n	8017b5c <USBD_Get_USB_Status+0x44>
 8017b2c:	a201      	add	r2, pc, #4	@ (adr r2, 8017b34 <USBD_Get_USB_Status+0x1c>)
 8017b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b32:	bf00      	nop
 8017b34:	08017b45 	.word	0x08017b45
 8017b38:	08017b4b 	.word	0x08017b4b
 8017b3c:	08017b51 	.word	0x08017b51
 8017b40:	08017b57 	.word	0x08017b57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017b44:	2300      	movs	r3, #0
 8017b46:	73fb      	strb	r3, [r7, #15]
    break;
 8017b48:	e00b      	b.n	8017b62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017b4a:	2303      	movs	r3, #3
 8017b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8017b4e:	e008      	b.n	8017b62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017b50:	2301      	movs	r3, #1
 8017b52:	73fb      	strb	r3, [r7, #15]
    break;
 8017b54:	e005      	b.n	8017b62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017b56:	2303      	movs	r3, #3
 8017b58:	73fb      	strb	r3, [r7, #15]
    break;
 8017b5a:	e002      	b.n	8017b62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017b5c:	2303      	movs	r3, #3
 8017b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8017b60:	bf00      	nop
  }
  return usb_status;
 8017b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b64:	4618      	mov	r0, r3
 8017b66:	3714      	adds	r7, #20
 8017b68:	46bd      	mov	sp, r7
 8017b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b6e:	4770      	bx	lr

08017b70 <acosf>:
 8017b70:	b508      	push	{r3, lr}
 8017b72:	ed2d 8b02 	vpush	{d8}
 8017b76:	eeb0 8a40 	vmov.f32	s16, s0
 8017b7a:	f000 faef 	bl	801815c <__ieee754_acosf>
 8017b7e:	eeb4 8a48 	vcmp.f32	s16, s16
 8017b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017b86:	eef0 8a40 	vmov.f32	s17, s0
 8017b8a:	d615      	bvs.n	8017bb8 <acosf+0x48>
 8017b8c:	eeb0 0a48 	vmov.f32	s0, s16
 8017b90:	f000 f9d6 	bl	8017f40 <fabsf>
 8017b94:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017b98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017ba0:	dd0a      	ble.n	8017bb8 <acosf+0x48>
 8017ba2:	f002 ff79 	bl	801aa98 <__errno>
 8017ba6:	ecbd 8b02 	vpop	{d8}
 8017baa:	2321      	movs	r3, #33	@ 0x21
 8017bac:	6003      	str	r3, [r0, #0]
 8017bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017bb2:	4804      	ldr	r0, [pc, #16]	@ (8017bc4 <acosf+0x54>)
 8017bb4:	f000 ba28 	b.w	8018008 <nanf>
 8017bb8:	eeb0 0a68 	vmov.f32	s0, s17
 8017bbc:	ecbd 8b02 	vpop	{d8}
 8017bc0:	bd08      	pop	{r3, pc}
 8017bc2:	bf00      	nop
 8017bc4:	08020777 	.word	0x08020777

08017bc8 <asinf>:
 8017bc8:	b508      	push	{r3, lr}
 8017bca:	ed2d 8b02 	vpush	{d8}
 8017bce:	eeb0 8a40 	vmov.f32	s16, s0
 8017bd2:	f000 fbb9 	bl	8018348 <__ieee754_asinf>
 8017bd6:	eeb4 8a48 	vcmp.f32	s16, s16
 8017bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bde:	eef0 8a40 	vmov.f32	s17, s0
 8017be2:	d615      	bvs.n	8017c10 <asinf+0x48>
 8017be4:	eeb0 0a48 	vmov.f32	s0, s16
 8017be8:	f000 f9aa 	bl	8017f40 <fabsf>
 8017bec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017bf0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8017bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017bf8:	dd0a      	ble.n	8017c10 <asinf+0x48>
 8017bfa:	f002 ff4d 	bl	801aa98 <__errno>
 8017bfe:	ecbd 8b02 	vpop	{d8}
 8017c02:	2321      	movs	r3, #33	@ 0x21
 8017c04:	6003      	str	r3, [r0, #0]
 8017c06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8017c0a:	4804      	ldr	r0, [pc, #16]	@ (8017c1c <asinf+0x54>)
 8017c0c:	f000 b9fc 	b.w	8018008 <nanf>
 8017c10:	eeb0 0a68 	vmov.f32	s0, s17
 8017c14:	ecbd 8b02 	vpop	{d8}
 8017c18:	bd08      	pop	{r3, pc}
 8017c1a:	bf00      	nop
 8017c1c:	08020777 	.word	0x08020777

08017c20 <atan2f>:
 8017c20:	f000 bc76 	b.w	8018510 <__ieee754_atan2f>

08017c24 <powf>:
 8017c24:	b508      	push	{r3, lr}
 8017c26:	ed2d 8b04 	vpush	{d8-d9}
 8017c2a:	eeb0 8a60 	vmov.f32	s16, s1
 8017c2e:	eeb0 9a40 	vmov.f32	s18, s0
 8017c32:	f000 fd0d 	bl	8018650 <__ieee754_powf>
 8017c36:	eeb4 8a48 	vcmp.f32	s16, s16
 8017c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c3e:	eef0 8a40 	vmov.f32	s17, s0
 8017c42:	d63e      	bvs.n	8017cc2 <powf+0x9e>
 8017c44:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8017c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c4c:	d112      	bne.n	8017c74 <powf+0x50>
 8017c4e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8017c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c56:	d039      	beq.n	8017ccc <powf+0xa8>
 8017c58:	eeb0 0a48 	vmov.f32	s0, s16
 8017c5c:	f000 f9be 	bl	8017fdc <finitef>
 8017c60:	b378      	cbz	r0, 8017cc2 <powf+0x9e>
 8017c62:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8017c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c6a:	d52a      	bpl.n	8017cc2 <powf+0x9e>
 8017c6c:	f002 ff14 	bl	801aa98 <__errno>
 8017c70:	2322      	movs	r3, #34	@ 0x22
 8017c72:	e014      	b.n	8017c9e <powf+0x7a>
 8017c74:	f000 f9b2 	bl	8017fdc <finitef>
 8017c78:	b998      	cbnz	r0, 8017ca2 <powf+0x7e>
 8017c7a:	eeb0 0a49 	vmov.f32	s0, s18
 8017c7e:	f000 f9ad 	bl	8017fdc <finitef>
 8017c82:	b170      	cbz	r0, 8017ca2 <powf+0x7e>
 8017c84:	eeb0 0a48 	vmov.f32	s0, s16
 8017c88:	f000 f9a8 	bl	8017fdc <finitef>
 8017c8c:	b148      	cbz	r0, 8017ca2 <powf+0x7e>
 8017c8e:	eef4 8a68 	vcmp.f32	s17, s17
 8017c92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017c96:	d7e9      	bvc.n	8017c6c <powf+0x48>
 8017c98:	f002 fefe 	bl	801aa98 <__errno>
 8017c9c:	2321      	movs	r3, #33	@ 0x21
 8017c9e:	6003      	str	r3, [r0, #0]
 8017ca0:	e00f      	b.n	8017cc2 <powf+0x9e>
 8017ca2:	eef5 8a40 	vcmp.f32	s17, #0.0
 8017ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017caa:	d10a      	bne.n	8017cc2 <powf+0x9e>
 8017cac:	eeb0 0a49 	vmov.f32	s0, s18
 8017cb0:	f000 f994 	bl	8017fdc <finitef>
 8017cb4:	b128      	cbz	r0, 8017cc2 <powf+0x9e>
 8017cb6:	eeb0 0a48 	vmov.f32	s0, s16
 8017cba:	f000 f98f 	bl	8017fdc <finitef>
 8017cbe:	2800      	cmp	r0, #0
 8017cc0:	d1d4      	bne.n	8017c6c <powf+0x48>
 8017cc2:	eeb0 0a68 	vmov.f32	s0, s17
 8017cc6:	ecbd 8b04 	vpop	{d8-d9}
 8017cca:	bd08      	pop	{r3, pc}
 8017ccc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8017cd0:	e7f7      	b.n	8017cc2 <powf+0x9e>
	...

08017cd4 <sqrtf>:
 8017cd4:	b508      	push	{r3, lr}
 8017cd6:	ed2d 8b02 	vpush	{d8}
 8017cda:	eeb0 8a40 	vmov.f32	s16, s0
 8017cde:	f000 f999 	bl	8018014 <__ieee754_sqrtf>
 8017ce2:	eeb4 8a48 	vcmp.f32	s16, s16
 8017ce6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cea:	d60c      	bvs.n	8017d06 <sqrtf+0x32>
 8017cec:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8017d0c <sqrtf+0x38>
 8017cf0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8017cf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017cf8:	d505      	bpl.n	8017d06 <sqrtf+0x32>
 8017cfa:	f002 fecd 	bl	801aa98 <__errno>
 8017cfe:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8017d02:	2321      	movs	r3, #33	@ 0x21
 8017d04:	6003      	str	r3, [r0, #0]
 8017d06:	ecbd 8b02 	vpop	{d8}
 8017d0a:	bd08      	pop	{r3, pc}
 8017d0c:	00000000 	.word	0x00000000

08017d10 <atanf>:
 8017d10:	b538      	push	{r3, r4, r5, lr}
 8017d12:	ee10 5a10 	vmov	r5, s0
 8017d16:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8017d1a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8017d1e:	eef0 7a40 	vmov.f32	s15, s0
 8017d22:	d310      	bcc.n	8017d46 <atanf+0x36>
 8017d24:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8017d28:	d904      	bls.n	8017d34 <atanf+0x24>
 8017d2a:	ee70 7a00 	vadd.f32	s15, s0, s0
 8017d2e:	eeb0 0a67 	vmov.f32	s0, s15
 8017d32:	bd38      	pop	{r3, r4, r5, pc}
 8017d34:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8017e6c <atanf+0x15c>
 8017d38:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8017e70 <atanf+0x160>
 8017d3c:	2d00      	cmp	r5, #0
 8017d3e:	bfc8      	it	gt
 8017d40:	eef0 7a47 	vmovgt.f32	s15, s14
 8017d44:	e7f3      	b.n	8017d2e <atanf+0x1e>
 8017d46:	4b4b      	ldr	r3, [pc, #300]	@ (8017e74 <atanf+0x164>)
 8017d48:	429c      	cmp	r4, r3
 8017d4a:	d810      	bhi.n	8017d6e <atanf+0x5e>
 8017d4c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8017d50:	d20a      	bcs.n	8017d68 <atanf+0x58>
 8017d52:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8017e78 <atanf+0x168>
 8017d56:	ee30 7a07 	vadd.f32	s14, s0, s14
 8017d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017d5e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8017d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8017d66:	dce2      	bgt.n	8017d2e <atanf+0x1e>
 8017d68:	f04f 33ff 	mov.w	r3, #4294967295
 8017d6c:	e013      	b.n	8017d96 <atanf+0x86>
 8017d6e:	f000 f8e7 	bl	8017f40 <fabsf>
 8017d72:	4b42      	ldr	r3, [pc, #264]	@ (8017e7c <atanf+0x16c>)
 8017d74:	429c      	cmp	r4, r3
 8017d76:	d84f      	bhi.n	8017e18 <atanf+0x108>
 8017d78:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8017d7c:	429c      	cmp	r4, r3
 8017d7e:	d841      	bhi.n	8017e04 <atanf+0xf4>
 8017d80:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8017d84:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017d88:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017d8c:	2300      	movs	r3, #0
 8017d8e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017d92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017d96:	1c5a      	adds	r2, r3, #1
 8017d98:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8017d9c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8017e80 <atanf+0x170>
 8017da0:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8017e84 <atanf+0x174>
 8017da4:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8017e88 <atanf+0x178>
 8017da8:	ee66 6a06 	vmul.f32	s13, s12, s12
 8017dac:	eee6 5a87 	vfma.f32	s11, s13, s14
 8017db0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8017e8c <atanf+0x17c>
 8017db4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017db8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8017e90 <atanf+0x180>
 8017dbc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017dc0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8017e94 <atanf+0x184>
 8017dc4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8017dc8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8017e98 <atanf+0x188>
 8017dcc:	eee7 5a26 	vfma.f32	s11, s14, s13
 8017dd0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8017e9c <atanf+0x18c>
 8017dd4:	eea6 5a87 	vfma.f32	s10, s13, s14
 8017dd8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8017ea0 <atanf+0x190>
 8017ddc:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017de0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8017ea4 <atanf+0x194>
 8017de4:	eea7 5a26 	vfma.f32	s10, s14, s13
 8017de8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8017ea8 <atanf+0x198>
 8017dec:	eea5 7a26 	vfma.f32	s14, s10, s13
 8017df0:	ee27 7a26 	vmul.f32	s14, s14, s13
 8017df4:	eea5 7a86 	vfma.f32	s14, s11, s12
 8017df8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8017dfc:	d121      	bne.n	8017e42 <atanf+0x132>
 8017dfe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017e02:	e794      	b.n	8017d2e <atanf+0x1e>
 8017e04:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8017e08:	ee30 7a67 	vsub.f32	s14, s0, s15
 8017e0c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8017e10:	2301      	movs	r3, #1
 8017e12:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017e16:	e7be      	b.n	8017d96 <atanf+0x86>
 8017e18:	4b24      	ldr	r3, [pc, #144]	@ (8017eac <atanf+0x19c>)
 8017e1a:	429c      	cmp	r4, r3
 8017e1c:	d80b      	bhi.n	8017e36 <atanf+0x126>
 8017e1e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8017e22:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8017e26:	eea0 7a27 	vfma.f32	s14, s0, s15
 8017e2a:	2302      	movs	r3, #2
 8017e2c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8017e30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8017e34:	e7af      	b.n	8017d96 <atanf+0x86>
 8017e36:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8017e3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017e3e:	2303      	movs	r3, #3
 8017e40:	e7a9      	b.n	8017d96 <atanf+0x86>
 8017e42:	4a1b      	ldr	r2, [pc, #108]	@ (8017eb0 <atanf+0x1a0>)
 8017e44:	491b      	ldr	r1, [pc, #108]	@ (8017eb4 <atanf+0x1a4>)
 8017e46:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8017e4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017e4e:	edd3 6a00 	vldr	s13, [r3]
 8017e52:	ee37 7a66 	vsub.f32	s14, s14, s13
 8017e56:	2d00      	cmp	r5, #0
 8017e58:	ee37 7a67 	vsub.f32	s14, s14, s15
 8017e5c:	edd2 7a00 	vldr	s15, [r2]
 8017e60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8017e64:	bfb8      	it	lt
 8017e66:	eef1 7a67 	vneglt.f32	s15, s15
 8017e6a:	e760      	b.n	8017d2e <atanf+0x1e>
 8017e6c:	bfc90fdb 	.word	0xbfc90fdb
 8017e70:	3fc90fdb 	.word	0x3fc90fdb
 8017e74:	3edfffff 	.word	0x3edfffff
 8017e78:	7149f2ca 	.word	0x7149f2ca
 8017e7c:	3f97ffff 	.word	0x3f97ffff
 8017e80:	3c8569d7 	.word	0x3c8569d7
 8017e84:	3d4bda59 	.word	0x3d4bda59
 8017e88:	bd6ef16b 	.word	0xbd6ef16b
 8017e8c:	3d886b35 	.word	0x3d886b35
 8017e90:	3dba2e6e 	.word	0x3dba2e6e
 8017e94:	3e124925 	.word	0x3e124925
 8017e98:	3eaaaaab 	.word	0x3eaaaaab
 8017e9c:	bd15a221 	.word	0xbd15a221
 8017ea0:	bd9d8795 	.word	0xbd9d8795
 8017ea4:	bde38e38 	.word	0xbde38e38
 8017ea8:	be4ccccd 	.word	0xbe4ccccd
 8017eac:	401bffff 	.word	0x401bffff
 8017eb0:	080208f4 	.word	0x080208f4
 8017eb4:	080208e4 	.word	0x080208e4

08017eb8 <cosf>:
 8017eb8:	ee10 3a10 	vmov	r3, s0
 8017ebc:	b507      	push	{r0, r1, r2, lr}
 8017ebe:	4a1e      	ldr	r2, [pc, #120]	@ (8017f38 <cosf+0x80>)
 8017ec0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017ec4:	4293      	cmp	r3, r2
 8017ec6:	d806      	bhi.n	8017ed6 <cosf+0x1e>
 8017ec8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 8017f3c <cosf+0x84>
 8017ecc:	b003      	add	sp, #12
 8017ece:	f85d eb04 	ldr.w	lr, [sp], #4
 8017ed2:	f000 b8a3 	b.w	801801c <__kernel_cosf>
 8017ed6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017eda:	d304      	bcc.n	8017ee6 <cosf+0x2e>
 8017edc:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017ee0:	b003      	add	sp, #12
 8017ee2:	f85d fb04 	ldr.w	pc, [sp], #4
 8017ee6:	4668      	mov	r0, sp
 8017ee8:	f000 fe80 	bl	8018bec <__ieee754_rem_pio2f>
 8017eec:	f000 0003 	and.w	r0, r0, #3
 8017ef0:	2801      	cmp	r0, #1
 8017ef2:	d009      	beq.n	8017f08 <cosf+0x50>
 8017ef4:	2802      	cmp	r0, #2
 8017ef6:	d010      	beq.n	8017f1a <cosf+0x62>
 8017ef8:	b9b0      	cbnz	r0, 8017f28 <cosf+0x70>
 8017efa:	eddd 0a01 	vldr	s1, [sp, #4]
 8017efe:	ed9d 0a00 	vldr	s0, [sp]
 8017f02:	f000 f88b 	bl	801801c <__kernel_cosf>
 8017f06:	e7eb      	b.n	8017ee0 <cosf+0x28>
 8017f08:	eddd 0a01 	vldr	s1, [sp, #4]
 8017f0c:	ed9d 0a00 	vldr	s0, [sp]
 8017f10:	f000 f8dc 	bl	80180cc <__kernel_sinf>
 8017f14:	eeb1 0a40 	vneg.f32	s0, s0
 8017f18:	e7e2      	b.n	8017ee0 <cosf+0x28>
 8017f1a:	eddd 0a01 	vldr	s1, [sp, #4]
 8017f1e:	ed9d 0a00 	vldr	s0, [sp]
 8017f22:	f000 f87b 	bl	801801c <__kernel_cosf>
 8017f26:	e7f5      	b.n	8017f14 <cosf+0x5c>
 8017f28:	eddd 0a01 	vldr	s1, [sp, #4]
 8017f2c:	ed9d 0a00 	vldr	s0, [sp]
 8017f30:	2001      	movs	r0, #1
 8017f32:	f000 f8cb 	bl	80180cc <__kernel_sinf>
 8017f36:	e7d3      	b.n	8017ee0 <cosf+0x28>
 8017f38:	3f490fd8 	.word	0x3f490fd8
 8017f3c:	00000000 	.word	0x00000000

08017f40 <fabsf>:
 8017f40:	ee10 3a10 	vmov	r3, s0
 8017f44:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017f48:	ee00 3a10 	vmov	s0, r3
 8017f4c:	4770      	bx	lr
	...

08017f50 <sinf>:
 8017f50:	ee10 3a10 	vmov	r3, s0
 8017f54:	b507      	push	{r0, r1, r2, lr}
 8017f56:	4a1f      	ldr	r2, [pc, #124]	@ (8017fd4 <sinf+0x84>)
 8017f58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8017f5c:	4293      	cmp	r3, r2
 8017f5e:	d807      	bhi.n	8017f70 <sinf+0x20>
 8017f60:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8017fd8 <sinf+0x88>
 8017f64:	2000      	movs	r0, #0
 8017f66:	b003      	add	sp, #12
 8017f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8017f6c:	f000 b8ae 	b.w	80180cc <__kernel_sinf>
 8017f70:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8017f74:	d304      	bcc.n	8017f80 <sinf+0x30>
 8017f76:	ee30 0a40 	vsub.f32	s0, s0, s0
 8017f7a:	b003      	add	sp, #12
 8017f7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017f80:	4668      	mov	r0, sp
 8017f82:	f000 fe33 	bl	8018bec <__ieee754_rem_pio2f>
 8017f86:	f000 0003 	and.w	r0, r0, #3
 8017f8a:	2801      	cmp	r0, #1
 8017f8c:	d00a      	beq.n	8017fa4 <sinf+0x54>
 8017f8e:	2802      	cmp	r0, #2
 8017f90:	d00f      	beq.n	8017fb2 <sinf+0x62>
 8017f92:	b9c0      	cbnz	r0, 8017fc6 <sinf+0x76>
 8017f94:	eddd 0a01 	vldr	s1, [sp, #4]
 8017f98:	ed9d 0a00 	vldr	s0, [sp]
 8017f9c:	2001      	movs	r0, #1
 8017f9e:	f000 f895 	bl	80180cc <__kernel_sinf>
 8017fa2:	e7ea      	b.n	8017f7a <sinf+0x2a>
 8017fa4:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fa8:	ed9d 0a00 	vldr	s0, [sp]
 8017fac:	f000 f836 	bl	801801c <__kernel_cosf>
 8017fb0:	e7e3      	b.n	8017f7a <sinf+0x2a>
 8017fb2:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fb6:	ed9d 0a00 	vldr	s0, [sp]
 8017fba:	2001      	movs	r0, #1
 8017fbc:	f000 f886 	bl	80180cc <__kernel_sinf>
 8017fc0:	eeb1 0a40 	vneg.f32	s0, s0
 8017fc4:	e7d9      	b.n	8017f7a <sinf+0x2a>
 8017fc6:	eddd 0a01 	vldr	s1, [sp, #4]
 8017fca:	ed9d 0a00 	vldr	s0, [sp]
 8017fce:	f000 f825 	bl	801801c <__kernel_cosf>
 8017fd2:	e7f5      	b.n	8017fc0 <sinf+0x70>
 8017fd4:	3f490fd8 	.word	0x3f490fd8
 8017fd8:	00000000 	.word	0x00000000

08017fdc <finitef>:
 8017fdc:	ee10 3a10 	vmov	r3, s0
 8017fe0:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8017fe4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8017fe8:	bfac      	ite	ge
 8017fea:	2000      	movge	r0, #0
 8017fec:	2001      	movlt	r0, #1
 8017fee:	4770      	bx	lr

08017ff0 <copysignf>:
 8017ff0:	ee10 2a10 	vmov	r2, s0
 8017ff4:	ee10 3a90 	vmov	r3, s1
 8017ff8:	f362 031e 	bfi	r3, r2, #0, #31
 8017ffc:	ee00 3a90 	vmov	s1, r3
 8018000:	eeb0 0a60 	vmov.f32	s0, s1
 8018004:	4770      	bx	lr
	...

08018008 <nanf>:
 8018008:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018010 <nanf+0x8>
 801800c:	4770      	bx	lr
 801800e:	bf00      	nop
 8018010:	7fc00000 	.word	0x7fc00000

08018014 <__ieee754_sqrtf>:
 8018014:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8018018:	4770      	bx	lr
	...

0801801c <__kernel_cosf>:
 801801c:	ee10 3a10 	vmov	r3, s0
 8018020:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018024:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8018028:	eef0 6a40 	vmov.f32	s13, s0
 801802c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018030:	d204      	bcs.n	801803c <__kernel_cosf+0x20>
 8018032:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8018036:	ee17 2a90 	vmov	r2, s15
 801803a:	b342      	cbz	r2, 801808e <__kernel_cosf+0x72>
 801803c:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8018040:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80180ac <__kernel_cosf+0x90>
 8018044:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80180b0 <__kernel_cosf+0x94>
 8018048:	4a1a      	ldr	r2, [pc, #104]	@ (80180b4 <__kernel_cosf+0x98>)
 801804a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801804e:	4293      	cmp	r3, r2
 8018050:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80180b8 <__kernel_cosf+0x9c>
 8018054:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018058:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80180bc <__kernel_cosf+0xa0>
 801805c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018060:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80180c0 <__kernel_cosf+0xa4>
 8018064:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018068:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80180c4 <__kernel_cosf+0xa8>
 801806c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018070:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8018074:	ee26 6a07 	vmul.f32	s12, s12, s14
 8018078:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801807c:	eee7 0a06 	vfma.f32	s1, s14, s12
 8018080:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018084:	d804      	bhi.n	8018090 <__kernel_cosf+0x74>
 8018086:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801808a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801808e:	4770      	bx	lr
 8018090:	4a0d      	ldr	r2, [pc, #52]	@ (80180c8 <__kernel_cosf+0xac>)
 8018092:	4293      	cmp	r3, r2
 8018094:	bf9a      	itte	ls
 8018096:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 801809a:	ee07 3a10 	vmovls	s14, r3
 801809e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80180a2:	ee30 0a47 	vsub.f32	s0, s0, s14
 80180a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80180aa:	e7ec      	b.n	8018086 <__kernel_cosf+0x6a>
 80180ac:	ad47d74e 	.word	0xad47d74e
 80180b0:	310f74f6 	.word	0x310f74f6
 80180b4:	3e999999 	.word	0x3e999999
 80180b8:	b493f27c 	.word	0xb493f27c
 80180bc:	37d00d01 	.word	0x37d00d01
 80180c0:	bab60b61 	.word	0xbab60b61
 80180c4:	3d2aaaab 	.word	0x3d2aaaab
 80180c8:	3f480000 	.word	0x3f480000

080180cc <__kernel_sinf>:
 80180cc:	ee10 3a10 	vmov	r3, s0
 80180d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80180d4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80180d8:	d204      	bcs.n	80180e4 <__kernel_sinf+0x18>
 80180da:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80180de:	ee17 3a90 	vmov	r3, s15
 80180e2:	b35b      	cbz	r3, 801813c <__kernel_sinf+0x70>
 80180e4:	ee20 7a00 	vmul.f32	s14, s0, s0
 80180e8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8018140 <__kernel_sinf+0x74>
 80180ec:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8018144 <__kernel_sinf+0x78>
 80180f0:	eea7 6a27 	vfma.f32	s12, s14, s15
 80180f4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 8018148 <__kernel_sinf+0x7c>
 80180f8:	eee6 7a07 	vfma.f32	s15, s12, s14
 80180fc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 801814c <__kernel_sinf+0x80>
 8018100:	eea7 6a87 	vfma.f32	s12, s15, s14
 8018104:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8018150 <__kernel_sinf+0x84>
 8018108:	ee60 6a07 	vmul.f32	s13, s0, s14
 801810c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018110:	b930      	cbnz	r0, 8018120 <__kernel_sinf+0x54>
 8018112:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8018154 <__kernel_sinf+0x88>
 8018116:	eea7 6a27 	vfma.f32	s12, s14, s15
 801811a:	eea6 0a26 	vfma.f32	s0, s12, s13
 801811e:	4770      	bx	lr
 8018120:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8018124:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8018128:	eee0 7a86 	vfma.f32	s15, s1, s12
 801812c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8018130:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8018158 <__kernel_sinf+0x8c>
 8018134:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8018138:	ee30 0a60 	vsub.f32	s0, s0, s1
 801813c:	4770      	bx	lr
 801813e:	bf00      	nop
 8018140:	2f2ec9d3 	.word	0x2f2ec9d3
 8018144:	b2d72f34 	.word	0xb2d72f34
 8018148:	3638ef1b 	.word	0x3638ef1b
 801814c:	b9500d01 	.word	0xb9500d01
 8018150:	3c088889 	.word	0x3c088889
 8018154:	be2aaaab 	.word	0xbe2aaaab
 8018158:	3e2aaaab 	.word	0x3e2aaaab

0801815c <__ieee754_acosf>:
 801815c:	b508      	push	{r3, lr}
 801815e:	ee10 3a10 	vmov	r3, s0
 8018162:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8018166:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 801816a:	ed2d 8b0c 	vpush	{d8-d13}
 801816e:	d10a      	bne.n	8018186 <__ieee754_acosf+0x2a>
 8018170:	ed9f 0a64 	vldr	s0, [pc, #400]	@ 8018304 <__ieee754_acosf+0x1a8>
 8018174:	eddf 7a64 	vldr	s15, [pc, #400]	@ 8018308 <__ieee754_acosf+0x1ac>
 8018178:	2b00      	cmp	r3, #0
 801817a:	bfc8      	it	gt
 801817c:	eeb0 0a67 	vmovgt.f32	s0, s15
 8018180:	ecbd 8b0c 	vpop	{d8-d13}
 8018184:	bd08      	pop	{r3, pc}
 8018186:	d904      	bls.n	8018192 <__ieee754_acosf+0x36>
 8018188:	ee30 8a40 	vsub.f32	s16, s0, s0
 801818c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018190:	e7f6      	b.n	8018180 <__ieee754_acosf+0x24>
 8018192:	f1b2 5f7c 	cmp.w	r2, #1056964608	@ 0x3f000000
 8018196:	d23c      	bcs.n	8018212 <__ieee754_acosf+0xb6>
 8018198:	f1b2 5f0c 	cmp.w	r2, #587202560	@ 0x23000000
 801819c:	f240 80af 	bls.w	80182fe <__ieee754_acosf+0x1a2>
 80181a0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80181a4:	eddf 6a59 	vldr	s13, [pc, #356]	@ 801830c <__ieee754_acosf+0x1b0>
 80181a8:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018310 <__ieee754_acosf+0x1b4>
 80181ac:	ed9f 6a59 	vldr	s12, [pc, #356]	@ 8018314 <__ieee754_acosf+0x1b8>
 80181b0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80181b4:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8018318 <__ieee754_acosf+0x1bc>
 80181b8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80181bc:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 801831c <__ieee754_acosf+0x1c0>
 80181c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80181c4:	eddf 6a56 	vldr	s13, [pc, #344]	@ 8018320 <__ieee754_acosf+0x1c4>
 80181c8:	eee7 6a27 	vfma.f32	s13, s14, s15
 80181cc:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018324 <__ieee754_acosf+0x1c8>
 80181d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80181d4:	eddf 6a54 	vldr	s13, [pc, #336]	@ 8018328 <__ieee754_acosf+0x1cc>
 80181d8:	eea7 6aa6 	vfma.f32	s12, s15, s13
 80181dc:	eddf 6a53 	vldr	s13, [pc, #332]	@ 801832c <__ieee754_acosf+0x1d0>
 80181e0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80181e4:	ed9f 6a52 	vldr	s12, [pc, #328]	@ 8018330 <__ieee754_acosf+0x1d4>
 80181e8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80181ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80181f0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80181f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80181f8:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8018334 <__ieee754_acosf+0x1d8>
 80181fc:	ee87 6a26 	vdiv.f32	s12, s14, s13
 8018200:	eee0 7a46 	vfms.f32	s15, s0, s12
 8018204:	ee70 7a67 	vsub.f32	s15, s0, s15
 8018208:	ed9f 0a4b 	vldr	s0, [pc, #300]	@ 8018338 <__ieee754_acosf+0x1dc>
 801820c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018210:	e7b6      	b.n	8018180 <__ieee754_acosf+0x24>
 8018212:	2b00      	cmp	r3, #0
 8018214:	eddf da3d 	vldr	s27, [pc, #244]	@ 801830c <__ieee754_acosf+0x1b0>
 8018218:	eddf ca3d 	vldr	s25, [pc, #244]	@ 8018310 <__ieee754_acosf+0x1b4>
 801821c:	ed9f ca3e 	vldr	s24, [pc, #248]	@ 8018318 <__ieee754_acosf+0x1bc>
 8018220:	eddf ba3e 	vldr	s23, [pc, #248]	@ 801831c <__ieee754_acosf+0x1c0>
 8018224:	ed9f ba3e 	vldr	s22, [pc, #248]	@ 8018320 <__ieee754_acosf+0x1c4>
 8018228:	eddf 8a3e 	vldr	s17, [pc, #248]	@ 8018324 <__ieee754_acosf+0x1c8>
 801822c:	ed9f da3e 	vldr	s26, [pc, #248]	@ 8018328 <__ieee754_acosf+0x1cc>
 8018230:	eddf aa38 	vldr	s21, [pc, #224]	@ 8018314 <__ieee754_acosf+0x1b8>
 8018234:	ed9f aa3d 	vldr	s20, [pc, #244]	@ 801832c <__ieee754_acosf+0x1d0>
 8018238:	eddf 9a3d 	vldr	s19, [pc, #244]	@ 8018330 <__ieee754_acosf+0x1d4>
 801823c:	eeb7 9a00 	vmov.f32	s18, #112	@ 0x3f800000  1.0
 8018240:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018244:	da28      	bge.n	8018298 <__ieee754_acosf+0x13c>
 8018246:	ee30 8a09 	vadd.f32	s16, s0, s18
 801824a:	ee28 0a27 	vmul.f32	s0, s16, s15
 801824e:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8018252:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8018256:	eeac ca80 	vfma.f32	s24, s25, s0
 801825a:	eeaa aa80 	vfma.f32	s20, s21, s0
 801825e:	eeec ba00 	vfma.f32	s23, s24, s0
 8018262:	eeea 9a00 	vfma.f32	s19, s20, s0
 8018266:	eeab ba80 	vfma.f32	s22, s23, s0
 801826a:	eea9 9a80 	vfma.f32	s18, s19, s0
 801826e:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8018272:	ee68 8a80 	vmul.f32	s17, s17, s0
 8018276:	f7ff fecd 	bl	8018014 <__ieee754_sqrtf>
 801827a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801827e:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 801833c <__ieee754_acosf+0x1e0>
 8018282:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018286:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 801828a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801828e:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8018340 <__ieee754_acosf+0x1e4>
 8018292:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8018296:	e773      	b.n	8018180 <__ieee754_acosf+0x24>
 8018298:	ee39 8a40 	vsub.f32	s16, s18, s0
 801829c:	ee28 8a27 	vmul.f32	s16, s16, s15
 80182a0:	eeb0 0a48 	vmov.f32	s0, s16
 80182a4:	f7ff feb6 	bl	8018014 <__ieee754_sqrtf>
 80182a8:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80182ac:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80182b0:	eeac ca88 	vfma.f32	s24, s25, s16
 80182b4:	eeaa aa88 	vfma.f32	s20, s21, s16
 80182b8:	eeec ba08 	vfma.f32	s23, s24, s16
 80182bc:	ee10 3a10 	vmov	r3, s0
 80182c0:	eeab ba88 	vfma.f32	s22, s23, s16
 80182c4:	f36f 030b 	bfc	r3, #0, #12
 80182c8:	eeea 9a08 	vfma.f32	s19, s20, s16
 80182cc:	ee07 3a90 	vmov	s15, r3
 80182d0:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80182d4:	eeb0 6a48 	vmov.f32	s12, s16
 80182d8:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80182dc:	eea9 9a88 	vfma.f32	s18, s19, s16
 80182e0:	ee70 6a27 	vadd.f32	s13, s0, s15
 80182e4:	ee68 8a88 	vmul.f32	s17, s17, s16
 80182e8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80182ec:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80182f0:	eea0 7a26 	vfma.f32	s14, s0, s13
 80182f4:	ee37 0a87 	vadd.f32	s0, s15, s14
 80182f8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80182fc:	e740      	b.n	8018180 <__ieee754_acosf+0x24>
 80182fe:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 8018344 <__ieee754_acosf+0x1e8>
 8018302:	e73d      	b.n	8018180 <__ieee754_acosf+0x24>
 8018304:	40490fdb 	.word	0x40490fdb
 8018308:	00000000 	.word	0x00000000
 801830c:	3811ef08 	.word	0x3811ef08
 8018310:	3a4f7f04 	.word	0x3a4f7f04
 8018314:	bf303361 	.word	0xbf303361
 8018318:	bd241146 	.word	0xbd241146
 801831c:	3e4e0aa8 	.word	0x3e4e0aa8
 8018320:	bea6b090 	.word	0xbea6b090
 8018324:	3e2aaaab 	.word	0x3e2aaaab
 8018328:	3d9dc62e 	.word	0x3d9dc62e
 801832c:	4001572d 	.word	0x4001572d
 8018330:	c019d139 	.word	0xc019d139
 8018334:	33a22168 	.word	0x33a22168
 8018338:	3fc90fda 	.word	0x3fc90fda
 801833c:	b3a22168 	.word	0xb3a22168
 8018340:	40490fda 	.word	0x40490fda
 8018344:	3fc90fdb 	.word	0x3fc90fdb

08018348 <__ieee754_asinf>:
 8018348:	b538      	push	{r3, r4, r5, lr}
 801834a:	ee10 5a10 	vmov	r5, s0
 801834e:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8018352:	f1b4 5f7e 	cmp.w	r4, #1065353216	@ 0x3f800000
 8018356:	ed2d 8b04 	vpush	{d8-d9}
 801835a:	d10c      	bne.n	8018376 <__ieee754_asinf+0x2e>
 801835c:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80184d0 <__ieee754_asinf+0x188>
 8018360:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80184d4 <__ieee754_asinf+0x18c>
 8018364:	ee60 7a27 	vmul.f32	s15, s0, s15
 8018368:	eee0 7a07 	vfma.f32	s15, s0, s14
 801836c:	eeb0 0a67 	vmov.f32	s0, s15
 8018370:	ecbd 8b04 	vpop	{d8-d9}
 8018374:	bd38      	pop	{r3, r4, r5, pc}
 8018376:	d904      	bls.n	8018382 <__ieee754_asinf+0x3a>
 8018378:	ee70 7a40 	vsub.f32	s15, s0, s0
 801837c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018380:	e7f6      	b.n	8018370 <__ieee754_asinf+0x28>
 8018382:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8018386:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 801838a:	d20b      	bcs.n	80183a4 <__ieee754_asinf+0x5c>
 801838c:	f1b4 5f48 	cmp.w	r4, #838860800	@ 0x32000000
 8018390:	d252      	bcs.n	8018438 <__ieee754_asinf+0xf0>
 8018392:	eddf 7a51 	vldr	s15, [pc, #324]	@ 80184d8 <__ieee754_asinf+0x190>
 8018396:	ee70 7a27 	vadd.f32	s15, s0, s15
 801839a:	eef4 7ae8 	vcmpe.f32	s15, s17
 801839e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183a2:	dce5      	bgt.n	8018370 <__ieee754_asinf+0x28>
 80183a4:	f7ff fdcc 	bl	8017f40 <fabsf>
 80183a8:	ee38 8ac0 	vsub.f32	s16, s17, s0
 80183ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80183b0:	ee28 8a27 	vmul.f32	s16, s16, s15
 80183b4:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80184dc <__ieee754_asinf+0x194>
 80183b8:	eddf 7a49 	vldr	s15, [pc, #292]	@ 80184e0 <__ieee754_asinf+0x198>
 80183bc:	ed9f 9a49 	vldr	s18, [pc, #292]	@ 80184e4 <__ieee754_asinf+0x19c>
 80183c0:	eea8 7a27 	vfma.f32	s14, s16, s15
 80183c4:	eddf 7a48 	vldr	s15, [pc, #288]	@ 80184e8 <__ieee754_asinf+0x1a0>
 80183c8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80183cc:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 80184ec <__ieee754_asinf+0x1a4>
 80183d0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80183d4:	eddf 7a46 	vldr	s15, [pc, #280]	@ 80184f0 <__ieee754_asinf+0x1a8>
 80183d8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80183dc:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80184f4 <__ieee754_asinf+0x1ac>
 80183e0:	eea7 9a88 	vfma.f32	s18, s15, s16
 80183e4:	eddf 7a44 	vldr	s15, [pc, #272]	@ 80184f8 <__ieee754_asinf+0x1b0>
 80183e8:	eee8 7a07 	vfma.f32	s15, s16, s14
 80183ec:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 80184fc <__ieee754_asinf+0x1b4>
 80183f0:	eea7 7a88 	vfma.f32	s14, s15, s16
 80183f4:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8018500 <__ieee754_asinf+0x1b8>
 80183f8:	eee7 7a08 	vfma.f32	s15, s14, s16
 80183fc:	eeb0 0a48 	vmov.f32	s0, s16
 8018400:	eee7 8a88 	vfma.f32	s17, s15, s16
 8018404:	f7ff fe06 	bl	8018014 <__ieee754_sqrtf>
 8018408:	4b3e      	ldr	r3, [pc, #248]	@ (8018504 <__ieee754_asinf+0x1bc>)
 801840a:	ee29 9a08 	vmul.f32	s18, s18, s16
 801840e:	429c      	cmp	r4, r3
 8018410:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8018414:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018418:	d93d      	bls.n	8018496 <__ieee754_asinf+0x14e>
 801841a:	eea0 0a06 	vfma.f32	s0, s0, s12
 801841e:	eddf 7a3a 	vldr	s15, [pc, #232]	@ 8018508 <__ieee754_asinf+0x1c0>
 8018422:	eee0 7a26 	vfma.f32	s15, s0, s13
 8018426:	ed9f 0a2b 	vldr	s0, [pc, #172]	@ 80184d4 <__ieee754_asinf+0x18c>
 801842a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801842e:	2d00      	cmp	r5, #0
 8018430:	bfd8      	it	le
 8018432:	eeb1 0a40 	vnegle.f32	s0, s0
 8018436:	e79b      	b.n	8018370 <__ieee754_asinf+0x28>
 8018438:	ee60 7a00 	vmul.f32	s15, s0, s0
 801843c:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80184e0 <__ieee754_asinf+0x198>
 8018440:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80184dc <__ieee754_asinf+0x194>
 8018444:	ed9f 6a2b 	vldr	s12, [pc, #172]	@ 80184f4 <__ieee754_asinf+0x1ac>
 8018448:	eea7 7aa6 	vfma.f32	s14, s15, s13
 801844c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80184e8 <__ieee754_asinf+0x1a0>
 8018450:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018454:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80184ec <__ieee754_asinf+0x1a4>
 8018458:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801845c:	eddf 6a24 	vldr	s13, [pc, #144]	@ 80184f0 <__ieee754_asinf+0x1a8>
 8018460:	eee7 6a27 	vfma.f32	s13, s14, s15
 8018464:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80184e4 <__ieee754_asinf+0x19c>
 8018468:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801846c:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80184f8 <__ieee754_asinf+0x1b0>
 8018470:	eee7 6a86 	vfma.f32	s13, s15, s12
 8018474:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 80184fc <__ieee754_asinf+0x1b4>
 8018478:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801847c:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8018500 <__ieee754_asinf+0x1b8>
 8018480:	eee6 6a27 	vfma.f32	s13, s12, s15
 8018484:	ee27 7a27 	vmul.f32	s14, s14, s15
 8018488:	eee6 8aa7 	vfma.f32	s17, s13, s15
 801848c:	eec7 7a28 	vdiv.f32	s15, s14, s17
 8018490:	eea0 0a27 	vfma.f32	s0, s0, s15
 8018494:	e76c      	b.n	8018370 <__ieee754_asinf+0x28>
 8018496:	ee10 3a10 	vmov	r3, s0
 801849a:	f36f 030b 	bfc	r3, #0, #12
 801849e:	ee07 3a10 	vmov	s14, r3
 80184a2:	eea7 8a47 	vfms.f32	s16, s14, s14
 80184a6:	ee70 5a00 	vadd.f32	s11, s0, s0
 80184aa:	ee30 0a07 	vadd.f32	s0, s0, s14
 80184ae:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80184d0 <__ieee754_asinf+0x188>
 80184b2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 80184b6:	ed9f 0a15 	vldr	s0, [pc, #84]	@ 801850c <__ieee754_asinf+0x1c4>
 80184ba:	eee5 7a66 	vfms.f32	s15, s10, s13
 80184be:	eed5 7a86 	vfnms.f32	s15, s11, s12
 80184c2:	eeb0 6a40 	vmov.f32	s12, s0
 80184c6:	eea7 6a66 	vfms.f32	s12, s14, s13
 80184ca:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80184ce:	e7ac      	b.n	801842a <__ieee754_asinf+0xe2>
 80184d0:	b33bbd2e 	.word	0xb33bbd2e
 80184d4:	3fc90fdb 	.word	0x3fc90fdb
 80184d8:	7149f2ca 	.word	0x7149f2ca
 80184dc:	3a4f7f04 	.word	0x3a4f7f04
 80184e0:	3811ef08 	.word	0x3811ef08
 80184e4:	3e2aaaab 	.word	0x3e2aaaab
 80184e8:	bd241146 	.word	0xbd241146
 80184ec:	3e4e0aa8 	.word	0x3e4e0aa8
 80184f0:	bea6b090 	.word	0xbea6b090
 80184f4:	3d9dc62e 	.word	0x3d9dc62e
 80184f8:	bf303361 	.word	0xbf303361
 80184fc:	4001572d 	.word	0x4001572d
 8018500:	c019d139 	.word	0xc019d139
 8018504:	3f799999 	.word	0x3f799999
 8018508:	333bbd2e 	.word	0x333bbd2e
 801850c:	3f490fdb 	.word	0x3f490fdb

08018510 <__ieee754_atan2f>:
 8018510:	ee10 2a90 	vmov	r2, s1
 8018514:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8018518:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801851c:	b510      	push	{r4, lr}
 801851e:	eef0 7a40 	vmov.f32	s15, s0
 8018522:	d806      	bhi.n	8018532 <__ieee754_atan2f+0x22>
 8018524:	ee10 0a10 	vmov	r0, s0
 8018528:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 801852c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018530:	d904      	bls.n	801853c <__ieee754_atan2f+0x2c>
 8018532:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8018536:	eeb0 0a67 	vmov.f32	s0, s15
 801853a:	bd10      	pop	{r4, pc}
 801853c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8018540:	d103      	bne.n	801854a <__ieee754_atan2f+0x3a>
 8018542:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018546:	f7ff bbe3 	b.w	8017d10 <atanf>
 801854a:	1794      	asrs	r4, r2, #30
 801854c:	f004 0402 	and.w	r4, r4, #2
 8018550:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8018554:	b943      	cbnz	r3, 8018568 <__ieee754_atan2f+0x58>
 8018556:	2c02      	cmp	r4, #2
 8018558:	d05e      	beq.n	8018618 <__ieee754_atan2f+0x108>
 801855a:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801862c <__ieee754_atan2f+0x11c>
 801855e:	2c03      	cmp	r4, #3
 8018560:	bf08      	it	eq
 8018562:	eef0 7a47 	vmoveq.f32	s15, s14
 8018566:	e7e6      	b.n	8018536 <__ieee754_atan2f+0x26>
 8018568:	b941      	cbnz	r1, 801857c <__ieee754_atan2f+0x6c>
 801856a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8018630 <__ieee754_atan2f+0x120>
 801856e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8018634 <__ieee754_atan2f+0x124>
 8018572:	2800      	cmp	r0, #0
 8018574:	bfa8      	it	ge
 8018576:	eef0 7a47 	vmovge.f32	s15, s14
 801857a:	e7dc      	b.n	8018536 <__ieee754_atan2f+0x26>
 801857c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8018580:	d110      	bne.n	80185a4 <__ieee754_atan2f+0x94>
 8018582:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8018586:	f104 34ff 	add.w	r4, r4, #4294967295
 801858a:	d107      	bne.n	801859c <__ieee754_atan2f+0x8c>
 801858c:	2c02      	cmp	r4, #2
 801858e:	d846      	bhi.n	801861e <__ieee754_atan2f+0x10e>
 8018590:	4b29      	ldr	r3, [pc, #164]	@ (8018638 <__ieee754_atan2f+0x128>)
 8018592:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8018596:	edd3 7a00 	vldr	s15, [r3]
 801859a:	e7cc      	b.n	8018536 <__ieee754_atan2f+0x26>
 801859c:	2c02      	cmp	r4, #2
 801859e:	d841      	bhi.n	8018624 <__ieee754_atan2f+0x114>
 80185a0:	4b26      	ldr	r3, [pc, #152]	@ (801863c <__ieee754_atan2f+0x12c>)
 80185a2:	e7f6      	b.n	8018592 <__ieee754_atan2f+0x82>
 80185a4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80185a8:	d0df      	beq.n	801856a <__ieee754_atan2f+0x5a>
 80185aa:	1a5b      	subs	r3, r3, r1
 80185ac:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80185b0:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80185b4:	da1a      	bge.n	80185ec <__ieee754_atan2f+0xdc>
 80185b6:	2a00      	cmp	r2, #0
 80185b8:	da01      	bge.n	80185be <__ieee754_atan2f+0xae>
 80185ba:	313c      	adds	r1, #60	@ 0x3c
 80185bc:	db19      	blt.n	80185f2 <__ieee754_atan2f+0xe2>
 80185be:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80185c2:	f7ff fcbd 	bl	8017f40 <fabsf>
 80185c6:	f7ff fba3 	bl	8017d10 <atanf>
 80185ca:	eef0 7a40 	vmov.f32	s15, s0
 80185ce:	2c01      	cmp	r4, #1
 80185d0:	d012      	beq.n	80185f8 <__ieee754_atan2f+0xe8>
 80185d2:	2c02      	cmp	r4, #2
 80185d4:	d017      	beq.n	8018606 <__ieee754_atan2f+0xf6>
 80185d6:	2c00      	cmp	r4, #0
 80185d8:	d0ad      	beq.n	8018536 <__ieee754_atan2f+0x26>
 80185da:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8018640 <__ieee754_atan2f+0x130>
 80185de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80185e2:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8018644 <__ieee754_atan2f+0x134>
 80185e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80185ea:	e7a4      	b.n	8018536 <__ieee754_atan2f+0x26>
 80185ec:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8018634 <__ieee754_atan2f+0x124>
 80185f0:	e7ed      	b.n	80185ce <__ieee754_atan2f+0xbe>
 80185f2:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8018648 <__ieee754_atan2f+0x138>
 80185f6:	e7ea      	b.n	80185ce <__ieee754_atan2f+0xbe>
 80185f8:	ee17 3a90 	vmov	r3, s15
 80185fc:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8018600:	ee07 3a90 	vmov	s15, r3
 8018604:	e797      	b.n	8018536 <__ieee754_atan2f+0x26>
 8018606:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8018640 <__ieee754_atan2f+0x130>
 801860a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801860e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8018644 <__ieee754_atan2f+0x134>
 8018612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018616:	e78e      	b.n	8018536 <__ieee754_atan2f+0x26>
 8018618:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8018644 <__ieee754_atan2f+0x134>
 801861c:	e78b      	b.n	8018536 <__ieee754_atan2f+0x26>
 801861e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 801864c <__ieee754_atan2f+0x13c>
 8018622:	e788      	b.n	8018536 <__ieee754_atan2f+0x26>
 8018624:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8018648 <__ieee754_atan2f+0x138>
 8018628:	e785      	b.n	8018536 <__ieee754_atan2f+0x26>
 801862a:	bf00      	nop
 801862c:	c0490fdb 	.word	0xc0490fdb
 8018630:	bfc90fdb 	.word	0xbfc90fdb
 8018634:	3fc90fdb 	.word	0x3fc90fdb
 8018638:	08020910 	.word	0x08020910
 801863c:	08020904 	.word	0x08020904
 8018640:	33bbbd2e 	.word	0x33bbbd2e
 8018644:	40490fdb 	.word	0x40490fdb
 8018648:	00000000 	.word	0x00000000
 801864c:	3f490fdb 	.word	0x3f490fdb

08018650 <__ieee754_powf>:
 8018650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018654:	ee10 4a90 	vmov	r4, s1
 8018658:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 801865c:	ed2d 8b02 	vpush	{d8}
 8018660:	ee10 6a10 	vmov	r6, s0
 8018664:	eeb0 8a40 	vmov.f32	s16, s0
 8018668:	eef0 8a60 	vmov.f32	s17, s1
 801866c:	d10c      	bne.n	8018688 <__ieee754_powf+0x38>
 801866e:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8018672:	0076      	lsls	r6, r6, #1
 8018674:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8018678:	f240 8274 	bls.w	8018b64 <__ieee754_powf+0x514>
 801867c:	ee38 0a28 	vadd.f32	s0, s16, s17
 8018680:	ecbd 8b02 	vpop	{d8}
 8018684:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018688:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 801868c:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8018690:	d802      	bhi.n	8018698 <__ieee754_powf+0x48>
 8018692:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018696:	d908      	bls.n	80186aa <__ieee754_powf+0x5a>
 8018698:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 801869c:	d1ee      	bne.n	801867c <__ieee754_powf+0x2c>
 801869e:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 80186a2:	0064      	lsls	r4, r4, #1
 80186a4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 80186a8:	e7e6      	b.n	8018678 <__ieee754_powf+0x28>
 80186aa:	2e00      	cmp	r6, #0
 80186ac:	da1f      	bge.n	80186ee <__ieee754_powf+0x9e>
 80186ae:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 80186b2:	f080 8260 	bcs.w	8018b76 <__ieee754_powf+0x526>
 80186b6:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80186ba:	d32f      	bcc.n	801871c <__ieee754_powf+0xcc>
 80186bc:	ea4f 53e9 	mov.w	r3, r9, asr #23
 80186c0:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80186c4:	fa49 f503 	asr.w	r5, r9, r3
 80186c8:	fa05 f303 	lsl.w	r3, r5, r3
 80186cc:	454b      	cmp	r3, r9
 80186ce:	d123      	bne.n	8018718 <__ieee754_powf+0xc8>
 80186d0:	f005 0501 	and.w	r5, r5, #1
 80186d4:	f1c5 0502 	rsb	r5, r5, #2
 80186d8:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 80186dc:	d11f      	bne.n	801871e <__ieee754_powf+0xce>
 80186de:	2c00      	cmp	r4, #0
 80186e0:	f280 8246 	bge.w	8018b70 <__ieee754_powf+0x520>
 80186e4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80186e8:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80186ec:	e7c8      	b.n	8018680 <__ieee754_powf+0x30>
 80186ee:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 80186f2:	d111      	bne.n	8018718 <__ieee754_powf+0xc8>
 80186f4:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 80186f8:	f000 8234 	beq.w	8018b64 <__ieee754_powf+0x514>
 80186fc:	d906      	bls.n	801870c <__ieee754_powf+0xbc>
 80186fe:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8018a14 <__ieee754_powf+0x3c4>
 8018702:	2c00      	cmp	r4, #0
 8018704:	bfa8      	it	ge
 8018706:	eeb0 0a68 	vmovge.f32	s0, s17
 801870a:	e7b9      	b.n	8018680 <__ieee754_powf+0x30>
 801870c:	2c00      	cmp	r4, #0
 801870e:	f280 822c 	bge.w	8018b6a <__ieee754_powf+0x51a>
 8018712:	eeb1 0a68 	vneg.f32	s0, s17
 8018716:	e7b3      	b.n	8018680 <__ieee754_powf+0x30>
 8018718:	2500      	movs	r5, #0
 801871a:	e7dd      	b.n	80186d8 <__ieee754_powf+0x88>
 801871c:	2500      	movs	r5, #0
 801871e:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8018722:	d102      	bne.n	801872a <__ieee754_powf+0xda>
 8018724:	ee28 0a08 	vmul.f32	s0, s16, s16
 8018728:	e7aa      	b.n	8018680 <__ieee754_powf+0x30>
 801872a:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 801872e:	f040 8227 	bne.w	8018b80 <__ieee754_powf+0x530>
 8018732:	2e00      	cmp	r6, #0
 8018734:	f2c0 8224 	blt.w	8018b80 <__ieee754_powf+0x530>
 8018738:	eeb0 0a48 	vmov.f32	s0, s16
 801873c:	ecbd 8b02 	vpop	{d8}
 8018740:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018744:	f7ff bc66 	b.w	8018014 <__ieee754_sqrtf>
 8018748:	2d01      	cmp	r5, #1
 801874a:	d199      	bne.n	8018680 <__ieee754_powf+0x30>
 801874c:	eeb1 0a40 	vneg.f32	s0, s0
 8018750:	e796      	b.n	8018680 <__ieee754_powf+0x30>
 8018752:	0ff0      	lsrs	r0, r6, #31
 8018754:	3801      	subs	r0, #1
 8018756:	ea55 0300 	orrs.w	r3, r5, r0
 801875a:	d104      	bne.n	8018766 <__ieee754_powf+0x116>
 801875c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8018760:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8018764:	e78c      	b.n	8018680 <__ieee754_powf+0x30>
 8018766:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 801876a:	d96d      	bls.n	8018848 <__ieee754_powf+0x1f8>
 801876c:	4baa      	ldr	r3, [pc, #680]	@ (8018a18 <__ieee754_powf+0x3c8>)
 801876e:	4598      	cmp	r8, r3
 8018770:	d808      	bhi.n	8018784 <__ieee754_powf+0x134>
 8018772:	2c00      	cmp	r4, #0
 8018774:	da0b      	bge.n	801878e <__ieee754_powf+0x13e>
 8018776:	2000      	movs	r0, #0
 8018778:	ecbd 8b02 	vpop	{d8}
 801877c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018780:	f000 bbea 	b.w	8018f58 <__math_oflowf>
 8018784:	4ba5      	ldr	r3, [pc, #660]	@ (8018a1c <__ieee754_powf+0x3cc>)
 8018786:	4598      	cmp	r8, r3
 8018788:	d908      	bls.n	801879c <__ieee754_powf+0x14c>
 801878a:	2c00      	cmp	r4, #0
 801878c:	dcf3      	bgt.n	8018776 <__ieee754_powf+0x126>
 801878e:	2000      	movs	r0, #0
 8018790:	ecbd 8b02 	vpop	{d8}
 8018794:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018798:	f000 bbd8 	b.w	8018f4c <__math_uflowf>
 801879c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80187a0:	ee30 0a67 	vsub.f32	s0, s0, s15
 80187a4:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8018a20 <__ieee754_powf+0x3d0>
 80187a8:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 80187ac:	eee0 6a67 	vfms.f32	s13, s0, s15
 80187b0:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80187b4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80187b8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80187bc:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8018a24 <__ieee754_powf+0x3d4>
 80187c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80187c4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8018a28 <__ieee754_powf+0x3d8>
 80187c8:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 80187cc:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8018a2c <__ieee754_powf+0x3dc>
 80187d0:	eee0 7a07 	vfma.f32	s15, s0, s14
 80187d4:	eeb0 7a67 	vmov.f32	s14, s15
 80187d8:	eea0 7a26 	vfma.f32	s14, s0, s13
 80187dc:	ee17 3a10 	vmov	r3, s14
 80187e0:	f36f 030b 	bfc	r3, #0, #12
 80187e4:	ee07 3a10 	vmov	s14, r3
 80187e8:	eeb0 6a47 	vmov.f32	s12, s14
 80187ec:	eea0 6a66 	vfms.f32	s12, s0, s13
 80187f0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80187f4:	3d01      	subs	r5, #1
 80187f6:	4305      	orrs	r5, r0
 80187f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80187fc:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8018800:	f36f 040b 	bfc	r4, #0, #12
 8018804:	bf18      	it	ne
 8018806:	eeb0 8a66 	vmovne.f32	s16, s13
 801880a:	ee06 4a90 	vmov	s13, r4
 801880e:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8018812:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8018816:	ee67 7a26 	vmul.f32	s15, s14, s13
 801881a:	eee6 0a07 	vfma.f32	s1, s12, s14
 801881e:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8018822:	ee17 1a10 	vmov	r1, s14
 8018826:	2900      	cmp	r1, #0
 8018828:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 801882c:	f340 80dd 	ble.w	80189ea <__ieee754_powf+0x39a>
 8018830:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8018834:	f240 80ca 	bls.w	80189cc <__ieee754_powf+0x37c>
 8018838:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 801883c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018840:	bf4c      	ite	mi
 8018842:	2001      	movmi	r0, #1
 8018844:	2000      	movpl	r0, #0
 8018846:	e797      	b.n	8018778 <__ieee754_powf+0x128>
 8018848:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 801884c:	bf01      	itttt	eq
 801884e:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8018a30 <__ieee754_powf+0x3e0>
 8018852:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8018856:	f06f 0317 	mvneq.w	r3, #23
 801885a:	ee17 7a90 	vmoveq	r7, s15
 801885e:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8018862:	bf18      	it	ne
 8018864:	2300      	movne	r3, #0
 8018866:	3a7f      	subs	r2, #127	@ 0x7f
 8018868:	441a      	add	r2, r3
 801886a:	4b72      	ldr	r3, [pc, #456]	@ (8018a34 <__ieee754_powf+0x3e4>)
 801886c:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8018870:	429f      	cmp	r7, r3
 8018872:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8018876:	dd06      	ble.n	8018886 <__ieee754_powf+0x236>
 8018878:	4b6f      	ldr	r3, [pc, #444]	@ (8018a38 <__ieee754_powf+0x3e8>)
 801887a:	429f      	cmp	r7, r3
 801887c:	f340 80a4 	ble.w	80189c8 <__ieee754_powf+0x378>
 8018880:	3201      	adds	r2, #1
 8018882:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8018886:	2600      	movs	r6, #0
 8018888:	4b6c      	ldr	r3, [pc, #432]	@ (8018a3c <__ieee754_powf+0x3ec>)
 801888a:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 801888e:	ee07 1a10 	vmov	s14, r1
 8018892:	edd3 5a00 	vldr	s11, [r3]
 8018896:	4b6a      	ldr	r3, [pc, #424]	@ (8018a40 <__ieee754_powf+0x3f0>)
 8018898:	ee75 7a87 	vadd.f32	s15, s11, s14
 801889c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80188a0:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 80188a4:	1049      	asrs	r1, r1, #1
 80188a6:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 80188aa:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 80188ae:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 80188b2:	ee37 6a65 	vsub.f32	s12, s14, s11
 80188b6:	ee07 1a90 	vmov	s15, r1
 80188ba:	ee26 5a24 	vmul.f32	s10, s12, s9
 80188be:	ee77 5ae5 	vsub.f32	s11, s15, s11
 80188c2:	ee15 7a10 	vmov	r7, s10
 80188c6:	401f      	ands	r7, r3
 80188c8:	ee06 7a90 	vmov	s13, r7
 80188cc:	eea6 6ae7 	vfms.f32	s12, s13, s15
 80188d0:	ee37 7a65 	vsub.f32	s14, s14, s11
 80188d4:	ee65 7a05 	vmul.f32	s15, s10, s10
 80188d8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80188dc:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8018a44 <__ieee754_powf+0x3f4>
 80188e0:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8018a48 <__ieee754_powf+0x3f8>
 80188e4:	eee7 5a87 	vfma.f32	s11, s15, s14
 80188e8:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8018a4c <__ieee754_powf+0x3fc>
 80188ec:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80188f0:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8018a20 <__ieee754_powf+0x3d0>
 80188f4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80188f8:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8018a50 <__ieee754_powf+0x400>
 80188fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8018900:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8018a54 <__ieee754_powf+0x404>
 8018904:	ee26 6a24 	vmul.f32	s12, s12, s9
 8018908:	eee7 5a27 	vfma.f32	s11, s14, s15
 801890c:	ee35 7a26 	vadd.f32	s14, s10, s13
 8018910:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8018914:	ee27 7a06 	vmul.f32	s14, s14, s12
 8018918:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 801891c:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8018920:	eef0 5a67 	vmov.f32	s11, s15
 8018924:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8018928:	ee75 5a87 	vadd.f32	s11, s11, s14
 801892c:	ee15 1a90 	vmov	r1, s11
 8018930:	4019      	ands	r1, r3
 8018932:	ee05 1a90 	vmov	s11, r1
 8018936:	ee75 7ae7 	vsub.f32	s15, s11, s15
 801893a:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801893e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8018942:	ee67 7a85 	vmul.f32	s15, s15, s10
 8018946:	eee6 7a25 	vfma.f32	s15, s12, s11
 801894a:	eeb0 6a67 	vmov.f32	s12, s15
 801894e:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018952:	ee16 1a10 	vmov	r1, s12
 8018956:	4019      	ands	r1, r3
 8018958:	ee06 1a10 	vmov	s12, r1
 801895c:	eeb0 7a46 	vmov.f32	s14, s12
 8018960:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8018964:	493c      	ldr	r1, [pc, #240]	@ (8018a58 <__ieee754_powf+0x408>)
 8018966:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 801896a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801896e:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8018a5c <__ieee754_powf+0x40c>
 8018972:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 8018a60 <__ieee754_powf+0x410>
 8018976:	ee67 7a87 	vmul.f32	s15, s15, s14
 801897a:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8018a64 <__ieee754_powf+0x414>
 801897e:	eee6 7a07 	vfma.f32	s15, s12, s14
 8018982:	ed91 7a00 	vldr	s14, [r1]
 8018986:	ee77 7a87 	vadd.f32	s15, s15, s14
 801898a:	ee07 2a10 	vmov	s14, r2
 801898e:	4a36      	ldr	r2, [pc, #216]	@ (8018a68 <__ieee754_powf+0x418>)
 8018990:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8018994:	eeb0 7a67 	vmov.f32	s14, s15
 8018998:	eea6 7a25 	vfma.f32	s14, s12, s11
 801899c:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80189a0:	ed92 5a00 	vldr	s10, [r2]
 80189a4:	ee37 7a05 	vadd.f32	s14, s14, s10
 80189a8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80189ac:	ee17 2a10 	vmov	r2, s14
 80189b0:	401a      	ands	r2, r3
 80189b2:	ee07 2a10 	vmov	s14, r2
 80189b6:	ee77 6a66 	vsub.f32	s13, s14, s13
 80189ba:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80189be:	eee6 6a65 	vfms.f32	s13, s12, s11
 80189c2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80189c6:	e715      	b.n	80187f4 <__ieee754_powf+0x1a4>
 80189c8:	2601      	movs	r6, #1
 80189ca:	e75d      	b.n	8018888 <__ieee754_powf+0x238>
 80189cc:	d152      	bne.n	8018a74 <__ieee754_powf+0x424>
 80189ce:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8018a6c <__ieee754_powf+0x41c>
 80189d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80189d6:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80189da:	eef4 6ac7 	vcmpe.f32	s13, s14
 80189de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189e2:	f73f af29 	bgt.w	8018838 <__ieee754_powf+0x1e8>
 80189e6:	2386      	movs	r3, #134	@ 0x86
 80189e8:	e048      	b.n	8018a7c <__ieee754_powf+0x42c>
 80189ea:	4a21      	ldr	r2, [pc, #132]	@ (8018a70 <__ieee754_powf+0x420>)
 80189ec:	4293      	cmp	r3, r2
 80189ee:	d907      	bls.n	8018a00 <__ieee754_powf+0x3b0>
 80189f0:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80189f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80189f8:	bf4c      	ite	mi
 80189fa:	2001      	movmi	r0, #1
 80189fc:	2000      	movpl	r0, #0
 80189fe:	e6c7      	b.n	8018790 <__ieee754_powf+0x140>
 8018a00:	d138      	bne.n	8018a74 <__ieee754_powf+0x424>
 8018a02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8018a06:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8018a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018a0e:	dbea      	blt.n	80189e6 <__ieee754_powf+0x396>
 8018a10:	e7ee      	b.n	80189f0 <__ieee754_powf+0x3a0>
 8018a12:	bf00      	nop
 8018a14:	00000000 	.word	0x00000000
 8018a18:	3f7ffff3 	.word	0x3f7ffff3
 8018a1c:	3f800007 	.word	0x3f800007
 8018a20:	3eaaaaab 	.word	0x3eaaaaab
 8018a24:	3fb8aa00 	.word	0x3fb8aa00
 8018a28:	3fb8aa3b 	.word	0x3fb8aa3b
 8018a2c:	36eca570 	.word	0x36eca570
 8018a30:	4b800000 	.word	0x4b800000
 8018a34:	001cc471 	.word	0x001cc471
 8018a38:	005db3d6 	.word	0x005db3d6
 8018a3c:	0802092c 	.word	0x0802092c
 8018a40:	fffff000 	.word	0xfffff000
 8018a44:	3e6c3255 	.word	0x3e6c3255
 8018a48:	3e53f142 	.word	0x3e53f142
 8018a4c:	3e8ba305 	.word	0x3e8ba305
 8018a50:	3edb6db7 	.word	0x3edb6db7
 8018a54:	3f19999a 	.word	0x3f19999a
 8018a58:	0802091c 	.word	0x0802091c
 8018a5c:	3f76384f 	.word	0x3f76384f
 8018a60:	3f763800 	.word	0x3f763800
 8018a64:	369dc3a0 	.word	0x369dc3a0
 8018a68:	08020924 	.word	0x08020924
 8018a6c:	3338aa3c 	.word	0x3338aa3c
 8018a70:	43160000 	.word	0x43160000
 8018a74:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8018a78:	d96f      	bls.n	8018b5a <__ieee754_powf+0x50a>
 8018a7a:	15db      	asrs	r3, r3, #23
 8018a7c:	3b7e      	subs	r3, #126	@ 0x7e
 8018a7e:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8018a82:	4118      	asrs	r0, r3
 8018a84:	4408      	add	r0, r1
 8018a86:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018a8a:	4a4e      	ldr	r2, [pc, #312]	@ (8018bc4 <__ieee754_powf+0x574>)
 8018a8c:	3b7f      	subs	r3, #127	@ 0x7f
 8018a8e:	411a      	asrs	r2, r3
 8018a90:	4002      	ands	r2, r0
 8018a92:	ee07 2a10 	vmov	s14, r2
 8018a96:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8018a9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8018a9e:	f1c3 0317 	rsb	r3, r3, #23
 8018aa2:	4118      	asrs	r0, r3
 8018aa4:	2900      	cmp	r1, #0
 8018aa6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018aaa:	bfb8      	it	lt
 8018aac:	4240      	neglt	r0, r0
 8018aae:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8018ab2:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8018bc8 <__ieee754_powf+0x578>
 8018ab6:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 8018bcc <__ieee754_powf+0x57c>
 8018aba:	ee16 3a90 	vmov	r3, s13
 8018abe:	f36f 030b 	bfc	r3, #0, #12
 8018ac2:	ee06 3a90 	vmov	s13, r3
 8018ac6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018aca:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018ace:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8018ad2:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8018bd0 <__ieee754_powf+0x580>
 8018ad6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8018ada:	eee0 7a87 	vfma.f32	s15, s1, s14
 8018ade:	eeb0 7a67 	vmov.f32	s14, s15
 8018ae2:	eea6 7a86 	vfma.f32	s14, s13, s12
 8018ae6:	eef0 5a47 	vmov.f32	s11, s14
 8018aea:	eee6 5ac6 	vfms.f32	s11, s13, s12
 8018aee:	ee67 6a07 	vmul.f32	s13, s14, s14
 8018af2:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8018af6:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 8018bd4 <__ieee754_powf+0x584>
 8018afa:	eddf 5a37 	vldr	s11, [pc, #220]	@ 8018bd8 <__ieee754_powf+0x588>
 8018afe:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8018b02:	eddf 5a36 	vldr	s11, [pc, #216]	@ 8018bdc <__ieee754_powf+0x58c>
 8018b06:	eee6 5a26 	vfma.f32	s11, s12, s13
 8018b0a:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 8018be0 <__ieee754_powf+0x590>
 8018b0e:	eea5 6aa6 	vfma.f32	s12, s11, s13
 8018b12:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8018be4 <__ieee754_powf+0x594>
 8018b16:	eee6 5a26 	vfma.f32	s11, s12, s13
 8018b1a:	eeb0 6a47 	vmov.f32	s12, s14
 8018b1e:	eea5 6ae6 	vfms.f32	s12, s11, s13
 8018b22:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8018b26:	ee67 5a06 	vmul.f32	s11, s14, s12
 8018b2a:	ee36 6a66 	vsub.f32	s12, s12, s13
 8018b2e:	eee7 7a27 	vfma.f32	s15, s14, s15
 8018b32:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8018b36:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8018b3a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018b3e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018b42:	ee10 3a10 	vmov	r3, s0
 8018b46:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8018b4a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8018b4e:	da06      	bge.n	8018b5e <__ieee754_powf+0x50e>
 8018b50:	f000 f97c 	bl	8018e4c <scalbnf>
 8018b54:	ee20 0a08 	vmul.f32	s0, s0, s16
 8018b58:	e592      	b.n	8018680 <__ieee754_powf+0x30>
 8018b5a:	2000      	movs	r0, #0
 8018b5c:	e7a7      	b.n	8018aae <__ieee754_powf+0x45e>
 8018b5e:	ee00 3a10 	vmov	s0, r3
 8018b62:	e7f7      	b.n	8018b54 <__ieee754_powf+0x504>
 8018b64:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8018b68:	e58a      	b.n	8018680 <__ieee754_powf+0x30>
 8018b6a:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 8018be8 <__ieee754_powf+0x598>
 8018b6e:	e587      	b.n	8018680 <__ieee754_powf+0x30>
 8018b70:	eeb0 0a48 	vmov.f32	s0, s16
 8018b74:	e584      	b.n	8018680 <__ieee754_powf+0x30>
 8018b76:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8018b7a:	f43f adbb 	beq.w	80186f4 <__ieee754_powf+0xa4>
 8018b7e:	2502      	movs	r5, #2
 8018b80:	eeb0 0a48 	vmov.f32	s0, s16
 8018b84:	f7ff f9dc 	bl	8017f40 <fabsf>
 8018b88:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8018b8c:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 8018b90:	4647      	mov	r7, r8
 8018b92:	d003      	beq.n	8018b9c <__ieee754_powf+0x54c>
 8018b94:	f1b8 0f00 	cmp.w	r8, #0
 8018b98:	f47f addb 	bne.w	8018752 <__ieee754_powf+0x102>
 8018b9c:	2c00      	cmp	r4, #0
 8018b9e:	bfbc      	itt	lt
 8018ba0:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 8018ba4:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8018ba8:	2e00      	cmp	r6, #0
 8018baa:	f6bf ad69 	bge.w	8018680 <__ieee754_powf+0x30>
 8018bae:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 8018bb2:	ea58 0805 	orrs.w	r8, r8, r5
 8018bb6:	f47f adc7 	bne.w	8018748 <__ieee754_powf+0xf8>
 8018bba:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018bbe:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8018bc2:	e55d      	b.n	8018680 <__ieee754_powf+0x30>
 8018bc4:	ff800000 	.word	0xff800000
 8018bc8:	3f317218 	.word	0x3f317218
 8018bcc:	3f317200 	.word	0x3f317200
 8018bd0:	35bfbe8c 	.word	0x35bfbe8c
 8018bd4:	b5ddea0e 	.word	0xb5ddea0e
 8018bd8:	3331bb4c 	.word	0x3331bb4c
 8018bdc:	388ab355 	.word	0x388ab355
 8018be0:	bb360b61 	.word	0xbb360b61
 8018be4:	3e2aaaab 	.word	0x3e2aaaab
 8018be8:	00000000 	.word	0x00000000

08018bec <__ieee754_rem_pio2f>:
 8018bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018bee:	ee10 6a10 	vmov	r6, s0
 8018bf2:	4b88      	ldr	r3, [pc, #544]	@ (8018e14 <__ieee754_rem_pio2f+0x228>)
 8018bf4:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 8018bf8:	429d      	cmp	r5, r3
 8018bfa:	b087      	sub	sp, #28
 8018bfc:	4604      	mov	r4, r0
 8018bfe:	d805      	bhi.n	8018c0c <__ieee754_rem_pio2f+0x20>
 8018c00:	2300      	movs	r3, #0
 8018c02:	ed80 0a00 	vstr	s0, [r0]
 8018c06:	6043      	str	r3, [r0, #4]
 8018c08:	2000      	movs	r0, #0
 8018c0a:	e022      	b.n	8018c52 <__ieee754_rem_pio2f+0x66>
 8018c0c:	4b82      	ldr	r3, [pc, #520]	@ (8018e18 <__ieee754_rem_pio2f+0x22c>)
 8018c0e:	429d      	cmp	r5, r3
 8018c10:	d83a      	bhi.n	8018c88 <__ieee754_rem_pio2f+0x9c>
 8018c12:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8018c16:	2e00      	cmp	r6, #0
 8018c18:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 8018e1c <__ieee754_rem_pio2f+0x230>
 8018c1c:	4a80      	ldr	r2, [pc, #512]	@ (8018e20 <__ieee754_rem_pio2f+0x234>)
 8018c1e:	f023 030f 	bic.w	r3, r3, #15
 8018c22:	dd18      	ble.n	8018c56 <__ieee754_rem_pio2f+0x6a>
 8018c24:	4293      	cmp	r3, r2
 8018c26:	ee70 7a47 	vsub.f32	s15, s0, s14
 8018c2a:	bf09      	itett	eq
 8018c2c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 8018e24 <__ieee754_rem_pio2f+0x238>
 8018c30:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 8018e28 <__ieee754_rem_pio2f+0x23c>
 8018c34:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 8018e2c <__ieee754_rem_pio2f+0x240>
 8018c38:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8018c3c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 8018c40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c44:	ed80 7a00 	vstr	s14, [r0]
 8018c48:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8018c4c:	edc0 7a01 	vstr	s15, [r0, #4]
 8018c50:	2001      	movs	r0, #1
 8018c52:	b007      	add	sp, #28
 8018c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018c56:	4293      	cmp	r3, r2
 8018c58:	ee70 7a07 	vadd.f32	s15, s0, s14
 8018c5c:	bf09      	itett	eq
 8018c5e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 8018e24 <__ieee754_rem_pio2f+0x238>
 8018c62:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 8018e28 <__ieee754_rem_pio2f+0x23c>
 8018c66:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 8018e2c <__ieee754_rem_pio2f+0x240>
 8018c6a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8018c6e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8018c72:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018c76:	ed80 7a00 	vstr	s14, [r0]
 8018c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8018c7e:	edc0 7a01 	vstr	s15, [r0, #4]
 8018c82:	f04f 30ff 	mov.w	r0, #4294967295
 8018c86:	e7e4      	b.n	8018c52 <__ieee754_rem_pio2f+0x66>
 8018c88:	4b69      	ldr	r3, [pc, #420]	@ (8018e30 <__ieee754_rem_pio2f+0x244>)
 8018c8a:	429d      	cmp	r5, r3
 8018c8c:	d873      	bhi.n	8018d76 <__ieee754_rem_pio2f+0x18a>
 8018c8e:	f7ff f957 	bl	8017f40 <fabsf>
 8018c92:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 8018e34 <__ieee754_rem_pio2f+0x248>
 8018c96:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8018c9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8018c9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8018ca2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8018ca6:	ee17 0a90 	vmov	r0, s15
 8018caa:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018e1c <__ieee754_rem_pio2f+0x230>
 8018cae:	eea7 0a67 	vfms.f32	s0, s14, s15
 8018cb2:	281f      	cmp	r0, #31
 8018cb4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 8018e28 <__ieee754_rem_pio2f+0x23c>
 8018cb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8018cbc:	eeb1 6a47 	vneg.f32	s12, s14
 8018cc0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8018cc4:	ee16 1a90 	vmov	r1, s13
 8018cc8:	dc09      	bgt.n	8018cde <__ieee754_rem_pio2f+0xf2>
 8018cca:	4a5b      	ldr	r2, [pc, #364]	@ (8018e38 <__ieee754_rem_pio2f+0x24c>)
 8018ccc:	1e47      	subs	r7, r0, #1
 8018cce:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8018cd2:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 8018cd6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8018cda:	4293      	cmp	r3, r2
 8018cdc:	d107      	bne.n	8018cee <__ieee754_rem_pio2f+0x102>
 8018cde:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8018ce2:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 8018ce6:	2a08      	cmp	r2, #8
 8018ce8:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8018cec:	dc14      	bgt.n	8018d18 <__ieee754_rem_pio2f+0x12c>
 8018cee:	6021      	str	r1, [r4, #0]
 8018cf0:	ed94 7a00 	vldr	s14, [r4]
 8018cf4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8018cf8:	2e00      	cmp	r6, #0
 8018cfa:	ee30 0a67 	vsub.f32	s0, s0, s15
 8018cfe:	ed84 0a01 	vstr	s0, [r4, #4]
 8018d02:	daa6      	bge.n	8018c52 <__ieee754_rem_pio2f+0x66>
 8018d04:	eeb1 7a47 	vneg.f32	s14, s14
 8018d08:	eeb1 0a40 	vneg.f32	s0, s0
 8018d0c:	ed84 7a00 	vstr	s14, [r4]
 8018d10:	ed84 0a01 	vstr	s0, [r4, #4]
 8018d14:	4240      	negs	r0, r0
 8018d16:	e79c      	b.n	8018c52 <__ieee754_rem_pio2f+0x66>
 8018d18:	eddf 5a42 	vldr	s11, [pc, #264]	@ 8018e24 <__ieee754_rem_pio2f+0x238>
 8018d1c:	eef0 6a40 	vmov.f32	s13, s0
 8018d20:	eee6 6a25 	vfma.f32	s13, s12, s11
 8018d24:	ee70 7a66 	vsub.f32	s15, s0, s13
 8018d28:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018d2c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8018e2c <__ieee754_rem_pio2f+0x240>
 8018d30:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8018d34:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8018d38:	ee15 2a90 	vmov	r2, s11
 8018d3c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8018d40:	1a5b      	subs	r3, r3, r1
 8018d42:	2b19      	cmp	r3, #25
 8018d44:	dc04      	bgt.n	8018d50 <__ieee754_rem_pio2f+0x164>
 8018d46:	edc4 5a00 	vstr	s11, [r4]
 8018d4a:	eeb0 0a66 	vmov.f32	s0, s13
 8018d4e:	e7cf      	b.n	8018cf0 <__ieee754_rem_pio2f+0x104>
 8018d50:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 8018e3c <__ieee754_rem_pio2f+0x250>
 8018d54:	eeb0 0a66 	vmov.f32	s0, s13
 8018d58:	eea6 0a25 	vfma.f32	s0, s12, s11
 8018d5c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8018d60:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8018e40 <__ieee754_rem_pio2f+0x254>
 8018d64:	eee6 7a25 	vfma.f32	s15, s12, s11
 8018d68:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8018d6c:	ee30 7a67 	vsub.f32	s14, s0, s15
 8018d70:	ed84 7a00 	vstr	s14, [r4]
 8018d74:	e7bc      	b.n	8018cf0 <__ieee754_rem_pio2f+0x104>
 8018d76:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8018d7a:	d306      	bcc.n	8018d8a <__ieee754_rem_pio2f+0x19e>
 8018d7c:	ee70 7a40 	vsub.f32	s15, s0, s0
 8018d80:	edc0 7a01 	vstr	s15, [r0, #4]
 8018d84:	edc0 7a00 	vstr	s15, [r0]
 8018d88:	e73e      	b.n	8018c08 <__ieee754_rem_pio2f+0x1c>
 8018d8a:	15ea      	asrs	r2, r5, #23
 8018d8c:	3a86      	subs	r2, #134	@ 0x86
 8018d8e:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8018d92:	ee07 3a90 	vmov	s15, r3
 8018d96:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018d9a:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 8018e44 <__ieee754_rem_pio2f+0x258>
 8018d9e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018da2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018da6:	ed8d 7a03 	vstr	s14, [sp, #12]
 8018daa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018dae:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8018db2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8018db6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8018dba:	ed8d 7a04 	vstr	s14, [sp, #16]
 8018dbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8018dc2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8018dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dca:	edcd 7a05 	vstr	s15, [sp, #20]
 8018dce:	d11e      	bne.n	8018e0e <__ieee754_rem_pio2f+0x222>
 8018dd0:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8018dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018dd8:	bf0c      	ite	eq
 8018dda:	2301      	moveq	r3, #1
 8018ddc:	2302      	movne	r3, #2
 8018dde:	491a      	ldr	r1, [pc, #104]	@ (8018e48 <__ieee754_rem_pio2f+0x25c>)
 8018de0:	9101      	str	r1, [sp, #4]
 8018de2:	2102      	movs	r1, #2
 8018de4:	9100      	str	r1, [sp, #0]
 8018de6:	a803      	add	r0, sp, #12
 8018de8:	4621      	mov	r1, r4
 8018dea:	f000 f8bb 	bl	8018f64 <__kernel_rem_pio2f>
 8018dee:	2e00      	cmp	r6, #0
 8018df0:	f6bf af2f 	bge.w	8018c52 <__ieee754_rem_pio2f+0x66>
 8018df4:	edd4 7a00 	vldr	s15, [r4]
 8018df8:	eef1 7a67 	vneg.f32	s15, s15
 8018dfc:	edc4 7a00 	vstr	s15, [r4]
 8018e00:	edd4 7a01 	vldr	s15, [r4, #4]
 8018e04:	eef1 7a67 	vneg.f32	s15, s15
 8018e08:	edc4 7a01 	vstr	s15, [r4, #4]
 8018e0c:	e782      	b.n	8018d14 <__ieee754_rem_pio2f+0x128>
 8018e0e:	2303      	movs	r3, #3
 8018e10:	e7e5      	b.n	8018dde <__ieee754_rem_pio2f+0x1f2>
 8018e12:	bf00      	nop
 8018e14:	3f490fd8 	.word	0x3f490fd8
 8018e18:	4016cbe3 	.word	0x4016cbe3
 8018e1c:	3fc90f80 	.word	0x3fc90f80
 8018e20:	3fc90fd0 	.word	0x3fc90fd0
 8018e24:	37354400 	.word	0x37354400
 8018e28:	37354443 	.word	0x37354443
 8018e2c:	2e85a308 	.word	0x2e85a308
 8018e30:	43490f80 	.word	0x43490f80
 8018e34:	3f22f984 	.word	0x3f22f984
 8018e38:	08020934 	.word	0x08020934
 8018e3c:	2e85a300 	.word	0x2e85a300
 8018e40:	248d3132 	.word	0x248d3132
 8018e44:	43800000 	.word	0x43800000
 8018e48:	080209b4 	.word	0x080209b4

08018e4c <scalbnf>:
 8018e4c:	ee10 3a10 	vmov	r3, s0
 8018e50:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8018e54:	d02b      	beq.n	8018eae <scalbnf+0x62>
 8018e56:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8018e5a:	d302      	bcc.n	8018e62 <scalbnf+0x16>
 8018e5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018e60:	4770      	bx	lr
 8018e62:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8018e66:	d123      	bne.n	8018eb0 <scalbnf+0x64>
 8018e68:	4b24      	ldr	r3, [pc, #144]	@ (8018efc <scalbnf+0xb0>)
 8018e6a:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8018f00 <scalbnf+0xb4>
 8018e6e:	4298      	cmp	r0, r3
 8018e70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018e74:	db17      	blt.n	8018ea6 <scalbnf+0x5a>
 8018e76:	ee10 3a10 	vmov	r3, s0
 8018e7a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018e7e:	3a19      	subs	r2, #25
 8018e80:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8018e84:	4288      	cmp	r0, r1
 8018e86:	dd15      	ble.n	8018eb4 <scalbnf+0x68>
 8018e88:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8018f04 <scalbnf+0xb8>
 8018e8c:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8018f08 <scalbnf+0xbc>
 8018e90:	ee10 3a10 	vmov	r3, s0
 8018e94:	eeb0 7a67 	vmov.f32	s14, s15
 8018e98:	2b00      	cmp	r3, #0
 8018e9a:	bfb8      	it	lt
 8018e9c:	eef0 7a66 	vmovlt.f32	s15, s13
 8018ea0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8018ea4:	4770      	bx	lr
 8018ea6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8018f0c <scalbnf+0xc0>
 8018eaa:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018eae:	4770      	bx	lr
 8018eb0:	0dd2      	lsrs	r2, r2, #23
 8018eb2:	e7e5      	b.n	8018e80 <scalbnf+0x34>
 8018eb4:	4410      	add	r0, r2
 8018eb6:	28fe      	cmp	r0, #254	@ 0xfe
 8018eb8:	dce6      	bgt.n	8018e88 <scalbnf+0x3c>
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	dd06      	ble.n	8018ecc <scalbnf+0x80>
 8018ebe:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018ec2:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018ec6:	ee00 3a10 	vmov	s0, r3
 8018eca:	4770      	bx	lr
 8018ecc:	f110 0f16 	cmn.w	r0, #22
 8018ed0:	da09      	bge.n	8018ee6 <scalbnf+0x9a>
 8018ed2:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8018f0c <scalbnf+0xc0>
 8018ed6:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8018f10 <scalbnf+0xc4>
 8018eda:	ee10 3a10 	vmov	r3, s0
 8018ede:	eeb0 7a67 	vmov.f32	s14, s15
 8018ee2:	2b00      	cmp	r3, #0
 8018ee4:	e7d9      	b.n	8018e9a <scalbnf+0x4e>
 8018ee6:	3019      	adds	r0, #25
 8018ee8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8018eec:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8018ef0:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8018f14 <scalbnf+0xc8>
 8018ef4:	ee07 3a90 	vmov	s15, r3
 8018ef8:	e7d7      	b.n	8018eaa <scalbnf+0x5e>
 8018efa:	bf00      	nop
 8018efc:	ffff3cb0 	.word	0xffff3cb0
 8018f00:	4c000000 	.word	0x4c000000
 8018f04:	7149f2ca 	.word	0x7149f2ca
 8018f08:	f149f2ca 	.word	0xf149f2ca
 8018f0c:	0da24260 	.word	0x0da24260
 8018f10:	8da24260 	.word	0x8da24260
 8018f14:	33000000 	.word	0x33000000

08018f18 <with_errnof>:
 8018f18:	b510      	push	{r4, lr}
 8018f1a:	ed2d 8b02 	vpush	{d8}
 8018f1e:	eeb0 8a40 	vmov.f32	s16, s0
 8018f22:	4604      	mov	r4, r0
 8018f24:	f001 fdb8 	bl	801aa98 <__errno>
 8018f28:	eeb0 0a48 	vmov.f32	s0, s16
 8018f2c:	ecbd 8b02 	vpop	{d8}
 8018f30:	6004      	str	r4, [r0, #0]
 8018f32:	bd10      	pop	{r4, pc}

08018f34 <xflowf>:
 8018f34:	b130      	cbz	r0, 8018f44 <xflowf+0x10>
 8018f36:	eef1 7a40 	vneg.f32	s15, s0
 8018f3a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8018f3e:	2022      	movs	r0, #34	@ 0x22
 8018f40:	f7ff bfea 	b.w	8018f18 <with_errnof>
 8018f44:	eef0 7a40 	vmov.f32	s15, s0
 8018f48:	e7f7      	b.n	8018f3a <xflowf+0x6>
	...

08018f4c <__math_uflowf>:
 8018f4c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018f54 <__math_uflowf+0x8>
 8018f50:	f7ff bff0 	b.w	8018f34 <xflowf>
 8018f54:	10000000 	.word	0x10000000

08018f58 <__math_oflowf>:
 8018f58:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8018f60 <__math_oflowf+0x8>
 8018f5c:	f7ff bfea 	b.w	8018f34 <xflowf>
 8018f60:	70000000 	.word	0x70000000

08018f64 <__kernel_rem_pio2f>:
 8018f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f68:	ed2d 8b04 	vpush	{d8-d9}
 8018f6c:	b0d9      	sub	sp, #356	@ 0x164
 8018f6e:	4690      	mov	r8, r2
 8018f70:	9001      	str	r0, [sp, #4]
 8018f72:	4ab6      	ldr	r2, [pc, #728]	@ (801924c <__kernel_rem_pio2f+0x2e8>)
 8018f74:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8018f76:	f118 0f04 	cmn.w	r8, #4
 8018f7a:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 8018f7e:	460f      	mov	r7, r1
 8018f80:	f103 3bff 	add.w	fp, r3, #4294967295
 8018f84:	db26      	blt.n	8018fd4 <__kernel_rem_pio2f+0x70>
 8018f86:	f1b8 0203 	subs.w	r2, r8, #3
 8018f8a:	bf48      	it	mi
 8018f8c:	f108 0204 	addmi.w	r2, r8, #4
 8018f90:	10d2      	asrs	r2, r2, #3
 8018f92:	1c55      	adds	r5, r2, #1
 8018f94:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8018f96:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 801925c <__kernel_rem_pio2f+0x2f8>
 8018f9a:	00e8      	lsls	r0, r5, #3
 8018f9c:	eba2 060b 	sub.w	r6, r2, fp
 8018fa0:	9002      	str	r0, [sp, #8]
 8018fa2:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8018fa6:	eb0a 0c0b 	add.w	ip, sl, fp
 8018faa:	ac1c      	add	r4, sp, #112	@ 0x70
 8018fac:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8018fb0:	2000      	movs	r0, #0
 8018fb2:	4560      	cmp	r0, ip
 8018fb4:	dd10      	ble.n	8018fd8 <__kernel_rem_pio2f+0x74>
 8018fb6:	a91c      	add	r1, sp, #112	@ 0x70
 8018fb8:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8018fbc:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8018fc0:	2600      	movs	r6, #0
 8018fc2:	4556      	cmp	r6, sl
 8018fc4:	dc24      	bgt.n	8019010 <__kernel_rem_pio2f+0xac>
 8018fc6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8018fca:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 801925c <__kernel_rem_pio2f+0x2f8>
 8018fce:	4684      	mov	ip, r0
 8018fd0:	2400      	movs	r4, #0
 8018fd2:	e016      	b.n	8019002 <__kernel_rem_pio2f+0x9e>
 8018fd4:	2200      	movs	r2, #0
 8018fd6:	e7dc      	b.n	8018f92 <__kernel_rem_pio2f+0x2e>
 8018fd8:	42c6      	cmn	r6, r0
 8018fda:	bf5d      	ittte	pl
 8018fdc:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8018fe0:	ee07 1a90 	vmovpl	s15, r1
 8018fe4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8018fe8:	eef0 7a47 	vmovmi.f32	s15, s14
 8018fec:	ece4 7a01 	vstmia	r4!, {s15}
 8018ff0:	3001      	adds	r0, #1
 8018ff2:	e7de      	b.n	8018fb2 <__kernel_rem_pio2f+0x4e>
 8018ff4:	ecfe 6a01 	vldmia	lr!, {s13}
 8018ff8:	ed3c 7a01 	vldmdb	ip!, {s14}
 8018ffc:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019000:	3401      	adds	r4, #1
 8019002:	455c      	cmp	r4, fp
 8019004:	ddf6      	ble.n	8018ff4 <__kernel_rem_pio2f+0x90>
 8019006:	ece9 7a01 	vstmia	r9!, {s15}
 801900a:	3601      	adds	r6, #1
 801900c:	3004      	adds	r0, #4
 801900e:	e7d8      	b.n	8018fc2 <__kernel_rem_pio2f+0x5e>
 8019010:	a908      	add	r1, sp, #32
 8019012:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8019016:	9104      	str	r1, [sp, #16]
 8019018:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801901a:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 8019258 <__kernel_rem_pio2f+0x2f4>
 801901e:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8019254 <__kernel_rem_pio2f+0x2f0>
 8019022:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8019026:	9203      	str	r2, [sp, #12]
 8019028:	4654      	mov	r4, sl
 801902a:	00a2      	lsls	r2, r4, #2
 801902c:	9205      	str	r2, [sp, #20]
 801902e:	aa58      	add	r2, sp, #352	@ 0x160
 8019030:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8019034:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 8019038:	a944      	add	r1, sp, #272	@ 0x110
 801903a:	aa08      	add	r2, sp, #32
 801903c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8019040:	4694      	mov	ip, r2
 8019042:	4626      	mov	r6, r4
 8019044:	2e00      	cmp	r6, #0
 8019046:	dc4c      	bgt.n	80190e2 <__kernel_rem_pio2f+0x17e>
 8019048:	4628      	mov	r0, r5
 801904a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801904e:	f7ff fefd 	bl	8018e4c <scalbnf>
 8019052:	eeb0 8a40 	vmov.f32	s16, s0
 8019056:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801905a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801905e:	f000 f9e9 	bl	8019434 <floorf>
 8019062:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 8019066:	eea0 8a67 	vfms.f32	s16, s0, s15
 801906a:	2d00      	cmp	r5, #0
 801906c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8019070:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8019074:	ee17 9a90 	vmov	r9, s15
 8019078:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801907c:	ee38 8a67 	vsub.f32	s16, s16, s15
 8019080:	dd41      	ble.n	8019106 <__kernel_rem_pio2f+0x1a2>
 8019082:	f104 3cff 	add.w	ip, r4, #4294967295
 8019086:	a908      	add	r1, sp, #32
 8019088:	f1c5 0e08 	rsb	lr, r5, #8
 801908c:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8019090:	fa46 f00e 	asr.w	r0, r6, lr
 8019094:	4481      	add	r9, r0
 8019096:	fa00 f00e 	lsl.w	r0, r0, lr
 801909a:	1a36      	subs	r6, r6, r0
 801909c:	f1c5 0007 	rsb	r0, r5, #7
 80190a0:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80190a4:	4106      	asrs	r6, r0
 80190a6:	2e00      	cmp	r6, #0
 80190a8:	dd3c      	ble.n	8019124 <__kernel_rem_pio2f+0x1c0>
 80190aa:	f04f 0e00 	mov.w	lr, #0
 80190ae:	f109 0901 	add.w	r9, r9, #1
 80190b2:	4670      	mov	r0, lr
 80190b4:	4574      	cmp	r4, lr
 80190b6:	dc68      	bgt.n	801918a <__kernel_rem_pio2f+0x226>
 80190b8:	2d00      	cmp	r5, #0
 80190ba:	dd03      	ble.n	80190c4 <__kernel_rem_pio2f+0x160>
 80190bc:	2d01      	cmp	r5, #1
 80190be:	d074      	beq.n	80191aa <__kernel_rem_pio2f+0x246>
 80190c0:	2d02      	cmp	r5, #2
 80190c2:	d07d      	beq.n	80191c0 <__kernel_rem_pio2f+0x25c>
 80190c4:	2e02      	cmp	r6, #2
 80190c6:	d12d      	bne.n	8019124 <__kernel_rem_pio2f+0x1c0>
 80190c8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80190cc:	ee30 8a48 	vsub.f32	s16, s0, s16
 80190d0:	b340      	cbz	r0, 8019124 <__kernel_rem_pio2f+0x1c0>
 80190d2:	4628      	mov	r0, r5
 80190d4:	9306      	str	r3, [sp, #24]
 80190d6:	f7ff feb9 	bl	8018e4c <scalbnf>
 80190da:	9b06      	ldr	r3, [sp, #24]
 80190dc:	ee38 8a40 	vsub.f32	s16, s16, s0
 80190e0:	e020      	b.n	8019124 <__kernel_rem_pio2f+0x1c0>
 80190e2:	ee60 7a28 	vmul.f32	s15, s0, s17
 80190e6:	3e01      	subs	r6, #1
 80190e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80190ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80190f0:	eea7 0ac9 	vfms.f32	s0, s15, s18
 80190f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80190f8:	ecac 0a01 	vstmia	ip!, {s0}
 80190fc:	ed30 0a01 	vldmdb	r0!, {s0}
 8019100:	ee37 0a80 	vadd.f32	s0, s15, s0
 8019104:	e79e      	b.n	8019044 <__kernel_rem_pio2f+0xe0>
 8019106:	d105      	bne.n	8019114 <__kernel_rem_pio2f+0x1b0>
 8019108:	1e60      	subs	r0, r4, #1
 801910a:	a908      	add	r1, sp, #32
 801910c:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8019110:	11f6      	asrs	r6, r6, #7
 8019112:	e7c8      	b.n	80190a6 <__kernel_rem_pio2f+0x142>
 8019114:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8019118:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801911c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019120:	da31      	bge.n	8019186 <__kernel_rem_pio2f+0x222>
 8019122:	2600      	movs	r6, #0
 8019124:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8019128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801912c:	f040 8098 	bne.w	8019260 <__kernel_rem_pio2f+0x2fc>
 8019130:	1e60      	subs	r0, r4, #1
 8019132:	2200      	movs	r2, #0
 8019134:	4550      	cmp	r0, sl
 8019136:	da4b      	bge.n	80191d0 <__kernel_rem_pio2f+0x26c>
 8019138:	2a00      	cmp	r2, #0
 801913a:	d065      	beq.n	8019208 <__kernel_rem_pio2f+0x2a4>
 801913c:	3c01      	subs	r4, #1
 801913e:	ab08      	add	r3, sp, #32
 8019140:	3d08      	subs	r5, #8
 8019142:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d0f8      	beq.n	801913c <__kernel_rem_pio2f+0x1d8>
 801914a:	4628      	mov	r0, r5
 801914c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8019150:	f7ff fe7c 	bl	8018e4c <scalbnf>
 8019154:	1c63      	adds	r3, r4, #1
 8019156:	aa44      	add	r2, sp, #272	@ 0x110
 8019158:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8019258 <__kernel_rem_pio2f+0x2f4>
 801915c:	0099      	lsls	r1, r3, #2
 801915e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8019162:	4623      	mov	r3, r4
 8019164:	2b00      	cmp	r3, #0
 8019166:	f280 80a9 	bge.w	80192bc <__kernel_rem_pio2f+0x358>
 801916a:	4623      	mov	r3, r4
 801916c:	2b00      	cmp	r3, #0
 801916e:	f2c0 80c7 	blt.w	8019300 <__kernel_rem_pio2f+0x39c>
 8019172:	aa44      	add	r2, sp, #272	@ 0x110
 8019174:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8019178:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8019250 <__kernel_rem_pio2f+0x2ec>
 801917c:	eddf 7a37 	vldr	s15, [pc, #220]	@ 801925c <__kernel_rem_pio2f+0x2f8>
 8019180:	2000      	movs	r0, #0
 8019182:	1ae2      	subs	r2, r4, r3
 8019184:	e0b1      	b.n	80192ea <__kernel_rem_pio2f+0x386>
 8019186:	2602      	movs	r6, #2
 8019188:	e78f      	b.n	80190aa <__kernel_rem_pio2f+0x146>
 801918a:	f852 1b04 	ldr.w	r1, [r2], #4
 801918e:	b948      	cbnz	r0, 80191a4 <__kernel_rem_pio2f+0x240>
 8019190:	b121      	cbz	r1, 801919c <__kernel_rem_pio2f+0x238>
 8019192:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8019196:	f842 1c04 	str.w	r1, [r2, #-4]
 801919a:	2101      	movs	r1, #1
 801919c:	f10e 0e01 	add.w	lr, lr, #1
 80191a0:	4608      	mov	r0, r1
 80191a2:	e787      	b.n	80190b4 <__kernel_rem_pio2f+0x150>
 80191a4:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80191a8:	e7f5      	b.n	8019196 <__kernel_rem_pio2f+0x232>
 80191aa:	f104 3cff 	add.w	ip, r4, #4294967295
 80191ae:	aa08      	add	r2, sp, #32
 80191b0:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80191b4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80191b8:	a908      	add	r1, sp, #32
 80191ba:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 80191be:	e781      	b.n	80190c4 <__kernel_rem_pio2f+0x160>
 80191c0:	f104 3cff 	add.w	ip, r4, #4294967295
 80191c4:	aa08      	add	r2, sp, #32
 80191c6:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80191ca:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80191ce:	e7f3      	b.n	80191b8 <__kernel_rem_pio2f+0x254>
 80191d0:	a908      	add	r1, sp, #32
 80191d2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80191d6:	3801      	subs	r0, #1
 80191d8:	430a      	orrs	r2, r1
 80191da:	e7ab      	b.n	8019134 <__kernel_rem_pio2f+0x1d0>
 80191dc:	3201      	adds	r2, #1
 80191de:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 80191e2:	2e00      	cmp	r6, #0
 80191e4:	d0fa      	beq.n	80191dc <__kernel_rem_pio2f+0x278>
 80191e6:	9905      	ldr	r1, [sp, #20]
 80191e8:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 80191ec:	eb0d 0001 	add.w	r0, sp, r1
 80191f0:	18e6      	adds	r6, r4, r3
 80191f2:	a91c      	add	r1, sp, #112	@ 0x70
 80191f4:	f104 0c01 	add.w	ip, r4, #1
 80191f8:	384c      	subs	r0, #76	@ 0x4c
 80191fa:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 80191fe:	4422      	add	r2, r4
 8019200:	4562      	cmp	r2, ip
 8019202:	da04      	bge.n	801920e <__kernel_rem_pio2f+0x2aa>
 8019204:	4614      	mov	r4, r2
 8019206:	e710      	b.n	801902a <__kernel_rem_pio2f+0xc6>
 8019208:	9804      	ldr	r0, [sp, #16]
 801920a:	2201      	movs	r2, #1
 801920c:	e7e7      	b.n	80191de <__kernel_rem_pio2f+0x27a>
 801920e:	9903      	ldr	r1, [sp, #12]
 8019210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8019214:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 8019218:	9105      	str	r1, [sp, #20]
 801921a:	ee07 1a90 	vmov	s15, r1
 801921e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019222:	2400      	movs	r4, #0
 8019224:	ece6 7a01 	vstmia	r6!, {s15}
 8019228:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 801925c <__kernel_rem_pio2f+0x2f8>
 801922c:	46b1      	mov	r9, r6
 801922e:	455c      	cmp	r4, fp
 8019230:	dd04      	ble.n	801923c <__kernel_rem_pio2f+0x2d8>
 8019232:	ece0 7a01 	vstmia	r0!, {s15}
 8019236:	f10c 0c01 	add.w	ip, ip, #1
 801923a:	e7e1      	b.n	8019200 <__kernel_rem_pio2f+0x29c>
 801923c:	ecfe 6a01 	vldmia	lr!, {s13}
 8019240:	ed39 7a01 	vldmdb	r9!, {s14}
 8019244:	3401      	adds	r4, #1
 8019246:	eee6 7a87 	vfma.f32	s15, s13, s14
 801924a:	e7f0      	b.n	801922e <__kernel_rem_pio2f+0x2ca>
 801924c:	08020cf8 	.word	0x08020cf8
 8019250:	08020ccc 	.word	0x08020ccc
 8019254:	43800000 	.word	0x43800000
 8019258:	3b800000 	.word	0x3b800000
 801925c:	00000000 	.word	0x00000000
 8019260:	9b02      	ldr	r3, [sp, #8]
 8019262:	eeb0 0a48 	vmov.f32	s0, s16
 8019266:	eba3 0008 	sub.w	r0, r3, r8
 801926a:	f7ff fdef 	bl	8018e4c <scalbnf>
 801926e:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8019254 <__kernel_rem_pio2f+0x2f0>
 8019272:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8019276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801927a:	db19      	blt.n	80192b0 <__kernel_rem_pio2f+0x34c>
 801927c:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 8019258 <__kernel_rem_pio2f+0x2f4>
 8019280:	ee60 7a27 	vmul.f32	s15, s0, s15
 8019284:	aa08      	add	r2, sp, #32
 8019286:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801928a:	3508      	adds	r5, #8
 801928c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019290:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019298:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801929c:	ee10 3a10 	vmov	r3, s0
 80192a0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80192a4:	ee17 3a90 	vmov	r3, s15
 80192a8:	3401      	adds	r4, #1
 80192aa:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80192ae:	e74c      	b.n	801914a <__kernel_rem_pio2f+0x1e6>
 80192b0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80192b4:	aa08      	add	r2, sp, #32
 80192b6:	ee10 3a10 	vmov	r3, s0
 80192ba:	e7f6      	b.n	80192aa <__kernel_rem_pio2f+0x346>
 80192bc:	a808      	add	r0, sp, #32
 80192be:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 80192c2:	9001      	str	r0, [sp, #4]
 80192c4:	ee07 0a90 	vmov	s15, r0
 80192c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80192cc:	3b01      	subs	r3, #1
 80192ce:	ee67 7a80 	vmul.f32	s15, s15, s0
 80192d2:	ee20 0a07 	vmul.f32	s0, s0, s14
 80192d6:	ed62 7a01 	vstmdb	r2!, {s15}
 80192da:	e743      	b.n	8019164 <__kernel_rem_pio2f+0x200>
 80192dc:	ecfc 6a01 	vldmia	ip!, {s13}
 80192e0:	ecb5 7a01 	vldmia	r5!, {s14}
 80192e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80192e8:	3001      	adds	r0, #1
 80192ea:	4550      	cmp	r0, sl
 80192ec:	dc01      	bgt.n	80192f2 <__kernel_rem_pio2f+0x38e>
 80192ee:	4290      	cmp	r0, r2
 80192f0:	ddf4      	ble.n	80192dc <__kernel_rem_pio2f+0x378>
 80192f2:	a858      	add	r0, sp, #352	@ 0x160
 80192f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80192f8:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 80192fc:	3b01      	subs	r3, #1
 80192fe:	e735      	b.n	801916c <__kernel_rem_pio2f+0x208>
 8019300:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8019302:	2b02      	cmp	r3, #2
 8019304:	dc09      	bgt.n	801931a <__kernel_rem_pio2f+0x3b6>
 8019306:	2b00      	cmp	r3, #0
 8019308:	dc27      	bgt.n	801935a <__kernel_rem_pio2f+0x3f6>
 801930a:	d040      	beq.n	801938e <__kernel_rem_pio2f+0x42a>
 801930c:	f009 0007 	and.w	r0, r9, #7
 8019310:	b059      	add	sp, #356	@ 0x164
 8019312:	ecbd 8b04 	vpop	{d8-d9}
 8019316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801931a:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 801931c:	2b03      	cmp	r3, #3
 801931e:	d1f5      	bne.n	801930c <__kernel_rem_pio2f+0x3a8>
 8019320:	aa30      	add	r2, sp, #192	@ 0xc0
 8019322:	1f0b      	subs	r3, r1, #4
 8019324:	4413      	add	r3, r2
 8019326:	461a      	mov	r2, r3
 8019328:	4620      	mov	r0, r4
 801932a:	2800      	cmp	r0, #0
 801932c:	dc50      	bgt.n	80193d0 <__kernel_rem_pio2f+0x46c>
 801932e:	4622      	mov	r2, r4
 8019330:	2a01      	cmp	r2, #1
 8019332:	dc5d      	bgt.n	80193f0 <__kernel_rem_pio2f+0x48c>
 8019334:	ab30      	add	r3, sp, #192	@ 0xc0
 8019336:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 801925c <__kernel_rem_pio2f+0x2f8>
 801933a:	440b      	add	r3, r1
 801933c:	2c01      	cmp	r4, #1
 801933e:	dc67      	bgt.n	8019410 <__kernel_rem_pio2f+0x4ac>
 8019340:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8019344:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 8019348:	2e00      	cmp	r6, #0
 801934a:	d167      	bne.n	801941c <__kernel_rem_pio2f+0x4b8>
 801934c:	edc7 6a00 	vstr	s13, [r7]
 8019350:	ed87 7a01 	vstr	s14, [r7, #4]
 8019354:	edc7 7a02 	vstr	s15, [r7, #8]
 8019358:	e7d8      	b.n	801930c <__kernel_rem_pio2f+0x3a8>
 801935a:	ab30      	add	r3, sp, #192	@ 0xc0
 801935c:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 801925c <__kernel_rem_pio2f+0x2f8>
 8019360:	440b      	add	r3, r1
 8019362:	4622      	mov	r2, r4
 8019364:	2a00      	cmp	r2, #0
 8019366:	da24      	bge.n	80193b2 <__kernel_rem_pio2f+0x44e>
 8019368:	b34e      	cbz	r6, 80193be <__kernel_rem_pio2f+0x45a>
 801936a:	eef1 7a47 	vneg.f32	s15, s14
 801936e:	edc7 7a00 	vstr	s15, [r7]
 8019372:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8019376:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801937a:	aa31      	add	r2, sp, #196	@ 0xc4
 801937c:	2301      	movs	r3, #1
 801937e:	429c      	cmp	r4, r3
 8019380:	da20      	bge.n	80193c4 <__kernel_rem_pio2f+0x460>
 8019382:	b10e      	cbz	r6, 8019388 <__kernel_rem_pio2f+0x424>
 8019384:	eef1 7a67 	vneg.f32	s15, s15
 8019388:	edc7 7a01 	vstr	s15, [r7, #4]
 801938c:	e7be      	b.n	801930c <__kernel_rem_pio2f+0x3a8>
 801938e:	ab30      	add	r3, sp, #192	@ 0xc0
 8019390:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 801925c <__kernel_rem_pio2f+0x2f8>
 8019394:	440b      	add	r3, r1
 8019396:	2c00      	cmp	r4, #0
 8019398:	da05      	bge.n	80193a6 <__kernel_rem_pio2f+0x442>
 801939a:	b10e      	cbz	r6, 80193a0 <__kernel_rem_pio2f+0x43c>
 801939c:	eef1 7a67 	vneg.f32	s15, s15
 80193a0:	edc7 7a00 	vstr	s15, [r7]
 80193a4:	e7b2      	b.n	801930c <__kernel_rem_pio2f+0x3a8>
 80193a6:	ed33 7a01 	vldmdb	r3!, {s14}
 80193aa:	3c01      	subs	r4, #1
 80193ac:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193b0:	e7f1      	b.n	8019396 <__kernel_rem_pio2f+0x432>
 80193b2:	ed73 7a01 	vldmdb	r3!, {s15}
 80193b6:	3a01      	subs	r2, #1
 80193b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80193bc:	e7d2      	b.n	8019364 <__kernel_rem_pio2f+0x400>
 80193be:	eef0 7a47 	vmov.f32	s15, s14
 80193c2:	e7d4      	b.n	801936e <__kernel_rem_pio2f+0x40a>
 80193c4:	ecb2 7a01 	vldmia	r2!, {s14}
 80193c8:	3301      	adds	r3, #1
 80193ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80193ce:	e7d6      	b.n	801937e <__kernel_rem_pio2f+0x41a>
 80193d0:	ed72 7a01 	vldmdb	r2!, {s15}
 80193d4:	edd2 6a01 	vldr	s13, [r2, #4]
 80193d8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80193dc:	3801      	subs	r0, #1
 80193de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80193e2:	ed82 7a00 	vstr	s14, [r2]
 80193e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80193ea:	edc2 7a01 	vstr	s15, [r2, #4]
 80193ee:	e79c      	b.n	801932a <__kernel_rem_pio2f+0x3c6>
 80193f0:	ed73 7a01 	vldmdb	r3!, {s15}
 80193f4:	edd3 6a01 	vldr	s13, [r3, #4]
 80193f8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80193fc:	3a01      	subs	r2, #1
 80193fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019402:	ed83 7a00 	vstr	s14, [r3]
 8019406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801940a:	edc3 7a01 	vstr	s15, [r3, #4]
 801940e:	e78f      	b.n	8019330 <__kernel_rem_pio2f+0x3cc>
 8019410:	ed33 7a01 	vldmdb	r3!, {s14}
 8019414:	3c01      	subs	r4, #1
 8019416:	ee77 7a87 	vadd.f32	s15, s15, s14
 801941a:	e78f      	b.n	801933c <__kernel_rem_pio2f+0x3d8>
 801941c:	eef1 6a66 	vneg.f32	s13, s13
 8019420:	eeb1 7a47 	vneg.f32	s14, s14
 8019424:	edc7 6a00 	vstr	s13, [r7]
 8019428:	ed87 7a01 	vstr	s14, [r7, #4]
 801942c:	eef1 7a67 	vneg.f32	s15, s15
 8019430:	e790      	b.n	8019354 <__kernel_rem_pio2f+0x3f0>
 8019432:	bf00      	nop

08019434 <floorf>:
 8019434:	ee10 3a10 	vmov	r3, s0
 8019438:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801943c:	3a7f      	subs	r2, #127	@ 0x7f
 801943e:	2a16      	cmp	r2, #22
 8019440:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8019444:	dc2b      	bgt.n	801949e <floorf+0x6a>
 8019446:	2a00      	cmp	r2, #0
 8019448:	da12      	bge.n	8019470 <floorf+0x3c>
 801944a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80194b0 <floorf+0x7c>
 801944e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019452:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801945a:	dd06      	ble.n	801946a <floorf+0x36>
 801945c:	2b00      	cmp	r3, #0
 801945e:	da24      	bge.n	80194aa <floorf+0x76>
 8019460:	2900      	cmp	r1, #0
 8019462:	4b14      	ldr	r3, [pc, #80]	@ (80194b4 <floorf+0x80>)
 8019464:	bf08      	it	eq
 8019466:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 801946a:	ee00 3a10 	vmov	s0, r3
 801946e:	4770      	bx	lr
 8019470:	4911      	ldr	r1, [pc, #68]	@ (80194b8 <floorf+0x84>)
 8019472:	4111      	asrs	r1, r2
 8019474:	420b      	tst	r3, r1
 8019476:	d0fa      	beq.n	801946e <floorf+0x3a>
 8019478:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80194b0 <floorf+0x7c>
 801947c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8019480:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8019484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019488:	ddef      	ble.n	801946a <floorf+0x36>
 801948a:	2b00      	cmp	r3, #0
 801948c:	bfbe      	ittt	lt
 801948e:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8019492:	fa40 f202 	asrlt.w	r2, r0, r2
 8019496:	189b      	addlt	r3, r3, r2
 8019498:	ea23 0301 	bic.w	r3, r3, r1
 801949c:	e7e5      	b.n	801946a <floorf+0x36>
 801949e:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80194a2:	d3e4      	bcc.n	801946e <floorf+0x3a>
 80194a4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80194a8:	4770      	bx	lr
 80194aa:	2300      	movs	r3, #0
 80194ac:	e7dd      	b.n	801946a <floorf+0x36>
 80194ae:	bf00      	nop
 80194b0:	7149f2ca 	.word	0x7149f2ca
 80194b4:	bf800000 	.word	0xbf800000
 80194b8:	007fffff 	.word	0x007fffff

080194bc <__cvt>:
 80194bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80194c0:	ec57 6b10 	vmov	r6, r7, d0
 80194c4:	2f00      	cmp	r7, #0
 80194c6:	460c      	mov	r4, r1
 80194c8:	4619      	mov	r1, r3
 80194ca:	463b      	mov	r3, r7
 80194cc:	bfbb      	ittet	lt
 80194ce:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80194d2:	461f      	movlt	r7, r3
 80194d4:	2300      	movge	r3, #0
 80194d6:	232d      	movlt	r3, #45	@ 0x2d
 80194d8:	700b      	strb	r3, [r1, #0]
 80194da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80194dc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80194e0:	4691      	mov	r9, r2
 80194e2:	f023 0820 	bic.w	r8, r3, #32
 80194e6:	bfbc      	itt	lt
 80194e8:	4632      	movlt	r2, r6
 80194ea:	4616      	movlt	r6, r2
 80194ec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80194f0:	d005      	beq.n	80194fe <__cvt+0x42>
 80194f2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80194f6:	d100      	bne.n	80194fa <__cvt+0x3e>
 80194f8:	3401      	adds	r4, #1
 80194fa:	2102      	movs	r1, #2
 80194fc:	e000      	b.n	8019500 <__cvt+0x44>
 80194fe:	2103      	movs	r1, #3
 8019500:	ab03      	add	r3, sp, #12
 8019502:	9301      	str	r3, [sp, #4]
 8019504:	ab02      	add	r3, sp, #8
 8019506:	9300      	str	r3, [sp, #0]
 8019508:	ec47 6b10 	vmov	d0, r6, r7
 801950c:	4653      	mov	r3, sl
 801950e:	4622      	mov	r2, r4
 8019510:	f001 fba6 	bl	801ac60 <_dtoa_r>
 8019514:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8019518:	4605      	mov	r5, r0
 801951a:	d119      	bne.n	8019550 <__cvt+0x94>
 801951c:	f019 0f01 	tst.w	r9, #1
 8019520:	d00e      	beq.n	8019540 <__cvt+0x84>
 8019522:	eb00 0904 	add.w	r9, r0, r4
 8019526:	2200      	movs	r2, #0
 8019528:	2300      	movs	r3, #0
 801952a:	4630      	mov	r0, r6
 801952c:	4639      	mov	r1, r7
 801952e:	f7e7 facb 	bl	8000ac8 <__aeabi_dcmpeq>
 8019532:	b108      	cbz	r0, 8019538 <__cvt+0x7c>
 8019534:	f8cd 900c 	str.w	r9, [sp, #12]
 8019538:	2230      	movs	r2, #48	@ 0x30
 801953a:	9b03      	ldr	r3, [sp, #12]
 801953c:	454b      	cmp	r3, r9
 801953e:	d31e      	bcc.n	801957e <__cvt+0xc2>
 8019540:	9b03      	ldr	r3, [sp, #12]
 8019542:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019544:	1b5b      	subs	r3, r3, r5
 8019546:	4628      	mov	r0, r5
 8019548:	6013      	str	r3, [r2, #0]
 801954a:	b004      	add	sp, #16
 801954c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019550:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8019554:	eb00 0904 	add.w	r9, r0, r4
 8019558:	d1e5      	bne.n	8019526 <__cvt+0x6a>
 801955a:	7803      	ldrb	r3, [r0, #0]
 801955c:	2b30      	cmp	r3, #48	@ 0x30
 801955e:	d10a      	bne.n	8019576 <__cvt+0xba>
 8019560:	2200      	movs	r2, #0
 8019562:	2300      	movs	r3, #0
 8019564:	4630      	mov	r0, r6
 8019566:	4639      	mov	r1, r7
 8019568:	f7e7 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 801956c:	b918      	cbnz	r0, 8019576 <__cvt+0xba>
 801956e:	f1c4 0401 	rsb	r4, r4, #1
 8019572:	f8ca 4000 	str.w	r4, [sl]
 8019576:	f8da 3000 	ldr.w	r3, [sl]
 801957a:	4499      	add	r9, r3
 801957c:	e7d3      	b.n	8019526 <__cvt+0x6a>
 801957e:	1c59      	adds	r1, r3, #1
 8019580:	9103      	str	r1, [sp, #12]
 8019582:	701a      	strb	r2, [r3, #0]
 8019584:	e7d9      	b.n	801953a <__cvt+0x7e>

08019586 <__exponent>:
 8019586:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019588:	2900      	cmp	r1, #0
 801958a:	bfba      	itte	lt
 801958c:	4249      	neglt	r1, r1
 801958e:	232d      	movlt	r3, #45	@ 0x2d
 8019590:	232b      	movge	r3, #43	@ 0x2b
 8019592:	2909      	cmp	r1, #9
 8019594:	7002      	strb	r2, [r0, #0]
 8019596:	7043      	strb	r3, [r0, #1]
 8019598:	dd29      	ble.n	80195ee <__exponent+0x68>
 801959a:	f10d 0307 	add.w	r3, sp, #7
 801959e:	461d      	mov	r5, r3
 80195a0:	270a      	movs	r7, #10
 80195a2:	461a      	mov	r2, r3
 80195a4:	fbb1 f6f7 	udiv	r6, r1, r7
 80195a8:	fb07 1416 	mls	r4, r7, r6, r1
 80195ac:	3430      	adds	r4, #48	@ 0x30
 80195ae:	f802 4c01 	strb.w	r4, [r2, #-1]
 80195b2:	460c      	mov	r4, r1
 80195b4:	2c63      	cmp	r4, #99	@ 0x63
 80195b6:	f103 33ff 	add.w	r3, r3, #4294967295
 80195ba:	4631      	mov	r1, r6
 80195bc:	dcf1      	bgt.n	80195a2 <__exponent+0x1c>
 80195be:	3130      	adds	r1, #48	@ 0x30
 80195c0:	1e94      	subs	r4, r2, #2
 80195c2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80195c6:	1c41      	adds	r1, r0, #1
 80195c8:	4623      	mov	r3, r4
 80195ca:	42ab      	cmp	r3, r5
 80195cc:	d30a      	bcc.n	80195e4 <__exponent+0x5e>
 80195ce:	f10d 0309 	add.w	r3, sp, #9
 80195d2:	1a9b      	subs	r3, r3, r2
 80195d4:	42ac      	cmp	r4, r5
 80195d6:	bf88      	it	hi
 80195d8:	2300      	movhi	r3, #0
 80195da:	3302      	adds	r3, #2
 80195dc:	4403      	add	r3, r0
 80195de:	1a18      	subs	r0, r3, r0
 80195e0:	b003      	add	sp, #12
 80195e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195e4:	f813 6b01 	ldrb.w	r6, [r3], #1
 80195e8:	f801 6f01 	strb.w	r6, [r1, #1]!
 80195ec:	e7ed      	b.n	80195ca <__exponent+0x44>
 80195ee:	2330      	movs	r3, #48	@ 0x30
 80195f0:	3130      	adds	r1, #48	@ 0x30
 80195f2:	7083      	strb	r3, [r0, #2]
 80195f4:	70c1      	strb	r1, [r0, #3]
 80195f6:	1d03      	adds	r3, r0, #4
 80195f8:	e7f1      	b.n	80195de <__exponent+0x58>
	...

080195fc <_printf_float>:
 80195fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019600:	b08d      	sub	sp, #52	@ 0x34
 8019602:	460c      	mov	r4, r1
 8019604:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8019608:	4616      	mov	r6, r2
 801960a:	461f      	mov	r7, r3
 801960c:	4605      	mov	r5, r0
 801960e:	f001 f99b 	bl	801a948 <_localeconv_r>
 8019612:	6803      	ldr	r3, [r0, #0]
 8019614:	9304      	str	r3, [sp, #16]
 8019616:	4618      	mov	r0, r3
 8019618:	f7e6 fe2a 	bl	8000270 <strlen>
 801961c:	2300      	movs	r3, #0
 801961e:	930a      	str	r3, [sp, #40]	@ 0x28
 8019620:	f8d8 3000 	ldr.w	r3, [r8]
 8019624:	9005      	str	r0, [sp, #20]
 8019626:	3307      	adds	r3, #7
 8019628:	f023 0307 	bic.w	r3, r3, #7
 801962c:	f103 0208 	add.w	r2, r3, #8
 8019630:	f894 a018 	ldrb.w	sl, [r4, #24]
 8019634:	f8d4 b000 	ldr.w	fp, [r4]
 8019638:	f8c8 2000 	str.w	r2, [r8]
 801963c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8019640:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8019644:	9307      	str	r3, [sp, #28]
 8019646:	f8cd 8018 	str.w	r8, [sp, #24]
 801964a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801964e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019652:	4b9c      	ldr	r3, [pc, #624]	@ (80198c4 <_printf_float+0x2c8>)
 8019654:	f04f 32ff 	mov.w	r2, #4294967295
 8019658:	f7e7 fa68 	bl	8000b2c <__aeabi_dcmpun>
 801965c:	bb70      	cbnz	r0, 80196bc <_printf_float+0xc0>
 801965e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8019662:	4b98      	ldr	r3, [pc, #608]	@ (80198c4 <_printf_float+0x2c8>)
 8019664:	f04f 32ff 	mov.w	r2, #4294967295
 8019668:	f7e7 fa42 	bl	8000af0 <__aeabi_dcmple>
 801966c:	bb30      	cbnz	r0, 80196bc <_printf_float+0xc0>
 801966e:	2200      	movs	r2, #0
 8019670:	2300      	movs	r3, #0
 8019672:	4640      	mov	r0, r8
 8019674:	4649      	mov	r1, r9
 8019676:	f7e7 fa31 	bl	8000adc <__aeabi_dcmplt>
 801967a:	b110      	cbz	r0, 8019682 <_printf_float+0x86>
 801967c:	232d      	movs	r3, #45	@ 0x2d
 801967e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019682:	4a91      	ldr	r2, [pc, #580]	@ (80198c8 <_printf_float+0x2cc>)
 8019684:	4b91      	ldr	r3, [pc, #580]	@ (80198cc <_printf_float+0x2d0>)
 8019686:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801968a:	bf8c      	ite	hi
 801968c:	4690      	movhi	r8, r2
 801968e:	4698      	movls	r8, r3
 8019690:	2303      	movs	r3, #3
 8019692:	6123      	str	r3, [r4, #16]
 8019694:	f02b 0304 	bic.w	r3, fp, #4
 8019698:	6023      	str	r3, [r4, #0]
 801969a:	f04f 0900 	mov.w	r9, #0
 801969e:	9700      	str	r7, [sp, #0]
 80196a0:	4633      	mov	r3, r6
 80196a2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80196a4:	4621      	mov	r1, r4
 80196a6:	4628      	mov	r0, r5
 80196a8:	f000 fb1e 	bl	8019ce8 <_printf_common>
 80196ac:	3001      	adds	r0, #1
 80196ae:	f040 808d 	bne.w	80197cc <_printf_float+0x1d0>
 80196b2:	f04f 30ff 	mov.w	r0, #4294967295
 80196b6:	b00d      	add	sp, #52	@ 0x34
 80196b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196bc:	4642      	mov	r2, r8
 80196be:	464b      	mov	r3, r9
 80196c0:	4640      	mov	r0, r8
 80196c2:	4649      	mov	r1, r9
 80196c4:	f7e7 fa32 	bl	8000b2c <__aeabi_dcmpun>
 80196c8:	b140      	cbz	r0, 80196dc <_printf_float+0xe0>
 80196ca:	464b      	mov	r3, r9
 80196cc:	2b00      	cmp	r3, #0
 80196ce:	bfbc      	itt	lt
 80196d0:	232d      	movlt	r3, #45	@ 0x2d
 80196d2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80196d6:	4a7e      	ldr	r2, [pc, #504]	@ (80198d0 <_printf_float+0x2d4>)
 80196d8:	4b7e      	ldr	r3, [pc, #504]	@ (80198d4 <_printf_float+0x2d8>)
 80196da:	e7d4      	b.n	8019686 <_printf_float+0x8a>
 80196dc:	6863      	ldr	r3, [r4, #4]
 80196de:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80196e2:	9206      	str	r2, [sp, #24]
 80196e4:	1c5a      	adds	r2, r3, #1
 80196e6:	d13b      	bne.n	8019760 <_printf_float+0x164>
 80196e8:	2306      	movs	r3, #6
 80196ea:	6063      	str	r3, [r4, #4]
 80196ec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80196f0:	2300      	movs	r3, #0
 80196f2:	6022      	str	r2, [r4, #0]
 80196f4:	9303      	str	r3, [sp, #12]
 80196f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80196f8:	e9cd a301 	strd	sl, r3, [sp, #4]
 80196fc:	ab09      	add	r3, sp, #36	@ 0x24
 80196fe:	9300      	str	r3, [sp, #0]
 8019700:	6861      	ldr	r1, [r4, #4]
 8019702:	ec49 8b10 	vmov	d0, r8, r9
 8019706:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801970a:	4628      	mov	r0, r5
 801970c:	f7ff fed6 	bl	80194bc <__cvt>
 8019710:	9b06      	ldr	r3, [sp, #24]
 8019712:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019714:	2b47      	cmp	r3, #71	@ 0x47
 8019716:	4680      	mov	r8, r0
 8019718:	d129      	bne.n	801976e <_printf_float+0x172>
 801971a:	1cc8      	adds	r0, r1, #3
 801971c:	db02      	blt.n	8019724 <_printf_float+0x128>
 801971e:	6863      	ldr	r3, [r4, #4]
 8019720:	4299      	cmp	r1, r3
 8019722:	dd41      	ble.n	80197a8 <_printf_float+0x1ac>
 8019724:	f1aa 0a02 	sub.w	sl, sl, #2
 8019728:	fa5f fa8a 	uxtb.w	sl, sl
 801972c:	3901      	subs	r1, #1
 801972e:	4652      	mov	r2, sl
 8019730:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8019734:	9109      	str	r1, [sp, #36]	@ 0x24
 8019736:	f7ff ff26 	bl	8019586 <__exponent>
 801973a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801973c:	1813      	adds	r3, r2, r0
 801973e:	2a01      	cmp	r2, #1
 8019740:	4681      	mov	r9, r0
 8019742:	6123      	str	r3, [r4, #16]
 8019744:	dc02      	bgt.n	801974c <_printf_float+0x150>
 8019746:	6822      	ldr	r2, [r4, #0]
 8019748:	07d2      	lsls	r2, r2, #31
 801974a:	d501      	bpl.n	8019750 <_printf_float+0x154>
 801974c:	3301      	adds	r3, #1
 801974e:	6123      	str	r3, [r4, #16]
 8019750:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8019754:	2b00      	cmp	r3, #0
 8019756:	d0a2      	beq.n	801969e <_printf_float+0xa2>
 8019758:	232d      	movs	r3, #45	@ 0x2d
 801975a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801975e:	e79e      	b.n	801969e <_printf_float+0xa2>
 8019760:	9a06      	ldr	r2, [sp, #24]
 8019762:	2a47      	cmp	r2, #71	@ 0x47
 8019764:	d1c2      	bne.n	80196ec <_printf_float+0xf0>
 8019766:	2b00      	cmp	r3, #0
 8019768:	d1c0      	bne.n	80196ec <_printf_float+0xf0>
 801976a:	2301      	movs	r3, #1
 801976c:	e7bd      	b.n	80196ea <_printf_float+0xee>
 801976e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8019772:	d9db      	bls.n	801972c <_printf_float+0x130>
 8019774:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8019778:	d118      	bne.n	80197ac <_printf_float+0x1b0>
 801977a:	2900      	cmp	r1, #0
 801977c:	6863      	ldr	r3, [r4, #4]
 801977e:	dd0b      	ble.n	8019798 <_printf_float+0x19c>
 8019780:	6121      	str	r1, [r4, #16]
 8019782:	b913      	cbnz	r3, 801978a <_printf_float+0x18e>
 8019784:	6822      	ldr	r2, [r4, #0]
 8019786:	07d0      	lsls	r0, r2, #31
 8019788:	d502      	bpl.n	8019790 <_printf_float+0x194>
 801978a:	3301      	adds	r3, #1
 801978c:	440b      	add	r3, r1
 801978e:	6123      	str	r3, [r4, #16]
 8019790:	65a1      	str	r1, [r4, #88]	@ 0x58
 8019792:	f04f 0900 	mov.w	r9, #0
 8019796:	e7db      	b.n	8019750 <_printf_float+0x154>
 8019798:	b913      	cbnz	r3, 80197a0 <_printf_float+0x1a4>
 801979a:	6822      	ldr	r2, [r4, #0]
 801979c:	07d2      	lsls	r2, r2, #31
 801979e:	d501      	bpl.n	80197a4 <_printf_float+0x1a8>
 80197a0:	3302      	adds	r3, #2
 80197a2:	e7f4      	b.n	801978e <_printf_float+0x192>
 80197a4:	2301      	movs	r3, #1
 80197a6:	e7f2      	b.n	801978e <_printf_float+0x192>
 80197a8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80197ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80197ae:	4299      	cmp	r1, r3
 80197b0:	db05      	blt.n	80197be <_printf_float+0x1c2>
 80197b2:	6823      	ldr	r3, [r4, #0]
 80197b4:	6121      	str	r1, [r4, #16]
 80197b6:	07d8      	lsls	r0, r3, #31
 80197b8:	d5ea      	bpl.n	8019790 <_printf_float+0x194>
 80197ba:	1c4b      	adds	r3, r1, #1
 80197bc:	e7e7      	b.n	801978e <_printf_float+0x192>
 80197be:	2900      	cmp	r1, #0
 80197c0:	bfd4      	ite	le
 80197c2:	f1c1 0202 	rsble	r2, r1, #2
 80197c6:	2201      	movgt	r2, #1
 80197c8:	4413      	add	r3, r2
 80197ca:	e7e0      	b.n	801978e <_printf_float+0x192>
 80197cc:	6823      	ldr	r3, [r4, #0]
 80197ce:	055a      	lsls	r2, r3, #21
 80197d0:	d407      	bmi.n	80197e2 <_printf_float+0x1e6>
 80197d2:	6923      	ldr	r3, [r4, #16]
 80197d4:	4642      	mov	r2, r8
 80197d6:	4631      	mov	r1, r6
 80197d8:	4628      	mov	r0, r5
 80197da:	47b8      	blx	r7
 80197dc:	3001      	adds	r0, #1
 80197de:	d12b      	bne.n	8019838 <_printf_float+0x23c>
 80197e0:	e767      	b.n	80196b2 <_printf_float+0xb6>
 80197e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80197e6:	f240 80dd 	bls.w	80199a4 <_printf_float+0x3a8>
 80197ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80197ee:	2200      	movs	r2, #0
 80197f0:	2300      	movs	r3, #0
 80197f2:	f7e7 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 80197f6:	2800      	cmp	r0, #0
 80197f8:	d033      	beq.n	8019862 <_printf_float+0x266>
 80197fa:	4a37      	ldr	r2, [pc, #220]	@ (80198d8 <_printf_float+0x2dc>)
 80197fc:	2301      	movs	r3, #1
 80197fe:	4631      	mov	r1, r6
 8019800:	4628      	mov	r0, r5
 8019802:	47b8      	blx	r7
 8019804:	3001      	adds	r0, #1
 8019806:	f43f af54 	beq.w	80196b2 <_printf_float+0xb6>
 801980a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801980e:	4543      	cmp	r3, r8
 8019810:	db02      	blt.n	8019818 <_printf_float+0x21c>
 8019812:	6823      	ldr	r3, [r4, #0]
 8019814:	07d8      	lsls	r0, r3, #31
 8019816:	d50f      	bpl.n	8019838 <_printf_float+0x23c>
 8019818:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801981c:	4631      	mov	r1, r6
 801981e:	4628      	mov	r0, r5
 8019820:	47b8      	blx	r7
 8019822:	3001      	adds	r0, #1
 8019824:	f43f af45 	beq.w	80196b2 <_printf_float+0xb6>
 8019828:	f04f 0900 	mov.w	r9, #0
 801982c:	f108 38ff 	add.w	r8, r8, #4294967295
 8019830:	f104 0a1a 	add.w	sl, r4, #26
 8019834:	45c8      	cmp	r8, r9
 8019836:	dc09      	bgt.n	801984c <_printf_float+0x250>
 8019838:	6823      	ldr	r3, [r4, #0]
 801983a:	079b      	lsls	r3, r3, #30
 801983c:	f100 8103 	bmi.w	8019a46 <_printf_float+0x44a>
 8019840:	68e0      	ldr	r0, [r4, #12]
 8019842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019844:	4298      	cmp	r0, r3
 8019846:	bfb8      	it	lt
 8019848:	4618      	movlt	r0, r3
 801984a:	e734      	b.n	80196b6 <_printf_float+0xba>
 801984c:	2301      	movs	r3, #1
 801984e:	4652      	mov	r2, sl
 8019850:	4631      	mov	r1, r6
 8019852:	4628      	mov	r0, r5
 8019854:	47b8      	blx	r7
 8019856:	3001      	adds	r0, #1
 8019858:	f43f af2b 	beq.w	80196b2 <_printf_float+0xb6>
 801985c:	f109 0901 	add.w	r9, r9, #1
 8019860:	e7e8      	b.n	8019834 <_printf_float+0x238>
 8019862:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019864:	2b00      	cmp	r3, #0
 8019866:	dc39      	bgt.n	80198dc <_printf_float+0x2e0>
 8019868:	4a1b      	ldr	r2, [pc, #108]	@ (80198d8 <_printf_float+0x2dc>)
 801986a:	2301      	movs	r3, #1
 801986c:	4631      	mov	r1, r6
 801986e:	4628      	mov	r0, r5
 8019870:	47b8      	blx	r7
 8019872:	3001      	adds	r0, #1
 8019874:	f43f af1d 	beq.w	80196b2 <_printf_float+0xb6>
 8019878:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801987c:	ea59 0303 	orrs.w	r3, r9, r3
 8019880:	d102      	bne.n	8019888 <_printf_float+0x28c>
 8019882:	6823      	ldr	r3, [r4, #0]
 8019884:	07d9      	lsls	r1, r3, #31
 8019886:	d5d7      	bpl.n	8019838 <_printf_float+0x23c>
 8019888:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801988c:	4631      	mov	r1, r6
 801988e:	4628      	mov	r0, r5
 8019890:	47b8      	blx	r7
 8019892:	3001      	adds	r0, #1
 8019894:	f43f af0d 	beq.w	80196b2 <_printf_float+0xb6>
 8019898:	f04f 0a00 	mov.w	sl, #0
 801989c:	f104 0b1a 	add.w	fp, r4, #26
 80198a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80198a2:	425b      	negs	r3, r3
 80198a4:	4553      	cmp	r3, sl
 80198a6:	dc01      	bgt.n	80198ac <_printf_float+0x2b0>
 80198a8:	464b      	mov	r3, r9
 80198aa:	e793      	b.n	80197d4 <_printf_float+0x1d8>
 80198ac:	2301      	movs	r3, #1
 80198ae:	465a      	mov	r2, fp
 80198b0:	4631      	mov	r1, r6
 80198b2:	4628      	mov	r0, r5
 80198b4:	47b8      	blx	r7
 80198b6:	3001      	adds	r0, #1
 80198b8:	f43f aefb 	beq.w	80196b2 <_printf_float+0xb6>
 80198bc:	f10a 0a01 	add.w	sl, sl, #1
 80198c0:	e7ee      	b.n	80198a0 <_printf_float+0x2a4>
 80198c2:	bf00      	nop
 80198c4:	7fefffff 	.word	0x7fefffff
 80198c8:	080206f8 	.word	0x080206f8
 80198cc:	080206f4 	.word	0x080206f4
 80198d0:	08020700 	.word	0x08020700
 80198d4:	080206fc 	.word	0x080206fc
 80198d8:	08020876 	.word	0x08020876
 80198dc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80198de:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80198e2:	4553      	cmp	r3, sl
 80198e4:	bfa8      	it	ge
 80198e6:	4653      	movge	r3, sl
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	4699      	mov	r9, r3
 80198ec:	dc36      	bgt.n	801995c <_printf_float+0x360>
 80198ee:	f04f 0b00 	mov.w	fp, #0
 80198f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80198f6:	f104 021a 	add.w	r2, r4, #26
 80198fa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80198fc:	9306      	str	r3, [sp, #24]
 80198fe:	eba3 0309 	sub.w	r3, r3, r9
 8019902:	455b      	cmp	r3, fp
 8019904:	dc31      	bgt.n	801996a <_printf_float+0x36e>
 8019906:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019908:	459a      	cmp	sl, r3
 801990a:	dc3a      	bgt.n	8019982 <_printf_float+0x386>
 801990c:	6823      	ldr	r3, [r4, #0]
 801990e:	07da      	lsls	r2, r3, #31
 8019910:	d437      	bmi.n	8019982 <_printf_float+0x386>
 8019912:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019914:	ebaa 0903 	sub.w	r9, sl, r3
 8019918:	9b06      	ldr	r3, [sp, #24]
 801991a:	ebaa 0303 	sub.w	r3, sl, r3
 801991e:	4599      	cmp	r9, r3
 8019920:	bfa8      	it	ge
 8019922:	4699      	movge	r9, r3
 8019924:	f1b9 0f00 	cmp.w	r9, #0
 8019928:	dc33      	bgt.n	8019992 <_printf_float+0x396>
 801992a:	f04f 0800 	mov.w	r8, #0
 801992e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019932:	f104 0b1a 	add.w	fp, r4, #26
 8019936:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019938:	ebaa 0303 	sub.w	r3, sl, r3
 801993c:	eba3 0309 	sub.w	r3, r3, r9
 8019940:	4543      	cmp	r3, r8
 8019942:	f77f af79 	ble.w	8019838 <_printf_float+0x23c>
 8019946:	2301      	movs	r3, #1
 8019948:	465a      	mov	r2, fp
 801994a:	4631      	mov	r1, r6
 801994c:	4628      	mov	r0, r5
 801994e:	47b8      	blx	r7
 8019950:	3001      	adds	r0, #1
 8019952:	f43f aeae 	beq.w	80196b2 <_printf_float+0xb6>
 8019956:	f108 0801 	add.w	r8, r8, #1
 801995a:	e7ec      	b.n	8019936 <_printf_float+0x33a>
 801995c:	4642      	mov	r2, r8
 801995e:	4631      	mov	r1, r6
 8019960:	4628      	mov	r0, r5
 8019962:	47b8      	blx	r7
 8019964:	3001      	adds	r0, #1
 8019966:	d1c2      	bne.n	80198ee <_printf_float+0x2f2>
 8019968:	e6a3      	b.n	80196b2 <_printf_float+0xb6>
 801996a:	2301      	movs	r3, #1
 801996c:	4631      	mov	r1, r6
 801996e:	4628      	mov	r0, r5
 8019970:	9206      	str	r2, [sp, #24]
 8019972:	47b8      	blx	r7
 8019974:	3001      	adds	r0, #1
 8019976:	f43f ae9c 	beq.w	80196b2 <_printf_float+0xb6>
 801997a:	9a06      	ldr	r2, [sp, #24]
 801997c:	f10b 0b01 	add.w	fp, fp, #1
 8019980:	e7bb      	b.n	80198fa <_printf_float+0x2fe>
 8019982:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8019986:	4631      	mov	r1, r6
 8019988:	4628      	mov	r0, r5
 801998a:	47b8      	blx	r7
 801998c:	3001      	adds	r0, #1
 801998e:	d1c0      	bne.n	8019912 <_printf_float+0x316>
 8019990:	e68f      	b.n	80196b2 <_printf_float+0xb6>
 8019992:	9a06      	ldr	r2, [sp, #24]
 8019994:	464b      	mov	r3, r9
 8019996:	4442      	add	r2, r8
 8019998:	4631      	mov	r1, r6
 801999a:	4628      	mov	r0, r5
 801999c:	47b8      	blx	r7
 801999e:	3001      	adds	r0, #1
 80199a0:	d1c3      	bne.n	801992a <_printf_float+0x32e>
 80199a2:	e686      	b.n	80196b2 <_printf_float+0xb6>
 80199a4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80199a8:	f1ba 0f01 	cmp.w	sl, #1
 80199ac:	dc01      	bgt.n	80199b2 <_printf_float+0x3b6>
 80199ae:	07db      	lsls	r3, r3, #31
 80199b0:	d536      	bpl.n	8019a20 <_printf_float+0x424>
 80199b2:	2301      	movs	r3, #1
 80199b4:	4642      	mov	r2, r8
 80199b6:	4631      	mov	r1, r6
 80199b8:	4628      	mov	r0, r5
 80199ba:	47b8      	blx	r7
 80199bc:	3001      	adds	r0, #1
 80199be:	f43f ae78 	beq.w	80196b2 <_printf_float+0xb6>
 80199c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80199c6:	4631      	mov	r1, r6
 80199c8:	4628      	mov	r0, r5
 80199ca:	47b8      	blx	r7
 80199cc:	3001      	adds	r0, #1
 80199ce:	f43f ae70 	beq.w	80196b2 <_printf_float+0xb6>
 80199d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80199d6:	2200      	movs	r2, #0
 80199d8:	2300      	movs	r3, #0
 80199da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80199de:	f7e7 f873 	bl	8000ac8 <__aeabi_dcmpeq>
 80199e2:	b9c0      	cbnz	r0, 8019a16 <_printf_float+0x41a>
 80199e4:	4653      	mov	r3, sl
 80199e6:	f108 0201 	add.w	r2, r8, #1
 80199ea:	4631      	mov	r1, r6
 80199ec:	4628      	mov	r0, r5
 80199ee:	47b8      	blx	r7
 80199f0:	3001      	adds	r0, #1
 80199f2:	d10c      	bne.n	8019a0e <_printf_float+0x412>
 80199f4:	e65d      	b.n	80196b2 <_printf_float+0xb6>
 80199f6:	2301      	movs	r3, #1
 80199f8:	465a      	mov	r2, fp
 80199fa:	4631      	mov	r1, r6
 80199fc:	4628      	mov	r0, r5
 80199fe:	47b8      	blx	r7
 8019a00:	3001      	adds	r0, #1
 8019a02:	f43f ae56 	beq.w	80196b2 <_printf_float+0xb6>
 8019a06:	f108 0801 	add.w	r8, r8, #1
 8019a0a:	45d0      	cmp	r8, sl
 8019a0c:	dbf3      	blt.n	80199f6 <_printf_float+0x3fa>
 8019a0e:	464b      	mov	r3, r9
 8019a10:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8019a14:	e6df      	b.n	80197d6 <_printf_float+0x1da>
 8019a16:	f04f 0800 	mov.w	r8, #0
 8019a1a:	f104 0b1a 	add.w	fp, r4, #26
 8019a1e:	e7f4      	b.n	8019a0a <_printf_float+0x40e>
 8019a20:	2301      	movs	r3, #1
 8019a22:	4642      	mov	r2, r8
 8019a24:	e7e1      	b.n	80199ea <_printf_float+0x3ee>
 8019a26:	2301      	movs	r3, #1
 8019a28:	464a      	mov	r2, r9
 8019a2a:	4631      	mov	r1, r6
 8019a2c:	4628      	mov	r0, r5
 8019a2e:	47b8      	blx	r7
 8019a30:	3001      	adds	r0, #1
 8019a32:	f43f ae3e 	beq.w	80196b2 <_printf_float+0xb6>
 8019a36:	f108 0801 	add.w	r8, r8, #1
 8019a3a:	68e3      	ldr	r3, [r4, #12]
 8019a3c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8019a3e:	1a5b      	subs	r3, r3, r1
 8019a40:	4543      	cmp	r3, r8
 8019a42:	dcf0      	bgt.n	8019a26 <_printf_float+0x42a>
 8019a44:	e6fc      	b.n	8019840 <_printf_float+0x244>
 8019a46:	f04f 0800 	mov.w	r8, #0
 8019a4a:	f104 0919 	add.w	r9, r4, #25
 8019a4e:	e7f4      	b.n	8019a3a <_printf_float+0x43e>

08019a50 <__sfputc_r>:
 8019a50:	6893      	ldr	r3, [r2, #8]
 8019a52:	3b01      	subs	r3, #1
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	b410      	push	{r4}
 8019a58:	6093      	str	r3, [r2, #8]
 8019a5a:	da08      	bge.n	8019a6e <__sfputc_r+0x1e>
 8019a5c:	6994      	ldr	r4, [r2, #24]
 8019a5e:	42a3      	cmp	r3, r4
 8019a60:	db01      	blt.n	8019a66 <__sfputc_r+0x16>
 8019a62:	290a      	cmp	r1, #10
 8019a64:	d103      	bne.n	8019a6e <__sfputc_r+0x1e>
 8019a66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a6a:	f000 bea4 	b.w	801a7b6 <__swbuf_r>
 8019a6e:	6813      	ldr	r3, [r2, #0]
 8019a70:	1c58      	adds	r0, r3, #1
 8019a72:	6010      	str	r0, [r2, #0]
 8019a74:	7019      	strb	r1, [r3, #0]
 8019a76:	4608      	mov	r0, r1
 8019a78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019a7c:	4770      	bx	lr

08019a7e <__sfputs_r>:
 8019a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a80:	4606      	mov	r6, r0
 8019a82:	460f      	mov	r7, r1
 8019a84:	4614      	mov	r4, r2
 8019a86:	18d5      	adds	r5, r2, r3
 8019a88:	42ac      	cmp	r4, r5
 8019a8a:	d101      	bne.n	8019a90 <__sfputs_r+0x12>
 8019a8c:	2000      	movs	r0, #0
 8019a8e:	e007      	b.n	8019aa0 <__sfputs_r+0x22>
 8019a90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019a94:	463a      	mov	r2, r7
 8019a96:	4630      	mov	r0, r6
 8019a98:	f7ff ffda 	bl	8019a50 <__sfputc_r>
 8019a9c:	1c43      	adds	r3, r0, #1
 8019a9e:	d1f3      	bne.n	8019a88 <__sfputs_r+0xa>
 8019aa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019aa4 <_vfiprintf_r>:
 8019aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019aa8:	460d      	mov	r5, r1
 8019aaa:	b09d      	sub	sp, #116	@ 0x74
 8019aac:	4614      	mov	r4, r2
 8019aae:	4698      	mov	r8, r3
 8019ab0:	4606      	mov	r6, r0
 8019ab2:	b118      	cbz	r0, 8019abc <_vfiprintf_r+0x18>
 8019ab4:	6a03      	ldr	r3, [r0, #32]
 8019ab6:	b90b      	cbnz	r3, 8019abc <_vfiprintf_r+0x18>
 8019ab8:	f000 fd3c 	bl	801a534 <__sinit>
 8019abc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019abe:	07d9      	lsls	r1, r3, #31
 8019ac0:	d405      	bmi.n	8019ace <_vfiprintf_r+0x2a>
 8019ac2:	89ab      	ldrh	r3, [r5, #12]
 8019ac4:	059a      	lsls	r2, r3, #22
 8019ac6:	d402      	bmi.n	8019ace <_vfiprintf_r+0x2a>
 8019ac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019aca:	f001 f810 	bl	801aaee <__retarget_lock_acquire_recursive>
 8019ace:	89ab      	ldrh	r3, [r5, #12]
 8019ad0:	071b      	lsls	r3, r3, #28
 8019ad2:	d501      	bpl.n	8019ad8 <_vfiprintf_r+0x34>
 8019ad4:	692b      	ldr	r3, [r5, #16]
 8019ad6:	b99b      	cbnz	r3, 8019b00 <_vfiprintf_r+0x5c>
 8019ad8:	4629      	mov	r1, r5
 8019ada:	4630      	mov	r0, r6
 8019adc:	f000 feaa 	bl	801a834 <__swsetup_r>
 8019ae0:	b170      	cbz	r0, 8019b00 <_vfiprintf_r+0x5c>
 8019ae2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019ae4:	07dc      	lsls	r4, r3, #31
 8019ae6:	d504      	bpl.n	8019af2 <_vfiprintf_r+0x4e>
 8019ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8019aec:	b01d      	add	sp, #116	@ 0x74
 8019aee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019af2:	89ab      	ldrh	r3, [r5, #12]
 8019af4:	0598      	lsls	r0, r3, #22
 8019af6:	d4f7      	bmi.n	8019ae8 <_vfiprintf_r+0x44>
 8019af8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019afa:	f000 fff9 	bl	801aaf0 <__retarget_lock_release_recursive>
 8019afe:	e7f3      	b.n	8019ae8 <_vfiprintf_r+0x44>
 8019b00:	2300      	movs	r3, #0
 8019b02:	9309      	str	r3, [sp, #36]	@ 0x24
 8019b04:	2320      	movs	r3, #32
 8019b06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019b0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8019b0e:	2330      	movs	r3, #48	@ 0x30
 8019b10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019cc0 <_vfiprintf_r+0x21c>
 8019b14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019b18:	f04f 0901 	mov.w	r9, #1
 8019b1c:	4623      	mov	r3, r4
 8019b1e:	469a      	mov	sl, r3
 8019b20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019b24:	b10a      	cbz	r2, 8019b2a <_vfiprintf_r+0x86>
 8019b26:	2a25      	cmp	r2, #37	@ 0x25
 8019b28:	d1f9      	bne.n	8019b1e <_vfiprintf_r+0x7a>
 8019b2a:	ebba 0b04 	subs.w	fp, sl, r4
 8019b2e:	d00b      	beq.n	8019b48 <_vfiprintf_r+0xa4>
 8019b30:	465b      	mov	r3, fp
 8019b32:	4622      	mov	r2, r4
 8019b34:	4629      	mov	r1, r5
 8019b36:	4630      	mov	r0, r6
 8019b38:	f7ff ffa1 	bl	8019a7e <__sfputs_r>
 8019b3c:	3001      	adds	r0, #1
 8019b3e:	f000 80a7 	beq.w	8019c90 <_vfiprintf_r+0x1ec>
 8019b42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019b44:	445a      	add	r2, fp
 8019b46:	9209      	str	r2, [sp, #36]	@ 0x24
 8019b48:	f89a 3000 	ldrb.w	r3, [sl]
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	f000 809f 	beq.w	8019c90 <_vfiprintf_r+0x1ec>
 8019b52:	2300      	movs	r3, #0
 8019b54:	f04f 32ff 	mov.w	r2, #4294967295
 8019b58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019b5c:	f10a 0a01 	add.w	sl, sl, #1
 8019b60:	9304      	str	r3, [sp, #16]
 8019b62:	9307      	str	r3, [sp, #28]
 8019b64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019b68:	931a      	str	r3, [sp, #104]	@ 0x68
 8019b6a:	4654      	mov	r4, sl
 8019b6c:	2205      	movs	r2, #5
 8019b6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019b72:	4853      	ldr	r0, [pc, #332]	@ (8019cc0 <_vfiprintf_r+0x21c>)
 8019b74:	f7e6 fb2c 	bl	80001d0 <memchr>
 8019b78:	9a04      	ldr	r2, [sp, #16]
 8019b7a:	b9d8      	cbnz	r0, 8019bb4 <_vfiprintf_r+0x110>
 8019b7c:	06d1      	lsls	r1, r2, #27
 8019b7e:	bf44      	itt	mi
 8019b80:	2320      	movmi	r3, #32
 8019b82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019b86:	0713      	lsls	r3, r2, #28
 8019b88:	bf44      	itt	mi
 8019b8a:	232b      	movmi	r3, #43	@ 0x2b
 8019b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019b90:	f89a 3000 	ldrb.w	r3, [sl]
 8019b94:	2b2a      	cmp	r3, #42	@ 0x2a
 8019b96:	d015      	beq.n	8019bc4 <_vfiprintf_r+0x120>
 8019b98:	9a07      	ldr	r2, [sp, #28]
 8019b9a:	4654      	mov	r4, sl
 8019b9c:	2000      	movs	r0, #0
 8019b9e:	f04f 0c0a 	mov.w	ip, #10
 8019ba2:	4621      	mov	r1, r4
 8019ba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019ba8:	3b30      	subs	r3, #48	@ 0x30
 8019baa:	2b09      	cmp	r3, #9
 8019bac:	d94b      	bls.n	8019c46 <_vfiprintf_r+0x1a2>
 8019bae:	b1b0      	cbz	r0, 8019bde <_vfiprintf_r+0x13a>
 8019bb0:	9207      	str	r2, [sp, #28]
 8019bb2:	e014      	b.n	8019bde <_vfiprintf_r+0x13a>
 8019bb4:	eba0 0308 	sub.w	r3, r0, r8
 8019bb8:	fa09 f303 	lsl.w	r3, r9, r3
 8019bbc:	4313      	orrs	r3, r2
 8019bbe:	9304      	str	r3, [sp, #16]
 8019bc0:	46a2      	mov	sl, r4
 8019bc2:	e7d2      	b.n	8019b6a <_vfiprintf_r+0xc6>
 8019bc4:	9b03      	ldr	r3, [sp, #12]
 8019bc6:	1d19      	adds	r1, r3, #4
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	9103      	str	r1, [sp, #12]
 8019bcc:	2b00      	cmp	r3, #0
 8019bce:	bfbb      	ittet	lt
 8019bd0:	425b      	neglt	r3, r3
 8019bd2:	f042 0202 	orrlt.w	r2, r2, #2
 8019bd6:	9307      	strge	r3, [sp, #28]
 8019bd8:	9307      	strlt	r3, [sp, #28]
 8019bda:	bfb8      	it	lt
 8019bdc:	9204      	strlt	r2, [sp, #16]
 8019bde:	7823      	ldrb	r3, [r4, #0]
 8019be0:	2b2e      	cmp	r3, #46	@ 0x2e
 8019be2:	d10a      	bne.n	8019bfa <_vfiprintf_r+0x156>
 8019be4:	7863      	ldrb	r3, [r4, #1]
 8019be6:	2b2a      	cmp	r3, #42	@ 0x2a
 8019be8:	d132      	bne.n	8019c50 <_vfiprintf_r+0x1ac>
 8019bea:	9b03      	ldr	r3, [sp, #12]
 8019bec:	1d1a      	adds	r2, r3, #4
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	9203      	str	r2, [sp, #12]
 8019bf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019bf6:	3402      	adds	r4, #2
 8019bf8:	9305      	str	r3, [sp, #20]
 8019bfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019cd0 <_vfiprintf_r+0x22c>
 8019bfe:	7821      	ldrb	r1, [r4, #0]
 8019c00:	2203      	movs	r2, #3
 8019c02:	4650      	mov	r0, sl
 8019c04:	f7e6 fae4 	bl	80001d0 <memchr>
 8019c08:	b138      	cbz	r0, 8019c1a <_vfiprintf_r+0x176>
 8019c0a:	9b04      	ldr	r3, [sp, #16]
 8019c0c:	eba0 000a 	sub.w	r0, r0, sl
 8019c10:	2240      	movs	r2, #64	@ 0x40
 8019c12:	4082      	lsls	r2, r0
 8019c14:	4313      	orrs	r3, r2
 8019c16:	3401      	adds	r4, #1
 8019c18:	9304      	str	r3, [sp, #16]
 8019c1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019c1e:	4829      	ldr	r0, [pc, #164]	@ (8019cc4 <_vfiprintf_r+0x220>)
 8019c20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019c24:	2206      	movs	r2, #6
 8019c26:	f7e6 fad3 	bl	80001d0 <memchr>
 8019c2a:	2800      	cmp	r0, #0
 8019c2c:	d03f      	beq.n	8019cae <_vfiprintf_r+0x20a>
 8019c2e:	4b26      	ldr	r3, [pc, #152]	@ (8019cc8 <_vfiprintf_r+0x224>)
 8019c30:	bb1b      	cbnz	r3, 8019c7a <_vfiprintf_r+0x1d6>
 8019c32:	9b03      	ldr	r3, [sp, #12]
 8019c34:	3307      	adds	r3, #7
 8019c36:	f023 0307 	bic.w	r3, r3, #7
 8019c3a:	3308      	adds	r3, #8
 8019c3c:	9303      	str	r3, [sp, #12]
 8019c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019c40:	443b      	add	r3, r7
 8019c42:	9309      	str	r3, [sp, #36]	@ 0x24
 8019c44:	e76a      	b.n	8019b1c <_vfiprintf_r+0x78>
 8019c46:	fb0c 3202 	mla	r2, ip, r2, r3
 8019c4a:	460c      	mov	r4, r1
 8019c4c:	2001      	movs	r0, #1
 8019c4e:	e7a8      	b.n	8019ba2 <_vfiprintf_r+0xfe>
 8019c50:	2300      	movs	r3, #0
 8019c52:	3401      	adds	r4, #1
 8019c54:	9305      	str	r3, [sp, #20]
 8019c56:	4619      	mov	r1, r3
 8019c58:	f04f 0c0a 	mov.w	ip, #10
 8019c5c:	4620      	mov	r0, r4
 8019c5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019c62:	3a30      	subs	r2, #48	@ 0x30
 8019c64:	2a09      	cmp	r2, #9
 8019c66:	d903      	bls.n	8019c70 <_vfiprintf_r+0x1cc>
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	d0c6      	beq.n	8019bfa <_vfiprintf_r+0x156>
 8019c6c:	9105      	str	r1, [sp, #20]
 8019c6e:	e7c4      	b.n	8019bfa <_vfiprintf_r+0x156>
 8019c70:	fb0c 2101 	mla	r1, ip, r1, r2
 8019c74:	4604      	mov	r4, r0
 8019c76:	2301      	movs	r3, #1
 8019c78:	e7f0      	b.n	8019c5c <_vfiprintf_r+0x1b8>
 8019c7a:	ab03      	add	r3, sp, #12
 8019c7c:	9300      	str	r3, [sp, #0]
 8019c7e:	462a      	mov	r2, r5
 8019c80:	4b12      	ldr	r3, [pc, #72]	@ (8019ccc <_vfiprintf_r+0x228>)
 8019c82:	a904      	add	r1, sp, #16
 8019c84:	4630      	mov	r0, r6
 8019c86:	f7ff fcb9 	bl	80195fc <_printf_float>
 8019c8a:	4607      	mov	r7, r0
 8019c8c:	1c78      	adds	r0, r7, #1
 8019c8e:	d1d6      	bne.n	8019c3e <_vfiprintf_r+0x19a>
 8019c90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019c92:	07d9      	lsls	r1, r3, #31
 8019c94:	d405      	bmi.n	8019ca2 <_vfiprintf_r+0x1fe>
 8019c96:	89ab      	ldrh	r3, [r5, #12]
 8019c98:	059a      	lsls	r2, r3, #22
 8019c9a:	d402      	bmi.n	8019ca2 <_vfiprintf_r+0x1fe>
 8019c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019c9e:	f000 ff27 	bl	801aaf0 <__retarget_lock_release_recursive>
 8019ca2:	89ab      	ldrh	r3, [r5, #12]
 8019ca4:	065b      	lsls	r3, r3, #25
 8019ca6:	f53f af1f 	bmi.w	8019ae8 <_vfiprintf_r+0x44>
 8019caa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019cac:	e71e      	b.n	8019aec <_vfiprintf_r+0x48>
 8019cae:	ab03      	add	r3, sp, #12
 8019cb0:	9300      	str	r3, [sp, #0]
 8019cb2:	462a      	mov	r2, r5
 8019cb4:	4b05      	ldr	r3, [pc, #20]	@ (8019ccc <_vfiprintf_r+0x228>)
 8019cb6:	a904      	add	r1, sp, #16
 8019cb8:	4630      	mov	r0, r6
 8019cba:	f000 f883 	bl	8019dc4 <_printf_i>
 8019cbe:	e7e4      	b.n	8019c8a <_vfiprintf_r+0x1e6>
 8019cc0:	08020704 	.word	0x08020704
 8019cc4:	0802070e 	.word	0x0802070e
 8019cc8:	080195fd 	.word	0x080195fd
 8019ccc:	08019a7f 	.word	0x08019a7f
 8019cd0:	0802070a 	.word	0x0802070a

08019cd4 <vfiprintf>:
 8019cd4:	4613      	mov	r3, r2
 8019cd6:	460a      	mov	r2, r1
 8019cd8:	4601      	mov	r1, r0
 8019cda:	4802      	ldr	r0, [pc, #8]	@ (8019ce4 <vfiprintf+0x10>)
 8019cdc:	6800      	ldr	r0, [r0, #0]
 8019cde:	f7ff bee1 	b.w	8019aa4 <_vfiprintf_r>
 8019ce2:	bf00      	nop
 8019ce4:	20000160 	.word	0x20000160

08019ce8 <_printf_common>:
 8019ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019cec:	4616      	mov	r6, r2
 8019cee:	4698      	mov	r8, r3
 8019cf0:	688a      	ldr	r2, [r1, #8]
 8019cf2:	690b      	ldr	r3, [r1, #16]
 8019cf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019cf8:	4293      	cmp	r3, r2
 8019cfa:	bfb8      	it	lt
 8019cfc:	4613      	movlt	r3, r2
 8019cfe:	6033      	str	r3, [r6, #0]
 8019d00:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019d04:	4607      	mov	r7, r0
 8019d06:	460c      	mov	r4, r1
 8019d08:	b10a      	cbz	r2, 8019d0e <_printf_common+0x26>
 8019d0a:	3301      	adds	r3, #1
 8019d0c:	6033      	str	r3, [r6, #0]
 8019d0e:	6823      	ldr	r3, [r4, #0]
 8019d10:	0699      	lsls	r1, r3, #26
 8019d12:	bf42      	ittt	mi
 8019d14:	6833      	ldrmi	r3, [r6, #0]
 8019d16:	3302      	addmi	r3, #2
 8019d18:	6033      	strmi	r3, [r6, #0]
 8019d1a:	6825      	ldr	r5, [r4, #0]
 8019d1c:	f015 0506 	ands.w	r5, r5, #6
 8019d20:	d106      	bne.n	8019d30 <_printf_common+0x48>
 8019d22:	f104 0a19 	add.w	sl, r4, #25
 8019d26:	68e3      	ldr	r3, [r4, #12]
 8019d28:	6832      	ldr	r2, [r6, #0]
 8019d2a:	1a9b      	subs	r3, r3, r2
 8019d2c:	42ab      	cmp	r3, r5
 8019d2e:	dc26      	bgt.n	8019d7e <_printf_common+0x96>
 8019d30:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019d34:	6822      	ldr	r2, [r4, #0]
 8019d36:	3b00      	subs	r3, #0
 8019d38:	bf18      	it	ne
 8019d3a:	2301      	movne	r3, #1
 8019d3c:	0692      	lsls	r2, r2, #26
 8019d3e:	d42b      	bmi.n	8019d98 <_printf_common+0xb0>
 8019d40:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8019d44:	4641      	mov	r1, r8
 8019d46:	4638      	mov	r0, r7
 8019d48:	47c8      	blx	r9
 8019d4a:	3001      	adds	r0, #1
 8019d4c:	d01e      	beq.n	8019d8c <_printf_common+0xa4>
 8019d4e:	6823      	ldr	r3, [r4, #0]
 8019d50:	6922      	ldr	r2, [r4, #16]
 8019d52:	f003 0306 	and.w	r3, r3, #6
 8019d56:	2b04      	cmp	r3, #4
 8019d58:	bf02      	ittt	eq
 8019d5a:	68e5      	ldreq	r5, [r4, #12]
 8019d5c:	6833      	ldreq	r3, [r6, #0]
 8019d5e:	1aed      	subeq	r5, r5, r3
 8019d60:	68a3      	ldr	r3, [r4, #8]
 8019d62:	bf0c      	ite	eq
 8019d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019d68:	2500      	movne	r5, #0
 8019d6a:	4293      	cmp	r3, r2
 8019d6c:	bfc4      	itt	gt
 8019d6e:	1a9b      	subgt	r3, r3, r2
 8019d70:	18ed      	addgt	r5, r5, r3
 8019d72:	2600      	movs	r6, #0
 8019d74:	341a      	adds	r4, #26
 8019d76:	42b5      	cmp	r5, r6
 8019d78:	d11a      	bne.n	8019db0 <_printf_common+0xc8>
 8019d7a:	2000      	movs	r0, #0
 8019d7c:	e008      	b.n	8019d90 <_printf_common+0xa8>
 8019d7e:	2301      	movs	r3, #1
 8019d80:	4652      	mov	r2, sl
 8019d82:	4641      	mov	r1, r8
 8019d84:	4638      	mov	r0, r7
 8019d86:	47c8      	blx	r9
 8019d88:	3001      	adds	r0, #1
 8019d8a:	d103      	bne.n	8019d94 <_printf_common+0xac>
 8019d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8019d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019d94:	3501      	adds	r5, #1
 8019d96:	e7c6      	b.n	8019d26 <_printf_common+0x3e>
 8019d98:	18e1      	adds	r1, r4, r3
 8019d9a:	1c5a      	adds	r2, r3, #1
 8019d9c:	2030      	movs	r0, #48	@ 0x30
 8019d9e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8019da2:	4422      	add	r2, r4
 8019da4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8019da8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8019dac:	3302      	adds	r3, #2
 8019dae:	e7c7      	b.n	8019d40 <_printf_common+0x58>
 8019db0:	2301      	movs	r3, #1
 8019db2:	4622      	mov	r2, r4
 8019db4:	4641      	mov	r1, r8
 8019db6:	4638      	mov	r0, r7
 8019db8:	47c8      	blx	r9
 8019dba:	3001      	adds	r0, #1
 8019dbc:	d0e6      	beq.n	8019d8c <_printf_common+0xa4>
 8019dbe:	3601      	adds	r6, #1
 8019dc0:	e7d9      	b.n	8019d76 <_printf_common+0x8e>
	...

08019dc4 <_printf_i>:
 8019dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019dc8:	7e0f      	ldrb	r7, [r1, #24]
 8019dca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8019dcc:	2f78      	cmp	r7, #120	@ 0x78
 8019dce:	4691      	mov	r9, r2
 8019dd0:	4680      	mov	r8, r0
 8019dd2:	460c      	mov	r4, r1
 8019dd4:	469a      	mov	sl, r3
 8019dd6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8019dda:	d807      	bhi.n	8019dec <_printf_i+0x28>
 8019ddc:	2f62      	cmp	r7, #98	@ 0x62
 8019dde:	d80a      	bhi.n	8019df6 <_printf_i+0x32>
 8019de0:	2f00      	cmp	r7, #0
 8019de2:	f000 80d1 	beq.w	8019f88 <_printf_i+0x1c4>
 8019de6:	2f58      	cmp	r7, #88	@ 0x58
 8019de8:	f000 80b8 	beq.w	8019f5c <_printf_i+0x198>
 8019dec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019df0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8019df4:	e03a      	b.n	8019e6c <_printf_i+0xa8>
 8019df6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8019dfa:	2b15      	cmp	r3, #21
 8019dfc:	d8f6      	bhi.n	8019dec <_printf_i+0x28>
 8019dfe:	a101      	add	r1, pc, #4	@ (adr r1, 8019e04 <_printf_i+0x40>)
 8019e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019e04:	08019e5d 	.word	0x08019e5d
 8019e08:	08019e71 	.word	0x08019e71
 8019e0c:	08019ded 	.word	0x08019ded
 8019e10:	08019ded 	.word	0x08019ded
 8019e14:	08019ded 	.word	0x08019ded
 8019e18:	08019ded 	.word	0x08019ded
 8019e1c:	08019e71 	.word	0x08019e71
 8019e20:	08019ded 	.word	0x08019ded
 8019e24:	08019ded 	.word	0x08019ded
 8019e28:	08019ded 	.word	0x08019ded
 8019e2c:	08019ded 	.word	0x08019ded
 8019e30:	08019f6f 	.word	0x08019f6f
 8019e34:	08019e9b 	.word	0x08019e9b
 8019e38:	08019f29 	.word	0x08019f29
 8019e3c:	08019ded 	.word	0x08019ded
 8019e40:	08019ded 	.word	0x08019ded
 8019e44:	08019f91 	.word	0x08019f91
 8019e48:	08019ded 	.word	0x08019ded
 8019e4c:	08019e9b 	.word	0x08019e9b
 8019e50:	08019ded 	.word	0x08019ded
 8019e54:	08019ded 	.word	0x08019ded
 8019e58:	08019f31 	.word	0x08019f31
 8019e5c:	6833      	ldr	r3, [r6, #0]
 8019e5e:	1d1a      	adds	r2, r3, #4
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	6032      	str	r2, [r6, #0]
 8019e64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8019e68:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8019e6c:	2301      	movs	r3, #1
 8019e6e:	e09c      	b.n	8019faa <_printf_i+0x1e6>
 8019e70:	6833      	ldr	r3, [r6, #0]
 8019e72:	6820      	ldr	r0, [r4, #0]
 8019e74:	1d19      	adds	r1, r3, #4
 8019e76:	6031      	str	r1, [r6, #0]
 8019e78:	0606      	lsls	r6, r0, #24
 8019e7a:	d501      	bpl.n	8019e80 <_printf_i+0xbc>
 8019e7c:	681d      	ldr	r5, [r3, #0]
 8019e7e:	e003      	b.n	8019e88 <_printf_i+0xc4>
 8019e80:	0645      	lsls	r5, r0, #25
 8019e82:	d5fb      	bpl.n	8019e7c <_printf_i+0xb8>
 8019e84:	f9b3 5000 	ldrsh.w	r5, [r3]
 8019e88:	2d00      	cmp	r5, #0
 8019e8a:	da03      	bge.n	8019e94 <_printf_i+0xd0>
 8019e8c:	232d      	movs	r3, #45	@ 0x2d
 8019e8e:	426d      	negs	r5, r5
 8019e90:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019e94:	4858      	ldr	r0, [pc, #352]	@ (8019ff8 <_printf_i+0x234>)
 8019e96:	230a      	movs	r3, #10
 8019e98:	e011      	b.n	8019ebe <_printf_i+0xfa>
 8019e9a:	6821      	ldr	r1, [r4, #0]
 8019e9c:	6833      	ldr	r3, [r6, #0]
 8019e9e:	0608      	lsls	r0, r1, #24
 8019ea0:	f853 5b04 	ldr.w	r5, [r3], #4
 8019ea4:	d402      	bmi.n	8019eac <_printf_i+0xe8>
 8019ea6:	0649      	lsls	r1, r1, #25
 8019ea8:	bf48      	it	mi
 8019eaa:	b2ad      	uxthmi	r5, r5
 8019eac:	2f6f      	cmp	r7, #111	@ 0x6f
 8019eae:	4852      	ldr	r0, [pc, #328]	@ (8019ff8 <_printf_i+0x234>)
 8019eb0:	6033      	str	r3, [r6, #0]
 8019eb2:	bf14      	ite	ne
 8019eb4:	230a      	movne	r3, #10
 8019eb6:	2308      	moveq	r3, #8
 8019eb8:	2100      	movs	r1, #0
 8019eba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8019ebe:	6866      	ldr	r6, [r4, #4]
 8019ec0:	60a6      	str	r6, [r4, #8]
 8019ec2:	2e00      	cmp	r6, #0
 8019ec4:	db05      	blt.n	8019ed2 <_printf_i+0x10e>
 8019ec6:	6821      	ldr	r1, [r4, #0]
 8019ec8:	432e      	orrs	r6, r5
 8019eca:	f021 0104 	bic.w	r1, r1, #4
 8019ece:	6021      	str	r1, [r4, #0]
 8019ed0:	d04b      	beq.n	8019f6a <_printf_i+0x1a6>
 8019ed2:	4616      	mov	r6, r2
 8019ed4:	fbb5 f1f3 	udiv	r1, r5, r3
 8019ed8:	fb03 5711 	mls	r7, r3, r1, r5
 8019edc:	5dc7      	ldrb	r7, [r0, r7]
 8019ede:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8019ee2:	462f      	mov	r7, r5
 8019ee4:	42bb      	cmp	r3, r7
 8019ee6:	460d      	mov	r5, r1
 8019ee8:	d9f4      	bls.n	8019ed4 <_printf_i+0x110>
 8019eea:	2b08      	cmp	r3, #8
 8019eec:	d10b      	bne.n	8019f06 <_printf_i+0x142>
 8019eee:	6823      	ldr	r3, [r4, #0]
 8019ef0:	07df      	lsls	r7, r3, #31
 8019ef2:	d508      	bpl.n	8019f06 <_printf_i+0x142>
 8019ef4:	6923      	ldr	r3, [r4, #16]
 8019ef6:	6861      	ldr	r1, [r4, #4]
 8019ef8:	4299      	cmp	r1, r3
 8019efa:	bfde      	ittt	le
 8019efc:	2330      	movle	r3, #48	@ 0x30
 8019efe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8019f02:	f106 36ff 	addle.w	r6, r6, #4294967295
 8019f06:	1b92      	subs	r2, r2, r6
 8019f08:	6122      	str	r2, [r4, #16]
 8019f0a:	f8cd a000 	str.w	sl, [sp]
 8019f0e:	464b      	mov	r3, r9
 8019f10:	aa03      	add	r2, sp, #12
 8019f12:	4621      	mov	r1, r4
 8019f14:	4640      	mov	r0, r8
 8019f16:	f7ff fee7 	bl	8019ce8 <_printf_common>
 8019f1a:	3001      	adds	r0, #1
 8019f1c:	d14a      	bne.n	8019fb4 <_printf_i+0x1f0>
 8019f1e:	f04f 30ff 	mov.w	r0, #4294967295
 8019f22:	b004      	add	sp, #16
 8019f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019f28:	6823      	ldr	r3, [r4, #0]
 8019f2a:	f043 0320 	orr.w	r3, r3, #32
 8019f2e:	6023      	str	r3, [r4, #0]
 8019f30:	4832      	ldr	r0, [pc, #200]	@ (8019ffc <_printf_i+0x238>)
 8019f32:	2778      	movs	r7, #120	@ 0x78
 8019f34:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8019f38:	6823      	ldr	r3, [r4, #0]
 8019f3a:	6831      	ldr	r1, [r6, #0]
 8019f3c:	061f      	lsls	r7, r3, #24
 8019f3e:	f851 5b04 	ldr.w	r5, [r1], #4
 8019f42:	d402      	bmi.n	8019f4a <_printf_i+0x186>
 8019f44:	065f      	lsls	r7, r3, #25
 8019f46:	bf48      	it	mi
 8019f48:	b2ad      	uxthmi	r5, r5
 8019f4a:	6031      	str	r1, [r6, #0]
 8019f4c:	07d9      	lsls	r1, r3, #31
 8019f4e:	bf44      	itt	mi
 8019f50:	f043 0320 	orrmi.w	r3, r3, #32
 8019f54:	6023      	strmi	r3, [r4, #0]
 8019f56:	b11d      	cbz	r5, 8019f60 <_printf_i+0x19c>
 8019f58:	2310      	movs	r3, #16
 8019f5a:	e7ad      	b.n	8019eb8 <_printf_i+0xf4>
 8019f5c:	4826      	ldr	r0, [pc, #152]	@ (8019ff8 <_printf_i+0x234>)
 8019f5e:	e7e9      	b.n	8019f34 <_printf_i+0x170>
 8019f60:	6823      	ldr	r3, [r4, #0]
 8019f62:	f023 0320 	bic.w	r3, r3, #32
 8019f66:	6023      	str	r3, [r4, #0]
 8019f68:	e7f6      	b.n	8019f58 <_printf_i+0x194>
 8019f6a:	4616      	mov	r6, r2
 8019f6c:	e7bd      	b.n	8019eea <_printf_i+0x126>
 8019f6e:	6833      	ldr	r3, [r6, #0]
 8019f70:	6825      	ldr	r5, [r4, #0]
 8019f72:	6961      	ldr	r1, [r4, #20]
 8019f74:	1d18      	adds	r0, r3, #4
 8019f76:	6030      	str	r0, [r6, #0]
 8019f78:	062e      	lsls	r6, r5, #24
 8019f7a:	681b      	ldr	r3, [r3, #0]
 8019f7c:	d501      	bpl.n	8019f82 <_printf_i+0x1be>
 8019f7e:	6019      	str	r1, [r3, #0]
 8019f80:	e002      	b.n	8019f88 <_printf_i+0x1c4>
 8019f82:	0668      	lsls	r0, r5, #25
 8019f84:	d5fb      	bpl.n	8019f7e <_printf_i+0x1ba>
 8019f86:	8019      	strh	r1, [r3, #0]
 8019f88:	2300      	movs	r3, #0
 8019f8a:	6123      	str	r3, [r4, #16]
 8019f8c:	4616      	mov	r6, r2
 8019f8e:	e7bc      	b.n	8019f0a <_printf_i+0x146>
 8019f90:	6833      	ldr	r3, [r6, #0]
 8019f92:	1d1a      	adds	r2, r3, #4
 8019f94:	6032      	str	r2, [r6, #0]
 8019f96:	681e      	ldr	r6, [r3, #0]
 8019f98:	6862      	ldr	r2, [r4, #4]
 8019f9a:	2100      	movs	r1, #0
 8019f9c:	4630      	mov	r0, r6
 8019f9e:	f7e6 f917 	bl	80001d0 <memchr>
 8019fa2:	b108      	cbz	r0, 8019fa8 <_printf_i+0x1e4>
 8019fa4:	1b80      	subs	r0, r0, r6
 8019fa6:	6060      	str	r0, [r4, #4]
 8019fa8:	6863      	ldr	r3, [r4, #4]
 8019faa:	6123      	str	r3, [r4, #16]
 8019fac:	2300      	movs	r3, #0
 8019fae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8019fb2:	e7aa      	b.n	8019f0a <_printf_i+0x146>
 8019fb4:	6923      	ldr	r3, [r4, #16]
 8019fb6:	4632      	mov	r2, r6
 8019fb8:	4649      	mov	r1, r9
 8019fba:	4640      	mov	r0, r8
 8019fbc:	47d0      	blx	sl
 8019fbe:	3001      	adds	r0, #1
 8019fc0:	d0ad      	beq.n	8019f1e <_printf_i+0x15a>
 8019fc2:	6823      	ldr	r3, [r4, #0]
 8019fc4:	079b      	lsls	r3, r3, #30
 8019fc6:	d413      	bmi.n	8019ff0 <_printf_i+0x22c>
 8019fc8:	68e0      	ldr	r0, [r4, #12]
 8019fca:	9b03      	ldr	r3, [sp, #12]
 8019fcc:	4298      	cmp	r0, r3
 8019fce:	bfb8      	it	lt
 8019fd0:	4618      	movlt	r0, r3
 8019fd2:	e7a6      	b.n	8019f22 <_printf_i+0x15e>
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	4632      	mov	r2, r6
 8019fd8:	4649      	mov	r1, r9
 8019fda:	4640      	mov	r0, r8
 8019fdc:	47d0      	blx	sl
 8019fde:	3001      	adds	r0, #1
 8019fe0:	d09d      	beq.n	8019f1e <_printf_i+0x15a>
 8019fe2:	3501      	adds	r5, #1
 8019fe4:	68e3      	ldr	r3, [r4, #12]
 8019fe6:	9903      	ldr	r1, [sp, #12]
 8019fe8:	1a5b      	subs	r3, r3, r1
 8019fea:	42ab      	cmp	r3, r5
 8019fec:	dcf2      	bgt.n	8019fd4 <_printf_i+0x210>
 8019fee:	e7eb      	b.n	8019fc8 <_printf_i+0x204>
 8019ff0:	2500      	movs	r5, #0
 8019ff2:	f104 0619 	add.w	r6, r4, #25
 8019ff6:	e7f5      	b.n	8019fe4 <_printf_i+0x220>
 8019ff8:	08020715 	.word	0x08020715
 8019ffc:	08020726 	.word	0x08020726

0801a000 <_scanf_float>:
 801a000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a004:	b087      	sub	sp, #28
 801a006:	4691      	mov	r9, r2
 801a008:	9303      	str	r3, [sp, #12]
 801a00a:	688b      	ldr	r3, [r1, #8]
 801a00c:	1e5a      	subs	r2, r3, #1
 801a00e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801a012:	bf81      	itttt	hi
 801a014:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801a018:	eb03 0b05 	addhi.w	fp, r3, r5
 801a01c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801a020:	608b      	strhi	r3, [r1, #8]
 801a022:	680b      	ldr	r3, [r1, #0]
 801a024:	460a      	mov	r2, r1
 801a026:	f04f 0500 	mov.w	r5, #0
 801a02a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801a02e:	f842 3b1c 	str.w	r3, [r2], #28
 801a032:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801a036:	4680      	mov	r8, r0
 801a038:	460c      	mov	r4, r1
 801a03a:	bf98      	it	ls
 801a03c:	f04f 0b00 	movls.w	fp, #0
 801a040:	9201      	str	r2, [sp, #4]
 801a042:	4616      	mov	r6, r2
 801a044:	46aa      	mov	sl, r5
 801a046:	462f      	mov	r7, r5
 801a048:	9502      	str	r5, [sp, #8]
 801a04a:	68a2      	ldr	r2, [r4, #8]
 801a04c:	b15a      	cbz	r2, 801a066 <_scanf_float+0x66>
 801a04e:	f8d9 3000 	ldr.w	r3, [r9]
 801a052:	781b      	ldrb	r3, [r3, #0]
 801a054:	2b4e      	cmp	r3, #78	@ 0x4e
 801a056:	d863      	bhi.n	801a120 <_scanf_float+0x120>
 801a058:	2b40      	cmp	r3, #64	@ 0x40
 801a05a:	d83b      	bhi.n	801a0d4 <_scanf_float+0xd4>
 801a05c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801a060:	b2c8      	uxtb	r0, r1
 801a062:	280e      	cmp	r0, #14
 801a064:	d939      	bls.n	801a0da <_scanf_float+0xda>
 801a066:	b11f      	cbz	r7, 801a070 <_scanf_float+0x70>
 801a068:	6823      	ldr	r3, [r4, #0]
 801a06a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a06e:	6023      	str	r3, [r4, #0]
 801a070:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a074:	f1ba 0f01 	cmp.w	sl, #1
 801a078:	f200 8114 	bhi.w	801a2a4 <_scanf_float+0x2a4>
 801a07c:	9b01      	ldr	r3, [sp, #4]
 801a07e:	429e      	cmp	r6, r3
 801a080:	f200 8105 	bhi.w	801a28e <_scanf_float+0x28e>
 801a084:	2001      	movs	r0, #1
 801a086:	b007      	add	sp, #28
 801a088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a08c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801a090:	2a0d      	cmp	r2, #13
 801a092:	d8e8      	bhi.n	801a066 <_scanf_float+0x66>
 801a094:	a101      	add	r1, pc, #4	@ (adr r1, 801a09c <_scanf_float+0x9c>)
 801a096:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801a09a:	bf00      	nop
 801a09c:	0801a1e5 	.word	0x0801a1e5
 801a0a0:	0801a067 	.word	0x0801a067
 801a0a4:	0801a067 	.word	0x0801a067
 801a0a8:	0801a067 	.word	0x0801a067
 801a0ac:	0801a241 	.word	0x0801a241
 801a0b0:	0801a21b 	.word	0x0801a21b
 801a0b4:	0801a067 	.word	0x0801a067
 801a0b8:	0801a067 	.word	0x0801a067
 801a0bc:	0801a1f3 	.word	0x0801a1f3
 801a0c0:	0801a067 	.word	0x0801a067
 801a0c4:	0801a067 	.word	0x0801a067
 801a0c8:	0801a067 	.word	0x0801a067
 801a0cc:	0801a067 	.word	0x0801a067
 801a0d0:	0801a1af 	.word	0x0801a1af
 801a0d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801a0d8:	e7da      	b.n	801a090 <_scanf_float+0x90>
 801a0da:	290e      	cmp	r1, #14
 801a0dc:	d8c3      	bhi.n	801a066 <_scanf_float+0x66>
 801a0de:	a001      	add	r0, pc, #4	@ (adr r0, 801a0e4 <_scanf_float+0xe4>)
 801a0e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801a0e4:	0801a19f 	.word	0x0801a19f
 801a0e8:	0801a067 	.word	0x0801a067
 801a0ec:	0801a19f 	.word	0x0801a19f
 801a0f0:	0801a22f 	.word	0x0801a22f
 801a0f4:	0801a067 	.word	0x0801a067
 801a0f8:	0801a141 	.word	0x0801a141
 801a0fc:	0801a185 	.word	0x0801a185
 801a100:	0801a185 	.word	0x0801a185
 801a104:	0801a185 	.word	0x0801a185
 801a108:	0801a185 	.word	0x0801a185
 801a10c:	0801a185 	.word	0x0801a185
 801a110:	0801a185 	.word	0x0801a185
 801a114:	0801a185 	.word	0x0801a185
 801a118:	0801a185 	.word	0x0801a185
 801a11c:	0801a185 	.word	0x0801a185
 801a120:	2b6e      	cmp	r3, #110	@ 0x6e
 801a122:	d809      	bhi.n	801a138 <_scanf_float+0x138>
 801a124:	2b60      	cmp	r3, #96	@ 0x60
 801a126:	d8b1      	bhi.n	801a08c <_scanf_float+0x8c>
 801a128:	2b54      	cmp	r3, #84	@ 0x54
 801a12a:	d07b      	beq.n	801a224 <_scanf_float+0x224>
 801a12c:	2b59      	cmp	r3, #89	@ 0x59
 801a12e:	d19a      	bne.n	801a066 <_scanf_float+0x66>
 801a130:	2d07      	cmp	r5, #7
 801a132:	d198      	bne.n	801a066 <_scanf_float+0x66>
 801a134:	2508      	movs	r5, #8
 801a136:	e02f      	b.n	801a198 <_scanf_float+0x198>
 801a138:	2b74      	cmp	r3, #116	@ 0x74
 801a13a:	d073      	beq.n	801a224 <_scanf_float+0x224>
 801a13c:	2b79      	cmp	r3, #121	@ 0x79
 801a13e:	e7f6      	b.n	801a12e <_scanf_float+0x12e>
 801a140:	6821      	ldr	r1, [r4, #0]
 801a142:	05c8      	lsls	r0, r1, #23
 801a144:	d51e      	bpl.n	801a184 <_scanf_float+0x184>
 801a146:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801a14a:	6021      	str	r1, [r4, #0]
 801a14c:	3701      	adds	r7, #1
 801a14e:	f1bb 0f00 	cmp.w	fp, #0
 801a152:	d003      	beq.n	801a15c <_scanf_float+0x15c>
 801a154:	3201      	adds	r2, #1
 801a156:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a15a:	60a2      	str	r2, [r4, #8]
 801a15c:	68a3      	ldr	r3, [r4, #8]
 801a15e:	3b01      	subs	r3, #1
 801a160:	60a3      	str	r3, [r4, #8]
 801a162:	6923      	ldr	r3, [r4, #16]
 801a164:	3301      	adds	r3, #1
 801a166:	6123      	str	r3, [r4, #16]
 801a168:	f8d9 3004 	ldr.w	r3, [r9, #4]
 801a16c:	3b01      	subs	r3, #1
 801a16e:	2b00      	cmp	r3, #0
 801a170:	f8c9 3004 	str.w	r3, [r9, #4]
 801a174:	f340 8082 	ble.w	801a27c <_scanf_float+0x27c>
 801a178:	f8d9 3000 	ldr.w	r3, [r9]
 801a17c:	3301      	adds	r3, #1
 801a17e:	f8c9 3000 	str.w	r3, [r9]
 801a182:	e762      	b.n	801a04a <_scanf_float+0x4a>
 801a184:	eb1a 0105 	adds.w	r1, sl, r5
 801a188:	f47f af6d 	bne.w	801a066 <_scanf_float+0x66>
 801a18c:	6822      	ldr	r2, [r4, #0]
 801a18e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801a192:	6022      	str	r2, [r4, #0]
 801a194:	460d      	mov	r5, r1
 801a196:	468a      	mov	sl, r1
 801a198:	f806 3b01 	strb.w	r3, [r6], #1
 801a19c:	e7de      	b.n	801a15c <_scanf_float+0x15c>
 801a19e:	6822      	ldr	r2, [r4, #0]
 801a1a0:	0610      	lsls	r0, r2, #24
 801a1a2:	f57f af60 	bpl.w	801a066 <_scanf_float+0x66>
 801a1a6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801a1aa:	6022      	str	r2, [r4, #0]
 801a1ac:	e7f4      	b.n	801a198 <_scanf_float+0x198>
 801a1ae:	f1ba 0f00 	cmp.w	sl, #0
 801a1b2:	d10c      	bne.n	801a1ce <_scanf_float+0x1ce>
 801a1b4:	b977      	cbnz	r7, 801a1d4 <_scanf_float+0x1d4>
 801a1b6:	6822      	ldr	r2, [r4, #0]
 801a1b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801a1bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801a1c0:	d108      	bne.n	801a1d4 <_scanf_float+0x1d4>
 801a1c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a1c6:	6022      	str	r2, [r4, #0]
 801a1c8:	f04f 0a01 	mov.w	sl, #1
 801a1cc:	e7e4      	b.n	801a198 <_scanf_float+0x198>
 801a1ce:	f1ba 0f02 	cmp.w	sl, #2
 801a1d2:	d050      	beq.n	801a276 <_scanf_float+0x276>
 801a1d4:	2d01      	cmp	r5, #1
 801a1d6:	d002      	beq.n	801a1de <_scanf_float+0x1de>
 801a1d8:	2d04      	cmp	r5, #4
 801a1da:	f47f af44 	bne.w	801a066 <_scanf_float+0x66>
 801a1de:	3501      	adds	r5, #1
 801a1e0:	b2ed      	uxtb	r5, r5
 801a1e2:	e7d9      	b.n	801a198 <_scanf_float+0x198>
 801a1e4:	f1ba 0f01 	cmp.w	sl, #1
 801a1e8:	f47f af3d 	bne.w	801a066 <_scanf_float+0x66>
 801a1ec:	f04f 0a02 	mov.w	sl, #2
 801a1f0:	e7d2      	b.n	801a198 <_scanf_float+0x198>
 801a1f2:	b975      	cbnz	r5, 801a212 <_scanf_float+0x212>
 801a1f4:	2f00      	cmp	r7, #0
 801a1f6:	f47f af37 	bne.w	801a068 <_scanf_float+0x68>
 801a1fa:	6822      	ldr	r2, [r4, #0]
 801a1fc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801a200:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801a204:	f040 8103 	bne.w	801a40e <_scanf_float+0x40e>
 801a208:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a20c:	6022      	str	r2, [r4, #0]
 801a20e:	2501      	movs	r5, #1
 801a210:	e7c2      	b.n	801a198 <_scanf_float+0x198>
 801a212:	2d03      	cmp	r5, #3
 801a214:	d0e3      	beq.n	801a1de <_scanf_float+0x1de>
 801a216:	2d05      	cmp	r5, #5
 801a218:	e7df      	b.n	801a1da <_scanf_float+0x1da>
 801a21a:	2d02      	cmp	r5, #2
 801a21c:	f47f af23 	bne.w	801a066 <_scanf_float+0x66>
 801a220:	2503      	movs	r5, #3
 801a222:	e7b9      	b.n	801a198 <_scanf_float+0x198>
 801a224:	2d06      	cmp	r5, #6
 801a226:	f47f af1e 	bne.w	801a066 <_scanf_float+0x66>
 801a22a:	2507      	movs	r5, #7
 801a22c:	e7b4      	b.n	801a198 <_scanf_float+0x198>
 801a22e:	6822      	ldr	r2, [r4, #0]
 801a230:	0591      	lsls	r1, r2, #22
 801a232:	f57f af18 	bpl.w	801a066 <_scanf_float+0x66>
 801a236:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801a23a:	6022      	str	r2, [r4, #0]
 801a23c:	9702      	str	r7, [sp, #8]
 801a23e:	e7ab      	b.n	801a198 <_scanf_float+0x198>
 801a240:	6822      	ldr	r2, [r4, #0]
 801a242:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801a246:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801a24a:	d005      	beq.n	801a258 <_scanf_float+0x258>
 801a24c:	0550      	lsls	r0, r2, #21
 801a24e:	f57f af0a 	bpl.w	801a066 <_scanf_float+0x66>
 801a252:	2f00      	cmp	r7, #0
 801a254:	f000 80db 	beq.w	801a40e <_scanf_float+0x40e>
 801a258:	0591      	lsls	r1, r2, #22
 801a25a:	bf58      	it	pl
 801a25c:	9902      	ldrpl	r1, [sp, #8]
 801a25e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801a262:	bf58      	it	pl
 801a264:	1a79      	subpl	r1, r7, r1
 801a266:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801a26a:	bf58      	it	pl
 801a26c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801a270:	6022      	str	r2, [r4, #0]
 801a272:	2700      	movs	r7, #0
 801a274:	e790      	b.n	801a198 <_scanf_float+0x198>
 801a276:	f04f 0a03 	mov.w	sl, #3
 801a27a:	e78d      	b.n	801a198 <_scanf_float+0x198>
 801a27c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801a280:	4649      	mov	r1, r9
 801a282:	4640      	mov	r0, r8
 801a284:	4798      	blx	r3
 801a286:	2800      	cmp	r0, #0
 801a288:	f43f aedf 	beq.w	801a04a <_scanf_float+0x4a>
 801a28c:	e6eb      	b.n	801a066 <_scanf_float+0x66>
 801a28e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a296:	464a      	mov	r2, r9
 801a298:	4640      	mov	r0, r8
 801a29a:	4798      	blx	r3
 801a29c:	6923      	ldr	r3, [r4, #16]
 801a29e:	3b01      	subs	r3, #1
 801a2a0:	6123      	str	r3, [r4, #16]
 801a2a2:	e6eb      	b.n	801a07c <_scanf_float+0x7c>
 801a2a4:	1e6b      	subs	r3, r5, #1
 801a2a6:	2b06      	cmp	r3, #6
 801a2a8:	d824      	bhi.n	801a2f4 <_scanf_float+0x2f4>
 801a2aa:	2d02      	cmp	r5, #2
 801a2ac:	d836      	bhi.n	801a31c <_scanf_float+0x31c>
 801a2ae:	9b01      	ldr	r3, [sp, #4]
 801a2b0:	429e      	cmp	r6, r3
 801a2b2:	f67f aee7 	bls.w	801a084 <_scanf_float+0x84>
 801a2b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a2ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a2be:	464a      	mov	r2, r9
 801a2c0:	4640      	mov	r0, r8
 801a2c2:	4798      	blx	r3
 801a2c4:	6923      	ldr	r3, [r4, #16]
 801a2c6:	3b01      	subs	r3, #1
 801a2c8:	6123      	str	r3, [r4, #16]
 801a2ca:	e7f0      	b.n	801a2ae <_scanf_float+0x2ae>
 801a2cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a2d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801a2d4:	464a      	mov	r2, r9
 801a2d6:	4640      	mov	r0, r8
 801a2d8:	4798      	blx	r3
 801a2da:	6923      	ldr	r3, [r4, #16]
 801a2dc:	3b01      	subs	r3, #1
 801a2de:	6123      	str	r3, [r4, #16]
 801a2e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a2e4:	fa5f fa8a 	uxtb.w	sl, sl
 801a2e8:	f1ba 0f02 	cmp.w	sl, #2
 801a2ec:	d1ee      	bne.n	801a2cc <_scanf_float+0x2cc>
 801a2ee:	3d03      	subs	r5, #3
 801a2f0:	b2ed      	uxtb	r5, r5
 801a2f2:	1b76      	subs	r6, r6, r5
 801a2f4:	6823      	ldr	r3, [r4, #0]
 801a2f6:	05da      	lsls	r2, r3, #23
 801a2f8:	d530      	bpl.n	801a35c <_scanf_float+0x35c>
 801a2fa:	055b      	lsls	r3, r3, #21
 801a2fc:	d511      	bpl.n	801a322 <_scanf_float+0x322>
 801a2fe:	9b01      	ldr	r3, [sp, #4]
 801a300:	429e      	cmp	r6, r3
 801a302:	f67f aebf 	bls.w	801a084 <_scanf_float+0x84>
 801a306:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a30a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801a30e:	464a      	mov	r2, r9
 801a310:	4640      	mov	r0, r8
 801a312:	4798      	blx	r3
 801a314:	6923      	ldr	r3, [r4, #16]
 801a316:	3b01      	subs	r3, #1
 801a318:	6123      	str	r3, [r4, #16]
 801a31a:	e7f0      	b.n	801a2fe <_scanf_float+0x2fe>
 801a31c:	46aa      	mov	sl, r5
 801a31e:	46b3      	mov	fp, r6
 801a320:	e7de      	b.n	801a2e0 <_scanf_float+0x2e0>
 801a322:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801a326:	6923      	ldr	r3, [r4, #16]
 801a328:	2965      	cmp	r1, #101	@ 0x65
 801a32a:	f103 33ff 	add.w	r3, r3, #4294967295
 801a32e:	f106 35ff 	add.w	r5, r6, #4294967295
 801a332:	6123      	str	r3, [r4, #16]
 801a334:	d00c      	beq.n	801a350 <_scanf_float+0x350>
 801a336:	2945      	cmp	r1, #69	@ 0x45
 801a338:	d00a      	beq.n	801a350 <_scanf_float+0x350>
 801a33a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a33e:	464a      	mov	r2, r9
 801a340:	4640      	mov	r0, r8
 801a342:	4798      	blx	r3
 801a344:	6923      	ldr	r3, [r4, #16]
 801a346:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801a34a:	3b01      	subs	r3, #1
 801a34c:	1eb5      	subs	r5, r6, #2
 801a34e:	6123      	str	r3, [r4, #16]
 801a350:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801a354:	464a      	mov	r2, r9
 801a356:	4640      	mov	r0, r8
 801a358:	4798      	blx	r3
 801a35a:	462e      	mov	r6, r5
 801a35c:	6822      	ldr	r2, [r4, #0]
 801a35e:	f012 0210 	ands.w	r2, r2, #16
 801a362:	d001      	beq.n	801a368 <_scanf_float+0x368>
 801a364:	2000      	movs	r0, #0
 801a366:	e68e      	b.n	801a086 <_scanf_float+0x86>
 801a368:	7032      	strb	r2, [r6, #0]
 801a36a:	6823      	ldr	r3, [r4, #0]
 801a36c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801a370:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801a374:	d125      	bne.n	801a3c2 <_scanf_float+0x3c2>
 801a376:	9b02      	ldr	r3, [sp, #8]
 801a378:	429f      	cmp	r7, r3
 801a37a:	d00a      	beq.n	801a392 <_scanf_float+0x392>
 801a37c:	1bda      	subs	r2, r3, r7
 801a37e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801a382:	429e      	cmp	r6, r3
 801a384:	bf28      	it	cs
 801a386:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801a38a:	4922      	ldr	r1, [pc, #136]	@ (801a414 <_scanf_float+0x414>)
 801a38c:	4630      	mov	r0, r6
 801a38e:	f000 f97f 	bl	801a690 <siprintf>
 801a392:	9901      	ldr	r1, [sp, #4]
 801a394:	2200      	movs	r2, #0
 801a396:	4640      	mov	r0, r8
 801a398:	f002 fe0e 	bl	801cfb8 <_strtod_r>
 801a39c:	9b03      	ldr	r3, [sp, #12]
 801a39e:	6821      	ldr	r1, [r4, #0]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	f011 0f02 	tst.w	r1, #2
 801a3a6:	ec57 6b10 	vmov	r6, r7, d0
 801a3aa:	f103 0204 	add.w	r2, r3, #4
 801a3ae:	d015      	beq.n	801a3dc <_scanf_float+0x3dc>
 801a3b0:	9903      	ldr	r1, [sp, #12]
 801a3b2:	600a      	str	r2, [r1, #0]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	e9c3 6700 	strd	r6, r7, [r3]
 801a3ba:	68e3      	ldr	r3, [r4, #12]
 801a3bc:	3301      	adds	r3, #1
 801a3be:	60e3      	str	r3, [r4, #12]
 801a3c0:	e7d0      	b.n	801a364 <_scanf_float+0x364>
 801a3c2:	9b04      	ldr	r3, [sp, #16]
 801a3c4:	2b00      	cmp	r3, #0
 801a3c6:	d0e4      	beq.n	801a392 <_scanf_float+0x392>
 801a3c8:	9905      	ldr	r1, [sp, #20]
 801a3ca:	230a      	movs	r3, #10
 801a3cc:	3101      	adds	r1, #1
 801a3ce:	4640      	mov	r0, r8
 801a3d0:	f002 fe72 	bl	801d0b8 <_strtol_r>
 801a3d4:	9b04      	ldr	r3, [sp, #16]
 801a3d6:	9e05      	ldr	r6, [sp, #20]
 801a3d8:	1ac2      	subs	r2, r0, r3
 801a3da:	e7d0      	b.n	801a37e <_scanf_float+0x37e>
 801a3dc:	f011 0f04 	tst.w	r1, #4
 801a3e0:	9903      	ldr	r1, [sp, #12]
 801a3e2:	600a      	str	r2, [r1, #0]
 801a3e4:	d1e6      	bne.n	801a3b4 <_scanf_float+0x3b4>
 801a3e6:	681d      	ldr	r5, [r3, #0]
 801a3e8:	4632      	mov	r2, r6
 801a3ea:	463b      	mov	r3, r7
 801a3ec:	4630      	mov	r0, r6
 801a3ee:	4639      	mov	r1, r7
 801a3f0:	f7e6 fb9c 	bl	8000b2c <__aeabi_dcmpun>
 801a3f4:	b128      	cbz	r0, 801a402 <_scanf_float+0x402>
 801a3f6:	4808      	ldr	r0, [pc, #32]	@ (801a418 <_scanf_float+0x418>)
 801a3f8:	f7fd fe06 	bl	8018008 <nanf>
 801a3fc:	ed85 0a00 	vstr	s0, [r5]
 801a400:	e7db      	b.n	801a3ba <_scanf_float+0x3ba>
 801a402:	4630      	mov	r0, r6
 801a404:	4639      	mov	r1, r7
 801a406:	f7e6 fbef 	bl	8000be8 <__aeabi_d2f>
 801a40a:	6028      	str	r0, [r5, #0]
 801a40c:	e7d5      	b.n	801a3ba <_scanf_float+0x3ba>
 801a40e:	2700      	movs	r7, #0
 801a410:	e62e      	b.n	801a070 <_scanf_float+0x70>
 801a412:	bf00      	nop
 801a414:	08020737 	.word	0x08020737
 801a418:	08020777 	.word	0x08020777

0801a41c <std>:
 801a41c:	2300      	movs	r3, #0
 801a41e:	b510      	push	{r4, lr}
 801a420:	4604      	mov	r4, r0
 801a422:	e9c0 3300 	strd	r3, r3, [r0]
 801a426:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a42a:	6083      	str	r3, [r0, #8]
 801a42c:	8181      	strh	r1, [r0, #12]
 801a42e:	6643      	str	r3, [r0, #100]	@ 0x64
 801a430:	81c2      	strh	r2, [r0, #14]
 801a432:	6183      	str	r3, [r0, #24]
 801a434:	4619      	mov	r1, r3
 801a436:	2208      	movs	r2, #8
 801a438:	305c      	adds	r0, #92	@ 0x5c
 801a43a:	f000 fa6b 	bl	801a914 <memset>
 801a43e:	4b0d      	ldr	r3, [pc, #52]	@ (801a474 <std+0x58>)
 801a440:	6263      	str	r3, [r4, #36]	@ 0x24
 801a442:	4b0d      	ldr	r3, [pc, #52]	@ (801a478 <std+0x5c>)
 801a444:	62a3      	str	r3, [r4, #40]	@ 0x28
 801a446:	4b0d      	ldr	r3, [pc, #52]	@ (801a47c <std+0x60>)
 801a448:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801a44a:	4b0d      	ldr	r3, [pc, #52]	@ (801a480 <std+0x64>)
 801a44c:	6323      	str	r3, [r4, #48]	@ 0x30
 801a44e:	4b0d      	ldr	r3, [pc, #52]	@ (801a484 <std+0x68>)
 801a450:	6224      	str	r4, [r4, #32]
 801a452:	429c      	cmp	r4, r3
 801a454:	d006      	beq.n	801a464 <std+0x48>
 801a456:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801a45a:	4294      	cmp	r4, r2
 801a45c:	d002      	beq.n	801a464 <std+0x48>
 801a45e:	33d0      	adds	r3, #208	@ 0xd0
 801a460:	429c      	cmp	r4, r3
 801a462:	d105      	bne.n	801a470 <std+0x54>
 801a464:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801a468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a46c:	f000 bb3e 	b.w	801aaec <__retarget_lock_init_recursive>
 801a470:	bd10      	pop	{r4, pc}
 801a472:	bf00      	nop
 801a474:	0801a72d 	.word	0x0801a72d
 801a478:	0801a753 	.word	0x0801a753
 801a47c:	0801a78b 	.word	0x0801a78b
 801a480:	0801a7af 	.word	0x0801a7af
 801a484:	2000bb88 	.word	0x2000bb88

0801a488 <stdio_exit_handler>:
 801a488:	4a02      	ldr	r2, [pc, #8]	@ (801a494 <stdio_exit_handler+0xc>)
 801a48a:	4903      	ldr	r1, [pc, #12]	@ (801a498 <stdio_exit_handler+0x10>)
 801a48c:	4803      	ldr	r0, [pc, #12]	@ (801a49c <stdio_exit_handler+0x14>)
 801a48e:	f000 b869 	b.w	801a564 <_fwalk_sglue>
 801a492:	bf00      	nop
 801a494:	20000154 	.word	0x20000154
 801a498:	0801dab1 	.word	0x0801dab1
 801a49c:	20000164 	.word	0x20000164

0801a4a0 <cleanup_stdio>:
 801a4a0:	6841      	ldr	r1, [r0, #4]
 801a4a2:	4b0c      	ldr	r3, [pc, #48]	@ (801a4d4 <cleanup_stdio+0x34>)
 801a4a4:	4299      	cmp	r1, r3
 801a4a6:	b510      	push	{r4, lr}
 801a4a8:	4604      	mov	r4, r0
 801a4aa:	d001      	beq.n	801a4b0 <cleanup_stdio+0x10>
 801a4ac:	f003 fb00 	bl	801dab0 <_fflush_r>
 801a4b0:	68a1      	ldr	r1, [r4, #8]
 801a4b2:	4b09      	ldr	r3, [pc, #36]	@ (801a4d8 <cleanup_stdio+0x38>)
 801a4b4:	4299      	cmp	r1, r3
 801a4b6:	d002      	beq.n	801a4be <cleanup_stdio+0x1e>
 801a4b8:	4620      	mov	r0, r4
 801a4ba:	f003 faf9 	bl	801dab0 <_fflush_r>
 801a4be:	68e1      	ldr	r1, [r4, #12]
 801a4c0:	4b06      	ldr	r3, [pc, #24]	@ (801a4dc <cleanup_stdio+0x3c>)
 801a4c2:	4299      	cmp	r1, r3
 801a4c4:	d004      	beq.n	801a4d0 <cleanup_stdio+0x30>
 801a4c6:	4620      	mov	r0, r4
 801a4c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a4cc:	f003 baf0 	b.w	801dab0 <_fflush_r>
 801a4d0:	bd10      	pop	{r4, pc}
 801a4d2:	bf00      	nop
 801a4d4:	2000bb88 	.word	0x2000bb88
 801a4d8:	2000bbf0 	.word	0x2000bbf0
 801a4dc:	2000bc58 	.word	0x2000bc58

0801a4e0 <global_stdio_init.part.0>:
 801a4e0:	b510      	push	{r4, lr}
 801a4e2:	4b0b      	ldr	r3, [pc, #44]	@ (801a510 <global_stdio_init.part.0+0x30>)
 801a4e4:	4c0b      	ldr	r4, [pc, #44]	@ (801a514 <global_stdio_init.part.0+0x34>)
 801a4e6:	4a0c      	ldr	r2, [pc, #48]	@ (801a518 <global_stdio_init.part.0+0x38>)
 801a4e8:	601a      	str	r2, [r3, #0]
 801a4ea:	4620      	mov	r0, r4
 801a4ec:	2200      	movs	r2, #0
 801a4ee:	2104      	movs	r1, #4
 801a4f0:	f7ff ff94 	bl	801a41c <std>
 801a4f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801a4f8:	2201      	movs	r2, #1
 801a4fa:	2109      	movs	r1, #9
 801a4fc:	f7ff ff8e 	bl	801a41c <std>
 801a500:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801a504:	2202      	movs	r2, #2
 801a506:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a50a:	2112      	movs	r1, #18
 801a50c:	f7ff bf86 	b.w	801a41c <std>
 801a510:	2000bcc0 	.word	0x2000bcc0
 801a514:	2000bb88 	.word	0x2000bb88
 801a518:	0801a489 	.word	0x0801a489

0801a51c <__sfp_lock_acquire>:
 801a51c:	4801      	ldr	r0, [pc, #4]	@ (801a524 <__sfp_lock_acquire+0x8>)
 801a51e:	f000 bae6 	b.w	801aaee <__retarget_lock_acquire_recursive>
 801a522:	bf00      	nop
 801a524:	2000bcc9 	.word	0x2000bcc9

0801a528 <__sfp_lock_release>:
 801a528:	4801      	ldr	r0, [pc, #4]	@ (801a530 <__sfp_lock_release+0x8>)
 801a52a:	f000 bae1 	b.w	801aaf0 <__retarget_lock_release_recursive>
 801a52e:	bf00      	nop
 801a530:	2000bcc9 	.word	0x2000bcc9

0801a534 <__sinit>:
 801a534:	b510      	push	{r4, lr}
 801a536:	4604      	mov	r4, r0
 801a538:	f7ff fff0 	bl	801a51c <__sfp_lock_acquire>
 801a53c:	6a23      	ldr	r3, [r4, #32]
 801a53e:	b11b      	cbz	r3, 801a548 <__sinit+0x14>
 801a540:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a544:	f7ff bff0 	b.w	801a528 <__sfp_lock_release>
 801a548:	4b04      	ldr	r3, [pc, #16]	@ (801a55c <__sinit+0x28>)
 801a54a:	6223      	str	r3, [r4, #32]
 801a54c:	4b04      	ldr	r3, [pc, #16]	@ (801a560 <__sinit+0x2c>)
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	2b00      	cmp	r3, #0
 801a552:	d1f5      	bne.n	801a540 <__sinit+0xc>
 801a554:	f7ff ffc4 	bl	801a4e0 <global_stdio_init.part.0>
 801a558:	e7f2      	b.n	801a540 <__sinit+0xc>
 801a55a:	bf00      	nop
 801a55c:	0801a4a1 	.word	0x0801a4a1
 801a560:	2000bcc0 	.word	0x2000bcc0

0801a564 <_fwalk_sglue>:
 801a564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a568:	4607      	mov	r7, r0
 801a56a:	4688      	mov	r8, r1
 801a56c:	4614      	mov	r4, r2
 801a56e:	2600      	movs	r6, #0
 801a570:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a574:	f1b9 0901 	subs.w	r9, r9, #1
 801a578:	d505      	bpl.n	801a586 <_fwalk_sglue+0x22>
 801a57a:	6824      	ldr	r4, [r4, #0]
 801a57c:	2c00      	cmp	r4, #0
 801a57e:	d1f7      	bne.n	801a570 <_fwalk_sglue+0xc>
 801a580:	4630      	mov	r0, r6
 801a582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a586:	89ab      	ldrh	r3, [r5, #12]
 801a588:	2b01      	cmp	r3, #1
 801a58a:	d907      	bls.n	801a59c <_fwalk_sglue+0x38>
 801a58c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a590:	3301      	adds	r3, #1
 801a592:	d003      	beq.n	801a59c <_fwalk_sglue+0x38>
 801a594:	4629      	mov	r1, r5
 801a596:	4638      	mov	r0, r7
 801a598:	47c0      	blx	r8
 801a59a:	4306      	orrs	r6, r0
 801a59c:	3568      	adds	r5, #104	@ 0x68
 801a59e:	e7e9      	b.n	801a574 <_fwalk_sglue+0x10>

0801a5a0 <iprintf>:
 801a5a0:	b40f      	push	{r0, r1, r2, r3}
 801a5a2:	b507      	push	{r0, r1, r2, lr}
 801a5a4:	4906      	ldr	r1, [pc, #24]	@ (801a5c0 <iprintf+0x20>)
 801a5a6:	ab04      	add	r3, sp, #16
 801a5a8:	6808      	ldr	r0, [r1, #0]
 801a5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 801a5ae:	6881      	ldr	r1, [r0, #8]
 801a5b0:	9301      	str	r3, [sp, #4]
 801a5b2:	f7ff fa77 	bl	8019aa4 <_vfiprintf_r>
 801a5b6:	b003      	add	sp, #12
 801a5b8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a5bc:	b004      	add	sp, #16
 801a5be:	4770      	bx	lr
 801a5c0:	20000160 	.word	0x20000160

0801a5c4 <putchar>:
 801a5c4:	4b02      	ldr	r3, [pc, #8]	@ (801a5d0 <putchar+0xc>)
 801a5c6:	4601      	mov	r1, r0
 801a5c8:	6818      	ldr	r0, [r3, #0]
 801a5ca:	6882      	ldr	r2, [r0, #8]
 801a5cc:	f003 bb0c 	b.w	801dbe8 <_putc_r>
 801a5d0:	20000160 	.word	0x20000160

0801a5d4 <_puts_r>:
 801a5d4:	6a03      	ldr	r3, [r0, #32]
 801a5d6:	b570      	push	{r4, r5, r6, lr}
 801a5d8:	6884      	ldr	r4, [r0, #8]
 801a5da:	4605      	mov	r5, r0
 801a5dc:	460e      	mov	r6, r1
 801a5de:	b90b      	cbnz	r3, 801a5e4 <_puts_r+0x10>
 801a5e0:	f7ff ffa8 	bl	801a534 <__sinit>
 801a5e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a5e6:	07db      	lsls	r3, r3, #31
 801a5e8:	d405      	bmi.n	801a5f6 <_puts_r+0x22>
 801a5ea:	89a3      	ldrh	r3, [r4, #12]
 801a5ec:	0598      	lsls	r0, r3, #22
 801a5ee:	d402      	bmi.n	801a5f6 <_puts_r+0x22>
 801a5f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a5f2:	f000 fa7c 	bl	801aaee <__retarget_lock_acquire_recursive>
 801a5f6:	89a3      	ldrh	r3, [r4, #12]
 801a5f8:	0719      	lsls	r1, r3, #28
 801a5fa:	d502      	bpl.n	801a602 <_puts_r+0x2e>
 801a5fc:	6923      	ldr	r3, [r4, #16]
 801a5fe:	2b00      	cmp	r3, #0
 801a600:	d135      	bne.n	801a66e <_puts_r+0x9a>
 801a602:	4621      	mov	r1, r4
 801a604:	4628      	mov	r0, r5
 801a606:	f000 f915 	bl	801a834 <__swsetup_r>
 801a60a:	b380      	cbz	r0, 801a66e <_puts_r+0x9a>
 801a60c:	f04f 35ff 	mov.w	r5, #4294967295
 801a610:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a612:	07da      	lsls	r2, r3, #31
 801a614:	d405      	bmi.n	801a622 <_puts_r+0x4e>
 801a616:	89a3      	ldrh	r3, [r4, #12]
 801a618:	059b      	lsls	r3, r3, #22
 801a61a:	d402      	bmi.n	801a622 <_puts_r+0x4e>
 801a61c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a61e:	f000 fa67 	bl	801aaf0 <__retarget_lock_release_recursive>
 801a622:	4628      	mov	r0, r5
 801a624:	bd70      	pop	{r4, r5, r6, pc}
 801a626:	2b00      	cmp	r3, #0
 801a628:	da04      	bge.n	801a634 <_puts_r+0x60>
 801a62a:	69a2      	ldr	r2, [r4, #24]
 801a62c:	429a      	cmp	r2, r3
 801a62e:	dc17      	bgt.n	801a660 <_puts_r+0x8c>
 801a630:	290a      	cmp	r1, #10
 801a632:	d015      	beq.n	801a660 <_puts_r+0x8c>
 801a634:	6823      	ldr	r3, [r4, #0]
 801a636:	1c5a      	adds	r2, r3, #1
 801a638:	6022      	str	r2, [r4, #0]
 801a63a:	7019      	strb	r1, [r3, #0]
 801a63c:	68a3      	ldr	r3, [r4, #8]
 801a63e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801a642:	3b01      	subs	r3, #1
 801a644:	60a3      	str	r3, [r4, #8]
 801a646:	2900      	cmp	r1, #0
 801a648:	d1ed      	bne.n	801a626 <_puts_r+0x52>
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	da11      	bge.n	801a672 <_puts_r+0x9e>
 801a64e:	4622      	mov	r2, r4
 801a650:	210a      	movs	r1, #10
 801a652:	4628      	mov	r0, r5
 801a654:	f000 f8af 	bl	801a7b6 <__swbuf_r>
 801a658:	3001      	adds	r0, #1
 801a65a:	d0d7      	beq.n	801a60c <_puts_r+0x38>
 801a65c:	250a      	movs	r5, #10
 801a65e:	e7d7      	b.n	801a610 <_puts_r+0x3c>
 801a660:	4622      	mov	r2, r4
 801a662:	4628      	mov	r0, r5
 801a664:	f000 f8a7 	bl	801a7b6 <__swbuf_r>
 801a668:	3001      	adds	r0, #1
 801a66a:	d1e7      	bne.n	801a63c <_puts_r+0x68>
 801a66c:	e7ce      	b.n	801a60c <_puts_r+0x38>
 801a66e:	3e01      	subs	r6, #1
 801a670:	e7e4      	b.n	801a63c <_puts_r+0x68>
 801a672:	6823      	ldr	r3, [r4, #0]
 801a674:	1c5a      	adds	r2, r3, #1
 801a676:	6022      	str	r2, [r4, #0]
 801a678:	220a      	movs	r2, #10
 801a67a:	701a      	strb	r2, [r3, #0]
 801a67c:	e7ee      	b.n	801a65c <_puts_r+0x88>
	...

0801a680 <puts>:
 801a680:	4b02      	ldr	r3, [pc, #8]	@ (801a68c <puts+0xc>)
 801a682:	4601      	mov	r1, r0
 801a684:	6818      	ldr	r0, [r3, #0]
 801a686:	f7ff bfa5 	b.w	801a5d4 <_puts_r>
 801a68a:	bf00      	nop
 801a68c:	20000160 	.word	0x20000160

0801a690 <siprintf>:
 801a690:	b40e      	push	{r1, r2, r3}
 801a692:	b510      	push	{r4, lr}
 801a694:	b09d      	sub	sp, #116	@ 0x74
 801a696:	ab1f      	add	r3, sp, #124	@ 0x7c
 801a698:	9002      	str	r0, [sp, #8]
 801a69a:	9006      	str	r0, [sp, #24]
 801a69c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a6a0:	480a      	ldr	r0, [pc, #40]	@ (801a6cc <siprintf+0x3c>)
 801a6a2:	9107      	str	r1, [sp, #28]
 801a6a4:	9104      	str	r1, [sp, #16]
 801a6a6:	490a      	ldr	r1, [pc, #40]	@ (801a6d0 <siprintf+0x40>)
 801a6a8:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6ac:	9105      	str	r1, [sp, #20]
 801a6ae:	2400      	movs	r4, #0
 801a6b0:	a902      	add	r1, sp, #8
 801a6b2:	6800      	ldr	r0, [r0, #0]
 801a6b4:	9301      	str	r3, [sp, #4]
 801a6b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 801a6b8:	f002 fd5c 	bl	801d174 <_svfiprintf_r>
 801a6bc:	9b02      	ldr	r3, [sp, #8]
 801a6be:	701c      	strb	r4, [r3, #0]
 801a6c0:	b01d      	add	sp, #116	@ 0x74
 801a6c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6c6:	b003      	add	sp, #12
 801a6c8:	4770      	bx	lr
 801a6ca:	bf00      	nop
 801a6cc:	20000160 	.word	0x20000160
 801a6d0:	ffff0208 	.word	0xffff0208

0801a6d4 <siscanf>:
 801a6d4:	b40e      	push	{r1, r2, r3}
 801a6d6:	b570      	push	{r4, r5, r6, lr}
 801a6d8:	b09d      	sub	sp, #116	@ 0x74
 801a6da:	ac21      	add	r4, sp, #132	@ 0x84
 801a6dc:	2500      	movs	r5, #0
 801a6de:	f44f 7201 	mov.w	r2, #516	@ 0x204
 801a6e2:	f854 6b04 	ldr.w	r6, [r4], #4
 801a6e6:	f8ad 2014 	strh.w	r2, [sp, #20]
 801a6ea:	951b      	str	r5, [sp, #108]	@ 0x6c
 801a6ec:	9002      	str	r0, [sp, #8]
 801a6ee:	9006      	str	r0, [sp, #24]
 801a6f0:	f7e5 fdbe 	bl	8000270 <strlen>
 801a6f4:	4b0b      	ldr	r3, [pc, #44]	@ (801a724 <siscanf+0x50>)
 801a6f6:	9003      	str	r0, [sp, #12]
 801a6f8:	9007      	str	r0, [sp, #28]
 801a6fa:	480b      	ldr	r0, [pc, #44]	@ (801a728 <siscanf+0x54>)
 801a6fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a6fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a702:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a706:	4632      	mov	r2, r6
 801a708:	4623      	mov	r3, r4
 801a70a:	a902      	add	r1, sp, #8
 801a70c:	6800      	ldr	r0, [r0, #0]
 801a70e:	950f      	str	r5, [sp, #60]	@ 0x3c
 801a710:	9514      	str	r5, [sp, #80]	@ 0x50
 801a712:	9401      	str	r4, [sp, #4]
 801a714:	f002 fe84 	bl	801d420 <__ssvfiscanf_r>
 801a718:	b01d      	add	sp, #116	@ 0x74
 801a71a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a71e:	b003      	add	sp, #12
 801a720:	4770      	bx	lr
 801a722:	bf00      	nop
 801a724:	0801a74f 	.word	0x0801a74f
 801a728:	20000160 	.word	0x20000160

0801a72c <__sread>:
 801a72c:	b510      	push	{r4, lr}
 801a72e:	460c      	mov	r4, r1
 801a730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a734:	f000 f98c 	bl	801aa50 <_read_r>
 801a738:	2800      	cmp	r0, #0
 801a73a:	bfab      	itete	ge
 801a73c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801a73e:	89a3      	ldrhlt	r3, [r4, #12]
 801a740:	181b      	addge	r3, r3, r0
 801a742:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801a746:	bfac      	ite	ge
 801a748:	6563      	strge	r3, [r4, #84]	@ 0x54
 801a74a:	81a3      	strhlt	r3, [r4, #12]
 801a74c:	bd10      	pop	{r4, pc}

0801a74e <__seofread>:
 801a74e:	2000      	movs	r0, #0
 801a750:	4770      	bx	lr

0801a752 <__swrite>:
 801a752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a756:	461f      	mov	r7, r3
 801a758:	898b      	ldrh	r3, [r1, #12]
 801a75a:	05db      	lsls	r3, r3, #23
 801a75c:	4605      	mov	r5, r0
 801a75e:	460c      	mov	r4, r1
 801a760:	4616      	mov	r6, r2
 801a762:	d505      	bpl.n	801a770 <__swrite+0x1e>
 801a764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a768:	2302      	movs	r3, #2
 801a76a:	2200      	movs	r2, #0
 801a76c:	f000 f95e 	bl	801aa2c <_lseek_r>
 801a770:	89a3      	ldrh	r3, [r4, #12]
 801a772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a77a:	81a3      	strh	r3, [r4, #12]
 801a77c:	4632      	mov	r2, r6
 801a77e:	463b      	mov	r3, r7
 801a780:	4628      	mov	r0, r5
 801a782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a786:	f000 b975 	b.w	801aa74 <_write_r>

0801a78a <__sseek>:
 801a78a:	b510      	push	{r4, lr}
 801a78c:	460c      	mov	r4, r1
 801a78e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a792:	f000 f94b 	bl	801aa2c <_lseek_r>
 801a796:	1c43      	adds	r3, r0, #1
 801a798:	89a3      	ldrh	r3, [r4, #12]
 801a79a:	bf15      	itete	ne
 801a79c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801a79e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801a7a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801a7a6:	81a3      	strheq	r3, [r4, #12]
 801a7a8:	bf18      	it	ne
 801a7aa:	81a3      	strhne	r3, [r4, #12]
 801a7ac:	bd10      	pop	{r4, pc}

0801a7ae <__sclose>:
 801a7ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a7b2:	f000 b8cd 	b.w	801a950 <_close_r>

0801a7b6 <__swbuf_r>:
 801a7b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a7b8:	460e      	mov	r6, r1
 801a7ba:	4614      	mov	r4, r2
 801a7bc:	4605      	mov	r5, r0
 801a7be:	b118      	cbz	r0, 801a7c8 <__swbuf_r+0x12>
 801a7c0:	6a03      	ldr	r3, [r0, #32]
 801a7c2:	b90b      	cbnz	r3, 801a7c8 <__swbuf_r+0x12>
 801a7c4:	f7ff feb6 	bl	801a534 <__sinit>
 801a7c8:	69a3      	ldr	r3, [r4, #24]
 801a7ca:	60a3      	str	r3, [r4, #8]
 801a7cc:	89a3      	ldrh	r3, [r4, #12]
 801a7ce:	071a      	lsls	r2, r3, #28
 801a7d0:	d501      	bpl.n	801a7d6 <__swbuf_r+0x20>
 801a7d2:	6923      	ldr	r3, [r4, #16]
 801a7d4:	b943      	cbnz	r3, 801a7e8 <__swbuf_r+0x32>
 801a7d6:	4621      	mov	r1, r4
 801a7d8:	4628      	mov	r0, r5
 801a7da:	f000 f82b 	bl	801a834 <__swsetup_r>
 801a7de:	b118      	cbz	r0, 801a7e8 <__swbuf_r+0x32>
 801a7e0:	f04f 37ff 	mov.w	r7, #4294967295
 801a7e4:	4638      	mov	r0, r7
 801a7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a7e8:	6823      	ldr	r3, [r4, #0]
 801a7ea:	6922      	ldr	r2, [r4, #16]
 801a7ec:	1a98      	subs	r0, r3, r2
 801a7ee:	6963      	ldr	r3, [r4, #20]
 801a7f0:	b2f6      	uxtb	r6, r6
 801a7f2:	4283      	cmp	r3, r0
 801a7f4:	4637      	mov	r7, r6
 801a7f6:	dc05      	bgt.n	801a804 <__swbuf_r+0x4e>
 801a7f8:	4621      	mov	r1, r4
 801a7fa:	4628      	mov	r0, r5
 801a7fc:	f003 f958 	bl	801dab0 <_fflush_r>
 801a800:	2800      	cmp	r0, #0
 801a802:	d1ed      	bne.n	801a7e0 <__swbuf_r+0x2a>
 801a804:	68a3      	ldr	r3, [r4, #8]
 801a806:	3b01      	subs	r3, #1
 801a808:	60a3      	str	r3, [r4, #8]
 801a80a:	6823      	ldr	r3, [r4, #0]
 801a80c:	1c5a      	adds	r2, r3, #1
 801a80e:	6022      	str	r2, [r4, #0]
 801a810:	701e      	strb	r6, [r3, #0]
 801a812:	6962      	ldr	r2, [r4, #20]
 801a814:	1c43      	adds	r3, r0, #1
 801a816:	429a      	cmp	r2, r3
 801a818:	d004      	beq.n	801a824 <__swbuf_r+0x6e>
 801a81a:	89a3      	ldrh	r3, [r4, #12]
 801a81c:	07db      	lsls	r3, r3, #31
 801a81e:	d5e1      	bpl.n	801a7e4 <__swbuf_r+0x2e>
 801a820:	2e0a      	cmp	r6, #10
 801a822:	d1df      	bne.n	801a7e4 <__swbuf_r+0x2e>
 801a824:	4621      	mov	r1, r4
 801a826:	4628      	mov	r0, r5
 801a828:	f003 f942 	bl	801dab0 <_fflush_r>
 801a82c:	2800      	cmp	r0, #0
 801a82e:	d0d9      	beq.n	801a7e4 <__swbuf_r+0x2e>
 801a830:	e7d6      	b.n	801a7e0 <__swbuf_r+0x2a>
	...

0801a834 <__swsetup_r>:
 801a834:	b538      	push	{r3, r4, r5, lr}
 801a836:	4b29      	ldr	r3, [pc, #164]	@ (801a8dc <__swsetup_r+0xa8>)
 801a838:	4605      	mov	r5, r0
 801a83a:	6818      	ldr	r0, [r3, #0]
 801a83c:	460c      	mov	r4, r1
 801a83e:	b118      	cbz	r0, 801a848 <__swsetup_r+0x14>
 801a840:	6a03      	ldr	r3, [r0, #32]
 801a842:	b90b      	cbnz	r3, 801a848 <__swsetup_r+0x14>
 801a844:	f7ff fe76 	bl	801a534 <__sinit>
 801a848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a84c:	0719      	lsls	r1, r3, #28
 801a84e:	d422      	bmi.n	801a896 <__swsetup_r+0x62>
 801a850:	06da      	lsls	r2, r3, #27
 801a852:	d407      	bmi.n	801a864 <__swsetup_r+0x30>
 801a854:	2209      	movs	r2, #9
 801a856:	602a      	str	r2, [r5, #0]
 801a858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a85c:	81a3      	strh	r3, [r4, #12]
 801a85e:	f04f 30ff 	mov.w	r0, #4294967295
 801a862:	e033      	b.n	801a8cc <__swsetup_r+0x98>
 801a864:	0758      	lsls	r0, r3, #29
 801a866:	d512      	bpl.n	801a88e <__swsetup_r+0x5a>
 801a868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a86a:	b141      	cbz	r1, 801a87e <__swsetup_r+0x4a>
 801a86c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a870:	4299      	cmp	r1, r3
 801a872:	d002      	beq.n	801a87a <__swsetup_r+0x46>
 801a874:	4628      	mov	r0, r5
 801a876:	f000 ffc3 	bl	801b800 <_free_r>
 801a87a:	2300      	movs	r3, #0
 801a87c:	6363      	str	r3, [r4, #52]	@ 0x34
 801a87e:	89a3      	ldrh	r3, [r4, #12]
 801a880:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801a884:	81a3      	strh	r3, [r4, #12]
 801a886:	2300      	movs	r3, #0
 801a888:	6063      	str	r3, [r4, #4]
 801a88a:	6923      	ldr	r3, [r4, #16]
 801a88c:	6023      	str	r3, [r4, #0]
 801a88e:	89a3      	ldrh	r3, [r4, #12]
 801a890:	f043 0308 	orr.w	r3, r3, #8
 801a894:	81a3      	strh	r3, [r4, #12]
 801a896:	6923      	ldr	r3, [r4, #16]
 801a898:	b94b      	cbnz	r3, 801a8ae <__swsetup_r+0x7a>
 801a89a:	89a3      	ldrh	r3, [r4, #12]
 801a89c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801a8a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a8a4:	d003      	beq.n	801a8ae <__swsetup_r+0x7a>
 801a8a6:	4621      	mov	r1, r4
 801a8a8:	4628      	mov	r0, r5
 801a8aa:	f003 f961 	bl	801db70 <__smakebuf_r>
 801a8ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a8b2:	f013 0201 	ands.w	r2, r3, #1
 801a8b6:	d00a      	beq.n	801a8ce <__swsetup_r+0x9a>
 801a8b8:	2200      	movs	r2, #0
 801a8ba:	60a2      	str	r2, [r4, #8]
 801a8bc:	6962      	ldr	r2, [r4, #20]
 801a8be:	4252      	negs	r2, r2
 801a8c0:	61a2      	str	r2, [r4, #24]
 801a8c2:	6922      	ldr	r2, [r4, #16]
 801a8c4:	b942      	cbnz	r2, 801a8d8 <__swsetup_r+0xa4>
 801a8c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801a8ca:	d1c5      	bne.n	801a858 <__swsetup_r+0x24>
 801a8cc:	bd38      	pop	{r3, r4, r5, pc}
 801a8ce:	0799      	lsls	r1, r3, #30
 801a8d0:	bf58      	it	pl
 801a8d2:	6962      	ldrpl	r2, [r4, #20]
 801a8d4:	60a2      	str	r2, [r4, #8]
 801a8d6:	e7f4      	b.n	801a8c2 <__swsetup_r+0x8e>
 801a8d8:	2000      	movs	r0, #0
 801a8da:	e7f7      	b.n	801a8cc <__swsetup_r+0x98>
 801a8dc:	20000160 	.word	0x20000160

0801a8e0 <memmove>:
 801a8e0:	4288      	cmp	r0, r1
 801a8e2:	b510      	push	{r4, lr}
 801a8e4:	eb01 0402 	add.w	r4, r1, r2
 801a8e8:	d902      	bls.n	801a8f0 <memmove+0x10>
 801a8ea:	4284      	cmp	r4, r0
 801a8ec:	4623      	mov	r3, r4
 801a8ee:	d807      	bhi.n	801a900 <memmove+0x20>
 801a8f0:	1e43      	subs	r3, r0, #1
 801a8f2:	42a1      	cmp	r1, r4
 801a8f4:	d008      	beq.n	801a908 <memmove+0x28>
 801a8f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a8fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a8fe:	e7f8      	b.n	801a8f2 <memmove+0x12>
 801a900:	4402      	add	r2, r0
 801a902:	4601      	mov	r1, r0
 801a904:	428a      	cmp	r2, r1
 801a906:	d100      	bne.n	801a90a <memmove+0x2a>
 801a908:	bd10      	pop	{r4, pc}
 801a90a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a90e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a912:	e7f7      	b.n	801a904 <memmove+0x24>

0801a914 <memset>:
 801a914:	4402      	add	r2, r0
 801a916:	4603      	mov	r3, r0
 801a918:	4293      	cmp	r3, r2
 801a91a:	d100      	bne.n	801a91e <memset+0xa>
 801a91c:	4770      	bx	lr
 801a91e:	f803 1b01 	strb.w	r1, [r3], #1
 801a922:	e7f9      	b.n	801a918 <memset+0x4>

0801a924 <strncmp>:
 801a924:	b510      	push	{r4, lr}
 801a926:	b16a      	cbz	r2, 801a944 <strncmp+0x20>
 801a928:	3901      	subs	r1, #1
 801a92a:	1884      	adds	r4, r0, r2
 801a92c:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a930:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801a934:	429a      	cmp	r2, r3
 801a936:	d103      	bne.n	801a940 <strncmp+0x1c>
 801a938:	42a0      	cmp	r0, r4
 801a93a:	d001      	beq.n	801a940 <strncmp+0x1c>
 801a93c:	2a00      	cmp	r2, #0
 801a93e:	d1f5      	bne.n	801a92c <strncmp+0x8>
 801a940:	1ad0      	subs	r0, r2, r3
 801a942:	bd10      	pop	{r4, pc}
 801a944:	4610      	mov	r0, r2
 801a946:	e7fc      	b.n	801a942 <strncmp+0x1e>

0801a948 <_localeconv_r>:
 801a948:	4800      	ldr	r0, [pc, #0]	@ (801a94c <_localeconv_r+0x4>)
 801a94a:	4770      	bx	lr
 801a94c:	200002a0 	.word	0x200002a0

0801a950 <_close_r>:
 801a950:	b538      	push	{r3, r4, r5, lr}
 801a952:	4d06      	ldr	r5, [pc, #24]	@ (801a96c <_close_r+0x1c>)
 801a954:	2300      	movs	r3, #0
 801a956:	4604      	mov	r4, r0
 801a958:	4608      	mov	r0, r1
 801a95a:	602b      	str	r3, [r5, #0]
 801a95c:	f7ef f888 	bl	8009a70 <_close>
 801a960:	1c43      	adds	r3, r0, #1
 801a962:	d102      	bne.n	801a96a <_close_r+0x1a>
 801a964:	682b      	ldr	r3, [r5, #0]
 801a966:	b103      	cbz	r3, 801a96a <_close_r+0x1a>
 801a968:	6023      	str	r3, [r4, #0]
 801a96a:	bd38      	pop	{r3, r4, r5, pc}
 801a96c:	2000bcc4 	.word	0x2000bcc4

0801a970 <_reclaim_reent>:
 801a970:	4b2d      	ldr	r3, [pc, #180]	@ (801aa28 <_reclaim_reent+0xb8>)
 801a972:	681b      	ldr	r3, [r3, #0]
 801a974:	4283      	cmp	r3, r0
 801a976:	b570      	push	{r4, r5, r6, lr}
 801a978:	4604      	mov	r4, r0
 801a97a:	d053      	beq.n	801aa24 <_reclaim_reent+0xb4>
 801a97c:	69c3      	ldr	r3, [r0, #28]
 801a97e:	b31b      	cbz	r3, 801a9c8 <_reclaim_reent+0x58>
 801a980:	68db      	ldr	r3, [r3, #12]
 801a982:	b163      	cbz	r3, 801a99e <_reclaim_reent+0x2e>
 801a984:	2500      	movs	r5, #0
 801a986:	69e3      	ldr	r3, [r4, #28]
 801a988:	68db      	ldr	r3, [r3, #12]
 801a98a:	5959      	ldr	r1, [r3, r5]
 801a98c:	b9b1      	cbnz	r1, 801a9bc <_reclaim_reent+0x4c>
 801a98e:	3504      	adds	r5, #4
 801a990:	2d80      	cmp	r5, #128	@ 0x80
 801a992:	d1f8      	bne.n	801a986 <_reclaim_reent+0x16>
 801a994:	69e3      	ldr	r3, [r4, #28]
 801a996:	4620      	mov	r0, r4
 801a998:	68d9      	ldr	r1, [r3, #12]
 801a99a:	f000 ff31 	bl	801b800 <_free_r>
 801a99e:	69e3      	ldr	r3, [r4, #28]
 801a9a0:	6819      	ldr	r1, [r3, #0]
 801a9a2:	b111      	cbz	r1, 801a9aa <_reclaim_reent+0x3a>
 801a9a4:	4620      	mov	r0, r4
 801a9a6:	f000 ff2b 	bl	801b800 <_free_r>
 801a9aa:	69e3      	ldr	r3, [r4, #28]
 801a9ac:	689d      	ldr	r5, [r3, #8]
 801a9ae:	b15d      	cbz	r5, 801a9c8 <_reclaim_reent+0x58>
 801a9b0:	4629      	mov	r1, r5
 801a9b2:	4620      	mov	r0, r4
 801a9b4:	682d      	ldr	r5, [r5, #0]
 801a9b6:	f000 ff23 	bl	801b800 <_free_r>
 801a9ba:	e7f8      	b.n	801a9ae <_reclaim_reent+0x3e>
 801a9bc:	680e      	ldr	r6, [r1, #0]
 801a9be:	4620      	mov	r0, r4
 801a9c0:	f000 ff1e 	bl	801b800 <_free_r>
 801a9c4:	4631      	mov	r1, r6
 801a9c6:	e7e1      	b.n	801a98c <_reclaim_reent+0x1c>
 801a9c8:	6961      	ldr	r1, [r4, #20]
 801a9ca:	b111      	cbz	r1, 801a9d2 <_reclaim_reent+0x62>
 801a9cc:	4620      	mov	r0, r4
 801a9ce:	f000 ff17 	bl	801b800 <_free_r>
 801a9d2:	69e1      	ldr	r1, [r4, #28]
 801a9d4:	b111      	cbz	r1, 801a9dc <_reclaim_reent+0x6c>
 801a9d6:	4620      	mov	r0, r4
 801a9d8:	f000 ff12 	bl	801b800 <_free_r>
 801a9dc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801a9de:	b111      	cbz	r1, 801a9e6 <_reclaim_reent+0x76>
 801a9e0:	4620      	mov	r0, r4
 801a9e2:	f000 ff0d 	bl	801b800 <_free_r>
 801a9e6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a9e8:	b111      	cbz	r1, 801a9f0 <_reclaim_reent+0x80>
 801a9ea:	4620      	mov	r0, r4
 801a9ec:	f000 ff08 	bl	801b800 <_free_r>
 801a9f0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801a9f2:	b111      	cbz	r1, 801a9fa <_reclaim_reent+0x8a>
 801a9f4:	4620      	mov	r0, r4
 801a9f6:	f000 ff03 	bl	801b800 <_free_r>
 801a9fa:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801a9fc:	b111      	cbz	r1, 801aa04 <_reclaim_reent+0x94>
 801a9fe:	4620      	mov	r0, r4
 801aa00:	f000 fefe 	bl	801b800 <_free_r>
 801aa04:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801aa06:	b111      	cbz	r1, 801aa0e <_reclaim_reent+0x9e>
 801aa08:	4620      	mov	r0, r4
 801aa0a:	f000 fef9 	bl	801b800 <_free_r>
 801aa0e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801aa10:	b111      	cbz	r1, 801aa18 <_reclaim_reent+0xa8>
 801aa12:	4620      	mov	r0, r4
 801aa14:	f000 fef4 	bl	801b800 <_free_r>
 801aa18:	6a23      	ldr	r3, [r4, #32]
 801aa1a:	b11b      	cbz	r3, 801aa24 <_reclaim_reent+0xb4>
 801aa1c:	4620      	mov	r0, r4
 801aa1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801aa22:	4718      	bx	r3
 801aa24:	bd70      	pop	{r4, r5, r6, pc}
 801aa26:	bf00      	nop
 801aa28:	20000160 	.word	0x20000160

0801aa2c <_lseek_r>:
 801aa2c:	b538      	push	{r3, r4, r5, lr}
 801aa2e:	4d07      	ldr	r5, [pc, #28]	@ (801aa4c <_lseek_r+0x20>)
 801aa30:	4604      	mov	r4, r0
 801aa32:	4608      	mov	r0, r1
 801aa34:	4611      	mov	r1, r2
 801aa36:	2200      	movs	r2, #0
 801aa38:	602a      	str	r2, [r5, #0]
 801aa3a:	461a      	mov	r2, r3
 801aa3c:	f7ef f83f 	bl	8009abe <_lseek>
 801aa40:	1c43      	adds	r3, r0, #1
 801aa42:	d102      	bne.n	801aa4a <_lseek_r+0x1e>
 801aa44:	682b      	ldr	r3, [r5, #0]
 801aa46:	b103      	cbz	r3, 801aa4a <_lseek_r+0x1e>
 801aa48:	6023      	str	r3, [r4, #0]
 801aa4a:	bd38      	pop	{r3, r4, r5, pc}
 801aa4c:	2000bcc4 	.word	0x2000bcc4

0801aa50 <_read_r>:
 801aa50:	b538      	push	{r3, r4, r5, lr}
 801aa52:	4d07      	ldr	r5, [pc, #28]	@ (801aa70 <_read_r+0x20>)
 801aa54:	4604      	mov	r4, r0
 801aa56:	4608      	mov	r0, r1
 801aa58:	4611      	mov	r1, r2
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	602a      	str	r2, [r5, #0]
 801aa5e:	461a      	mov	r2, r3
 801aa60:	f7ee ffe9 	bl	8009a36 <_read>
 801aa64:	1c43      	adds	r3, r0, #1
 801aa66:	d102      	bne.n	801aa6e <_read_r+0x1e>
 801aa68:	682b      	ldr	r3, [r5, #0]
 801aa6a:	b103      	cbz	r3, 801aa6e <_read_r+0x1e>
 801aa6c:	6023      	str	r3, [r4, #0]
 801aa6e:	bd38      	pop	{r3, r4, r5, pc}
 801aa70:	2000bcc4 	.word	0x2000bcc4

0801aa74 <_write_r>:
 801aa74:	b538      	push	{r3, r4, r5, lr}
 801aa76:	4d07      	ldr	r5, [pc, #28]	@ (801aa94 <_write_r+0x20>)
 801aa78:	4604      	mov	r4, r0
 801aa7a:	4608      	mov	r0, r1
 801aa7c:	4611      	mov	r1, r2
 801aa7e:	2200      	movs	r2, #0
 801aa80:	602a      	str	r2, [r5, #0]
 801aa82:	461a      	mov	r2, r3
 801aa84:	f7ed fd80 	bl	8008588 <_write>
 801aa88:	1c43      	adds	r3, r0, #1
 801aa8a:	d102      	bne.n	801aa92 <_write_r+0x1e>
 801aa8c:	682b      	ldr	r3, [r5, #0]
 801aa8e:	b103      	cbz	r3, 801aa92 <_write_r+0x1e>
 801aa90:	6023      	str	r3, [r4, #0]
 801aa92:	bd38      	pop	{r3, r4, r5, pc}
 801aa94:	2000bcc4 	.word	0x2000bcc4

0801aa98 <__errno>:
 801aa98:	4b01      	ldr	r3, [pc, #4]	@ (801aaa0 <__errno+0x8>)
 801aa9a:	6818      	ldr	r0, [r3, #0]
 801aa9c:	4770      	bx	lr
 801aa9e:	bf00      	nop
 801aaa0:	20000160 	.word	0x20000160

0801aaa4 <__libc_init_array>:
 801aaa4:	b570      	push	{r4, r5, r6, lr}
 801aaa6:	4d0d      	ldr	r5, [pc, #52]	@ (801aadc <__libc_init_array+0x38>)
 801aaa8:	4c0d      	ldr	r4, [pc, #52]	@ (801aae0 <__libc_init_array+0x3c>)
 801aaaa:	1b64      	subs	r4, r4, r5
 801aaac:	10a4      	asrs	r4, r4, #2
 801aaae:	2600      	movs	r6, #0
 801aab0:	42a6      	cmp	r6, r4
 801aab2:	d109      	bne.n	801aac8 <__libc_init_array+0x24>
 801aab4:	4d0b      	ldr	r5, [pc, #44]	@ (801aae4 <__libc_init_array+0x40>)
 801aab6:	4c0c      	ldr	r4, [pc, #48]	@ (801aae8 <__libc_init_array+0x44>)
 801aab8:	f003 fdaa 	bl	801e610 <_init>
 801aabc:	1b64      	subs	r4, r4, r5
 801aabe:	10a4      	asrs	r4, r4, #2
 801aac0:	2600      	movs	r6, #0
 801aac2:	42a6      	cmp	r6, r4
 801aac4:	d105      	bne.n	801aad2 <__libc_init_array+0x2e>
 801aac6:	bd70      	pop	{r4, r5, r6, pc}
 801aac8:	f855 3b04 	ldr.w	r3, [r5], #4
 801aacc:	4798      	blx	r3
 801aace:	3601      	adds	r6, #1
 801aad0:	e7ee      	b.n	801aab0 <__libc_init_array+0xc>
 801aad2:	f855 3b04 	ldr.w	r3, [r5], #4
 801aad6:	4798      	blx	r3
 801aad8:	3601      	adds	r6, #1
 801aada:	e7f2      	b.n	801aac2 <__libc_init_array+0x1e>
 801aadc:	08020f5c 	.word	0x08020f5c
 801aae0:	08020f5c 	.word	0x08020f5c
 801aae4:	08020f5c 	.word	0x08020f5c
 801aae8:	08020f60 	.word	0x08020f60

0801aaec <__retarget_lock_init_recursive>:
 801aaec:	4770      	bx	lr

0801aaee <__retarget_lock_acquire_recursive>:
 801aaee:	4770      	bx	lr

0801aaf0 <__retarget_lock_release_recursive>:
 801aaf0:	4770      	bx	lr

0801aaf2 <memcpy>:
 801aaf2:	440a      	add	r2, r1
 801aaf4:	4291      	cmp	r1, r2
 801aaf6:	f100 33ff 	add.w	r3, r0, #4294967295
 801aafa:	d100      	bne.n	801aafe <memcpy+0xc>
 801aafc:	4770      	bx	lr
 801aafe:	b510      	push	{r4, lr}
 801ab00:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ab04:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ab08:	4291      	cmp	r1, r2
 801ab0a:	d1f9      	bne.n	801ab00 <memcpy+0xe>
 801ab0c:	bd10      	pop	{r4, pc}
	...

0801ab10 <__assert_func>:
 801ab10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ab12:	4614      	mov	r4, r2
 801ab14:	461a      	mov	r2, r3
 801ab16:	4b09      	ldr	r3, [pc, #36]	@ (801ab3c <__assert_func+0x2c>)
 801ab18:	681b      	ldr	r3, [r3, #0]
 801ab1a:	4605      	mov	r5, r0
 801ab1c:	68d8      	ldr	r0, [r3, #12]
 801ab1e:	b14c      	cbz	r4, 801ab34 <__assert_func+0x24>
 801ab20:	4b07      	ldr	r3, [pc, #28]	@ (801ab40 <__assert_func+0x30>)
 801ab22:	9100      	str	r1, [sp, #0]
 801ab24:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ab28:	4906      	ldr	r1, [pc, #24]	@ (801ab44 <__assert_func+0x34>)
 801ab2a:	462b      	mov	r3, r5
 801ab2c:	f002 ffe8 	bl	801db00 <fiprintf>
 801ab30:	f003 f93e 	bl	801ddb0 <abort>
 801ab34:	4b04      	ldr	r3, [pc, #16]	@ (801ab48 <__assert_func+0x38>)
 801ab36:	461c      	mov	r4, r3
 801ab38:	e7f3      	b.n	801ab22 <__assert_func+0x12>
 801ab3a:	bf00      	nop
 801ab3c:	20000160 	.word	0x20000160
 801ab40:	0802073c 	.word	0x0802073c
 801ab44:	08020749 	.word	0x08020749
 801ab48:	08020777 	.word	0x08020777

0801ab4c <quorem>:
 801ab4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab50:	6903      	ldr	r3, [r0, #16]
 801ab52:	690c      	ldr	r4, [r1, #16]
 801ab54:	42a3      	cmp	r3, r4
 801ab56:	4607      	mov	r7, r0
 801ab58:	db7e      	blt.n	801ac58 <quorem+0x10c>
 801ab5a:	3c01      	subs	r4, #1
 801ab5c:	f101 0814 	add.w	r8, r1, #20
 801ab60:	00a3      	lsls	r3, r4, #2
 801ab62:	f100 0514 	add.w	r5, r0, #20
 801ab66:	9300      	str	r3, [sp, #0]
 801ab68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ab6c:	9301      	str	r3, [sp, #4]
 801ab6e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ab72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ab76:	3301      	adds	r3, #1
 801ab78:	429a      	cmp	r2, r3
 801ab7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ab7e:	fbb2 f6f3 	udiv	r6, r2, r3
 801ab82:	d32e      	bcc.n	801abe2 <quorem+0x96>
 801ab84:	f04f 0a00 	mov.w	sl, #0
 801ab88:	46c4      	mov	ip, r8
 801ab8a:	46ae      	mov	lr, r5
 801ab8c:	46d3      	mov	fp, sl
 801ab8e:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ab92:	b298      	uxth	r0, r3
 801ab94:	fb06 a000 	mla	r0, r6, r0, sl
 801ab98:	0c02      	lsrs	r2, r0, #16
 801ab9a:	0c1b      	lsrs	r3, r3, #16
 801ab9c:	fb06 2303 	mla	r3, r6, r3, r2
 801aba0:	f8de 2000 	ldr.w	r2, [lr]
 801aba4:	b280      	uxth	r0, r0
 801aba6:	b292      	uxth	r2, r2
 801aba8:	1a12      	subs	r2, r2, r0
 801abaa:	445a      	add	r2, fp
 801abac:	f8de 0000 	ldr.w	r0, [lr]
 801abb0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801abb4:	b29b      	uxth	r3, r3
 801abb6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801abba:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801abbe:	b292      	uxth	r2, r2
 801abc0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801abc4:	45e1      	cmp	r9, ip
 801abc6:	f84e 2b04 	str.w	r2, [lr], #4
 801abca:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801abce:	d2de      	bcs.n	801ab8e <quorem+0x42>
 801abd0:	9b00      	ldr	r3, [sp, #0]
 801abd2:	58eb      	ldr	r3, [r5, r3]
 801abd4:	b92b      	cbnz	r3, 801abe2 <quorem+0x96>
 801abd6:	9b01      	ldr	r3, [sp, #4]
 801abd8:	3b04      	subs	r3, #4
 801abda:	429d      	cmp	r5, r3
 801abdc:	461a      	mov	r2, r3
 801abde:	d32f      	bcc.n	801ac40 <quorem+0xf4>
 801abe0:	613c      	str	r4, [r7, #16]
 801abe2:	4638      	mov	r0, r7
 801abe4:	f001 f9c8 	bl	801bf78 <__mcmp>
 801abe8:	2800      	cmp	r0, #0
 801abea:	db25      	blt.n	801ac38 <quorem+0xec>
 801abec:	4629      	mov	r1, r5
 801abee:	2000      	movs	r0, #0
 801abf0:	f858 2b04 	ldr.w	r2, [r8], #4
 801abf4:	f8d1 c000 	ldr.w	ip, [r1]
 801abf8:	fa1f fe82 	uxth.w	lr, r2
 801abfc:	fa1f f38c 	uxth.w	r3, ip
 801ac00:	eba3 030e 	sub.w	r3, r3, lr
 801ac04:	4403      	add	r3, r0
 801ac06:	0c12      	lsrs	r2, r2, #16
 801ac08:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801ac0c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801ac10:	b29b      	uxth	r3, r3
 801ac12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ac16:	45c1      	cmp	r9, r8
 801ac18:	f841 3b04 	str.w	r3, [r1], #4
 801ac1c:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ac20:	d2e6      	bcs.n	801abf0 <quorem+0xa4>
 801ac22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ac26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ac2a:	b922      	cbnz	r2, 801ac36 <quorem+0xea>
 801ac2c:	3b04      	subs	r3, #4
 801ac2e:	429d      	cmp	r5, r3
 801ac30:	461a      	mov	r2, r3
 801ac32:	d30b      	bcc.n	801ac4c <quorem+0x100>
 801ac34:	613c      	str	r4, [r7, #16]
 801ac36:	3601      	adds	r6, #1
 801ac38:	4630      	mov	r0, r6
 801ac3a:	b003      	add	sp, #12
 801ac3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac40:	6812      	ldr	r2, [r2, #0]
 801ac42:	3b04      	subs	r3, #4
 801ac44:	2a00      	cmp	r2, #0
 801ac46:	d1cb      	bne.n	801abe0 <quorem+0x94>
 801ac48:	3c01      	subs	r4, #1
 801ac4a:	e7c6      	b.n	801abda <quorem+0x8e>
 801ac4c:	6812      	ldr	r2, [r2, #0]
 801ac4e:	3b04      	subs	r3, #4
 801ac50:	2a00      	cmp	r2, #0
 801ac52:	d1ef      	bne.n	801ac34 <quorem+0xe8>
 801ac54:	3c01      	subs	r4, #1
 801ac56:	e7ea      	b.n	801ac2e <quorem+0xe2>
 801ac58:	2000      	movs	r0, #0
 801ac5a:	e7ee      	b.n	801ac3a <quorem+0xee>
 801ac5c:	0000      	movs	r0, r0
	...

0801ac60 <_dtoa_r>:
 801ac60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac64:	69c7      	ldr	r7, [r0, #28]
 801ac66:	b097      	sub	sp, #92	@ 0x5c
 801ac68:	ed8d 0b04 	vstr	d0, [sp, #16]
 801ac6c:	ec55 4b10 	vmov	r4, r5, d0
 801ac70:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801ac72:	9107      	str	r1, [sp, #28]
 801ac74:	4681      	mov	r9, r0
 801ac76:	920c      	str	r2, [sp, #48]	@ 0x30
 801ac78:	9311      	str	r3, [sp, #68]	@ 0x44
 801ac7a:	b97f      	cbnz	r7, 801ac9c <_dtoa_r+0x3c>
 801ac7c:	2010      	movs	r0, #16
 801ac7e:	f000 fe09 	bl	801b894 <malloc>
 801ac82:	4602      	mov	r2, r0
 801ac84:	f8c9 001c 	str.w	r0, [r9, #28]
 801ac88:	b920      	cbnz	r0, 801ac94 <_dtoa_r+0x34>
 801ac8a:	4ba9      	ldr	r3, [pc, #676]	@ (801af30 <_dtoa_r+0x2d0>)
 801ac8c:	21ef      	movs	r1, #239	@ 0xef
 801ac8e:	48a9      	ldr	r0, [pc, #676]	@ (801af34 <_dtoa_r+0x2d4>)
 801ac90:	f7ff ff3e 	bl	801ab10 <__assert_func>
 801ac94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801ac98:	6007      	str	r7, [r0, #0]
 801ac9a:	60c7      	str	r7, [r0, #12]
 801ac9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801aca0:	6819      	ldr	r1, [r3, #0]
 801aca2:	b159      	cbz	r1, 801acbc <_dtoa_r+0x5c>
 801aca4:	685a      	ldr	r2, [r3, #4]
 801aca6:	604a      	str	r2, [r1, #4]
 801aca8:	2301      	movs	r3, #1
 801acaa:	4093      	lsls	r3, r2
 801acac:	608b      	str	r3, [r1, #8]
 801acae:	4648      	mov	r0, r9
 801acb0:	f000 fee6 	bl	801ba80 <_Bfree>
 801acb4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801acb8:	2200      	movs	r2, #0
 801acba:	601a      	str	r2, [r3, #0]
 801acbc:	1e2b      	subs	r3, r5, #0
 801acbe:	bfb9      	ittee	lt
 801acc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801acc4:	9305      	strlt	r3, [sp, #20]
 801acc6:	2300      	movge	r3, #0
 801acc8:	6033      	strge	r3, [r6, #0]
 801acca:	9f05      	ldr	r7, [sp, #20]
 801accc:	4b9a      	ldr	r3, [pc, #616]	@ (801af38 <_dtoa_r+0x2d8>)
 801acce:	bfbc      	itt	lt
 801acd0:	2201      	movlt	r2, #1
 801acd2:	6032      	strlt	r2, [r6, #0]
 801acd4:	43bb      	bics	r3, r7
 801acd6:	d112      	bne.n	801acfe <_dtoa_r+0x9e>
 801acd8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801acda:	f242 730f 	movw	r3, #9999	@ 0x270f
 801acde:	6013      	str	r3, [r2, #0]
 801ace0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ace4:	4323      	orrs	r3, r4
 801ace6:	f000 855a 	beq.w	801b79e <_dtoa_r+0xb3e>
 801acea:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801acec:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 801af4c <_dtoa_r+0x2ec>
 801acf0:	2b00      	cmp	r3, #0
 801acf2:	f000 855c 	beq.w	801b7ae <_dtoa_r+0xb4e>
 801acf6:	f10a 0303 	add.w	r3, sl, #3
 801acfa:	f000 bd56 	b.w	801b7aa <_dtoa_r+0xb4a>
 801acfe:	ed9d 7b04 	vldr	d7, [sp, #16]
 801ad02:	2200      	movs	r2, #0
 801ad04:	ec51 0b17 	vmov	r0, r1, d7
 801ad08:	2300      	movs	r3, #0
 801ad0a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 801ad0e:	f7e5 fedb 	bl	8000ac8 <__aeabi_dcmpeq>
 801ad12:	4680      	mov	r8, r0
 801ad14:	b158      	cbz	r0, 801ad2e <_dtoa_r+0xce>
 801ad16:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ad18:	2301      	movs	r3, #1
 801ad1a:	6013      	str	r3, [r2, #0]
 801ad1c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801ad1e:	b113      	cbz	r3, 801ad26 <_dtoa_r+0xc6>
 801ad20:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801ad22:	4b86      	ldr	r3, [pc, #536]	@ (801af3c <_dtoa_r+0x2dc>)
 801ad24:	6013      	str	r3, [r2, #0]
 801ad26:	f8df a228 	ldr.w	sl, [pc, #552]	@ 801af50 <_dtoa_r+0x2f0>
 801ad2a:	f000 bd40 	b.w	801b7ae <_dtoa_r+0xb4e>
 801ad2e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 801ad32:	aa14      	add	r2, sp, #80	@ 0x50
 801ad34:	a915      	add	r1, sp, #84	@ 0x54
 801ad36:	4648      	mov	r0, r9
 801ad38:	f001 fa3e 	bl	801c1b8 <__d2b>
 801ad3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801ad40:	9002      	str	r0, [sp, #8]
 801ad42:	2e00      	cmp	r6, #0
 801ad44:	d078      	beq.n	801ae38 <_dtoa_r+0x1d8>
 801ad46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ad48:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 801ad4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ad50:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801ad54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801ad58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801ad5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801ad60:	4619      	mov	r1, r3
 801ad62:	2200      	movs	r2, #0
 801ad64:	4b76      	ldr	r3, [pc, #472]	@ (801af40 <_dtoa_r+0x2e0>)
 801ad66:	f7e5 fa8f 	bl	8000288 <__aeabi_dsub>
 801ad6a:	a36b      	add	r3, pc, #428	@ (adr r3, 801af18 <_dtoa_r+0x2b8>)
 801ad6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad70:	f7e5 fc42 	bl	80005f8 <__aeabi_dmul>
 801ad74:	a36a      	add	r3, pc, #424	@ (adr r3, 801af20 <_dtoa_r+0x2c0>)
 801ad76:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad7a:	f7e5 fa87 	bl	800028c <__adddf3>
 801ad7e:	4604      	mov	r4, r0
 801ad80:	4630      	mov	r0, r6
 801ad82:	460d      	mov	r5, r1
 801ad84:	f7e5 fbce 	bl	8000524 <__aeabi_i2d>
 801ad88:	a367      	add	r3, pc, #412	@ (adr r3, 801af28 <_dtoa_r+0x2c8>)
 801ad8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ad8e:	f7e5 fc33 	bl	80005f8 <__aeabi_dmul>
 801ad92:	4602      	mov	r2, r0
 801ad94:	460b      	mov	r3, r1
 801ad96:	4620      	mov	r0, r4
 801ad98:	4629      	mov	r1, r5
 801ad9a:	f7e5 fa77 	bl	800028c <__adddf3>
 801ad9e:	4604      	mov	r4, r0
 801ada0:	460d      	mov	r5, r1
 801ada2:	f7e5 fed9 	bl	8000b58 <__aeabi_d2iz>
 801ada6:	2200      	movs	r2, #0
 801ada8:	4607      	mov	r7, r0
 801adaa:	2300      	movs	r3, #0
 801adac:	4620      	mov	r0, r4
 801adae:	4629      	mov	r1, r5
 801adb0:	f7e5 fe94 	bl	8000adc <__aeabi_dcmplt>
 801adb4:	b140      	cbz	r0, 801adc8 <_dtoa_r+0x168>
 801adb6:	4638      	mov	r0, r7
 801adb8:	f7e5 fbb4 	bl	8000524 <__aeabi_i2d>
 801adbc:	4622      	mov	r2, r4
 801adbe:	462b      	mov	r3, r5
 801adc0:	f7e5 fe82 	bl	8000ac8 <__aeabi_dcmpeq>
 801adc4:	b900      	cbnz	r0, 801adc8 <_dtoa_r+0x168>
 801adc6:	3f01      	subs	r7, #1
 801adc8:	2f16      	cmp	r7, #22
 801adca:	d852      	bhi.n	801ae72 <_dtoa_r+0x212>
 801adcc:	4b5d      	ldr	r3, [pc, #372]	@ (801af44 <_dtoa_r+0x2e4>)
 801adce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801add2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801add6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801adda:	f7e5 fe7f 	bl	8000adc <__aeabi_dcmplt>
 801adde:	2800      	cmp	r0, #0
 801ade0:	d049      	beq.n	801ae76 <_dtoa_r+0x216>
 801ade2:	3f01      	subs	r7, #1
 801ade4:	2300      	movs	r3, #0
 801ade6:	9310      	str	r3, [sp, #64]	@ 0x40
 801ade8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801adea:	1b9b      	subs	r3, r3, r6
 801adec:	1e5a      	subs	r2, r3, #1
 801adee:	bf45      	ittet	mi
 801adf0:	f1c3 0301 	rsbmi	r3, r3, #1
 801adf4:	9300      	strmi	r3, [sp, #0]
 801adf6:	2300      	movpl	r3, #0
 801adf8:	2300      	movmi	r3, #0
 801adfa:	9206      	str	r2, [sp, #24]
 801adfc:	bf54      	ite	pl
 801adfe:	9300      	strpl	r3, [sp, #0]
 801ae00:	9306      	strmi	r3, [sp, #24]
 801ae02:	2f00      	cmp	r7, #0
 801ae04:	db39      	blt.n	801ae7a <_dtoa_r+0x21a>
 801ae06:	9b06      	ldr	r3, [sp, #24]
 801ae08:	970d      	str	r7, [sp, #52]	@ 0x34
 801ae0a:	443b      	add	r3, r7
 801ae0c:	9306      	str	r3, [sp, #24]
 801ae0e:	2300      	movs	r3, #0
 801ae10:	9308      	str	r3, [sp, #32]
 801ae12:	9b07      	ldr	r3, [sp, #28]
 801ae14:	2b09      	cmp	r3, #9
 801ae16:	d863      	bhi.n	801aee0 <_dtoa_r+0x280>
 801ae18:	2b05      	cmp	r3, #5
 801ae1a:	bfc4      	itt	gt
 801ae1c:	3b04      	subgt	r3, #4
 801ae1e:	9307      	strgt	r3, [sp, #28]
 801ae20:	9b07      	ldr	r3, [sp, #28]
 801ae22:	f1a3 0302 	sub.w	r3, r3, #2
 801ae26:	bfcc      	ite	gt
 801ae28:	2400      	movgt	r4, #0
 801ae2a:	2401      	movle	r4, #1
 801ae2c:	2b03      	cmp	r3, #3
 801ae2e:	d863      	bhi.n	801aef8 <_dtoa_r+0x298>
 801ae30:	e8df f003 	tbb	[pc, r3]
 801ae34:	2b375452 	.word	0x2b375452
 801ae38:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 801ae3c:	441e      	add	r6, r3
 801ae3e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801ae42:	2b20      	cmp	r3, #32
 801ae44:	bfc1      	itttt	gt
 801ae46:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801ae4a:	409f      	lslgt	r7, r3
 801ae4c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801ae50:	fa24 f303 	lsrgt.w	r3, r4, r3
 801ae54:	bfd6      	itet	le
 801ae56:	f1c3 0320 	rsble	r3, r3, #32
 801ae5a:	ea47 0003 	orrgt.w	r0, r7, r3
 801ae5e:	fa04 f003 	lslle.w	r0, r4, r3
 801ae62:	f7e5 fb4f 	bl	8000504 <__aeabi_ui2d>
 801ae66:	2201      	movs	r2, #1
 801ae68:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801ae6c:	3e01      	subs	r6, #1
 801ae6e:	9212      	str	r2, [sp, #72]	@ 0x48
 801ae70:	e776      	b.n	801ad60 <_dtoa_r+0x100>
 801ae72:	2301      	movs	r3, #1
 801ae74:	e7b7      	b.n	801ade6 <_dtoa_r+0x186>
 801ae76:	9010      	str	r0, [sp, #64]	@ 0x40
 801ae78:	e7b6      	b.n	801ade8 <_dtoa_r+0x188>
 801ae7a:	9b00      	ldr	r3, [sp, #0]
 801ae7c:	1bdb      	subs	r3, r3, r7
 801ae7e:	9300      	str	r3, [sp, #0]
 801ae80:	427b      	negs	r3, r7
 801ae82:	9308      	str	r3, [sp, #32]
 801ae84:	2300      	movs	r3, #0
 801ae86:	930d      	str	r3, [sp, #52]	@ 0x34
 801ae88:	e7c3      	b.n	801ae12 <_dtoa_r+0x1b2>
 801ae8a:	2301      	movs	r3, #1
 801ae8c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ae90:	eb07 0b03 	add.w	fp, r7, r3
 801ae94:	f10b 0301 	add.w	r3, fp, #1
 801ae98:	2b01      	cmp	r3, #1
 801ae9a:	9303      	str	r3, [sp, #12]
 801ae9c:	bfb8      	it	lt
 801ae9e:	2301      	movlt	r3, #1
 801aea0:	e006      	b.n	801aeb0 <_dtoa_r+0x250>
 801aea2:	2301      	movs	r3, #1
 801aea4:	9309      	str	r3, [sp, #36]	@ 0x24
 801aea6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801aea8:	2b00      	cmp	r3, #0
 801aeaa:	dd28      	ble.n	801aefe <_dtoa_r+0x29e>
 801aeac:	469b      	mov	fp, r3
 801aeae:	9303      	str	r3, [sp, #12]
 801aeb0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 801aeb4:	2100      	movs	r1, #0
 801aeb6:	2204      	movs	r2, #4
 801aeb8:	f102 0514 	add.w	r5, r2, #20
 801aebc:	429d      	cmp	r5, r3
 801aebe:	d926      	bls.n	801af0e <_dtoa_r+0x2ae>
 801aec0:	6041      	str	r1, [r0, #4]
 801aec2:	4648      	mov	r0, r9
 801aec4:	f000 fd9c 	bl	801ba00 <_Balloc>
 801aec8:	4682      	mov	sl, r0
 801aeca:	2800      	cmp	r0, #0
 801aecc:	d142      	bne.n	801af54 <_dtoa_r+0x2f4>
 801aece:	4b1e      	ldr	r3, [pc, #120]	@ (801af48 <_dtoa_r+0x2e8>)
 801aed0:	4602      	mov	r2, r0
 801aed2:	f240 11af 	movw	r1, #431	@ 0x1af
 801aed6:	e6da      	b.n	801ac8e <_dtoa_r+0x2e>
 801aed8:	2300      	movs	r3, #0
 801aeda:	e7e3      	b.n	801aea4 <_dtoa_r+0x244>
 801aedc:	2300      	movs	r3, #0
 801aede:	e7d5      	b.n	801ae8c <_dtoa_r+0x22c>
 801aee0:	2401      	movs	r4, #1
 801aee2:	2300      	movs	r3, #0
 801aee4:	9307      	str	r3, [sp, #28]
 801aee6:	9409      	str	r4, [sp, #36]	@ 0x24
 801aee8:	f04f 3bff 	mov.w	fp, #4294967295
 801aeec:	2200      	movs	r2, #0
 801aeee:	f8cd b00c 	str.w	fp, [sp, #12]
 801aef2:	2312      	movs	r3, #18
 801aef4:	920c      	str	r2, [sp, #48]	@ 0x30
 801aef6:	e7db      	b.n	801aeb0 <_dtoa_r+0x250>
 801aef8:	2301      	movs	r3, #1
 801aefa:	9309      	str	r3, [sp, #36]	@ 0x24
 801aefc:	e7f4      	b.n	801aee8 <_dtoa_r+0x288>
 801aefe:	f04f 0b01 	mov.w	fp, #1
 801af02:	f8cd b00c 	str.w	fp, [sp, #12]
 801af06:	465b      	mov	r3, fp
 801af08:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 801af0c:	e7d0      	b.n	801aeb0 <_dtoa_r+0x250>
 801af0e:	3101      	adds	r1, #1
 801af10:	0052      	lsls	r2, r2, #1
 801af12:	e7d1      	b.n	801aeb8 <_dtoa_r+0x258>
 801af14:	f3af 8000 	nop.w
 801af18:	636f4361 	.word	0x636f4361
 801af1c:	3fd287a7 	.word	0x3fd287a7
 801af20:	8b60c8b3 	.word	0x8b60c8b3
 801af24:	3fc68a28 	.word	0x3fc68a28
 801af28:	509f79fb 	.word	0x509f79fb
 801af2c:	3fd34413 	.word	0x3fd34413
 801af30:	08020785 	.word	0x08020785
 801af34:	0802079c 	.word	0x0802079c
 801af38:	7ff00000 	.word	0x7ff00000
 801af3c:	08020877 	.word	0x08020877
 801af40:	3ff80000 	.word	0x3ff80000
 801af44:	08020d38 	.word	0x08020d38
 801af48:	080207f4 	.word	0x080207f4
 801af4c:	08020781 	.word	0x08020781
 801af50:	08020876 	.word	0x08020876
 801af54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801af58:	6018      	str	r0, [r3, #0]
 801af5a:	9b03      	ldr	r3, [sp, #12]
 801af5c:	2b0e      	cmp	r3, #14
 801af5e:	f200 80a1 	bhi.w	801b0a4 <_dtoa_r+0x444>
 801af62:	2c00      	cmp	r4, #0
 801af64:	f000 809e 	beq.w	801b0a4 <_dtoa_r+0x444>
 801af68:	2f00      	cmp	r7, #0
 801af6a:	dd33      	ble.n	801afd4 <_dtoa_r+0x374>
 801af6c:	4b9c      	ldr	r3, [pc, #624]	@ (801b1e0 <_dtoa_r+0x580>)
 801af6e:	f007 020f 	and.w	r2, r7, #15
 801af72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801af76:	ed93 7b00 	vldr	d7, [r3]
 801af7a:	05f8      	lsls	r0, r7, #23
 801af7c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 801af80:	ea4f 1427 	mov.w	r4, r7, asr #4
 801af84:	d516      	bpl.n	801afb4 <_dtoa_r+0x354>
 801af86:	4b97      	ldr	r3, [pc, #604]	@ (801b1e4 <_dtoa_r+0x584>)
 801af88:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801af8c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801af90:	f7e5 fc5c 	bl	800084c <__aeabi_ddiv>
 801af94:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801af98:	f004 040f 	and.w	r4, r4, #15
 801af9c:	2603      	movs	r6, #3
 801af9e:	4d91      	ldr	r5, [pc, #580]	@ (801b1e4 <_dtoa_r+0x584>)
 801afa0:	b954      	cbnz	r4, 801afb8 <_dtoa_r+0x358>
 801afa2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801afa6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801afaa:	f7e5 fc4f 	bl	800084c <__aeabi_ddiv>
 801afae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801afb2:	e028      	b.n	801b006 <_dtoa_r+0x3a6>
 801afb4:	2602      	movs	r6, #2
 801afb6:	e7f2      	b.n	801af9e <_dtoa_r+0x33e>
 801afb8:	07e1      	lsls	r1, r4, #31
 801afba:	d508      	bpl.n	801afce <_dtoa_r+0x36e>
 801afbc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801afc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801afc4:	f7e5 fb18 	bl	80005f8 <__aeabi_dmul>
 801afc8:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801afcc:	3601      	adds	r6, #1
 801afce:	1064      	asrs	r4, r4, #1
 801afd0:	3508      	adds	r5, #8
 801afd2:	e7e5      	b.n	801afa0 <_dtoa_r+0x340>
 801afd4:	f000 80af 	beq.w	801b136 <_dtoa_r+0x4d6>
 801afd8:	427c      	negs	r4, r7
 801afda:	4b81      	ldr	r3, [pc, #516]	@ (801b1e0 <_dtoa_r+0x580>)
 801afdc:	4d81      	ldr	r5, [pc, #516]	@ (801b1e4 <_dtoa_r+0x584>)
 801afde:	f004 020f 	and.w	r2, r4, #15
 801afe2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801afea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 801afee:	f7e5 fb03 	bl	80005f8 <__aeabi_dmul>
 801aff2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801aff6:	1124      	asrs	r4, r4, #4
 801aff8:	2300      	movs	r3, #0
 801affa:	2602      	movs	r6, #2
 801affc:	2c00      	cmp	r4, #0
 801affe:	f040 808f 	bne.w	801b120 <_dtoa_r+0x4c0>
 801b002:	2b00      	cmp	r3, #0
 801b004:	d1d3      	bne.n	801afae <_dtoa_r+0x34e>
 801b006:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b008:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	f000 8094 	beq.w	801b13a <_dtoa_r+0x4da>
 801b012:	4b75      	ldr	r3, [pc, #468]	@ (801b1e8 <_dtoa_r+0x588>)
 801b014:	2200      	movs	r2, #0
 801b016:	4620      	mov	r0, r4
 801b018:	4629      	mov	r1, r5
 801b01a:	f7e5 fd5f 	bl	8000adc <__aeabi_dcmplt>
 801b01e:	2800      	cmp	r0, #0
 801b020:	f000 808b 	beq.w	801b13a <_dtoa_r+0x4da>
 801b024:	9b03      	ldr	r3, [sp, #12]
 801b026:	2b00      	cmp	r3, #0
 801b028:	f000 8087 	beq.w	801b13a <_dtoa_r+0x4da>
 801b02c:	f1bb 0f00 	cmp.w	fp, #0
 801b030:	dd34      	ble.n	801b09c <_dtoa_r+0x43c>
 801b032:	4620      	mov	r0, r4
 801b034:	4b6d      	ldr	r3, [pc, #436]	@ (801b1ec <_dtoa_r+0x58c>)
 801b036:	2200      	movs	r2, #0
 801b038:	4629      	mov	r1, r5
 801b03a:	f7e5 fadd 	bl	80005f8 <__aeabi_dmul>
 801b03e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b042:	f107 38ff 	add.w	r8, r7, #4294967295
 801b046:	3601      	adds	r6, #1
 801b048:	465c      	mov	r4, fp
 801b04a:	4630      	mov	r0, r6
 801b04c:	f7e5 fa6a 	bl	8000524 <__aeabi_i2d>
 801b050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b054:	f7e5 fad0 	bl	80005f8 <__aeabi_dmul>
 801b058:	4b65      	ldr	r3, [pc, #404]	@ (801b1f0 <_dtoa_r+0x590>)
 801b05a:	2200      	movs	r2, #0
 801b05c:	f7e5 f916 	bl	800028c <__adddf3>
 801b060:	4605      	mov	r5, r0
 801b062:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801b066:	2c00      	cmp	r4, #0
 801b068:	d16a      	bne.n	801b140 <_dtoa_r+0x4e0>
 801b06a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b06e:	4b61      	ldr	r3, [pc, #388]	@ (801b1f4 <_dtoa_r+0x594>)
 801b070:	2200      	movs	r2, #0
 801b072:	f7e5 f909 	bl	8000288 <__aeabi_dsub>
 801b076:	4602      	mov	r2, r0
 801b078:	460b      	mov	r3, r1
 801b07a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b07e:	462a      	mov	r2, r5
 801b080:	4633      	mov	r3, r6
 801b082:	f7e5 fd49 	bl	8000b18 <__aeabi_dcmpgt>
 801b086:	2800      	cmp	r0, #0
 801b088:	f040 8298 	bne.w	801b5bc <_dtoa_r+0x95c>
 801b08c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b090:	462a      	mov	r2, r5
 801b092:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801b096:	f7e5 fd21 	bl	8000adc <__aeabi_dcmplt>
 801b09a:	bb38      	cbnz	r0, 801b0ec <_dtoa_r+0x48c>
 801b09c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 801b0a0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 801b0a4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b0a6:	2b00      	cmp	r3, #0
 801b0a8:	f2c0 8157 	blt.w	801b35a <_dtoa_r+0x6fa>
 801b0ac:	2f0e      	cmp	r7, #14
 801b0ae:	f300 8154 	bgt.w	801b35a <_dtoa_r+0x6fa>
 801b0b2:	4b4b      	ldr	r3, [pc, #300]	@ (801b1e0 <_dtoa_r+0x580>)
 801b0b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801b0b8:	ed93 7b00 	vldr	d7, [r3]
 801b0bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	ed8d 7b00 	vstr	d7, [sp]
 801b0c4:	f280 80e5 	bge.w	801b292 <_dtoa_r+0x632>
 801b0c8:	9b03      	ldr	r3, [sp, #12]
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	f300 80e1 	bgt.w	801b292 <_dtoa_r+0x632>
 801b0d0:	d10c      	bne.n	801b0ec <_dtoa_r+0x48c>
 801b0d2:	4b48      	ldr	r3, [pc, #288]	@ (801b1f4 <_dtoa_r+0x594>)
 801b0d4:	2200      	movs	r2, #0
 801b0d6:	ec51 0b17 	vmov	r0, r1, d7
 801b0da:	f7e5 fa8d 	bl	80005f8 <__aeabi_dmul>
 801b0de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b0e2:	f7e5 fd0f 	bl	8000b04 <__aeabi_dcmpge>
 801b0e6:	2800      	cmp	r0, #0
 801b0e8:	f000 8266 	beq.w	801b5b8 <_dtoa_r+0x958>
 801b0ec:	2400      	movs	r4, #0
 801b0ee:	4625      	mov	r5, r4
 801b0f0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0f2:	4656      	mov	r6, sl
 801b0f4:	ea6f 0803 	mvn.w	r8, r3
 801b0f8:	2700      	movs	r7, #0
 801b0fa:	4621      	mov	r1, r4
 801b0fc:	4648      	mov	r0, r9
 801b0fe:	f000 fcbf 	bl	801ba80 <_Bfree>
 801b102:	2d00      	cmp	r5, #0
 801b104:	f000 80bd 	beq.w	801b282 <_dtoa_r+0x622>
 801b108:	b12f      	cbz	r7, 801b116 <_dtoa_r+0x4b6>
 801b10a:	42af      	cmp	r7, r5
 801b10c:	d003      	beq.n	801b116 <_dtoa_r+0x4b6>
 801b10e:	4639      	mov	r1, r7
 801b110:	4648      	mov	r0, r9
 801b112:	f000 fcb5 	bl	801ba80 <_Bfree>
 801b116:	4629      	mov	r1, r5
 801b118:	4648      	mov	r0, r9
 801b11a:	f000 fcb1 	bl	801ba80 <_Bfree>
 801b11e:	e0b0      	b.n	801b282 <_dtoa_r+0x622>
 801b120:	07e2      	lsls	r2, r4, #31
 801b122:	d505      	bpl.n	801b130 <_dtoa_r+0x4d0>
 801b124:	e9d5 2300 	ldrd	r2, r3, [r5]
 801b128:	f7e5 fa66 	bl	80005f8 <__aeabi_dmul>
 801b12c:	3601      	adds	r6, #1
 801b12e:	2301      	movs	r3, #1
 801b130:	1064      	asrs	r4, r4, #1
 801b132:	3508      	adds	r5, #8
 801b134:	e762      	b.n	801affc <_dtoa_r+0x39c>
 801b136:	2602      	movs	r6, #2
 801b138:	e765      	b.n	801b006 <_dtoa_r+0x3a6>
 801b13a:	9c03      	ldr	r4, [sp, #12]
 801b13c:	46b8      	mov	r8, r7
 801b13e:	e784      	b.n	801b04a <_dtoa_r+0x3ea>
 801b140:	4b27      	ldr	r3, [pc, #156]	@ (801b1e0 <_dtoa_r+0x580>)
 801b142:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b144:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801b148:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801b14c:	4454      	add	r4, sl
 801b14e:	2900      	cmp	r1, #0
 801b150:	d054      	beq.n	801b1fc <_dtoa_r+0x59c>
 801b152:	4929      	ldr	r1, [pc, #164]	@ (801b1f8 <_dtoa_r+0x598>)
 801b154:	2000      	movs	r0, #0
 801b156:	f7e5 fb79 	bl	800084c <__aeabi_ddiv>
 801b15a:	4633      	mov	r3, r6
 801b15c:	462a      	mov	r2, r5
 801b15e:	f7e5 f893 	bl	8000288 <__aeabi_dsub>
 801b162:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b166:	4656      	mov	r6, sl
 801b168:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b16c:	f7e5 fcf4 	bl	8000b58 <__aeabi_d2iz>
 801b170:	4605      	mov	r5, r0
 801b172:	f7e5 f9d7 	bl	8000524 <__aeabi_i2d>
 801b176:	4602      	mov	r2, r0
 801b178:	460b      	mov	r3, r1
 801b17a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b17e:	f7e5 f883 	bl	8000288 <__aeabi_dsub>
 801b182:	3530      	adds	r5, #48	@ 0x30
 801b184:	4602      	mov	r2, r0
 801b186:	460b      	mov	r3, r1
 801b188:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b18c:	f806 5b01 	strb.w	r5, [r6], #1
 801b190:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b194:	f7e5 fca2 	bl	8000adc <__aeabi_dcmplt>
 801b198:	2800      	cmp	r0, #0
 801b19a:	d172      	bne.n	801b282 <_dtoa_r+0x622>
 801b19c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801b1a0:	4911      	ldr	r1, [pc, #68]	@ (801b1e8 <_dtoa_r+0x588>)
 801b1a2:	2000      	movs	r0, #0
 801b1a4:	f7e5 f870 	bl	8000288 <__aeabi_dsub>
 801b1a8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b1ac:	f7e5 fc96 	bl	8000adc <__aeabi_dcmplt>
 801b1b0:	2800      	cmp	r0, #0
 801b1b2:	f040 80b4 	bne.w	801b31e <_dtoa_r+0x6be>
 801b1b6:	42a6      	cmp	r6, r4
 801b1b8:	f43f af70 	beq.w	801b09c <_dtoa_r+0x43c>
 801b1bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b1c0:	4b0a      	ldr	r3, [pc, #40]	@ (801b1ec <_dtoa_r+0x58c>)
 801b1c2:	2200      	movs	r2, #0
 801b1c4:	f7e5 fa18 	bl	80005f8 <__aeabi_dmul>
 801b1c8:	4b08      	ldr	r3, [pc, #32]	@ (801b1ec <_dtoa_r+0x58c>)
 801b1ca:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b1ce:	2200      	movs	r2, #0
 801b1d0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b1d4:	f7e5 fa10 	bl	80005f8 <__aeabi_dmul>
 801b1d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b1dc:	e7c4      	b.n	801b168 <_dtoa_r+0x508>
 801b1de:	bf00      	nop
 801b1e0:	08020d38 	.word	0x08020d38
 801b1e4:	08020d10 	.word	0x08020d10
 801b1e8:	3ff00000 	.word	0x3ff00000
 801b1ec:	40240000 	.word	0x40240000
 801b1f0:	401c0000 	.word	0x401c0000
 801b1f4:	40140000 	.word	0x40140000
 801b1f8:	3fe00000 	.word	0x3fe00000
 801b1fc:	4631      	mov	r1, r6
 801b1fe:	4628      	mov	r0, r5
 801b200:	f7e5 f9fa 	bl	80005f8 <__aeabi_dmul>
 801b204:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 801b208:	9413      	str	r4, [sp, #76]	@ 0x4c
 801b20a:	4656      	mov	r6, sl
 801b20c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b210:	f7e5 fca2 	bl	8000b58 <__aeabi_d2iz>
 801b214:	4605      	mov	r5, r0
 801b216:	f7e5 f985 	bl	8000524 <__aeabi_i2d>
 801b21a:	4602      	mov	r2, r0
 801b21c:	460b      	mov	r3, r1
 801b21e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b222:	f7e5 f831 	bl	8000288 <__aeabi_dsub>
 801b226:	3530      	adds	r5, #48	@ 0x30
 801b228:	f806 5b01 	strb.w	r5, [r6], #1
 801b22c:	4602      	mov	r2, r0
 801b22e:	460b      	mov	r3, r1
 801b230:	42a6      	cmp	r6, r4
 801b232:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801b236:	f04f 0200 	mov.w	r2, #0
 801b23a:	d124      	bne.n	801b286 <_dtoa_r+0x626>
 801b23c:	4baf      	ldr	r3, [pc, #700]	@ (801b4fc <_dtoa_r+0x89c>)
 801b23e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 801b242:	f7e5 f823 	bl	800028c <__adddf3>
 801b246:	4602      	mov	r2, r0
 801b248:	460b      	mov	r3, r1
 801b24a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b24e:	f7e5 fc63 	bl	8000b18 <__aeabi_dcmpgt>
 801b252:	2800      	cmp	r0, #0
 801b254:	d163      	bne.n	801b31e <_dtoa_r+0x6be>
 801b256:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 801b25a:	49a8      	ldr	r1, [pc, #672]	@ (801b4fc <_dtoa_r+0x89c>)
 801b25c:	2000      	movs	r0, #0
 801b25e:	f7e5 f813 	bl	8000288 <__aeabi_dsub>
 801b262:	4602      	mov	r2, r0
 801b264:	460b      	mov	r3, r1
 801b266:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801b26a:	f7e5 fc37 	bl	8000adc <__aeabi_dcmplt>
 801b26e:	2800      	cmp	r0, #0
 801b270:	f43f af14 	beq.w	801b09c <_dtoa_r+0x43c>
 801b274:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801b276:	1e73      	subs	r3, r6, #1
 801b278:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b27a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801b27e:	2b30      	cmp	r3, #48	@ 0x30
 801b280:	d0f8      	beq.n	801b274 <_dtoa_r+0x614>
 801b282:	4647      	mov	r7, r8
 801b284:	e03b      	b.n	801b2fe <_dtoa_r+0x69e>
 801b286:	4b9e      	ldr	r3, [pc, #632]	@ (801b500 <_dtoa_r+0x8a0>)
 801b288:	f7e5 f9b6 	bl	80005f8 <__aeabi_dmul>
 801b28c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b290:	e7bc      	b.n	801b20c <_dtoa_r+0x5ac>
 801b292:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 801b296:	4656      	mov	r6, sl
 801b298:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b29c:	4620      	mov	r0, r4
 801b29e:	4629      	mov	r1, r5
 801b2a0:	f7e5 fad4 	bl	800084c <__aeabi_ddiv>
 801b2a4:	f7e5 fc58 	bl	8000b58 <__aeabi_d2iz>
 801b2a8:	4680      	mov	r8, r0
 801b2aa:	f7e5 f93b 	bl	8000524 <__aeabi_i2d>
 801b2ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b2b2:	f7e5 f9a1 	bl	80005f8 <__aeabi_dmul>
 801b2b6:	4602      	mov	r2, r0
 801b2b8:	460b      	mov	r3, r1
 801b2ba:	4620      	mov	r0, r4
 801b2bc:	4629      	mov	r1, r5
 801b2be:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801b2c2:	f7e4 ffe1 	bl	8000288 <__aeabi_dsub>
 801b2c6:	f806 4b01 	strb.w	r4, [r6], #1
 801b2ca:	9d03      	ldr	r5, [sp, #12]
 801b2cc:	eba6 040a 	sub.w	r4, r6, sl
 801b2d0:	42a5      	cmp	r5, r4
 801b2d2:	4602      	mov	r2, r0
 801b2d4:	460b      	mov	r3, r1
 801b2d6:	d133      	bne.n	801b340 <_dtoa_r+0x6e0>
 801b2d8:	f7e4 ffd8 	bl	800028c <__adddf3>
 801b2dc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b2e0:	4604      	mov	r4, r0
 801b2e2:	460d      	mov	r5, r1
 801b2e4:	f7e5 fc18 	bl	8000b18 <__aeabi_dcmpgt>
 801b2e8:	b9c0      	cbnz	r0, 801b31c <_dtoa_r+0x6bc>
 801b2ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 801b2ee:	4620      	mov	r0, r4
 801b2f0:	4629      	mov	r1, r5
 801b2f2:	f7e5 fbe9 	bl	8000ac8 <__aeabi_dcmpeq>
 801b2f6:	b110      	cbz	r0, 801b2fe <_dtoa_r+0x69e>
 801b2f8:	f018 0f01 	tst.w	r8, #1
 801b2fc:	d10e      	bne.n	801b31c <_dtoa_r+0x6bc>
 801b2fe:	9902      	ldr	r1, [sp, #8]
 801b300:	4648      	mov	r0, r9
 801b302:	f000 fbbd 	bl	801ba80 <_Bfree>
 801b306:	2300      	movs	r3, #0
 801b308:	7033      	strb	r3, [r6, #0]
 801b30a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b30c:	3701      	adds	r7, #1
 801b30e:	601f      	str	r7, [r3, #0]
 801b310:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b312:	2b00      	cmp	r3, #0
 801b314:	f000 824b 	beq.w	801b7ae <_dtoa_r+0xb4e>
 801b318:	601e      	str	r6, [r3, #0]
 801b31a:	e248      	b.n	801b7ae <_dtoa_r+0xb4e>
 801b31c:	46b8      	mov	r8, r7
 801b31e:	4633      	mov	r3, r6
 801b320:	461e      	mov	r6, r3
 801b322:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b326:	2a39      	cmp	r2, #57	@ 0x39
 801b328:	d106      	bne.n	801b338 <_dtoa_r+0x6d8>
 801b32a:	459a      	cmp	sl, r3
 801b32c:	d1f8      	bne.n	801b320 <_dtoa_r+0x6c0>
 801b32e:	2230      	movs	r2, #48	@ 0x30
 801b330:	f108 0801 	add.w	r8, r8, #1
 801b334:	f88a 2000 	strb.w	r2, [sl]
 801b338:	781a      	ldrb	r2, [r3, #0]
 801b33a:	3201      	adds	r2, #1
 801b33c:	701a      	strb	r2, [r3, #0]
 801b33e:	e7a0      	b.n	801b282 <_dtoa_r+0x622>
 801b340:	4b6f      	ldr	r3, [pc, #444]	@ (801b500 <_dtoa_r+0x8a0>)
 801b342:	2200      	movs	r2, #0
 801b344:	f7e5 f958 	bl	80005f8 <__aeabi_dmul>
 801b348:	2200      	movs	r2, #0
 801b34a:	2300      	movs	r3, #0
 801b34c:	4604      	mov	r4, r0
 801b34e:	460d      	mov	r5, r1
 801b350:	f7e5 fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 801b354:	2800      	cmp	r0, #0
 801b356:	d09f      	beq.n	801b298 <_dtoa_r+0x638>
 801b358:	e7d1      	b.n	801b2fe <_dtoa_r+0x69e>
 801b35a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b35c:	2a00      	cmp	r2, #0
 801b35e:	f000 80ea 	beq.w	801b536 <_dtoa_r+0x8d6>
 801b362:	9a07      	ldr	r2, [sp, #28]
 801b364:	2a01      	cmp	r2, #1
 801b366:	f300 80cd 	bgt.w	801b504 <_dtoa_r+0x8a4>
 801b36a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b36c:	2a00      	cmp	r2, #0
 801b36e:	f000 80c1 	beq.w	801b4f4 <_dtoa_r+0x894>
 801b372:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801b376:	9c08      	ldr	r4, [sp, #32]
 801b378:	9e00      	ldr	r6, [sp, #0]
 801b37a:	9a00      	ldr	r2, [sp, #0]
 801b37c:	441a      	add	r2, r3
 801b37e:	9200      	str	r2, [sp, #0]
 801b380:	9a06      	ldr	r2, [sp, #24]
 801b382:	2101      	movs	r1, #1
 801b384:	441a      	add	r2, r3
 801b386:	4648      	mov	r0, r9
 801b388:	9206      	str	r2, [sp, #24]
 801b38a:	f000 fc77 	bl	801bc7c <__i2b>
 801b38e:	4605      	mov	r5, r0
 801b390:	b166      	cbz	r6, 801b3ac <_dtoa_r+0x74c>
 801b392:	9b06      	ldr	r3, [sp, #24]
 801b394:	2b00      	cmp	r3, #0
 801b396:	dd09      	ble.n	801b3ac <_dtoa_r+0x74c>
 801b398:	42b3      	cmp	r3, r6
 801b39a:	9a00      	ldr	r2, [sp, #0]
 801b39c:	bfa8      	it	ge
 801b39e:	4633      	movge	r3, r6
 801b3a0:	1ad2      	subs	r2, r2, r3
 801b3a2:	9200      	str	r2, [sp, #0]
 801b3a4:	9a06      	ldr	r2, [sp, #24]
 801b3a6:	1af6      	subs	r6, r6, r3
 801b3a8:	1ad3      	subs	r3, r2, r3
 801b3aa:	9306      	str	r3, [sp, #24]
 801b3ac:	9b08      	ldr	r3, [sp, #32]
 801b3ae:	b30b      	cbz	r3, 801b3f4 <_dtoa_r+0x794>
 801b3b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	f000 80c6 	beq.w	801b544 <_dtoa_r+0x8e4>
 801b3b8:	2c00      	cmp	r4, #0
 801b3ba:	f000 80c0 	beq.w	801b53e <_dtoa_r+0x8de>
 801b3be:	4629      	mov	r1, r5
 801b3c0:	4622      	mov	r2, r4
 801b3c2:	4648      	mov	r0, r9
 801b3c4:	f000 fd12 	bl	801bdec <__pow5mult>
 801b3c8:	9a02      	ldr	r2, [sp, #8]
 801b3ca:	4601      	mov	r1, r0
 801b3cc:	4605      	mov	r5, r0
 801b3ce:	4648      	mov	r0, r9
 801b3d0:	f000 fc6a 	bl	801bca8 <__multiply>
 801b3d4:	9902      	ldr	r1, [sp, #8]
 801b3d6:	4680      	mov	r8, r0
 801b3d8:	4648      	mov	r0, r9
 801b3da:	f000 fb51 	bl	801ba80 <_Bfree>
 801b3de:	9b08      	ldr	r3, [sp, #32]
 801b3e0:	1b1b      	subs	r3, r3, r4
 801b3e2:	9308      	str	r3, [sp, #32]
 801b3e4:	f000 80b1 	beq.w	801b54a <_dtoa_r+0x8ea>
 801b3e8:	9a08      	ldr	r2, [sp, #32]
 801b3ea:	4641      	mov	r1, r8
 801b3ec:	4648      	mov	r0, r9
 801b3ee:	f000 fcfd 	bl	801bdec <__pow5mult>
 801b3f2:	9002      	str	r0, [sp, #8]
 801b3f4:	2101      	movs	r1, #1
 801b3f6:	4648      	mov	r0, r9
 801b3f8:	f000 fc40 	bl	801bc7c <__i2b>
 801b3fc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b3fe:	4604      	mov	r4, r0
 801b400:	2b00      	cmp	r3, #0
 801b402:	f000 81d8 	beq.w	801b7b6 <_dtoa_r+0xb56>
 801b406:	461a      	mov	r2, r3
 801b408:	4601      	mov	r1, r0
 801b40a:	4648      	mov	r0, r9
 801b40c:	f000 fcee 	bl	801bdec <__pow5mult>
 801b410:	9b07      	ldr	r3, [sp, #28]
 801b412:	2b01      	cmp	r3, #1
 801b414:	4604      	mov	r4, r0
 801b416:	f300 809f 	bgt.w	801b558 <_dtoa_r+0x8f8>
 801b41a:	9b04      	ldr	r3, [sp, #16]
 801b41c:	2b00      	cmp	r3, #0
 801b41e:	f040 8097 	bne.w	801b550 <_dtoa_r+0x8f0>
 801b422:	9b05      	ldr	r3, [sp, #20]
 801b424:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801b428:	2b00      	cmp	r3, #0
 801b42a:	f040 8093 	bne.w	801b554 <_dtoa_r+0x8f4>
 801b42e:	9b05      	ldr	r3, [sp, #20]
 801b430:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801b434:	0d1b      	lsrs	r3, r3, #20
 801b436:	051b      	lsls	r3, r3, #20
 801b438:	b133      	cbz	r3, 801b448 <_dtoa_r+0x7e8>
 801b43a:	9b00      	ldr	r3, [sp, #0]
 801b43c:	3301      	adds	r3, #1
 801b43e:	9300      	str	r3, [sp, #0]
 801b440:	9b06      	ldr	r3, [sp, #24]
 801b442:	3301      	adds	r3, #1
 801b444:	9306      	str	r3, [sp, #24]
 801b446:	2301      	movs	r3, #1
 801b448:	9308      	str	r3, [sp, #32]
 801b44a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	f000 81b8 	beq.w	801b7c2 <_dtoa_r+0xb62>
 801b452:	6923      	ldr	r3, [r4, #16]
 801b454:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801b458:	6918      	ldr	r0, [r3, #16]
 801b45a:	f000 fbc3 	bl	801bbe4 <__hi0bits>
 801b45e:	f1c0 0020 	rsb	r0, r0, #32
 801b462:	9b06      	ldr	r3, [sp, #24]
 801b464:	4418      	add	r0, r3
 801b466:	f010 001f 	ands.w	r0, r0, #31
 801b46a:	f000 8082 	beq.w	801b572 <_dtoa_r+0x912>
 801b46e:	f1c0 0320 	rsb	r3, r0, #32
 801b472:	2b04      	cmp	r3, #4
 801b474:	dd73      	ble.n	801b55e <_dtoa_r+0x8fe>
 801b476:	9b00      	ldr	r3, [sp, #0]
 801b478:	f1c0 001c 	rsb	r0, r0, #28
 801b47c:	4403      	add	r3, r0
 801b47e:	9300      	str	r3, [sp, #0]
 801b480:	9b06      	ldr	r3, [sp, #24]
 801b482:	4403      	add	r3, r0
 801b484:	4406      	add	r6, r0
 801b486:	9306      	str	r3, [sp, #24]
 801b488:	9b00      	ldr	r3, [sp, #0]
 801b48a:	2b00      	cmp	r3, #0
 801b48c:	dd05      	ble.n	801b49a <_dtoa_r+0x83a>
 801b48e:	9902      	ldr	r1, [sp, #8]
 801b490:	461a      	mov	r2, r3
 801b492:	4648      	mov	r0, r9
 801b494:	f000 fd04 	bl	801bea0 <__lshift>
 801b498:	9002      	str	r0, [sp, #8]
 801b49a:	9b06      	ldr	r3, [sp, #24]
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	dd05      	ble.n	801b4ac <_dtoa_r+0x84c>
 801b4a0:	4621      	mov	r1, r4
 801b4a2:	461a      	mov	r2, r3
 801b4a4:	4648      	mov	r0, r9
 801b4a6:	f000 fcfb 	bl	801bea0 <__lshift>
 801b4aa:	4604      	mov	r4, r0
 801b4ac:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	d061      	beq.n	801b576 <_dtoa_r+0x916>
 801b4b2:	9802      	ldr	r0, [sp, #8]
 801b4b4:	4621      	mov	r1, r4
 801b4b6:	f000 fd5f 	bl	801bf78 <__mcmp>
 801b4ba:	2800      	cmp	r0, #0
 801b4bc:	da5b      	bge.n	801b576 <_dtoa_r+0x916>
 801b4be:	2300      	movs	r3, #0
 801b4c0:	9902      	ldr	r1, [sp, #8]
 801b4c2:	220a      	movs	r2, #10
 801b4c4:	4648      	mov	r0, r9
 801b4c6:	f000 fafd 	bl	801bac4 <__multadd>
 801b4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b4cc:	9002      	str	r0, [sp, #8]
 801b4ce:	f107 38ff 	add.w	r8, r7, #4294967295
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	f000 8177 	beq.w	801b7c6 <_dtoa_r+0xb66>
 801b4d8:	4629      	mov	r1, r5
 801b4da:	2300      	movs	r3, #0
 801b4dc:	220a      	movs	r2, #10
 801b4de:	4648      	mov	r0, r9
 801b4e0:	f000 faf0 	bl	801bac4 <__multadd>
 801b4e4:	f1bb 0f00 	cmp.w	fp, #0
 801b4e8:	4605      	mov	r5, r0
 801b4ea:	dc6f      	bgt.n	801b5cc <_dtoa_r+0x96c>
 801b4ec:	9b07      	ldr	r3, [sp, #28]
 801b4ee:	2b02      	cmp	r3, #2
 801b4f0:	dc49      	bgt.n	801b586 <_dtoa_r+0x926>
 801b4f2:	e06b      	b.n	801b5cc <_dtoa_r+0x96c>
 801b4f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b4f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801b4fa:	e73c      	b.n	801b376 <_dtoa_r+0x716>
 801b4fc:	3fe00000 	.word	0x3fe00000
 801b500:	40240000 	.word	0x40240000
 801b504:	9b03      	ldr	r3, [sp, #12]
 801b506:	1e5c      	subs	r4, r3, #1
 801b508:	9b08      	ldr	r3, [sp, #32]
 801b50a:	42a3      	cmp	r3, r4
 801b50c:	db09      	blt.n	801b522 <_dtoa_r+0x8c2>
 801b50e:	1b1c      	subs	r4, r3, r4
 801b510:	9b03      	ldr	r3, [sp, #12]
 801b512:	2b00      	cmp	r3, #0
 801b514:	f6bf af30 	bge.w	801b378 <_dtoa_r+0x718>
 801b518:	9b00      	ldr	r3, [sp, #0]
 801b51a:	9a03      	ldr	r2, [sp, #12]
 801b51c:	1a9e      	subs	r6, r3, r2
 801b51e:	2300      	movs	r3, #0
 801b520:	e72b      	b.n	801b37a <_dtoa_r+0x71a>
 801b522:	9b08      	ldr	r3, [sp, #32]
 801b524:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b526:	9408      	str	r4, [sp, #32]
 801b528:	1ae3      	subs	r3, r4, r3
 801b52a:	441a      	add	r2, r3
 801b52c:	9e00      	ldr	r6, [sp, #0]
 801b52e:	9b03      	ldr	r3, [sp, #12]
 801b530:	920d      	str	r2, [sp, #52]	@ 0x34
 801b532:	2400      	movs	r4, #0
 801b534:	e721      	b.n	801b37a <_dtoa_r+0x71a>
 801b536:	9c08      	ldr	r4, [sp, #32]
 801b538:	9e00      	ldr	r6, [sp, #0]
 801b53a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801b53c:	e728      	b.n	801b390 <_dtoa_r+0x730>
 801b53e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 801b542:	e751      	b.n	801b3e8 <_dtoa_r+0x788>
 801b544:	9a08      	ldr	r2, [sp, #32]
 801b546:	9902      	ldr	r1, [sp, #8]
 801b548:	e750      	b.n	801b3ec <_dtoa_r+0x78c>
 801b54a:	f8cd 8008 	str.w	r8, [sp, #8]
 801b54e:	e751      	b.n	801b3f4 <_dtoa_r+0x794>
 801b550:	2300      	movs	r3, #0
 801b552:	e779      	b.n	801b448 <_dtoa_r+0x7e8>
 801b554:	9b04      	ldr	r3, [sp, #16]
 801b556:	e777      	b.n	801b448 <_dtoa_r+0x7e8>
 801b558:	2300      	movs	r3, #0
 801b55a:	9308      	str	r3, [sp, #32]
 801b55c:	e779      	b.n	801b452 <_dtoa_r+0x7f2>
 801b55e:	d093      	beq.n	801b488 <_dtoa_r+0x828>
 801b560:	9a00      	ldr	r2, [sp, #0]
 801b562:	331c      	adds	r3, #28
 801b564:	441a      	add	r2, r3
 801b566:	9200      	str	r2, [sp, #0]
 801b568:	9a06      	ldr	r2, [sp, #24]
 801b56a:	441a      	add	r2, r3
 801b56c:	441e      	add	r6, r3
 801b56e:	9206      	str	r2, [sp, #24]
 801b570:	e78a      	b.n	801b488 <_dtoa_r+0x828>
 801b572:	4603      	mov	r3, r0
 801b574:	e7f4      	b.n	801b560 <_dtoa_r+0x900>
 801b576:	9b03      	ldr	r3, [sp, #12]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	46b8      	mov	r8, r7
 801b57c:	dc20      	bgt.n	801b5c0 <_dtoa_r+0x960>
 801b57e:	469b      	mov	fp, r3
 801b580:	9b07      	ldr	r3, [sp, #28]
 801b582:	2b02      	cmp	r3, #2
 801b584:	dd1e      	ble.n	801b5c4 <_dtoa_r+0x964>
 801b586:	f1bb 0f00 	cmp.w	fp, #0
 801b58a:	f47f adb1 	bne.w	801b0f0 <_dtoa_r+0x490>
 801b58e:	4621      	mov	r1, r4
 801b590:	465b      	mov	r3, fp
 801b592:	2205      	movs	r2, #5
 801b594:	4648      	mov	r0, r9
 801b596:	f000 fa95 	bl	801bac4 <__multadd>
 801b59a:	4601      	mov	r1, r0
 801b59c:	4604      	mov	r4, r0
 801b59e:	9802      	ldr	r0, [sp, #8]
 801b5a0:	f000 fcea 	bl	801bf78 <__mcmp>
 801b5a4:	2800      	cmp	r0, #0
 801b5a6:	f77f ada3 	ble.w	801b0f0 <_dtoa_r+0x490>
 801b5aa:	4656      	mov	r6, sl
 801b5ac:	2331      	movs	r3, #49	@ 0x31
 801b5ae:	f806 3b01 	strb.w	r3, [r6], #1
 801b5b2:	f108 0801 	add.w	r8, r8, #1
 801b5b6:	e59f      	b.n	801b0f8 <_dtoa_r+0x498>
 801b5b8:	9c03      	ldr	r4, [sp, #12]
 801b5ba:	46b8      	mov	r8, r7
 801b5bc:	4625      	mov	r5, r4
 801b5be:	e7f4      	b.n	801b5aa <_dtoa_r+0x94a>
 801b5c0:	f8dd b00c 	ldr.w	fp, [sp, #12]
 801b5c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	f000 8101 	beq.w	801b7ce <_dtoa_r+0xb6e>
 801b5cc:	2e00      	cmp	r6, #0
 801b5ce:	dd05      	ble.n	801b5dc <_dtoa_r+0x97c>
 801b5d0:	4629      	mov	r1, r5
 801b5d2:	4632      	mov	r2, r6
 801b5d4:	4648      	mov	r0, r9
 801b5d6:	f000 fc63 	bl	801bea0 <__lshift>
 801b5da:	4605      	mov	r5, r0
 801b5dc:	9b08      	ldr	r3, [sp, #32]
 801b5de:	2b00      	cmp	r3, #0
 801b5e0:	d05c      	beq.n	801b69c <_dtoa_r+0xa3c>
 801b5e2:	6869      	ldr	r1, [r5, #4]
 801b5e4:	4648      	mov	r0, r9
 801b5e6:	f000 fa0b 	bl	801ba00 <_Balloc>
 801b5ea:	4606      	mov	r6, r0
 801b5ec:	b928      	cbnz	r0, 801b5fa <_dtoa_r+0x99a>
 801b5ee:	4b82      	ldr	r3, [pc, #520]	@ (801b7f8 <_dtoa_r+0xb98>)
 801b5f0:	4602      	mov	r2, r0
 801b5f2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801b5f6:	f7ff bb4a 	b.w	801ac8e <_dtoa_r+0x2e>
 801b5fa:	692a      	ldr	r2, [r5, #16]
 801b5fc:	3202      	adds	r2, #2
 801b5fe:	0092      	lsls	r2, r2, #2
 801b600:	f105 010c 	add.w	r1, r5, #12
 801b604:	300c      	adds	r0, #12
 801b606:	f7ff fa74 	bl	801aaf2 <memcpy>
 801b60a:	2201      	movs	r2, #1
 801b60c:	4631      	mov	r1, r6
 801b60e:	4648      	mov	r0, r9
 801b610:	f000 fc46 	bl	801bea0 <__lshift>
 801b614:	f10a 0301 	add.w	r3, sl, #1
 801b618:	9300      	str	r3, [sp, #0]
 801b61a:	eb0a 030b 	add.w	r3, sl, fp
 801b61e:	9308      	str	r3, [sp, #32]
 801b620:	9b04      	ldr	r3, [sp, #16]
 801b622:	f003 0301 	and.w	r3, r3, #1
 801b626:	462f      	mov	r7, r5
 801b628:	9306      	str	r3, [sp, #24]
 801b62a:	4605      	mov	r5, r0
 801b62c:	9b00      	ldr	r3, [sp, #0]
 801b62e:	9802      	ldr	r0, [sp, #8]
 801b630:	4621      	mov	r1, r4
 801b632:	f103 3bff 	add.w	fp, r3, #4294967295
 801b636:	f7ff fa89 	bl	801ab4c <quorem>
 801b63a:	4603      	mov	r3, r0
 801b63c:	3330      	adds	r3, #48	@ 0x30
 801b63e:	9003      	str	r0, [sp, #12]
 801b640:	4639      	mov	r1, r7
 801b642:	9802      	ldr	r0, [sp, #8]
 801b644:	9309      	str	r3, [sp, #36]	@ 0x24
 801b646:	f000 fc97 	bl	801bf78 <__mcmp>
 801b64a:	462a      	mov	r2, r5
 801b64c:	9004      	str	r0, [sp, #16]
 801b64e:	4621      	mov	r1, r4
 801b650:	4648      	mov	r0, r9
 801b652:	f000 fcad 	bl	801bfb0 <__mdiff>
 801b656:	68c2      	ldr	r2, [r0, #12]
 801b658:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b65a:	4606      	mov	r6, r0
 801b65c:	bb02      	cbnz	r2, 801b6a0 <_dtoa_r+0xa40>
 801b65e:	4601      	mov	r1, r0
 801b660:	9802      	ldr	r0, [sp, #8]
 801b662:	f000 fc89 	bl	801bf78 <__mcmp>
 801b666:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b668:	4602      	mov	r2, r0
 801b66a:	4631      	mov	r1, r6
 801b66c:	4648      	mov	r0, r9
 801b66e:	920c      	str	r2, [sp, #48]	@ 0x30
 801b670:	9309      	str	r3, [sp, #36]	@ 0x24
 801b672:	f000 fa05 	bl	801ba80 <_Bfree>
 801b676:	9b07      	ldr	r3, [sp, #28]
 801b678:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b67a:	9e00      	ldr	r6, [sp, #0]
 801b67c:	ea42 0103 	orr.w	r1, r2, r3
 801b680:	9b06      	ldr	r3, [sp, #24]
 801b682:	4319      	orrs	r1, r3
 801b684:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b686:	d10d      	bne.n	801b6a4 <_dtoa_r+0xa44>
 801b688:	2b39      	cmp	r3, #57	@ 0x39
 801b68a:	d027      	beq.n	801b6dc <_dtoa_r+0xa7c>
 801b68c:	9a04      	ldr	r2, [sp, #16]
 801b68e:	2a00      	cmp	r2, #0
 801b690:	dd01      	ble.n	801b696 <_dtoa_r+0xa36>
 801b692:	9b03      	ldr	r3, [sp, #12]
 801b694:	3331      	adds	r3, #49	@ 0x31
 801b696:	f88b 3000 	strb.w	r3, [fp]
 801b69a:	e52e      	b.n	801b0fa <_dtoa_r+0x49a>
 801b69c:	4628      	mov	r0, r5
 801b69e:	e7b9      	b.n	801b614 <_dtoa_r+0x9b4>
 801b6a0:	2201      	movs	r2, #1
 801b6a2:	e7e2      	b.n	801b66a <_dtoa_r+0xa0a>
 801b6a4:	9904      	ldr	r1, [sp, #16]
 801b6a6:	2900      	cmp	r1, #0
 801b6a8:	db04      	blt.n	801b6b4 <_dtoa_r+0xa54>
 801b6aa:	9807      	ldr	r0, [sp, #28]
 801b6ac:	4301      	orrs	r1, r0
 801b6ae:	9806      	ldr	r0, [sp, #24]
 801b6b0:	4301      	orrs	r1, r0
 801b6b2:	d120      	bne.n	801b6f6 <_dtoa_r+0xa96>
 801b6b4:	2a00      	cmp	r2, #0
 801b6b6:	ddee      	ble.n	801b696 <_dtoa_r+0xa36>
 801b6b8:	9902      	ldr	r1, [sp, #8]
 801b6ba:	9300      	str	r3, [sp, #0]
 801b6bc:	2201      	movs	r2, #1
 801b6be:	4648      	mov	r0, r9
 801b6c0:	f000 fbee 	bl	801bea0 <__lshift>
 801b6c4:	4621      	mov	r1, r4
 801b6c6:	9002      	str	r0, [sp, #8]
 801b6c8:	f000 fc56 	bl	801bf78 <__mcmp>
 801b6cc:	2800      	cmp	r0, #0
 801b6ce:	9b00      	ldr	r3, [sp, #0]
 801b6d0:	dc02      	bgt.n	801b6d8 <_dtoa_r+0xa78>
 801b6d2:	d1e0      	bne.n	801b696 <_dtoa_r+0xa36>
 801b6d4:	07da      	lsls	r2, r3, #31
 801b6d6:	d5de      	bpl.n	801b696 <_dtoa_r+0xa36>
 801b6d8:	2b39      	cmp	r3, #57	@ 0x39
 801b6da:	d1da      	bne.n	801b692 <_dtoa_r+0xa32>
 801b6dc:	2339      	movs	r3, #57	@ 0x39
 801b6de:	f88b 3000 	strb.w	r3, [fp]
 801b6e2:	4633      	mov	r3, r6
 801b6e4:	461e      	mov	r6, r3
 801b6e6:	3b01      	subs	r3, #1
 801b6e8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801b6ec:	2a39      	cmp	r2, #57	@ 0x39
 801b6ee:	d04e      	beq.n	801b78e <_dtoa_r+0xb2e>
 801b6f0:	3201      	adds	r2, #1
 801b6f2:	701a      	strb	r2, [r3, #0]
 801b6f4:	e501      	b.n	801b0fa <_dtoa_r+0x49a>
 801b6f6:	2a00      	cmp	r2, #0
 801b6f8:	dd03      	ble.n	801b702 <_dtoa_r+0xaa2>
 801b6fa:	2b39      	cmp	r3, #57	@ 0x39
 801b6fc:	d0ee      	beq.n	801b6dc <_dtoa_r+0xa7c>
 801b6fe:	3301      	adds	r3, #1
 801b700:	e7c9      	b.n	801b696 <_dtoa_r+0xa36>
 801b702:	9a00      	ldr	r2, [sp, #0]
 801b704:	9908      	ldr	r1, [sp, #32]
 801b706:	f802 3c01 	strb.w	r3, [r2, #-1]
 801b70a:	428a      	cmp	r2, r1
 801b70c:	d028      	beq.n	801b760 <_dtoa_r+0xb00>
 801b70e:	9902      	ldr	r1, [sp, #8]
 801b710:	2300      	movs	r3, #0
 801b712:	220a      	movs	r2, #10
 801b714:	4648      	mov	r0, r9
 801b716:	f000 f9d5 	bl	801bac4 <__multadd>
 801b71a:	42af      	cmp	r7, r5
 801b71c:	9002      	str	r0, [sp, #8]
 801b71e:	f04f 0300 	mov.w	r3, #0
 801b722:	f04f 020a 	mov.w	r2, #10
 801b726:	4639      	mov	r1, r7
 801b728:	4648      	mov	r0, r9
 801b72a:	d107      	bne.n	801b73c <_dtoa_r+0xadc>
 801b72c:	f000 f9ca 	bl	801bac4 <__multadd>
 801b730:	4607      	mov	r7, r0
 801b732:	4605      	mov	r5, r0
 801b734:	9b00      	ldr	r3, [sp, #0]
 801b736:	3301      	adds	r3, #1
 801b738:	9300      	str	r3, [sp, #0]
 801b73a:	e777      	b.n	801b62c <_dtoa_r+0x9cc>
 801b73c:	f000 f9c2 	bl	801bac4 <__multadd>
 801b740:	4629      	mov	r1, r5
 801b742:	4607      	mov	r7, r0
 801b744:	2300      	movs	r3, #0
 801b746:	220a      	movs	r2, #10
 801b748:	4648      	mov	r0, r9
 801b74a:	f000 f9bb 	bl	801bac4 <__multadd>
 801b74e:	4605      	mov	r5, r0
 801b750:	e7f0      	b.n	801b734 <_dtoa_r+0xad4>
 801b752:	f1bb 0f00 	cmp.w	fp, #0
 801b756:	bfcc      	ite	gt
 801b758:	465e      	movgt	r6, fp
 801b75a:	2601      	movle	r6, #1
 801b75c:	4456      	add	r6, sl
 801b75e:	2700      	movs	r7, #0
 801b760:	9902      	ldr	r1, [sp, #8]
 801b762:	9300      	str	r3, [sp, #0]
 801b764:	2201      	movs	r2, #1
 801b766:	4648      	mov	r0, r9
 801b768:	f000 fb9a 	bl	801bea0 <__lshift>
 801b76c:	4621      	mov	r1, r4
 801b76e:	9002      	str	r0, [sp, #8]
 801b770:	f000 fc02 	bl	801bf78 <__mcmp>
 801b774:	2800      	cmp	r0, #0
 801b776:	dcb4      	bgt.n	801b6e2 <_dtoa_r+0xa82>
 801b778:	d102      	bne.n	801b780 <_dtoa_r+0xb20>
 801b77a:	9b00      	ldr	r3, [sp, #0]
 801b77c:	07db      	lsls	r3, r3, #31
 801b77e:	d4b0      	bmi.n	801b6e2 <_dtoa_r+0xa82>
 801b780:	4633      	mov	r3, r6
 801b782:	461e      	mov	r6, r3
 801b784:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801b788:	2a30      	cmp	r2, #48	@ 0x30
 801b78a:	d0fa      	beq.n	801b782 <_dtoa_r+0xb22>
 801b78c:	e4b5      	b.n	801b0fa <_dtoa_r+0x49a>
 801b78e:	459a      	cmp	sl, r3
 801b790:	d1a8      	bne.n	801b6e4 <_dtoa_r+0xa84>
 801b792:	2331      	movs	r3, #49	@ 0x31
 801b794:	f108 0801 	add.w	r8, r8, #1
 801b798:	f88a 3000 	strb.w	r3, [sl]
 801b79c:	e4ad      	b.n	801b0fa <_dtoa_r+0x49a>
 801b79e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801b7a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 801b7fc <_dtoa_r+0xb9c>
 801b7a4:	b11b      	cbz	r3, 801b7ae <_dtoa_r+0xb4e>
 801b7a6:	f10a 0308 	add.w	r3, sl, #8
 801b7aa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b7ac:	6013      	str	r3, [r2, #0]
 801b7ae:	4650      	mov	r0, sl
 801b7b0:	b017      	add	sp, #92	@ 0x5c
 801b7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b7b6:	9b07      	ldr	r3, [sp, #28]
 801b7b8:	2b01      	cmp	r3, #1
 801b7ba:	f77f ae2e 	ble.w	801b41a <_dtoa_r+0x7ba>
 801b7be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b7c0:	9308      	str	r3, [sp, #32]
 801b7c2:	2001      	movs	r0, #1
 801b7c4:	e64d      	b.n	801b462 <_dtoa_r+0x802>
 801b7c6:	f1bb 0f00 	cmp.w	fp, #0
 801b7ca:	f77f aed9 	ble.w	801b580 <_dtoa_r+0x920>
 801b7ce:	4656      	mov	r6, sl
 801b7d0:	9802      	ldr	r0, [sp, #8]
 801b7d2:	4621      	mov	r1, r4
 801b7d4:	f7ff f9ba 	bl	801ab4c <quorem>
 801b7d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 801b7dc:	f806 3b01 	strb.w	r3, [r6], #1
 801b7e0:	eba6 020a 	sub.w	r2, r6, sl
 801b7e4:	4593      	cmp	fp, r2
 801b7e6:	ddb4      	ble.n	801b752 <_dtoa_r+0xaf2>
 801b7e8:	9902      	ldr	r1, [sp, #8]
 801b7ea:	2300      	movs	r3, #0
 801b7ec:	220a      	movs	r2, #10
 801b7ee:	4648      	mov	r0, r9
 801b7f0:	f000 f968 	bl	801bac4 <__multadd>
 801b7f4:	9002      	str	r0, [sp, #8]
 801b7f6:	e7eb      	b.n	801b7d0 <_dtoa_r+0xb70>
 801b7f8:	080207f4 	.word	0x080207f4
 801b7fc:	08020778 	.word	0x08020778

0801b800 <_free_r>:
 801b800:	b538      	push	{r3, r4, r5, lr}
 801b802:	4605      	mov	r5, r0
 801b804:	2900      	cmp	r1, #0
 801b806:	d041      	beq.n	801b88c <_free_r+0x8c>
 801b808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b80c:	1f0c      	subs	r4, r1, #4
 801b80e:	2b00      	cmp	r3, #0
 801b810:	bfb8      	it	lt
 801b812:	18e4      	addlt	r4, r4, r3
 801b814:	f000 f8e8 	bl	801b9e8 <__malloc_lock>
 801b818:	4a1d      	ldr	r2, [pc, #116]	@ (801b890 <_free_r+0x90>)
 801b81a:	6813      	ldr	r3, [r2, #0]
 801b81c:	b933      	cbnz	r3, 801b82c <_free_r+0x2c>
 801b81e:	6063      	str	r3, [r4, #4]
 801b820:	6014      	str	r4, [r2, #0]
 801b822:	4628      	mov	r0, r5
 801b824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b828:	f000 b8e4 	b.w	801b9f4 <__malloc_unlock>
 801b82c:	42a3      	cmp	r3, r4
 801b82e:	d908      	bls.n	801b842 <_free_r+0x42>
 801b830:	6820      	ldr	r0, [r4, #0]
 801b832:	1821      	adds	r1, r4, r0
 801b834:	428b      	cmp	r3, r1
 801b836:	bf01      	itttt	eq
 801b838:	6819      	ldreq	r1, [r3, #0]
 801b83a:	685b      	ldreq	r3, [r3, #4]
 801b83c:	1809      	addeq	r1, r1, r0
 801b83e:	6021      	streq	r1, [r4, #0]
 801b840:	e7ed      	b.n	801b81e <_free_r+0x1e>
 801b842:	461a      	mov	r2, r3
 801b844:	685b      	ldr	r3, [r3, #4]
 801b846:	b10b      	cbz	r3, 801b84c <_free_r+0x4c>
 801b848:	42a3      	cmp	r3, r4
 801b84a:	d9fa      	bls.n	801b842 <_free_r+0x42>
 801b84c:	6811      	ldr	r1, [r2, #0]
 801b84e:	1850      	adds	r0, r2, r1
 801b850:	42a0      	cmp	r0, r4
 801b852:	d10b      	bne.n	801b86c <_free_r+0x6c>
 801b854:	6820      	ldr	r0, [r4, #0]
 801b856:	4401      	add	r1, r0
 801b858:	1850      	adds	r0, r2, r1
 801b85a:	4283      	cmp	r3, r0
 801b85c:	6011      	str	r1, [r2, #0]
 801b85e:	d1e0      	bne.n	801b822 <_free_r+0x22>
 801b860:	6818      	ldr	r0, [r3, #0]
 801b862:	685b      	ldr	r3, [r3, #4]
 801b864:	6053      	str	r3, [r2, #4]
 801b866:	4408      	add	r0, r1
 801b868:	6010      	str	r0, [r2, #0]
 801b86a:	e7da      	b.n	801b822 <_free_r+0x22>
 801b86c:	d902      	bls.n	801b874 <_free_r+0x74>
 801b86e:	230c      	movs	r3, #12
 801b870:	602b      	str	r3, [r5, #0]
 801b872:	e7d6      	b.n	801b822 <_free_r+0x22>
 801b874:	6820      	ldr	r0, [r4, #0]
 801b876:	1821      	adds	r1, r4, r0
 801b878:	428b      	cmp	r3, r1
 801b87a:	bf04      	itt	eq
 801b87c:	6819      	ldreq	r1, [r3, #0]
 801b87e:	685b      	ldreq	r3, [r3, #4]
 801b880:	6063      	str	r3, [r4, #4]
 801b882:	bf04      	itt	eq
 801b884:	1809      	addeq	r1, r1, r0
 801b886:	6021      	streq	r1, [r4, #0]
 801b888:	6054      	str	r4, [r2, #4]
 801b88a:	e7ca      	b.n	801b822 <_free_r+0x22>
 801b88c:	bd38      	pop	{r3, r4, r5, pc}
 801b88e:	bf00      	nop
 801b890:	2000bcd0 	.word	0x2000bcd0

0801b894 <malloc>:
 801b894:	4b02      	ldr	r3, [pc, #8]	@ (801b8a0 <malloc+0xc>)
 801b896:	4601      	mov	r1, r0
 801b898:	6818      	ldr	r0, [r3, #0]
 801b89a:	f000 b825 	b.w	801b8e8 <_malloc_r>
 801b89e:	bf00      	nop
 801b8a0:	20000160 	.word	0x20000160

0801b8a4 <sbrk_aligned>:
 801b8a4:	b570      	push	{r4, r5, r6, lr}
 801b8a6:	4e0f      	ldr	r6, [pc, #60]	@ (801b8e4 <sbrk_aligned+0x40>)
 801b8a8:	460c      	mov	r4, r1
 801b8aa:	6831      	ldr	r1, [r6, #0]
 801b8ac:	4605      	mov	r5, r0
 801b8ae:	b911      	cbnz	r1, 801b8b6 <sbrk_aligned+0x12>
 801b8b0:	f002 fa64 	bl	801dd7c <_sbrk_r>
 801b8b4:	6030      	str	r0, [r6, #0]
 801b8b6:	4621      	mov	r1, r4
 801b8b8:	4628      	mov	r0, r5
 801b8ba:	f002 fa5f 	bl	801dd7c <_sbrk_r>
 801b8be:	1c43      	adds	r3, r0, #1
 801b8c0:	d103      	bne.n	801b8ca <sbrk_aligned+0x26>
 801b8c2:	f04f 34ff 	mov.w	r4, #4294967295
 801b8c6:	4620      	mov	r0, r4
 801b8c8:	bd70      	pop	{r4, r5, r6, pc}
 801b8ca:	1cc4      	adds	r4, r0, #3
 801b8cc:	f024 0403 	bic.w	r4, r4, #3
 801b8d0:	42a0      	cmp	r0, r4
 801b8d2:	d0f8      	beq.n	801b8c6 <sbrk_aligned+0x22>
 801b8d4:	1a21      	subs	r1, r4, r0
 801b8d6:	4628      	mov	r0, r5
 801b8d8:	f002 fa50 	bl	801dd7c <_sbrk_r>
 801b8dc:	3001      	adds	r0, #1
 801b8de:	d1f2      	bne.n	801b8c6 <sbrk_aligned+0x22>
 801b8e0:	e7ef      	b.n	801b8c2 <sbrk_aligned+0x1e>
 801b8e2:	bf00      	nop
 801b8e4:	2000bccc 	.word	0x2000bccc

0801b8e8 <_malloc_r>:
 801b8e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b8ec:	1ccd      	adds	r5, r1, #3
 801b8ee:	f025 0503 	bic.w	r5, r5, #3
 801b8f2:	3508      	adds	r5, #8
 801b8f4:	2d0c      	cmp	r5, #12
 801b8f6:	bf38      	it	cc
 801b8f8:	250c      	movcc	r5, #12
 801b8fa:	2d00      	cmp	r5, #0
 801b8fc:	4606      	mov	r6, r0
 801b8fe:	db01      	blt.n	801b904 <_malloc_r+0x1c>
 801b900:	42a9      	cmp	r1, r5
 801b902:	d904      	bls.n	801b90e <_malloc_r+0x26>
 801b904:	230c      	movs	r3, #12
 801b906:	6033      	str	r3, [r6, #0]
 801b908:	2000      	movs	r0, #0
 801b90a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b90e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801b9e4 <_malloc_r+0xfc>
 801b912:	f000 f869 	bl	801b9e8 <__malloc_lock>
 801b916:	f8d8 3000 	ldr.w	r3, [r8]
 801b91a:	461c      	mov	r4, r3
 801b91c:	bb44      	cbnz	r4, 801b970 <_malloc_r+0x88>
 801b91e:	4629      	mov	r1, r5
 801b920:	4630      	mov	r0, r6
 801b922:	f7ff ffbf 	bl	801b8a4 <sbrk_aligned>
 801b926:	1c43      	adds	r3, r0, #1
 801b928:	4604      	mov	r4, r0
 801b92a:	d158      	bne.n	801b9de <_malloc_r+0xf6>
 801b92c:	f8d8 4000 	ldr.w	r4, [r8]
 801b930:	4627      	mov	r7, r4
 801b932:	2f00      	cmp	r7, #0
 801b934:	d143      	bne.n	801b9be <_malloc_r+0xd6>
 801b936:	2c00      	cmp	r4, #0
 801b938:	d04b      	beq.n	801b9d2 <_malloc_r+0xea>
 801b93a:	6823      	ldr	r3, [r4, #0]
 801b93c:	4639      	mov	r1, r7
 801b93e:	4630      	mov	r0, r6
 801b940:	eb04 0903 	add.w	r9, r4, r3
 801b944:	f002 fa1a 	bl	801dd7c <_sbrk_r>
 801b948:	4581      	cmp	r9, r0
 801b94a:	d142      	bne.n	801b9d2 <_malloc_r+0xea>
 801b94c:	6821      	ldr	r1, [r4, #0]
 801b94e:	1a6d      	subs	r5, r5, r1
 801b950:	4629      	mov	r1, r5
 801b952:	4630      	mov	r0, r6
 801b954:	f7ff ffa6 	bl	801b8a4 <sbrk_aligned>
 801b958:	3001      	adds	r0, #1
 801b95a:	d03a      	beq.n	801b9d2 <_malloc_r+0xea>
 801b95c:	6823      	ldr	r3, [r4, #0]
 801b95e:	442b      	add	r3, r5
 801b960:	6023      	str	r3, [r4, #0]
 801b962:	f8d8 3000 	ldr.w	r3, [r8]
 801b966:	685a      	ldr	r2, [r3, #4]
 801b968:	bb62      	cbnz	r2, 801b9c4 <_malloc_r+0xdc>
 801b96a:	f8c8 7000 	str.w	r7, [r8]
 801b96e:	e00f      	b.n	801b990 <_malloc_r+0xa8>
 801b970:	6822      	ldr	r2, [r4, #0]
 801b972:	1b52      	subs	r2, r2, r5
 801b974:	d420      	bmi.n	801b9b8 <_malloc_r+0xd0>
 801b976:	2a0b      	cmp	r2, #11
 801b978:	d917      	bls.n	801b9aa <_malloc_r+0xc2>
 801b97a:	1961      	adds	r1, r4, r5
 801b97c:	42a3      	cmp	r3, r4
 801b97e:	6025      	str	r5, [r4, #0]
 801b980:	bf18      	it	ne
 801b982:	6059      	strne	r1, [r3, #4]
 801b984:	6863      	ldr	r3, [r4, #4]
 801b986:	bf08      	it	eq
 801b988:	f8c8 1000 	streq.w	r1, [r8]
 801b98c:	5162      	str	r2, [r4, r5]
 801b98e:	604b      	str	r3, [r1, #4]
 801b990:	4630      	mov	r0, r6
 801b992:	f000 f82f 	bl	801b9f4 <__malloc_unlock>
 801b996:	f104 000b 	add.w	r0, r4, #11
 801b99a:	1d23      	adds	r3, r4, #4
 801b99c:	f020 0007 	bic.w	r0, r0, #7
 801b9a0:	1ac2      	subs	r2, r0, r3
 801b9a2:	bf1c      	itt	ne
 801b9a4:	1a1b      	subne	r3, r3, r0
 801b9a6:	50a3      	strne	r3, [r4, r2]
 801b9a8:	e7af      	b.n	801b90a <_malloc_r+0x22>
 801b9aa:	6862      	ldr	r2, [r4, #4]
 801b9ac:	42a3      	cmp	r3, r4
 801b9ae:	bf0c      	ite	eq
 801b9b0:	f8c8 2000 	streq.w	r2, [r8]
 801b9b4:	605a      	strne	r2, [r3, #4]
 801b9b6:	e7eb      	b.n	801b990 <_malloc_r+0xa8>
 801b9b8:	4623      	mov	r3, r4
 801b9ba:	6864      	ldr	r4, [r4, #4]
 801b9bc:	e7ae      	b.n	801b91c <_malloc_r+0x34>
 801b9be:	463c      	mov	r4, r7
 801b9c0:	687f      	ldr	r7, [r7, #4]
 801b9c2:	e7b6      	b.n	801b932 <_malloc_r+0x4a>
 801b9c4:	461a      	mov	r2, r3
 801b9c6:	685b      	ldr	r3, [r3, #4]
 801b9c8:	42a3      	cmp	r3, r4
 801b9ca:	d1fb      	bne.n	801b9c4 <_malloc_r+0xdc>
 801b9cc:	2300      	movs	r3, #0
 801b9ce:	6053      	str	r3, [r2, #4]
 801b9d0:	e7de      	b.n	801b990 <_malloc_r+0xa8>
 801b9d2:	230c      	movs	r3, #12
 801b9d4:	6033      	str	r3, [r6, #0]
 801b9d6:	4630      	mov	r0, r6
 801b9d8:	f000 f80c 	bl	801b9f4 <__malloc_unlock>
 801b9dc:	e794      	b.n	801b908 <_malloc_r+0x20>
 801b9de:	6005      	str	r5, [r0, #0]
 801b9e0:	e7d6      	b.n	801b990 <_malloc_r+0xa8>
 801b9e2:	bf00      	nop
 801b9e4:	2000bcd0 	.word	0x2000bcd0

0801b9e8 <__malloc_lock>:
 801b9e8:	4801      	ldr	r0, [pc, #4]	@ (801b9f0 <__malloc_lock+0x8>)
 801b9ea:	f7ff b880 	b.w	801aaee <__retarget_lock_acquire_recursive>
 801b9ee:	bf00      	nop
 801b9f0:	2000bcc8 	.word	0x2000bcc8

0801b9f4 <__malloc_unlock>:
 801b9f4:	4801      	ldr	r0, [pc, #4]	@ (801b9fc <__malloc_unlock+0x8>)
 801b9f6:	f7ff b87b 	b.w	801aaf0 <__retarget_lock_release_recursive>
 801b9fa:	bf00      	nop
 801b9fc:	2000bcc8 	.word	0x2000bcc8

0801ba00 <_Balloc>:
 801ba00:	b570      	push	{r4, r5, r6, lr}
 801ba02:	69c6      	ldr	r6, [r0, #28]
 801ba04:	4604      	mov	r4, r0
 801ba06:	460d      	mov	r5, r1
 801ba08:	b976      	cbnz	r6, 801ba28 <_Balloc+0x28>
 801ba0a:	2010      	movs	r0, #16
 801ba0c:	f7ff ff42 	bl	801b894 <malloc>
 801ba10:	4602      	mov	r2, r0
 801ba12:	61e0      	str	r0, [r4, #28]
 801ba14:	b920      	cbnz	r0, 801ba20 <_Balloc+0x20>
 801ba16:	4b18      	ldr	r3, [pc, #96]	@ (801ba78 <_Balloc+0x78>)
 801ba18:	4818      	ldr	r0, [pc, #96]	@ (801ba7c <_Balloc+0x7c>)
 801ba1a:	216b      	movs	r1, #107	@ 0x6b
 801ba1c:	f7ff f878 	bl	801ab10 <__assert_func>
 801ba20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801ba24:	6006      	str	r6, [r0, #0]
 801ba26:	60c6      	str	r6, [r0, #12]
 801ba28:	69e6      	ldr	r6, [r4, #28]
 801ba2a:	68f3      	ldr	r3, [r6, #12]
 801ba2c:	b183      	cbz	r3, 801ba50 <_Balloc+0x50>
 801ba2e:	69e3      	ldr	r3, [r4, #28]
 801ba30:	68db      	ldr	r3, [r3, #12]
 801ba32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801ba36:	b9b8      	cbnz	r0, 801ba68 <_Balloc+0x68>
 801ba38:	2101      	movs	r1, #1
 801ba3a:	fa01 f605 	lsl.w	r6, r1, r5
 801ba3e:	1d72      	adds	r2, r6, #5
 801ba40:	0092      	lsls	r2, r2, #2
 801ba42:	4620      	mov	r0, r4
 801ba44:	f002 f9bb 	bl	801ddbe <_calloc_r>
 801ba48:	b160      	cbz	r0, 801ba64 <_Balloc+0x64>
 801ba4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801ba4e:	e00e      	b.n	801ba6e <_Balloc+0x6e>
 801ba50:	2221      	movs	r2, #33	@ 0x21
 801ba52:	2104      	movs	r1, #4
 801ba54:	4620      	mov	r0, r4
 801ba56:	f002 f9b2 	bl	801ddbe <_calloc_r>
 801ba5a:	69e3      	ldr	r3, [r4, #28]
 801ba5c:	60f0      	str	r0, [r6, #12]
 801ba5e:	68db      	ldr	r3, [r3, #12]
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d1e4      	bne.n	801ba2e <_Balloc+0x2e>
 801ba64:	2000      	movs	r0, #0
 801ba66:	bd70      	pop	{r4, r5, r6, pc}
 801ba68:	6802      	ldr	r2, [r0, #0]
 801ba6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801ba6e:	2300      	movs	r3, #0
 801ba70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801ba74:	e7f7      	b.n	801ba66 <_Balloc+0x66>
 801ba76:	bf00      	nop
 801ba78:	08020785 	.word	0x08020785
 801ba7c:	08020805 	.word	0x08020805

0801ba80 <_Bfree>:
 801ba80:	b570      	push	{r4, r5, r6, lr}
 801ba82:	69c6      	ldr	r6, [r0, #28]
 801ba84:	4605      	mov	r5, r0
 801ba86:	460c      	mov	r4, r1
 801ba88:	b976      	cbnz	r6, 801baa8 <_Bfree+0x28>
 801ba8a:	2010      	movs	r0, #16
 801ba8c:	f7ff ff02 	bl	801b894 <malloc>
 801ba90:	4602      	mov	r2, r0
 801ba92:	61e8      	str	r0, [r5, #28]
 801ba94:	b920      	cbnz	r0, 801baa0 <_Bfree+0x20>
 801ba96:	4b09      	ldr	r3, [pc, #36]	@ (801babc <_Bfree+0x3c>)
 801ba98:	4809      	ldr	r0, [pc, #36]	@ (801bac0 <_Bfree+0x40>)
 801ba9a:	218f      	movs	r1, #143	@ 0x8f
 801ba9c:	f7ff f838 	bl	801ab10 <__assert_func>
 801baa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801baa4:	6006      	str	r6, [r0, #0]
 801baa6:	60c6      	str	r6, [r0, #12]
 801baa8:	b13c      	cbz	r4, 801baba <_Bfree+0x3a>
 801baaa:	69eb      	ldr	r3, [r5, #28]
 801baac:	6862      	ldr	r2, [r4, #4]
 801baae:	68db      	ldr	r3, [r3, #12]
 801bab0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801bab4:	6021      	str	r1, [r4, #0]
 801bab6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801baba:	bd70      	pop	{r4, r5, r6, pc}
 801babc:	08020785 	.word	0x08020785
 801bac0:	08020805 	.word	0x08020805

0801bac4 <__multadd>:
 801bac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bac8:	690d      	ldr	r5, [r1, #16]
 801baca:	4607      	mov	r7, r0
 801bacc:	460c      	mov	r4, r1
 801bace:	461e      	mov	r6, r3
 801bad0:	f101 0c14 	add.w	ip, r1, #20
 801bad4:	2000      	movs	r0, #0
 801bad6:	f8dc 3000 	ldr.w	r3, [ip]
 801bada:	b299      	uxth	r1, r3
 801badc:	fb02 6101 	mla	r1, r2, r1, r6
 801bae0:	0c1e      	lsrs	r6, r3, #16
 801bae2:	0c0b      	lsrs	r3, r1, #16
 801bae4:	fb02 3306 	mla	r3, r2, r6, r3
 801bae8:	b289      	uxth	r1, r1
 801baea:	3001      	adds	r0, #1
 801baec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801baf0:	4285      	cmp	r5, r0
 801baf2:	f84c 1b04 	str.w	r1, [ip], #4
 801baf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801bafa:	dcec      	bgt.n	801bad6 <__multadd+0x12>
 801bafc:	b30e      	cbz	r6, 801bb42 <__multadd+0x7e>
 801bafe:	68a3      	ldr	r3, [r4, #8]
 801bb00:	42ab      	cmp	r3, r5
 801bb02:	dc19      	bgt.n	801bb38 <__multadd+0x74>
 801bb04:	6861      	ldr	r1, [r4, #4]
 801bb06:	4638      	mov	r0, r7
 801bb08:	3101      	adds	r1, #1
 801bb0a:	f7ff ff79 	bl	801ba00 <_Balloc>
 801bb0e:	4680      	mov	r8, r0
 801bb10:	b928      	cbnz	r0, 801bb1e <__multadd+0x5a>
 801bb12:	4602      	mov	r2, r0
 801bb14:	4b0c      	ldr	r3, [pc, #48]	@ (801bb48 <__multadd+0x84>)
 801bb16:	480d      	ldr	r0, [pc, #52]	@ (801bb4c <__multadd+0x88>)
 801bb18:	21ba      	movs	r1, #186	@ 0xba
 801bb1a:	f7fe fff9 	bl	801ab10 <__assert_func>
 801bb1e:	6922      	ldr	r2, [r4, #16]
 801bb20:	3202      	adds	r2, #2
 801bb22:	f104 010c 	add.w	r1, r4, #12
 801bb26:	0092      	lsls	r2, r2, #2
 801bb28:	300c      	adds	r0, #12
 801bb2a:	f7fe ffe2 	bl	801aaf2 <memcpy>
 801bb2e:	4621      	mov	r1, r4
 801bb30:	4638      	mov	r0, r7
 801bb32:	f7ff ffa5 	bl	801ba80 <_Bfree>
 801bb36:	4644      	mov	r4, r8
 801bb38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801bb3c:	3501      	adds	r5, #1
 801bb3e:	615e      	str	r6, [r3, #20]
 801bb40:	6125      	str	r5, [r4, #16]
 801bb42:	4620      	mov	r0, r4
 801bb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bb48:	080207f4 	.word	0x080207f4
 801bb4c:	08020805 	.word	0x08020805

0801bb50 <__s2b>:
 801bb50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bb54:	460c      	mov	r4, r1
 801bb56:	4615      	mov	r5, r2
 801bb58:	461f      	mov	r7, r3
 801bb5a:	2209      	movs	r2, #9
 801bb5c:	3308      	adds	r3, #8
 801bb5e:	4606      	mov	r6, r0
 801bb60:	fb93 f3f2 	sdiv	r3, r3, r2
 801bb64:	2100      	movs	r1, #0
 801bb66:	2201      	movs	r2, #1
 801bb68:	429a      	cmp	r2, r3
 801bb6a:	db09      	blt.n	801bb80 <__s2b+0x30>
 801bb6c:	4630      	mov	r0, r6
 801bb6e:	f7ff ff47 	bl	801ba00 <_Balloc>
 801bb72:	b940      	cbnz	r0, 801bb86 <__s2b+0x36>
 801bb74:	4602      	mov	r2, r0
 801bb76:	4b19      	ldr	r3, [pc, #100]	@ (801bbdc <__s2b+0x8c>)
 801bb78:	4819      	ldr	r0, [pc, #100]	@ (801bbe0 <__s2b+0x90>)
 801bb7a:	21d3      	movs	r1, #211	@ 0xd3
 801bb7c:	f7fe ffc8 	bl	801ab10 <__assert_func>
 801bb80:	0052      	lsls	r2, r2, #1
 801bb82:	3101      	adds	r1, #1
 801bb84:	e7f0      	b.n	801bb68 <__s2b+0x18>
 801bb86:	9b08      	ldr	r3, [sp, #32]
 801bb88:	6143      	str	r3, [r0, #20]
 801bb8a:	2d09      	cmp	r5, #9
 801bb8c:	f04f 0301 	mov.w	r3, #1
 801bb90:	6103      	str	r3, [r0, #16]
 801bb92:	dd16      	ble.n	801bbc2 <__s2b+0x72>
 801bb94:	f104 0909 	add.w	r9, r4, #9
 801bb98:	46c8      	mov	r8, r9
 801bb9a:	442c      	add	r4, r5
 801bb9c:	f818 3b01 	ldrb.w	r3, [r8], #1
 801bba0:	4601      	mov	r1, r0
 801bba2:	3b30      	subs	r3, #48	@ 0x30
 801bba4:	220a      	movs	r2, #10
 801bba6:	4630      	mov	r0, r6
 801bba8:	f7ff ff8c 	bl	801bac4 <__multadd>
 801bbac:	45a0      	cmp	r8, r4
 801bbae:	d1f5      	bne.n	801bb9c <__s2b+0x4c>
 801bbb0:	f1a5 0408 	sub.w	r4, r5, #8
 801bbb4:	444c      	add	r4, r9
 801bbb6:	1b2d      	subs	r5, r5, r4
 801bbb8:	1963      	adds	r3, r4, r5
 801bbba:	42bb      	cmp	r3, r7
 801bbbc:	db04      	blt.n	801bbc8 <__s2b+0x78>
 801bbbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bbc2:	340a      	adds	r4, #10
 801bbc4:	2509      	movs	r5, #9
 801bbc6:	e7f6      	b.n	801bbb6 <__s2b+0x66>
 801bbc8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801bbcc:	4601      	mov	r1, r0
 801bbce:	3b30      	subs	r3, #48	@ 0x30
 801bbd0:	220a      	movs	r2, #10
 801bbd2:	4630      	mov	r0, r6
 801bbd4:	f7ff ff76 	bl	801bac4 <__multadd>
 801bbd8:	e7ee      	b.n	801bbb8 <__s2b+0x68>
 801bbda:	bf00      	nop
 801bbdc:	080207f4 	.word	0x080207f4
 801bbe0:	08020805 	.word	0x08020805

0801bbe4 <__hi0bits>:
 801bbe4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801bbe8:	4603      	mov	r3, r0
 801bbea:	bf36      	itet	cc
 801bbec:	0403      	lslcc	r3, r0, #16
 801bbee:	2000      	movcs	r0, #0
 801bbf0:	2010      	movcc	r0, #16
 801bbf2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bbf6:	bf3c      	itt	cc
 801bbf8:	021b      	lslcc	r3, r3, #8
 801bbfa:	3008      	addcc	r0, #8
 801bbfc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bc00:	bf3c      	itt	cc
 801bc02:	011b      	lslcc	r3, r3, #4
 801bc04:	3004      	addcc	r0, #4
 801bc06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bc0a:	bf3c      	itt	cc
 801bc0c:	009b      	lslcc	r3, r3, #2
 801bc0e:	3002      	addcc	r0, #2
 801bc10:	2b00      	cmp	r3, #0
 801bc12:	db05      	blt.n	801bc20 <__hi0bits+0x3c>
 801bc14:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801bc18:	f100 0001 	add.w	r0, r0, #1
 801bc1c:	bf08      	it	eq
 801bc1e:	2020      	moveq	r0, #32
 801bc20:	4770      	bx	lr

0801bc22 <__lo0bits>:
 801bc22:	6803      	ldr	r3, [r0, #0]
 801bc24:	4602      	mov	r2, r0
 801bc26:	f013 0007 	ands.w	r0, r3, #7
 801bc2a:	d00b      	beq.n	801bc44 <__lo0bits+0x22>
 801bc2c:	07d9      	lsls	r1, r3, #31
 801bc2e:	d421      	bmi.n	801bc74 <__lo0bits+0x52>
 801bc30:	0798      	lsls	r0, r3, #30
 801bc32:	bf49      	itett	mi
 801bc34:	085b      	lsrmi	r3, r3, #1
 801bc36:	089b      	lsrpl	r3, r3, #2
 801bc38:	2001      	movmi	r0, #1
 801bc3a:	6013      	strmi	r3, [r2, #0]
 801bc3c:	bf5c      	itt	pl
 801bc3e:	6013      	strpl	r3, [r2, #0]
 801bc40:	2002      	movpl	r0, #2
 801bc42:	4770      	bx	lr
 801bc44:	b299      	uxth	r1, r3
 801bc46:	b909      	cbnz	r1, 801bc4c <__lo0bits+0x2a>
 801bc48:	0c1b      	lsrs	r3, r3, #16
 801bc4a:	2010      	movs	r0, #16
 801bc4c:	b2d9      	uxtb	r1, r3
 801bc4e:	b909      	cbnz	r1, 801bc54 <__lo0bits+0x32>
 801bc50:	3008      	adds	r0, #8
 801bc52:	0a1b      	lsrs	r3, r3, #8
 801bc54:	0719      	lsls	r1, r3, #28
 801bc56:	bf04      	itt	eq
 801bc58:	091b      	lsreq	r3, r3, #4
 801bc5a:	3004      	addeq	r0, #4
 801bc5c:	0799      	lsls	r1, r3, #30
 801bc5e:	bf04      	itt	eq
 801bc60:	089b      	lsreq	r3, r3, #2
 801bc62:	3002      	addeq	r0, #2
 801bc64:	07d9      	lsls	r1, r3, #31
 801bc66:	d403      	bmi.n	801bc70 <__lo0bits+0x4e>
 801bc68:	085b      	lsrs	r3, r3, #1
 801bc6a:	f100 0001 	add.w	r0, r0, #1
 801bc6e:	d003      	beq.n	801bc78 <__lo0bits+0x56>
 801bc70:	6013      	str	r3, [r2, #0]
 801bc72:	4770      	bx	lr
 801bc74:	2000      	movs	r0, #0
 801bc76:	4770      	bx	lr
 801bc78:	2020      	movs	r0, #32
 801bc7a:	4770      	bx	lr

0801bc7c <__i2b>:
 801bc7c:	b510      	push	{r4, lr}
 801bc7e:	460c      	mov	r4, r1
 801bc80:	2101      	movs	r1, #1
 801bc82:	f7ff febd 	bl	801ba00 <_Balloc>
 801bc86:	4602      	mov	r2, r0
 801bc88:	b928      	cbnz	r0, 801bc96 <__i2b+0x1a>
 801bc8a:	4b05      	ldr	r3, [pc, #20]	@ (801bca0 <__i2b+0x24>)
 801bc8c:	4805      	ldr	r0, [pc, #20]	@ (801bca4 <__i2b+0x28>)
 801bc8e:	f240 1145 	movw	r1, #325	@ 0x145
 801bc92:	f7fe ff3d 	bl	801ab10 <__assert_func>
 801bc96:	2301      	movs	r3, #1
 801bc98:	6144      	str	r4, [r0, #20]
 801bc9a:	6103      	str	r3, [r0, #16]
 801bc9c:	bd10      	pop	{r4, pc}
 801bc9e:	bf00      	nop
 801bca0:	080207f4 	.word	0x080207f4
 801bca4:	08020805 	.word	0x08020805

0801bca8 <__multiply>:
 801bca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcac:	4617      	mov	r7, r2
 801bcae:	690a      	ldr	r2, [r1, #16]
 801bcb0:	693b      	ldr	r3, [r7, #16]
 801bcb2:	429a      	cmp	r2, r3
 801bcb4:	bfa8      	it	ge
 801bcb6:	463b      	movge	r3, r7
 801bcb8:	4689      	mov	r9, r1
 801bcba:	bfa4      	itt	ge
 801bcbc:	460f      	movge	r7, r1
 801bcbe:	4699      	movge	r9, r3
 801bcc0:	693d      	ldr	r5, [r7, #16]
 801bcc2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801bcc6:	68bb      	ldr	r3, [r7, #8]
 801bcc8:	6879      	ldr	r1, [r7, #4]
 801bcca:	eb05 060a 	add.w	r6, r5, sl
 801bcce:	42b3      	cmp	r3, r6
 801bcd0:	b085      	sub	sp, #20
 801bcd2:	bfb8      	it	lt
 801bcd4:	3101      	addlt	r1, #1
 801bcd6:	f7ff fe93 	bl	801ba00 <_Balloc>
 801bcda:	b930      	cbnz	r0, 801bcea <__multiply+0x42>
 801bcdc:	4602      	mov	r2, r0
 801bcde:	4b41      	ldr	r3, [pc, #260]	@ (801bde4 <__multiply+0x13c>)
 801bce0:	4841      	ldr	r0, [pc, #260]	@ (801bde8 <__multiply+0x140>)
 801bce2:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801bce6:	f7fe ff13 	bl	801ab10 <__assert_func>
 801bcea:	f100 0414 	add.w	r4, r0, #20
 801bcee:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 801bcf2:	4623      	mov	r3, r4
 801bcf4:	2200      	movs	r2, #0
 801bcf6:	4573      	cmp	r3, lr
 801bcf8:	d320      	bcc.n	801bd3c <__multiply+0x94>
 801bcfa:	f107 0814 	add.w	r8, r7, #20
 801bcfe:	f109 0114 	add.w	r1, r9, #20
 801bd02:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 801bd06:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 801bd0a:	9302      	str	r3, [sp, #8]
 801bd0c:	1beb      	subs	r3, r5, r7
 801bd0e:	3b15      	subs	r3, #21
 801bd10:	f023 0303 	bic.w	r3, r3, #3
 801bd14:	3304      	adds	r3, #4
 801bd16:	3715      	adds	r7, #21
 801bd18:	42bd      	cmp	r5, r7
 801bd1a:	bf38      	it	cc
 801bd1c:	2304      	movcc	r3, #4
 801bd1e:	9301      	str	r3, [sp, #4]
 801bd20:	9b02      	ldr	r3, [sp, #8]
 801bd22:	9103      	str	r1, [sp, #12]
 801bd24:	428b      	cmp	r3, r1
 801bd26:	d80c      	bhi.n	801bd42 <__multiply+0x9a>
 801bd28:	2e00      	cmp	r6, #0
 801bd2a:	dd03      	ble.n	801bd34 <__multiply+0x8c>
 801bd2c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 801bd30:	2b00      	cmp	r3, #0
 801bd32:	d055      	beq.n	801bde0 <__multiply+0x138>
 801bd34:	6106      	str	r6, [r0, #16]
 801bd36:	b005      	add	sp, #20
 801bd38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd3c:	f843 2b04 	str.w	r2, [r3], #4
 801bd40:	e7d9      	b.n	801bcf6 <__multiply+0x4e>
 801bd42:	f8b1 a000 	ldrh.w	sl, [r1]
 801bd46:	f1ba 0f00 	cmp.w	sl, #0
 801bd4a:	d01f      	beq.n	801bd8c <__multiply+0xe4>
 801bd4c:	46c4      	mov	ip, r8
 801bd4e:	46a1      	mov	r9, r4
 801bd50:	2700      	movs	r7, #0
 801bd52:	f85c 2b04 	ldr.w	r2, [ip], #4
 801bd56:	f8d9 3000 	ldr.w	r3, [r9]
 801bd5a:	fa1f fb82 	uxth.w	fp, r2
 801bd5e:	b29b      	uxth	r3, r3
 801bd60:	fb0a 330b 	mla	r3, sl, fp, r3
 801bd64:	443b      	add	r3, r7
 801bd66:	f8d9 7000 	ldr.w	r7, [r9]
 801bd6a:	0c12      	lsrs	r2, r2, #16
 801bd6c:	0c3f      	lsrs	r7, r7, #16
 801bd6e:	fb0a 7202 	mla	r2, sl, r2, r7
 801bd72:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 801bd76:	b29b      	uxth	r3, r3
 801bd78:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bd7c:	4565      	cmp	r5, ip
 801bd7e:	f849 3b04 	str.w	r3, [r9], #4
 801bd82:	ea4f 4712 	mov.w	r7, r2, lsr #16
 801bd86:	d8e4      	bhi.n	801bd52 <__multiply+0xaa>
 801bd88:	9b01      	ldr	r3, [sp, #4]
 801bd8a:	50e7      	str	r7, [r4, r3]
 801bd8c:	9b03      	ldr	r3, [sp, #12]
 801bd8e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801bd92:	3104      	adds	r1, #4
 801bd94:	f1b9 0f00 	cmp.w	r9, #0
 801bd98:	d020      	beq.n	801bddc <__multiply+0x134>
 801bd9a:	6823      	ldr	r3, [r4, #0]
 801bd9c:	4647      	mov	r7, r8
 801bd9e:	46a4      	mov	ip, r4
 801bda0:	f04f 0a00 	mov.w	sl, #0
 801bda4:	f8b7 b000 	ldrh.w	fp, [r7]
 801bda8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 801bdac:	fb09 220b 	mla	r2, r9, fp, r2
 801bdb0:	4452      	add	r2, sl
 801bdb2:	b29b      	uxth	r3, r3
 801bdb4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801bdb8:	f84c 3b04 	str.w	r3, [ip], #4
 801bdbc:	f857 3b04 	ldr.w	r3, [r7], #4
 801bdc0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bdc4:	f8bc 3000 	ldrh.w	r3, [ip]
 801bdc8:	fb09 330a 	mla	r3, r9, sl, r3
 801bdcc:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801bdd0:	42bd      	cmp	r5, r7
 801bdd2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801bdd6:	d8e5      	bhi.n	801bda4 <__multiply+0xfc>
 801bdd8:	9a01      	ldr	r2, [sp, #4]
 801bdda:	50a3      	str	r3, [r4, r2]
 801bddc:	3404      	adds	r4, #4
 801bdde:	e79f      	b.n	801bd20 <__multiply+0x78>
 801bde0:	3e01      	subs	r6, #1
 801bde2:	e7a1      	b.n	801bd28 <__multiply+0x80>
 801bde4:	080207f4 	.word	0x080207f4
 801bde8:	08020805 	.word	0x08020805

0801bdec <__pow5mult>:
 801bdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bdf0:	4615      	mov	r5, r2
 801bdf2:	f012 0203 	ands.w	r2, r2, #3
 801bdf6:	4607      	mov	r7, r0
 801bdf8:	460e      	mov	r6, r1
 801bdfa:	d007      	beq.n	801be0c <__pow5mult+0x20>
 801bdfc:	4c25      	ldr	r4, [pc, #148]	@ (801be94 <__pow5mult+0xa8>)
 801bdfe:	3a01      	subs	r2, #1
 801be00:	2300      	movs	r3, #0
 801be02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801be06:	f7ff fe5d 	bl	801bac4 <__multadd>
 801be0a:	4606      	mov	r6, r0
 801be0c:	10ad      	asrs	r5, r5, #2
 801be0e:	d03d      	beq.n	801be8c <__pow5mult+0xa0>
 801be10:	69fc      	ldr	r4, [r7, #28]
 801be12:	b97c      	cbnz	r4, 801be34 <__pow5mult+0x48>
 801be14:	2010      	movs	r0, #16
 801be16:	f7ff fd3d 	bl	801b894 <malloc>
 801be1a:	4602      	mov	r2, r0
 801be1c:	61f8      	str	r0, [r7, #28]
 801be1e:	b928      	cbnz	r0, 801be2c <__pow5mult+0x40>
 801be20:	4b1d      	ldr	r3, [pc, #116]	@ (801be98 <__pow5mult+0xac>)
 801be22:	481e      	ldr	r0, [pc, #120]	@ (801be9c <__pow5mult+0xb0>)
 801be24:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801be28:	f7fe fe72 	bl	801ab10 <__assert_func>
 801be2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801be30:	6004      	str	r4, [r0, #0]
 801be32:	60c4      	str	r4, [r0, #12]
 801be34:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801be38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801be3c:	b94c      	cbnz	r4, 801be52 <__pow5mult+0x66>
 801be3e:	f240 2171 	movw	r1, #625	@ 0x271
 801be42:	4638      	mov	r0, r7
 801be44:	f7ff ff1a 	bl	801bc7c <__i2b>
 801be48:	2300      	movs	r3, #0
 801be4a:	f8c8 0008 	str.w	r0, [r8, #8]
 801be4e:	4604      	mov	r4, r0
 801be50:	6003      	str	r3, [r0, #0]
 801be52:	f04f 0900 	mov.w	r9, #0
 801be56:	07eb      	lsls	r3, r5, #31
 801be58:	d50a      	bpl.n	801be70 <__pow5mult+0x84>
 801be5a:	4631      	mov	r1, r6
 801be5c:	4622      	mov	r2, r4
 801be5e:	4638      	mov	r0, r7
 801be60:	f7ff ff22 	bl	801bca8 <__multiply>
 801be64:	4631      	mov	r1, r6
 801be66:	4680      	mov	r8, r0
 801be68:	4638      	mov	r0, r7
 801be6a:	f7ff fe09 	bl	801ba80 <_Bfree>
 801be6e:	4646      	mov	r6, r8
 801be70:	106d      	asrs	r5, r5, #1
 801be72:	d00b      	beq.n	801be8c <__pow5mult+0xa0>
 801be74:	6820      	ldr	r0, [r4, #0]
 801be76:	b938      	cbnz	r0, 801be88 <__pow5mult+0x9c>
 801be78:	4622      	mov	r2, r4
 801be7a:	4621      	mov	r1, r4
 801be7c:	4638      	mov	r0, r7
 801be7e:	f7ff ff13 	bl	801bca8 <__multiply>
 801be82:	6020      	str	r0, [r4, #0]
 801be84:	f8c0 9000 	str.w	r9, [r0]
 801be88:	4604      	mov	r4, r0
 801be8a:	e7e4      	b.n	801be56 <__pow5mult+0x6a>
 801be8c:	4630      	mov	r0, r6
 801be8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be92:	bf00      	nop
 801be94:	08020d04 	.word	0x08020d04
 801be98:	08020785 	.word	0x08020785
 801be9c:	08020805 	.word	0x08020805

0801bea0 <__lshift>:
 801bea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801bea4:	460c      	mov	r4, r1
 801bea6:	6849      	ldr	r1, [r1, #4]
 801bea8:	6923      	ldr	r3, [r4, #16]
 801beaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801beae:	68a3      	ldr	r3, [r4, #8]
 801beb0:	4607      	mov	r7, r0
 801beb2:	4691      	mov	r9, r2
 801beb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801beb8:	f108 0601 	add.w	r6, r8, #1
 801bebc:	42b3      	cmp	r3, r6
 801bebe:	db0b      	blt.n	801bed8 <__lshift+0x38>
 801bec0:	4638      	mov	r0, r7
 801bec2:	f7ff fd9d 	bl	801ba00 <_Balloc>
 801bec6:	4605      	mov	r5, r0
 801bec8:	b948      	cbnz	r0, 801bede <__lshift+0x3e>
 801beca:	4602      	mov	r2, r0
 801becc:	4b28      	ldr	r3, [pc, #160]	@ (801bf70 <__lshift+0xd0>)
 801bece:	4829      	ldr	r0, [pc, #164]	@ (801bf74 <__lshift+0xd4>)
 801bed0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801bed4:	f7fe fe1c 	bl	801ab10 <__assert_func>
 801bed8:	3101      	adds	r1, #1
 801beda:	005b      	lsls	r3, r3, #1
 801bedc:	e7ee      	b.n	801bebc <__lshift+0x1c>
 801bede:	2300      	movs	r3, #0
 801bee0:	f100 0114 	add.w	r1, r0, #20
 801bee4:	f100 0210 	add.w	r2, r0, #16
 801bee8:	4618      	mov	r0, r3
 801beea:	4553      	cmp	r3, sl
 801beec:	db33      	blt.n	801bf56 <__lshift+0xb6>
 801beee:	6920      	ldr	r0, [r4, #16]
 801bef0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801bef4:	f104 0314 	add.w	r3, r4, #20
 801bef8:	f019 091f 	ands.w	r9, r9, #31
 801befc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801bf00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801bf04:	d02b      	beq.n	801bf5e <__lshift+0xbe>
 801bf06:	f1c9 0e20 	rsb	lr, r9, #32
 801bf0a:	468a      	mov	sl, r1
 801bf0c:	2200      	movs	r2, #0
 801bf0e:	6818      	ldr	r0, [r3, #0]
 801bf10:	fa00 f009 	lsl.w	r0, r0, r9
 801bf14:	4310      	orrs	r0, r2
 801bf16:	f84a 0b04 	str.w	r0, [sl], #4
 801bf1a:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf1e:	459c      	cmp	ip, r3
 801bf20:	fa22 f20e 	lsr.w	r2, r2, lr
 801bf24:	d8f3      	bhi.n	801bf0e <__lshift+0x6e>
 801bf26:	ebac 0304 	sub.w	r3, ip, r4
 801bf2a:	3b15      	subs	r3, #21
 801bf2c:	f023 0303 	bic.w	r3, r3, #3
 801bf30:	3304      	adds	r3, #4
 801bf32:	f104 0015 	add.w	r0, r4, #21
 801bf36:	4560      	cmp	r0, ip
 801bf38:	bf88      	it	hi
 801bf3a:	2304      	movhi	r3, #4
 801bf3c:	50ca      	str	r2, [r1, r3]
 801bf3e:	b10a      	cbz	r2, 801bf44 <__lshift+0xa4>
 801bf40:	f108 0602 	add.w	r6, r8, #2
 801bf44:	3e01      	subs	r6, #1
 801bf46:	4638      	mov	r0, r7
 801bf48:	612e      	str	r6, [r5, #16]
 801bf4a:	4621      	mov	r1, r4
 801bf4c:	f7ff fd98 	bl	801ba80 <_Bfree>
 801bf50:	4628      	mov	r0, r5
 801bf52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bf56:	f842 0f04 	str.w	r0, [r2, #4]!
 801bf5a:	3301      	adds	r3, #1
 801bf5c:	e7c5      	b.n	801beea <__lshift+0x4a>
 801bf5e:	3904      	subs	r1, #4
 801bf60:	f853 2b04 	ldr.w	r2, [r3], #4
 801bf64:	f841 2f04 	str.w	r2, [r1, #4]!
 801bf68:	459c      	cmp	ip, r3
 801bf6a:	d8f9      	bhi.n	801bf60 <__lshift+0xc0>
 801bf6c:	e7ea      	b.n	801bf44 <__lshift+0xa4>
 801bf6e:	bf00      	nop
 801bf70:	080207f4 	.word	0x080207f4
 801bf74:	08020805 	.word	0x08020805

0801bf78 <__mcmp>:
 801bf78:	690a      	ldr	r2, [r1, #16]
 801bf7a:	4603      	mov	r3, r0
 801bf7c:	6900      	ldr	r0, [r0, #16]
 801bf7e:	1a80      	subs	r0, r0, r2
 801bf80:	b530      	push	{r4, r5, lr}
 801bf82:	d10e      	bne.n	801bfa2 <__mcmp+0x2a>
 801bf84:	3314      	adds	r3, #20
 801bf86:	3114      	adds	r1, #20
 801bf88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801bf8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801bf90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801bf94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801bf98:	4295      	cmp	r5, r2
 801bf9a:	d003      	beq.n	801bfa4 <__mcmp+0x2c>
 801bf9c:	d205      	bcs.n	801bfaa <__mcmp+0x32>
 801bf9e:	f04f 30ff 	mov.w	r0, #4294967295
 801bfa2:	bd30      	pop	{r4, r5, pc}
 801bfa4:	42a3      	cmp	r3, r4
 801bfa6:	d3f3      	bcc.n	801bf90 <__mcmp+0x18>
 801bfa8:	e7fb      	b.n	801bfa2 <__mcmp+0x2a>
 801bfaa:	2001      	movs	r0, #1
 801bfac:	e7f9      	b.n	801bfa2 <__mcmp+0x2a>
	...

0801bfb0 <__mdiff>:
 801bfb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfb4:	4689      	mov	r9, r1
 801bfb6:	4606      	mov	r6, r0
 801bfb8:	4611      	mov	r1, r2
 801bfba:	4648      	mov	r0, r9
 801bfbc:	4614      	mov	r4, r2
 801bfbe:	f7ff ffdb 	bl	801bf78 <__mcmp>
 801bfc2:	1e05      	subs	r5, r0, #0
 801bfc4:	d112      	bne.n	801bfec <__mdiff+0x3c>
 801bfc6:	4629      	mov	r1, r5
 801bfc8:	4630      	mov	r0, r6
 801bfca:	f7ff fd19 	bl	801ba00 <_Balloc>
 801bfce:	4602      	mov	r2, r0
 801bfd0:	b928      	cbnz	r0, 801bfde <__mdiff+0x2e>
 801bfd2:	4b3f      	ldr	r3, [pc, #252]	@ (801c0d0 <__mdiff+0x120>)
 801bfd4:	f240 2137 	movw	r1, #567	@ 0x237
 801bfd8:	483e      	ldr	r0, [pc, #248]	@ (801c0d4 <__mdiff+0x124>)
 801bfda:	f7fe fd99 	bl	801ab10 <__assert_func>
 801bfde:	2301      	movs	r3, #1
 801bfe0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801bfe4:	4610      	mov	r0, r2
 801bfe6:	b003      	add	sp, #12
 801bfe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfec:	bfbc      	itt	lt
 801bfee:	464b      	movlt	r3, r9
 801bff0:	46a1      	movlt	r9, r4
 801bff2:	4630      	mov	r0, r6
 801bff4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801bff8:	bfba      	itte	lt
 801bffa:	461c      	movlt	r4, r3
 801bffc:	2501      	movlt	r5, #1
 801bffe:	2500      	movge	r5, #0
 801c000:	f7ff fcfe 	bl	801ba00 <_Balloc>
 801c004:	4602      	mov	r2, r0
 801c006:	b918      	cbnz	r0, 801c010 <__mdiff+0x60>
 801c008:	4b31      	ldr	r3, [pc, #196]	@ (801c0d0 <__mdiff+0x120>)
 801c00a:	f240 2145 	movw	r1, #581	@ 0x245
 801c00e:	e7e3      	b.n	801bfd8 <__mdiff+0x28>
 801c010:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801c014:	6926      	ldr	r6, [r4, #16]
 801c016:	60c5      	str	r5, [r0, #12]
 801c018:	f109 0310 	add.w	r3, r9, #16
 801c01c:	f109 0514 	add.w	r5, r9, #20
 801c020:	f104 0e14 	add.w	lr, r4, #20
 801c024:	f100 0b14 	add.w	fp, r0, #20
 801c028:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801c02c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801c030:	9301      	str	r3, [sp, #4]
 801c032:	46d9      	mov	r9, fp
 801c034:	f04f 0c00 	mov.w	ip, #0
 801c038:	9b01      	ldr	r3, [sp, #4]
 801c03a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801c03e:	f853 af04 	ldr.w	sl, [r3, #4]!
 801c042:	9301      	str	r3, [sp, #4]
 801c044:	fa1f f38a 	uxth.w	r3, sl
 801c048:	4619      	mov	r1, r3
 801c04a:	b283      	uxth	r3, r0
 801c04c:	1acb      	subs	r3, r1, r3
 801c04e:	0c00      	lsrs	r0, r0, #16
 801c050:	4463      	add	r3, ip
 801c052:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801c056:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801c05a:	b29b      	uxth	r3, r3
 801c05c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801c060:	4576      	cmp	r6, lr
 801c062:	f849 3b04 	str.w	r3, [r9], #4
 801c066:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c06a:	d8e5      	bhi.n	801c038 <__mdiff+0x88>
 801c06c:	1b33      	subs	r3, r6, r4
 801c06e:	3b15      	subs	r3, #21
 801c070:	f023 0303 	bic.w	r3, r3, #3
 801c074:	3415      	adds	r4, #21
 801c076:	3304      	adds	r3, #4
 801c078:	42a6      	cmp	r6, r4
 801c07a:	bf38      	it	cc
 801c07c:	2304      	movcc	r3, #4
 801c07e:	441d      	add	r5, r3
 801c080:	445b      	add	r3, fp
 801c082:	461e      	mov	r6, r3
 801c084:	462c      	mov	r4, r5
 801c086:	4544      	cmp	r4, r8
 801c088:	d30e      	bcc.n	801c0a8 <__mdiff+0xf8>
 801c08a:	f108 0103 	add.w	r1, r8, #3
 801c08e:	1b49      	subs	r1, r1, r5
 801c090:	f021 0103 	bic.w	r1, r1, #3
 801c094:	3d03      	subs	r5, #3
 801c096:	45a8      	cmp	r8, r5
 801c098:	bf38      	it	cc
 801c09a:	2100      	movcc	r1, #0
 801c09c:	440b      	add	r3, r1
 801c09e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c0a2:	b191      	cbz	r1, 801c0ca <__mdiff+0x11a>
 801c0a4:	6117      	str	r7, [r2, #16]
 801c0a6:	e79d      	b.n	801bfe4 <__mdiff+0x34>
 801c0a8:	f854 1b04 	ldr.w	r1, [r4], #4
 801c0ac:	46e6      	mov	lr, ip
 801c0ae:	0c08      	lsrs	r0, r1, #16
 801c0b0:	fa1c fc81 	uxtah	ip, ip, r1
 801c0b4:	4471      	add	r1, lr
 801c0b6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801c0ba:	b289      	uxth	r1, r1
 801c0bc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801c0c0:	f846 1b04 	str.w	r1, [r6], #4
 801c0c4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801c0c8:	e7dd      	b.n	801c086 <__mdiff+0xd6>
 801c0ca:	3f01      	subs	r7, #1
 801c0cc:	e7e7      	b.n	801c09e <__mdiff+0xee>
 801c0ce:	bf00      	nop
 801c0d0:	080207f4 	.word	0x080207f4
 801c0d4:	08020805 	.word	0x08020805

0801c0d8 <__ulp>:
 801c0d8:	b082      	sub	sp, #8
 801c0da:	ed8d 0b00 	vstr	d0, [sp]
 801c0de:	9a01      	ldr	r2, [sp, #4]
 801c0e0:	4b0f      	ldr	r3, [pc, #60]	@ (801c120 <__ulp+0x48>)
 801c0e2:	4013      	ands	r3, r2
 801c0e4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	dc08      	bgt.n	801c0fe <__ulp+0x26>
 801c0ec:	425b      	negs	r3, r3
 801c0ee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801c0f2:	ea4f 5223 	mov.w	r2, r3, asr #20
 801c0f6:	da04      	bge.n	801c102 <__ulp+0x2a>
 801c0f8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801c0fc:	4113      	asrs	r3, r2
 801c0fe:	2200      	movs	r2, #0
 801c100:	e008      	b.n	801c114 <__ulp+0x3c>
 801c102:	f1a2 0314 	sub.w	r3, r2, #20
 801c106:	2b1e      	cmp	r3, #30
 801c108:	bfda      	itte	le
 801c10a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801c10e:	40da      	lsrle	r2, r3
 801c110:	2201      	movgt	r2, #1
 801c112:	2300      	movs	r3, #0
 801c114:	4619      	mov	r1, r3
 801c116:	4610      	mov	r0, r2
 801c118:	ec41 0b10 	vmov	d0, r0, r1
 801c11c:	b002      	add	sp, #8
 801c11e:	4770      	bx	lr
 801c120:	7ff00000 	.word	0x7ff00000

0801c124 <__b2d>:
 801c124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c128:	6906      	ldr	r6, [r0, #16]
 801c12a:	f100 0814 	add.w	r8, r0, #20
 801c12e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801c132:	1f37      	subs	r7, r6, #4
 801c134:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801c138:	4610      	mov	r0, r2
 801c13a:	f7ff fd53 	bl	801bbe4 <__hi0bits>
 801c13e:	f1c0 0320 	rsb	r3, r0, #32
 801c142:	280a      	cmp	r0, #10
 801c144:	600b      	str	r3, [r1, #0]
 801c146:	491b      	ldr	r1, [pc, #108]	@ (801c1b4 <__b2d+0x90>)
 801c148:	dc15      	bgt.n	801c176 <__b2d+0x52>
 801c14a:	f1c0 0c0b 	rsb	ip, r0, #11
 801c14e:	fa22 f30c 	lsr.w	r3, r2, ip
 801c152:	45b8      	cmp	r8, r7
 801c154:	ea43 0501 	orr.w	r5, r3, r1
 801c158:	bf34      	ite	cc
 801c15a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c15e:	2300      	movcs	r3, #0
 801c160:	3015      	adds	r0, #21
 801c162:	fa02 f000 	lsl.w	r0, r2, r0
 801c166:	fa23 f30c 	lsr.w	r3, r3, ip
 801c16a:	4303      	orrs	r3, r0
 801c16c:	461c      	mov	r4, r3
 801c16e:	ec45 4b10 	vmov	d0, r4, r5
 801c172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c176:	45b8      	cmp	r8, r7
 801c178:	bf3a      	itte	cc
 801c17a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801c17e:	f1a6 0708 	subcc.w	r7, r6, #8
 801c182:	2300      	movcs	r3, #0
 801c184:	380b      	subs	r0, #11
 801c186:	d012      	beq.n	801c1ae <__b2d+0x8a>
 801c188:	f1c0 0120 	rsb	r1, r0, #32
 801c18c:	fa23 f401 	lsr.w	r4, r3, r1
 801c190:	4082      	lsls	r2, r0
 801c192:	4322      	orrs	r2, r4
 801c194:	4547      	cmp	r7, r8
 801c196:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801c19a:	bf8c      	ite	hi
 801c19c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801c1a0:	2200      	movls	r2, #0
 801c1a2:	4083      	lsls	r3, r0
 801c1a4:	40ca      	lsrs	r2, r1
 801c1a6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801c1aa:	4313      	orrs	r3, r2
 801c1ac:	e7de      	b.n	801c16c <__b2d+0x48>
 801c1ae:	ea42 0501 	orr.w	r5, r2, r1
 801c1b2:	e7db      	b.n	801c16c <__b2d+0x48>
 801c1b4:	3ff00000 	.word	0x3ff00000

0801c1b8 <__d2b>:
 801c1b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c1bc:	460f      	mov	r7, r1
 801c1be:	2101      	movs	r1, #1
 801c1c0:	ec59 8b10 	vmov	r8, r9, d0
 801c1c4:	4616      	mov	r6, r2
 801c1c6:	f7ff fc1b 	bl	801ba00 <_Balloc>
 801c1ca:	4604      	mov	r4, r0
 801c1cc:	b930      	cbnz	r0, 801c1dc <__d2b+0x24>
 801c1ce:	4602      	mov	r2, r0
 801c1d0:	4b23      	ldr	r3, [pc, #140]	@ (801c260 <__d2b+0xa8>)
 801c1d2:	4824      	ldr	r0, [pc, #144]	@ (801c264 <__d2b+0xac>)
 801c1d4:	f240 310f 	movw	r1, #783	@ 0x30f
 801c1d8:	f7fe fc9a 	bl	801ab10 <__assert_func>
 801c1dc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801c1e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801c1e4:	b10d      	cbz	r5, 801c1ea <__d2b+0x32>
 801c1e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801c1ea:	9301      	str	r3, [sp, #4]
 801c1ec:	f1b8 0300 	subs.w	r3, r8, #0
 801c1f0:	d023      	beq.n	801c23a <__d2b+0x82>
 801c1f2:	4668      	mov	r0, sp
 801c1f4:	9300      	str	r3, [sp, #0]
 801c1f6:	f7ff fd14 	bl	801bc22 <__lo0bits>
 801c1fa:	e9dd 1200 	ldrd	r1, r2, [sp]
 801c1fe:	b1d0      	cbz	r0, 801c236 <__d2b+0x7e>
 801c200:	f1c0 0320 	rsb	r3, r0, #32
 801c204:	fa02 f303 	lsl.w	r3, r2, r3
 801c208:	430b      	orrs	r3, r1
 801c20a:	40c2      	lsrs	r2, r0
 801c20c:	6163      	str	r3, [r4, #20]
 801c20e:	9201      	str	r2, [sp, #4]
 801c210:	9b01      	ldr	r3, [sp, #4]
 801c212:	61a3      	str	r3, [r4, #24]
 801c214:	2b00      	cmp	r3, #0
 801c216:	bf0c      	ite	eq
 801c218:	2201      	moveq	r2, #1
 801c21a:	2202      	movne	r2, #2
 801c21c:	6122      	str	r2, [r4, #16]
 801c21e:	b1a5      	cbz	r5, 801c24a <__d2b+0x92>
 801c220:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801c224:	4405      	add	r5, r0
 801c226:	603d      	str	r5, [r7, #0]
 801c228:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801c22c:	6030      	str	r0, [r6, #0]
 801c22e:	4620      	mov	r0, r4
 801c230:	b003      	add	sp, #12
 801c232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c236:	6161      	str	r1, [r4, #20]
 801c238:	e7ea      	b.n	801c210 <__d2b+0x58>
 801c23a:	a801      	add	r0, sp, #4
 801c23c:	f7ff fcf1 	bl	801bc22 <__lo0bits>
 801c240:	9b01      	ldr	r3, [sp, #4]
 801c242:	6163      	str	r3, [r4, #20]
 801c244:	3020      	adds	r0, #32
 801c246:	2201      	movs	r2, #1
 801c248:	e7e8      	b.n	801c21c <__d2b+0x64>
 801c24a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801c24e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801c252:	6038      	str	r0, [r7, #0]
 801c254:	6918      	ldr	r0, [r3, #16]
 801c256:	f7ff fcc5 	bl	801bbe4 <__hi0bits>
 801c25a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801c25e:	e7e5      	b.n	801c22c <__d2b+0x74>
 801c260:	080207f4 	.word	0x080207f4
 801c264:	08020805 	.word	0x08020805

0801c268 <__ratio>:
 801c268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c26c:	b085      	sub	sp, #20
 801c26e:	e9cd 1000 	strd	r1, r0, [sp]
 801c272:	a902      	add	r1, sp, #8
 801c274:	f7ff ff56 	bl	801c124 <__b2d>
 801c278:	9800      	ldr	r0, [sp, #0]
 801c27a:	a903      	add	r1, sp, #12
 801c27c:	ec55 4b10 	vmov	r4, r5, d0
 801c280:	f7ff ff50 	bl	801c124 <__b2d>
 801c284:	9b01      	ldr	r3, [sp, #4]
 801c286:	6919      	ldr	r1, [r3, #16]
 801c288:	9b00      	ldr	r3, [sp, #0]
 801c28a:	691b      	ldr	r3, [r3, #16]
 801c28c:	1ac9      	subs	r1, r1, r3
 801c28e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801c292:	1a9b      	subs	r3, r3, r2
 801c294:	ec5b ab10 	vmov	sl, fp, d0
 801c298:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801c29c:	2b00      	cmp	r3, #0
 801c29e:	bfce      	itee	gt
 801c2a0:	462a      	movgt	r2, r5
 801c2a2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801c2a6:	465a      	movle	r2, fp
 801c2a8:	462f      	mov	r7, r5
 801c2aa:	46d9      	mov	r9, fp
 801c2ac:	bfcc      	ite	gt
 801c2ae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801c2b2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801c2b6:	464b      	mov	r3, r9
 801c2b8:	4652      	mov	r2, sl
 801c2ba:	4620      	mov	r0, r4
 801c2bc:	4639      	mov	r1, r7
 801c2be:	f7e4 fac5 	bl	800084c <__aeabi_ddiv>
 801c2c2:	ec41 0b10 	vmov	d0, r0, r1
 801c2c6:	b005      	add	sp, #20
 801c2c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c2cc <__copybits>:
 801c2cc:	3901      	subs	r1, #1
 801c2ce:	b570      	push	{r4, r5, r6, lr}
 801c2d0:	1149      	asrs	r1, r1, #5
 801c2d2:	6914      	ldr	r4, [r2, #16]
 801c2d4:	3101      	adds	r1, #1
 801c2d6:	f102 0314 	add.w	r3, r2, #20
 801c2da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801c2de:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801c2e2:	1f05      	subs	r5, r0, #4
 801c2e4:	42a3      	cmp	r3, r4
 801c2e6:	d30c      	bcc.n	801c302 <__copybits+0x36>
 801c2e8:	1aa3      	subs	r3, r4, r2
 801c2ea:	3b11      	subs	r3, #17
 801c2ec:	f023 0303 	bic.w	r3, r3, #3
 801c2f0:	3211      	adds	r2, #17
 801c2f2:	42a2      	cmp	r2, r4
 801c2f4:	bf88      	it	hi
 801c2f6:	2300      	movhi	r3, #0
 801c2f8:	4418      	add	r0, r3
 801c2fa:	2300      	movs	r3, #0
 801c2fc:	4288      	cmp	r0, r1
 801c2fe:	d305      	bcc.n	801c30c <__copybits+0x40>
 801c300:	bd70      	pop	{r4, r5, r6, pc}
 801c302:	f853 6b04 	ldr.w	r6, [r3], #4
 801c306:	f845 6f04 	str.w	r6, [r5, #4]!
 801c30a:	e7eb      	b.n	801c2e4 <__copybits+0x18>
 801c30c:	f840 3b04 	str.w	r3, [r0], #4
 801c310:	e7f4      	b.n	801c2fc <__copybits+0x30>

0801c312 <__any_on>:
 801c312:	f100 0214 	add.w	r2, r0, #20
 801c316:	6900      	ldr	r0, [r0, #16]
 801c318:	114b      	asrs	r3, r1, #5
 801c31a:	4298      	cmp	r0, r3
 801c31c:	b510      	push	{r4, lr}
 801c31e:	db11      	blt.n	801c344 <__any_on+0x32>
 801c320:	dd0a      	ble.n	801c338 <__any_on+0x26>
 801c322:	f011 011f 	ands.w	r1, r1, #31
 801c326:	d007      	beq.n	801c338 <__any_on+0x26>
 801c328:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801c32c:	fa24 f001 	lsr.w	r0, r4, r1
 801c330:	fa00 f101 	lsl.w	r1, r0, r1
 801c334:	428c      	cmp	r4, r1
 801c336:	d10b      	bne.n	801c350 <__any_on+0x3e>
 801c338:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801c33c:	4293      	cmp	r3, r2
 801c33e:	d803      	bhi.n	801c348 <__any_on+0x36>
 801c340:	2000      	movs	r0, #0
 801c342:	bd10      	pop	{r4, pc}
 801c344:	4603      	mov	r3, r0
 801c346:	e7f7      	b.n	801c338 <__any_on+0x26>
 801c348:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801c34c:	2900      	cmp	r1, #0
 801c34e:	d0f5      	beq.n	801c33c <__any_on+0x2a>
 801c350:	2001      	movs	r0, #1
 801c352:	e7f6      	b.n	801c342 <__any_on+0x30>

0801c354 <_realloc_r>:
 801c354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c358:	4607      	mov	r7, r0
 801c35a:	4614      	mov	r4, r2
 801c35c:	460d      	mov	r5, r1
 801c35e:	b921      	cbnz	r1, 801c36a <_realloc_r+0x16>
 801c360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c364:	4611      	mov	r1, r2
 801c366:	f7ff babf 	b.w	801b8e8 <_malloc_r>
 801c36a:	b92a      	cbnz	r2, 801c378 <_realloc_r+0x24>
 801c36c:	f7ff fa48 	bl	801b800 <_free_r>
 801c370:	4625      	mov	r5, r4
 801c372:	4628      	mov	r0, r5
 801c374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c378:	f002 f87f 	bl	801e47a <_malloc_usable_size_r>
 801c37c:	4284      	cmp	r4, r0
 801c37e:	4606      	mov	r6, r0
 801c380:	d802      	bhi.n	801c388 <_realloc_r+0x34>
 801c382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801c386:	d8f4      	bhi.n	801c372 <_realloc_r+0x1e>
 801c388:	4621      	mov	r1, r4
 801c38a:	4638      	mov	r0, r7
 801c38c:	f7ff faac 	bl	801b8e8 <_malloc_r>
 801c390:	4680      	mov	r8, r0
 801c392:	b908      	cbnz	r0, 801c398 <_realloc_r+0x44>
 801c394:	4645      	mov	r5, r8
 801c396:	e7ec      	b.n	801c372 <_realloc_r+0x1e>
 801c398:	42b4      	cmp	r4, r6
 801c39a:	4622      	mov	r2, r4
 801c39c:	4629      	mov	r1, r5
 801c39e:	bf28      	it	cs
 801c3a0:	4632      	movcs	r2, r6
 801c3a2:	f7fe fba6 	bl	801aaf2 <memcpy>
 801c3a6:	4629      	mov	r1, r5
 801c3a8:	4638      	mov	r0, r7
 801c3aa:	f7ff fa29 	bl	801b800 <_free_r>
 801c3ae:	e7f1      	b.n	801c394 <_realloc_r+0x40>

0801c3b0 <sulp>:
 801c3b0:	b570      	push	{r4, r5, r6, lr}
 801c3b2:	4604      	mov	r4, r0
 801c3b4:	460d      	mov	r5, r1
 801c3b6:	ec45 4b10 	vmov	d0, r4, r5
 801c3ba:	4616      	mov	r6, r2
 801c3bc:	f7ff fe8c 	bl	801c0d8 <__ulp>
 801c3c0:	ec51 0b10 	vmov	r0, r1, d0
 801c3c4:	b17e      	cbz	r6, 801c3e6 <sulp+0x36>
 801c3c6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801c3ca:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	dd09      	ble.n	801c3e6 <sulp+0x36>
 801c3d2:	051b      	lsls	r3, r3, #20
 801c3d4:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801c3d8:	2400      	movs	r4, #0
 801c3da:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801c3de:	4622      	mov	r2, r4
 801c3e0:	462b      	mov	r3, r5
 801c3e2:	f7e4 f909 	bl	80005f8 <__aeabi_dmul>
 801c3e6:	ec41 0b10 	vmov	d0, r0, r1
 801c3ea:	bd70      	pop	{r4, r5, r6, pc}
 801c3ec:	0000      	movs	r0, r0
	...

0801c3f0 <_strtod_l>:
 801c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3f4:	b09f      	sub	sp, #124	@ 0x7c
 801c3f6:	460c      	mov	r4, r1
 801c3f8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801c3fa:	2200      	movs	r2, #0
 801c3fc:	921a      	str	r2, [sp, #104]	@ 0x68
 801c3fe:	9005      	str	r0, [sp, #20]
 801c400:	f04f 0a00 	mov.w	sl, #0
 801c404:	f04f 0b00 	mov.w	fp, #0
 801c408:	460a      	mov	r2, r1
 801c40a:	9219      	str	r2, [sp, #100]	@ 0x64
 801c40c:	7811      	ldrb	r1, [r2, #0]
 801c40e:	292b      	cmp	r1, #43	@ 0x2b
 801c410:	d04a      	beq.n	801c4a8 <_strtod_l+0xb8>
 801c412:	d838      	bhi.n	801c486 <_strtod_l+0x96>
 801c414:	290d      	cmp	r1, #13
 801c416:	d832      	bhi.n	801c47e <_strtod_l+0x8e>
 801c418:	2908      	cmp	r1, #8
 801c41a:	d832      	bhi.n	801c482 <_strtod_l+0x92>
 801c41c:	2900      	cmp	r1, #0
 801c41e:	d03b      	beq.n	801c498 <_strtod_l+0xa8>
 801c420:	2200      	movs	r2, #0
 801c422:	920e      	str	r2, [sp, #56]	@ 0x38
 801c424:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801c426:	782a      	ldrb	r2, [r5, #0]
 801c428:	2a30      	cmp	r2, #48	@ 0x30
 801c42a:	f040 80b2 	bne.w	801c592 <_strtod_l+0x1a2>
 801c42e:	786a      	ldrb	r2, [r5, #1]
 801c430:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c434:	2a58      	cmp	r2, #88	@ 0x58
 801c436:	d16e      	bne.n	801c516 <_strtod_l+0x126>
 801c438:	9302      	str	r3, [sp, #8]
 801c43a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c43c:	9301      	str	r3, [sp, #4]
 801c43e:	ab1a      	add	r3, sp, #104	@ 0x68
 801c440:	9300      	str	r3, [sp, #0]
 801c442:	4a8f      	ldr	r2, [pc, #572]	@ (801c680 <_strtod_l+0x290>)
 801c444:	9805      	ldr	r0, [sp, #20]
 801c446:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c448:	a919      	add	r1, sp, #100	@ 0x64
 801c44a:	f001 fd33 	bl	801deb4 <__gethex>
 801c44e:	f010 060f 	ands.w	r6, r0, #15
 801c452:	4604      	mov	r4, r0
 801c454:	d005      	beq.n	801c462 <_strtod_l+0x72>
 801c456:	2e06      	cmp	r6, #6
 801c458:	d128      	bne.n	801c4ac <_strtod_l+0xbc>
 801c45a:	3501      	adds	r5, #1
 801c45c:	2300      	movs	r3, #0
 801c45e:	9519      	str	r5, [sp, #100]	@ 0x64
 801c460:	930e      	str	r3, [sp, #56]	@ 0x38
 801c462:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c464:	2b00      	cmp	r3, #0
 801c466:	f040 858e 	bne.w	801cf86 <_strtod_l+0xb96>
 801c46a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c46c:	b1cb      	cbz	r3, 801c4a2 <_strtod_l+0xb2>
 801c46e:	4652      	mov	r2, sl
 801c470:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801c474:	ec43 2b10 	vmov	d0, r2, r3
 801c478:	b01f      	add	sp, #124	@ 0x7c
 801c47a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c47e:	2920      	cmp	r1, #32
 801c480:	d1ce      	bne.n	801c420 <_strtod_l+0x30>
 801c482:	3201      	adds	r2, #1
 801c484:	e7c1      	b.n	801c40a <_strtod_l+0x1a>
 801c486:	292d      	cmp	r1, #45	@ 0x2d
 801c488:	d1ca      	bne.n	801c420 <_strtod_l+0x30>
 801c48a:	2101      	movs	r1, #1
 801c48c:	910e      	str	r1, [sp, #56]	@ 0x38
 801c48e:	1c51      	adds	r1, r2, #1
 801c490:	9119      	str	r1, [sp, #100]	@ 0x64
 801c492:	7852      	ldrb	r2, [r2, #1]
 801c494:	2a00      	cmp	r2, #0
 801c496:	d1c5      	bne.n	801c424 <_strtod_l+0x34>
 801c498:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c49a:	9419      	str	r4, [sp, #100]	@ 0x64
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	f040 8570 	bne.w	801cf82 <_strtod_l+0xb92>
 801c4a2:	4652      	mov	r2, sl
 801c4a4:	465b      	mov	r3, fp
 801c4a6:	e7e5      	b.n	801c474 <_strtod_l+0x84>
 801c4a8:	2100      	movs	r1, #0
 801c4aa:	e7ef      	b.n	801c48c <_strtod_l+0x9c>
 801c4ac:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c4ae:	b13a      	cbz	r2, 801c4c0 <_strtod_l+0xd0>
 801c4b0:	2135      	movs	r1, #53	@ 0x35
 801c4b2:	a81c      	add	r0, sp, #112	@ 0x70
 801c4b4:	f7ff ff0a 	bl	801c2cc <__copybits>
 801c4b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c4ba:	9805      	ldr	r0, [sp, #20]
 801c4bc:	f7ff fae0 	bl	801ba80 <_Bfree>
 801c4c0:	3e01      	subs	r6, #1
 801c4c2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c4c4:	2e04      	cmp	r6, #4
 801c4c6:	d806      	bhi.n	801c4d6 <_strtod_l+0xe6>
 801c4c8:	e8df f006 	tbb	[pc, r6]
 801c4cc:	201d0314 	.word	0x201d0314
 801c4d0:	14          	.byte	0x14
 801c4d1:	00          	.byte	0x00
 801c4d2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801c4d6:	05e1      	lsls	r1, r4, #23
 801c4d8:	bf48      	it	mi
 801c4da:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801c4de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801c4e2:	0d1b      	lsrs	r3, r3, #20
 801c4e4:	051b      	lsls	r3, r3, #20
 801c4e6:	2b00      	cmp	r3, #0
 801c4e8:	d1bb      	bne.n	801c462 <_strtod_l+0x72>
 801c4ea:	f7fe fad5 	bl	801aa98 <__errno>
 801c4ee:	2322      	movs	r3, #34	@ 0x22
 801c4f0:	6003      	str	r3, [r0, #0]
 801c4f2:	e7b6      	b.n	801c462 <_strtod_l+0x72>
 801c4f4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801c4f8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801c4fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801c500:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801c504:	e7e7      	b.n	801c4d6 <_strtod_l+0xe6>
 801c506:	f8df b180 	ldr.w	fp, [pc, #384]	@ 801c688 <_strtod_l+0x298>
 801c50a:	e7e4      	b.n	801c4d6 <_strtod_l+0xe6>
 801c50c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801c510:	f04f 3aff 	mov.w	sl, #4294967295
 801c514:	e7df      	b.n	801c4d6 <_strtod_l+0xe6>
 801c516:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c518:	1c5a      	adds	r2, r3, #1
 801c51a:	9219      	str	r2, [sp, #100]	@ 0x64
 801c51c:	785b      	ldrb	r3, [r3, #1]
 801c51e:	2b30      	cmp	r3, #48	@ 0x30
 801c520:	d0f9      	beq.n	801c516 <_strtod_l+0x126>
 801c522:	2b00      	cmp	r3, #0
 801c524:	d09d      	beq.n	801c462 <_strtod_l+0x72>
 801c526:	2301      	movs	r3, #1
 801c528:	2700      	movs	r7, #0
 801c52a:	9308      	str	r3, [sp, #32]
 801c52c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c52e:	930c      	str	r3, [sp, #48]	@ 0x30
 801c530:	970b      	str	r7, [sp, #44]	@ 0x2c
 801c532:	46b9      	mov	r9, r7
 801c534:	220a      	movs	r2, #10
 801c536:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c538:	7805      	ldrb	r5, [r0, #0]
 801c53a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801c53e:	b2d9      	uxtb	r1, r3
 801c540:	2909      	cmp	r1, #9
 801c542:	d928      	bls.n	801c596 <_strtod_l+0x1a6>
 801c544:	494f      	ldr	r1, [pc, #316]	@ (801c684 <_strtod_l+0x294>)
 801c546:	2201      	movs	r2, #1
 801c548:	f7fe f9ec 	bl	801a924 <strncmp>
 801c54c:	2800      	cmp	r0, #0
 801c54e:	d032      	beq.n	801c5b6 <_strtod_l+0x1c6>
 801c550:	2000      	movs	r0, #0
 801c552:	462a      	mov	r2, r5
 801c554:	900a      	str	r0, [sp, #40]	@ 0x28
 801c556:	464d      	mov	r5, r9
 801c558:	4603      	mov	r3, r0
 801c55a:	2a65      	cmp	r2, #101	@ 0x65
 801c55c:	d001      	beq.n	801c562 <_strtod_l+0x172>
 801c55e:	2a45      	cmp	r2, #69	@ 0x45
 801c560:	d114      	bne.n	801c58c <_strtod_l+0x19c>
 801c562:	b91d      	cbnz	r5, 801c56c <_strtod_l+0x17c>
 801c564:	9a08      	ldr	r2, [sp, #32]
 801c566:	4302      	orrs	r2, r0
 801c568:	d096      	beq.n	801c498 <_strtod_l+0xa8>
 801c56a:	2500      	movs	r5, #0
 801c56c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801c56e:	1c62      	adds	r2, r4, #1
 801c570:	9219      	str	r2, [sp, #100]	@ 0x64
 801c572:	7862      	ldrb	r2, [r4, #1]
 801c574:	2a2b      	cmp	r2, #43	@ 0x2b
 801c576:	d07a      	beq.n	801c66e <_strtod_l+0x27e>
 801c578:	2a2d      	cmp	r2, #45	@ 0x2d
 801c57a:	d07e      	beq.n	801c67a <_strtod_l+0x28a>
 801c57c:	f04f 0c00 	mov.w	ip, #0
 801c580:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801c584:	2909      	cmp	r1, #9
 801c586:	f240 8085 	bls.w	801c694 <_strtod_l+0x2a4>
 801c58a:	9419      	str	r4, [sp, #100]	@ 0x64
 801c58c:	f04f 0800 	mov.w	r8, #0
 801c590:	e0a5      	b.n	801c6de <_strtod_l+0x2ee>
 801c592:	2300      	movs	r3, #0
 801c594:	e7c8      	b.n	801c528 <_strtod_l+0x138>
 801c596:	f1b9 0f08 	cmp.w	r9, #8
 801c59a:	bfd8      	it	le
 801c59c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 801c59e:	f100 0001 	add.w	r0, r0, #1
 801c5a2:	bfda      	itte	le
 801c5a4:	fb02 3301 	mlale	r3, r2, r1, r3
 801c5a8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 801c5aa:	fb02 3707 	mlagt	r7, r2, r7, r3
 801c5ae:	f109 0901 	add.w	r9, r9, #1
 801c5b2:	9019      	str	r0, [sp, #100]	@ 0x64
 801c5b4:	e7bf      	b.n	801c536 <_strtod_l+0x146>
 801c5b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c5b8:	1c5a      	adds	r2, r3, #1
 801c5ba:	9219      	str	r2, [sp, #100]	@ 0x64
 801c5bc:	785a      	ldrb	r2, [r3, #1]
 801c5be:	f1b9 0f00 	cmp.w	r9, #0
 801c5c2:	d03b      	beq.n	801c63c <_strtod_l+0x24c>
 801c5c4:	900a      	str	r0, [sp, #40]	@ 0x28
 801c5c6:	464d      	mov	r5, r9
 801c5c8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801c5cc:	2b09      	cmp	r3, #9
 801c5ce:	d912      	bls.n	801c5f6 <_strtod_l+0x206>
 801c5d0:	2301      	movs	r3, #1
 801c5d2:	e7c2      	b.n	801c55a <_strtod_l+0x16a>
 801c5d4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c5d6:	1c5a      	adds	r2, r3, #1
 801c5d8:	9219      	str	r2, [sp, #100]	@ 0x64
 801c5da:	785a      	ldrb	r2, [r3, #1]
 801c5dc:	3001      	adds	r0, #1
 801c5de:	2a30      	cmp	r2, #48	@ 0x30
 801c5e0:	d0f8      	beq.n	801c5d4 <_strtod_l+0x1e4>
 801c5e2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801c5e6:	2b08      	cmp	r3, #8
 801c5e8:	f200 84d2 	bhi.w	801cf90 <_strtod_l+0xba0>
 801c5ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c5ee:	900a      	str	r0, [sp, #40]	@ 0x28
 801c5f0:	2000      	movs	r0, #0
 801c5f2:	930c      	str	r3, [sp, #48]	@ 0x30
 801c5f4:	4605      	mov	r5, r0
 801c5f6:	3a30      	subs	r2, #48	@ 0x30
 801c5f8:	f100 0301 	add.w	r3, r0, #1
 801c5fc:	d018      	beq.n	801c630 <_strtod_l+0x240>
 801c5fe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c600:	4419      	add	r1, r3
 801c602:	910a      	str	r1, [sp, #40]	@ 0x28
 801c604:	462e      	mov	r6, r5
 801c606:	f04f 0e0a 	mov.w	lr, #10
 801c60a:	1c71      	adds	r1, r6, #1
 801c60c:	eba1 0c05 	sub.w	ip, r1, r5
 801c610:	4563      	cmp	r3, ip
 801c612:	dc15      	bgt.n	801c640 <_strtod_l+0x250>
 801c614:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 801c618:	182b      	adds	r3, r5, r0
 801c61a:	2b08      	cmp	r3, #8
 801c61c:	f105 0501 	add.w	r5, r5, #1
 801c620:	4405      	add	r5, r0
 801c622:	dc1a      	bgt.n	801c65a <_strtod_l+0x26a>
 801c624:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c626:	230a      	movs	r3, #10
 801c628:	fb03 2301 	mla	r3, r3, r1, r2
 801c62c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c62e:	2300      	movs	r3, #0
 801c630:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c632:	1c51      	adds	r1, r2, #1
 801c634:	9119      	str	r1, [sp, #100]	@ 0x64
 801c636:	7852      	ldrb	r2, [r2, #1]
 801c638:	4618      	mov	r0, r3
 801c63a:	e7c5      	b.n	801c5c8 <_strtod_l+0x1d8>
 801c63c:	4648      	mov	r0, r9
 801c63e:	e7ce      	b.n	801c5de <_strtod_l+0x1ee>
 801c640:	2e08      	cmp	r6, #8
 801c642:	dc05      	bgt.n	801c650 <_strtod_l+0x260>
 801c644:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801c646:	fb0e f606 	mul.w	r6, lr, r6
 801c64a:	960b      	str	r6, [sp, #44]	@ 0x2c
 801c64c:	460e      	mov	r6, r1
 801c64e:	e7dc      	b.n	801c60a <_strtod_l+0x21a>
 801c650:	2910      	cmp	r1, #16
 801c652:	bfd8      	it	le
 801c654:	fb0e f707 	mulle.w	r7, lr, r7
 801c658:	e7f8      	b.n	801c64c <_strtod_l+0x25c>
 801c65a:	2b0f      	cmp	r3, #15
 801c65c:	bfdc      	itt	le
 801c65e:	230a      	movle	r3, #10
 801c660:	fb03 2707 	mlale	r7, r3, r7, r2
 801c664:	e7e3      	b.n	801c62e <_strtod_l+0x23e>
 801c666:	2300      	movs	r3, #0
 801c668:	930a      	str	r3, [sp, #40]	@ 0x28
 801c66a:	2301      	movs	r3, #1
 801c66c:	e77a      	b.n	801c564 <_strtod_l+0x174>
 801c66e:	f04f 0c00 	mov.w	ip, #0
 801c672:	1ca2      	adds	r2, r4, #2
 801c674:	9219      	str	r2, [sp, #100]	@ 0x64
 801c676:	78a2      	ldrb	r2, [r4, #2]
 801c678:	e782      	b.n	801c580 <_strtod_l+0x190>
 801c67a:	f04f 0c01 	mov.w	ip, #1
 801c67e:	e7f8      	b.n	801c672 <_strtod_l+0x282>
 801c680:	08020e14 	.word	0x08020e14
 801c684:	0802085e 	.word	0x0802085e
 801c688:	7ff00000 	.word	0x7ff00000
 801c68c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c68e:	1c51      	adds	r1, r2, #1
 801c690:	9119      	str	r1, [sp, #100]	@ 0x64
 801c692:	7852      	ldrb	r2, [r2, #1]
 801c694:	2a30      	cmp	r2, #48	@ 0x30
 801c696:	d0f9      	beq.n	801c68c <_strtod_l+0x29c>
 801c698:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801c69c:	2908      	cmp	r1, #8
 801c69e:	f63f af75 	bhi.w	801c58c <_strtod_l+0x19c>
 801c6a2:	3a30      	subs	r2, #48	@ 0x30
 801c6a4:	9209      	str	r2, [sp, #36]	@ 0x24
 801c6a6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c6a8:	920f      	str	r2, [sp, #60]	@ 0x3c
 801c6aa:	f04f 080a 	mov.w	r8, #10
 801c6ae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801c6b0:	1c56      	adds	r6, r2, #1
 801c6b2:	9619      	str	r6, [sp, #100]	@ 0x64
 801c6b4:	7852      	ldrb	r2, [r2, #1]
 801c6b6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801c6ba:	f1be 0f09 	cmp.w	lr, #9
 801c6be:	d939      	bls.n	801c734 <_strtod_l+0x344>
 801c6c0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801c6c2:	1a76      	subs	r6, r6, r1
 801c6c4:	2e08      	cmp	r6, #8
 801c6c6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801c6ca:	dc03      	bgt.n	801c6d4 <_strtod_l+0x2e4>
 801c6cc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c6ce:	4588      	cmp	r8, r1
 801c6d0:	bfa8      	it	ge
 801c6d2:	4688      	movge	r8, r1
 801c6d4:	f1bc 0f00 	cmp.w	ip, #0
 801c6d8:	d001      	beq.n	801c6de <_strtod_l+0x2ee>
 801c6da:	f1c8 0800 	rsb	r8, r8, #0
 801c6de:	2d00      	cmp	r5, #0
 801c6e0:	d14e      	bne.n	801c780 <_strtod_l+0x390>
 801c6e2:	9908      	ldr	r1, [sp, #32]
 801c6e4:	4308      	orrs	r0, r1
 801c6e6:	f47f aebc 	bne.w	801c462 <_strtod_l+0x72>
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	f47f aed4 	bne.w	801c498 <_strtod_l+0xa8>
 801c6f0:	2a69      	cmp	r2, #105	@ 0x69
 801c6f2:	d028      	beq.n	801c746 <_strtod_l+0x356>
 801c6f4:	dc25      	bgt.n	801c742 <_strtod_l+0x352>
 801c6f6:	2a49      	cmp	r2, #73	@ 0x49
 801c6f8:	d025      	beq.n	801c746 <_strtod_l+0x356>
 801c6fa:	2a4e      	cmp	r2, #78	@ 0x4e
 801c6fc:	f47f aecc 	bne.w	801c498 <_strtod_l+0xa8>
 801c700:	499a      	ldr	r1, [pc, #616]	@ (801c96c <_strtod_l+0x57c>)
 801c702:	a819      	add	r0, sp, #100	@ 0x64
 801c704:	f001 fdf8 	bl	801e2f8 <__match>
 801c708:	2800      	cmp	r0, #0
 801c70a:	f43f aec5 	beq.w	801c498 <_strtod_l+0xa8>
 801c70e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c710:	781b      	ldrb	r3, [r3, #0]
 801c712:	2b28      	cmp	r3, #40	@ 0x28
 801c714:	d12e      	bne.n	801c774 <_strtod_l+0x384>
 801c716:	4996      	ldr	r1, [pc, #600]	@ (801c970 <_strtod_l+0x580>)
 801c718:	aa1c      	add	r2, sp, #112	@ 0x70
 801c71a:	a819      	add	r0, sp, #100	@ 0x64
 801c71c:	f001 fe00 	bl	801e320 <__hexnan>
 801c720:	2805      	cmp	r0, #5
 801c722:	d127      	bne.n	801c774 <_strtod_l+0x384>
 801c724:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801c726:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801c72a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801c72e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801c732:	e696      	b.n	801c462 <_strtod_l+0x72>
 801c734:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c736:	fb08 2101 	mla	r1, r8, r1, r2
 801c73a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801c73e:	9209      	str	r2, [sp, #36]	@ 0x24
 801c740:	e7b5      	b.n	801c6ae <_strtod_l+0x2be>
 801c742:	2a6e      	cmp	r2, #110	@ 0x6e
 801c744:	e7da      	b.n	801c6fc <_strtod_l+0x30c>
 801c746:	498b      	ldr	r1, [pc, #556]	@ (801c974 <_strtod_l+0x584>)
 801c748:	a819      	add	r0, sp, #100	@ 0x64
 801c74a:	f001 fdd5 	bl	801e2f8 <__match>
 801c74e:	2800      	cmp	r0, #0
 801c750:	f43f aea2 	beq.w	801c498 <_strtod_l+0xa8>
 801c754:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c756:	4988      	ldr	r1, [pc, #544]	@ (801c978 <_strtod_l+0x588>)
 801c758:	3b01      	subs	r3, #1
 801c75a:	a819      	add	r0, sp, #100	@ 0x64
 801c75c:	9319      	str	r3, [sp, #100]	@ 0x64
 801c75e:	f001 fdcb 	bl	801e2f8 <__match>
 801c762:	b910      	cbnz	r0, 801c76a <_strtod_l+0x37a>
 801c764:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c766:	3301      	adds	r3, #1
 801c768:	9319      	str	r3, [sp, #100]	@ 0x64
 801c76a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 801c988 <_strtod_l+0x598>
 801c76e:	f04f 0a00 	mov.w	sl, #0
 801c772:	e676      	b.n	801c462 <_strtod_l+0x72>
 801c774:	4881      	ldr	r0, [pc, #516]	@ (801c97c <_strtod_l+0x58c>)
 801c776:	f001 fb13 	bl	801dda0 <nan>
 801c77a:	ec5b ab10 	vmov	sl, fp, d0
 801c77e:	e670      	b.n	801c462 <_strtod_l+0x72>
 801c780:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c782:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801c784:	eba8 0303 	sub.w	r3, r8, r3
 801c788:	f1b9 0f00 	cmp.w	r9, #0
 801c78c:	bf08      	it	eq
 801c78e:	46a9      	moveq	r9, r5
 801c790:	2d10      	cmp	r5, #16
 801c792:	9309      	str	r3, [sp, #36]	@ 0x24
 801c794:	462c      	mov	r4, r5
 801c796:	bfa8      	it	ge
 801c798:	2410      	movge	r4, #16
 801c79a:	f7e3 feb3 	bl	8000504 <__aeabi_ui2d>
 801c79e:	2d09      	cmp	r5, #9
 801c7a0:	4682      	mov	sl, r0
 801c7a2:	468b      	mov	fp, r1
 801c7a4:	dc13      	bgt.n	801c7ce <_strtod_l+0x3de>
 801c7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7a8:	2b00      	cmp	r3, #0
 801c7aa:	f43f ae5a 	beq.w	801c462 <_strtod_l+0x72>
 801c7ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7b0:	dd78      	ble.n	801c8a4 <_strtod_l+0x4b4>
 801c7b2:	2b16      	cmp	r3, #22
 801c7b4:	dc5f      	bgt.n	801c876 <_strtod_l+0x486>
 801c7b6:	4972      	ldr	r1, [pc, #456]	@ (801c980 <_strtod_l+0x590>)
 801c7b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c7bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c7c0:	4652      	mov	r2, sl
 801c7c2:	465b      	mov	r3, fp
 801c7c4:	f7e3 ff18 	bl	80005f8 <__aeabi_dmul>
 801c7c8:	4682      	mov	sl, r0
 801c7ca:	468b      	mov	fp, r1
 801c7cc:	e649      	b.n	801c462 <_strtod_l+0x72>
 801c7ce:	4b6c      	ldr	r3, [pc, #432]	@ (801c980 <_strtod_l+0x590>)
 801c7d0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801c7d4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801c7d8:	f7e3 ff0e 	bl	80005f8 <__aeabi_dmul>
 801c7dc:	4682      	mov	sl, r0
 801c7de:	4638      	mov	r0, r7
 801c7e0:	468b      	mov	fp, r1
 801c7e2:	f7e3 fe8f 	bl	8000504 <__aeabi_ui2d>
 801c7e6:	4602      	mov	r2, r0
 801c7e8:	460b      	mov	r3, r1
 801c7ea:	4650      	mov	r0, sl
 801c7ec:	4659      	mov	r1, fp
 801c7ee:	f7e3 fd4d 	bl	800028c <__adddf3>
 801c7f2:	2d0f      	cmp	r5, #15
 801c7f4:	4682      	mov	sl, r0
 801c7f6:	468b      	mov	fp, r1
 801c7f8:	ddd5      	ble.n	801c7a6 <_strtod_l+0x3b6>
 801c7fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c7fc:	1b2c      	subs	r4, r5, r4
 801c7fe:	441c      	add	r4, r3
 801c800:	2c00      	cmp	r4, #0
 801c802:	f340 8093 	ble.w	801c92c <_strtod_l+0x53c>
 801c806:	f014 030f 	ands.w	r3, r4, #15
 801c80a:	d00a      	beq.n	801c822 <_strtod_l+0x432>
 801c80c:	495c      	ldr	r1, [pc, #368]	@ (801c980 <_strtod_l+0x590>)
 801c80e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801c812:	4652      	mov	r2, sl
 801c814:	465b      	mov	r3, fp
 801c816:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c81a:	f7e3 feed 	bl	80005f8 <__aeabi_dmul>
 801c81e:	4682      	mov	sl, r0
 801c820:	468b      	mov	fp, r1
 801c822:	f034 040f 	bics.w	r4, r4, #15
 801c826:	d073      	beq.n	801c910 <_strtod_l+0x520>
 801c828:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801c82c:	dd49      	ble.n	801c8c2 <_strtod_l+0x4d2>
 801c82e:	2400      	movs	r4, #0
 801c830:	46a0      	mov	r8, r4
 801c832:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c834:	46a1      	mov	r9, r4
 801c836:	9a05      	ldr	r2, [sp, #20]
 801c838:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 801c988 <_strtod_l+0x598>
 801c83c:	2322      	movs	r3, #34	@ 0x22
 801c83e:	6013      	str	r3, [r2, #0]
 801c840:	f04f 0a00 	mov.w	sl, #0
 801c844:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c846:	2b00      	cmp	r3, #0
 801c848:	f43f ae0b 	beq.w	801c462 <_strtod_l+0x72>
 801c84c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801c84e:	9805      	ldr	r0, [sp, #20]
 801c850:	f7ff f916 	bl	801ba80 <_Bfree>
 801c854:	9805      	ldr	r0, [sp, #20]
 801c856:	4649      	mov	r1, r9
 801c858:	f7ff f912 	bl	801ba80 <_Bfree>
 801c85c:	9805      	ldr	r0, [sp, #20]
 801c85e:	4641      	mov	r1, r8
 801c860:	f7ff f90e 	bl	801ba80 <_Bfree>
 801c864:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801c866:	9805      	ldr	r0, [sp, #20]
 801c868:	f7ff f90a 	bl	801ba80 <_Bfree>
 801c86c:	9805      	ldr	r0, [sp, #20]
 801c86e:	4621      	mov	r1, r4
 801c870:	f7ff f906 	bl	801ba80 <_Bfree>
 801c874:	e5f5      	b.n	801c462 <_strtod_l+0x72>
 801c876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c878:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801c87c:	4293      	cmp	r3, r2
 801c87e:	dbbc      	blt.n	801c7fa <_strtod_l+0x40a>
 801c880:	4c3f      	ldr	r4, [pc, #252]	@ (801c980 <_strtod_l+0x590>)
 801c882:	f1c5 050f 	rsb	r5, r5, #15
 801c886:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801c88a:	4652      	mov	r2, sl
 801c88c:	465b      	mov	r3, fp
 801c88e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c892:	f7e3 feb1 	bl	80005f8 <__aeabi_dmul>
 801c896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c898:	1b5d      	subs	r5, r3, r5
 801c89a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801c89e:	e9d4 2300 	ldrd	r2, r3, [r4]
 801c8a2:	e78f      	b.n	801c7c4 <_strtod_l+0x3d4>
 801c8a4:	3316      	adds	r3, #22
 801c8a6:	dba8      	blt.n	801c7fa <_strtod_l+0x40a>
 801c8a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c8aa:	eba3 0808 	sub.w	r8, r3, r8
 801c8ae:	4b34      	ldr	r3, [pc, #208]	@ (801c980 <_strtod_l+0x590>)
 801c8b0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801c8b4:	e9d8 2300 	ldrd	r2, r3, [r8]
 801c8b8:	4650      	mov	r0, sl
 801c8ba:	4659      	mov	r1, fp
 801c8bc:	f7e3 ffc6 	bl	800084c <__aeabi_ddiv>
 801c8c0:	e782      	b.n	801c7c8 <_strtod_l+0x3d8>
 801c8c2:	2300      	movs	r3, #0
 801c8c4:	4f2f      	ldr	r7, [pc, #188]	@ (801c984 <_strtod_l+0x594>)
 801c8c6:	1124      	asrs	r4, r4, #4
 801c8c8:	4650      	mov	r0, sl
 801c8ca:	4659      	mov	r1, fp
 801c8cc:	461e      	mov	r6, r3
 801c8ce:	2c01      	cmp	r4, #1
 801c8d0:	dc21      	bgt.n	801c916 <_strtod_l+0x526>
 801c8d2:	b10b      	cbz	r3, 801c8d8 <_strtod_l+0x4e8>
 801c8d4:	4682      	mov	sl, r0
 801c8d6:	468b      	mov	fp, r1
 801c8d8:	492a      	ldr	r1, [pc, #168]	@ (801c984 <_strtod_l+0x594>)
 801c8da:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801c8de:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801c8e2:	4652      	mov	r2, sl
 801c8e4:	465b      	mov	r3, fp
 801c8e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 801c8ea:	f7e3 fe85 	bl	80005f8 <__aeabi_dmul>
 801c8ee:	4b26      	ldr	r3, [pc, #152]	@ (801c988 <_strtod_l+0x598>)
 801c8f0:	460a      	mov	r2, r1
 801c8f2:	400b      	ands	r3, r1
 801c8f4:	4925      	ldr	r1, [pc, #148]	@ (801c98c <_strtod_l+0x59c>)
 801c8f6:	428b      	cmp	r3, r1
 801c8f8:	4682      	mov	sl, r0
 801c8fa:	d898      	bhi.n	801c82e <_strtod_l+0x43e>
 801c8fc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801c900:	428b      	cmp	r3, r1
 801c902:	bf86      	itte	hi
 801c904:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 801c990 <_strtod_l+0x5a0>
 801c908:	f04f 3aff 	movhi.w	sl, #4294967295
 801c90c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801c910:	2300      	movs	r3, #0
 801c912:	9308      	str	r3, [sp, #32]
 801c914:	e076      	b.n	801ca04 <_strtod_l+0x614>
 801c916:	07e2      	lsls	r2, r4, #31
 801c918:	d504      	bpl.n	801c924 <_strtod_l+0x534>
 801c91a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c91e:	f7e3 fe6b 	bl	80005f8 <__aeabi_dmul>
 801c922:	2301      	movs	r3, #1
 801c924:	3601      	adds	r6, #1
 801c926:	1064      	asrs	r4, r4, #1
 801c928:	3708      	adds	r7, #8
 801c92a:	e7d0      	b.n	801c8ce <_strtod_l+0x4de>
 801c92c:	d0f0      	beq.n	801c910 <_strtod_l+0x520>
 801c92e:	4264      	negs	r4, r4
 801c930:	f014 020f 	ands.w	r2, r4, #15
 801c934:	d00a      	beq.n	801c94c <_strtod_l+0x55c>
 801c936:	4b12      	ldr	r3, [pc, #72]	@ (801c980 <_strtod_l+0x590>)
 801c938:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801c93c:	4650      	mov	r0, sl
 801c93e:	4659      	mov	r1, fp
 801c940:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c944:	f7e3 ff82 	bl	800084c <__aeabi_ddiv>
 801c948:	4682      	mov	sl, r0
 801c94a:	468b      	mov	fp, r1
 801c94c:	1124      	asrs	r4, r4, #4
 801c94e:	d0df      	beq.n	801c910 <_strtod_l+0x520>
 801c950:	2c1f      	cmp	r4, #31
 801c952:	dd1f      	ble.n	801c994 <_strtod_l+0x5a4>
 801c954:	2400      	movs	r4, #0
 801c956:	46a0      	mov	r8, r4
 801c958:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c95a:	46a1      	mov	r9, r4
 801c95c:	9a05      	ldr	r2, [sp, #20]
 801c95e:	2322      	movs	r3, #34	@ 0x22
 801c960:	f04f 0a00 	mov.w	sl, #0
 801c964:	f04f 0b00 	mov.w	fp, #0
 801c968:	6013      	str	r3, [r2, #0]
 801c96a:	e76b      	b.n	801c844 <_strtod_l+0x454>
 801c96c:	08020701 	.word	0x08020701
 801c970:	08020e00 	.word	0x08020e00
 801c974:	080206f9 	.word	0x080206f9
 801c978:	0802077b 	.word	0x0802077b
 801c97c:	08020777 	.word	0x08020777
 801c980:	08020d38 	.word	0x08020d38
 801c984:	08020d10 	.word	0x08020d10
 801c988:	7ff00000 	.word	0x7ff00000
 801c98c:	7ca00000 	.word	0x7ca00000
 801c990:	7fefffff 	.word	0x7fefffff
 801c994:	f014 0310 	ands.w	r3, r4, #16
 801c998:	bf18      	it	ne
 801c99a:	236a      	movne	r3, #106	@ 0x6a
 801c99c:	4ea9      	ldr	r6, [pc, #676]	@ (801cc44 <_strtod_l+0x854>)
 801c99e:	9308      	str	r3, [sp, #32]
 801c9a0:	4650      	mov	r0, sl
 801c9a2:	4659      	mov	r1, fp
 801c9a4:	2300      	movs	r3, #0
 801c9a6:	07e7      	lsls	r7, r4, #31
 801c9a8:	d504      	bpl.n	801c9b4 <_strtod_l+0x5c4>
 801c9aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 801c9ae:	f7e3 fe23 	bl	80005f8 <__aeabi_dmul>
 801c9b2:	2301      	movs	r3, #1
 801c9b4:	1064      	asrs	r4, r4, #1
 801c9b6:	f106 0608 	add.w	r6, r6, #8
 801c9ba:	d1f4      	bne.n	801c9a6 <_strtod_l+0x5b6>
 801c9bc:	b10b      	cbz	r3, 801c9c2 <_strtod_l+0x5d2>
 801c9be:	4682      	mov	sl, r0
 801c9c0:	468b      	mov	fp, r1
 801c9c2:	9b08      	ldr	r3, [sp, #32]
 801c9c4:	b1b3      	cbz	r3, 801c9f4 <_strtod_l+0x604>
 801c9c6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801c9ca:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801c9ce:	2b00      	cmp	r3, #0
 801c9d0:	4659      	mov	r1, fp
 801c9d2:	dd0f      	ble.n	801c9f4 <_strtod_l+0x604>
 801c9d4:	2b1f      	cmp	r3, #31
 801c9d6:	dd56      	ble.n	801ca86 <_strtod_l+0x696>
 801c9d8:	2b34      	cmp	r3, #52	@ 0x34
 801c9da:	bfde      	ittt	le
 801c9dc:	f04f 33ff 	movle.w	r3, #4294967295
 801c9e0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801c9e4:	4093      	lslle	r3, r2
 801c9e6:	f04f 0a00 	mov.w	sl, #0
 801c9ea:	bfcc      	ite	gt
 801c9ec:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801c9f0:	ea03 0b01 	andle.w	fp, r3, r1
 801c9f4:	2200      	movs	r2, #0
 801c9f6:	2300      	movs	r3, #0
 801c9f8:	4650      	mov	r0, sl
 801c9fa:	4659      	mov	r1, fp
 801c9fc:	f7e4 f864 	bl	8000ac8 <__aeabi_dcmpeq>
 801ca00:	2800      	cmp	r0, #0
 801ca02:	d1a7      	bne.n	801c954 <_strtod_l+0x564>
 801ca04:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca06:	9300      	str	r3, [sp, #0]
 801ca08:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ca0a:	9805      	ldr	r0, [sp, #20]
 801ca0c:	462b      	mov	r3, r5
 801ca0e:	464a      	mov	r2, r9
 801ca10:	f7ff f89e 	bl	801bb50 <__s2b>
 801ca14:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ca16:	2800      	cmp	r0, #0
 801ca18:	f43f af09 	beq.w	801c82e <_strtod_l+0x43e>
 801ca1c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ca1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ca20:	2a00      	cmp	r2, #0
 801ca22:	eba3 0308 	sub.w	r3, r3, r8
 801ca26:	bfa8      	it	ge
 801ca28:	2300      	movge	r3, #0
 801ca2a:	9312      	str	r3, [sp, #72]	@ 0x48
 801ca2c:	2400      	movs	r4, #0
 801ca2e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801ca32:	9316      	str	r3, [sp, #88]	@ 0x58
 801ca34:	46a0      	mov	r8, r4
 801ca36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca38:	9805      	ldr	r0, [sp, #20]
 801ca3a:	6859      	ldr	r1, [r3, #4]
 801ca3c:	f7fe ffe0 	bl	801ba00 <_Balloc>
 801ca40:	4681      	mov	r9, r0
 801ca42:	2800      	cmp	r0, #0
 801ca44:	f43f aef7 	beq.w	801c836 <_strtod_l+0x446>
 801ca48:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ca4a:	691a      	ldr	r2, [r3, #16]
 801ca4c:	3202      	adds	r2, #2
 801ca4e:	f103 010c 	add.w	r1, r3, #12
 801ca52:	0092      	lsls	r2, r2, #2
 801ca54:	300c      	adds	r0, #12
 801ca56:	f7fe f84c 	bl	801aaf2 <memcpy>
 801ca5a:	ec4b ab10 	vmov	d0, sl, fp
 801ca5e:	9805      	ldr	r0, [sp, #20]
 801ca60:	aa1c      	add	r2, sp, #112	@ 0x70
 801ca62:	a91b      	add	r1, sp, #108	@ 0x6c
 801ca64:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801ca68:	f7ff fba6 	bl	801c1b8 <__d2b>
 801ca6c:	901a      	str	r0, [sp, #104]	@ 0x68
 801ca6e:	2800      	cmp	r0, #0
 801ca70:	f43f aee1 	beq.w	801c836 <_strtod_l+0x446>
 801ca74:	9805      	ldr	r0, [sp, #20]
 801ca76:	2101      	movs	r1, #1
 801ca78:	f7ff f900 	bl	801bc7c <__i2b>
 801ca7c:	4680      	mov	r8, r0
 801ca7e:	b948      	cbnz	r0, 801ca94 <_strtod_l+0x6a4>
 801ca80:	f04f 0800 	mov.w	r8, #0
 801ca84:	e6d7      	b.n	801c836 <_strtod_l+0x446>
 801ca86:	f04f 32ff 	mov.w	r2, #4294967295
 801ca8a:	fa02 f303 	lsl.w	r3, r2, r3
 801ca8e:	ea03 0a0a 	and.w	sl, r3, sl
 801ca92:	e7af      	b.n	801c9f4 <_strtod_l+0x604>
 801ca94:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801ca96:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801ca98:	2d00      	cmp	r5, #0
 801ca9a:	bfab      	itete	ge
 801ca9c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801ca9e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801caa0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801caa2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801caa4:	bfac      	ite	ge
 801caa6:	18ef      	addge	r7, r5, r3
 801caa8:	1b5e      	sublt	r6, r3, r5
 801caaa:	9b08      	ldr	r3, [sp, #32]
 801caac:	1aed      	subs	r5, r5, r3
 801caae:	4415      	add	r5, r2
 801cab0:	4b65      	ldr	r3, [pc, #404]	@ (801cc48 <_strtod_l+0x858>)
 801cab2:	3d01      	subs	r5, #1
 801cab4:	429d      	cmp	r5, r3
 801cab6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801caba:	da50      	bge.n	801cb5e <_strtod_l+0x76e>
 801cabc:	1b5b      	subs	r3, r3, r5
 801cabe:	2b1f      	cmp	r3, #31
 801cac0:	eba2 0203 	sub.w	r2, r2, r3
 801cac4:	f04f 0101 	mov.w	r1, #1
 801cac8:	dc3d      	bgt.n	801cb46 <_strtod_l+0x756>
 801caca:	fa01 f303 	lsl.w	r3, r1, r3
 801cace:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cad0:	2300      	movs	r3, #0
 801cad2:	9310      	str	r3, [sp, #64]	@ 0x40
 801cad4:	18bd      	adds	r5, r7, r2
 801cad6:	9b08      	ldr	r3, [sp, #32]
 801cad8:	42af      	cmp	r7, r5
 801cada:	4416      	add	r6, r2
 801cadc:	441e      	add	r6, r3
 801cade:	463b      	mov	r3, r7
 801cae0:	bfa8      	it	ge
 801cae2:	462b      	movge	r3, r5
 801cae4:	42b3      	cmp	r3, r6
 801cae6:	bfa8      	it	ge
 801cae8:	4633      	movge	r3, r6
 801caea:	2b00      	cmp	r3, #0
 801caec:	bfc2      	ittt	gt
 801caee:	1aed      	subgt	r5, r5, r3
 801caf0:	1af6      	subgt	r6, r6, r3
 801caf2:	1aff      	subgt	r7, r7, r3
 801caf4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	dd16      	ble.n	801cb28 <_strtod_l+0x738>
 801cafa:	4641      	mov	r1, r8
 801cafc:	9805      	ldr	r0, [sp, #20]
 801cafe:	461a      	mov	r2, r3
 801cb00:	f7ff f974 	bl	801bdec <__pow5mult>
 801cb04:	4680      	mov	r8, r0
 801cb06:	2800      	cmp	r0, #0
 801cb08:	d0ba      	beq.n	801ca80 <_strtod_l+0x690>
 801cb0a:	4601      	mov	r1, r0
 801cb0c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801cb0e:	9805      	ldr	r0, [sp, #20]
 801cb10:	f7ff f8ca 	bl	801bca8 <__multiply>
 801cb14:	900a      	str	r0, [sp, #40]	@ 0x28
 801cb16:	2800      	cmp	r0, #0
 801cb18:	f43f ae8d 	beq.w	801c836 <_strtod_l+0x446>
 801cb1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cb1e:	9805      	ldr	r0, [sp, #20]
 801cb20:	f7fe ffae 	bl	801ba80 <_Bfree>
 801cb24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cb26:	931a      	str	r3, [sp, #104]	@ 0x68
 801cb28:	2d00      	cmp	r5, #0
 801cb2a:	dc1d      	bgt.n	801cb68 <_strtod_l+0x778>
 801cb2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb2e:	2b00      	cmp	r3, #0
 801cb30:	dd23      	ble.n	801cb7a <_strtod_l+0x78a>
 801cb32:	4649      	mov	r1, r9
 801cb34:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801cb36:	9805      	ldr	r0, [sp, #20]
 801cb38:	f7ff f958 	bl	801bdec <__pow5mult>
 801cb3c:	4681      	mov	r9, r0
 801cb3e:	b9e0      	cbnz	r0, 801cb7a <_strtod_l+0x78a>
 801cb40:	f04f 0900 	mov.w	r9, #0
 801cb44:	e677      	b.n	801c836 <_strtod_l+0x446>
 801cb46:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 801cb4a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 801cb4e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 801cb52:	35e2      	adds	r5, #226	@ 0xe2
 801cb54:	fa01 f305 	lsl.w	r3, r1, r5
 801cb58:	9310      	str	r3, [sp, #64]	@ 0x40
 801cb5a:	9113      	str	r1, [sp, #76]	@ 0x4c
 801cb5c:	e7ba      	b.n	801cad4 <_strtod_l+0x6e4>
 801cb5e:	2300      	movs	r3, #0
 801cb60:	9310      	str	r3, [sp, #64]	@ 0x40
 801cb62:	2301      	movs	r3, #1
 801cb64:	9313      	str	r3, [sp, #76]	@ 0x4c
 801cb66:	e7b5      	b.n	801cad4 <_strtod_l+0x6e4>
 801cb68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cb6a:	9805      	ldr	r0, [sp, #20]
 801cb6c:	462a      	mov	r2, r5
 801cb6e:	f7ff f997 	bl	801bea0 <__lshift>
 801cb72:	901a      	str	r0, [sp, #104]	@ 0x68
 801cb74:	2800      	cmp	r0, #0
 801cb76:	d1d9      	bne.n	801cb2c <_strtod_l+0x73c>
 801cb78:	e65d      	b.n	801c836 <_strtod_l+0x446>
 801cb7a:	2e00      	cmp	r6, #0
 801cb7c:	dd07      	ble.n	801cb8e <_strtod_l+0x79e>
 801cb7e:	4649      	mov	r1, r9
 801cb80:	9805      	ldr	r0, [sp, #20]
 801cb82:	4632      	mov	r2, r6
 801cb84:	f7ff f98c 	bl	801bea0 <__lshift>
 801cb88:	4681      	mov	r9, r0
 801cb8a:	2800      	cmp	r0, #0
 801cb8c:	d0d8      	beq.n	801cb40 <_strtod_l+0x750>
 801cb8e:	2f00      	cmp	r7, #0
 801cb90:	dd08      	ble.n	801cba4 <_strtod_l+0x7b4>
 801cb92:	4641      	mov	r1, r8
 801cb94:	9805      	ldr	r0, [sp, #20]
 801cb96:	463a      	mov	r2, r7
 801cb98:	f7ff f982 	bl	801bea0 <__lshift>
 801cb9c:	4680      	mov	r8, r0
 801cb9e:	2800      	cmp	r0, #0
 801cba0:	f43f ae49 	beq.w	801c836 <_strtod_l+0x446>
 801cba4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cba6:	9805      	ldr	r0, [sp, #20]
 801cba8:	464a      	mov	r2, r9
 801cbaa:	f7ff fa01 	bl	801bfb0 <__mdiff>
 801cbae:	4604      	mov	r4, r0
 801cbb0:	2800      	cmp	r0, #0
 801cbb2:	f43f ae40 	beq.w	801c836 <_strtod_l+0x446>
 801cbb6:	68c3      	ldr	r3, [r0, #12]
 801cbb8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cbba:	2300      	movs	r3, #0
 801cbbc:	60c3      	str	r3, [r0, #12]
 801cbbe:	4641      	mov	r1, r8
 801cbc0:	f7ff f9da 	bl	801bf78 <__mcmp>
 801cbc4:	2800      	cmp	r0, #0
 801cbc6:	da45      	bge.n	801cc54 <_strtod_l+0x864>
 801cbc8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cbca:	ea53 030a 	orrs.w	r3, r3, sl
 801cbce:	d16b      	bne.n	801cca8 <_strtod_l+0x8b8>
 801cbd0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d167      	bne.n	801cca8 <_strtod_l+0x8b8>
 801cbd8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cbdc:	0d1b      	lsrs	r3, r3, #20
 801cbde:	051b      	lsls	r3, r3, #20
 801cbe0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801cbe4:	d960      	bls.n	801cca8 <_strtod_l+0x8b8>
 801cbe6:	6963      	ldr	r3, [r4, #20]
 801cbe8:	b913      	cbnz	r3, 801cbf0 <_strtod_l+0x800>
 801cbea:	6923      	ldr	r3, [r4, #16]
 801cbec:	2b01      	cmp	r3, #1
 801cbee:	dd5b      	ble.n	801cca8 <_strtod_l+0x8b8>
 801cbf0:	4621      	mov	r1, r4
 801cbf2:	2201      	movs	r2, #1
 801cbf4:	9805      	ldr	r0, [sp, #20]
 801cbf6:	f7ff f953 	bl	801bea0 <__lshift>
 801cbfa:	4641      	mov	r1, r8
 801cbfc:	4604      	mov	r4, r0
 801cbfe:	f7ff f9bb 	bl	801bf78 <__mcmp>
 801cc02:	2800      	cmp	r0, #0
 801cc04:	dd50      	ble.n	801cca8 <_strtod_l+0x8b8>
 801cc06:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801cc0a:	9a08      	ldr	r2, [sp, #32]
 801cc0c:	0d1b      	lsrs	r3, r3, #20
 801cc0e:	051b      	lsls	r3, r3, #20
 801cc10:	2a00      	cmp	r2, #0
 801cc12:	d06a      	beq.n	801ccea <_strtod_l+0x8fa>
 801cc14:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 801cc18:	d867      	bhi.n	801ccea <_strtod_l+0x8fa>
 801cc1a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 801cc1e:	f67f ae9d 	bls.w	801c95c <_strtod_l+0x56c>
 801cc22:	4b0a      	ldr	r3, [pc, #40]	@ (801cc4c <_strtod_l+0x85c>)
 801cc24:	4650      	mov	r0, sl
 801cc26:	4659      	mov	r1, fp
 801cc28:	2200      	movs	r2, #0
 801cc2a:	f7e3 fce5 	bl	80005f8 <__aeabi_dmul>
 801cc2e:	4b08      	ldr	r3, [pc, #32]	@ (801cc50 <_strtod_l+0x860>)
 801cc30:	400b      	ands	r3, r1
 801cc32:	4682      	mov	sl, r0
 801cc34:	468b      	mov	fp, r1
 801cc36:	2b00      	cmp	r3, #0
 801cc38:	f47f ae08 	bne.w	801c84c <_strtod_l+0x45c>
 801cc3c:	9a05      	ldr	r2, [sp, #20]
 801cc3e:	2322      	movs	r3, #34	@ 0x22
 801cc40:	6013      	str	r3, [r2, #0]
 801cc42:	e603      	b.n	801c84c <_strtod_l+0x45c>
 801cc44:	08020e28 	.word	0x08020e28
 801cc48:	fffffc02 	.word	0xfffffc02
 801cc4c:	39500000 	.word	0x39500000
 801cc50:	7ff00000 	.word	0x7ff00000
 801cc54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801cc58:	d165      	bne.n	801cd26 <_strtod_l+0x936>
 801cc5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801cc5c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801cc60:	b35a      	cbz	r2, 801ccba <_strtod_l+0x8ca>
 801cc62:	4a9f      	ldr	r2, [pc, #636]	@ (801cee0 <_strtod_l+0xaf0>)
 801cc64:	4293      	cmp	r3, r2
 801cc66:	d12b      	bne.n	801ccc0 <_strtod_l+0x8d0>
 801cc68:	9b08      	ldr	r3, [sp, #32]
 801cc6a:	4651      	mov	r1, sl
 801cc6c:	b303      	cbz	r3, 801ccb0 <_strtod_l+0x8c0>
 801cc6e:	4b9d      	ldr	r3, [pc, #628]	@ (801cee4 <_strtod_l+0xaf4>)
 801cc70:	465a      	mov	r2, fp
 801cc72:	4013      	ands	r3, r2
 801cc74:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 801cc78:	f04f 32ff 	mov.w	r2, #4294967295
 801cc7c:	d81b      	bhi.n	801ccb6 <_strtod_l+0x8c6>
 801cc7e:	0d1b      	lsrs	r3, r3, #20
 801cc80:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801cc84:	fa02 f303 	lsl.w	r3, r2, r3
 801cc88:	4299      	cmp	r1, r3
 801cc8a:	d119      	bne.n	801ccc0 <_strtod_l+0x8d0>
 801cc8c:	4b96      	ldr	r3, [pc, #600]	@ (801cee8 <_strtod_l+0xaf8>)
 801cc8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc90:	429a      	cmp	r2, r3
 801cc92:	d102      	bne.n	801cc9a <_strtod_l+0x8aa>
 801cc94:	3101      	adds	r1, #1
 801cc96:	f43f adce 	beq.w	801c836 <_strtod_l+0x446>
 801cc9a:	4b92      	ldr	r3, [pc, #584]	@ (801cee4 <_strtod_l+0xaf4>)
 801cc9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc9e:	401a      	ands	r2, r3
 801cca0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 801cca4:	f04f 0a00 	mov.w	sl, #0
 801cca8:	9b08      	ldr	r3, [sp, #32]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d1b9      	bne.n	801cc22 <_strtod_l+0x832>
 801ccae:	e5cd      	b.n	801c84c <_strtod_l+0x45c>
 801ccb0:	f04f 33ff 	mov.w	r3, #4294967295
 801ccb4:	e7e8      	b.n	801cc88 <_strtod_l+0x898>
 801ccb6:	4613      	mov	r3, r2
 801ccb8:	e7e6      	b.n	801cc88 <_strtod_l+0x898>
 801ccba:	ea53 030a 	orrs.w	r3, r3, sl
 801ccbe:	d0a2      	beq.n	801cc06 <_strtod_l+0x816>
 801ccc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ccc2:	b1db      	cbz	r3, 801ccfc <_strtod_l+0x90c>
 801ccc4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ccc6:	4213      	tst	r3, r2
 801ccc8:	d0ee      	beq.n	801cca8 <_strtod_l+0x8b8>
 801ccca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cccc:	9a08      	ldr	r2, [sp, #32]
 801ccce:	4650      	mov	r0, sl
 801ccd0:	4659      	mov	r1, fp
 801ccd2:	b1bb      	cbz	r3, 801cd04 <_strtod_l+0x914>
 801ccd4:	f7ff fb6c 	bl	801c3b0 <sulp>
 801ccd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ccdc:	ec53 2b10 	vmov	r2, r3, d0
 801cce0:	f7e3 fad4 	bl	800028c <__adddf3>
 801cce4:	4682      	mov	sl, r0
 801cce6:	468b      	mov	fp, r1
 801cce8:	e7de      	b.n	801cca8 <_strtod_l+0x8b8>
 801ccea:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 801ccee:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801ccf2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801ccf6:	f04f 3aff 	mov.w	sl, #4294967295
 801ccfa:	e7d5      	b.n	801cca8 <_strtod_l+0x8b8>
 801ccfc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ccfe:	ea13 0f0a 	tst.w	r3, sl
 801cd02:	e7e1      	b.n	801ccc8 <_strtod_l+0x8d8>
 801cd04:	f7ff fb54 	bl	801c3b0 <sulp>
 801cd08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801cd0c:	ec53 2b10 	vmov	r2, r3, d0
 801cd10:	f7e3 faba 	bl	8000288 <__aeabi_dsub>
 801cd14:	2200      	movs	r2, #0
 801cd16:	2300      	movs	r3, #0
 801cd18:	4682      	mov	sl, r0
 801cd1a:	468b      	mov	fp, r1
 801cd1c:	f7e3 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 801cd20:	2800      	cmp	r0, #0
 801cd22:	d0c1      	beq.n	801cca8 <_strtod_l+0x8b8>
 801cd24:	e61a      	b.n	801c95c <_strtod_l+0x56c>
 801cd26:	4641      	mov	r1, r8
 801cd28:	4620      	mov	r0, r4
 801cd2a:	f7ff fa9d 	bl	801c268 <__ratio>
 801cd2e:	ec57 6b10 	vmov	r6, r7, d0
 801cd32:	2200      	movs	r2, #0
 801cd34:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 801cd38:	4630      	mov	r0, r6
 801cd3a:	4639      	mov	r1, r7
 801cd3c:	f7e3 fed8 	bl	8000af0 <__aeabi_dcmple>
 801cd40:	2800      	cmp	r0, #0
 801cd42:	d06f      	beq.n	801ce24 <_strtod_l+0xa34>
 801cd44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d17a      	bne.n	801ce40 <_strtod_l+0xa50>
 801cd4a:	f1ba 0f00 	cmp.w	sl, #0
 801cd4e:	d158      	bne.n	801ce02 <_strtod_l+0xa12>
 801cd50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d15a      	bne.n	801ce10 <_strtod_l+0xa20>
 801cd5a:	4b64      	ldr	r3, [pc, #400]	@ (801ceec <_strtod_l+0xafc>)
 801cd5c:	2200      	movs	r2, #0
 801cd5e:	4630      	mov	r0, r6
 801cd60:	4639      	mov	r1, r7
 801cd62:	f7e3 febb 	bl	8000adc <__aeabi_dcmplt>
 801cd66:	2800      	cmp	r0, #0
 801cd68:	d159      	bne.n	801ce1e <_strtod_l+0xa2e>
 801cd6a:	4630      	mov	r0, r6
 801cd6c:	4639      	mov	r1, r7
 801cd6e:	4b60      	ldr	r3, [pc, #384]	@ (801cef0 <_strtod_l+0xb00>)
 801cd70:	2200      	movs	r2, #0
 801cd72:	f7e3 fc41 	bl	80005f8 <__aeabi_dmul>
 801cd76:	4606      	mov	r6, r0
 801cd78:	460f      	mov	r7, r1
 801cd7a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 801cd7e:	9606      	str	r6, [sp, #24]
 801cd80:	9307      	str	r3, [sp, #28]
 801cd82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cd86:	4d57      	ldr	r5, [pc, #348]	@ (801cee4 <_strtod_l+0xaf4>)
 801cd88:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801cd8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd8e:	401d      	ands	r5, r3
 801cd90:	4b58      	ldr	r3, [pc, #352]	@ (801cef4 <_strtod_l+0xb04>)
 801cd92:	429d      	cmp	r5, r3
 801cd94:	f040 80b2 	bne.w	801cefc <_strtod_l+0xb0c>
 801cd98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd9a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 801cd9e:	ec4b ab10 	vmov	d0, sl, fp
 801cda2:	f7ff f999 	bl	801c0d8 <__ulp>
 801cda6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 801cdaa:	ec51 0b10 	vmov	r0, r1, d0
 801cdae:	f7e3 fc23 	bl	80005f8 <__aeabi_dmul>
 801cdb2:	4652      	mov	r2, sl
 801cdb4:	465b      	mov	r3, fp
 801cdb6:	f7e3 fa69 	bl	800028c <__adddf3>
 801cdba:	460b      	mov	r3, r1
 801cdbc:	4949      	ldr	r1, [pc, #292]	@ (801cee4 <_strtod_l+0xaf4>)
 801cdbe:	4a4e      	ldr	r2, [pc, #312]	@ (801cef8 <_strtod_l+0xb08>)
 801cdc0:	4019      	ands	r1, r3
 801cdc2:	4291      	cmp	r1, r2
 801cdc4:	4682      	mov	sl, r0
 801cdc6:	d942      	bls.n	801ce4e <_strtod_l+0xa5e>
 801cdc8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cdca:	4b47      	ldr	r3, [pc, #284]	@ (801cee8 <_strtod_l+0xaf8>)
 801cdcc:	429a      	cmp	r2, r3
 801cdce:	d103      	bne.n	801cdd8 <_strtod_l+0x9e8>
 801cdd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cdd2:	3301      	adds	r3, #1
 801cdd4:	f43f ad2f 	beq.w	801c836 <_strtod_l+0x446>
 801cdd8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 801cee8 <_strtod_l+0xaf8>
 801cddc:	f04f 3aff 	mov.w	sl, #4294967295
 801cde0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801cde2:	9805      	ldr	r0, [sp, #20]
 801cde4:	f7fe fe4c 	bl	801ba80 <_Bfree>
 801cde8:	9805      	ldr	r0, [sp, #20]
 801cdea:	4649      	mov	r1, r9
 801cdec:	f7fe fe48 	bl	801ba80 <_Bfree>
 801cdf0:	9805      	ldr	r0, [sp, #20]
 801cdf2:	4641      	mov	r1, r8
 801cdf4:	f7fe fe44 	bl	801ba80 <_Bfree>
 801cdf8:	9805      	ldr	r0, [sp, #20]
 801cdfa:	4621      	mov	r1, r4
 801cdfc:	f7fe fe40 	bl	801ba80 <_Bfree>
 801ce00:	e619      	b.n	801ca36 <_strtod_l+0x646>
 801ce02:	f1ba 0f01 	cmp.w	sl, #1
 801ce06:	d103      	bne.n	801ce10 <_strtod_l+0xa20>
 801ce08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ce0a:	2b00      	cmp	r3, #0
 801ce0c:	f43f ada6 	beq.w	801c95c <_strtod_l+0x56c>
 801ce10:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 801cec0 <_strtod_l+0xad0>
 801ce14:	4f35      	ldr	r7, [pc, #212]	@ (801ceec <_strtod_l+0xafc>)
 801ce16:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ce1a:	2600      	movs	r6, #0
 801ce1c:	e7b1      	b.n	801cd82 <_strtod_l+0x992>
 801ce1e:	4f34      	ldr	r7, [pc, #208]	@ (801cef0 <_strtod_l+0xb00>)
 801ce20:	2600      	movs	r6, #0
 801ce22:	e7aa      	b.n	801cd7a <_strtod_l+0x98a>
 801ce24:	4b32      	ldr	r3, [pc, #200]	@ (801cef0 <_strtod_l+0xb00>)
 801ce26:	4630      	mov	r0, r6
 801ce28:	4639      	mov	r1, r7
 801ce2a:	2200      	movs	r2, #0
 801ce2c:	f7e3 fbe4 	bl	80005f8 <__aeabi_dmul>
 801ce30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ce32:	4606      	mov	r6, r0
 801ce34:	460f      	mov	r7, r1
 801ce36:	2b00      	cmp	r3, #0
 801ce38:	d09f      	beq.n	801cd7a <_strtod_l+0x98a>
 801ce3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 801ce3e:	e7a0      	b.n	801cd82 <_strtod_l+0x992>
 801ce40:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 801cec8 <_strtod_l+0xad8>
 801ce44:	ed8d 7b06 	vstr	d7, [sp, #24]
 801ce48:	ec57 6b17 	vmov	r6, r7, d7
 801ce4c:	e799      	b.n	801cd82 <_strtod_l+0x992>
 801ce4e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 801ce52:	9b08      	ldr	r3, [sp, #32]
 801ce54:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d1c1      	bne.n	801cde0 <_strtod_l+0x9f0>
 801ce5c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ce60:	0d1b      	lsrs	r3, r3, #20
 801ce62:	051b      	lsls	r3, r3, #20
 801ce64:	429d      	cmp	r5, r3
 801ce66:	d1bb      	bne.n	801cde0 <_strtod_l+0x9f0>
 801ce68:	4630      	mov	r0, r6
 801ce6a:	4639      	mov	r1, r7
 801ce6c:	f7e3 ff24 	bl	8000cb8 <__aeabi_d2lz>
 801ce70:	f7e3 fb94 	bl	800059c <__aeabi_l2d>
 801ce74:	4602      	mov	r2, r0
 801ce76:	460b      	mov	r3, r1
 801ce78:	4630      	mov	r0, r6
 801ce7a:	4639      	mov	r1, r7
 801ce7c:	f7e3 fa04 	bl	8000288 <__aeabi_dsub>
 801ce80:	460b      	mov	r3, r1
 801ce82:	4602      	mov	r2, r0
 801ce84:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 801ce88:	f3cb 0613 	ubfx	r6, fp, #0, #20
 801ce8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ce8e:	ea46 060a 	orr.w	r6, r6, sl
 801ce92:	431e      	orrs	r6, r3
 801ce94:	d06f      	beq.n	801cf76 <_strtod_l+0xb86>
 801ce96:	a30e      	add	r3, pc, #56	@ (adr r3, 801ced0 <_strtod_l+0xae0>)
 801ce98:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce9c:	f7e3 fe1e 	bl	8000adc <__aeabi_dcmplt>
 801cea0:	2800      	cmp	r0, #0
 801cea2:	f47f acd3 	bne.w	801c84c <_strtod_l+0x45c>
 801cea6:	a30c      	add	r3, pc, #48	@ (adr r3, 801ced8 <_strtod_l+0xae8>)
 801cea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ceac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ceb0:	f7e3 fe32 	bl	8000b18 <__aeabi_dcmpgt>
 801ceb4:	2800      	cmp	r0, #0
 801ceb6:	d093      	beq.n	801cde0 <_strtod_l+0x9f0>
 801ceb8:	e4c8      	b.n	801c84c <_strtod_l+0x45c>
 801ceba:	bf00      	nop
 801cebc:	f3af 8000 	nop.w
 801cec0:	00000000 	.word	0x00000000
 801cec4:	bff00000 	.word	0xbff00000
 801cec8:	00000000 	.word	0x00000000
 801cecc:	3ff00000 	.word	0x3ff00000
 801ced0:	94a03595 	.word	0x94a03595
 801ced4:	3fdfffff 	.word	0x3fdfffff
 801ced8:	35afe535 	.word	0x35afe535
 801cedc:	3fe00000 	.word	0x3fe00000
 801cee0:	000fffff 	.word	0x000fffff
 801cee4:	7ff00000 	.word	0x7ff00000
 801cee8:	7fefffff 	.word	0x7fefffff
 801ceec:	3ff00000 	.word	0x3ff00000
 801cef0:	3fe00000 	.word	0x3fe00000
 801cef4:	7fe00000 	.word	0x7fe00000
 801cef8:	7c9fffff 	.word	0x7c9fffff
 801cefc:	9b08      	ldr	r3, [sp, #32]
 801cefe:	b323      	cbz	r3, 801cf4a <_strtod_l+0xb5a>
 801cf00:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 801cf04:	d821      	bhi.n	801cf4a <_strtod_l+0xb5a>
 801cf06:	a328      	add	r3, pc, #160	@ (adr r3, 801cfa8 <_strtod_l+0xbb8>)
 801cf08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf0c:	4630      	mov	r0, r6
 801cf0e:	4639      	mov	r1, r7
 801cf10:	f7e3 fdee 	bl	8000af0 <__aeabi_dcmple>
 801cf14:	b1a0      	cbz	r0, 801cf40 <_strtod_l+0xb50>
 801cf16:	4639      	mov	r1, r7
 801cf18:	4630      	mov	r0, r6
 801cf1a:	f7e3 fe45 	bl	8000ba8 <__aeabi_d2uiz>
 801cf1e:	2801      	cmp	r0, #1
 801cf20:	bf38      	it	cc
 801cf22:	2001      	movcc	r0, #1
 801cf24:	f7e3 faee 	bl	8000504 <__aeabi_ui2d>
 801cf28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cf2a:	4606      	mov	r6, r0
 801cf2c:	460f      	mov	r7, r1
 801cf2e:	b9fb      	cbnz	r3, 801cf70 <_strtod_l+0xb80>
 801cf30:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 801cf34:	9014      	str	r0, [sp, #80]	@ 0x50
 801cf36:	9315      	str	r3, [sp, #84]	@ 0x54
 801cf38:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 801cf3c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 801cf40:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cf42:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 801cf46:	1b5b      	subs	r3, r3, r5
 801cf48:	9311      	str	r3, [sp, #68]	@ 0x44
 801cf4a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801cf4e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 801cf52:	f7ff f8c1 	bl	801c0d8 <__ulp>
 801cf56:	4650      	mov	r0, sl
 801cf58:	ec53 2b10 	vmov	r2, r3, d0
 801cf5c:	4659      	mov	r1, fp
 801cf5e:	f7e3 fb4b 	bl	80005f8 <__aeabi_dmul>
 801cf62:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 801cf66:	f7e3 f991 	bl	800028c <__adddf3>
 801cf6a:	4682      	mov	sl, r0
 801cf6c:	468b      	mov	fp, r1
 801cf6e:	e770      	b.n	801ce52 <_strtod_l+0xa62>
 801cf70:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 801cf74:	e7e0      	b.n	801cf38 <_strtod_l+0xb48>
 801cf76:	a30e      	add	r3, pc, #56	@ (adr r3, 801cfb0 <_strtod_l+0xbc0>)
 801cf78:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf7c:	f7e3 fdae 	bl	8000adc <__aeabi_dcmplt>
 801cf80:	e798      	b.n	801ceb4 <_strtod_l+0xac4>
 801cf82:	2300      	movs	r3, #0
 801cf84:	930e      	str	r3, [sp, #56]	@ 0x38
 801cf86:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801cf88:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cf8a:	6013      	str	r3, [r2, #0]
 801cf8c:	f7ff ba6d 	b.w	801c46a <_strtod_l+0x7a>
 801cf90:	2a65      	cmp	r2, #101	@ 0x65
 801cf92:	f43f ab68 	beq.w	801c666 <_strtod_l+0x276>
 801cf96:	2a45      	cmp	r2, #69	@ 0x45
 801cf98:	f43f ab65 	beq.w	801c666 <_strtod_l+0x276>
 801cf9c:	2301      	movs	r3, #1
 801cf9e:	f7ff bba0 	b.w	801c6e2 <_strtod_l+0x2f2>
 801cfa2:	bf00      	nop
 801cfa4:	f3af 8000 	nop.w
 801cfa8:	ffc00000 	.word	0xffc00000
 801cfac:	41dfffff 	.word	0x41dfffff
 801cfb0:	94a03595 	.word	0x94a03595
 801cfb4:	3fcfffff 	.word	0x3fcfffff

0801cfb8 <_strtod_r>:
 801cfb8:	4b01      	ldr	r3, [pc, #4]	@ (801cfc0 <_strtod_r+0x8>)
 801cfba:	f7ff ba19 	b.w	801c3f0 <_strtod_l>
 801cfbe:	bf00      	nop
 801cfc0:	200001b0 	.word	0x200001b0

0801cfc4 <_strtol_l.isra.0>:
 801cfc4:	2b24      	cmp	r3, #36	@ 0x24
 801cfc6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cfca:	4686      	mov	lr, r0
 801cfcc:	4690      	mov	r8, r2
 801cfce:	d801      	bhi.n	801cfd4 <_strtol_l.isra.0+0x10>
 801cfd0:	2b01      	cmp	r3, #1
 801cfd2:	d106      	bne.n	801cfe2 <_strtol_l.isra.0+0x1e>
 801cfd4:	f7fd fd60 	bl	801aa98 <__errno>
 801cfd8:	2316      	movs	r3, #22
 801cfda:	6003      	str	r3, [r0, #0]
 801cfdc:	2000      	movs	r0, #0
 801cfde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfe2:	4834      	ldr	r0, [pc, #208]	@ (801d0b4 <_strtol_l.isra.0+0xf0>)
 801cfe4:	460d      	mov	r5, r1
 801cfe6:	462a      	mov	r2, r5
 801cfe8:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cfec:	5d06      	ldrb	r6, [r0, r4]
 801cfee:	f016 0608 	ands.w	r6, r6, #8
 801cff2:	d1f8      	bne.n	801cfe6 <_strtol_l.isra.0+0x22>
 801cff4:	2c2d      	cmp	r4, #45	@ 0x2d
 801cff6:	d110      	bne.n	801d01a <_strtol_l.isra.0+0x56>
 801cff8:	782c      	ldrb	r4, [r5, #0]
 801cffa:	2601      	movs	r6, #1
 801cffc:	1c95      	adds	r5, r2, #2
 801cffe:	f033 0210 	bics.w	r2, r3, #16
 801d002:	d115      	bne.n	801d030 <_strtol_l.isra.0+0x6c>
 801d004:	2c30      	cmp	r4, #48	@ 0x30
 801d006:	d10d      	bne.n	801d024 <_strtol_l.isra.0+0x60>
 801d008:	782a      	ldrb	r2, [r5, #0]
 801d00a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d00e:	2a58      	cmp	r2, #88	@ 0x58
 801d010:	d108      	bne.n	801d024 <_strtol_l.isra.0+0x60>
 801d012:	786c      	ldrb	r4, [r5, #1]
 801d014:	3502      	adds	r5, #2
 801d016:	2310      	movs	r3, #16
 801d018:	e00a      	b.n	801d030 <_strtol_l.isra.0+0x6c>
 801d01a:	2c2b      	cmp	r4, #43	@ 0x2b
 801d01c:	bf04      	itt	eq
 801d01e:	782c      	ldrbeq	r4, [r5, #0]
 801d020:	1c95      	addeq	r5, r2, #2
 801d022:	e7ec      	b.n	801cffe <_strtol_l.isra.0+0x3a>
 801d024:	2b00      	cmp	r3, #0
 801d026:	d1f6      	bne.n	801d016 <_strtol_l.isra.0+0x52>
 801d028:	2c30      	cmp	r4, #48	@ 0x30
 801d02a:	bf14      	ite	ne
 801d02c:	230a      	movne	r3, #10
 801d02e:	2308      	moveq	r3, #8
 801d030:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d034:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d038:	2200      	movs	r2, #0
 801d03a:	fbbc f9f3 	udiv	r9, ip, r3
 801d03e:	4610      	mov	r0, r2
 801d040:	fb03 ca19 	mls	sl, r3, r9, ip
 801d044:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d048:	2f09      	cmp	r7, #9
 801d04a:	d80f      	bhi.n	801d06c <_strtol_l.isra.0+0xa8>
 801d04c:	463c      	mov	r4, r7
 801d04e:	42a3      	cmp	r3, r4
 801d050:	dd1b      	ble.n	801d08a <_strtol_l.isra.0+0xc6>
 801d052:	1c57      	adds	r7, r2, #1
 801d054:	d007      	beq.n	801d066 <_strtol_l.isra.0+0xa2>
 801d056:	4581      	cmp	r9, r0
 801d058:	d314      	bcc.n	801d084 <_strtol_l.isra.0+0xc0>
 801d05a:	d101      	bne.n	801d060 <_strtol_l.isra.0+0x9c>
 801d05c:	45a2      	cmp	sl, r4
 801d05e:	db11      	blt.n	801d084 <_strtol_l.isra.0+0xc0>
 801d060:	fb00 4003 	mla	r0, r0, r3, r4
 801d064:	2201      	movs	r2, #1
 801d066:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d06a:	e7eb      	b.n	801d044 <_strtol_l.isra.0+0x80>
 801d06c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d070:	2f19      	cmp	r7, #25
 801d072:	d801      	bhi.n	801d078 <_strtol_l.isra.0+0xb4>
 801d074:	3c37      	subs	r4, #55	@ 0x37
 801d076:	e7ea      	b.n	801d04e <_strtol_l.isra.0+0x8a>
 801d078:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d07c:	2f19      	cmp	r7, #25
 801d07e:	d804      	bhi.n	801d08a <_strtol_l.isra.0+0xc6>
 801d080:	3c57      	subs	r4, #87	@ 0x57
 801d082:	e7e4      	b.n	801d04e <_strtol_l.isra.0+0x8a>
 801d084:	f04f 32ff 	mov.w	r2, #4294967295
 801d088:	e7ed      	b.n	801d066 <_strtol_l.isra.0+0xa2>
 801d08a:	1c53      	adds	r3, r2, #1
 801d08c:	d108      	bne.n	801d0a0 <_strtol_l.isra.0+0xdc>
 801d08e:	2322      	movs	r3, #34	@ 0x22
 801d090:	f8ce 3000 	str.w	r3, [lr]
 801d094:	4660      	mov	r0, ip
 801d096:	f1b8 0f00 	cmp.w	r8, #0
 801d09a:	d0a0      	beq.n	801cfde <_strtol_l.isra.0+0x1a>
 801d09c:	1e69      	subs	r1, r5, #1
 801d09e:	e006      	b.n	801d0ae <_strtol_l.isra.0+0xea>
 801d0a0:	b106      	cbz	r6, 801d0a4 <_strtol_l.isra.0+0xe0>
 801d0a2:	4240      	negs	r0, r0
 801d0a4:	f1b8 0f00 	cmp.w	r8, #0
 801d0a8:	d099      	beq.n	801cfde <_strtol_l.isra.0+0x1a>
 801d0aa:	2a00      	cmp	r2, #0
 801d0ac:	d1f6      	bne.n	801d09c <_strtol_l.isra.0+0xd8>
 801d0ae:	f8c8 1000 	str.w	r1, [r8]
 801d0b2:	e794      	b.n	801cfde <_strtol_l.isra.0+0x1a>
 801d0b4:	08020e51 	.word	0x08020e51

0801d0b8 <_strtol_r>:
 801d0b8:	f7ff bf84 	b.w	801cfc4 <_strtol_l.isra.0>

0801d0bc <__ssputs_r>:
 801d0bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d0c0:	688e      	ldr	r6, [r1, #8]
 801d0c2:	461f      	mov	r7, r3
 801d0c4:	42be      	cmp	r6, r7
 801d0c6:	680b      	ldr	r3, [r1, #0]
 801d0c8:	4682      	mov	sl, r0
 801d0ca:	460c      	mov	r4, r1
 801d0cc:	4690      	mov	r8, r2
 801d0ce:	d82d      	bhi.n	801d12c <__ssputs_r+0x70>
 801d0d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d0d4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801d0d8:	d026      	beq.n	801d128 <__ssputs_r+0x6c>
 801d0da:	6965      	ldr	r5, [r4, #20]
 801d0dc:	6909      	ldr	r1, [r1, #16]
 801d0de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d0e2:	eba3 0901 	sub.w	r9, r3, r1
 801d0e6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d0ea:	1c7b      	adds	r3, r7, #1
 801d0ec:	444b      	add	r3, r9
 801d0ee:	106d      	asrs	r5, r5, #1
 801d0f0:	429d      	cmp	r5, r3
 801d0f2:	bf38      	it	cc
 801d0f4:	461d      	movcc	r5, r3
 801d0f6:	0553      	lsls	r3, r2, #21
 801d0f8:	d527      	bpl.n	801d14a <__ssputs_r+0x8e>
 801d0fa:	4629      	mov	r1, r5
 801d0fc:	f7fe fbf4 	bl	801b8e8 <_malloc_r>
 801d100:	4606      	mov	r6, r0
 801d102:	b360      	cbz	r0, 801d15e <__ssputs_r+0xa2>
 801d104:	6921      	ldr	r1, [r4, #16]
 801d106:	464a      	mov	r2, r9
 801d108:	f7fd fcf3 	bl	801aaf2 <memcpy>
 801d10c:	89a3      	ldrh	r3, [r4, #12]
 801d10e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d112:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d116:	81a3      	strh	r3, [r4, #12]
 801d118:	6126      	str	r6, [r4, #16]
 801d11a:	6165      	str	r5, [r4, #20]
 801d11c:	444e      	add	r6, r9
 801d11e:	eba5 0509 	sub.w	r5, r5, r9
 801d122:	6026      	str	r6, [r4, #0]
 801d124:	60a5      	str	r5, [r4, #8]
 801d126:	463e      	mov	r6, r7
 801d128:	42be      	cmp	r6, r7
 801d12a:	d900      	bls.n	801d12e <__ssputs_r+0x72>
 801d12c:	463e      	mov	r6, r7
 801d12e:	6820      	ldr	r0, [r4, #0]
 801d130:	4632      	mov	r2, r6
 801d132:	4641      	mov	r1, r8
 801d134:	f7fd fbd4 	bl	801a8e0 <memmove>
 801d138:	68a3      	ldr	r3, [r4, #8]
 801d13a:	1b9b      	subs	r3, r3, r6
 801d13c:	60a3      	str	r3, [r4, #8]
 801d13e:	6823      	ldr	r3, [r4, #0]
 801d140:	4433      	add	r3, r6
 801d142:	6023      	str	r3, [r4, #0]
 801d144:	2000      	movs	r0, #0
 801d146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d14a:	462a      	mov	r2, r5
 801d14c:	f7ff f902 	bl	801c354 <_realloc_r>
 801d150:	4606      	mov	r6, r0
 801d152:	2800      	cmp	r0, #0
 801d154:	d1e0      	bne.n	801d118 <__ssputs_r+0x5c>
 801d156:	6921      	ldr	r1, [r4, #16]
 801d158:	4650      	mov	r0, sl
 801d15a:	f7fe fb51 	bl	801b800 <_free_r>
 801d15e:	230c      	movs	r3, #12
 801d160:	f8ca 3000 	str.w	r3, [sl]
 801d164:	89a3      	ldrh	r3, [r4, #12]
 801d166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d16a:	81a3      	strh	r3, [r4, #12]
 801d16c:	f04f 30ff 	mov.w	r0, #4294967295
 801d170:	e7e9      	b.n	801d146 <__ssputs_r+0x8a>
	...

0801d174 <_svfiprintf_r>:
 801d174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d178:	4698      	mov	r8, r3
 801d17a:	898b      	ldrh	r3, [r1, #12]
 801d17c:	061b      	lsls	r3, r3, #24
 801d17e:	b09d      	sub	sp, #116	@ 0x74
 801d180:	4607      	mov	r7, r0
 801d182:	460d      	mov	r5, r1
 801d184:	4614      	mov	r4, r2
 801d186:	d510      	bpl.n	801d1aa <_svfiprintf_r+0x36>
 801d188:	690b      	ldr	r3, [r1, #16]
 801d18a:	b973      	cbnz	r3, 801d1aa <_svfiprintf_r+0x36>
 801d18c:	2140      	movs	r1, #64	@ 0x40
 801d18e:	f7fe fbab 	bl	801b8e8 <_malloc_r>
 801d192:	6028      	str	r0, [r5, #0]
 801d194:	6128      	str	r0, [r5, #16]
 801d196:	b930      	cbnz	r0, 801d1a6 <_svfiprintf_r+0x32>
 801d198:	230c      	movs	r3, #12
 801d19a:	603b      	str	r3, [r7, #0]
 801d19c:	f04f 30ff 	mov.w	r0, #4294967295
 801d1a0:	b01d      	add	sp, #116	@ 0x74
 801d1a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1a6:	2340      	movs	r3, #64	@ 0x40
 801d1a8:	616b      	str	r3, [r5, #20]
 801d1aa:	2300      	movs	r3, #0
 801d1ac:	9309      	str	r3, [sp, #36]	@ 0x24
 801d1ae:	2320      	movs	r3, #32
 801d1b0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d1b4:	f8cd 800c 	str.w	r8, [sp, #12]
 801d1b8:	2330      	movs	r3, #48	@ 0x30
 801d1ba:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d358 <_svfiprintf_r+0x1e4>
 801d1be:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d1c2:	f04f 0901 	mov.w	r9, #1
 801d1c6:	4623      	mov	r3, r4
 801d1c8:	469a      	mov	sl, r3
 801d1ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d1ce:	b10a      	cbz	r2, 801d1d4 <_svfiprintf_r+0x60>
 801d1d0:	2a25      	cmp	r2, #37	@ 0x25
 801d1d2:	d1f9      	bne.n	801d1c8 <_svfiprintf_r+0x54>
 801d1d4:	ebba 0b04 	subs.w	fp, sl, r4
 801d1d8:	d00b      	beq.n	801d1f2 <_svfiprintf_r+0x7e>
 801d1da:	465b      	mov	r3, fp
 801d1dc:	4622      	mov	r2, r4
 801d1de:	4629      	mov	r1, r5
 801d1e0:	4638      	mov	r0, r7
 801d1e2:	f7ff ff6b 	bl	801d0bc <__ssputs_r>
 801d1e6:	3001      	adds	r0, #1
 801d1e8:	f000 80a7 	beq.w	801d33a <_svfiprintf_r+0x1c6>
 801d1ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d1ee:	445a      	add	r2, fp
 801d1f0:	9209      	str	r2, [sp, #36]	@ 0x24
 801d1f2:	f89a 3000 	ldrb.w	r3, [sl]
 801d1f6:	2b00      	cmp	r3, #0
 801d1f8:	f000 809f 	beq.w	801d33a <_svfiprintf_r+0x1c6>
 801d1fc:	2300      	movs	r3, #0
 801d1fe:	f04f 32ff 	mov.w	r2, #4294967295
 801d202:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d206:	f10a 0a01 	add.w	sl, sl, #1
 801d20a:	9304      	str	r3, [sp, #16]
 801d20c:	9307      	str	r3, [sp, #28]
 801d20e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d212:	931a      	str	r3, [sp, #104]	@ 0x68
 801d214:	4654      	mov	r4, sl
 801d216:	2205      	movs	r2, #5
 801d218:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d21c:	484e      	ldr	r0, [pc, #312]	@ (801d358 <_svfiprintf_r+0x1e4>)
 801d21e:	f7e2 ffd7 	bl	80001d0 <memchr>
 801d222:	9a04      	ldr	r2, [sp, #16]
 801d224:	b9d8      	cbnz	r0, 801d25e <_svfiprintf_r+0xea>
 801d226:	06d0      	lsls	r0, r2, #27
 801d228:	bf44      	itt	mi
 801d22a:	2320      	movmi	r3, #32
 801d22c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d230:	0711      	lsls	r1, r2, #28
 801d232:	bf44      	itt	mi
 801d234:	232b      	movmi	r3, #43	@ 0x2b
 801d236:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d23a:	f89a 3000 	ldrb.w	r3, [sl]
 801d23e:	2b2a      	cmp	r3, #42	@ 0x2a
 801d240:	d015      	beq.n	801d26e <_svfiprintf_r+0xfa>
 801d242:	9a07      	ldr	r2, [sp, #28]
 801d244:	4654      	mov	r4, sl
 801d246:	2000      	movs	r0, #0
 801d248:	f04f 0c0a 	mov.w	ip, #10
 801d24c:	4621      	mov	r1, r4
 801d24e:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d252:	3b30      	subs	r3, #48	@ 0x30
 801d254:	2b09      	cmp	r3, #9
 801d256:	d94b      	bls.n	801d2f0 <_svfiprintf_r+0x17c>
 801d258:	b1b0      	cbz	r0, 801d288 <_svfiprintf_r+0x114>
 801d25a:	9207      	str	r2, [sp, #28]
 801d25c:	e014      	b.n	801d288 <_svfiprintf_r+0x114>
 801d25e:	eba0 0308 	sub.w	r3, r0, r8
 801d262:	fa09 f303 	lsl.w	r3, r9, r3
 801d266:	4313      	orrs	r3, r2
 801d268:	9304      	str	r3, [sp, #16]
 801d26a:	46a2      	mov	sl, r4
 801d26c:	e7d2      	b.n	801d214 <_svfiprintf_r+0xa0>
 801d26e:	9b03      	ldr	r3, [sp, #12]
 801d270:	1d19      	adds	r1, r3, #4
 801d272:	681b      	ldr	r3, [r3, #0]
 801d274:	9103      	str	r1, [sp, #12]
 801d276:	2b00      	cmp	r3, #0
 801d278:	bfbb      	ittet	lt
 801d27a:	425b      	neglt	r3, r3
 801d27c:	f042 0202 	orrlt.w	r2, r2, #2
 801d280:	9307      	strge	r3, [sp, #28]
 801d282:	9307      	strlt	r3, [sp, #28]
 801d284:	bfb8      	it	lt
 801d286:	9204      	strlt	r2, [sp, #16]
 801d288:	7823      	ldrb	r3, [r4, #0]
 801d28a:	2b2e      	cmp	r3, #46	@ 0x2e
 801d28c:	d10a      	bne.n	801d2a4 <_svfiprintf_r+0x130>
 801d28e:	7863      	ldrb	r3, [r4, #1]
 801d290:	2b2a      	cmp	r3, #42	@ 0x2a
 801d292:	d132      	bne.n	801d2fa <_svfiprintf_r+0x186>
 801d294:	9b03      	ldr	r3, [sp, #12]
 801d296:	1d1a      	adds	r2, r3, #4
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	9203      	str	r2, [sp, #12]
 801d29c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d2a0:	3402      	adds	r4, #2
 801d2a2:	9305      	str	r3, [sp, #20]
 801d2a4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d368 <_svfiprintf_r+0x1f4>
 801d2a8:	7821      	ldrb	r1, [r4, #0]
 801d2aa:	2203      	movs	r2, #3
 801d2ac:	4650      	mov	r0, sl
 801d2ae:	f7e2 ff8f 	bl	80001d0 <memchr>
 801d2b2:	b138      	cbz	r0, 801d2c4 <_svfiprintf_r+0x150>
 801d2b4:	9b04      	ldr	r3, [sp, #16]
 801d2b6:	eba0 000a 	sub.w	r0, r0, sl
 801d2ba:	2240      	movs	r2, #64	@ 0x40
 801d2bc:	4082      	lsls	r2, r0
 801d2be:	4313      	orrs	r3, r2
 801d2c0:	3401      	adds	r4, #1
 801d2c2:	9304      	str	r3, [sp, #16]
 801d2c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2c8:	4824      	ldr	r0, [pc, #144]	@ (801d35c <_svfiprintf_r+0x1e8>)
 801d2ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d2ce:	2206      	movs	r2, #6
 801d2d0:	f7e2 ff7e 	bl	80001d0 <memchr>
 801d2d4:	2800      	cmp	r0, #0
 801d2d6:	d036      	beq.n	801d346 <_svfiprintf_r+0x1d2>
 801d2d8:	4b21      	ldr	r3, [pc, #132]	@ (801d360 <_svfiprintf_r+0x1ec>)
 801d2da:	bb1b      	cbnz	r3, 801d324 <_svfiprintf_r+0x1b0>
 801d2dc:	9b03      	ldr	r3, [sp, #12]
 801d2de:	3307      	adds	r3, #7
 801d2e0:	f023 0307 	bic.w	r3, r3, #7
 801d2e4:	3308      	adds	r3, #8
 801d2e6:	9303      	str	r3, [sp, #12]
 801d2e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2ea:	4433      	add	r3, r6
 801d2ec:	9309      	str	r3, [sp, #36]	@ 0x24
 801d2ee:	e76a      	b.n	801d1c6 <_svfiprintf_r+0x52>
 801d2f0:	fb0c 3202 	mla	r2, ip, r2, r3
 801d2f4:	460c      	mov	r4, r1
 801d2f6:	2001      	movs	r0, #1
 801d2f8:	e7a8      	b.n	801d24c <_svfiprintf_r+0xd8>
 801d2fa:	2300      	movs	r3, #0
 801d2fc:	3401      	adds	r4, #1
 801d2fe:	9305      	str	r3, [sp, #20]
 801d300:	4619      	mov	r1, r3
 801d302:	f04f 0c0a 	mov.w	ip, #10
 801d306:	4620      	mov	r0, r4
 801d308:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d30c:	3a30      	subs	r2, #48	@ 0x30
 801d30e:	2a09      	cmp	r2, #9
 801d310:	d903      	bls.n	801d31a <_svfiprintf_r+0x1a6>
 801d312:	2b00      	cmp	r3, #0
 801d314:	d0c6      	beq.n	801d2a4 <_svfiprintf_r+0x130>
 801d316:	9105      	str	r1, [sp, #20]
 801d318:	e7c4      	b.n	801d2a4 <_svfiprintf_r+0x130>
 801d31a:	fb0c 2101 	mla	r1, ip, r1, r2
 801d31e:	4604      	mov	r4, r0
 801d320:	2301      	movs	r3, #1
 801d322:	e7f0      	b.n	801d306 <_svfiprintf_r+0x192>
 801d324:	ab03      	add	r3, sp, #12
 801d326:	9300      	str	r3, [sp, #0]
 801d328:	462a      	mov	r2, r5
 801d32a:	4b0e      	ldr	r3, [pc, #56]	@ (801d364 <_svfiprintf_r+0x1f0>)
 801d32c:	a904      	add	r1, sp, #16
 801d32e:	4638      	mov	r0, r7
 801d330:	f7fc f964 	bl	80195fc <_printf_float>
 801d334:	1c42      	adds	r2, r0, #1
 801d336:	4606      	mov	r6, r0
 801d338:	d1d6      	bne.n	801d2e8 <_svfiprintf_r+0x174>
 801d33a:	89ab      	ldrh	r3, [r5, #12]
 801d33c:	065b      	lsls	r3, r3, #25
 801d33e:	f53f af2d 	bmi.w	801d19c <_svfiprintf_r+0x28>
 801d342:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d344:	e72c      	b.n	801d1a0 <_svfiprintf_r+0x2c>
 801d346:	ab03      	add	r3, sp, #12
 801d348:	9300      	str	r3, [sp, #0]
 801d34a:	462a      	mov	r2, r5
 801d34c:	4b05      	ldr	r3, [pc, #20]	@ (801d364 <_svfiprintf_r+0x1f0>)
 801d34e:	a904      	add	r1, sp, #16
 801d350:	4638      	mov	r0, r7
 801d352:	f7fc fd37 	bl	8019dc4 <_printf_i>
 801d356:	e7ed      	b.n	801d334 <_svfiprintf_r+0x1c0>
 801d358:	08020704 	.word	0x08020704
 801d35c:	0802070e 	.word	0x0802070e
 801d360:	080195fd 	.word	0x080195fd
 801d364:	0801d0bd 	.word	0x0801d0bd
 801d368:	0802070a 	.word	0x0802070a

0801d36c <_sungetc_r>:
 801d36c:	b538      	push	{r3, r4, r5, lr}
 801d36e:	1c4b      	adds	r3, r1, #1
 801d370:	4614      	mov	r4, r2
 801d372:	d103      	bne.n	801d37c <_sungetc_r+0x10>
 801d374:	f04f 35ff 	mov.w	r5, #4294967295
 801d378:	4628      	mov	r0, r5
 801d37a:	bd38      	pop	{r3, r4, r5, pc}
 801d37c:	8993      	ldrh	r3, [r2, #12]
 801d37e:	f023 0320 	bic.w	r3, r3, #32
 801d382:	8193      	strh	r3, [r2, #12]
 801d384:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d386:	6852      	ldr	r2, [r2, #4]
 801d388:	b2cd      	uxtb	r5, r1
 801d38a:	b18b      	cbz	r3, 801d3b0 <_sungetc_r+0x44>
 801d38c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 801d38e:	4293      	cmp	r3, r2
 801d390:	dd08      	ble.n	801d3a4 <_sungetc_r+0x38>
 801d392:	6823      	ldr	r3, [r4, #0]
 801d394:	1e5a      	subs	r2, r3, #1
 801d396:	6022      	str	r2, [r4, #0]
 801d398:	f803 5c01 	strb.w	r5, [r3, #-1]
 801d39c:	6863      	ldr	r3, [r4, #4]
 801d39e:	3301      	adds	r3, #1
 801d3a0:	6063      	str	r3, [r4, #4]
 801d3a2:	e7e9      	b.n	801d378 <_sungetc_r+0xc>
 801d3a4:	4621      	mov	r1, r4
 801d3a6:	f000 fc8c 	bl	801dcc2 <__submore>
 801d3aa:	2800      	cmp	r0, #0
 801d3ac:	d0f1      	beq.n	801d392 <_sungetc_r+0x26>
 801d3ae:	e7e1      	b.n	801d374 <_sungetc_r+0x8>
 801d3b0:	6921      	ldr	r1, [r4, #16]
 801d3b2:	6823      	ldr	r3, [r4, #0]
 801d3b4:	b151      	cbz	r1, 801d3cc <_sungetc_r+0x60>
 801d3b6:	4299      	cmp	r1, r3
 801d3b8:	d208      	bcs.n	801d3cc <_sungetc_r+0x60>
 801d3ba:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 801d3be:	42a9      	cmp	r1, r5
 801d3c0:	d104      	bne.n	801d3cc <_sungetc_r+0x60>
 801d3c2:	3b01      	subs	r3, #1
 801d3c4:	3201      	adds	r2, #1
 801d3c6:	6023      	str	r3, [r4, #0]
 801d3c8:	6062      	str	r2, [r4, #4]
 801d3ca:	e7d5      	b.n	801d378 <_sungetc_r+0xc>
 801d3cc:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801d3d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d3d4:	6363      	str	r3, [r4, #52]	@ 0x34
 801d3d6:	2303      	movs	r3, #3
 801d3d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 801d3da:	4623      	mov	r3, r4
 801d3dc:	f803 5f46 	strb.w	r5, [r3, #70]!
 801d3e0:	6023      	str	r3, [r4, #0]
 801d3e2:	2301      	movs	r3, #1
 801d3e4:	e7dc      	b.n	801d3a0 <_sungetc_r+0x34>

0801d3e6 <__ssrefill_r>:
 801d3e6:	b510      	push	{r4, lr}
 801d3e8:	460c      	mov	r4, r1
 801d3ea:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801d3ec:	b169      	cbz	r1, 801d40a <__ssrefill_r+0x24>
 801d3ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d3f2:	4299      	cmp	r1, r3
 801d3f4:	d001      	beq.n	801d3fa <__ssrefill_r+0x14>
 801d3f6:	f7fe fa03 	bl	801b800 <_free_r>
 801d3fa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d3fc:	6063      	str	r3, [r4, #4]
 801d3fe:	2000      	movs	r0, #0
 801d400:	6360      	str	r0, [r4, #52]	@ 0x34
 801d402:	b113      	cbz	r3, 801d40a <__ssrefill_r+0x24>
 801d404:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 801d406:	6023      	str	r3, [r4, #0]
 801d408:	bd10      	pop	{r4, pc}
 801d40a:	6923      	ldr	r3, [r4, #16]
 801d40c:	6023      	str	r3, [r4, #0]
 801d40e:	2300      	movs	r3, #0
 801d410:	6063      	str	r3, [r4, #4]
 801d412:	89a3      	ldrh	r3, [r4, #12]
 801d414:	f043 0320 	orr.w	r3, r3, #32
 801d418:	81a3      	strh	r3, [r4, #12]
 801d41a:	f04f 30ff 	mov.w	r0, #4294967295
 801d41e:	e7f3      	b.n	801d408 <__ssrefill_r+0x22>

0801d420 <__ssvfiscanf_r>:
 801d420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d424:	460c      	mov	r4, r1
 801d426:	f5ad 7d23 	sub.w	sp, sp, #652	@ 0x28c
 801d42a:	2100      	movs	r1, #0
 801d42c:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 801d430:	49a6      	ldr	r1, [pc, #664]	@ (801d6cc <__ssvfiscanf_r+0x2ac>)
 801d432:	91a0      	str	r1, [sp, #640]	@ 0x280
 801d434:	f10d 0804 	add.w	r8, sp, #4
 801d438:	49a5      	ldr	r1, [pc, #660]	@ (801d6d0 <__ssvfiscanf_r+0x2b0>)
 801d43a:	4fa6      	ldr	r7, [pc, #664]	@ (801d6d4 <__ssvfiscanf_r+0x2b4>)
 801d43c:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 801d440:	4606      	mov	r6, r0
 801d442:	91a1      	str	r1, [sp, #644]	@ 0x284
 801d444:	9300      	str	r3, [sp, #0]
 801d446:	f892 9000 	ldrb.w	r9, [r2]
 801d44a:	f1b9 0f00 	cmp.w	r9, #0
 801d44e:	f000 8158 	beq.w	801d702 <__ssvfiscanf_r+0x2e2>
 801d452:	f817 3009 	ldrb.w	r3, [r7, r9]
 801d456:	f013 0308 	ands.w	r3, r3, #8
 801d45a:	f102 0501 	add.w	r5, r2, #1
 801d45e:	d019      	beq.n	801d494 <__ssvfiscanf_r+0x74>
 801d460:	6863      	ldr	r3, [r4, #4]
 801d462:	2b00      	cmp	r3, #0
 801d464:	dd0f      	ble.n	801d486 <__ssvfiscanf_r+0x66>
 801d466:	6823      	ldr	r3, [r4, #0]
 801d468:	781a      	ldrb	r2, [r3, #0]
 801d46a:	5cba      	ldrb	r2, [r7, r2]
 801d46c:	0712      	lsls	r2, r2, #28
 801d46e:	d401      	bmi.n	801d474 <__ssvfiscanf_r+0x54>
 801d470:	462a      	mov	r2, r5
 801d472:	e7e8      	b.n	801d446 <__ssvfiscanf_r+0x26>
 801d474:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d476:	3201      	adds	r2, #1
 801d478:	9245      	str	r2, [sp, #276]	@ 0x114
 801d47a:	6862      	ldr	r2, [r4, #4]
 801d47c:	3301      	adds	r3, #1
 801d47e:	3a01      	subs	r2, #1
 801d480:	6062      	str	r2, [r4, #4]
 801d482:	6023      	str	r3, [r4, #0]
 801d484:	e7ec      	b.n	801d460 <__ssvfiscanf_r+0x40>
 801d486:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d488:	4621      	mov	r1, r4
 801d48a:	4630      	mov	r0, r6
 801d48c:	4798      	blx	r3
 801d48e:	2800      	cmp	r0, #0
 801d490:	d0e9      	beq.n	801d466 <__ssvfiscanf_r+0x46>
 801d492:	e7ed      	b.n	801d470 <__ssvfiscanf_r+0x50>
 801d494:	f1b9 0f25 	cmp.w	r9, #37	@ 0x25
 801d498:	f040 8085 	bne.w	801d5a6 <__ssvfiscanf_r+0x186>
 801d49c:	9341      	str	r3, [sp, #260]	@ 0x104
 801d49e:	9343      	str	r3, [sp, #268]	@ 0x10c
 801d4a0:	7853      	ldrb	r3, [r2, #1]
 801d4a2:	2b2a      	cmp	r3, #42	@ 0x2a
 801d4a4:	bf02      	ittt	eq
 801d4a6:	2310      	moveq	r3, #16
 801d4a8:	1c95      	addeq	r5, r2, #2
 801d4aa:	9341      	streq	r3, [sp, #260]	@ 0x104
 801d4ac:	220a      	movs	r2, #10
 801d4ae:	46aa      	mov	sl, r5
 801d4b0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 801d4b4:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 801d4b8:	2b09      	cmp	r3, #9
 801d4ba:	d91e      	bls.n	801d4fa <__ssvfiscanf_r+0xda>
 801d4bc:	f8df b218 	ldr.w	fp, [pc, #536]	@ 801d6d8 <__ssvfiscanf_r+0x2b8>
 801d4c0:	2203      	movs	r2, #3
 801d4c2:	4658      	mov	r0, fp
 801d4c4:	f7e2 fe84 	bl	80001d0 <memchr>
 801d4c8:	b138      	cbz	r0, 801d4da <__ssvfiscanf_r+0xba>
 801d4ca:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d4cc:	eba0 000b 	sub.w	r0, r0, fp
 801d4d0:	2301      	movs	r3, #1
 801d4d2:	4083      	lsls	r3, r0
 801d4d4:	4313      	orrs	r3, r2
 801d4d6:	9341      	str	r3, [sp, #260]	@ 0x104
 801d4d8:	4655      	mov	r5, sl
 801d4da:	f815 3b01 	ldrb.w	r3, [r5], #1
 801d4de:	2b78      	cmp	r3, #120	@ 0x78
 801d4e0:	d806      	bhi.n	801d4f0 <__ssvfiscanf_r+0xd0>
 801d4e2:	2b57      	cmp	r3, #87	@ 0x57
 801d4e4:	d810      	bhi.n	801d508 <__ssvfiscanf_r+0xe8>
 801d4e6:	2b25      	cmp	r3, #37	@ 0x25
 801d4e8:	d05d      	beq.n	801d5a6 <__ssvfiscanf_r+0x186>
 801d4ea:	d857      	bhi.n	801d59c <__ssvfiscanf_r+0x17c>
 801d4ec:	2b00      	cmp	r3, #0
 801d4ee:	d075      	beq.n	801d5dc <__ssvfiscanf_r+0x1bc>
 801d4f0:	2303      	movs	r3, #3
 801d4f2:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d4f4:	230a      	movs	r3, #10
 801d4f6:	9342      	str	r3, [sp, #264]	@ 0x108
 801d4f8:	e088      	b.n	801d60c <__ssvfiscanf_r+0x1ec>
 801d4fa:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 801d4fc:	fb02 1103 	mla	r1, r2, r3, r1
 801d500:	3930      	subs	r1, #48	@ 0x30
 801d502:	9143      	str	r1, [sp, #268]	@ 0x10c
 801d504:	4655      	mov	r5, sl
 801d506:	e7d2      	b.n	801d4ae <__ssvfiscanf_r+0x8e>
 801d508:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 801d50c:	2a20      	cmp	r2, #32
 801d50e:	d8ef      	bhi.n	801d4f0 <__ssvfiscanf_r+0xd0>
 801d510:	a101      	add	r1, pc, #4	@ (adr r1, 801d518 <__ssvfiscanf_r+0xf8>)
 801d512:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d516:	bf00      	nop
 801d518:	0801d5eb 	.word	0x0801d5eb
 801d51c:	0801d4f1 	.word	0x0801d4f1
 801d520:	0801d4f1 	.word	0x0801d4f1
 801d524:	0801d645 	.word	0x0801d645
 801d528:	0801d4f1 	.word	0x0801d4f1
 801d52c:	0801d4f1 	.word	0x0801d4f1
 801d530:	0801d4f1 	.word	0x0801d4f1
 801d534:	0801d4f1 	.word	0x0801d4f1
 801d538:	0801d4f1 	.word	0x0801d4f1
 801d53c:	0801d4f1 	.word	0x0801d4f1
 801d540:	0801d4f1 	.word	0x0801d4f1
 801d544:	0801d65b 	.word	0x0801d65b
 801d548:	0801d641 	.word	0x0801d641
 801d54c:	0801d5a3 	.word	0x0801d5a3
 801d550:	0801d5a3 	.word	0x0801d5a3
 801d554:	0801d5a3 	.word	0x0801d5a3
 801d558:	0801d4f1 	.word	0x0801d4f1
 801d55c:	0801d5fd 	.word	0x0801d5fd
 801d560:	0801d4f1 	.word	0x0801d4f1
 801d564:	0801d4f1 	.word	0x0801d4f1
 801d568:	0801d4f1 	.word	0x0801d4f1
 801d56c:	0801d4f1 	.word	0x0801d4f1
 801d570:	0801d66b 	.word	0x0801d66b
 801d574:	0801d605 	.word	0x0801d605
 801d578:	0801d5e3 	.word	0x0801d5e3
 801d57c:	0801d4f1 	.word	0x0801d4f1
 801d580:	0801d4f1 	.word	0x0801d4f1
 801d584:	0801d667 	.word	0x0801d667
 801d588:	0801d4f1 	.word	0x0801d4f1
 801d58c:	0801d641 	.word	0x0801d641
 801d590:	0801d4f1 	.word	0x0801d4f1
 801d594:	0801d4f1 	.word	0x0801d4f1
 801d598:	0801d5eb 	.word	0x0801d5eb
 801d59c:	3b45      	subs	r3, #69	@ 0x45
 801d59e:	2b02      	cmp	r3, #2
 801d5a0:	d8a6      	bhi.n	801d4f0 <__ssvfiscanf_r+0xd0>
 801d5a2:	2305      	movs	r3, #5
 801d5a4:	e031      	b.n	801d60a <__ssvfiscanf_r+0x1ea>
 801d5a6:	6863      	ldr	r3, [r4, #4]
 801d5a8:	2b00      	cmp	r3, #0
 801d5aa:	dd0d      	ble.n	801d5c8 <__ssvfiscanf_r+0x1a8>
 801d5ac:	6823      	ldr	r3, [r4, #0]
 801d5ae:	781a      	ldrb	r2, [r3, #0]
 801d5b0:	454a      	cmp	r2, r9
 801d5b2:	f040 80a6 	bne.w	801d702 <__ssvfiscanf_r+0x2e2>
 801d5b6:	3301      	adds	r3, #1
 801d5b8:	6862      	ldr	r2, [r4, #4]
 801d5ba:	6023      	str	r3, [r4, #0]
 801d5bc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 801d5be:	3a01      	subs	r2, #1
 801d5c0:	3301      	adds	r3, #1
 801d5c2:	6062      	str	r2, [r4, #4]
 801d5c4:	9345      	str	r3, [sp, #276]	@ 0x114
 801d5c6:	e753      	b.n	801d470 <__ssvfiscanf_r+0x50>
 801d5c8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d5ca:	4621      	mov	r1, r4
 801d5cc:	4630      	mov	r0, r6
 801d5ce:	4798      	blx	r3
 801d5d0:	2800      	cmp	r0, #0
 801d5d2:	d0eb      	beq.n	801d5ac <__ssvfiscanf_r+0x18c>
 801d5d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d5d6:	2800      	cmp	r0, #0
 801d5d8:	f040 808b 	bne.w	801d6f2 <__ssvfiscanf_r+0x2d2>
 801d5dc:	f04f 30ff 	mov.w	r0, #4294967295
 801d5e0:	e08b      	b.n	801d6fa <__ssvfiscanf_r+0x2da>
 801d5e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d5e4:	f042 0220 	orr.w	r2, r2, #32
 801d5e8:	9241      	str	r2, [sp, #260]	@ 0x104
 801d5ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 801d5ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801d5f0:	9241      	str	r2, [sp, #260]	@ 0x104
 801d5f2:	2210      	movs	r2, #16
 801d5f4:	2b6e      	cmp	r3, #110	@ 0x6e
 801d5f6:	9242      	str	r2, [sp, #264]	@ 0x108
 801d5f8:	d902      	bls.n	801d600 <__ssvfiscanf_r+0x1e0>
 801d5fa:	e005      	b.n	801d608 <__ssvfiscanf_r+0x1e8>
 801d5fc:	2300      	movs	r3, #0
 801d5fe:	9342      	str	r3, [sp, #264]	@ 0x108
 801d600:	2303      	movs	r3, #3
 801d602:	e002      	b.n	801d60a <__ssvfiscanf_r+0x1ea>
 801d604:	2308      	movs	r3, #8
 801d606:	9342      	str	r3, [sp, #264]	@ 0x108
 801d608:	2304      	movs	r3, #4
 801d60a:	9347      	str	r3, [sp, #284]	@ 0x11c
 801d60c:	6863      	ldr	r3, [r4, #4]
 801d60e:	2b00      	cmp	r3, #0
 801d610:	dd39      	ble.n	801d686 <__ssvfiscanf_r+0x266>
 801d612:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d614:	0659      	lsls	r1, r3, #25
 801d616:	d404      	bmi.n	801d622 <__ssvfiscanf_r+0x202>
 801d618:	6823      	ldr	r3, [r4, #0]
 801d61a:	781a      	ldrb	r2, [r3, #0]
 801d61c:	5cba      	ldrb	r2, [r7, r2]
 801d61e:	0712      	lsls	r2, r2, #28
 801d620:	d438      	bmi.n	801d694 <__ssvfiscanf_r+0x274>
 801d622:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 801d624:	2b02      	cmp	r3, #2
 801d626:	dc47      	bgt.n	801d6b8 <__ssvfiscanf_r+0x298>
 801d628:	466b      	mov	r3, sp
 801d62a:	4622      	mov	r2, r4
 801d62c:	a941      	add	r1, sp, #260	@ 0x104
 801d62e:	4630      	mov	r0, r6
 801d630:	f000 f86c 	bl	801d70c <_scanf_chars>
 801d634:	2801      	cmp	r0, #1
 801d636:	d064      	beq.n	801d702 <__ssvfiscanf_r+0x2e2>
 801d638:	2802      	cmp	r0, #2
 801d63a:	f47f af19 	bne.w	801d470 <__ssvfiscanf_r+0x50>
 801d63e:	e7c9      	b.n	801d5d4 <__ssvfiscanf_r+0x1b4>
 801d640:	220a      	movs	r2, #10
 801d642:	e7d7      	b.n	801d5f4 <__ssvfiscanf_r+0x1d4>
 801d644:	4629      	mov	r1, r5
 801d646:	4640      	mov	r0, r8
 801d648:	f000 fb02 	bl	801dc50 <__sccl>
 801d64c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d652:	9341      	str	r3, [sp, #260]	@ 0x104
 801d654:	4605      	mov	r5, r0
 801d656:	2301      	movs	r3, #1
 801d658:	e7d7      	b.n	801d60a <__ssvfiscanf_r+0x1ea>
 801d65a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 801d65c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d660:	9341      	str	r3, [sp, #260]	@ 0x104
 801d662:	2300      	movs	r3, #0
 801d664:	e7d1      	b.n	801d60a <__ssvfiscanf_r+0x1ea>
 801d666:	2302      	movs	r3, #2
 801d668:	e7cf      	b.n	801d60a <__ssvfiscanf_r+0x1ea>
 801d66a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 801d66c:	06c3      	lsls	r3, r0, #27
 801d66e:	f53f aeff 	bmi.w	801d470 <__ssvfiscanf_r+0x50>
 801d672:	9b00      	ldr	r3, [sp, #0]
 801d674:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d676:	1d19      	adds	r1, r3, #4
 801d678:	9100      	str	r1, [sp, #0]
 801d67a:	681b      	ldr	r3, [r3, #0]
 801d67c:	07c0      	lsls	r0, r0, #31
 801d67e:	bf4c      	ite	mi
 801d680:	801a      	strhmi	r2, [r3, #0]
 801d682:	601a      	strpl	r2, [r3, #0]
 801d684:	e6f4      	b.n	801d470 <__ssvfiscanf_r+0x50>
 801d686:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d688:	4621      	mov	r1, r4
 801d68a:	4630      	mov	r0, r6
 801d68c:	4798      	blx	r3
 801d68e:	2800      	cmp	r0, #0
 801d690:	d0bf      	beq.n	801d612 <__ssvfiscanf_r+0x1f2>
 801d692:	e79f      	b.n	801d5d4 <__ssvfiscanf_r+0x1b4>
 801d694:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 801d696:	3201      	adds	r2, #1
 801d698:	9245      	str	r2, [sp, #276]	@ 0x114
 801d69a:	6862      	ldr	r2, [r4, #4]
 801d69c:	3a01      	subs	r2, #1
 801d69e:	2a00      	cmp	r2, #0
 801d6a0:	6062      	str	r2, [r4, #4]
 801d6a2:	dd02      	ble.n	801d6aa <__ssvfiscanf_r+0x28a>
 801d6a4:	3301      	adds	r3, #1
 801d6a6:	6023      	str	r3, [r4, #0]
 801d6a8:	e7b6      	b.n	801d618 <__ssvfiscanf_r+0x1f8>
 801d6aa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 801d6ac:	4621      	mov	r1, r4
 801d6ae:	4630      	mov	r0, r6
 801d6b0:	4798      	blx	r3
 801d6b2:	2800      	cmp	r0, #0
 801d6b4:	d0b0      	beq.n	801d618 <__ssvfiscanf_r+0x1f8>
 801d6b6:	e78d      	b.n	801d5d4 <__ssvfiscanf_r+0x1b4>
 801d6b8:	2b04      	cmp	r3, #4
 801d6ba:	dc0f      	bgt.n	801d6dc <__ssvfiscanf_r+0x2bc>
 801d6bc:	466b      	mov	r3, sp
 801d6be:	4622      	mov	r2, r4
 801d6c0:	a941      	add	r1, sp, #260	@ 0x104
 801d6c2:	4630      	mov	r0, r6
 801d6c4:	f000 f87c 	bl	801d7c0 <_scanf_i>
 801d6c8:	e7b4      	b.n	801d634 <__ssvfiscanf_r+0x214>
 801d6ca:	bf00      	nop
 801d6cc:	0801d36d 	.word	0x0801d36d
 801d6d0:	0801d3e7 	.word	0x0801d3e7
 801d6d4:	08020e51 	.word	0x08020e51
 801d6d8:	0802070a 	.word	0x0802070a
 801d6dc:	4b0a      	ldr	r3, [pc, #40]	@ (801d708 <__ssvfiscanf_r+0x2e8>)
 801d6de:	2b00      	cmp	r3, #0
 801d6e0:	f43f aec6 	beq.w	801d470 <__ssvfiscanf_r+0x50>
 801d6e4:	466b      	mov	r3, sp
 801d6e6:	4622      	mov	r2, r4
 801d6e8:	a941      	add	r1, sp, #260	@ 0x104
 801d6ea:	4630      	mov	r0, r6
 801d6ec:	f7fc fc88 	bl	801a000 <_scanf_float>
 801d6f0:	e7a0      	b.n	801d634 <__ssvfiscanf_r+0x214>
 801d6f2:	89a3      	ldrh	r3, [r4, #12]
 801d6f4:	065b      	lsls	r3, r3, #25
 801d6f6:	f53f af71 	bmi.w	801d5dc <__ssvfiscanf_r+0x1bc>
 801d6fa:	f50d 7d23 	add.w	sp, sp, #652	@ 0x28c
 801d6fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d702:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801d704:	e7f9      	b.n	801d6fa <__ssvfiscanf_r+0x2da>
 801d706:	bf00      	nop
 801d708:	0801a001 	.word	0x0801a001

0801d70c <_scanf_chars>:
 801d70c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d710:	4615      	mov	r5, r2
 801d712:	688a      	ldr	r2, [r1, #8]
 801d714:	4680      	mov	r8, r0
 801d716:	460c      	mov	r4, r1
 801d718:	b932      	cbnz	r2, 801d728 <_scanf_chars+0x1c>
 801d71a:	698a      	ldr	r2, [r1, #24]
 801d71c:	2a00      	cmp	r2, #0
 801d71e:	bf14      	ite	ne
 801d720:	f04f 32ff 	movne.w	r2, #4294967295
 801d724:	2201      	moveq	r2, #1
 801d726:	608a      	str	r2, [r1, #8]
 801d728:	6822      	ldr	r2, [r4, #0]
 801d72a:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 801d7bc <_scanf_chars+0xb0>
 801d72e:	06d1      	lsls	r1, r2, #27
 801d730:	bf5f      	itttt	pl
 801d732:	681a      	ldrpl	r2, [r3, #0]
 801d734:	1d11      	addpl	r1, r2, #4
 801d736:	6019      	strpl	r1, [r3, #0]
 801d738:	6816      	ldrpl	r6, [r2, #0]
 801d73a:	2700      	movs	r7, #0
 801d73c:	69a0      	ldr	r0, [r4, #24]
 801d73e:	b188      	cbz	r0, 801d764 <_scanf_chars+0x58>
 801d740:	2801      	cmp	r0, #1
 801d742:	d107      	bne.n	801d754 <_scanf_chars+0x48>
 801d744:	682b      	ldr	r3, [r5, #0]
 801d746:	781a      	ldrb	r2, [r3, #0]
 801d748:	6963      	ldr	r3, [r4, #20]
 801d74a:	5c9b      	ldrb	r3, [r3, r2]
 801d74c:	b953      	cbnz	r3, 801d764 <_scanf_chars+0x58>
 801d74e:	2f00      	cmp	r7, #0
 801d750:	d031      	beq.n	801d7b6 <_scanf_chars+0xaa>
 801d752:	e022      	b.n	801d79a <_scanf_chars+0x8e>
 801d754:	2802      	cmp	r0, #2
 801d756:	d120      	bne.n	801d79a <_scanf_chars+0x8e>
 801d758:	682b      	ldr	r3, [r5, #0]
 801d75a:	781b      	ldrb	r3, [r3, #0]
 801d75c:	f819 3003 	ldrb.w	r3, [r9, r3]
 801d760:	071b      	lsls	r3, r3, #28
 801d762:	d41a      	bmi.n	801d79a <_scanf_chars+0x8e>
 801d764:	6823      	ldr	r3, [r4, #0]
 801d766:	06da      	lsls	r2, r3, #27
 801d768:	bf5e      	ittt	pl
 801d76a:	682b      	ldrpl	r3, [r5, #0]
 801d76c:	781b      	ldrbpl	r3, [r3, #0]
 801d76e:	f806 3b01 	strbpl.w	r3, [r6], #1
 801d772:	682a      	ldr	r2, [r5, #0]
 801d774:	686b      	ldr	r3, [r5, #4]
 801d776:	3201      	adds	r2, #1
 801d778:	602a      	str	r2, [r5, #0]
 801d77a:	68a2      	ldr	r2, [r4, #8]
 801d77c:	3b01      	subs	r3, #1
 801d77e:	3a01      	subs	r2, #1
 801d780:	606b      	str	r3, [r5, #4]
 801d782:	3701      	adds	r7, #1
 801d784:	60a2      	str	r2, [r4, #8]
 801d786:	b142      	cbz	r2, 801d79a <_scanf_chars+0x8e>
 801d788:	2b00      	cmp	r3, #0
 801d78a:	dcd7      	bgt.n	801d73c <_scanf_chars+0x30>
 801d78c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801d790:	4629      	mov	r1, r5
 801d792:	4640      	mov	r0, r8
 801d794:	4798      	blx	r3
 801d796:	2800      	cmp	r0, #0
 801d798:	d0d0      	beq.n	801d73c <_scanf_chars+0x30>
 801d79a:	6823      	ldr	r3, [r4, #0]
 801d79c:	f013 0310 	ands.w	r3, r3, #16
 801d7a0:	d105      	bne.n	801d7ae <_scanf_chars+0xa2>
 801d7a2:	68e2      	ldr	r2, [r4, #12]
 801d7a4:	3201      	adds	r2, #1
 801d7a6:	60e2      	str	r2, [r4, #12]
 801d7a8:	69a2      	ldr	r2, [r4, #24]
 801d7aa:	b102      	cbz	r2, 801d7ae <_scanf_chars+0xa2>
 801d7ac:	7033      	strb	r3, [r6, #0]
 801d7ae:	6923      	ldr	r3, [r4, #16]
 801d7b0:	443b      	add	r3, r7
 801d7b2:	6123      	str	r3, [r4, #16]
 801d7b4:	2000      	movs	r0, #0
 801d7b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d7ba:	bf00      	nop
 801d7bc:	08020e51 	.word	0x08020e51

0801d7c0 <_scanf_i>:
 801d7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7c4:	4698      	mov	r8, r3
 801d7c6:	4b74      	ldr	r3, [pc, #464]	@ (801d998 <_scanf_i+0x1d8>)
 801d7c8:	460c      	mov	r4, r1
 801d7ca:	4682      	mov	sl, r0
 801d7cc:	4616      	mov	r6, r2
 801d7ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801d7d2:	b087      	sub	sp, #28
 801d7d4:	ab03      	add	r3, sp, #12
 801d7d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 801d7da:	4b70      	ldr	r3, [pc, #448]	@ (801d99c <_scanf_i+0x1dc>)
 801d7dc:	69a1      	ldr	r1, [r4, #24]
 801d7de:	4a70      	ldr	r2, [pc, #448]	@ (801d9a0 <_scanf_i+0x1e0>)
 801d7e0:	2903      	cmp	r1, #3
 801d7e2:	bf08      	it	eq
 801d7e4:	461a      	moveq	r2, r3
 801d7e6:	68a3      	ldr	r3, [r4, #8]
 801d7e8:	9201      	str	r2, [sp, #4]
 801d7ea:	1e5a      	subs	r2, r3, #1
 801d7ec:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801d7f0:	bf88      	it	hi
 801d7f2:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801d7f6:	4627      	mov	r7, r4
 801d7f8:	bf82      	ittt	hi
 801d7fa:	eb03 0905 	addhi.w	r9, r3, r5
 801d7fe:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801d802:	60a3      	strhi	r3, [r4, #8]
 801d804:	f857 3b1c 	ldr.w	r3, [r7], #28
 801d808:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 801d80c:	bf98      	it	ls
 801d80e:	f04f 0900 	movls.w	r9, #0
 801d812:	6023      	str	r3, [r4, #0]
 801d814:	463d      	mov	r5, r7
 801d816:	f04f 0b00 	mov.w	fp, #0
 801d81a:	6831      	ldr	r1, [r6, #0]
 801d81c:	ab03      	add	r3, sp, #12
 801d81e:	7809      	ldrb	r1, [r1, #0]
 801d820:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 801d824:	2202      	movs	r2, #2
 801d826:	f7e2 fcd3 	bl	80001d0 <memchr>
 801d82a:	b328      	cbz	r0, 801d878 <_scanf_i+0xb8>
 801d82c:	f1bb 0f01 	cmp.w	fp, #1
 801d830:	d159      	bne.n	801d8e6 <_scanf_i+0x126>
 801d832:	6862      	ldr	r2, [r4, #4]
 801d834:	b92a      	cbnz	r2, 801d842 <_scanf_i+0x82>
 801d836:	6822      	ldr	r2, [r4, #0]
 801d838:	2108      	movs	r1, #8
 801d83a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801d83e:	6061      	str	r1, [r4, #4]
 801d840:	6022      	str	r2, [r4, #0]
 801d842:	6822      	ldr	r2, [r4, #0]
 801d844:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 801d848:	6022      	str	r2, [r4, #0]
 801d84a:	68a2      	ldr	r2, [r4, #8]
 801d84c:	1e51      	subs	r1, r2, #1
 801d84e:	60a1      	str	r1, [r4, #8]
 801d850:	b192      	cbz	r2, 801d878 <_scanf_i+0xb8>
 801d852:	6832      	ldr	r2, [r6, #0]
 801d854:	1c51      	adds	r1, r2, #1
 801d856:	6031      	str	r1, [r6, #0]
 801d858:	7812      	ldrb	r2, [r2, #0]
 801d85a:	f805 2b01 	strb.w	r2, [r5], #1
 801d85e:	6872      	ldr	r2, [r6, #4]
 801d860:	3a01      	subs	r2, #1
 801d862:	2a00      	cmp	r2, #0
 801d864:	6072      	str	r2, [r6, #4]
 801d866:	dc07      	bgt.n	801d878 <_scanf_i+0xb8>
 801d868:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 801d86c:	4631      	mov	r1, r6
 801d86e:	4650      	mov	r0, sl
 801d870:	4790      	blx	r2
 801d872:	2800      	cmp	r0, #0
 801d874:	f040 8085 	bne.w	801d982 <_scanf_i+0x1c2>
 801d878:	f10b 0b01 	add.w	fp, fp, #1
 801d87c:	f1bb 0f03 	cmp.w	fp, #3
 801d880:	d1cb      	bne.n	801d81a <_scanf_i+0x5a>
 801d882:	6863      	ldr	r3, [r4, #4]
 801d884:	b90b      	cbnz	r3, 801d88a <_scanf_i+0xca>
 801d886:	230a      	movs	r3, #10
 801d888:	6063      	str	r3, [r4, #4]
 801d88a:	6863      	ldr	r3, [r4, #4]
 801d88c:	4945      	ldr	r1, [pc, #276]	@ (801d9a4 <_scanf_i+0x1e4>)
 801d88e:	6960      	ldr	r0, [r4, #20]
 801d890:	1ac9      	subs	r1, r1, r3
 801d892:	f000 f9dd 	bl	801dc50 <__sccl>
 801d896:	f04f 0b00 	mov.w	fp, #0
 801d89a:	68a3      	ldr	r3, [r4, #8]
 801d89c:	6822      	ldr	r2, [r4, #0]
 801d89e:	2b00      	cmp	r3, #0
 801d8a0:	d03d      	beq.n	801d91e <_scanf_i+0x15e>
 801d8a2:	6831      	ldr	r1, [r6, #0]
 801d8a4:	6960      	ldr	r0, [r4, #20]
 801d8a6:	f891 c000 	ldrb.w	ip, [r1]
 801d8aa:	f810 000c 	ldrb.w	r0, [r0, ip]
 801d8ae:	2800      	cmp	r0, #0
 801d8b0:	d035      	beq.n	801d91e <_scanf_i+0x15e>
 801d8b2:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 801d8b6:	d124      	bne.n	801d902 <_scanf_i+0x142>
 801d8b8:	0510      	lsls	r0, r2, #20
 801d8ba:	d522      	bpl.n	801d902 <_scanf_i+0x142>
 801d8bc:	f10b 0b01 	add.w	fp, fp, #1
 801d8c0:	f1b9 0f00 	cmp.w	r9, #0
 801d8c4:	d003      	beq.n	801d8ce <_scanf_i+0x10e>
 801d8c6:	3301      	adds	r3, #1
 801d8c8:	f109 39ff 	add.w	r9, r9, #4294967295
 801d8cc:	60a3      	str	r3, [r4, #8]
 801d8ce:	6873      	ldr	r3, [r6, #4]
 801d8d0:	3b01      	subs	r3, #1
 801d8d2:	2b00      	cmp	r3, #0
 801d8d4:	6073      	str	r3, [r6, #4]
 801d8d6:	dd1b      	ble.n	801d910 <_scanf_i+0x150>
 801d8d8:	6833      	ldr	r3, [r6, #0]
 801d8da:	3301      	adds	r3, #1
 801d8dc:	6033      	str	r3, [r6, #0]
 801d8de:	68a3      	ldr	r3, [r4, #8]
 801d8e0:	3b01      	subs	r3, #1
 801d8e2:	60a3      	str	r3, [r4, #8]
 801d8e4:	e7d9      	b.n	801d89a <_scanf_i+0xda>
 801d8e6:	f1bb 0f02 	cmp.w	fp, #2
 801d8ea:	d1ae      	bne.n	801d84a <_scanf_i+0x8a>
 801d8ec:	6822      	ldr	r2, [r4, #0]
 801d8ee:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801d8f2:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801d8f6:	d1c4      	bne.n	801d882 <_scanf_i+0xc2>
 801d8f8:	2110      	movs	r1, #16
 801d8fa:	6061      	str	r1, [r4, #4]
 801d8fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801d900:	e7a2      	b.n	801d848 <_scanf_i+0x88>
 801d902:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 801d906:	6022      	str	r2, [r4, #0]
 801d908:	780b      	ldrb	r3, [r1, #0]
 801d90a:	f805 3b01 	strb.w	r3, [r5], #1
 801d90e:	e7de      	b.n	801d8ce <_scanf_i+0x10e>
 801d910:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801d914:	4631      	mov	r1, r6
 801d916:	4650      	mov	r0, sl
 801d918:	4798      	blx	r3
 801d91a:	2800      	cmp	r0, #0
 801d91c:	d0df      	beq.n	801d8de <_scanf_i+0x11e>
 801d91e:	6823      	ldr	r3, [r4, #0]
 801d920:	05d9      	lsls	r1, r3, #23
 801d922:	d50d      	bpl.n	801d940 <_scanf_i+0x180>
 801d924:	42bd      	cmp	r5, r7
 801d926:	d909      	bls.n	801d93c <_scanf_i+0x17c>
 801d928:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 801d92c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801d930:	4632      	mov	r2, r6
 801d932:	4650      	mov	r0, sl
 801d934:	4798      	blx	r3
 801d936:	f105 39ff 	add.w	r9, r5, #4294967295
 801d93a:	464d      	mov	r5, r9
 801d93c:	42bd      	cmp	r5, r7
 801d93e:	d028      	beq.n	801d992 <_scanf_i+0x1d2>
 801d940:	6822      	ldr	r2, [r4, #0]
 801d942:	f012 0210 	ands.w	r2, r2, #16
 801d946:	d113      	bne.n	801d970 <_scanf_i+0x1b0>
 801d948:	702a      	strb	r2, [r5, #0]
 801d94a:	6863      	ldr	r3, [r4, #4]
 801d94c:	9e01      	ldr	r6, [sp, #4]
 801d94e:	4639      	mov	r1, r7
 801d950:	4650      	mov	r0, sl
 801d952:	47b0      	blx	r6
 801d954:	f8d8 3000 	ldr.w	r3, [r8]
 801d958:	6821      	ldr	r1, [r4, #0]
 801d95a:	1d1a      	adds	r2, r3, #4
 801d95c:	f8c8 2000 	str.w	r2, [r8]
 801d960:	f011 0f20 	tst.w	r1, #32
 801d964:	681b      	ldr	r3, [r3, #0]
 801d966:	d00f      	beq.n	801d988 <_scanf_i+0x1c8>
 801d968:	6018      	str	r0, [r3, #0]
 801d96a:	68e3      	ldr	r3, [r4, #12]
 801d96c:	3301      	adds	r3, #1
 801d96e:	60e3      	str	r3, [r4, #12]
 801d970:	6923      	ldr	r3, [r4, #16]
 801d972:	1bed      	subs	r5, r5, r7
 801d974:	445d      	add	r5, fp
 801d976:	442b      	add	r3, r5
 801d978:	6123      	str	r3, [r4, #16]
 801d97a:	2000      	movs	r0, #0
 801d97c:	b007      	add	sp, #28
 801d97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d982:	f04f 0b00 	mov.w	fp, #0
 801d986:	e7ca      	b.n	801d91e <_scanf_i+0x15e>
 801d988:	07ca      	lsls	r2, r1, #31
 801d98a:	bf4c      	ite	mi
 801d98c:	8018      	strhmi	r0, [r3, #0]
 801d98e:	6018      	strpl	r0, [r3, #0]
 801d990:	e7eb      	b.n	801d96a <_scanf_i+0x1aa>
 801d992:	2001      	movs	r0, #1
 801d994:	e7f2      	b.n	801d97c <_scanf_i+0x1bc>
 801d996:	bf00      	nop
 801d998:	08020674 	.word	0x08020674
 801d99c:	0801d0b9 	.word	0x0801d0b9
 801d9a0:	0801e569 	.word	0x0801e569
 801d9a4:	08020870 	.word	0x08020870

0801d9a8 <__sflush_r>:
 801d9a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9b0:	0716      	lsls	r6, r2, #28
 801d9b2:	4605      	mov	r5, r0
 801d9b4:	460c      	mov	r4, r1
 801d9b6:	d454      	bmi.n	801da62 <__sflush_r+0xba>
 801d9b8:	684b      	ldr	r3, [r1, #4]
 801d9ba:	2b00      	cmp	r3, #0
 801d9bc:	dc02      	bgt.n	801d9c4 <__sflush_r+0x1c>
 801d9be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d9c0:	2b00      	cmp	r3, #0
 801d9c2:	dd48      	ble.n	801da56 <__sflush_r+0xae>
 801d9c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d9c6:	2e00      	cmp	r6, #0
 801d9c8:	d045      	beq.n	801da56 <__sflush_r+0xae>
 801d9ca:	2300      	movs	r3, #0
 801d9cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d9d0:	682f      	ldr	r7, [r5, #0]
 801d9d2:	6a21      	ldr	r1, [r4, #32]
 801d9d4:	602b      	str	r3, [r5, #0]
 801d9d6:	d030      	beq.n	801da3a <__sflush_r+0x92>
 801d9d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d9da:	89a3      	ldrh	r3, [r4, #12]
 801d9dc:	0759      	lsls	r1, r3, #29
 801d9de:	d505      	bpl.n	801d9ec <__sflush_r+0x44>
 801d9e0:	6863      	ldr	r3, [r4, #4]
 801d9e2:	1ad2      	subs	r2, r2, r3
 801d9e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d9e6:	b10b      	cbz	r3, 801d9ec <__sflush_r+0x44>
 801d9e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d9ea:	1ad2      	subs	r2, r2, r3
 801d9ec:	2300      	movs	r3, #0
 801d9ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d9f0:	6a21      	ldr	r1, [r4, #32]
 801d9f2:	4628      	mov	r0, r5
 801d9f4:	47b0      	blx	r6
 801d9f6:	1c43      	adds	r3, r0, #1
 801d9f8:	89a3      	ldrh	r3, [r4, #12]
 801d9fa:	d106      	bne.n	801da0a <__sflush_r+0x62>
 801d9fc:	6829      	ldr	r1, [r5, #0]
 801d9fe:	291d      	cmp	r1, #29
 801da00:	d82b      	bhi.n	801da5a <__sflush_r+0xb2>
 801da02:	4a2a      	ldr	r2, [pc, #168]	@ (801daac <__sflush_r+0x104>)
 801da04:	40ca      	lsrs	r2, r1
 801da06:	07d6      	lsls	r6, r2, #31
 801da08:	d527      	bpl.n	801da5a <__sflush_r+0xb2>
 801da0a:	2200      	movs	r2, #0
 801da0c:	6062      	str	r2, [r4, #4]
 801da0e:	04d9      	lsls	r1, r3, #19
 801da10:	6922      	ldr	r2, [r4, #16]
 801da12:	6022      	str	r2, [r4, #0]
 801da14:	d504      	bpl.n	801da20 <__sflush_r+0x78>
 801da16:	1c42      	adds	r2, r0, #1
 801da18:	d101      	bne.n	801da1e <__sflush_r+0x76>
 801da1a:	682b      	ldr	r3, [r5, #0]
 801da1c:	b903      	cbnz	r3, 801da20 <__sflush_r+0x78>
 801da1e:	6560      	str	r0, [r4, #84]	@ 0x54
 801da20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801da22:	602f      	str	r7, [r5, #0]
 801da24:	b1b9      	cbz	r1, 801da56 <__sflush_r+0xae>
 801da26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801da2a:	4299      	cmp	r1, r3
 801da2c:	d002      	beq.n	801da34 <__sflush_r+0x8c>
 801da2e:	4628      	mov	r0, r5
 801da30:	f7fd fee6 	bl	801b800 <_free_r>
 801da34:	2300      	movs	r3, #0
 801da36:	6363      	str	r3, [r4, #52]	@ 0x34
 801da38:	e00d      	b.n	801da56 <__sflush_r+0xae>
 801da3a:	2301      	movs	r3, #1
 801da3c:	4628      	mov	r0, r5
 801da3e:	47b0      	blx	r6
 801da40:	4602      	mov	r2, r0
 801da42:	1c50      	adds	r0, r2, #1
 801da44:	d1c9      	bne.n	801d9da <__sflush_r+0x32>
 801da46:	682b      	ldr	r3, [r5, #0]
 801da48:	2b00      	cmp	r3, #0
 801da4a:	d0c6      	beq.n	801d9da <__sflush_r+0x32>
 801da4c:	2b1d      	cmp	r3, #29
 801da4e:	d001      	beq.n	801da54 <__sflush_r+0xac>
 801da50:	2b16      	cmp	r3, #22
 801da52:	d11e      	bne.n	801da92 <__sflush_r+0xea>
 801da54:	602f      	str	r7, [r5, #0]
 801da56:	2000      	movs	r0, #0
 801da58:	e022      	b.n	801daa0 <__sflush_r+0xf8>
 801da5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da5e:	b21b      	sxth	r3, r3
 801da60:	e01b      	b.n	801da9a <__sflush_r+0xf2>
 801da62:	690f      	ldr	r7, [r1, #16]
 801da64:	2f00      	cmp	r7, #0
 801da66:	d0f6      	beq.n	801da56 <__sflush_r+0xae>
 801da68:	0793      	lsls	r3, r2, #30
 801da6a:	680e      	ldr	r6, [r1, #0]
 801da6c:	bf08      	it	eq
 801da6e:	694b      	ldreq	r3, [r1, #20]
 801da70:	600f      	str	r7, [r1, #0]
 801da72:	bf18      	it	ne
 801da74:	2300      	movne	r3, #0
 801da76:	eba6 0807 	sub.w	r8, r6, r7
 801da7a:	608b      	str	r3, [r1, #8]
 801da7c:	f1b8 0f00 	cmp.w	r8, #0
 801da80:	dde9      	ble.n	801da56 <__sflush_r+0xae>
 801da82:	6a21      	ldr	r1, [r4, #32]
 801da84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801da86:	4643      	mov	r3, r8
 801da88:	463a      	mov	r2, r7
 801da8a:	4628      	mov	r0, r5
 801da8c:	47b0      	blx	r6
 801da8e:	2800      	cmp	r0, #0
 801da90:	dc08      	bgt.n	801daa4 <__sflush_r+0xfc>
 801da92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801da9a:	81a3      	strh	r3, [r4, #12]
 801da9c:	f04f 30ff 	mov.w	r0, #4294967295
 801daa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801daa4:	4407      	add	r7, r0
 801daa6:	eba8 0800 	sub.w	r8, r8, r0
 801daaa:	e7e7      	b.n	801da7c <__sflush_r+0xd4>
 801daac:	20400001 	.word	0x20400001

0801dab0 <_fflush_r>:
 801dab0:	b538      	push	{r3, r4, r5, lr}
 801dab2:	690b      	ldr	r3, [r1, #16]
 801dab4:	4605      	mov	r5, r0
 801dab6:	460c      	mov	r4, r1
 801dab8:	b913      	cbnz	r3, 801dac0 <_fflush_r+0x10>
 801daba:	2500      	movs	r5, #0
 801dabc:	4628      	mov	r0, r5
 801dabe:	bd38      	pop	{r3, r4, r5, pc}
 801dac0:	b118      	cbz	r0, 801daca <_fflush_r+0x1a>
 801dac2:	6a03      	ldr	r3, [r0, #32]
 801dac4:	b90b      	cbnz	r3, 801daca <_fflush_r+0x1a>
 801dac6:	f7fc fd35 	bl	801a534 <__sinit>
 801daca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dace:	2b00      	cmp	r3, #0
 801dad0:	d0f3      	beq.n	801daba <_fflush_r+0xa>
 801dad2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801dad4:	07d0      	lsls	r0, r2, #31
 801dad6:	d404      	bmi.n	801dae2 <_fflush_r+0x32>
 801dad8:	0599      	lsls	r1, r3, #22
 801dada:	d402      	bmi.n	801dae2 <_fflush_r+0x32>
 801dadc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dade:	f7fd f806 	bl	801aaee <__retarget_lock_acquire_recursive>
 801dae2:	4628      	mov	r0, r5
 801dae4:	4621      	mov	r1, r4
 801dae6:	f7ff ff5f 	bl	801d9a8 <__sflush_r>
 801daea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801daec:	07da      	lsls	r2, r3, #31
 801daee:	4605      	mov	r5, r0
 801daf0:	d4e4      	bmi.n	801dabc <_fflush_r+0xc>
 801daf2:	89a3      	ldrh	r3, [r4, #12]
 801daf4:	059b      	lsls	r3, r3, #22
 801daf6:	d4e1      	bmi.n	801dabc <_fflush_r+0xc>
 801daf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dafa:	f7fc fff9 	bl	801aaf0 <__retarget_lock_release_recursive>
 801dafe:	e7dd      	b.n	801dabc <_fflush_r+0xc>

0801db00 <fiprintf>:
 801db00:	b40e      	push	{r1, r2, r3}
 801db02:	b503      	push	{r0, r1, lr}
 801db04:	4601      	mov	r1, r0
 801db06:	ab03      	add	r3, sp, #12
 801db08:	4805      	ldr	r0, [pc, #20]	@ (801db20 <fiprintf+0x20>)
 801db0a:	f853 2b04 	ldr.w	r2, [r3], #4
 801db0e:	6800      	ldr	r0, [r0, #0]
 801db10:	9301      	str	r3, [sp, #4]
 801db12:	f7fb ffc7 	bl	8019aa4 <_vfiprintf_r>
 801db16:	b002      	add	sp, #8
 801db18:	f85d eb04 	ldr.w	lr, [sp], #4
 801db1c:	b003      	add	sp, #12
 801db1e:	4770      	bx	lr
 801db20:	20000160 	.word	0x20000160

0801db24 <__swhatbuf_r>:
 801db24:	b570      	push	{r4, r5, r6, lr}
 801db26:	460c      	mov	r4, r1
 801db28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db2c:	2900      	cmp	r1, #0
 801db2e:	b096      	sub	sp, #88	@ 0x58
 801db30:	4615      	mov	r5, r2
 801db32:	461e      	mov	r6, r3
 801db34:	da0d      	bge.n	801db52 <__swhatbuf_r+0x2e>
 801db36:	89a3      	ldrh	r3, [r4, #12]
 801db38:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801db3c:	f04f 0100 	mov.w	r1, #0
 801db40:	bf14      	ite	ne
 801db42:	2340      	movne	r3, #64	@ 0x40
 801db44:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801db48:	2000      	movs	r0, #0
 801db4a:	6031      	str	r1, [r6, #0]
 801db4c:	602b      	str	r3, [r5, #0]
 801db4e:	b016      	add	sp, #88	@ 0x58
 801db50:	bd70      	pop	{r4, r5, r6, pc}
 801db52:	466a      	mov	r2, sp
 801db54:	f000 f8f0 	bl	801dd38 <_fstat_r>
 801db58:	2800      	cmp	r0, #0
 801db5a:	dbec      	blt.n	801db36 <__swhatbuf_r+0x12>
 801db5c:	9901      	ldr	r1, [sp, #4]
 801db5e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801db62:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801db66:	4259      	negs	r1, r3
 801db68:	4159      	adcs	r1, r3
 801db6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801db6e:	e7eb      	b.n	801db48 <__swhatbuf_r+0x24>

0801db70 <__smakebuf_r>:
 801db70:	898b      	ldrh	r3, [r1, #12]
 801db72:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801db74:	079d      	lsls	r5, r3, #30
 801db76:	4606      	mov	r6, r0
 801db78:	460c      	mov	r4, r1
 801db7a:	d507      	bpl.n	801db8c <__smakebuf_r+0x1c>
 801db7c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801db80:	6023      	str	r3, [r4, #0]
 801db82:	6123      	str	r3, [r4, #16]
 801db84:	2301      	movs	r3, #1
 801db86:	6163      	str	r3, [r4, #20]
 801db88:	b003      	add	sp, #12
 801db8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db8c:	ab01      	add	r3, sp, #4
 801db8e:	466a      	mov	r2, sp
 801db90:	f7ff ffc8 	bl	801db24 <__swhatbuf_r>
 801db94:	9f00      	ldr	r7, [sp, #0]
 801db96:	4605      	mov	r5, r0
 801db98:	4639      	mov	r1, r7
 801db9a:	4630      	mov	r0, r6
 801db9c:	f7fd fea4 	bl	801b8e8 <_malloc_r>
 801dba0:	b948      	cbnz	r0, 801dbb6 <__smakebuf_r+0x46>
 801dba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dba6:	059a      	lsls	r2, r3, #22
 801dba8:	d4ee      	bmi.n	801db88 <__smakebuf_r+0x18>
 801dbaa:	f023 0303 	bic.w	r3, r3, #3
 801dbae:	f043 0302 	orr.w	r3, r3, #2
 801dbb2:	81a3      	strh	r3, [r4, #12]
 801dbb4:	e7e2      	b.n	801db7c <__smakebuf_r+0xc>
 801dbb6:	89a3      	ldrh	r3, [r4, #12]
 801dbb8:	6020      	str	r0, [r4, #0]
 801dbba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dbbe:	81a3      	strh	r3, [r4, #12]
 801dbc0:	9b01      	ldr	r3, [sp, #4]
 801dbc2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801dbc6:	b15b      	cbz	r3, 801dbe0 <__smakebuf_r+0x70>
 801dbc8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dbcc:	4630      	mov	r0, r6
 801dbce:	f000 f8c5 	bl	801dd5c <_isatty_r>
 801dbd2:	b128      	cbz	r0, 801dbe0 <__smakebuf_r+0x70>
 801dbd4:	89a3      	ldrh	r3, [r4, #12]
 801dbd6:	f023 0303 	bic.w	r3, r3, #3
 801dbda:	f043 0301 	orr.w	r3, r3, #1
 801dbde:	81a3      	strh	r3, [r4, #12]
 801dbe0:	89a3      	ldrh	r3, [r4, #12]
 801dbe2:	431d      	orrs	r5, r3
 801dbe4:	81a5      	strh	r5, [r4, #12]
 801dbe6:	e7cf      	b.n	801db88 <__smakebuf_r+0x18>

0801dbe8 <_putc_r>:
 801dbe8:	b570      	push	{r4, r5, r6, lr}
 801dbea:	460d      	mov	r5, r1
 801dbec:	4614      	mov	r4, r2
 801dbee:	4606      	mov	r6, r0
 801dbf0:	b118      	cbz	r0, 801dbfa <_putc_r+0x12>
 801dbf2:	6a03      	ldr	r3, [r0, #32]
 801dbf4:	b90b      	cbnz	r3, 801dbfa <_putc_r+0x12>
 801dbf6:	f7fc fc9d 	bl	801a534 <__sinit>
 801dbfa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dbfc:	07d8      	lsls	r0, r3, #31
 801dbfe:	d405      	bmi.n	801dc0c <_putc_r+0x24>
 801dc00:	89a3      	ldrh	r3, [r4, #12]
 801dc02:	0599      	lsls	r1, r3, #22
 801dc04:	d402      	bmi.n	801dc0c <_putc_r+0x24>
 801dc06:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dc08:	f7fc ff71 	bl	801aaee <__retarget_lock_acquire_recursive>
 801dc0c:	68a3      	ldr	r3, [r4, #8]
 801dc0e:	3b01      	subs	r3, #1
 801dc10:	2b00      	cmp	r3, #0
 801dc12:	60a3      	str	r3, [r4, #8]
 801dc14:	da05      	bge.n	801dc22 <_putc_r+0x3a>
 801dc16:	69a2      	ldr	r2, [r4, #24]
 801dc18:	4293      	cmp	r3, r2
 801dc1a:	db12      	blt.n	801dc42 <_putc_r+0x5a>
 801dc1c:	b2eb      	uxtb	r3, r5
 801dc1e:	2b0a      	cmp	r3, #10
 801dc20:	d00f      	beq.n	801dc42 <_putc_r+0x5a>
 801dc22:	6823      	ldr	r3, [r4, #0]
 801dc24:	1c5a      	adds	r2, r3, #1
 801dc26:	6022      	str	r2, [r4, #0]
 801dc28:	701d      	strb	r5, [r3, #0]
 801dc2a:	b2ed      	uxtb	r5, r5
 801dc2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801dc2e:	07da      	lsls	r2, r3, #31
 801dc30:	d405      	bmi.n	801dc3e <_putc_r+0x56>
 801dc32:	89a3      	ldrh	r3, [r4, #12]
 801dc34:	059b      	lsls	r3, r3, #22
 801dc36:	d402      	bmi.n	801dc3e <_putc_r+0x56>
 801dc38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801dc3a:	f7fc ff59 	bl	801aaf0 <__retarget_lock_release_recursive>
 801dc3e:	4628      	mov	r0, r5
 801dc40:	bd70      	pop	{r4, r5, r6, pc}
 801dc42:	4629      	mov	r1, r5
 801dc44:	4622      	mov	r2, r4
 801dc46:	4630      	mov	r0, r6
 801dc48:	f7fc fdb5 	bl	801a7b6 <__swbuf_r>
 801dc4c:	4605      	mov	r5, r0
 801dc4e:	e7ed      	b.n	801dc2c <_putc_r+0x44>

0801dc50 <__sccl>:
 801dc50:	b570      	push	{r4, r5, r6, lr}
 801dc52:	780b      	ldrb	r3, [r1, #0]
 801dc54:	4604      	mov	r4, r0
 801dc56:	2b5e      	cmp	r3, #94	@ 0x5e
 801dc58:	bf0b      	itete	eq
 801dc5a:	784b      	ldrbeq	r3, [r1, #1]
 801dc5c:	1c4a      	addne	r2, r1, #1
 801dc5e:	1c8a      	addeq	r2, r1, #2
 801dc60:	2100      	movne	r1, #0
 801dc62:	bf08      	it	eq
 801dc64:	2101      	moveq	r1, #1
 801dc66:	3801      	subs	r0, #1
 801dc68:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 801dc6c:	f800 1f01 	strb.w	r1, [r0, #1]!
 801dc70:	42a8      	cmp	r0, r5
 801dc72:	d1fb      	bne.n	801dc6c <__sccl+0x1c>
 801dc74:	b90b      	cbnz	r3, 801dc7a <__sccl+0x2a>
 801dc76:	1e50      	subs	r0, r2, #1
 801dc78:	bd70      	pop	{r4, r5, r6, pc}
 801dc7a:	f081 0101 	eor.w	r1, r1, #1
 801dc7e:	54e1      	strb	r1, [r4, r3]
 801dc80:	4610      	mov	r0, r2
 801dc82:	4602      	mov	r2, r0
 801dc84:	f812 5b01 	ldrb.w	r5, [r2], #1
 801dc88:	2d2d      	cmp	r5, #45	@ 0x2d
 801dc8a:	d005      	beq.n	801dc98 <__sccl+0x48>
 801dc8c:	2d5d      	cmp	r5, #93	@ 0x5d
 801dc8e:	d016      	beq.n	801dcbe <__sccl+0x6e>
 801dc90:	2d00      	cmp	r5, #0
 801dc92:	d0f1      	beq.n	801dc78 <__sccl+0x28>
 801dc94:	462b      	mov	r3, r5
 801dc96:	e7f2      	b.n	801dc7e <__sccl+0x2e>
 801dc98:	7846      	ldrb	r6, [r0, #1]
 801dc9a:	2e5d      	cmp	r6, #93	@ 0x5d
 801dc9c:	d0fa      	beq.n	801dc94 <__sccl+0x44>
 801dc9e:	42b3      	cmp	r3, r6
 801dca0:	dcf8      	bgt.n	801dc94 <__sccl+0x44>
 801dca2:	3002      	adds	r0, #2
 801dca4:	461a      	mov	r2, r3
 801dca6:	3201      	adds	r2, #1
 801dca8:	4296      	cmp	r6, r2
 801dcaa:	54a1      	strb	r1, [r4, r2]
 801dcac:	dcfb      	bgt.n	801dca6 <__sccl+0x56>
 801dcae:	1af2      	subs	r2, r6, r3
 801dcb0:	3a01      	subs	r2, #1
 801dcb2:	1c5d      	adds	r5, r3, #1
 801dcb4:	42b3      	cmp	r3, r6
 801dcb6:	bfa8      	it	ge
 801dcb8:	2200      	movge	r2, #0
 801dcba:	18ab      	adds	r3, r5, r2
 801dcbc:	e7e1      	b.n	801dc82 <__sccl+0x32>
 801dcbe:	4610      	mov	r0, r2
 801dcc0:	e7da      	b.n	801dc78 <__sccl+0x28>

0801dcc2 <__submore>:
 801dcc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dcc6:	460c      	mov	r4, r1
 801dcc8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 801dcca:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dcce:	4299      	cmp	r1, r3
 801dcd0:	d11d      	bne.n	801dd0e <__submore+0x4c>
 801dcd2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 801dcd6:	f7fd fe07 	bl	801b8e8 <_malloc_r>
 801dcda:	b918      	cbnz	r0, 801dce4 <__submore+0x22>
 801dcdc:	f04f 30ff 	mov.w	r0, #4294967295
 801dce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801dce4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801dce8:	63a3      	str	r3, [r4, #56]	@ 0x38
 801dcea:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 801dcee:	6360      	str	r0, [r4, #52]	@ 0x34
 801dcf0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 801dcf4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 801dcf8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 801dcfc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801dd00:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 801dd04:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 801dd08:	6020      	str	r0, [r4, #0]
 801dd0a:	2000      	movs	r0, #0
 801dd0c:	e7e8      	b.n	801dce0 <__submore+0x1e>
 801dd0e:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 801dd10:	0077      	lsls	r7, r6, #1
 801dd12:	463a      	mov	r2, r7
 801dd14:	f7fe fb1e 	bl	801c354 <_realloc_r>
 801dd18:	4605      	mov	r5, r0
 801dd1a:	2800      	cmp	r0, #0
 801dd1c:	d0de      	beq.n	801dcdc <__submore+0x1a>
 801dd1e:	eb00 0806 	add.w	r8, r0, r6
 801dd22:	4601      	mov	r1, r0
 801dd24:	4632      	mov	r2, r6
 801dd26:	4640      	mov	r0, r8
 801dd28:	f7fc fee3 	bl	801aaf2 <memcpy>
 801dd2c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 801dd30:	f8c4 8000 	str.w	r8, [r4]
 801dd34:	e7e9      	b.n	801dd0a <__submore+0x48>
	...

0801dd38 <_fstat_r>:
 801dd38:	b538      	push	{r3, r4, r5, lr}
 801dd3a:	4d07      	ldr	r5, [pc, #28]	@ (801dd58 <_fstat_r+0x20>)
 801dd3c:	2300      	movs	r3, #0
 801dd3e:	4604      	mov	r4, r0
 801dd40:	4608      	mov	r0, r1
 801dd42:	4611      	mov	r1, r2
 801dd44:	602b      	str	r3, [r5, #0]
 801dd46:	f7eb fe9f 	bl	8009a88 <_fstat>
 801dd4a:	1c43      	adds	r3, r0, #1
 801dd4c:	d102      	bne.n	801dd54 <_fstat_r+0x1c>
 801dd4e:	682b      	ldr	r3, [r5, #0]
 801dd50:	b103      	cbz	r3, 801dd54 <_fstat_r+0x1c>
 801dd52:	6023      	str	r3, [r4, #0]
 801dd54:	bd38      	pop	{r3, r4, r5, pc}
 801dd56:	bf00      	nop
 801dd58:	2000bcc4 	.word	0x2000bcc4

0801dd5c <_isatty_r>:
 801dd5c:	b538      	push	{r3, r4, r5, lr}
 801dd5e:	4d06      	ldr	r5, [pc, #24]	@ (801dd78 <_isatty_r+0x1c>)
 801dd60:	2300      	movs	r3, #0
 801dd62:	4604      	mov	r4, r0
 801dd64:	4608      	mov	r0, r1
 801dd66:	602b      	str	r3, [r5, #0]
 801dd68:	f7eb fe9e 	bl	8009aa8 <_isatty>
 801dd6c:	1c43      	adds	r3, r0, #1
 801dd6e:	d102      	bne.n	801dd76 <_isatty_r+0x1a>
 801dd70:	682b      	ldr	r3, [r5, #0]
 801dd72:	b103      	cbz	r3, 801dd76 <_isatty_r+0x1a>
 801dd74:	6023      	str	r3, [r4, #0]
 801dd76:	bd38      	pop	{r3, r4, r5, pc}
 801dd78:	2000bcc4 	.word	0x2000bcc4

0801dd7c <_sbrk_r>:
 801dd7c:	b538      	push	{r3, r4, r5, lr}
 801dd7e:	4d06      	ldr	r5, [pc, #24]	@ (801dd98 <_sbrk_r+0x1c>)
 801dd80:	2300      	movs	r3, #0
 801dd82:	4604      	mov	r4, r0
 801dd84:	4608      	mov	r0, r1
 801dd86:	602b      	str	r3, [r5, #0]
 801dd88:	f7eb fea6 	bl	8009ad8 <_sbrk>
 801dd8c:	1c43      	adds	r3, r0, #1
 801dd8e:	d102      	bne.n	801dd96 <_sbrk_r+0x1a>
 801dd90:	682b      	ldr	r3, [r5, #0]
 801dd92:	b103      	cbz	r3, 801dd96 <_sbrk_r+0x1a>
 801dd94:	6023      	str	r3, [r4, #0]
 801dd96:	bd38      	pop	{r3, r4, r5, pc}
 801dd98:	2000bcc4 	.word	0x2000bcc4
 801dd9c:	00000000 	.word	0x00000000

0801dda0 <nan>:
 801dda0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 801dda8 <nan+0x8>
 801dda4:	4770      	bx	lr
 801dda6:	bf00      	nop
 801dda8:	00000000 	.word	0x00000000
 801ddac:	7ff80000 	.word	0x7ff80000

0801ddb0 <abort>:
 801ddb0:	b508      	push	{r3, lr}
 801ddb2:	2006      	movs	r0, #6
 801ddb4:	f000 fc10 	bl	801e5d8 <raise>
 801ddb8:	2001      	movs	r0, #1
 801ddba:	f7eb fe31 	bl	8009a20 <_exit>

0801ddbe <_calloc_r>:
 801ddbe:	b570      	push	{r4, r5, r6, lr}
 801ddc0:	fba1 5402 	umull	r5, r4, r1, r2
 801ddc4:	b934      	cbnz	r4, 801ddd4 <_calloc_r+0x16>
 801ddc6:	4629      	mov	r1, r5
 801ddc8:	f7fd fd8e 	bl	801b8e8 <_malloc_r>
 801ddcc:	4606      	mov	r6, r0
 801ddce:	b928      	cbnz	r0, 801dddc <_calloc_r+0x1e>
 801ddd0:	4630      	mov	r0, r6
 801ddd2:	bd70      	pop	{r4, r5, r6, pc}
 801ddd4:	220c      	movs	r2, #12
 801ddd6:	6002      	str	r2, [r0, #0]
 801ddd8:	2600      	movs	r6, #0
 801ddda:	e7f9      	b.n	801ddd0 <_calloc_r+0x12>
 801dddc:	462a      	mov	r2, r5
 801ddde:	4621      	mov	r1, r4
 801dde0:	f7fc fd98 	bl	801a914 <memset>
 801dde4:	e7f4      	b.n	801ddd0 <_calloc_r+0x12>

0801dde6 <rshift>:
 801dde6:	6903      	ldr	r3, [r0, #16]
 801dde8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 801ddec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ddf0:	ea4f 1261 	mov.w	r2, r1, asr #5
 801ddf4:	f100 0414 	add.w	r4, r0, #20
 801ddf8:	dd45      	ble.n	801de86 <rshift+0xa0>
 801ddfa:	f011 011f 	ands.w	r1, r1, #31
 801ddfe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 801de02:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 801de06:	d10c      	bne.n	801de22 <rshift+0x3c>
 801de08:	f100 0710 	add.w	r7, r0, #16
 801de0c:	4629      	mov	r1, r5
 801de0e:	42b1      	cmp	r1, r6
 801de10:	d334      	bcc.n	801de7c <rshift+0x96>
 801de12:	1a9b      	subs	r3, r3, r2
 801de14:	009b      	lsls	r3, r3, #2
 801de16:	1eea      	subs	r2, r5, #3
 801de18:	4296      	cmp	r6, r2
 801de1a:	bf38      	it	cc
 801de1c:	2300      	movcc	r3, #0
 801de1e:	4423      	add	r3, r4
 801de20:	e015      	b.n	801de4e <rshift+0x68>
 801de22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 801de26:	f1c1 0820 	rsb	r8, r1, #32
 801de2a:	40cf      	lsrs	r7, r1
 801de2c:	f105 0e04 	add.w	lr, r5, #4
 801de30:	46a1      	mov	r9, r4
 801de32:	4576      	cmp	r6, lr
 801de34:	46f4      	mov	ip, lr
 801de36:	d815      	bhi.n	801de64 <rshift+0x7e>
 801de38:	1a9a      	subs	r2, r3, r2
 801de3a:	0092      	lsls	r2, r2, #2
 801de3c:	3a04      	subs	r2, #4
 801de3e:	3501      	adds	r5, #1
 801de40:	42ae      	cmp	r6, r5
 801de42:	bf38      	it	cc
 801de44:	2200      	movcc	r2, #0
 801de46:	18a3      	adds	r3, r4, r2
 801de48:	50a7      	str	r7, [r4, r2]
 801de4a:	b107      	cbz	r7, 801de4e <rshift+0x68>
 801de4c:	3304      	adds	r3, #4
 801de4e:	1b1a      	subs	r2, r3, r4
 801de50:	42a3      	cmp	r3, r4
 801de52:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801de56:	bf08      	it	eq
 801de58:	2300      	moveq	r3, #0
 801de5a:	6102      	str	r2, [r0, #16]
 801de5c:	bf08      	it	eq
 801de5e:	6143      	streq	r3, [r0, #20]
 801de60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801de64:	f8dc c000 	ldr.w	ip, [ip]
 801de68:	fa0c fc08 	lsl.w	ip, ip, r8
 801de6c:	ea4c 0707 	orr.w	r7, ip, r7
 801de70:	f849 7b04 	str.w	r7, [r9], #4
 801de74:	f85e 7b04 	ldr.w	r7, [lr], #4
 801de78:	40cf      	lsrs	r7, r1
 801de7a:	e7da      	b.n	801de32 <rshift+0x4c>
 801de7c:	f851 cb04 	ldr.w	ip, [r1], #4
 801de80:	f847 cf04 	str.w	ip, [r7, #4]!
 801de84:	e7c3      	b.n	801de0e <rshift+0x28>
 801de86:	4623      	mov	r3, r4
 801de88:	e7e1      	b.n	801de4e <rshift+0x68>

0801de8a <__hexdig_fun>:
 801de8a:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 801de8e:	2b09      	cmp	r3, #9
 801de90:	d802      	bhi.n	801de98 <__hexdig_fun+0xe>
 801de92:	3820      	subs	r0, #32
 801de94:	b2c0      	uxtb	r0, r0
 801de96:	4770      	bx	lr
 801de98:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 801de9c:	2b05      	cmp	r3, #5
 801de9e:	d801      	bhi.n	801dea4 <__hexdig_fun+0x1a>
 801dea0:	3847      	subs	r0, #71	@ 0x47
 801dea2:	e7f7      	b.n	801de94 <__hexdig_fun+0xa>
 801dea4:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801dea8:	2b05      	cmp	r3, #5
 801deaa:	d801      	bhi.n	801deb0 <__hexdig_fun+0x26>
 801deac:	3827      	subs	r0, #39	@ 0x27
 801deae:	e7f1      	b.n	801de94 <__hexdig_fun+0xa>
 801deb0:	2000      	movs	r0, #0
 801deb2:	4770      	bx	lr

0801deb4 <__gethex>:
 801deb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801deb8:	b085      	sub	sp, #20
 801deba:	468a      	mov	sl, r1
 801debc:	9302      	str	r3, [sp, #8]
 801debe:	680b      	ldr	r3, [r1, #0]
 801dec0:	9001      	str	r0, [sp, #4]
 801dec2:	4690      	mov	r8, r2
 801dec4:	1c9c      	adds	r4, r3, #2
 801dec6:	46a1      	mov	r9, r4
 801dec8:	f814 0b01 	ldrb.w	r0, [r4], #1
 801decc:	2830      	cmp	r0, #48	@ 0x30
 801dece:	d0fa      	beq.n	801dec6 <__gethex+0x12>
 801ded0:	eba9 0303 	sub.w	r3, r9, r3
 801ded4:	f1a3 0b02 	sub.w	fp, r3, #2
 801ded8:	f7ff ffd7 	bl	801de8a <__hexdig_fun>
 801dedc:	4605      	mov	r5, r0
 801dede:	2800      	cmp	r0, #0
 801dee0:	d168      	bne.n	801dfb4 <__gethex+0x100>
 801dee2:	49a0      	ldr	r1, [pc, #640]	@ (801e164 <__gethex+0x2b0>)
 801dee4:	2201      	movs	r2, #1
 801dee6:	4648      	mov	r0, r9
 801dee8:	f7fc fd1c 	bl	801a924 <strncmp>
 801deec:	4607      	mov	r7, r0
 801deee:	2800      	cmp	r0, #0
 801def0:	d167      	bne.n	801dfc2 <__gethex+0x10e>
 801def2:	f899 0001 	ldrb.w	r0, [r9, #1]
 801def6:	4626      	mov	r6, r4
 801def8:	f7ff ffc7 	bl	801de8a <__hexdig_fun>
 801defc:	2800      	cmp	r0, #0
 801defe:	d062      	beq.n	801dfc6 <__gethex+0x112>
 801df00:	4623      	mov	r3, r4
 801df02:	7818      	ldrb	r0, [r3, #0]
 801df04:	2830      	cmp	r0, #48	@ 0x30
 801df06:	4699      	mov	r9, r3
 801df08:	f103 0301 	add.w	r3, r3, #1
 801df0c:	d0f9      	beq.n	801df02 <__gethex+0x4e>
 801df0e:	f7ff ffbc 	bl	801de8a <__hexdig_fun>
 801df12:	fab0 f580 	clz	r5, r0
 801df16:	096d      	lsrs	r5, r5, #5
 801df18:	f04f 0b01 	mov.w	fp, #1
 801df1c:	464a      	mov	r2, r9
 801df1e:	4616      	mov	r6, r2
 801df20:	3201      	adds	r2, #1
 801df22:	7830      	ldrb	r0, [r6, #0]
 801df24:	f7ff ffb1 	bl	801de8a <__hexdig_fun>
 801df28:	2800      	cmp	r0, #0
 801df2a:	d1f8      	bne.n	801df1e <__gethex+0x6a>
 801df2c:	498d      	ldr	r1, [pc, #564]	@ (801e164 <__gethex+0x2b0>)
 801df2e:	2201      	movs	r2, #1
 801df30:	4630      	mov	r0, r6
 801df32:	f7fc fcf7 	bl	801a924 <strncmp>
 801df36:	2800      	cmp	r0, #0
 801df38:	d13f      	bne.n	801dfba <__gethex+0x106>
 801df3a:	b944      	cbnz	r4, 801df4e <__gethex+0x9a>
 801df3c:	1c74      	adds	r4, r6, #1
 801df3e:	4622      	mov	r2, r4
 801df40:	4616      	mov	r6, r2
 801df42:	3201      	adds	r2, #1
 801df44:	7830      	ldrb	r0, [r6, #0]
 801df46:	f7ff ffa0 	bl	801de8a <__hexdig_fun>
 801df4a:	2800      	cmp	r0, #0
 801df4c:	d1f8      	bne.n	801df40 <__gethex+0x8c>
 801df4e:	1ba4      	subs	r4, r4, r6
 801df50:	00a7      	lsls	r7, r4, #2
 801df52:	7833      	ldrb	r3, [r6, #0]
 801df54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 801df58:	2b50      	cmp	r3, #80	@ 0x50
 801df5a:	d13e      	bne.n	801dfda <__gethex+0x126>
 801df5c:	7873      	ldrb	r3, [r6, #1]
 801df5e:	2b2b      	cmp	r3, #43	@ 0x2b
 801df60:	d033      	beq.n	801dfca <__gethex+0x116>
 801df62:	2b2d      	cmp	r3, #45	@ 0x2d
 801df64:	d034      	beq.n	801dfd0 <__gethex+0x11c>
 801df66:	1c71      	adds	r1, r6, #1
 801df68:	2400      	movs	r4, #0
 801df6a:	7808      	ldrb	r0, [r1, #0]
 801df6c:	f7ff ff8d 	bl	801de8a <__hexdig_fun>
 801df70:	1e43      	subs	r3, r0, #1
 801df72:	b2db      	uxtb	r3, r3
 801df74:	2b18      	cmp	r3, #24
 801df76:	d830      	bhi.n	801dfda <__gethex+0x126>
 801df78:	f1a0 0210 	sub.w	r2, r0, #16
 801df7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 801df80:	f7ff ff83 	bl	801de8a <__hexdig_fun>
 801df84:	f100 3cff 	add.w	ip, r0, #4294967295
 801df88:	fa5f fc8c 	uxtb.w	ip, ip
 801df8c:	f1bc 0f18 	cmp.w	ip, #24
 801df90:	f04f 030a 	mov.w	r3, #10
 801df94:	d91e      	bls.n	801dfd4 <__gethex+0x120>
 801df96:	b104      	cbz	r4, 801df9a <__gethex+0xe6>
 801df98:	4252      	negs	r2, r2
 801df9a:	4417      	add	r7, r2
 801df9c:	f8ca 1000 	str.w	r1, [sl]
 801dfa0:	b1ed      	cbz	r5, 801dfde <__gethex+0x12a>
 801dfa2:	f1bb 0f00 	cmp.w	fp, #0
 801dfa6:	bf0c      	ite	eq
 801dfa8:	2506      	moveq	r5, #6
 801dfaa:	2500      	movne	r5, #0
 801dfac:	4628      	mov	r0, r5
 801dfae:	b005      	add	sp, #20
 801dfb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dfb4:	2500      	movs	r5, #0
 801dfb6:	462c      	mov	r4, r5
 801dfb8:	e7b0      	b.n	801df1c <__gethex+0x68>
 801dfba:	2c00      	cmp	r4, #0
 801dfbc:	d1c7      	bne.n	801df4e <__gethex+0x9a>
 801dfbe:	4627      	mov	r7, r4
 801dfc0:	e7c7      	b.n	801df52 <__gethex+0x9e>
 801dfc2:	464e      	mov	r6, r9
 801dfc4:	462f      	mov	r7, r5
 801dfc6:	2501      	movs	r5, #1
 801dfc8:	e7c3      	b.n	801df52 <__gethex+0x9e>
 801dfca:	2400      	movs	r4, #0
 801dfcc:	1cb1      	adds	r1, r6, #2
 801dfce:	e7cc      	b.n	801df6a <__gethex+0xb6>
 801dfd0:	2401      	movs	r4, #1
 801dfd2:	e7fb      	b.n	801dfcc <__gethex+0x118>
 801dfd4:	fb03 0002 	mla	r0, r3, r2, r0
 801dfd8:	e7ce      	b.n	801df78 <__gethex+0xc4>
 801dfda:	4631      	mov	r1, r6
 801dfdc:	e7de      	b.n	801df9c <__gethex+0xe8>
 801dfde:	eba6 0309 	sub.w	r3, r6, r9
 801dfe2:	3b01      	subs	r3, #1
 801dfe4:	4629      	mov	r1, r5
 801dfe6:	2b07      	cmp	r3, #7
 801dfe8:	dc0a      	bgt.n	801e000 <__gethex+0x14c>
 801dfea:	9801      	ldr	r0, [sp, #4]
 801dfec:	f7fd fd08 	bl	801ba00 <_Balloc>
 801dff0:	4604      	mov	r4, r0
 801dff2:	b940      	cbnz	r0, 801e006 <__gethex+0x152>
 801dff4:	4b5c      	ldr	r3, [pc, #368]	@ (801e168 <__gethex+0x2b4>)
 801dff6:	4602      	mov	r2, r0
 801dff8:	21e4      	movs	r1, #228	@ 0xe4
 801dffa:	485c      	ldr	r0, [pc, #368]	@ (801e16c <__gethex+0x2b8>)
 801dffc:	f7fc fd88 	bl	801ab10 <__assert_func>
 801e000:	3101      	adds	r1, #1
 801e002:	105b      	asrs	r3, r3, #1
 801e004:	e7ef      	b.n	801dfe6 <__gethex+0x132>
 801e006:	f100 0a14 	add.w	sl, r0, #20
 801e00a:	2300      	movs	r3, #0
 801e00c:	4655      	mov	r5, sl
 801e00e:	469b      	mov	fp, r3
 801e010:	45b1      	cmp	r9, r6
 801e012:	d337      	bcc.n	801e084 <__gethex+0x1d0>
 801e014:	f845 bb04 	str.w	fp, [r5], #4
 801e018:	eba5 050a 	sub.w	r5, r5, sl
 801e01c:	10ad      	asrs	r5, r5, #2
 801e01e:	6125      	str	r5, [r4, #16]
 801e020:	4658      	mov	r0, fp
 801e022:	f7fd fddf 	bl	801bbe4 <__hi0bits>
 801e026:	016d      	lsls	r5, r5, #5
 801e028:	f8d8 6000 	ldr.w	r6, [r8]
 801e02c:	1a2d      	subs	r5, r5, r0
 801e02e:	42b5      	cmp	r5, r6
 801e030:	dd54      	ble.n	801e0dc <__gethex+0x228>
 801e032:	1bad      	subs	r5, r5, r6
 801e034:	4629      	mov	r1, r5
 801e036:	4620      	mov	r0, r4
 801e038:	f7fe f96b 	bl	801c312 <__any_on>
 801e03c:	4681      	mov	r9, r0
 801e03e:	b178      	cbz	r0, 801e060 <__gethex+0x1ac>
 801e040:	1e6b      	subs	r3, r5, #1
 801e042:	1159      	asrs	r1, r3, #5
 801e044:	f003 021f 	and.w	r2, r3, #31
 801e048:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 801e04c:	f04f 0901 	mov.w	r9, #1
 801e050:	fa09 f202 	lsl.w	r2, r9, r2
 801e054:	420a      	tst	r2, r1
 801e056:	d003      	beq.n	801e060 <__gethex+0x1ac>
 801e058:	454b      	cmp	r3, r9
 801e05a:	dc36      	bgt.n	801e0ca <__gethex+0x216>
 801e05c:	f04f 0902 	mov.w	r9, #2
 801e060:	4629      	mov	r1, r5
 801e062:	4620      	mov	r0, r4
 801e064:	f7ff febf 	bl	801dde6 <rshift>
 801e068:	442f      	add	r7, r5
 801e06a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e06e:	42bb      	cmp	r3, r7
 801e070:	da42      	bge.n	801e0f8 <__gethex+0x244>
 801e072:	9801      	ldr	r0, [sp, #4]
 801e074:	4621      	mov	r1, r4
 801e076:	f7fd fd03 	bl	801ba80 <_Bfree>
 801e07a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e07c:	2300      	movs	r3, #0
 801e07e:	6013      	str	r3, [r2, #0]
 801e080:	25a3      	movs	r5, #163	@ 0xa3
 801e082:	e793      	b.n	801dfac <__gethex+0xf8>
 801e084:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 801e088:	2a2e      	cmp	r2, #46	@ 0x2e
 801e08a:	d012      	beq.n	801e0b2 <__gethex+0x1fe>
 801e08c:	2b20      	cmp	r3, #32
 801e08e:	d104      	bne.n	801e09a <__gethex+0x1e6>
 801e090:	f845 bb04 	str.w	fp, [r5], #4
 801e094:	f04f 0b00 	mov.w	fp, #0
 801e098:	465b      	mov	r3, fp
 801e09a:	7830      	ldrb	r0, [r6, #0]
 801e09c:	9303      	str	r3, [sp, #12]
 801e09e:	f7ff fef4 	bl	801de8a <__hexdig_fun>
 801e0a2:	9b03      	ldr	r3, [sp, #12]
 801e0a4:	f000 000f 	and.w	r0, r0, #15
 801e0a8:	4098      	lsls	r0, r3
 801e0aa:	ea4b 0b00 	orr.w	fp, fp, r0
 801e0ae:	3304      	adds	r3, #4
 801e0b0:	e7ae      	b.n	801e010 <__gethex+0x15c>
 801e0b2:	45b1      	cmp	r9, r6
 801e0b4:	d8ea      	bhi.n	801e08c <__gethex+0x1d8>
 801e0b6:	492b      	ldr	r1, [pc, #172]	@ (801e164 <__gethex+0x2b0>)
 801e0b8:	9303      	str	r3, [sp, #12]
 801e0ba:	2201      	movs	r2, #1
 801e0bc:	4630      	mov	r0, r6
 801e0be:	f7fc fc31 	bl	801a924 <strncmp>
 801e0c2:	9b03      	ldr	r3, [sp, #12]
 801e0c4:	2800      	cmp	r0, #0
 801e0c6:	d1e1      	bne.n	801e08c <__gethex+0x1d8>
 801e0c8:	e7a2      	b.n	801e010 <__gethex+0x15c>
 801e0ca:	1ea9      	subs	r1, r5, #2
 801e0cc:	4620      	mov	r0, r4
 801e0ce:	f7fe f920 	bl	801c312 <__any_on>
 801e0d2:	2800      	cmp	r0, #0
 801e0d4:	d0c2      	beq.n	801e05c <__gethex+0x1a8>
 801e0d6:	f04f 0903 	mov.w	r9, #3
 801e0da:	e7c1      	b.n	801e060 <__gethex+0x1ac>
 801e0dc:	da09      	bge.n	801e0f2 <__gethex+0x23e>
 801e0de:	1b75      	subs	r5, r6, r5
 801e0e0:	4621      	mov	r1, r4
 801e0e2:	9801      	ldr	r0, [sp, #4]
 801e0e4:	462a      	mov	r2, r5
 801e0e6:	f7fd fedb 	bl	801bea0 <__lshift>
 801e0ea:	1b7f      	subs	r7, r7, r5
 801e0ec:	4604      	mov	r4, r0
 801e0ee:	f100 0a14 	add.w	sl, r0, #20
 801e0f2:	f04f 0900 	mov.w	r9, #0
 801e0f6:	e7b8      	b.n	801e06a <__gethex+0x1b6>
 801e0f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801e0fc:	42bd      	cmp	r5, r7
 801e0fe:	dd6f      	ble.n	801e1e0 <__gethex+0x32c>
 801e100:	1bed      	subs	r5, r5, r7
 801e102:	42ae      	cmp	r6, r5
 801e104:	dc34      	bgt.n	801e170 <__gethex+0x2bc>
 801e106:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e10a:	2b02      	cmp	r3, #2
 801e10c:	d022      	beq.n	801e154 <__gethex+0x2a0>
 801e10e:	2b03      	cmp	r3, #3
 801e110:	d024      	beq.n	801e15c <__gethex+0x2a8>
 801e112:	2b01      	cmp	r3, #1
 801e114:	d115      	bne.n	801e142 <__gethex+0x28e>
 801e116:	42ae      	cmp	r6, r5
 801e118:	d113      	bne.n	801e142 <__gethex+0x28e>
 801e11a:	2e01      	cmp	r6, #1
 801e11c:	d10b      	bne.n	801e136 <__gethex+0x282>
 801e11e:	9a02      	ldr	r2, [sp, #8]
 801e120:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801e124:	6013      	str	r3, [r2, #0]
 801e126:	2301      	movs	r3, #1
 801e128:	6123      	str	r3, [r4, #16]
 801e12a:	f8ca 3000 	str.w	r3, [sl]
 801e12e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e130:	2562      	movs	r5, #98	@ 0x62
 801e132:	601c      	str	r4, [r3, #0]
 801e134:	e73a      	b.n	801dfac <__gethex+0xf8>
 801e136:	1e71      	subs	r1, r6, #1
 801e138:	4620      	mov	r0, r4
 801e13a:	f7fe f8ea 	bl	801c312 <__any_on>
 801e13e:	2800      	cmp	r0, #0
 801e140:	d1ed      	bne.n	801e11e <__gethex+0x26a>
 801e142:	9801      	ldr	r0, [sp, #4]
 801e144:	4621      	mov	r1, r4
 801e146:	f7fd fc9b 	bl	801ba80 <_Bfree>
 801e14a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e14c:	2300      	movs	r3, #0
 801e14e:	6013      	str	r3, [r2, #0]
 801e150:	2550      	movs	r5, #80	@ 0x50
 801e152:	e72b      	b.n	801dfac <__gethex+0xf8>
 801e154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e156:	2b00      	cmp	r3, #0
 801e158:	d1f3      	bne.n	801e142 <__gethex+0x28e>
 801e15a:	e7e0      	b.n	801e11e <__gethex+0x26a>
 801e15c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e15e:	2b00      	cmp	r3, #0
 801e160:	d1dd      	bne.n	801e11e <__gethex+0x26a>
 801e162:	e7ee      	b.n	801e142 <__gethex+0x28e>
 801e164:	0802085e 	.word	0x0802085e
 801e168:	080207f4 	.word	0x080207f4
 801e16c:	08020883 	.word	0x08020883
 801e170:	1e6f      	subs	r7, r5, #1
 801e172:	f1b9 0f00 	cmp.w	r9, #0
 801e176:	d130      	bne.n	801e1da <__gethex+0x326>
 801e178:	b127      	cbz	r7, 801e184 <__gethex+0x2d0>
 801e17a:	4639      	mov	r1, r7
 801e17c:	4620      	mov	r0, r4
 801e17e:	f7fe f8c8 	bl	801c312 <__any_on>
 801e182:	4681      	mov	r9, r0
 801e184:	117a      	asrs	r2, r7, #5
 801e186:	2301      	movs	r3, #1
 801e188:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 801e18c:	f007 071f 	and.w	r7, r7, #31
 801e190:	40bb      	lsls	r3, r7
 801e192:	4213      	tst	r3, r2
 801e194:	4629      	mov	r1, r5
 801e196:	4620      	mov	r0, r4
 801e198:	bf18      	it	ne
 801e19a:	f049 0902 	orrne.w	r9, r9, #2
 801e19e:	f7ff fe22 	bl	801dde6 <rshift>
 801e1a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801e1a6:	1b76      	subs	r6, r6, r5
 801e1a8:	2502      	movs	r5, #2
 801e1aa:	f1b9 0f00 	cmp.w	r9, #0
 801e1ae:	d047      	beq.n	801e240 <__gethex+0x38c>
 801e1b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801e1b4:	2b02      	cmp	r3, #2
 801e1b6:	d015      	beq.n	801e1e4 <__gethex+0x330>
 801e1b8:	2b03      	cmp	r3, #3
 801e1ba:	d017      	beq.n	801e1ec <__gethex+0x338>
 801e1bc:	2b01      	cmp	r3, #1
 801e1be:	d109      	bne.n	801e1d4 <__gethex+0x320>
 801e1c0:	f019 0f02 	tst.w	r9, #2
 801e1c4:	d006      	beq.n	801e1d4 <__gethex+0x320>
 801e1c6:	f8da 3000 	ldr.w	r3, [sl]
 801e1ca:	ea49 0903 	orr.w	r9, r9, r3
 801e1ce:	f019 0f01 	tst.w	r9, #1
 801e1d2:	d10e      	bne.n	801e1f2 <__gethex+0x33e>
 801e1d4:	f045 0510 	orr.w	r5, r5, #16
 801e1d8:	e032      	b.n	801e240 <__gethex+0x38c>
 801e1da:	f04f 0901 	mov.w	r9, #1
 801e1de:	e7d1      	b.n	801e184 <__gethex+0x2d0>
 801e1e0:	2501      	movs	r5, #1
 801e1e2:	e7e2      	b.n	801e1aa <__gethex+0x2f6>
 801e1e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e1e6:	f1c3 0301 	rsb	r3, r3, #1
 801e1ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e1ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e1ee:	2b00      	cmp	r3, #0
 801e1f0:	d0f0      	beq.n	801e1d4 <__gethex+0x320>
 801e1f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 801e1f6:	f104 0314 	add.w	r3, r4, #20
 801e1fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 801e1fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 801e202:	f04f 0c00 	mov.w	ip, #0
 801e206:	4618      	mov	r0, r3
 801e208:	f853 2b04 	ldr.w	r2, [r3], #4
 801e20c:	f1b2 3fff 	cmp.w	r2, #4294967295
 801e210:	d01b      	beq.n	801e24a <__gethex+0x396>
 801e212:	3201      	adds	r2, #1
 801e214:	6002      	str	r2, [r0, #0]
 801e216:	2d02      	cmp	r5, #2
 801e218:	f104 0314 	add.w	r3, r4, #20
 801e21c:	d13c      	bne.n	801e298 <__gethex+0x3e4>
 801e21e:	f8d8 2000 	ldr.w	r2, [r8]
 801e222:	3a01      	subs	r2, #1
 801e224:	42b2      	cmp	r2, r6
 801e226:	d109      	bne.n	801e23c <__gethex+0x388>
 801e228:	1171      	asrs	r1, r6, #5
 801e22a:	2201      	movs	r2, #1
 801e22c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801e230:	f006 061f 	and.w	r6, r6, #31
 801e234:	fa02 f606 	lsl.w	r6, r2, r6
 801e238:	421e      	tst	r6, r3
 801e23a:	d13a      	bne.n	801e2b2 <__gethex+0x3fe>
 801e23c:	f045 0520 	orr.w	r5, r5, #32
 801e240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e242:	601c      	str	r4, [r3, #0]
 801e244:	9b02      	ldr	r3, [sp, #8]
 801e246:	601f      	str	r7, [r3, #0]
 801e248:	e6b0      	b.n	801dfac <__gethex+0xf8>
 801e24a:	4299      	cmp	r1, r3
 801e24c:	f843 cc04 	str.w	ip, [r3, #-4]
 801e250:	d8d9      	bhi.n	801e206 <__gethex+0x352>
 801e252:	68a3      	ldr	r3, [r4, #8]
 801e254:	459b      	cmp	fp, r3
 801e256:	db17      	blt.n	801e288 <__gethex+0x3d4>
 801e258:	6861      	ldr	r1, [r4, #4]
 801e25a:	9801      	ldr	r0, [sp, #4]
 801e25c:	3101      	adds	r1, #1
 801e25e:	f7fd fbcf 	bl	801ba00 <_Balloc>
 801e262:	4681      	mov	r9, r0
 801e264:	b918      	cbnz	r0, 801e26e <__gethex+0x3ba>
 801e266:	4b1a      	ldr	r3, [pc, #104]	@ (801e2d0 <__gethex+0x41c>)
 801e268:	4602      	mov	r2, r0
 801e26a:	2184      	movs	r1, #132	@ 0x84
 801e26c:	e6c5      	b.n	801dffa <__gethex+0x146>
 801e26e:	6922      	ldr	r2, [r4, #16]
 801e270:	3202      	adds	r2, #2
 801e272:	f104 010c 	add.w	r1, r4, #12
 801e276:	0092      	lsls	r2, r2, #2
 801e278:	300c      	adds	r0, #12
 801e27a:	f7fc fc3a 	bl	801aaf2 <memcpy>
 801e27e:	4621      	mov	r1, r4
 801e280:	9801      	ldr	r0, [sp, #4]
 801e282:	f7fd fbfd 	bl	801ba80 <_Bfree>
 801e286:	464c      	mov	r4, r9
 801e288:	6923      	ldr	r3, [r4, #16]
 801e28a:	1c5a      	adds	r2, r3, #1
 801e28c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e290:	6122      	str	r2, [r4, #16]
 801e292:	2201      	movs	r2, #1
 801e294:	615a      	str	r2, [r3, #20]
 801e296:	e7be      	b.n	801e216 <__gethex+0x362>
 801e298:	6922      	ldr	r2, [r4, #16]
 801e29a:	455a      	cmp	r2, fp
 801e29c:	dd0b      	ble.n	801e2b6 <__gethex+0x402>
 801e29e:	2101      	movs	r1, #1
 801e2a0:	4620      	mov	r0, r4
 801e2a2:	f7ff fda0 	bl	801dde6 <rshift>
 801e2a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801e2aa:	3701      	adds	r7, #1
 801e2ac:	42bb      	cmp	r3, r7
 801e2ae:	f6ff aee0 	blt.w	801e072 <__gethex+0x1be>
 801e2b2:	2501      	movs	r5, #1
 801e2b4:	e7c2      	b.n	801e23c <__gethex+0x388>
 801e2b6:	f016 061f 	ands.w	r6, r6, #31
 801e2ba:	d0fa      	beq.n	801e2b2 <__gethex+0x3fe>
 801e2bc:	4453      	add	r3, sl
 801e2be:	f1c6 0620 	rsb	r6, r6, #32
 801e2c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801e2c6:	f7fd fc8d 	bl	801bbe4 <__hi0bits>
 801e2ca:	42b0      	cmp	r0, r6
 801e2cc:	dbe7      	blt.n	801e29e <__gethex+0x3ea>
 801e2ce:	e7f0      	b.n	801e2b2 <__gethex+0x3fe>
 801e2d0:	080207f4 	.word	0x080207f4

0801e2d4 <L_shift>:
 801e2d4:	f1c2 0208 	rsb	r2, r2, #8
 801e2d8:	0092      	lsls	r2, r2, #2
 801e2da:	b570      	push	{r4, r5, r6, lr}
 801e2dc:	f1c2 0620 	rsb	r6, r2, #32
 801e2e0:	6843      	ldr	r3, [r0, #4]
 801e2e2:	6804      	ldr	r4, [r0, #0]
 801e2e4:	fa03 f506 	lsl.w	r5, r3, r6
 801e2e8:	432c      	orrs	r4, r5
 801e2ea:	40d3      	lsrs	r3, r2
 801e2ec:	6004      	str	r4, [r0, #0]
 801e2ee:	f840 3f04 	str.w	r3, [r0, #4]!
 801e2f2:	4288      	cmp	r0, r1
 801e2f4:	d3f4      	bcc.n	801e2e0 <L_shift+0xc>
 801e2f6:	bd70      	pop	{r4, r5, r6, pc}

0801e2f8 <__match>:
 801e2f8:	b530      	push	{r4, r5, lr}
 801e2fa:	6803      	ldr	r3, [r0, #0]
 801e2fc:	3301      	adds	r3, #1
 801e2fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e302:	b914      	cbnz	r4, 801e30a <__match+0x12>
 801e304:	6003      	str	r3, [r0, #0]
 801e306:	2001      	movs	r0, #1
 801e308:	bd30      	pop	{r4, r5, pc}
 801e30a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e30e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 801e312:	2d19      	cmp	r5, #25
 801e314:	bf98      	it	ls
 801e316:	3220      	addls	r2, #32
 801e318:	42a2      	cmp	r2, r4
 801e31a:	d0f0      	beq.n	801e2fe <__match+0x6>
 801e31c:	2000      	movs	r0, #0
 801e31e:	e7f3      	b.n	801e308 <__match+0x10>

0801e320 <__hexnan>:
 801e320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e324:	680b      	ldr	r3, [r1, #0]
 801e326:	6801      	ldr	r1, [r0, #0]
 801e328:	115e      	asrs	r6, r3, #5
 801e32a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801e32e:	f013 031f 	ands.w	r3, r3, #31
 801e332:	b087      	sub	sp, #28
 801e334:	bf18      	it	ne
 801e336:	3604      	addne	r6, #4
 801e338:	2500      	movs	r5, #0
 801e33a:	1f37      	subs	r7, r6, #4
 801e33c:	4682      	mov	sl, r0
 801e33e:	4690      	mov	r8, r2
 801e340:	9301      	str	r3, [sp, #4]
 801e342:	f846 5c04 	str.w	r5, [r6, #-4]
 801e346:	46b9      	mov	r9, r7
 801e348:	463c      	mov	r4, r7
 801e34a:	9502      	str	r5, [sp, #8]
 801e34c:	46ab      	mov	fp, r5
 801e34e:	784a      	ldrb	r2, [r1, #1]
 801e350:	1c4b      	adds	r3, r1, #1
 801e352:	9303      	str	r3, [sp, #12]
 801e354:	b342      	cbz	r2, 801e3a8 <__hexnan+0x88>
 801e356:	4610      	mov	r0, r2
 801e358:	9105      	str	r1, [sp, #20]
 801e35a:	9204      	str	r2, [sp, #16]
 801e35c:	f7ff fd95 	bl	801de8a <__hexdig_fun>
 801e360:	2800      	cmp	r0, #0
 801e362:	d151      	bne.n	801e408 <__hexnan+0xe8>
 801e364:	9a04      	ldr	r2, [sp, #16]
 801e366:	9905      	ldr	r1, [sp, #20]
 801e368:	2a20      	cmp	r2, #32
 801e36a:	d818      	bhi.n	801e39e <__hexnan+0x7e>
 801e36c:	9b02      	ldr	r3, [sp, #8]
 801e36e:	459b      	cmp	fp, r3
 801e370:	dd13      	ble.n	801e39a <__hexnan+0x7a>
 801e372:	454c      	cmp	r4, r9
 801e374:	d206      	bcs.n	801e384 <__hexnan+0x64>
 801e376:	2d07      	cmp	r5, #7
 801e378:	dc04      	bgt.n	801e384 <__hexnan+0x64>
 801e37a:	462a      	mov	r2, r5
 801e37c:	4649      	mov	r1, r9
 801e37e:	4620      	mov	r0, r4
 801e380:	f7ff ffa8 	bl	801e2d4 <L_shift>
 801e384:	4544      	cmp	r4, r8
 801e386:	d952      	bls.n	801e42e <__hexnan+0x10e>
 801e388:	2300      	movs	r3, #0
 801e38a:	f1a4 0904 	sub.w	r9, r4, #4
 801e38e:	f844 3c04 	str.w	r3, [r4, #-4]
 801e392:	f8cd b008 	str.w	fp, [sp, #8]
 801e396:	464c      	mov	r4, r9
 801e398:	461d      	mov	r5, r3
 801e39a:	9903      	ldr	r1, [sp, #12]
 801e39c:	e7d7      	b.n	801e34e <__hexnan+0x2e>
 801e39e:	2a29      	cmp	r2, #41	@ 0x29
 801e3a0:	d157      	bne.n	801e452 <__hexnan+0x132>
 801e3a2:	3102      	adds	r1, #2
 801e3a4:	f8ca 1000 	str.w	r1, [sl]
 801e3a8:	f1bb 0f00 	cmp.w	fp, #0
 801e3ac:	d051      	beq.n	801e452 <__hexnan+0x132>
 801e3ae:	454c      	cmp	r4, r9
 801e3b0:	d206      	bcs.n	801e3c0 <__hexnan+0xa0>
 801e3b2:	2d07      	cmp	r5, #7
 801e3b4:	dc04      	bgt.n	801e3c0 <__hexnan+0xa0>
 801e3b6:	462a      	mov	r2, r5
 801e3b8:	4649      	mov	r1, r9
 801e3ba:	4620      	mov	r0, r4
 801e3bc:	f7ff ff8a 	bl	801e2d4 <L_shift>
 801e3c0:	4544      	cmp	r4, r8
 801e3c2:	d936      	bls.n	801e432 <__hexnan+0x112>
 801e3c4:	f1a8 0204 	sub.w	r2, r8, #4
 801e3c8:	4623      	mov	r3, r4
 801e3ca:	f853 1b04 	ldr.w	r1, [r3], #4
 801e3ce:	f842 1f04 	str.w	r1, [r2, #4]!
 801e3d2:	429f      	cmp	r7, r3
 801e3d4:	d2f9      	bcs.n	801e3ca <__hexnan+0xaa>
 801e3d6:	1b3b      	subs	r3, r7, r4
 801e3d8:	f023 0303 	bic.w	r3, r3, #3
 801e3dc:	3304      	adds	r3, #4
 801e3de:	3401      	adds	r4, #1
 801e3e0:	3e03      	subs	r6, #3
 801e3e2:	42b4      	cmp	r4, r6
 801e3e4:	bf88      	it	hi
 801e3e6:	2304      	movhi	r3, #4
 801e3e8:	4443      	add	r3, r8
 801e3ea:	2200      	movs	r2, #0
 801e3ec:	f843 2b04 	str.w	r2, [r3], #4
 801e3f0:	429f      	cmp	r7, r3
 801e3f2:	d2fb      	bcs.n	801e3ec <__hexnan+0xcc>
 801e3f4:	683b      	ldr	r3, [r7, #0]
 801e3f6:	b91b      	cbnz	r3, 801e400 <__hexnan+0xe0>
 801e3f8:	4547      	cmp	r7, r8
 801e3fa:	d128      	bne.n	801e44e <__hexnan+0x12e>
 801e3fc:	2301      	movs	r3, #1
 801e3fe:	603b      	str	r3, [r7, #0]
 801e400:	2005      	movs	r0, #5
 801e402:	b007      	add	sp, #28
 801e404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e408:	3501      	adds	r5, #1
 801e40a:	2d08      	cmp	r5, #8
 801e40c:	f10b 0b01 	add.w	fp, fp, #1
 801e410:	dd06      	ble.n	801e420 <__hexnan+0x100>
 801e412:	4544      	cmp	r4, r8
 801e414:	d9c1      	bls.n	801e39a <__hexnan+0x7a>
 801e416:	2300      	movs	r3, #0
 801e418:	f844 3c04 	str.w	r3, [r4, #-4]
 801e41c:	2501      	movs	r5, #1
 801e41e:	3c04      	subs	r4, #4
 801e420:	6822      	ldr	r2, [r4, #0]
 801e422:	f000 000f 	and.w	r0, r0, #15
 801e426:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 801e42a:	6020      	str	r0, [r4, #0]
 801e42c:	e7b5      	b.n	801e39a <__hexnan+0x7a>
 801e42e:	2508      	movs	r5, #8
 801e430:	e7b3      	b.n	801e39a <__hexnan+0x7a>
 801e432:	9b01      	ldr	r3, [sp, #4]
 801e434:	2b00      	cmp	r3, #0
 801e436:	d0dd      	beq.n	801e3f4 <__hexnan+0xd4>
 801e438:	f1c3 0320 	rsb	r3, r3, #32
 801e43c:	f04f 32ff 	mov.w	r2, #4294967295
 801e440:	40da      	lsrs	r2, r3
 801e442:	f856 3c04 	ldr.w	r3, [r6, #-4]
 801e446:	4013      	ands	r3, r2
 801e448:	f846 3c04 	str.w	r3, [r6, #-4]
 801e44c:	e7d2      	b.n	801e3f4 <__hexnan+0xd4>
 801e44e:	3f04      	subs	r7, #4
 801e450:	e7d0      	b.n	801e3f4 <__hexnan+0xd4>
 801e452:	2004      	movs	r0, #4
 801e454:	e7d5      	b.n	801e402 <__hexnan+0xe2>

0801e456 <__ascii_mbtowc>:
 801e456:	b082      	sub	sp, #8
 801e458:	b901      	cbnz	r1, 801e45c <__ascii_mbtowc+0x6>
 801e45a:	a901      	add	r1, sp, #4
 801e45c:	b142      	cbz	r2, 801e470 <__ascii_mbtowc+0x1a>
 801e45e:	b14b      	cbz	r3, 801e474 <__ascii_mbtowc+0x1e>
 801e460:	7813      	ldrb	r3, [r2, #0]
 801e462:	600b      	str	r3, [r1, #0]
 801e464:	7812      	ldrb	r2, [r2, #0]
 801e466:	1e10      	subs	r0, r2, #0
 801e468:	bf18      	it	ne
 801e46a:	2001      	movne	r0, #1
 801e46c:	b002      	add	sp, #8
 801e46e:	4770      	bx	lr
 801e470:	4610      	mov	r0, r2
 801e472:	e7fb      	b.n	801e46c <__ascii_mbtowc+0x16>
 801e474:	f06f 0001 	mvn.w	r0, #1
 801e478:	e7f8      	b.n	801e46c <__ascii_mbtowc+0x16>

0801e47a <_malloc_usable_size_r>:
 801e47a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e47e:	1f18      	subs	r0, r3, #4
 801e480:	2b00      	cmp	r3, #0
 801e482:	bfbc      	itt	lt
 801e484:	580b      	ldrlt	r3, [r1, r0]
 801e486:	18c0      	addlt	r0, r0, r3
 801e488:	4770      	bx	lr
	...

0801e48c <_strtoul_l.isra.0>:
 801e48c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e490:	4e34      	ldr	r6, [pc, #208]	@ (801e564 <_strtoul_l.isra.0+0xd8>)
 801e492:	4686      	mov	lr, r0
 801e494:	460d      	mov	r5, r1
 801e496:	4628      	mov	r0, r5
 801e498:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e49c:	5d37      	ldrb	r7, [r6, r4]
 801e49e:	f017 0708 	ands.w	r7, r7, #8
 801e4a2:	d1f8      	bne.n	801e496 <_strtoul_l.isra.0+0xa>
 801e4a4:	2c2d      	cmp	r4, #45	@ 0x2d
 801e4a6:	d110      	bne.n	801e4ca <_strtoul_l.isra.0+0x3e>
 801e4a8:	782c      	ldrb	r4, [r5, #0]
 801e4aa:	2701      	movs	r7, #1
 801e4ac:	1c85      	adds	r5, r0, #2
 801e4ae:	f033 0010 	bics.w	r0, r3, #16
 801e4b2:	d115      	bne.n	801e4e0 <_strtoul_l.isra.0+0x54>
 801e4b4:	2c30      	cmp	r4, #48	@ 0x30
 801e4b6:	d10d      	bne.n	801e4d4 <_strtoul_l.isra.0+0x48>
 801e4b8:	7828      	ldrb	r0, [r5, #0]
 801e4ba:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801e4be:	2858      	cmp	r0, #88	@ 0x58
 801e4c0:	d108      	bne.n	801e4d4 <_strtoul_l.isra.0+0x48>
 801e4c2:	786c      	ldrb	r4, [r5, #1]
 801e4c4:	3502      	adds	r5, #2
 801e4c6:	2310      	movs	r3, #16
 801e4c8:	e00a      	b.n	801e4e0 <_strtoul_l.isra.0+0x54>
 801e4ca:	2c2b      	cmp	r4, #43	@ 0x2b
 801e4cc:	bf04      	itt	eq
 801e4ce:	782c      	ldrbeq	r4, [r5, #0]
 801e4d0:	1c85      	addeq	r5, r0, #2
 801e4d2:	e7ec      	b.n	801e4ae <_strtoul_l.isra.0+0x22>
 801e4d4:	2b00      	cmp	r3, #0
 801e4d6:	d1f6      	bne.n	801e4c6 <_strtoul_l.isra.0+0x3a>
 801e4d8:	2c30      	cmp	r4, #48	@ 0x30
 801e4da:	bf14      	ite	ne
 801e4dc:	230a      	movne	r3, #10
 801e4de:	2308      	moveq	r3, #8
 801e4e0:	f04f 38ff 	mov.w	r8, #4294967295
 801e4e4:	2600      	movs	r6, #0
 801e4e6:	fbb8 f8f3 	udiv	r8, r8, r3
 801e4ea:	fb03 f908 	mul.w	r9, r3, r8
 801e4ee:	ea6f 0909 	mvn.w	r9, r9
 801e4f2:	4630      	mov	r0, r6
 801e4f4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 801e4f8:	f1bc 0f09 	cmp.w	ip, #9
 801e4fc:	d810      	bhi.n	801e520 <_strtoul_l.isra.0+0x94>
 801e4fe:	4664      	mov	r4, ip
 801e500:	42a3      	cmp	r3, r4
 801e502:	dd1e      	ble.n	801e542 <_strtoul_l.isra.0+0xb6>
 801e504:	f1b6 3fff 	cmp.w	r6, #4294967295
 801e508:	d007      	beq.n	801e51a <_strtoul_l.isra.0+0x8e>
 801e50a:	4580      	cmp	r8, r0
 801e50c:	d316      	bcc.n	801e53c <_strtoul_l.isra.0+0xb0>
 801e50e:	d101      	bne.n	801e514 <_strtoul_l.isra.0+0x88>
 801e510:	45a1      	cmp	r9, r4
 801e512:	db13      	blt.n	801e53c <_strtoul_l.isra.0+0xb0>
 801e514:	fb00 4003 	mla	r0, r0, r3, r4
 801e518:	2601      	movs	r6, #1
 801e51a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801e51e:	e7e9      	b.n	801e4f4 <_strtoul_l.isra.0+0x68>
 801e520:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 801e524:	f1bc 0f19 	cmp.w	ip, #25
 801e528:	d801      	bhi.n	801e52e <_strtoul_l.isra.0+0xa2>
 801e52a:	3c37      	subs	r4, #55	@ 0x37
 801e52c:	e7e8      	b.n	801e500 <_strtoul_l.isra.0+0x74>
 801e52e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 801e532:	f1bc 0f19 	cmp.w	ip, #25
 801e536:	d804      	bhi.n	801e542 <_strtoul_l.isra.0+0xb6>
 801e538:	3c57      	subs	r4, #87	@ 0x57
 801e53a:	e7e1      	b.n	801e500 <_strtoul_l.isra.0+0x74>
 801e53c:	f04f 36ff 	mov.w	r6, #4294967295
 801e540:	e7eb      	b.n	801e51a <_strtoul_l.isra.0+0x8e>
 801e542:	1c73      	adds	r3, r6, #1
 801e544:	d106      	bne.n	801e554 <_strtoul_l.isra.0+0xc8>
 801e546:	2322      	movs	r3, #34	@ 0x22
 801e548:	f8ce 3000 	str.w	r3, [lr]
 801e54c:	4630      	mov	r0, r6
 801e54e:	b932      	cbnz	r2, 801e55e <_strtoul_l.isra.0+0xd2>
 801e550:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e554:	b107      	cbz	r7, 801e558 <_strtoul_l.isra.0+0xcc>
 801e556:	4240      	negs	r0, r0
 801e558:	2a00      	cmp	r2, #0
 801e55a:	d0f9      	beq.n	801e550 <_strtoul_l.isra.0+0xc4>
 801e55c:	b106      	cbz	r6, 801e560 <_strtoul_l.isra.0+0xd4>
 801e55e:	1e69      	subs	r1, r5, #1
 801e560:	6011      	str	r1, [r2, #0]
 801e562:	e7f5      	b.n	801e550 <_strtoul_l.isra.0+0xc4>
 801e564:	08020e51 	.word	0x08020e51

0801e568 <_strtoul_r>:
 801e568:	f7ff bf90 	b.w	801e48c <_strtoul_l.isra.0>

0801e56c <__ascii_wctomb>:
 801e56c:	4603      	mov	r3, r0
 801e56e:	4608      	mov	r0, r1
 801e570:	b141      	cbz	r1, 801e584 <__ascii_wctomb+0x18>
 801e572:	2aff      	cmp	r2, #255	@ 0xff
 801e574:	d904      	bls.n	801e580 <__ascii_wctomb+0x14>
 801e576:	228a      	movs	r2, #138	@ 0x8a
 801e578:	601a      	str	r2, [r3, #0]
 801e57a:	f04f 30ff 	mov.w	r0, #4294967295
 801e57e:	4770      	bx	lr
 801e580:	700a      	strb	r2, [r1, #0]
 801e582:	2001      	movs	r0, #1
 801e584:	4770      	bx	lr

0801e586 <_raise_r>:
 801e586:	291f      	cmp	r1, #31
 801e588:	b538      	push	{r3, r4, r5, lr}
 801e58a:	4605      	mov	r5, r0
 801e58c:	460c      	mov	r4, r1
 801e58e:	d904      	bls.n	801e59a <_raise_r+0x14>
 801e590:	2316      	movs	r3, #22
 801e592:	6003      	str	r3, [r0, #0]
 801e594:	f04f 30ff 	mov.w	r0, #4294967295
 801e598:	bd38      	pop	{r3, r4, r5, pc}
 801e59a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e59c:	b112      	cbz	r2, 801e5a4 <_raise_r+0x1e>
 801e59e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e5a2:	b94b      	cbnz	r3, 801e5b8 <_raise_r+0x32>
 801e5a4:	4628      	mov	r0, r5
 801e5a6:	f000 f831 	bl	801e60c <_getpid_r>
 801e5aa:	4622      	mov	r2, r4
 801e5ac:	4601      	mov	r1, r0
 801e5ae:	4628      	mov	r0, r5
 801e5b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e5b4:	f000 b818 	b.w	801e5e8 <_kill_r>
 801e5b8:	2b01      	cmp	r3, #1
 801e5ba:	d00a      	beq.n	801e5d2 <_raise_r+0x4c>
 801e5bc:	1c59      	adds	r1, r3, #1
 801e5be:	d103      	bne.n	801e5c8 <_raise_r+0x42>
 801e5c0:	2316      	movs	r3, #22
 801e5c2:	6003      	str	r3, [r0, #0]
 801e5c4:	2001      	movs	r0, #1
 801e5c6:	e7e7      	b.n	801e598 <_raise_r+0x12>
 801e5c8:	2100      	movs	r1, #0
 801e5ca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801e5ce:	4620      	mov	r0, r4
 801e5d0:	4798      	blx	r3
 801e5d2:	2000      	movs	r0, #0
 801e5d4:	e7e0      	b.n	801e598 <_raise_r+0x12>
	...

0801e5d8 <raise>:
 801e5d8:	4b02      	ldr	r3, [pc, #8]	@ (801e5e4 <raise+0xc>)
 801e5da:	4601      	mov	r1, r0
 801e5dc:	6818      	ldr	r0, [r3, #0]
 801e5de:	f7ff bfd2 	b.w	801e586 <_raise_r>
 801e5e2:	bf00      	nop
 801e5e4:	20000160 	.word	0x20000160

0801e5e8 <_kill_r>:
 801e5e8:	b538      	push	{r3, r4, r5, lr}
 801e5ea:	4d07      	ldr	r5, [pc, #28]	@ (801e608 <_kill_r+0x20>)
 801e5ec:	2300      	movs	r3, #0
 801e5ee:	4604      	mov	r4, r0
 801e5f0:	4608      	mov	r0, r1
 801e5f2:	4611      	mov	r1, r2
 801e5f4:	602b      	str	r3, [r5, #0]
 801e5f6:	f7eb fa03 	bl	8009a00 <_kill>
 801e5fa:	1c43      	adds	r3, r0, #1
 801e5fc:	d102      	bne.n	801e604 <_kill_r+0x1c>
 801e5fe:	682b      	ldr	r3, [r5, #0]
 801e600:	b103      	cbz	r3, 801e604 <_kill_r+0x1c>
 801e602:	6023      	str	r3, [r4, #0]
 801e604:	bd38      	pop	{r3, r4, r5, pc}
 801e606:	bf00      	nop
 801e608:	2000bcc4 	.word	0x2000bcc4

0801e60c <_getpid_r>:
 801e60c:	f7eb b9f0 	b.w	80099f0 <_getpid>

0801e610 <_init>:
 801e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e612:	bf00      	nop
 801e614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e616:	bc08      	pop	{r3}
 801e618:	469e      	mov	lr, r3
 801e61a:	4770      	bx	lr

0801e61c <_fini>:
 801e61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e61e:	bf00      	nop
 801e620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e622:	bc08      	pop	{r3}
 801e624:	469e      	mov	lr, r3
 801e626:	4770      	bx	lr
